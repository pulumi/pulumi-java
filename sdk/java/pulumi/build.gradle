plugins {
    id("signing")
    id("java-library")
    id("maven-publish")
    id("com.google.protobuf") version "0.9.4"
    id("jacoco")
}

version = System.getenv("PULUMI_JAVA_SDK_VERSION") ?: "0.0.1"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url("https://maven-central.storage-download.googleapis.com/maven2/")
    }
    mavenCentral()
    mavenLocal()
}

def grpcVersion = "1.57.2"
def protobufVersion = "3.25.5"
def protocVersion = protobufVersion
def guavaVersion = "32.1.2-jre"
def assertjCoreVersion = "3.27.1"
def junitVersion = "5.10.0"
def mockitoCoreVersion = "5.14.2"

dependencies {
    implementation("io.grpc:grpc-protobuf:${grpcVersion}") {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'com.google.guava', module: 'guava'
    }

    implementation("io.grpc:grpc-stub:${grpcVersion}") {
        exclude group: 'com.google.guava', module: 'guava'
    }

    runtimeOnly("io.grpc:grpc-netty-shaded:${grpcVersion}") {
        exclude group: 'com.google.code.gson', module: 'gson'
        exclude group: 'com.google.guava', module: 'guava'
    }

    // Workaround for @javax.annotation.Generated
    // see: https://github.com/grpc/grpc-java/issues/3633
    compileOnly("javax.annotation:javax.annotation-api:1.3.2")
    implementation("com.google.code.findbugs:jsr305:3.0.2")

    // TODO: remove if possible or inline
    implementation("net.javacrumbs.future-converter:future-converter-java8-guava:1.2.0") {
        exclude group: 'com.google.guava', module: 'guava'
    }

    implementation("com.google.guava:guava:${guavaVersion}") {
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
    }

    implementation("com.google.code.gson:gson:2.10")
    implementation("com.google.protobuf:protobuf-java:${protobufVersion}")

    implementation("com.google.protobuf:protobuf-java-util:${protobufVersion}") {
        exclude group: 'com.google.code.gson', module: 'gson'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
    }

    implementation("org.yaml:snakeyaml:2.3")

    implementation("com.github.zafarkhaja:java-semver:0.10.2")

    implementation("org.reflections:reflections:0.10.2")

    testImplementation("io.grpc:grpc-testing:${grpcVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("org.assertj:assertj-core:${assertjCoreVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoCoreVersion}")
    testImplementation("nl.jqno.equalsverifier:equalsverifier:3.18")
    testImplementation("org.junit-pioneer:junit-pioneer:2.3.0")
}

protobuf {
    protoc {
        if (osdetector.os == "osx") {
            artifact = "com.google.protobuf:protoc:${protocVersion}:osx-x86_64"
        } else {
            artifact = "com.google.protobuf:protoc:${protocVersion}"
        }
    }
    plugins {
        grpc {
            if (osdetector.os == "osx") {
               artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}:osx-x86_64"
            } else {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        proto {
            // In addition to the default 'src/main/proto'
            srcDir "$rootDir/../../pulumi/proto"
        }
        java {
            srcDirs "src/main/java"
            srcDirs "build/generated/source/proto/main/grpc"
            srcDirs "build/generated/source/proto/main/java"
        }
    }
    pub {
        java {
            srcDirs "src/main/java"
        }
    }
}

task isolatedTest(type: Test) {
    useJUnitPlatform()

    // Include only the specific test class you want to run in isolation
    include '**/ResourcePackagesIsolatedTest.class'

    // Fork a new JVM process for this specific test
    forkEvery = 1
    maxParallelForks = 1

    // Set up test logging if needed
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'

        // set options for log level LIFECYCLE
        events = ['failed']

        info {
            events = ['failed', 'skipped']
        }

        debug {
            events = ['started', 'skipped', 'failed']
        }
    }

    systemProperty 'java.util.logging.config.file', "${projectDir}/src/test/resources/logging.properties"
}

test {
    useJUnitPlatform()

    // Run general tests, excluding the isolated test
    filter {
        excludeTestsMatching "com.pulumi.serialization.internal.ResourcePackagesIsolatedTest"
    }

    exclude '**/com/pulumi/automation/**'

    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'

        events = ['failed']

        info {
            events = ['failed', 'skipped']
        }

        debug {
            events = ['started', 'skipped', 'failed']
        }
    }

    systemProperty 'java.util.logging.config.file', "${projectDir}/src/test/resources/logging.properties"

    finalizedBy jacocoTestReport
}

task autoTest(type: Test) {
    useJUnitPlatform()

    include '**/com/pulumi/automation/**'
}

task allTests {
    dependsOn test, isolatedTest, autoTest
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    dependsOn test
}

task jacocoAllTestsReport(type: JacocoReport) {
    reports {
        xml {
            required = true
            outputLocation = file("${buildDir}/reports/jacoco/allTests/jacocoTestReport.xml")
        }
        html {
            required = true
            outputLocation = file("${buildDir}/reports/jacoco/allTests/html")
        }
        csv.required = false
    }

    dependsOn allTests

    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)

    executionData fileTree(project.buildDir).include("jacoco/*.exec")
}

task testAll {
    dependsOn jacocoAllTestsReport
}

def ossrhUsername = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
def ossrhPassword = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")

task sourcesJar(type: Jar) {
    from sourceSets.pub.java
    archiveClassifier.set('sources')
}

publishing {
    publications {
        gpr(MavenPublication) {
            groupId = "com.pulumi"
            artifactId = "pulumi"
            version = version
            from components.java
            artifact sourcesJar

            pom {
                inceptionYear = "2022"
                name = "pulumi"
                packaging = "jar"
                description = "Pulumi Java SDK"

                url = "https://github.com/pulumi/pulumi-java"

                scm {
                    connection = "git@github.com:pulumi/pulumi-java.git"
                    developerConnection = "git@github.com:pulumi/pulumi-java.git"
                    url = "https://github.com/pulumi/pulumi-java"
                }

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        id = "pulumi"
                        name = "Pulumi"
                        email = "support@pulumi.com"
                    }
                }
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.jFlags("-Xmx8g", "-Xms512m")

    exclude("com/google/rpc")
    exclude("com/pulumi/bootstrap/internal")
    exclude("com/pulumi/codegen/internal")
    exclude("com/pulumi/context/internal")
    exclude("com/pulumi/core/internal")
    exclude("com/pulumi/deployment/internal")
    exclude("com/pulumi/internal")
    exclude("com/pulumi/resources/internal")
    exclude("com/pulumi/serialization/internal")
    exclude("pulumirpc")
}

def signingKeyId = project.findProperty("signingKeyId") ?: System.getenv("SIGNING_KEY_ID")
def signingKey = project.findProperty("signingKey") ?: System.getenv("SIGNING_KEY")
def signingPassword = project.findProperty("signingPassword") ?: System.getenv("SIGNING_PASSWORD")

if (ossrhUsername) {
    signing {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign publishing.publications.gpr
    }
}


task exportKeyDependencies {
  doLast {
    def info = [:]
    info["com.google.protobuf:protobuf-java"] = "${protobufVersion}"
    info["com.google.protobuf:protobuf-java-util"] = "${protobufVersion}"
    info["com.google.guava:guava"] = "${guavaVersion}"
    info["org.assertj:assertj-core"] = "${assertjCoreVersion}"
    info["org.junit.jupiter:junit-jupiter-api"] = "${junitVersion}"
    info["org.mockito:mockito-core"] = "${mockitoCoreVersion}"

    def infoJson = new groovy.json.JsonBuilder(info).toPrettyString()
    println(infoJson)
  }
}