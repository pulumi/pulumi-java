// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.AppRoleAssignmentArgs;
import com.pulumi.azuread.Utilities;
import com.pulumi.azuread.inputs.AppRoleAssignmentState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages an app role assignment for a group, user or service principal. Can be used to grant admin consent for application permissions.
 * 
 * ## API Permissions
 * 
 * The following API permissions are required in order to use this resource.
 * 
 * When authenticated with a service principal, this resource requires one of the following application roles: `AppRoleAssignment.ReadWrite.All` and `Application.Read.All`, or `AppRoleAssignment.ReadWrite.All` and `Directory.Read.All`, or `Application.ReadWrite.All`, or `Directory.ReadWrite.All`
 * 
 * When authenticated with a user principal, this resource requires one of the following directory roles: `Application Administrator` or `Global Administrator`
 * 
 * ## Example Usage
 * 
 * *App role assignment for accessing Microsoft Graph*
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var wellKnown = Output.of(AzureadFunctions.getApplicationPublishedAppIds());
 * 
 *         var msgraph = new ServicePrincipal(&#34;msgraph&#34;, ServicePrincipalArgs.builder()        
 *             .applicationId(wellKnown.apply(getApplicationPublishedAppIdsResult -&gt; getApplicationPublishedAppIdsResult.getResult().getMicrosoftGraph()))
 *             .useExisting(true)
 *             .build());
 * 
 *         var exampleApplication = new Application(&#34;exampleApplication&#34;, ApplicationArgs.builder()        
 *             .displayName(&#34;example&#34;)
 *             .requiredResourceAccesses(ApplicationRequiredResourceAccess.builder()
 *                 .resourceAppId(wellKnown.apply(getApplicationPublishedAppIdsResult -&gt; getApplicationPublishedAppIdsResult.getResult().getMicrosoftGraph()))
 *                 .resourceAccesses(                
 *                     ApplicationRequiredResourceAccessResourceAccess.builder()
 *                         .id(msgraph.getAppRoleIds().apply(appRoleIds -&gt; appRoleIds.getUser.Read.All()))
 *                         .type(&#34;Role&#34;)
 *                         .build(),
 *                     ApplicationRequiredResourceAccessResourceAccess.builder()
 *                         .id(msgraph.getOauth2PermissionScopeIds().apply(oauth2PermissionScopeIds -&gt; oauth2PermissionScopeIds.getUser.ReadWrite()))
 *                         .type(&#34;Scope&#34;)
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *         var exampleServicePrincipal = new ServicePrincipal(&#34;exampleServicePrincipal&#34;, ServicePrincipalArgs.builder()        
 *             .applicationId(exampleApplication.getApplicationId())
 *             .build());
 * 
 *         var exampleAppRoleAssignment = new AppRoleAssignment(&#34;exampleAppRoleAssignment&#34;, AppRoleAssignmentArgs.builder()        
 *             .appRoleId(msgraph.getAppRoleIds().apply(appRoleIds -&gt; appRoleIds.getUser.Read.All()))
 *             .principalObjectId(exampleServicePrincipal.getObjectId())
 *             .resourceObjectId(msgraph.getObjectId())
 *             .build());
 * 
 *         }
 * }
 * ```
 * 
 * *App role assignment for internal application*
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var internalApplication = new Application(&#34;internalApplication&#34;, ApplicationArgs.builder()        
 *             .displayName(&#34;internal&#34;)
 *             .appRoles(ApplicationAppRole.builder()
 *                 .allowedMemberTypes(&#34;Application&#34;)
 *                 .description(&#34;Apps can query the database&#34;)
 *                 .displayName(&#34;Query&#34;)
 *                 .enabled(true)
 *                 .id(&#34;00000000-0000-0000-0000-111111111111&#34;)
 *                 .value(&#34;Query.All&#34;)
 *                 .build())
 *             .build());
 * 
 *         var internalServicePrincipal = new ServicePrincipal(&#34;internalServicePrincipal&#34;, ServicePrincipalArgs.builder()        
 *             .applicationId(internalApplication.getApplicationId())
 *             .build());
 * 
 *         var exampleApplication = new Application(&#34;exampleApplication&#34;, ApplicationArgs.builder()        
 *             .displayName(&#34;example&#34;)
 *             .requiredResourceAccesses(ApplicationRequiredResourceAccess.builder()
 *                 .resourceAppId(internalApplication.getApplicationId())
 *                 .resourceAccesses(ApplicationRequiredResourceAccessResourceAccess.builder()
 *                     .id(internalServicePrincipal.getAppRoleIds().apply(appRoleIds -&gt; appRoleIds.getQuery.All()))
 *                     .type(&#34;Role&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var exampleServicePrincipal = new ServicePrincipal(&#34;exampleServicePrincipal&#34;, ServicePrincipalArgs.builder()        
 *             .applicationId(exampleApplication.getApplicationId())
 *             .build());
 * 
 *         var exampleAppRoleAssignment = new AppRoleAssignment(&#34;exampleAppRoleAssignment&#34;, AppRoleAssignmentArgs.builder()        
 *             .appRoleId(internalServicePrincipal.getAppRoleIds().apply(appRoleIds -&gt; appRoleIds.getQuery.All()))
 *             .principalObjectId(exampleServicePrincipal.getObjectId())
 *             .resourceObjectId(internalServicePrincipal.getObjectId())
 *             .build());
 * 
 *         }
 * }
 * ```
 * 
 * *Assign a user and group to an internal application*
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var exampleDomains = Output.of(AzureadFunctions.getDomains(GetDomainsArgs.builder()
 *             .onlyInitial(true)
 *             .build()));
 * 
 *         var internalApplication = new Application(&#34;internalApplication&#34;, ApplicationArgs.builder()        
 *             .displayName(&#34;internal&#34;)
 *             .appRoles(ApplicationAppRole.builder()
 *                 .allowedMemberTypes(                
 *                     &#34;Application&#34;,
 *                     &#34;User&#34;)
 *                 .description(&#34;Admins can perform all task actions&#34;)
 *                 .displayName(&#34;Admin&#34;)
 *                 .enabled(true)
 *                 .id(&#34;00000000-0000-0000-0000-222222222222&#34;)
 *                 .value(&#34;Admin.All&#34;)
 *                 .build())
 *             .build());
 * 
 *         var internalServicePrincipal = new ServicePrincipal(&#34;internalServicePrincipal&#34;, ServicePrincipalArgs.builder()        
 *             .applicationId(internalApplication.getApplicationId())
 *             .build());
 * 
 *         var exampleGroup = new Group(&#34;exampleGroup&#34;, GroupArgs.builder()        
 *             .displayName(&#34;example&#34;)
 *             .securityEnabled(true)
 *             .build());
 * 
 *         var exampleAppRoleAssignment = new AppRoleAssignment(&#34;exampleAppRoleAssignment&#34;, AppRoleAssignmentArgs.builder()        
 *             .appRoleId(internalServicePrincipal.getAppRoleIds().apply(appRoleIds -&gt; appRoleIds.getAdmin.All()))
 *             .principalObjectId(exampleGroup.getObjectId())
 *             .resourceObjectId(internalServicePrincipal.getObjectId())
 *             .build());
 * 
 *         var exampleUser = new User(&#34;exampleUser&#34;, UserArgs.builder()        
 *             .displayName(&#34;D. Duck&#34;)
 *             .password(&#34;SecretP@sswd99!&#34;)
 *             .userPrincipalName(String.format(&#34;d.duck@%s&#34;, exampleDomains.apply(getDomainsResult -&gt; getDomainsResult.getDomains()[0].getDomainName())))
 *             .build());
 * 
 *         var exampleIndex_appRoleAssignmentAppRoleAssignment = new AppRoleAssignment(&#34;exampleIndex/appRoleAssignmentAppRoleAssignment&#34;, AppRoleAssignmentArgs.builder()        
 *             .appRoleId(internalServicePrincipal.getAppRoleIds().apply(appRoleIds -&gt; appRoleIds.getAdmin.All()))
 *             .principalObjectId(exampleUser.getObjectId())
 *             .resourceObjectId(internalServicePrincipal.getObjectId())
 *             .build());
 * 
 *         }
 * }
 * ```
 * 
 * ## Import
 * 
 * App role assignments can be imported using the object ID of the service principal representing the resource and the ID of the app role assignment (note_not_ the ID of the app role), e.g.
 * 
 * ```sh
 *  $ pulumi import azuread:index/appRoleAssignment:AppRoleAssignment example 00000000-0000-0000-0000-000000000000/appRoleAssignment/aaBBcDDeFG6h5JKLMN2PQrrssTTUUvWWxxxxxyyyzzz
 * ```
 * 
 *  -&gt; This ID format is unique to Terraform and is composed of the Resource Service Principal Object ID and the ID of the App Role Assignment in the format `{ResourcePrincipalID}/appRoleAssignment/{AppRoleAssignmentID}`.
 * 
 */
@ResourceType(type="azuread:index/appRoleAssignment:AppRoleAssignment")
public class AppRoleAssignment extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the app role to be assigned. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="appRoleId", type=String.class, parameters={})
    private Output<String> appRoleId;

    /**
     * @return The ID of the app role to be assigned. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> appRoleId() {
        return this.appRoleId;
    }
    /**
     * The display name of the principal to which the app role is assigned.
     * 
     */
    @Export(name="principalDisplayName", type=String.class, parameters={})
    private Output<String> principalDisplayName;

    /**
     * @return The display name of the principal to which the app role is assigned.
     * 
     */
    public Output<String> principalDisplayName() {
        return this.principalDisplayName;
    }
    /**
     * The object ID of the user, group or service principal to be assigned this app role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="principalObjectId", type=String.class, parameters={})
    private Output<String> principalObjectId;

    /**
     * @return The object ID of the user, group or service principal to be assigned this app role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> principalObjectId() {
        return this.principalObjectId;
    }
    /**
     * The object type of the principal to which the app role is assigned.
     * 
     */
    @Export(name="principalType", type=String.class, parameters={})
    private Output<String> principalType;

    /**
     * @return The object type of the principal to which the app role is assigned.
     * 
     */
    public Output<String> principalType() {
        return this.principalType;
    }
    /**
     * The display name of the application representing the resource.
     * 
     */
    @Export(name="resourceDisplayName", type=String.class, parameters={})
    private Output<String> resourceDisplayName;

    /**
     * @return The display name of the application representing the resource.
     * 
     */
    public Output<String> resourceDisplayName() {
        return this.resourceDisplayName;
    }
    /**
     * The object ID of the service principal representing the resource. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceObjectId", type=String.class, parameters={})
    private Output<String> resourceObjectId;

    /**
     * @return The object ID of the service principal representing the resource. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceObjectId() {
        return this.resourceObjectId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AppRoleAssignment(String name) {
        this(name, AppRoleAssignmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AppRoleAssignment(String name, AppRoleAssignmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AppRoleAssignment(String name, AppRoleAssignmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/appRoleAssignment:AppRoleAssignment", name, args == null ? AppRoleAssignmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AppRoleAssignment(String name, Output<String> id, @Nullable AppRoleAssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/appRoleAssignment:AppRoleAssignment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AppRoleAssignment get(String name, Output<String> id, @Nullable AppRoleAssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AppRoleAssignment(name, id, state, options);
    }
}
