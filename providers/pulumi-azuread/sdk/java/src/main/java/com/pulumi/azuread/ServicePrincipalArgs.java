// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.inputs.ServicePrincipalFeatureArgs;
import com.pulumi.azuread.inputs.ServicePrincipalFeatureTagArgs;
import com.pulumi.azuread.inputs.ServicePrincipalSamlSingleSignOnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServicePrincipalArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicePrincipalArgs Empty = new ServicePrincipalArgs();

    /**
     * Whether or not the service principal account is enabled. Defaults to `true`.
     * 
     */
    @Import(name="accountEnabled")
      private final @Nullable Output<Boolean> accountEnabled;

    public Output<Boolean> accountEnabled() {
        return this.accountEnabled == null ? Codegen.empty() : this.accountEnabled;
    }

    /**
     * A set of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.
     * 
     */
    @Import(name="alternativeNames")
      private final @Nullable Output<List<String>> alternativeNames;

    public Output<List<String>> alternativeNames() {
        return this.alternativeNames == null ? Codegen.empty() : this.alternativeNames;
    }

    /**
     * Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
     * 
     */
    @Import(name="appRoleAssignmentRequired")
      private final @Nullable Output<Boolean> appRoleAssignmentRequired;

    public Output<Boolean> appRoleAssignmentRequired() {
        return this.appRoleAssignmentRequired == null ? Codegen.empty() : this.appRoleAssignmentRequired;
    }

    /**
     * The application ID (client ID) of the application for which to create a service principal.
     * 
     */
    @Import(name="applicationId", required=true)
      private final Output<String> applicationId;

    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * A description of the service principal provided for internal end-users.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * A `feature_tags` block as described below. Cannot be used together with the `tags` property.
     * 
     */
    @Import(name="featureTags")
      private final @Nullable Output<List<ServicePrincipalFeatureTagArgs>> featureTags;

    public Output<List<ServicePrincipalFeatureTagArgs>> featureTags() {
        return this.featureTags == null ? Codegen.empty() : this.featureTags;
    }

    /**
     * Block of features to configure for this service principal using tags
     * 
     * @Deprecated
     * This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
     * 
     */
    @Deprecated /* This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider */
    @Import(name="features")
      private final @Nullable Output<List<ServicePrincipalFeatureArgs>> features;

    @Deprecated /* This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider */
    public Output<List<ServicePrincipalFeatureArgs>> features() {
        return this.features == null ? Codegen.empty() : this.features;
    }

    /**
     * The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on.
     * 
     */
    @Import(name="loginUrl")
      private final @Nullable Output<String> loginUrl;

    public Output<String> loginUrl() {
        return this.loginUrl == null ? Codegen.empty() : this.loginUrl;
    }

    /**
     * A free text field to capture information about the service principal, typically used for operational purposes.
     * 
     */
    @Import(name="notes")
      private final @Nullable Output<String> notes;

    public Output<String> notes() {
        return this.notes == null ? Codegen.empty() : this.notes;
    }

    /**
     * A set of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.
     * 
     */
    @Import(name="notificationEmailAddresses")
      private final @Nullable Output<List<String>> notificationEmailAddresses;

    public Output<List<String>> notificationEmailAddresses() {
        return this.notificationEmailAddresses == null ? Codegen.empty() : this.notificationEmailAddresses;
    }

    /**
     * A set of object IDs of principals that will be granted ownership of the service principal. Supported object types are users or service principals. By default, no owners are assigned.
     * 
     */
    @Import(name="owners")
      private final @Nullable Output<List<String>> owners;

    public Output<List<String>> owners() {
        return this.owners == null ? Codegen.empty() : this.owners;
    }

    /**
     * The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps. Supported values are `oidc`, `password`, `saml` or `notSupported`. Omit this property or specify a blank string to unset.
     * 
     */
    @Import(name="preferredSingleSignOnMode")
      private final @Nullable Output<String> preferredSingleSignOnMode;

    public Output<String> preferredSingleSignOnMode() {
        return this.preferredSingleSignOnMode == null ? Codegen.empty() : this.preferredSingleSignOnMode;
    }

    /**
     * A `saml_single_sign_on` block as documented below.
     * 
     */
    @Import(name="samlSingleSignOn")
      private final @Nullable Output<ServicePrincipalSamlSingleSignOnArgs> samlSingleSignOn;

    public Output<ServicePrincipalSamlSingleSignOnArgs> samlSingleSignOn() {
        return this.samlSingleSignOn == null ? Codegen.empty() : this.samlSingleSignOn;
    }

    /**
     * A set of tags to apply to the service principal. Cannot be used together with the `feature_tags` block.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<String>> tags;

    public Output<List<String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * When true, any existing service principal linked to the same application will be automatically imported. When false, an import error will be raised for any pre-existing service principal.
     * 
     */
    @Import(name="useExisting")
      private final @Nullable Output<Boolean> useExisting;

    public Output<Boolean> useExisting() {
        return this.useExisting == null ? Codegen.empty() : this.useExisting;
    }

    public ServicePrincipalArgs(
        @Nullable Output<Boolean> accountEnabled,
        @Nullable Output<List<String>> alternativeNames,
        @Nullable Output<Boolean> appRoleAssignmentRequired,
        Output<String> applicationId,
        @Nullable Output<String> description,
        @Nullable Output<List<ServicePrincipalFeatureTagArgs>> featureTags,
        @Nullable Output<List<ServicePrincipalFeatureArgs>> features,
        @Nullable Output<String> loginUrl,
        @Nullable Output<String> notes,
        @Nullable Output<List<String>> notificationEmailAddresses,
        @Nullable Output<List<String>> owners,
        @Nullable Output<String> preferredSingleSignOnMode,
        @Nullable Output<ServicePrincipalSamlSingleSignOnArgs> samlSingleSignOn,
        @Nullable Output<List<String>> tags,
        @Nullable Output<Boolean> useExisting) {
        this.accountEnabled = accountEnabled;
        this.alternativeNames = alternativeNames;
        this.appRoleAssignmentRequired = appRoleAssignmentRequired;
        this.applicationId = Objects.requireNonNull(applicationId, "expected parameter 'applicationId' to be non-null");
        this.description = description;
        this.featureTags = featureTags;
        this.features = features;
        this.loginUrl = loginUrl;
        this.notes = notes;
        this.notificationEmailAddresses = notificationEmailAddresses;
        this.owners = owners;
        this.preferredSingleSignOnMode = preferredSingleSignOnMode;
        this.samlSingleSignOn = samlSingleSignOn;
        this.tags = tags;
        this.useExisting = useExisting;
    }

    private ServicePrincipalArgs() {
        this.accountEnabled = Codegen.empty();
        this.alternativeNames = Codegen.empty();
        this.appRoleAssignmentRequired = Codegen.empty();
        this.applicationId = Codegen.empty();
        this.description = Codegen.empty();
        this.featureTags = Codegen.empty();
        this.features = Codegen.empty();
        this.loginUrl = Codegen.empty();
        this.notes = Codegen.empty();
        this.notificationEmailAddresses = Codegen.empty();
        this.owners = Codegen.empty();
        this.preferredSingleSignOnMode = Codegen.empty();
        this.samlSingleSignOn = Codegen.empty();
        this.tags = Codegen.empty();
        this.useExisting = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePrincipalArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> accountEnabled;
        private @Nullable Output<List<String>> alternativeNames;
        private @Nullable Output<Boolean> appRoleAssignmentRequired;
        private Output<String> applicationId;
        private @Nullable Output<String> description;
        private @Nullable Output<List<ServicePrincipalFeatureTagArgs>> featureTags;
        private @Nullable Output<List<ServicePrincipalFeatureArgs>> features;
        private @Nullable Output<String> loginUrl;
        private @Nullable Output<String> notes;
        private @Nullable Output<List<String>> notificationEmailAddresses;
        private @Nullable Output<List<String>> owners;
        private @Nullable Output<String> preferredSingleSignOnMode;
        private @Nullable Output<ServicePrincipalSamlSingleSignOnArgs> samlSingleSignOn;
        private @Nullable Output<List<String>> tags;
        private @Nullable Output<Boolean> useExisting;

        public Builder() {
    	      // Empty
        }

        public Builder(ServicePrincipalArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountEnabled = defaults.accountEnabled;
    	      this.alternativeNames = defaults.alternativeNames;
    	      this.appRoleAssignmentRequired = defaults.appRoleAssignmentRequired;
    	      this.applicationId = defaults.applicationId;
    	      this.description = defaults.description;
    	      this.featureTags = defaults.featureTags;
    	      this.features = defaults.features;
    	      this.loginUrl = defaults.loginUrl;
    	      this.notes = defaults.notes;
    	      this.notificationEmailAddresses = defaults.notificationEmailAddresses;
    	      this.owners = defaults.owners;
    	      this.preferredSingleSignOnMode = defaults.preferredSingleSignOnMode;
    	      this.samlSingleSignOn = defaults.samlSingleSignOn;
    	      this.tags = defaults.tags;
    	      this.useExisting = defaults.useExisting;
        }

        public Builder accountEnabled(@Nullable Output<Boolean> accountEnabled) {
            this.accountEnabled = accountEnabled;
            return this;
        }
        public Builder accountEnabled(@Nullable Boolean accountEnabled) {
            this.accountEnabled = Codegen.ofNullable(accountEnabled);
            return this;
        }
        public Builder alternativeNames(@Nullable Output<List<String>> alternativeNames) {
            this.alternativeNames = alternativeNames;
            return this;
        }
        public Builder alternativeNames(@Nullable List<String> alternativeNames) {
            this.alternativeNames = Codegen.ofNullable(alternativeNames);
            return this;
        }
        public Builder alternativeNames(String... alternativeNames) {
            return alternativeNames(List.of(alternativeNames));
        }
        public Builder appRoleAssignmentRequired(@Nullable Output<Boolean> appRoleAssignmentRequired) {
            this.appRoleAssignmentRequired = appRoleAssignmentRequired;
            return this;
        }
        public Builder appRoleAssignmentRequired(@Nullable Boolean appRoleAssignmentRequired) {
            this.appRoleAssignmentRequired = Codegen.ofNullable(appRoleAssignmentRequired);
            return this;
        }
        public Builder applicationId(Output<String> applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }
        public Builder applicationId(String applicationId) {
            this.applicationId = Output.of(Objects.requireNonNull(applicationId));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder featureTags(@Nullable Output<List<ServicePrincipalFeatureTagArgs>> featureTags) {
            this.featureTags = featureTags;
            return this;
        }
        public Builder featureTags(@Nullable List<ServicePrincipalFeatureTagArgs> featureTags) {
            this.featureTags = Codegen.ofNullable(featureTags);
            return this;
        }
        public Builder featureTags(ServicePrincipalFeatureTagArgs... featureTags) {
            return featureTags(List.of(featureTags));
        }
        public Builder features(@Nullable Output<List<ServicePrincipalFeatureArgs>> features) {
            this.features = features;
            return this;
        }
        public Builder features(@Nullable List<ServicePrincipalFeatureArgs> features) {
            this.features = Codegen.ofNullable(features);
            return this;
        }
        public Builder features(ServicePrincipalFeatureArgs... features) {
            return features(List.of(features));
        }
        public Builder loginUrl(@Nullable Output<String> loginUrl) {
            this.loginUrl = loginUrl;
            return this;
        }
        public Builder loginUrl(@Nullable String loginUrl) {
            this.loginUrl = Codegen.ofNullable(loginUrl);
            return this;
        }
        public Builder notes(@Nullable Output<String> notes) {
            this.notes = notes;
            return this;
        }
        public Builder notes(@Nullable String notes) {
            this.notes = Codegen.ofNullable(notes);
            return this;
        }
        public Builder notificationEmailAddresses(@Nullable Output<List<String>> notificationEmailAddresses) {
            this.notificationEmailAddresses = notificationEmailAddresses;
            return this;
        }
        public Builder notificationEmailAddresses(@Nullable List<String> notificationEmailAddresses) {
            this.notificationEmailAddresses = Codegen.ofNullable(notificationEmailAddresses);
            return this;
        }
        public Builder notificationEmailAddresses(String... notificationEmailAddresses) {
            return notificationEmailAddresses(List.of(notificationEmailAddresses));
        }
        public Builder owners(@Nullable Output<List<String>> owners) {
            this.owners = owners;
            return this;
        }
        public Builder owners(@Nullable List<String> owners) {
            this.owners = Codegen.ofNullable(owners);
            return this;
        }
        public Builder owners(String... owners) {
            return owners(List.of(owners));
        }
        public Builder preferredSingleSignOnMode(@Nullable Output<String> preferredSingleSignOnMode) {
            this.preferredSingleSignOnMode = preferredSingleSignOnMode;
            return this;
        }
        public Builder preferredSingleSignOnMode(@Nullable String preferredSingleSignOnMode) {
            this.preferredSingleSignOnMode = Codegen.ofNullable(preferredSingleSignOnMode);
            return this;
        }
        public Builder samlSingleSignOn(@Nullable Output<ServicePrincipalSamlSingleSignOnArgs> samlSingleSignOn) {
            this.samlSingleSignOn = samlSingleSignOn;
            return this;
        }
        public Builder samlSingleSignOn(@Nullable ServicePrincipalSamlSingleSignOnArgs samlSingleSignOn) {
            this.samlSingleSignOn = Codegen.ofNullable(samlSingleSignOn);
            return this;
        }
        public Builder tags(@Nullable Output<List<String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder useExisting(@Nullable Output<Boolean> useExisting) {
            this.useExisting = useExisting;
            return this;
        }
        public Builder useExisting(@Nullable Boolean useExisting) {
            this.useExisting = Codegen.ofNullable(useExisting);
            return this;
        }        public ServicePrincipalArgs build() {
            return new ServicePrincipalArgs(accountEnabled, alternativeNames, appRoleAssignmentRequired, applicationId, description, featureTags, features, loginUrl, notes, notificationEmailAddresses, owners, preferredSingleSignOnMode, samlSingleSignOn, tags, useExisting);
        }
    }
}
