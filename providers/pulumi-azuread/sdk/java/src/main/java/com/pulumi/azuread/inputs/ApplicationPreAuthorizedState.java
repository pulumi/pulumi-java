// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationPreAuthorizedState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationPreAuthorizedState Empty = new ApplicationPreAuthorizedState();

    /**
     * The object ID of the application for which permissions are being authorized. Changing this field forces a new resource to be created.
     * 
     */
    @Import(name="applicationObjectId")
    private @Nullable Output<String> applicationObjectId;

    /**
     * @return The object ID of the application for which permissions are being authorized. Changing this field forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> applicationObjectId() {
        return Optional.ofNullable(this.applicationObjectId);
    }

    /**
     * The application ID of the pre-authorized application
     * 
     */
    @Import(name="authorizedAppId")
    private @Nullable Output<String> authorizedAppId;

    /**
     * @return The application ID of the pre-authorized application
     * 
     */
    public Optional<Output<String>> authorizedAppId() {
        return Optional.ofNullable(this.authorizedAppId);
    }

    /**
     * A set of permission scope IDs required by the authorized application.
     * 
     */
    @Import(name="permissionIds")
    private @Nullable Output<List<String>> permissionIds;

    /**
     * @return A set of permission scope IDs required by the authorized application.
     * 
     */
    public Optional<Output<List<String>>> permissionIds() {
        return Optional.ofNullable(this.permissionIds);
    }

    private ApplicationPreAuthorizedState() {}

    private ApplicationPreAuthorizedState(ApplicationPreAuthorizedState $) {
        this.applicationObjectId = $.applicationObjectId;
        this.authorizedAppId = $.authorizedAppId;
        this.permissionIds = $.permissionIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationPreAuthorizedState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationPreAuthorizedState $;

        public Builder() {
            $ = new ApplicationPreAuthorizedState();
        }

        public Builder(ApplicationPreAuthorizedState defaults) {
            $ = new ApplicationPreAuthorizedState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationObjectId The object ID of the application for which permissions are being authorized. Changing this field forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationObjectId(@Nullable Output<String> applicationObjectId) {
            $.applicationObjectId = applicationObjectId;
            return this;
        }

        /**
         * @param applicationObjectId The object ID of the application for which permissions are being authorized. Changing this field forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationObjectId(String applicationObjectId) {
            return applicationObjectId(Output.of(applicationObjectId));
        }

        /**
         * @param authorizedAppId The application ID of the pre-authorized application
         * 
         * @return builder
         * 
         */
        public Builder authorizedAppId(@Nullable Output<String> authorizedAppId) {
            $.authorizedAppId = authorizedAppId;
            return this;
        }

        /**
         * @param authorizedAppId The application ID of the pre-authorized application
         * 
         * @return builder
         * 
         */
        public Builder authorizedAppId(String authorizedAppId) {
            return authorizedAppId(Output.of(authorizedAppId));
        }

        /**
         * @param permissionIds A set of permission scope IDs required by the authorized application.
         * 
         * @return builder
         * 
         */
        public Builder permissionIds(@Nullable Output<List<String>> permissionIds) {
            $.permissionIds = permissionIds;
            return this;
        }

        /**
         * @param permissionIds A set of permission scope IDs required by the authorized application.
         * 
         * @return builder
         * 
         */
        public Builder permissionIds(List<String> permissionIds) {
            return permissionIds(Output.of(permissionIds));
        }

        /**
         * @param permissionIds A set of permission scope IDs required by the authorized application.
         * 
         * @return builder
         * 
         */
        public Builder permissionIds(String... permissionIds) {
            return permissionIds(List.of(permissionIds));
        }

        public ApplicationPreAuthorizedState build() {
            return $;
        }
    }

}
