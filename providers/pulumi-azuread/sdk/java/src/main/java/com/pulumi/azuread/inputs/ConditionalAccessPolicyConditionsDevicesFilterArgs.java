// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ConditionalAccessPolicyConditionsDevicesFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyConditionsDevicesFilterArgs Empty = new ConditionalAccessPolicyConditionsDevicesFilterArgs();

    /**
     * Whether to include in, or exclude from, matching devices from the policy. Supported values are `include` or `exclude`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return Whether to include in, or exclude from, matching devices from the policy. Supported values are `include` or `exclude`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * Condition filter to match devices. For more information, see [official documentation](https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-condition-filters-for-devices#supported-operators-and-device-properties-for-filters).
     * 
     */
    @Import(name="rule", required=true)
    private Output<String> rule;

    /**
     * @return Condition filter to match devices. For more information, see [official documentation](https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-condition-filters-for-devices#supported-operators-and-device-properties-for-filters).
     * 
     */
    public Output<String> rule() {
        return this.rule;
    }

    private ConditionalAccessPolicyConditionsDevicesFilterArgs() {}

    private ConditionalAccessPolicyConditionsDevicesFilterArgs(ConditionalAccessPolicyConditionsDevicesFilterArgs $) {
        this.mode = $.mode;
        this.rule = $.rule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalAccessPolicyConditionsDevicesFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalAccessPolicyConditionsDevicesFilterArgs $;

        public Builder() {
            $ = new ConditionalAccessPolicyConditionsDevicesFilterArgs();
        }

        public Builder(ConditionalAccessPolicyConditionsDevicesFilterArgs defaults) {
            $ = new ConditionalAccessPolicyConditionsDevicesFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode Whether to include in, or exclude from, matching devices from the policy. Supported values are `include` or `exclude`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Whether to include in, or exclude from, matching devices from the policy. Supported values are `include` or `exclude`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param rule Condition filter to match devices. For more information, see [official documentation](https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-condition-filters-for-devices#supported-operators-and-device-properties-for-filters).
         * 
         * @return builder
         * 
         */
        public Builder rule(Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule Condition filter to match devices. For more information, see [official documentation](https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-condition-filters-for-devices#supported-operators-and-device-properties-for-filters).
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        public ConditionalAccessPolicyConditionsDevicesFilterArgs build() {
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            $.rule = Objects.requireNonNull($.rule, "expected parameter 'rule' to be non-null");
            return $;
        }
    }

}
