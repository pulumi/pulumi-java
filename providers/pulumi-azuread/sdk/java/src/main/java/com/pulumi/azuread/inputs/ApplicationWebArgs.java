// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.ApplicationWebImplicitGrantArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationWebArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationWebArgs Empty = new ApplicationWebArgs();

    /**
     * Home page or landing page of the application.
     * 
     */
    @Import(name="homepageUrl")
    private @Nullable Output<String> homepageUrl;

    /**
     * @return Home page or landing page of the application.
     * 
     */
    public Optional<Output<String>> homepageUrl() {
        return Optional.ofNullable(this.homepageUrl);
    }

    /**
     * An `implicit_grant` block as documented above.
     * 
     */
    @Import(name="implicitGrant")
    private @Nullable Output<ApplicationWebImplicitGrantArgs> implicitGrant;

    /**
     * @return An `implicit_grant` block as documented above.
     * 
     */
    public Optional<Output<ApplicationWebImplicitGrantArgs>> implicitGrant() {
        return Optional.ofNullable(this.implicitGrant);
    }

    /**
     * The URL that will be used by Microsoft&#39;s authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
     * 
     */
    @Import(name="logoutUrl")
    private @Nullable Output<String> logoutUrl;

    /**
     * @return The URL that will be used by Microsoft&#39;s authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
     * 
     */
    public Optional<Output<String>> logoutUrl() {
        return Optional.ofNullable(this.logoutUrl);
    }

    /**
     * A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid `http` URL or a URN.
     * 
     */
    @Import(name="redirectUris")
    private @Nullable Output<List<String>> redirectUris;

    /**
     * @return A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid `http` URL or a URN.
     * 
     */
    public Optional<Output<List<String>>> redirectUris() {
        return Optional.ofNullable(this.redirectUris);
    }

    private ApplicationWebArgs() {}

    private ApplicationWebArgs(ApplicationWebArgs $) {
        this.homepageUrl = $.homepageUrl;
        this.implicitGrant = $.implicitGrant;
        this.logoutUrl = $.logoutUrl;
        this.redirectUris = $.redirectUris;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationWebArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationWebArgs $;

        public Builder() {
            $ = new ApplicationWebArgs();
        }

        public Builder(ApplicationWebArgs defaults) {
            $ = new ApplicationWebArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param homepageUrl Home page or landing page of the application.
         * 
         * @return builder
         * 
         */
        public Builder homepageUrl(@Nullable Output<String> homepageUrl) {
            $.homepageUrl = homepageUrl;
            return this;
        }

        /**
         * @param homepageUrl Home page or landing page of the application.
         * 
         * @return builder
         * 
         */
        public Builder homepageUrl(String homepageUrl) {
            return homepageUrl(Output.of(homepageUrl));
        }

        /**
         * @param implicitGrant An `implicit_grant` block as documented above.
         * 
         * @return builder
         * 
         */
        public Builder implicitGrant(@Nullable Output<ApplicationWebImplicitGrantArgs> implicitGrant) {
            $.implicitGrant = implicitGrant;
            return this;
        }

        /**
         * @param implicitGrant An `implicit_grant` block as documented above.
         * 
         * @return builder
         * 
         */
        public Builder implicitGrant(ApplicationWebImplicitGrantArgs implicitGrant) {
            return implicitGrant(Output.of(implicitGrant));
        }

        /**
         * @param logoutUrl The URL that will be used by Microsoft&#39;s authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
         * 
         * @return builder
         * 
         */
        public Builder logoutUrl(@Nullable Output<String> logoutUrl) {
            $.logoutUrl = logoutUrl;
            return this;
        }

        /**
         * @param logoutUrl The URL that will be used by Microsoft&#39;s authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
         * 
         * @return builder
         * 
         */
        public Builder logoutUrl(String logoutUrl) {
            return logoutUrl(Output.of(logoutUrl));
        }

        /**
         * @param redirectUris A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid `http` URL or a URN.
         * 
         * @return builder
         * 
         */
        public Builder redirectUris(@Nullable Output<List<String>> redirectUris) {
            $.redirectUris = redirectUris;
            return this;
        }

        /**
         * @param redirectUris A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid `http` URL or a URN.
         * 
         * @return builder
         * 
         */
        public Builder redirectUris(List<String> redirectUris) {
            return redirectUris(Output.of(redirectUris));
        }

        /**
         * @param redirectUris A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid `http` URL or a URN.
         * 
         * @return builder
         * 
         */
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }

        public ApplicationWebArgs build() {
            return $;
        }
    }

}
