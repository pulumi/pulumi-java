// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.ApplicationApiGetArgs;
import com.pulumi.azuread.inputs.ApplicationAppRoleGetArgs;
import com.pulumi.azuread.inputs.ApplicationFeatureTagGetArgs;
import com.pulumi.azuread.inputs.ApplicationOptionalClaimsGetArgs;
import com.pulumi.azuread.inputs.ApplicationPublicClientGetArgs;
import com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessGetArgs;
import com.pulumi.azuread.inputs.ApplicationSinglePageApplicationGetArgs;
import com.pulumi.azuread.inputs.ApplicationWebGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationState Empty = new ApplicationState();

    /**
     * An `api` block as documented below, which configures API related settings for this application.
     * 
     */
    @Import(name="api")
      private final @Nullable Output<ApplicationApiGetArgs> api;

    public Output<ApplicationApiGetArgs> api() {
        return this.api == null ? Codegen.empty() : this.api;
    }

    /**
     * A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.
     * 
     */
    @Import(name="appRoleIds")
      private final @Nullable Output<Map<String,String>> appRoleIds;

    public Output<Map<String,String>> appRoleIds() {
        return this.appRoleIds == null ? Codegen.empty() : this.appRoleIds;
    }

    /**
     * A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
     * 
     */
    @Import(name="appRoles")
      private final @Nullable Output<List<ApplicationAppRoleGetArgs>> appRoles;

    public Output<List<ApplicationAppRoleGetArgs>> appRoles() {
        return this.appRoles == null ? Codegen.empty() : this.appRoles;
    }

    /**
     * The Application ID (also called Client ID).
     * 
     */
    @Import(name="applicationId")
      private final @Nullable Output<String> applicationId;

    public Output<String> applicationId() {
        return this.applicationId == null ? Codegen.empty() : this.applicationId;
    }

    /**
     * Specifies whether this application supports device authentication without a user. Defaults to `false`.
     * 
     */
    @Import(name="deviceOnlyAuthEnabled")
      private final @Nullable Output<Boolean> deviceOnlyAuthEnabled;

    public Output<Boolean> deviceOnlyAuthEnabled() {
        return this.deviceOnlyAuthEnabled == null ? Codegen.empty() : this.deviceOnlyAuthEnabled;
    }

    /**
     * Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`
     * 
     */
    @Import(name="disabledByMicrosoft")
      private final @Nullable Output<String> disabledByMicrosoft;

    public Output<String> disabledByMicrosoft() {
        return this.disabledByMicrosoft == null ? Codegen.empty() : this.disabledByMicrosoft;
    }

    /**
     * The display name for the application.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * Specifies whether the application is a public client. Appropriate for apps using token grant flows that don't use a redirect URI. Defaults to `false`.
     * 
     */
    @Import(name="fallbackPublicClientEnabled")
      private final @Nullable Output<Boolean> fallbackPublicClientEnabled;

    public Output<Boolean> fallbackPublicClientEnabled() {
        return this.fallbackPublicClientEnabled == null ? Codegen.empty() : this.fallbackPublicClientEnabled;
    }

    /**
     * A `feature_tags` block as described below. Cannot be used together with the `tags` property.
     * 
     */
    @Import(name="featureTags")
      private final @Nullable Output<List<ApplicationFeatureTagGetArgs>> featureTags;

    public Output<List<ApplicationFeatureTagGetArgs>> featureTags() {
        return this.featureTags == null ? Codegen.empty() : this.featureTags;
    }

    /**
     * Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
     * 
     */
    @Import(name="groupMembershipClaims")
      private final @Nullable Output<List<String>> groupMembershipClaims;

    public Output<List<String>> groupMembershipClaims() {
        return this.groupMembershipClaims == null ? Codegen.empty() : this.groupMembershipClaims;
    }

    /**
     * A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
     * 
     */
    @Import(name="identifierUris")
      private final @Nullable Output<List<String>> identifierUris;

    public Output<List<String>> identifierUris() {
        return this.identifierUris == null ? Codegen.empty() : this.identifierUris;
    }

    /**
     * A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.
     * 
     */
    @Import(name="logoImage")
      private final @Nullable Output<String> logoImage;

    public Output<String> logoImage() {
        return this.logoImage == null ? Codegen.empty() : this.logoImage;
    }

    /**
     * CDN URL to the application's logo, as uploaded with the `logo_image` property.
     * 
     */
    @Import(name="logoUrl")
      private final @Nullable Output<String> logoUrl;

    public Output<String> logoUrl() {
        return this.logoUrl == null ? Codegen.empty() : this.logoUrl;
    }

    /**
     * URL of the application's marketing page.
     * 
     */
    @Import(name="marketingUrl")
      private final @Nullable Output<String> marketingUrl;

    public Output<String> marketingUrl() {
        return this.marketingUrl == null ? Codegen.empty() : this.marketingUrl;
    }

    /**
     * A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.
     * 
     */
    @Import(name="oauth2PermissionScopeIds")
      private final @Nullable Output<Map<String,String>> oauth2PermissionScopeIds;

    public Output<Map<String,String>> oauth2PermissionScopeIds() {
        return this.oauth2PermissionScopeIds == null ? Codegen.empty() : this.oauth2PermissionScopeIds;
    }

    /**
     * Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.
     * 
     */
    @Import(name="oauth2PostResponseRequired")
      private final @Nullable Output<Boolean> oauth2PostResponseRequired;

    public Output<Boolean> oauth2PostResponseRequired() {
        return this.oauth2PostResponseRequired == null ? Codegen.empty() : this.oauth2PostResponseRequired;
    }

    /**
     * The application's object ID.
     * 
     */
    @Import(name="objectId")
      private final @Nullable Output<String> objectId;

    public Output<String> objectId() {
        return this.objectId == null ? Codegen.empty() : this.objectId;
    }

    /**
     * An `optional_claims` block as documented below.
     * 
     */
    @Import(name="optionalClaims")
      private final @Nullable Output<ApplicationOptionalClaimsGetArgs> optionalClaims;

    public Output<ApplicationOptionalClaimsGetArgs> optionalClaims() {
        return this.optionalClaims == null ? Codegen.empty() : this.optionalClaims;
    }

    /**
     * A set of object IDs of principals that will be granted ownership of the application. Supported object types are users or service principals. By default, no owners are assigned.
     * 
     */
    @Import(name="owners")
      private final @Nullable Output<List<String>> owners;

    public Output<List<String>> owners() {
        return this.owners == null ? Codegen.empty() : this.owners;
    }

    /**
     * If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.
     * 
     */
    @Import(name="preventDuplicateNames")
      private final @Nullable Output<Boolean> preventDuplicateNames;

    public Output<Boolean> preventDuplicateNames() {
        return this.preventDuplicateNames == null ? Codegen.empty() : this.preventDuplicateNames;
    }

    /**
     * URL of the application's privacy statement.
     * 
     */
    @Import(name="privacyStatementUrl")
      private final @Nullable Output<String> privacyStatementUrl;

    public Output<String> privacyStatementUrl() {
        return this.privacyStatementUrl == null ? Codegen.empty() : this.privacyStatementUrl;
    }

    /**
     * A `public_client` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.
     * 
     */
    @Import(name="publicClient")
      private final @Nullable Output<ApplicationPublicClientGetArgs> publicClient;

    public Output<ApplicationPublicClientGetArgs> publicClient() {
        return this.publicClient == null ? Codegen.empty() : this.publicClient;
    }

    /**
     * The verified publisher domain for the application.
     * 
     */
    @Import(name="publisherDomain")
      private final @Nullable Output<String> publisherDomain;

    public Output<String> publisherDomain() {
        return this.publisherDomain == null ? Codegen.empty() : this.publisherDomain;
    }

    /**
     * A collection of `required_resource_access` blocks as documented below.
     * 
     */
    @Import(name="requiredResourceAccesses")
      private final @Nullable Output<List<ApplicationRequiredResourceAccessGetArgs>> requiredResourceAccesses;

    public Output<List<ApplicationRequiredResourceAccessGetArgs>> requiredResourceAccesses() {
        return this.requiredResourceAccesses == null ? Codegen.empty() : this.requiredResourceAccesses;
    }

    /**
     * The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
     * 
     */
    @Import(name="signInAudience")
      private final @Nullable Output<String> signInAudience;

    public Output<String> signInAudience() {
        return this.signInAudience == null ? Codegen.empty() : this.signInAudience;
    }

    /**
     * A `single_page_application` block as documented below, which configures single-page application (SPA) related settings for this application.
     * 
     */
    @Import(name="singlePageApplication")
      private final @Nullable Output<ApplicationSinglePageApplicationGetArgs> singlePageApplication;

    public Output<ApplicationSinglePageApplicationGetArgs> singlePageApplication() {
        return this.singlePageApplication == null ? Codegen.empty() : this.singlePageApplication;
    }

    /**
     * URL of the application's support page.
     * 
     */
    @Import(name="supportUrl")
      private final @Nullable Output<String> supportUrl;

    public Output<String> supportUrl() {
        return this.supportUrl == null ? Codegen.empty() : this.supportUrl;
    }

    /**
     * A set of tags to apply to the application. Cannot be used together with the `feature_tags` block.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<String>> tags;

    public Output<List<String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="templateId")
      private final @Nullable Output<String> templateId;

    public Output<String> templateId() {
        return this.templateId == null ? Codegen.empty() : this.templateId;
    }

    /**
     * URL of the application's terms of service statement.
     * 
     */
    @Import(name="termsOfServiceUrl")
      private final @Nullable Output<String> termsOfServiceUrl;

    public Output<String> termsOfServiceUrl() {
        return this.termsOfServiceUrl == null ? Codegen.empty() : this.termsOfServiceUrl;
    }

    /**
     * A `web` block as documented below, which configures web related settings for this application.
     * 
     */
    @Import(name="web")
      private final @Nullable Output<ApplicationWebGetArgs> web;

    public Output<ApplicationWebGetArgs> web() {
        return this.web == null ? Codegen.empty() : this.web;
    }

    public ApplicationState(
        @Nullable Output<ApplicationApiGetArgs> api,
        @Nullable Output<Map<String,String>> appRoleIds,
        @Nullable Output<List<ApplicationAppRoleGetArgs>> appRoles,
        @Nullable Output<String> applicationId,
        @Nullable Output<Boolean> deviceOnlyAuthEnabled,
        @Nullable Output<String> disabledByMicrosoft,
        @Nullable Output<String> displayName,
        @Nullable Output<Boolean> fallbackPublicClientEnabled,
        @Nullable Output<List<ApplicationFeatureTagGetArgs>> featureTags,
        @Nullable Output<List<String>> groupMembershipClaims,
        @Nullable Output<List<String>> identifierUris,
        @Nullable Output<String> logoImage,
        @Nullable Output<String> logoUrl,
        @Nullable Output<String> marketingUrl,
        @Nullable Output<Map<String,String>> oauth2PermissionScopeIds,
        @Nullable Output<Boolean> oauth2PostResponseRequired,
        @Nullable Output<String> objectId,
        @Nullable Output<ApplicationOptionalClaimsGetArgs> optionalClaims,
        @Nullable Output<List<String>> owners,
        @Nullable Output<Boolean> preventDuplicateNames,
        @Nullable Output<String> privacyStatementUrl,
        @Nullable Output<ApplicationPublicClientGetArgs> publicClient,
        @Nullable Output<String> publisherDomain,
        @Nullable Output<List<ApplicationRequiredResourceAccessGetArgs>> requiredResourceAccesses,
        @Nullable Output<String> signInAudience,
        @Nullable Output<ApplicationSinglePageApplicationGetArgs> singlePageApplication,
        @Nullable Output<String> supportUrl,
        @Nullable Output<List<String>> tags,
        @Nullable Output<String> templateId,
        @Nullable Output<String> termsOfServiceUrl,
        @Nullable Output<ApplicationWebGetArgs> web) {
        this.api = api;
        this.appRoleIds = appRoleIds;
        this.appRoles = appRoles;
        this.applicationId = applicationId;
        this.deviceOnlyAuthEnabled = deviceOnlyAuthEnabled;
        this.disabledByMicrosoft = disabledByMicrosoft;
        this.displayName = displayName;
        this.fallbackPublicClientEnabled = fallbackPublicClientEnabled;
        this.featureTags = featureTags;
        this.groupMembershipClaims = groupMembershipClaims;
        this.identifierUris = identifierUris;
        this.logoImage = logoImage;
        this.logoUrl = logoUrl;
        this.marketingUrl = marketingUrl;
        this.oauth2PermissionScopeIds = oauth2PermissionScopeIds;
        this.oauth2PostResponseRequired = oauth2PostResponseRequired;
        this.objectId = objectId;
        this.optionalClaims = optionalClaims;
        this.owners = owners;
        this.preventDuplicateNames = preventDuplicateNames;
        this.privacyStatementUrl = privacyStatementUrl;
        this.publicClient = publicClient;
        this.publisherDomain = publisherDomain;
        this.requiredResourceAccesses = requiredResourceAccesses;
        this.signInAudience = signInAudience;
        this.singlePageApplication = singlePageApplication;
        this.supportUrl = supportUrl;
        this.tags = tags;
        this.templateId = templateId;
        this.termsOfServiceUrl = termsOfServiceUrl;
        this.web = web;
    }

    private ApplicationState() {
        this.api = Codegen.empty();
        this.appRoleIds = Codegen.empty();
        this.appRoles = Codegen.empty();
        this.applicationId = Codegen.empty();
        this.deviceOnlyAuthEnabled = Codegen.empty();
        this.disabledByMicrosoft = Codegen.empty();
        this.displayName = Codegen.empty();
        this.fallbackPublicClientEnabled = Codegen.empty();
        this.featureTags = Codegen.empty();
        this.groupMembershipClaims = Codegen.empty();
        this.identifierUris = Codegen.empty();
        this.logoImage = Codegen.empty();
        this.logoUrl = Codegen.empty();
        this.marketingUrl = Codegen.empty();
        this.oauth2PermissionScopeIds = Codegen.empty();
        this.oauth2PostResponseRequired = Codegen.empty();
        this.objectId = Codegen.empty();
        this.optionalClaims = Codegen.empty();
        this.owners = Codegen.empty();
        this.preventDuplicateNames = Codegen.empty();
        this.privacyStatementUrl = Codegen.empty();
        this.publicClient = Codegen.empty();
        this.publisherDomain = Codegen.empty();
        this.requiredResourceAccesses = Codegen.empty();
        this.signInAudience = Codegen.empty();
        this.singlePageApplication = Codegen.empty();
        this.supportUrl = Codegen.empty();
        this.tags = Codegen.empty();
        this.templateId = Codegen.empty();
        this.termsOfServiceUrl = Codegen.empty();
        this.web = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ApplicationApiGetArgs> api;
        private @Nullable Output<Map<String,String>> appRoleIds;
        private @Nullable Output<List<ApplicationAppRoleGetArgs>> appRoles;
        private @Nullable Output<String> applicationId;
        private @Nullable Output<Boolean> deviceOnlyAuthEnabled;
        private @Nullable Output<String> disabledByMicrosoft;
        private @Nullable Output<String> displayName;
        private @Nullable Output<Boolean> fallbackPublicClientEnabled;
        private @Nullable Output<List<ApplicationFeatureTagGetArgs>> featureTags;
        private @Nullable Output<List<String>> groupMembershipClaims;
        private @Nullable Output<List<String>> identifierUris;
        private @Nullable Output<String> logoImage;
        private @Nullable Output<String> logoUrl;
        private @Nullable Output<String> marketingUrl;
        private @Nullable Output<Map<String,String>> oauth2PermissionScopeIds;
        private @Nullable Output<Boolean> oauth2PostResponseRequired;
        private @Nullable Output<String> objectId;
        private @Nullable Output<ApplicationOptionalClaimsGetArgs> optionalClaims;
        private @Nullable Output<List<String>> owners;
        private @Nullable Output<Boolean> preventDuplicateNames;
        private @Nullable Output<String> privacyStatementUrl;
        private @Nullable Output<ApplicationPublicClientGetArgs> publicClient;
        private @Nullable Output<String> publisherDomain;
        private @Nullable Output<List<ApplicationRequiredResourceAccessGetArgs>> requiredResourceAccesses;
        private @Nullable Output<String> signInAudience;
        private @Nullable Output<ApplicationSinglePageApplicationGetArgs> singlePageApplication;
        private @Nullable Output<String> supportUrl;
        private @Nullable Output<List<String>> tags;
        private @Nullable Output<String> templateId;
        private @Nullable Output<String> termsOfServiceUrl;
        private @Nullable Output<ApplicationWebGetArgs> web;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.api = defaults.api;
    	      this.appRoleIds = defaults.appRoleIds;
    	      this.appRoles = defaults.appRoles;
    	      this.applicationId = defaults.applicationId;
    	      this.deviceOnlyAuthEnabled = defaults.deviceOnlyAuthEnabled;
    	      this.disabledByMicrosoft = defaults.disabledByMicrosoft;
    	      this.displayName = defaults.displayName;
    	      this.fallbackPublicClientEnabled = defaults.fallbackPublicClientEnabled;
    	      this.featureTags = defaults.featureTags;
    	      this.groupMembershipClaims = defaults.groupMembershipClaims;
    	      this.identifierUris = defaults.identifierUris;
    	      this.logoImage = defaults.logoImage;
    	      this.logoUrl = defaults.logoUrl;
    	      this.marketingUrl = defaults.marketingUrl;
    	      this.oauth2PermissionScopeIds = defaults.oauth2PermissionScopeIds;
    	      this.oauth2PostResponseRequired = defaults.oauth2PostResponseRequired;
    	      this.objectId = defaults.objectId;
    	      this.optionalClaims = defaults.optionalClaims;
    	      this.owners = defaults.owners;
    	      this.preventDuplicateNames = defaults.preventDuplicateNames;
    	      this.privacyStatementUrl = defaults.privacyStatementUrl;
    	      this.publicClient = defaults.publicClient;
    	      this.publisherDomain = defaults.publisherDomain;
    	      this.requiredResourceAccesses = defaults.requiredResourceAccesses;
    	      this.signInAudience = defaults.signInAudience;
    	      this.singlePageApplication = defaults.singlePageApplication;
    	      this.supportUrl = defaults.supportUrl;
    	      this.tags = defaults.tags;
    	      this.templateId = defaults.templateId;
    	      this.termsOfServiceUrl = defaults.termsOfServiceUrl;
    	      this.web = defaults.web;
        }

        public Builder api(@Nullable Output<ApplicationApiGetArgs> api) {
            this.api = api;
            return this;
        }
        public Builder api(@Nullable ApplicationApiGetArgs api) {
            this.api = Codegen.ofNullable(api);
            return this;
        }
        public Builder appRoleIds(@Nullable Output<Map<String,String>> appRoleIds) {
            this.appRoleIds = appRoleIds;
            return this;
        }
        public Builder appRoleIds(@Nullable Map<String,String> appRoleIds) {
            this.appRoleIds = Codegen.ofNullable(appRoleIds);
            return this;
        }
        public Builder appRoles(@Nullable Output<List<ApplicationAppRoleGetArgs>> appRoles) {
            this.appRoles = appRoles;
            return this;
        }
        public Builder appRoles(@Nullable List<ApplicationAppRoleGetArgs> appRoles) {
            this.appRoles = Codegen.ofNullable(appRoles);
            return this;
        }
        public Builder appRoles(ApplicationAppRoleGetArgs... appRoles) {
            return appRoles(List.of(appRoles));
        }
        public Builder applicationId(@Nullable Output<String> applicationId) {
            this.applicationId = applicationId;
            return this;
        }
        public Builder applicationId(@Nullable String applicationId) {
            this.applicationId = Codegen.ofNullable(applicationId);
            return this;
        }
        public Builder deviceOnlyAuthEnabled(@Nullable Output<Boolean> deviceOnlyAuthEnabled) {
            this.deviceOnlyAuthEnabled = deviceOnlyAuthEnabled;
            return this;
        }
        public Builder deviceOnlyAuthEnabled(@Nullable Boolean deviceOnlyAuthEnabled) {
            this.deviceOnlyAuthEnabled = Codegen.ofNullable(deviceOnlyAuthEnabled);
            return this;
        }
        public Builder disabledByMicrosoft(@Nullable Output<String> disabledByMicrosoft) {
            this.disabledByMicrosoft = disabledByMicrosoft;
            return this;
        }
        public Builder disabledByMicrosoft(@Nullable String disabledByMicrosoft) {
            this.disabledByMicrosoft = Codegen.ofNullable(disabledByMicrosoft);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder fallbackPublicClientEnabled(@Nullable Output<Boolean> fallbackPublicClientEnabled) {
            this.fallbackPublicClientEnabled = fallbackPublicClientEnabled;
            return this;
        }
        public Builder fallbackPublicClientEnabled(@Nullable Boolean fallbackPublicClientEnabled) {
            this.fallbackPublicClientEnabled = Codegen.ofNullable(fallbackPublicClientEnabled);
            return this;
        }
        public Builder featureTags(@Nullable Output<List<ApplicationFeatureTagGetArgs>> featureTags) {
            this.featureTags = featureTags;
            return this;
        }
        public Builder featureTags(@Nullable List<ApplicationFeatureTagGetArgs> featureTags) {
            this.featureTags = Codegen.ofNullable(featureTags);
            return this;
        }
        public Builder featureTags(ApplicationFeatureTagGetArgs... featureTags) {
            return featureTags(List.of(featureTags));
        }
        public Builder groupMembershipClaims(@Nullable Output<List<String>> groupMembershipClaims) {
            this.groupMembershipClaims = groupMembershipClaims;
            return this;
        }
        public Builder groupMembershipClaims(@Nullable List<String> groupMembershipClaims) {
            this.groupMembershipClaims = Codegen.ofNullable(groupMembershipClaims);
            return this;
        }
        public Builder groupMembershipClaims(String... groupMembershipClaims) {
            return groupMembershipClaims(List.of(groupMembershipClaims));
        }
        public Builder identifierUris(@Nullable Output<List<String>> identifierUris) {
            this.identifierUris = identifierUris;
            return this;
        }
        public Builder identifierUris(@Nullable List<String> identifierUris) {
            this.identifierUris = Codegen.ofNullable(identifierUris);
            return this;
        }
        public Builder identifierUris(String... identifierUris) {
            return identifierUris(List.of(identifierUris));
        }
        public Builder logoImage(@Nullable Output<String> logoImage) {
            this.logoImage = logoImage;
            return this;
        }
        public Builder logoImage(@Nullable String logoImage) {
            this.logoImage = Codegen.ofNullable(logoImage);
            return this;
        }
        public Builder logoUrl(@Nullable Output<String> logoUrl) {
            this.logoUrl = logoUrl;
            return this;
        }
        public Builder logoUrl(@Nullable String logoUrl) {
            this.logoUrl = Codegen.ofNullable(logoUrl);
            return this;
        }
        public Builder marketingUrl(@Nullable Output<String> marketingUrl) {
            this.marketingUrl = marketingUrl;
            return this;
        }
        public Builder marketingUrl(@Nullable String marketingUrl) {
            this.marketingUrl = Codegen.ofNullable(marketingUrl);
            return this;
        }
        public Builder oauth2PermissionScopeIds(@Nullable Output<Map<String,String>> oauth2PermissionScopeIds) {
            this.oauth2PermissionScopeIds = oauth2PermissionScopeIds;
            return this;
        }
        public Builder oauth2PermissionScopeIds(@Nullable Map<String,String> oauth2PermissionScopeIds) {
            this.oauth2PermissionScopeIds = Codegen.ofNullable(oauth2PermissionScopeIds);
            return this;
        }
        public Builder oauth2PostResponseRequired(@Nullable Output<Boolean> oauth2PostResponseRequired) {
            this.oauth2PostResponseRequired = oauth2PostResponseRequired;
            return this;
        }
        public Builder oauth2PostResponseRequired(@Nullable Boolean oauth2PostResponseRequired) {
            this.oauth2PostResponseRequired = Codegen.ofNullable(oauth2PostResponseRequired);
            return this;
        }
        public Builder objectId(@Nullable Output<String> objectId) {
            this.objectId = objectId;
            return this;
        }
        public Builder objectId(@Nullable String objectId) {
            this.objectId = Codegen.ofNullable(objectId);
            return this;
        }
        public Builder optionalClaims(@Nullable Output<ApplicationOptionalClaimsGetArgs> optionalClaims) {
            this.optionalClaims = optionalClaims;
            return this;
        }
        public Builder optionalClaims(@Nullable ApplicationOptionalClaimsGetArgs optionalClaims) {
            this.optionalClaims = Codegen.ofNullable(optionalClaims);
            return this;
        }
        public Builder owners(@Nullable Output<List<String>> owners) {
            this.owners = owners;
            return this;
        }
        public Builder owners(@Nullable List<String> owners) {
            this.owners = Codegen.ofNullable(owners);
            return this;
        }
        public Builder owners(String... owners) {
            return owners(List.of(owners));
        }
        public Builder preventDuplicateNames(@Nullable Output<Boolean> preventDuplicateNames) {
            this.preventDuplicateNames = preventDuplicateNames;
            return this;
        }
        public Builder preventDuplicateNames(@Nullable Boolean preventDuplicateNames) {
            this.preventDuplicateNames = Codegen.ofNullable(preventDuplicateNames);
            return this;
        }
        public Builder privacyStatementUrl(@Nullable Output<String> privacyStatementUrl) {
            this.privacyStatementUrl = privacyStatementUrl;
            return this;
        }
        public Builder privacyStatementUrl(@Nullable String privacyStatementUrl) {
            this.privacyStatementUrl = Codegen.ofNullable(privacyStatementUrl);
            return this;
        }
        public Builder publicClient(@Nullable Output<ApplicationPublicClientGetArgs> publicClient) {
            this.publicClient = publicClient;
            return this;
        }
        public Builder publicClient(@Nullable ApplicationPublicClientGetArgs publicClient) {
            this.publicClient = Codegen.ofNullable(publicClient);
            return this;
        }
        public Builder publisherDomain(@Nullable Output<String> publisherDomain) {
            this.publisherDomain = publisherDomain;
            return this;
        }
        public Builder publisherDomain(@Nullable String publisherDomain) {
            this.publisherDomain = Codegen.ofNullable(publisherDomain);
            return this;
        }
        public Builder requiredResourceAccesses(@Nullable Output<List<ApplicationRequiredResourceAccessGetArgs>> requiredResourceAccesses) {
            this.requiredResourceAccesses = requiredResourceAccesses;
            return this;
        }
        public Builder requiredResourceAccesses(@Nullable List<ApplicationRequiredResourceAccessGetArgs> requiredResourceAccesses) {
            this.requiredResourceAccesses = Codegen.ofNullable(requiredResourceAccesses);
            return this;
        }
        public Builder requiredResourceAccesses(ApplicationRequiredResourceAccessGetArgs... requiredResourceAccesses) {
            return requiredResourceAccesses(List.of(requiredResourceAccesses));
        }
        public Builder signInAudience(@Nullable Output<String> signInAudience) {
            this.signInAudience = signInAudience;
            return this;
        }
        public Builder signInAudience(@Nullable String signInAudience) {
            this.signInAudience = Codegen.ofNullable(signInAudience);
            return this;
        }
        public Builder singlePageApplication(@Nullable Output<ApplicationSinglePageApplicationGetArgs> singlePageApplication) {
            this.singlePageApplication = singlePageApplication;
            return this;
        }
        public Builder singlePageApplication(@Nullable ApplicationSinglePageApplicationGetArgs singlePageApplication) {
            this.singlePageApplication = Codegen.ofNullable(singlePageApplication);
            return this;
        }
        public Builder supportUrl(@Nullable Output<String> supportUrl) {
            this.supportUrl = supportUrl;
            return this;
        }
        public Builder supportUrl(@Nullable String supportUrl) {
            this.supportUrl = Codegen.ofNullable(supportUrl);
            return this;
        }
        public Builder tags(@Nullable Output<List<String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder templateId(@Nullable Output<String> templateId) {
            this.templateId = templateId;
            return this;
        }
        public Builder templateId(@Nullable String templateId) {
            this.templateId = Codegen.ofNullable(templateId);
            return this;
        }
        public Builder termsOfServiceUrl(@Nullable Output<String> termsOfServiceUrl) {
            this.termsOfServiceUrl = termsOfServiceUrl;
            return this;
        }
        public Builder termsOfServiceUrl(@Nullable String termsOfServiceUrl) {
            this.termsOfServiceUrl = Codegen.ofNullable(termsOfServiceUrl);
            return this;
        }
        public Builder web(@Nullable Output<ApplicationWebGetArgs> web) {
            this.web = web;
            return this;
        }
        public Builder web(@Nullable ApplicationWebGetArgs web) {
            this.web = Codegen.ofNullable(web);
            return this;
        }        public ApplicationState build() {
            return new ApplicationState(api, appRoleIds, appRoles, applicationId, deviceOnlyAuthEnabled, disabledByMicrosoft, displayName, fallbackPublicClientEnabled, featureTags, groupMembershipClaims, identifierUris, logoImage, logoUrl, marketingUrl, oauth2PermissionScopeIds, oauth2PostResponseRequired, objectId, optionalClaims, owners, preventDuplicateNames, privacyStatementUrl, publicClient, publisherDomain, requiredResourceAccesses, signInAudience, singlePageApplication, supportUrl, tags, templateId, termsOfServiceUrl, web);
        }
    }
}
