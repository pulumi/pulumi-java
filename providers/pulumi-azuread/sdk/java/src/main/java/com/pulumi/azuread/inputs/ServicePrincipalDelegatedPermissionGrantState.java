// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServicePrincipalDelegatedPermissionGrantState extends com.pulumi.resources.ResourceArgs {

    public static final ServicePrincipalDelegatedPermissionGrantState Empty = new ServicePrincipalDelegatedPermissionGrantState();

    /**
     * - A set of claim values for delegated permission scopes which should be included in access tokens for the resource.
     * 
     */
    @Import(name="claimValues")
      private final @Nullable Output<List<String>> claimValues;

    public Output<List<String>> claimValues() {
        return this.claimValues == null ? Codegen.empty() : this.claimValues;
    }

    /**
     * The object ID of the service principal representing the resource to be accessed. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceServicePrincipalObjectId")
      private final @Nullable Output<String> resourceServicePrincipalObjectId;

    public Output<String> resourceServicePrincipalObjectId() {
        return this.resourceServicePrincipalObjectId == null ? Codegen.empty() : this.resourceServicePrincipalObjectId;
    }

    /**
     * The object ID of the service principal for which this delegated permission grant should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="servicePrincipalObjectId")
      private final @Nullable Output<String> servicePrincipalObjectId;

    public Output<String> servicePrincipalObjectId() {
        return this.servicePrincipalObjectId == null ? Codegen.empty() : this.servicePrincipalObjectId;
    }

    /**
     * - The object ID of the user on behalf of whom the service principal is authorized to access the resource. When omitted, the delegated permission grant will be consented for all users. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="userObjectId")
      private final @Nullable Output<String> userObjectId;

    public Output<String> userObjectId() {
        return this.userObjectId == null ? Codegen.empty() : this.userObjectId;
    }

    public ServicePrincipalDelegatedPermissionGrantState(
        @Nullable Output<List<String>> claimValues,
        @Nullable Output<String> resourceServicePrincipalObjectId,
        @Nullable Output<String> servicePrincipalObjectId,
        @Nullable Output<String> userObjectId) {
        this.claimValues = claimValues;
        this.resourceServicePrincipalObjectId = resourceServicePrincipalObjectId;
        this.servicePrincipalObjectId = servicePrincipalObjectId;
        this.userObjectId = userObjectId;
    }

    private ServicePrincipalDelegatedPermissionGrantState() {
        this.claimValues = Codegen.empty();
        this.resourceServicePrincipalObjectId = Codegen.empty();
        this.servicePrincipalObjectId = Codegen.empty();
        this.userObjectId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePrincipalDelegatedPermissionGrantState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> claimValues;
        private @Nullable Output<String> resourceServicePrincipalObjectId;
        private @Nullable Output<String> servicePrincipalObjectId;
        private @Nullable Output<String> userObjectId;

        public Builder() {
    	      // Empty
        }

        public Builder(ServicePrincipalDelegatedPermissionGrantState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.claimValues = defaults.claimValues;
    	      this.resourceServicePrincipalObjectId = defaults.resourceServicePrincipalObjectId;
    	      this.servicePrincipalObjectId = defaults.servicePrincipalObjectId;
    	      this.userObjectId = defaults.userObjectId;
        }

        public Builder claimValues(@Nullable Output<List<String>> claimValues) {
            this.claimValues = claimValues;
            return this;
        }
        public Builder claimValues(@Nullable List<String> claimValues) {
            this.claimValues = Codegen.ofNullable(claimValues);
            return this;
        }
        public Builder claimValues(String... claimValues) {
            return claimValues(List.of(claimValues));
        }
        public Builder resourceServicePrincipalObjectId(@Nullable Output<String> resourceServicePrincipalObjectId) {
            this.resourceServicePrincipalObjectId = resourceServicePrincipalObjectId;
            return this;
        }
        public Builder resourceServicePrincipalObjectId(@Nullable String resourceServicePrincipalObjectId) {
            this.resourceServicePrincipalObjectId = Codegen.ofNullable(resourceServicePrincipalObjectId);
            return this;
        }
        public Builder servicePrincipalObjectId(@Nullable Output<String> servicePrincipalObjectId) {
            this.servicePrincipalObjectId = servicePrincipalObjectId;
            return this;
        }
        public Builder servicePrincipalObjectId(@Nullable String servicePrincipalObjectId) {
            this.servicePrincipalObjectId = Codegen.ofNullable(servicePrincipalObjectId);
            return this;
        }
        public Builder userObjectId(@Nullable Output<String> userObjectId) {
            this.userObjectId = userObjectId;
            return this;
        }
        public Builder userObjectId(@Nullable String userObjectId) {
            this.userObjectId = Codegen.ofNullable(userObjectId);
            return this;
        }        public ServicePrincipalDelegatedPermissionGrantState build() {
            return new ServicePrincipalDelegatedPermissionGrantState(claimValues, resourceServicePrincipalObjectId, servicePrincipalObjectId, userObjectId);
        }
    }
}
