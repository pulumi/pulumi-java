// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.UserArgs;
import com.pulumi.azuread.Utilities;
import com.pulumi.azuread.inputs.UserState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Manages a user within Azure Active Directory.
 * 
 * ## API Permissions
 * 
 * The following API permissions are required in order to use this resource.
 * 
 * When authenticated with a service principal, this resource requires one of the following application roles: `User.ReadWrite.All` or `Directory.ReadWrite.All`
 * 
 * When authenticated with a user principal, this resource requires one of the following directory roles: `User Administrator` or `Global Administrator`
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Users can be imported using their object ID, e.g.
 * 
 * ```sh
 *  $ pulumi import azuread:index/user:User my_user 00000000-0000-0000-0000-000000000000
 * ```
 * 
 */
@ResourceType(type="azuread:index/user:User")
public class User extends com.pulumi.resources.CustomResource {
    /**
     * A freeform field for the user to describe themselves
     * 
     */
    @Export(name="aboutMe", type=String.class, parameters={})
    private Output<String> aboutMe;

    /**
     * @return A freeform field for the user to describe themselves
     * 
     */
    public Output<String> aboutMe() {
        return this.aboutMe;
    }
    /**
     * Whether or not the account should be enabled.
     * 
     */
    @Export(name="accountEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> accountEnabled;

    /**
     * @return Whether or not the account should be enabled.
     * 
     */
    public Output</* @Nullable */ Boolean> accountEnabled() {
        return this.accountEnabled;
    }
    /**
     * The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`. Omit this property or specify a blank string to unset.
     * 
     */
    @Export(name="ageGroup", type=String.class, parameters={})
    private Output</* @Nullable */ String> ageGroup;

    /**
     * @return The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`. Omit this property or specify a blank string to unset.
     * 
     */
    public Output</* @Nullable */ String> ageGroup() {
        return this.ageGroup;
    }
    /**
     * A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.
     * 
     */
    @Export(name="businessPhones", type=List.class, parameters={String.class})
    private Output<List<String>> businessPhones;

    /**
     * @return A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.
     * 
     */
    public Output<List<String>> businessPhones() {
        return this.businessPhones;
    }
    /**
     * The city in which the user is located.
     * 
     */
    @Export(name="city", type=String.class, parameters={})
    private Output</* @Nullable */ String> city;

    /**
     * @return The city in which the user is located.
     * 
     */
    public Output</* @Nullable */ String> city() {
        return this.city;
    }
    /**
     * The company name which the user is associated. This property can be useful for describing the company that an external user comes from.
     * 
     */
    @Export(name="companyName", type=String.class, parameters={})
    private Output</* @Nullable */ String> companyName;

    /**
     * @return The company name which the user is associated. This property can be useful for describing the company that an external user comes from.
     * 
     */
    public Output</* @Nullable */ String> companyName() {
        return this.companyName;
    }
    /**
     * Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`. Omit this property or specify a blank string to unset.
     * 
     */
    @Export(name="consentProvidedForMinor", type=String.class, parameters={})
    private Output</* @Nullable */ String> consentProvidedForMinor;

    /**
     * @return Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`. Omit this property or specify a blank string to unset.
     * 
     */
    public Output</* @Nullable */ String> consentProvidedForMinor() {
        return this.consentProvidedForMinor;
    }
    /**
     * The cost center associated with the user.
     * 
     */
    @Export(name="costCenter", type=String.class, parameters={})
    private Output</* @Nullable */ String> costCenter;

    /**
     * @return The cost center associated with the user.
     * 
     */
    public Output</* @Nullable */ String> costCenter() {
        return this.costCenter;
    }
    /**
     * The country/region in which the user is located, e.g. `US` or `UK`.
     * 
     */
    @Export(name="country", type=String.class, parameters={})
    private Output</* @Nullable */ String> country;

    /**
     * @return The country/region in which the user is located, e.g. `US` or `UK`.
     * 
     */
    public Output</* @Nullable */ String> country() {
        return this.country;
    }
    /**
     * Indicates whether the user account was created as a regular school or work account (`null`), an external account (`Invitation`), a local account for an Azure Active Directory B2C tenant (`LocalAccount`) or self-service sign-up using email verification (`EmailVerified`).
     * 
     */
    @Export(name="creationType", type=String.class, parameters={})
    private Output<String> creationType;

    /**
     * @return Indicates whether the user account was created as a regular school or work account (`null`), an external account (`Invitation`), a local account for an Azure Active Directory B2C tenant (`LocalAccount`) or self-service sign-up using email verification (`EmailVerified`).
     * 
     */
    public Output<String> creationType() {
        return this.creationType;
    }
    /**
     * The name for the department in which the user works.
     * 
     */
    @Export(name="department", type=String.class, parameters={})
    private Output</* @Nullable */ String> department;

    /**
     * @return The name for the department in which the user works.
     * 
     */
    public Output</* @Nullable */ String> department() {
        return this.department;
    }
    /**
     * Whether the user's password is exempt from expiring. Defaults to `false`.
     * 
     */
    @Export(name="disablePasswordExpiration", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disablePasswordExpiration;

    /**
     * @return Whether the user's password is exempt from expiring. Defaults to `false`.
     * 
     */
    public Output</* @Nullable */ Boolean> disablePasswordExpiration() {
        return this.disablePasswordExpiration;
    }
    /**
     * Whether the user is allowed weaker passwords than the default policy to be specified. Defaults to `false`.
     * 
     */
    @Export(name="disableStrongPassword", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disableStrongPassword;

    /**
     * @return Whether the user is allowed weaker passwords than the default policy to be specified. Defaults to `false`.
     * 
     */
    public Output</* @Nullable */ Boolean> disableStrongPassword() {
        return this.disableStrongPassword;
    }
    /**
     * The name to display in the address book for the user.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The name to display in the address book for the user.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The name of the division in which the user works.
     * 
     */
    @Export(name="division", type=String.class, parameters={})
    private Output</* @Nullable */ String> division;

    /**
     * @return The name of the division in which the user works.
     * 
     */
    public Output</* @Nullable */ String> division() {
        return this.division;
    }
    /**
     * The employee identifier assigned to the user by the organisation.
     * 
     */
    @Export(name="employeeId", type=String.class, parameters={})
    private Output</* @Nullable */ String> employeeId;

    /**
     * @return The employee identifier assigned to the user by the organisation.
     * 
     */
    public Output</* @Nullable */ String> employeeId() {
        return this.employeeId;
    }
    /**
     * Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.
     * 
     */
    @Export(name="employeeType", type=String.class, parameters={})
    private Output</* @Nullable */ String> employeeType;

    /**
     * @return Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.
     * 
     */
    public Output</* @Nullable */ String> employeeType() {
        return this.employeeType;
    }
    /**
     * For an external user invited to the tenant, this property represents the invited user's invitation status. Possible values are `PendingAcceptance` or `Accepted`.
     * 
     */
    @Export(name="externalUserState", type=String.class, parameters={})
    private Output<String> externalUserState;

    /**
     * @return For an external user invited to the tenant, this property represents the invited user's invitation status. Possible values are `PendingAcceptance` or `Accepted`.
     * 
     */
    public Output<String> externalUserState() {
        return this.externalUserState;
    }
    /**
     * The fax number of the user.
     * 
     */
    @Export(name="faxNumber", type=String.class, parameters={})
    private Output</* @Nullable */ String> faxNumber;

    /**
     * @return The fax number of the user.
     * 
     */
    public Output</* @Nullable */ String> faxNumber() {
        return this.faxNumber;
    }
    /**
     * Whether the user is forced to change the password during the next sign-in. Only takes effect when also changing the password. Defaults to `false`.
     * 
     */
    @Export(name="forcePasswordChange", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forcePasswordChange;

    /**
     * @return Whether the user is forced to change the password during the next sign-in. Only takes effect when also changing the password. Defaults to `false`.
     * 
     */
    public Output</* @Nullable */ Boolean> forcePasswordChange() {
        return this.forcePasswordChange;
    }
    /**
     * The given name (first name) of the user.
     * 
     */
    @Export(name="givenName", type=String.class, parameters={})
    private Output</* @Nullable */ String> givenName;

    /**
     * @return The given name (first name) of the user.
     * 
     */
    public Output</* @Nullable */ String> givenName() {
        return this.givenName;
    }
    /**
     * A list of instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user.
     * 
     */
    @Export(name="imAddresses", type=List.class, parameters={String.class})
    private Output<List<String>> imAddresses;

    /**
     * @return A list of instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user.
     * 
     */
    public Output<List<String>> imAddresses() {
        return this.imAddresses;
    }
    /**
     * The user’s job title.
     * 
     */
    @Export(name="jobTitle", type=String.class, parameters={})
    private Output</* @Nullable */ String> jobTitle;

    /**
     * @return The user’s job title.
     * 
     */
    public Output</* @Nullable */ String> jobTitle() {
        return this.jobTitle;
    }
    /**
     * The SMTP address for the user. This property cannot be unset once specified.
     * 
     */
    @Export(name="mail", type=String.class, parameters={})
    private Output<String> mail;

    /**
     * @return The SMTP address for the user. This property cannot be unset once specified.
     * 
     */
    public Output<String> mail() {
        return this.mail;
    }
    /**
     * The mail alias for the user. Defaults to the user name part of the user principal name (UPN).
     * 
     */
    @Export(name="mailNickname", type=String.class, parameters={})
    private Output<String> mailNickname;

    /**
     * @return The mail alias for the user. Defaults to the user name part of the user principal name (UPN).
     * 
     */
    public Output<String> mailNickname() {
        return this.mailNickname;
    }
    /**
     * The object ID of the user's manager.
     * 
     */
    @Export(name="managerId", type=String.class, parameters={})
    private Output</* @Nullable */ String> managerId;

    /**
     * @return The object ID of the user's manager.
     * 
     */
    public Output</* @Nullable */ String> managerId() {
        return this.managerId;
    }
    /**
     * The primary cellular telephone number for the user.
     * 
     */
    @Export(name="mobilePhone", type=String.class, parameters={})
    private Output</* @Nullable */ String> mobilePhone;

    /**
     * @return The primary cellular telephone number for the user.
     * 
     */
    public Output</* @Nullable */ String> mobilePhone() {
        return this.mobilePhone;
    }
    /**
     * The object ID of the user.
     * 
     */
    @Export(name="objectId", type=String.class, parameters={})
    private Output<String> objectId;

    /**
     * @return The object ID of the user.
     * 
     */
    public Output<String> objectId() {
        return this.objectId;
    }
    /**
     * The office location in the user's place of business.
     * 
     */
    @Export(name="officeLocation", type=String.class, parameters={})
    private Output</* @Nullable */ String> officeLocation;

    /**
     * @return The office location in the user's place of business.
     * 
     */
    public Output</* @Nullable */ String> officeLocation() {
        return this.officeLocation;
    }
    /**
     * The on-premises distinguished name (DN) of the user, synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    @Export(name="onpremisesDistinguishedName", type=String.class, parameters={})
    private Output<String> onpremisesDistinguishedName;

    /**
     * @return The on-premises distinguished name (DN) of the user, synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    public Output<String> onpremisesDistinguishedName() {
        return this.onpremisesDistinguishedName;
    }
    /**
     * The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    @Export(name="onpremisesDomainName", type=String.class, parameters={})
    private Output<String> onpremisesDomainName;

    /**
     * @return The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    public Output<String> onpremisesDomainName() {
        return this.onpremisesDomainName;
    }
    /**
     * The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user's `user_principal_name` property when creating a new user account.
     * 
     */
    @Export(name="onpremisesImmutableId", type=String.class, parameters={})
    private Output<String> onpremisesImmutableId;

    /**
     * @return The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user's `user_principal_name` property when creating a new user account.
     * 
     */
    public Output<String> onpremisesImmutableId() {
        return this.onpremisesImmutableId;
    }
    /**
     * The on-premise SAM account name of the user.
     * 
     */
    @Export(name="onpremisesSamAccountName", type=String.class, parameters={})
    private Output<String> onpremisesSamAccountName;

    /**
     * @return The on-premise SAM account name of the user.
     * 
     */
    public Output<String> onpremisesSamAccountName() {
        return this.onpremisesSamAccountName;
    }
    /**
     * The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    @Export(name="onpremisesSecurityIdentifier", type=String.class, parameters={})
    private Output<String> onpremisesSecurityIdentifier;

    /**
     * @return The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    public Output<String> onpremisesSecurityIdentifier() {
        return this.onpremisesSecurityIdentifier;
    }
    /**
     * Whether this user is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).
     * 
     */
    @Export(name="onpremisesSyncEnabled", type=Boolean.class, parameters={})
    private Output<Boolean> onpremisesSyncEnabled;

    /**
     * @return Whether this user is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).
     * 
     */
    public Output<Boolean> onpremisesSyncEnabled() {
        return this.onpremisesSyncEnabled;
    }
    /**
     * The on-premise user principal name of the user.
     * 
     */
    @Export(name="onpremisesUserPrincipalName", type=String.class, parameters={})
    private Output<String> onpremisesUserPrincipalName;

    /**
     * @return The on-premise user principal name of the user.
     * 
     */
    public Output<String> onpremisesUserPrincipalName() {
        return this.onpremisesUserPrincipalName;
    }
    /**
     * A list of additional email addresses for the user.
     * 
     */
    @Export(name="otherMails", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> otherMails;

    /**
     * @return A list of additional email addresses for the user.
     * 
     */
    public Output</* @Nullable */ List<String>> otherMails() {
        return this.otherMails;
    }
    /**
     * The password for the user. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters. This property is required when creating a new user.
     * 
     */
    @Export(name="password", type=String.class, parameters={})
    private Output<String> password;

    /**
     * @return The password for the user. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters. This property is required when creating a new user.
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.
     * 
     */
    @Export(name="postalCode", type=String.class, parameters={})
    private Output</* @Nullable */ String> postalCode;

    /**
     * @return The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.
     * 
     */
    public Output</* @Nullable */ String> postalCode() {
        return this.postalCode;
    }
    /**
     * The user's preferred language, in ISO 639-1 notation.
     * 
     */
    @Export(name="preferredLanguage", type=String.class, parameters={})
    private Output</* @Nullable */ String> preferredLanguage;

    /**
     * @return The user's preferred language, in ISO 639-1 notation.
     * 
     */
    public Output</* @Nullable */ String> preferredLanguage() {
        return this.preferredLanguage;
    }
    /**
     * List of email addresses for the user that direct to the same mailbox.
     * 
     */
    @Export(name="proxyAddresses", type=List.class, parameters={String.class})
    private Output<List<String>> proxyAddresses;

    /**
     * @return List of email addresses for the user that direct to the same mailbox.
     * 
     */
    public Output<List<String>> proxyAddresses() {
        return this.proxyAddresses;
    }
    /**
     * Whether or not the Outlook global address list should include this user. Defaults to `true`.
     * 
     */
    @Export(name="showInAddressList", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> showInAddressList;

    /**
     * @return Whether or not the Outlook global address list should include this user. Defaults to `true`.
     * 
     */
    public Output</* @Nullable */ Boolean> showInAddressList() {
        return this.showInAddressList;
    }
    /**
     * The state or province in the user's address.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output</* @Nullable */ String> state;

    /**
     * @return The state or province in the user's address.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }
    /**
     * The street address of the user's place of business.
     * 
     */
    @Export(name="streetAddress", type=String.class, parameters={})
    private Output</* @Nullable */ String> streetAddress;

    /**
     * @return The street address of the user's place of business.
     * 
     */
    public Output</* @Nullable */ String> streetAddress() {
        return this.streetAddress;
    }
    /**
     * The user's surname (family name or last name).
     * 
     */
    @Export(name="surname", type=String.class, parameters={})
    private Output</* @Nullable */ String> surname;

    /**
     * @return The user's surname (family name or last name).
     * 
     */
    public Output</* @Nullable */ String> surname() {
        return this.surname;
    }
    /**
     * The usage location of the user. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.
     * 
     */
    @Export(name="usageLocation", type=String.class, parameters={})
    private Output</* @Nullable */ String> usageLocation;

    /**
     * @return The usage location of the user. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.
     * 
     */
    public Output</* @Nullable */ String> usageLocation() {
        return this.usageLocation;
    }
    /**
     * The user principal name (UPN) of the user.
     * 
     */
    @Export(name="userPrincipalName", type=String.class, parameters={})
    private Output<String> userPrincipalName;

    /**
     * @return The user principal name (UPN) of the user.
     * 
     */
    public Output<String> userPrincipalName() {
        return this.userPrincipalName;
    }
    /**
     * The user type in the directory. Possible values are `Guest` or `Member`.
     * 
     */
    @Export(name="userType", type=String.class, parameters={})
    private Output<String> userType;

    /**
     * @return The user type in the directory. Possible values are `Guest` or `Member`.
     * 
     */
    public Output<String> userType() {
        return this.userType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public User(String name) {
        this(name, UserArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public User(String name, UserArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public User(String name, UserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/user:User", name, args == null ? UserArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private User(String name, Output<String> id, @Nullable UserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/user:User", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static User get(String name, Output<String> id, @Nullable UserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new User(name, id, state, options);
    }
}
