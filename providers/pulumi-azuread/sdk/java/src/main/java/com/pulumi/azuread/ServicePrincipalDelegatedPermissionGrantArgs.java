// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServicePrincipalDelegatedPermissionGrantArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicePrincipalDelegatedPermissionGrantArgs Empty = new ServicePrincipalDelegatedPermissionGrantArgs();

    /**
     * - A set of claim values for delegated permission scopes which should be included in access tokens for the resource.
     * 
     */
    @Import(name="claimValues", required=true)
      private final Output<List<String>> claimValues;

    public Output<List<String>> claimValues() {
        return this.claimValues;
    }

    /**
     * The object ID of the service principal representing the resource to be accessed. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceServicePrincipalObjectId", required=true)
      private final Output<String> resourceServicePrincipalObjectId;

    public Output<String> resourceServicePrincipalObjectId() {
        return this.resourceServicePrincipalObjectId;
    }

    /**
     * The object ID of the service principal for which this delegated permission grant should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="servicePrincipalObjectId", required=true)
      private final Output<String> servicePrincipalObjectId;

    public Output<String> servicePrincipalObjectId() {
        return this.servicePrincipalObjectId;
    }

    /**
     * - The object ID of the user on behalf of whom the service principal is authorized to access the resource. When omitted, the delegated permission grant will be consented for all users. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="userObjectId")
      private final @Nullable Output<String> userObjectId;

    public Output<String> userObjectId() {
        return this.userObjectId == null ? Codegen.empty() : this.userObjectId;
    }

    public ServicePrincipalDelegatedPermissionGrantArgs(
        Output<List<String>> claimValues,
        Output<String> resourceServicePrincipalObjectId,
        Output<String> servicePrincipalObjectId,
        @Nullable Output<String> userObjectId) {
        this.claimValues = Objects.requireNonNull(claimValues, "expected parameter 'claimValues' to be non-null");
        this.resourceServicePrincipalObjectId = Objects.requireNonNull(resourceServicePrincipalObjectId, "expected parameter 'resourceServicePrincipalObjectId' to be non-null");
        this.servicePrincipalObjectId = Objects.requireNonNull(servicePrincipalObjectId, "expected parameter 'servicePrincipalObjectId' to be non-null");
        this.userObjectId = userObjectId;
    }

    private ServicePrincipalDelegatedPermissionGrantArgs() {
        this.claimValues = Codegen.empty();
        this.resourceServicePrincipalObjectId = Codegen.empty();
        this.servicePrincipalObjectId = Codegen.empty();
        this.userObjectId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePrincipalDelegatedPermissionGrantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> claimValues;
        private Output<String> resourceServicePrincipalObjectId;
        private Output<String> servicePrincipalObjectId;
        private @Nullable Output<String> userObjectId;

        public Builder() {
    	      // Empty
        }

        public Builder(ServicePrincipalDelegatedPermissionGrantArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.claimValues = defaults.claimValues;
    	      this.resourceServicePrincipalObjectId = defaults.resourceServicePrincipalObjectId;
    	      this.servicePrincipalObjectId = defaults.servicePrincipalObjectId;
    	      this.userObjectId = defaults.userObjectId;
        }

        public Builder claimValues(Output<List<String>> claimValues) {
            this.claimValues = Objects.requireNonNull(claimValues);
            return this;
        }
        public Builder claimValues(List<String> claimValues) {
            this.claimValues = Output.of(Objects.requireNonNull(claimValues));
            return this;
        }
        public Builder claimValues(String... claimValues) {
            return claimValues(List.of(claimValues));
        }
        public Builder resourceServicePrincipalObjectId(Output<String> resourceServicePrincipalObjectId) {
            this.resourceServicePrincipalObjectId = Objects.requireNonNull(resourceServicePrincipalObjectId);
            return this;
        }
        public Builder resourceServicePrincipalObjectId(String resourceServicePrincipalObjectId) {
            this.resourceServicePrincipalObjectId = Output.of(Objects.requireNonNull(resourceServicePrincipalObjectId));
            return this;
        }
        public Builder servicePrincipalObjectId(Output<String> servicePrincipalObjectId) {
            this.servicePrincipalObjectId = Objects.requireNonNull(servicePrincipalObjectId);
            return this;
        }
        public Builder servicePrincipalObjectId(String servicePrincipalObjectId) {
            this.servicePrincipalObjectId = Output.of(Objects.requireNonNull(servicePrincipalObjectId));
            return this;
        }
        public Builder userObjectId(@Nullable Output<String> userObjectId) {
            this.userObjectId = userObjectId;
            return this;
        }
        public Builder userObjectId(@Nullable String userObjectId) {
            this.userObjectId = Codegen.ofNullable(userObjectId);
            return this;
        }        public ServicePrincipalDelegatedPermissionGrantArgs build() {
            return new ServicePrincipalDelegatedPermissionGrantArgs(claimValues, resourceServicePrincipalObjectId, servicePrincipalObjectId, userObjectId);
        }
    }
}
