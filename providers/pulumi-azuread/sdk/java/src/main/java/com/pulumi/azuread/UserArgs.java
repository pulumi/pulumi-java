// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Whether or not the account should be enabled.
     * 
     */
    @Import(name="accountEnabled")
      private final @Nullable Output<Boolean> accountEnabled;

    public Output<Boolean> accountEnabled() {
        return this.accountEnabled == null ? Codegen.empty() : this.accountEnabled;
    }

    /**
     * The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`. Omit this property or specify a blank string to unset.
     * 
     */
    @Import(name="ageGroup")
      private final @Nullable Output<String> ageGroup;

    public Output<String> ageGroup() {
        return this.ageGroup == null ? Codegen.empty() : this.ageGroup;
    }

    /**
     * A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.
     * 
     */
    @Import(name="businessPhones")
      private final @Nullable Output<List<String>> businessPhones;

    public Output<List<String>> businessPhones() {
        return this.businessPhones == null ? Codegen.empty() : this.businessPhones;
    }

    /**
     * The city in which the user is located.
     * 
     */
    @Import(name="city")
      private final @Nullable Output<String> city;

    public Output<String> city() {
        return this.city == null ? Codegen.empty() : this.city;
    }

    /**
     * The company name which the user is associated. This property can be useful for describing the company that an external user comes from.
     * 
     */
    @Import(name="companyName")
      private final @Nullable Output<String> companyName;

    public Output<String> companyName() {
        return this.companyName == null ? Codegen.empty() : this.companyName;
    }

    /**
     * Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`. Omit this property or specify a blank string to unset.
     * 
     */
    @Import(name="consentProvidedForMinor")
      private final @Nullable Output<String> consentProvidedForMinor;

    public Output<String> consentProvidedForMinor() {
        return this.consentProvidedForMinor == null ? Codegen.empty() : this.consentProvidedForMinor;
    }

    /**
     * The cost center associated with the user.
     * 
     */
    @Import(name="costCenter")
      private final @Nullable Output<String> costCenter;

    public Output<String> costCenter() {
        return this.costCenter == null ? Codegen.empty() : this.costCenter;
    }

    /**
     * The country/region in which the user is located, e.g. `US` or `UK`.
     * 
     */
    @Import(name="country")
      private final @Nullable Output<String> country;

    public Output<String> country() {
        return this.country == null ? Codegen.empty() : this.country;
    }

    /**
     * The name for the department in which the user works.
     * 
     */
    @Import(name="department")
      private final @Nullable Output<String> department;

    public Output<String> department() {
        return this.department == null ? Codegen.empty() : this.department;
    }

    /**
     * Whether the user's password is exempt from expiring. Defaults to `false`.
     * 
     */
    @Import(name="disablePasswordExpiration")
      private final @Nullable Output<Boolean> disablePasswordExpiration;

    public Output<Boolean> disablePasswordExpiration() {
        return this.disablePasswordExpiration == null ? Codegen.empty() : this.disablePasswordExpiration;
    }

    /**
     * Whether the user is allowed weaker passwords than the default policy to be specified. Defaults to `false`.
     * 
     */
    @Import(name="disableStrongPassword")
      private final @Nullable Output<Boolean> disableStrongPassword;

    public Output<Boolean> disableStrongPassword() {
        return this.disableStrongPassword == null ? Codegen.empty() : this.disableStrongPassword;
    }

    /**
     * The name to display in the address book for the user.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The name of the division in which the user works.
     * 
     */
    @Import(name="division")
      private final @Nullable Output<String> division;

    public Output<String> division() {
        return this.division == null ? Codegen.empty() : this.division;
    }

    /**
     * The employee identifier assigned to the user by the organisation.
     * 
     */
    @Import(name="employeeId")
      private final @Nullable Output<String> employeeId;

    public Output<String> employeeId() {
        return this.employeeId == null ? Codegen.empty() : this.employeeId;
    }

    /**
     * Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.
     * 
     */
    @Import(name="employeeType")
      private final @Nullable Output<String> employeeType;

    public Output<String> employeeType() {
        return this.employeeType == null ? Codegen.empty() : this.employeeType;
    }

    /**
     * The fax number of the user.
     * 
     */
    @Import(name="faxNumber")
      private final @Nullable Output<String> faxNumber;

    public Output<String> faxNumber() {
        return this.faxNumber == null ? Codegen.empty() : this.faxNumber;
    }

    /**
     * Whether the user is forced to change the password during the next sign-in. Only takes effect when also changing the password. Defaults to `false`.
     * 
     */
    @Import(name="forcePasswordChange")
      private final @Nullable Output<Boolean> forcePasswordChange;

    public Output<Boolean> forcePasswordChange() {
        return this.forcePasswordChange == null ? Codegen.empty() : this.forcePasswordChange;
    }

    /**
     * The given name (first name) of the user.
     * 
     */
    @Import(name="givenName")
      private final @Nullable Output<String> givenName;

    public Output<String> givenName() {
        return this.givenName == null ? Codegen.empty() : this.givenName;
    }

    /**
     * The userâ€™s job title.
     * 
     */
    @Import(name="jobTitle")
      private final @Nullable Output<String> jobTitle;

    public Output<String> jobTitle() {
        return this.jobTitle == null ? Codegen.empty() : this.jobTitle;
    }

    /**
     * The SMTP address for the user. This property cannot be unset once specified.
     * 
     */
    @Import(name="mail")
      private final @Nullable Output<String> mail;

    public Output<String> mail() {
        return this.mail == null ? Codegen.empty() : this.mail;
    }

    /**
     * The mail alias for the user. Defaults to the user name part of the user principal name (UPN).
     * 
     */
    @Import(name="mailNickname")
      private final @Nullable Output<String> mailNickname;

    public Output<String> mailNickname() {
        return this.mailNickname == null ? Codegen.empty() : this.mailNickname;
    }

    /**
     * The object ID of the user's manager.
     * 
     */
    @Import(name="managerId")
      private final @Nullable Output<String> managerId;

    public Output<String> managerId() {
        return this.managerId == null ? Codegen.empty() : this.managerId;
    }

    /**
     * The primary cellular telephone number for the user.
     * 
     */
    @Import(name="mobilePhone")
      private final @Nullable Output<String> mobilePhone;

    public Output<String> mobilePhone() {
        return this.mobilePhone == null ? Codegen.empty() : this.mobilePhone;
    }

    /**
     * The office location in the user's place of business.
     * 
     */
    @Import(name="officeLocation")
      private final @Nullable Output<String> officeLocation;

    public Output<String> officeLocation() {
        return this.officeLocation == null ? Codegen.empty() : this.officeLocation;
    }

    /**
     * The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user's `user_principal_name` property when creating a new user account.
     * 
     */
    @Import(name="onpremisesImmutableId")
      private final @Nullable Output<String> onpremisesImmutableId;

    public Output<String> onpremisesImmutableId() {
        return this.onpremisesImmutableId == null ? Codegen.empty() : this.onpremisesImmutableId;
    }

    /**
     * A list of additional email addresses for the user.
     * 
     */
    @Import(name="otherMails")
      private final @Nullable Output<List<String>> otherMails;

    public Output<List<String>> otherMails() {
        return this.otherMails == null ? Codegen.empty() : this.otherMails;
    }

    /**
     * The password for the user. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters. This property is required when creating a new user.
     * 
     */
    @Import(name="password")
      private final @Nullable Output<String> password;

    public Output<String> password() {
        return this.password == null ? Codegen.empty() : this.password;
    }

    /**
     * The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.
     * 
     */
    @Import(name="postalCode")
      private final @Nullable Output<String> postalCode;

    public Output<String> postalCode() {
        return this.postalCode == null ? Codegen.empty() : this.postalCode;
    }

    /**
     * The user's preferred language, in ISO 639-1 notation.
     * 
     */
    @Import(name="preferredLanguage")
      private final @Nullable Output<String> preferredLanguage;

    public Output<String> preferredLanguage() {
        return this.preferredLanguage == null ? Codegen.empty() : this.preferredLanguage;
    }

    /**
     * Whether or not the Outlook global address list should include this user. Defaults to `true`.
     * 
     */
    @Import(name="showInAddressList")
      private final @Nullable Output<Boolean> showInAddressList;

    public Output<Boolean> showInAddressList() {
        return this.showInAddressList == null ? Codegen.empty() : this.showInAddressList;
    }

    /**
     * The state or province in the user's address.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> state() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    /**
     * The street address of the user's place of business.
     * 
     */
    @Import(name="streetAddress")
      private final @Nullable Output<String> streetAddress;

    public Output<String> streetAddress() {
        return this.streetAddress == null ? Codegen.empty() : this.streetAddress;
    }

    /**
     * The user's surname (family name or last name).
     * 
     */
    @Import(name="surname")
      private final @Nullable Output<String> surname;

    public Output<String> surname() {
        return this.surname == null ? Codegen.empty() : this.surname;
    }

    /**
     * The usage location of the user. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.
     * 
     */
    @Import(name="usageLocation")
      private final @Nullable Output<String> usageLocation;

    public Output<String> usageLocation() {
        return this.usageLocation == null ? Codegen.empty() : this.usageLocation;
    }

    /**
     * The user principal name (UPN) of the user.
     * 
     */
    @Import(name="userPrincipalName", required=true)
      private final Output<String> userPrincipalName;

    public Output<String> userPrincipalName() {
        return this.userPrincipalName;
    }

    public UserArgs(
        @Nullable Output<Boolean> accountEnabled,
        @Nullable Output<String> ageGroup,
        @Nullable Output<List<String>> businessPhones,
        @Nullable Output<String> city,
        @Nullable Output<String> companyName,
        @Nullable Output<String> consentProvidedForMinor,
        @Nullable Output<String> costCenter,
        @Nullable Output<String> country,
        @Nullable Output<String> department,
        @Nullable Output<Boolean> disablePasswordExpiration,
        @Nullable Output<Boolean> disableStrongPassword,
        Output<String> displayName,
        @Nullable Output<String> division,
        @Nullable Output<String> employeeId,
        @Nullable Output<String> employeeType,
        @Nullable Output<String> faxNumber,
        @Nullable Output<Boolean> forcePasswordChange,
        @Nullable Output<String> givenName,
        @Nullable Output<String> jobTitle,
        @Nullable Output<String> mail,
        @Nullable Output<String> mailNickname,
        @Nullable Output<String> managerId,
        @Nullable Output<String> mobilePhone,
        @Nullable Output<String> officeLocation,
        @Nullable Output<String> onpremisesImmutableId,
        @Nullable Output<List<String>> otherMails,
        @Nullable Output<String> password,
        @Nullable Output<String> postalCode,
        @Nullable Output<String> preferredLanguage,
        @Nullable Output<Boolean> showInAddressList,
        @Nullable Output<String> state,
        @Nullable Output<String> streetAddress,
        @Nullable Output<String> surname,
        @Nullable Output<String> usageLocation,
        Output<String> userPrincipalName) {
        this.accountEnabled = accountEnabled;
        this.ageGroup = ageGroup;
        this.businessPhones = businessPhones;
        this.city = city;
        this.companyName = companyName;
        this.consentProvidedForMinor = consentProvidedForMinor;
        this.costCenter = costCenter;
        this.country = country;
        this.department = department;
        this.disablePasswordExpiration = disablePasswordExpiration;
        this.disableStrongPassword = disableStrongPassword;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.division = division;
        this.employeeId = employeeId;
        this.employeeType = employeeType;
        this.faxNumber = faxNumber;
        this.forcePasswordChange = forcePasswordChange;
        this.givenName = givenName;
        this.jobTitle = jobTitle;
        this.mail = mail;
        this.mailNickname = mailNickname;
        this.managerId = managerId;
        this.mobilePhone = mobilePhone;
        this.officeLocation = officeLocation;
        this.onpremisesImmutableId = onpremisesImmutableId;
        this.otherMails = otherMails;
        this.password = password;
        this.postalCode = postalCode;
        this.preferredLanguage = preferredLanguage;
        this.showInAddressList = showInAddressList;
        this.state = state;
        this.streetAddress = streetAddress;
        this.surname = surname;
        this.usageLocation = usageLocation;
        this.userPrincipalName = Objects.requireNonNull(userPrincipalName, "expected parameter 'userPrincipalName' to be non-null");
    }

    private UserArgs() {
        this.accountEnabled = Codegen.empty();
        this.ageGroup = Codegen.empty();
        this.businessPhones = Codegen.empty();
        this.city = Codegen.empty();
        this.companyName = Codegen.empty();
        this.consentProvidedForMinor = Codegen.empty();
        this.costCenter = Codegen.empty();
        this.country = Codegen.empty();
        this.department = Codegen.empty();
        this.disablePasswordExpiration = Codegen.empty();
        this.disableStrongPassword = Codegen.empty();
        this.displayName = Codegen.empty();
        this.division = Codegen.empty();
        this.employeeId = Codegen.empty();
        this.employeeType = Codegen.empty();
        this.faxNumber = Codegen.empty();
        this.forcePasswordChange = Codegen.empty();
        this.givenName = Codegen.empty();
        this.jobTitle = Codegen.empty();
        this.mail = Codegen.empty();
        this.mailNickname = Codegen.empty();
        this.managerId = Codegen.empty();
        this.mobilePhone = Codegen.empty();
        this.officeLocation = Codegen.empty();
        this.onpremisesImmutableId = Codegen.empty();
        this.otherMails = Codegen.empty();
        this.password = Codegen.empty();
        this.postalCode = Codegen.empty();
        this.preferredLanguage = Codegen.empty();
        this.showInAddressList = Codegen.empty();
        this.state = Codegen.empty();
        this.streetAddress = Codegen.empty();
        this.surname = Codegen.empty();
        this.usageLocation = Codegen.empty();
        this.userPrincipalName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> accountEnabled;
        private @Nullable Output<String> ageGroup;
        private @Nullable Output<List<String>> businessPhones;
        private @Nullable Output<String> city;
        private @Nullable Output<String> companyName;
        private @Nullable Output<String> consentProvidedForMinor;
        private @Nullable Output<String> costCenter;
        private @Nullable Output<String> country;
        private @Nullable Output<String> department;
        private @Nullable Output<Boolean> disablePasswordExpiration;
        private @Nullable Output<Boolean> disableStrongPassword;
        private Output<String> displayName;
        private @Nullable Output<String> division;
        private @Nullable Output<String> employeeId;
        private @Nullable Output<String> employeeType;
        private @Nullable Output<String> faxNumber;
        private @Nullable Output<Boolean> forcePasswordChange;
        private @Nullable Output<String> givenName;
        private @Nullable Output<String> jobTitle;
        private @Nullable Output<String> mail;
        private @Nullable Output<String> mailNickname;
        private @Nullable Output<String> managerId;
        private @Nullable Output<String> mobilePhone;
        private @Nullable Output<String> officeLocation;
        private @Nullable Output<String> onpremisesImmutableId;
        private @Nullable Output<List<String>> otherMails;
        private @Nullable Output<String> password;
        private @Nullable Output<String> postalCode;
        private @Nullable Output<String> preferredLanguage;
        private @Nullable Output<Boolean> showInAddressList;
        private @Nullable Output<String> state;
        private @Nullable Output<String> streetAddress;
        private @Nullable Output<String> surname;
        private @Nullable Output<String> usageLocation;
        private Output<String> userPrincipalName;

        public Builder() {
    	      // Empty
        }

        public Builder(UserArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountEnabled = defaults.accountEnabled;
    	      this.ageGroup = defaults.ageGroup;
    	      this.businessPhones = defaults.businessPhones;
    	      this.city = defaults.city;
    	      this.companyName = defaults.companyName;
    	      this.consentProvidedForMinor = defaults.consentProvidedForMinor;
    	      this.costCenter = defaults.costCenter;
    	      this.country = defaults.country;
    	      this.department = defaults.department;
    	      this.disablePasswordExpiration = defaults.disablePasswordExpiration;
    	      this.disableStrongPassword = defaults.disableStrongPassword;
    	      this.displayName = defaults.displayName;
    	      this.division = defaults.division;
    	      this.employeeId = defaults.employeeId;
    	      this.employeeType = defaults.employeeType;
    	      this.faxNumber = defaults.faxNumber;
    	      this.forcePasswordChange = defaults.forcePasswordChange;
    	      this.givenName = defaults.givenName;
    	      this.jobTitle = defaults.jobTitle;
    	      this.mail = defaults.mail;
    	      this.mailNickname = defaults.mailNickname;
    	      this.managerId = defaults.managerId;
    	      this.mobilePhone = defaults.mobilePhone;
    	      this.officeLocation = defaults.officeLocation;
    	      this.onpremisesImmutableId = defaults.onpremisesImmutableId;
    	      this.otherMails = defaults.otherMails;
    	      this.password = defaults.password;
    	      this.postalCode = defaults.postalCode;
    	      this.preferredLanguage = defaults.preferredLanguage;
    	      this.showInAddressList = defaults.showInAddressList;
    	      this.state = defaults.state;
    	      this.streetAddress = defaults.streetAddress;
    	      this.surname = defaults.surname;
    	      this.usageLocation = defaults.usageLocation;
    	      this.userPrincipalName = defaults.userPrincipalName;
        }

        public Builder accountEnabled(@Nullable Output<Boolean> accountEnabled) {
            this.accountEnabled = accountEnabled;
            return this;
        }
        public Builder accountEnabled(@Nullable Boolean accountEnabled) {
            this.accountEnabled = Codegen.ofNullable(accountEnabled);
            return this;
        }
        public Builder ageGroup(@Nullable Output<String> ageGroup) {
            this.ageGroup = ageGroup;
            return this;
        }
        public Builder ageGroup(@Nullable String ageGroup) {
            this.ageGroup = Codegen.ofNullable(ageGroup);
            return this;
        }
        public Builder businessPhones(@Nullable Output<List<String>> businessPhones) {
            this.businessPhones = businessPhones;
            return this;
        }
        public Builder businessPhones(@Nullable List<String> businessPhones) {
            this.businessPhones = Codegen.ofNullable(businessPhones);
            return this;
        }
        public Builder businessPhones(String... businessPhones) {
            return businessPhones(List.of(businessPhones));
        }
        public Builder city(@Nullable Output<String> city) {
            this.city = city;
            return this;
        }
        public Builder city(@Nullable String city) {
            this.city = Codegen.ofNullable(city);
            return this;
        }
        public Builder companyName(@Nullable Output<String> companyName) {
            this.companyName = companyName;
            return this;
        }
        public Builder companyName(@Nullable String companyName) {
            this.companyName = Codegen.ofNullable(companyName);
            return this;
        }
        public Builder consentProvidedForMinor(@Nullable Output<String> consentProvidedForMinor) {
            this.consentProvidedForMinor = consentProvidedForMinor;
            return this;
        }
        public Builder consentProvidedForMinor(@Nullable String consentProvidedForMinor) {
            this.consentProvidedForMinor = Codegen.ofNullable(consentProvidedForMinor);
            return this;
        }
        public Builder costCenter(@Nullable Output<String> costCenter) {
            this.costCenter = costCenter;
            return this;
        }
        public Builder costCenter(@Nullable String costCenter) {
            this.costCenter = Codegen.ofNullable(costCenter);
            return this;
        }
        public Builder country(@Nullable Output<String> country) {
            this.country = country;
            return this;
        }
        public Builder country(@Nullable String country) {
            this.country = Codegen.ofNullable(country);
            return this;
        }
        public Builder department(@Nullable Output<String> department) {
            this.department = department;
            return this;
        }
        public Builder department(@Nullable String department) {
            this.department = Codegen.ofNullable(department);
            return this;
        }
        public Builder disablePasswordExpiration(@Nullable Output<Boolean> disablePasswordExpiration) {
            this.disablePasswordExpiration = disablePasswordExpiration;
            return this;
        }
        public Builder disablePasswordExpiration(@Nullable Boolean disablePasswordExpiration) {
            this.disablePasswordExpiration = Codegen.ofNullable(disablePasswordExpiration);
            return this;
        }
        public Builder disableStrongPassword(@Nullable Output<Boolean> disableStrongPassword) {
            this.disableStrongPassword = disableStrongPassword;
            return this;
        }
        public Builder disableStrongPassword(@Nullable Boolean disableStrongPassword) {
            this.disableStrongPassword = Codegen.ofNullable(disableStrongPassword);
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder division(@Nullable Output<String> division) {
            this.division = division;
            return this;
        }
        public Builder division(@Nullable String division) {
            this.division = Codegen.ofNullable(division);
            return this;
        }
        public Builder employeeId(@Nullable Output<String> employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        public Builder employeeId(@Nullable String employeeId) {
            this.employeeId = Codegen.ofNullable(employeeId);
            return this;
        }
        public Builder employeeType(@Nullable Output<String> employeeType) {
            this.employeeType = employeeType;
            return this;
        }
        public Builder employeeType(@Nullable String employeeType) {
            this.employeeType = Codegen.ofNullable(employeeType);
            return this;
        }
        public Builder faxNumber(@Nullable Output<String> faxNumber) {
            this.faxNumber = faxNumber;
            return this;
        }
        public Builder faxNumber(@Nullable String faxNumber) {
            this.faxNumber = Codegen.ofNullable(faxNumber);
            return this;
        }
        public Builder forcePasswordChange(@Nullable Output<Boolean> forcePasswordChange) {
            this.forcePasswordChange = forcePasswordChange;
            return this;
        }
        public Builder forcePasswordChange(@Nullable Boolean forcePasswordChange) {
            this.forcePasswordChange = Codegen.ofNullable(forcePasswordChange);
            return this;
        }
        public Builder givenName(@Nullable Output<String> givenName) {
            this.givenName = givenName;
            return this;
        }
        public Builder givenName(@Nullable String givenName) {
            this.givenName = Codegen.ofNullable(givenName);
            return this;
        }
        public Builder jobTitle(@Nullable Output<String> jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        public Builder jobTitle(@Nullable String jobTitle) {
            this.jobTitle = Codegen.ofNullable(jobTitle);
            return this;
        }
        public Builder mail(@Nullable Output<String> mail) {
            this.mail = mail;
            return this;
        }
        public Builder mail(@Nullable String mail) {
            this.mail = Codegen.ofNullable(mail);
            return this;
        }
        public Builder mailNickname(@Nullable Output<String> mailNickname) {
            this.mailNickname = mailNickname;
            return this;
        }
        public Builder mailNickname(@Nullable String mailNickname) {
            this.mailNickname = Codegen.ofNullable(mailNickname);
            return this;
        }
        public Builder managerId(@Nullable Output<String> managerId) {
            this.managerId = managerId;
            return this;
        }
        public Builder managerId(@Nullable String managerId) {
            this.managerId = Codegen.ofNullable(managerId);
            return this;
        }
        public Builder mobilePhone(@Nullable Output<String> mobilePhone) {
            this.mobilePhone = mobilePhone;
            return this;
        }
        public Builder mobilePhone(@Nullable String mobilePhone) {
            this.mobilePhone = Codegen.ofNullable(mobilePhone);
            return this;
        }
        public Builder officeLocation(@Nullable Output<String> officeLocation) {
            this.officeLocation = officeLocation;
            return this;
        }
        public Builder officeLocation(@Nullable String officeLocation) {
            this.officeLocation = Codegen.ofNullable(officeLocation);
            return this;
        }
        public Builder onpremisesImmutableId(@Nullable Output<String> onpremisesImmutableId) {
            this.onpremisesImmutableId = onpremisesImmutableId;
            return this;
        }
        public Builder onpremisesImmutableId(@Nullable String onpremisesImmutableId) {
            this.onpremisesImmutableId = Codegen.ofNullable(onpremisesImmutableId);
            return this;
        }
        public Builder otherMails(@Nullable Output<List<String>> otherMails) {
            this.otherMails = otherMails;
            return this;
        }
        public Builder otherMails(@Nullable List<String> otherMails) {
            this.otherMails = Codegen.ofNullable(otherMails);
            return this;
        }
        public Builder otherMails(String... otherMails) {
            return otherMails(List.of(otherMails));
        }
        public Builder password(@Nullable Output<String> password) {
            this.password = password;
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = Codegen.ofNullable(password);
            return this;
        }
        public Builder postalCode(@Nullable Output<String> postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        public Builder postalCode(@Nullable String postalCode) {
            this.postalCode = Codegen.ofNullable(postalCode);
            return this;
        }
        public Builder preferredLanguage(@Nullable Output<String> preferredLanguage) {
            this.preferredLanguage = preferredLanguage;
            return this;
        }
        public Builder preferredLanguage(@Nullable String preferredLanguage) {
            this.preferredLanguage = Codegen.ofNullable(preferredLanguage);
            return this;
        }
        public Builder showInAddressList(@Nullable Output<Boolean> showInAddressList) {
            this.showInAddressList = showInAddressList;
            return this;
        }
        public Builder showInAddressList(@Nullable Boolean showInAddressList) {
            this.showInAddressList = Codegen.ofNullable(showInAddressList);
            return this;
        }
        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }
        public Builder streetAddress(@Nullable Output<String> streetAddress) {
            this.streetAddress = streetAddress;
            return this;
        }
        public Builder streetAddress(@Nullable String streetAddress) {
            this.streetAddress = Codegen.ofNullable(streetAddress);
            return this;
        }
        public Builder surname(@Nullable Output<String> surname) {
            this.surname = surname;
            return this;
        }
        public Builder surname(@Nullable String surname) {
            this.surname = Codegen.ofNullable(surname);
            return this;
        }
        public Builder usageLocation(@Nullable Output<String> usageLocation) {
            this.usageLocation = usageLocation;
            return this;
        }
        public Builder usageLocation(@Nullable String usageLocation) {
            this.usageLocation = Codegen.ofNullable(usageLocation);
            return this;
        }
        public Builder userPrincipalName(Output<String> userPrincipalName) {
            this.userPrincipalName = Objects.requireNonNull(userPrincipalName);
            return this;
        }
        public Builder userPrincipalName(String userPrincipalName) {
            this.userPrincipalName = Output.of(Objects.requireNonNull(userPrincipalName));
            return this;
        }        public UserArgs build() {
            return new UserArgs(accountEnabled, ageGroup, businessPhones, city, companyName, consentProvidedForMinor, costCenter, country, department, disablePasswordExpiration, disableStrongPassword, displayName, division, employeeId, employeeType, faxNumber, forcePasswordChange, givenName, jobTitle, mail, mailNickname, managerId, mobilePhone, officeLocation, onpremisesImmutableId, otherMails, password, postalCode, preferredLanguage, showInAddressList, state, streetAddress, surname, usageLocation, userPrincipalName);
        }
    }
}
