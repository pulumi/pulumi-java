// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Whether or not the account should be enabled.
     * 
     */
    @Import(name="accountEnabled")
    private @Nullable Output<Boolean> accountEnabled;

    /**
     * @return Whether or not the account should be enabled.
     * 
     */
    public Optional<Output<Boolean>> accountEnabled() {
        return Optional.ofNullable(this.accountEnabled);
    }

    /**
     * The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`. Omit this property or specify a blank string to unset.
     * 
     */
    @Import(name="ageGroup")
    private @Nullable Output<String> ageGroup;

    /**
     * @return The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`. Omit this property or specify a blank string to unset.
     * 
     */
    public Optional<Output<String>> ageGroup() {
        return Optional.ofNullable(this.ageGroup);
    }

    /**
     * A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.
     * 
     */
    @Import(name="businessPhones")
    private @Nullable Output<List<String>> businessPhones;

    /**
     * @return A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.
     * 
     */
    public Optional<Output<List<String>>> businessPhones() {
        return Optional.ofNullable(this.businessPhones);
    }

    /**
     * The city in which the user is located.
     * 
     */
    @Import(name="city")
    private @Nullable Output<String> city;

    /**
     * @return The city in which the user is located.
     * 
     */
    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * The company name which the user is associated. This property can be useful for describing the company that an external user comes from.
     * 
     */
    @Import(name="companyName")
    private @Nullable Output<String> companyName;

    /**
     * @return The company name which the user is associated. This property can be useful for describing the company that an external user comes from.
     * 
     */
    public Optional<Output<String>> companyName() {
        return Optional.ofNullable(this.companyName);
    }

    /**
     * Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`. Omit this property or specify a blank string to unset.
     * 
     */
    @Import(name="consentProvidedForMinor")
    private @Nullable Output<String> consentProvidedForMinor;

    /**
     * @return Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`. Omit this property or specify a blank string to unset.
     * 
     */
    public Optional<Output<String>> consentProvidedForMinor() {
        return Optional.ofNullable(this.consentProvidedForMinor);
    }

    /**
     * The cost center associated with the user.
     * 
     */
    @Import(name="costCenter")
    private @Nullable Output<String> costCenter;

    /**
     * @return The cost center associated with the user.
     * 
     */
    public Optional<Output<String>> costCenter() {
        return Optional.ofNullable(this.costCenter);
    }

    /**
     * The country/region in which the user is located, e.g. `US` or `UK`.
     * 
     */
    @Import(name="country")
    private @Nullable Output<String> country;

    /**
     * @return The country/region in which the user is located, e.g. `US` or `UK`.
     * 
     */
    public Optional<Output<String>> country() {
        return Optional.ofNullable(this.country);
    }

    /**
     * The name for the department in which the user works.
     * 
     */
    @Import(name="department")
    private @Nullable Output<String> department;

    /**
     * @return The name for the department in which the user works.
     * 
     */
    public Optional<Output<String>> department() {
        return Optional.ofNullable(this.department);
    }

    /**
     * Whether the user&#39;s password is exempt from expiring. Defaults to `false`.
     * 
     */
    @Import(name="disablePasswordExpiration")
    private @Nullable Output<Boolean> disablePasswordExpiration;

    /**
     * @return Whether the user&#39;s password is exempt from expiring. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disablePasswordExpiration() {
        return Optional.ofNullable(this.disablePasswordExpiration);
    }

    /**
     * Whether the user is allowed weaker passwords than the default policy to be specified. Defaults to `false`.
     * 
     */
    @Import(name="disableStrongPassword")
    private @Nullable Output<Boolean> disableStrongPassword;

    /**
     * @return Whether the user is allowed weaker passwords than the default policy to be specified. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disableStrongPassword() {
        return Optional.ofNullable(this.disableStrongPassword);
    }

    /**
     * The name to display in the address book for the user.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The name to display in the address book for the user.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The name of the division in which the user works.
     * 
     */
    @Import(name="division")
    private @Nullable Output<String> division;

    /**
     * @return The name of the division in which the user works.
     * 
     */
    public Optional<Output<String>> division() {
        return Optional.ofNullable(this.division);
    }

    /**
     * The employee identifier assigned to the user by the organisation.
     * 
     */
    @Import(name="employeeId")
    private @Nullable Output<String> employeeId;

    /**
     * @return The employee identifier assigned to the user by the organisation.
     * 
     */
    public Optional<Output<String>> employeeId() {
        return Optional.ofNullable(this.employeeId);
    }

    /**
     * Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.
     * 
     */
    @Import(name="employeeType")
    private @Nullable Output<String> employeeType;

    /**
     * @return Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.
     * 
     */
    public Optional<Output<String>> employeeType() {
        return Optional.ofNullable(this.employeeType);
    }

    /**
     * The fax number of the user.
     * 
     */
    @Import(name="faxNumber")
    private @Nullable Output<String> faxNumber;

    /**
     * @return The fax number of the user.
     * 
     */
    public Optional<Output<String>> faxNumber() {
        return Optional.ofNullable(this.faxNumber);
    }

    /**
     * Whether the user is forced to change the password during the next sign-in. Only takes effect when also changing the password. Defaults to `false`.
     * 
     */
    @Import(name="forcePasswordChange")
    private @Nullable Output<Boolean> forcePasswordChange;

    /**
     * @return Whether the user is forced to change the password during the next sign-in. Only takes effect when also changing the password. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> forcePasswordChange() {
        return Optional.ofNullable(this.forcePasswordChange);
    }

    /**
     * The given name (first name) of the user.
     * 
     */
    @Import(name="givenName")
    private @Nullable Output<String> givenName;

    /**
     * @return The given name (first name) of the user.
     * 
     */
    public Optional<Output<String>> givenName() {
        return Optional.ofNullable(this.givenName);
    }

    /**
     * The user’s job title.
     * 
     */
    @Import(name="jobTitle")
    private @Nullable Output<String> jobTitle;

    /**
     * @return The user’s job title.
     * 
     */
    public Optional<Output<String>> jobTitle() {
        return Optional.ofNullable(this.jobTitle);
    }

    /**
     * The SMTP address for the user. This property cannot be unset once specified.
     * 
     */
    @Import(name="mail")
    private @Nullable Output<String> mail;

    /**
     * @return The SMTP address for the user. This property cannot be unset once specified.
     * 
     */
    public Optional<Output<String>> mail() {
        return Optional.ofNullable(this.mail);
    }

    /**
     * The mail alias for the user. Defaults to the user name part of the user principal name (UPN).
     * 
     */
    @Import(name="mailNickname")
    private @Nullable Output<String> mailNickname;

    /**
     * @return The mail alias for the user. Defaults to the user name part of the user principal name (UPN).
     * 
     */
    public Optional<Output<String>> mailNickname() {
        return Optional.ofNullable(this.mailNickname);
    }

    /**
     * The object ID of the user&#39;s manager.
     * 
     */
    @Import(name="managerId")
    private @Nullable Output<String> managerId;

    /**
     * @return The object ID of the user&#39;s manager.
     * 
     */
    public Optional<Output<String>> managerId() {
        return Optional.ofNullable(this.managerId);
    }

    /**
     * The primary cellular telephone number for the user.
     * 
     */
    @Import(name="mobilePhone")
    private @Nullable Output<String> mobilePhone;

    /**
     * @return The primary cellular telephone number for the user.
     * 
     */
    public Optional<Output<String>> mobilePhone() {
        return Optional.ofNullable(this.mobilePhone);
    }

    /**
     * The office location in the user&#39;s place of business.
     * 
     */
    @Import(name="officeLocation")
    private @Nullable Output<String> officeLocation;

    /**
     * @return The office location in the user&#39;s place of business.
     * 
     */
    public Optional<Output<String>> officeLocation() {
        return Optional.ofNullable(this.officeLocation);
    }

    /**
     * The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user&#39;s `user_principal_name` property when creating a new user account.
     * 
     */
    @Import(name="onpremisesImmutableId")
    private @Nullable Output<String> onpremisesImmutableId;

    /**
     * @return The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user&#39;s `user_principal_name` property when creating a new user account.
     * 
     */
    public Optional<Output<String>> onpremisesImmutableId() {
        return Optional.ofNullable(this.onpremisesImmutableId);
    }

    /**
     * A list of additional email addresses for the user.
     * 
     */
    @Import(name="otherMails")
    private @Nullable Output<List<String>> otherMails;

    /**
     * @return A list of additional email addresses for the user.
     * 
     */
    public Optional<Output<List<String>>> otherMails() {
        return Optional.ofNullable(this.otherMails);
    }

    /**
     * The password for the user. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters. This property is required when creating a new user.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for the user. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters. This property is required when creating a new user.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The postal code for the user&#39;s postal address. The postal code is specific to the user&#39;s country/region. In the United States of America, this attribute contains the ZIP code.
     * 
     */
    @Import(name="postalCode")
    private @Nullable Output<String> postalCode;

    /**
     * @return The postal code for the user&#39;s postal address. The postal code is specific to the user&#39;s country/region. In the United States of America, this attribute contains the ZIP code.
     * 
     */
    public Optional<Output<String>> postalCode() {
        return Optional.ofNullable(this.postalCode);
    }

    /**
     * The user&#39;s preferred language, in ISO 639-1 notation.
     * 
     */
    @Import(name="preferredLanguage")
    private @Nullable Output<String> preferredLanguage;

    /**
     * @return The user&#39;s preferred language, in ISO 639-1 notation.
     * 
     */
    public Optional<Output<String>> preferredLanguage() {
        return Optional.ofNullable(this.preferredLanguage);
    }

    /**
     * Whether or not the Outlook global address list should include this user. Defaults to `true`.
     * 
     */
    @Import(name="showInAddressList")
    private @Nullable Output<Boolean> showInAddressList;

    /**
     * @return Whether or not the Outlook global address list should include this user. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> showInAddressList() {
        return Optional.ofNullable(this.showInAddressList);
    }

    /**
     * The state or province in the user&#39;s address.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state or province in the user&#39;s address.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The street address of the user&#39;s place of business.
     * 
     */
    @Import(name="streetAddress")
    private @Nullable Output<String> streetAddress;

    /**
     * @return The street address of the user&#39;s place of business.
     * 
     */
    public Optional<Output<String>> streetAddress() {
        return Optional.ofNullable(this.streetAddress);
    }

    /**
     * The user&#39;s surname (family name or last name).
     * 
     */
    @Import(name="surname")
    private @Nullable Output<String> surname;

    /**
     * @return The user&#39;s surname (family name or last name).
     * 
     */
    public Optional<Output<String>> surname() {
        return Optional.ofNullable(this.surname);
    }

    /**
     * The usage location of the user. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.
     * 
     */
    @Import(name="usageLocation")
    private @Nullable Output<String> usageLocation;

    /**
     * @return The usage location of the user. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.
     * 
     */
    public Optional<Output<String>> usageLocation() {
        return Optional.ofNullable(this.usageLocation);
    }

    /**
     * The user principal name (UPN) of the user.
     * 
     */
    @Import(name="userPrincipalName", required=true)
    private Output<String> userPrincipalName;

    /**
     * @return The user principal name (UPN) of the user.
     * 
     */
    public Output<String> userPrincipalName() {
        return this.userPrincipalName;
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.accountEnabled = $.accountEnabled;
        this.ageGroup = $.ageGroup;
        this.businessPhones = $.businessPhones;
        this.city = $.city;
        this.companyName = $.companyName;
        this.consentProvidedForMinor = $.consentProvidedForMinor;
        this.costCenter = $.costCenter;
        this.country = $.country;
        this.department = $.department;
        this.disablePasswordExpiration = $.disablePasswordExpiration;
        this.disableStrongPassword = $.disableStrongPassword;
        this.displayName = $.displayName;
        this.division = $.division;
        this.employeeId = $.employeeId;
        this.employeeType = $.employeeType;
        this.faxNumber = $.faxNumber;
        this.forcePasswordChange = $.forcePasswordChange;
        this.givenName = $.givenName;
        this.jobTitle = $.jobTitle;
        this.mail = $.mail;
        this.mailNickname = $.mailNickname;
        this.managerId = $.managerId;
        this.mobilePhone = $.mobilePhone;
        this.officeLocation = $.officeLocation;
        this.onpremisesImmutableId = $.onpremisesImmutableId;
        this.otherMails = $.otherMails;
        this.password = $.password;
        this.postalCode = $.postalCode;
        this.preferredLanguage = $.preferredLanguage;
        this.showInAddressList = $.showInAddressList;
        this.state = $.state;
        this.streetAddress = $.streetAddress;
        this.surname = $.surname;
        this.usageLocation = $.usageLocation;
        this.userPrincipalName = $.userPrincipalName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountEnabled Whether or not the account should be enabled.
         * 
         * @return builder
         * 
         */
        public Builder accountEnabled(@Nullable Output<Boolean> accountEnabled) {
            $.accountEnabled = accountEnabled;
            return this;
        }

        /**
         * @param accountEnabled Whether or not the account should be enabled.
         * 
         * @return builder
         * 
         */
        public Builder accountEnabled(Boolean accountEnabled) {
            return accountEnabled(Output.of(accountEnabled));
        }

        /**
         * @param ageGroup The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`. Omit this property or specify a blank string to unset.
         * 
         * @return builder
         * 
         */
        public Builder ageGroup(@Nullable Output<String> ageGroup) {
            $.ageGroup = ageGroup;
            return this;
        }

        /**
         * @param ageGroup The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`. Omit this property or specify a blank string to unset.
         * 
         * @return builder
         * 
         */
        public Builder ageGroup(String ageGroup) {
            return ageGroup(Output.of(ageGroup));
        }

        /**
         * @param businessPhones A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.
         * 
         * @return builder
         * 
         */
        public Builder businessPhones(@Nullable Output<List<String>> businessPhones) {
            $.businessPhones = businessPhones;
            return this;
        }

        /**
         * @param businessPhones A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.
         * 
         * @return builder
         * 
         */
        public Builder businessPhones(List<String> businessPhones) {
            return businessPhones(Output.of(businessPhones));
        }

        /**
         * @param businessPhones A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.
         * 
         * @return builder
         * 
         */
        public Builder businessPhones(String... businessPhones) {
            return businessPhones(List.of(businessPhones));
        }

        /**
         * @param city The city in which the user is located.
         * 
         * @return builder
         * 
         */
        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city The city in which the user is located.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param companyName The company name which the user is associated. This property can be useful for describing the company that an external user comes from.
         * 
         * @return builder
         * 
         */
        public Builder companyName(@Nullable Output<String> companyName) {
            $.companyName = companyName;
            return this;
        }

        /**
         * @param companyName The company name which the user is associated. This property can be useful for describing the company that an external user comes from.
         * 
         * @return builder
         * 
         */
        public Builder companyName(String companyName) {
            return companyName(Output.of(companyName));
        }

        /**
         * @param consentProvidedForMinor Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`. Omit this property or specify a blank string to unset.
         * 
         * @return builder
         * 
         */
        public Builder consentProvidedForMinor(@Nullable Output<String> consentProvidedForMinor) {
            $.consentProvidedForMinor = consentProvidedForMinor;
            return this;
        }

        /**
         * @param consentProvidedForMinor Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`. Omit this property or specify a blank string to unset.
         * 
         * @return builder
         * 
         */
        public Builder consentProvidedForMinor(String consentProvidedForMinor) {
            return consentProvidedForMinor(Output.of(consentProvidedForMinor));
        }

        /**
         * @param costCenter The cost center associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder costCenter(@Nullable Output<String> costCenter) {
            $.costCenter = costCenter;
            return this;
        }

        /**
         * @param costCenter The cost center associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder costCenter(String costCenter) {
            return costCenter(Output.of(costCenter));
        }

        /**
         * @param country The country/region in which the user is located, e.g. `US` or `UK`.
         * 
         * @return builder
         * 
         */
        public Builder country(@Nullable Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country The country/region in which the user is located, e.g. `US` or `UK`.
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param department The name for the department in which the user works.
         * 
         * @return builder
         * 
         */
        public Builder department(@Nullable Output<String> department) {
            $.department = department;
            return this;
        }

        /**
         * @param department The name for the department in which the user works.
         * 
         * @return builder
         * 
         */
        public Builder department(String department) {
            return department(Output.of(department));
        }

        /**
         * @param disablePasswordExpiration Whether the user&#39;s password is exempt from expiring. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disablePasswordExpiration(@Nullable Output<Boolean> disablePasswordExpiration) {
            $.disablePasswordExpiration = disablePasswordExpiration;
            return this;
        }

        /**
         * @param disablePasswordExpiration Whether the user&#39;s password is exempt from expiring. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disablePasswordExpiration(Boolean disablePasswordExpiration) {
            return disablePasswordExpiration(Output.of(disablePasswordExpiration));
        }

        /**
         * @param disableStrongPassword Whether the user is allowed weaker passwords than the default policy to be specified. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableStrongPassword(@Nullable Output<Boolean> disableStrongPassword) {
            $.disableStrongPassword = disableStrongPassword;
            return this;
        }

        /**
         * @param disableStrongPassword Whether the user is allowed weaker passwords than the default policy to be specified. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableStrongPassword(Boolean disableStrongPassword) {
            return disableStrongPassword(Output.of(disableStrongPassword));
        }

        /**
         * @param displayName The name to display in the address book for the user.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name to display in the address book for the user.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param division The name of the division in which the user works.
         * 
         * @return builder
         * 
         */
        public Builder division(@Nullable Output<String> division) {
            $.division = division;
            return this;
        }

        /**
         * @param division The name of the division in which the user works.
         * 
         * @return builder
         * 
         */
        public Builder division(String division) {
            return division(Output.of(division));
        }

        /**
         * @param employeeId The employee identifier assigned to the user by the organisation.
         * 
         * @return builder
         * 
         */
        public Builder employeeId(@Nullable Output<String> employeeId) {
            $.employeeId = employeeId;
            return this;
        }

        /**
         * @param employeeId The employee identifier assigned to the user by the organisation.
         * 
         * @return builder
         * 
         */
        public Builder employeeId(String employeeId) {
            return employeeId(Output.of(employeeId));
        }

        /**
         * @param employeeType Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.
         * 
         * @return builder
         * 
         */
        public Builder employeeType(@Nullable Output<String> employeeType) {
            $.employeeType = employeeType;
            return this;
        }

        /**
         * @param employeeType Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.
         * 
         * @return builder
         * 
         */
        public Builder employeeType(String employeeType) {
            return employeeType(Output.of(employeeType));
        }

        /**
         * @param faxNumber The fax number of the user.
         * 
         * @return builder
         * 
         */
        public Builder faxNumber(@Nullable Output<String> faxNumber) {
            $.faxNumber = faxNumber;
            return this;
        }

        /**
         * @param faxNumber The fax number of the user.
         * 
         * @return builder
         * 
         */
        public Builder faxNumber(String faxNumber) {
            return faxNumber(Output.of(faxNumber));
        }

        /**
         * @param forcePasswordChange Whether the user is forced to change the password during the next sign-in. Only takes effect when also changing the password. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder forcePasswordChange(@Nullable Output<Boolean> forcePasswordChange) {
            $.forcePasswordChange = forcePasswordChange;
            return this;
        }

        /**
         * @param forcePasswordChange Whether the user is forced to change the password during the next sign-in. Only takes effect when also changing the password. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder forcePasswordChange(Boolean forcePasswordChange) {
            return forcePasswordChange(Output.of(forcePasswordChange));
        }

        /**
         * @param givenName The given name (first name) of the user.
         * 
         * @return builder
         * 
         */
        public Builder givenName(@Nullable Output<String> givenName) {
            $.givenName = givenName;
            return this;
        }

        /**
         * @param givenName The given name (first name) of the user.
         * 
         * @return builder
         * 
         */
        public Builder givenName(String givenName) {
            return givenName(Output.of(givenName));
        }

        /**
         * @param jobTitle The user’s job title.
         * 
         * @return builder
         * 
         */
        public Builder jobTitle(@Nullable Output<String> jobTitle) {
            $.jobTitle = jobTitle;
            return this;
        }

        /**
         * @param jobTitle The user’s job title.
         * 
         * @return builder
         * 
         */
        public Builder jobTitle(String jobTitle) {
            return jobTitle(Output.of(jobTitle));
        }

        /**
         * @param mail The SMTP address for the user. This property cannot be unset once specified.
         * 
         * @return builder
         * 
         */
        public Builder mail(@Nullable Output<String> mail) {
            $.mail = mail;
            return this;
        }

        /**
         * @param mail The SMTP address for the user. This property cannot be unset once specified.
         * 
         * @return builder
         * 
         */
        public Builder mail(String mail) {
            return mail(Output.of(mail));
        }

        /**
         * @param mailNickname The mail alias for the user. Defaults to the user name part of the user principal name (UPN).
         * 
         * @return builder
         * 
         */
        public Builder mailNickname(@Nullable Output<String> mailNickname) {
            $.mailNickname = mailNickname;
            return this;
        }

        /**
         * @param mailNickname The mail alias for the user. Defaults to the user name part of the user principal name (UPN).
         * 
         * @return builder
         * 
         */
        public Builder mailNickname(String mailNickname) {
            return mailNickname(Output.of(mailNickname));
        }

        /**
         * @param managerId The object ID of the user&#39;s manager.
         * 
         * @return builder
         * 
         */
        public Builder managerId(@Nullable Output<String> managerId) {
            $.managerId = managerId;
            return this;
        }

        /**
         * @param managerId The object ID of the user&#39;s manager.
         * 
         * @return builder
         * 
         */
        public Builder managerId(String managerId) {
            return managerId(Output.of(managerId));
        }

        /**
         * @param mobilePhone The primary cellular telephone number for the user.
         * 
         * @return builder
         * 
         */
        public Builder mobilePhone(@Nullable Output<String> mobilePhone) {
            $.mobilePhone = mobilePhone;
            return this;
        }

        /**
         * @param mobilePhone The primary cellular telephone number for the user.
         * 
         * @return builder
         * 
         */
        public Builder mobilePhone(String mobilePhone) {
            return mobilePhone(Output.of(mobilePhone));
        }

        /**
         * @param officeLocation The office location in the user&#39;s place of business.
         * 
         * @return builder
         * 
         */
        public Builder officeLocation(@Nullable Output<String> officeLocation) {
            $.officeLocation = officeLocation;
            return this;
        }

        /**
         * @param officeLocation The office location in the user&#39;s place of business.
         * 
         * @return builder
         * 
         */
        public Builder officeLocation(String officeLocation) {
            return officeLocation(Output.of(officeLocation));
        }

        /**
         * @param onpremisesImmutableId The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user&#39;s `user_principal_name` property when creating a new user account.
         * 
         * @return builder
         * 
         */
        public Builder onpremisesImmutableId(@Nullable Output<String> onpremisesImmutableId) {
            $.onpremisesImmutableId = onpremisesImmutableId;
            return this;
        }

        /**
         * @param onpremisesImmutableId The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user&#39;s `user_principal_name` property when creating a new user account.
         * 
         * @return builder
         * 
         */
        public Builder onpremisesImmutableId(String onpremisesImmutableId) {
            return onpremisesImmutableId(Output.of(onpremisesImmutableId));
        }

        /**
         * @param otherMails A list of additional email addresses for the user.
         * 
         * @return builder
         * 
         */
        public Builder otherMails(@Nullable Output<List<String>> otherMails) {
            $.otherMails = otherMails;
            return this;
        }

        /**
         * @param otherMails A list of additional email addresses for the user.
         * 
         * @return builder
         * 
         */
        public Builder otherMails(List<String> otherMails) {
            return otherMails(Output.of(otherMails));
        }

        /**
         * @param otherMails A list of additional email addresses for the user.
         * 
         * @return builder
         * 
         */
        public Builder otherMails(String... otherMails) {
            return otherMails(List.of(otherMails));
        }

        /**
         * @param password The password for the user. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters. This property is required when creating a new user.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for the user. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters. This property is required when creating a new user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param postalCode The postal code for the user&#39;s postal address. The postal code is specific to the user&#39;s country/region. In the United States of America, this attribute contains the ZIP code.
         * 
         * @return builder
         * 
         */
        public Builder postalCode(@Nullable Output<String> postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        /**
         * @param postalCode The postal code for the user&#39;s postal address. The postal code is specific to the user&#39;s country/region. In the United States of America, this attribute contains the ZIP code.
         * 
         * @return builder
         * 
         */
        public Builder postalCode(String postalCode) {
            return postalCode(Output.of(postalCode));
        }

        /**
         * @param preferredLanguage The user&#39;s preferred language, in ISO 639-1 notation.
         * 
         * @return builder
         * 
         */
        public Builder preferredLanguage(@Nullable Output<String> preferredLanguage) {
            $.preferredLanguage = preferredLanguage;
            return this;
        }

        /**
         * @param preferredLanguage The user&#39;s preferred language, in ISO 639-1 notation.
         * 
         * @return builder
         * 
         */
        public Builder preferredLanguage(String preferredLanguage) {
            return preferredLanguage(Output.of(preferredLanguage));
        }

        /**
         * @param showInAddressList Whether or not the Outlook global address list should include this user. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder showInAddressList(@Nullable Output<Boolean> showInAddressList) {
            $.showInAddressList = showInAddressList;
            return this;
        }

        /**
         * @param showInAddressList Whether or not the Outlook global address list should include this user. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder showInAddressList(Boolean showInAddressList) {
            return showInAddressList(Output.of(showInAddressList));
        }

        /**
         * @param state The state or province in the user&#39;s address.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state or province in the user&#39;s address.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param streetAddress The street address of the user&#39;s place of business.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress(@Nullable Output<String> streetAddress) {
            $.streetAddress = streetAddress;
            return this;
        }

        /**
         * @param streetAddress The street address of the user&#39;s place of business.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress(String streetAddress) {
            return streetAddress(Output.of(streetAddress));
        }

        /**
         * @param surname The user&#39;s surname (family name or last name).
         * 
         * @return builder
         * 
         */
        public Builder surname(@Nullable Output<String> surname) {
            $.surname = surname;
            return this;
        }

        /**
         * @param surname The user&#39;s surname (family name or last name).
         * 
         * @return builder
         * 
         */
        public Builder surname(String surname) {
            return surname(Output.of(surname));
        }

        /**
         * @param usageLocation The usage location of the user. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.
         * 
         * @return builder
         * 
         */
        public Builder usageLocation(@Nullable Output<String> usageLocation) {
            $.usageLocation = usageLocation;
            return this;
        }

        /**
         * @param usageLocation The usage location of the user. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.
         * 
         * @return builder
         * 
         */
        public Builder usageLocation(String usageLocation) {
            return usageLocation(Output.of(usageLocation));
        }

        /**
         * @param userPrincipalName The user principal name (UPN) of the user.
         * 
         * @return builder
         * 
         */
        public Builder userPrincipalName(Output<String> userPrincipalName) {
            $.userPrincipalName = userPrincipalName;
            return this;
        }

        /**
         * @param userPrincipalName The user principal name (UPN) of the user.
         * 
         * @return builder
         * 
         */
        public Builder userPrincipalName(String userPrincipalName) {
            return userPrincipalName(Output.of(userPrincipalName));
        }

        public UserArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.userPrincipalName = Objects.requireNonNull($.userPrincipalName, "expected parameter 'userPrincipalName' to be non-null");
            return $;
        }
    }

}
