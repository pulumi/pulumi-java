// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyConditionsUsersGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyConditionsUsersGetArgs Empty = new ConditionalAccessPolicyConditionsUsersGetArgs();

    /**
     * A list of group IDs excluded from scope of policy.
     * 
     */
    @Import(name="excludedGroups")
      private final @Nullable Output<List<String>> excludedGroups;

    public Output<List<String>> excludedGroups() {
        return this.excludedGroups == null ? Codegen.empty() : this.excludedGroups;
    }

    /**
     * A list of role IDs excluded from scope of policy.
     * 
     */
    @Import(name="excludedRoles")
      private final @Nullable Output<List<String>> excludedRoles;

    public Output<List<String>> excludedRoles() {
        return this.excludedRoles == null ? Codegen.empty() : this.excludedRoles;
    }

    /**
     * A list of user IDs excluded from scope of policy and/or `GuestsOrExternalUsers`.
     * 
     */
    @Import(name="excludedUsers")
      private final @Nullable Output<List<String>> excludedUsers;

    public Output<List<String>> excludedUsers() {
        return this.excludedUsers == null ? Codegen.empty() : this.excludedUsers;
    }

    /**
     * A list of group IDs in scope of policy unless explicitly excluded.
     * 
     */
    @Import(name="includedGroups")
      private final @Nullable Output<List<String>> includedGroups;

    public Output<List<String>> includedGroups() {
        return this.includedGroups == null ? Codegen.empty() : this.includedGroups;
    }

    /**
     * A list of role IDs in scope of policy unless explicitly excluded.
     * 
     */
    @Import(name="includedRoles")
      private final @Nullable Output<List<String>> includedRoles;

    public Output<List<String>> includedRoles() {
        return this.includedRoles == null ? Codegen.empty() : this.includedRoles;
    }

    /**
     * A list of user IDs in scope of policy unless explicitly excluded, or `None` or `All` or `GuestsOrExternalUsers`.
     * 
     */
    @Import(name="includedUsers")
      private final @Nullable Output<List<String>> includedUsers;

    public Output<List<String>> includedUsers() {
        return this.includedUsers == null ? Codegen.empty() : this.includedUsers;
    }

    public ConditionalAccessPolicyConditionsUsersGetArgs(
        @Nullable Output<List<String>> excludedGroups,
        @Nullable Output<List<String>> excludedRoles,
        @Nullable Output<List<String>> excludedUsers,
        @Nullable Output<List<String>> includedGroups,
        @Nullable Output<List<String>> includedRoles,
        @Nullable Output<List<String>> includedUsers) {
        this.excludedGroups = excludedGroups;
        this.excludedRoles = excludedRoles;
        this.excludedUsers = excludedUsers;
        this.includedGroups = includedGroups;
        this.includedRoles = includedRoles;
        this.includedUsers = includedUsers;
    }

    private ConditionalAccessPolicyConditionsUsersGetArgs() {
        this.excludedGroups = Codegen.empty();
        this.excludedRoles = Codegen.empty();
        this.excludedUsers = Codegen.empty();
        this.includedGroups = Codegen.empty();
        this.includedRoles = Codegen.empty();
        this.includedUsers = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicyConditionsUsersGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> excludedGroups;
        private @Nullable Output<List<String>> excludedRoles;
        private @Nullable Output<List<String>> excludedUsers;
        private @Nullable Output<List<String>> includedGroups;
        private @Nullable Output<List<String>> includedRoles;
        private @Nullable Output<List<String>> includedUsers;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalAccessPolicyConditionsUsersGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludedGroups = defaults.excludedGroups;
    	      this.excludedRoles = defaults.excludedRoles;
    	      this.excludedUsers = defaults.excludedUsers;
    	      this.includedGroups = defaults.includedGroups;
    	      this.includedRoles = defaults.includedRoles;
    	      this.includedUsers = defaults.includedUsers;
        }

        public Builder excludedGroups(@Nullable Output<List<String>> excludedGroups) {
            this.excludedGroups = excludedGroups;
            return this;
        }
        public Builder excludedGroups(@Nullable List<String> excludedGroups) {
            this.excludedGroups = Codegen.ofNullable(excludedGroups);
            return this;
        }
        public Builder excludedGroups(String... excludedGroups) {
            return excludedGroups(List.of(excludedGroups));
        }
        public Builder excludedRoles(@Nullable Output<List<String>> excludedRoles) {
            this.excludedRoles = excludedRoles;
            return this;
        }
        public Builder excludedRoles(@Nullable List<String> excludedRoles) {
            this.excludedRoles = Codegen.ofNullable(excludedRoles);
            return this;
        }
        public Builder excludedRoles(String... excludedRoles) {
            return excludedRoles(List.of(excludedRoles));
        }
        public Builder excludedUsers(@Nullable Output<List<String>> excludedUsers) {
            this.excludedUsers = excludedUsers;
            return this;
        }
        public Builder excludedUsers(@Nullable List<String> excludedUsers) {
            this.excludedUsers = Codegen.ofNullable(excludedUsers);
            return this;
        }
        public Builder excludedUsers(String... excludedUsers) {
            return excludedUsers(List.of(excludedUsers));
        }
        public Builder includedGroups(@Nullable Output<List<String>> includedGroups) {
            this.includedGroups = includedGroups;
            return this;
        }
        public Builder includedGroups(@Nullable List<String> includedGroups) {
            this.includedGroups = Codegen.ofNullable(includedGroups);
            return this;
        }
        public Builder includedGroups(String... includedGroups) {
            return includedGroups(List.of(includedGroups));
        }
        public Builder includedRoles(@Nullable Output<List<String>> includedRoles) {
            this.includedRoles = includedRoles;
            return this;
        }
        public Builder includedRoles(@Nullable List<String> includedRoles) {
            this.includedRoles = Codegen.ofNullable(includedRoles);
            return this;
        }
        public Builder includedRoles(String... includedRoles) {
            return includedRoles(List.of(includedRoles));
        }
        public Builder includedUsers(@Nullable Output<List<String>> includedUsers) {
            this.includedUsers = includedUsers;
            return this;
        }
        public Builder includedUsers(@Nullable List<String> includedUsers) {
            this.includedUsers = Codegen.ofNullable(includedUsers);
            return this;
        }
        public Builder includedUsers(String... includedUsers) {
            return includedUsers(List.of(includedUsers));
        }        public ConditionalAccessPolicyConditionsUsersGetArgs build() {
            return new ConditionalAccessPolicyConditionsUsersGetArgs(excludedGroups, excludedRoles, excludedUsers, includedGroups, includedRoles, includedUsers);
        }
    }
}
