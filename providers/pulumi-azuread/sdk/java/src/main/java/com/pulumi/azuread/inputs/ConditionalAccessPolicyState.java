// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyGrantControlsArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicySessionControlsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyState Empty = new ConditionalAccessPolicyState();

    /**
     * A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<ConditionalAccessPolicyConditionsArgs> conditions;

    /**
     * @return A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.
     * 
     */
    public Optional<Output<ConditionalAccessPolicyConditionsArgs>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * The friendly name for this Conditional Access Policy.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The friendly name for this Conditional Access Policy.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.
     * 
     */
    @Import(name="grantControls")
    private @Nullable Output<ConditionalAccessPolicyGrantControlsArgs> grantControls;

    /**
     * @return A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.
     * 
     */
    public Optional<Output<ConditionalAccessPolicyGrantControlsArgs>> grantControls() {
        return Optional.ofNullable(this.grantControls);
    }

    /**
     * A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.
     * 
     */
    @Import(name="sessionControls")
    private @Nullable Output<ConditionalAccessPolicySessionControlsArgs> sessionControls;

    /**
     * @return A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.
     * 
     */
    public Optional<Output<ConditionalAccessPolicySessionControlsArgs>> sessionControls() {
        return Optional.ofNullable(this.sessionControls);
    }

    /**
     * Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private ConditionalAccessPolicyState() {}

    private ConditionalAccessPolicyState(ConditionalAccessPolicyState $) {
        this.conditions = $.conditions;
        this.displayName = $.displayName;
        this.grantControls = $.grantControls;
        this.sessionControls = $.sessionControls;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalAccessPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalAccessPolicyState $;

        public Builder() {
            $ = new ConditionalAccessPolicyState();
        }

        public Builder(ConditionalAccessPolicyState defaults) {
            $ = new ConditionalAccessPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<ConditionalAccessPolicyConditionsArgs> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.
         * 
         * @return builder
         * 
         */
        public Builder conditions(ConditionalAccessPolicyConditionsArgs conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param displayName The friendly name for this Conditional Access Policy.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The friendly name for this Conditional Access Policy.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param grantControls A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.
         * 
         * @return builder
         * 
         */
        public Builder grantControls(@Nullable Output<ConditionalAccessPolicyGrantControlsArgs> grantControls) {
            $.grantControls = grantControls;
            return this;
        }

        /**
         * @param grantControls A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.
         * 
         * @return builder
         * 
         */
        public Builder grantControls(ConditionalAccessPolicyGrantControlsArgs grantControls) {
            return grantControls(Output.of(grantControls));
        }

        /**
         * @param sessionControls A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.
         * 
         * @return builder
         * 
         */
        public Builder sessionControls(@Nullable Output<ConditionalAccessPolicySessionControlsArgs> sessionControls) {
            $.sessionControls = sessionControls;
            return this;
        }

        /**
         * @param sessionControls A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.
         * 
         * @return builder
         * 
         */
        public Builder sessionControls(ConditionalAccessPolicySessionControlsArgs sessionControls) {
            return sessionControls(Output.of(sessionControls));
        }

        /**
         * @param state Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public ConditionalAccessPolicyState build() {
            return $;
        }
    }

}
