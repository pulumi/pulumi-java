// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsGetArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyGrantControlsGetArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicySessionControlsGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyState Empty = new ConditionalAccessPolicyState();

    /**
     * A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.
     * 
     */
    @Import(name="conditions")
      private final @Nullable Output<ConditionalAccessPolicyConditionsGetArgs> conditions;

    public Output<ConditionalAccessPolicyConditionsGetArgs> conditions() {
        return this.conditions == null ? Codegen.empty() : this.conditions;
    }

    /**
     * The friendly name for this Conditional Access Policy.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.
     * 
     */
    @Import(name="grantControls")
      private final @Nullable Output<ConditionalAccessPolicyGrantControlsGetArgs> grantControls;

    public Output<ConditionalAccessPolicyGrantControlsGetArgs> grantControls() {
        return this.grantControls == null ? Codegen.empty() : this.grantControls;
    }

    /**
     * A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.
     * 
     */
    @Import(name="sessionControls")
      private final @Nullable Output<ConditionalAccessPolicySessionControlsGetArgs> sessionControls;

    public Output<ConditionalAccessPolicySessionControlsGetArgs> sessionControls() {
        return this.sessionControls == null ? Codegen.empty() : this.sessionControls;
    }

    /**
     * Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> state() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    public ConditionalAccessPolicyState(
        @Nullable Output<ConditionalAccessPolicyConditionsGetArgs> conditions,
        @Nullable Output<String> displayName,
        @Nullable Output<ConditionalAccessPolicyGrantControlsGetArgs> grantControls,
        @Nullable Output<ConditionalAccessPolicySessionControlsGetArgs> sessionControls,
        @Nullable Output<String> state) {
        this.conditions = conditions;
        this.displayName = displayName;
        this.grantControls = grantControls;
        this.sessionControls = sessionControls;
        this.state = state;
    }

    private ConditionalAccessPolicyState() {
        this.conditions = Codegen.empty();
        this.displayName = Codegen.empty();
        this.grantControls = Codegen.empty();
        this.sessionControls = Codegen.empty();
        this.state = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ConditionalAccessPolicyConditionsGetArgs> conditions;
        private @Nullable Output<String> displayName;
        private @Nullable Output<ConditionalAccessPolicyGrantControlsGetArgs> grantControls;
        private @Nullable Output<ConditionalAccessPolicySessionControlsGetArgs> sessionControls;
        private @Nullable Output<String> state;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalAccessPolicyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.displayName = defaults.displayName;
    	      this.grantControls = defaults.grantControls;
    	      this.sessionControls = defaults.sessionControls;
    	      this.state = defaults.state;
        }

        public Builder conditions(@Nullable Output<ConditionalAccessPolicyConditionsGetArgs> conditions) {
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(@Nullable ConditionalAccessPolicyConditionsGetArgs conditions) {
            this.conditions = Codegen.ofNullable(conditions);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder grantControls(@Nullable Output<ConditionalAccessPolicyGrantControlsGetArgs> grantControls) {
            this.grantControls = grantControls;
            return this;
        }
        public Builder grantControls(@Nullable ConditionalAccessPolicyGrantControlsGetArgs grantControls) {
            this.grantControls = Codegen.ofNullable(grantControls);
            return this;
        }
        public Builder sessionControls(@Nullable Output<ConditionalAccessPolicySessionControlsGetArgs> sessionControls) {
            this.sessionControls = sessionControls;
            return this;
        }
        public Builder sessionControls(@Nullable ConditionalAccessPolicySessionControlsGetArgs sessionControls) {
            this.sessionControls = Codegen.ofNullable(sessionControls);
            return this;
        }
        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }        public ConditionalAccessPolicyState build() {
            return new ConditionalAccessPolicyState(conditions, displayName, grantControls, sessionControls, state);
        }
    }
}
