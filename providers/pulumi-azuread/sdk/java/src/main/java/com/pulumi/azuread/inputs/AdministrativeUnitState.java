// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdministrativeUnitState extends com.pulumi.resources.ResourceArgs {

    public static final AdministrativeUnitState Empty = new AdministrativeUnitState();

    /**
     * The description of the administrative unit.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the administrative unit.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the administrative unit.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the administrative unit.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Whether the administrative unit and its members are hidden or publicly viewable in the directory
     * 
     */
    @Import(name="hiddenMembershipEnabled")
    private @Nullable Output<Boolean> hiddenMembershipEnabled;

    /**
     * @return Whether the administrative unit and its members are hidden or publicly viewable in the directory
     * 
     */
    public Optional<Output<Boolean>> hiddenMembershipEnabled() {
        return Optional.ofNullable(this.hiddenMembershipEnabled);
    }

    /**
     * A set of object IDs of members who should be present in this administrative unit. Supported object types are Users or Groups.
     * 
     */
    @Import(name="members")
    private @Nullable Output<List<String>> members;

    /**
     * @return A set of object IDs of members who should be present in this administrative unit. Supported object types are Users or Groups.
     * 
     */
    public Optional<Output<List<String>>> members() {
        return Optional.ofNullable(this.members);
    }

    /**
     * The object ID of the administrative unit.
     * 
     */
    @Import(name="objectId")
    private @Nullable Output<String> objectId;

    /**
     * @return The object ID of the administrative unit.
     * 
     */
    public Optional<Output<String>> objectId() {
        return Optional.ofNullable(this.objectId);
    }

    /**
     * If `true`, will return an error if an existing administrative unit is found with the same name
     * 
     */
    @Import(name="preventDuplicateNames")
    private @Nullable Output<Boolean> preventDuplicateNames;

    /**
     * @return If `true`, will return an error if an existing administrative unit is found with the same name
     * 
     */
    public Optional<Output<Boolean>> preventDuplicateNames() {
        return Optional.ofNullable(this.preventDuplicateNames);
    }

    private AdministrativeUnitState() {}

    private AdministrativeUnitState(AdministrativeUnitState $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.hiddenMembershipEnabled = $.hiddenMembershipEnabled;
        this.members = $.members;
        this.objectId = $.objectId;
        this.preventDuplicateNames = $.preventDuplicateNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdministrativeUnitState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdministrativeUnitState $;

        public Builder() {
            $ = new AdministrativeUnitState();
        }

        public Builder(AdministrativeUnitState defaults) {
            $ = new AdministrativeUnitState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the administrative unit.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the administrative unit.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the administrative unit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the administrative unit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param hiddenMembershipEnabled Whether the administrative unit and its members are hidden or publicly viewable in the directory
         * 
         * @return builder
         * 
         */
        public Builder hiddenMembershipEnabled(@Nullable Output<Boolean> hiddenMembershipEnabled) {
            $.hiddenMembershipEnabled = hiddenMembershipEnabled;
            return this;
        }

        /**
         * @param hiddenMembershipEnabled Whether the administrative unit and its members are hidden or publicly viewable in the directory
         * 
         * @return builder
         * 
         */
        public Builder hiddenMembershipEnabled(Boolean hiddenMembershipEnabled) {
            return hiddenMembershipEnabled(Output.of(hiddenMembershipEnabled));
        }

        /**
         * @param members A set of object IDs of members who should be present in this administrative unit. Supported object types are Users or Groups.
         * 
         * @return builder
         * 
         */
        public Builder members(@Nullable Output<List<String>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members A set of object IDs of members who should be present in this administrative unit. Supported object types are Users or Groups.
         * 
         * @return builder
         * 
         */
        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        /**
         * @param members A set of object IDs of members who should be present in this administrative unit. Supported object types are Users or Groups.
         * 
         * @return builder
         * 
         */
        public Builder members(String... members) {
            return members(List.of(members));
        }

        /**
         * @param objectId The object ID of the administrative unit.
         * 
         * @return builder
         * 
         */
        public Builder objectId(@Nullable Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId The object ID of the administrative unit.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param preventDuplicateNames If `true`, will return an error if an existing administrative unit is found with the same name
         * 
         * @return builder
         * 
         */
        public Builder preventDuplicateNames(@Nullable Output<Boolean> preventDuplicateNames) {
            $.preventDuplicateNames = preventDuplicateNames;
            return this;
        }

        /**
         * @param preventDuplicateNames If `true`, will return an error if an existing administrative unit is found with the same name
         * 
         * @return builder
         * 
         */
        public Builder preventDuplicateNames(Boolean preventDuplicateNames) {
            return preventDuplicateNames(Output.of(preventDuplicateNames));
        }

        public AdministrativeUnitState build() {
            return $;
        }
    }

}
