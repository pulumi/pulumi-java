// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppRoleAssignmentState extends com.pulumi.resources.ResourceArgs {

    public static final AppRoleAssignmentState Empty = new AppRoleAssignmentState();

    /**
     * The ID of the app role to be assigned. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="appRoleId")
      private final @Nullable Output<String> appRoleId;

    public Output<String> appRoleId() {
        return this.appRoleId == null ? Codegen.empty() : this.appRoleId;
    }

    /**
     * The display name of the principal to which the app role is assigned.
     * 
     */
    @Import(name="principalDisplayName")
      private final @Nullable Output<String> principalDisplayName;

    public Output<String> principalDisplayName() {
        return this.principalDisplayName == null ? Codegen.empty() : this.principalDisplayName;
    }

    /**
     * The object ID of the user, group or service principal to be assigned this app role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="principalObjectId")
      private final @Nullable Output<String> principalObjectId;

    public Output<String> principalObjectId() {
        return this.principalObjectId == null ? Codegen.empty() : this.principalObjectId;
    }

    /**
     * The object type of the principal to which the app role is assigned.
     * 
     */
    @Import(name="principalType")
      private final @Nullable Output<String> principalType;

    public Output<String> principalType() {
        return this.principalType == null ? Codegen.empty() : this.principalType;
    }

    /**
     * The display name of the application representing the resource.
     * 
     */
    @Import(name="resourceDisplayName")
      private final @Nullable Output<String> resourceDisplayName;

    public Output<String> resourceDisplayName() {
        return this.resourceDisplayName == null ? Codegen.empty() : this.resourceDisplayName;
    }

    /**
     * The object ID of the service principal representing the resource. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceObjectId")
      private final @Nullable Output<String> resourceObjectId;

    public Output<String> resourceObjectId() {
        return this.resourceObjectId == null ? Codegen.empty() : this.resourceObjectId;
    }

    public AppRoleAssignmentState(
        @Nullable Output<String> appRoleId,
        @Nullable Output<String> principalDisplayName,
        @Nullable Output<String> principalObjectId,
        @Nullable Output<String> principalType,
        @Nullable Output<String> resourceDisplayName,
        @Nullable Output<String> resourceObjectId) {
        this.appRoleId = appRoleId;
        this.principalDisplayName = principalDisplayName;
        this.principalObjectId = principalObjectId;
        this.principalType = principalType;
        this.resourceDisplayName = resourceDisplayName;
        this.resourceObjectId = resourceObjectId;
    }

    private AppRoleAssignmentState() {
        this.appRoleId = Codegen.empty();
        this.principalDisplayName = Codegen.empty();
        this.principalObjectId = Codegen.empty();
        this.principalType = Codegen.empty();
        this.resourceDisplayName = Codegen.empty();
        this.resourceObjectId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppRoleAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> appRoleId;
        private @Nullable Output<String> principalDisplayName;
        private @Nullable Output<String> principalObjectId;
        private @Nullable Output<String> principalType;
        private @Nullable Output<String> resourceDisplayName;
        private @Nullable Output<String> resourceObjectId;

        public Builder() {
    	      // Empty
        }

        public Builder(AppRoleAssignmentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appRoleId = defaults.appRoleId;
    	      this.principalDisplayName = defaults.principalDisplayName;
    	      this.principalObjectId = defaults.principalObjectId;
    	      this.principalType = defaults.principalType;
    	      this.resourceDisplayName = defaults.resourceDisplayName;
    	      this.resourceObjectId = defaults.resourceObjectId;
        }

        public Builder appRoleId(@Nullable Output<String> appRoleId) {
            this.appRoleId = appRoleId;
            return this;
        }
        public Builder appRoleId(@Nullable String appRoleId) {
            this.appRoleId = Codegen.ofNullable(appRoleId);
            return this;
        }
        public Builder principalDisplayName(@Nullable Output<String> principalDisplayName) {
            this.principalDisplayName = principalDisplayName;
            return this;
        }
        public Builder principalDisplayName(@Nullable String principalDisplayName) {
            this.principalDisplayName = Codegen.ofNullable(principalDisplayName);
            return this;
        }
        public Builder principalObjectId(@Nullable Output<String> principalObjectId) {
            this.principalObjectId = principalObjectId;
            return this;
        }
        public Builder principalObjectId(@Nullable String principalObjectId) {
            this.principalObjectId = Codegen.ofNullable(principalObjectId);
            return this;
        }
        public Builder principalType(@Nullable Output<String> principalType) {
            this.principalType = principalType;
            return this;
        }
        public Builder principalType(@Nullable String principalType) {
            this.principalType = Codegen.ofNullable(principalType);
            return this;
        }
        public Builder resourceDisplayName(@Nullable Output<String> resourceDisplayName) {
            this.resourceDisplayName = resourceDisplayName;
            return this;
        }
        public Builder resourceDisplayName(@Nullable String resourceDisplayName) {
            this.resourceDisplayName = Codegen.ofNullable(resourceDisplayName);
            return this;
        }
        public Builder resourceObjectId(@Nullable Output<String> resourceObjectId) {
            this.resourceObjectId = resourceObjectId;
            return this;
        }
        public Builder resourceObjectId(@Nullable String resourceObjectId) {
            this.resourceObjectId = Codegen.ofNullable(resourceObjectId);
            return this;
        }        public AppRoleAssignmentState build() {
            return new AppRoleAssignmentState(appRoleId, principalDisplayName, principalObjectId, principalType, resourceDisplayName, resourceObjectId);
        }
    }
}
