// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppRoleAssignmentState extends com.pulumi.resources.ResourceArgs {

    public static final AppRoleAssignmentState Empty = new AppRoleAssignmentState();

    /**
     * The ID of the app role to be assigned. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="appRoleId")
    private @Nullable Output<String> appRoleId;

    /**
     * @return The ID of the app role to be assigned. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> appRoleId() {
        return Optional.ofNullable(this.appRoleId);
    }

    /**
     * The display name of the principal to which the app role is assigned.
     * 
     */
    @Import(name="principalDisplayName")
    private @Nullable Output<String> principalDisplayName;

    /**
     * @return The display name of the principal to which the app role is assigned.
     * 
     */
    public Optional<Output<String>> principalDisplayName() {
        return Optional.ofNullable(this.principalDisplayName);
    }

    /**
     * The object ID of the user, group or service principal to be assigned this app role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="principalObjectId")
    private @Nullable Output<String> principalObjectId;

    /**
     * @return The object ID of the user, group or service principal to be assigned this app role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> principalObjectId() {
        return Optional.ofNullable(this.principalObjectId);
    }

    /**
     * The object type of the principal to which the app role is assigned.
     * 
     */
    @Import(name="principalType")
    private @Nullable Output<String> principalType;

    /**
     * @return The object type of the principal to which the app role is assigned.
     * 
     */
    public Optional<Output<String>> principalType() {
        return Optional.ofNullable(this.principalType);
    }

    /**
     * The display name of the application representing the resource.
     * 
     */
    @Import(name="resourceDisplayName")
    private @Nullable Output<String> resourceDisplayName;

    /**
     * @return The display name of the application representing the resource.
     * 
     */
    public Optional<Output<String>> resourceDisplayName() {
        return Optional.ofNullable(this.resourceDisplayName);
    }

    /**
     * The object ID of the service principal representing the resource. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceObjectId")
    private @Nullable Output<String> resourceObjectId;

    /**
     * @return The object ID of the service principal representing the resource. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceObjectId() {
        return Optional.ofNullable(this.resourceObjectId);
    }

    private AppRoleAssignmentState() {}

    private AppRoleAssignmentState(AppRoleAssignmentState $) {
        this.appRoleId = $.appRoleId;
        this.principalDisplayName = $.principalDisplayName;
        this.principalObjectId = $.principalObjectId;
        this.principalType = $.principalType;
        this.resourceDisplayName = $.resourceDisplayName;
        this.resourceObjectId = $.resourceObjectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppRoleAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppRoleAssignmentState $;

        public Builder() {
            $ = new AppRoleAssignmentState();
        }

        public Builder(AppRoleAssignmentState defaults) {
            $ = new AppRoleAssignmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appRoleId The ID of the app role to be assigned. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder appRoleId(@Nullable Output<String> appRoleId) {
            $.appRoleId = appRoleId;
            return this;
        }

        /**
         * @param appRoleId The ID of the app role to be assigned. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder appRoleId(String appRoleId) {
            return appRoleId(Output.of(appRoleId));
        }

        /**
         * @param principalDisplayName The display name of the principal to which the app role is assigned.
         * 
         * @return builder
         * 
         */
        public Builder principalDisplayName(@Nullable Output<String> principalDisplayName) {
            $.principalDisplayName = principalDisplayName;
            return this;
        }

        /**
         * @param principalDisplayName The display name of the principal to which the app role is assigned.
         * 
         * @return builder
         * 
         */
        public Builder principalDisplayName(String principalDisplayName) {
            return principalDisplayName(Output.of(principalDisplayName));
        }

        /**
         * @param principalObjectId The object ID of the user, group or service principal to be assigned this app role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder principalObjectId(@Nullable Output<String> principalObjectId) {
            $.principalObjectId = principalObjectId;
            return this;
        }

        /**
         * @param principalObjectId The object ID of the user, group or service principal to be assigned this app role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder principalObjectId(String principalObjectId) {
            return principalObjectId(Output.of(principalObjectId));
        }

        /**
         * @param principalType The object type of the principal to which the app role is assigned.
         * 
         * @return builder
         * 
         */
        public Builder principalType(@Nullable Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType The object type of the principal to which the app role is assigned.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        /**
         * @param resourceDisplayName The display name of the application representing the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceDisplayName(@Nullable Output<String> resourceDisplayName) {
            $.resourceDisplayName = resourceDisplayName;
            return this;
        }

        /**
         * @param resourceDisplayName The display name of the application representing the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceDisplayName(String resourceDisplayName) {
            return resourceDisplayName(Output.of(resourceDisplayName));
        }

        /**
         * @param resourceObjectId The object ID of the service principal representing the resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceObjectId(@Nullable Output<String> resourceObjectId) {
            $.resourceObjectId = resourceObjectId;
            return this;
        }

        /**
         * @param resourceObjectId The object ID of the service principal representing the resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceObjectId(String resourceObjectId) {
            return resourceObjectId(Output.of(resourceObjectId));
        }

        public AppRoleAssignmentState build() {
            return $;
        }
    }

}
