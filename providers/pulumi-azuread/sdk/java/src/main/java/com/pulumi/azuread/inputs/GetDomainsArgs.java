// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainsArgs Empty = new GetDomainsArgs();

    /**
     * Set to `true` to only return domains whose DNS is managed by Microsoft 365. Defaults to `false`.
     * 
     */
    @Import(name="adminManaged")
      private final @Nullable Boolean adminManaged;

    public Optional<Boolean> adminManaged() {
        return this.adminManaged == null ? Optional.empty() : Optional.ofNullable(this.adminManaged);
    }

    /**
     * Set to `true` if unverified Azure AD domains should be included. Defaults to `false`.
     * 
     */
    @Import(name="includeUnverified")
      private final @Nullable Boolean includeUnverified;

    public Optional<Boolean> includeUnverified() {
        return this.includeUnverified == null ? Optional.empty() : Optional.ofNullable(this.includeUnverified);
    }

    /**
     * Set to `true` to only return the default domain.
     * 
     */
    @Import(name="onlyDefault")
      private final @Nullable Boolean onlyDefault;

    public Optional<Boolean> onlyDefault() {
        return this.onlyDefault == null ? Optional.empty() : Optional.ofNullable(this.onlyDefault);
    }

    /**
     * Set to `true` to only return the initial domain, which is your primary Azure Active Directory tenant domain. Defaults to `false`.
     * 
     */
    @Import(name="onlyInitial")
      private final @Nullable Boolean onlyInitial;

    public Optional<Boolean> onlyInitial() {
        return this.onlyInitial == null ? Optional.empty() : Optional.ofNullable(this.onlyInitial);
    }

    /**
     * Set to `true` to only return verified root domains. Excludes subdomains and unverified domains.
     * 
     */
    @Import(name="onlyRoot")
      private final @Nullable Boolean onlyRoot;

    public Optional<Boolean> onlyRoot() {
        return this.onlyRoot == null ? Optional.empty() : Optional.ofNullable(this.onlyRoot);
    }

    /**
     * A list of supported services that must be supported by a domain. Possible values include `Email`, `Sharepoint`, `EmailInternalRelayOnly`, `OfficeCommunicationsOnline`, `SharePointDefaultDomain`, `FullRedelegation`, `SharePointPublic`, `OrgIdAuthentication`, `Yammer` and `Intune`.
     * 
     */
    @Import(name="supportsServices")
      private final @Nullable List<String> supportsServices;

    public List<String> supportsServices() {
        return this.supportsServices == null ? List.of() : this.supportsServices;
    }

    public GetDomainsArgs(
        @Nullable Boolean adminManaged,
        @Nullable Boolean includeUnverified,
        @Nullable Boolean onlyDefault,
        @Nullable Boolean onlyInitial,
        @Nullable Boolean onlyRoot,
        @Nullable List<String> supportsServices) {
        this.adminManaged = adminManaged;
        this.includeUnverified = includeUnverified;
        this.onlyDefault = onlyDefault;
        this.onlyInitial = onlyInitial;
        this.onlyRoot = onlyRoot;
        this.supportsServices = supportsServices;
    }

    private GetDomainsArgs() {
        this.adminManaged = null;
        this.includeUnverified = null;
        this.onlyDefault = null;
        this.onlyInitial = null;
        this.onlyRoot = null;
        this.supportsServices = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean adminManaged;
        private @Nullable Boolean includeUnverified;
        private @Nullable Boolean onlyDefault;
        private @Nullable Boolean onlyInitial;
        private @Nullable Boolean onlyRoot;
        private @Nullable List<String> supportsServices;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDomainsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminManaged = defaults.adminManaged;
    	      this.includeUnverified = defaults.includeUnverified;
    	      this.onlyDefault = defaults.onlyDefault;
    	      this.onlyInitial = defaults.onlyInitial;
    	      this.onlyRoot = defaults.onlyRoot;
    	      this.supportsServices = defaults.supportsServices;
        }

        public Builder adminManaged(@Nullable Boolean adminManaged) {
            this.adminManaged = adminManaged;
            return this;
        }
        public Builder includeUnverified(@Nullable Boolean includeUnverified) {
            this.includeUnverified = includeUnverified;
            return this;
        }
        public Builder onlyDefault(@Nullable Boolean onlyDefault) {
            this.onlyDefault = onlyDefault;
            return this;
        }
        public Builder onlyInitial(@Nullable Boolean onlyInitial) {
            this.onlyInitial = onlyInitial;
            return this;
        }
        public Builder onlyRoot(@Nullable Boolean onlyRoot) {
            this.onlyRoot = onlyRoot;
            return this;
        }
        public Builder supportsServices(@Nullable List<String> supportsServices) {
            this.supportsServices = supportsServices;
            return this;
        }
        public Builder supportsServices(String... supportsServices) {
            return supportsServices(List.of(supportsServices));
        }        public GetDomainsArgs build() {
            return new GetDomainsArgs(adminManaged, includeUnverified, onlyDefault, onlyInitial, onlyRoot, supportsServices);
        }
    }
}
