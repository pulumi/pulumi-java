// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUsersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUsersArgs Empty = new GetUsersArgs();

    /**
     * Ignore missing users and return users that were found. The data source will still fail if no users are found. Defaults to false.
     * 
     */
    @Import(name="ignoreMissing")
      private final @Nullable Boolean ignoreMissing;

    public Optional<Boolean> ignoreMissing() {
        return this.ignoreMissing == null ? Optional.empty() : Optional.ofNullable(this.ignoreMissing);
    }

    /**
     * The email aliases of the users.
     * 
     */
    @Import(name="mailNicknames")
      private final @Nullable List<String> mailNicknames;

    public List<String> mailNicknames() {
        return this.mailNicknames == null ? List.of() : this.mailNicknames;
    }

    /**
     * The object IDs of the users.
     * 
     */
    @Import(name="objectIds")
      private final @Nullable List<String> objectIds;

    public List<String> objectIds() {
        return this.objectIds == null ? List.of() : this.objectIds;
    }

    /**
     * When `true`, the data source will return all users. Cannot be used with `ignore_missing`. Defaults to false.
     * 
     */
    @Import(name="returnAll")
      private final @Nullable Boolean returnAll;

    public Optional<Boolean> returnAll() {
        return this.returnAll == null ? Optional.empty() : Optional.ofNullable(this.returnAll);
    }

    /**
     * The user principal names (UPNs) of the users.
     * 
     */
    @Import(name="userPrincipalNames")
      private final @Nullable List<String> userPrincipalNames;

    public List<String> userPrincipalNames() {
        return this.userPrincipalNames == null ? List.of() : this.userPrincipalNames;
    }

    public GetUsersArgs(
        @Nullable Boolean ignoreMissing,
        @Nullable List<String> mailNicknames,
        @Nullable List<String> objectIds,
        @Nullable Boolean returnAll,
        @Nullable List<String> userPrincipalNames) {
        this.ignoreMissing = ignoreMissing;
        this.mailNicknames = mailNicknames;
        this.objectIds = objectIds;
        this.returnAll = returnAll;
        this.userPrincipalNames = userPrincipalNames;
    }

    private GetUsersArgs() {
        this.ignoreMissing = null;
        this.mailNicknames = List.of();
        this.objectIds = List.of();
        this.returnAll = null;
        this.userPrincipalNames = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean ignoreMissing;
        private @Nullable List<String> mailNicknames;
        private @Nullable List<String> objectIds;
        private @Nullable Boolean returnAll;
        private @Nullable List<String> userPrincipalNames;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUsersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreMissing = defaults.ignoreMissing;
    	      this.mailNicknames = defaults.mailNicknames;
    	      this.objectIds = defaults.objectIds;
    	      this.returnAll = defaults.returnAll;
    	      this.userPrincipalNames = defaults.userPrincipalNames;
        }

        public Builder ignoreMissing(@Nullable Boolean ignoreMissing) {
            this.ignoreMissing = ignoreMissing;
            return this;
        }
        public Builder mailNicknames(@Nullable List<String> mailNicknames) {
            this.mailNicknames = mailNicknames;
            return this;
        }
        public Builder mailNicknames(String... mailNicknames) {
            return mailNicknames(List.of(mailNicknames));
        }
        public Builder objectIds(@Nullable List<String> objectIds) {
            this.objectIds = objectIds;
            return this;
        }
        public Builder objectIds(String... objectIds) {
            return objectIds(List.of(objectIds));
        }
        public Builder returnAll(@Nullable Boolean returnAll) {
            this.returnAll = returnAll;
            return this;
        }
        public Builder userPrincipalNames(@Nullable List<String> userPrincipalNames) {
            this.userPrincipalNames = userPrincipalNames;
            return this;
        }
        public Builder userPrincipalNames(String... userPrincipalNames) {
            return userPrincipalNames(List.of(userPrincipalNames));
        }        public GetUsersArgs build() {
            return new GetUsersArgs(ignoreMissing, mailNicknames, objectIds, returnAll, userPrincipalNames);
        }
    }
}
