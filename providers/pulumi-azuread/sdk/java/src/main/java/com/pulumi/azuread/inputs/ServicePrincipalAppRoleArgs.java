// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServicePrincipalAppRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicePrincipalAppRoleArgs Empty = new ServicePrincipalAppRoleArgs();

    /**
     * Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are: `User` and `Application`, or both.
     * 
     */
    @Import(name="allowedMemberTypes")
    private @Nullable Output<List<String>> allowedMemberTypes;

    /**
     * @return Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are: `User` and `Application`, or both.
     * 
     */
    public Optional<Output<List<String>>> allowedMemberTypes() {
        return Optional.ofNullable(this.allowedMemberTypes);
    }

    /**
     * A description of the service principal provided for internal end-users.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the service principal provided for internal end-users.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Display name for the app role that appears during app role assignment and in consent experiences.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name for the app role that appears during app role assignment and in consent experiences.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Specifies whether the permission scope is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Specifies whether the permission scope is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The unique identifier of the delegated permission.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The unique identifier of the delegated permission.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The value that is used for the `scp` claim in OAuth 2.0 access tokens.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The value that is used for the `scp` claim in OAuth 2.0 access tokens.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private ServicePrincipalAppRoleArgs() {}

    private ServicePrincipalAppRoleArgs(ServicePrincipalAppRoleArgs $) {
        this.allowedMemberTypes = $.allowedMemberTypes;
        this.description = $.description;
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.id = $.id;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicePrincipalAppRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicePrincipalAppRoleArgs $;

        public Builder() {
            $ = new ServicePrincipalAppRoleArgs();
        }

        public Builder(ServicePrincipalAppRoleArgs defaults) {
            $ = new ServicePrincipalAppRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedMemberTypes Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are: `User` and `Application`, or both.
         * 
         * @return builder
         * 
         */
        public Builder allowedMemberTypes(@Nullable Output<List<String>> allowedMemberTypes) {
            $.allowedMemberTypes = allowedMemberTypes;
            return this;
        }

        /**
         * @param allowedMemberTypes Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are: `User` and `Application`, or both.
         * 
         * @return builder
         * 
         */
        public Builder allowedMemberTypes(List<String> allowedMemberTypes) {
            return allowedMemberTypes(Output.of(allowedMemberTypes));
        }

        /**
         * @param allowedMemberTypes Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are: `User` and `Application`, or both.
         * 
         * @return builder
         * 
         */
        public Builder allowedMemberTypes(String... allowedMemberTypes) {
            return allowedMemberTypes(List.of(allowedMemberTypes));
        }

        /**
         * @param description A description of the service principal provided for internal end-users.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the service principal provided for internal end-users.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Display name for the app role that appears during app role assignment and in consent experiences.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name for the app role that appears during app role assignment and in consent experiences.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enabled Specifies whether the permission scope is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Specifies whether the permission scope is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param id The unique identifier of the delegated permission.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier of the delegated permission.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param value The value that is used for the `scp` claim in OAuth 2.0 access tokens.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value that is used for the `scp` claim in OAuth 2.0 access tokens.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public ServicePrincipalAppRoleArgs build() {
            return $;
        }
    }

}
