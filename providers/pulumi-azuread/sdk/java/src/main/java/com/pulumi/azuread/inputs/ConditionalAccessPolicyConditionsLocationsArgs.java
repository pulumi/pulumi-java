// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyConditionsLocationsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyConditionsLocationsArgs Empty = new ConditionalAccessPolicyConditionsLocationsArgs();

    /**
     * A list of location IDs excluded from scope of policy.
     * 
     */
    @Import(name="excludedLocations")
    private @Nullable Output<List<String>> excludedLocations;

    /**
     * @return A list of location IDs excluded from scope of policy.
     * 
     */
    public Optional<Output<List<String>>> excludedLocations() {
        return Optional.ofNullable(this.excludedLocations);
    }

    /**
     * A list of location IDs in scope of policy unless explicitly excluded. Can also be set to `All`, or `AllTrusted`.
     * 
     */
    @Import(name="includedLocations", required=true)
    private Output<List<String>> includedLocations;

    /**
     * @return A list of location IDs in scope of policy unless explicitly excluded. Can also be set to `All`, or `AllTrusted`.
     * 
     */
    public Output<List<String>> includedLocations() {
        return this.includedLocations;
    }

    private ConditionalAccessPolicyConditionsLocationsArgs() {}

    private ConditionalAccessPolicyConditionsLocationsArgs(ConditionalAccessPolicyConditionsLocationsArgs $) {
        this.excludedLocations = $.excludedLocations;
        this.includedLocations = $.includedLocations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalAccessPolicyConditionsLocationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalAccessPolicyConditionsLocationsArgs $;

        public Builder() {
            $ = new ConditionalAccessPolicyConditionsLocationsArgs();
        }

        public Builder(ConditionalAccessPolicyConditionsLocationsArgs defaults) {
            $ = new ConditionalAccessPolicyConditionsLocationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludedLocations A list of location IDs excluded from scope of policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedLocations(@Nullable Output<List<String>> excludedLocations) {
            $.excludedLocations = excludedLocations;
            return this;
        }

        /**
         * @param excludedLocations A list of location IDs excluded from scope of policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedLocations(List<String> excludedLocations) {
            return excludedLocations(Output.of(excludedLocations));
        }

        /**
         * @param excludedLocations A list of location IDs excluded from scope of policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedLocations(String... excludedLocations) {
            return excludedLocations(List.of(excludedLocations));
        }

        /**
         * @param includedLocations A list of location IDs in scope of policy unless explicitly excluded. Can also be set to `All`, or `AllTrusted`.
         * 
         * @return builder
         * 
         */
        public Builder includedLocations(Output<List<String>> includedLocations) {
            $.includedLocations = includedLocations;
            return this;
        }

        /**
         * @param includedLocations A list of location IDs in scope of policy unless explicitly excluded. Can also be set to `All`, or `AllTrusted`.
         * 
         * @return builder
         * 
         */
        public Builder includedLocations(List<String> includedLocations) {
            return includedLocations(Output.of(includedLocations));
        }

        /**
         * @param includedLocations A list of location IDs in scope of policy unless explicitly excluded. Can also be set to `All`, or `AllTrusted`.
         * 
         * @return builder
         * 
         */
        public Builder includedLocations(String... includedLocations) {
            return includedLocations(List.of(includedLocations));
        }

        public ConditionalAccessPolicyConditionsLocationsArgs build() {
            $.includedLocations = Objects.requireNonNull($.includedLocations, "expected parameter 'includedLocations' to be non-null");
            return $;
        }
    }

}
