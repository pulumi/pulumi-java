// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyConditionsLocationsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyConditionsLocationsArgs Empty = new ConditionalAccessPolicyConditionsLocationsArgs();

    /**
     * A list of location IDs excluded from scope of policy.
     * 
     */
    @Import(name="excludedLocations")
      private final @Nullable Output<List<String>> excludedLocations;

    public Output<List<String>> excludedLocations() {
        return this.excludedLocations == null ? Codegen.empty() : this.excludedLocations;
    }

    /**
     * A list of location IDs in scope of policy unless explicitly excluded. Can also be set to `All`, or `AllTrusted`.
     * 
     */
    @Import(name="includedLocations", required=true)
      private final Output<List<String>> includedLocations;

    public Output<List<String>> includedLocations() {
        return this.includedLocations;
    }

    public ConditionalAccessPolicyConditionsLocationsArgs(
        @Nullable Output<List<String>> excludedLocations,
        Output<List<String>> includedLocations) {
        this.excludedLocations = excludedLocations;
        this.includedLocations = Objects.requireNonNull(includedLocations, "expected parameter 'includedLocations' to be non-null");
    }

    private ConditionalAccessPolicyConditionsLocationsArgs() {
        this.excludedLocations = Codegen.empty();
        this.includedLocations = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicyConditionsLocationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> excludedLocations;
        private Output<List<String>> includedLocations;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalAccessPolicyConditionsLocationsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludedLocations = defaults.excludedLocations;
    	      this.includedLocations = defaults.includedLocations;
        }

        public Builder excludedLocations(@Nullable Output<List<String>> excludedLocations) {
            this.excludedLocations = excludedLocations;
            return this;
        }
        public Builder excludedLocations(@Nullable List<String> excludedLocations) {
            this.excludedLocations = Codegen.ofNullable(excludedLocations);
            return this;
        }
        public Builder excludedLocations(String... excludedLocations) {
            return excludedLocations(List.of(excludedLocations));
        }
        public Builder includedLocations(Output<List<String>> includedLocations) {
            this.includedLocations = Objects.requireNonNull(includedLocations);
            return this;
        }
        public Builder includedLocations(List<String> includedLocations) {
            this.includedLocations = Output.of(Objects.requireNonNull(includedLocations));
            return this;
        }
        public Builder includedLocations(String... includedLocations) {
            return includedLocations(List.of(includedLocations));
        }        public ConditionalAccessPolicyConditionsLocationsArgs build() {
            return new ConditionalAccessPolicyConditionsLocationsArgs(excludedLocations, includedLocations);
        }
    }
}
