// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetApplicationOptionalClaimIdToken extends com.pulumi.resources.InvokeArgs {

    public static final GetApplicationOptionalClaimIdToken Empty = new GetApplicationOptionalClaimIdToken();

    /**
     * List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
     * 
     */
    @Import(name="additionalProperties")
      private final @Nullable List<String> additionalProperties;

    public List<String> additionalProperties() {
        return this.additionalProperties == null ? List.of() : this.additionalProperties;
    }

    /**
     * Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
     * 
     */
    @Import(name="essential")
      private final @Nullable Boolean essential;

    public Optional<Boolean> essential() {
        return this.essential == null ? Optional.empty() : Optional.ofNullable(this.essential);
    }

    /**
     * The name of the optional claim.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
     * 
     */
    @Import(name="source")
      private final @Nullable String source;

    public Optional<String> source() {
        return this.source == null ? Optional.empty() : Optional.ofNullable(this.source);
    }

    public GetApplicationOptionalClaimIdToken(
        @Nullable List<String> additionalProperties,
        @Nullable Boolean essential,
        String name,
        @Nullable String source) {
        this.additionalProperties = additionalProperties;
        this.essential = essential;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.source = source;
    }

    private GetApplicationOptionalClaimIdToken() {
        this.additionalProperties = List.of();
        this.essential = null;
        this.name = null;
        this.source = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationOptionalClaimIdToken defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> additionalProperties;
        private @Nullable Boolean essential;
        private String name;
        private @Nullable String source;

        public Builder() {
    	      // Empty
        }

        public Builder(GetApplicationOptionalClaimIdToken defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalProperties = defaults.additionalProperties;
    	      this.essential = defaults.essential;
    	      this.name = defaults.name;
    	      this.source = defaults.source;
        }

        public Builder additionalProperties(@Nullable List<String> additionalProperties) {
            this.additionalProperties = additionalProperties;
            return this;
        }
        public Builder additionalProperties(String... additionalProperties) {
            return additionalProperties(List.of(additionalProperties));
        }
        public Builder essential(@Nullable Boolean essential) {
            this.essential = essential;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }        public GetApplicationOptionalClaimIdToken build() {
            return new GetApplicationOptionalClaimIdToken(additionalProperties, essential, name, source);
        }
    }
}
