// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.inputs.InvitationMessageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InvitationArgs extends com.pulumi.resources.ResourceArgs {

    public static final InvitationArgs Empty = new InvitationArgs();

    /**
     * A `message` block as documented below, which configures the message being sent to the invited user. If this block is omitted, no message will be sent.
     * 
     */
    @Import(name="message")
      private final @Nullable Output<InvitationMessageArgs> message;

    public Output<InvitationMessageArgs> message() {
        return this.message == null ? Codegen.empty() : this.message;
    }

    /**
     * The URL that the user should be redirected to once the invitation is redeemed.
     * 
     */
    @Import(name="redirectUrl", required=true)
      private final Output<String> redirectUrl;

    public Output<String> redirectUrl() {
        return this.redirectUrl;
    }

    /**
     * The display name of the user being invited.
     * 
     */
    @Import(name="userDisplayName")
      private final @Nullable Output<String> userDisplayName;

    public Output<String> userDisplayName() {
        return this.userDisplayName == null ? Codegen.empty() : this.userDisplayName;
    }

    /**
     * The email address of the user being invited.
     * 
     */
    @Import(name="userEmailAddress", required=true)
      private final Output<String> userEmailAddress;

    public Output<String> userEmailAddress() {
        return this.userEmailAddress;
    }

    /**
     * The user type of the user being invited. Must be one of `Guest` or `Member`. Only Global Administrators can invite users as members. Defaults to `Guest`.
     * 
     */
    @Import(name="userType")
      private final @Nullable Output<String> userType;

    public Output<String> userType() {
        return this.userType == null ? Codegen.empty() : this.userType;
    }

    public InvitationArgs(
        @Nullable Output<InvitationMessageArgs> message,
        Output<String> redirectUrl,
        @Nullable Output<String> userDisplayName,
        Output<String> userEmailAddress,
        @Nullable Output<String> userType) {
        this.message = message;
        this.redirectUrl = Objects.requireNonNull(redirectUrl, "expected parameter 'redirectUrl' to be non-null");
        this.userDisplayName = userDisplayName;
        this.userEmailAddress = Objects.requireNonNull(userEmailAddress, "expected parameter 'userEmailAddress' to be non-null");
        this.userType = userType;
    }

    private InvitationArgs() {
        this.message = Codegen.empty();
        this.redirectUrl = Codegen.empty();
        this.userDisplayName = Codegen.empty();
        this.userEmailAddress = Codegen.empty();
        this.userType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InvitationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<InvitationMessageArgs> message;
        private Output<String> redirectUrl;
        private @Nullable Output<String> userDisplayName;
        private Output<String> userEmailAddress;
        private @Nullable Output<String> userType;

        public Builder() {
    	      // Empty
        }

        public Builder(InvitationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.message = defaults.message;
    	      this.redirectUrl = defaults.redirectUrl;
    	      this.userDisplayName = defaults.userDisplayName;
    	      this.userEmailAddress = defaults.userEmailAddress;
    	      this.userType = defaults.userType;
        }

        public Builder message(@Nullable Output<InvitationMessageArgs> message) {
            this.message = message;
            return this;
        }
        public Builder message(@Nullable InvitationMessageArgs message) {
            this.message = Codegen.ofNullable(message);
            return this;
        }
        public Builder redirectUrl(Output<String> redirectUrl) {
            this.redirectUrl = Objects.requireNonNull(redirectUrl);
            return this;
        }
        public Builder redirectUrl(String redirectUrl) {
            this.redirectUrl = Output.of(Objects.requireNonNull(redirectUrl));
            return this;
        }
        public Builder userDisplayName(@Nullable Output<String> userDisplayName) {
            this.userDisplayName = userDisplayName;
            return this;
        }
        public Builder userDisplayName(@Nullable String userDisplayName) {
            this.userDisplayName = Codegen.ofNullable(userDisplayName);
            return this;
        }
        public Builder userEmailAddress(Output<String> userEmailAddress) {
            this.userEmailAddress = Objects.requireNonNull(userEmailAddress);
            return this;
        }
        public Builder userEmailAddress(String userEmailAddress) {
            this.userEmailAddress = Output.of(Objects.requireNonNull(userEmailAddress));
            return this;
        }
        public Builder userType(@Nullable Output<String> userType) {
            this.userType = userType;
            return this;
        }
        public Builder userType(@Nullable String userType) {
            this.userType = Codegen.ofNullable(userType);
            return this;
        }        public InvitationArgs build() {
            return new InvitationArgs(message, redirectUrl, userDisplayName, userEmailAddress, userType);
        }
    }
}
