// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.inputs.InvitationMessageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InvitationArgs extends com.pulumi.resources.ResourceArgs {

    public static final InvitationArgs Empty = new InvitationArgs();

    /**
     * A `message` block as documented below, which configures the message being sent to the invited user. If this block is omitted, no message will be sent.
     * 
     */
    @Import(name="message")
    private @Nullable Output<InvitationMessageArgs> message;

    /**
     * @return A `message` block as documented below, which configures the message being sent to the invited user. If this block is omitted, no message will be sent.
     * 
     */
    public Optional<Output<InvitationMessageArgs>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * The URL that the user should be redirected to once the invitation is redeemed.
     * 
     */
    @Import(name="redirectUrl", required=true)
    private Output<String> redirectUrl;

    /**
     * @return The URL that the user should be redirected to once the invitation is redeemed.
     * 
     */
    public Output<String> redirectUrl() {
        return this.redirectUrl;
    }

    /**
     * The display name of the user being invited.
     * 
     */
    @Import(name="userDisplayName")
    private @Nullable Output<String> userDisplayName;

    /**
     * @return The display name of the user being invited.
     * 
     */
    public Optional<Output<String>> userDisplayName() {
        return Optional.ofNullable(this.userDisplayName);
    }

    /**
     * The email address of the user being invited.
     * 
     */
    @Import(name="userEmailAddress", required=true)
    private Output<String> userEmailAddress;

    /**
     * @return The email address of the user being invited.
     * 
     */
    public Output<String> userEmailAddress() {
        return this.userEmailAddress;
    }

    /**
     * The user type of the user being invited. Must be one of `Guest` or `Member`. Only Global Administrators can invite users as members. Defaults to `Guest`.
     * 
     */
    @Import(name="userType")
    private @Nullable Output<String> userType;

    /**
     * @return The user type of the user being invited. Must be one of `Guest` or `Member`. Only Global Administrators can invite users as members. Defaults to `Guest`.
     * 
     */
    public Optional<Output<String>> userType() {
        return Optional.ofNullable(this.userType);
    }

    private InvitationArgs() {}

    private InvitationArgs(InvitationArgs $) {
        this.message = $.message;
        this.redirectUrl = $.redirectUrl;
        this.userDisplayName = $.userDisplayName;
        this.userEmailAddress = $.userEmailAddress;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InvitationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InvitationArgs $;

        public Builder() {
            $ = new InvitationArgs();
        }

        public Builder(InvitationArgs defaults) {
            $ = new InvitationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param message A `message` block as documented below, which configures the message being sent to the invited user. If this block is omitted, no message will be sent.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<InvitationMessageArgs> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message A `message` block as documented below, which configures the message being sent to the invited user. If this block is omitted, no message will be sent.
         * 
         * @return builder
         * 
         */
        public Builder message(InvitationMessageArgs message) {
            return message(Output.of(message));
        }

        /**
         * @param redirectUrl The URL that the user should be redirected to once the invitation is redeemed.
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(Output<String> redirectUrl) {
            $.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * @param redirectUrl The URL that the user should be redirected to once the invitation is redeemed.
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(String redirectUrl) {
            return redirectUrl(Output.of(redirectUrl));
        }

        /**
         * @param userDisplayName The display name of the user being invited.
         * 
         * @return builder
         * 
         */
        public Builder userDisplayName(@Nullable Output<String> userDisplayName) {
            $.userDisplayName = userDisplayName;
            return this;
        }

        /**
         * @param userDisplayName The display name of the user being invited.
         * 
         * @return builder
         * 
         */
        public Builder userDisplayName(String userDisplayName) {
            return userDisplayName(Output.of(userDisplayName));
        }

        /**
         * @param userEmailAddress The email address of the user being invited.
         * 
         * @return builder
         * 
         */
        public Builder userEmailAddress(Output<String> userEmailAddress) {
            $.userEmailAddress = userEmailAddress;
            return this;
        }

        /**
         * @param userEmailAddress The email address of the user being invited.
         * 
         * @return builder
         * 
         */
        public Builder userEmailAddress(String userEmailAddress) {
            return userEmailAddress(Output.of(userEmailAddress));
        }

        /**
         * @param userType The user type of the user being invited. Must be one of `Guest` or `Member`. Only Global Administrators can invite users as members. Defaults to `Guest`.
         * 
         * @return builder
         * 
         */
        public Builder userType(@Nullable Output<String> userType) {
            $.userType = userType;
            return this;
        }

        /**
         * @param userType The user type of the user being invited. Must be one of `Guest` or `Member`. Only Global Administrators can invite users as members. Defaults to `Guest`.
         * 
         * @return builder
         * 
         */
        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        public InvitationArgs build() {
            $.redirectUrl = Objects.requireNonNull($.redirectUrl, "expected parameter 'redirectUrl' to be non-null");
            $.userEmailAddress = Objects.requireNonNull($.userEmailAddress, "expected parameter 'userEmailAddress' to be non-null");
            return $;
        }
    }

}
