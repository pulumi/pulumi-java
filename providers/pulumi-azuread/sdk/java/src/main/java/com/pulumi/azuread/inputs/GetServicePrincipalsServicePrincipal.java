// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetServicePrincipalsServicePrincipal extends com.pulumi.resources.InvokeArgs {

    public static final GetServicePrincipalsServicePrincipal Empty = new GetServicePrincipalsServicePrincipal();

    /**
     * Whether or not the service principal account is enabled.
     * 
     */
    @Import(name="accountEnabled", required=true)
      private final Boolean accountEnabled;

    public Boolean accountEnabled() {
        return this.accountEnabled;
    }

    /**
     * Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application.
     * 
     */
    @Import(name="appRoleAssignmentRequired", required=true)
      private final Boolean appRoleAssignmentRequired;

    public Boolean appRoleAssignmentRequired() {
        return this.appRoleAssignmentRequired;
    }

    /**
     * The application ID (client ID) of the application associated with this service principal.
     * 
     */
    @Import(name="applicationId", required=true)
      private final String applicationId;

    public String applicationId() {
        return this.applicationId;
    }

    /**
     * The tenant ID where the associated application is registered.
     * 
     */
    @Import(name="applicationTenantId", required=true)
      private final String applicationTenantId;

    public String applicationTenantId() {
        return this.applicationTenantId;
    }

    /**
     * The display name of the application associated with this service principal.
     * 
     */
    @Import(name="displayName", required=true)
      private final String displayName;

    public String displayName() {
        return this.displayName;
    }

    /**
     * The object ID of the service principal.
     * 
     */
    @Import(name="objectId", required=true)
      private final String objectId;

    public String objectId() {
        return this.objectId;
    }

    /**
     * The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps.
     * 
     */
    @Import(name="preferredSingleSignOnMode", required=true)
      private final String preferredSingleSignOnMode;

    public String preferredSingleSignOnMode() {
        return this.preferredSingleSignOnMode;
    }

    /**
     * The URL where the service exposes SAML metadata for federation.
     * 
     */
    @Import(name="samlMetadataUrl", required=true)
      private final String samlMetadataUrl;

    public String samlMetadataUrl() {
        return this.samlMetadataUrl;
    }

    /**
     * A list of identifier URI(s), copied over from the associated application.
     * 
     */
    @Import(name="servicePrincipalNames", required=true)
      private final List<String> servicePrincipalNames;

    public List<String> servicePrincipalNames() {
        return this.servicePrincipalNames;
    }

    /**
     * The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
     * 
     */
    @Import(name="signInAudience", required=true)
      private final String signInAudience;

    public String signInAudience() {
        return this.signInAudience;
    }

    /**
     * A list of tags applied to the service principal.
     * 
     */
    @Import(name="tags", required=true)
      private final List<String> tags;

    public List<String> tags() {
        return this.tags;
    }

    /**
     * Identifies whether the service principal represents an application or a managed identity. Possible values include `Application` or `ManagedIdentity`.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public GetServicePrincipalsServicePrincipal(
        Boolean accountEnabled,
        Boolean appRoleAssignmentRequired,
        String applicationId,
        String applicationTenantId,
        String displayName,
        String objectId,
        String preferredSingleSignOnMode,
        String samlMetadataUrl,
        List<String> servicePrincipalNames,
        String signInAudience,
        List<String> tags,
        String type) {
        this.accountEnabled = Objects.requireNonNull(accountEnabled, "expected parameter 'accountEnabled' to be non-null");
        this.appRoleAssignmentRequired = Objects.requireNonNull(appRoleAssignmentRequired, "expected parameter 'appRoleAssignmentRequired' to be non-null");
        this.applicationId = Objects.requireNonNull(applicationId, "expected parameter 'applicationId' to be non-null");
        this.applicationTenantId = Objects.requireNonNull(applicationTenantId, "expected parameter 'applicationTenantId' to be non-null");
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.objectId = Objects.requireNonNull(objectId, "expected parameter 'objectId' to be non-null");
        this.preferredSingleSignOnMode = Objects.requireNonNull(preferredSingleSignOnMode, "expected parameter 'preferredSingleSignOnMode' to be non-null");
        this.samlMetadataUrl = Objects.requireNonNull(samlMetadataUrl, "expected parameter 'samlMetadataUrl' to be non-null");
        this.servicePrincipalNames = Objects.requireNonNull(servicePrincipalNames, "expected parameter 'servicePrincipalNames' to be non-null");
        this.signInAudience = Objects.requireNonNull(signInAudience, "expected parameter 'signInAudience' to be non-null");
        this.tags = Objects.requireNonNull(tags, "expected parameter 'tags' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private GetServicePrincipalsServicePrincipal() {
        this.accountEnabled = null;
        this.appRoleAssignmentRequired = null;
        this.applicationId = null;
        this.applicationTenantId = null;
        this.displayName = null;
        this.objectId = null;
        this.preferredSingleSignOnMode = null;
        this.samlMetadataUrl = null;
        this.servicePrincipalNames = List.of();
        this.signInAudience = null;
        this.tags = List.of();
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServicePrincipalsServicePrincipal defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean accountEnabled;
        private Boolean appRoleAssignmentRequired;
        private String applicationId;
        private String applicationTenantId;
        private String displayName;
        private String objectId;
        private String preferredSingleSignOnMode;
        private String samlMetadataUrl;
        private List<String> servicePrincipalNames;
        private String signInAudience;
        private List<String> tags;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServicePrincipalsServicePrincipal defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountEnabled = defaults.accountEnabled;
    	      this.appRoleAssignmentRequired = defaults.appRoleAssignmentRequired;
    	      this.applicationId = defaults.applicationId;
    	      this.applicationTenantId = defaults.applicationTenantId;
    	      this.displayName = defaults.displayName;
    	      this.objectId = defaults.objectId;
    	      this.preferredSingleSignOnMode = defaults.preferredSingleSignOnMode;
    	      this.samlMetadataUrl = defaults.samlMetadataUrl;
    	      this.servicePrincipalNames = defaults.servicePrincipalNames;
    	      this.signInAudience = defaults.signInAudience;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder accountEnabled(Boolean accountEnabled) {
            this.accountEnabled = Objects.requireNonNull(accountEnabled);
            return this;
        }
        public Builder appRoleAssignmentRequired(Boolean appRoleAssignmentRequired) {
            this.appRoleAssignmentRequired = Objects.requireNonNull(appRoleAssignmentRequired);
            return this;
        }
        public Builder applicationId(String applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }
        public Builder applicationTenantId(String applicationTenantId) {
            this.applicationTenantId = Objects.requireNonNull(applicationTenantId);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder objectId(String objectId) {
            this.objectId = Objects.requireNonNull(objectId);
            return this;
        }
        public Builder preferredSingleSignOnMode(String preferredSingleSignOnMode) {
            this.preferredSingleSignOnMode = Objects.requireNonNull(preferredSingleSignOnMode);
            return this;
        }
        public Builder samlMetadataUrl(String samlMetadataUrl) {
            this.samlMetadataUrl = Objects.requireNonNull(samlMetadataUrl);
            return this;
        }
        public Builder servicePrincipalNames(List<String> servicePrincipalNames) {
            this.servicePrincipalNames = Objects.requireNonNull(servicePrincipalNames);
            return this;
        }
        public Builder servicePrincipalNames(String... servicePrincipalNames) {
            return servicePrincipalNames(List.of(servicePrincipalNames));
        }
        public Builder signInAudience(String signInAudience) {
            this.signInAudience = Objects.requireNonNull(signInAudience);
            return this;
        }
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetServicePrincipalsServicePrincipal build() {
            return new GetServicePrincipalsServicePrincipal(accountEnabled, appRoleAssignmentRequired, applicationId, applicationTenantId, displayName, objectId, preferredSingleSignOnMode, samlMetadataUrl, servicePrincipalNames, signInAudience, tags, type);
        }
    }
}
