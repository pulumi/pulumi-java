// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyConditionsApplicationsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyConditionsApplicationsArgs Empty = new ConditionalAccessPolicyConditionsApplicationsArgs();

    /**
     * A list of application IDs explicitly excluded from the policy.
     * 
     */
    @Import(name="excludedApplications")
      private final @Nullable Output<List<String>> excludedApplications;

    public Output<List<String>> excludedApplications() {
        return this.excludedApplications == null ? Codegen.empty() : this.excludedApplications;
    }

    /**
     * A list of application IDs the policy applies to, unless explicitly excluded (in `excluded_applications`). Can also be set to `All`.
     * 
     */
    @Import(name="includedApplications", required=true)
      private final Output<List<String>> includedApplications;

    public Output<List<String>> includedApplications() {
        return this.includedApplications;
    }

    /**
     * A list of user actions to include. Supported values are `urn:user:registersecurityinfo` and `urn:user:registerdevice`.
     * 
     */
    @Import(name="includedUserActions")
      private final @Nullable Output<List<String>> includedUserActions;

    public Output<List<String>> includedUserActions() {
        return this.includedUserActions == null ? Codegen.empty() : this.includedUserActions;
    }

    public ConditionalAccessPolicyConditionsApplicationsArgs(
        @Nullable Output<List<String>> excludedApplications,
        Output<List<String>> includedApplications,
        @Nullable Output<List<String>> includedUserActions) {
        this.excludedApplications = excludedApplications;
        this.includedApplications = Objects.requireNonNull(includedApplications, "expected parameter 'includedApplications' to be non-null");
        this.includedUserActions = includedUserActions;
    }

    private ConditionalAccessPolicyConditionsApplicationsArgs() {
        this.excludedApplications = Codegen.empty();
        this.includedApplications = Codegen.empty();
        this.includedUserActions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicyConditionsApplicationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> excludedApplications;
        private Output<List<String>> includedApplications;
        private @Nullable Output<List<String>> includedUserActions;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalAccessPolicyConditionsApplicationsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludedApplications = defaults.excludedApplications;
    	      this.includedApplications = defaults.includedApplications;
    	      this.includedUserActions = defaults.includedUserActions;
        }

        public Builder excludedApplications(@Nullable Output<List<String>> excludedApplications) {
            this.excludedApplications = excludedApplications;
            return this;
        }
        public Builder excludedApplications(@Nullable List<String> excludedApplications) {
            this.excludedApplications = Codegen.ofNullable(excludedApplications);
            return this;
        }
        public Builder excludedApplications(String... excludedApplications) {
            return excludedApplications(List.of(excludedApplications));
        }
        public Builder includedApplications(Output<List<String>> includedApplications) {
            this.includedApplications = Objects.requireNonNull(includedApplications);
            return this;
        }
        public Builder includedApplications(List<String> includedApplications) {
            this.includedApplications = Output.of(Objects.requireNonNull(includedApplications));
            return this;
        }
        public Builder includedApplications(String... includedApplications) {
            return includedApplications(List.of(includedApplications));
        }
        public Builder includedUserActions(@Nullable Output<List<String>> includedUserActions) {
            this.includedUserActions = includedUserActions;
            return this;
        }
        public Builder includedUserActions(@Nullable List<String> includedUserActions) {
            this.includedUserActions = Codegen.ofNullable(includedUserActions);
            return this;
        }
        public Builder includedUserActions(String... includedUserActions) {
            return includedUserActions(List.of(includedUserActions));
        }        public ConditionalAccessPolicyConditionsApplicationsArgs build() {
            return new ConditionalAccessPolicyConditionsApplicationsArgs(excludedApplications, includedApplications, includedUserActions);
        }
    }
}
