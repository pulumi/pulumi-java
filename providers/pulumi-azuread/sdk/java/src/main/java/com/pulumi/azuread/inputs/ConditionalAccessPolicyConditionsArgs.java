// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsApplicationsArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsDevicesArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsLocationsArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsPlatformsArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsUsersArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyConditionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyConditionsArgs Empty = new ConditionalAccessPolicyConditionsArgs();

    /**
     * An `applications` block as documented below, which specifies applications and user actions included in and excluded from the policy.
     * 
     */
    @Import(name="applications", required=true)
    private Output<ConditionalAccessPolicyConditionsApplicationsArgs> applications;

    /**
     * @return An `applications` block as documented below, which specifies applications and user actions included in and excluded from the policy.
     * 
     */
    public Output<ConditionalAccessPolicyConditionsApplicationsArgs> applications() {
        return this.applications;
    }

    /**
     * A list of client application types included in the policy. Possible values are: `all`, `browser`, `mobileAppsAndDesktopClients`, `exchangeActiveSync`, `easSupported` and `other`.
     * 
     */
    @Import(name="clientAppTypes", required=true)
    private Output<List<String>> clientAppTypes;

    /**
     * @return A list of client application types included in the policy. Possible values are: `all`, `browser`, `mobileAppsAndDesktopClients`, `exchangeActiveSync`, `easSupported` and `other`.
     * 
     */
    public Output<List<String>> clientAppTypes() {
        return this.clientAppTypes;
    }

    /**
     * A `devices` block as documented below, which describes devices to be included in and excluded from the policy. A `devices` block can be added to an existing policy, but removing the `devices` block forces a new resource to be created.
     * 
     */
    @Import(name="devices")
    private @Nullable Output<ConditionalAccessPolicyConditionsDevicesArgs> devices;

    /**
     * @return A `devices` block as documented below, which describes devices to be included in and excluded from the policy. A `devices` block can be added to an existing policy, but removing the `devices` block forces a new resource to be created.
     * 
     */
    public Optional<Output<ConditionalAccessPolicyConditionsDevicesArgs>> devices() {
        return Optional.ofNullable(this.devices);
    }

    /**
     * A `locations` block as documented below, which specifies locations included in and excluded from the policy.
     * 
     */
    @Import(name="locations")
    private @Nullable Output<ConditionalAccessPolicyConditionsLocationsArgs> locations;

    /**
     * @return A `locations` block as documented below, which specifies locations included in and excluded from the policy.
     * 
     */
    public Optional<Output<ConditionalAccessPolicyConditionsLocationsArgs>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * A `platforms` block as documented below, which specifies platforms included in and excluded from the policy.
     * 
     */
    @Import(name="platforms")
    private @Nullable Output<ConditionalAccessPolicyConditionsPlatformsArgs> platforms;

    /**
     * @return A `platforms` block as documented below, which specifies platforms included in and excluded from the policy.
     * 
     */
    public Optional<Output<ConditionalAccessPolicyConditionsPlatformsArgs>> platforms() {
        return Optional.ofNullable(this.platforms);
    }

    /**
     * A list of sign-in risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
     * 
     */
    @Import(name="signInRiskLevels")
    private @Nullable Output<List<String>> signInRiskLevels;

    /**
     * @return A list of sign-in risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
     * 
     */
    public Optional<Output<List<String>>> signInRiskLevels() {
        return Optional.ofNullable(this.signInRiskLevels);
    }

    /**
     * A list of user risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
     * 
     */
    @Import(name="userRiskLevels")
    private @Nullable Output<List<String>> userRiskLevels;

    /**
     * @return A list of user risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
     * 
     */
    public Optional<Output<List<String>>> userRiskLevels() {
        return Optional.ofNullable(this.userRiskLevels);
    }

    /**
     * A `users` block as documented below, which specifies users, groups, and roles included in and excluded from the policy.
     * 
     */
    @Import(name="users", required=true)
    private Output<ConditionalAccessPolicyConditionsUsersArgs> users;

    /**
     * @return A `users` block as documented below, which specifies users, groups, and roles included in and excluded from the policy.
     * 
     */
    public Output<ConditionalAccessPolicyConditionsUsersArgs> users() {
        return this.users;
    }

    private ConditionalAccessPolicyConditionsArgs() {}

    private ConditionalAccessPolicyConditionsArgs(ConditionalAccessPolicyConditionsArgs $) {
        this.applications = $.applications;
        this.clientAppTypes = $.clientAppTypes;
        this.devices = $.devices;
        this.locations = $.locations;
        this.platforms = $.platforms;
        this.signInRiskLevels = $.signInRiskLevels;
        this.userRiskLevels = $.userRiskLevels;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalAccessPolicyConditionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalAccessPolicyConditionsArgs $;

        public Builder() {
            $ = new ConditionalAccessPolicyConditionsArgs();
        }

        public Builder(ConditionalAccessPolicyConditionsArgs defaults) {
            $ = new ConditionalAccessPolicyConditionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applications An `applications` block as documented below, which specifies applications and user actions included in and excluded from the policy.
         * 
         * @return builder
         * 
         */
        public Builder applications(Output<ConditionalAccessPolicyConditionsApplicationsArgs> applications) {
            $.applications = applications;
            return this;
        }

        /**
         * @param applications An `applications` block as documented below, which specifies applications and user actions included in and excluded from the policy.
         * 
         * @return builder
         * 
         */
        public Builder applications(ConditionalAccessPolicyConditionsApplicationsArgs applications) {
            return applications(Output.of(applications));
        }

        /**
         * @param clientAppTypes A list of client application types included in the policy. Possible values are: `all`, `browser`, `mobileAppsAndDesktopClients`, `exchangeActiveSync`, `easSupported` and `other`.
         * 
         * @return builder
         * 
         */
        public Builder clientAppTypes(Output<List<String>> clientAppTypes) {
            $.clientAppTypes = clientAppTypes;
            return this;
        }

        /**
         * @param clientAppTypes A list of client application types included in the policy. Possible values are: `all`, `browser`, `mobileAppsAndDesktopClients`, `exchangeActiveSync`, `easSupported` and `other`.
         * 
         * @return builder
         * 
         */
        public Builder clientAppTypes(List<String> clientAppTypes) {
            return clientAppTypes(Output.of(clientAppTypes));
        }

        /**
         * @param clientAppTypes A list of client application types included in the policy. Possible values are: `all`, `browser`, `mobileAppsAndDesktopClients`, `exchangeActiveSync`, `easSupported` and `other`.
         * 
         * @return builder
         * 
         */
        public Builder clientAppTypes(String... clientAppTypes) {
            return clientAppTypes(List.of(clientAppTypes));
        }

        /**
         * @param devices A `devices` block as documented below, which describes devices to be included in and excluded from the policy. A `devices` block can be added to an existing policy, but removing the `devices` block forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder devices(@Nullable Output<ConditionalAccessPolicyConditionsDevicesArgs> devices) {
            $.devices = devices;
            return this;
        }

        /**
         * @param devices A `devices` block as documented below, which describes devices to be included in and excluded from the policy. A `devices` block can be added to an existing policy, but removing the `devices` block forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder devices(ConditionalAccessPolicyConditionsDevicesArgs devices) {
            return devices(Output.of(devices));
        }

        /**
         * @param locations A `locations` block as documented below, which specifies locations included in and excluded from the policy.
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<ConditionalAccessPolicyConditionsLocationsArgs> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations A `locations` block as documented below, which specifies locations included in and excluded from the policy.
         * 
         * @return builder
         * 
         */
        public Builder locations(ConditionalAccessPolicyConditionsLocationsArgs locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param platforms A `platforms` block as documented below, which specifies platforms included in and excluded from the policy.
         * 
         * @return builder
         * 
         */
        public Builder platforms(@Nullable Output<ConditionalAccessPolicyConditionsPlatformsArgs> platforms) {
            $.platforms = platforms;
            return this;
        }

        /**
         * @param platforms A `platforms` block as documented below, which specifies platforms included in and excluded from the policy.
         * 
         * @return builder
         * 
         */
        public Builder platforms(ConditionalAccessPolicyConditionsPlatformsArgs platforms) {
            return platforms(Output.of(platforms));
        }

        /**
         * @param signInRiskLevels A list of sign-in risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
         * 
         * @return builder
         * 
         */
        public Builder signInRiskLevels(@Nullable Output<List<String>> signInRiskLevels) {
            $.signInRiskLevels = signInRiskLevels;
            return this;
        }

        /**
         * @param signInRiskLevels A list of sign-in risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
         * 
         * @return builder
         * 
         */
        public Builder signInRiskLevels(List<String> signInRiskLevels) {
            return signInRiskLevels(Output.of(signInRiskLevels));
        }

        /**
         * @param signInRiskLevels A list of sign-in risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
         * 
         * @return builder
         * 
         */
        public Builder signInRiskLevels(String... signInRiskLevels) {
            return signInRiskLevels(List.of(signInRiskLevels));
        }

        /**
         * @param userRiskLevels A list of user risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
         * 
         * @return builder
         * 
         */
        public Builder userRiskLevels(@Nullable Output<List<String>> userRiskLevels) {
            $.userRiskLevels = userRiskLevels;
            return this;
        }

        /**
         * @param userRiskLevels A list of user risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
         * 
         * @return builder
         * 
         */
        public Builder userRiskLevels(List<String> userRiskLevels) {
            return userRiskLevels(Output.of(userRiskLevels));
        }

        /**
         * @param userRiskLevels A list of user risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
         * 
         * @return builder
         * 
         */
        public Builder userRiskLevels(String... userRiskLevels) {
            return userRiskLevels(List.of(userRiskLevels));
        }

        /**
         * @param users A `users` block as documented below, which specifies users, groups, and roles included in and excluded from the policy.
         * 
         * @return builder
         * 
         */
        public Builder users(Output<ConditionalAccessPolicyConditionsUsersArgs> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users A `users` block as documented below, which specifies users, groups, and roles included in and excluded from the policy.
         * 
         * @return builder
         * 
         */
        public Builder users(ConditionalAccessPolicyConditionsUsersArgs users) {
            return users(Output.of(users));
        }

        public ConditionalAccessPolicyConditionsArgs build() {
            $.applications = Objects.requireNonNull($.applications, "expected parameter 'applications' to be non-null");
            $.clientAppTypes = Objects.requireNonNull($.clientAppTypes, "expected parameter 'clientAppTypes' to be non-null");
            $.users = Objects.requireNonNull($.users, "expected parameter 'users' to be non-null");
            return $;
        }
    }

}
