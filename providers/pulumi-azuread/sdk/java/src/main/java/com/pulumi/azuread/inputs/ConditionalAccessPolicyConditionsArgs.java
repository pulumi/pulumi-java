// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsApplicationsArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsDevicesArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsLocationsArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsPlatformsArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsUsersArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyConditionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyConditionsArgs Empty = new ConditionalAccessPolicyConditionsArgs();

    /**
     * An `applications` block as documented below, which specifies applications and user actions included in and excluded from the policy.
     * 
     */
    @Import(name="applications", required=true)
      private final Output<ConditionalAccessPolicyConditionsApplicationsArgs> applications;

    public Output<ConditionalAccessPolicyConditionsApplicationsArgs> applications() {
        return this.applications;
    }

    /**
     * A list of client application types included in the policy. Possible values are: `all`, `browser`, `mobileAppsAndDesktopClients`, `exchangeActiveSync`, `easSupported` and `other`.
     * 
     */
    @Import(name="clientAppTypes", required=true)
      private final Output<List<String>> clientAppTypes;

    public Output<List<String>> clientAppTypes() {
        return this.clientAppTypes;
    }

    /**
     * A `devices` block as documented below, which describes devices to be included in and excluded from the policy. A `devices` block can be added to an existing policy, but removing the `devices` block forces a new resource to be created.
     * 
     */
    @Import(name="devices")
      private final @Nullable Output<ConditionalAccessPolicyConditionsDevicesArgs> devices;

    public Output<ConditionalAccessPolicyConditionsDevicesArgs> devices() {
        return this.devices == null ? Codegen.empty() : this.devices;
    }

    /**
     * A `locations` block as documented below, which specifies locations included in and excluded from the policy.
     * 
     */
    @Import(name="locations", required=true)
      private final Output<ConditionalAccessPolicyConditionsLocationsArgs> locations;

    public Output<ConditionalAccessPolicyConditionsLocationsArgs> locations() {
        return this.locations;
    }

    /**
     * A `platforms` block as documented below, which specifies platforms included in and excluded from the policy.
     * 
     */
    @Import(name="platforms", required=true)
      private final Output<ConditionalAccessPolicyConditionsPlatformsArgs> platforms;

    public Output<ConditionalAccessPolicyConditionsPlatformsArgs> platforms() {
        return this.platforms;
    }

    /**
     * A list of sign-in risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
     * 
     */
    @Import(name="signInRiskLevels")
      private final @Nullable Output<List<String>> signInRiskLevels;

    public Output<List<String>> signInRiskLevels() {
        return this.signInRiskLevels == null ? Codegen.empty() : this.signInRiskLevels;
    }

    /**
     * A list of user risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.
     * 
     */
    @Import(name="userRiskLevels")
      private final @Nullable Output<List<String>> userRiskLevels;

    public Output<List<String>> userRiskLevels() {
        return this.userRiskLevels == null ? Codegen.empty() : this.userRiskLevels;
    }

    /**
     * A `users` block as documented below, which specifies users, groups, and roles included in and excluded from the policy.
     * 
     */
    @Import(name="users", required=true)
      private final Output<ConditionalAccessPolicyConditionsUsersArgs> users;

    public Output<ConditionalAccessPolicyConditionsUsersArgs> users() {
        return this.users;
    }

    public ConditionalAccessPolicyConditionsArgs(
        Output<ConditionalAccessPolicyConditionsApplicationsArgs> applications,
        Output<List<String>> clientAppTypes,
        @Nullable Output<ConditionalAccessPolicyConditionsDevicesArgs> devices,
        Output<ConditionalAccessPolicyConditionsLocationsArgs> locations,
        Output<ConditionalAccessPolicyConditionsPlatformsArgs> platforms,
        @Nullable Output<List<String>> signInRiskLevels,
        @Nullable Output<List<String>> userRiskLevels,
        Output<ConditionalAccessPolicyConditionsUsersArgs> users) {
        this.applications = Objects.requireNonNull(applications, "expected parameter 'applications' to be non-null");
        this.clientAppTypes = Objects.requireNonNull(clientAppTypes, "expected parameter 'clientAppTypes' to be non-null");
        this.devices = devices;
        this.locations = Objects.requireNonNull(locations, "expected parameter 'locations' to be non-null");
        this.platforms = Objects.requireNonNull(platforms, "expected parameter 'platforms' to be non-null");
        this.signInRiskLevels = signInRiskLevels;
        this.userRiskLevels = userRiskLevels;
        this.users = Objects.requireNonNull(users, "expected parameter 'users' to be non-null");
    }

    private ConditionalAccessPolicyConditionsArgs() {
        this.applications = Codegen.empty();
        this.clientAppTypes = Codegen.empty();
        this.devices = Codegen.empty();
        this.locations = Codegen.empty();
        this.platforms = Codegen.empty();
        this.signInRiskLevels = Codegen.empty();
        this.userRiskLevels = Codegen.empty();
        this.users = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicyConditionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ConditionalAccessPolicyConditionsApplicationsArgs> applications;
        private Output<List<String>> clientAppTypes;
        private @Nullable Output<ConditionalAccessPolicyConditionsDevicesArgs> devices;
        private Output<ConditionalAccessPolicyConditionsLocationsArgs> locations;
        private Output<ConditionalAccessPolicyConditionsPlatformsArgs> platforms;
        private @Nullable Output<List<String>> signInRiskLevels;
        private @Nullable Output<List<String>> userRiskLevels;
        private Output<ConditionalAccessPolicyConditionsUsersArgs> users;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalAccessPolicyConditionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applications = defaults.applications;
    	      this.clientAppTypes = defaults.clientAppTypes;
    	      this.devices = defaults.devices;
    	      this.locations = defaults.locations;
    	      this.platforms = defaults.platforms;
    	      this.signInRiskLevels = defaults.signInRiskLevels;
    	      this.userRiskLevels = defaults.userRiskLevels;
    	      this.users = defaults.users;
        }

        public Builder applications(Output<ConditionalAccessPolicyConditionsApplicationsArgs> applications) {
            this.applications = Objects.requireNonNull(applications);
            return this;
        }
        public Builder applications(ConditionalAccessPolicyConditionsApplicationsArgs applications) {
            this.applications = Output.of(Objects.requireNonNull(applications));
            return this;
        }
        public Builder clientAppTypes(Output<List<String>> clientAppTypes) {
            this.clientAppTypes = Objects.requireNonNull(clientAppTypes);
            return this;
        }
        public Builder clientAppTypes(List<String> clientAppTypes) {
            this.clientAppTypes = Output.of(Objects.requireNonNull(clientAppTypes));
            return this;
        }
        public Builder clientAppTypes(String... clientAppTypes) {
            return clientAppTypes(List.of(clientAppTypes));
        }
        public Builder devices(@Nullable Output<ConditionalAccessPolicyConditionsDevicesArgs> devices) {
            this.devices = devices;
            return this;
        }
        public Builder devices(@Nullable ConditionalAccessPolicyConditionsDevicesArgs devices) {
            this.devices = Codegen.ofNullable(devices);
            return this;
        }
        public Builder locations(Output<ConditionalAccessPolicyConditionsLocationsArgs> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }
        public Builder locations(ConditionalAccessPolicyConditionsLocationsArgs locations) {
            this.locations = Output.of(Objects.requireNonNull(locations));
            return this;
        }
        public Builder platforms(Output<ConditionalAccessPolicyConditionsPlatformsArgs> platforms) {
            this.platforms = Objects.requireNonNull(platforms);
            return this;
        }
        public Builder platforms(ConditionalAccessPolicyConditionsPlatformsArgs platforms) {
            this.platforms = Output.of(Objects.requireNonNull(platforms));
            return this;
        }
        public Builder signInRiskLevels(@Nullable Output<List<String>> signInRiskLevels) {
            this.signInRiskLevels = signInRiskLevels;
            return this;
        }
        public Builder signInRiskLevels(@Nullable List<String> signInRiskLevels) {
            this.signInRiskLevels = Codegen.ofNullable(signInRiskLevels);
            return this;
        }
        public Builder signInRiskLevels(String... signInRiskLevels) {
            return signInRiskLevels(List.of(signInRiskLevels));
        }
        public Builder userRiskLevels(@Nullable Output<List<String>> userRiskLevels) {
            this.userRiskLevels = userRiskLevels;
            return this;
        }
        public Builder userRiskLevels(@Nullable List<String> userRiskLevels) {
            this.userRiskLevels = Codegen.ofNullable(userRiskLevels);
            return this;
        }
        public Builder userRiskLevels(String... userRiskLevels) {
            return userRiskLevels(List.of(userRiskLevels));
        }
        public Builder users(Output<ConditionalAccessPolicyConditionsUsersArgs> users) {
            this.users = Objects.requireNonNull(users);
            return this;
        }
        public Builder users(ConditionalAccessPolicyConditionsUsersArgs users) {
            this.users = Output.of(Objects.requireNonNull(users));
            return this;
        }        public ConditionalAccessPolicyConditionsArgs build() {
            return new ConditionalAccessPolicyConditionsArgs(applications, clientAppTypes, devices, locations, platforms, signInRiskLevels, userRiskLevels, users);
        }
    }
}
