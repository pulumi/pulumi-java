// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetDomainsDomain extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainsDomain Empty = new GetDomainsDomain();

    /**
     * Set to `true` to only return domains whose DNS is managed by Microsoft 365. Defaults to `false`.
     * 
     */
    @Import(name="adminManaged", required=true)
      private final Boolean adminManaged;

    public Boolean adminManaged() {
        return this.adminManaged;
    }

    /**
     * The authentication type of the domain. Possible values include `Managed` or `Federated`.
     * 
     */
    @Import(name="authenticationType", required=true)
      private final String authenticationType;

    public String authenticationType() {
        return this.authenticationType;
    }

    /**
     * Whether this is the default domain that is used for user creation.
     * 
     */
    @Import(name="default", required=true)
      private final Boolean default_;

    public Boolean default_() {
        return this.default_;
    }

    /**
     * The name of the domain.
     * 
     */
    @Import(name="domainName", required=true)
      private final String domainName;

    public String domainName() {
        return this.domainName;
    }

    /**
     * Whether this is the initial domain created by Azure Active Directory.
     * 
     */
    @Import(name="initial", required=true)
      private final Boolean initial;

    public Boolean initial() {
        return this.initial;
    }

    /**
     * Whether the domain is a verified root domain (not a subdomain).
     * 
     */
    @Import(name="root", required=true)
      private final Boolean root;

    public Boolean root() {
        return this.root;
    }

    /**
     * A list of capabilities / services supported by the domain. Possible values include `Email`, `Sharepoint`, `EmailInternalRelayOnly`, `OfficeCommunicationsOnline`, `SharePointDefaultDomain`, `FullRedelegation`, `SharePointPublic`, `OrgIdAuthentication`, `Yammer` and `Intune`.
     * 
     */
    @Import(name="supportedServices", required=true)
      private final List<String> supportedServices;

    public List<String> supportedServices() {
        return this.supportedServices;
    }

    /**
     * Whether the domain has completed domain ownership verification.
     * 
     */
    @Import(name="verified", required=true)
      private final Boolean verified;

    public Boolean verified() {
        return this.verified;
    }

    public GetDomainsDomain(
        Boolean adminManaged,
        String authenticationType,
        Boolean default_,
        String domainName,
        Boolean initial,
        Boolean root,
        List<String> supportedServices,
        Boolean verified) {
        this.adminManaged = Objects.requireNonNull(adminManaged, "expected parameter 'adminManaged' to be non-null");
        this.authenticationType = Objects.requireNonNull(authenticationType, "expected parameter 'authenticationType' to be non-null");
        this.default_ = Objects.requireNonNull(default_, "expected parameter 'default' to be non-null");
        this.domainName = Objects.requireNonNull(domainName, "expected parameter 'domainName' to be non-null");
        this.initial = Objects.requireNonNull(initial, "expected parameter 'initial' to be non-null");
        this.root = Objects.requireNonNull(root, "expected parameter 'root' to be non-null");
        this.supportedServices = Objects.requireNonNull(supportedServices, "expected parameter 'supportedServices' to be non-null");
        this.verified = Objects.requireNonNull(verified, "expected parameter 'verified' to be non-null");
    }

    private GetDomainsDomain() {
        this.adminManaged = null;
        this.authenticationType = null;
        this.default_ = null;
        this.domainName = null;
        this.initial = null;
        this.root = null;
        this.supportedServices = List.of();
        this.verified = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsDomain defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean adminManaged;
        private String authenticationType;
        private Boolean default_;
        private String domainName;
        private Boolean initial;
        private Boolean root;
        private List<String> supportedServices;
        private Boolean verified;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDomainsDomain defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminManaged = defaults.adminManaged;
    	      this.authenticationType = defaults.authenticationType;
    	      this.default_ = defaults.default_;
    	      this.domainName = defaults.domainName;
    	      this.initial = defaults.initial;
    	      this.root = defaults.root;
    	      this.supportedServices = defaults.supportedServices;
    	      this.verified = defaults.verified;
        }

        public Builder adminManaged(Boolean adminManaged) {
            this.adminManaged = Objects.requireNonNull(adminManaged);
            return this;
        }
        public Builder authenticationType(String authenticationType) {
            this.authenticationType = Objects.requireNonNull(authenticationType);
            return this;
        }
        public Builder default_(Boolean default_) {
            this.default_ = Objects.requireNonNull(default_);
            return this;
        }
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        public Builder initial(Boolean initial) {
            this.initial = Objects.requireNonNull(initial);
            return this;
        }
        public Builder root(Boolean root) {
            this.root = Objects.requireNonNull(root);
            return this;
        }
        public Builder supportedServices(List<String> supportedServices) {
            this.supportedServices = Objects.requireNonNull(supportedServices);
            return this;
        }
        public Builder supportedServices(String... supportedServices) {
            return supportedServices(List.of(supportedServices));
        }
        public Builder verified(Boolean verified) {
            this.verified = Objects.requireNonNull(verified);
            return this;
        }        public GetDomainsDomain build() {
            return new GetDomainsDomain(adminManaged, authenticationType, default_, domainName, initial, root, supportedServices, verified);
        }
    }
}
