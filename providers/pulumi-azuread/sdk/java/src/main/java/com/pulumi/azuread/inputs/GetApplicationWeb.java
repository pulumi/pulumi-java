// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.GetApplicationWebImplicitGrant;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetApplicationWeb extends com.pulumi.resources.InvokeArgs {

    public static final GetApplicationWeb Empty = new GetApplicationWeb();

    /**
     * Home page or landing page of the application.
     * 
     */
    @Import(name="homepageUrl", required=true)
      private final String homepageUrl;

    public String homepageUrl() {
        return this.homepageUrl;
    }

    /**
     * An `implicit_grant` block as documented above.
     * 
     */
    @Import(name="implicitGrants", required=true)
      private final List<GetApplicationWebImplicitGrant> implicitGrants;

    public List<GetApplicationWebImplicitGrant> implicitGrants() {
        return this.implicitGrants;
    }

    /**
     * The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
     * 
     */
    @Import(name="logoutUrl", required=true)
      private final String logoutUrl;

    public String logoutUrl() {
        return this.logoutUrl;
    }

    /**
     * A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
     * 
     */
    @Import(name="redirectUris", required=true)
      private final List<String> redirectUris;

    public List<String> redirectUris() {
        return this.redirectUris;
    }

    public GetApplicationWeb(
        String homepageUrl,
        List<GetApplicationWebImplicitGrant> implicitGrants,
        String logoutUrl,
        List<String> redirectUris) {
        this.homepageUrl = Objects.requireNonNull(homepageUrl, "expected parameter 'homepageUrl' to be non-null");
        this.implicitGrants = Objects.requireNonNull(implicitGrants, "expected parameter 'implicitGrants' to be non-null");
        this.logoutUrl = Objects.requireNonNull(logoutUrl, "expected parameter 'logoutUrl' to be non-null");
        this.redirectUris = Objects.requireNonNull(redirectUris, "expected parameter 'redirectUris' to be non-null");
    }

    private GetApplicationWeb() {
        this.homepageUrl = null;
        this.implicitGrants = List.of();
        this.logoutUrl = null;
        this.redirectUris = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationWeb defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String homepageUrl;
        private List<GetApplicationWebImplicitGrant> implicitGrants;
        private String logoutUrl;
        private List<String> redirectUris;

        public Builder() {
    	      // Empty
        }

        public Builder(GetApplicationWeb defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.homepageUrl = defaults.homepageUrl;
    	      this.implicitGrants = defaults.implicitGrants;
    	      this.logoutUrl = defaults.logoutUrl;
    	      this.redirectUris = defaults.redirectUris;
        }

        public Builder homepageUrl(String homepageUrl) {
            this.homepageUrl = Objects.requireNonNull(homepageUrl);
            return this;
        }
        public Builder implicitGrants(List<GetApplicationWebImplicitGrant> implicitGrants) {
            this.implicitGrants = Objects.requireNonNull(implicitGrants);
            return this;
        }
        public Builder implicitGrants(GetApplicationWebImplicitGrant... implicitGrants) {
            return implicitGrants(List.of(implicitGrants));
        }
        public Builder logoutUrl(String logoutUrl) {
            this.logoutUrl = Objects.requireNonNull(logoutUrl);
            return this;
        }
        public Builder redirectUris(List<String> redirectUris) {
            this.redirectUris = Objects.requireNonNull(redirectUris);
            return this;
        }
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }        public GetApplicationWeb build() {
            return new GetApplicationWeb(homepageUrl, implicitGrants, logoutUrl, redirectUris);
        }
    }
}
