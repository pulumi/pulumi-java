// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetServicePrincipalsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServicePrincipalsArgs Empty = new GetServicePrincipalsArgs();

    /**
     * A list of application IDs (client IDs) of the applications associated with the service principals.
     * 
     */
    @Import(name="applicationIds")
    private Output</* @Nullable */ List<String>> applicationIds;

    /**
     * @return A list of application IDs (client IDs) of the applications associated with the service principals.
     * 
     */
    public Output</* @Nullable */ List<String>> applicationIds() {
        return this.applicationIds;
    }

    /**
     * A list of display names of the applications associated with the service principals.
     * 
     */
    @Import(name="displayNames")
    private Output</* @Nullable */ List<String>> displayNames;

    /**
     * @return A list of display names of the applications associated with the service principals.
     * 
     */
    public Output</* @Nullable */ List<String>> displayNames() {
        return this.displayNames;
    }

    /**
     * Ignore missing service principals and return all service principals that are found. The data source will still fail if no service principals are found. Defaults to false.
     * 
     */
    @Import(name="ignoreMissing")
    private Output</* @Nullable */ Boolean> ignoreMissing;

    /**
     * @return Ignore missing service principals and return all service principals that are found. The data source will still fail if no service principals are found. Defaults to false.
     * 
     */
    public Output</* @Nullable */ Boolean> ignoreMissing() {
        return this.ignoreMissing;
    }

    /**
     * The object IDs of the service principals.
     * 
     */
    @Import(name="objectIds")
    private Output</* @Nullable */ List<String>> objectIds;

    /**
     * @return The object IDs of the service principals.
     * 
     */
    public Output</* @Nullable */ List<String>> objectIds() {
        return this.objectIds;
    }

    /**
     * When `true`, the data source will return all service principals. Cannot be used with `ignore_missing`. Defaults to false.
     * 
     */
    @Import(name="returnAll")
    private Output</* @Nullable */ Boolean> returnAll;

    /**
     * @return When `true`, the data source will return all service principals. Cannot be used with `ignore_missing`. Defaults to false.
     * 
     */
    public Output</* @Nullable */ Boolean> returnAll() {
        return this.returnAll;
    }

    private GetServicePrincipalsArgs() {}

    private GetServicePrincipalsArgs(GetServicePrincipalsArgs $) {
        this.applicationIds = $.applicationIds;
        this.displayNames = $.displayNames;
        this.ignoreMissing = $.ignoreMissing;
        this.objectIds = $.objectIds;
        this.returnAll = $.returnAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServicePrincipalsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServicePrincipalsArgs $;

        public Builder() {
            $ = new GetServicePrincipalsArgs();
        }

        public Builder(GetServicePrincipalsArgs defaults) {
            $ = new GetServicePrincipalsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationIds A list of application IDs (client IDs) of the applications associated with the service principals.
         * 
         * @return builder
         * 
         */
        public Builder applicationIds(Output</* @Nullable */ List<String>> applicationIds) {
            $.applicationIds = applicationIds;
            return this;
        }

        /**
         * @param applicationIds A list of application IDs (client IDs) of the applications associated with the service principals.
         * 
         * @return builder
         * 
         */
        public Builder applicationIds(@Nullable List<String> applicationIds) {
            return applicationIds(Output.of(applicationIds));
        }

        /**
         * @param applicationIds A list of application IDs (client IDs) of the applications associated with the service principals.
         * 
         * @return builder
         * 
         */
        public Builder applicationIds(String... applicationIds) {
            return applicationIds(List.of(applicationIds));
        }

        /**
         * @param displayNames A list of display names of the applications associated with the service principals.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(Output</* @Nullable */ List<String>> displayNames) {
            $.displayNames = displayNames;
            return this;
        }

        /**
         * @param displayNames A list of display names of the applications associated with the service principals.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(@Nullable List<String> displayNames) {
            return displayNames(Output.of(displayNames));
        }

        /**
         * @param displayNames A list of display names of the applications associated with the service principals.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(String... displayNames) {
            return displayNames(List.of(displayNames));
        }

        /**
         * @param ignoreMissing Ignore missing service principals and return all service principals that are found. The data source will still fail if no service principals are found. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreMissing(Output</* @Nullable */ Boolean> ignoreMissing) {
            $.ignoreMissing = ignoreMissing;
            return this;
        }

        /**
         * @param ignoreMissing Ignore missing service principals and return all service principals that are found. The data source will still fail if no service principals are found. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreMissing(@Nullable Boolean ignoreMissing) {
            return ignoreMissing(Output.of(ignoreMissing));
        }

        /**
         * @param objectIds The object IDs of the service principals.
         * 
         * @return builder
         * 
         */
        public Builder objectIds(Output</* @Nullable */ List<String>> objectIds) {
            $.objectIds = objectIds;
            return this;
        }

        /**
         * @param objectIds The object IDs of the service principals.
         * 
         * @return builder
         * 
         */
        public Builder objectIds(@Nullable List<String> objectIds) {
            return objectIds(Output.of(objectIds));
        }

        /**
         * @param objectIds The object IDs of the service principals.
         * 
         * @return builder
         * 
         */
        public Builder objectIds(String... objectIds) {
            return objectIds(List.of(objectIds));
        }

        /**
         * @param returnAll When `true`, the data source will return all service principals. Cannot be used with `ignore_missing`. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder returnAll(Output</* @Nullable */ Boolean> returnAll) {
            $.returnAll = returnAll;
            return this;
        }

        /**
         * @param returnAll When `true`, the data source will return all service principals. Cannot be used with `ignore_missing`. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder returnAll(@Nullable Boolean returnAll) {
            return returnAll(Output.of(returnAll));
        }

        public GetServicePrincipalsArgs build() {
            return $;
        }
    }

}
