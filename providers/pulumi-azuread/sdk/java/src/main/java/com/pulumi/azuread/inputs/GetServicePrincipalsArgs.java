// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetServicePrincipalsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServicePrincipalsArgs Empty = new GetServicePrincipalsArgs();

    /**
     * A list of application IDs (client IDs) of the applications associated with the service principals.
     * 
     */
    @Import(name="applicationIds")
      private final @Nullable List<String> applicationIds;

    public List<String> applicationIds() {
        return this.applicationIds == null ? List.of() : this.applicationIds;
    }

    /**
     * A list of display names of the applications associated with the service principals.
     * 
     */
    @Import(name="displayNames")
      private final @Nullable List<String> displayNames;

    public List<String> displayNames() {
        return this.displayNames == null ? List.of() : this.displayNames;
    }

    /**
     * Ignore missing service principals and return all service principals that are found. The data source will still fail if no service principals are found. Defaults to false.
     * 
     */
    @Import(name="ignoreMissing")
      private final @Nullable Boolean ignoreMissing;

    public Optional<Boolean> ignoreMissing() {
        return this.ignoreMissing == null ? Optional.empty() : Optional.ofNullable(this.ignoreMissing);
    }

    /**
     * The object IDs of the service principals.
     * 
     */
    @Import(name="objectIds")
      private final @Nullable List<String> objectIds;

    public List<String> objectIds() {
        return this.objectIds == null ? List.of() : this.objectIds;
    }

    /**
     * When `true`, the data source will return all service principals. Cannot be used with `ignore_missing`. Defaults to false.
     * 
     */
    @Import(name="returnAll")
      private final @Nullable Boolean returnAll;

    public Optional<Boolean> returnAll() {
        return this.returnAll == null ? Optional.empty() : Optional.ofNullable(this.returnAll);
    }

    public GetServicePrincipalsArgs(
        @Nullable List<String> applicationIds,
        @Nullable List<String> displayNames,
        @Nullable Boolean ignoreMissing,
        @Nullable List<String> objectIds,
        @Nullable Boolean returnAll) {
        this.applicationIds = applicationIds;
        this.displayNames = displayNames;
        this.ignoreMissing = ignoreMissing;
        this.objectIds = objectIds;
        this.returnAll = returnAll;
    }

    private GetServicePrincipalsArgs() {
        this.applicationIds = List.of();
        this.displayNames = List.of();
        this.ignoreMissing = null;
        this.objectIds = List.of();
        this.returnAll = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServicePrincipalsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> applicationIds;
        private @Nullable List<String> displayNames;
        private @Nullable Boolean ignoreMissing;
        private @Nullable List<String> objectIds;
        private @Nullable Boolean returnAll;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServicePrincipalsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationIds = defaults.applicationIds;
    	      this.displayNames = defaults.displayNames;
    	      this.ignoreMissing = defaults.ignoreMissing;
    	      this.objectIds = defaults.objectIds;
    	      this.returnAll = defaults.returnAll;
        }

        public Builder applicationIds(@Nullable List<String> applicationIds) {
            this.applicationIds = applicationIds;
            return this;
        }
        public Builder applicationIds(String... applicationIds) {
            return applicationIds(List.of(applicationIds));
        }
        public Builder displayNames(@Nullable List<String> displayNames) {
            this.displayNames = displayNames;
            return this;
        }
        public Builder displayNames(String... displayNames) {
            return displayNames(List.of(displayNames));
        }
        public Builder ignoreMissing(@Nullable Boolean ignoreMissing) {
            this.ignoreMissing = ignoreMissing;
            return this;
        }
        public Builder objectIds(@Nullable List<String> objectIds) {
            this.objectIds = objectIds;
            return this;
        }
        public Builder objectIds(String... objectIds) {
            return objectIds(List.of(objectIds));
        }
        public Builder returnAll(@Nullable Boolean returnAll) {
            this.returnAll = returnAll;
            return this;
        }        public GetServicePrincipalsArgs build() {
            return new GetServicePrincipalsArgs(applicationIds, displayNames, ignoreMissing, objectIds, returnAll);
        }
    }
}
