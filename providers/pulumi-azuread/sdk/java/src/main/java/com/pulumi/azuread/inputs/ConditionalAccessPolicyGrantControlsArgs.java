// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyGrantControlsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyGrantControlsArgs Empty = new ConditionalAccessPolicyGrantControlsArgs();

    /**
     * List of built-in controls required by the policy. Possible values are: `block`, `mfa`, `approvedApplication`, `compliantApplication`, `compliantDevice`, `domainJoinedDevice`, `passwordChange` or `unknownFutureValue`.
     * 
     */
    @Import(name="builtInControls", required=true)
      private final Output<List<String>> builtInControls;

    public Output<List<String>> builtInControls() {
        return this.builtInControls;
    }

    /**
     * List of custom controls IDs required by the policy.
     * 
     */
    @Import(name="customAuthenticationFactors")
      private final @Nullable Output<List<String>> customAuthenticationFactors;

    public Output<List<String>> customAuthenticationFactors() {
        return this.customAuthenticationFactors == null ? Codegen.empty() : this.customAuthenticationFactors;
    }

    /**
     * Defines the relationship of the grant controls. Possible values are: `AND`, `OR`.
     * 
     */
    @Import(name="operator", required=true)
      private final Output<String> operator;

    public Output<String> operator() {
        return this.operator;
    }

    /**
     * List of terms of use IDs required by the policy.
     * 
     */
    @Import(name="termsOfUses")
      private final @Nullable Output<List<String>> termsOfUses;

    public Output<List<String>> termsOfUses() {
        return this.termsOfUses == null ? Codegen.empty() : this.termsOfUses;
    }

    public ConditionalAccessPolicyGrantControlsArgs(
        Output<List<String>> builtInControls,
        @Nullable Output<List<String>> customAuthenticationFactors,
        Output<String> operator,
        @Nullable Output<List<String>> termsOfUses) {
        this.builtInControls = Objects.requireNonNull(builtInControls, "expected parameter 'builtInControls' to be non-null");
        this.customAuthenticationFactors = customAuthenticationFactors;
        this.operator = Objects.requireNonNull(operator, "expected parameter 'operator' to be non-null");
        this.termsOfUses = termsOfUses;
    }

    private ConditionalAccessPolicyGrantControlsArgs() {
        this.builtInControls = Codegen.empty();
        this.customAuthenticationFactors = Codegen.empty();
        this.operator = Codegen.empty();
        this.termsOfUses = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicyGrantControlsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> builtInControls;
        private @Nullable Output<List<String>> customAuthenticationFactors;
        private Output<String> operator;
        private @Nullable Output<List<String>> termsOfUses;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalAccessPolicyGrantControlsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.builtInControls = defaults.builtInControls;
    	      this.customAuthenticationFactors = defaults.customAuthenticationFactors;
    	      this.operator = defaults.operator;
    	      this.termsOfUses = defaults.termsOfUses;
        }

        public Builder builtInControls(Output<List<String>> builtInControls) {
            this.builtInControls = Objects.requireNonNull(builtInControls);
            return this;
        }
        public Builder builtInControls(List<String> builtInControls) {
            this.builtInControls = Output.of(Objects.requireNonNull(builtInControls));
            return this;
        }
        public Builder builtInControls(String... builtInControls) {
            return builtInControls(List.of(builtInControls));
        }
        public Builder customAuthenticationFactors(@Nullable Output<List<String>> customAuthenticationFactors) {
            this.customAuthenticationFactors = customAuthenticationFactors;
            return this;
        }
        public Builder customAuthenticationFactors(@Nullable List<String> customAuthenticationFactors) {
            this.customAuthenticationFactors = Codegen.ofNullable(customAuthenticationFactors);
            return this;
        }
        public Builder customAuthenticationFactors(String... customAuthenticationFactors) {
            return customAuthenticationFactors(List.of(customAuthenticationFactors));
        }
        public Builder operator(Output<String> operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }
        public Builder operator(String operator) {
            this.operator = Output.of(Objects.requireNonNull(operator));
            return this;
        }
        public Builder termsOfUses(@Nullable Output<List<String>> termsOfUses) {
            this.termsOfUses = termsOfUses;
            return this;
        }
        public Builder termsOfUses(@Nullable List<String> termsOfUses) {
            this.termsOfUses = Codegen.ofNullable(termsOfUses);
            return this;
        }
        public Builder termsOfUses(String... termsOfUses) {
            return termsOfUses(List.of(termsOfUses));
        }        public ConditionalAccessPolicyGrantControlsArgs build() {
            return new ConditionalAccessPolicyGrantControlsArgs(builtInControls, customAuthenticationFactors, operator, termsOfUses);
        }
    }
}
