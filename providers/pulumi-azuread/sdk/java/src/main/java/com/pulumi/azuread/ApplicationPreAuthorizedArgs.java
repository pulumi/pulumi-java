// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ApplicationPreAuthorizedArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationPreAuthorizedArgs Empty = new ApplicationPreAuthorizedArgs();

    /**
     * The object ID of the application for which permissions are being authorized. Changing this field forces a new resource to be created.
     * 
     */
    @Import(name="applicationObjectId", required=true)
      private final Output<String> applicationObjectId;

    public Output<String> applicationObjectId() {
        return this.applicationObjectId;
    }

    /**
     * The application ID of the pre-authorized application
     * 
     */
    @Import(name="authorizedAppId", required=true)
      private final Output<String> authorizedAppId;

    public Output<String> authorizedAppId() {
        return this.authorizedAppId;
    }

    /**
     * A set of permission scope IDs required by the authorized application.
     * 
     */
    @Import(name="permissionIds", required=true)
      private final Output<List<String>> permissionIds;

    public Output<List<String>> permissionIds() {
        return this.permissionIds;
    }

    public ApplicationPreAuthorizedArgs(
        Output<String> applicationObjectId,
        Output<String> authorizedAppId,
        Output<List<String>> permissionIds) {
        this.applicationObjectId = Objects.requireNonNull(applicationObjectId, "expected parameter 'applicationObjectId' to be non-null");
        this.authorizedAppId = Objects.requireNonNull(authorizedAppId, "expected parameter 'authorizedAppId' to be non-null");
        this.permissionIds = Objects.requireNonNull(permissionIds, "expected parameter 'permissionIds' to be non-null");
    }

    private ApplicationPreAuthorizedArgs() {
        this.applicationObjectId = Codegen.empty();
        this.authorizedAppId = Codegen.empty();
        this.permissionIds = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationPreAuthorizedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> applicationObjectId;
        private Output<String> authorizedAppId;
        private Output<List<String>> permissionIds;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationPreAuthorizedArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationObjectId = defaults.applicationObjectId;
    	      this.authorizedAppId = defaults.authorizedAppId;
    	      this.permissionIds = defaults.permissionIds;
        }

        public Builder applicationObjectId(Output<String> applicationObjectId) {
            this.applicationObjectId = Objects.requireNonNull(applicationObjectId);
            return this;
        }
        public Builder applicationObjectId(String applicationObjectId) {
            this.applicationObjectId = Output.of(Objects.requireNonNull(applicationObjectId));
            return this;
        }
        public Builder authorizedAppId(Output<String> authorizedAppId) {
            this.authorizedAppId = Objects.requireNonNull(authorizedAppId);
            return this;
        }
        public Builder authorizedAppId(String authorizedAppId) {
            this.authorizedAppId = Output.of(Objects.requireNonNull(authorizedAppId));
            return this;
        }
        public Builder permissionIds(Output<List<String>> permissionIds) {
            this.permissionIds = Objects.requireNonNull(permissionIds);
            return this;
        }
        public Builder permissionIds(List<String> permissionIds) {
            this.permissionIds = Output.of(Objects.requireNonNull(permissionIds));
            return this;
        }
        public Builder permissionIds(String... permissionIds) {
            return permissionIds(List.of(permissionIds));
        }        public ApplicationPreAuthorizedArgs build() {
            return new ApplicationPreAuthorizedArgs(applicationObjectId, authorizedAppId, permissionIds);
        }
    }
}
