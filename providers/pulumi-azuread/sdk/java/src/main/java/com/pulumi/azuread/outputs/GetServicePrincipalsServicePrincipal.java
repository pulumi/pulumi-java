// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServicePrincipalsServicePrincipal {
    /**
     * @return Whether or not the service principal account is enabled.
     * 
     */
    private final Boolean accountEnabled;
    /**
     * @return Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application.
     * 
     */
    private final Boolean appRoleAssignmentRequired;
    /**
     * @return The application ID (client ID) of the application associated with this service principal.
     * 
     */
    private final String applicationId;
    /**
     * @return The tenant ID where the associated application is registered.
     * 
     */
    private final String applicationTenantId;
    /**
     * @return The display name of the application associated with this service principal.
     * 
     */
    private final String displayName;
    /**
     * @return The object ID of the service principal.
     * 
     */
    private final String objectId;
    /**
     * @return The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps.
     * 
     */
    private final String preferredSingleSignOnMode;
    /**
     * @return The URL where the service exposes SAML metadata for federation.
     * 
     */
    private final String samlMetadataUrl;
    /**
     * @return A list of identifier URI(s), copied over from the associated application.
     * 
     */
    private final List<String> servicePrincipalNames;
    /**
     * @return The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
     * 
     */
    private final String signInAudience;
    /**
     * @return A list of tags applied to the service principal.
     * 
     */
    private final List<String> tags;
    /**
     * @return Identifies whether the service principal represents an application or a managed identity. Possible values include `Application` or `ManagedIdentity`.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetServicePrincipalsServicePrincipal(
        @CustomType.Parameter("accountEnabled") Boolean accountEnabled,
        @CustomType.Parameter("appRoleAssignmentRequired") Boolean appRoleAssignmentRequired,
        @CustomType.Parameter("applicationId") String applicationId,
        @CustomType.Parameter("applicationTenantId") String applicationTenantId,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("objectId") String objectId,
        @CustomType.Parameter("preferredSingleSignOnMode") String preferredSingleSignOnMode,
        @CustomType.Parameter("samlMetadataUrl") String samlMetadataUrl,
        @CustomType.Parameter("servicePrincipalNames") List<String> servicePrincipalNames,
        @CustomType.Parameter("signInAudience") String signInAudience,
        @CustomType.Parameter("tags") List<String> tags,
        @CustomType.Parameter("type") String type) {
        this.accountEnabled = accountEnabled;
        this.appRoleAssignmentRequired = appRoleAssignmentRequired;
        this.applicationId = applicationId;
        this.applicationTenantId = applicationTenantId;
        this.displayName = displayName;
        this.objectId = objectId;
        this.preferredSingleSignOnMode = preferredSingleSignOnMode;
        this.samlMetadataUrl = samlMetadataUrl;
        this.servicePrincipalNames = servicePrincipalNames;
        this.signInAudience = signInAudience;
        this.tags = tags;
        this.type = type;
    }

    /**
     * @return Whether or not the service principal account is enabled.
     * 
     */
    public Boolean accountEnabled() {
        return this.accountEnabled;
    }
    /**
     * @return Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application.
     * 
     */
    public Boolean appRoleAssignmentRequired() {
        return this.appRoleAssignmentRequired;
    }
    /**
     * @return The application ID (client ID) of the application associated with this service principal.
     * 
     */
    public String applicationId() {
        return this.applicationId;
    }
    /**
     * @return The tenant ID where the associated application is registered.
     * 
     */
    public String applicationTenantId() {
        return this.applicationTenantId;
    }
    /**
     * @return The display name of the application associated with this service principal.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The object ID of the service principal.
     * 
     */
    public String objectId() {
        return this.objectId;
    }
    /**
     * @return The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps.
     * 
     */
    public String preferredSingleSignOnMode() {
        return this.preferredSingleSignOnMode;
    }
    /**
     * @return The URL where the service exposes SAML metadata for federation.
     * 
     */
    public String samlMetadataUrl() {
        return this.samlMetadataUrl;
    }
    /**
     * @return A list of identifier URI(s), copied over from the associated application.
     * 
     */
    public List<String> servicePrincipalNames() {
        return this.servicePrincipalNames;
    }
    /**
     * @return The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
     * 
     */
    public String signInAudience() {
        return this.signInAudience;
    }
    /**
     * @return A list of tags applied to the service principal.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Identifies whether the service principal represents an application or a managed identity. Possible values include `Application` or `ManagedIdentity`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServicePrincipalsServicePrincipal defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean accountEnabled;
        private Boolean appRoleAssignmentRequired;
        private String applicationId;
        private String applicationTenantId;
        private String displayName;
        private String objectId;
        private String preferredSingleSignOnMode;
        private String samlMetadataUrl;
        private List<String> servicePrincipalNames;
        private String signInAudience;
        private List<String> tags;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServicePrincipalsServicePrincipal defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountEnabled = defaults.accountEnabled;
    	      this.appRoleAssignmentRequired = defaults.appRoleAssignmentRequired;
    	      this.applicationId = defaults.applicationId;
    	      this.applicationTenantId = defaults.applicationTenantId;
    	      this.displayName = defaults.displayName;
    	      this.objectId = defaults.objectId;
    	      this.preferredSingleSignOnMode = defaults.preferredSingleSignOnMode;
    	      this.samlMetadataUrl = defaults.samlMetadataUrl;
    	      this.servicePrincipalNames = defaults.servicePrincipalNames;
    	      this.signInAudience = defaults.signInAudience;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder accountEnabled(Boolean accountEnabled) {
            this.accountEnabled = Objects.requireNonNull(accountEnabled);
            return this;
        }
        public Builder appRoleAssignmentRequired(Boolean appRoleAssignmentRequired) {
            this.appRoleAssignmentRequired = Objects.requireNonNull(appRoleAssignmentRequired);
            return this;
        }
        public Builder applicationId(String applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }
        public Builder applicationTenantId(String applicationTenantId) {
            this.applicationTenantId = Objects.requireNonNull(applicationTenantId);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder objectId(String objectId) {
            this.objectId = Objects.requireNonNull(objectId);
            return this;
        }
        public Builder preferredSingleSignOnMode(String preferredSingleSignOnMode) {
            this.preferredSingleSignOnMode = Objects.requireNonNull(preferredSingleSignOnMode);
            return this;
        }
        public Builder samlMetadataUrl(String samlMetadataUrl) {
            this.samlMetadataUrl = Objects.requireNonNull(samlMetadataUrl);
            return this;
        }
        public Builder servicePrincipalNames(List<String> servicePrincipalNames) {
            this.servicePrincipalNames = Objects.requireNonNull(servicePrincipalNames);
            return this;
        }
        public Builder servicePrincipalNames(String... servicePrincipalNames) {
            return servicePrincipalNames(List.of(servicePrincipalNames));
        }
        public Builder signInAudience(String signInAudience) {
            this.signInAudience = Objects.requireNonNull(signInAudience);
            return this;
        }
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetServicePrincipalsServicePrincipal build() {
            return new GetServicePrincipalsServicePrincipal(accountEnabled, appRoleAssignmentRequired, applicationId, applicationTenantId, displayName, objectId, preferredSingleSignOnMode, samlMetadataUrl, servicePrincipalNames, signInAudience, tags, type);
        }
    }
}
