// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicyGrantControlsArgs;
import com.pulumi.azuread.inputs.ConditionalAccessPolicySessionControlsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyArgs Empty = new ConditionalAccessPolicyArgs();

    /**
     * A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.
     * 
     */
    @Import(name="conditions", required=true)
      private final Output<ConditionalAccessPolicyConditionsArgs> conditions;

    public Output<ConditionalAccessPolicyConditionsArgs> conditions() {
        return this.conditions;
    }

    /**
     * The friendly name for this Conditional Access Policy.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.
     * 
     */
    @Import(name="grantControls", required=true)
      private final Output<ConditionalAccessPolicyGrantControlsArgs> grantControls;

    public Output<ConditionalAccessPolicyGrantControlsArgs> grantControls() {
        return this.grantControls;
    }

    /**
     * A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.
     * 
     */
    @Import(name="sessionControls")
      private final @Nullable Output<ConditionalAccessPolicySessionControlsArgs> sessionControls;

    public Output<ConditionalAccessPolicySessionControlsArgs> sessionControls() {
        return this.sessionControls == null ? Codegen.empty() : this.sessionControls;
    }

    /**
     * Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`
     * 
     */
    @Import(name="state", required=true)
      private final Output<String> state;

    public Output<String> state() {
        return this.state;
    }

    public ConditionalAccessPolicyArgs(
        Output<ConditionalAccessPolicyConditionsArgs> conditions,
        Output<String> displayName,
        Output<ConditionalAccessPolicyGrantControlsArgs> grantControls,
        @Nullable Output<ConditionalAccessPolicySessionControlsArgs> sessionControls,
        Output<String> state) {
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.grantControls = Objects.requireNonNull(grantControls, "expected parameter 'grantControls' to be non-null");
        this.sessionControls = sessionControls;
        this.state = Objects.requireNonNull(state, "expected parameter 'state' to be non-null");
    }

    private ConditionalAccessPolicyArgs() {
        this.conditions = Codegen.empty();
        this.displayName = Codegen.empty();
        this.grantControls = Codegen.empty();
        this.sessionControls = Codegen.empty();
        this.state = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ConditionalAccessPolicyConditionsArgs> conditions;
        private Output<String> displayName;
        private Output<ConditionalAccessPolicyGrantControlsArgs> grantControls;
        private @Nullable Output<ConditionalAccessPolicySessionControlsArgs> sessionControls;
        private Output<String> state;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalAccessPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.displayName = defaults.displayName;
    	      this.grantControls = defaults.grantControls;
    	      this.sessionControls = defaults.sessionControls;
    	      this.state = defaults.state;
        }

        public Builder conditions(Output<ConditionalAccessPolicyConditionsArgs> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        public Builder conditions(ConditionalAccessPolicyConditionsArgs conditions) {
            this.conditions = Output.of(Objects.requireNonNull(conditions));
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder grantControls(Output<ConditionalAccessPolicyGrantControlsArgs> grantControls) {
            this.grantControls = Objects.requireNonNull(grantControls);
            return this;
        }
        public Builder grantControls(ConditionalAccessPolicyGrantControlsArgs grantControls) {
            this.grantControls = Output.of(Objects.requireNonNull(grantControls));
            return this;
        }
        public Builder sessionControls(@Nullable Output<ConditionalAccessPolicySessionControlsArgs> sessionControls) {
            this.sessionControls = sessionControls;
            return this;
        }
        public Builder sessionControls(@Nullable ConditionalAccessPolicySessionControlsArgs sessionControls) {
            this.sessionControls = Codegen.ofNullable(sessionControls);
            return this;
        }
        public Builder state(Output<String> state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder state(String state) {
            this.state = Output.of(Objects.requireNonNull(state));
            return this;
        }        public ConditionalAccessPolicyArgs build() {
            return new ConditionalAccessPolicyArgs(conditions, displayName, grantControls, sessionControls, state);
        }
    }
}
