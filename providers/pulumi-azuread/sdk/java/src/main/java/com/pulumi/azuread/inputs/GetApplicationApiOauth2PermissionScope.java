// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetApplicationApiOauth2PermissionScope extends com.pulumi.resources.InvokeArgs {

    public static final GetApplicationApiOauth2PermissionScope Empty = new GetApplicationApiOauth2PermissionScope();

    /**
     * Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
     * 
     */
    @Import(name="adminConsentDescription", required=true)
      private final String adminConsentDescription;

    public String adminConsentDescription() {
        return this.adminConsentDescription;
    }

    /**
     * Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
     * 
     */
    @Import(name="adminConsentDisplayName", required=true)
      private final String adminConsentDisplayName;

    public String adminConsentDisplayName() {
        return this.adminConsentDisplayName;
    }

    /**
     * Determines if the app role is enabled.
     * 
     */
    @Import(name="enabled", required=true)
      private final Boolean enabled;

    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * The unique identifier for an app role or OAuth2 permission scope published by the resource application.
     * 
     */
    @Import(name="id", required=true)
      private final String id;

    public String id() {
        return this.id;
    }

    /**
     * Specifies whether the `id` property references an app role or an OAuth2 permission scope. Possible values are `Role` or `Scope`.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    /**
     * Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
     * 
     */
    @Import(name="userConsentDescription", required=true)
      private final String userConsentDescription;

    public String userConsentDescription() {
        return this.userConsentDescription;
    }

    /**
     * Display name for the delegated permission that appears in the end user consent experience.
     * 
     */
    @Import(name="userConsentDisplayName", required=true)
      private final String userConsentDisplayName;

    public String userConsentDisplayName() {
        return this.userConsentDisplayName;
    }

    /**
     * The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
     * 
     */
    @Import(name="value", required=true)
      private final String value;

    public String value() {
        return this.value;
    }

    public GetApplicationApiOauth2PermissionScope(
        String adminConsentDescription,
        String adminConsentDisplayName,
        Boolean enabled,
        String id,
        String type,
        String userConsentDescription,
        String userConsentDisplayName,
        String value) {
        this.adminConsentDescription = Objects.requireNonNull(adminConsentDescription, "expected parameter 'adminConsentDescription' to be non-null");
        this.adminConsentDisplayName = Objects.requireNonNull(adminConsentDisplayName, "expected parameter 'adminConsentDisplayName' to be non-null");
        this.enabled = Objects.requireNonNull(enabled, "expected parameter 'enabled' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userConsentDescription = Objects.requireNonNull(userConsentDescription, "expected parameter 'userConsentDescription' to be non-null");
        this.userConsentDisplayName = Objects.requireNonNull(userConsentDisplayName, "expected parameter 'userConsentDisplayName' to be non-null");
        this.value = Objects.requireNonNull(value, "expected parameter 'value' to be non-null");
    }

    private GetApplicationApiOauth2PermissionScope() {
        this.adminConsentDescription = null;
        this.adminConsentDisplayName = null;
        this.enabled = null;
        this.id = null;
        this.type = null;
        this.userConsentDescription = null;
        this.userConsentDisplayName = null;
        this.value = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationApiOauth2PermissionScope defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String adminConsentDescription;
        private String adminConsentDisplayName;
        private Boolean enabled;
        private String id;
        private String type;
        private String userConsentDescription;
        private String userConsentDisplayName;
        private String value;

        public Builder() {
    	      // Empty
        }

        public Builder(GetApplicationApiOauth2PermissionScope defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminConsentDescription = defaults.adminConsentDescription;
    	      this.adminConsentDisplayName = defaults.adminConsentDisplayName;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.type = defaults.type;
    	      this.userConsentDescription = defaults.userConsentDescription;
    	      this.userConsentDisplayName = defaults.userConsentDisplayName;
    	      this.value = defaults.value;
        }

        public Builder adminConsentDescription(String adminConsentDescription) {
            this.adminConsentDescription = Objects.requireNonNull(adminConsentDescription);
            return this;
        }
        public Builder adminConsentDisplayName(String adminConsentDisplayName) {
            this.adminConsentDisplayName = Objects.requireNonNull(adminConsentDisplayName);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder userConsentDescription(String userConsentDescription) {
            this.userConsentDescription = Objects.requireNonNull(userConsentDescription);
            return this;
        }
        public Builder userConsentDisplayName(String userConsentDisplayName) {
            this.userConsentDisplayName = Objects.requireNonNull(userConsentDisplayName);
            return this;
        }
        public Builder value(String value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }        public GetApplicationApiOauth2PermissionScope build() {
            return new GetApplicationApiOauth2PermissionScope(adminConsentDescription, adminConsentDisplayName, enabled, id, type, userConsentDescription, userConsentDisplayName, value);
        }
    }
}
