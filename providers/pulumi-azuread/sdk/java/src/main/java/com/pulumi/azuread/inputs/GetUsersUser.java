// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetUsersUser extends com.pulumi.resources.InvokeArgs {

    public static final GetUsersUser Empty = new GetUsersUser();

    /**
     * Whether or not the account is enabled.
     * 
     */
    @Import(name="accountEnabled", required=true)
      private final Boolean accountEnabled;

    public Boolean accountEnabled() {
        return this.accountEnabled;
    }

    /**
     * The display name of the user.
     * 
     */
    @Import(name="displayName", required=true)
      private final String displayName;

    public String displayName() {
        return this.displayName;
    }

    /**
     * The primary email address of the user.
     * 
     */
    @Import(name="mail", required=true)
      private final String mail;

    public String mail() {
        return this.mail;
    }

    /**
     * The email alias of the user.
     * 
     */
    @Import(name="mailNickname", required=true)
      private final String mailNickname;

    public String mailNickname() {
        return this.mailNickname;
    }

    /**
     * The object ID of the user.
     * 
     */
    @Import(name="objectId", required=true)
      private final String objectId;

    public String objectId() {
        return this.objectId;
    }

    /**
     * The value used to associate an on-premises Active Directory user account with their Azure AD user object.
     * 
     */
    @Import(name="onpremisesImmutableId", required=true)
      private final String onpremisesImmutableId;

    public String onpremisesImmutableId() {
        return this.onpremisesImmutableId;
    }

    /**
     * The on-premise SAM account name of the user.
     * 
     */
    @Import(name="onpremisesSamAccountName", required=true)
      private final String onpremisesSamAccountName;

    public String onpremisesSamAccountName() {
        return this.onpremisesSamAccountName;
    }

    /**
     * The on-premise user principal name of the user.
     * 
     */
    @Import(name="onpremisesUserPrincipalName", required=true)
      private final String onpremisesUserPrincipalName;

    public String onpremisesUserPrincipalName() {
        return this.onpremisesUserPrincipalName;
    }

    /**
     * The usage location of the user.
     * 
     */
    @Import(name="usageLocation", required=true)
      private final String usageLocation;

    public String usageLocation() {
        return this.usageLocation;
    }

    /**
     * The user principal name (UPN) of the user.
     * 
     */
    @Import(name="userPrincipalName", required=true)
      private final String userPrincipalName;

    public String userPrincipalName() {
        return this.userPrincipalName;
    }

    public GetUsersUser(
        Boolean accountEnabled,
        String displayName,
        String mail,
        String mailNickname,
        String objectId,
        String onpremisesImmutableId,
        String onpremisesSamAccountName,
        String onpremisesUserPrincipalName,
        String usageLocation,
        String userPrincipalName) {
        this.accountEnabled = Objects.requireNonNull(accountEnabled, "expected parameter 'accountEnabled' to be non-null");
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.mail = Objects.requireNonNull(mail, "expected parameter 'mail' to be non-null");
        this.mailNickname = Objects.requireNonNull(mailNickname, "expected parameter 'mailNickname' to be non-null");
        this.objectId = Objects.requireNonNull(objectId, "expected parameter 'objectId' to be non-null");
        this.onpremisesImmutableId = Objects.requireNonNull(onpremisesImmutableId, "expected parameter 'onpremisesImmutableId' to be non-null");
        this.onpremisesSamAccountName = Objects.requireNonNull(onpremisesSamAccountName, "expected parameter 'onpremisesSamAccountName' to be non-null");
        this.onpremisesUserPrincipalName = Objects.requireNonNull(onpremisesUserPrincipalName, "expected parameter 'onpremisesUserPrincipalName' to be non-null");
        this.usageLocation = Objects.requireNonNull(usageLocation, "expected parameter 'usageLocation' to be non-null");
        this.userPrincipalName = Objects.requireNonNull(userPrincipalName, "expected parameter 'userPrincipalName' to be non-null");
    }

    private GetUsersUser() {
        this.accountEnabled = null;
        this.displayName = null;
        this.mail = null;
        this.mailNickname = null;
        this.objectId = null;
        this.onpremisesImmutableId = null;
        this.onpremisesSamAccountName = null;
        this.onpremisesUserPrincipalName = null;
        this.usageLocation = null;
        this.userPrincipalName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersUser defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean accountEnabled;
        private String displayName;
        private String mail;
        private String mailNickname;
        private String objectId;
        private String onpremisesImmutableId;
        private String onpremisesSamAccountName;
        private String onpremisesUserPrincipalName;
        private String usageLocation;
        private String userPrincipalName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountEnabled = defaults.accountEnabled;
    	      this.displayName = defaults.displayName;
    	      this.mail = defaults.mail;
    	      this.mailNickname = defaults.mailNickname;
    	      this.objectId = defaults.objectId;
    	      this.onpremisesImmutableId = defaults.onpremisesImmutableId;
    	      this.onpremisesSamAccountName = defaults.onpremisesSamAccountName;
    	      this.onpremisesUserPrincipalName = defaults.onpremisesUserPrincipalName;
    	      this.usageLocation = defaults.usageLocation;
    	      this.userPrincipalName = defaults.userPrincipalName;
        }

        public Builder accountEnabled(Boolean accountEnabled) {
            this.accountEnabled = Objects.requireNonNull(accountEnabled);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder mail(String mail) {
            this.mail = Objects.requireNonNull(mail);
            return this;
        }
        public Builder mailNickname(String mailNickname) {
            this.mailNickname = Objects.requireNonNull(mailNickname);
            return this;
        }
        public Builder objectId(String objectId) {
            this.objectId = Objects.requireNonNull(objectId);
            return this;
        }
        public Builder onpremisesImmutableId(String onpremisesImmutableId) {
            this.onpremisesImmutableId = Objects.requireNonNull(onpremisesImmutableId);
            return this;
        }
        public Builder onpremisesSamAccountName(String onpremisesSamAccountName) {
            this.onpremisesSamAccountName = Objects.requireNonNull(onpremisesSamAccountName);
            return this;
        }
        public Builder onpremisesUserPrincipalName(String onpremisesUserPrincipalName) {
            this.onpremisesUserPrincipalName = Objects.requireNonNull(onpremisesUserPrincipalName);
            return this;
        }
        public Builder usageLocation(String usageLocation) {
            this.usageLocation = Objects.requireNonNull(usageLocation);
            return this;
        }
        public Builder userPrincipalName(String userPrincipalName) {
            this.userPrincipalName = Objects.requireNonNull(userPrincipalName);
            return this;
        }        public GetUsersUser build() {
            return new GetUsersUser(accountEnabled, displayName, mail, mailNickname, objectId, onpremisesImmutableId, onpremisesSamAccountName, onpremisesUserPrincipalName, usageLocation, userPrincipalName);
        }
    }
}
