// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.CustomDirectoryRolePermissionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomDirectoryRoleState extends com.pulumi.resources.ResourceArgs {

    public static final CustomDirectoryRoleState Empty = new CustomDirectoryRoleState();

    /**
     * The description of the custom directory role.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the custom directory role.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the custom directory role.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the custom directory role.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Indicates whether the role is enabled for assignment.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates whether the role is enabled for assignment.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The object ID of the custom directory role.
     * 
     */
    @Import(name="objectId")
    private @Nullable Output<String> objectId;

    /**
     * @return The object ID of the custom directory role.
     * 
     */
    public Optional<Output<String>> objectId() {
        return Optional.ofNullable(this.objectId);
    }

    /**
     * A collection of `permissions` blocks as documented below.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<CustomDirectoryRolePermissionArgs>> permissions;

    /**
     * @return A collection of `permissions` blocks as documented below.
     * 
     */
    public Optional<Output<List<CustomDirectoryRolePermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Custom template identifier that is typically used if one needs an identifier to be the same across different directories. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="templateId")
    private @Nullable Output<String> templateId;

    /**
     * @return Custom template identifier that is typically used if one needs an identifier to be the same across different directories. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> templateId() {
        return Optional.ofNullable(this.templateId);
    }

    /**
     * - The version of the role definition. This can be any arbitrary string between 1-128 characters.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return - The version of the role definition. This can be any arbitrary string between 1-128 characters.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private CustomDirectoryRoleState() {}

    private CustomDirectoryRoleState(CustomDirectoryRoleState $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.objectId = $.objectId;
        this.permissions = $.permissions;
        this.templateId = $.templateId;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDirectoryRoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDirectoryRoleState $;

        public Builder() {
            $ = new CustomDirectoryRoleState();
        }

        public Builder(CustomDirectoryRoleState defaults) {
            $ = new CustomDirectoryRoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the custom directory role.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the custom directory role.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the custom directory role.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the custom directory role.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enabled Indicates whether the role is enabled for assignment.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether the role is enabled for assignment.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param objectId The object ID of the custom directory role.
         * 
         * @return builder
         * 
         */
        public Builder objectId(@Nullable Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId The object ID of the custom directory role.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param permissions A collection of `permissions` blocks as documented below.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<CustomDirectoryRolePermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions A collection of `permissions` blocks as documented below.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<CustomDirectoryRolePermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions A collection of `permissions` blocks as documented below.
         * 
         * @return builder
         * 
         */
        public Builder permissions(CustomDirectoryRolePermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param templateId Custom template identifier that is typically used if one needs an identifier to be the same across different directories. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder templateId(@Nullable Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId Custom template identifier that is typically used if one needs an identifier to be the same across different directories. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        /**
         * @param version - The version of the role definition. This can be any arbitrary string between 1-128 characters.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version - The version of the role definition. This can be any arbitrary string between 1-128 characters.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public CustomDirectoryRoleState build() {
            return $;
        }
    }

}
