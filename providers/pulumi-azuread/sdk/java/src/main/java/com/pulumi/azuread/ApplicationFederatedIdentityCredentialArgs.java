// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationFederatedIdentityCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationFederatedIdentityCredentialArgs Empty = new ApplicationFederatedIdentityCredentialArgs();

    /**
     * The object ID of the application for which this federated identity credential should be created. Changing this field forces a new resource to be created.
     * 
     */
    @Import(name="applicationObjectId", required=true)
    private Output<String> applicationObjectId;

    /**
     * @return The object ID of the application for which this federated identity credential should be created. Changing this field forces a new resource to be created.
     * 
     */
    public Output<String> applicationObjectId() {
        return this.applicationObjectId;
    }

    /**
     * List of audiences that can appear in the external token. This specifies what should be accepted in the `aud` claim of incoming tokens.
     * 
     */
    @Import(name="audiences", required=true)
    private Output<List<String>> audiences;

    /**
     * @return List of audiences that can appear in the external token. This specifies what should be accepted in the `aud` claim of incoming tokens.
     * 
     */
    public Output<List<String>> audiences() {
        return this.audiences;
    }

    /**
     * A description for the federated identity credential.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the federated identity credential.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A unique display name for the federated identity credential. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return A unique display name for the federated identity credential. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The URL of the external identity provider, which must match the issuer claim of the external token being exchanged. The combination of the values of issuer and subject must be unique on the app.
     * 
     */
    @Import(name="issuer", required=true)
    private Output<String> issuer;

    /**
     * @return The URL of the external identity provider, which must match the issuer claim of the external token being exchanged. The combination of the values of issuer and subject must be unique on the app.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }

    /**
     * The identifier of the external software workload within the external identity provider. The combination of issuer and subject must be unique on the app.
     * 
     */
    @Import(name="subject", required=true)
    private Output<String> subject;

    /**
     * @return The identifier of the external software workload within the external identity provider. The combination of issuer and subject must be unique on the app.
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }

    private ApplicationFederatedIdentityCredentialArgs() {}

    private ApplicationFederatedIdentityCredentialArgs(ApplicationFederatedIdentityCredentialArgs $) {
        this.applicationObjectId = $.applicationObjectId;
        this.audiences = $.audiences;
        this.description = $.description;
        this.displayName = $.displayName;
        this.issuer = $.issuer;
        this.subject = $.subject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationFederatedIdentityCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationFederatedIdentityCredentialArgs $;

        public Builder() {
            $ = new ApplicationFederatedIdentityCredentialArgs();
        }

        public Builder(ApplicationFederatedIdentityCredentialArgs defaults) {
            $ = new ApplicationFederatedIdentityCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationObjectId The object ID of the application for which this federated identity credential should be created. Changing this field forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationObjectId(Output<String> applicationObjectId) {
            $.applicationObjectId = applicationObjectId;
            return this;
        }

        /**
         * @param applicationObjectId The object ID of the application for which this federated identity credential should be created. Changing this field forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationObjectId(String applicationObjectId) {
            return applicationObjectId(Output.of(applicationObjectId));
        }

        /**
         * @param audiences List of audiences that can appear in the external token. This specifies what should be accepted in the `aud` claim of incoming tokens.
         * 
         * @return builder
         * 
         */
        public Builder audiences(Output<List<String>> audiences) {
            $.audiences = audiences;
            return this;
        }

        /**
         * @param audiences List of audiences that can appear in the external token. This specifies what should be accepted in the `aud` claim of incoming tokens.
         * 
         * @return builder
         * 
         */
        public Builder audiences(List<String> audiences) {
            return audiences(Output.of(audiences));
        }

        /**
         * @param audiences List of audiences that can appear in the external token. This specifies what should be accepted in the `aud` claim of incoming tokens.
         * 
         * @return builder
         * 
         */
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }

        /**
         * @param description A description for the federated identity credential.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the federated identity credential.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName A unique display name for the federated identity credential. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A unique display name for the federated identity credential. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param issuer The URL of the external identity provider, which must match the issuer claim of the external token being exchanged. The combination of the values of issuer and subject must be unique on the app.
         * 
         * @return builder
         * 
         */
        public Builder issuer(Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The URL of the external identity provider, which must match the issuer claim of the external token being exchanged. The combination of the values of issuer and subject must be unique on the app.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param subject The identifier of the external software workload within the external identity provider. The combination of issuer and subject must be unique on the app.
         * 
         * @return builder
         * 
         */
        public Builder subject(Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The identifier of the external software workload within the external identity provider. The combination of issuer and subject must be unique on the app.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        public ApplicationFederatedIdentityCredentialArgs build() {
            $.applicationObjectId = Objects.requireNonNull($.applicationObjectId, "expected parameter 'applicationObjectId' to be non-null");
            $.audiences = Objects.requireNonNull($.audiences, "expected parameter 'audiences' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.issuer = Objects.requireNonNull($.issuer, "expected parameter 'issuer' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            return $;
        }
    }

}
