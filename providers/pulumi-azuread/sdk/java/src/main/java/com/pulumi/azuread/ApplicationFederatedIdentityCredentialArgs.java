// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationFederatedIdentityCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationFederatedIdentityCredentialArgs Empty = new ApplicationFederatedIdentityCredentialArgs();

    /**
     * The object ID of the application for which this federated identity credential should be created. Changing this field forces a new resource to be created.
     * 
     */
    @Import(name="applicationObjectId", required=true)
      private final Output<String> applicationObjectId;

    public Output<String> applicationObjectId() {
        return this.applicationObjectId;
    }

    /**
     * List of audiences that can appear in the external token. This specifies what should be accepted in the `aud` claim of incoming tokens.
     * 
     */
    @Import(name="audiences", required=true)
      private final Output<List<String>> audiences;

    public Output<List<String>> audiences() {
        return this.audiences;
    }

    /**
     * A description for the federated identity credential.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * A unique display name for the federated identity credential. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The URL of the external identity provider, which must match the issuer claim of the external token being exchanged. The combination of the values of issuer and subject must be unique on the app.
     * 
     */
    @Import(name="issuer", required=true)
      private final Output<String> issuer;

    public Output<String> issuer() {
        return this.issuer;
    }

    /**
     * The identifier of the external software workload within the external identity provider. The combination of issuer and subject must be unique on the app.
     * 
     */
    @Import(name="subject", required=true)
      private final Output<String> subject;

    public Output<String> subject() {
        return this.subject;
    }

    public ApplicationFederatedIdentityCredentialArgs(
        Output<String> applicationObjectId,
        Output<List<String>> audiences,
        @Nullable Output<String> description,
        Output<String> displayName,
        Output<String> issuer,
        Output<String> subject) {
        this.applicationObjectId = Objects.requireNonNull(applicationObjectId, "expected parameter 'applicationObjectId' to be non-null");
        this.audiences = Objects.requireNonNull(audiences, "expected parameter 'audiences' to be non-null");
        this.description = description;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.issuer = Objects.requireNonNull(issuer, "expected parameter 'issuer' to be non-null");
        this.subject = Objects.requireNonNull(subject, "expected parameter 'subject' to be non-null");
    }

    private ApplicationFederatedIdentityCredentialArgs() {
        this.applicationObjectId = Codegen.empty();
        this.audiences = Codegen.empty();
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.issuer = Codegen.empty();
        this.subject = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationFederatedIdentityCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> applicationObjectId;
        private Output<List<String>> audiences;
        private @Nullable Output<String> description;
        private Output<String> displayName;
        private Output<String> issuer;
        private Output<String> subject;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationFederatedIdentityCredentialArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationObjectId = defaults.applicationObjectId;
    	      this.audiences = defaults.audiences;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.issuer = defaults.issuer;
    	      this.subject = defaults.subject;
        }

        public Builder applicationObjectId(Output<String> applicationObjectId) {
            this.applicationObjectId = Objects.requireNonNull(applicationObjectId);
            return this;
        }
        public Builder applicationObjectId(String applicationObjectId) {
            this.applicationObjectId = Output.of(Objects.requireNonNull(applicationObjectId));
            return this;
        }
        public Builder audiences(Output<List<String>> audiences) {
            this.audiences = Objects.requireNonNull(audiences);
            return this;
        }
        public Builder audiences(List<String> audiences) {
            this.audiences = Output.of(Objects.requireNonNull(audiences));
            return this;
        }
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder issuer(Output<String> issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        public Builder issuer(String issuer) {
            this.issuer = Output.of(Objects.requireNonNull(issuer));
            return this;
        }
        public Builder subject(Output<String> subject) {
            this.subject = Objects.requireNonNull(subject);
            return this;
        }
        public Builder subject(String subject) {
            this.subject = Output.of(Objects.requireNonNull(subject));
            return this;
        }        public ApplicationFederatedIdentityCredentialArgs build() {
            return new ApplicationFederatedIdentityCredentialArgs(applicationObjectId, audiences, description, displayName, issuer, subject);
        }
    }
}
