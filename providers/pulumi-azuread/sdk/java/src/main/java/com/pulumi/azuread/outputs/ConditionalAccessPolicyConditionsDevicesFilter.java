// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ConditionalAccessPolicyConditionsDevicesFilter {
    /**
     * @return Whether to include in, or exclude from, matching devices from the policy. Supported values are `include` or `exclude`.
     * 
     */
    private final String mode;
    /**
     * @return Condition filter to match devices. For more information, see [official documentation](https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-condition-filters-for-devices#supported-operators-and-device-properties-for-filters).
     * 
     */
    private final String rule;

    @CustomType.Constructor
    private ConditionalAccessPolicyConditionsDevicesFilter(
        @CustomType.Parameter("mode") String mode,
        @CustomType.Parameter("rule") String rule) {
        this.mode = mode;
        this.rule = rule;
    }

    /**
     * @return Whether to include in, or exclude from, matching devices from the policy. Supported values are `include` or `exclude`.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return Condition filter to match devices. For more information, see [official documentation](https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-condition-filters-for-devices#supported-operators-and-device-properties-for-filters).
     * 
     */
    public String rule() {
        return this.rule;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicyConditionsDevicesFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String mode;
        private String rule;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalAccessPolicyConditionsDevicesFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mode = defaults.mode;
    	      this.rule = defaults.rule;
        }

        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        public Builder rule(String rule) {
            this.rule = Objects.requireNonNull(rule);
            return this;
        }        public ConditionalAccessPolicyConditionsDevicesFilter build() {
            return new ConditionalAccessPolicyConditionsDevicesFilter(mode, rule);
        }
    }
}
