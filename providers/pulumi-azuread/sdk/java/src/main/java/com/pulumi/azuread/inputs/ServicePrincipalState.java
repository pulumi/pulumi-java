// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.ServicePrincipalAppRoleArgs;
import com.pulumi.azuread.inputs.ServicePrincipalFeatureArgs;
import com.pulumi.azuread.inputs.ServicePrincipalFeatureTagArgs;
import com.pulumi.azuread.inputs.ServicePrincipalOauth2PermissionScopeArgs;
import com.pulumi.azuread.inputs.ServicePrincipalSamlSingleSignOnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServicePrincipalState extends com.pulumi.resources.ResourceArgs {

    public static final ServicePrincipalState Empty = new ServicePrincipalState();

    /**
     * Whether or not the service principal account is enabled. Defaults to `true`.
     * 
     */
    @Import(name="accountEnabled")
    private @Nullable Output<Boolean> accountEnabled;

    /**
     * @return Whether or not the service principal account is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> accountEnabled() {
        return Optional.ofNullable(this.accountEnabled);
    }

    /**
     * A set of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.
     * 
     */
    @Import(name="alternativeNames")
    private @Nullable Output<List<String>> alternativeNames;

    /**
     * @return A set of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.
     * 
     */
    public Optional<Output<List<String>>> alternativeNames() {
        return Optional.ofNullable(this.alternativeNames);
    }

    /**
     * Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
     * 
     */
    @Import(name="appRoleAssignmentRequired")
    private @Nullable Output<Boolean> appRoleAssignmentRequired;

    /**
     * @return Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> appRoleAssignmentRequired() {
        return Optional.ofNullable(this.appRoleAssignmentRequired);
    }

    /**
     * A mapping of app role values to app role IDs, as published by the associated application, intended to be useful when referencing app roles in other resources in your configuration.
     * 
     */
    @Import(name="appRoleIds")
    private @Nullable Output<Map<String,String>> appRoleIds;

    /**
     * @return A mapping of app role values to app role IDs, as published by the associated application, intended to be useful when referencing app roles in other resources in your configuration.
     * 
     */
    public Optional<Output<Map<String,String>>> appRoleIds() {
        return Optional.ofNullable(this.appRoleIds);
    }

    /**
     * A list of app roles published by the associated application, as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
     * 
     */
    @Import(name="appRoles")
    private @Nullable Output<List<ServicePrincipalAppRoleArgs>> appRoles;

    /**
     * @return A list of app roles published by the associated application, as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
     * 
     */
    public Optional<Output<List<ServicePrincipalAppRoleArgs>>> appRoles() {
        return Optional.ofNullable(this.appRoles);
    }

    /**
     * The application ID (client ID) of the application for which to create a service principal.
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return The application ID (client ID) of the application for which to create a service principal.
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * The tenant ID where the associated application is registered.
     * 
     */
    @Import(name="applicationTenantId")
    private @Nullable Output<String> applicationTenantId;

    /**
     * @return The tenant ID where the associated application is registered.
     * 
     */
    public Optional<Output<String>> applicationTenantId() {
        return Optional.ofNullable(this.applicationTenantId);
    }

    /**
     * A description of the service principal provided for internal end-users.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the service principal provided for internal end-users.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Display name for the app role that appears during app role assignment and in consent experiences.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name for the app role that appears during app role assignment and in consent experiences.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A `feature_tags` block as described below. Cannot be used together with the `tags` property.
     * 
     */
    @Import(name="featureTags")
    private @Nullable Output<List<ServicePrincipalFeatureTagArgs>> featureTags;

    /**
     * @return A `feature_tags` block as described below. Cannot be used together with the `tags` property.
     * 
     */
    public Optional<Output<List<ServicePrincipalFeatureTagArgs>>> featureTags() {
        return Optional.ofNullable(this.featureTags);
    }

    /**
     * Block of features to configure for this service principal using tags
     * 
     * @deprecated
     * This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
     * 
     */
    @Deprecated /* This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider */
    @Import(name="features")
    private @Nullable Output<List<ServicePrincipalFeatureArgs>> features;

    /**
     * @return Block of features to configure for this service principal using tags
     * 
     * @deprecated
     * This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
     * 
     */
    @Deprecated /* This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider */
    public Optional<Output<List<ServicePrincipalFeatureArgs>>> features() {
        return Optional.ofNullable(this.features);
    }

    /**
     * Home page or landing page of the associated application.
     * 
     */
    @Import(name="homepageUrl")
    private @Nullable Output<String> homepageUrl;

    /**
     * @return Home page or landing page of the associated application.
     * 
     */
    public Optional<Output<String>> homepageUrl() {
        return Optional.ofNullable(this.homepageUrl);
    }

    /**
     * The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on.
     * 
     */
    @Import(name="loginUrl")
    private @Nullable Output<String> loginUrl;

    /**
     * @return The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on.
     * 
     */
    public Optional<Output<String>> loginUrl() {
        return Optional.ofNullable(this.loginUrl);
    }

    /**
     * The URL that will be used by Microsoft&#39;s authorization service to log out an user using OpenId Connect front-channel, back-channel or SAML logout protocols, taken from the associated application.
     * 
     */
    @Import(name="logoutUrl")
    private @Nullable Output<String> logoutUrl;

    /**
     * @return The URL that will be used by Microsoft&#39;s authorization service to log out an user using OpenId Connect front-channel, back-channel or SAML logout protocols, taken from the associated application.
     * 
     */
    public Optional<Output<String>> logoutUrl() {
        return Optional.ofNullable(this.logoutUrl);
    }

    /**
     * A free text field to capture information about the service principal, typically used for operational purposes.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return A free text field to capture information about the service principal, typically used for operational purposes.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * A set of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.
     * 
     */
    @Import(name="notificationEmailAddresses")
    private @Nullable Output<List<String>> notificationEmailAddresses;

    /**
     * @return A set of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.
     * 
     */
    public Optional<Output<List<String>>> notificationEmailAddresses() {
        return Optional.ofNullable(this.notificationEmailAddresses);
    }

    /**
     * A mapping of OAuth2.0 permission scope values to scope IDs, as exposed by the associated application, intended to be useful when referencing permission scopes in other resources in your configuration.
     * 
     */
    @Import(name="oauth2PermissionScopeIds")
    private @Nullable Output<Map<String,String>> oauth2PermissionScopeIds;

    /**
     * @return A mapping of OAuth2.0 permission scope values to scope IDs, as exposed by the associated application, intended to be useful when referencing permission scopes in other resources in your configuration.
     * 
     */
    public Optional<Output<Map<String,String>>> oauth2PermissionScopeIds() {
        return Optional.ofNullable(this.oauth2PermissionScopeIds);
    }

    /**
     * A list of OAuth 2.0 delegated permission scopes exposed by the associated application, as documented below.
     * 
     */
    @Import(name="oauth2PermissionScopes")
    private @Nullable Output<List<ServicePrincipalOauth2PermissionScopeArgs>> oauth2PermissionScopes;

    /**
     * @return A list of OAuth 2.0 delegated permission scopes exposed by the associated application, as documented below.
     * 
     */
    public Optional<Output<List<ServicePrincipalOauth2PermissionScopeArgs>>> oauth2PermissionScopes() {
        return Optional.ofNullable(this.oauth2PermissionScopes);
    }

    /**
     * The object ID of the service principal.
     * 
     */
    @Import(name="objectId")
    private @Nullable Output<String> objectId;

    /**
     * @return The object ID of the service principal.
     * 
     */
    public Optional<Output<String>> objectId() {
        return Optional.ofNullable(this.objectId);
    }

    /**
     * A set of object IDs of principals that will be granted ownership of the service principal. Supported object types are users or service principals. By default, no owners are assigned.
     * 
     */
    @Import(name="owners")
    private @Nullable Output<List<String>> owners;

    /**
     * @return A set of object IDs of principals that will be granted ownership of the service principal. Supported object types are users or service principals. By default, no owners are assigned.
     * 
     */
    public Optional<Output<List<String>>> owners() {
        return Optional.ofNullable(this.owners);
    }

    /**
     * The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps. Supported values are `oidc`, `password`, `saml` or `notSupported`. Omit this property or specify a blank string to unset.
     * 
     */
    @Import(name="preferredSingleSignOnMode")
    private @Nullable Output<String> preferredSingleSignOnMode;

    /**
     * @return The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps. Supported values are `oidc`, `password`, `saml` or `notSupported`. Omit this property or specify a blank string to unset.
     * 
     */
    public Optional<Output<String>> preferredSingleSignOnMode() {
        return Optional.ofNullable(this.preferredSingleSignOnMode);
    }

    /**
     * A list of URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent for the associated application.
     * 
     */
    @Import(name="redirectUris")
    private @Nullable Output<List<String>> redirectUris;

    /**
     * @return A list of URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent for the associated application.
     * 
     */
    public Optional<Output<List<String>>> redirectUris() {
        return Optional.ofNullable(this.redirectUris);
    }

    /**
     * The URL where the service exposes SAML metadata for federation.
     * 
     */
    @Import(name="samlMetadataUrl")
    private @Nullable Output<String> samlMetadataUrl;

    /**
     * @return The URL where the service exposes SAML metadata for federation.
     * 
     */
    public Optional<Output<String>> samlMetadataUrl() {
        return Optional.ofNullable(this.samlMetadataUrl);
    }

    /**
     * A `saml_single_sign_on` block as documented below.
     * 
     */
    @Import(name="samlSingleSignOn")
    private @Nullable Output<ServicePrincipalSamlSingleSignOnArgs> samlSingleSignOn;

    /**
     * @return A `saml_single_sign_on` block as documented below.
     * 
     */
    public Optional<Output<ServicePrincipalSamlSingleSignOnArgs>> samlSingleSignOn() {
        return Optional.ofNullable(this.samlSingleSignOn);
    }

    /**
     * A list of identifier URI(s), copied over from the associated application.
     * 
     */
    @Import(name="servicePrincipalNames")
    private @Nullable Output<List<String>> servicePrincipalNames;

    /**
     * @return A list of identifier URI(s), copied over from the associated application.
     * 
     */
    public Optional<Output<List<String>>> servicePrincipalNames() {
        return Optional.ofNullable(this.servicePrincipalNames);
    }

    /**
     * The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
     * 
     */
    @Import(name="signInAudience")
    private @Nullable Output<String> signInAudience;

    /**
     * @return The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
     * 
     */
    public Optional<Output<String>> signInAudience() {
        return Optional.ofNullable(this.signInAudience);
    }

    /**
     * A set of tags to apply to the service principal. Cannot be used together with the `feature_tags` block.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A set of tags to apply to the service principal. Cannot be used together with the `feature_tags` block.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Possible values are `User` or `Admin`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Possible values are `User` or `Admin`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * When true, any existing service principal linked to the same application will be automatically imported. When false, an import error will be raised for any pre-existing service principal.
     * 
     */
    @Import(name="useExisting")
    private @Nullable Output<Boolean> useExisting;

    /**
     * @return When true, any existing service principal linked to the same application will be automatically imported. When false, an import error will be raised for any pre-existing service principal.
     * 
     */
    public Optional<Output<Boolean>> useExisting() {
        return Optional.ofNullable(this.useExisting);
    }

    private ServicePrincipalState() {}

    private ServicePrincipalState(ServicePrincipalState $) {
        this.accountEnabled = $.accountEnabled;
        this.alternativeNames = $.alternativeNames;
        this.appRoleAssignmentRequired = $.appRoleAssignmentRequired;
        this.appRoleIds = $.appRoleIds;
        this.appRoles = $.appRoles;
        this.applicationId = $.applicationId;
        this.applicationTenantId = $.applicationTenantId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.featureTags = $.featureTags;
        this.features = $.features;
        this.homepageUrl = $.homepageUrl;
        this.loginUrl = $.loginUrl;
        this.logoutUrl = $.logoutUrl;
        this.notes = $.notes;
        this.notificationEmailAddresses = $.notificationEmailAddresses;
        this.oauth2PermissionScopeIds = $.oauth2PermissionScopeIds;
        this.oauth2PermissionScopes = $.oauth2PermissionScopes;
        this.objectId = $.objectId;
        this.owners = $.owners;
        this.preferredSingleSignOnMode = $.preferredSingleSignOnMode;
        this.redirectUris = $.redirectUris;
        this.samlMetadataUrl = $.samlMetadataUrl;
        this.samlSingleSignOn = $.samlSingleSignOn;
        this.servicePrincipalNames = $.servicePrincipalNames;
        this.signInAudience = $.signInAudience;
        this.tags = $.tags;
        this.type = $.type;
        this.useExisting = $.useExisting;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicePrincipalState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicePrincipalState $;

        public Builder() {
            $ = new ServicePrincipalState();
        }

        public Builder(ServicePrincipalState defaults) {
            $ = new ServicePrincipalState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountEnabled Whether or not the service principal account is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder accountEnabled(@Nullable Output<Boolean> accountEnabled) {
            $.accountEnabled = accountEnabled;
            return this;
        }

        /**
         * @param accountEnabled Whether or not the service principal account is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder accountEnabled(Boolean accountEnabled) {
            return accountEnabled(Output.of(accountEnabled));
        }

        /**
         * @param alternativeNames A set of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.
         * 
         * @return builder
         * 
         */
        public Builder alternativeNames(@Nullable Output<List<String>> alternativeNames) {
            $.alternativeNames = alternativeNames;
            return this;
        }

        /**
         * @param alternativeNames A set of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.
         * 
         * @return builder
         * 
         */
        public Builder alternativeNames(List<String> alternativeNames) {
            return alternativeNames(Output.of(alternativeNames));
        }

        /**
         * @param alternativeNames A set of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.
         * 
         * @return builder
         * 
         */
        public Builder alternativeNames(String... alternativeNames) {
            return alternativeNames(List.of(alternativeNames));
        }

        /**
         * @param appRoleAssignmentRequired Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder appRoleAssignmentRequired(@Nullable Output<Boolean> appRoleAssignmentRequired) {
            $.appRoleAssignmentRequired = appRoleAssignmentRequired;
            return this;
        }

        /**
         * @param appRoleAssignmentRequired Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder appRoleAssignmentRequired(Boolean appRoleAssignmentRequired) {
            return appRoleAssignmentRequired(Output.of(appRoleAssignmentRequired));
        }

        /**
         * @param appRoleIds A mapping of app role values to app role IDs, as published by the associated application, intended to be useful when referencing app roles in other resources in your configuration.
         * 
         * @return builder
         * 
         */
        public Builder appRoleIds(@Nullable Output<Map<String,String>> appRoleIds) {
            $.appRoleIds = appRoleIds;
            return this;
        }

        /**
         * @param appRoleIds A mapping of app role values to app role IDs, as published by the associated application, intended to be useful when referencing app roles in other resources in your configuration.
         * 
         * @return builder
         * 
         */
        public Builder appRoleIds(Map<String,String> appRoleIds) {
            return appRoleIds(Output.of(appRoleIds));
        }

        /**
         * @param appRoles A list of app roles published by the associated application, as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
         * 
         * @return builder
         * 
         */
        public Builder appRoles(@Nullable Output<List<ServicePrincipalAppRoleArgs>> appRoles) {
            $.appRoles = appRoles;
            return this;
        }

        /**
         * @param appRoles A list of app roles published by the associated application, as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
         * 
         * @return builder
         * 
         */
        public Builder appRoles(List<ServicePrincipalAppRoleArgs> appRoles) {
            return appRoles(Output.of(appRoles));
        }

        /**
         * @param appRoles A list of app roles published by the associated application, as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
         * 
         * @return builder
         * 
         */
        public Builder appRoles(ServicePrincipalAppRoleArgs... appRoles) {
            return appRoles(List.of(appRoles));
        }

        /**
         * @param applicationId The application ID (client ID) of the application for which to create a service principal.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId The application ID (client ID) of the application for which to create a service principal.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param applicationTenantId The tenant ID where the associated application is registered.
         * 
         * @return builder
         * 
         */
        public Builder applicationTenantId(@Nullable Output<String> applicationTenantId) {
            $.applicationTenantId = applicationTenantId;
            return this;
        }

        /**
         * @param applicationTenantId The tenant ID where the associated application is registered.
         * 
         * @return builder
         * 
         */
        public Builder applicationTenantId(String applicationTenantId) {
            return applicationTenantId(Output.of(applicationTenantId));
        }

        /**
         * @param description A description of the service principal provided for internal end-users.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the service principal provided for internal end-users.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Display name for the app role that appears during app role assignment and in consent experiences.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name for the app role that appears during app role assignment and in consent experiences.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param featureTags A `feature_tags` block as described below. Cannot be used together with the `tags` property.
         * 
         * @return builder
         * 
         */
        public Builder featureTags(@Nullable Output<List<ServicePrincipalFeatureTagArgs>> featureTags) {
            $.featureTags = featureTags;
            return this;
        }

        /**
         * @param featureTags A `feature_tags` block as described below. Cannot be used together with the `tags` property.
         * 
         * @return builder
         * 
         */
        public Builder featureTags(List<ServicePrincipalFeatureTagArgs> featureTags) {
            return featureTags(Output.of(featureTags));
        }

        /**
         * @param featureTags A `feature_tags` block as described below. Cannot be used together with the `tags` property.
         * 
         * @return builder
         * 
         */
        public Builder featureTags(ServicePrincipalFeatureTagArgs... featureTags) {
            return featureTags(List.of(featureTags));
        }

        /**
         * @param features Block of features to configure for this service principal using tags
         * 
         * @return builder
         * 
         * @deprecated
         * This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
         * 
         */
        @Deprecated /* This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider */
        public Builder features(@Nullable Output<List<ServicePrincipalFeatureArgs>> features) {
            $.features = features;
            return this;
        }

        /**
         * @param features Block of features to configure for this service principal using tags
         * 
         * @return builder
         * 
         * @deprecated
         * This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
         * 
         */
        @Deprecated /* This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider */
        public Builder features(List<ServicePrincipalFeatureArgs> features) {
            return features(Output.of(features));
        }

        /**
         * @param features Block of features to configure for this service principal using tags
         * 
         * @return builder
         * 
         * @deprecated
         * This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
         * 
         */
        @Deprecated /* This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider */
        public Builder features(ServicePrincipalFeatureArgs... features) {
            return features(List.of(features));
        }

        /**
         * @param homepageUrl Home page or landing page of the associated application.
         * 
         * @return builder
         * 
         */
        public Builder homepageUrl(@Nullable Output<String> homepageUrl) {
            $.homepageUrl = homepageUrl;
            return this;
        }

        /**
         * @param homepageUrl Home page or landing page of the associated application.
         * 
         * @return builder
         * 
         */
        public Builder homepageUrl(String homepageUrl) {
            return homepageUrl(Output.of(homepageUrl));
        }

        /**
         * @param loginUrl The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on.
         * 
         * @return builder
         * 
         */
        public Builder loginUrl(@Nullable Output<String> loginUrl) {
            $.loginUrl = loginUrl;
            return this;
        }

        /**
         * @param loginUrl The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on.
         * 
         * @return builder
         * 
         */
        public Builder loginUrl(String loginUrl) {
            return loginUrl(Output.of(loginUrl));
        }

        /**
         * @param logoutUrl The URL that will be used by Microsoft&#39;s authorization service to log out an user using OpenId Connect front-channel, back-channel or SAML logout protocols, taken from the associated application.
         * 
         * @return builder
         * 
         */
        public Builder logoutUrl(@Nullable Output<String> logoutUrl) {
            $.logoutUrl = logoutUrl;
            return this;
        }

        /**
         * @param logoutUrl The URL that will be used by Microsoft&#39;s authorization service to log out an user using OpenId Connect front-channel, back-channel or SAML logout protocols, taken from the associated application.
         * 
         * @return builder
         * 
         */
        public Builder logoutUrl(String logoutUrl) {
            return logoutUrl(Output.of(logoutUrl));
        }

        /**
         * @param notes A free text field to capture information about the service principal, typically used for operational purposes.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes A free text field to capture information about the service principal, typically used for operational purposes.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param notificationEmailAddresses A set of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmailAddresses(@Nullable Output<List<String>> notificationEmailAddresses) {
            $.notificationEmailAddresses = notificationEmailAddresses;
            return this;
        }

        /**
         * @param notificationEmailAddresses A set of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmailAddresses(List<String> notificationEmailAddresses) {
            return notificationEmailAddresses(Output.of(notificationEmailAddresses));
        }

        /**
         * @param notificationEmailAddresses A set of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmailAddresses(String... notificationEmailAddresses) {
            return notificationEmailAddresses(List.of(notificationEmailAddresses));
        }

        /**
         * @param oauth2PermissionScopeIds A mapping of OAuth2.0 permission scope values to scope IDs, as exposed by the associated application, intended to be useful when referencing permission scopes in other resources in your configuration.
         * 
         * @return builder
         * 
         */
        public Builder oauth2PermissionScopeIds(@Nullable Output<Map<String,String>> oauth2PermissionScopeIds) {
            $.oauth2PermissionScopeIds = oauth2PermissionScopeIds;
            return this;
        }

        /**
         * @param oauth2PermissionScopeIds A mapping of OAuth2.0 permission scope values to scope IDs, as exposed by the associated application, intended to be useful when referencing permission scopes in other resources in your configuration.
         * 
         * @return builder
         * 
         */
        public Builder oauth2PermissionScopeIds(Map<String,String> oauth2PermissionScopeIds) {
            return oauth2PermissionScopeIds(Output.of(oauth2PermissionScopeIds));
        }

        /**
         * @param oauth2PermissionScopes A list of OAuth 2.0 delegated permission scopes exposed by the associated application, as documented below.
         * 
         * @return builder
         * 
         */
        public Builder oauth2PermissionScopes(@Nullable Output<List<ServicePrincipalOauth2PermissionScopeArgs>> oauth2PermissionScopes) {
            $.oauth2PermissionScopes = oauth2PermissionScopes;
            return this;
        }

        /**
         * @param oauth2PermissionScopes A list of OAuth 2.0 delegated permission scopes exposed by the associated application, as documented below.
         * 
         * @return builder
         * 
         */
        public Builder oauth2PermissionScopes(List<ServicePrincipalOauth2PermissionScopeArgs> oauth2PermissionScopes) {
            return oauth2PermissionScopes(Output.of(oauth2PermissionScopes));
        }

        /**
         * @param oauth2PermissionScopes A list of OAuth 2.0 delegated permission scopes exposed by the associated application, as documented below.
         * 
         * @return builder
         * 
         */
        public Builder oauth2PermissionScopes(ServicePrincipalOauth2PermissionScopeArgs... oauth2PermissionScopes) {
            return oauth2PermissionScopes(List.of(oauth2PermissionScopes));
        }

        /**
         * @param objectId The object ID of the service principal.
         * 
         * @return builder
         * 
         */
        public Builder objectId(@Nullable Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId The object ID of the service principal.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param owners A set of object IDs of principals that will be granted ownership of the service principal. Supported object types are users or service principals. By default, no owners are assigned.
         * 
         * @return builder
         * 
         */
        public Builder owners(@Nullable Output<List<String>> owners) {
            $.owners = owners;
            return this;
        }

        /**
         * @param owners A set of object IDs of principals that will be granted ownership of the service principal. Supported object types are users or service principals. By default, no owners are assigned.
         * 
         * @return builder
         * 
         */
        public Builder owners(List<String> owners) {
            return owners(Output.of(owners));
        }

        /**
         * @param owners A set of object IDs of principals that will be granted ownership of the service principal. Supported object types are users or service principals. By default, no owners are assigned.
         * 
         * @return builder
         * 
         */
        public Builder owners(String... owners) {
            return owners(List.of(owners));
        }

        /**
         * @param preferredSingleSignOnMode The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps. Supported values are `oidc`, `password`, `saml` or `notSupported`. Omit this property or specify a blank string to unset.
         * 
         * @return builder
         * 
         */
        public Builder preferredSingleSignOnMode(@Nullable Output<String> preferredSingleSignOnMode) {
            $.preferredSingleSignOnMode = preferredSingleSignOnMode;
            return this;
        }

        /**
         * @param preferredSingleSignOnMode The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps. Supported values are `oidc`, `password`, `saml` or `notSupported`. Omit this property or specify a blank string to unset.
         * 
         * @return builder
         * 
         */
        public Builder preferredSingleSignOnMode(String preferredSingleSignOnMode) {
            return preferredSingleSignOnMode(Output.of(preferredSingleSignOnMode));
        }

        /**
         * @param redirectUris A list of URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent for the associated application.
         * 
         * @return builder
         * 
         */
        public Builder redirectUris(@Nullable Output<List<String>> redirectUris) {
            $.redirectUris = redirectUris;
            return this;
        }

        /**
         * @param redirectUris A list of URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent for the associated application.
         * 
         * @return builder
         * 
         */
        public Builder redirectUris(List<String> redirectUris) {
            return redirectUris(Output.of(redirectUris));
        }

        /**
         * @param redirectUris A list of URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent for the associated application.
         * 
         * @return builder
         * 
         */
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }

        /**
         * @param samlMetadataUrl The URL where the service exposes SAML metadata for federation.
         * 
         * @return builder
         * 
         */
        public Builder samlMetadataUrl(@Nullable Output<String> samlMetadataUrl) {
            $.samlMetadataUrl = samlMetadataUrl;
            return this;
        }

        /**
         * @param samlMetadataUrl The URL where the service exposes SAML metadata for federation.
         * 
         * @return builder
         * 
         */
        public Builder samlMetadataUrl(String samlMetadataUrl) {
            return samlMetadataUrl(Output.of(samlMetadataUrl));
        }

        /**
         * @param samlSingleSignOn A `saml_single_sign_on` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder samlSingleSignOn(@Nullable Output<ServicePrincipalSamlSingleSignOnArgs> samlSingleSignOn) {
            $.samlSingleSignOn = samlSingleSignOn;
            return this;
        }

        /**
         * @param samlSingleSignOn A `saml_single_sign_on` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder samlSingleSignOn(ServicePrincipalSamlSingleSignOnArgs samlSingleSignOn) {
            return samlSingleSignOn(Output.of(samlSingleSignOn));
        }

        /**
         * @param servicePrincipalNames A list of identifier URI(s), copied over from the associated application.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalNames(@Nullable Output<List<String>> servicePrincipalNames) {
            $.servicePrincipalNames = servicePrincipalNames;
            return this;
        }

        /**
         * @param servicePrincipalNames A list of identifier URI(s), copied over from the associated application.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalNames(List<String> servicePrincipalNames) {
            return servicePrincipalNames(Output.of(servicePrincipalNames));
        }

        /**
         * @param servicePrincipalNames A list of identifier URI(s), copied over from the associated application.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalNames(String... servicePrincipalNames) {
            return servicePrincipalNames(List.of(servicePrincipalNames));
        }

        /**
         * @param signInAudience The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
         * 
         * @return builder
         * 
         */
        public Builder signInAudience(@Nullable Output<String> signInAudience) {
            $.signInAudience = signInAudience;
            return this;
        }

        /**
         * @param signInAudience The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
         * 
         * @return builder
         * 
         */
        public Builder signInAudience(String signInAudience) {
            return signInAudience(Output.of(signInAudience));
        }

        /**
         * @param tags A set of tags to apply to the service principal. Cannot be used together with the `feature_tags` block.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A set of tags to apply to the service principal. Cannot be used together with the `feature_tags` block.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A set of tags to apply to the service principal. Cannot be used together with the `feature_tags` block.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Possible values are `User` or `Admin`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Possible values are `User` or `Admin`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param useExisting When true, any existing service principal linked to the same application will be automatically imported. When false, an import error will be raised for any pre-existing service principal.
         * 
         * @return builder
         * 
         */
        public Builder useExisting(@Nullable Output<Boolean> useExisting) {
            $.useExisting = useExisting;
            return this;
        }

        /**
         * @param useExisting When true, any existing service principal linked to the same application will be automatically imported. When false, an import error will be raised for any pre-existing service principal.
         * 
         * @return builder
         * 
         */
        public Builder useExisting(Boolean useExisting) {
            return useExisting(Output.of(useExisting));
        }

        public ServicePrincipalState build() {
            return $;
        }
    }

}
