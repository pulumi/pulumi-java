// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.ServicePrincipalAppRoleGetArgs;
import com.pulumi.azuread.inputs.ServicePrincipalFeatureGetArgs;
import com.pulumi.azuread.inputs.ServicePrincipalFeatureTagGetArgs;
import com.pulumi.azuread.inputs.ServicePrincipalOauth2PermissionScopeGetArgs;
import com.pulumi.azuread.inputs.ServicePrincipalSamlSingleSignOnGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServicePrincipalState extends com.pulumi.resources.ResourceArgs {

    public static final ServicePrincipalState Empty = new ServicePrincipalState();

    /**
     * Whether or not the service principal account is enabled. Defaults to `true`.
     * 
     */
    @Import(name="accountEnabled")
      private final @Nullable Output<Boolean> accountEnabled;

    public Output<Boolean> accountEnabled() {
        return this.accountEnabled == null ? Codegen.empty() : this.accountEnabled;
    }

    /**
     * A set of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.
     * 
     */
    @Import(name="alternativeNames")
      private final @Nullable Output<List<String>> alternativeNames;

    public Output<List<String>> alternativeNames() {
        return this.alternativeNames == null ? Codegen.empty() : this.alternativeNames;
    }

    /**
     * Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
     * 
     */
    @Import(name="appRoleAssignmentRequired")
      private final @Nullable Output<Boolean> appRoleAssignmentRequired;

    public Output<Boolean> appRoleAssignmentRequired() {
        return this.appRoleAssignmentRequired == null ? Codegen.empty() : this.appRoleAssignmentRequired;
    }

    /**
     * A mapping of app role values to app role IDs, as published by the associated application, intended to be useful when referencing app roles in other resources in your configuration.
     * 
     */
    @Import(name="appRoleIds")
      private final @Nullable Output<Map<String,String>> appRoleIds;

    public Output<Map<String,String>> appRoleIds() {
        return this.appRoleIds == null ? Codegen.empty() : this.appRoleIds;
    }

    /**
     * A list of app roles published by the associated application, as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
     * 
     */
    @Import(name="appRoles")
      private final @Nullable Output<List<ServicePrincipalAppRoleGetArgs>> appRoles;

    public Output<List<ServicePrincipalAppRoleGetArgs>> appRoles() {
        return this.appRoles == null ? Codegen.empty() : this.appRoles;
    }

    /**
     * The application ID (client ID) of the application for which to create a service principal.
     * 
     */
    @Import(name="applicationId")
      private final @Nullable Output<String> applicationId;

    public Output<String> applicationId() {
        return this.applicationId == null ? Codegen.empty() : this.applicationId;
    }

    /**
     * The tenant ID where the associated application is registered.
     * 
     */
    @Import(name="applicationTenantId")
      private final @Nullable Output<String> applicationTenantId;

    public Output<String> applicationTenantId() {
        return this.applicationTenantId == null ? Codegen.empty() : this.applicationTenantId;
    }

    /**
     * A description of the service principal provided for internal end-users.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Display name for the app role that appears during app role assignment and in consent experiences.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * A `feature_tags` block as described below. Cannot be used together with the `tags` property.
     * 
     */
    @Import(name="featureTags")
      private final @Nullable Output<List<ServicePrincipalFeatureTagGetArgs>> featureTags;

    public Output<List<ServicePrincipalFeatureTagGetArgs>> featureTags() {
        return this.featureTags == null ? Codegen.empty() : this.featureTags;
    }

    /**
     * Block of features to configure for this service principal using tags
     * 
     * @Deprecated
     * This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
     * 
     */
    @Deprecated /* This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider */
    @Import(name="features")
      private final @Nullable Output<List<ServicePrincipalFeatureGetArgs>> features;

    @Deprecated /* This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider */
    public Output<List<ServicePrincipalFeatureGetArgs>> features() {
        return this.features == null ? Codegen.empty() : this.features;
    }

    /**
     * Home page or landing page of the associated application.
     * 
     */
    @Import(name="homepageUrl")
      private final @Nullable Output<String> homepageUrl;

    public Output<String> homepageUrl() {
        return this.homepageUrl == null ? Codegen.empty() : this.homepageUrl;
    }

    /**
     * The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on.
     * 
     */
    @Import(name="loginUrl")
      private final @Nullable Output<String> loginUrl;

    public Output<String> loginUrl() {
        return this.loginUrl == null ? Codegen.empty() : this.loginUrl;
    }

    /**
     * The URL that will be used by Microsoft's authorization service to log out an user using OpenId Connect front-channel, back-channel or SAML logout protocols, taken from the associated application.
     * 
     */
    @Import(name="logoutUrl")
      private final @Nullable Output<String> logoutUrl;

    public Output<String> logoutUrl() {
        return this.logoutUrl == null ? Codegen.empty() : this.logoutUrl;
    }

    /**
     * A free text field to capture information about the service principal, typically used for operational purposes.
     * 
     */
    @Import(name="notes")
      private final @Nullable Output<String> notes;

    public Output<String> notes() {
        return this.notes == null ? Codegen.empty() : this.notes;
    }

    /**
     * A set of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.
     * 
     */
    @Import(name="notificationEmailAddresses")
      private final @Nullable Output<List<String>> notificationEmailAddresses;

    public Output<List<String>> notificationEmailAddresses() {
        return this.notificationEmailAddresses == null ? Codegen.empty() : this.notificationEmailAddresses;
    }

    /**
     * A mapping of OAuth2.0 permission scope values to scope IDs, as exposed by the associated application, intended to be useful when referencing permission scopes in other resources in your configuration.
     * 
     */
    @Import(name="oauth2PermissionScopeIds")
      private final @Nullable Output<Map<String,String>> oauth2PermissionScopeIds;

    public Output<Map<String,String>> oauth2PermissionScopeIds() {
        return this.oauth2PermissionScopeIds == null ? Codegen.empty() : this.oauth2PermissionScopeIds;
    }

    /**
     * A list of OAuth 2.0 delegated permission scopes exposed by the associated application, as documented below.
     * 
     */
    @Import(name="oauth2PermissionScopes")
      private final @Nullable Output<List<ServicePrincipalOauth2PermissionScopeGetArgs>> oauth2PermissionScopes;

    public Output<List<ServicePrincipalOauth2PermissionScopeGetArgs>> oauth2PermissionScopes() {
        return this.oauth2PermissionScopes == null ? Codegen.empty() : this.oauth2PermissionScopes;
    }

    /**
     * The object ID of the service principal.
     * 
     */
    @Import(name="objectId")
      private final @Nullable Output<String> objectId;

    public Output<String> objectId() {
        return this.objectId == null ? Codegen.empty() : this.objectId;
    }

    /**
     * A set of object IDs of principals that will be granted ownership of the service principal. Supported object types are users or service principals. By default, no owners are assigned.
     * 
     */
    @Import(name="owners")
      private final @Nullable Output<List<String>> owners;

    public Output<List<String>> owners() {
        return this.owners == null ? Codegen.empty() : this.owners;
    }

    /**
     * The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps. Supported values are `oidc`, `password`, `saml` or `notSupported`. Omit this property or specify a blank string to unset.
     * 
     */
    @Import(name="preferredSingleSignOnMode")
      private final @Nullable Output<String> preferredSingleSignOnMode;

    public Output<String> preferredSingleSignOnMode() {
        return this.preferredSingleSignOnMode == null ? Codegen.empty() : this.preferredSingleSignOnMode;
    }

    /**
     * A list of URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent for the associated application.
     * 
     */
    @Import(name="redirectUris")
      private final @Nullable Output<List<String>> redirectUris;

    public Output<List<String>> redirectUris() {
        return this.redirectUris == null ? Codegen.empty() : this.redirectUris;
    }

    /**
     * The URL where the service exposes SAML metadata for federation.
     * 
     */
    @Import(name="samlMetadataUrl")
      private final @Nullable Output<String> samlMetadataUrl;

    public Output<String> samlMetadataUrl() {
        return this.samlMetadataUrl == null ? Codegen.empty() : this.samlMetadataUrl;
    }

    /**
     * A `saml_single_sign_on` block as documented below.
     * 
     */
    @Import(name="samlSingleSignOn")
      private final @Nullable Output<ServicePrincipalSamlSingleSignOnGetArgs> samlSingleSignOn;

    public Output<ServicePrincipalSamlSingleSignOnGetArgs> samlSingleSignOn() {
        return this.samlSingleSignOn == null ? Codegen.empty() : this.samlSingleSignOn;
    }

    /**
     * A list of identifier URI(s), copied over from the associated application.
     * 
     */
    @Import(name="servicePrincipalNames")
      private final @Nullable Output<List<String>> servicePrincipalNames;

    public Output<List<String>> servicePrincipalNames() {
        return this.servicePrincipalNames == null ? Codegen.empty() : this.servicePrincipalNames;
    }

    /**
     * The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
     * 
     */
    @Import(name="signInAudience")
      private final @Nullable Output<String> signInAudience;

    public Output<String> signInAudience() {
        return this.signInAudience == null ? Codegen.empty() : this.signInAudience;
    }

    /**
     * A set of tags to apply to the service principal. Cannot be used together with the `feature_tags` block.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<String>> tags;

    public Output<List<String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Possible values are `User` or `Admin`.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * When true, any existing service principal linked to the same application will be automatically imported. When false, an import error will be raised for any pre-existing service principal.
     * 
     */
    @Import(name="useExisting")
      private final @Nullable Output<Boolean> useExisting;

    public Output<Boolean> useExisting() {
        return this.useExisting == null ? Codegen.empty() : this.useExisting;
    }

    public ServicePrincipalState(
        @Nullable Output<Boolean> accountEnabled,
        @Nullable Output<List<String>> alternativeNames,
        @Nullable Output<Boolean> appRoleAssignmentRequired,
        @Nullable Output<Map<String,String>> appRoleIds,
        @Nullable Output<List<ServicePrincipalAppRoleGetArgs>> appRoles,
        @Nullable Output<String> applicationId,
        @Nullable Output<String> applicationTenantId,
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        @Nullable Output<List<ServicePrincipalFeatureTagGetArgs>> featureTags,
        @Nullable Output<List<ServicePrincipalFeatureGetArgs>> features,
        @Nullable Output<String> homepageUrl,
        @Nullable Output<String> loginUrl,
        @Nullable Output<String> logoutUrl,
        @Nullable Output<String> notes,
        @Nullable Output<List<String>> notificationEmailAddresses,
        @Nullable Output<Map<String,String>> oauth2PermissionScopeIds,
        @Nullable Output<List<ServicePrincipalOauth2PermissionScopeGetArgs>> oauth2PermissionScopes,
        @Nullable Output<String> objectId,
        @Nullable Output<List<String>> owners,
        @Nullable Output<String> preferredSingleSignOnMode,
        @Nullable Output<List<String>> redirectUris,
        @Nullable Output<String> samlMetadataUrl,
        @Nullable Output<ServicePrincipalSamlSingleSignOnGetArgs> samlSingleSignOn,
        @Nullable Output<List<String>> servicePrincipalNames,
        @Nullable Output<String> signInAudience,
        @Nullable Output<List<String>> tags,
        @Nullable Output<String> type,
        @Nullable Output<Boolean> useExisting) {
        this.accountEnabled = accountEnabled;
        this.alternativeNames = alternativeNames;
        this.appRoleAssignmentRequired = appRoleAssignmentRequired;
        this.appRoleIds = appRoleIds;
        this.appRoles = appRoles;
        this.applicationId = applicationId;
        this.applicationTenantId = applicationTenantId;
        this.description = description;
        this.displayName = displayName;
        this.featureTags = featureTags;
        this.features = features;
        this.homepageUrl = homepageUrl;
        this.loginUrl = loginUrl;
        this.logoutUrl = logoutUrl;
        this.notes = notes;
        this.notificationEmailAddresses = notificationEmailAddresses;
        this.oauth2PermissionScopeIds = oauth2PermissionScopeIds;
        this.oauth2PermissionScopes = oauth2PermissionScopes;
        this.objectId = objectId;
        this.owners = owners;
        this.preferredSingleSignOnMode = preferredSingleSignOnMode;
        this.redirectUris = redirectUris;
        this.samlMetadataUrl = samlMetadataUrl;
        this.samlSingleSignOn = samlSingleSignOn;
        this.servicePrincipalNames = servicePrincipalNames;
        this.signInAudience = signInAudience;
        this.tags = tags;
        this.type = type;
        this.useExisting = useExisting;
    }

    private ServicePrincipalState() {
        this.accountEnabled = Codegen.empty();
        this.alternativeNames = Codegen.empty();
        this.appRoleAssignmentRequired = Codegen.empty();
        this.appRoleIds = Codegen.empty();
        this.appRoles = Codegen.empty();
        this.applicationId = Codegen.empty();
        this.applicationTenantId = Codegen.empty();
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.featureTags = Codegen.empty();
        this.features = Codegen.empty();
        this.homepageUrl = Codegen.empty();
        this.loginUrl = Codegen.empty();
        this.logoutUrl = Codegen.empty();
        this.notes = Codegen.empty();
        this.notificationEmailAddresses = Codegen.empty();
        this.oauth2PermissionScopeIds = Codegen.empty();
        this.oauth2PermissionScopes = Codegen.empty();
        this.objectId = Codegen.empty();
        this.owners = Codegen.empty();
        this.preferredSingleSignOnMode = Codegen.empty();
        this.redirectUris = Codegen.empty();
        this.samlMetadataUrl = Codegen.empty();
        this.samlSingleSignOn = Codegen.empty();
        this.servicePrincipalNames = Codegen.empty();
        this.signInAudience = Codegen.empty();
        this.tags = Codegen.empty();
        this.type = Codegen.empty();
        this.useExisting = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePrincipalState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> accountEnabled;
        private @Nullable Output<List<String>> alternativeNames;
        private @Nullable Output<Boolean> appRoleAssignmentRequired;
        private @Nullable Output<Map<String,String>> appRoleIds;
        private @Nullable Output<List<ServicePrincipalAppRoleGetArgs>> appRoles;
        private @Nullable Output<String> applicationId;
        private @Nullable Output<String> applicationTenantId;
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private @Nullable Output<List<ServicePrincipalFeatureTagGetArgs>> featureTags;
        private @Nullable Output<List<ServicePrincipalFeatureGetArgs>> features;
        private @Nullable Output<String> homepageUrl;
        private @Nullable Output<String> loginUrl;
        private @Nullable Output<String> logoutUrl;
        private @Nullable Output<String> notes;
        private @Nullable Output<List<String>> notificationEmailAddresses;
        private @Nullable Output<Map<String,String>> oauth2PermissionScopeIds;
        private @Nullable Output<List<ServicePrincipalOauth2PermissionScopeGetArgs>> oauth2PermissionScopes;
        private @Nullable Output<String> objectId;
        private @Nullable Output<List<String>> owners;
        private @Nullable Output<String> preferredSingleSignOnMode;
        private @Nullable Output<List<String>> redirectUris;
        private @Nullable Output<String> samlMetadataUrl;
        private @Nullable Output<ServicePrincipalSamlSingleSignOnGetArgs> samlSingleSignOn;
        private @Nullable Output<List<String>> servicePrincipalNames;
        private @Nullable Output<String> signInAudience;
        private @Nullable Output<List<String>> tags;
        private @Nullable Output<String> type;
        private @Nullable Output<Boolean> useExisting;

        public Builder() {
    	      // Empty
        }

        public Builder(ServicePrincipalState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountEnabled = defaults.accountEnabled;
    	      this.alternativeNames = defaults.alternativeNames;
    	      this.appRoleAssignmentRequired = defaults.appRoleAssignmentRequired;
    	      this.appRoleIds = defaults.appRoleIds;
    	      this.appRoles = defaults.appRoles;
    	      this.applicationId = defaults.applicationId;
    	      this.applicationTenantId = defaults.applicationTenantId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.featureTags = defaults.featureTags;
    	      this.features = defaults.features;
    	      this.homepageUrl = defaults.homepageUrl;
    	      this.loginUrl = defaults.loginUrl;
    	      this.logoutUrl = defaults.logoutUrl;
    	      this.notes = defaults.notes;
    	      this.notificationEmailAddresses = defaults.notificationEmailAddresses;
    	      this.oauth2PermissionScopeIds = defaults.oauth2PermissionScopeIds;
    	      this.oauth2PermissionScopes = defaults.oauth2PermissionScopes;
    	      this.objectId = defaults.objectId;
    	      this.owners = defaults.owners;
    	      this.preferredSingleSignOnMode = defaults.preferredSingleSignOnMode;
    	      this.redirectUris = defaults.redirectUris;
    	      this.samlMetadataUrl = defaults.samlMetadataUrl;
    	      this.samlSingleSignOn = defaults.samlSingleSignOn;
    	      this.servicePrincipalNames = defaults.servicePrincipalNames;
    	      this.signInAudience = defaults.signInAudience;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.useExisting = defaults.useExisting;
        }

        public Builder accountEnabled(@Nullable Output<Boolean> accountEnabled) {
            this.accountEnabled = accountEnabled;
            return this;
        }
        public Builder accountEnabled(@Nullable Boolean accountEnabled) {
            this.accountEnabled = Codegen.ofNullable(accountEnabled);
            return this;
        }
        public Builder alternativeNames(@Nullable Output<List<String>> alternativeNames) {
            this.alternativeNames = alternativeNames;
            return this;
        }
        public Builder alternativeNames(@Nullable List<String> alternativeNames) {
            this.alternativeNames = Codegen.ofNullable(alternativeNames);
            return this;
        }
        public Builder alternativeNames(String... alternativeNames) {
            return alternativeNames(List.of(alternativeNames));
        }
        public Builder appRoleAssignmentRequired(@Nullable Output<Boolean> appRoleAssignmentRequired) {
            this.appRoleAssignmentRequired = appRoleAssignmentRequired;
            return this;
        }
        public Builder appRoleAssignmentRequired(@Nullable Boolean appRoleAssignmentRequired) {
            this.appRoleAssignmentRequired = Codegen.ofNullable(appRoleAssignmentRequired);
            return this;
        }
        public Builder appRoleIds(@Nullable Output<Map<String,String>> appRoleIds) {
            this.appRoleIds = appRoleIds;
            return this;
        }
        public Builder appRoleIds(@Nullable Map<String,String> appRoleIds) {
            this.appRoleIds = Codegen.ofNullable(appRoleIds);
            return this;
        }
        public Builder appRoles(@Nullable Output<List<ServicePrincipalAppRoleGetArgs>> appRoles) {
            this.appRoles = appRoles;
            return this;
        }
        public Builder appRoles(@Nullable List<ServicePrincipalAppRoleGetArgs> appRoles) {
            this.appRoles = Codegen.ofNullable(appRoles);
            return this;
        }
        public Builder appRoles(ServicePrincipalAppRoleGetArgs... appRoles) {
            return appRoles(List.of(appRoles));
        }
        public Builder applicationId(@Nullable Output<String> applicationId) {
            this.applicationId = applicationId;
            return this;
        }
        public Builder applicationId(@Nullable String applicationId) {
            this.applicationId = Codegen.ofNullable(applicationId);
            return this;
        }
        public Builder applicationTenantId(@Nullable Output<String> applicationTenantId) {
            this.applicationTenantId = applicationTenantId;
            return this;
        }
        public Builder applicationTenantId(@Nullable String applicationTenantId) {
            this.applicationTenantId = Codegen.ofNullable(applicationTenantId);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder featureTags(@Nullable Output<List<ServicePrincipalFeatureTagGetArgs>> featureTags) {
            this.featureTags = featureTags;
            return this;
        }
        public Builder featureTags(@Nullable List<ServicePrincipalFeatureTagGetArgs> featureTags) {
            this.featureTags = Codegen.ofNullable(featureTags);
            return this;
        }
        public Builder featureTags(ServicePrincipalFeatureTagGetArgs... featureTags) {
            return featureTags(List.of(featureTags));
        }
        public Builder features(@Nullable Output<List<ServicePrincipalFeatureGetArgs>> features) {
            this.features = features;
            return this;
        }
        public Builder features(@Nullable List<ServicePrincipalFeatureGetArgs> features) {
            this.features = Codegen.ofNullable(features);
            return this;
        }
        public Builder features(ServicePrincipalFeatureGetArgs... features) {
            return features(List.of(features));
        }
        public Builder homepageUrl(@Nullable Output<String> homepageUrl) {
            this.homepageUrl = homepageUrl;
            return this;
        }
        public Builder homepageUrl(@Nullable String homepageUrl) {
            this.homepageUrl = Codegen.ofNullable(homepageUrl);
            return this;
        }
        public Builder loginUrl(@Nullable Output<String> loginUrl) {
            this.loginUrl = loginUrl;
            return this;
        }
        public Builder loginUrl(@Nullable String loginUrl) {
            this.loginUrl = Codegen.ofNullable(loginUrl);
            return this;
        }
        public Builder logoutUrl(@Nullable Output<String> logoutUrl) {
            this.logoutUrl = logoutUrl;
            return this;
        }
        public Builder logoutUrl(@Nullable String logoutUrl) {
            this.logoutUrl = Codegen.ofNullable(logoutUrl);
            return this;
        }
        public Builder notes(@Nullable Output<String> notes) {
            this.notes = notes;
            return this;
        }
        public Builder notes(@Nullable String notes) {
            this.notes = Codegen.ofNullable(notes);
            return this;
        }
        public Builder notificationEmailAddresses(@Nullable Output<List<String>> notificationEmailAddresses) {
            this.notificationEmailAddresses = notificationEmailAddresses;
            return this;
        }
        public Builder notificationEmailAddresses(@Nullable List<String> notificationEmailAddresses) {
            this.notificationEmailAddresses = Codegen.ofNullable(notificationEmailAddresses);
            return this;
        }
        public Builder notificationEmailAddresses(String... notificationEmailAddresses) {
            return notificationEmailAddresses(List.of(notificationEmailAddresses));
        }
        public Builder oauth2PermissionScopeIds(@Nullable Output<Map<String,String>> oauth2PermissionScopeIds) {
            this.oauth2PermissionScopeIds = oauth2PermissionScopeIds;
            return this;
        }
        public Builder oauth2PermissionScopeIds(@Nullable Map<String,String> oauth2PermissionScopeIds) {
            this.oauth2PermissionScopeIds = Codegen.ofNullable(oauth2PermissionScopeIds);
            return this;
        }
        public Builder oauth2PermissionScopes(@Nullable Output<List<ServicePrincipalOauth2PermissionScopeGetArgs>> oauth2PermissionScopes) {
            this.oauth2PermissionScopes = oauth2PermissionScopes;
            return this;
        }
        public Builder oauth2PermissionScopes(@Nullable List<ServicePrincipalOauth2PermissionScopeGetArgs> oauth2PermissionScopes) {
            this.oauth2PermissionScopes = Codegen.ofNullable(oauth2PermissionScopes);
            return this;
        }
        public Builder oauth2PermissionScopes(ServicePrincipalOauth2PermissionScopeGetArgs... oauth2PermissionScopes) {
            return oauth2PermissionScopes(List.of(oauth2PermissionScopes));
        }
        public Builder objectId(@Nullable Output<String> objectId) {
            this.objectId = objectId;
            return this;
        }
        public Builder objectId(@Nullable String objectId) {
            this.objectId = Codegen.ofNullable(objectId);
            return this;
        }
        public Builder owners(@Nullable Output<List<String>> owners) {
            this.owners = owners;
            return this;
        }
        public Builder owners(@Nullable List<String> owners) {
            this.owners = Codegen.ofNullable(owners);
            return this;
        }
        public Builder owners(String... owners) {
            return owners(List.of(owners));
        }
        public Builder preferredSingleSignOnMode(@Nullable Output<String> preferredSingleSignOnMode) {
            this.preferredSingleSignOnMode = preferredSingleSignOnMode;
            return this;
        }
        public Builder preferredSingleSignOnMode(@Nullable String preferredSingleSignOnMode) {
            this.preferredSingleSignOnMode = Codegen.ofNullable(preferredSingleSignOnMode);
            return this;
        }
        public Builder redirectUris(@Nullable Output<List<String>> redirectUris) {
            this.redirectUris = redirectUris;
            return this;
        }
        public Builder redirectUris(@Nullable List<String> redirectUris) {
            this.redirectUris = Codegen.ofNullable(redirectUris);
            return this;
        }
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        public Builder samlMetadataUrl(@Nullable Output<String> samlMetadataUrl) {
            this.samlMetadataUrl = samlMetadataUrl;
            return this;
        }
        public Builder samlMetadataUrl(@Nullable String samlMetadataUrl) {
            this.samlMetadataUrl = Codegen.ofNullable(samlMetadataUrl);
            return this;
        }
        public Builder samlSingleSignOn(@Nullable Output<ServicePrincipalSamlSingleSignOnGetArgs> samlSingleSignOn) {
            this.samlSingleSignOn = samlSingleSignOn;
            return this;
        }
        public Builder samlSingleSignOn(@Nullable ServicePrincipalSamlSingleSignOnGetArgs samlSingleSignOn) {
            this.samlSingleSignOn = Codegen.ofNullable(samlSingleSignOn);
            return this;
        }
        public Builder servicePrincipalNames(@Nullable Output<List<String>> servicePrincipalNames) {
            this.servicePrincipalNames = servicePrincipalNames;
            return this;
        }
        public Builder servicePrincipalNames(@Nullable List<String> servicePrincipalNames) {
            this.servicePrincipalNames = Codegen.ofNullable(servicePrincipalNames);
            return this;
        }
        public Builder servicePrincipalNames(String... servicePrincipalNames) {
            return servicePrincipalNames(List.of(servicePrincipalNames));
        }
        public Builder signInAudience(@Nullable Output<String> signInAudience) {
            this.signInAudience = signInAudience;
            return this;
        }
        public Builder signInAudience(@Nullable String signInAudience) {
            this.signInAudience = Codegen.ofNullable(signInAudience);
            return this;
        }
        public Builder tags(@Nullable Output<List<String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder useExisting(@Nullable Output<Boolean> useExisting) {
            this.useExisting = useExisting;
            return this;
        }
        public Builder useExisting(@Nullable Boolean useExisting) {
            this.useExisting = Codegen.ofNullable(useExisting);
            return this;
        }        public ServicePrincipalState build() {
            return new ServicePrincipalState(accountEnabled, alternativeNames, appRoleAssignmentRequired, appRoleIds, appRoles, applicationId, applicationTenantId, description, displayName, featureTags, features, homepageUrl, loginUrl, logoutUrl, notes, notificationEmailAddresses, oauth2PermissionScopeIds, oauth2PermissionScopes, objectId, owners, preferredSingleSignOnMode, redirectUris, samlMetadataUrl, samlSingleSignOn, servicePrincipalNames, signInAudience, tags, type, useExisting);
        }
    }
}
