// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights;

import io.pulumi.azurenative.insights.inputs.ActionListArgs;
import io.pulumi.azurenative.insights.inputs.AlertRuleAllOfConditionArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ActivityLogAlertArgs extends io.pulumi.resources.ResourceArgs {

    public static final ActivityLogAlertArgs Empty = new ActivityLogAlertArgs();

    /**
     * The actions that will activate when the condition is met.
     * 
     */
    @Import(name="actions", required=true)
      private final Output<ActionListArgs> actions;

    public Output<ActionListArgs> getActions() {
        return this.actions;
    }

    /**
     * The name of the Activity Log Alert rule.
     * 
     */
    @Import(name="activityLogAlertName")
      private final @Nullable Output<String> activityLogAlertName;

    public Output<String> getActivityLogAlertName() {
        return this.activityLogAlertName == null ? Codegen.empty() : this.activityLogAlertName;
    }

    /**
     * The condition that will cause this alert to activate.
     * 
     */
    @Import(name="condition", required=true)
      private final Output<AlertRuleAllOfConditionArgs> condition;

    public Output<AlertRuleAllOfConditionArgs> getCondition() {
        return this.condition;
    }

    /**
     * A description of this Activity Log Alert rule.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Indicates whether this Activity Log Alert rule is enabled. If an Activity Log Alert rule is not enabled, then none of its actions will be activated.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Codegen.empty() : this.enabled;
    }

    /**
     * The location of the resource. Since Azure Activity Log Alerts is a global service, the location of the rules should always be 'global'.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A list of resource IDs that will be used as prefixes. The alert will only apply to Activity Log events with resource IDs that fall under one of these prefixes. This list must include at least one item.
     * 
     */
    @Import(name="scopes", required=true)
      private final Output<List<String>> scopes;

    public Output<List<String>> getScopes() {
        return this.scopes;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public ActivityLogAlertArgs(
        Output<ActionListArgs> actions,
        @Nullable Output<String> activityLogAlertName,
        Output<AlertRuleAllOfConditionArgs> condition,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        Output<List<String>> scopes,
        @Nullable Output<Map<String,String>> tags) {
        this.actions = Objects.requireNonNull(actions, "expected parameter 'actions' to be non-null");
        this.activityLogAlertName = activityLogAlertName;
        this.condition = Objects.requireNonNull(condition, "expected parameter 'condition' to be non-null");
        this.description = description;
        this.enabled = enabled == null ? Codegen.ofNullable(true) : enabled;
        this.location = location == null ? Codegen.ofNullable("global") : location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scopes = Objects.requireNonNull(scopes, "expected parameter 'scopes' to be non-null");
        this.tags = tags;
    }

    private ActivityLogAlertArgs() {
        this.actions = Codegen.empty();
        this.activityLogAlertName = Codegen.empty();
        this.condition = Codegen.empty();
        this.description = Codegen.empty();
        this.enabled = Codegen.empty();
        this.location = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.scopes = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ActivityLogAlertArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ActionListArgs> actions;
        private @Nullable Output<String> activityLogAlertName;
        private Output<AlertRuleAllOfConditionArgs> condition;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private Output<List<String>> scopes;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ActivityLogAlertArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.activityLogAlertName = defaults.activityLogAlertName;
    	      this.condition = defaults.condition;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scopes = defaults.scopes;
    	      this.tags = defaults.tags;
        }

        public Builder actions(Output<ActionListArgs> actions) {
            this.actions = Objects.requireNonNull(actions);
            return this;
        }
        public Builder actions(ActionListArgs actions) {
            this.actions = Output.of(Objects.requireNonNull(actions));
            return this;
        }
        public Builder activityLogAlertName(@Nullable Output<String> activityLogAlertName) {
            this.activityLogAlertName = activityLogAlertName;
            return this;
        }
        public Builder activityLogAlertName(@Nullable String activityLogAlertName) {
            this.activityLogAlertName = Codegen.ofNullable(activityLogAlertName);
            return this;
        }
        public Builder condition(Output<AlertRuleAllOfConditionArgs> condition) {
            this.condition = Objects.requireNonNull(condition);
            return this;
        }
        public Builder condition(AlertRuleAllOfConditionArgs condition) {
            this.condition = Output.of(Objects.requireNonNull(condition));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Codegen.ofNullable(enabled);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder scopes(Output<List<String>> scopes) {
            this.scopes = Objects.requireNonNull(scopes);
            return this;
        }
        public Builder scopes(List<String> scopes) {
            this.scopes = Output.of(Objects.requireNonNull(scopes));
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public ActivityLogAlertArgs build() {
            return new ActivityLogAlertArgs(actions, activityLogAlertName, condition, description, enabled, location, resourceGroupName, scopes, tags);
        }
    }
}
