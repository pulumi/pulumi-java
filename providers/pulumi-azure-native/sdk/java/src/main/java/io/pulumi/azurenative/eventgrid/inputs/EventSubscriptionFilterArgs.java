// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.eventgrid.inputs;

import io.pulumi.azurenative.eventgrid.inputs.BoolEqualsAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.NumberGreaterThanAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.NumberGreaterThanOrEqualsAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.NumberInAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.NumberLessThanAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.NumberLessThanOrEqualsAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.NumberNotInAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.StringBeginsWithAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.StringContainsAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.StringEndsWithAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.StringInAdvancedFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.StringNotInAdvancedFilterArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Filter for the Event Subscription.
 * 
 */
public final class EventSubscriptionFilterArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventSubscriptionFilterArgs Empty = new EventSubscriptionFilterArgs();

    /**
     * An array of advanced filters that are used for filtering event subscriptions.
     * 
     */
    @InputImport(name="advancedFilters")
      private final @Nullable Input<List<Object>> advancedFilters;

    public Input<List<Object>> getAdvancedFilters() {
        return this.advancedFilters == null ? Input.empty() : this.advancedFilters;
    }

    /**
     * A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
     * 
     */
    @InputImport(name="includedEventTypes")
      private final @Nullable Input<List<String>> includedEventTypes;

    public Input<List<String>> getIncludedEventTypes() {
        return this.includedEventTypes == null ? Input.empty() : this.includedEventTypes;
    }

    /**
     * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
     * should be compared in a case sensitive manner.
     * 
     */
    @InputImport(name="isSubjectCaseSensitive")
      private final @Nullable Input<Boolean> isSubjectCaseSensitive;

    public Input<Boolean> getIsSubjectCaseSensitive() {
        return this.isSubjectCaseSensitive == null ? Input.empty() : this.isSubjectCaseSensitive;
    }

    /**
     * An optional string to filter events for an event subscription based on a resource path prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     * 
     */
    @InputImport(name="subjectBeginsWith")
      private final @Nullable Input<String> subjectBeginsWith;

    public Input<String> getSubjectBeginsWith() {
        return this.subjectBeginsWith == null ? Input.empty() : this.subjectBeginsWith;
    }

    /**
     * An optional string to filter events for an event subscription based on a resource path suffix.
     * Wildcard characters are not supported in this path.
     * 
     */
    @InputImport(name="subjectEndsWith")
      private final @Nullable Input<String> subjectEndsWith;

    public Input<String> getSubjectEndsWith() {
        return this.subjectEndsWith == null ? Input.empty() : this.subjectEndsWith;
    }

    public EventSubscriptionFilterArgs(
        @Nullable Input<List<Object>> advancedFilters,
        @Nullable Input<List<String>> includedEventTypes,
        @Nullable Input<Boolean> isSubjectCaseSensitive,
        @Nullable Input<String> subjectBeginsWith,
        @Nullable Input<String> subjectEndsWith) {
        this.advancedFilters = advancedFilters;
        this.includedEventTypes = includedEventTypes;
        this.isSubjectCaseSensitive = isSubjectCaseSensitive == null ? Input.ofNullable(false) : isSubjectCaseSensitive;
        this.subjectBeginsWith = subjectBeginsWith;
        this.subjectEndsWith = subjectEndsWith;
    }

    private EventSubscriptionFilterArgs() {
        this.advancedFilters = Input.empty();
        this.includedEventTypes = Input.empty();
        this.isSubjectCaseSensitive = Input.empty();
        this.subjectBeginsWith = Input.empty();
        this.subjectEndsWith = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventSubscriptionFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<Object>> advancedFilters;
        private @Nullable Input<List<String>> includedEventTypes;
        private @Nullable Input<Boolean> isSubjectCaseSensitive;
        private @Nullable Input<String> subjectBeginsWith;
        private @Nullable Input<String> subjectEndsWith;

        public Builder() {
    	      // Empty
        }

        public Builder(EventSubscriptionFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedFilters = defaults.advancedFilters;
    	      this.includedEventTypes = defaults.includedEventTypes;
    	      this.isSubjectCaseSensitive = defaults.isSubjectCaseSensitive;
    	      this.subjectBeginsWith = defaults.subjectBeginsWith;
    	      this.subjectEndsWith = defaults.subjectEndsWith;
        }

        public Builder setAdvancedFilters(@Nullable Input<List<Object>> advancedFilters) {
            this.advancedFilters = advancedFilters;
            return this;
        }

        public Builder setAdvancedFilters(@Nullable List<Object> advancedFilters) {
            this.advancedFilters = Input.ofNullable(advancedFilters);
            return this;
        }

        public Builder setIncludedEventTypes(@Nullable Input<List<String>> includedEventTypes) {
            this.includedEventTypes = includedEventTypes;
            return this;
        }

        public Builder setIncludedEventTypes(@Nullable List<String> includedEventTypes) {
            this.includedEventTypes = Input.ofNullable(includedEventTypes);
            return this;
        }

        public Builder setIsSubjectCaseSensitive(@Nullable Input<Boolean> isSubjectCaseSensitive) {
            this.isSubjectCaseSensitive = isSubjectCaseSensitive;
            return this;
        }

        public Builder setIsSubjectCaseSensitive(@Nullable Boolean isSubjectCaseSensitive) {
            this.isSubjectCaseSensitive = Input.ofNullable(isSubjectCaseSensitive);
            return this;
        }

        public Builder setSubjectBeginsWith(@Nullable Input<String> subjectBeginsWith) {
            this.subjectBeginsWith = subjectBeginsWith;
            return this;
        }

        public Builder setSubjectBeginsWith(@Nullable String subjectBeginsWith) {
            this.subjectBeginsWith = Input.ofNullable(subjectBeginsWith);
            return this;
        }

        public Builder setSubjectEndsWith(@Nullable Input<String> subjectEndsWith) {
            this.subjectEndsWith = subjectEndsWith;
            return this;
        }

        public Builder setSubjectEndsWith(@Nullable String subjectEndsWith) {
            this.subjectEndsWith = Input.ofNullable(subjectEndsWith);
            return this;
        }
        public EventSubscriptionFilterArgs build() {
            return new EventSubscriptionFilterArgs(advancedFilters, includedEventTypes, isSubjectCaseSensitive, subjectBeginsWith, subjectEndsWith);
        }
    }
}
