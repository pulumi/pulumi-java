// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.synapse;

import io.pulumi.azurenative.synapse.enums.TransparentDataEncryptionStatus;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SqlPoolTransparentDataEncryptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final SqlPoolTransparentDataEncryptionArgs Empty = new SqlPoolTransparentDataEncryptionArgs();

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * SQL pool name
     * 
     */
    @InputImport(name="sqlPoolName", required=true)
      private final Input<String> sqlPoolName;

    public Input<String> getSqlPoolName() {
        return this.sqlPoolName;
    }

    /**
     * The status of the database transparent data encryption.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Input<Either<String,TransparentDataEncryptionStatus>> status;

    public Input<Either<String,TransparentDataEncryptionStatus>> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * The name of the transparent data encryption configuration.
     * 
     */
    @InputImport(name="transparentDataEncryptionName")
      private final @Nullable Input<String> transparentDataEncryptionName;

    public Input<String> getTransparentDataEncryptionName() {
        return this.transparentDataEncryptionName == null ? Input.empty() : this.transparentDataEncryptionName;
    }

    /**
     * The name of the workspace
     * 
     */
    @InputImport(name="workspaceName", required=true)
      private final Input<String> workspaceName;

    public Input<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public SqlPoolTransparentDataEncryptionArgs(
        Input<String> resourceGroupName,
        Input<String> sqlPoolName,
        @Nullable Input<Either<String,TransparentDataEncryptionStatus>> status,
        @Nullable Input<String> transparentDataEncryptionName,
        Input<String> workspaceName) {
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sqlPoolName = Objects.requireNonNull(sqlPoolName, "expected parameter 'sqlPoolName' to be non-null");
        this.status = status;
        this.transparentDataEncryptionName = transparentDataEncryptionName;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private SqlPoolTransparentDataEncryptionArgs() {
        this.resourceGroupName = Input.empty();
        this.sqlPoolName = Input.empty();
        this.status = Input.empty();
        this.transparentDataEncryptionName = Input.empty();
        this.workspaceName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlPoolTransparentDataEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> resourceGroupName;
        private Input<String> sqlPoolName;
        private @Nullable Input<Either<String,TransparentDataEncryptionStatus>> status;
        private @Nullable Input<String> transparentDataEncryptionName;
        private Input<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlPoolTransparentDataEncryptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sqlPoolName = defaults.sqlPoolName;
    	      this.status = defaults.status;
    	      this.transparentDataEncryptionName = defaults.transparentDataEncryptionName;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder sqlPoolName(Input<String> sqlPoolName) {
            this.sqlPoolName = Objects.requireNonNull(sqlPoolName);
            return this;
        }

        public Builder sqlPoolName(String sqlPoolName) {
            this.sqlPoolName = Input.of(Objects.requireNonNull(sqlPoolName));
            return this;
        }

        public Builder status(@Nullable Input<Either<String,TransparentDataEncryptionStatus>> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable Either<String,TransparentDataEncryptionStatus> status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder transparentDataEncryptionName(@Nullable Input<String> transparentDataEncryptionName) {
            this.transparentDataEncryptionName = transparentDataEncryptionName;
            return this;
        }

        public Builder transparentDataEncryptionName(@Nullable String transparentDataEncryptionName) {
            this.transparentDataEncryptionName = Input.ofNullable(transparentDataEncryptionName);
            return this;
        }

        public Builder workspaceName(Input<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Input.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public SqlPoolTransparentDataEncryptionArgs build() {
            return new SqlPoolTransparentDataEncryptionArgs(resourceGroupName, sqlPoolName, status, transparentDataEncryptionName, workspaceName);
        }
    }
}
