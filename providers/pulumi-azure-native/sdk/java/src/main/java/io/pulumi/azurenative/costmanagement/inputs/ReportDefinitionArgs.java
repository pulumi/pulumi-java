// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement.inputs;

import io.pulumi.azurenative.costmanagement.enums.ReportType;
import io.pulumi.azurenative.costmanagement.enums.TimeframeType;
import io.pulumi.azurenative.costmanagement.inputs.ReportDatasetArgs;
import io.pulumi.azurenative.costmanagement.inputs.ReportTimePeriodArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The definition of a report.
 * 
 */
public final class ReportDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReportDefinitionArgs Empty = new ReportDefinitionArgs();

    /**
     * Has definition for data in this report.
     * 
     */
    @InputImport(name="dataset")
      private final @Nullable Input<ReportDatasetArgs> dataset;

    public Input<ReportDatasetArgs> getDataset() {
        return this.dataset == null ? Input.empty() : this.dataset;
    }

    /**
     * Has time period for pulling data for the report.
     * 
     */
    @InputImport(name="timePeriod")
      private final @Nullable Input<ReportTimePeriodArgs> timePeriod;

    public Input<ReportTimePeriodArgs> getTimePeriod() {
        return this.timePeriod == null ? Input.empty() : this.timePeriod;
    }

    /**
     * The time frame for pulling data for the report. If custom, then a specific time period must be provided.
     * 
     */
    @InputImport(name="timeframe", required=true)
      private final Input<Either<String,TimeframeType>> timeframe;

    public Input<Either<String,TimeframeType>> getTimeframe() {
        return this.timeframe;
    }

    /**
     * The type of the report.
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<Either<String,ReportType>> type;

    public Input<Either<String,ReportType>> getType() {
        return this.type;
    }

    public ReportDefinitionArgs(
        @Nullable Input<ReportDatasetArgs> dataset,
        @Nullable Input<ReportTimePeriodArgs> timePeriod,
        Input<Either<String,TimeframeType>> timeframe,
        Input<Either<String,ReportType>> type) {
        this.dataset = dataset;
        this.timePeriod = timePeriod;
        this.timeframe = Objects.requireNonNull(timeframe, "expected parameter 'timeframe' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ReportDefinitionArgs() {
        this.dataset = Input.empty();
        this.timePeriod = Input.empty();
        this.timeframe = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ReportDatasetArgs> dataset;
        private @Nullable Input<ReportTimePeriodArgs> timePeriod;
        private Input<Either<String,TimeframeType>> timeframe;
        private Input<Either<String,ReportType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ReportDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.timePeriod = defaults.timePeriod;
    	      this.timeframe = defaults.timeframe;
    	      this.type = defaults.type;
        }

        public Builder dataset(@Nullable Input<ReportDatasetArgs> dataset) {
            this.dataset = dataset;
            return this;
        }

        public Builder dataset(@Nullable ReportDatasetArgs dataset) {
            this.dataset = Input.ofNullable(dataset);
            return this;
        }

        public Builder timePeriod(@Nullable Input<ReportTimePeriodArgs> timePeriod) {
            this.timePeriod = timePeriod;
            return this;
        }

        public Builder timePeriod(@Nullable ReportTimePeriodArgs timePeriod) {
            this.timePeriod = Input.ofNullable(timePeriod);
            return this;
        }

        public Builder timeframe(Input<Either<String,TimeframeType>> timeframe) {
            this.timeframe = Objects.requireNonNull(timeframe);
            return this;
        }

        public Builder timeframe(Either<String,TimeframeType> timeframe) {
            this.timeframe = Input.of(Objects.requireNonNull(timeframe));
            return this;
        }

        public Builder type(Input<Either<String,ReportType>> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(Either<String,ReportType> type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }
        public ReportDefinitionArgs build() {
            return new ReportDefinitionArgs(dataset, timePeriod, timeframe, type);
        }
    }
}
