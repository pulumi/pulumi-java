// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databox.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Details of the managed disks.
 * 
 */
public final class ManagedDiskDetailsArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagedDiskDetailsArgs Empty = new ManagedDiskDetailsArgs();

    /**
     * Account Type of the data to be transferred.
     * Expected value is 'ManagedDisk'.
     * 
     */
    @InputImport(name="dataAccountType", required=true)
      private final Input<String> dataAccountType;

    public Input<String> getDataAccountType() {
        return this.dataAccountType;
    }

    /**
     * Resource Group Id of the compute disks.
     * 
     */
    @InputImport(name="resourceGroupId", required=true)
      private final Input<String> resourceGroupId;

    public Input<String> getResourceGroupId() {
        return this.resourceGroupId;
    }

    /**
     * Password for all the shares to be created on the device. Should not be passed for TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements :  Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets, numbers and these characters : @#\-$%^!+=;:_()]+
     * 
     */
    @InputImport(name="sharePassword")
      private final @Nullable Input<String> sharePassword;

    public Input<String> getSharePassword() {
        return this.sharePassword == null ? Input.empty() : this.sharePassword;
    }

    /**
     * Resource Id of the storage account that can be used to copy the vhd for staging.
     * 
     */
    @InputImport(name="stagingStorageAccountId", required=true)
      private final Input<String> stagingStorageAccountId;

    public Input<String> getStagingStorageAccountId() {
        return this.stagingStorageAccountId;
    }

    public ManagedDiskDetailsArgs(
        Input<String> dataAccountType,
        Input<String> resourceGroupId,
        @Nullable Input<String> sharePassword,
        Input<String> stagingStorageAccountId) {
        this.dataAccountType = dataAccountType == null ? Input.ofNullable("StorageAccount") : Objects.requireNonNull(dataAccountType, "expected parameter 'dataAccountType' to be non-null");
        this.resourceGroupId = Objects.requireNonNull(resourceGroupId, "expected parameter 'resourceGroupId' to be non-null");
        this.sharePassword = sharePassword;
        this.stagingStorageAccountId = Objects.requireNonNull(stagingStorageAccountId, "expected parameter 'stagingStorageAccountId' to be non-null");
    }

    private ManagedDiskDetailsArgs() {
        this.dataAccountType = Input.empty();
        this.resourceGroupId = Input.empty();
        this.sharePassword = Input.empty();
        this.stagingStorageAccountId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedDiskDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> dataAccountType;
        private Input<String> resourceGroupId;
        private @Nullable Input<String> sharePassword;
        private Input<String> stagingStorageAccountId;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedDiskDetailsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataAccountType = defaults.dataAccountType;
    	      this.resourceGroupId = defaults.resourceGroupId;
    	      this.sharePassword = defaults.sharePassword;
    	      this.stagingStorageAccountId = defaults.stagingStorageAccountId;
        }

        public Builder setDataAccountType(Input<String> dataAccountType) {
            this.dataAccountType = Objects.requireNonNull(dataAccountType);
            return this;
        }

        public Builder setDataAccountType(String dataAccountType) {
            this.dataAccountType = Input.of(Objects.requireNonNull(dataAccountType));
            return this;
        }

        public Builder setResourceGroupId(Input<String> resourceGroupId) {
            this.resourceGroupId = Objects.requireNonNull(resourceGroupId);
            return this;
        }

        public Builder setResourceGroupId(String resourceGroupId) {
            this.resourceGroupId = Input.of(Objects.requireNonNull(resourceGroupId));
            return this;
        }

        public Builder setSharePassword(@Nullable Input<String> sharePassword) {
            this.sharePassword = sharePassword;
            return this;
        }

        public Builder setSharePassword(@Nullable String sharePassword) {
            this.sharePassword = Input.ofNullable(sharePassword);
            return this;
        }

        public Builder setStagingStorageAccountId(Input<String> stagingStorageAccountId) {
            this.stagingStorageAccountId = Objects.requireNonNull(stagingStorageAccountId);
            return this;
        }

        public Builder setStagingStorageAccountId(String stagingStorageAccountId) {
            this.stagingStorageAccountId = Input.of(Objects.requireNonNull(stagingStorageAccountId));
            return this;
        }
        public ManagedDiskDetailsArgs build() {
            return new ManagedDiskDetailsArgs(dataAccountType, resourceGroupId, sharePassword, stagingStorageAccountId);
        }
    }
}
