// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualRouterArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualRouterArgs Empty = new VirtualRouterArgs();

    /**
     * The Gateway on which VirtualRouter is hosted.
     * 
     */
    @InputImport(name="hostedGateway")
        private final @Nullable Input<SubResourceArgs> hostedGateway;

    public Input<SubResourceArgs> getHostedGateway() {
        return this.hostedGateway == null ? Input.empty() : this.hostedGateway;
    }

    /**
     * The Subnet on which VirtualRouter is hosted.
     * 
     */
    @InputImport(name="hostedSubnet")
        private final @Nullable Input<SubResourceArgs> hostedSubnet;

    public Input<SubResourceArgs> getHostedSubnet() {
        return this.hostedSubnet == null ? Input.empty() : this.hostedSubnet;
    }

    /**
     * Resource ID.
     * 
     */
    @InputImport(name="id")
        private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * Resource location.
     * 
     */
    @InputImport(name="location")
        private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
        private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * VirtualRouter ASN.
     * 
     */
    @InputImport(name="virtualRouterAsn")
        private final @Nullable Input<Double> virtualRouterAsn;

    public Input<Double> getVirtualRouterAsn() {
        return this.virtualRouterAsn == null ? Input.empty() : this.virtualRouterAsn;
    }

    /**
     * VirtualRouter IPs.
     * 
     */
    @InputImport(name="virtualRouterIps")
        private final @Nullable Input<List<String>> virtualRouterIps;

    public Input<List<String>> getVirtualRouterIps() {
        return this.virtualRouterIps == null ? Input.empty() : this.virtualRouterIps;
    }

    /**
     * The name of the Virtual Router.
     * 
     */
    @InputImport(name="virtualRouterName")
        private final @Nullable Input<String> virtualRouterName;

    public Input<String> getVirtualRouterName() {
        return this.virtualRouterName == null ? Input.empty() : this.virtualRouterName;
    }

    public VirtualRouterArgs(
        @Nullable Input<SubResourceArgs> hostedGateway,
        @Nullable Input<SubResourceArgs> hostedSubnet,
        @Nullable Input<String> id,
        @Nullable Input<String> location,
        Input<String> resourceGroupName,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Double> virtualRouterAsn,
        @Nullable Input<List<String>> virtualRouterIps,
        @Nullable Input<String> virtualRouterName) {
        this.hostedGateway = hostedGateway;
        this.hostedSubnet = hostedSubnet;
        this.id = id;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.virtualRouterAsn = virtualRouterAsn;
        this.virtualRouterIps = virtualRouterIps;
        this.virtualRouterName = virtualRouterName;
    }

    private VirtualRouterArgs() {
        this.hostedGateway = Input.empty();
        this.hostedSubnet = Input.empty();
        this.id = Input.empty();
        this.location = Input.empty();
        this.resourceGroupName = Input.empty();
        this.tags = Input.empty();
        this.virtualRouterAsn = Input.empty();
        this.virtualRouterIps = Input.empty();
        this.virtualRouterName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualRouterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<SubResourceArgs> hostedGateway;
        private @Nullable Input<SubResourceArgs> hostedSubnet;
        private @Nullable Input<String> id;
        private @Nullable Input<String> location;
        private Input<String> resourceGroupName;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Double> virtualRouterAsn;
        private @Nullable Input<List<String>> virtualRouterIps;
        private @Nullable Input<String> virtualRouterName;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualRouterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostedGateway = defaults.hostedGateway;
    	      this.hostedSubnet = defaults.hostedSubnet;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.virtualRouterAsn = defaults.virtualRouterAsn;
    	      this.virtualRouterIps = defaults.virtualRouterIps;
    	      this.virtualRouterName = defaults.virtualRouterName;
        }

        public Builder setHostedGateway(@Nullable Input<SubResourceArgs> hostedGateway) {
            this.hostedGateway = hostedGateway;
            return this;
        }

        public Builder setHostedGateway(@Nullable SubResourceArgs hostedGateway) {
            this.hostedGateway = Input.ofNullable(hostedGateway);
            return this;
        }

        public Builder setHostedSubnet(@Nullable Input<SubResourceArgs> hostedSubnet) {
            this.hostedSubnet = hostedSubnet;
            return this;
        }

        public Builder setHostedSubnet(@Nullable SubResourceArgs hostedSubnet) {
            this.hostedSubnet = Input.ofNullable(hostedSubnet);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVirtualRouterAsn(@Nullable Input<Double> virtualRouterAsn) {
            this.virtualRouterAsn = virtualRouterAsn;
            return this;
        }

        public Builder setVirtualRouterAsn(@Nullable Double virtualRouterAsn) {
            this.virtualRouterAsn = Input.ofNullable(virtualRouterAsn);
            return this;
        }

        public Builder setVirtualRouterIps(@Nullable Input<List<String>> virtualRouterIps) {
            this.virtualRouterIps = virtualRouterIps;
            return this;
        }

        public Builder setVirtualRouterIps(@Nullable List<String> virtualRouterIps) {
            this.virtualRouterIps = Input.ofNullable(virtualRouterIps);
            return this;
        }

        public Builder setVirtualRouterName(@Nullable Input<String> virtualRouterName) {
            this.virtualRouterName = virtualRouterName;
            return this;
        }

        public Builder setVirtualRouterName(@Nullable String virtualRouterName) {
            this.virtualRouterName = Input.ofNullable(virtualRouterName);
            return this;
        }
        public VirtualRouterArgs build() {
            return new VirtualRouterArgs(hostedGateway, hostedSubnet, id, location, resourceGroupName, tags, virtualRouterAsn, virtualRouterIps, virtualRouterName);
        }
    }
}
