// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabric.inputs;

import io.pulumi.azurenative.servicefabric.inputs.ClusterHealthPolicyArgs;
import io.pulumi.azurenative.servicefabric.inputs.ClusterUpgradeDeltaHealthPolicyArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the policy used when upgrading the cluster.
 * 
 */
public final class ClusterUpgradePolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClusterUpgradePolicyArgs Empty = new ClusterUpgradePolicyArgs();

    /**
     * The cluster delta health policy used when upgrading the cluster.
     * 
     */
    @Import(name="deltaHealthPolicy")
      private final @Nullable Output<ClusterUpgradeDeltaHealthPolicyArgs> deltaHealthPolicy;

    public Output<ClusterUpgradeDeltaHealthPolicyArgs> getDeltaHealthPolicy() {
        return this.deltaHealthPolicy == null ? Codegen.empty() : this.deltaHealthPolicy;
    }

    /**
     * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     * 
     */
    @Import(name="forceRestart")
      private final @Nullable Output<Boolean> forceRestart;

    public Output<Boolean> getForceRestart() {
        return this.forceRestart == null ? Codegen.empty() : this.forceRestart;
    }

    /**
     * The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    @Import(name="healthCheckRetryTimeout", required=true)
      private final Output<String> healthCheckRetryTimeout;

    public Output<String> getHealthCheckRetryTimeout() {
        return this.healthCheckRetryTimeout;
    }

    /**
     * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    @Import(name="healthCheckStableDuration", required=true)
      private final Output<String> healthCheckStableDuration;

    public Output<String> getHealthCheckStableDuration() {
        return this.healthCheckStableDuration;
    }

    /**
     * The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    @Import(name="healthCheckWaitDuration", required=true)
      private final Output<String> healthCheckWaitDuration;

    public Output<String> getHealthCheckWaitDuration() {
        return this.healthCheckWaitDuration;
    }

    /**
     * The cluster health policy used when upgrading the cluster.
     * 
     */
    @Import(name="healthPolicy", required=true)
      private final Output<ClusterHealthPolicyArgs> healthPolicy;

    public Output<ClusterHealthPolicyArgs> getHealthPolicy() {
        return this.healthPolicy;
    }

    /**
     * The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    @Import(name="upgradeDomainTimeout", required=true)
      private final Output<String> upgradeDomainTimeout;

    public Output<String> getUpgradeDomainTimeout() {
        return this.upgradeDomainTimeout;
    }

    /**
     * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    @Import(name="upgradeReplicaSetCheckTimeout", required=true)
      private final Output<String> upgradeReplicaSetCheckTimeout;

    public Output<String> getUpgradeReplicaSetCheckTimeout() {
        return this.upgradeReplicaSetCheckTimeout;
    }

    /**
     * The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    @Import(name="upgradeTimeout", required=true)
      private final Output<String> upgradeTimeout;

    public Output<String> getUpgradeTimeout() {
        return this.upgradeTimeout;
    }

    public ClusterUpgradePolicyArgs(
        @Nullable Output<ClusterUpgradeDeltaHealthPolicyArgs> deltaHealthPolicy,
        @Nullable Output<Boolean> forceRestart,
        Output<String> healthCheckRetryTimeout,
        Output<String> healthCheckStableDuration,
        Output<String> healthCheckWaitDuration,
        Output<ClusterHealthPolicyArgs> healthPolicy,
        Output<String> upgradeDomainTimeout,
        Output<String> upgradeReplicaSetCheckTimeout,
        Output<String> upgradeTimeout) {
        this.deltaHealthPolicy = deltaHealthPolicy;
        this.forceRestart = forceRestart;
        this.healthCheckRetryTimeout = Objects.requireNonNull(healthCheckRetryTimeout, "expected parameter 'healthCheckRetryTimeout' to be non-null");
        this.healthCheckStableDuration = Objects.requireNonNull(healthCheckStableDuration, "expected parameter 'healthCheckStableDuration' to be non-null");
        this.healthCheckWaitDuration = Objects.requireNonNull(healthCheckWaitDuration, "expected parameter 'healthCheckWaitDuration' to be non-null");
        this.healthPolicy = Objects.requireNonNull(healthPolicy, "expected parameter 'healthPolicy' to be non-null");
        this.upgradeDomainTimeout = Objects.requireNonNull(upgradeDomainTimeout, "expected parameter 'upgradeDomainTimeout' to be non-null");
        this.upgradeReplicaSetCheckTimeout = Objects.requireNonNull(upgradeReplicaSetCheckTimeout, "expected parameter 'upgradeReplicaSetCheckTimeout' to be non-null");
        this.upgradeTimeout = Objects.requireNonNull(upgradeTimeout, "expected parameter 'upgradeTimeout' to be non-null");
    }

    private ClusterUpgradePolicyArgs() {
        this.deltaHealthPolicy = Codegen.empty();
        this.forceRestart = Codegen.empty();
        this.healthCheckRetryTimeout = Codegen.empty();
        this.healthCheckStableDuration = Codegen.empty();
        this.healthCheckWaitDuration = Codegen.empty();
        this.healthPolicy = Codegen.empty();
        this.upgradeDomainTimeout = Codegen.empty();
        this.upgradeReplicaSetCheckTimeout = Codegen.empty();
        this.upgradeTimeout = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterUpgradePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ClusterUpgradeDeltaHealthPolicyArgs> deltaHealthPolicy;
        private @Nullable Output<Boolean> forceRestart;
        private Output<String> healthCheckRetryTimeout;
        private Output<String> healthCheckStableDuration;
        private Output<String> healthCheckWaitDuration;
        private Output<ClusterHealthPolicyArgs> healthPolicy;
        private Output<String> upgradeDomainTimeout;
        private Output<String> upgradeReplicaSetCheckTimeout;
        private Output<String> upgradeTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterUpgradePolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deltaHealthPolicy = defaults.deltaHealthPolicy;
    	      this.forceRestart = defaults.forceRestart;
    	      this.healthCheckRetryTimeout = defaults.healthCheckRetryTimeout;
    	      this.healthCheckStableDuration = defaults.healthCheckStableDuration;
    	      this.healthCheckWaitDuration = defaults.healthCheckWaitDuration;
    	      this.healthPolicy = defaults.healthPolicy;
    	      this.upgradeDomainTimeout = defaults.upgradeDomainTimeout;
    	      this.upgradeReplicaSetCheckTimeout = defaults.upgradeReplicaSetCheckTimeout;
    	      this.upgradeTimeout = defaults.upgradeTimeout;
        }

        public Builder deltaHealthPolicy(@Nullable Output<ClusterUpgradeDeltaHealthPolicyArgs> deltaHealthPolicy) {
            this.deltaHealthPolicy = deltaHealthPolicy;
            return this;
        }
        public Builder deltaHealthPolicy(@Nullable ClusterUpgradeDeltaHealthPolicyArgs deltaHealthPolicy) {
            this.deltaHealthPolicy = Codegen.ofNullable(deltaHealthPolicy);
            return this;
        }
        public Builder forceRestart(@Nullable Output<Boolean> forceRestart) {
            this.forceRestart = forceRestart;
            return this;
        }
        public Builder forceRestart(@Nullable Boolean forceRestart) {
            this.forceRestart = Codegen.ofNullable(forceRestart);
            return this;
        }
        public Builder healthCheckRetryTimeout(Output<String> healthCheckRetryTimeout) {
            this.healthCheckRetryTimeout = Objects.requireNonNull(healthCheckRetryTimeout);
            return this;
        }
        public Builder healthCheckRetryTimeout(String healthCheckRetryTimeout) {
            this.healthCheckRetryTimeout = Output.of(Objects.requireNonNull(healthCheckRetryTimeout));
            return this;
        }
        public Builder healthCheckStableDuration(Output<String> healthCheckStableDuration) {
            this.healthCheckStableDuration = Objects.requireNonNull(healthCheckStableDuration);
            return this;
        }
        public Builder healthCheckStableDuration(String healthCheckStableDuration) {
            this.healthCheckStableDuration = Output.of(Objects.requireNonNull(healthCheckStableDuration));
            return this;
        }
        public Builder healthCheckWaitDuration(Output<String> healthCheckWaitDuration) {
            this.healthCheckWaitDuration = Objects.requireNonNull(healthCheckWaitDuration);
            return this;
        }
        public Builder healthCheckWaitDuration(String healthCheckWaitDuration) {
            this.healthCheckWaitDuration = Output.of(Objects.requireNonNull(healthCheckWaitDuration));
            return this;
        }
        public Builder healthPolicy(Output<ClusterHealthPolicyArgs> healthPolicy) {
            this.healthPolicy = Objects.requireNonNull(healthPolicy);
            return this;
        }
        public Builder healthPolicy(ClusterHealthPolicyArgs healthPolicy) {
            this.healthPolicy = Output.of(Objects.requireNonNull(healthPolicy));
            return this;
        }
        public Builder upgradeDomainTimeout(Output<String> upgradeDomainTimeout) {
            this.upgradeDomainTimeout = Objects.requireNonNull(upgradeDomainTimeout);
            return this;
        }
        public Builder upgradeDomainTimeout(String upgradeDomainTimeout) {
            this.upgradeDomainTimeout = Output.of(Objects.requireNonNull(upgradeDomainTimeout));
            return this;
        }
        public Builder upgradeReplicaSetCheckTimeout(Output<String> upgradeReplicaSetCheckTimeout) {
            this.upgradeReplicaSetCheckTimeout = Objects.requireNonNull(upgradeReplicaSetCheckTimeout);
            return this;
        }
        public Builder upgradeReplicaSetCheckTimeout(String upgradeReplicaSetCheckTimeout) {
            this.upgradeReplicaSetCheckTimeout = Output.of(Objects.requireNonNull(upgradeReplicaSetCheckTimeout));
            return this;
        }
        public Builder upgradeTimeout(Output<String> upgradeTimeout) {
            this.upgradeTimeout = Objects.requireNonNull(upgradeTimeout);
            return this;
        }
        public Builder upgradeTimeout(String upgradeTimeout) {
            this.upgradeTimeout = Output.of(Objects.requireNonNull(upgradeTimeout));
            return this;
        }        public ClusterUpgradePolicyArgs build() {
            return new ClusterUpgradePolicyArgs(deltaHealthPolicy, forceRestart, healthCheckRetryTimeout, healthCheckStableDuration, healthCheckWaitDuration, healthPolicy, upgradeDomainTimeout, upgradeReplicaSetCheckTimeout, upgradeTimeout);
        }
    }
}
