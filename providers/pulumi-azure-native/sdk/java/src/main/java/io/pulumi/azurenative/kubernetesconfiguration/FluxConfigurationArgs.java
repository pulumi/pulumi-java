// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.kubernetesconfiguration;

import io.pulumi.azurenative.kubernetesconfiguration.enums.ScopeType;
import io.pulumi.azurenative.kubernetesconfiguration.enums.SourceKindType;
import io.pulumi.azurenative.kubernetesconfiguration.inputs.GitRepositoryDefinitionArgs;
import io.pulumi.azurenative.kubernetesconfiguration.inputs.KustomizationDefinitionArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FluxConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final FluxConfigurationArgs Empty = new FluxConfigurationArgs();

    /**
     * The name of the kubernetes cluster.
     * 
     */
    @InputImport(name="clusterName", required=true)
      private final Input<String> clusterName;

    public Input<String> getClusterName() {
        return this.clusterName;
    }

    /**
     * The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters).
     * 
     */
    @InputImport(name="clusterResourceName", required=true)
      private final Input<String> clusterResourceName;

    public Input<String> getClusterResourceName() {
        return this.clusterResourceName;
    }

    /**
     * The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters).
     * 
     */
    @InputImport(name="clusterRp", required=true)
      private final Input<String> clusterRp;

    public Input<String> getClusterRp() {
        return this.clusterRp;
    }

    /**
     * Key-value pairs of protected configuration settings for the configuration
     * 
     */
    @InputImport(name="configurationProtectedSettings")
      private final @Nullable Input<Map<String,String>> configurationProtectedSettings;

    public Input<Map<String,String>> getConfigurationProtectedSettings() {
        return this.configurationProtectedSettings == null ? Input.empty() : this.configurationProtectedSettings;
    }

    /**
     * Name of the Flux Configuration.
     * 
     */
    @InputImport(name="fluxConfigurationName")
      private final @Nullable Input<String> fluxConfigurationName;

    public Input<String> getFluxConfigurationName() {
        return this.fluxConfigurationName == null ? Input.empty() : this.fluxConfigurationName;
    }

    /**
     * Parameters to reconcile to the GitRepository source kind type.
     * 
     */
    @InputImport(name="gitRepository")
      private final @Nullable Input<GitRepositoryDefinitionArgs> gitRepository;

    public Input<GitRepositoryDefinitionArgs> getGitRepository() {
        return this.gitRepository == null ? Input.empty() : this.gitRepository;
    }

    /**
     * Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster.
     * 
     */
    @InputImport(name="kustomizations")
      private final @Nullable Input<Map<String,KustomizationDefinitionArgs>> kustomizations;

    public Input<Map<String,KustomizationDefinitionArgs>> getKustomizations() {
        return this.kustomizations == null ? Input.empty() : this.kustomizations;
    }

    /**
     * The namespace to which this configuration is installed to. Maximum of 253 lower case alphanumeric characters, hyphen and period only.
     * 
     */
    @InputImport(name="namespace")
      private final @Nullable Input<String> namespace;

    public Input<String> getNamespace() {
        return this.namespace == null ? Input.empty() : this.namespace;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Scope at which the operator will be installed.
     * 
     */
    @InputImport(name="scope")
      private final @Nullable Input<Either<String,ScopeType>> scope;

    public Input<Either<String,ScopeType>> getScope() {
        return this.scope == null ? Input.empty() : this.scope;
    }

    /**
     * Source Kind to pull the configuration data from.
     * 
     */
    @InputImport(name="sourceKind")
      private final @Nullable Input<Either<String,SourceKindType>> sourceKind;

    public Input<Either<String,SourceKindType>> getSourceKind() {
        return this.sourceKind == null ? Input.empty() : this.sourceKind;
    }

    /**
     * Whether this configuration should suspend its reconciliation of its kustomizations and sources.
     * 
     */
    @InputImport(name="suspend")
      private final @Nullable Input<Boolean> suspend;

    public Input<Boolean> getSuspend() {
        return this.suspend == null ? Input.empty() : this.suspend;
    }

    public FluxConfigurationArgs(
        Input<String> clusterName,
        Input<String> clusterResourceName,
        Input<String> clusterRp,
        @Nullable Input<Map<String,String>> configurationProtectedSettings,
        @Nullable Input<String> fluxConfigurationName,
        @Nullable Input<GitRepositoryDefinitionArgs> gitRepository,
        @Nullable Input<Map<String,KustomizationDefinitionArgs>> kustomizations,
        @Nullable Input<String> namespace,
        Input<String> resourceGroupName,
        @Nullable Input<Either<String,ScopeType>> scope,
        @Nullable Input<Either<String,SourceKindType>> sourceKind,
        @Nullable Input<Boolean> suspend) {
        this.clusterName = Objects.requireNonNull(clusterName, "expected parameter 'clusterName' to be non-null");
        this.clusterResourceName = Objects.requireNonNull(clusterResourceName, "expected parameter 'clusterResourceName' to be non-null");
        this.clusterRp = Objects.requireNonNull(clusterRp, "expected parameter 'clusterRp' to be non-null");
        this.configurationProtectedSettings = configurationProtectedSettings;
        this.fluxConfigurationName = fluxConfigurationName;
        this.gitRepository = gitRepository;
        this.kustomizations = kustomizations;
        this.namespace = namespace == null ? Input.ofNullable("default") : namespace;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scope = scope;
        this.sourceKind = sourceKind;
        this.suspend = suspend == null ? Input.ofNullable(false) : suspend;
    }

    private FluxConfigurationArgs() {
        this.clusterName = Input.empty();
        this.clusterResourceName = Input.empty();
        this.clusterRp = Input.empty();
        this.configurationProtectedSettings = Input.empty();
        this.fluxConfigurationName = Input.empty();
        this.gitRepository = Input.empty();
        this.kustomizations = Input.empty();
        this.namespace = Input.empty();
        this.resourceGroupName = Input.empty();
        this.scope = Input.empty();
        this.sourceKind = Input.empty();
        this.suspend = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FluxConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> clusterName;
        private Input<String> clusterResourceName;
        private Input<String> clusterRp;
        private @Nullable Input<Map<String,String>> configurationProtectedSettings;
        private @Nullable Input<String> fluxConfigurationName;
        private @Nullable Input<GitRepositoryDefinitionArgs> gitRepository;
        private @Nullable Input<Map<String,KustomizationDefinitionArgs>> kustomizations;
        private @Nullable Input<String> namespace;
        private Input<String> resourceGroupName;
        private @Nullable Input<Either<String,ScopeType>> scope;
        private @Nullable Input<Either<String,SourceKindType>> sourceKind;
        private @Nullable Input<Boolean> suspend;

        public Builder() {
    	      // Empty
        }

        public Builder(FluxConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterName = defaults.clusterName;
    	      this.clusterResourceName = defaults.clusterResourceName;
    	      this.clusterRp = defaults.clusterRp;
    	      this.configurationProtectedSettings = defaults.configurationProtectedSettings;
    	      this.fluxConfigurationName = defaults.fluxConfigurationName;
    	      this.gitRepository = defaults.gitRepository;
    	      this.kustomizations = defaults.kustomizations;
    	      this.namespace = defaults.namespace;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scope = defaults.scope;
    	      this.sourceKind = defaults.sourceKind;
    	      this.suspend = defaults.suspend;
        }

        public Builder clusterName(Input<String> clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }

        public Builder clusterName(String clusterName) {
            this.clusterName = Input.of(Objects.requireNonNull(clusterName));
            return this;
        }

        public Builder clusterResourceName(Input<String> clusterResourceName) {
            this.clusterResourceName = Objects.requireNonNull(clusterResourceName);
            return this;
        }

        public Builder clusterResourceName(String clusterResourceName) {
            this.clusterResourceName = Input.of(Objects.requireNonNull(clusterResourceName));
            return this;
        }

        public Builder clusterRp(Input<String> clusterRp) {
            this.clusterRp = Objects.requireNonNull(clusterRp);
            return this;
        }

        public Builder clusterRp(String clusterRp) {
            this.clusterRp = Input.of(Objects.requireNonNull(clusterRp));
            return this;
        }

        public Builder configurationProtectedSettings(@Nullable Input<Map<String,String>> configurationProtectedSettings) {
            this.configurationProtectedSettings = configurationProtectedSettings;
            return this;
        }

        public Builder configurationProtectedSettings(@Nullable Map<String,String> configurationProtectedSettings) {
            this.configurationProtectedSettings = Input.ofNullable(configurationProtectedSettings);
            return this;
        }

        public Builder fluxConfigurationName(@Nullable Input<String> fluxConfigurationName) {
            this.fluxConfigurationName = fluxConfigurationName;
            return this;
        }

        public Builder fluxConfigurationName(@Nullable String fluxConfigurationName) {
            this.fluxConfigurationName = Input.ofNullable(fluxConfigurationName);
            return this;
        }

        public Builder gitRepository(@Nullable Input<GitRepositoryDefinitionArgs> gitRepository) {
            this.gitRepository = gitRepository;
            return this;
        }

        public Builder gitRepository(@Nullable GitRepositoryDefinitionArgs gitRepository) {
            this.gitRepository = Input.ofNullable(gitRepository);
            return this;
        }

        public Builder kustomizations(@Nullable Input<Map<String,KustomizationDefinitionArgs>> kustomizations) {
            this.kustomizations = kustomizations;
            return this;
        }

        public Builder kustomizations(@Nullable Map<String,KustomizationDefinitionArgs> kustomizations) {
            this.kustomizations = Input.ofNullable(kustomizations);
            return this;
        }

        public Builder namespace(@Nullable Input<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder namespace(@Nullable String namespace) {
            this.namespace = Input.ofNullable(namespace);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder scope(@Nullable Input<Either<String,ScopeType>> scope) {
            this.scope = scope;
            return this;
        }

        public Builder scope(@Nullable Either<String,ScopeType> scope) {
            this.scope = Input.ofNullable(scope);
            return this;
        }

        public Builder sourceKind(@Nullable Input<Either<String,SourceKindType>> sourceKind) {
            this.sourceKind = sourceKind;
            return this;
        }

        public Builder sourceKind(@Nullable Either<String,SourceKindType> sourceKind) {
            this.sourceKind = Input.ofNullable(sourceKind);
            return this;
        }

        public Builder suspend(@Nullable Input<Boolean> suspend) {
            this.suspend = suspend;
            return this;
        }

        public Builder suspend(@Nullable Boolean suspend) {
            this.suspend = Input.ofNullable(suspend);
            return this;
        }
        public FluxConfigurationArgs build() {
            return new FluxConfigurationArgs(clusterName, clusterResourceName, clusterRp, configurationProtectedSettings, fluxConfigurationName, gitRepository, kustomizations, namespace, resourceGroupName, scope, sourceKind, suspend);
        }
    }
}
