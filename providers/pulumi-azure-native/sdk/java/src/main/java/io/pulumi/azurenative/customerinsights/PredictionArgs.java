// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights;

import io.pulumi.azurenative.customerinsights.inputs.PredictionGradesArgs;
import io.pulumi.azurenative.customerinsights.inputs.PredictionMappingsArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PredictionArgs extends io.pulumi.resources.ResourceArgs {

    public static final PredictionArgs Empty = new PredictionArgs();

    /**
     * Whether do auto analyze.
     * 
     */
    @InputImport(name="autoAnalyze", required=true)
    private final Input<Boolean> autoAnalyze;

    public Input<Boolean> getAutoAnalyze() {
        return this.autoAnalyze;
    }

    /**
     * Description of the prediction.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<Map<String,String>> description;

    public Input<Map<String,String>> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Display name of the prediction.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<Map<String,String>> displayName;

    public Input<Map<String,String>> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * The prediction grades.
     * 
     */
    @InputImport(name="grades")
    private final @Nullable Input<List<PredictionGradesArgs>> grades;

    public Input<List<PredictionGradesArgs>> getGrades() {
        return this.grades == null ? Input.empty() : this.grades;
    }

    /**
     * The name of the hub.
     * 
     */
    @InputImport(name="hubName", required=true)
    private final Input<String> hubName;

    public Input<String> getHubName() {
        return this.hubName;
    }

    /**
     * Interaction types involved in the prediction.
     * 
     */
    @InputImport(name="involvedInteractionTypes")
    private final @Nullable Input<List<String>> involvedInteractionTypes;

    public Input<List<String>> getInvolvedInteractionTypes() {
        return this.involvedInteractionTypes == null ? Input.empty() : this.involvedInteractionTypes;
    }

    /**
     * KPI types involved in the prediction.
     * 
     */
    @InputImport(name="involvedKpiTypes")
    private final @Nullable Input<List<String>> involvedKpiTypes;

    public Input<List<String>> getInvolvedKpiTypes() {
        return this.involvedKpiTypes == null ? Input.empty() : this.involvedKpiTypes;
    }

    /**
     * Relationships involved in the prediction.
     * 
     */
    @InputImport(name="involvedRelationships")
    private final @Nullable Input<List<String>> involvedRelationships;

    public Input<List<String>> getInvolvedRelationships() {
        return this.involvedRelationships == null ? Input.empty() : this.involvedRelationships;
    }

    /**
     * Definition of the link mapping of prediction.
     * 
     */
    @InputImport(name="mappings", required=true)
    private final Input<PredictionMappingsArgs> mappings;

    public Input<PredictionMappingsArgs> getMappings() {
        return this.mappings;
    }

    /**
     * Negative outcome expression.
     * 
     */
    @InputImport(name="negativeOutcomeExpression", required=true)
    private final Input<String> negativeOutcomeExpression;

    public Input<String> getNegativeOutcomeExpression() {
        return this.negativeOutcomeExpression;
    }

    /**
     * Positive outcome expression.
     * 
     */
    @InputImport(name="positiveOutcomeExpression", required=true)
    private final Input<String> positiveOutcomeExpression;

    public Input<String> getPositiveOutcomeExpression() {
        return this.positiveOutcomeExpression;
    }

    /**
     * Name of the prediction.
     * 
     */
    @InputImport(name="predictionName")
    private final @Nullable Input<String> predictionName;

    public Input<String> getPredictionName() {
        return this.predictionName == null ? Input.empty() : this.predictionName;
    }

    /**
     * Primary profile type.
     * 
     */
    @InputImport(name="primaryProfileType", required=true)
    private final Input<String> primaryProfileType;

    public Input<String> getPrimaryProfileType() {
        return this.primaryProfileType;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Scope expression.
     * 
     */
    @InputImport(name="scopeExpression", required=true)
    private final Input<String> scopeExpression;

    public Input<String> getScopeExpression() {
        return this.scopeExpression;
    }

    /**
     * Score label.
     * 
     */
    @InputImport(name="scoreLabel", required=true)
    private final Input<String> scoreLabel;

    public Input<String> getScoreLabel() {
        return this.scoreLabel;
    }

    public PredictionArgs(
        Input<Boolean> autoAnalyze,
        @Nullable Input<Map<String,String>> description,
        @Nullable Input<Map<String,String>> displayName,
        @Nullable Input<List<PredictionGradesArgs>> grades,
        Input<String> hubName,
        @Nullable Input<List<String>> involvedInteractionTypes,
        @Nullable Input<List<String>> involvedKpiTypes,
        @Nullable Input<List<String>> involvedRelationships,
        Input<PredictionMappingsArgs> mappings,
        Input<String> negativeOutcomeExpression,
        Input<String> positiveOutcomeExpression,
        @Nullable Input<String> predictionName,
        Input<String> primaryProfileType,
        Input<String> resourceGroupName,
        Input<String> scopeExpression,
        Input<String> scoreLabel) {
        this.autoAnalyze = Objects.requireNonNull(autoAnalyze, "expected parameter 'autoAnalyze' to be non-null");
        this.description = description;
        this.displayName = displayName;
        this.grades = grades;
        this.hubName = Objects.requireNonNull(hubName, "expected parameter 'hubName' to be non-null");
        this.involvedInteractionTypes = involvedInteractionTypes;
        this.involvedKpiTypes = involvedKpiTypes;
        this.involvedRelationships = involvedRelationships;
        this.mappings = Objects.requireNonNull(mappings, "expected parameter 'mappings' to be non-null");
        this.negativeOutcomeExpression = Objects.requireNonNull(negativeOutcomeExpression, "expected parameter 'negativeOutcomeExpression' to be non-null");
        this.positiveOutcomeExpression = Objects.requireNonNull(positiveOutcomeExpression, "expected parameter 'positiveOutcomeExpression' to be non-null");
        this.predictionName = predictionName;
        this.primaryProfileType = Objects.requireNonNull(primaryProfileType, "expected parameter 'primaryProfileType' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scopeExpression = Objects.requireNonNull(scopeExpression, "expected parameter 'scopeExpression' to be non-null");
        this.scoreLabel = Objects.requireNonNull(scoreLabel, "expected parameter 'scoreLabel' to be non-null");
    }

    private PredictionArgs() {
        this.autoAnalyze = Input.empty();
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.grades = Input.empty();
        this.hubName = Input.empty();
        this.involvedInteractionTypes = Input.empty();
        this.involvedKpiTypes = Input.empty();
        this.involvedRelationships = Input.empty();
        this.mappings = Input.empty();
        this.negativeOutcomeExpression = Input.empty();
        this.positiveOutcomeExpression = Input.empty();
        this.predictionName = Input.empty();
        this.primaryProfileType = Input.empty();
        this.resourceGroupName = Input.empty();
        this.scopeExpression = Input.empty();
        this.scoreLabel = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PredictionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Boolean> autoAnalyze;
        private @Nullable Input<Map<String,String>> description;
        private @Nullable Input<Map<String,String>> displayName;
        private @Nullable Input<List<PredictionGradesArgs>> grades;
        private Input<String> hubName;
        private @Nullable Input<List<String>> involvedInteractionTypes;
        private @Nullable Input<List<String>> involvedKpiTypes;
        private @Nullable Input<List<String>> involvedRelationships;
        private Input<PredictionMappingsArgs> mappings;
        private Input<String> negativeOutcomeExpression;
        private Input<String> positiveOutcomeExpression;
        private @Nullable Input<String> predictionName;
        private Input<String> primaryProfileType;
        private Input<String> resourceGroupName;
        private Input<String> scopeExpression;
        private Input<String> scoreLabel;

        public Builder() {
    	      // Empty
        }

        public Builder(PredictionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoAnalyze = defaults.autoAnalyze;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.grades = defaults.grades;
    	      this.hubName = defaults.hubName;
    	      this.involvedInteractionTypes = defaults.involvedInteractionTypes;
    	      this.involvedKpiTypes = defaults.involvedKpiTypes;
    	      this.involvedRelationships = defaults.involvedRelationships;
    	      this.mappings = defaults.mappings;
    	      this.negativeOutcomeExpression = defaults.negativeOutcomeExpression;
    	      this.positiveOutcomeExpression = defaults.positiveOutcomeExpression;
    	      this.predictionName = defaults.predictionName;
    	      this.primaryProfileType = defaults.primaryProfileType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scopeExpression = defaults.scopeExpression;
    	      this.scoreLabel = defaults.scoreLabel;
        }

        public Builder setAutoAnalyze(Input<Boolean> autoAnalyze) {
            this.autoAnalyze = Objects.requireNonNull(autoAnalyze);
            return this;
        }

        public Builder setAutoAnalyze(Boolean autoAnalyze) {
            this.autoAnalyze = Input.of(Objects.requireNonNull(autoAnalyze));
            return this;
        }

        public Builder setDescription(@Nullable Input<Map<String,String>> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable Map<String,String> description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<Map<String,String>> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable Map<String,String> displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setGrades(@Nullable Input<List<PredictionGradesArgs>> grades) {
            this.grades = grades;
            return this;
        }

        public Builder setGrades(@Nullable List<PredictionGradesArgs> grades) {
            this.grades = Input.ofNullable(grades);
            return this;
        }

        public Builder setHubName(Input<String> hubName) {
            this.hubName = Objects.requireNonNull(hubName);
            return this;
        }

        public Builder setHubName(String hubName) {
            this.hubName = Input.of(Objects.requireNonNull(hubName));
            return this;
        }

        public Builder setInvolvedInteractionTypes(@Nullable Input<List<String>> involvedInteractionTypes) {
            this.involvedInteractionTypes = involvedInteractionTypes;
            return this;
        }

        public Builder setInvolvedInteractionTypes(@Nullable List<String> involvedInteractionTypes) {
            this.involvedInteractionTypes = Input.ofNullable(involvedInteractionTypes);
            return this;
        }

        public Builder setInvolvedKpiTypes(@Nullable Input<List<String>> involvedKpiTypes) {
            this.involvedKpiTypes = involvedKpiTypes;
            return this;
        }

        public Builder setInvolvedKpiTypes(@Nullable List<String> involvedKpiTypes) {
            this.involvedKpiTypes = Input.ofNullable(involvedKpiTypes);
            return this;
        }

        public Builder setInvolvedRelationships(@Nullable Input<List<String>> involvedRelationships) {
            this.involvedRelationships = involvedRelationships;
            return this;
        }

        public Builder setInvolvedRelationships(@Nullable List<String> involvedRelationships) {
            this.involvedRelationships = Input.ofNullable(involvedRelationships);
            return this;
        }

        public Builder setMappings(Input<PredictionMappingsArgs> mappings) {
            this.mappings = Objects.requireNonNull(mappings);
            return this;
        }

        public Builder setMappings(PredictionMappingsArgs mappings) {
            this.mappings = Input.of(Objects.requireNonNull(mappings));
            return this;
        }

        public Builder setNegativeOutcomeExpression(Input<String> negativeOutcomeExpression) {
            this.negativeOutcomeExpression = Objects.requireNonNull(negativeOutcomeExpression);
            return this;
        }

        public Builder setNegativeOutcomeExpression(String negativeOutcomeExpression) {
            this.negativeOutcomeExpression = Input.of(Objects.requireNonNull(negativeOutcomeExpression));
            return this;
        }

        public Builder setPositiveOutcomeExpression(Input<String> positiveOutcomeExpression) {
            this.positiveOutcomeExpression = Objects.requireNonNull(positiveOutcomeExpression);
            return this;
        }

        public Builder setPositiveOutcomeExpression(String positiveOutcomeExpression) {
            this.positiveOutcomeExpression = Input.of(Objects.requireNonNull(positiveOutcomeExpression));
            return this;
        }

        public Builder setPredictionName(@Nullable Input<String> predictionName) {
            this.predictionName = predictionName;
            return this;
        }

        public Builder setPredictionName(@Nullable String predictionName) {
            this.predictionName = Input.ofNullable(predictionName);
            return this;
        }

        public Builder setPrimaryProfileType(Input<String> primaryProfileType) {
            this.primaryProfileType = Objects.requireNonNull(primaryProfileType);
            return this;
        }

        public Builder setPrimaryProfileType(String primaryProfileType) {
            this.primaryProfileType = Input.of(Objects.requireNonNull(primaryProfileType));
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setScopeExpression(Input<String> scopeExpression) {
            this.scopeExpression = Objects.requireNonNull(scopeExpression);
            return this;
        }

        public Builder setScopeExpression(String scopeExpression) {
            this.scopeExpression = Input.of(Objects.requireNonNull(scopeExpression));
            return this;
        }

        public Builder setScoreLabel(Input<String> scoreLabel) {
            this.scoreLabel = Objects.requireNonNull(scoreLabel);
            return this;
        }

        public Builder setScoreLabel(String scoreLabel) {
            this.scoreLabel = Input.of(Objects.requireNonNull(scoreLabel));
            return this;
        }

        public PredictionArgs build() {
            return new PredictionArgs(autoAnalyze, description, displayName, grades, hubName, involvedInteractionTypes, involvedKpiTypes, involvedRelationships, mappings, negativeOutcomeExpression, positiveOutcomeExpression, predictionName, primaryProfileType, resourceGroupName, scopeExpression, scoreLabel);
        }
    }
}
