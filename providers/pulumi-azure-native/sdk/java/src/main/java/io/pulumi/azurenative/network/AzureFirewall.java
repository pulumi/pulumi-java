// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.network.outputs.AzureFirewallApplicationRuleCollectionResponse;
import io.pulumi.azurenative.network.outputs.AzureFirewallIPConfigurationResponse;
import io.pulumi.azurenative.network.outputs.AzureFirewallIpGroupsResponse;
import io.pulumi.azurenative.network.outputs.AzureFirewallNatRuleCollectionResponse;
import io.pulumi.azurenative.network.outputs.AzureFirewallNetworkRuleCollectionResponse;
import io.pulumi.azurenative.network.outputs.AzureFirewallSkuResponse;
import io.pulumi.azurenative.network.outputs.HubIPAddressesResponse;
import io.pulumi.azurenative.network.outputs.SubResourceResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Azure Firewall resource.
API Version: 2020-11-01.

{{% examples %}}
## Example Usage
{{% example %}}
### Create Azure Firewall
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var azureFirewall = new AzureNative.Network.AzureFirewall("azureFirewall", new AzureNative.Network.AzureFirewallArgs
        {
            ApplicationRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallApplicationRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallRCActionArgs
                    {
                        Type = "Deny",
                    },
                    Name = "apprulecoll",
                    Priority = 110,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallApplicationRuleArgs
                        {
                            Description = "Deny inbound rule",
                            Name = "rule1",
                            Protocols = 
                            {
                                new AzureNative.Network.Inputs.AzureFirewallApplicationRuleProtocolArgs
                                {
                                    Port = 443,
                                    ProtocolType = "Https",
                                },
                            },
                            SourceAddresses = 
                            {
                                "216.58.216.164",
                                "10.0.0.0/24",
                            },
                            TargetFqdns = 
                            {
                                "www.test.com",
                            },
                        },
                    },
                },
            },
            AzureFirewallName = "azurefirewall",
            IpConfigurations = 
            {
                new AzureNative.Network.Inputs.AzureFirewallIPConfigurationArgs
                {
                    Name = "azureFirewallIpConfiguration",
                    PublicIPAddress = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
                    },
                    Subnet = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
                    },
                },
            },
            Location = "West US",
            NatRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallNatRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallNatRCActionArgs
                    {
                        Type = "Dnat",
                    },
                    Name = "natrulecoll",
                    Priority = 112,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallNatRuleArgs
                        {
                            Description = "D-NAT all outbound web traffic for inspection",
                            DestinationAddresses = 
                            {
                                "1.2.3.4",
                            },
                            DestinationPorts = 
                            {
                                "443",
                            },
                            Name = "DNAT-HTTPS-traffic",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "*",
                            },
                            TranslatedAddress = "1.2.3.5",
                            TranslatedPort = "8443",
                        },
                        new AzureNative.Network.Inputs.AzureFirewallNatRuleArgs
                        {
                            Description = "D-NAT all inbound web traffic for inspection",
                            DestinationAddresses = 
                            {
                                "1.2.3.4",
                            },
                            DestinationPorts = 
                            {
                                "80",
                            },
                            Name = "DNAT-HTTP-traffic-With-FQDN",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "*",
                            },
                            TranslatedFqdn = "internalhttpserver",
                            TranslatedPort = "880",
                        },
                    },
                },
            },
            NetworkRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallNetworkRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallRCActionArgs
                    {
                        Type = "Deny",
                    },
                    Name = "netrulecoll",
                    Priority = 112,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallNetworkRuleArgs
                        {
                            Description = "Block traffic based on source IPs and ports",
                            DestinationAddresses = 
                            {
                                "*",
                            },
                            DestinationPorts = 
                            {
                                "443-444",
                                "8443",
                            },
                            Name = "L4-traffic",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "192.168.1.1-192.168.1.12",
                                "10.1.4.12-10.1.4.255",
                            },
                        },
                        new AzureNative.Network.Inputs.AzureFirewallNetworkRuleArgs
                        {
                            Description = "Block traffic based on source IPs and ports to amazon",
                            DestinationFqdns = 
                            {
                                "www.amazon.com",
                            },
                            DestinationPorts = 
                            {
                                "443-444",
                                "8443",
                            },
                            Name = "L4-traffic-with-FQDN",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "10.2.4.12-10.2.4.255",
                            },
                        },
                    },
                },
            },
            ResourceGroupName = "rg1",
            Sku = new AzureNative.Network.Inputs.AzureFirewallSkuArgs
            {
                Name = "AZFW_VNet",
                Tier = "Standard",
            },
            Tags = 
            {
                { "key1", "value1" },
            },
            ThreatIntelMode = "Alert",
            Zones = {},
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewAzureFirewall(ctx, "azureFirewall", &network.AzureFirewallArgs{
			ApplicationRuleCollections: []network.AzureFirewallApplicationRuleCollectionArgs{
				&network.AzureFirewallApplicationRuleCollectionArgs{
					Action: &network.AzureFirewallRCActionArgs{
						Type: pulumi.String("Deny"),
					},
					Name:     pulumi.String("apprulecoll"),
					Priority: pulumi.Int(110),
					Rules: network.AzureFirewallApplicationRuleArray{
						&network.AzureFirewallApplicationRuleArgs{
							Description: pulumi.String("Deny inbound rule"),
							Name:        pulumi.String("rule1"),
							Protocols: network.AzureFirewallApplicationRuleProtocolArray{
								&network.AzureFirewallApplicationRuleProtocolArgs{
									Port:         pulumi.Int(443),
									ProtocolType: pulumi.String("Https"),
								},
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("216.58.216.164"),
								pulumi.String("10.0.0.0/24"),
							},
							TargetFqdns: pulumi.StringArray{
								pulumi.String("www.test.com"),
							},
						},
					},
				},
			},
			AzureFirewallName: pulumi.String("azurefirewall"),
			IpConfigurations: []network.AzureFirewallIPConfigurationArgs{
				&network.AzureFirewallIPConfigurationArgs{
					Name: pulumi.String("azureFirewallIpConfiguration"),
					PublicIPAddress: &network.SubResourceArgs{
						Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
					},
					Subnet: &network.SubResourceArgs{
						Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
					},
				},
			},
			Location: pulumi.String("West US"),
			NatRuleCollections: []network.AzureFirewallNatRuleCollectionArgs{
				&network.AzureFirewallNatRuleCollectionArgs{
					Action: &network.AzureFirewallNatRCActionArgs{
						Type: pulumi.String("Dnat"),
					},
					Name:     pulumi.String("natrulecoll"),
					Priority: pulumi.Int(112),
					Rules: network.AzureFirewallNatRuleArray{
						&network.AzureFirewallNatRuleArgs{
							Description: pulumi.String("D-NAT all outbound web traffic for inspection"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("1.2.3.4"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443"),
							},
							Name: pulumi.String("DNAT-HTTPS-traffic"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							TranslatedAddress: pulumi.String("1.2.3.5"),
							TranslatedPort:    pulumi.String("8443"),
						},
						&network.AzureFirewallNatRuleArgs{
							Description: pulumi.String("D-NAT all inbound web traffic for inspection"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("1.2.3.4"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("80"),
							},
							Name: pulumi.String("DNAT-HTTP-traffic-With-FQDN"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							TranslatedFqdn: pulumi.String("internalhttpserver"),
							TranslatedPort: pulumi.String("880"),
						},
					},
				},
			},
			NetworkRuleCollections: []network.AzureFirewallNetworkRuleCollectionArgs{
				&network.AzureFirewallNetworkRuleCollectionArgs{
					Action: &network.AzureFirewallRCActionArgs{
						Type: pulumi.String("Deny"),
					},
					Name:     pulumi.String("netrulecoll"),
					Priority: pulumi.Int(112),
					Rules: network.AzureFirewallNetworkRuleArray{
						&network.AzureFirewallNetworkRuleArgs{
							Description: pulumi.String("Block traffic based on source IPs and ports"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443-444"),
								pulumi.String("8443"),
							},
							Name: pulumi.String("L4-traffic"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("192.168.1.1-192.168.1.12"),
								pulumi.String("10.1.4.12-10.1.4.255"),
							},
						},
						&network.AzureFirewallNetworkRuleArgs{
							Description: pulumi.String("Block traffic based on source IPs and ports to amazon"),
							DestinationFqdns: pulumi.StringArray{
								pulumi.String("www.amazon.com"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443-444"),
								pulumi.String("8443"),
							},
							Name: pulumi.String("L4-traffic-with-FQDN"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("10.2.4.12-10.2.4.255"),
							},
						},
					},
				},
			},
			ResourceGroupName: pulumi.String("rg1"),
			Sku: &network.AzureFirewallSkuArgs{
				Name: pulumi.String("AZFW_VNet"),
				Tier: pulumi.String("Standard"),
			},
			Tags: pulumi.StringMap{
				"key1": pulumi.String("value1"),
			},
			ThreatIntelMode: pulumi.String("Alert"),
			Zones:           pulumi.StringArray{},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
    applicationRuleCollections: [{
        action: {
            type: "Deny",
        },
        name: "apprulecoll",
        priority: 110,
        rules: [{
            description: "Deny inbound rule",
            name: "rule1",
            protocols: [{
                port: 443,
                protocolType: "Https",
            }],
            sourceAddresses: [
                "216.58.216.164",
                "10.0.0.0/24",
            ],
            targetFqdns: ["www.test.com"],
        }],
    }],
    azureFirewallName: "azurefirewall",
    ipConfigurations: [{
        name: "azureFirewallIpConfiguration",
        publicIPAddress: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
        },
        subnet: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
        },
    }],
    location: "West US",
    natRuleCollections: [{
        action: {
            type: "Dnat",
        },
        name: "natrulecoll",
        priority: 112,
        rules: [
            {
                description: "D-NAT all outbound web traffic for inspection",
                destinationAddresses: ["1.2.3.4"],
                destinationPorts: ["443"],
                name: "DNAT-HTTPS-traffic",
                protocols: ["TCP"],
                sourceAddresses: ["*"],
                translatedAddress: "1.2.3.5",
                translatedPort: "8443",
            },
            {
                description: "D-NAT all inbound web traffic for inspection",
                destinationAddresses: ["1.2.3.4"],
                destinationPorts: ["80"],
                name: "DNAT-HTTP-traffic-With-FQDN",
                protocols: ["TCP"],
                sourceAddresses: ["*"],
                translatedFqdn: "internalhttpserver",
                translatedPort: "880",
            },
        ],
    }],
    networkRuleCollections: [{
        action: {
            type: "Deny",
        },
        name: "netrulecoll",
        priority: 112,
        rules: [
            {
                description: "Block traffic based on source IPs and ports",
                destinationAddresses: ["*"],
                destinationPorts: [
                    "443-444",
                    "8443",
                ],
                name: "L4-traffic",
                protocols: ["TCP"],
                sourceAddresses: [
                    "192.168.1.1-192.168.1.12",
                    "10.1.4.12-10.1.4.255",
                ],
            },
            {
                description: "Block traffic based on source IPs and ports to amazon",
                destinationFqdns: ["www.amazon.com"],
                destinationPorts: [
                    "443-444",
                    "8443",
                ],
                name: "L4-traffic-with-FQDN",
                protocols: ["TCP"],
                sourceAddresses: ["10.2.4.12-10.2.4.255"],
            },
        ],
    }],
    resourceGroupName: "rg1",
    sku: {
        name: "AZFW_VNet",
        tier: "Standard",
    },
    tags: {
        key1: "value1",
    },
    threatIntelMode: "Alert",
    zones: [],
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

azure_firewall = azure_native.network.AzureFirewall("azureFirewall",
    application_rule_collections=[azure_native.network.AzureFirewallApplicationRuleCollectionArgs(
        action=azure_native.network.AzureFirewallRCActionArgs(
            type="Deny",
        ),
        name="apprulecoll",
        priority=110,
        rules=[azure_native.network.AzureFirewallApplicationRuleArgs(
            description="Deny inbound rule",
            name="rule1",
            protocols=[azure_native.network.AzureFirewallApplicationRuleProtocolArgs(
                port=443,
                protocol_type="Https",
            )],
            source_addresses=[
                "216.58.216.164",
                "10.0.0.0/24",
            ],
            target_fqdns=["www.test.com"],
        )],
    )],
    azure_firewall_name="azurefirewall",
    ip_configurations=[azure_native.network.AzureFirewallIPConfigurationArgs(
        name="azureFirewallIpConfiguration",
        public_ip_address=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
        ),
        subnet=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
        ),
    )],
    location="West US",
    nat_rule_collections=[azure_native.network.AzureFirewallNatRuleCollectionArgs(
        action=azure_native.network.AzureFirewallNatRCActionArgs(
            type="Dnat",
        ),
        name="natrulecoll",
        priority=112,
        rules=[
            azure_native.network.AzureFirewallNatRuleArgs(
                description="D-NAT all outbound web traffic for inspection",
                destination_addresses=["1.2.3.4"],
                destination_ports=["443"],
                name="DNAT-HTTPS-traffic",
                protocols=["TCP"],
                source_addresses=["*"],
                translated_address="1.2.3.5",
                translated_port="8443",
            ),
            azure_native.network.AzureFirewallNatRuleArgs(
                description="D-NAT all inbound web traffic for inspection",
                destination_addresses=["1.2.3.4"],
                destination_ports=["80"],
                name="DNAT-HTTP-traffic-With-FQDN",
                protocols=["TCP"],
                source_addresses=["*"],
                translated_fqdn="internalhttpserver",
                translated_port="880",
            ),
        ],
    )],
    network_rule_collections=[azure_native.network.AzureFirewallNetworkRuleCollectionArgs(
        action=azure_native.network.AzureFirewallRCActionArgs(
            type="Deny",
        ),
        name="netrulecoll",
        priority=112,
        rules=[
            azure_native.network.AzureFirewallNetworkRuleArgs(
                description="Block traffic based on source IPs and ports",
                destination_addresses=["*"],
                destination_ports=[
                    "443-444",
                    "8443",
                ],
                name="L4-traffic",
                protocols=["TCP"],
                source_addresses=[
                    "192.168.1.1-192.168.1.12",
                    "10.1.4.12-10.1.4.255",
                ],
            ),
            azure_native.network.AzureFirewallNetworkRuleArgs(
                description="Block traffic based on source IPs and ports to amazon",
                destination_fqdns=["www.amazon.com"],
                destination_ports=[
                    "443-444",
                    "8443",
                ],
                name="L4-traffic-with-FQDN",
                protocols=["TCP"],
                source_addresses=["10.2.4.12-10.2.4.255"],
            ),
        ],
    )],
    resource_group_name="rg1",
    sku=azure_native.network.AzureFirewallSkuArgs(
        name="AZFW_VNet",
        tier="Standard",
    ),
    tags={
        "key1": "value1",
    },
    threat_intel_mode="Alert",
    zones=[])

```

{{% /example %}}
{{% example %}}
### Create Azure Firewall With Additional Properties
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var azureFirewall = new AzureNative.Network.AzureFirewall("azureFirewall", new AzureNative.Network.AzureFirewallArgs
        {
            AdditionalProperties = 
            {
                { "key1", "value1" },
                { "key2", "value2" },
            },
            ApplicationRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallApplicationRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallRCActionArgs
                    {
                        Type = "Deny",
                    },
                    Name = "apprulecoll",
                    Priority = 110,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallApplicationRuleArgs
                        {
                            Description = "Deny inbound rule",
                            Name = "rule1",
                            Protocols = 
                            {
                                new AzureNative.Network.Inputs.AzureFirewallApplicationRuleProtocolArgs
                                {
                                    Port = 443,
                                    ProtocolType = "Https",
                                },
                            },
                            SourceAddresses = 
                            {
                                "216.58.216.164",
                                "10.0.0.0/24",
                            },
                            TargetFqdns = 
                            {
                                "www.test.com",
                            },
                        },
                    },
                },
            },
            AzureFirewallName = "azurefirewall",
            IpConfigurations = 
            {
                new AzureNative.Network.Inputs.AzureFirewallIPConfigurationArgs
                {
                    Name = "azureFirewallIpConfiguration",
                    PublicIPAddress = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
                    },
                    Subnet = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
                    },
                },
            },
            Location = "West US",
            NatRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallNatRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallNatRCActionArgs
                    {
                        Type = "Dnat",
                    },
                    Name = "natrulecoll",
                    Priority = 112,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallNatRuleArgs
                        {
                            Description = "D-NAT all outbound web traffic for inspection",
                            DestinationAddresses = 
                            {
                                "1.2.3.4",
                            },
                            DestinationPorts = 
                            {
                                "443",
                            },
                            Name = "DNAT-HTTPS-traffic",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "*",
                            },
                            TranslatedAddress = "1.2.3.5",
                            TranslatedPort = "8443",
                        },
                        new AzureNative.Network.Inputs.AzureFirewallNatRuleArgs
                        {
                            Description = "D-NAT all inbound web traffic for inspection",
                            DestinationAddresses = 
                            {
                                "1.2.3.4",
                            },
                            DestinationPorts = 
                            {
                                "80",
                            },
                            Name = "DNAT-HTTP-traffic-With-FQDN",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "*",
                            },
                            TranslatedFqdn = "internalhttpserver",
                            TranslatedPort = "880",
                        },
                    },
                },
            },
            NetworkRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallNetworkRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallRCActionArgs
                    {
                        Type = "Deny",
                    },
                    Name = "netrulecoll",
                    Priority = 112,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallNetworkRuleArgs
                        {
                            Description = "Block traffic based on source IPs and ports",
                            DestinationAddresses = 
                            {
                                "*",
                            },
                            DestinationPorts = 
                            {
                                "443-444",
                                "8443",
                            },
                            Name = "L4-traffic",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "192.168.1.1-192.168.1.12",
                                "10.1.4.12-10.1.4.255",
                            },
                        },
                        new AzureNative.Network.Inputs.AzureFirewallNetworkRuleArgs
                        {
                            Description = "Block traffic based on source IPs and ports to amazon",
                            DestinationFqdns = 
                            {
                                "www.amazon.com",
                            },
                            DestinationPorts = 
                            {
                                "443-444",
                                "8443",
                            },
                            Name = "L4-traffic-with-FQDN",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "10.2.4.12-10.2.4.255",
                            },
                        },
                    },
                },
            },
            ResourceGroupName = "rg1",
            Sku = new AzureNative.Network.Inputs.AzureFirewallSkuArgs
            {
                Name = "AZFW_VNet",
                Tier = "Standard",
            },
            Tags = 
            {
                { "key1", "value1" },
            },
            ThreatIntelMode = "Alert",
            Zones = {},
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewAzureFirewall(ctx, "azureFirewall", &network.AzureFirewallArgs{
			AdditionalProperties: pulumi.StringMap{
				"key1": pulumi.String("value1"),
				"key2": pulumi.String("value2"),
			},
			ApplicationRuleCollections: []network.AzureFirewallApplicationRuleCollectionArgs{
				&network.AzureFirewallApplicationRuleCollectionArgs{
					Action: &network.AzureFirewallRCActionArgs{
						Type: pulumi.String("Deny"),
					},
					Name:     pulumi.String("apprulecoll"),
					Priority: pulumi.Int(110),
					Rules: network.AzureFirewallApplicationRuleArray{
						&network.AzureFirewallApplicationRuleArgs{
							Description: pulumi.String("Deny inbound rule"),
							Name:        pulumi.String("rule1"),
							Protocols: network.AzureFirewallApplicationRuleProtocolArray{
								&network.AzureFirewallApplicationRuleProtocolArgs{
									Port:         pulumi.Int(443),
									ProtocolType: pulumi.String("Https"),
								},
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("216.58.216.164"),
								pulumi.String("10.0.0.0/24"),
							},
							TargetFqdns: pulumi.StringArray{
								pulumi.String("www.test.com"),
							},
						},
					},
				},
			},
			AzureFirewallName: pulumi.String("azurefirewall"),
			IpConfigurations: []network.AzureFirewallIPConfigurationArgs{
				&network.AzureFirewallIPConfigurationArgs{
					Name: pulumi.String("azureFirewallIpConfiguration"),
					PublicIPAddress: &network.SubResourceArgs{
						Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
					},
					Subnet: &network.SubResourceArgs{
						Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
					},
				},
			},
			Location: pulumi.String("West US"),
			NatRuleCollections: []network.AzureFirewallNatRuleCollectionArgs{
				&network.AzureFirewallNatRuleCollectionArgs{
					Action: &network.AzureFirewallNatRCActionArgs{
						Type: pulumi.String("Dnat"),
					},
					Name:     pulumi.String("natrulecoll"),
					Priority: pulumi.Int(112),
					Rules: network.AzureFirewallNatRuleArray{
						&network.AzureFirewallNatRuleArgs{
							Description: pulumi.String("D-NAT all outbound web traffic for inspection"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("1.2.3.4"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443"),
							},
							Name: pulumi.String("DNAT-HTTPS-traffic"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							TranslatedAddress: pulumi.String("1.2.3.5"),
							TranslatedPort:    pulumi.String("8443"),
						},
						&network.AzureFirewallNatRuleArgs{
							Description: pulumi.String("D-NAT all inbound web traffic for inspection"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("1.2.3.4"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("80"),
							},
							Name: pulumi.String("DNAT-HTTP-traffic-With-FQDN"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							TranslatedFqdn: pulumi.String("internalhttpserver"),
							TranslatedPort: pulumi.String("880"),
						},
					},
				},
			},
			NetworkRuleCollections: []network.AzureFirewallNetworkRuleCollectionArgs{
				&network.AzureFirewallNetworkRuleCollectionArgs{
					Action: &network.AzureFirewallRCActionArgs{
						Type: pulumi.String("Deny"),
					},
					Name:     pulumi.String("netrulecoll"),
					Priority: pulumi.Int(112),
					Rules: network.AzureFirewallNetworkRuleArray{
						&network.AzureFirewallNetworkRuleArgs{
							Description: pulumi.String("Block traffic based on source IPs and ports"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443-444"),
								pulumi.String("8443"),
							},
							Name: pulumi.String("L4-traffic"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("192.168.1.1-192.168.1.12"),
								pulumi.String("10.1.4.12-10.1.4.255"),
							},
						},
						&network.AzureFirewallNetworkRuleArgs{
							Description: pulumi.String("Block traffic based on source IPs and ports to amazon"),
							DestinationFqdns: pulumi.StringArray{
								pulumi.String("www.amazon.com"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443-444"),
								pulumi.String("8443"),
							},
							Name: pulumi.String("L4-traffic-with-FQDN"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("10.2.4.12-10.2.4.255"),
							},
						},
					},
				},
			},
			ResourceGroupName: pulumi.String("rg1"),
			Sku: &network.AzureFirewallSkuArgs{
				Name: pulumi.String("AZFW_VNet"),
				Tier: pulumi.String("Standard"),
			},
			Tags: pulumi.StringMap{
				"key1": pulumi.String("value1"),
			},
			ThreatIntelMode: pulumi.String("Alert"),
			Zones:           pulumi.StringArray{},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
    additionalProperties: {
        key1: "value1",
        key2: "value2",
    },
    applicationRuleCollections: [{
        action: {
            type: "Deny",
        },
        name: "apprulecoll",
        priority: 110,
        rules: [{
            description: "Deny inbound rule",
            name: "rule1",
            protocols: [{
                port: 443,
                protocolType: "Https",
            }],
            sourceAddresses: [
                "216.58.216.164",
                "10.0.0.0/24",
            ],
            targetFqdns: ["www.test.com"],
        }],
    }],
    azureFirewallName: "azurefirewall",
    ipConfigurations: [{
        name: "azureFirewallIpConfiguration",
        publicIPAddress: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
        },
        subnet: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
        },
    }],
    location: "West US",
    natRuleCollections: [{
        action: {
            type: "Dnat",
        },
        name: "natrulecoll",
        priority: 112,
        rules: [
            {
                description: "D-NAT all outbound web traffic for inspection",
                destinationAddresses: ["1.2.3.4"],
                destinationPorts: ["443"],
                name: "DNAT-HTTPS-traffic",
                protocols: ["TCP"],
                sourceAddresses: ["*"],
                translatedAddress: "1.2.3.5",
                translatedPort: "8443",
            },
            {
                description: "D-NAT all inbound web traffic for inspection",
                destinationAddresses: ["1.2.3.4"],
                destinationPorts: ["80"],
                name: "DNAT-HTTP-traffic-With-FQDN",
                protocols: ["TCP"],
                sourceAddresses: ["*"],
                translatedFqdn: "internalhttpserver",
                translatedPort: "880",
            },
        ],
    }],
    networkRuleCollections: [{
        action: {
            type: "Deny",
        },
        name: "netrulecoll",
        priority: 112,
        rules: [
            {
                description: "Block traffic based on source IPs and ports",
                destinationAddresses: ["*"],
                destinationPorts: [
                    "443-444",
                    "8443",
                ],
                name: "L4-traffic",
                protocols: ["TCP"],
                sourceAddresses: [
                    "192.168.1.1-192.168.1.12",
                    "10.1.4.12-10.1.4.255",
                ],
            },
            {
                description: "Block traffic based on source IPs and ports to amazon",
                destinationFqdns: ["www.amazon.com"],
                destinationPorts: [
                    "443-444",
                    "8443",
                ],
                name: "L4-traffic-with-FQDN",
                protocols: ["TCP"],
                sourceAddresses: ["10.2.4.12-10.2.4.255"],
            },
        ],
    }],
    resourceGroupName: "rg1",
    sku: {
        name: "AZFW_VNet",
        tier: "Standard",
    },
    tags: {
        key1: "value1",
    },
    threatIntelMode: "Alert",
    zones: [],
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

azure_firewall = azure_native.network.AzureFirewall("azureFirewall",
    additional_properties={
        "key1": "value1",
        "key2": "value2",
    },
    application_rule_collections=[azure_native.network.AzureFirewallApplicationRuleCollectionArgs(
        action=azure_native.network.AzureFirewallRCActionArgs(
            type="Deny",
        ),
        name="apprulecoll",
        priority=110,
        rules=[azure_native.network.AzureFirewallApplicationRuleArgs(
            description="Deny inbound rule",
            name="rule1",
            protocols=[azure_native.network.AzureFirewallApplicationRuleProtocolArgs(
                port=443,
                protocol_type="Https",
            )],
            source_addresses=[
                "216.58.216.164",
                "10.0.0.0/24",
            ],
            target_fqdns=["www.test.com"],
        )],
    )],
    azure_firewall_name="azurefirewall",
    ip_configurations=[azure_native.network.AzureFirewallIPConfigurationArgs(
        name="azureFirewallIpConfiguration",
        public_ip_address=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
        ),
        subnet=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
        ),
    )],
    location="West US",
    nat_rule_collections=[azure_native.network.AzureFirewallNatRuleCollectionArgs(
        action=azure_native.network.AzureFirewallNatRCActionArgs(
            type="Dnat",
        ),
        name="natrulecoll",
        priority=112,
        rules=[
            azure_native.network.AzureFirewallNatRuleArgs(
                description="D-NAT all outbound web traffic for inspection",
                destination_addresses=["1.2.3.4"],
                destination_ports=["443"],
                name="DNAT-HTTPS-traffic",
                protocols=["TCP"],
                source_addresses=["*"],
                translated_address="1.2.3.5",
                translated_port="8443",
            ),
            azure_native.network.AzureFirewallNatRuleArgs(
                description="D-NAT all inbound web traffic for inspection",
                destination_addresses=["1.2.3.4"],
                destination_ports=["80"],
                name="DNAT-HTTP-traffic-With-FQDN",
                protocols=["TCP"],
                source_addresses=["*"],
                translated_fqdn="internalhttpserver",
                translated_port="880",
            ),
        ],
    )],
    network_rule_collections=[azure_native.network.AzureFirewallNetworkRuleCollectionArgs(
        action=azure_native.network.AzureFirewallRCActionArgs(
            type="Deny",
        ),
        name="netrulecoll",
        priority=112,
        rules=[
            azure_native.network.AzureFirewallNetworkRuleArgs(
                description="Block traffic based on source IPs and ports",
                destination_addresses=["*"],
                destination_ports=[
                    "443-444",
                    "8443",
                ],
                name="L4-traffic",
                protocols=["TCP"],
                source_addresses=[
                    "192.168.1.1-192.168.1.12",
                    "10.1.4.12-10.1.4.255",
                ],
            ),
            azure_native.network.AzureFirewallNetworkRuleArgs(
                description="Block traffic based on source IPs and ports to amazon",
                destination_fqdns=["www.amazon.com"],
                destination_ports=[
                    "443-444",
                    "8443",
                ],
                name="L4-traffic-with-FQDN",
                protocols=["TCP"],
                source_addresses=["10.2.4.12-10.2.4.255"],
            ),
        ],
    )],
    resource_group_name="rg1",
    sku=azure_native.network.AzureFirewallSkuArgs(
        name="AZFW_VNet",
        tier="Standard",
    ),
    tags={
        "key1": "value1",
    },
    threat_intel_mode="Alert",
    zones=[])

```

{{% /example %}}
{{% example %}}
### Create Azure Firewall With IpGroups
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var azureFirewall = new AzureNative.Network.AzureFirewall("azureFirewall", new AzureNative.Network.AzureFirewallArgs
        {
            ApplicationRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallApplicationRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallRCActionArgs
                    {
                        Type = "Deny",
                    },
                    Name = "apprulecoll",
                    Priority = 110,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallApplicationRuleArgs
                        {
                            Description = "Deny inbound rule",
                            Name = "rule1",
                            Protocols = 
                            {
                                new AzureNative.Network.Inputs.AzureFirewallApplicationRuleProtocolArgs
                                {
                                    Port = 443,
                                    ProtocolType = "Https",
                                },
                            },
                            SourceAddresses = 
                            {
                                "216.58.216.164",
                                "10.0.0.0/24",
                            },
                            TargetFqdns = 
                            {
                                "www.test.com",
                            },
                        },
                    },
                },
            },
            AzureFirewallName = "azurefirewall",
            IpConfigurations = 
            {
                new AzureNative.Network.Inputs.AzureFirewallIPConfigurationArgs
                {
                    Name = "azureFirewallIpConfiguration",
                    PublicIPAddress = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
                    },
                    Subnet = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
                    },
                },
            },
            Location = "West US",
            NatRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallNatRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallNatRCActionArgs
                    {
                        Type = "Dnat",
                    },
                    Name = "natrulecoll",
                    Priority = 112,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallNatRuleArgs
                        {
                            Description = "D-NAT all outbound web traffic for inspection",
                            DestinationAddresses = 
                            {
                                "1.2.3.4",
                            },
                            DestinationPorts = 
                            {
                                "443",
                            },
                            Name = "DNAT-HTTPS-traffic",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "*",
                            },
                            TranslatedAddress = "1.2.3.5",
                            TranslatedPort = "8443",
                        },
                        new AzureNative.Network.Inputs.AzureFirewallNatRuleArgs
                        {
                            Description = "D-NAT all inbound web traffic for inspection",
                            DestinationAddresses = 
                            {
                                "1.2.3.4",
                            },
                            DestinationPorts = 
                            {
                                "80",
                            },
                            Name = "DNAT-HTTP-traffic-With-FQDN",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "*",
                            },
                            TranslatedFqdn = "internalhttpserver",
                            TranslatedPort = "880",
                        },
                    },
                },
            },
            NetworkRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallNetworkRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallRCActionArgs
                    {
                        Type = "Deny",
                    },
                    Name = "netrulecoll",
                    Priority = 112,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallNetworkRuleArgs
                        {
                            Description = "Block traffic based on source IPs and ports",
                            DestinationAddresses = 
                            {
                                "*",
                            },
                            DestinationPorts = 
                            {
                                "443-444",
                                "8443",
                            },
                            Name = "L4-traffic",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "192.168.1.1-192.168.1.12",
                                "10.1.4.12-10.1.4.255",
                            },
                        },
                        new AzureNative.Network.Inputs.AzureFirewallNetworkRuleArgs
                        {
                            Description = "Block traffic based on source IPs and ports to amazon",
                            DestinationFqdns = 
                            {
                                "www.amazon.com",
                            },
                            DestinationPorts = 
                            {
                                "443-444",
                                "8443",
                            },
                            Name = "L4-traffic-with-FQDN",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "10.2.4.12-10.2.4.255",
                            },
                        },
                    },
                },
            },
            ResourceGroupName = "rg1",
            Sku = new AzureNative.Network.Inputs.AzureFirewallSkuArgs
            {
                Name = "AZFW_VNet",
                Tier = "Standard",
            },
            Tags = 
            {
                { "key1", "value1" },
            },
            ThreatIntelMode = "Alert",
            Zones = {},
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewAzureFirewall(ctx, "azureFirewall", &network.AzureFirewallArgs{
			ApplicationRuleCollections: []network.AzureFirewallApplicationRuleCollectionArgs{
				&network.AzureFirewallApplicationRuleCollectionArgs{
					Action: &network.AzureFirewallRCActionArgs{
						Type: pulumi.String("Deny"),
					},
					Name:     pulumi.String("apprulecoll"),
					Priority: pulumi.Int(110),
					Rules: network.AzureFirewallApplicationRuleArray{
						&network.AzureFirewallApplicationRuleArgs{
							Description: pulumi.String("Deny inbound rule"),
							Name:        pulumi.String("rule1"),
							Protocols: network.AzureFirewallApplicationRuleProtocolArray{
								&network.AzureFirewallApplicationRuleProtocolArgs{
									Port:         pulumi.Int(443),
									ProtocolType: pulumi.String("Https"),
								},
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("216.58.216.164"),
								pulumi.String("10.0.0.0/24"),
							},
							TargetFqdns: pulumi.StringArray{
								pulumi.String("www.test.com"),
							},
						},
					},
				},
			},
			AzureFirewallName: pulumi.String("azurefirewall"),
			IpConfigurations: []network.AzureFirewallIPConfigurationArgs{
				&network.AzureFirewallIPConfigurationArgs{
					Name: pulumi.String("azureFirewallIpConfiguration"),
					PublicIPAddress: &network.SubResourceArgs{
						Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
					},
					Subnet: &network.SubResourceArgs{
						Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
					},
				},
			},
			Location: pulumi.String("West US"),
			NatRuleCollections: []network.AzureFirewallNatRuleCollectionArgs{
				&network.AzureFirewallNatRuleCollectionArgs{
					Action: &network.AzureFirewallNatRCActionArgs{
						Type: pulumi.String("Dnat"),
					},
					Name:     pulumi.String("natrulecoll"),
					Priority: pulumi.Int(112),
					Rules: network.AzureFirewallNatRuleArray{
						&network.AzureFirewallNatRuleArgs{
							Description: pulumi.String("D-NAT all outbound web traffic for inspection"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("1.2.3.4"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443"),
							},
							Name: pulumi.String("DNAT-HTTPS-traffic"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							TranslatedAddress: pulumi.String("1.2.3.5"),
							TranslatedPort:    pulumi.String("8443"),
						},
						&network.AzureFirewallNatRuleArgs{
							Description: pulumi.String("D-NAT all inbound web traffic for inspection"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("1.2.3.4"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("80"),
							},
							Name: pulumi.String("DNAT-HTTP-traffic-With-FQDN"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							TranslatedFqdn: pulumi.String("internalhttpserver"),
							TranslatedPort: pulumi.String("880"),
						},
					},
				},
			},
			NetworkRuleCollections: []network.AzureFirewallNetworkRuleCollectionArgs{
				&network.AzureFirewallNetworkRuleCollectionArgs{
					Action: &network.AzureFirewallRCActionArgs{
						Type: pulumi.String("Deny"),
					},
					Name:     pulumi.String("netrulecoll"),
					Priority: pulumi.Int(112),
					Rules: network.AzureFirewallNetworkRuleArray{
						&network.AzureFirewallNetworkRuleArgs{
							Description: pulumi.String("Block traffic based on source IPs and ports"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443-444"),
								pulumi.String("8443"),
							},
							Name: pulumi.String("L4-traffic"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("192.168.1.1-192.168.1.12"),
								pulumi.String("10.1.4.12-10.1.4.255"),
							},
						},
						&network.AzureFirewallNetworkRuleArgs{
							Description: pulumi.String("Block traffic based on source IPs and ports to amazon"),
							DestinationFqdns: pulumi.StringArray{
								pulumi.String("www.amazon.com"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443-444"),
								pulumi.String("8443"),
							},
							Name: pulumi.String("L4-traffic-with-FQDN"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("10.2.4.12-10.2.4.255"),
							},
						},
					},
				},
			},
			ResourceGroupName: pulumi.String("rg1"),
			Sku: &network.AzureFirewallSkuArgs{
				Name: pulumi.String("AZFW_VNet"),
				Tier: pulumi.String("Standard"),
			},
			Tags: pulumi.StringMap{
				"key1": pulumi.String("value1"),
			},
			ThreatIntelMode: pulumi.String("Alert"),
			Zones:           pulumi.StringArray{},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
    applicationRuleCollections: [{
        action: {
            type: "Deny",
        },
        name: "apprulecoll",
        priority: 110,
        rules: [{
            description: "Deny inbound rule",
            name: "rule1",
            protocols: [{
                port: 443,
                protocolType: "Https",
            }],
            sourceAddresses: [
                "216.58.216.164",
                "10.0.0.0/24",
            ],
            targetFqdns: ["www.test.com"],
        }],
    }],
    azureFirewallName: "azurefirewall",
    ipConfigurations: [{
        name: "azureFirewallIpConfiguration",
        publicIPAddress: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
        },
        subnet: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
        },
    }],
    location: "West US",
    natRuleCollections: [{
        action: {
            type: "Dnat",
        },
        name: "natrulecoll",
        priority: 112,
        rules: [
            {
                description: "D-NAT all outbound web traffic for inspection",
                destinationAddresses: ["1.2.3.4"],
                destinationPorts: ["443"],
                name: "DNAT-HTTPS-traffic",
                protocols: ["TCP"],
                sourceAddresses: ["*"],
                translatedAddress: "1.2.3.5",
                translatedPort: "8443",
            },
            {
                description: "D-NAT all inbound web traffic for inspection",
                destinationAddresses: ["1.2.3.4"],
                destinationPorts: ["80"],
                name: "DNAT-HTTP-traffic-With-FQDN",
                protocols: ["TCP"],
                sourceAddresses: ["*"],
                translatedFqdn: "internalhttpserver",
                translatedPort: "880",
            },
        ],
    }],
    networkRuleCollections: [{
        action: {
            type: "Deny",
        },
        name: "netrulecoll",
        priority: 112,
        rules: [
            {
                description: "Block traffic based on source IPs and ports",
                destinationAddresses: ["*"],
                destinationPorts: [
                    "443-444",
                    "8443",
                ],
                name: "L4-traffic",
                protocols: ["TCP"],
                sourceAddresses: [
                    "192.168.1.1-192.168.1.12",
                    "10.1.4.12-10.1.4.255",
                ],
            },
            {
                description: "Block traffic based on source IPs and ports to amazon",
                destinationFqdns: ["www.amazon.com"],
                destinationPorts: [
                    "443-444",
                    "8443",
                ],
                name: "L4-traffic-with-FQDN",
                protocols: ["TCP"],
                sourceAddresses: ["10.2.4.12-10.2.4.255"],
            },
        ],
    }],
    resourceGroupName: "rg1",
    sku: {
        name: "AZFW_VNet",
        tier: "Standard",
    },
    tags: {
        key1: "value1",
    },
    threatIntelMode: "Alert",
    zones: [],
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

azure_firewall = azure_native.network.AzureFirewall("azureFirewall",
    application_rule_collections=[azure_native.network.AzureFirewallApplicationRuleCollectionArgs(
        action=azure_native.network.AzureFirewallRCActionArgs(
            type="Deny",
        ),
        name="apprulecoll",
        priority=110,
        rules=[azure_native.network.AzureFirewallApplicationRuleArgs(
            description="Deny inbound rule",
            name="rule1",
            protocols=[azure_native.network.AzureFirewallApplicationRuleProtocolArgs(
                port=443,
                protocol_type="Https",
            )],
            source_addresses=[
                "216.58.216.164",
                "10.0.0.0/24",
            ],
            target_fqdns=["www.test.com"],
        )],
    )],
    azure_firewall_name="azurefirewall",
    ip_configurations=[azure_native.network.AzureFirewallIPConfigurationArgs(
        name="azureFirewallIpConfiguration",
        public_ip_address=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
        ),
        subnet=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
        ),
    )],
    location="West US",
    nat_rule_collections=[azure_native.network.AzureFirewallNatRuleCollectionArgs(
        action=azure_native.network.AzureFirewallNatRCActionArgs(
            type="Dnat",
        ),
        name="natrulecoll",
        priority=112,
        rules=[
            azure_native.network.AzureFirewallNatRuleArgs(
                description="D-NAT all outbound web traffic for inspection",
                destination_addresses=["1.2.3.4"],
                destination_ports=["443"],
                name="DNAT-HTTPS-traffic",
                protocols=["TCP"],
                source_addresses=["*"],
                translated_address="1.2.3.5",
                translated_port="8443",
            ),
            azure_native.network.AzureFirewallNatRuleArgs(
                description="D-NAT all inbound web traffic for inspection",
                destination_addresses=["1.2.3.4"],
                destination_ports=["80"],
                name="DNAT-HTTP-traffic-With-FQDN",
                protocols=["TCP"],
                source_addresses=["*"],
                translated_fqdn="internalhttpserver",
                translated_port="880",
            ),
        ],
    )],
    network_rule_collections=[azure_native.network.AzureFirewallNetworkRuleCollectionArgs(
        action=azure_native.network.AzureFirewallRCActionArgs(
            type="Deny",
        ),
        name="netrulecoll",
        priority=112,
        rules=[
            azure_native.network.AzureFirewallNetworkRuleArgs(
                description="Block traffic based on source IPs and ports",
                destination_addresses=["*"],
                destination_ports=[
                    "443-444",
                    "8443",
                ],
                name="L4-traffic",
                protocols=["TCP"],
                source_addresses=[
                    "192.168.1.1-192.168.1.12",
                    "10.1.4.12-10.1.4.255",
                ],
            ),
            azure_native.network.AzureFirewallNetworkRuleArgs(
                description="Block traffic based on source IPs and ports to amazon",
                destination_fqdns=["www.amazon.com"],
                destination_ports=[
                    "443-444",
                    "8443",
                ],
                name="L4-traffic-with-FQDN",
                protocols=["TCP"],
                source_addresses=["10.2.4.12-10.2.4.255"],
            ),
        ],
    )],
    resource_group_name="rg1",
    sku=azure_native.network.AzureFirewallSkuArgs(
        name="AZFW_VNet",
        tier="Standard",
    ),
    tags={
        "key1": "value1",
    },
    threat_intel_mode="Alert",
    zones=[])

```

{{% /example %}}
{{% example %}}
### Create Azure Firewall With Zones
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var azureFirewall = new AzureNative.Network.AzureFirewall("azureFirewall", new AzureNative.Network.AzureFirewallArgs
        {
            ApplicationRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallApplicationRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallRCActionArgs
                    {
                        Type = "Deny",
                    },
                    Name = "apprulecoll",
                    Priority = 110,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallApplicationRuleArgs
                        {
                            Description = "Deny inbound rule",
                            Name = "rule1",
                            Protocols = 
                            {
                                new AzureNative.Network.Inputs.AzureFirewallApplicationRuleProtocolArgs
                                {
                                    Port = 443,
                                    ProtocolType = "Https",
                                },
                            },
                            SourceAddresses = 
                            {
                                "216.58.216.164",
                                "10.0.0.0/24",
                            },
                            TargetFqdns = 
                            {
                                "www.test.com",
                            },
                        },
                    },
                },
            },
            AzureFirewallName = "azurefirewall",
            IpConfigurations = 
            {
                new AzureNative.Network.Inputs.AzureFirewallIPConfigurationArgs
                {
                    Name = "azureFirewallIpConfiguration",
                    PublicIPAddress = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
                    },
                    Subnet = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
                    },
                },
            },
            Location = "West US 2",
            NatRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallNatRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallNatRCActionArgs
                    {
                        Type = "Dnat",
                    },
                    Name = "natrulecoll",
                    Priority = 112,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallNatRuleArgs
                        {
                            Description = "D-NAT all outbound web traffic for inspection",
                            DestinationAddresses = 
                            {
                                "1.2.3.4",
                            },
                            DestinationPorts = 
                            {
                                "443",
                            },
                            Name = "DNAT-HTTPS-traffic",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "*",
                            },
                            TranslatedAddress = "1.2.3.5",
                            TranslatedPort = "8443",
                        },
                        new AzureNative.Network.Inputs.AzureFirewallNatRuleArgs
                        {
                            Description = "D-NAT all inbound web traffic for inspection",
                            DestinationAddresses = 
                            {
                                "1.2.3.4",
                            },
                            DestinationPorts = 
                            {
                                "80",
                            },
                            Name = "DNAT-HTTP-traffic-With-FQDN",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "*",
                            },
                            TranslatedFqdn = "internalhttpserver",
                            TranslatedPort = "880",
                        },
                    },
                },
            },
            NetworkRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallNetworkRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallRCActionArgs
                    {
                        Type = "Deny",
                    },
                    Name = "netrulecoll",
                    Priority = 112,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallNetworkRuleArgs
                        {
                            Description = "Block traffic based on source IPs and ports",
                            DestinationAddresses = 
                            {
                                "*",
                            },
                            DestinationPorts = 
                            {
                                "443-444",
                                "8443",
                            },
                            Name = "L4-traffic",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "192.168.1.1-192.168.1.12",
                                "10.1.4.12-10.1.4.255",
                            },
                        },
                        new AzureNative.Network.Inputs.AzureFirewallNetworkRuleArgs
                        {
                            Description = "Block traffic based on source IPs and ports to amazon",
                            DestinationFqdns = 
                            {
                                "www.amazon.com",
                            },
                            DestinationPorts = 
                            {
                                "443-444",
                                "8443",
                            },
                            Name = "L4-traffic-with-FQDN",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "10.2.4.12-10.2.4.255",
                            },
                        },
                    },
                },
            },
            ResourceGroupName = "rg1",
            Sku = new AzureNative.Network.Inputs.AzureFirewallSkuArgs
            {
                Name = "AZFW_VNet",
                Tier = "Standard",
            },
            Tags = 
            {
                { "key1", "value1" },
            },
            ThreatIntelMode = "Alert",
            Zones = 
            {
                "1",
                "2",
                "3",
            },
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewAzureFirewall(ctx, "azureFirewall", &network.AzureFirewallArgs{
			ApplicationRuleCollections: []network.AzureFirewallApplicationRuleCollectionArgs{
				&network.AzureFirewallApplicationRuleCollectionArgs{
					Action: &network.AzureFirewallRCActionArgs{
						Type: pulumi.String("Deny"),
					},
					Name:     pulumi.String("apprulecoll"),
					Priority: pulumi.Int(110),
					Rules: network.AzureFirewallApplicationRuleArray{
						&network.AzureFirewallApplicationRuleArgs{
							Description: pulumi.String("Deny inbound rule"),
							Name:        pulumi.String("rule1"),
							Protocols: network.AzureFirewallApplicationRuleProtocolArray{
								&network.AzureFirewallApplicationRuleProtocolArgs{
									Port:         pulumi.Int(443),
									ProtocolType: pulumi.String("Https"),
								},
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("216.58.216.164"),
								pulumi.String("10.0.0.0/24"),
							},
							TargetFqdns: pulumi.StringArray{
								pulumi.String("www.test.com"),
							},
						},
					},
				},
			},
			AzureFirewallName: pulumi.String("azurefirewall"),
			IpConfigurations: []network.AzureFirewallIPConfigurationArgs{
				&network.AzureFirewallIPConfigurationArgs{
					Name: pulumi.String("azureFirewallIpConfiguration"),
					PublicIPAddress: &network.SubResourceArgs{
						Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
					},
					Subnet: &network.SubResourceArgs{
						Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
					},
				},
			},
			Location: pulumi.String("West US 2"),
			NatRuleCollections: []network.AzureFirewallNatRuleCollectionArgs{
				&network.AzureFirewallNatRuleCollectionArgs{
					Action: &network.AzureFirewallNatRCActionArgs{
						Type: pulumi.String("Dnat"),
					},
					Name:     pulumi.String("natrulecoll"),
					Priority: pulumi.Int(112),
					Rules: network.AzureFirewallNatRuleArray{
						&network.AzureFirewallNatRuleArgs{
							Description: pulumi.String("D-NAT all outbound web traffic for inspection"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("1.2.3.4"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443"),
							},
							Name: pulumi.String("DNAT-HTTPS-traffic"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							TranslatedAddress: pulumi.String("1.2.3.5"),
							TranslatedPort:    pulumi.String("8443"),
						},
						&network.AzureFirewallNatRuleArgs{
							Description: pulumi.String("D-NAT all inbound web traffic for inspection"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("1.2.3.4"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("80"),
							},
							Name: pulumi.String("DNAT-HTTP-traffic-With-FQDN"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							TranslatedFqdn: pulumi.String("internalhttpserver"),
							TranslatedPort: pulumi.String("880"),
						},
					},
				},
			},
			NetworkRuleCollections: []network.AzureFirewallNetworkRuleCollectionArgs{
				&network.AzureFirewallNetworkRuleCollectionArgs{
					Action: &network.AzureFirewallRCActionArgs{
						Type: pulumi.String("Deny"),
					},
					Name:     pulumi.String("netrulecoll"),
					Priority: pulumi.Int(112),
					Rules: network.AzureFirewallNetworkRuleArray{
						&network.AzureFirewallNetworkRuleArgs{
							Description: pulumi.String("Block traffic based on source IPs and ports"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443-444"),
								pulumi.String("8443"),
							},
							Name: pulumi.String("L4-traffic"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("192.168.1.1-192.168.1.12"),
								pulumi.String("10.1.4.12-10.1.4.255"),
							},
						},
						&network.AzureFirewallNetworkRuleArgs{
							Description: pulumi.String("Block traffic based on source IPs and ports to amazon"),
							DestinationFqdns: pulumi.StringArray{
								pulumi.String("www.amazon.com"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443-444"),
								pulumi.String("8443"),
							},
							Name: pulumi.String("L4-traffic-with-FQDN"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("10.2.4.12-10.2.4.255"),
							},
						},
					},
				},
			},
			ResourceGroupName: pulumi.String("rg1"),
			Sku: &network.AzureFirewallSkuArgs{
				Name: pulumi.String("AZFW_VNet"),
				Tier: pulumi.String("Standard"),
			},
			Tags: pulumi.StringMap{
				"key1": pulumi.String("value1"),
			},
			ThreatIntelMode: pulumi.String("Alert"),
			Zones: pulumi.StringArray{
				pulumi.String("1"),
				pulumi.String("2"),
				pulumi.String("3"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
    applicationRuleCollections: [{
        action: {
            type: "Deny",
        },
        name: "apprulecoll",
        priority: 110,
        rules: [{
            description: "Deny inbound rule",
            name: "rule1",
            protocols: [{
                port: 443,
                protocolType: "Https",
            }],
            sourceAddresses: [
                "216.58.216.164",
                "10.0.0.0/24",
            ],
            targetFqdns: ["www.test.com"],
        }],
    }],
    azureFirewallName: "azurefirewall",
    ipConfigurations: [{
        name: "azureFirewallIpConfiguration",
        publicIPAddress: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
        },
        subnet: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
        },
    }],
    location: "West US 2",
    natRuleCollections: [{
        action: {
            type: "Dnat",
        },
        name: "natrulecoll",
        priority: 112,
        rules: [
            {
                description: "D-NAT all outbound web traffic for inspection",
                destinationAddresses: ["1.2.3.4"],
                destinationPorts: ["443"],
                name: "DNAT-HTTPS-traffic",
                protocols: ["TCP"],
                sourceAddresses: ["*"],
                translatedAddress: "1.2.3.5",
                translatedPort: "8443",
            },
            {
                description: "D-NAT all inbound web traffic for inspection",
                destinationAddresses: ["1.2.3.4"],
                destinationPorts: ["80"],
                name: "DNAT-HTTP-traffic-With-FQDN",
                protocols: ["TCP"],
                sourceAddresses: ["*"],
                translatedFqdn: "internalhttpserver",
                translatedPort: "880",
            },
        ],
    }],
    networkRuleCollections: [{
        action: {
            type: "Deny",
        },
        name: "netrulecoll",
        priority: 112,
        rules: [
            {
                description: "Block traffic based on source IPs and ports",
                destinationAddresses: ["*"],
                destinationPorts: [
                    "443-444",
                    "8443",
                ],
                name: "L4-traffic",
                protocols: ["TCP"],
                sourceAddresses: [
                    "192.168.1.1-192.168.1.12",
                    "10.1.4.12-10.1.4.255",
                ],
            },
            {
                description: "Block traffic based on source IPs and ports to amazon",
                destinationFqdns: ["www.amazon.com"],
                destinationPorts: [
                    "443-444",
                    "8443",
                ],
                name: "L4-traffic-with-FQDN",
                protocols: ["TCP"],
                sourceAddresses: ["10.2.4.12-10.2.4.255"],
            },
        ],
    }],
    resourceGroupName: "rg1",
    sku: {
        name: "AZFW_VNet",
        tier: "Standard",
    },
    tags: {
        key1: "value1",
    },
    threatIntelMode: "Alert",
    zones: [
        "1",
        "2",
        "3",
    ],
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

azure_firewall = azure_native.network.AzureFirewall("azureFirewall",
    application_rule_collections=[azure_native.network.AzureFirewallApplicationRuleCollectionArgs(
        action=azure_native.network.AzureFirewallRCActionArgs(
            type="Deny",
        ),
        name="apprulecoll",
        priority=110,
        rules=[azure_native.network.AzureFirewallApplicationRuleArgs(
            description="Deny inbound rule",
            name="rule1",
            protocols=[azure_native.network.AzureFirewallApplicationRuleProtocolArgs(
                port=443,
                protocol_type="Https",
            )],
            source_addresses=[
                "216.58.216.164",
                "10.0.0.0/24",
            ],
            target_fqdns=["www.test.com"],
        )],
    )],
    azure_firewall_name="azurefirewall",
    ip_configurations=[azure_native.network.AzureFirewallIPConfigurationArgs(
        name="azureFirewallIpConfiguration",
        public_ip_address=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
        ),
        subnet=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
        ),
    )],
    location="West US 2",
    nat_rule_collections=[azure_native.network.AzureFirewallNatRuleCollectionArgs(
        action=azure_native.network.AzureFirewallNatRCActionArgs(
            type="Dnat",
        ),
        name="natrulecoll",
        priority=112,
        rules=[
            azure_native.network.AzureFirewallNatRuleArgs(
                description="D-NAT all outbound web traffic for inspection",
                destination_addresses=["1.2.3.4"],
                destination_ports=["443"],
                name="DNAT-HTTPS-traffic",
                protocols=["TCP"],
                source_addresses=["*"],
                translated_address="1.2.3.5",
                translated_port="8443",
            ),
            azure_native.network.AzureFirewallNatRuleArgs(
                description="D-NAT all inbound web traffic for inspection",
                destination_addresses=["1.2.3.4"],
                destination_ports=["80"],
                name="DNAT-HTTP-traffic-With-FQDN",
                protocols=["TCP"],
                source_addresses=["*"],
                translated_fqdn="internalhttpserver",
                translated_port="880",
            ),
        ],
    )],
    network_rule_collections=[azure_native.network.AzureFirewallNetworkRuleCollectionArgs(
        action=azure_native.network.AzureFirewallRCActionArgs(
            type="Deny",
        ),
        name="netrulecoll",
        priority=112,
        rules=[
            azure_native.network.AzureFirewallNetworkRuleArgs(
                description="Block traffic based on source IPs and ports",
                destination_addresses=["*"],
                destination_ports=[
                    "443-444",
                    "8443",
                ],
                name="L4-traffic",
                protocols=["TCP"],
                source_addresses=[
                    "192.168.1.1-192.168.1.12",
                    "10.1.4.12-10.1.4.255",
                ],
            ),
            azure_native.network.AzureFirewallNetworkRuleArgs(
                description="Block traffic based on source IPs and ports to amazon",
                destination_fqdns=["www.amazon.com"],
                destination_ports=[
                    "443-444",
                    "8443",
                ],
                name="L4-traffic-with-FQDN",
                protocols=["TCP"],
                source_addresses=["10.2.4.12-10.2.4.255"],
            ),
        ],
    )],
    resource_group_name="rg1",
    sku=azure_native.network.AzureFirewallSkuArgs(
        name="AZFW_VNet",
        tier="Standard",
    ),
    tags={
        "key1": "value1",
    },
    threat_intel_mode="Alert",
    zones=[
        "1",
        "2",
        "3",
    ])

```

{{% /example %}}
{{% example %}}
### Create Azure Firewall With management subnet
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var azureFirewall = new AzureNative.Network.AzureFirewall("azureFirewall", new AzureNative.Network.AzureFirewallArgs
        {
            ApplicationRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallApplicationRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallRCActionArgs
                    {
                        Type = "Deny",
                    },
                    Name = "apprulecoll",
                    Priority = 110,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallApplicationRuleArgs
                        {
                            Description = "Deny inbound rule",
                            Name = "rule1",
                            Protocols = 
                            {
                                new AzureNative.Network.Inputs.AzureFirewallApplicationRuleProtocolArgs
                                {
                                    Port = 443,
                                    ProtocolType = "Https",
                                },
                            },
                            SourceAddresses = 
                            {
                                "216.58.216.164",
                                "10.0.0.0/24",
                            },
                            TargetFqdns = 
                            {
                                "www.test.com",
                            },
                        },
                    },
                },
            },
            AzureFirewallName = "azurefirewall",
            IpConfigurations = 
            {
                new AzureNative.Network.Inputs.AzureFirewallIPConfigurationArgs
                {
                    Name = "azureFirewallIpConfiguration",
                    PublicIPAddress = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
                    },
                    Subnet = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
                    },
                },
            },
            Location = "West US",
            ManagementIpConfiguration = new AzureNative.Network.Inputs.AzureFirewallIPConfigurationArgs
            {
                Name = "azureFirewallMgmtIpConfiguration",
                PublicIPAddress = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName",
                },
                Subnet = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet",
                },
            },
            NatRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallNatRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallNatRCActionArgs
                    {
                        Type = "Dnat",
                    },
                    Name = "natrulecoll",
                    Priority = 112,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallNatRuleArgs
                        {
                            Description = "D-NAT all outbound web traffic for inspection",
                            DestinationAddresses = 
                            {
                                "1.2.3.4",
                            },
                            DestinationPorts = 
                            {
                                "443",
                            },
                            Name = "DNAT-HTTPS-traffic",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "*",
                            },
                            TranslatedAddress = "1.2.3.5",
                            TranslatedPort = "8443",
                        },
                        new AzureNative.Network.Inputs.AzureFirewallNatRuleArgs
                        {
                            Description = "D-NAT all inbound web traffic for inspection",
                            DestinationAddresses = 
                            {
                                "1.2.3.4",
                            },
                            DestinationPorts = 
                            {
                                "80",
                            },
                            Name = "DNAT-HTTP-traffic-With-FQDN",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "*",
                            },
                            TranslatedFqdn = "internalhttpserver",
                            TranslatedPort = "880",
                        },
                    },
                },
            },
            NetworkRuleCollections = 
            {
                new AzureNative.Network.Inputs.AzureFirewallNetworkRuleCollectionArgs
                {
                    Action = new AzureNative.Network.Inputs.AzureFirewallRCActionArgs
                    {
                        Type = "Deny",
                    },
                    Name = "netrulecoll",
                    Priority = 112,
                    Rules = 
                    {
                        new AzureNative.Network.Inputs.AzureFirewallNetworkRuleArgs
                        {
                            Description = "Block traffic based on source IPs and ports",
                            DestinationAddresses = 
                            {
                                "*",
                            },
                            DestinationPorts = 
                            {
                                "443-444",
                                "8443",
                            },
                            Name = "L4-traffic",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "192.168.1.1-192.168.1.12",
                                "10.1.4.12-10.1.4.255",
                            },
                        },
                        new AzureNative.Network.Inputs.AzureFirewallNetworkRuleArgs
                        {
                            Description = "Block traffic based on source IPs and ports to amazon",
                            DestinationFqdns = 
                            {
                                "www.amazon.com",
                            },
                            DestinationPorts = 
                            {
                                "443-444",
                                "8443",
                            },
                            Name = "L4-traffic-with-FQDN",
                            Protocols = 
                            {
                                "TCP",
                            },
                            SourceAddresses = 
                            {
                                "10.2.4.12-10.2.4.255",
                            },
                        },
                    },
                },
            },
            ResourceGroupName = "rg1",
            Sku = new AzureNative.Network.Inputs.AzureFirewallSkuArgs
            {
                Name = "AZFW_VNet",
                Tier = "Standard",
            },
            Tags = 
            {
                { "key1", "value1" },
            },
            ThreatIntelMode = "Alert",
            Zones = {},
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewAzureFirewall(ctx, "azureFirewall", &network.AzureFirewallArgs{
			ApplicationRuleCollections: []network.AzureFirewallApplicationRuleCollectionArgs{
				&network.AzureFirewallApplicationRuleCollectionArgs{
					Action: &network.AzureFirewallRCActionArgs{
						Type: pulumi.String("Deny"),
					},
					Name:     pulumi.String("apprulecoll"),
					Priority: pulumi.Int(110),
					Rules: network.AzureFirewallApplicationRuleArray{
						&network.AzureFirewallApplicationRuleArgs{
							Description: pulumi.String("Deny inbound rule"),
							Name:        pulumi.String("rule1"),
							Protocols: network.AzureFirewallApplicationRuleProtocolArray{
								&network.AzureFirewallApplicationRuleProtocolArgs{
									Port:         pulumi.Int(443),
									ProtocolType: pulumi.String("Https"),
								},
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("216.58.216.164"),
								pulumi.String("10.0.0.0/24"),
							},
							TargetFqdns: pulumi.StringArray{
								pulumi.String("www.test.com"),
							},
						},
					},
				},
			},
			AzureFirewallName: pulumi.String("azurefirewall"),
			IpConfigurations: []network.AzureFirewallIPConfigurationArgs{
				&network.AzureFirewallIPConfigurationArgs{
					Name: pulumi.String("azureFirewallIpConfiguration"),
					PublicIPAddress: &network.SubResourceArgs{
						Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
					},
					Subnet: &network.SubResourceArgs{
						Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
					},
				},
			},
			Location: pulumi.String("West US"),
			ManagementIpConfiguration: &network.AzureFirewallIPConfigurationArgs{
				Name: pulumi.String("azureFirewallMgmtIpConfiguration"),
				PublicIPAddress: &network.SubResourceArgs{
					Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName"),
				},
				Subnet: &network.SubResourceArgs{
					Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet"),
				},
			},
			NatRuleCollections: []network.AzureFirewallNatRuleCollectionArgs{
				&network.AzureFirewallNatRuleCollectionArgs{
					Action: &network.AzureFirewallNatRCActionArgs{
						Type: pulumi.String("Dnat"),
					},
					Name:     pulumi.String("natrulecoll"),
					Priority: pulumi.Int(112),
					Rules: network.AzureFirewallNatRuleArray{
						&network.AzureFirewallNatRuleArgs{
							Description: pulumi.String("D-NAT all outbound web traffic for inspection"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("1.2.3.4"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443"),
							},
							Name: pulumi.String("DNAT-HTTPS-traffic"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							TranslatedAddress: pulumi.String("1.2.3.5"),
							TranslatedPort:    pulumi.String("8443"),
						},
						&network.AzureFirewallNatRuleArgs{
							Description: pulumi.String("D-NAT all inbound web traffic for inspection"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("1.2.3.4"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("80"),
							},
							Name: pulumi.String("DNAT-HTTP-traffic-With-FQDN"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							TranslatedFqdn: pulumi.String("internalhttpserver"),
							TranslatedPort: pulumi.String("880"),
						},
					},
				},
			},
			NetworkRuleCollections: []network.AzureFirewallNetworkRuleCollectionArgs{
				&network.AzureFirewallNetworkRuleCollectionArgs{
					Action: &network.AzureFirewallRCActionArgs{
						Type: pulumi.String("Deny"),
					},
					Name:     pulumi.String("netrulecoll"),
					Priority: pulumi.Int(112),
					Rules: network.AzureFirewallNetworkRuleArray{
						&network.AzureFirewallNetworkRuleArgs{
							Description: pulumi.String("Block traffic based on source IPs and ports"),
							DestinationAddresses: pulumi.StringArray{
								pulumi.String("*"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443-444"),
								pulumi.String("8443"),
							},
							Name: pulumi.String("L4-traffic"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("192.168.1.1-192.168.1.12"),
								pulumi.String("10.1.4.12-10.1.4.255"),
							},
						},
						&network.AzureFirewallNetworkRuleArgs{
							Description: pulumi.String("Block traffic based on source IPs and ports to amazon"),
							DestinationFqdns: pulumi.StringArray{
								pulumi.String("www.amazon.com"),
							},
							DestinationPorts: pulumi.StringArray{
								pulumi.String("443-444"),
								pulumi.String("8443"),
							},
							Name: pulumi.String("L4-traffic-with-FQDN"),
							Protocols: pulumi.StringArray{
								pulumi.String("TCP"),
							},
							SourceAddresses: pulumi.StringArray{
								pulumi.String("10.2.4.12-10.2.4.255"),
							},
						},
					},
				},
			},
			ResourceGroupName: pulumi.String("rg1"),
			Sku: &network.AzureFirewallSkuArgs{
				Name: pulumi.String("AZFW_VNet"),
				Tier: pulumi.String("Standard"),
			},
			Tags: pulumi.StringMap{
				"key1": pulumi.String("value1"),
			},
			ThreatIntelMode: pulumi.String("Alert"),
			Zones:           pulumi.StringArray{},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
    applicationRuleCollections: [{
        action: {
            type: "Deny",
        },
        name: "apprulecoll",
        priority: 110,
        rules: [{
            description: "Deny inbound rule",
            name: "rule1",
            protocols: [{
                port: 443,
                protocolType: "Https",
            }],
            sourceAddresses: [
                "216.58.216.164",
                "10.0.0.0/24",
            ],
            targetFqdns: ["www.test.com"],
        }],
    }],
    azureFirewallName: "azurefirewall",
    ipConfigurations: [{
        name: "azureFirewallIpConfiguration",
        publicIPAddress: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
        },
        subnet: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
        },
    }],
    location: "West US",
    managementIpConfiguration: {
        name: "azureFirewallMgmtIpConfiguration",
        publicIPAddress: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName",
        },
        subnet: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet",
        },
    },
    natRuleCollections: [{
        action: {
            type: "Dnat",
        },
        name: "natrulecoll",
        priority: 112,
        rules: [
            {
                description: "D-NAT all outbound web traffic for inspection",
                destinationAddresses: ["1.2.3.4"],
                destinationPorts: ["443"],
                name: "DNAT-HTTPS-traffic",
                protocols: ["TCP"],
                sourceAddresses: ["*"],
                translatedAddress: "1.2.3.5",
                translatedPort: "8443",
            },
            {
                description: "D-NAT all inbound web traffic for inspection",
                destinationAddresses: ["1.2.3.4"],
                destinationPorts: ["80"],
                name: "DNAT-HTTP-traffic-With-FQDN",
                protocols: ["TCP"],
                sourceAddresses: ["*"],
                translatedFqdn: "internalhttpserver",
                translatedPort: "880",
            },
        ],
    }],
    networkRuleCollections: [{
        action: {
            type: "Deny",
        },
        name: "netrulecoll",
        priority: 112,
        rules: [
            {
                description: "Block traffic based on source IPs and ports",
                destinationAddresses: ["*"],
                destinationPorts: [
                    "443-444",
                    "8443",
                ],
                name: "L4-traffic",
                protocols: ["TCP"],
                sourceAddresses: [
                    "192.168.1.1-192.168.1.12",
                    "10.1.4.12-10.1.4.255",
                ],
            },
            {
                description: "Block traffic based on source IPs and ports to amazon",
                destinationFqdns: ["www.amazon.com"],
                destinationPorts: [
                    "443-444",
                    "8443",
                ],
                name: "L4-traffic-with-FQDN",
                protocols: ["TCP"],
                sourceAddresses: ["10.2.4.12-10.2.4.255"],
            },
        ],
    }],
    resourceGroupName: "rg1",
    sku: {
        name: "AZFW_VNet",
        tier: "Standard",
    },
    tags: {
        key1: "value1",
    },
    threatIntelMode: "Alert",
    zones: [],
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

azure_firewall = azure_native.network.AzureFirewall("azureFirewall",
    application_rule_collections=[azure_native.network.AzureFirewallApplicationRuleCollectionArgs(
        action=azure_native.network.AzureFirewallRCActionArgs(
            type="Deny",
        ),
        name="apprulecoll",
        priority=110,
        rules=[azure_native.network.AzureFirewallApplicationRuleArgs(
            description="Deny inbound rule",
            name="rule1",
            protocols=[azure_native.network.AzureFirewallApplicationRuleProtocolArgs(
                port=443,
                protocol_type="Https",
            )],
            source_addresses=[
                "216.58.216.164",
                "10.0.0.0/24",
            ],
            target_fqdns=["www.test.com"],
        )],
    )],
    azure_firewall_name="azurefirewall",
    ip_configurations=[azure_native.network.AzureFirewallIPConfigurationArgs(
        name="azureFirewallIpConfiguration",
        public_ip_address=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
        ),
        subnet=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
        ),
    )],
    location="West US",
    management_ip_configuration=azure_native.network.AzureFirewallIPConfigurationArgs(
        name="azureFirewallMgmtIpConfiguration",
        public_ip_address=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName",
        ),
        subnet=azure_native.network.SubResourceArgs(
            id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet",
        ),
    ),
    nat_rule_collections=[azure_native.network.AzureFirewallNatRuleCollectionArgs(
        action=azure_native.network.AzureFirewallNatRCActionArgs(
            type="Dnat",
        ),
        name="natrulecoll",
        priority=112,
        rules=[
            azure_native.network.AzureFirewallNatRuleArgs(
                description="D-NAT all outbound web traffic for inspection",
                destination_addresses=["1.2.3.4"],
                destination_ports=["443"],
                name="DNAT-HTTPS-traffic",
                protocols=["TCP"],
                source_addresses=["*"],
                translated_address="1.2.3.5",
                translated_port="8443",
            ),
            azure_native.network.AzureFirewallNatRuleArgs(
                description="D-NAT all inbound web traffic for inspection",
                destination_addresses=["1.2.3.4"],
                destination_ports=["80"],
                name="DNAT-HTTP-traffic-With-FQDN",
                protocols=["TCP"],
                source_addresses=["*"],
                translated_fqdn="internalhttpserver",
                translated_port="880",
            ),
        ],
    )],
    network_rule_collections=[azure_native.network.AzureFirewallNetworkRuleCollectionArgs(
        action=azure_native.network.AzureFirewallRCActionArgs(
            type="Deny",
        ),
        name="netrulecoll",
        priority=112,
        rules=[
            azure_native.network.AzureFirewallNetworkRuleArgs(
                description="Block traffic based on source IPs and ports",
                destination_addresses=["*"],
                destination_ports=[
                    "443-444",
                    "8443",
                ],
                name="L4-traffic",
                protocols=["TCP"],
                source_addresses=[
                    "192.168.1.1-192.168.1.12",
                    "10.1.4.12-10.1.4.255",
                ],
            ),
            azure_native.network.AzureFirewallNetworkRuleArgs(
                description="Block traffic based on source IPs and ports to amazon",
                destination_fqdns=["www.amazon.com"],
                destination_ports=[
                    "443-444",
                    "8443",
                ],
                name="L4-traffic-with-FQDN",
                protocols=["TCP"],
                source_addresses=["10.2.4.12-10.2.4.255"],
            ),
        ],
    )],
    resource_group_name="rg1",
    sku=azure_native.network.AzureFirewallSkuArgs(
        name="AZFW_VNet",
        tier="Standard",
    ),
    tags={
        "key1": "value1",
    },
    threat_intel_mode="Alert",
    zones=[])

```

{{% /example %}}
{{% example %}}
### Create Azure Firewall in virtual Hub
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var azureFirewall = new AzureNative.Network.AzureFirewall("azureFirewall", new AzureNative.Network.AzureFirewallArgs
        {
            AzureFirewallName = "azurefirewall",
            FirewallPolicy = new AzureNative.Network.Inputs.SubResourceArgs
            {
                Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1",
            },
            HubIPAddresses = new AzureNative.Network.Inputs.HubIPAddressesArgs
            {
                PublicIPs = new AzureNative.Network.Inputs.HubPublicIPAddressesArgs
                {
                    Addresses = {},
                    Count = 1,
                },
            },
            Location = "West US",
            ResourceGroupName = "rg1",
            Sku = new AzureNative.Network.Inputs.AzureFirewallSkuArgs
            {
                Name = "AZFW_Hub",
                Tier = "Standard",
            },
            Tags = 
            {
                { "key1", "value1" },
            },
            ThreatIntelMode = "Alert",
            VirtualHub = new AzureNative.Network.Inputs.SubResourceArgs
            {
                Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1",
            },
            Zones = {},
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewAzureFirewall(ctx, "azureFirewall", &network.AzureFirewallArgs{
			AzureFirewallName: pulumi.String("azurefirewall"),
			FirewallPolicy: &network.SubResourceArgs{
				Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1"),
			},
			HubIPAddresses: &network.HubIPAddressesArgs{
				PublicIPs: &network.HubPublicIPAddressesArgs{
					Addresses: network.AzureFirewallPublicIPAddressArray{},
					Count:     pulumi.Int(1),
				},
			},
			Location:          pulumi.String("West US"),
			ResourceGroupName: pulumi.String("rg1"),
			Sku: &network.AzureFirewallSkuArgs{
				Name: pulumi.String("AZFW_Hub"),
				Tier: pulumi.String("Standard"),
			},
			Tags: pulumi.StringMap{
				"key1": pulumi.String("value1"),
			},
			ThreatIntelMode: pulumi.String("Alert"),
			VirtualHub: &network.SubResourceArgs{
				Id: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
			},
			Zones: pulumi.StringArray{},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
    azureFirewallName: "azurefirewall",
    firewallPolicy: {
        id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1",
    },
    hubIPAddresses: {
        publicIPs: {
            addresses: [],
            count: 1,
        },
    },
    location: "West US",
    resourceGroupName: "rg1",
    sku: {
        name: "AZFW_Hub",
        tier: "Standard",
    },
    tags: {
        key1: "value1",
    },
    threatIntelMode: "Alert",
    virtualHub: {
        id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1",
    },
    zones: [],
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

azure_firewall = azure_native.network.AzureFirewall("azureFirewall",
    azure_firewall_name="azurefirewall",
    firewall_policy=azure_native.network.SubResourceArgs(
        id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1",
    ),
    hub_ip_addresses=azure_native.network.HubIPAddressesArgs(
        public_ips=azure_native.network.HubPublicIPAddressesArgs(
            addresses=[],
            count=1,
        ),
    ),
    location="West US",
    resource_group_name="rg1",
    sku=azure_native.network.AzureFirewallSkuArgs(
        name="AZFW_Hub",
        tier="Standard",
    ),
    tags={
        "key1": "value1",
    },
    threat_intel_mode="Alert",
    virtual_hub=azure_native.network.SubResourceArgs(
        id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1",
    ),
    zones=[])

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:network:AzureFirewall azurefirewall /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall 
```

 */
@ResourceType(type="azure-native:network:AzureFirewall")
public class AzureFirewall extends io.pulumi.resources.CustomResource {
    /**
     * The additional properties used to further config this azure firewall.
     */
    @OutputExport(name="additionalProperties", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> additionalProperties;

    /**
     * @return The additional properties used to further config this azure firewall.
     */
    public Output</* @Nullable */ Map<String,String>> getAdditionalProperties() {
        return this.additionalProperties;
    }
    /**
     * Collection of application rule collections used by Azure Firewall.
     */
    @OutputExport(name="applicationRuleCollections", type=List.class, parameters={AzureFirewallApplicationRuleCollectionResponse.class})
    private Output</* @Nullable */ List<AzureFirewallApplicationRuleCollectionResponse>> applicationRuleCollections;

    /**
     * @return Collection of application rule collections used by Azure Firewall.
     */
    public Output</* @Nullable */ List<AzureFirewallApplicationRuleCollectionResponse>> getApplicationRuleCollections() {
        return this.applicationRuleCollections;
    }
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    @OutputExport(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * The firewallPolicy associated with this azure firewall.
     */
    @OutputExport(name="firewallPolicy", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> firewallPolicy;

    /**
     * @return The firewallPolicy associated with this azure firewall.
     */
    public Output</* @Nullable */ SubResourceResponse> getFirewallPolicy() {
        return this.firewallPolicy;
    }
    /**
     * IP addresses associated with AzureFirewall.
     */
    @OutputExport(name="hubIPAddresses", type=HubIPAddressesResponse.class, parameters={})
    private Output</* @Nullable */ HubIPAddressesResponse> hubIPAddresses;

    /**
     * @return IP addresses associated with AzureFirewall.
     */
    public Output</* @Nullable */ HubIPAddressesResponse> getHubIPAddresses() {
        return this.hubIPAddresses;
    }
    /**
     * IP configuration of the Azure Firewall resource.
     */
    @OutputExport(name="ipConfigurations", type=List.class, parameters={AzureFirewallIPConfigurationResponse.class})
    private Output</* @Nullable */ List<AzureFirewallIPConfigurationResponse>> ipConfigurations;

    /**
     * @return IP configuration of the Azure Firewall resource.
     */
    public Output</* @Nullable */ List<AzureFirewallIPConfigurationResponse>> getIpConfigurations() {
        return this.ipConfigurations;
    }
    /**
     * IpGroups associated with AzureFirewall.
     */
    @OutputExport(name="ipGroups", type=List.class, parameters={AzureFirewallIpGroupsResponse.class})
    private Output<List<AzureFirewallIpGroupsResponse>> ipGroups;

    /**
     * @return IpGroups associated with AzureFirewall.
     */
    public Output<List<AzureFirewallIpGroupsResponse>> getIpGroups() {
        return this.ipGroups;
    }
    /**
     * Resource location.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return Resource location.
     */
    public Output</* @Nullable */ String> getLocation() {
        return this.location;
    }
    /**
     * IP configuration of the Azure Firewall used for management traffic.
     */
    @OutputExport(name="managementIpConfiguration", type=AzureFirewallIPConfigurationResponse.class, parameters={})
    private Output</* @Nullable */ AzureFirewallIPConfigurationResponse> managementIpConfiguration;

    /**
     * @return IP configuration of the Azure Firewall used for management traffic.
     */
    public Output</* @Nullable */ AzureFirewallIPConfigurationResponse> getManagementIpConfiguration() {
        return this.managementIpConfiguration;
    }
    /**
     * Resource name.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Collection of NAT rule collections used by Azure Firewall.
     */
    @OutputExport(name="natRuleCollections", type=List.class, parameters={AzureFirewallNatRuleCollectionResponse.class})
    private Output</* @Nullable */ List<AzureFirewallNatRuleCollectionResponse>> natRuleCollections;

    /**
     * @return Collection of NAT rule collections used by Azure Firewall.
     */
    public Output</* @Nullable */ List<AzureFirewallNatRuleCollectionResponse>> getNatRuleCollections() {
        return this.natRuleCollections;
    }
    /**
     * Collection of network rule collections used by Azure Firewall.
     */
    @OutputExport(name="networkRuleCollections", type=List.class, parameters={AzureFirewallNetworkRuleCollectionResponse.class})
    private Output</* @Nullable */ List<AzureFirewallNetworkRuleCollectionResponse>> networkRuleCollections;

    /**
     * @return Collection of network rule collections used by Azure Firewall.
     */
    public Output</* @Nullable */ List<AzureFirewallNetworkRuleCollectionResponse>> getNetworkRuleCollections() {
        return this.networkRuleCollections;
    }
    /**
     * The provisioning state of the Azure firewall resource.
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning state of the Azure firewall resource.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The Azure Firewall Resource SKU.
     */
    @OutputExport(name="sku", type=AzureFirewallSkuResponse.class, parameters={})
    private Output</* @Nullable */ AzureFirewallSkuResponse> sku;

    /**
     * @return The Azure Firewall Resource SKU.
     */
    public Output</* @Nullable */ AzureFirewallSkuResponse> getSku() {
        return this.sku;
    }
    /**
     * Resource tags.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * The operation mode for Threat Intelligence.
     */
    @OutputExport(name="threatIntelMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> threatIntelMode;

    /**
     * @return The operation mode for Threat Intelligence.
     */
    public Output</* @Nullable */ String> getThreatIntelMode() {
        return this.threatIntelMode;
    }
    /**
     * Resource type.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type.
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * The virtualHub to which the firewall belongs.
     */
    @OutputExport(name="virtualHub", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> virtualHub;

    /**
     * @return The virtualHub to which the firewall belongs.
     */
    public Output</* @Nullable */ SubResourceResponse> getVirtualHub() {
        return this.virtualHub;
    }
    /**
     * A list of availability zones denoting where the resource needs to come from.
     */
    @OutputExport(name="zones", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> zones;

    /**
     * @return A list of availability zones denoting where the resource needs to come from.
     */
    public Output</* @Nullable */ List<String>> getZones() {
        return this.zones;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AzureFirewall(String name, AzureFirewallArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:network:AzureFirewall", name, args == null ? AzureFirewallArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private AzureFirewall(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:network:AzureFirewall", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:network/v20180401:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20180601:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20180701:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20180801:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20181001:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20181101:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20181201:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190201:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190401:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190601:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190701:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190801:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190901:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20191101:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20191201:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200301:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200401:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200501:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200601:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200701:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200801:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20201101:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20210201:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20210301:AzureFirewall").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20210501:AzureFirewall").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AzureFirewall get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new AzureFirewall(name, id, options);
    }
}
