// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.resources.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Entity representing the reference to the template.
 * 
 */
public final class TemplateLinkArgs extends io.pulumi.resources.ResourceArgs {

    public static final TemplateLinkArgs Empty = new TemplateLinkArgs();

    /**
     * If included, must match the ContentVersion in the template.
     * 
     */
    @Import(name="contentVersion")
      private final @Nullable Output<String> contentVersion;

    public Output<String> getContentVersion() {
        return this.contentVersion == null ? Output.empty() : this.contentVersion;
    }

    /**
     * The resource id of a Template Spec. Use either the id or uri property, but not both.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * The query string (for example, a SAS token) to be used with the templateLink URI.
     * 
     */
    @Import(name="queryString")
      private final @Nullable Output<String> queryString;

    public Output<String> getQueryString() {
        return this.queryString == null ? Output.empty() : this.queryString;
    }

    /**
     * The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
     * 
     */
    @Import(name="relativePath")
      private final @Nullable Output<String> relativePath;

    public Output<String> getRelativePath() {
        return this.relativePath == null ? Output.empty() : this.relativePath;
    }

    /**
     * The URI of the template to deploy. Use either the uri or id property, but not both.
     * 
     */
    @Import(name="uri")
      private final @Nullable Output<String> uri;

    public Output<String> getUri() {
        return this.uri == null ? Output.empty() : this.uri;
    }

    public TemplateLinkArgs(
        @Nullable Output<String> contentVersion,
        @Nullable Output<String> id,
        @Nullable Output<String> queryString,
        @Nullable Output<String> relativePath,
        @Nullable Output<String> uri) {
        this.contentVersion = contentVersion;
        this.id = id;
        this.queryString = queryString;
        this.relativePath = relativePath;
        this.uri = uri;
    }

    private TemplateLinkArgs() {
        this.contentVersion = Output.empty();
        this.id = Output.empty();
        this.queryString = Output.empty();
        this.relativePath = Output.empty();
        this.uri = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TemplateLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> contentVersion;
        private @Nullable Output<String> id;
        private @Nullable Output<String> queryString;
        private @Nullable Output<String> relativePath;
        private @Nullable Output<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(TemplateLinkArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentVersion = defaults.contentVersion;
    	      this.id = defaults.id;
    	      this.queryString = defaults.queryString;
    	      this.relativePath = defaults.relativePath;
    	      this.uri = defaults.uri;
        }

        public Builder contentVersion(@Nullable Output<String> contentVersion) {
            this.contentVersion = contentVersion;
            return this;
        }
        public Builder contentVersion(@Nullable String contentVersion) {
            this.contentVersion = Output.ofNullable(contentVersion);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }
        public Builder queryString(@Nullable Output<String> queryString) {
            this.queryString = queryString;
            return this;
        }
        public Builder queryString(@Nullable String queryString) {
            this.queryString = Output.ofNullable(queryString);
            return this;
        }
        public Builder relativePath(@Nullable Output<String> relativePath) {
            this.relativePath = relativePath;
            return this;
        }
        public Builder relativePath(@Nullable String relativePath) {
            this.relativePath = Output.ofNullable(relativePath);
            return this;
        }
        public Builder uri(@Nullable Output<String> uri) {
            this.uri = uri;
            return this;
        }
        public Builder uri(@Nullable String uri) {
            this.uri = Output.ofNullable(uri);
            return this;
        }        public TemplateLinkArgs build() {
            return new TemplateLinkArgs(contentVersion, id, queryString, relativePath, uri);
        }
    }
}
