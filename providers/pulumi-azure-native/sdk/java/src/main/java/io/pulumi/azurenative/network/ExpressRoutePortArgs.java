// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.enums.ExpressRoutePortsEncapsulation;
import io.pulumi.azurenative.network.inputs.ExpressRouteLinkArgs;
import io.pulumi.azurenative.network.inputs.ManagedServiceIdentityArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExpressRoutePortArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExpressRoutePortArgs Empty = new ExpressRoutePortArgs();

    /**
     * Bandwidth of procured ports in Gbps.
     * 
     */
    @InputImport(name="bandwidthInGbps")
    private final @Nullable Input<Integer> bandwidthInGbps;

    public Input<Integer> getBandwidthInGbps() {
        return this.bandwidthInGbps == null ? Input.empty() : this.bandwidthInGbps;
    }

    /**
     * Encapsulation method on physical ports.
     * 
     */
    @InputImport(name="encapsulation")
    private final @Nullable Input<Either<String,ExpressRoutePortsEncapsulation>> encapsulation;

    public Input<Either<String,ExpressRoutePortsEncapsulation>> getEncapsulation() {
        return this.encapsulation == null ? Input.empty() : this.encapsulation;
    }

    /**
     * The name of the ExpressRoutePort resource.
     * 
     */
    @InputImport(name="expressRoutePortName")
    private final @Nullable Input<String> expressRoutePortName;

    public Input<String> getExpressRoutePortName() {
        return this.expressRoutePortName == null ? Input.empty() : this.expressRoutePortName;
    }

    /**
     * Resource ID.
     * 
     */
    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * The identity of ExpressRoutePort, if configured.
     * 
     */
    @InputImport(name="identity")
    private final @Nullable Input<ManagedServiceIdentityArgs> identity;

    public Input<ManagedServiceIdentityArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    /**
     * The set of physical links of the ExpressRoutePort resource.
     * 
     */
    @InputImport(name="links")
    private final @Nullable Input<List<ExpressRouteLinkArgs>> links;

    public Input<List<ExpressRouteLinkArgs>> getLinks() {
        return this.links == null ? Input.empty() : this.links;
    }

    /**
     * Resource location.
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the peering location that the ExpressRoutePort is mapped to physically.
     * 
     */
    @InputImport(name="peeringLocation")
    private final @Nullable Input<String> peeringLocation;

    public Input<String> getPeeringLocation() {
        return this.peeringLocation == null ? Input.empty() : this.peeringLocation;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ExpressRoutePortArgs(
        @Nullable Input<Integer> bandwidthInGbps,
        @Nullable Input<Either<String,ExpressRoutePortsEncapsulation>> encapsulation,
        @Nullable Input<String> expressRoutePortName,
        @Nullable Input<String> id,
        @Nullable Input<ManagedServiceIdentityArgs> identity,
        @Nullable Input<List<ExpressRouteLinkArgs>> links,
        @Nullable Input<String> location,
        @Nullable Input<String> peeringLocation,
        Input<String> resourceGroupName,
        @Nullable Input<Map<String,String>> tags) {
        this.bandwidthInGbps = bandwidthInGbps;
        this.encapsulation = encapsulation;
        this.expressRoutePortName = expressRoutePortName;
        this.id = id;
        this.identity = identity;
        this.links = links;
        this.location = location;
        this.peeringLocation = peeringLocation;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private ExpressRoutePortArgs() {
        this.bandwidthInGbps = Input.empty();
        this.encapsulation = Input.empty();
        this.expressRoutePortName = Input.empty();
        this.id = Input.empty();
        this.identity = Input.empty();
        this.links = Input.empty();
        this.location = Input.empty();
        this.peeringLocation = Input.empty();
        this.resourceGroupName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExpressRoutePortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> bandwidthInGbps;
        private @Nullable Input<Either<String,ExpressRoutePortsEncapsulation>> encapsulation;
        private @Nullable Input<String> expressRoutePortName;
        private @Nullable Input<String> id;
        private @Nullable Input<ManagedServiceIdentityArgs> identity;
        private @Nullable Input<List<ExpressRouteLinkArgs>> links;
        private @Nullable Input<String> location;
        private @Nullable Input<String> peeringLocation;
        private Input<String> resourceGroupName;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ExpressRoutePortArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidthInGbps = defaults.bandwidthInGbps;
    	      this.encapsulation = defaults.encapsulation;
    	      this.expressRoutePortName = defaults.expressRoutePortName;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.links = defaults.links;
    	      this.location = defaults.location;
    	      this.peeringLocation = defaults.peeringLocation;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder setBandwidthInGbps(@Nullable Input<Integer> bandwidthInGbps) {
            this.bandwidthInGbps = bandwidthInGbps;
            return this;
        }

        public Builder setBandwidthInGbps(@Nullable Integer bandwidthInGbps) {
            this.bandwidthInGbps = Input.ofNullable(bandwidthInGbps);
            return this;
        }

        public Builder setEncapsulation(@Nullable Input<Either<String,ExpressRoutePortsEncapsulation>> encapsulation) {
            this.encapsulation = encapsulation;
            return this;
        }

        public Builder setEncapsulation(@Nullable Either<String,ExpressRoutePortsEncapsulation> encapsulation) {
            this.encapsulation = Input.ofNullable(encapsulation);
            return this;
        }

        public Builder setExpressRoutePortName(@Nullable Input<String> expressRoutePortName) {
            this.expressRoutePortName = expressRoutePortName;
            return this;
        }

        public Builder setExpressRoutePortName(@Nullable String expressRoutePortName) {
            this.expressRoutePortName = Input.ofNullable(expressRoutePortName);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setIdentity(@Nullable Input<ManagedServiceIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIdentity(@Nullable ManagedServiceIdentityArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder setLinks(@Nullable Input<List<ExpressRouteLinkArgs>> links) {
            this.links = links;
            return this;
        }

        public Builder setLinks(@Nullable List<ExpressRouteLinkArgs> links) {
            this.links = Input.ofNullable(links);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setPeeringLocation(@Nullable Input<String> peeringLocation) {
            this.peeringLocation = peeringLocation;
            return this;
        }

        public Builder setPeeringLocation(@Nullable String peeringLocation) {
            this.peeringLocation = Input.ofNullable(peeringLocation);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public ExpressRoutePortArgs build() {
            return new ExpressRoutePortArgs(bandwidthInGbps, encapsulation, expressRoutePortName, id, identity, links, location, peeringLocation, resourceGroupName, tags);
        }
    }
}
