// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Sftp read settings.
 * 
 */
public final class HttpReadSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final HttpReadSettingsArgs Empty = new HttpReadSettingsArgs();

    /**
     * The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="additionalHeaders")
    private final @Nullable Input<Object> additionalHeaders;

    public Input<Object> getAdditionalHeaders() {
        return this.additionalHeaders == null ? Input.empty() : this.additionalHeaders;
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @InputImport(name="disableMetricsCollection")
    private final @Nullable Input<Object> disableMetricsCollection;

    public Input<Object> getDisableMetricsCollection() {
        return this.disableMetricsCollection == null ? Input.empty() : this.disableMetricsCollection;
    }

    /**
     * Indicates whether to enable partition discovery.
     * 
     */
    @InputImport(name="enablePartitionDiscovery")
    private final @Nullable Input<Boolean> enablePartitionDiscovery;

    public Input<Boolean> getEnablePartitionDiscovery() {
        return this.enablePartitionDiscovery == null ? Input.empty() : this.enablePartitionDiscovery;
    }

    /**
     * The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @InputImport(name="maxConcurrentConnections")
    private final @Nullable Input<Object> maxConcurrentConnections;

    public Input<Object> getMaxConcurrentConnections() {
        return this.maxConcurrentConnections == null ? Input.empty() : this.maxConcurrentConnections;
    }

    /**
     * Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="partitionRootPath")
    private final @Nullable Input<Object> partitionRootPath;

    public Input<Object> getPartitionRootPath() {
        return this.partitionRootPath == null ? Input.empty() : this.partitionRootPath;
    }

    /**
     * The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="requestBody")
    private final @Nullable Input<Object> requestBody;

    public Input<Object> getRequestBody() {
        return this.requestBody == null ? Input.empty() : this.requestBody;
    }

    /**
     * The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="requestMethod")
    private final @Nullable Input<Object> requestMethod;

    public Input<Object> getRequestMethod() {
        return this.requestMethod == null ? Input.empty() : this.requestMethod;
    }

    /**
     * Specifies the timeout for a HTTP client to get HTTP response from HTTP server.
     * 
     */
    @InputImport(name="requestTimeout")
    private final @Nullable Input<Object> requestTimeout;

    public Input<Object> getRequestTimeout() {
        return this.requestTimeout == null ? Input.empty() : this.requestTimeout;
    }

    /**
     * The read setting type.
     * Expected value is 'HttpReadSettings'.
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public HttpReadSettingsArgs(
        @Nullable Input<Object> additionalHeaders,
        @Nullable Input<Object> disableMetricsCollection,
        @Nullable Input<Boolean> enablePartitionDiscovery,
        @Nullable Input<Object> maxConcurrentConnections,
        @Nullable Input<Object> partitionRootPath,
        @Nullable Input<Object> requestBody,
        @Nullable Input<Object> requestMethod,
        @Nullable Input<Object> requestTimeout,
        Input<String> type) {
        this.additionalHeaders = additionalHeaders;
        this.disableMetricsCollection = disableMetricsCollection;
        this.enablePartitionDiscovery = enablePartitionDiscovery;
        this.maxConcurrentConnections = maxConcurrentConnections;
        this.partitionRootPath = partitionRootPath;
        this.requestBody = requestBody;
        this.requestMethod = requestMethod;
        this.requestTimeout = requestTimeout;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private HttpReadSettingsArgs() {
        this.additionalHeaders = Input.empty();
        this.disableMetricsCollection = Input.empty();
        this.enablePartitionDiscovery = Input.empty();
        this.maxConcurrentConnections = Input.empty();
        this.partitionRootPath = Input.empty();
        this.requestBody = Input.empty();
        this.requestMethod = Input.empty();
        this.requestTimeout = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpReadSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Object> additionalHeaders;
        private @Nullable Input<Object> disableMetricsCollection;
        private @Nullable Input<Boolean> enablePartitionDiscovery;
        private @Nullable Input<Object> maxConcurrentConnections;
        private @Nullable Input<Object> partitionRootPath;
        private @Nullable Input<Object> requestBody;
        private @Nullable Input<Object> requestMethod;
        private @Nullable Input<Object> requestTimeout;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpReadSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalHeaders = defaults.additionalHeaders;
    	      this.disableMetricsCollection = defaults.disableMetricsCollection;
    	      this.enablePartitionDiscovery = defaults.enablePartitionDiscovery;
    	      this.maxConcurrentConnections = defaults.maxConcurrentConnections;
    	      this.partitionRootPath = defaults.partitionRootPath;
    	      this.requestBody = defaults.requestBody;
    	      this.requestMethod = defaults.requestMethod;
    	      this.requestTimeout = defaults.requestTimeout;
    	      this.type = defaults.type;
        }

        public Builder setAdditionalHeaders(@Nullable Input<Object> additionalHeaders) {
            this.additionalHeaders = additionalHeaders;
            return this;
        }

        public Builder setAdditionalHeaders(@Nullable Object additionalHeaders) {
            this.additionalHeaders = Input.ofNullable(additionalHeaders);
            return this;
        }

        public Builder setDisableMetricsCollection(@Nullable Input<Object> disableMetricsCollection) {
            this.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder setDisableMetricsCollection(@Nullable Object disableMetricsCollection) {
            this.disableMetricsCollection = Input.ofNullable(disableMetricsCollection);
            return this;
        }

        public Builder setEnablePartitionDiscovery(@Nullable Input<Boolean> enablePartitionDiscovery) {
            this.enablePartitionDiscovery = enablePartitionDiscovery;
            return this;
        }

        public Builder setEnablePartitionDiscovery(@Nullable Boolean enablePartitionDiscovery) {
            this.enablePartitionDiscovery = Input.ofNullable(enablePartitionDiscovery);
            return this;
        }

        public Builder setMaxConcurrentConnections(@Nullable Input<Object> maxConcurrentConnections) {
            this.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder setMaxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            this.maxConcurrentConnections = Input.ofNullable(maxConcurrentConnections);
            return this;
        }

        public Builder setPartitionRootPath(@Nullable Input<Object> partitionRootPath) {
            this.partitionRootPath = partitionRootPath;
            return this;
        }

        public Builder setPartitionRootPath(@Nullable Object partitionRootPath) {
            this.partitionRootPath = Input.ofNullable(partitionRootPath);
            return this;
        }

        public Builder setRequestBody(@Nullable Input<Object> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        public Builder setRequestBody(@Nullable Object requestBody) {
            this.requestBody = Input.ofNullable(requestBody);
            return this;
        }

        public Builder setRequestMethod(@Nullable Input<Object> requestMethod) {
            this.requestMethod = requestMethod;
            return this;
        }

        public Builder setRequestMethod(@Nullable Object requestMethod) {
            this.requestMethod = Input.ofNullable(requestMethod);
            return this;
        }

        public Builder setRequestTimeout(@Nullable Input<Object> requestTimeout) {
            this.requestTimeout = requestTimeout;
            return this;
        }

        public Builder setRequestTimeout(@Nullable Object requestTimeout) {
            this.requestTimeout = Input.ofNullable(requestTimeout);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public HttpReadSettingsArgs build() {
            return new HttpReadSettingsArgs(additionalHeaders, disableMetricsCollection, enablePartitionDiscovery, maxConcurrentConnections, partitionRootPath, requestBody, requestMethod, requestTimeout, type);
        }
    }
}
