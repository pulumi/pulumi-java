// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.insights.outputs.DataSourceResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Virtual machine guest diagnostics settings resource.
API Version: 2018-06-01-preview.

{{% examples %}}
## Example Usage
{{% example %}}
### Create or update a guest diagnostic settings
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var guestDiagnosticsSetting = new AzureNative.Insights.GuestDiagnosticsSetting("guestDiagnosticsSetting", new AzureNative.Insights.GuestDiagnosticsSettingArgs
        {
            DataSources = 
            {
                new AzureNative.Insights.Inputs.DataSourceArgs
                {
                    Configuration = new AzureNative.Insights.Inputs.DataSourceConfigurationArgs
                    {
                        PerfCounters = 
                        {
                            new AzureNative.Insights.Inputs.PerformanceCounterConfigurationArgs
                            {
                                Name = "\\Process(_Total)\\%Processor Time",
                                SamplingPeriod = "PT1M",
                            },
                            new AzureNative.Insights.Inputs.PerformanceCounterConfigurationArgs
                            {
                                Name = "\\Process(_Total)\\Working Set",
                                SamplingPeriod = "PT1M",
                            },
                        },
                    },
                    Kind = "PerformanceCounter",
                    Sinks = 
                    {
                        new AzureNative.Insights.Inputs.SinkConfigurationArgs
                        {
                            Kind = "LogAnalytics",
                        },
                    },
                },
                new AzureNative.Insights.Inputs.DataSourceArgs
                {
                    Configuration = new AzureNative.Insights.Inputs.DataSourceConfigurationArgs
                    {
                        Providers = 
                        {
                            new AzureNative.Insights.Inputs.EtwProviderConfigurationArgs
                            {
                                Id = "1",
                            },
                            new AzureNative.Insights.Inputs.EtwProviderConfigurationArgs
                            {
                                Id = "2",
                            },
                        },
                    },
                    Kind = "ETWProviders",
                    Sinks = 
                    {
                        new AzureNative.Insights.Inputs.SinkConfigurationArgs
                        {
                            Kind = "LogAnalytics",
                        },
                    },
                },
                new AzureNative.Insights.Inputs.DataSourceArgs
                {
                    Configuration = new AzureNative.Insights.Inputs.DataSourceConfigurationArgs
                    {
                        EventLogs = 
                        {
                            new AzureNative.Insights.Inputs.EventLogConfigurationArgs
                            {
                                Filter = "SourceName == Xyz AND EventId = \"100\" AND  $Xpath/Column=\"DCName\" = \"CatWoman\"",
                                LogName = "Application",
                            },
                            new AzureNative.Insights.Inputs.EventLogConfigurationArgs
                            {
                                Filter = "SourceName == Xyz AND EventId = \"100\" AND  $Xpath/Column=\"DCName\" = \"BatMan\"",
                                LogName = "Application",
                            },
                        },
                    },
                    Kind = "WindowsEventLogs",
                    Sinks = 
                    {
                        new AzureNative.Insights.Inputs.SinkConfigurationArgs
                        {
                            Kind = "LogAnalytics",
                        },
                    },
                },
            },
            DiagnosticSettingsName = "SampleDiagSetting",
            Location = "Global",
            OsType = "Windows",
            ResourceGroupName = "Default-ResourceGroup",
            Tags = ,
        });
    }

}

```

```go
package main

import (
	"fmt"

	insights "github.com/pulumi/pulumi-azure-native/sdk/go/azure/insights"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := insights.NewguestDiagnosticsSetting(ctx, "guestDiagnosticsSetting", &insights.guestDiagnosticsSettingArgs{
			DataSources: []insights.DataSourceArgs{
				&insights.DataSourceArgs{
					Configuration: &insights.DataSourceConfigurationArgs{
						PerfCounters: insights.PerformanceCounterConfigurationArray{
							&insights.PerformanceCounterConfigurationArgs{
								Name:           pulumi.String(fmt.Sprintf("%v%v%v", "\\Process(_Total)\\", "%", "Processor Time")),
								SamplingPeriod: pulumi.String("PT1M"),
							},
							&insights.PerformanceCounterConfigurationArgs{
								Name:           pulumi.String("\\Process(_Total)\\Working Set"),
								SamplingPeriod: pulumi.String("PT1M"),
							},
						},
					},
					Kind: pulumi.String("PerformanceCounter"),
					Sinks: []insights.SinkConfigurationArgs{
						&insights.SinkConfigurationArgs{
							Kind: pulumi.String("LogAnalytics"),
						},
					},
				},
				&insights.DataSourceArgs{
					Configuration: &insights.DataSourceConfigurationArgs{
						Providers: insights.EtwProviderConfigurationArray{
							&insights.EtwProviderConfigurationArgs{
								Id: pulumi.String("1"),
							},
							&insights.EtwProviderConfigurationArgs{
								Id: pulumi.String("2"),
							},
						},
					},
					Kind: pulumi.String("ETWProviders"),
					Sinks: []insights.SinkConfigurationArgs{
						&insights.SinkConfigurationArgs{
							Kind: pulumi.String("LogAnalytics"),
						},
					},
				},
				&insights.DataSourceArgs{
					Configuration: &insights.DataSourceConfigurationArgs{
						EventLogs: insights.EventLogConfigurationArray{
							&insights.EventLogConfigurationArgs{
								Filter:  pulumi.String(fmt.Sprintf("%v%v%v", "SourceName == Xyz AND EventId = \"100\" AND  ", "$", "Xpath/Column=\"DCName\" = \"CatWoman\"")),
								LogName: pulumi.String("Application"),
							},
							&insights.EventLogConfigurationArgs{
								Filter:  pulumi.String(fmt.Sprintf("%v%v%v", "SourceName == Xyz AND EventId = \"100\" AND  ", "$", "Xpath/Column=\"DCName\" = \"BatMan\"")),
								LogName: pulumi.String("Application"),
							},
						},
					},
					Kind: pulumi.String("WindowsEventLogs"),
					Sinks: []insights.SinkConfigurationArgs{
						&insights.SinkConfigurationArgs{
							Kind: pulumi.String("LogAnalytics"),
						},
					},
				},
			},
			DiagnosticSettingsName: pulumi.String("SampleDiagSetting"),
			Location:               pulumi.String("Global"),
			OsType:                 pulumi.String("Windows"),
			ResourceGroupName:      pulumi.String("Default-ResourceGroup"),
			Tags:                   nil,
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const guestDiagnosticsSetting = new azure_native.insights.GuestDiagnosticsSetting("guestDiagnosticsSetting", {
    dataSources: [
        {
            configuration: {
                perfCounters: [
                    {
                        name: `\Process(_Total)\%Processor Time`,
                        samplingPeriod: "PT1M",
                    },
                    {
                        name: "\\Process(_Total)\\Working Set",
                        samplingPeriod: "PT1M",
                    },
                ],
            },
            kind: "PerformanceCounter",
            sinks: [{
                kind: "LogAnalytics",
            }],
        },
        {
            configuration: {
                providers: [
                    {
                        id: 1,
                    },
                    {
                        id: 2,
                    },
                ],
            },
            kind: "ETWProviders",
            sinks: [{
                kind: "LogAnalytics",
            }],
        },
        {
            configuration: {
                eventLogs: [
                    {
                        filter: `SourceName == Xyz AND EventId = "100" AND  $Xpath/Column="DCName" = "CatWoman"`,
                        logName: "Application",
                    },
                    {
                        filter: `SourceName == Xyz AND EventId = "100" AND  $Xpath/Column="DCName" = "BatMan"`,
                        logName: "Application",
                    },
                ],
            },
            kind: "WindowsEventLogs",
            sinks: [{
                kind: "LogAnalytics",
            }],
        },
    ],
    diagnosticSettingsName: "SampleDiagSetting",
    location: "Global",
    osType: "Windows",
    resourceGroupName: "Default-ResourceGroup",
    tags: {},
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

guest_diagnostics_setting = azure_native.insights.GuestDiagnosticsSetting("guestDiagnosticsSetting",
    data_sources=[
        azure_native.insights.DataSourceArgs(
            configuration=azure_native.insights.DataSourceConfigurationArgs(
                perf_counters=[
                    azure_native.insights.PerformanceCounterConfigurationArgs(
                        name="\\Process(_Total)\\%Processor Time",
                        sampling_period="PT1M",
                    ),
                    azure_native.insights.PerformanceCounterConfigurationArgs(
                        name="\\Process(_Total)\\Working Set",
                        sampling_period="PT1M",
                    ),
                ],
            ),
            kind="PerformanceCounter",
            sinks=[azure_native.insights.SinkConfigurationArgs(
                kind="LogAnalytics",
            )],
        ),
        azure_native.insights.DataSourceArgs(
            configuration=azure_native.insights.DataSourceConfigurationArgs(
                providers=[
                    azure_native.insights.EtwProviderConfigurationArgs(
                        id="1",
                    ),
                    azure_native.insights.EtwProviderConfigurationArgs(
                        id="2",
                    ),
                ],
            ),
            kind="ETWProviders",
            sinks=[azure_native.insights.SinkConfigurationArgs(
                kind="LogAnalytics",
            )],
        ),
        azure_native.insights.DataSourceArgs(
            configuration=azure_native.insights.DataSourceConfigurationArgs(
                event_logs=[
                    azure_native.insights.EventLogConfigurationArgs(
                        filter="SourceName == Xyz AND EventId = \"100\" AND  $Xpath/Column=\"DCName\" = \"CatWoman\"",
                        log_name="Application",
                    ),
                    azure_native.insights.EventLogConfigurationArgs(
                        filter="SourceName == Xyz AND EventId = \"100\" AND  $Xpath/Column=\"DCName\" = \"BatMan\"",
                        log_name="Application",
                    ),
                ],
            ),
            kind="WindowsEventLogs",
            sinks=[azure_native.insights.SinkConfigurationArgs(
                kind="LogAnalytics",
            )],
        ),
    ],
    diagnostic_settings_name="SampleDiagSetting",
    location="Global",
    os_type="Windows",
    resource_group_name="Default-ResourceGroup",
    tags={})

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:insights:guestDiagnosticsSetting SampleDiagSetting /subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/Default-ResourceGroup/providers/microsoft.insights/guestDiagnosticSettings/SampleDiagSetting 
```

 */
@ResourceType(type="azure-native:insights:guestDiagnosticsSetting")
public class GuestDiagnosticsSetting extends io.pulumi.resources.CustomResource {
    /**
     * the array of data source object which are configured to collect and send data
     */
    @OutputExport(name="dataSources", type=List.class, parameters={DataSourceResponse.class})
    private Output</* @Nullable */ List<DataSourceResponse>> dataSources;

    /**
     * @return the array of data source object which are configured to collect and send data
     */
    public Output</* @Nullable */ List<DataSourceResponse>> getDataSources() {
        return this.dataSources;
    }
    /**
     * Resource location
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource location
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Azure resource name
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Azure resource name
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Operating system type for the configuration
     */
    @OutputExport(name="osType", type=String.class, parameters={})
    private Output</* @Nullable */ String> osType;

    /**
     * @return Operating system type for the configuration
     */
    public Output</* @Nullable */ String> getOsType() {
        return this.osType;
    }
    /**
     * 
     */
    @OutputExport(name="proxySetting", type=String.class, parameters={})
    private Output</* @Nullable */ String> proxySetting;

    public Output</* @Nullable */ String> getProxySetting() {
        return this.proxySetting;
    }
    /**
     * Resource tags
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Azure resource type
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Azure resource type
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GuestDiagnosticsSetting(String name, GuestDiagnosticsSettingArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:insights:guestDiagnosticsSetting", name, args == null ? GuestDiagnosticsSettingArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private GuestDiagnosticsSetting(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:insights:guestDiagnosticsSetting", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:insights/v20180601preview:guestDiagnosticsSetting").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GuestDiagnosticsSetting get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new GuestDiagnosticsSetting(name, id, options);
    }
}
