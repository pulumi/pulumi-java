// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.videoanalyzer.inputs;

import io.pulumi.azurenative.videoanalyzer.enums.VideoScaleMode;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The video scaling information.
 * 
 */
public final class VideoScaleArgs extends io.pulumi.resources.ResourceArgs {

    public static final VideoScaleArgs Empty = new VideoScaleArgs();

    /**
     * The desired output video height.
     * 
     */
    @Import(name="height")
      private final @Nullable Output<String> height;

    public Output<String> getHeight() {
        return this.height == null ? Output.empty() : this.height;
    }

    /**
     * Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided.
     * 
     */
    @Import(name="mode")
      private final @Nullable Output<Either<String,VideoScaleMode>> mode;

    public Output<Either<String,VideoScaleMode>> getMode() {
        return this.mode == null ? Output.empty() : this.mode;
    }

    /**
     * The desired output video width.
     * 
     */
    @Import(name="width")
      private final @Nullable Output<String> width;

    public Output<String> getWidth() {
        return this.width == null ? Output.empty() : this.width;
    }

    public VideoScaleArgs(
        @Nullable Output<String> height,
        @Nullable Output<Either<String,VideoScaleMode>> mode,
        @Nullable Output<String> width) {
        this.height = height;
        this.mode = mode;
        this.width = width;
    }

    private VideoScaleArgs() {
        this.height = Output.empty();
        this.mode = Output.empty();
        this.width = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VideoScaleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> height;
        private @Nullable Output<Either<String,VideoScaleMode>> mode;
        private @Nullable Output<String> width;

        public Builder() {
    	      // Empty
        }

        public Builder(VideoScaleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.height = defaults.height;
    	      this.mode = defaults.mode;
    	      this.width = defaults.width;
        }

        public Builder height(@Nullable Output<String> height) {
            this.height = height;
            return this;
        }
        public Builder height(@Nullable String height) {
            this.height = Output.ofNullable(height);
            return this;
        }
        public Builder mode(@Nullable Output<Either<String,VideoScaleMode>> mode) {
            this.mode = mode;
            return this;
        }
        public Builder mode(@Nullable Either<String,VideoScaleMode> mode) {
            this.mode = Output.ofNullable(mode);
            return this;
        }
        public Builder width(@Nullable Output<String> width) {
            this.width = width;
            return this;
        }
        public Builder width(@Nullable String width) {
            this.width = Output.ofNullable(width);
            return this;
        }        public VideoScaleArgs build() {
            return new VideoScaleArgs(height, mode, width);
        }
    }
}
