// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import io.pulumi.azurenative.datafactory.inputs.SecureStringArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * SAP Table Linked Service.
 * 
 */
public final class SapTableLinkedServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final SapTableLinkedServiceArgs Empty = new SapTableLinkedServiceArgs();

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @InputImport(name="annotations")
      private final @Nullable Input<List<Object>> annotations;

    public Input<List<Object>> getAnnotations() {
        return this.annotations == null ? Input.empty() : this.annotations;
    }

    /**
     * Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="clientId")
      private final @Nullable Input<Object> clientId;

    public Input<Object> getClientId() {
        return this.clientId == null ? Input.empty() : this.clientId;
    }

    /**
     * The integration runtime reference.
     * 
     */
    @InputImport(name="connectVia")
      private final @Nullable Input<IntegrationRuntimeReferenceArgs> connectVia;

    public Input<IntegrationRuntimeReferenceArgs> getConnectVia() {
        return this.connectVia == null ? Input.empty() : this.connectVia;
    }

    /**
     * Linked service description.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="encryptedCredential")
      private final @Nullable Input<Object> encryptedCredential;

    public Input<Object> getEncryptedCredential() {
        return this.encryptedCredential == null ? Input.empty() : this.encryptedCredential;
    }

    /**
     * Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="language")
      private final @Nullable Input<Object> language;

    public Input<Object> getLanguage() {
        return this.language == null ? Input.empty() : this.language;
    }

    /**
     * The Logon Group for the SAP System. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="logonGroup")
      private final @Nullable Input<Object> logonGroup;

    public Input<Object> getLogonGroup() {
        return this.logonGroup == null ? Input.empty() : this.logonGroup;
    }

    /**
     * The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="messageServer")
      private final @Nullable Input<Object> messageServer;

    public Input<Object> getMessageServer() {
        return this.messageServer == null ? Input.empty() : this.messageServer;
    }

    /**
     * The service name or port number of the Message Server. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="messageServerService")
      private final @Nullable Input<Object> messageServerService;

    public Input<Object> getMessageServerService() {
        return this.messageServerService == null ? Input.empty() : this.messageServerService;
    }

    /**
     * Parameters for linked service.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Input<Map<String,ParameterSpecificationArgs>> parameters;

    public Input<Map<String,ParameterSpecificationArgs>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * Password to access the SAP server where the table is located.
     * 
     */
    @InputImport(name="password")
      private final @Nullable Input<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password;

    public Input<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> getPassword() {
        return this.password == null ? Input.empty() : this.password;
    }

    /**
     * Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="server")
      private final @Nullable Input<Object> server;

    public Input<Object> getServer() {
        return this.server == null ? Input.empty() : this.server;
    }

    /**
     * External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="sncLibraryPath")
      private final @Nullable Input<Object> sncLibraryPath;

    public Input<Object> getSncLibraryPath() {
        return this.sncLibraryPath == null ? Input.empty() : this.sncLibraryPath;
    }

    /**
     * SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="sncMode")
      private final @Nullable Input<Object> sncMode;

    public Input<Object> getSncMode() {
        return this.sncMode == null ? Input.empty() : this.sncMode;
    }

    /**
     * Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="sncMyName")
      private final @Nullable Input<Object> sncMyName;

    public Input<Object> getSncMyName() {
        return this.sncMyName == null ? Input.empty() : this.sncMyName;
    }

    /**
     * Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="sncPartnerName")
      private final @Nullable Input<Object> sncPartnerName;

    public Input<Object> getSncPartnerName() {
        return this.sncPartnerName == null ? Input.empty() : this.sncPartnerName;
    }

    /**
     * SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="sncQop")
      private final @Nullable Input<Object> sncQop;

    public Input<Object> getSncQop() {
        return this.sncQop == null ? Input.empty() : this.sncQop;
    }

    /**
     * SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="systemId")
      private final @Nullable Input<Object> systemId;

    public Input<Object> getSystemId() {
        return this.systemId == null ? Input.empty() : this.systemId;
    }

    /**
     * System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="systemNumber")
      private final @Nullable Input<Object> systemNumber;

    public Input<Object> getSystemNumber() {
        return this.systemNumber == null ? Input.empty() : this.systemNumber;
    }

    /**
     * Type of linked service.
     * Expected value is 'SapTable'.
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    /**
     * Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="userName")
      private final @Nullable Input<Object> userName;

    public Input<Object> getUserName() {
        return this.userName == null ? Input.empty() : this.userName;
    }

    public SapTableLinkedServiceArgs(
        @Nullable Input<List<Object>> annotations,
        @Nullable Input<Object> clientId,
        @Nullable Input<IntegrationRuntimeReferenceArgs> connectVia,
        @Nullable Input<String> description,
        @Nullable Input<Object> encryptedCredential,
        @Nullable Input<Object> language,
        @Nullable Input<Object> logonGroup,
        @Nullable Input<Object> messageServer,
        @Nullable Input<Object> messageServerService,
        @Nullable Input<Map<String,ParameterSpecificationArgs>> parameters,
        @Nullable Input<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password,
        @Nullable Input<Object> server,
        @Nullable Input<Object> sncLibraryPath,
        @Nullable Input<Object> sncMode,
        @Nullable Input<Object> sncMyName,
        @Nullable Input<Object> sncPartnerName,
        @Nullable Input<Object> sncQop,
        @Nullable Input<Object> systemId,
        @Nullable Input<Object> systemNumber,
        Input<String> type,
        @Nullable Input<Object> userName) {
        this.annotations = annotations;
        this.clientId = clientId;
        this.connectVia = connectVia;
        this.description = description;
        this.encryptedCredential = encryptedCredential;
        this.language = language;
        this.logonGroup = logonGroup;
        this.messageServer = messageServer;
        this.messageServerService = messageServerService;
        this.parameters = parameters;
        this.password = password;
        this.server = server;
        this.sncLibraryPath = sncLibraryPath;
        this.sncMode = sncMode;
        this.sncMyName = sncMyName;
        this.sncPartnerName = sncPartnerName;
        this.sncQop = sncQop;
        this.systemId = systemId;
        this.systemNumber = systemNumber;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userName = userName;
    }

    private SapTableLinkedServiceArgs() {
        this.annotations = Input.empty();
        this.clientId = Input.empty();
        this.connectVia = Input.empty();
        this.description = Input.empty();
        this.encryptedCredential = Input.empty();
        this.language = Input.empty();
        this.logonGroup = Input.empty();
        this.messageServer = Input.empty();
        this.messageServerService = Input.empty();
        this.parameters = Input.empty();
        this.password = Input.empty();
        this.server = Input.empty();
        this.sncLibraryPath = Input.empty();
        this.sncMode = Input.empty();
        this.sncMyName = Input.empty();
        this.sncPartnerName = Input.empty();
        this.sncQop = Input.empty();
        this.systemId = Input.empty();
        this.systemNumber = Input.empty();
        this.type = Input.empty();
        this.userName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SapTableLinkedServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<Object>> annotations;
        private @Nullable Input<Object> clientId;
        private @Nullable Input<IntegrationRuntimeReferenceArgs> connectVia;
        private @Nullable Input<String> description;
        private @Nullable Input<Object> encryptedCredential;
        private @Nullable Input<Object> language;
        private @Nullable Input<Object> logonGroup;
        private @Nullable Input<Object> messageServer;
        private @Nullable Input<Object> messageServerService;
        private @Nullable Input<Map<String,ParameterSpecificationArgs>> parameters;
        private @Nullable Input<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password;
        private @Nullable Input<Object> server;
        private @Nullable Input<Object> sncLibraryPath;
        private @Nullable Input<Object> sncMode;
        private @Nullable Input<Object> sncMyName;
        private @Nullable Input<Object> sncPartnerName;
        private @Nullable Input<Object> sncQop;
        private @Nullable Input<Object> systemId;
        private @Nullable Input<Object> systemNumber;
        private Input<String> type;
        private @Nullable Input<Object> userName;

        public Builder() {
    	      // Empty
        }

        public Builder(SapTableLinkedServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.clientId = defaults.clientId;
    	      this.connectVia = defaults.connectVia;
    	      this.description = defaults.description;
    	      this.encryptedCredential = defaults.encryptedCredential;
    	      this.language = defaults.language;
    	      this.logonGroup = defaults.logonGroup;
    	      this.messageServer = defaults.messageServer;
    	      this.messageServerService = defaults.messageServerService;
    	      this.parameters = defaults.parameters;
    	      this.password = defaults.password;
    	      this.server = defaults.server;
    	      this.sncLibraryPath = defaults.sncLibraryPath;
    	      this.sncMode = defaults.sncMode;
    	      this.sncMyName = defaults.sncMyName;
    	      this.sncPartnerName = defaults.sncPartnerName;
    	      this.sncQop = defaults.sncQop;
    	      this.systemId = defaults.systemId;
    	      this.systemNumber = defaults.systemNumber;
    	      this.type = defaults.type;
    	      this.userName = defaults.userName;
        }

        public Builder annotations(@Nullable Input<List<Object>> annotations) {
            this.annotations = annotations;
            return this;
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = Input.ofNullable(annotations);
            return this;
        }

        public Builder clientId(@Nullable Input<Object> clientId) {
            this.clientId = clientId;
            return this;
        }

        public Builder clientId(@Nullable Object clientId) {
            this.clientId = Input.ofNullable(clientId);
            return this;
        }

        public Builder connectVia(@Nullable Input<IntegrationRuntimeReferenceArgs> connectVia) {
            this.connectVia = connectVia;
            return this;
        }

        public Builder connectVia(@Nullable IntegrationRuntimeReferenceArgs connectVia) {
            this.connectVia = Input.ofNullable(connectVia);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder encryptedCredential(@Nullable Input<Object> encryptedCredential) {
            this.encryptedCredential = encryptedCredential;
            return this;
        }

        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            this.encryptedCredential = Input.ofNullable(encryptedCredential);
            return this;
        }

        public Builder language(@Nullable Input<Object> language) {
            this.language = language;
            return this;
        }

        public Builder language(@Nullable Object language) {
            this.language = Input.ofNullable(language);
            return this;
        }

        public Builder logonGroup(@Nullable Input<Object> logonGroup) {
            this.logonGroup = logonGroup;
            return this;
        }

        public Builder logonGroup(@Nullable Object logonGroup) {
            this.logonGroup = Input.ofNullable(logonGroup);
            return this;
        }

        public Builder messageServer(@Nullable Input<Object> messageServer) {
            this.messageServer = messageServer;
            return this;
        }

        public Builder messageServer(@Nullable Object messageServer) {
            this.messageServer = Input.ofNullable(messageServer);
            return this;
        }

        public Builder messageServerService(@Nullable Input<Object> messageServerService) {
            this.messageServerService = messageServerService;
            return this;
        }

        public Builder messageServerService(@Nullable Object messageServerService) {
            this.messageServerService = Input.ofNullable(messageServerService);
            return this;
        }

        public Builder parameters(@Nullable Input<Map<String,ParameterSpecificationArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Map<String,ParameterSpecificationArgs> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder password(@Nullable Input<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password) {
            this.password = password;
            return this;
        }

        public Builder password(@Nullable Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> password) {
            this.password = Input.ofNullable(password);
            return this;
        }

        public Builder server(@Nullable Input<Object> server) {
            this.server = server;
            return this;
        }

        public Builder server(@Nullable Object server) {
            this.server = Input.ofNullable(server);
            return this;
        }

        public Builder sncLibraryPath(@Nullable Input<Object> sncLibraryPath) {
            this.sncLibraryPath = sncLibraryPath;
            return this;
        }

        public Builder sncLibraryPath(@Nullable Object sncLibraryPath) {
            this.sncLibraryPath = Input.ofNullable(sncLibraryPath);
            return this;
        }

        public Builder sncMode(@Nullable Input<Object> sncMode) {
            this.sncMode = sncMode;
            return this;
        }

        public Builder sncMode(@Nullable Object sncMode) {
            this.sncMode = Input.ofNullable(sncMode);
            return this;
        }

        public Builder sncMyName(@Nullable Input<Object> sncMyName) {
            this.sncMyName = sncMyName;
            return this;
        }

        public Builder sncMyName(@Nullable Object sncMyName) {
            this.sncMyName = Input.ofNullable(sncMyName);
            return this;
        }

        public Builder sncPartnerName(@Nullable Input<Object> sncPartnerName) {
            this.sncPartnerName = sncPartnerName;
            return this;
        }

        public Builder sncPartnerName(@Nullable Object sncPartnerName) {
            this.sncPartnerName = Input.ofNullable(sncPartnerName);
            return this;
        }

        public Builder sncQop(@Nullable Input<Object> sncQop) {
            this.sncQop = sncQop;
            return this;
        }

        public Builder sncQop(@Nullable Object sncQop) {
            this.sncQop = Input.ofNullable(sncQop);
            return this;
        }

        public Builder systemId(@Nullable Input<Object> systemId) {
            this.systemId = systemId;
            return this;
        }

        public Builder systemId(@Nullable Object systemId) {
            this.systemId = Input.ofNullable(systemId);
            return this;
        }

        public Builder systemNumber(@Nullable Input<Object> systemNumber) {
            this.systemNumber = systemNumber;
            return this;
        }

        public Builder systemNumber(@Nullable Object systemNumber) {
            this.systemNumber = Input.ofNullable(systemNumber);
            return this;
        }

        public Builder type(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder userName(@Nullable Input<Object> userName) {
            this.userName = userName;
            return this;
        }

        public Builder userName(@Nullable Object userName) {
            this.userName = Input.ofNullable(userName);
            return this;
        }
        public SapTableLinkedServiceArgs build() {
            return new SapTableLinkedServiceArgs(annotations, clientId, connectVia, description, encryptedCredential, language, logonGroup, messageServer, messageServerService, parameters, password, server, sncLibraryPath, sncMode, sncMyName, sncPartnerName, sncQop, systemId, systemNumber, type, userName);
        }
    }
}
