// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.ApplicationGatewayCookieBasedAffinity;
import io.pulumi.azurenative.network.enums.ApplicationGatewayProtocol;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayConnectionDrainingArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Backend address pool settings of an application gateway.
 * 
 */
public final class ApplicationGatewayBackendHttpSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayBackendHttpSettingsArgs Empty = new ApplicationGatewayBackendHttpSettingsArgs();

    /**
     * Cookie name to use for the affinity cookie.
     * 
     */
    @Import(name="affinityCookieName")
      private final @Nullable Output<String> affinityCookieName;

    public Output<String> getAffinityCookieName() {
        return this.affinityCookieName == null ? Codegen.empty() : this.affinityCookieName;
    }

    /**
     * Array of references to application gateway authentication certificates.
     * 
     */
    @Import(name="authenticationCertificates")
      private final @Nullable Output<List<SubResourceArgs>> authenticationCertificates;

    public Output<List<SubResourceArgs>> getAuthenticationCertificates() {
        return this.authenticationCertificates == null ? Codegen.empty() : this.authenticationCertificates;
    }

    /**
     * Connection draining of the backend http settings resource.
     * 
     */
    @Import(name="connectionDraining")
      private final @Nullable Output<ApplicationGatewayConnectionDrainingArgs> connectionDraining;

    public Output<ApplicationGatewayConnectionDrainingArgs> getConnectionDraining() {
        return this.connectionDraining == null ? Codegen.empty() : this.connectionDraining;
    }

    /**
     * Cookie based affinity.
     * 
     */
    @Import(name="cookieBasedAffinity")
      private final @Nullable Output<Either<String,ApplicationGatewayCookieBasedAffinity>> cookieBasedAffinity;

    public Output<Either<String,ApplicationGatewayCookieBasedAffinity>> getCookieBasedAffinity() {
        return this.cookieBasedAffinity == null ? Codegen.empty() : this.cookieBasedAffinity;
    }

    /**
     * Host header to be sent to the backend servers.
     * 
     */
    @Import(name="hostName")
      private final @Nullable Output<String> hostName;

    public Output<String> getHostName() {
        return this.hostName == null ? Codegen.empty() : this.hostName;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * Name of the backend http settings that is unique within an Application Gateway.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> getPath() {
        return this.path == null ? Codegen.empty() : this.path;
    }

    /**
     * Whether to pick host header should be picked from the host name of the backend server. Default value is false.
     * 
     */
    @Import(name="pickHostNameFromBackendAddress")
      private final @Nullable Output<Boolean> pickHostNameFromBackendAddress;

    public Output<Boolean> getPickHostNameFromBackendAddress() {
        return this.pickHostNameFromBackendAddress == null ? Codegen.empty() : this.pickHostNameFromBackendAddress;
    }

    /**
     * The destination port on the backend.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    /**
     * Probe resource of an application gateway.
     * 
     */
    @Import(name="probe")
      private final @Nullable Output<SubResourceArgs> probe;

    public Output<SubResourceArgs> getProbe() {
        return this.probe == null ? Codegen.empty() : this.probe;
    }

    /**
     * Whether the probe is enabled. Default value is false.
     * 
     */
    @Import(name="probeEnabled")
      private final @Nullable Output<Boolean> probeEnabled;

    public Output<Boolean> getProbeEnabled() {
        return this.probeEnabled == null ? Codegen.empty() : this.probeEnabled;
    }

    /**
     * The protocol used to communicate with the backend.
     * 
     */
    @Import(name="protocol")
      private final @Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol;

    public Output<Either<String,ApplicationGatewayProtocol>> getProtocol() {
        return this.protocol == null ? Codegen.empty() : this.protocol;
    }

    /**
     * Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
     * 
     */
    @Import(name="requestTimeout")
      private final @Nullable Output<Integer> requestTimeout;

    public Output<Integer> getRequestTimeout() {
        return this.requestTimeout == null ? Codegen.empty() : this.requestTimeout;
    }

    /**
     * Array of references to application gateway trusted root certificates.
     * 
     */
    @Import(name="trustedRootCertificates")
      private final @Nullable Output<List<SubResourceArgs>> trustedRootCertificates;

    public Output<List<SubResourceArgs>> getTrustedRootCertificates() {
        return this.trustedRootCertificates == null ? Codegen.empty() : this.trustedRootCertificates;
    }

    public ApplicationGatewayBackendHttpSettingsArgs(
        @Nullable Output<String> affinityCookieName,
        @Nullable Output<List<SubResourceArgs>> authenticationCertificates,
        @Nullable Output<ApplicationGatewayConnectionDrainingArgs> connectionDraining,
        @Nullable Output<Either<String,ApplicationGatewayCookieBasedAffinity>> cookieBasedAffinity,
        @Nullable Output<String> hostName,
        @Nullable Output<String> id,
        @Nullable Output<String> name,
        @Nullable Output<String> path,
        @Nullable Output<Boolean> pickHostNameFromBackendAddress,
        @Nullable Output<Integer> port,
        @Nullable Output<SubResourceArgs> probe,
        @Nullable Output<Boolean> probeEnabled,
        @Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol,
        @Nullable Output<Integer> requestTimeout,
        @Nullable Output<List<SubResourceArgs>> trustedRootCertificates) {
        this.affinityCookieName = affinityCookieName;
        this.authenticationCertificates = authenticationCertificates;
        this.connectionDraining = connectionDraining;
        this.cookieBasedAffinity = cookieBasedAffinity;
        this.hostName = hostName;
        this.id = id;
        this.name = name;
        this.path = path;
        this.pickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
        this.port = port;
        this.probe = probe;
        this.probeEnabled = probeEnabled;
        this.protocol = protocol;
        this.requestTimeout = requestTimeout;
        this.trustedRootCertificates = trustedRootCertificates;
    }

    private ApplicationGatewayBackendHttpSettingsArgs() {
        this.affinityCookieName = Codegen.empty();
        this.authenticationCertificates = Codegen.empty();
        this.connectionDraining = Codegen.empty();
        this.cookieBasedAffinity = Codegen.empty();
        this.hostName = Codegen.empty();
        this.id = Codegen.empty();
        this.name = Codegen.empty();
        this.path = Codegen.empty();
        this.pickHostNameFromBackendAddress = Codegen.empty();
        this.port = Codegen.empty();
        this.probe = Codegen.empty();
        this.probeEnabled = Codegen.empty();
        this.protocol = Codegen.empty();
        this.requestTimeout = Codegen.empty();
        this.trustedRootCertificates = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayBackendHttpSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> affinityCookieName;
        private @Nullable Output<List<SubResourceArgs>> authenticationCertificates;
        private @Nullable Output<ApplicationGatewayConnectionDrainingArgs> connectionDraining;
        private @Nullable Output<Either<String,ApplicationGatewayCookieBasedAffinity>> cookieBasedAffinity;
        private @Nullable Output<String> hostName;
        private @Nullable Output<String> id;
        private @Nullable Output<String> name;
        private @Nullable Output<String> path;
        private @Nullable Output<Boolean> pickHostNameFromBackendAddress;
        private @Nullable Output<Integer> port;
        private @Nullable Output<SubResourceArgs> probe;
        private @Nullable Output<Boolean> probeEnabled;
        private @Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol;
        private @Nullable Output<Integer> requestTimeout;
        private @Nullable Output<List<SubResourceArgs>> trustedRootCertificates;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGatewayBackendHttpSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.affinityCookieName = defaults.affinityCookieName;
    	      this.authenticationCertificates = defaults.authenticationCertificates;
    	      this.connectionDraining = defaults.connectionDraining;
    	      this.cookieBasedAffinity = defaults.cookieBasedAffinity;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.pickHostNameFromBackendAddress = defaults.pickHostNameFromBackendAddress;
    	      this.port = defaults.port;
    	      this.probe = defaults.probe;
    	      this.probeEnabled = defaults.probeEnabled;
    	      this.protocol = defaults.protocol;
    	      this.requestTimeout = defaults.requestTimeout;
    	      this.trustedRootCertificates = defaults.trustedRootCertificates;
        }

        public Builder affinityCookieName(@Nullable Output<String> affinityCookieName) {
            this.affinityCookieName = affinityCookieName;
            return this;
        }
        public Builder affinityCookieName(@Nullable String affinityCookieName) {
            this.affinityCookieName = Codegen.ofNullable(affinityCookieName);
            return this;
        }
        public Builder authenticationCertificates(@Nullable Output<List<SubResourceArgs>> authenticationCertificates) {
            this.authenticationCertificates = authenticationCertificates;
            return this;
        }
        public Builder authenticationCertificates(@Nullable List<SubResourceArgs> authenticationCertificates) {
            this.authenticationCertificates = Codegen.ofNullable(authenticationCertificates);
            return this;
        }
        public Builder authenticationCertificates(SubResourceArgs... authenticationCertificates) {
            return authenticationCertificates(List.of(authenticationCertificates));
        }
        public Builder connectionDraining(@Nullable Output<ApplicationGatewayConnectionDrainingArgs> connectionDraining) {
            this.connectionDraining = connectionDraining;
            return this;
        }
        public Builder connectionDraining(@Nullable ApplicationGatewayConnectionDrainingArgs connectionDraining) {
            this.connectionDraining = Codegen.ofNullable(connectionDraining);
            return this;
        }
        public Builder cookieBasedAffinity(@Nullable Output<Either<String,ApplicationGatewayCookieBasedAffinity>> cookieBasedAffinity) {
            this.cookieBasedAffinity = cookieBasedAffinity;
            return this;
        }
        public Builder cookieBasedAffinity(@Nullable Either<String,ApplicationGatewayCookieBasedAffinity> cookieBasedAffinity) {
            this.cookieBasedAffinity = Codegen.ofNullable(cookieBasedAffinity);
            return this;
        }
        public Builder hostName(@Nullable Output<String> hostName) {
            this.hostName = hostName;
            return this;
        }
        public Builder hostName(@Nullable String hostName) {
            this.hostName = Codegen.ofNullable(hostName);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = Codegen.ofNullable(path);
            return this;
        }
        public Builder pickHostNameFromBackendAddress(@Nullable Output<Boolean> pickHostNameFromBackendAddress) {
            this.pickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            return this;
        }
        public Builder pickHostNameFromBackendAddress(@Nullable Boolean pickHostNameFromBackendAddress) {
            this.pickHostNameFromBackendAddress = Codegen.ofNullable(pickHostNameFromBackendAddress);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }
        public Builder probe(@Nullable Output<SubResourceArgs> probe) {
            this.probe = probe;
            return this;
        }
        public Builder probe(@Nullable SubResourceArgs probe) {
            this.probe = Codegen.ofNullable(probe);
            return this;
        }
        public Builder probeEnabled(@Nullable Output<Boolean> probeEnabled) {
            this.probeEnabled = probeEnabled;
            return this;
        }
        public Builder probeEnabled(@Nullable Boolean probeEnabled) {
            this.probeEnabled = Codegen.ofNullable(probeEnabled);
            return this;
        }
        public Builder protocol(@Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol) {
            this.protocol = protocol;
            return this;
        }
        public Builder protocol(@Nullable Either<String,ApplicationGatewayProtocol> protocol) {
            this.protocol = Codegen.ofNullable(protocol);
            return this;
        }
        public Builder requestTimeout(@Nullable Output<Integer> requestTimeout) {
            this.requestTimeout = requestTimeout;
            return this;
        }
        public Builder requestTimeout(@Nullable Integer requestTimeout) {
            this.requestTimeout = Codegen.ofNullable(requestTimeout);
            return this;
        }
        public Builder trustedRootCertificates(@Nullable Output<List<SubResourceArgs>> trustedRootCertificates) {
            this.trustedRootCertificates = trustedRootCertificates;
            return this;
        }
        public Builder trustedRootCertificates(@Nullable List<SubResourceArgs> trustedRootCertificates) {
            this.trustedRootCertificates = Codegen.ofNullable(trustedRootCertificates);
            return this;
        }
        public Builder trustedRootCertificates(SubResourceArgs... trustedRootCertificates) {
            return trustedRootCertificates(List.of(trustedRootCertificates));
        }        public ApplicationGatewayBackendHttpSettingsArgs build() {
            return new ApplicationGatewayBackendHttpSettingsArgs(affinityCookieName, authenticationCertificates, connectionDraining, cookieBasedAffinity, hostName, id, name, path, pickHostNameFromBackendAddress, port, probe, probeEnabled, protocol, requestTimeout, trustedRootCertificates);
        }
    }
}
