// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.desktopvirtualization;

import io.pulumi.azurenative.desktopvirtualization.inputs.ResourceModelWithAllowedPropertySetIdentityArgs;
import io.pulumi.azurenative.desktopvirtualization.inputs.ResourceModelWithAllowedPropertySetPlanArgs;
import io.pulumi.azurenative.desktopvirtualization.inputs.ResourceModelWithAllowedPropertySetSkuArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WorkspaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final WorkspaceArgs Empty = new WorkspaceArgs();

    /**
     * List of applicationGroup resource Ids.
     * 
     */
    @Import(name="applicationGroupReferences")
      private final @Nullable Output<List<String>> applicationGroupReferences;

    public Output<List<String>> getApplicationGroupReferences() {
        return this.applicationGroupReferences == null ? Codegen.empty() : this.applicationGroupReferences;
    }

    /**
     * Description of Workspace.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Friendly name of Workspace.
     * 
     */
    @Import(name="friendlyName")
      private final @Nullable Output<String> friendlyName;

    public Output<String> getFriendlyName() {
        return this.friendlyName == null ? Codegen.empty() : this.friendlyName;
    }

    @Import(name="identity")
      private final @Nullable Output<ResourceModelWithAllowedPropertySetIdentityArgs> identity;

    public Output<ResourceModelWithAllowedPropertySetIdentityArgs> getIdentity() {
        return this.identity == null ? Codegen.empty() : this.identity;
    }

    /**
     * Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> getKind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.
     * 
     */
    @Import(name="managedBy")
      private final @Nullable Output<String> managedBy;

    public Output<String> getManagedBy() {
        return this.managedBy == null ? Codegen.empty() : this.managedBy;
    }

    @Import(name="plan")
      private final @Nullable Output<ResourceModelWithAllowedPropertySetPlanArgs> plan;

    public Output<ResourceModelWithAllowedPropertySetPlanArgs> getPlan() {
        return this.plan == null ? Codegen.empty() : this.plan;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @Import(name="sku")
      private final @Nullable Output<ResourceModelWithAllowedPropertySetSkuArgs> sku;

    public Output<ResourceModelWithAllowedPropertySetSkuArgs> getSku() {
        return this.sku == null ? Codegen.empty() : this.sku;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The name of the workspace
     * 
     */
    @Import(name="workspaceName")
      private final @Nullable Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName == null ? Codegen.empty() : this.workspaceName;
    }

    public WorkspaceArgs(
        @Nullable Output<List<String>> applicationGroupReferences,
        @Nullable Output<String> description,
        @Nullable Output<String> friendlyName,
        @Nullable Output<ResourceModelWithAllowedPropertySetIdentityArgs> identity,
        @Nullable Output<String> kind,
        @Nullable Output<String> location,
        @Nullable Output<String> managedBy,
        @Nullable Output<ResourceModelWithAllowedPropertySetPlanArgs> plan,
        Output<String> resourceGroupName,
        @Nullable Output<ResourceModelWithAllowedPropertySetSkuArgs> sku,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> workspaceName) {
        this.applicationGroupReferences = applicationGroupReferences;
        this.description = description;
        this.friendlyName = friendlyName;
        this.identity = identity;
        this.kind = kind;
        this.location = location;
        this.managedBy = managedBy;
        this.plan = plan;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.tags = tags;
        this.workspaceName = workspaceName;
    }

    private WorkspaceArgs() {
        this.applicationGroupReferences = Codegen.empty();
        this.description = Codegen.empty();
        this.friendlyName = Codegen.empty();
        this.identity = Codegen.empty();
        this.kind = Codegen.empty();
        this.location = Codegen.empty();
        this.managedBy = Codegen.empty();
        this.plan = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sku = Codegen.empty();
        this.tags = Codegen.empty();
        this.workspaceName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkspaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> applicationGroupReferences;
        private @Nullable Output<String> description;
        private @Nullable Output<String> friendlyName;
        private @Nullable Output<ResourceModelWithAllowedPropertySetIdentityArgs> identity;
        private @Nullable Output<String> kind;
        private @Nullable Output<String> location;
        private @Nullable Output<String> managedBy;
        private @Nullable Output<ResourceModelWithAllowedPropertySetPlanArgs> plan;
        private Output<String> resourceGroupName;
        private @Nullable Output<ResourceModelWithAllowedPropertySetSkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkspaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationGroupReferences = defaults.applicationGroupReferences;
    	      this.description = defaults.description;
    	      this.friendlyName = defaults.friendlyName;
    	      this.identity = defaults.identity;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.managedBy = defaults.managedBy;
    	      this.plan = defaults.plan;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder applicationGroupReferences(@Nullable Output<List<String>> applicationGroupReferences) {
            this.applicationGroupReferences = applicationGroupReferences;
            return this;
        }
        public Builder applicationGroupReferences(@Nullable List<String> applicationGroupReferences) {
            this.applicationGroupReferences = Codegen.ofNullable(applicationGroupReferences);
            return this;
        }
        public Builder applicationGroupReferences(String... applicationGroupReferences) {
            return applicationGroupReferences(List.of(applicationGroupReferences));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }
        public Builder friendlyName(@Nullable String friendlyName) {
            this.friendlyName = Codegen.ofNullable(friendlyName);
            return this;
        }
        public Builder identity(@Nullable Output<ResourceModelWithAllowedPropertySetIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable ResourceModelWithAllowedPropertySetIdentityArgs identity) {
            this.identity = Codegen.ofNullable(identity);
            return this;
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder managedBy(@Nullable Output<String> managedBy) {
            this.managedBy = managedBy;
            return this;
        }
        public Builder managedBy(@Nullable String managedBy) {
            this.managedBy = Codegen.ofNullable(managedBy);
            return this;
        }
        public Builder plan(@Nullable Output<ResourceModelWithAllowedPropertySetPlanArgs> plan) {
            this.plan = plan;
            return this;
        }
        public Builder plan(@Nullable ResourceModelWithAllowedPropertySetPlanArgs plan) {
            this.plan = Codegen.ofNullable(plan);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sku(@Nullable Output<ResourceModelWithAllowedPropertySetSkuArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable ResourceModelWithAllowedPropertySetSkuArgs sku) {
            this.sku = Codegen.ofNullable(sku);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder workspaceName(@Nullable Output<String> workspaceName) {
            this.workspaceName = workspaceName;
            return this;
        }
        public Builder workspaceName(@Nullable String workspaceName) {
            this.workspaceName = Codegen.ofNullable(workspaceName);
            return this;
        }        public WorkspaceArgs build() {
            return new WorkspaceArgs(applicationGroupReferences, description, friendlyName, identity, kind, location, managedBy, plan, resourceGroupName, sku, tags, workspaceName);
        }
    }
}
