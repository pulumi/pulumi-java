// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabric.inputs;

import io.pulumi.azurenative.servicefabric.inputs.ArmServiceTypeHealthPolicyArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Defines a health policy used to evaluate the health of an application or one of its children entities.
 * 
 */
public final class ArmApplicationHealthPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ArmApplicationHealthPolicyArgs Empty = new ArmApplicationHealthPolicyArgs();

    /**
     * Indicates whether warnings are treated with the same severity as errors.
     * 
     */
    @InputImport(name="considerWarningAsError")
      private final @Nullable Output<Boolean> considerWarningAsError;

    public Output<Boolean> getConsiderWarningAsError() {
        return this.considerWarningAsError == null ? Output.empty() : this.considerWarningAsError;
    }

    /**
     * The health policy used by default to evaluate the health of a service type.
     * 
     */
    @InputImport(name="defaultServiceTypeHealthPolicy")
      private final @Nullable Output<ArmServiceTypeHealthPolicyArgs> defaultServiceTypeHealthPolicy;

    public Output<ArmServiceTypeHealthPolicyArgs> getDefaultServiceTypeHealthPolicy() {
        return this.defaultServiceTypeHealthPolicy == null ? Output.empty() : this.defaultServiceTypeHealthPolicy;
    }

    /**
     * The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
     * This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
     * 
     */
    @InputImport(name="maxPercentUnhealthyDeployedApplications")
      private final @Nullable Output<Integer> maxPercentUnhealthyDeployedApplications;

    public Output<Integer> getMaxPercentUnhealthyDeployedApplications() {
        return this.maxPercentUnhealthyDeployedApplications == null ? Output.empty() : this.maxPercentUnhealthyDeployedApplications;
    }

    /**
     * The map with service type health policy per service type name. The map is empty by default.
     * 
     */
    @InputImport(name="serviceTypeHealthPolicyMap")
      private final @Nullable Output<Map<String,ArmServiceTypeHealthPolicyArgs>> serviceTypeHealthPolicyMap;

    public Output<Map<String,ArmServiceTypeHealthPolicyArgs>> getServiceTypeHealthPolicyMap() {
        return this.serviceTypeHealthPolicyMap == null ? Output.empty() : this.serviceTypeHealthPolicyMap;
    }

    public ArmApplicationHealthPolicyArgs(
        @Nullable Output<Boolean> considerWarningAsError,
        @Nullable Output<ArmServiceTypeHealthPolicyArgs> defaultServiceTypeHealthPolicy,
        @Nullable Output<Integer> maxPercentUnhealthyDeployedApplications,
        @Nullable Output<Map<String,ArmServiceTypeHealthPolicyArgs>> serviceTypeHealthPolicyMap) {
        this.considerWarningAsError = considerWarningAsError == null ? Output.ofNullable(false) : considerWarningAsError;
        this.defaultServiceTypeHealthPolicy = defaultServiceTypeHealthPolicy;
        this.maxPercentUnhealthyDeployedApplications = maxPercentUnhealthyDeployedApplications == null ? Output.ofNullable(0) : maxPercentUnhealthyDeployedApplications;
        this.serviceTypeHealthPolicyMap = serviceTypeHealthPolicyMap;
    }

    private ArmApplicationHealthPolicyArgs() {
        this.considerWarningAsError = Output.empty();
        this.defaultServiceTypeHealthPolicy = Output.empty();
        this.maxPercentUnhealthyDeployedApplications = Output.empty();
        this.serviceTypeHealthPolicyMap = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ArmApplicationHealthPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> considerWarningAsError;
        private @Nullable Output<ArmServiceTypeHealthPolicyArgs> defaultServiceTypeHealthPolicy;
        private @Nullable Output<Integer> maxPercentUnhealthyDeployedApplications;
        private @Nullable Output<Map<String,ArmServiceTypeHealthPolicyArgs>> serviceTypeHealthPolicyMap;

        public Builder() {
    	      // Empty
        }

        public Builder(ArmApplicationHealthPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.considerWarningAsError = defaults.considerWarningAsError;
    	      this.defaultServiceTypeHealthPolicy = defaults.defaultServiceTypeHealthPolicy;
    	      this.maxPercentUnhealthyDeployedApplications = defaults.maxPercentUnhealthyDeployedApplications;
    	      this.serviceTypeHealthPolicyMap = defaults.serviceTypeHealthPolicyMap;
        }

        public Builder considerWarningAsError(@Nullable Output<Boolean> considerWarningAsError) {
            this.considerWarningAsError = considerWarningAsError;
            return this;
        }

        public Builder considerWarningAsError(@Nullable Boolean considerWarningAsError) {
            this.considerWarningAsError = Output.ofNullable(considerWarningAsError);
            return this;
        }

        public Builder defaultServiceTypeHealthPolicy(@Nullable Output<ArmServiceTypeHealthPolicyArgs> defaultServiceTypeHealthPolicy) {
            this.defaultServiceTypeHealthPolicy = defaultServiceTypeHealthPolicy;
            return this;
        }

        public Builder defaultServiceTypeHealthPolicy(@Nullable ArmServiceTypeHealthPolicyArgs defaultServiceTypeHealthPolicy) {
            this.defaultServiceTypeHealthPolicy = Output.ofNullable(defaultServiceTypeHealthPolicy);
            return this;
        }

        public Builder maxPercentUnhealthyDeployedApplications(@Nullable Output<Integer> maxPercentUnhealthyDeployedApplications) {
            this.maxPercentUnhealthyDeployedApplications = maxPercentUnhealthyDeployedApplications;
            return this;
        }

        public Builder maxPercentUnhealthyDeployedApplications(@Nullable Integer maxPercentUnhealthyDeployedApplications) {
            this.maxPercentUnhealthyDeployedApplications = Output.ofNullable(maxPercentUnhealthyDeployedApplications);
            return this;
        }

        public Builder serviceTypeHealthPolicyMap(@Nullable Output<Map<String,ArmServiceTypeHealthPolicyArgs>> serviceTypeHealthPolicyMap) {
            this.serviceTypeHealthPolicyMap = serviceTypeHealthPolicyMap;
            return this;
        }

        public Builder serviceTypeHealthPolicyMap(@Nullable Map<String,ArmServiceTypeHealthPolicyArgs> serviceTypeHealthPolicyMap) {
            this.serviceTypeHealthPolicyMap = Output.ofNullable(serviceTypeHealthPolicyMap);
            return this;
        }
        public ArmApplicationHealthPolicyArgs build() {
            return new ArmApplicationHealthPolicyArgs(considerWarningAsError, defaultServiceTypeHealthPolicy, maxPercentUnhealthyDeployedApplications, serviceTypeHealthPolicyMap);
        }
    }
}
