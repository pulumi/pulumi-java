// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.dbformariadb;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualNetworkRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkRuleArgs Empty = new VirtualNetworkRuleArgs();

    /**
     * Create firewall rule before the virtual network has vnet service endpoint enabled.
     * 
     */
    @Import(name="ignoreMissingVnetServiceEndpoint")
      private final @Nullable Output<Boolean> ignoreMissingVnetServiceEndpoint;

    public Output<Boolean> getIgnoreMissingVnetServiceEndpoint() {
        return this.ignoreMissingVnetServiceEndpoint == null ? Output.empty() : this.ignoreMissingVnetServiceEndpoint;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
      private final Output<String> serverName;

    public Output<String> getServerName() {
        return this.serverName;
    }

    /**
     * The name of the virtual network rule.
     * 
     */
    @Import(name="virtualNetworkRuleName")
      private final @Nullable Output<String> virtualNetworkRuleName;

    public Output<String> getVirtualNetworkRuleName() {
        return this.virtualNetworkRuleName == null ? Output.empty() : this.virtualNetworkRuleName;
    }

    /**
     * The ARM resource id of the virtual network subnet.
     * 
     */
    @Import(name="virtualNetworkSubnetId", required=true)
      private final Output<String> virtualNetworkSubnetId;

    public Output<String> getVirtualNetworkSubnetId() {
        return this.virtualNetworkSubnetId;
    }

    public VirtualNetworkRuleArgs(
        @Nullable Output<Boolean> ignoreMissingVnetServiceEndpoint,
        Output<String> resourceGroupName,
        Output<String> serverName,
        @Nullable Output<String> virtualNetworkRuleName,
        Output<String> virtualNetworkSubnetId) {
        this.ignoreMissingVnetServiceEndpoint = ignoreMissingVnetServiceEndpoint;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
        this.virtualNetworkRuleName = virtualNetworkRuleName;
        this.virtualNetworkSubnetId = Objects.requireNonNull(virtualNetworkSubnetId, "expected parameter 'virtualNetworkSubnetId' to be non-null");
    }

    private VirtualNetworkRuleArgs() {
        this.ignoreMissingVnetServiceEndpoint = Output.empty();
        this.resourceGroupName = Output.empty();
        this.serverName = Output.empty();
        this.virtualNetworkRuleName = Output.empty();
        this.virtualNetworkSubnetId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNetworkRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> ignoreMissingVnetServiceEndpoint;
        private Output<String> resourceGroupName;
        private Output<String> serverName;
        private @Nullable Output<String> virtualNetworkRuleName;
        private Output<String> virtualNetworkSubnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNetworkRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreMissingVnetServiceEndpoint = defaults.ignoreMissingVnetServiceEndpoint;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.virtualNetworkRuleName = defaults.virtualNetworkRuleName;
    	      this.virtualNetworkSubnetId = defaults.virtualNetworkSubnetId;
        }

        public Builder ignoreMissingVnetServiceEndpoint(@Nullable Output<Boolean> ignoreMissingVnetServiceEndpoint) {
            this.ignoreMissingVnetServiceEndpoint = ignoreMissingVnetServiceEndpoint;
            return this;
        }
        public Builder ignoreMissingVnetServiceEndpoint(@Nullable Boolean ignoreMissingVnetServiceEndpoint) {
            this.ignoreMissingVnetServiceEndpoint = Output.ofNullable(ignoreMissingVnetServiceEndpoint);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serverName(Output<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }
        public Builder serverName(String serverName) {
            this.serverName = Output.of(Objects.requireNonNull(serverName));
            return this;
        }
        public Builder virtualNetworkRuleName(@Nullable Output<String> virtualNetworkRuleName) {
            this.virtualNetworkRuleName = virtualNetworkRuleName;
            return this;
        }
        public Builder virtualNetworkRuleName(@Nullable String virtualNetworkRuleName) {
            this.virtualNetworkRuleName = Output.ofNullable(virtualNetworkRuleName);
            return this;
        }
        public Builder virtualNetworkSubnetId(Output<String> virtualNetworkSubnetId) {
            this.virtualNetworkSubnetId = Objects.requireNonNull(virtualNetworkSubnetId);
            return this;
        }
        public Builder virtualNetworkSubnetId(String virtualNetworkSubnetId) {
            this.virtualNetworkSubnetId = Output.of(Objects.requireNonNull(virtualNetworkSubnetId));
            return this;
        }        public VirtualNetworkRuleArgs build() {
            return new VirtualNetworkRuleArgs(ignoreMissingVnetServiceEndpoint, resourceGroupName, serverName, virtualNetworkRuleName, virtualNetworkSubnetId);
        }
    }
}
