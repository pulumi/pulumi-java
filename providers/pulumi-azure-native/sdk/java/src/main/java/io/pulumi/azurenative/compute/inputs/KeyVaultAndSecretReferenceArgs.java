// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.azurenative.compute.inputs.SourceVaultArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Key Vault Secret Url and vault id of the encryption key
 * 
 */
public final class KeyVaultAndSecretReferenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final KeyVaultAndSecretReferenceArgs Empty = new KeyVaultAndSecretReferenceArgs();

    /**
     * Url pointing to a key or secret in KeyVault
     * 
     */
    @Import(name="secretUrl", required=true)
      private final Output<String> secretUrl;

    public Output<String> getSecretUrl() {
        return this.secretUrl;
    }

    /**
     * Resource id of the KeyVault containing the key or secret
     * 
     */
    @Import(name="sourceVault", required=true)
      private final Output<SourceVaultArgs> sourceVault;

    public Output<SourceVaultArgs> getSourceVault() {
        return this.sourceVault;
    }

    public KeyVaultAndSecretReferenceArgs(
        Output<String> secretUrl,
        Output<SourceVaultArgs> sourceVault) {
        this.secretUrl = Objects.requireNonNull(secretUrl, "expected parameter 'secretUrl' to be non-null");
        this.sourceVault = Objects.requireNonNull(sourceVault, "expected parameter 'sourceVault' to be non-null");
    }

    private KeyVaultAndSecretReferenceArgs() {
        this.secretUrl = Output.empty();
        this.sourceVault = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyVaultAndSecretReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> secretUrl;
        private Output<SourceVaultArgs> sourceVault;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyVaultAndSecretReferenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.secretUrl = defaults.secretUrl;
    	      this.sourceVault = defaults.sourceVault;
        }

        public Builder secretUrl(Output<String> secretUrl) {
            this.secretUrl = Objects.requireNonNull(secretUrl);
            return this;
        }

        public Builder secretUrl(String secretUrl) {
            this.secretUrl = Output.of(Objects.requireNonNull(secretUrl));
            return this;
        }

        public Builder sourceVault(Output<SourceVaultArgs> sourceVault) {
            this.sourceVault = Objects.requireNonNull(sourceVault);
            return this;
        }

        public Builder sourceVault(SourceVaultArgs sourceVault) {
            this.sourceVault = Output.of(Objects.requireNonNull(sourceVault));
            return this;
        }
        public KeyVaultAndSecretReferenceArgs build() {
            return new KeyVaultAndSecretReferenceArgs(secretUrl, sourceVault);
        }
    }
}
