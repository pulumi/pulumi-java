// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.labservices.inputs;

import io.pulumi.azurenative.labservices.inputs.SizeInfoResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a size category supported by this Lab Account (small, medium or large)
 * 
 */
public final class EnvironmentSizeResponse extends io.pulumi.resources.InvokeArgs {

    public static final EnvironmentSizeResponse Empty = new EnvironmentSizeResponse();

    /**
     * The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.
     * 
     */
    @Import(name="maxPrice", required=true)
      private final Double maxPrice;

    public Double maxPrice() {
        return this.maxPrice;
    }

    /**
     * The amount of memory available (in GB). This is the minimum amount of memory within this tier.
     * 
     */
    @Import(name="minMemory", required=true)
      private final Double minMemory;

    public Double minMemory() {
        return this.minMemory;
    }

    /**
     * The number of cores a VM of this size has. This is the minimum number of cores within this tier.
     * 
     */
    @Import(name="minNumberOfCores", required=true)
      private final Integer minNumberOfCores;

    public Integer minNumberOfCores() {
        return this.minNumberOfCores;
    }

    /**
     * The size category
     * 
     */
    @Import(name="name")
      private final @Nullable String name;

    public Optional<String> name() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * Represents a set of compute sizes that can serve this given size type
     * 
     */
    @Import(name="vmSizes")
      private final @Nullable List<SizeInfoResponse> vmSizes;

    public List<SizeInfoResponse> vmSizes() {
        return this.vmSizes == null ? List.of() : this.vmSizes;
    }

    public EnvironmentSizeResponse(
        Double maxPrice,
        Double minMemory,
        Integer minNumberOfCores,
        @Nullable String name,
        @Nullable List<SizeInfoResponse> vmSizes) {
        this.maxPrice = Objects.requireNonNull(maxPrice, "expected parameter 'maxPrice' to be non-null");
        this.minMemory = Objects.requireNonNull(minMemory, "expected parameter 'minMemory' to be non-null");
        this.minNumberOfCores = Objects.requireNonNull(minNumberOfCores, "expected parameter 'minNumberOfCores' to be non-null");
        this.name = name;
        this.vmSizes = vmSizes;
    }

    private EnvironmentSizeResponse() {
        this.maxPrice = null;
        this.minMemory = null;
        this.minNumberOfCores = null;
        this.name = null;
        this.vmSizes = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentSizeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double maxPrice;
        private Double minMemory;
        private Integer minNumberOfCores;
        private @Nullable String name;
        private @Nullable List<SizeInfoResponse> vmSizes;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentSizeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxPrice = defaults.maxPrice;
    	      this.minMemory = defaults.minMemory;
    	      this.minNumberOfCores = defaults.minNumberOfCores;
    	      this.name = defaults.name;
    	      this.vmSizes = defaults.vmSizes;
        }

        public Builder maxPrice(Double maxPrice) {
            this.maxPrice = Objects.requireNonNull(maxPrice);
            return this;
        }
        public Builder minMemory(Double minMemory) {
            this.minMemory = Objects.requireNonNull(minMemory);
            return this;
        }
        public Builder minNumberOfCores(Integer minNumberOfCores) {
            this.minNumberOfCores = Objects.requireNonNull(minNumberOfCores);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder vmSizes(@Nullable List<SizeInfoResponse> vmSizes) {
            this.vmSizes = vmSizes;
            return this;
        }
        public Builder vmSizes(SizeInfoResponse... vmSizes) {
            return vmSizes(List.of(vmSizes));
        }        public EnvironmentSizeResponse build() {
            return new EnvironmentSizeResponse(maxPrice, minMemory, minNumberOfCores, name, vmSizes);
        }
    }
}
