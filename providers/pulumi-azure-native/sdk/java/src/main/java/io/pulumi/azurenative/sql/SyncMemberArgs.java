// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.sql.enums.SyncDirection;
import io.pulumi.azurenative.sql.enums.SyncMemberDbType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SyncMemberArgs extends io.pulumi.resources.ResourceArgs {

    public static final SyncMemberArgs Empty = new SyncMemberArgs();

    /**
     * Database name of the member database in the sync member.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName;
    }

    /**
     * Database type of the sync member.
     * 
     */
    @Import(name="databaseType")
      private final @Nullable Output<Either<String,SyncMemberDbType>> databaseType;

    public Output<Either<String,SyncMemberDbType>> getDatabaseType() {
        return this.databaseType == null ? Codegen.empty() : this.databaseType;
    }

    /**
     * Password of the member database in the sync member.
     * 
     */
    @Import(name="password")
      private final @Nullable Output<String> password;

    public Output<String> getPassword() {
        return this.password == null ? Codegen.empty() : this.password;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Server name of the member database in the sync member
     * 
     */
    @Import(name="serverName", required=true)
      private final Output<String> serverName;

    public Output<String> getServerName() {
        return this.serverName;
    }

    /**
     * SQL Server database id of the sync member.
     * 
     */
    @Import(name="sqlServerDatabaseId")
      private final @Nullable Output<String> sqlServerDatabaseId;

    public Output<String> getSqlServerDatabaseId() {
        return this.sqlServerDatabaseId == null ? Codegen.empty() : this.sqlServerDatabaseId;
    }

    /**
     * ARM resource id of the sync agent in the sync member.
     * 
     */
    @Import(name="syncAgentId")
      private final @Nullable Output<String> syncAgentId;

    public Output<String> getSyncAgentId() {
        return this.syncAgentId == null ? Codegen.empty() : this.syncAgentId;
    }

    /**
     * Sync direction of the sync member.
     * 
     */
    @Import(name="syncDirection")
      private final @Nullable Output<Either<String,SyncDirection>> syncDirection;

    public Output<Either<String,SyncDirection>> getSyncDirection() {
        return this.syncDirection == null ? Codegen.empty() : this.syncDirection;
    }

    /**
     * The name of the sync group on which the sync member is hosted.
     * 
     */
    @Import(name="syncGroupName", required=true)
      private final Output<String> syncGroupName;

    public Output<String> getSyncGroupName() {
        return this.syncGroupName;
    }

    /**
     * ARM resource id of the sync member logical database, for sync members in Azure.
     * 
     */
    @Import(name="syncMemberAzureDatabaseResourceId")
      private final @Nullable Output<String> syncMemberAzureDatabaseResourceId;

    public Output<String> getSyncMemberAzureDatabaseResourceId() {
        return this.syncMemberAzureDatabaseResourceId == null ? Codegen.empty() : this.syncMemberAzureDatabaseResourceId;
    }

    /**
     * The name of the sync member.
     * 
     */
    @Import(name="syncMemberName")
      private final @Nullable Output<String> syncMemberName;

    public Output<String> getSyncMemberName() {
        return this.syncMemberName == null ? Codegen.empty() : this.syncMemberName;
    }

    /**
     * Whether to use private link connection.
     * 
     */
    @Import(name="usePrivateLinkConnection")
      private final @Nullable Output<Boolean> usePrivateLinkConnection;

    public Output<Boolean> getUsePrivateLinkConnection() {
        return this.usePrivateLinkConnection == null ? Codegen.empty() : this.usePrivateLinkConnection;
    }

    /**
     * User name of the member database in the sync member.
     * 
     */
    @Import(name="userName")
      private final @Nullable Output<String> userName;

    public Output<String> getUserName() {
        return this.userName == null ? Codegen.empty() : this.userName;
    }

    public SyncMemberArgs(
        Output<String> databaseName,
        @Nullable Output<Either<String,SyncMemberDbType>> databaseType,
        @Nullable Output<String> password,
        Output<String> resourceGroupName,
        Output<String> serverName,
        @Nullable Output<String> sqlServerDatabaseId,
        @Nullable Output<String> syncAgentId,
        @Nullable Output<Either<String,SyncDirection>> syncDirection,
        Output<String> syncGroupName,
        @Nullable Output<String> syncMemberAzureDatabaseResourceId,
        @Nullable Output<String> syncMemberName,
        @Nullable Output<Boolean> usePrivateLinkConnection,
        @Nullable Output<String> userName) {
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.databaseType = databaseType;
        this.password = password;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
        this.sqlServerDatabaseId = sqlServerDatabaseId;
        this.syncAgentId = syncAgentId;
        this.syncDirection = syncDirection;
        this.syncGroupName = Objects.requireNonNull(syncGroupName, "expected parameter 'syncGroupName' to be non-null");
        this.syncMemberAzureDatabaseResourceId = syncMemberAzureDatabaseResourceId;
        this.syncMemberName = syncMemberName;
        this.usePrivateLinkConnection = usePrivateLinkConnection;
        this.userName = userName;
    }

    private SyncMemberArgs() {
        this.databaseName = Codegen.empty();
        this.databaseType = Codegen.empty();
        this.password = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.serverName = Codegen.empty();
        this.sqlServerDatabaseId = Codegen.empty();
        this.syncAgentId = Codegen.empty();
        this.syncDirection = Codegen.empty();
        this.syncGroupName = Codegen.empty();
        this.syncMemberAzureDatabaseResourceId = Codegen.empty();
        this.syncMemberName = Codegen.empty();
        this.usePrivateLinkConnection = Codegen.empty();
        this.userName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyncMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> databaseName;
        private @Nullable Output<Either<String,SyncMemberDbType>> databaseType;
        private @Nullable Output<String> password;
        private Output<String> resourceGroupName;
        private Output<String> serverName;
        private @Nullable Output<String> sqlServerDatabaseId;
        private @Nullable Output<String> syncAgentId;
        private @Nullable Output<Either<String,SyncDirection>> syncDirection;
        private Output<String> syncGroupName;
        private @Nullable Output<String> syncMemberAzureDatabaseResourceId;
        private @Nullable Output<String> syncMemberName;
        private @Nullable Output<Boolean> usePrivateLinkConnection;
        private @Nullable Output<String> userName;

        public Builder() {
    	      // Empty
        }

        public Builder(SyncMemberArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.databaseType = defaults.databaseType;
    	      this.password = defaults.password;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.sqlServerDatabaseId = defaults.sqlServerDatabaseId;
    	      this.syncAgentId = defaults.syncAgentId;
    	      this.syncDirection = defaults.syncDirection;
    	      this.syncGroupName = defaults.syncGroupName;
    	      this.syncMemberAzureDatabaseResourceId = defaults.syncMemberAzureDatabaseResourceId;
    	      this.syncMemberName = defaults.syncMemberName;
    	      this.usePrivateLinkConnection = defaults.usePrivateLinkConnection;
    	      this.userName = defaults.userName;
        }

        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder databaseType(@Nullable Output<Either<String,SyncMemberDbType>> databaseType) {
            this.databaseType = databaseType;
            return this;
        }
        public Builder databaseType(@Nullable Either<String,SyncMemberDbType> databaseType) {
            this.databaseType = Codegen.ofNullable(databaseType);
            return this;
        }
        public Builder password(@Nullable Output<String> password) {
            this.password = password;
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = Codegen.ofNullable(password);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serverName(Output<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }
        public Builder serverName(String serverName) {
            this.serverName = Output.of(Objects.requireNonNull(serverName));
            return this;
        }
        public Builder sqlServerDatabaseId(@Nullable Output<String> sqlServerDatabaseId) {
            this.sqlServerDatabaseId = sqlServerDatabaseId;
            return this;
        }
        public Builder sqlServerDatabaseId(@Nullable String sqlServerDatabaseId) {
            this.sqlServerDatabaseId = Codegen.ofNullable(sqlServerDatabaseId);
            return this;
        }
        public Builder syncAgentId(@Nullable Output<String> syncAgentId) {
            this.syncAgentId = syncAgentId;
            return this;
        }
        public Builder syncAgentId(@Nullable String syncAgentId) {
            this.syncAgentId = Codegen.ofNullable(syncAgentId);
            return this;
        }
        public Builder syncDirection(@Nullable Output<Either<String,SyncDirection>> syncDirection) {
            this.syncDirection = syncDirection;
            return this;
        }
        public Builder syncDirection(@Nullable Either<String,SyncDirection> syncDirection) {
            this.syncDirection = Codegen.ofNullable(syncDirection);
            return this;
        }
        public Builder syncGroupName(Output<String> syncGroupName) {
            this.syncGroupName = Objects.requireNonNull(syncGroupName);
            return this;
        }
        public Builder syncGroupName(String syncGroupName) {
            this.syncGroupName = Output.of(Objects.requireNonNull(syncGroupName));
            return this;
        }
        public Builder syncMemberAzureDatabaseResourceId(@Nullable Output<String> syncMemberAzureDatabaseResourceId) {
            this.syncMemberAzureDatabaseResourceId = syncMemberAzureDatabaseResourceId;
            return this;
        }
        public Builder syncMemberAzureDatabaseResourceId(@Nullable String syncMemberAzureDatabaseResourceId) {
            this.syncMemberAzureDatabaseResourceId = Codegen.ofNullable(syncMemberAzureDatabaseResourceId);
            return this;
        }
        public Builder syncMemberName(@Nullable Output<String> syncMemberName) {
            this.syncMemberName = syncMemberName;
            return this;
        }
        public Builder syncMemberName(@Nullable String syncMemberName) {
            this.syncMemberName = Codegen.ofNullable(syncMemberName);
            return this;
        }
        public Builder usePrivateLinkConnection(@Nullable Output<Boolean> usePrivateLinkConnection) {
            this.usePrivateLinkConnection = usePrivateLinkConnection;
            return this;
        }
        public Builder usePrivateLinkConnection(@Nullable Boolean usePrivateLinkConnection) {
            this.usePrivateLinkConnection = Codegen.ofNullable(usePrivateLinkConnection);
            return this;
        }
        public Builder userName(@Nullable Output<String> userName) {
            this.userName = userName;
            return this;
        }
        public Builder userName(@Nullable String userName) {
            this.userName = Codegen.ofNullable(userName);
            return this;
        }        public SyncMemberArgs build() {
            return new SyncMemberArgs(databaseName, databaseType, password, resourceGroupName, serverName, sqlServerDatabaseId, syncAgentId, syncDirection, syncGroupName, syncMemberAzureDatabaseResourceId, syncMemberName, usePrivateLinkConnection, userName);
        }
    }
}
