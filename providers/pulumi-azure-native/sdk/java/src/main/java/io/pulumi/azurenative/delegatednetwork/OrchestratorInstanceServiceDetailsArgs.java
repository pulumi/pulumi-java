// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.delegatednetwork;

import io.pulumi.azurenative.delegatednetwork.enums.OrchestratorKind;
import io.pulumi.azurenative.delegatednetwork.inputs.ControllerDetailsArgs;
import io.pulumi.azurenative.delegatednetwork.inputs.OrchestratorIdentityArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OrchestratorInstanceServiceDetailsArgs extends io.pulumi.resources.ResourceArgs {

    public static final OrchestratorInstanceServiceDetailsArgs Empty = new OrchestratorInstanceServiceDetailsArgs();

    /**
     * K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
     * 
     */
    @Import(name="apiServerEndpoint")
      private final @Nullable Output<String> apiServerEndpoint;

    public Output<String> getApiServerEndpoint() {
        return this.apiServerEndpoint == null ? Codegen.empty() : this.apiServerEndpoint;
    }

    /**
     * RootCA certificate of kubernetes cluster base64 encoded
     * 
     */
    @Import(name="clusterRootCA")
      private final @Nullable Output<String> clusterRootCA;

    public Output<String> getClusterRootCA() {
        return this.clusterRootCA == null ? Codegen.empty() : this.clusterRootCA;
    }

    /**
     * Properties of the controller.
     * 
     */
    @Import(name="controllerDetails", required=true)
      private final Output<ControllerDetailsArgs> controllerDetails;

    public Output<ControllerDetailsArgs> getControllerDetails() {
        return this.controllerDetails;
    }

    /**
     * The identity of the orchestrator
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<OrchestratorIdentityArgs> identity;

    public Output<OrchestratorIdentityArgs> getIdentity() {
        return this.identity == null ? Codegen.empty() : this.identity;
    }

    /**
     * The kind of workbook. Choices are user and shared.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<Either<String,OrchestratorKind>> kind;

    public Output<Either<String,OrchestratorKind>> getKind() {
        return this.kind;
    }

    /**
     * Location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * AAD ID used with apiserver
     * 
     */
    @Import(name="orchestratorAppId")
      private final @Nullable Output<String> orchestratorAppId;

    public Output<String> getOrchestratorAppId() {
        return this.orchestratorAppId == null ? Codegen.empty() : this.orchestratorAppId;
    }

    /**
     * TenantID of server App ID
     * 
     */
    @Import(name="orchestratorTenantId")
      private final @Nullable Output<String> orchestratorTenantId;

    public Output<String> getOrchestratorTenantId() {
        return this.orchestratorTenantId == null ? Codegen.empty() : this.orchestratorTenantId;
    }

    /**
     * private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
     * 
     */
    @Import(name="privateLinkResourceId")
      private final @Nullable Output<String> privateLinkResourceId;

    public Output<String> getPrivateLinkResourceId() {
        return this.privateLinkResourceId == null ? Codegen.empty() : this.privateLinkResourceId;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * 
     */
    @Import(name="resourceName")
      private final @Nullable Output<String> resourceName;

    public Output<String> getPropResourceName() {
        return this.resourceName == null ? Codegen.empty() : this.resourceName;
    }

    /**
     * The resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public OrchestratorInstanceServiceDetailsArgs(
        @Nullable Output<String> apiServerEndpoint,
        @Nullable Output<String> clusterRootCA,
        Output<ControllerDetailsArgs> controllerDetails,
        @Nullable Output<OrchestratorIdentityArgs> identity,
        Output<Either<String,OrchestratorKind>> kind,
        @Nullable Output<String> location,
        @Nullable Output<String> orchestratorAppId,
        @Nullable Output<String> orchestratorTenantId,
        @Nullable Output<String> privateLinkResourceId,
        Output<String> resourceGroupName,
        @Nullable Output<String> resourceName,
        @Nullable Output<Map<String,String>> tags) {
        this.apiServerEndpoint = apiServerEndpoint;
        this.clusterRootCA = clusterRootCA;
        this.controllerDetails = Objects.requireNonNull(controllerDetails, "expected parameter 'controllerDetails' to be non-null");
        this.identity = identity;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.location = location;
        this.orchestratorAppId = orchestratorAppId;
        this.orchestratorTenantId = orchestratorTenantId;
        this.privateLinkResourceId = privateLinkResourceId;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceName = resourceName;
        this.tags = tags;
    }

    private OrchestratorInstanceServiceDetailsArgs() {
        this.apiServerEndpoint = Codegen.empty();
        this.clusterRootCA = Codegen.empty();
        this.controllerDetails = Codegen.empty();
        this.identity = Codegen.empty();
        this.kind = Codegen.empty();
        this.location = Codegen.empty();
        this.orchestratorAppId = Codegen.empty();
        this.orchestratorTenantId = Codegen.empty();
        this.privateLinkResourceId = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.resourceName = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OrchestratorInstanceServiceDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> apiServerEndpoint;
        private @Nullable Output<String> clusterRootCA;
        private Output<ControllerDetailsArgs> controllerDetails;
        private @Nullable Output<OrchestratorIdentityArgs> identity;
        private Output<Either<String,OrchestratorKind>> kind;
        private @Nullable Output<String> location;
        private @Nullable Output<String> orchestratorAppId;
        private @Nullable Output<String> orchestratorTenantId;
        private @Nullable Output<String> privateLinkResourceId;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> resourceName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(OrchestratorInstanceServiceDetailsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiServerEndpoint = defaults.apiServerEndpoint;
    	      this.clusterRootCA = defaults.clusterRootCA;
    	      this.controllerDetails = defaults.controllerDetails;
    	      this.identity = defaults.identity;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.orchestratorAppId = defaults.orchestratorAppId;
    	      this.orchestratorTenantId = defaults.orchestratorTenantId;
    	      this.privateLinkResourceId = defaults.privateLinkResourceId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceName = defaults.resourceName;
    	      this.tags = defaults.tags;
        }

        public Builder apiServerEndpoint(@Nullable Output<String> apiServerEndpoint) {
            this.apiServerEndpoint = apiServerEndpoint;
            return this;
        }
        public Builder apiServerEndpoint(@Nullable String apiServerEndpoint) {
            this.apiServerEndpoint = Codegen.ofNullable(apiServerEndpoint);
            return this;
        }
        public Builder clusterRootCA(@Nullable Output<String> clusterRootCA) {
            this.clusterRootCA = clusterRootCA;
            return this;
        }
        public Builder clusterRootCA(@Nullable String clusterRootCA) {
            this.clusterRootCA = Codegen.ofNullable(clusterRootCA);
            return this;
        }
        public Builder controllerDetails(Output<ControllerDetailsArgs> controllerDetails) {
            this.controllerDetails = Objects.requireNonNull(controllerDetails);
            return this;
        }
        public Builder controllerDetails(ControllerDetailsArgs controllerDetails) {
            this.controllerDetails = Output.of(Objects.requireNonNull(controllerDetails));
            return this;
        }
        public Builder identity(@Nullable Output<OrchestratorIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable OrchestratorIdentityArgs identity) {
            this.identity = Codegen.ofNullable(identity);
            return this;
        }
        public Builder kind(Output<Either<String,OrchestratorKind>> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder kind(Either<String,OrchestratorKind> kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder orchestratorAppId(@Nullable Output<String> orchestratorAppId) {
            this.orchestratorAppId = orchestratorAppId;
            return this;
        }
        public Builder orchestratorAppId(@Nullable String orchestratorAppId) {
            this.orchestratorAppId = Codegen.ofNullable(orchestratorAppId);
            return this;
        }
        public Builder orchestratorTenantId(@Nullable Output<String> orchestratorTenantId) {
            this.orchestratorTenantId = orchestratorTenantId;
            return this;
        }
        public Builder orchestratorTenantId(@Nullable String orchestratorTenantId) {
            this.orchestratorTenantId = Codegen.ofNullable(orchestratorTenantId);
            return this;
        }
        public Builder privateLinkResourceId(@Nullable Output<String> privateLinkResourceId) {
            this.privateLinkResourceId = privateLinkResourceId;
            return this;
        }
        public Builder privateLinkResourceId(@Nullable String privateLinkResourceId) {
            this.privateLinkResourceId = Codegen.ofNullable(privateLinkResourceId);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder resourceName(@Nullable Output<String> resourceName) {
            this.resourceName = resourceName;
            return this;
        }
        public Builder resourceName(@Nullable String resourceName) {
            this.resourceName = Codegen.ofNullable(resourceName);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public OrchestratorInstanceServiceDetailsArgs build() {
            return new OrchestratorInstanceServiceDetailsArgs(apiServerEndpoint, clusterRootCA, controllerDetails, identity, kind, location, orchestratorAppId, orchestratorTenantId, privateLinkResourceId, resourceGroupName, resourceName, tags);
        }
    }
}
