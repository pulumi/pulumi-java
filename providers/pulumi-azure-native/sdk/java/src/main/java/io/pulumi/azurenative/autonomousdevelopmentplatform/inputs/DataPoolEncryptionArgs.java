// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.autonomousdevelopmentplatform.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Encryption properties of a Data Pool
 * 
 */
public final class DataPoolEncryptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataPoolEncryptionArgs Empty = new DataPoolEncryptionArgs();

    /**
     * The name of Key Vault key
     * 
     */
    @InputImport(name="keyName", required=true)
    private final Input<String> keyName;

    public Input<String> getKeyName() {
        return this.keyName;
    }

    /**
     * The URI of a soft delete-enabled Key Vault that is in the same location as the Data Pool location
     * 
     */
    @InputImport(name="keyVaultUri", required=true)
    private final Input<String> keyVaultUri;

    public Input<String> getKeyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * The version of Key Vault key
     * 
     */
    @InputImport(name="keyVersion")
    private final @Nullable Input<String> keyVersion;

    public Input<String> getKeyVersion() {
        return this.keyVersion == null ? Input.empty() : this.keyVersion;
    }

    /**
     * The resource ID of a user-assigned Managed Identity used to access the encryption key in the Key Vault. Requires access to the key operations get, wrap, unwrap, and recover
     * 
     */
    @InputImport(name="userAssignedIdentity", required=true)
    private final Input<String> userAssignedIdentity;

    public Input<String> getUserAssignedIdentity() {
        return this.userAssignedIdentity;
    }

    public DataPoolEncryptionArgs(
        Input<String> keyName,
        Input<String> keyVaultUri,
        @Nullable Input<String> keyVersion,
        Input<String> userAssignedIdentity) {
        this.keyName = Objects.requireNonNull(keyName, "expected parameter 'keyName' to be non-null");
        this.keyVaultUri = Objects.requireNonNull(keyVaultUri, "expected parameter 'keyVaultUri' to be non-null");
        this.keyVersion = keyVersion;
        this.userAssignedIdentity = Objects.requireNonNull(userAssignedIdentity, "expected parameter 'userAssignedIdentity' to be non-null");
    }

    private DataPoolEncryptionArgs() {
        this.keyName = Input.empty();
        this.keyVaultUri = Input.empty();
        this.keyVersion = Input.empty();
        this.userAssignedIdentity = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataPoolEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> keyName;
        private Input<String> keyVaultUri;
        private @Nullable Input<String> keyVersion;
        private Input<String> userAssignedIdentity;

        public Builder() {
    	      // Empty
        }

        public Builder(DataPoolEncryptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keyName = defaults.keyName;
    	      this.keyVaultUri = defaults.keyVaultUri;
    	      this.keyVersion = defaults.keyVersion;
    	      this.userAssignedIdentity = defaults.userAssignedIdentity;
        }

        public Builder setKeyName(Input<String> keyName) {
            this.keyName = Objects.requireNonNull(keyName);
            return this;
        }

        public Builder setKeyName(String keyName) {
            this.keyName = Input.of(Objects.requireNonNull(keyName));
            return this;
        }

        public Builder setKeyVaultUri(Input<String> keyVaultUri) {
            this.keyVaultUri = Objects.requireNonNull(keyVaultUri);
            return this;
        }

        public Builder setKeyVaultUri(String keyVaultUri) {
            this.keyVaultUri = Input.of(Objects.requireNonNull(keyVaultUri));
            return this;
        }

        public Builder setKeyVersion(@Nullable Input<String> keyVersion) {
            this.keyVersion = keyVersion;
            return this;
        }

        public Builder setKeyVersion(@Nullable String keyVersion) {
            this.keyVersion = Input.ofNullable(keyVersion);
            return this;
        }

        public Builder setUserAssignedIdentity(Input<String> userAssignedIdentity) {
            this.userAssignedIdentity = Objects.requireNonNull(userAssignedIdentity);
            return this;
        }

        public Builder setUserAssignedIdentity(String userAssignedIdentity) {
            this.userAssignedIdentity = Input.of(Objects.requireNonNull(userAssignedIdentity));
            return this;
        }

        public DataPoolEncryptionArgs build() {
            return new DataPoolEncryptionArgs(keyName, keyVaultUri, keyVersion, userAssignedIdentity);
        }
    }
}
