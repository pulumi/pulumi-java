// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.eventhub.outputs;

import io.pulumi.azurenative.eventhub.outputs.DestinationResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class CaptureDescriptionResponse {
    private final @Nullable DestinationResponse destination;
    private final @Nullable Boolean enabled;
    private final @Nullable String encoding;
    private final @Nullable Integer intervalInSeconds;
    private final @Nullable Integer sizeLimitInBytes;
    private final @Nullable Boolean skipEmptyArchives;

    @OutputCustomType.Constructor({"destination","enabled","encoding","intervalInSeconds","sizeLimitInBytes","skipEmptyArchives"})
    private CaptureDescriptionResponse(
        @Nullable DestinationResponse destination,
        @Nullable Boolean enabled,
        @Nullable String encoding,
        @Nullable Integer intervalInSeconds,
        @Nullable Integer sizeLimitInBytes,
        @Nullable Boolean skipEmptyArchives) {
        this.destination = destination;
        this.enabled = enabled;
        this.encoding = encoding;
        this.intervalInSeconds = intervalInSeconds;
        this.sizeLimitInBytes = sizeLimitInBytes;
        this.skipEmptyArchives = skipEmptyArchives;
    }

    public Optional<DestinationResponse> getDestination() {
        return Optional.ofNullable(this.destination);
    }
    public Optional<Boolean> getEnabled() {
        return Optional.ofNullable(this.enabled);
    }
    public Optional<String> getEncoding() {
        return Optional.ofNullable(this.encoding);
    }
    public Optional<Integer> getIntervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }
    public Optional<Integer> getSizeLimitInBytes() {
        return Optional.ofNullable(this.sizeLimitInBytes);
    }
    public Optional<Boolean> getSkipEmptyArchives() {
        return Optional.ofNullable(this.skipEmptyArchives);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CaptureDescriptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable DestinationResponse destination;
        private @Nullable Boolean enabled;
        private @Nullable String encoding;
        private @Nullable Integer intervalInSeconds;
        private @Nullable Integer sizeLimitInBytes;
        private @Nullable Boolean skipEmptyArchives;

        public Builder() {
    	      // Empty
        }

        public Builder(CaptureDescriptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destination = defaults.destination;
    	      this.enabled = defaults.enabled;
    	      this.encoding = defaults.encoding;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.sizeLimitInBytes = defaults.sizeLimitInBytes;
    	      this.skipEmptyArchives = defaults.skipEmptyArchives;
        }

        public Builder setDestination(@Nullable DestinationResponse destination) {
            this.destination = destination;
            return this;
        }

        public Builder setEnabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder setEncoding(@Nullable String encoding) {
            this.encoding = encoding;
            return this;
        }

        public Builder setIntervalInSeconds(@Nullable Integer intervalInSeconds) {
            this.intervalInSeconds = intervalInSeconds;
            return this;
        }

        public Builder setSizeLimitInBytes(@Nullable Integer sizeLimitInBytes) {
            this.sizeLimitInBytes = sizeLimitInBytes;
            return this;
        }

        public Builder setSkipEmptyArchives(@Nullable Boolean skipEmptyArchives) {
            this.skipEmptyArchives = skipEmptyArchives;
            return this;
        }

        public CaptureDescriptionResponse build() {
            return new CaptureDescriptionResponse(destination, enabled, encoding, intervalInSeconds, sizeLimitInBytes, skipEmptyArchives);
        }
    }
}
