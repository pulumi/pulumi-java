// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The settings that will be leveraged for Sql source partitioning.
 * 
 */
public final class SqlPartitionSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final SqlPartitionSettingsArgs Empty = new SqlPartitionSettingsArgs();

    /**
     * The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="partitionColumnName")
      private final @Nullable Output<Object> partitionColumnName;

    public Output<Object> getPartitionColumnName() {
        return this.partitionColumnName == null ? Output.empty() : this.partitionColumnName;
    }

    /**
     * The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="partitionLowerBound")
      private final @Nullable Output<Object> partitionLowerBound;

    public Output<Object> getPartitionLowerBound() {
        return this.partitionLowerBound == null ? Output.empty() : this.partitionLowerBound;
    }

    /**
     * The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="partitionUpperBound")
      private final @Nullable Output<Object> partitionUpperBound;

    public Output<Object> getPartitionUpperBound() {
        return this.partitionUpperBound == null ? Output.empty() : this.partitionUpperBound;
    }

    public SqlPartitionSettingsArgs(
        @Nullable Output<Object> partitionColumnName,
        @Nullable Output<Object> partitionLowerBound,
        @Nullable Output<Object> partitionUpperBound) {
        this.partitionColumnName = partitionColumnName;
        this.partitionLowerBound = partitionLowerBound;
        this.partitionUpperBound = partitionUpperBound;
    }

    private SqlPartitionSettingsArgs() {
        this.partitionColumnName = Output.empty();
        this.partitionLowerBound = Output.empty();
        this.partitionUpperBound = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlPartitionSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Object> partitionColumnName;
        private @Nullable Output<Object> partitionLowerBound;
        private @Nullable Output<Object> partitionUpperBound;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlPartitionSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.partitionColumnName = defaults.partitionColumnName;
    	      this.partitionLowerBound = defaults.partitionLowerBound;
    	      this.partitionUpperBound = defaults.partitionUpperBound;
        }

        public Builder partitionColumnName(@Nullable Output<Object> partitionColumnName) {
            this.partitionColumnName = partitionColumnName;
            return this;
        }

        public Builder partitionColumnName(@Nullable Object partitionColumnName) {
            this.partitionColumnName = Output.ofNullable(partitionColumnName);
            return this;
        }

        public Builder partitionLowerBound(@Nullable Output<Object> partitionLowerBound) {
            this.partitionLowerBound = partitionLowerBound;
            return this;
        }

        public Builder partitionLowerBound(@Nullable Object partitionLowerBound) {
            this.partitionLowerBound = Output.ofNullable(partitionLowerBound);
            return this;
        }

        public Builder partitionUpperBound(@Nullable Output<Object> partitionUpperBound) {
            this.partitionUpperBound = partitionUpperBound;
            return this;
        }

        public Builder partitionUpperBound(@Nullable Object partitionUpperBound) {
            this.partitionUpperBound = Output.ofNullable(partitionUpperBound);
            return this;
        }
        public SqlPartitionSettingsArgs build() {
            return new SqlPartitionSettingsArgs(partitionColumnName, partitionLowerBound, partitionUpperBound);
        }
    }
}
