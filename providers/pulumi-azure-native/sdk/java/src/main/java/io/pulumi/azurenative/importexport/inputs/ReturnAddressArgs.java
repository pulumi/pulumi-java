// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.importexport.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies the return address information for the job.
 * 
 */
public final class ReturnAddressArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReturnAddressArgs Empty = new ReturnAddressArgs();

    /**
     * The city name to use when returning the drives.
     * 
     */
    @InputImport(name="city", required=true)
      private final Input<String> city;

    public Input<String> getCity() {
        return this.city;
    }

    /**
     * The country or region to use when returning the drives.
     * 
     */
    @InputImport(name="countryOrRegion", required=true)
      private final Input<String> countryOrRegion;

    public Input<String> getCountryOrRegion() {
        return this.countryOrRegion;
    }

    /**
     * Email address of the recipient of the returned drives.
     * 
     */
    @InputImport(name="email", required=true)
      private final Input<String> email;

    public Input<String> getEmail() {
        return this.email;
    }

    /**
     * Phone number of the recipient of the returned drives.
     * 
     */
    @InputImport(name="phone", required=true)
      private final Input<String> phone;

    public Input<String> getPhone() {
        return this.phone;
    }

    /**
     * The postal code to use when returning the drives.
     * 
     */
    @InputImport(name="postalCode", required=true)
      private final Input<String> postalCode;

    public Input<String> getPostalCode() {
        return this.postalCode;
    }

    /**
     * The name of the recipient who will receive the hard drives when they are returned.
     * 
     */
    @InputImport(name="recipientName", required=true)
      private final Input<String> recipientName;

    public Input<String> getRecipientName() {
        return this.recipientName;
    }

    /**
     * The state or province to use when returning the drives.
     * 
     */
    @InputImport(name="stateOrProvince")
      private final @Nullable Input<String> stateOrProvince;

    public Input<String> getStateOrProvince() {
        return this.stateOrProvince == null ? Input.empty() : this.stateOrProvince;
    }

    /**
     * The first line of the street address to use when returning the drives.
     * 
     */
    @InputImport(name="streetAddress1", required=true)
      private final Input<String> streetAddress1;

    public Input<String> getStreetAddress1() {
        return this.streetAddress1;
    }

    /**
     * The second line of the street address to use when returning the drives.
     * 
     */
    @InputImport(name="streetAddress2")
      private final @Nullable Input<String> streetAddress2;

    public Input<String> getStreetAddress2() {
        return this.streetAddress2 == null ? Input.empty() : this.streetAddress2;
    }

    public ReturnAddressArgs(
        Input<String> city,
        Input<String> countryOrRegion,
        Input<String> email,
        Input<String> phone,
        Input<String> postalCode,
        Input<String> recipientName,
        @Nullable Input<String> stateOrProvince,
        Input<String> streetAddress1,
        @Nullable Input<String> streetAddress2) {
        this.city = Objects.requireNonNull(city, "expected parameter 'city' to be non-null");
        this.countryOrRegion = Objects.requireNonNull(countryOrRegion, "expected parameter 'countryOrRegion' to be non-null");
        this.email = Objects.requireNonNull(email, "expected parameter 'email' to be non-null");
        this.phone = Objects.requireNonNull(phone, "expected parameter 'phone' to be non-null");
        this.postalCode = Objects.requireNonNull(postalCode, "expected parameter 'postalCode' to be non-null");
        this.recipientName = Objects.requireNonNull(recipientName, "expected parameter 'recipientName' to be non-null");
        this.stateOrProvince = stateOrProvince;
        this.streetAddress1 = Objects.requireNonNull(streetAddress1, "expected parameter 'streetAddress1' to be non-null");
        this.streetAddress2 = streetAddress2;
    }

    private ReturnAddressArgs() {
        this.city = Input.empty();
        this.countryOrRegion = Input.empty();
        this.email = Input.empty();
        this.phone = Input.empty();
        this.postalCode = Input.empty();
        this.recipientName = Input.empty();
        this.stateOrProvince = Input.empty();
        this.streetAddress1 = Input.empty();
        this.streetAddress2 = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReturnAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> city;
        private Input<String> countryOrRegion;
        private Input<String> email;
        private Input<String> phone;
        private Input<String> postalCode;
        private Input<String> recipientName;
        private @Nullable Input<String> stateOrProvince;
        private Input<String> streetAddress1;
        private @Nullable Input<String> streetAddress2;

        public Builder() {
    	      // Empty
        }

        public Builder(ReturnAddressArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.city = defaults.city;
    	      this.countryOrRegion = defaults.countryOrRegion;
    	      this.email = defaults.email;
    	      this.phone = defaults.phone;
    	      this.postalCode = defaults.postalCode;
    	      this.recipientName = defaults.recipientName;
    	      this.stateOrProvince = defaults.stateOrProvince;
    	      this.streetAddress1 = defaults.streetAddress1;
    	      this.streetAddress2 = defaults.streetAddress2;
        }

        public Builder city(Input<String> city) {
            this.city = Objects.requireNonNull(city);
            return this;
        }

        public Builder city(String city) {
            this.city = Input.of(Objects.requireNonNull(city));
            return this;
        }

        public Builder countryOrRegion(Input<String> countryOrRegion) {
            this.countryOrRegion = Objects.requireNonNull(countryOrRegion);
            return this;
        }

        public Builder countryOrRegion(String countryOrRegion) {
            this.countryOrRegion = Input.of(Objects.requireNonNull(countryOrRegion));
            return this;
        }

        public Builder email(Input<String> email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }

        public Builder email(String email) {
            this.email = Input.of(Objects.requireNonNull(email));
            return this;
        }

        public Builder phone(Input<String> phone) {
            this.phone = Objects.requireNonNull(phone);
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Input.of(Objects.requireNonNull(phone));
            return this;
        }

        public Builder postalCode(Input<String> postalCode) {
            this.postalCode = Objects.requireNonNull(postalCode);
            return this;
        }

        public Builder postalCode(String postalCode) {
            this.postalCode = Input.of(Objects.requireNonNull(postalCode));
            return this;
        }

        public Builder recipientName(Input<String> recipientName) {
            this.recipientName = Objects.requireNonNull(recipientName);
            return this;
        }

        public Builder recipientName(String recipientName) {
            this.recipientName = Input.of(Objects.requireNonNull(recipientName));
            return this;
        }

        public Builder stateOrProvince(@Nullable Input<String> stateOrProvince) {
            this.stateOrProvince = stateOrProvince;
            return this;
        }

        public Builder stateOrProvince(@Nullable String stateOrProvince) {
            this.stateOrProvince = Input.ofNullable(stateOrProvince);
            return this;
        }

        public Builder streetAddress1(Input<String> streetAddress1) {
            this.streetAddress1 = Objects.requireNonNull(streetAddress1);
            return this;
        }

        public Builder streetAddress1(String streetAddress1) {
            this.streetAddress1 = Input.of(Objects.requireNonNull(streetAddress1));
            return this;
        }

        public Builder streetAddress2(@Nullable Input<String> streetAddress2) {
            this.streetAddress2 = streetAddress2;
            return this;
        }

        public Builder streetAddress2(@Nullable String streetAddress2) {
            this.streetAddress2 = Input.ofNullable(streetAddress2);
            return this;
        }
        public ReturnAddressArgs build() {
            return new ReturnAddressArgs(city, countryOrRegion, email, phone, postalCode, recipientName, stateOrProvince, streetAddress1, streetAddress2);
        }
    }
}
