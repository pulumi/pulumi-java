// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.azurenative.machinelearningservices.inputs.DatasetResponseDataPath;
import io.pulumi.azurenative.machinelearningservices.inputs.DatasetStateResponse;
import io.pulumi.azurenative.machinelearningservices.inputs.UserInfoResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Last created Dataset definition.
 * 
 */
public final class DatasetResponseLatest extends io.pulumi.resources.InvokeArgs {

    public static final DatasetResponseLatest Empty = new DatasetResponseLatest();

    /**
     * User who created.
     * 
     */
    @InputImport(name="createdBy")
      private final @Nullable UserInfoResponse createdBy;

    public Optional<UserInfoResponse> getCreatedBy() {
        return this.createdBy == null ? Optional.empty() : Optional.ofNullable(this.createdBy);
    }

    /**
     * The dataset creation time (UTC).
     * 
     */
    @InputImport(name="createdTime", required=true)
      private final String createdTime;

    public String getCreatedTime() {
        return this.createdTime;
    }

    /**
     *  Datastore and reference to location of data such as relativePath, Sql Query and etc.
     * 
     */
    @InputImport(name="dataPath")
      private final @Nullable DatasetResponseDataPath dataPath;

    public Optional<DatasetResponseDataPath> getDataPath() {
        return this.dataPath == null ? Optional.empty() : Optional.ofNullable(this.dataPath);
    }

    /**
     * Dataflow Json
     * 
     */
    @InputImport(name="dataflow", required=true)
      private final String dataflow;

    public String getDataflow() {
        return this.dataflow;
    }

    /**
     * Dataset state
     * 
     */
    @InputImport(name="datasetDefinitionState")
      private final @Nullable DatasetStateResponse datasetDefinitionState;

    public Optional<DatasetStateResponse> getDatasetDefinitionState() {
        return this.datasetDefinitionState == null ? Optional.empty() : Optional.ofNullable(this.datasetDefinitionState);
    }

    /**
     * Unique Dataset identifier.
     * 
     */
    @InputImport(name="datasetId", required=true)
      private final String datasetId;

    public String getDatasetId() {
        return this.datasetId;
    }

    /**
     * Description about the dataset.
     * 
     */
    @InputImport(name="description", required=true)
      private final String description;

    public String getDescription() {
        return this.description;
    }

    /**
     * eTag description
     * 
     */
    @InputImport(name="etag", required=true)
      private final String etag;

    public String getEtag() {
        return this.etag;
    }

    /**
     * Dataset FileType, specified by user.
     * 
     */
    @InputImport(name="fileType", required=true)
      private final String fileType;

    public String getFileType() {
        return this.fileType;
    }

    /**
     * The dataset last modified time (UTC).
     * 
     */
    @InputImport(name="modifiedTime", required=true)
      private final String modifiedTime;

    public String getModifiedTime() {
        return this.modifiedTime;
    }

    /**
     * Summary of Definition changes.
     * 
     */
    @InputImport(name="notes", required=true)
      private final String notes;

    public String getNotes() {
        return this.notes;
    }

    /**
     * Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
     * 
     */
    @InputImport(name="partitionFormatInPath", required=true)
      private final Boolean partitionFormatInPath;

    public Boolean getPartitionFormatInPath() {
        return this.partitionFormatInPath;
    }

    /**
     * Properties stores information like name of time series column for time series dataset.
     * 
     */
    @InputImport(name="properties")
      private final @Nullable Map<String,Object> properties;

    public Map<String,Object> getProperties() {
        return this.properties == null ? Map.of() : this.properties;
    }

    /**
     * Indicates the saved dataset this definition is mapping to, populated on Get.
     * 
     */
    @InputImport(name="savedDatasetId", required=true)
      private final String savedDatasetId;

    public String getSavedDatasetId() {
        return this.savedDatasetId;
    }

    /**
     * Tags associated with the dataset.
     * 
     */
    @InputImport(name="tags", required=true)
      private final Map<String,String> tags;

    public Map<String,String> getTags() {
        return this.tags;
    }

    /**
     *  Telemetry information about the dataset including information like which service the dataset was created from.
     * 
     */
    @InputImport(name="telemetryInfo", required=true)
      private final Map<String,String> telemetryInfo;

    public Map<String,String> getTelemetryInfo() {
        return this.telemetryInfo;
    }

    /**
     *  Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
     * 
     */
    @InputImport(name="useDescriptionTagsFromDefinition", required=true)
      private final Boolean useDescriptionTagsFromDefinition;

    public Boolean getUseDescriptionTagsFromDefinition() {
        return this.useDescriptionTagsFromDefinition;
    }

    /**
     * An identifier uniquely identifies a definition change.
     * 
     */
    @InputImport(name="versionId", required=true)
      private final String versionId;

    public String getVersionId() {
        return this.versionId;
    }

    public DatasetResponseLatest(
        @Nullable UserInfoResponse createdBy,
        String createdTime,
        @Nullable DatasetResponseDataPath dataPath,
        String dataflow,
        @Nullable DatasetStateResponse datasetDefinitionState,
        String datasetId,
        String description,
        String etag,
        String fileType,
        String modifiedTime,
        String notes,
        Boolean partitionFormatInPath,
        @Nullable Map<String,Object> properties,
        String savedDatasetId,
        Map<String,String> tags,
        Map<String,String> telemetryInfo,
        Boolean useDescriptionTagsFromDefinition,
        String versionId) {
        this.createdBy = createdBy;
        this.createdTime = Objects.requireNonNull(createdTime, "expected parameter 'createdTime' to be non-null");
        this.dataPath = dataPath;
        this.dataflow = Objects.requireNonNull(dataflow, "expected parameter 'dataflow' to be non-null");
        this.datasetDefinitionState = datasetDefinitionState;
        this.datasetId = Objects.requireNonNull(datasetId, "expected parameter 'datasetId' to be non-null");
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.etag = Objects.requireNonNull(etag, "expected parameter 'etag' to be non-null");
        this.fileType = Objects.requireNonNull(fileType, "expected parameter 'fileType' to be non-null");
        this.modifiedTime = Objects.requireNonNull(modifiedTime, "expected parameter 'modifiedTime' to be non-null");
        this.notes = Objects.requireNonNull(notes, "expected parameter 'notes' to be non-null");
        this.partitionFormatInPath = Objects.requireNonNull(partitionFormatInPath, "expected parameter 'partitionFormatInPath' to be non-null");
        this.properties = properties;
        this.savedDatasetId = Objects.requireNonNull(savedDatasetId, "expected parameter 'savedDatasetId' to be non-null");
        this.tags = Objects.requireNonNull(tags, "expected parameter 'tags' to be non-null");
        this.telemetryInfo = Objects.requireNonNull(telemetryInfo, "expected parameter 'telemetryInfo' to be non-null");
        this.useDescriptionTagsFromDefinition = Objects.requireNonNull(useDescriptionTagsFromDefinition, "expected parameter 'useDescriptionTagsFromDefinition' to be non-null");
        this.versionId = Objects.requireNonNull(versionId, "expected parameter 'versionId' to be non-null");
    }

    private DatasetResponseLatest() {
        this.createdBy = null;
        this.createdTime = null;
        this.dataPath = null;
        this.dataflow = null;
        this.datasetDefinitionState = null;
        this.datasetId = null;
        this.description = null;
        this.etag = null;
        this.fileType = null;
        this.modifiedTime = null;
        this.notes = null;
        this.partitionFormatInPath = null;
        this.properties = Map.of();
        this.savedDatasetId = null;
        this.tags = Map.of();
        this.telemetryInfo = Map.of();
        this.useDescriptionTagsFromDefinition = null;
        this.versionId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetResponseLatest defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable UserInfoResponse createdBy;
        private String createdTime;
        private @Nullable DatasetResponseDataPath dataPath;
        private String dataflow;
        private @Nullable DatasetStateResponse datasetDefinitionState;
        private String datasetId;
        private String description;
        private String etag;
        private String fileType;
        private String modifiedTime;
        private String notes;
        private Boolean partitionFormatInPath;
        private @Nullable Map<String,Object> properties;
        private String savedDatasetId;
        private Map<String,String> tags;
        private Map<String,String> telemetryInfo;
        private Boolean useDescriptionTagsFromDefinition;
        private String versionId;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetResponseLatest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdBy = defaults.createdBy;
    	      this.createdTime = defaults.createdTime;
    	      this.dataPath = defaults.dataPath;
    	      this.dataflow = defaults.dataflow;
    	      this.datasetDefinitionState = defaults.datasetDefinitionState;
    	      this.datasetId = defaults.datasetId;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.fileType = defaults.fileType;
    	      this.modifiedTime = defaults.modifiedTime;
    	      this.notes = defaults.notes;
    	      this.partitionFormatInPath = defaults.partitionFormatInPath;
    	      this.properties = defaults.properties;
    	      this.savedDatasetId = defaults.savedDatasetId;
    	      this.tags = defaults.tags;
    	      this.telemetryInfo = defaults.telemetryInfo;
    	      this.useDescriptionTagsFromDefinition = defaults.useDescriptionTagsFromDefinition;
    	      this.versionId = defaults.versionId;
        }

        public Builder setCreatedBy(@Nullable UserInfoResponse createdBy) {
            this.createdBy = createdBy;
            return this;
        }

        public Builder setCreatedTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }

        public Builder setDataPath(@Nullable DatasetResponseDataPath dataPath) {
            this.dataPath = dataPath;
            return this;
        }

        public Builder setDataflow(String dataflow) {
            this.dataflow = Objects.requireNonNull(dataflow);
            return this;
        }

        public Builder setDatasetDefinitionState(@Nullable DatasetStateResponse datasetDefinitionState) {
            this.datasetDefinitionState = datasetDefinitionState;
            return this;
        }

        public Builder setDatasetId(String datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setFileType(String fileType) {
            this.fileType = Objects.requireNonNull(fileType);
            return this;
        }

        public Builder setModifiedTime(String modifiedTime) {
            this.modifiedTime = Objects.requireNonNull(modifiedTime);
            return this;
        }

        public Builder setNotes(String notes) {
            this.notes = Objects.requireNonNull(notes);
            return this;
        }

        public Builder setPartitionFormatInPath(Boolean partitionFormatInPath) {
            this.partitionFormatInPath = Objects.requireNonNull(partitionFormatInPath);
            return this;
        }

        public Builder setProperties(@Nullable Map<String,Object> properties) {
            this.properties = properties;
            return this;
        }

        public Builder setSavedDatasetId(String savedDatasetId) {
            this.savedDatasetId = Objects.requireNonNull(savedDatasetId);
            return this;
        }

        public Builder setTags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder setTelemetryInfo(Map<String,String> telemetryInfo) {
            this.telemetryInfo = Objects.requireNonNull(telemetryInfo);
            return this;
        }

        public Builder setUseDescriptionTagsFromDefinition(Boolean useDescriptionTagsFromDefinition) {
            this.useDescriptionTagsFromDefinition = Objects.requireNonNull(useDescriptionTagsFromDefinition);
            return this;
        }

        public Builder setVersionId(String versionId) {
            this.versionId = Objects.requireNonNull(versionId);
            return this;
        }
        public DatasetResponseLatest build() {
            return new DatasetResponseLatest(createdBy, createdTime, dataPath, dataflow, datasetDefinitionState, datasetId, description, etag, fileType, modifiedTime, notes, partitionFormatInPath, properties, savedDatasetId, tags, telemetryInfo, useDescriptionTagsFromDefinition, versionId);
        }
    }
}
