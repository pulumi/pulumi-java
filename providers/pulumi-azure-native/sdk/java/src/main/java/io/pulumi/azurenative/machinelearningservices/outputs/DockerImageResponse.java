// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.outputs;

import io.pulumi.azurenative.machinelearningservices.outputs.DockerImagePlatformResponse;
import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DockerImageResponse {
    /**
     * Image name of a custom base image.
     * <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
     * 
     */
    private final String dockerImageUri;
    /**
     * Enum to determine docker specification type. Must be either Build or Image.
     * Expected value is 'Image'.
     * 
     */
    private final String dockerSpecificationType;
    /**
     * The platform information of the docker image.
     * 
     */
    private final @Nullable DockerImagePlatformResponse platform;

    @CustomType.Constructor
    private DockerImageResponse(
        @CustomType.Parameter("dockerImageUri") String dockerImageUri,
        @CustomType.Parameter("dockerSpecificationType") String dockerSpecificationType,
        @CustomType.Parameter("platform") @Nullable DockerImagePlatformResponse platform) {
        this.dockerImageUri = dockerImageUri;
        this.dockerSpecificationType = dockerSpecificationType;
        this.platform = platform;
    }

    /**
     * Image name of a custom base image.
     * <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
     * 
    */
    public String dockerImageUri() {
        return this.dockerImageUri;
    }
    /**
     * Enum to determine docker specification type. Must be either Build or Image.
     * Expected value is 'Image'.
     * 
    */
    public String dockerSpecificationType() {
        return this.dockerSpecificationType;
    }
    /**
     * The platform information of the docker image.
     * 
    */
    public Optional<DockerImagePlatformResponse> platform() {
        return Optional.ofNullable(this.platform);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DockerImageResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String dockerImageUri;
        private String dockerSpecificationType;
        private @Nullable DockerImagePlatformResponse platform;

        public Builder() {
    	      // Empty
        }

        public Builder(DockerImageResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dockerImageUri = defaults.dockerImageUri;
    	      this.dockerSpecificationType = defaults.dockerSpecificationType;
    	      this.platform = defaults.platform;
        }

        public Builder dockerImageUri(String dockerImageUri) {
            this.dockerImageUri = Objects.requireNonNull(dockerImageUri);
            return this;
        }
        public Builder dockerSpecificationType(String dockerSpecificationType) {
            this.dockerSpecificationType = Objects.requireNonNull(dockerSpecificationType);
            return this;
        }
        public Builder platform(@Nullable DockerImagePlatformResponse platform) {
            this.platform = platform;
            return this;
        }        public DockerImageResponse build() {
            return new DockerImageResponse(dockerImageUri, dockerSpecificationType, platform);
        }
    }
}
