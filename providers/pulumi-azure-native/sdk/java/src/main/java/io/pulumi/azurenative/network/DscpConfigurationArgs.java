// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.enums.ProtocolType;
import io.pulumi.azurenative.network.inputs.QosIpRangeArgs;
import io.pulumi.azurenative.network.inputs.QosPortRangeArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DscpConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final DscpConfigurationArgs Empty = new DscpConfigurationArgs();

    /**
     * Destination IP ranges.
     * 
     */
    @InputImport(name="destinationIpRanges")
      private final @Nullable Output<List<QosIpRangeArgs>> destinationIpRanges;

    public Output<List<QosIpRangeArgs>> getDestinationIpRanges() {
        return this.destinationIpRanges == null ? Output.empty() : this.destinationIpRanges;
    }

    /**
     * Destination port ranges.
     * 
     */
    @InputImport(name="destinationPortRanges")
      private final @Nullable Output<List<QosPortRangeArgs>> destinationPortRanges;

    public Output<List<QosPortRangeArgs>> getDestinationPortRanges() {
        return this.destinationPortRanges == null ? Output.empty() : this.destinationPortRanges;
    }

    /**
     * The name of the resource.
     * 
     */
    @InputImport(name="dscpConfigurationName")
      private final @Nullable Output<String> dscpConfigurationName;

    public Output<String> getDscpConfigurationName() {
        return this.dscpConfigurationName == null ? Output.empty() : this.dscpConfigurationName;
    }

    /**
     * Resource ID.
     * 
     */
    @InputImport(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * Resource location.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * List of markings to be used in the configuration.
     * 
     */
    @InputImport(name="markings")
      private final @Nullable Output<List<Integer>> markings;

    public Output<List<Integer>> getMarkings() {
        return this.markings == null ? Output.empty() : this.markings;
    }

    /**
     * RNM supported protocol types.
     * 
     */
    @InputImport(name="protocol")
      private final @Nullable Output<Either<String,ProtocolType>> protocol;

    public Output<Either<String,ProtocolType>> getProtocol() {
        return this.protocol == null ? Output.empty() : this.protocol;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Source IP ranges.
     * 
     */
    @InputImport(name="sourceIpRanges")
      private final @Nullable Output<List<QosIpRangeArgs>> sourceIpRanges;

    public Output<List<QosIpRangeArgs>> getSourceIpRanges() {
        return this.sourceIpRanges == null ? Output.empty() : this.sourceIpRanges;
    }

    /**
     * Sources port ranges.
     * 
     */
    @InputImport(name="sourcePortRanges")
      private final @Nullable Output<List<QosPortRangeArgs>> sourcePortRanges;

    public Output<List<QosPortRangeArgs>> getSourcePortRanges() {
        return this.sourcePortRanges == null ? Output.empty() : this.sourcePortRanges;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DscpConfigurationArgs(
        @Nullable Output<List<QosIpRangeArgs>> destinationIpRanges,
        @Nullable Output<List<QosPortRangeArgs>> destinationPortRanges,
        @Nullable Output<String> dscpConfigurationName,
        @Nullable Output<String> id,
        @Nullable Output<String> location,
        @Nullable Output<List<Integer>> markings,
        @Nullable Output<Either<String,ProtocolType>> protocol,
        Output<String> resourceGroupName,
        @Nullable Output<List<QosIpRangeArgs>> sourceIpRanges,
        @Nullable Output<List<QosPortRangeArgs>> sourcePortRanges,
        @Nullable Output<Map<String,String>> tags) {
        this.destinationIpRanges = destinationIpRanges;
        this.destinationPortRanges = destinationPortRanges;
        this.dscpConfigurationName = dscpConfigurationName;
        this.id = id;
        this.location = location;
        this.markings = markings;
        this.protocol = protocol;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sourceIpRanges = sourceIpRanges;
        this.sourcePortRanges = sourcePortRanges;
        this.tags = tags;
    }

    private DscpConfigurationArgs() {
        this.destinationIpRanges = Output.empty();
        this.destinationPortRanges = Output.empty();
        this.dscpConfigurationName = Output.empty();
        this.id = Output.empty();
        this.location = Output.empty();
        this.markings = Output.empty();
        this.protocol = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sourceIpRanges = Output.empty();
        this.sourcePortRanges = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DscpConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<QosIpRangeArgs>> destinationIpRanges;
        private @Nullable Output<List<QosPortRangeArgs>> destinationPortRanges;
        private @Nullable Output<String> dscpConfigurationName;
        private @Nullable Output<String> id;
        private @Nullable Output<String> location;
        private @Nullable Output<List<Integer>> markings;
        private @Nullable Output<Either<String,ProtocolType>> protocol;
        private Output<String> resourceGroupName;
        private @Nullable Output<List<QosIpRangeArgs>> sourceIpRanges;
        private @Nullable Output<List<QosPortRangeArgs>> sourcePortRanges;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DscpConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationIpRanges = defaults.destinationIpRanges;
    	      this.destinationPortRanges = defaults.destinationPortRanges;
    	      this.dscpConfigurationName = defaults.dscpConfigurationName;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.markings = defaults.markings;
    	      this.protocol = defaults.protocol;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sourceIpRanges = defaults.sourceIpRanges;
    	      this.sourcePortRanges = defaults.sourcePortRanges;
    	      this.tags = defaults.tags;
        }

        public Builder destinationIpRanges(@Nullable Output<List<QosIpRangeArgs>> destinationIpRanges) {
            this.destinationIpRanges = destinationIpRanges;
            return this;
        }

        public Builder destinationIpRanges(@Nullable List<QosIpRangeArgs> destinationIpRanges) {
            this.destinationIpRanges = Output.ofNullable(destinationIpRanges);
            return this;
        }

        public Builder destinationPortRanges(@Nullable Output<List<QosPortRangeArgs>> destinationPortRanges) {
            this.destinationPortRanges = destinationPortRanges;
            return this;
        }

        public Builder destinationPortRanges(@Nullable List<QosPortRangeArgs> destinationPortRanges) {
            this.destinationPortRanges = Output.ofNullable(destinationPortRanges);
            return this;
        }

        public Builder dscpConfigurationName(@Nullable Output<String> dscpConfigurationName) {
            this.dscpConfigurationName = dscpConfigurationName;
            return this;
        }

        public Builder dscpConfigurationName(@Nullable String dscpConfigurationName) {
            this.dscpConfigurationName = Output.ofNullable(dscpConfigurationName);
            return this;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder markings(@Nullable Output<List<Integer>> markings) {
            this.markings = markings;
            return this;
        }

        public Builder markings(@Nullable List<Integer> markings) {
            this.markings = Output.ofNullable(markings);
            return this;
        }

        public Builder protocol(@Nullable Output<Either<String,ProtocolType>> protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder protocol(@Nullable Either<String,ProtocolType> protocol) {
            this.protocol = Output.ofNullable(protocol);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder sourceIpRanges(@Nullable Output<List<QosIpRangeArgs>> sourceIpRanges) {
            this.sourceIpRanges = sourceIpRanges;
            return this;
        }

        public Builder sourceIpRanges(@Nullable List<QosIpRangeArgs> sourceIpRanges) {
            this.sourceIpRanges = Output.ofNullable(sourceIpRanges);
            return this;
        }

        public Builder sourcePortRanges(@Nullable Output<List<QosPortRangeArgs>> sourcePortRanges) {
            this.sourcePortRanges = sourcePortRanges;
            return this;
        }

        public Builder sourcePortRanges(@Nullable List<QosPortRangeArgs> sourcePortRanges) {
            this.sourcePortRanges = Output.ofNullable(sourcePortRanges);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public DscpConfigurationArgs build() {
            return new DscpConfigurationArgs(destinationIpRanges, destinationPortRanges, dscpConfigurationName, id, location, markings, protocol, resourceGroupName, sourceIpRanges, sourcePortRanges, tags);
        }
    }
}
