// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * InMage protected disk details.
 * 
 */
public final class InMageProtectedDiskDetailsResponse extends io.pulumi.resources.InvokeArgs {

    public static final InMageProtectedDiskDetailsResponse Empty = new InMageProtectedDiskDetailsResponse();

    /**
     * The disk capacity in bytes.
     * 
     */
    @InputImport(name="diskCapacityInBytes")
      private final @Nullable Double diskCapacityInBytes;

    public Optional<Double> getDiskCapacityInBytes() {
        return this.diskCapacityInBytes == null ? Optional.empty() : Optional.ofNullable(this.diskCapacityInBytes);
    }

    /**
     * The disk id.
     * 
     */
    @InputImport(name="diskId")
      private final @Nullable String diskId;

    public Optional<String> getDiskId() {
        return this.diskId == null ? Optional.empty() : Optional.ofNullable(this.diskId);
    }

    /**
     * The disk name.
     * 
     */
    @InputImport(name="diskName")
      private final @Nullable String diskName;

    public Optional<String> getDiskName() {
        return this.diskName == null ? Optional.empty() : Optional.ofNullable(this.diskName);
    }

    /**
     * A value indicating whether disk is resized.
     * 
     */
    @InputImport(name="diskResized")
      private final @Nullable String diskResized;

    public Optional<String> getDiskResized() {
        return this.diskResized == null ? Optional.empty() : Optional.ofNullable(this.diskResized);
    }

    /**
     * The file system capacity in bytes.
     * 
     */
    @InputImport(name="fileSystemCapacityInBytes")
      private final @Nullable Double fileSystemCapacityInBytes;

    public Optional<Double> getFileSystemCapacityInBytes() {
        return this.fileSystemCapacityInBytes == null ? Optional.empty() : Optional.ofNullable(this.fileSystemCapacityInBytes);
    }

    /**
     * The health error code for the disk.
     * 
     */
    @InputImport(name="healthErrorCode")
      private final @Nullable String healthErrorCode;

    public Optional<String> getHealthErrorCode() {
        return this.healthErrorCode == null ? Optional.empty() : Optional.ofNullable(this.healthErrorCode);
    }

    /**
     * The last RPO calculated time.
     * 
     */
    @InputImport(name="lastRpoCalculatedTime")
      private final @Nullable String lastRpoCalculatedTime;

    public Optional<String> getLastRpoCalculatedTime() {
        return this.lastRpoCalculatedTime == null ? Optional.empty() : Optional.ofNullable(this.lastRpoCalculatedTime);
    }

    /**
     * The protection stage.
     * 
     */
    @InputImport(name="protectionStage")
      private final @Nullable String protectionStage;

    public Optional<String> getProtectionStage() {
        return this.protectionStage == null ? Optional.empty() : Optional.ofNullable(this.protectionStage);
    }

    /**
     * The PS data transit in MB.
     * 
     */
    @InputImport(name="psDataInMB")
      private final @Nullable Double psDataInMB;

    public Optional<Double> getPsDataInMB() {
        return this.psDataInMB == null ? Optional.empty() : Optional.ofNullable(this.psDataInMB);
    }

    /**
     * The resync duration in seconds.
     * 
     */
    @InputImport(name="resyncDurationInSeconds")
      private final @Nullable Double resyncDurationInSeconds;

    public Optional<Double> getResyncDurationInSeconds() {
        return this.resyncDurationInSeconds == null ? Optional.empty() : Optional.ofNullable(this.resyncDurationInSeconds);
    }

    /**
     * The resync progress percentage.
     * 
     */
    @InputImport(name="resyncProgressPercentage")
      private final @Nullable Integer resyncProgressPercentage;

    public Optional<Integer> getResyncProgressPercentage() {
        return this.resyncProgressPercentage == null ? Optional.empty() : Optional.ofNullable(this.resyncProgressPercentage);
    }

    /**
     * A value indicating whether resync is required for this disk.
     * 
     */
    @InputImport(name="resyncRequired")
      private final @Nullable String resyncRequired;

    public Optional<String> getResyncRequired() {
        return this.resyncRequired == null ? Optional.empty() : Optional.ofNullable(this.resyncRequired);
    }

    /**
     * The RPO in seconds.
     * 
     */
    @InputImport(name="rpoInSeconds")
      private final @Nullable Double rpoInSeconds;

    public Optional<Double> getRpoInSeconds() {
        return this.rpoInSeconds == null ? Optional.empty() : Optional.ofNullable(this.rpoInSeconds);
    }

    /**
     * The source data transit in MB.
     * 
     */
    @InputImport(name="sourceDataInMB")
      private final @Nullable Double sourceDataInMB;

    public Optional<Double> getSourceDataInMB() {
        return this.sourceDataInMB == null ? Optional.empty() : Optional.ofNullable(this.sourceDataInMB);
    }

    /**
     * The target data transit in MB.
     * 
     */
    @InputImport(name="targetDataInMB")
      private final @Nullable Double targetDataInMB;

    public Optional<Double> getTargetDataInMB() {
        return this.targetDataInMB == null ? Optional.empty() : Optional.ofNullable(this.targetDataInMB);
    }

    public InMageProtectedDiskDetailsResponse(
        @Nullable Double diskCapacityInBytes,
        @Nullable String diskId,
        @Nullable String diskName,
        @Nullable String diskResized,
        @Nullable Double fileSystemCapacityInBytes,
        @Nullable String healthErrorCode,
        @Nullable String lastRpoCalculatedTime,
        @Nullable String protectionStage,
        @Nullable Double psDataInMB,
        @Nullable Double resyncDurationInSeconds,
        @Nullable Integer resyncProgressPercentage,
        @Nullable String resyncRequired,
        @Nullable Double rpoInSeconds,
        @Nullable Double sourceDataInMB,
        @Nullable Double targetDataInMB) {
        this.diskCapacityInBytes = diskCapacityInBytes;
        this.diskId = diskId;
        this.diskName = diskName;
        this.diskResized = diskResized;
        this.fileSystemCapacityInBytes = fileSystemCapacityInBytes;
        this.healthErrorCode = healthErrorCode;
        this.lastRpoCalculatedTime = lastRpoCalculatedTime;
        this.protectionStage = protectionStage;
        this.psDataInMB = psDataInMB;
        this.resyncDurationInSeconds = resyncDurationInSeconds;
        this.resyncProgressPercentage = resyncProgressPercentage;
        this.resyncRequired = resyncRequired;
        this.rpoInSeconds = rpoInSeconds;
        this.sourceDataInMB = sourceDataInMB;
        this.targetDataInMB = targetDataInMB;
    }

    private InMageProtectedDiskDetailsResponse() {
        this.diskCapacityInBytes = null;
        this.diskId = null;
        this.diskName = null;
        this.diskResized = null;
        this.fileSystemCapacityInBytes = null;
        this.healthErrorCode = null;
        this.lastRpoCalculatedTime = null;
        this.protectionStage = null;
        this.psDataInMB = null;
        this.resyncDurationInSeconds = null;
        this.resyncProgressPercentage = null;
        this.resyncRequired = null;
        this.rpoInSeconds = null;
        this.sourceDataInMB = null;
        this.targetDataInMB = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InMageProtectedDiskDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Double diskCapacityInBytes;
        private @Nullable String diskId;
        private @Nullable String diskName;
        private @Nullable String diskResized;
        private @Nullable Double fileSystemCapacityInBytes;
        private @Nullable String healthErrorCode;
        private @Nullable String lastRpoCalculatedTime;
        private @Nullable String protectionStage;
        private @Nullable Double psDataInMB;
        private @Nullable Double resyncDurationInSeconds;
        private @Nullable Integer resyncProgressPercentage;
        private @Nullable String resyncRequired;
        private @Nullable Double rpoInSeconds;
        private @Nullable Double sourceDataInMB;
        private @Nullable Double targetDataInMB;

        public Builder() {
    	      // Empty
        }

        public Builder(InMageProtectedDiskDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskCapacityInBytes = defaults.diskCapacityInBytes;
    	      this.diskId = defaults.diskId;
    	      this.diskName = defaults.diskName;
    	      this.diskResized = defaults.diskResized;
    	      this.fileSystemCapacityInBytes = defaults.fileSystemCapacityInBytes;
    	      this.healthErrorCode = defaults.healthErrorCode;
    	      this.lastRpoCalculatedTime = defaults.lastRpoCalculatedTime;
    	      this.protectionStage = defaults.protectionStage;
    	      this.psDataInMB = defaults.psDataInMB;
    	      this.resyncDurationInSeconds = defaults.resyncDurationInSeconds;
    	      this.resyncProgressPercentage = defaults.resyncProgressPercentage;
    	      this.resyncRequired = defaults.resyncRequired;
    	      this.rpoInSeconds = defaults.rpoInSeconds;
    	      this.sourceDataInMB = defaults.sourceDataInMB;
    	      this.targetDataInMB = defaults.targetDataInMB;
        }

        public Builder setDiskCapacityInBytes(@Nullable Double diskCapacityInBytes) {
            this.diskCapacityInBytes = diskCapacityInBytes;
            return this;
        }

        public Builder setDiskId(@Nullable String diskId) {
            this.diskId = diskId;
            return this;
        }

        public Builder setDiskName(@Nullable String diskName) {
            this.diskName = diskName;
            return this;
        }

        public Builder setDiskResized(@Nullable String diskResized) {
            this.diskResized = diskResized;
            return this;
        }

        public Builder setFileSystemCapacityInBytes(@Nullable Double fileSystemCapacityInBytes) {
            this.fileSystemCapacityInBytes = fileSystemCapacityInBytes;
            return this;
        }

        public Builder setHealthErrorCode(@Nullable String healthErrorCode) {
            this.healthErrorCode = healthErrorCode;
            return this;
        }

        public Builder setLastRpoCalculatedTime(@Nullable String lastRpoCalculatedTime) {
            this.lastRpoCalculatedTime = lastRpoCalculatedTime;
            return this;
        }

        public Builder setProtectionStage(@Nullable String protectionStage) {
            this.protectionStage = protectionStage;
            return this;
        }

        public Builder setPsDataInMB(@Nullable Double psDataInMB) {
            this.psDataInMB = psDataInMB;
            return this;
        }

        public Builder setResyncDurationInSeconds(@Nullable Double resyncDurationInSeconds) {
            this.resyncDurationInSeconds = resyncDurationInSeconds;
            return this;
        }

        public Builder setResyncProgressPercentage(@Nullable Integer resyncProgressPercentage) {
            this.resyncProgressPercentage = resyncProgressPercentage;
            return this;
        }

        public Builder setResyncRequired(@Nullable String resyncRequired) {
            this.resyncRequired = resyncRequired;
            return this;
        }

        public Builder setRpoInSeconds(@Nullable Double rpoInSeconds) {
            this.rpoInSeconds = rpoInSeconds;
            return this;
        }

        public Builder setSourceDataInMB(@Nullable Double sourceDataInMB) {
            this.sourceDataInMB = sourceDataInMB;
            return this;
        }

        public Builder setTargetDataInMB(@Nullable Double targetDataInMB) {
            this.targetDataInMB = targetDataInMB;
            return this;
        }
        public InMageProtectedDiskDetailsResponse build() {
            return new InMageProtectedDiskDetailsResponse(diskCapacityInBytes, diskId, diskName, diskResized, fileSystemCapacityInBytes, healthErrorCode, lastRpoCalculatedTime, protectionStage, psDataInMB, resyncDurationInSeconds, resyncProgressPercentage, resyncRequired, rpoInSeconds, sourceDataInMB, targetDataInMB);
        }
    }
}
