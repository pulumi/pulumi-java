// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.FrontDoorProtocol;
import io.pulumi.azurenative.network.enums.RoutingRuleEnabledState;
import io.pulumi.azurenative.network.inputs.ForwardingConfigurationArgs;
import io.pulumi.azurenative.network.inputs.RedirectConfigurationArgs;
import io.pulumi.azurenative.network.inputs.RoutingRuleUpdateParametersWebApplicationFirewallPolicyLinkArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
 * 
 */
public final class RoutingRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final RoutingRuleArgs Empty = new RoutingRuleArgs();

    /**
     * Protocol schemes to match for this rule
     * 
     */
    @InputImport(name="acceptedProtocols")
    private final @Nullable Input<List<Either<String,FrontDoorProtocol>>> acceptedProtocols;

    public Input<List<Either<String,FrontDoorProtocol>>> getAcceptedProtocols() {
        return this.acceptedProtocols == null ? Input.empty() : this.acceptedProtocols;
    }

    /**
     * Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
     * 
     */
    @InputImport(name="enabledState")
    private final @Nullable Input<Either<String,RoutingRuleEnabledState>> enabledState;

    public Input<Either<String,RoutingRuleEnabledState>> getEnabledState() {
        return this.enabledState == null ? Input.empty() : this.enabledState;
    }

    /**
     * Frontend endpoints associated with this rule
     * 
     */
    @InputImport(name="frontendEndpoints")
    private final @Nullable Input<List<SubResourceArgs>> frontendEndpoints;

    public Input<List<SubResourceArgs>> getFrontendEndpoints() {
        return this.frontendEndpoints == null ? Input.empty() : this.frontendEndpoints;
    }

    /**
     * Resource ID.
     * 
     */
    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * Resource name.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The route patterns of the rule.
     * 
     */
    @InputImport(name="patternsToMatch")
    private final @Nullable Input<List<String>> patternsToMatch;

    public Input<List<String>> getPatternsToMatch() {
        return this.patternsToMatch == null ? Input.empty() : this.patternsToMatch;
    }

    /**
     * A reference to the routing configuration.
     * 
     */
    @InputImport(name="routeConfiguration")
    private final @Nullable Input<Either<ForwardingConfigurationArgs,RedirectConfigurationArgs>> routeConfiguration;

    public Input<Either<ForwardingConfigurationArgs,RedirectConfigurationArgs>> getRouteConfiguration() {
        return this.routeConfiguration == null ? Input.empty() : this.routeConfiguration;
    }

    /**
     * A reference to a specific Rules Engine Configuration to apply to this route.
     * 
     */
    @InputImport(name="rulesEngine")
    private final @Nullable Input<SubResourceArgs> rulesEngine;

    public Input<SubResourceArgs> getRulesEngine() {
        return this.rulesEngine == null ? Input.empty() : this.rulesEngine;
    }

    /**
     * Defines the Web Application Firewall policy for each routing rule (if applicable)
     * 
     */
    @InputImport(name="webApplicationFirewallPolicyLink")
    private final @Nullable Input<RoutingRuleUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink;

    public Input<RoutingRuleUpdateParametersWebApplicationFirewallPolicyLinkArgs> getWebApplicationFirewallPolicyLink() {
        return this.webApplicationFirewallPolicyLink == null ? Input.empty() : this.webApplicationFirewallPolicyLink;
    }

    public RoutingRuleArgs(
        @Nullable Input<List<Either<String,FrontDoorProtocol>>> acceptedProtocols,
        @Nullable Input<Either<String,RoutingRuleEnabledState>> enabledState,
        @Nullable Input<List<SubResourceArgs>> frontendEndpoints,
        @Nullable Input<String> id,
        @Nullable Input<String> name,
        @Nullable Input<List<String>> patternsToMatch,
        @Nullable Input<Either<ForwardingConfigurationArgs,RedirectConfigurationArgs>> routeConfiguration,
        @Nullable Input<SubResourceArgs> rulesEngine,
        @Nullable Input<RoutingRuleUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink) {
        this.acceptedProtocols = acceptedProtocols;
        this.enabledState = enabledState;
        this.frontendEndpoints = frontendEndpoints;
        this.id = id;
        this.name = name;
        this.patternsToMatch = patternsToMatch;
        this.routeConfiguration = routeConfiguration;
        this.rulesEngine = rulesEngine;
        this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
    }

    private RoutingRuleArgs() {
        this.acceptedProtocols = Input.empty();
        this.enabledState = Input.empty();
        this.frontendEndpoints = Input.empty();
        this.id = Input.empty();
        this.name = Input.empty();
        this.patternsToMatch = Input.empty();
        this.routeConfiguration = Input.empty();
        this.rulesEngine = Input.empty();
        this.webApplicationFirewallPolicyLink = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoutingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<Either<String,FrontDoorProtocol>>> acceptedProtocols;
        private @Nullable Input<Either<String,RoutingRuleEnabledState>> enabledState;
        private @Nullable Input<List<SubResourceArgs>> frontendEndpoints;
        private @Nullable Input<String> id;
        private @Nullable Input<String> name;
        private @Nullable Input<List<String>> patternsToMatch;
        private @Nullable Input<Either<ForwardingConfigurationArgs,RedirectConfigurationArgs>> routeConfiguration;
        private @Nullable Input<SubResourceArgs> rulesEngine;
        private @Nullable Input<RoutingRuleUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink;

        public Builder() {
    	      // Empty
        }

        public Builder(RoutingRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptedProtocols = defaults.acceptedProtocols;
    	      this.enabledState = defaults.enabledState;
    	      this.frontendEndpoints = defaults.frontendEndpoints;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.patternsToMatch = defaults.patternsToMatch;
    	      this.routeConfiguration = defaults.routeConfiguration;
    	      this.rulesEngine = defaults.rulesEngine;
    	      this.webApplicationFirewallPolicyLink = defaults.webApplicationFirewallPolicyLink;
        }

        public Builder setAcceptedProtocols(@Nullable Input<List<Either<String,FrontDoorProtocol>>> acceptedProtocols) {
            this.acceptedProtocols = acceptedProtocols;
            return this;
        }

        public Builder setAcceptedProtocols(@Nullable List<Either<String,FrontDoorProtocol>> acceptedProtocols) {
            this.acceptedProtocols = Input.ofNullable(acceptedProtocols);
            return this;
        }

        public Builder setEnabledState(@Nullable Input<Either<String,RoutingRuleEnabledState>> enabledState) {
            this.enabledState = enabledState;
            return this;
        }

        public Builder setEnabledState(@Nullable Either<String,RoutingRuleEnabledState> enabledState) {
            this.enabledState = Input.ofNullable(enabledState);
            return this;
        }

        public Builder setFrontendEndpoints(@Nullable Input<List<SubResourceArgs>> frontendEndpoints) {
            this.frontendEndpoints = frontendEndpoints;
            return this;
        }

        public Builder setFrontendEndpoints(@Nullable List<SubResourceArgs> frontendEndpoints) {
            this.frontendEndpoints = Input.ofNullable(frontendEndpoints);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPatternsToMatch(@Nullable Input<List<String>> patternsToMatch) {
            this.patternsToMatch = patternsToMatch;
            return this;
        }

        public Builder setPatternsToMatch(@Nullable List<String> patternsToMatch) {
            this.patternsToMatch = Input.ofNullable(patternsToMatch);
            return this;
        }

        public Builder setRouteConfiguration(@Nullable Input<Either<ForwardingConfigurationArgs,RedirectConfigurationArgs>> routeConfiguration) {
            this.routeConfiguration = routeConfiguration;
            return this;
        }

        public Builder setRouteConfiguration(@Nullable Either<ForwardingConfigurationArgs,RedirectConfigurationArgs> routeConfiguration) {
            this.routeConfiguration = Input.ofNullable(routeConfiguration);
            return this;
        }

        public Builder setRulesEngine(@Nullable Input<SubResourceArgs> rulesEngine) {
            this.rulesEngine = rulesEngine;
            return this;
        }

        public Builder setRulesEngine(@Nullable SubResourceArgs rulesEngine) {
            this.rulesEngine = Input.ofNullable(rulesEngine);
            return this;
        }

        public Builder setWebApplicationFirewallPolicyLink(@Nullable Input<RoutingRuleUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink) {
            this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
            return this;
        }

        public Builder setWebApplicationFirewallPolicyLink(@Nullable RoutingRuleUpdateParametersWebApplicationFirewallPolicyLinkArgs webApplicationFirewallPolicyLink) {
            this.webApplicationFirewallPolicyLink = Input.ofNullable(webApplicationFirewallPolicyLink);
            return this;
        }

        public RoutingRuleArgs build() {
            return new RoutingRuleArgs(acceptedProtocols, enabledState, frontendEndpoints, id, name, patternsToMatch, routeConfiguration, rulesEngine, webApplicationFirewallPolicyLink);
        }
    }
}
