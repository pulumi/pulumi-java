// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabricmesh.inputs;

import io.pulumi.azurenative.servicefabricmesh.inputs.ApplicationScopedVolumeResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.ContainerInstanceViewResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.ContainerLabelResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.DiagnosticsRefResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.EndpointPropertiesResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.EnvironmentVariableResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.ImageRegistryCredentialResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.ReliableCollectionsRefResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.ResourceRequirementsResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.SettingResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.VolumeReferenceResponse;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a container and its runtime properties.
 * 
 */
public final class ContainerCodePackagePropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final ContainerCodePackagePropertiesResponse Empty = new ContainerCodePackagePropertiesResponse();

    /**
     * Command array to execute within the container in exec form.
     * 
     */
    @Import(name="commands")
      private final @Nullable List<String> commands;

    public List<String> getCommands() {
        return this.commands == null ? List.of() : this.commands;
    }

    /**
     * Reference to sinks in DiagnosticsDescription.
     * 
     */
    @Import(name="diagnostics")
      private final @Nullable DiagnosticsRefResponse diagnostics;

    public Optional<DiagnosticsRefResponse> getDiagnostics() {
        return this.diagnostics == null ? Optional.empty() : Optional.ofNullable(this.diagnostics);
    }

    /**
     * The endpoints exposed by this container.
     * 
     */
    @Import(name="endpoints")
      private final @Nullable List<EndpointPropertiesResponse> endpoints;

    public List<EndpointPropertiesResponse> getEndpoints() {
        return this.endpoints == null ? List.of() : this.endpoints;
    }

    /**
     * Override for the default entry point in the container.
     * 
     */
    @Import(name="entrypoint")
      private final @Nullable String entrypoint;

    public Optional<String> getEntrypoint() {
        return this.entrypoint == null ? Optional.empty() : Optional.ofNullable(this.entrypoint);
    }

    /**
     * The environment variables to set in this container
     * 
     */
    @Import(name="environmentVariables")
      private final @Nullable List<EnvironmentVariableResponse> environmentVariables;

    public List<EnvironmentVariableResponse> getEnvironmentVariables() {
        return this.environmentVariables == null ? List.of() : this.environmentVariables;
    }

    /**
     * The Container image to use.
     * 
     */
    @Import(name="image", required=true)
      private final String image;

    public String getImage() {
        return this.image;
    }

    /**
     * Image registry credential.
     * 
     */
    @Import(name="imageRegistryCredential")
      private final @Nullable ImageRegistryCredentialResponse imageRegistryCredential;

    public Optional<ImageRegistryCredentialResponse> getImageRegistryCredential() {
        return this.imageRegistryCredential == null ? Optional.empty() : Optional.ofNullable(this.imageRegistryCredential);
    }

    /**
     * Runtime information of a container instance.
     * 
     */
    @Import(name="instanceView", required=true)
      private final ContainerInstanceViewResponse instanceView;

    public ContainerInstanceViewResponse getInstanceView() {
        return this.instanceView;
    }

    /**
     * The labels to set in this container.
     * 
     */
    @Import(name="labels")
      private final @Nullable List<ContainerLabelResponse> labels;

    public List<ContainerLabelResponse> getLabels() {
        return this.labels == null ? List.of() : this.labels;
    }

    /**
     * The name of the code package.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details.
     * 
     */
    @Import(name="reliableCollectionsRefs")
      private final @Nullable List<ReliableCollectionsRefResponse> reliableCollectionsRefs;

    public List<ReliableCollectionsRefResponse> getReliableCollectionsRefs() {
        return this.reliableCollectionsRefs == null ? List.of() : this.reliableCollectionsRefs;
    }

    /**
     * The resources required by this container.
     * 
     */
    @Import(name="resources", required=true)
      private final ResourceRequirementsResponse resources;

    public ResourceRequirementsResponse getResources() {
        return this.resources;
    }

    /**
     * The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets".
     * 
     */
    @Import(name="settings")
      private final @Nullable List<SettingResponse> settings;

    public List<SettingResponse> getSettings() {
        return this.settings == null ? List.of() : this.settings;
    }

    /**
     * Volumes to be attached to the container. The lifetime of these volumes is independent of the application's lifetime.
     * 
     */
    @Import(name="volumeRefs")
      private final @Nullable List<VolumeReferenceResponse> volumeRefs;

    public List<VolumeReferenceResponse> getVolumeRefs() {
        return this.volumeRefs == null ? List.of() : this.volumeRefs;
    }

    /**
     * Volumes to be attached to the container. The lifetime of these volumes is scoped to the application's lifetime.
     * 
     */
    @Import(name="volumes")
      private final @Nullable List<ApplicationScopedVolumeResponse> volumes;

    public List<ApplicationScopedVolumeResponse> getVolumes() {
        return this.volumes == null ? List.of() : this.volumes;
    }

    public ContainerCodePackagePropertiesResponse(
        @Nullable List<String> commands,
        @Nullable DiagnosticsRefResponse diagnostics,
        @Nullable List<EndpointPropertiesResponse> endpoints,
        @Nullable String entrypoint,
        @Nullable List<EnvironmentVariableResponse> environmentVariables,
        String image,
        @Nullable ImageRegistryCredentialResponse imageRegistryCredential,
        ContainerInstanceViewResponse instanceView,
        @Nullable List<ContainerLabelResponse> labels,
        String name,
        @Nullable List<ReliableCollectionsRefResponse> reliableCollectionsRefs,
        ResourceRequirementsResponse resources,
        @Nullable List<SettingResponse> settings,
        @Nullable List<VolumeReferenceResponse> volumeRefs,
        @Nullable List<ApplicationScopedVolumeResponse> volumes) {
        this.commands = commands;
        this.diagnostics = diagnostics;
        this.endpoints = endpoints;
        this.entrypoint = entrypoint;
        this.environmentVariables = environmentVariables;
        this.image = Objects.requireNonNull(image, "expected parameter 'image' to be non-null");
        this.imageRegistryCredential = imageRegistryCredential;
        this.instanceView = Objects.requireNonNull(instanceView, "expected parameter 'instanceView' to be non-null");
        this.labels = labels;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.reliableCollectionsRefs = reliableCollectionsRefs;
        this.resources = Objects.requireNonNull(resources, "expected parameter 'resources' to be non-null");
        this.settings = settings;
        this.volumeRefs = volumeRefs;
        this.volumes = volumes;
    }

    private ContainerCodePackagePropertiesResponse() {
        this.commands = List.of();
        this.diagnostics = null;
        this.endpoints = List.of();
        this.entrypoint = null;
        this.environmentVariables = List.of();
        this.image = null;
        this.imageRegistryCredential = null;
        this.instanceView = null;
        this.labels = List.of();
        this.name = null;
        this.reliableCollectionsRefs = List.of();
        this.resources = null;
        this.settings = List.of();
        this.volumeRefs = List.of();
        this.volumes = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerCodePackagePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> commands;
        private @Nullable DiagnosticsRefResponse diagnostics;
        private @Nullable List<EndpointPropertiesResponse> endpoints;
        private @Nullable String entrypoint;
        private @Nullable List<EnvironmentVariableResponse> environmentVariables;
        private String image;
        private @Nullable ImageRegistryCredentialResponse imageRegistryCredential;
        private ContainerInstanceViewResponse instanceView;
        private @Nullable List<ContainerLabelResponse> labels;
        private String name;
        private @Nullable List<ReliableCollectionsRefResponse> reliableCollectionsRefs;
        private ResourceRequirementsResponse resources;
        private @Nullable List<SettingResponse> settings;
        private @Nullable List<VolumeReferenceResponse> volumeRefs;
        private @Nullable List<ApplicationScopedVolumeResponse> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerCodePackagePropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commands = defaults.commands;
    	      this.diagnostics = defaults.diagnostics;
    	      this.endpoints = defaults.endpoints;
    	      this.entrypoint = defaults.entrypoint;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.image = defaults.image;
    	      this.imageRegistryCredential = defaults.imageRegistryCredential;
    	      this.instanceView = defaults.instanceView;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.reliableCollectionsRefs = defaults.reliableCollectionsRefs;
    	      this.resources = defaults.resources;
    	      this.settings = defaults.settings;
    	      this.volumeRefs = defaults.volumeRefs;
    	      this.volumes = defaults.volumes;
        }

        public Builder commands(@Nullable List<String> commands) {
            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        public Builder diagnostics(@Nullable DiagnosticsRefResponse diagnostics) {
            this.diagnostics = diagnostics;
            return this;
        }
        public Builder endpoints(@Nullable List<EndpointPropertiesResponse> endpoints) {
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(EndpointPropertiesResponse... endpoints) {
            return endpoints(List.of(endpoints));
        }
        public Builder entrypoint(@Nullable String entrypoint) {
            this.entrypoint = entrypoint;
            return this;
        }
        public Builder environmentVariables(@Nullable List<EnvironmentVariableResponse> environmentVariables) {
            this.environmentVariables = environmentVariables;
            return this;
        }
        public Builder environmentVariables(EnvironmentVariableResponse... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        public Builder imageRegistryCredential(@Nullable ImageRegistryCredentialResponse imageRegistryCredential) {
            this.imageRegistryCredential = imageRegistryCredential;
            return this;
        }
        public Builder instanceView(ContainerInstanceViewResponse instanceView) {
            this.instanceView = Objects.requireNonNull(instanceView);
            return this;
        }
        public Builder labels(@Nullable List<ContainerLabelResponse> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(ContainerLabelResponse... labels) {
            return labels(List.of(labels));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder reliableCollectionsRefs(@Nullable List<ReliableCollectionsRefResponse> reliableCollectionsRefs) {
            this.reliableCollectionsRefs = reliableCollectionsRefs;
            return this;
        }
        public Builder reliableCollectionsRefs(ReliableCollectionsRefResponse... reliableCollectionsRefs) {
            return reliableCollectionsRefs(List.of(reliableCollectionsRefs));
        }
        public Builder resources(ResourceRequirementsResponse resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }
        public Builder settings(@Nullable List<SettingResponse> settings) {
            this.settings = settings;
            return this;
        }
        public Builder settings(SettingResponse... settings) {
            return settings(List.of(settings));
        }
        public Builder volumeRefs(@Nullable List<VolumeReferenceResponse> volumeRefs) {
            this.volumeRefs = volumeRefs;
            return this;
        }
        public Builder volumeRefs(VolumeReferenceResponse... volumeRefs) {
            return volumeRefs(List.of(volumeRefs));
        }
        public Builder volumes(@Nullable List<ApplicationScopedVolumeResponse> volumes) {
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(ApplicationScopedVolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }        public ContainerCodePackagePropertiesResponse build() {
            return new ContainerCodePackagePropertiesResponse(commands, diagnostics, endpoints, entrypoint, environmentVariables, image, imageRegistryCredential, instanceView, labels, name, reliableCollectionsRefs, resources, settings, volumeRefs, volumes);
        }
    }
}
