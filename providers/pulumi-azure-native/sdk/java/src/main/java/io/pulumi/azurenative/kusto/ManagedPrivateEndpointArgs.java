// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.kusto;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ManagedPrivateEndpointArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagedPrivateEndpointArgs Empty = new ManagedPrivateEndpointArgs();

    /**
     * The name of the Kusto cluster.
     * 
     */
    @Import(name="clusterName", required=true)
      private final Output<String> clusterName;

    public Output<String> getClusterName() {
        return this.clusterName;
    }

    /**
     * The groupId in which the managed private endpoint is created.
     * 
     */
    @Import(name="groupId", required=true)
      private final Output<String> groupId;

    public Output<String> getGroupId() {
        return this.groupId;
    }

    /**
     * The name of the managed private endpoint.
     * 
     */
    @Import(name="managedPrivateEndpointName")
      private final @Nullable Output<String> managedPrivateEndpointName;

    public Output<String> getManagedPrivateEndpointName() {
        return this.managedPrivateEndpointName == null ? Output.empty() : this.managedPrivateEndpointName;
    }

    /**
     * The ARM resource ID of the resource for which the managed private endpoint is created.
     * 
     */
    @Import(name="privateLinkResourceId", required=true)
      private final Output<String> privateLinkResourceId;

    public Output<String> getPrivateLinkResourceId() {
        return this.privateLinkResourceId;
    }

    /**
     * The region of the resource to which the managed private endpoint is created.
     * 
     */
    @Import(name="privateLinkResourceRegion")
      private final @Nullable Output<String> privateLinkResourceRegion;

    public Output<String> getPrivateLinkResourceRegion() {
        return this.privateLinkResourceRegion == null ? Output.empty() : this.privateLinkResourceRegion;
    }

    /**
     * The user request message.
     * 
     */
    @Import(name="requestMessage")
      private final @Nullable Output<String> requestMessage;

    public Output<String> getRequestMessage() {
        return this.requestMessage == null ? Output.empty() : this.requestMessage;
    }

    /**
     * The name of the resource group containing the Kusto cluster.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    public ManagedPrivateEndpointArgs(
        Output<String> clusterName,
        Output<String> groupId,
        @Nullable Output<String> managedPrivateEndpointName,
        Output<String> privateLinkResourceId,
        @Nullable Output<String> privateLinkResourceRegion,
        @Nullable Output<String> requestMessage,
        Output<String> resourceGroupName) {
        this.clusterName = Objects.requireNonNull(clusterName, "expected parameter 'clusterName' to be non-null");
        this.groupId = Objects.requireNonNull(groupId, "expected parameter 'groupId' to be non-null");
        this.managedPrivateEndpointName = managedPrivateEndpointName;
        this.privateLinkResourceId = Objects.requireNonNull(privateLinkResourceId, "expected parameter 'privateLinkResourceId' to be non-null");
        this.privateLinkResourceRegion = privateLinkResourceRegion;
        this.requestMessage = requestMessage;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private ManagedPrivateEndpointArgs() {
        this.clusterName = Output.empty();
        this.groupId = Output.empty();
        this.managedPrivateEndpointName = Output.empty();
        this.privateLinkResourceId = Output.empty();
        this.privateLinkResourceRegion = Output.empty();
        this.requestMessage = Output.empty();
        this.resourceGroupName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedPrivateEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> clusterName;
        private Output<String> groupId;
        private @Nullable Output<String> managedPrivateEndpointName;
        private Output<String> privateLinkResourceId;
        private @Nullable Output<String> privateLinkResourceRegion;
        private @Nullable Output<String> requestMessage;
        private Output<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedPrivateEndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterName = defaults.clusterName;
    	      this.groupId = defaults.groupId;
    	      this.managedPrivateEndpointName = defaults.managedPrivateEndpointName;
    	      this.privateLinkResourceId = defaults.privateLinkResourceId;
    	      this.privateLinkResourceRegion = defaults.privateLinkResourceRegion;
    	      this.requestMessage = defaults.requestMessage;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder clusterName(Output<String> clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }

        public Builder clusterName(String clusterName) {
            this.clusterName = Output.of(Objects.requireNonNull(clusterName));
            return this;
        }

        public Builder groupId(Output<String> groupId) {
            this.groupId = Objects.requireNonNull(groupId);
            return this;
        }

        public Builder groupId(String groupId) {
            this.groupId = Output.of(Objects.requireNonNull(groupId));
            return this;
        }

        public Builder managedPrivateEndpointName(@Nullable Output<String> managedPrivateEndpointName) {
            this.managedPrivateEndpointName = managedPrivateEndpointName;
            return this;
        }

        public Builder managedPrivateEndpointName(@Nullable String managedPrivateEndpointName) {
            this.managedPrivateEndpointName = Output.ofNullable(managedPrivateEndpointName);
            return this;
        }

        public Builder privateLinkResourceId(Output<String> privateLinkResourceId) {
            this.privateLinkResourceId = Objects.requireNonNull(privateLinkResourceId);
            return this;
        }

        public Builder privateLinkResourceId(String privateLinkResourceId) {
            this.privateLinkResourceId = Output.of(Objects.requireNonNull(privateLinkResourceId));
            return this;
        }

        public Builder privateLinkResourceRegion(@Nullable Output<String> privateLinkResourceRegion) {
            this.privateLinkResourceRegion = privateLinkResourceRegion;
            return this;
        }

        public Builder privateLinkResourceRegion(@Nullable String privateLinkResourceRegion) {
            this.privateLinkResourceRegion = Output.ofNullable(privateLinkResourceRegion);
            return this;
        }

        public Builder requestMessage(@Nullable Output<String> requestMessage) {
            this.requestMessage = requestMessage;
            return this;
        }

        public Builder requestMessage(@Nullable String requestMessage) {
            this.requestMessage = Output.ofNullable(requestMessage);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public ManagedPrivateEndpointArgs build() {
            return new ManagedPrivateEndpointArgs(clusterName, groupId, managedPrivateEndpointName, privateLinkResourceId, privateLinkResourceRegion, requestMessage, resourceGroupName);
        }
    }
}
