// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.notificationhubs;

import io.pulumi.azurenative.notificationhubs.enums.NamespaceType;
import io.pulumi.azurenative.notificationhubs.inputs.SkuArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NamespaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final NamespaceArgs Empty = new NamespaceArgs();

    /**
     * The time the namespace was created.
     * 
     */
    @Import(name="createdAt")
      private final @Nullable Output<String> createdAt;

    public Output<String> createdAt() {
        return this.createdAt == null ? Codegen.empty() : this.createdAt;
    }

    /**
     * Whether or not the namespace is set as Critical.
     * 
     */
    @Import(name="critical")
      private final @Nullable Output<Boolean> critical;

    public Output<Boolean> critical() {
        return this.critical == null ? Codegen.empty() : this.critical;
    }

    /**
     * Data center for the namespace
     * 
     */
    @Import(name="dataCenter")
      private final @Nullable Output<String> dataCenter;

    public Output<String> dataCenter() {
        return this.dataCenter == null ? Codegen.empty() : this.dataCenter;
    }

    /**
     * Whether or not the namespace is currently enabled.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled == null ? Codegen.empty() : this.enabled;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the namespace.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The namespace name.
     * 
     */
    @Import(name="namespaceName")
      private final @Nullable Output<String> namespaceName;

    public Output<String> namespaceName() {
        return this.namespaceName == null ? Codegen.empty() : this.namespaceName;
    }

    /**
     * The namespace type.
     * 
     */
    @Import(name="namespaceType")
      private final @Nullable Output<NamespaceType> namespaceType;

    public Output<NamespaceType> namespaceType() {
        return this.namespaceType == null ? Codegen.empty() : this.namespaceType;
    }

    /**
     * Provisioning state of the Namespace.
     * 
     */
    @Import(name="provisioningState")
      private final @Nullable Output<String> provisioningState;

    public Output<String> provisioningState() {
        return this.provisioningState == null ? Codegen.empty() : this.provisioningState;
    }

    /**
     * Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> region() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * ScaleUnit where the namespace gets created
     * 
     */
    @Import(name="scaleUnit")
      private final @Nullable Output<String> scaleUnit;

    public Output<String> scaleUnit() {
        return this.scaleUnit == null ? Codegen.empty() : this.scaleUnit;
    }

    /**
     * Endpoint you can use to perform NotificationHub operations.
     * 
     */
    @Import(name="serviceBusEndpoint")
      private final @Nullable Output<String> serviceBusEndpoint;

    public Output<String> serviceBusEndpoint() {
        return this.serviceBusEndpoint == null ? Codegen.empty() : this.serviceBusEndpoint;
    }

    /**
     * The sku of the created namespace
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<SkuArgs> sku;

    public Output<SkuArgs> sku() {
        return this.sku == null ? Codegen.empty() : this.sku;
    }

    /**
     * Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * The Id of the Azure subscription associated with the namespace.
     * 
     */
    @Import(name="subscriptionId")
      private final @Nullable Output<String> subscriptionId;

    public Output<String> subscriptionId() {
        return this.subscriptionId == null ? Codegen.empty() : this.subscriptionId;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The time the namespace was updated.
     * 
     */
    @Import(name="updatedAt")
      private final @Nullable Output<String> updatedAt;

    public Output<String> updatedAt() {
        return this.updatedAt == null ? Codegen.empty() : this.updatedAt;
    }

    public NamespaceArgs(
        @Nullable Output<String> createdAt,
        @Nullable Output<Boolean> critical,
        @Nullable Output<String> dataCenter,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> namespaceName,
        @Nullable Output<NamespaceType> namespaceType,
        @Nullable Output<String> provisioningState,
        @Nullable Output<String> region,
        Output<String> resourceGroupName,
        @Nullable Output<String> scaleUnit,
        @Nullable Output<String> serviceBusEndpoint,
        @Nullable Output<SkuArgs> sku,
        @Nullable Output<String> status,
        @Nullable Output<String> subscriptionId,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> updatedAt) {
        this.createdAt = createdAt;
        this.critical = critical;
        this.dataCenter = dataCenter;
        this.enabled = enabled;
        this.location = location;
        this.name = name;
        this.namespaceName = namespaceName;
        this.namespaceType = namespaceType;
        this.provisioningState = provisioningState;
        this.region = region;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scaleUnit = scaleUnit;
        this.serviceBusEndpoint = serviceBusEndpoint;
        this.sku = sku;
        this.status = status;
        this.subscriptionId = subscriptionId;
        this.tags = tags;
        this.updatedAt = updatedAt;
    }

    private NamespaceArgs() {
        this.createdAt = Codegen.empty();
        this.critical = Codegen.empty();
        this.dataCenter = Codegen.empty();
        this.enabled = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.namespaceName = Codegen.empty();
        this.namespaceType = Codegen.empty();
        this.provisioningState = Codegen.empty();
        this.region = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.scaleUnit = Codegen.empty();
        this.serviceBusEndpoint = Codegen.empty();
        this.sku = Codegen.empty();
        this.status = Codegen.empty();
        this.subscriptionId = Codegen.empty();
        this.tags = Codegen.empty();
        this.updatedAt = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NamespaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> createdAt;
        private @Nullable Output<Boolean> critical;
        private @Nullable Output<String> dataCenter;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> namespaceName;
        private @Nullable Output<NamespaceType> namespaceType;
        private @Nullable Output<String> provisioningState;
        private @Nullable Output<String> region;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> scaleUnit;
        private @Nullable Output<String> serviceBusEndpoint;
        private @Nullable Output<SkuArgs> sku;
        private @Nullable Output<String> status;
        private @Nullable Output<String> subscriptionId;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> updatedAt;

        public Builder() {
    	      // Empty
        }

        public Builder(NamespaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.critical = defaults.critical;
    	      this.dataCenter = defaults.dataCenter;
    	      this.enabled = defaults.enabled;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.namespaceName = defaults.namespaceName;
    	      this.namespaceType = defaults.namespaceType;
    	      this.provisioningState = defaults.provisioningState;
    	      this.region = defaults.region;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scaleUnit = defaults.scaleUnit;
    	      this.serviceBusEndpoint = defaults.serviceBusEndpoint;
    	      this.sku = defaults.sku;
    	      this.status = defaults.status;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tags = defaults.tags;
    	      this.updatedAt = defaults.updatedAt;
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        public Builder createdAt(@Nullable String createdAt) {
            this.createdAt = Codegen.ofNullable(createdAt);
            return this;
        }
        public Builder critical(@Nullable Output<Boolean> critical) {
            this.critical = critical;
            return this;
        }
        public Builder critical(@Nullable Boolean critical) {
            this.critical = Codegen.ofNullable(critical);
            return this;
        }
        public Builder dataCenter(@Nullable Output<String> dataCenter) {
            this.dataCenter = dataCenter;
            return this;
        }
        public Builder dataCenter(@Nullable String dataCenter) {
            this.dataCenter = Codegen.ofNullable(dataCenter);
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Codegen.ofNullable(enabled);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder namespaceName(@Nullable Output<String> namespaceName) {
            this.namespaceName = namespaceName;
            return this;
        }
        public Builder namespaceName(@Nullable String namespaceName) {
            this.namespaceName = Codegen.ofNullable(namespaceName);
            return this;
        }
        public Builder namespaceType(@Nullable Output<NamespaceType> namespaceType) {
            this.namespaceType = namespaceType;
            return this;
        }
        public Builder namespaceType(@Nullable NamespaceType namespaceType) {
            this.namespaceType = Codegen.ofNullable(namespaceType);
            return this;
        }
        public Builder provisioningState(@Nullable Output<String> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = Codegen.ofNullable(provisioningState);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder scaleUnit(@Nullable Output<String> scaleUnit) {
            this.scaleUnit = scaleUnit;
            return this;
        }
        public Builder scaleUnit(@Nullable String scaleUnit) {
            this.scaleUnit = Codegen.ofNullable(scaleUnit);
            return this;
        }
        public Builder serviceBusEndpoint(@Nullable Output<String> serviceBusEndpoint) {
            this.serviceBusEndpoint = serviceBusEndpoint;
            return this;
        }
        public Builder serviceBusEndpoint(@Nullable String serviceBusEndpoint) {
            this.serviceBusEndpoint = Codegen.ofNullable(serviceBusEndpoint);
            return this;
        }
        public Builder sku(@Nullable Output<SkuArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable SkuArgs sku) {
            this.sku = Codegen.ofNullable(sku);
            return this;
        }
        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }
        public Builder subscriptionId(@Nullable String subscriptionId) {
            this.subscriptionId = Codegen.ofNullable(subscriptionId);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }
        public Builder updatedAt(@Nullable String updatedAt) {
            this.updatedAt = Codegen.ofNullable(updatedAt);
            return this;
        }        public NamespaceArgs build() {
            return new NamespaceArgs(createdAt, critical, dataCenter, enabled, location, name, namespaceName, namespaceType, provisioningState, region, resourceGroupName, scaleUnit, serviceBusEndpoint, sku, status, subscriptionId, tags, updatedAt);
        }
    }
}
