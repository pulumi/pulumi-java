// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.inputs;

import io.pulumi.azurenative.datamigration.inputs.DatabaseFileInfoResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Database level output for the task that validates connection to SQL Server and also validates source server requirements
 * 
 */
public final class ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse extends io.pulumi.resources.InvokeArgs {

    public static final ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse Empty = new ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse();

    /**
     * SQL Server compatibility level of database
     * 
     */
    @Import(name="compatibilityLevel", required=true)
      private final String compatibilityLevel;

    public String getCompatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * The list of database files
     * 
     */
    @Import(name="databaseFiles", required=true)
      private final List<DatabaseFileInfoResponse> databaseFiles;

    public List<DatabaseFileInfoResponse> getDatabaseFiles() {
        return this.databaseFiles;
    }

    /**
     * State of the database
     * 
     */
    @Import(name="databaseState", required=true)
      private final String databaseState;

    public String getDatabaseState() {
        return this.databaseState;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
      private final String id;

    public String getId() {
        return this.id;
    }

    /**
     * Database name
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * Type of result - database level or task level
     * Expected value is 'DatabaseLevelOutput'.
     * 
     */
    @Import(name="resultType", required=true)
      private final String resultType;

    public String getResultType() {
        return this.resultType;
    }

    /**
     * Size of the file in megabytes
     * 
     */
    @Import(name="sizeMB", required=true)
      private final Double sizeMB;

    public Double getSizeMB() {
        return this.sizeMB;
    }

    public ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse(
        String compatibilityLevel,
        List<DatabaseFileInfoResponse> databaseFiles,
        String databaseState,
        String id,
        String name,
        String resultType,
        Double sizeMB) {
        this.compatibilityLevel = Objects.requireNonNull(compatibilityLevel, "expected parameter 'compatibilityLevel' to be non-null");
        this.databaseFiles = Objects.requireNonNull(databaseFiles, "expected parameter 'databaseFiles' to be non-null");
        this.databaseState = Objects.requireNonNull(databaseState, "expected parameter 'databaseState' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.resultType = Objects.requireNonNull(resultType, "expected parameter 'resultType' to be non-null");
        this.sizeMB = Objects.requireNonNull(sizeMB, "expected parameter 'sizeMB' to be non-null");
    }

    private ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse() {
        this.compatibilityLevel = null;
        this.databaseFiles = List.of();
        this.databaseState = null;
        this.id = null;
        this.name = null;
        this.resultType = null;
        this.sizeMB = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compatibilityLevel;
        private List<DatabaseFileInfoResponse> databaseFiles;
        private String databaseState;
        private String id;
        private String name;
        private String resultType;
        private Double sizeMB;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compatibilityLevel = defaults.compatibilityLevel;
    	      this.databaseFiles = defaults.databaseFiles;
    	      this.databaseState = defaults.databaseState;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.resultType = defaults.resultType;
    	      this.sizeMB = defaults.sizeMB;
        }

        public Builder compatibilityLevel(String compatibilityLevel) {
            this.compatibilityLevel = Objects.requireNonNull(compatibilityLevel);
            return this;
        }
        public Builder databaseFiles(List<DatabaseFileInfoResponse> databaseFiles) {
            this.databaseFiles = Objects.requireNonNull(databaseFiles);
            return this;
        }
        public Builder databaseFiles(DatabaseFileInfoResponse... databaseFiles) {
            return databaseFiles(List.of(databaseFiles));
        }
        public Builder databaseState(String databaseState) {
            this.databaseState = Objects.requireNonNull(databaseState);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder resultType(String resultType) {
            this.resultType = Objects.requireNonNull(resultType);
            return this;
        }
        public Builder sizeMB(Double sizeMB) {
            this.sizeMB = Objects.requireNonNull(sizeMB);
            return this;
        }        public ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse build() {
            return new ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse(compatibilityLevel, databaseFiles, databaseState, id, name, resultType, sizeMB);
        }
    }
}
