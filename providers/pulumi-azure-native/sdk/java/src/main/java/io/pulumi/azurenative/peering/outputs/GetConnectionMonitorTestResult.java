// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.peering.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetConnectionMonitorTestResult {
    private final @Nullable String destination;
    private final @Nullable Integer destinationPort;
    private final String id;
    private final Boolean isTestSuccessful;
    private final String name;
    private final List<String> path;
    private final String provisioningState;
    private final @Nullable String sourceAgent;
    private final @Nullable Integer testFrequencyInSec;
    private final String type;

    @OutputCustomType.Constructor({"destination","destinationPort","id","isTestSuccessful","name","path","provisioningState","sourceAgent","testFrequencyInSec","type"})
    private GetConnectionMonitorTestResult(
        @Nullable String destination,
        @Nullable Integer destinationPort,
        String id,
        Boolean isTestSuccessful,
        String name,
        List<String> path,
        String provisioningState,
        @Nullable String sourceAgent,
        @Nullable Integer testFrequencyInSec,
        String type) {
        this.destination = destination;
        this.destinationPort = destinationPort;
        this.id = Objects.requireNonNull(id);
        this.isTestSuccessful = Objects.requireNonNull(isTestSuccessful);
        this.name = Objects.requireNonNull(name);
        this.path = Objects.requireNonNull(path);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.sourceAgent = sourceAgent;
        this.testFrequencyInSec = testFrequencyInSec;
        this.type = Objects.requireNonNull(type);
    }

    public Optional<String> getDestination() {
        return Optional.ofNullable(this.destination);
    }
    public Optional<Integer> getDestinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }
    public String getId() {
        return this.id;
    }
    public Boolean getIsTestSuccessful() {
        return this.isTestSuccessful;
    }
    public String getName() {
        return this.name;
    }
    public List<String> getPath() {
        return this.path;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public Optional<String> getSourceAgent() {
        return Optional.ofNullable(this.sourceAgent);
    }
    public Optional<Integer> getTestFrequencyInSec() {
        return Optional.ofNullable(this.testFrequencyInSec);
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionMonitorTestResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String destination;
        private @Nullable Integer destinationPort;
        private String id;
        private Boolean isTestSuccessful;
        private String name;
        private List<String> path;
        private String provisioningState;
        private @Nullable String sourceAgent;
        private @Nullable Integer testFrequencyInSec;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetConnectionMonitorTestResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destination = defaults.destination;
    	      this.destinationPort = defaults.destinationPort;
    	      this.id = defaults.id;
    	      this.isTestSuccessful = defaults.isTestSuccessful;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sourceAgent = defaults.sourceAgent;
    	      this.testFrequencyInSec = defaults.testFrequencyInSec;
    	      this.type = defaults.type;
        }

        public Builder setDestination(@Nullable String destination) {
            this.destination = destination;
            return this;
        }

        public Builder setDestinationPort(@Nullable Integer destinationPort) {
            this.destinationPort = destinationPort;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIsTestSuccessful(Boolean isTestSuccessful) {
            this.isTestSuccessful = Objects.requireNonNull(isTestSuccessful);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPath(List<String> path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setSourceAgent(@Nullable String sourceAgent) {
            this.sourceAgent = sourceAgent;
            return this;
        }

        public Builder setTestFrequencyInSec(@Nullable Integer testFrequencyInSec) {
            this.testFrequencyInSec = testFrequencyInSec;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetConnectionMonitorTestResult build() {
            return new GetConnectionMonitorTestResult(destination, destinationPort, id, isTestSuccessful, name, path, provisioningState, sourceAgent, testFrequencyInSec, type);
        }
    }
}
