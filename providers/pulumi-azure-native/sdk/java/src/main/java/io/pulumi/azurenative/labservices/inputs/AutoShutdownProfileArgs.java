// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.labservices.inputs;

import io.pulumi.azurenative.labservices.enums.EnableState;
import io.pulumi.azurenative.labservices.enums.ShutdownOnIdleMode;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Profile for how to handle shutting down virtual machines.
 * 
 */
public final class AutoShutdownProfileArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutoShutdownProfileArgs Empty = new AutoShutdownProfileArgs();

    /**
     * The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
     * 
     */
    @InputImport(name="disconnectDelay")
      private final @Nullable Input<String> disconnectDelay;

    public Input<String> getDisconnectDelay() {
        return this.disconnectDelay == null ? Input.empty() : this.disconnectDelay;
    }

    /**
     * The amount of time a VM will idle before it is shutdown if this behavior is enabled.
     * 
     */
    @InputImport(name="idleDelay")
      private final @Nullable Input<String> idleDelay;

    public Input<String> getIdleDelay() {
        return this.idleDelay == null ? Input.empty() : this.idleDelay;
    }

    /**
     * The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
     * 
     */
    @InputImport(name="noConnectDelay")
      private final @Nullable Input<String> noConnectDelay;

    public Input<String> getNoConnectDelay() {
        return this.noConnectDelay == null ? Input.empty() : this.noConnectDelay;
    }

    /**
     * Whether shutdown on disconnect is enabled
     * 
     */
    @InputImport(name="shutdownOnDisconnect")
      private final @Nullable Input<EnableState> shutdownOnDisconnect;

    public Input<EnableState> getShutdownOnDisconnect() {
        return this.shutdownOnDisconnect == null ? Input.empty() : this.shutdownOnDisconnect;
    }

    /**
     * Whether a VM will get shutdown when it has idled for a period of time.
     * 
     */
    @InputImport(name="shutdownOnIdle")
      private final @Nullable Input<ShutdownOnIdleMode> shutdownOnIdle;

    public Input<ShutdownOnIdleMode> getShutdownOnIdle() {
        return this.shutdownOnIdle == null ? Input.empty() : this.shutdownOnIdle;
    }

    /**
     * Whether a VM will get shutdown when it hasn't been connected to after a period of time.
     * 
     */
    @InputImport(name="shutdownWhenNotConnected")
      private final @Nullable Input<EnableState> shutdownWhenNotConnected;

    public Input<EnableState> getShutdownWhenNotConnected() {
        return this.shutdownWhenNotConnected == null ? Input.empty() : this.shutdownWhenNotConnected;
    }

    public AutoShutdownProfileArgs(
        @Nullable Input<String> disconnectDelay,
        @Nullable Input<String> idleDelay,
        @Nullable Input<String> noConnectDelay,
        @Nullable Input<EnableState> shutdownOnDisconnect,
        @Nullable Input<ShutdownOnIdleMode> shutdownOnIdle,
        @Nullable Input<EnableState> shutdownWhenNotConnected) {
        this.disconnectDelay = disconnectDelay;
        this.idleDelay = idleDelay;
        this.noConnectDelay = noConnectDelay;
        this.shutdownOnDisconnect = shutdownOnDisconnect == null ? Input.ofNullable(io.pulumi.azurenative.labservices.enums.EnableState.Disabled) : shutdownOnDisconnect;
        this.shutdownOnIdle = shutdownOnIdle == null ? Input.ofNullable(io.pulumi.azurenative.labservices.enums.ShutdownOnIdleMode.None) : shutdownOnIdle;
        this.shutdownWhenNotConnected = shutdownWhenNotConnected == null ? Input.ofNullable(io.pulumi.azurenative.labservices.enums.EnableState.Disabled) : shutdownWhenNotConnected;
    }

    private AutoShutdownProfileArgs() {
        this.disconnectDelay = Input.empty();
        this.idleDelay = Input.empty();
        this.noConnectDelay = Input.empty();
        this.shutdownOnDisconnect = Input.empty();
        this.shutdownOnIdle = Input.empty();
        this.shutdownWhenNotConnected = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoShutdownProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> disconnectDelay;
        private @Nullable Input<String> idleDelay;
        private @Nullable Input<String> noConnectDelay;
        private @Nullable Input<EnableState> shutdownOnDisconnect;
        private @Nullable Input<ShutdownOnIdleMode> shutdownOnIdle;
        private @Nullable Input<EnableState> shutdownWhenNotConnected;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoShutdownProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disconnectDelay = defaults.disconnectDelay;
    	      this.idleDelay = defaults.idleDelay;
    	      this.noConnectDelay = defaults.noConnectDelay;
    	      this.shutdownOnDisconnect = defaults.shutdownOnDisconnect;
    	      this.shutdownOnIdle = defaults.shutdownOnIdle;
    	      this.shutdownWhenNotConnected = defaults.shutdownWhenNotConnected;
        }

        public Builder disconnectDelay(@Nullable Input<String> disconnectDelay) {
            this.disconnectDelay = disconnectDelay;
            return this;
        }

        public Builder disconnectDelay(@Nullable String disconnectDelay) {
            this.disconnectDelay = Input.ofNullable(disconnectDelay);
            return this;
        }

        public Builder idleDelay(@Nullable Input<String> idleDelay) {
            this.idleDelay = idleDelay;
            return this;
        }

        public Builder idleDelay(@Nullable String idleDelay) {
            this.idleDelay = Input.ofNullable(idleDelay);
            return this;
        }

        public Builder noConnectDelay(@Nullable Input<String> noConnectDelay) {
            this.noConnectDelay = noConnectDelay;
            return this;
        }

        public Builder noConnectDelay(@Nullable String noConnectDelay) {
            this.noConnectDelay = Input.ofNullable(noConnectDelay);
            return this;
        }

        public Builder shutdownOnDisconnect(@Nullable Input<EnableState> shutdownOnDisconnect) {
            this.shutdownOnDisconnect = shutdownOnDisconnect;
            return this;
        }

        public Builder shutdownOnDisconnect(@Nullable EnableState shutdownOnDisconnect) {
            this.shutdownOnDisconnect = Input.ofNullable(shutdownOnDisconnect);
            return this;
        }

        public Builder shutdownOnIdle(@Nullable Input<ShutdownOnIdleMode> shutdownOnIdle) {
            this.shutdownOnIdle = shutdownOnIdle;
            return this;
        }

        public Builder shutdownOnIdle(@Nullable ShutdownOnIdleMode shutdownOnIdle) {
            this.shutdownOnIdle = Input.ofNullable(shutdownOnIdle);
            return this;
        }

        public Builder shutdownWhenNotConnected(@Nullable Input<EnableState> shutdownWhenNotConnected) {
            this.shutdownWhenNotConnected = shutdownWhenNotConnected;
            return this;
        }

        public Builder shutdownWhenNotConnected(@Nullable EnableState shutdownWhenNotConnected) {
            this.shutdownWhenNotConnected = Input.ofNullable(shutdownWhenNotConnected);
            return this;
        }
        public AutoShutdownProfileArgs build() {
            return new AutoShutdownProfileArgs(disconnectDelay, idleDelay, noConnectDelay, shutdownOnDisconnect, shutdownOnIdle, shutdownWhenNotConnected);
        }
    }
}
