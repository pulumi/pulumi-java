// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.azurenative.apimanagement.enums.State;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApiIssueArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApiIssueArgs Empty = new ApiIssueArgs();

    /**
     * A resource identifier for the API the issue was created for.
     * 
     */
    @Import(name="apiId", required=true)
      private final Output<String> apiId;

    public Output<String> getApiId() {
        return this.apiId;
    }

    /**
     * Date and time when the issue was created.
     * 
     */
    @Import(name="createdDate")
      private final @Nullable Output<String> createdDate;

    public Output<String> getCreatedDate() {
        return this.createdDate == null ? Codegen.empty() : this.createdDate;
    }

    /**
     * Text describing the issue.
     * 
     */
    @Import(name="description", required=true)
      private final Output<String> description;

    public Output<String> getDescription() {
        return this.description;
    }

    /**
     * Issue identifier. Must be unique in the current API Management service instance.
     * 
     */
    @Import(name="issueId")
      private final @Nullable Output<String> issueId;

    public Output<String> getIssueId() {
        return this.issueId == null ? Codegen.empty() : this.issueId;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * Status of the issue.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<Either<String,State>> state;

    public Output<Either<String,State>> getState() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    /**
     * The issue title.
     * 
     */
    @Import(name="title", required=true)
      private final Output<String> title;

    public Output<String> getTitle() {
        return this.title;
    }

    /**
     * A resource identifier for the user created the issue.
     * 
     */
    @Import(name="userId", required=true)
      private final Output<String> userId;

    public Output<String> getUserId() {
        return this.userId;
    }

    public ApiIssueArgs(
        Output<String> apiId,
        @Nullable Output<String> createdDate,
        Output<String> description,
        @Nullable Output<String> issueId,
        Output<String> resourceGroupName,
        Output<String> serviceName,
        @Nullable Output<Either<String,State>> state,
        Output<String> title,
        Output<String> userId) {
        this.apiId = Objects.requireNonNull(apiId, "expected parameter 'apiId' to be non-null");
        this.createdDate = createdDate;
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.issueId = issueId;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.state = state;
        this.title = Objects.requireNonNull(title, "expected parameter 'title' to be non-null");
        this.userId = Objects.requireNonNull(userId, "expected parameter 'userId' to be non-null");
    }

    private ApiIssueArgs() {
        this.apiId = Codegen.empty();
        this.createdDate = Codegen.empty();
        this.description = Codegen.empty();
        this.issueId = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.serviceName = Codegen.empty();
        this.state = Codegen.empty();
        this.title = Codegen.empty();
        this.userId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApiIssueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> apiId;
        private @Nullable Output<String> createdDate;
        private Output<String> description;
        private @Nullable Output<String> issueId;
        private Output<String> resourceGroupName;
        private Output<String> serviceName;
        private @Nullable Output<Either<String,State>> state;
        private Output<String> title;
        private Output<String> userId;

        public Builder() {
    	      // Empty
        }

        public Builder(ApiIssueArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiId = defaults.apiId;
    	      this.createdDate = defaults.createdDate;
    	      this.description = defaults.description;
    	      this.issueId = defaults.issueId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceName = defaults.serviceName;
    	      this.state = defaults.state;
    	      this.title = defaults.title;
    	      this.userId = defaults.userId;
        }

        public Builder apiId(Output<String> apiId) {
            this.apiId = Objects.requireNonNull(apiId);
            return this;
        }
        public Builder apiId(String apiId) {
            this.apiId = Output.of(Objects.requireNonNull(apiId));
            return this;
        }
        public Builder createdDate(@Nullable Output<String> createdDate) {
            this.createdDate = createdDate;
            return this;
        }
        public Builder createdDate(@Nullable String createdDate) {
            this.createdDate = Codegen.ofNullable(createdDate);
            return this;
        }
        public Builder description(Output<String> description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder description(String description) {
            this.description = Output.of(Objects.requireNonNull(description));
            return this;
        }
        public Builder issueId(@Nullable Output<String> issueId) {
            this.issueId = issueId;
            return this;
        }
        public Builder issueId(@Nullable String issueId) {
            this.issueId = Codegen.ofNullable(issueId);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public Builder state(@Nullable Output<Either<String,State>> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable Either<String,State> state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }
        public Builder title(Output<String> title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }
        public Builder title(String title) {
            this.title = Output.of(Objects.requireNonNull(title));
            return this;
        }
        public Builder userId(Output<String> userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }
        public Builder userId(String userId) {
            this.userId = Output.of(Objects.requireNonNull(userId));
            return this;
        }        public ApiIssueArgs build() {
            return new ApiIssueArgs(apiId, createdDate, description, issueId, resourceGroupName, serviceName, state, title, userId);
        }
    }
}
