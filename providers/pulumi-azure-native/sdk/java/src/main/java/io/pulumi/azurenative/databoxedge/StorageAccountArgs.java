// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databoxedge;

import io.pulumi.azurenative.databoxedge.enums.DataPolicy;
import io.pulumi.azurenative.databoxedge.enums.StorageAccountStatus;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StorageAccountArgs extends io.pulumi.resources.ResourceArgs {

    public static final StorageAccountArgs Empty = new StorageAccountArgs();

    /**
     * Data policy of the storage Account.
     * 
     */
    @InputImport(name="dataPolicy", required=true)
    private final Input<Either<String,DataPolicy>> dataPolicy;

    public Input<Either<String,DataPolicy>> getDataPolicy() {
        return this.dataPolicy;
    }

    /**
     * Description for the storage Account.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The device name.
     * 
     */
    @InputImport(name="deviceName", required=true)
    private final Input<String> deviceName;

    public Input<String> getDeviceName() {
        return this.deviceName;
    }

    /**
     * The resource group name.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Storage Account Credential Id
     * 
     */
    @InputImport(name="storageAccountCredentialId")
    private final @Nullable Input<String> storageAccountCredentialId;

    public Input<String> getStorageAccountCredentialId() {
        return this.storageAccountCredentialId == null ? Input.empty() : this.storageAccountCredentialId;
    }

    /**
     * The StorageAccount name.
     * 
     */
    @InputImport(name="storageAccountName")
    private final @Nullable Input<String> storageAccountName;

    public Input<String> getStorageAccountName() {
        return this.storageAccountName == null ? Input.empty() : this.storageAccountName;
    }

    /**
     * Current status of the storage account
     * 
     */
    @InputImport(name="storageAccountStatus")
    private final @Nullable Input<Either<String,StorageAccountStatus>> storageAccountStatus;

    public Input<Either<String,StorageAccountStatus>> getStorageAccountStatus() {
        return this.storageAccountStatus == null ? Input.empty() : this.storageAccountStatus;
    }

    public StorageAccountArgs(
        Input<Either<String,DataPolicy>> dataPolicy,
        @Nullable Input<String> description,
        Input<String> deviceName,
        Input<String> resourceGroupName,
        @Nullable Input<String> storageAccountCredentialId,
        @Nullable Input<String> storageAccountName,
        @Nullable Input<Either<String,StorageAccountStatus>> storageAccountStatus) {
        this.dataPolicy = Objects.requireNonNull(dataPolicy, "expected parameter 'dataPolicy' to be non-null");
        this.description = description;
        this.deviceName = Objects.requireNonNull(deviceName, "expected parameter 'deviceName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.storageAccountCredentialId = storageAccountCredentialId;
        this.storageAccountName = storageAccountName;
        this.storageAccountStatus = storageAccountStatus;
    }

    private StorageAccountArgs() {
        this.dataPolicy = Input.empty();
        this.description = Input.empty();
        this.deviceName = Input.empty();
        this.resourceGroupName = Input.empty();
        this.storageAccountCredentialId = Input.empty();
        this.storageAccountName = Input.empty();
        this.storageAccountStatus = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StorageAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Either<String,DataPolicy>> dataPolicy;
        private @Nullable Input<String> description;
        private Input<String> deviceName;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> storageAccountCredentialId;
        private @Nullable Input<String> storageAccountName;
        private @Nullable Input<Either<String,StorageAccountStatus>> storageAccountStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(StorageAccountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataPolicy = defaults.dataPolicy;
    	      this.description = defaults.description;
    	      this.deviceName = defaults.deviceName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.storageAccountCredentialId = defaults.storageAccountCredentialId;
    	      this.storageAccountName = defaults.storageAccountName;
    	      this.storageAccountStatus = defaults.storageAccountStatus;
        }

        public Builder setDataPolicy(Input<Either<String,DataPolicy>> dataPolicy) {
            this.dataPolicy = Objects.requireNonNull(dataPolicy);
            return this;
        }

        public Builder setDataPolicy(Either<String,DataPolicy> dataPolicy) {
            this.dataPolicy = Input.of(Objects.requireNonNull(dataPolicy));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDeviceName(Input<String> deviceName) {
            this.deviceName = Objects.requireNonNull(deviceName);
            return this;
        }

        public Builder setDeviceName(String deviceName) {
            this.deviceName = Input.of(Objects.requireNonNull(deviceName));
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setStorageAccountCredentialId(@Nullable Input<String> storageAccountCredentialId) {
            this.storageAccountCredentialId = storageAccountCredentialId;
            return this;
        }

        public Builder setStorageAccountCredentialId(@Nullable String storageAccountCredentialId) {
            this.storageAccountCredentialId = Input.ofNullable(storageAccountCredentialId);
            return this;
        }

        public Builder setStorageAccountName(@Nullable Input<String> storageAccountName) {
            this.storageAccountName = storageAccountName;
            return this;
        }

        public Builder setStorageAccountName(@Nullable String storageAccountName) {
            this.storageAccountName = Input.ofNullable(storageAccountName);
            return this;
        }

        public Builder setStorageAccountStatus(@Nullable Input<Either<String,StorageAccountStatus>> storageAccountStatus) {
            this.storageAccountStatus = storageAccountStatus;
            return this;
        }

        public Builder setStorageAccountStatus(@Nullable Either<String,StorageAccountStatus> storageAccountStatus) {
            this.storageAccountStatus = Input.ofNullable(storageAccountStatus);
            return this;
        }

        public StorageAccountArgs build() {
            return new StorageAccountArgs(dataPolicy, description, deviceName, resourceGroupName, storageAccountCredentialId, storageAccountName, storageAccountStatus);
        }
    }
}
