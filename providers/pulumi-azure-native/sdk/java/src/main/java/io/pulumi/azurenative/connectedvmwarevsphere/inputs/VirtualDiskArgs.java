// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.connectedvmwarevsphere.inputs;

import io.pulumi.azurenative.connectedvmwarevsphere.enums.DiskMode;
import io.pulumi.azurenative.connectedvmwarevsphere.enums.DiskType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Virtual disk model
 * 
 */
public final class VirtualDiskArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualDiskArgs Empty = new VirtualDiskArgs();

    /**
     * Gets or sets the controller id.
     * 
     */
    @Import(name="controllerKey")
      private final @Nullable Output<Integer> controllerKey;

    public Output<Integer> getControllerKey() {
        return this.controllerKey == null ? Output.empty() : this.controllerKey;
    }

    /**
     * Gets or sets the device key value.
     * 
     */
    @Import(name="deviceKey")
      private final @Nullable Output<Integer> deviceKey;

    public Output<Integer> getDeviceKey() {
        return this.deviceKey == null ? Output.empty() : this.deviceKey;
    }

    /**
     * Gets or sets the device name.
     * 
     */
    @Import(name="deviceName")
      private final @Nullable Output<String> deviceName;

    public Output<String> getDeviceName() {
        return this.deviceName == null ? Output.empty() : this.deviceName;
    }

    /**
     * Gets or sets the disk mode.
     * 
     */
    @Import(name="diskMode")
      private final @Nullable Output<Either<String,DiskMode>> diskMode;

    public Output<Either<String,DiskMode>> getDiskMode() {
        return this.diskMode == null ? Output.empty() : this.diskMode;
    }

    /**
     * Gets or sets the disk total size.
     * 
     */
    @Import(name="diskSizeGB")
      private final @Nullable Output<Integer> diskSizeGB;

    public Output<Integer> getDiskSizeGB() {
        return this.diskSizeGB == null ? Output.empty() : this.diskSizeGB;
    }

    /**
     * Gets or sets the disk backing type.
     * 
     */
    @Import(name="diskType")
      private final @Nullable Output<Either<String,DiskType>> diskType;

    public Output<Either<String,DiskType>> getDiskType() {
        return this.diskType == null ? Output.empty() : this.diskType;
    }

    /**
     * Gets or sets the name of the virtual disk.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Gets or sets the unit number of the disk on the controller.
     * 
     */
    @Import(name="unitNumber")
      private final @Nullable Output<Integer> unitNumber;

    public Output<Integer> getUnitNumber() {
        return this.unitNumber == null ? Output.empty() : this.unitNumber;
    }

    public VirtualDiskArgs(
        @Nullable Output<Integer> controllerKey,
        @Nullable Output<Integer> deviceKey,
        @Nullable Output<String> deviceName,
        @Nullable Output<Either<String,DiskMode>> diskMode,
        @Nullable Output<Integer> diskSizeGB,
        @Nullable Output<Either<String,DiskType>> diskType,
        @Nullable Output<String> name,
        @Nullable Output<Integer> unitNumber) {
        this.controllerKey = controllerKey;
        this.deviceKey = deviceKey;
        this.deviceName = deviceName;
        this.diskMode = diskMode;
        this.diskSizeGB = diskSizeGB;
        this.diskType = diskType;
        this.name = name;
        this.unitNumber = unitNumber;
    }

    private VirtualDiskArgs() {
        this.controllerKey = Output.empty();
        this.deviceKey = Output.empty();
        this.deviceName = Output.empty();
        this.diskMode = Output.empty();
        this.diskSizeGB = Output.empty();
        this.diskType = Output.empty();
        this.name = Output.empty();
        this.unitNumber = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> controllerKey;
        private @Nullable Output<Integer> deviceKey;
        private @Nullable Output<String> deviceName;
        private @Nullable Output<Either<String,DiskMode>> diskMode;
        private @Nullable Output<Integer> diskSizeGB;
        private @Nullable Output<Either<String,DiskType>> diskType;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> unitNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualDiskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controllerKey = defaults.controllerKey;
    	      this.deviceKey = defaults.deviceKey;
    	      this.deviceName = defaults.deviceName;
    	      this.diskMode = defaults.diskMode;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.diskType = defaults.diskType;
    	      this.name = defaults.name;
    	      this.unitNumber = defaults.unitNumber;
        }

        public Builder controllerKey(@Nullable Output<Integer> controllerKey) {
            this.controllerKey = controllerKey;
            return this;
        }
        public Builder controllerKey(@Nullable Integer controllerKey) {
            this.controllerKey = Output.ofNullable(controllerKey);
            return this;
        }
        public Builder deviceKey(@Nullable Output<Integer> deviceKey) {
            this.deviceKey = deviceKey;
            return this;
        }
        public Builder deviceKey(@Nullable Integer deviceKey) {
            this.deviceKey = Output.ofNullable(deviceKey);
            return this;
        }
        public Builder deviceName(@Nullable Output<String> deviceName) {
            this.deviceName = deviceName;
            return this;
        }
        public Builder deviceName(@Nullable String deviceName) {
            this.deviceName = Output.ofNullable(deviceName);
            return this;
        }
        public Builder diskMode(@Nullable Output<Either<String,DiskMode>> diskMode) {
            this.diskMode = diskMode;
            return this;
        }
        public Builder diskMode(@Nullable Either<String,DiskMode> diskMode) {
            this.diskMode = Output.ofNullable(diskMode);
            return this;
        }
        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = Output.ofNullable(diskSizeGB);
            return this;
        }
        public Builder diskType(@Nullable Output<Either<String,DiskType>> diskType) {
            this.diskType = diskType;
            return this;
        }
        public Builder diskType(@Nullable Either<String,DiskType> diskType) {
            this.diskType = Output.ofNullable(diskType);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder unitNumber(@Nullable Output<Integer> unitNumber) {
            this.unitNumber = unitNumber;
            return this;
        }
        public Builder unitNumber(@Nullable Integer unitNumber) {
            this.unitNumber = Output.ofNullable(unitNumber);
            return this;
        }        public VirtualDiskArgs build() {
            return new VirtualDiskArgs(controllerKey, deviceKey, deviceName, diskMode, diskSizeGB, diskType, name, unitNumber);
        }
    }
}
