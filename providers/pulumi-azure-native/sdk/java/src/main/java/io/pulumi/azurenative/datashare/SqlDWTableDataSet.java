// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datashare;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.datashare.outputs.SystemDataResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A SQL DW table data set.
API Version: 2020-09-01.

{{% examples %}}
## Example Usage
{{% example %}}
### DataSets_Create
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var sqlDWTableDataSet = new AzureNative.DataShare.SqlDWTableDataSet("sqlDWTableDataSet", new AzureNative.DataShare.SqlDWTableDataSetArgs
        {
            AccountName = "Account1",
            DataSetName = "Dataset1",
            ResourceGroupName = "SampleResourceGroup",
            ShareName = "Share1",
        });
    }

}

```

```go
package main

import (
	datashare "github.com/pulumi/pulumi-azure-native/sdk/go/azure/datashare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datashare.NewSqlDWTableDataSet(ctx, "sqlDWTableDataSet", &datashare.SqlDWTableDataSetArgs{
			AccountName:       pulumi.String("Account1"),
			DataSetName:       pulumi.String("Dataset1"),
			ResourceGroupName: pulumi.String("SampleResourceGroup"),
			ShareName:         pulumi.String("Share1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const sqlDWTableDataSet = new azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet", {
    accountName: "Account1",
    dataSetName: "Dataset1",
    resourceGroupName: "SampleResourceGroup",
    shareName: "Share1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

sql_dw_table_data_set = azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet",
    account_name="Account1",
    data_set_name="Dataset1",
    resource_group_name="SampleResourceGroup",
    share_name="Share1")

```

{{% /example %}}
{{% example %}}
### DataSets_KustoCluster_Create
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var sqlDWTableDataSet = new AzureNative.DataShare.SqlDWTableDataSet("sqlDWTableDataSet", new AzureNative.DataShare.SqlDWTableDataSetArgs
        {
            AccountName = "Account1",
            DataSetName = "Dataset1",
            ResourceGroupName = "SampleResourceGroup",
            ShareName = "Share1",
        });
    }

}

```

```go
package main

import (
	datashare "github.com/pulumi/pulumi-azure-native/sdk/go/azure/datashare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datashare.NewSqlDWTableDataSet(ctx, "sqlDWTableDataSet", &datashare.SqlDWTableDataSetArgs{
			AccountName:       pulumi.String("Account1"),
			DataSetName:       pulumi.String("Dataset1"),
			ResourceGroupName: pulumi.String("SampleResourceGroup"),
			ShareName:         pulumi.String("Share1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const sqlDWTableDataSet = new azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet", {
    accountName: "Account1",
    dataSetName: "Dataset1",
    resourceGroupName: "SampleResourceGroup",
    shareName: "Share1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

sql_dw_table_data_set = azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet",
    account_name="Account1",
    data_set_name="Dataset1",
    resource_group_name="SampleResourceGroup",
    share_name="Share1")

```

{{% /example %}}
{{% example %}}
### DataSets_KustoDatabase_Create
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var sqlDWTableDataSet = new AzureNative.DataShare.SqlDWTableDataSet("sqlDWTableDataSet", new AzureNative.DataShare.SqlDWTableDataSetArgs
        {
            AccountName = "Account1",
            DataSetName = "Dataset1",
            ResourceGroupName = "SampleResourceGroup",
            ShareName = "Share1",
        });
    }

}

```

```go
package main

import (
	datashare "github.com/pulumi/pulumi-azure-native/sdk/go/azure/datashare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datashare.NewSqlDWTableDataSet(ctx, "sqlDWTableDataSet", &datashare.SqlDWTableDataSetArgs{
			AccountName:       pulumi.String("Account1"),
			DataSetName:       pulumi.String("Dataset1"),
			ResourceGroupName: pulumi.String("SampleResourceGroup"),
			ShareName:         pulumi.String("Share1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const sqlDWTableDataSet = new azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet", {
    accountName: "Account1",
    dataSetName: "Dataset1",
    resourceGroupName: "SampleResourceGroup",
    shareName: "Share1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

sql_dw_table_data_set = azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet",
    account_name="Account1",
    data_set_name="Dataset1",
    resource_group_name="SampleResourceGroup",
    share_name="Share1")

```

{{% /example %}}
{{% example %}}
### DataSets_SqlDBTable_Create
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var sqlDWTableDataSet = new AzureNative.DataShare.SqlDWTableDataSet("sqlDWTableDataSet", new AzureNative.DataShare.SqlDWTableDataSetArgs
        {
            AccountName = "Account1",
            DataSetName = "Dataset1",
            ResourceGroupName = "SampleResourceGroup",
            ShareName = "Share1",
        });
    }

}

```

```go
package main

import (
	datashare "github.com/pulumi/pulumi-azure-native/sdk/go/azure/datashare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datashare.NewSqlDWTableDataSet(ctx, "sqlDWTableDataSet", &datashare.SqlDWTableDataSetArgs{
			AccountName:       pulumi.String("Account1"),
			DataSetName:       pulumi.String("Dataset1"),
			ResourceGroupName: pulumi.String("SampleResourceGroup"),
			ShareName:         pulumi.String("Share1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const sqlDWTableDataSet = new azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet", {
    accountName: "Account1",
    dataSetName: "Dataset1",
    resourceGroupName: "SampleResourceGroup",
    shareName: "Share1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

sql_dw_table_data_set = azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet",
    account_name="Account1",
    data_set_name="Dataset1",
    resource_group_name="SampleResourceGroup",
    share_name="Share1")

```

{{% /example %}}
{{% example %}}
### DataSets_SqlDWTable_Create
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var sqlDWTableDataSet = new AzureNative.DataShare.SqlDWTableDataSet("sqlDWTableDataSet", new AzureNative.DataShare.SqlDWTableDataSetArgs
        {
            AccountName = "Account1",
            DataSetName = "Dataset1",
            DataWarehouseName = "DataWarehouse1",
            Kind = "SqlDWTable",
            ResourceGroupName = "SampleResourceGroup",
            SchemaName = "dbo",
            ShareName = "Share1",
            SqlServerResourceId = "/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1",
            TableName = "Table1",
        });
    }

}

```

```go
package main

import (
	datashare "github.com/pulumi/pulumi-azure-native/sdk/go/azure/datashare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datashare.NewSqlDWTableDataSet(ctx, "sqlDWTableDataSet", &datashare.SqlDWTableDataSetArgs{
			AccountName:         pulumi.String("Account1"),
			DataSetName:         pulumi.String("Dataset1"),
			DataWarehouseName:   pulumi.String("DataWarehouse1"),
			Kind:                pulumi.String("SqlDWTable"),
			ResourceGroupName:   pulumi.String("SampleResourceGroup"),
			SchemaName:          pulumi.String("dbo"),
			ShareName:           pulumi.String("Share1"),
			SqlServerResourceId: pulumi.String("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
			TableName:           pulumi.String("Table1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const sqlDWTableDataSet = new azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet", {
    accountName: "Account1",
    dataSetName: "Dataset1",
    dataWarehouseName: "DataWarehouse1",
    kind: "SqlDWTable",
    resourceGroupName: "SampleResourceGroup",
    schemaName: "dbo",
    shareName: "Share1",
    sqlServerResourceId: "/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1",
    tableName: "Table1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

sql_dw_table_data_set = azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet",
    account_name="Account1",
    data_set_name="Dataset1",
    data_warehouse_name="DataWarehouse1",
    kind="SqlDWTable",
    resource_group_name="SampleResourceGroup",
    schema_name="dbo",
    share_name="Share1",
    sql_server_resource_id="/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1",
    table_name="Table1")

```

{{% /example %}}
{{% example %}}
### DataSets_SynapseWorkspaceSqlPoolTable_Create
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var sqlDWTableDataSet = new AzureNative.DataShare.SqlDWTableDataSet("sqlDWTableDataSet", new AzureNative.DataShare.SqlDWTableDataSetArgs
        {
            AccountName = "sourceAccount",
            DataSetName = "dataset1",
            ResourceGroupName = "SampleResourceGroup",
            ShareName = "share1",
        });
    }

}

```

```go
package main

import (
	datashare "github.com/pulumi/pulumi-azure-native/sdk/go/azure/datashare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datashare.NewSqlDWTableDataSet(ctx, "sqlDWTableDataSet", &datashare.SqlDWTableDataSetArgs{
			AccountName:       pulumi.String("sourceAccount"),
			DataSetName:       pulumi.String("dataset1"),
			ResourceGroupName: pulumi.String("SampleResourceGroup"),
			ShareName:         pulumi.String("share1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const sqlDWTableDataSet = new azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet", {
    accountName: "sourceAccount",
    dataSetName: "dataset1",
    resourceGroupName: "SampleResourceGroup",
    shareName: "share1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

sql_dw_table_data_set = azure_native.datashare.SqlDWTableDataSet("sqlDWTableDataSet",
    account_name="sourceAccount",
    data_set_name="dataset1",
    resource_group_name="SampleResourceGroup",
    share_name="share1")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:datashare:SqlDWTableDataSet dataset1 /subscriptions/0f3dcfc3-18f8-4099-b381-8353e19d43a7/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/sourceAccount/shares/share1/dataSets/dataset1 
```

 */
@ResourceType(type="azure-native:datashare:SqlDWTableDataSet")
public class SqlDWTableDataSet extends io.pulumi.resources.CustomResource {
    /**
     * Unique id for identifying a data set resource
     */
    @OutputExport(name="dataSetId", type=String.class, parameters={})
    private Output<String> dataSetId;

    /**
     * @return Unique id for identifying a data set resource
     */
    public Output<String> getDataSetId() {
        return this.dataSetId;
    }
    /**
     * DataWarehouse name of the source data set
     */
    @OutputExport(name="dataWarehouseName", type=String.class, parameters={})
    private Output<String> dataWarehouseName;

    /**
     * @return DataWarehouse name of the source data set
     */
    public Output<String> getDataWarehouseName() {
        return this.dataWarehouseName;
    }
    /**
     * Kind of data set.
Expected value is 'SqlDWTable'.
     */
    @OutputExport(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return Kind of data set.
Expected value is 'SqlDWTable'.
     */
    public Output<String> getKind() {
        return this.kind;
    }
    /**
     * Name of the azure resource
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the azure resource
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Schema of the table. Default value is dbo.
     */
    @OutputExport(name="schemaName", type=String.class, parameters={})
    private Output<String> schemaName;

    /**
     * @return Schema of the table. Default value is dbo.
     */
    public Output<String> getSchemaName() {
        return this.schemaName;
    }
    /**
     * Resource id of SQL server
     */
    @OutputExport(name="sqlServerResourceId", type=String.class, parameters={})
    private Output<String> sqlServerResourceId;

    /**
     * @return Resource id of SQL server
     */
    public Output<String> getSqlServerResourceId() {
        return this.sqlServerResourceId;
    }
    /**
     * System Data of the Azure resource.
     */
    @OutputExport(name="systemData", type=SystemDataResponse.class, parameters={})
    private Output<SystemDataResponse> systemData;

    /**
     * @return System Data of the Azure resource.
     */
    public Output<SystemDataResponse> getSystemData() {
        return this.systemData;
    }
    /**
     * SQL DW table name.
     */
    @OutputExport(name="tableName", type=String.class, parameters={})
    private Output<String> tableName;

    /**
     * @return SQL DW table name.
     */
    public Output<String> getTableName() {
        return this.tableName;
    }
    /**
     * Type of the azure resource
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Type of the azure resource
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SqlDWTableDataSet(String name, SqlDWTableDataSetArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:datashare:SqlDWTableDataSet", name, makeArgs(args), makeResourceOptions(options, Input.empty()));
    }

    private SqlDWTableDataSet(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:datashare:SqlDWTableDataSet", name, null, makeResourceOptions(options, id));
    }

    private static SqlDWTableDataSetArgs makeArgs(SqlDWTableDataSetArgs args) {
        var builder = args == null ? SqlDWTableDataSetArgs.builder() : SqlDWTableDataSetArgs.builder(args);
        return builder
            .setKind("SqlDWTable")
            .build();
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:datashare/v20181101preview:SqlDWTableDataSet").build()),
                Input.of(Alias.builder().setType("azure-native:datashare/v20191101:SqlDWTableDataSet").build()),
                Input.of(Alias.builder().setType("azure-native:datashare/v20200901:SqlDWTableDataSet").build()),
                Input.of(Alias.builder().setType("azure-native:datashare/v20201001preview:SqlDWTableDataSet").build()),
                Input.of(Alias.builder().setType("azure-native:datashare/v20210801:SqlDWTableDataSet").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SqlDWTableDataSet get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new SqlDWTableDataSet(name, id, options);
    }
}
