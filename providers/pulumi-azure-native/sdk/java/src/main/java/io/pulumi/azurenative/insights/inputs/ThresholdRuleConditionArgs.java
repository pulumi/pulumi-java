// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.azurenative.insights.enums.ConditionOperator;
import io.pulumi.azurenative.insights.enums.TimeAggregationOperator;
import io.pulumi.azurenative.insights.inputs.RuleManagementEventDataSourceArgs;
import io.pulumi.azurenative.insights.inputs.RuleMetricDataSourceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A rule condition based on a metric crossing a threshold.
 * 
 */
public final class ThresholdRuleConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ThresholdRuleConditionArgs Empty = new ThresholdRuleConditionArgs();

    /**
     * the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
     * 
     */
    @InputImport(name="dataSource")
      private final @Nullable Input<Either<RuleManagementEventDataSourceArgs,RuleMetricDataSourceArgs>> dataSource;

    public Input<Either<RuleManagementEventDataSourceArgs,RuleMetricDataSourceArgs>> getDataSource() {
        return this.dataSource == null ? Input.empty() : this.dataSource;
    }

    /**
     * specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
     * Expected value is 'Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition'.
     * 
     */
    @InputImport(name="odataType", required=true)
      private final Input<String> odataType;

    public Input<String> getOdataType() {
        return this.odataType;
    }

    /**
     * the operator used to compare the data and the threshold.
     * 
     */
    @InputImport(name="operator", required=true)
      private final Input<ConditionOperator> operator;

    public Input<ConditionOperator> getOperator() {
        return this.operator;
    }

    /**
     * the threshold value that activates the alert.
     * 
     */
    @InputImport(name="threshold", required=true)
      private final Input<Double> threshold;

    public Input<Double> getThreshold() {
        return this.threshold;
    }

    /**
     * the time aggregation operator. How the data that are collected should be combined over time. The default value is the PrimaryAggregationType of the Metric.
     * 
     */
    @InputImport(name="timeAggregation")
      private final @Nullable Input<TimeAggregationOperator> timeAggregation;

    public Input<TimeAggregationOperator> getTimeAggregation() {
        return this.timeAggregation == null ? Input.empty() : this.timeAggregation;
    }

    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
     * 
     */
    @InputImport(name="windowSize")
      private final @Nullable Input<String> windowSize;

    public Input<String> getWindowSize() {
        return this.windowSize == null ? Input.empty() : this.windowSize;
    }

    public ThresholdRuleConditionArgs(
        @Nullable Input<Either<RuleManagementEventDataSourceArgs,RuleMetricDataSourceArgs>> dataSource,
        Input<String> odataType,
        Input<ConditionOperator> operator,
        Input<Double> threshold,
        @Nullable Input<TimeAggregationOperator> timeAggregation,
        @Nullable Input<String> windowSize) {
        this.dataSource = dataSource;
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.operator = Objects.requireNonNull(operator, "expected parameter 'operator' to be non-null");
        this.threshold = Objects.requireNonNull(threshold, "expected parameter 'threshold' to be non-null");
        this.timeAggregation = timeAggregation;
        this.windowSize = windowSize;
    }

    private ThresholdRuleConditionArgs() {
        this.dataSource = Input.empty();
        this.odataType = Input.empty();
        this.operator = Input.empty();
        this.threshold = Input.empty();
        this.timeAggregation = Input.empty();
        this.windowSize = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThresholdRuleConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<RuleManagementEventDataSourceArgs,RuleMetricDataSourceArgs>> dataSource;
        private Input<String> odataType;
        private Input<ConditionOperator> operator;
        private Input<Double> threshold;
        private @Nullable Input<TimeAggregationOperator> timeAggregation;
        private @Nullable Input<String> windowSize;

        public Builder() {
    	      // Empty
        }

        public Builder(ThresholdRuleConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSource = defaults.dataSource;
    	      this.odataType = defaults.odataType;
    	      this.operator = defaults.operator;
    	      this.threshold = defaults.threshold;
    	      this.timeAggregation = defaults.timeAggregation;
    	      this.windowSize = defaults.windowSize;
        }

        public Builder dataSource(@Nullable Input<Either<RuleManagementEventDataSourceArgs,RuleMetricDataSourceArgs>> dataSource) {
            this.dataSource = dataSource;
            return this;
        }

        public Builder dataSource(@Nullable Either<RuleManagementEventDataSourceArgs,RuleMetricDataSourceArgs> dataSource) {
            this.dataSource = Input.ofNullable(dataSource);
            return this;
        }

        public Builder odataType(Input<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }

        public Builder odataType(String odataType) {
            this.odataType = Input.of(Objects.requireNonNull(odataType));
            return this;
        }

        public Builder operator(Input<ConditionOperator> operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }

        public Builder operator(ConditionOperator operator) {
            this.operator = Input.of(Objects.requireNonNull(operator));
            return this;
        }

        public Builder threshold(Input<Double> threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }

        public Builder threshold(Double threshold) {
            this.threshold = Input.of(Objects.requireNonNull(threshold));
            return this;
        }

        public Builder timeAggregation(@Nullable Input<TimeAggregationOperator> timeAggregation) {
            this.timeAggregation = timeAggregation;
            return this;
        }

        public Builder timeAggregation(@Nullable TimeAggregationOperator timeAggregation) {
            this.timeAggregation = Input.ofNullable(timeAggregation);
            return this;
        }

        public Builder windowSize(@Nullable Input<String> windowSize) {
            this.windowSize = windowSize;
            return this;
        }

        public Builder windowSize(@Nullable String windowSize) {
            this.windowSize = Input.ofNullable(windowSize);
            return this;
        }
        public ThresholdRuleConditionArgs build() {
            return new ThresholdRuleConditionArgs(dataSource, odataType, operator, threshold, timeAggregation, windowSize);
        }
    }
}
