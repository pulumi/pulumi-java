// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web;

import io.pulumi.azurenative.web.enums.StagingEnvironmentPolicy;
import io.pulumi.azurenative.web.inputs.ManagedServiceIdentityArgs;
import io.pulumi.azurenative.web.inputs.SkuDescriptionArgs;
import io.pulumi.azurenative.web.inputs.StaticSiteBuildPropertiesArgs;
import io.pulumi.azurenative.web.inputs.StaticSiteTemplateOptionsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StaticSiteArgs extends io.pulumi.resources.ResourceArgs {

    public static final StaticSiteArgs Empty = new StaticSiteArgs();

    /**
     * <code>false</code> if config file is locked for this static web app; otherwise, <code>true</code>.
     * 
     */
    @Import(name="allowConfigFileUpdates")
      private final @Nullable Output<Boolean> allowConfigFileUpdates;

    public Output<Boolean> getAllowConfigFileUpdates() {
        return this.allowConfigFileUpdates == null ? Output.empty() : this.allowConfigFileUpdates;
    }

    /**
     * The target branch in the repository.
     * 
     */
    @Import(name="branch")
      private final @Nullable Output<String> branch;

    public Output<String> getBranch() {
        return this.branch == null ? Output.empty() : this.branch;
    }

    /**
     * Build properties to configure on the repository.
     * 
     */
    @Import(name="buildProperties")
      private final @Nullable Output<StaticSiteBuildPropertiesArgs> buildProperties;

    public Output<StaticSiteBuildPropertiesArgs> getBuildProperties() {
        return this.buildProperties == null ? Output.empty() : this.buildProperties;
    }

    /**
     * Managed service identity.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<ManagedServiceIdentityArgs> identity;

    public Output<ManagedServiceIdentityArgs> getIdentity() {
        return this.identity == null ? Output.empty() : this.identity;
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * Resource Location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Name of the static site to create or update.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
     * 
     */
    @Import(name="repositoryToken")
      private final @Nullable Output<String> repositoryToken;

    public Output<String> getRepositoryToken() {
        return this.repositoryToken == null ? Output.empty() : this.repositoryToken;
    }

    /**
     * URL for the repository of the static site.
     * 
     */
    @Import(name="repositoryUrl")
      private final @Nullable Output<String> repositoryUrl;

    public Output<String> getRepositoryUrl() {
        return this.repositoryUrl == null ? Output.empty() : this.repositoryUrl;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Description of a SKU for a scalable resource.
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<SkuDescriptionArgs> sku;

    public Output<SkuDescriptionArgs> getSku() {
        return this.sku == null ? Output.empty() : this.sku;
    }

    /**
     * State indicating whether staging environments are allowed or not allowed for a static web app.
     * 
     */
    @Import(name="stagingEnvironmentPolicy")
      private final @Nullable Output<StagingEnvironmentPolicy> stagingEnvironmentPolicy;

    public Output<StagingEnvironmentPolicy> getStagingEnvironmentPolicy() {
        return this.stagingEnvironmentPolicy == null ? Output.empty() : this.stagingEnvironmentPolicy;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Template options for generating a new repository.
     * 
     */
    @Import(name="templateProperties")
      private final @Nullable Output<StaticSiteTemplateOptionsArgs> templateProperties;

    public Output<StaticSiteTemplateOptionsArgs> getTemplateProperties() {
        return this.templateProperties == null ? Output.empty() : this.templateProperties;
    }

    public StaticSiteArgs(
        @Nullable Output<Boolean> allowConfigFileUpdates,
        @Nullable Output<String> branch,
        @Nullable Output<StaticSiteBuildPropertiesArgs> buildProperties,
        @Nullable Output<ManagedServiceIdentityArgs> identity,
        @Nullable Output<String> kind,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> repositoryToken,
        @Nullable Output<String> repositoryUrl,
        Output<String> resourceGroupName,
        @Nullable Output<SkuDescriptionArgs> sku,
        @Nullable Output<StagingEnvironmentPolicy> stagingEnvironmentPolicy,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<StaticSiteTemplateOptionsArgs> templateProperties) {
        this.allowConfigFileUpdates = allowConfigFileUpdates;
        this.branch = branch;
        this.buildProperties = buildProperties;
        this.identity = identity;
        this.kind = kind;
        this.location = location;
        this.name = name;
        this.repositoryToken = repositoryToken;
        this.repositoryUrl = repositoryUrl;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.stagingEnvironmentPolicy = stagingEnvironmentPolicy;
        this.tags = tags;
        this.templateProperties = templateProperties;
    }

    private StaticSiteArgs() {
        this.allowConfigFileUpdates = Output.empty();
        this.branch = Output.empty();
        this.buildProperties = Output.empty();
        this.identity = Output.empty();
        this.kind = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.repositoryToken = Output.empty();
        this.repositoryUrl = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sku = Output.empty();
        this.stagingEnvironmentPolicy = Output.empty();
        this.tags = Output.empty();
        this.templateProperties = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StaticSiteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowConfigFileUpdates;
        private @Nullable Output<String> branch;
        private @Nullable Output<StaticSiteBuildPropertiesArgs> buildProperties;
        private @Nullable Output<ManagedServiceIdentityArgs> identity;
        private @Nullable Output<String> kind;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> repositoryToken;
        private @Nullable Output<String> repositoryUrl;
        private Output<String> resourceGroupName;
        private @Nullable Output<SkuDescriptionArgs> sku;
        private @Nullable Output<StagingEnvironmentPolicy> stagingEnvironmentPolicy;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<StaticSiteTemplateOptionsArgs> templateProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(StaticSiteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowConfigFileUpdates = defaults.allowConfigFileUpdates;
    	      this.branch = defaults.branch;
    	      this.buildProperties = defaults.buildProperties;
    	      this.identity = defaults.identity;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.repositoryToken = defaults.repositoryToken;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.stagingEnvironmentPolicy = defaults.stagingEnvironmentPolicy;
    	      this.tags = defaults.tags;
    	      this.templateProperties = defaults.templateProperties;
        }

        public Builder allowConfigFileUpdates(@Nullable Output<Boolean> allowConfigFileUpdates) {
            this.allowConfigFileUpdates = allowConfigFileUpdates;
            return this;
        }
        public Builder allowConfigFileUpdates(@Nullable Boolean allowConfigFileUpdates) {
            this.allowConfigFileUpdates = Output.ofNullable(allowConfigFileUpdates);
            return this;
        }
        public Builder branch(@Nullable Output<String> branch) {
            this.branch = branch;
            return this;
        }
        public Builder branch(@Nullable String branch) {
            this.branch = Output.ofNullable(branch);
            return this;
        }
        public Builder buildProperties(@Nullable Output<StaticSiteBuildPropertiesArgs> buildProperties) {
            this.buildProperties = buildProperties;
            return this;
        }
        public Builder buildProperties(@Nullable StaticSiteBuildPropertiesArgs buildProperties) {
            this.buildProperties = Output.ofNullable(buildProperties);
            return this;
        }
        public Builder identity(@Nullable Output<ManagedServiceIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable ManagedServiceIdentityArgs identity) {
            this.identity = Output.ofNullable(identity);
            return this;
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder repositoryToken(@Nullable Output<String> repositoryToken) {
            this.repositoryToken = repositoryToken;
            return this;
        }
        public Builder repositoryToken(@Nullable String repositoryToken) {
            this.repositoryToken = Output.ofNullable(repositoryToken);
            return this;
        }
        public Builder repositoryUrl(@Nullable Output<String> repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }
        public Builder repositoryUrl(@Nullable String repositoryUrl) {
            this.repositoryUrl = Output.ofNullable(repositoryUrl);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sku(@Nullable Output<SkuDescriptionArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable SkuDescriptionArgs sku) {
            this.sku = Output.ofNullable(sku);
            return this;
        }
        public Builder stagingEnvironmentPolicy(@Nullable Output<StagingEnvironmentPolicy> stagingEnvironmentPolicy) {
            this.stagingEnvironmentPolicy = stagingEnvironmentPolicy;
            return this;
        }
        public Builder stagingEnvironmentPolicy(@Nullable StagingEnvironmentPolicy stagingEnvironmentPolicy) {
            this.stagingEnvironmentPolicy = Output.ofNullable(stagingEnvironmentPolicy);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder templateProperties(@Nullable Output<StaticSiteTemplateOptionsArgs> templateProperties) {
            this.templateProperties = templateProperties;
            return this;
        }
        public Builder templateProperties(@Nullable StaticSiteTemplateOptionsArgs templateProperties) {
            this.templateProperties = Output.ofNullable(templateProperties);
            return this;
        }        public StaticSiteArgs build() {
            return new StaticSiteArgs(allowConfigFileUpdates, branch, buildProperties, identity, kind, location, name, repositoryToken, repositoryUrl, resourceGroupName, sku, stagingEnvironmentPolicy, tags, templateProperties);
        }
    }
}
