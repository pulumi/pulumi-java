// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.deploymentmanager;

import io.pulumi.azurenative.deploymentmanager.enums.DeploymentMode;
import io.pulumi.azurenative.deploymentmanager.inputs.ServiceUnitArtifactsArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceUnitArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceUnitArgs Empty = new ServiceUnitArgs();

    /**
     * The artifacts for the service unit.
     * 
     */
    @InputImport(name="artifacts")
      private final @Nullable Input<ServiceUnitArtifactsArgs> artifacts;

    public Input<ServiceUnitArtifactsArgs> getArtifacts() {
        return this.artifacts == null ? Input.empty() : this.artifacts;
    }

    /**
     * Describes the type of ARM deployment to be performed on the resource.
     * 
     */
    @InputImport(name="deploymentMode", required=true)
      private final Input<DeploymentMode> deploymentMode;

    public Input<DeploymentMode> getDeploymentMode() {
        return this.deploymentMode;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the service resource.
     * 
     */
    @InputImport(name="serviceName", required=true)
      private final Input<String> serviceName;

    public Input<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * The name of the service topology .
     * 
     */
    @InputImport(name="serviceTopologyName", required=true)
      private final Input<String> serviceTopologyName;

    public Input<String> getServiceTopologyName() {
        return this.serviceTopologyName;
    }

    /**
     * The name of the service unit resource.
     * 
     */
    @InputImport(name="serviceUnitName")
      private final @Nullable Input<String> serviceUnitName;

    public Input<String> getServiceUnitName() {
        return this.serviceUnitName == null ? Input.empty() : this.serviceUnitName;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The Azure Resource Group to which the resources in the service unit belong to or should be deployed to.
     * 
     */
    @InputImport(name="targetResourceGroup", required=true)
      private final Input<String> targetResourceGroup;

    public Input<String> getTargetResourceGroup() {
        return this.targetResourceGroup;
    }

    public ServiceUnitArgs(
        @Nullable Input<ServiceUnitArtifactsArgs> artifacts,
        Input<DeploymentMode> deploymentMode,
        @Nullable Input<String> location,
        Input<String> resourceGroupName,
        Input<String> serviceName,
        Input<String> serviceTopologyName,
        @Nullable Input<String> serviceUnitName,
        @Nullable Input<Map<String,String>> tags,
        Input<String> targetResourceGroup) {
        this.artifacts = artifacts;
        this.deploymentMode = Objects.requireNonNull(deploymentMode, "expected parameter 'deploymentMode' to be non-null");
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.serviceTopologyName = Objects.requireNonNull(serviceTopologyName, "expected parameter 'serviceTopologyName' to be non-null");
        this.serviceUnitName = serviceUnitName;
        this.tags = tags;
        this.targetResourceGroup = Objects.requireNonNull(targetResourceGroup, "expected parameter 'targetResourceGroup' to be non-null");
    }

    private ServiceUnitArgs() {
        this.artifacts = Input.empty();
        this.deploymentMode = Input.empty();
        this.location = Input.empty();
        this.resourceGroupName = Input.empty();
        this.serviceName = Input.empty();
        this.serviceTopologyName = Input.empty();
        this.serviceUnitName = Input.empty();
        this.tags = Input.empty();
        this.targetResourceGroup = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceUnitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ServiceUnitArtifactsArgs> artifacts;
        private Input<DeploymentMode> deploymentMode;
        private @Nullable Input<String> location;
        private Input<String> resourceGroupName;
        private Input<String> serviceName;
        private Input<String> serviceTopologyName;
        private @Nullable Input<String> serviceUnitName;
        private @Nullable Input<Map<String,String>> tags;
        private Input<String> targetResourceGroup;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceUnitArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifacts = defaults.artifacts;
    	      this.deploymentMode = defaults.deploymentMode;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceName = defaults.serviceName;
    	      this.serviceTopologyName = defaults.serviceTopologyName;
    	      this.serviceUnitName = defaults.serviceUnitName;
    	      this.tags = defaults.tags;
    	      this.targetResourceGroup = defaults.targetResourceGroup;
        }

        public Builder artifacts(@Nullable Input<ServiceUnitArtifactsArgs> artifacts) {
            this.artifacts = artifacts;
            return this;
        }

        public Builder artifacts(@Nullable ServiceUnitArtifactsArgs artifacts) {
            this.artifacts = Input.ofNullable(artifacts);
            return this;
        }

        public Builder deploymentMode(Input<DeploymentMode> deploymentMode) {
            this.deploymentMode = Objects.requireNonNull(deploymentMode);
            return this;
        }

        public Builder deploymentMode(DeploymentMode deploymentMode) {
            this.deploymentMode = Input.of(Objects.requireNonNull(deploymentMode));
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder serviceName(Input<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }

        public Builder serviceName(String serviceName) {
            this.serviceName = Input.of(Objects.requireNonNull(serviceName));
            return this;
        }

        public Builder serviceTopologyName(Input<String> serviceTopologyName) {
            this.serviceTopologyName = Objects.requireNonNull(serviceTopologyName);
            return this;
        }

        public Builder serviceTopologyName(String serviceTopologyName) {
            this.serviceTopologyName = Input.of(Objects.requireNonNull(serviceTopologyName));
            return this;
        }

        public Builder serviceUnitName(@Nullable Input<String> serviceUnitName) {
            this.serviceUnitName = serviceUnitName;
            return this;
        }

        public Builder serviceUnitName(@Nullable String serviceUnitName) {
            this.serviceUnitName = Input.ofNullable(serviceUnitName);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder targetResourceGroup(Input<String> targetResourceGroup) {
            this.targetResourceGroup = Objects.requireNonNull(targetResourceGroup);
            return this;
        }

        public Builder targetResourceGroup(String targetResourceGroup) {
            this.targetResourceGroup = Input.of(Objects.requireNonNull(targetResourceGroup));
            return this;
        }
        public ServiceUnitArgs build() {
            return new ServiceUnitArgs(artifacts, deploymentMode, location, resourceGroupName, serviceName, serviceTopologyName, serviceUnitName, tags, targetResourceGroup);
        }
    }
}
