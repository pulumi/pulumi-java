// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.providerhub.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * Display information of the operation.
 * 
 */
public final class OperationsDefinitionDisplayArgs extends io.pulumi.resources.ResourceArgs {

    public static final OperationsDefinitionDisplayArgs Empty = new OperationsDefinitionDisplayArgs();

    @InputImport(name="description", required=true)
    private final Input<String> description;

    public Input<String> getDescription() {
        return this.description;
    }

    @InputImport(name="operation", required=true)
    private final Input<String> operation;

    public Input<String> getOperation() {
        return this.operation;
    }

    @InputImport(name="provider", required=true)
    private final Input<String> provider;

    public Input<String> getProvider() {
        return this.provider;
    }

    @InputImport(name="resource", required=true)
    private final Input<String> resource;

    public Input<String> getResource() {
        return this.resource;
    }

    public OperationsDefinitionDisplayArgs(
        Input<String> description,
        Input<String> operation,
        Input<String> provider,
        Input<String> resource) {
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.operation = Objects.requireNonNull(operation, "expected parameter 'operation' to be non-null");
        this.provider = Objects.requireNonNull(provider, "expected parameter 'provider' to be non-null");
        this.resource = Objects.requireNonNull(resource, "expected parameter 'resource' to be non-null");
    }

    private OperationsDefinitionDisplayArgs() {
        this.description = Input.empty();
        this.operation = Input.empty();
        this.provider = Input.empty();
        this.resource = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OperationsDefinitionDisplayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> description;
        private Input<String> operation;
        private Input<String> provider;
        private Input<String> resource;

        public Builder() {
    	      // Empty
        }

        public Builder(OperationsDefinitionDisplayArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.operation = defaults.operation;
    	      this.provider = defaults.provider;
    	      this.resource = defaults.resource;
        }

        public Builder setDescription(Input<String> description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Input.of(Objects.requireNonNull(description));
            return this;
        }

        public Builder setOperation(Input<String> operation) {
            this.operation = Objects.requireNonNull(operation);
            return this;
        }

        public Builder setOperation(String operation) {
            this.operation = Input.of(Objects.requireNonNull(operation));
            return this;
        }

        public Builder setProvider(Input<String> provider) {
            this.provider = Objects.requireNonNull(provider);
            return this;
        }

        public Builder setProvider(String provider) {
            this.provider = Input.of(Objects.requireNonNull(provider));
            return this;
        }

        public Builder setResource(Input<String> resource) {
            this.resource = Objects.requireNonNull(resource);
            return this;
        }

        public Builder setResource(String resource) {
            this.resource = Input.of(Objects.requireNonNull(resource));
            return this;
        }

        public OperationsDefinitionDisplayArgs build() {
            return new OperationsDefinitionDisplayArgs(description, operation, provider, resource);
        }
    }
}
