// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.azurenative.compute.enums.CachingTypes;
import io.pulumi.azurenative.compute.enums.DiskCreateOptionTypes;
import io.pulumi.azurenative.compute.enums.DiskDeleteOptionTypes;
import io.pulumi.azurenative.compute.enums.OperatingSystemTypes;
import io.pulumi.azurenative.compute.inputs.DiffDiskSettingsArgs;
import io.pulumi.azurenative.compute.inputs.DiskEncryptionSettingsArgs;
import io.pulumi.azurenative.compute.inputs.ManagedDiskParametersArgs;
import io.pulumi.azurenative.compute.inputs.VirtualHardDiskArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OSDiskArgs extends io.pulumi.resources.ResourceArgs {

    public static final OSDiskArgs Empty = new OSDiskArgs();

    @InputImport(name="caching")
    private final @Nullable Input<CachingTypes> caching;

    public Input<CachingTypes> getCaching() {
        return this.caching == null ? Input.empty() : this.caching;
    }

    @InputImport(name="createOption", required=true)
    private final Input<Either<String,DiskCreateOptionTypes>> createOption;

    public Input<Either<String,DiskCreateOptionTypes>> getCreateOption() {
        return this.createOption;
    }

    @InputImport(name="deleteOption")
    private final @Nullable Input<Either<String,DiskDeleteOptionTypes>> deleteOption;

    public Input<Either<String,DiskDeleteOptionTypes>> getDeleteOption() {
        return this.deleteOption == null ? Input.empty() : this.deleteOption;
    }

    @InputImport(name="diffDiskSettings")
    private final @Nullable Input<DiffDiskSettingsArgs> diffDiskSettings;

    public Input<DiffDiskSettingsArgs> getDiffDiskSettings() {
        return this.diffDiskSettings == null ? Input.empty() : this.diffDiskSettings;
    }

    @InputImport(name="diskSizeGB")
    private final @Nullable Input<Integer> diskSizeGB;

    public Input<Integer> getDiskSizeGB() {
        return this.diskSizeGB == null ? Input.empty() : this.diskSizeGB;
    }

    @InputImport(name="encryptionSettings")
    private final @Nullable Input<DiskEncryptionSettingsArgs> encryptionSettings;

    public Input<DiskEncryptionSettingsArgs> getEncryptionSettings() {
        return this.encryptionSettings == null ? Input.empty() : this.encryptionSettings;
    }

    @InputImport(name="image")
    private final @Nullable Input<VirtualHardDiskArgs> image;

    public Input<VirtualHardDiskArgs> getImage() {
        return this.image == null ? Input.empty() : this.image;
    }

    @InputImport(name="managedDisk")
    private final @Nullable Input<ManagedDiskParametersArgs> managedDisk;

    public Input<ManagedDiskParametersArgs> getManagedDisk() {
        return this.managedDisk == null ? Input.empty() : this.managedDisk;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="osType")
    private final @Nullable Input<OperatingSystemTypes> osType;

    public Input<OperatingSystemTypes> getOsType() {
        return this.osType == null ? Input.empty() : this.osType;
    }

    @InputImport(name="vhd")
    private final @Nullable Input<VirtualHardDiskArgs> vhd;

    public Input<VirtualHardDiskArgs> getVhd() {
        return this.vhd == null ? Input.empty() : this.vhd;
    }

    @InputImport(name="writeAcceleratorEnabled")
    private final @Nullable Input<Boolean> writeAcceleratorEnabled;

    public Input<Boolean> getWriteAcceleratorEnabled() {
        return this.writeAcceleratorEnabled == null ? Input.empty() : this.writeAcceleratorEnabled;
    }

    public OSDiskArgs(
        @Nullable Input<CachingTypes> caching,
        Input<Either<String,DiskCreateOptionTypes>> createOption,
        @Nullable Input<Either<String,DiskDeleteOptionTypes>> deleteOption,
        @Nullable Input<DiffDiskSettingsArgs> diffDiskSettings,
        @Nullable Input<Integer> diskSizeGB,
        @Nullable Input<DiskEncryptionSettingsArgs> encryptionSettings,
        @Nullable Input<VirtualHardDiskArgs> image,
        @Nullable Input<ManagedDiskParametersArgs> managedDisk,
        @Nullable Input<String> name,
        @Nullable Input<OperatingSystemTypes> osType,
        @Nullable Input<VirtualHardDiskArgs> vhd,
        @Nullable Input<Boolean> writeAcceleratorEnabled) {
        this.caching = caching;
        this.createOption = Objects.requireNonNull(createOption, "expected parameter 'createOption' to be non-null");
        this.deleteOption = deleteOption;
        this.diffDiskSettings = diffDiskSettings;
        this.diskSizeGB = diskSizeGB;
        this.encryptionSettings = encryptionSettings;
        this.image = image;
        this.managedDisk = managedDisk;
        this.name = name;
        this.osType = osType;
        this.vhd = vhd;
        this.writeAcceleratorEnabled = writeAcceleratorEnabled;
    }

    private OSDiskArgs() {
        this.caching = Input.empty();
        this.createOption = Input.empty();
        this.deleteOption = Input.empty();
        this.diffDiskSettings = Input.empty();
        this.diskSizeGB = Input.empty();
        this.encryptionSettings = Input.empty();
        this.image = Input.empty();
        this.managedDisk = Input.empty();
        this.name = Input.empty();
        this.osType = Input.empty();
        this.vhd = Input.empty();
        this.writeAcceleratorEnabled = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OSDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<CachingTypes> caching;
        private Input<Either<String,DiskCreateOptionTypes>> createOption;
        private @Nullable Input<Either<String,DiskDeleteOptionTypes>> deleteOption;
        private @Nullable Input<DiffDiskSettingsArgs> diffDiskSettings;
        private @Nullable Input<Integer> diskSizeGB;
        private @Nullable Input<DiskEncryptionSettingsArgs> encryptionSettings;
        private @Nullable Input<VirtualHardDiskArgs> image;
        private @Nullable Input<ManagedDiskParametersArgs> managedDisk;
        private @Nullable Input<String> name;
        private @Nullable Input<OperatingSystemTypes> osType;
        private @Nullable Input<VirtualHardDiskArgs> vhd;
        private @Nullable Input<Boolean> writeAcceleratorEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(OSDiskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.createOption = defaults.createOption;
    	      this.deleteOption = defaults.deleteOption;
    	      this.diffDiskSettings = defaults.diffDiskSettings;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.encryptionSettings = defaults.encryptionSettings;
    	      this.image = defaults.image;
    	      this.managedDisk = defaults.managedDisk;
    	      this.name = defaults.name;
    	      this.osType = defaults.osType;
    	      this.vhd = defaults.vhd;
    	      this.writeAcceleratorEnabled = defaults.writeAcceleratorEnabled;
        }

        public Builder setCaching(@Nullable Input<CachingTypes> caching) {
            this.caching = caching;
            return this;
        }

        public Builder setCaching(@Nullable CachingTypes caching) {
            this.caching = Input.ofNullable(caching);
            return this;
        }

        public Builder setCreateOption(Input<Either<String,DiskCreateOptionTypes>> createOption) {
            this.createOption = Objects.requireNonNull(createOption);
            return this;
        }

        public Builder setCreateOption(Either<String,DiskCreateOptionTypes> createOption) {
            this.createOption = Input.of(Objects.requireNonNull(createOption));
            return this;
        }

        public Builder setDeleteOption(@Nullable Input<Either<String,DiskDeleteOptionTypes>> deleteOption) {
            this.deleteOption = deleteOption;
            return this;
        }

        public Builder setDeleteOption(@Nullable Either<String,DiskDeleteOptionTypes> deleteOption) {
            this.deleteOption = Input.ofNullable(deleteOption);
            return this;
        }

        public Builder setDiffDiskSettings(@Nullable Input<DiffDiskSettingsArgs> diffDiskSettings) {
            this.diffDiskSettings = diffDiskSettings;
            return this;
        }

        public Builder setDiffDiskSettings(@Nullable DiffDiskSettingsArgs diffDiskSettings) {
            this.diffDiskSettings = Input.ofNullable(diffDiskSettings);
            return this;
        }

        public Builder setDiskSizeGB(@Nullable Input<Integer> diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder setDiskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = Input.ofNullable(diskSizeGB);
            return this;
        }

        public Builder setEncryptionSettings(@Nullable Input<DiskEncryptionSettingsArgs> encryptionSettings) {
            this.encryptionSettings = encryptionSettings;
            return this;
        }

        public Builder setEncryptionSettings(@Nullable DiskEncryptionSettingsArgs encryptionSettings) {
            this.encryptionSettings = Input.ofNullable(encryptionSettings);
            return this;
        }

        public Builder setImage(@Nullable Input<VirtualHardDiskArgs> image) {
            this.image = image;
            return this;
        }

        public Builder setImage(@Nullable VirtualHardDiskArgs image) {
            this.image = Input.ofNullable(image);
            return this;
        }

        public Builder setManagedDisk(@Nullable Input<ManagedDiskParametersArgs> managedDisk) {
            this.managedDisk = managedDisk;
            return this;
        }

        public Builder setManagedDisk(@Nullable ManagedDiskParametersArgs managedDisk) {
            this.managedDisk = Input.ofNullable(managedDisk);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setOsType(@Nullable Input<OperatingSystemTypes> osType) {
            this.osType = osType;
            return this;
        }

        public Builder setOsType(@Nullable OperatingSystemTypes osType) {
            this.osType = Input.ofNullable(osType);
            return this;
        }

        public Builder setVhd(@Nullable Input<VirtualHardDiskArgs> vhd) {
            this.vhd = vhd;
            return this;
        }

        public Builder setVhd(@Nullable VirtualHardDiskArgs vhd) {
            this.vhd = Input.ofNullable(vhd);
            return this;
        }

        public Builder setWriteAcceleratorEnabled(@Nullable Input<Boolean> writeAcceleratorEnabled) {
            this.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }

        public Builder setWriteAcceleratorEnabled(@Nullable Boolean writeAcceleratorEnabled) {
            this.writeAcceleratorEnabled = Input.ofNullable(writeAcceleratorEnabled);
            return this;
        }

        public OSDiskArgs build() {
            return new OSDiskArgs(caching, createOption, deleteOption, diffDiskSettings, diskSizeGB, encryptionSettings, image, managedDisk, name, osType, vhd, writeAcceleratorEnabled);
        }
    }
}
