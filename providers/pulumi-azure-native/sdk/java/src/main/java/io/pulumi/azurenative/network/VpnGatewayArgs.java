// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.inputs.BgpSettingsArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.azurenative.network.inputs.VpnConnectionArgs;
import io.pulumi.azurenative.network.inputs.VpnGatewayNatRuleArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpnGatewayArgs extends io.pulumi.resources.ResourceArgs {

    public static final VpnGatewayArgs Empty = new VpnGatewayArgs();

    /**
     * Local network gateway's BGP speaker settings.
     * 
     */
    @Import(name="bgpSettings")
      private final @Nullable Output<BgpSettingsArgs> bgpSettings;

    public Output<BgpSettingsArgs> bgpSettings() {
        return this.bgpSettings == null ? Codegen.empty() : this.bgpSettings;
    }

    /**
     * List of all vpn connections to the gateway.
     * 
     */
    @Import(name="connections")
      private final @Nullable Output<List<VpnConnectionArgs>> connections;

    public Output<List<VpnConnectionArgs>> connections() {
        return this.connections == null ? Codegen.empty() : this.connections;
    }

    /**
     * The name of the gateway.
     * 
     */
    @Import(name="gatewayName")
      private final @Nullable Output<String> gatewayName;

    public Output<String> gatewayName() {
        return this.gatewayName == null ? Codegen.empty() : this.gatewayName;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * Enable Routing Preference property for the Public IP Interface of the VpnGateway.
     * 
     */
    @Import(name="isRoutingPreferenceInternet")
      private final @Nullable Output<Boolean> isRoutingPreferenceInternet;

    public Output<Boolean> isRoutingPreferenceInternet() {
        return this.isRoutingPreferenceInternet == null ? Codegen.empty() : this.isRoutingPreferenceInternet;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * List of all the nat Rules associated with the gateway.
     * 
     */
    @Import(name="natRules")
      private final @Nullable Output<List<VpnGatewayNatRuleArgs>> natRules;

    public Output<List<VpnGatewayNatRuleArgs>> natRules() {
        return this.natRules == null ? Codegen.empty() : this.natRules;
    }

    /**
     * The resource group name of the VpnGateway.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The VirtualHub to which the gateway belongs.
     * 
     */
    @Import(name="virtualHub")
      private final @Nullable Output<SubResourceArgs> virtualHub;

    public Output<SubResourceArgs> virtualHub() {
        return this.virtualHub == null ? Codegen.empty() : this.virtualHub;
    }

    /**
     * The scale unit for this vpn gateway.
     * 
     */
    @Import(name="vpnGatewayScaleUnit")
      private final @Nullable Output<Integer> vpnGatewayScaleUnit;

    public Output<Integer> vpnGatewayScaleUnit() {
        return this.vpnGatewayScaleUnit == null ? Codegen.empty() : this.vpnGatewayScaleUnit;
    }

    public VpnGatewayArgs(
        @Nullable Output<BgpSettingsArgs> bgpSettings,
        @Nullable Output<List<VpnConnectionArgs>> connections,
        @Nullable Output<String> gatewayName,
        @Nullable Output<String> id,
        @Nullable Output<Boolean> isRoutingPreferenceInternet,
        @Nullable Output<String> location,
        @Nullable Output<List<VpnGatewayNatRuleArgs>> natRules,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<SubResourceArgs> virtualHub,
        @Nullable Output<Integer> vpnGatewayScaleUnit) {
        this.bgpSettings = bgpSettings;
        this.connections = connections;
        this.gatewayName = gatewayName;
        this.id = id;
        this.isRoutingPreferenceInternet = isRoutingPreferenceInternet;
        this.location = location;
        this.natRules = natRules;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.virtualHub = virtualHub;
        this.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
    }

    private VpnGatewayArgs() {
        this.bgpSettings = Codegen.empty();
        this.connections = Codegen.empty();
        this.gatewayName = Codegen.empty();
        this.id = Codegen.empty();
        this.isRoutingPreferenceInternet = Codegen.empty();
        this.location = Codegen.empty();
        this.natRules = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
        this.virtualHub = Codegen.empty();
        this.vpnGatewayScaleUnit = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnGatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<BgpSettingsArgs> bgpSettings;
        private @Nullable Output<List<VpnConnectionArgs>> connections;
        private @Nullable Output<String> gatewayName;
        private @Nullable Output<String> id;
        private @Nullable Output<Boolean> isRoutingPreferenceInternet;
        private @Nullable Output<String> location;
        private @Nullable Output<List<VpnGatewayNatRuleArgs>> natRules;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<SubResourceArgs> virtualHub;
        private @Nullable Output<Integer> vpnGatewayScaleUnit;

        public Builder() {
    	      // Empty
        }

        public Builder(VpnGatewayArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bgpSettings = defaults.bgpSettings;
    	      this.connections = defaults.connections;
    	      this.gatewayName = defaults.gatewayName;
    	      this.id = defaults.id;
    	      this.isRoutingPreferenceInternet = defaults.isRoutingPreferenceInternet;
    	      this.location = defaults.location;
    	      this.natRules = defaults.natRules;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.virtualHub = defaults.virtualHub;
    	      this.vpnGatewayScaleUnit = defaults.vpnGatewayScaleUnit;
        }

        public Builder bgpSettings(@Nullable Output<BgpSettingsArgs> bgpSettings) {
            this.bgpSettings = bgpSettings;
            return this;
        }
        public Builder bgpSettings(@Nullable BgpSettingsArgs bgpSettings) {
            this.bgpSettings = Codegen.ofNullable(bgpSettings);
            return this;
        }
        public Builder connections(@Nullable Output<List<VpnConnectionArgs>> connections) {
            this.connections = connections;
            return this;
        }
        public Builder connections(@Nullable List<VpnConnectionArgs> connections) {
            this.connections = Codegen.ofNullable(connections);
            return this;
        }
        public Builder connections(VpnConnectionArgs... connections) {
            return connections(List.of(connections));
        }
        public Builder gatewayName(@Nullable Output<String> gatewayName) {
            this.gatewayName = gatewayName;
            return this;
        }
        public Builder gatewayName(@Nullable String gatewayName) {
            this.gatewayName = Codegen.ofNullable(gatewayName);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder isRoutingPreferenceInternet(@Nullable Output<Boolean> isRoutingPreferenceInternet) {
            this.isRoutingPreferenceInternet = isRoutingPreferenceInternet;
            return this;
        }
        public Builder isRoutingPreferenceInternet(@Nullable Boolean isRoutingPreferenceInternet) {
            this.isRoutingPreferenceInternet = Codegen.ofNullable(isRoutingPreferenceInternet);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder natRules(@Nullable Output<List<VpnGatewayNatRuleArgs>> natRules) {
            this.natRules = natRules;
            return this;
        }
        public Builder natRules(@Nullable List<VpnGatewayNatRuleArgs> natRules) {
            this.natRules = Codegen.ofNullable(natRules);
            return this;
        }
        public Builder natRules(VpnGatewayNatRuleArgs... natRules) {
            return natRules(List.of(natRules));
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder virtualHub(@Nullable Output<SubResourceArgs> virtualHub) {
            this.virtualHub = virtualHub;
            return this;
        }
        public Builder virtualHub(@Nullable SubResourceArgs virtualHub) {
            this.virtualHub = Codegen.ofNullable(virtualHub);
            return this;
        }
        public Builder vpnGatewayScaleUnit(@Nullable Output<Integer> vpnGatewayScaleUnit) {
            this.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
            return this;
        }
        public Builder vpnGatewayScaleUnit(@Nullable Integer vpnGatewayScaleUnit) {
            this.vpnGatewayScaleUnit = Codegen.ofNullable(vpnGatewayScaleUnit);
            return this;
        }        public VpnGatewayArgs build() {
            return new VpnGatewayArgs(bgpSettings, connections, gatewayName, id, isRoutingPreferenceInternet, location, natRules, resourceGroupName, tags, virtualHub, vpnGatewayScaleUnit);
        }
    }
}
