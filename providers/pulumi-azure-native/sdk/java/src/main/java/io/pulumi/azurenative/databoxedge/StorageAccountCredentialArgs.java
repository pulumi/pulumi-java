// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databoxedge;

import io.pulumi.azurenative.databoxedge.enums.AccountType;
import io.pulumi.azurenative.databoxedge.enums.SSLStatus;
import io.pulumi.azurenative.databoxedge.inputs.AsymmetricEncryptedSecretArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StorageAccountCredentialArgs extends io.pulumi.resources.ResourceArgs {

    public static final StorageAccountCredentialArgs Empty = new StorageAccountCredentialArgs();

    /**
     * Encrypted storage key.
     * 
     */
    @InputImport(name="accountKey")
    private final @Nullable Input<AsymmetricEncryptedSecretArgs> accountKey;

    public Input<AsymmetricEncryptedSecretArgs> getAccountKey() {
        return this.accountKey == null ? Input.empty() : this.accountKey;
    }

    /**
     * Type of storage accessed on the storage account.
     * 
     */
    @InputImport(name="accountType", required=true)
    private final Input<Either<String,AccountType>> accountType;

    public Input<Either<String,AccountType>> getAccountType() {
        return this.accountType;
    }

    /**
     * Alias for the storage account.
     * 
     */
    @InputImport(name="alias", required=true)
    private final Input<String> alias;

    public Input<String> getAlias() {
        return this.alias;
    }

    /**
     * Blob end point for private clouds.
     * 
     */
    @InputImport(name="blobDomainName")
    private final @Nullable Input<String> blobDomainName;

    public Input<String> getBlobDomainName() {
        return this.blobDomainName == null ? Input.empty() : this.blobDomainName;
    }

    /**
     * Connection string for the storage account. Use this string if username and account key are not specified.
     * 
     */
    @InputImport(name="connectionString")
    private final @Nullable Input<String> connectionString;

    public Input<String> getConnectionString() {
        return this.connectionString == null ? Input.empty() : this.connectionString;
    }

    /**
     * The device name.
     * 
     */
    @InputImport(name="deviceName", required=true)
    private final Input<String> deviceName;

    public Input<String> getDeviceName() {
        return this.deviceName;
    }

    /**
     * The storage account credential name.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The resource group name.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Signifies whether SSL needs to be enabled or not.
     * 
     */
    @InputImport(name="sslStatus", required=true)
    private final Input<Either<String,SSLStatus>> sslStatus;

    public Input<Either<String,SSLStatus>> getSslStatus() {
        return this.sslStatus;
    }

    /**
     * Id of the storage account.
     * 
     */
    @InputImport(name="storageAccountId")
    private final @Nullable Input<String> storageAccountId;

    public Input<String> getStorageAccountId() {
        return this.storageAccountId == null ? Input.empty() : this.storageAccountId;
    }

    /**
     * Username for the storage account.
     * 
     */
    @InputImport(name="userName")
    private final @Nullable Input<String> userName;

    public Input<String> getUserName() {
        return this.userName == null ? Input.empty() : this.userName;
    }

    public StorageAccountCredentialArgs(
        @Nullable Input<AsymmetricEncryptedSecretArgs> accountKey,
        Input<Either<String,AccountType>> accountType,
        Input<String> alias,
        @Nullable Input<String> blobDomainName,
        @Nullable Input<String> connectionString,
        Input<String> deviceName,
        @Nullable Input<String> name,
        Input<String> resourceGroupName,
        Input<Either<String,SSLStatus>> sslStatus,
        @Nullable Input<String> storageAccountId,
        @Nullable Input<String> userName) {
        this.accountKey = accountKey;
        this.accountType = Objects.requireNonNull(accountType, "expected parameter 'accountType' to be non-null");
        this.alias = Objects.requireNonNull(alias, "expected parameter 'alias' to be non-null");
        this.blobDomainName = blobDomainName;
        this.connectionString = connectionString;
        this.deviceName = Objects.requireNonNull(deviceName, "expected parameter 'deviceName' to be non-null");
        this.name = name;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sslStatus = Objects.requireNonNull(sslStatus, "expected parameter 'sslStatus' to be non-null");
        this.storageAccountId = storageAccountId;
        this.userName = userName;
    }

    private StorageAccountCredentialArgs() {
        this.accountKey = Input.empty();
        this.accountType = Input.empty();
        this.alias = Input.empty();
        this.blobDomainName = Input.empty();
        this.connectionString = Input.empty();
        this.deviceName = Input.empty();
        this.name = Input.empty();
        this.resourceGroupName = Input.empty();
        this.sslStatus = Input.empty();
        this.storageAccountId = Input.empty();
        this.userName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StorageAccountCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<AsymmetricEncryptedSecretArgs> accountKey;
        private Input<Either<String,AccountType>> accountType;
        private Input<String> alias;
        private @Nullable Input<String> blobDomainName;
        private @Nullable Input<String> connectionString;
        private Input<String> deviceName;
        private @Nullable Input<String> name;
        private Input<String> resourceGroupName;
        private Input<Either<String,SSLStatus>> sslStatus;
        private @Nullable Input<String> storageAccountId;
        private @Nullable Input<String> userName;

        public Builder() {
    	      // Empty
        }

        public Builder(StorageAccountCredentialArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountKey = defaults.accountKey;
    	      this.accountType = defaults.accountType;
    	      this.alias = defaults.alias;
    	      this.blobDomainName = defaults.blobDomainName;
    	      this.connectionString = defaults.connectionString;
    	      this.deviceName = defaults.deviceName;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sslStatus = defaults.sslStatus;
    	      this.storageAccountId = defaults.storageAccountId;
    	      this.userName = defaults.userName;
        }

        public Builder setAccountKey(@Nullable Input<AsymmetricEncryptedSecretArgs> accountKey) {
            this.accountKey = accountKey;
            return this;
        }

        public Builder setAccountKey(@Nullable AsymmetricEncryptedSecretArgs accountKey) {
            this.accountKey = Input.ofNullable(accountKey);
            return this;
        }

        public Builder setAccountType(Input<Either<String,AccountType>> accountType) {
            this.accountType = Objects.requireNonNull(accountType);
            return this;
        }

        public Builder setAccountType(Either<String,AccountType> accountType) {
            this.accountType = Input.of(Objects.requireNonNull(accountType));
            return this;
        }

        public Builder setAlias(Input<String> alias) {
            this.alias = Objects.requireNonNull(alias);
            return this;
        }

        public Builder setAlias(String alias) {
            this.alias = Input.of(Objects.requireNonNull(alias));
            return this;
        }

        public Builder setBlobDomainName(@Nullable Input<String> blobDomainName) {
            this.blobDomainName = blobDomainName;
            return this;
        }

        public Builder setBlobDomainName(@Nullable String blobDomainName) {
            this.blobDomainName = Input.ofNullable(blobDomainName);
            return this;
        }

        public Builder setConnectionString(@Nullable Input<String> connectionString) {
            this.connectionString = connectionString;
            return this;
        }

        public Builder setConnectionString(@Nullable String connectionString) {
            this.connectionString = Input.ofNullable(connectionString);
            return this;
        }

        public Builder setDeviceName(Input<String> deviceName) {
            this.deviceName = Objects.requireNonNull(deviceName);
            return this;
        }

        public Builder setDeviceName(String deviceName) {
            this.deviceName = Input.of(Objects.requireNonNull(deviceName));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSslStatus(Input<Either<String,SSLStatus>> sslStatus) {
            this.sslStatus = Objects.requireNonNull(sslStatus);
            return this;
        }

        public Builder setSslStatus(Either<String,SSLStatus> sslStatus) {
            this.sslStatus = Input.of(Objects.requireNonNull(sslStatus));
            return this;
        }

        public Builder setStorageAccountId(@Nullable Input<String> storageAccountId) {
            this.storageAccountId = storageAccountId;
            return this;
        }

        public Builder setStorageAccountId(@Nullable String storageAccountId) {
            this.storageAccountId = Input.ofNullable(storageAccountId);
            return this;
        }

        public Builder setUserName(@Nullable Input<String> userName) {
            this.userName = userName;
            return this;
        }

        public Builder setUserName(@Nullable String userName) {
            this.userName = Input.ofNullable(userName);
            return this;
        }

        public StorageAccountCredentialArgs build() {
            return new StorageAccountCredentialArgs(accountKey, accountType, alias, blobDomainName, connectionString, deviceName, name, resourceGroupName, sslStatus, storageAccountId, userName);
        }
    }
}
