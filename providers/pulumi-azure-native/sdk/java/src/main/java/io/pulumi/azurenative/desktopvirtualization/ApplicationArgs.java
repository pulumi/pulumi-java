// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.desktopvirtualization;

import io.pulumi.azurenative.desktopvirtualization.enums.CommandLineSetting;
import io.pulumi.azurenative.desktopvirtualization.enums.RemoteApplicationType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    /**
     * The name of the application group
     * 
     */
    @Import(name="applicationGroupName", required=true)
      private final Output<String> applicationGroupName;

    public Output<String> getApplicationGroupName() {
        return this.applicationGroupName;
    }

    /**
     * The name of the application within the specified application group
     * 
     */
    @Import(name="applicationName")
      private final @Nullable Output<String> applicationName;

    public Output<String> getApplicationName() {
        return this.applicationName == null ? Output.empty() : this.applicationName;
    }

    /**
     * Resource Type of Application.
     * 
     */
    @Import(name="applicationType")
      private final @Nullable Output<Either<String,RemoteApplicationType>> applicationType;

    public Output<Either<String,RemoteApplicationType>> getApplicationType() {
        return this.applicationType == null ? Output.empty() : this.applicationType;
    }

    /**
     * Command Line Arguments for Application.
     * 
     */
    @Import(name="commandLineArguments")
      private final @Nullable Output<String> commandLineArguments;

    public Output<String> getCommandLineArguments() {
        return this.commandLineArguments == null ? Output.empty() : this.commandLineArguments;
    }

    /**
     * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
     * 
     */
    @Import(name="commandLineSetting", required=true)
      private final Output<Either<String,CommandLineSetting>> commandLineSetting;

    public Output<Either<String,CommandLineSetting>> getCommandLineSetting() {
        return this.commandLineSetting;
    }

    /**
     * Description of Application.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Specifies a path for the executable file for the application.
     * 
     */
    @Import(name="filePath")
      private final @Nullable Output<String> filePath;

    public Output<String> getFilePath() {
        return this.filePath == null ? Output.empty() : this.filePath;
    }

    /**
     * Friendly name of Application.
     * 
     */
    @Import(name="friendlyName")
      private final @Nullable Output<String> friendlyName;

    public Output<String> getFriendlyName() {
        return this.friendlyName == null ? Output.empty() : this.friendlyName;
    }

    /**
     * Index of the icon.
     * 
     */
    @Import(name="iconIndex")
      private final @Nullable Output<Integer> iconIndex;

    public Output<Integer> getIconIndex() {
        return this.iconIndex == null ? Output.empty() : this.iconIndex;
    }

    /**
     * Path to icon.
     * 
     */
    @Import(name="iconPath")
      private final @Nullable Output<String> iconPath;

    public Output<String> getIconPath() {
        return this.iconPath == null ? Output.empty() : this.iconPath;
    }

    /**
     * Specifies the package application Id for MSIX applications
     * 
     */
    @Import(name="msixPackageApplicationId")
      private final @Nullable Output<String> msixPackageApplicationId;

    public Output<String> getMsixPackageApplicationId() {
        return this.msixPackageApplicationId == null ? Output.empty() : this.msixPackageApplicationId;
    }

    /**
     * Specifies the package family name for MSIX applications
     * 
     */
    @Import(name="msixPackageFamilyName")
      private final @Nullable Output<String> msixPackageFamilyName;

    public Output<String> getMsixPackageFamilyName() {
        return this.msixPackageFamilyName == null ? Output.empty() : this.msixPackageFamilyName;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies whether to show the RemoteApp program in the RD Web Access server.
     * 
     */
    @Import(name="showInPortal")
      private final @Nullable Output<Boolean> showInPortal;

    public Output<Boolean> getShowInPortal() {
        return this.showInPortal == null ? Output.empty() : this.showInPortal;
    }

    public ApplicationArgs(
        Output<String> applicationGroupName,
        @Nullable Output<String> applicationName,
        @Nullable Output<Either<String,RemoteApplicationType>> applicationType,
        @Nullable Output<String> commandLineArguments,
        Output<Either<String,CommandLineSetting>> commandLineSetting,
        @Nullable Output<String> description,
        @Nullable Output<String> filePath,
        @Nullable Output<String> friendlyName,
        @Nullable Output<Integer> iconIndex,
        @Nullable Output<String> iconPath,
        @Nullable Output<String> msixPackageApplicationId,
        @Nullable Output<String> msixPackageFamilyName,
        Output<String> resourceGroupName,
        @Nullable Output<Boolean> showInPortal) {
        this.applicationGroupName = Objects.requireNonNull(applicationGroupName, "expected parameter 'applicationGroupName' to be non-null");
        this.applicationName = applicationName;
        this.applicationType = applicationType;
        this.commandLineArguments = commandLineArguments;
        this.commandLineSetting = Objects.requireNonNull(commandLineSetting, "expected parameter 'commandLineSetting' to be non-null");
        this.description = description;
        this.filePath = filePath;
        this.friendlyName = friendlyName;
        this.iconIndex = iconIndex;
        this.iconPath = iconPath;
        this.msixPackageApplicationId = msixPackageApplicationId;
        this.msixPackageFamilyName = msixPackageFamilyName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.showInPortal = showInPortal;
    }

    private ApplicationArgs() {
        this.applicationGroupName = Output.empty();
        this.applicationName = Output.empty();
        this.applicationType = Output.empty();
        this.commandLineArguments = Output.empty();
        this.commandLineSetting = Output.empty();
        this.description = Output.empty();
        this.filePath = Output.empty();
        this.friendlyName = Output.empty();
        this.iconIndex = Output.empty();
        this.iconPath = Output.empty();
        this.msixPackageApplicationId = Output.empty();
        this.msixPackageFamilyName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.showInPortal = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> applicationGroupName;
        private @Nullable Output<String> applicationName;
        private @Nullable Output<Either<String,RemoteApplicationType>> applicationType;
        private @Nullable Output<String> commandLineArguments;
        private Output<Either<String,CommandLineSetting>> commandLineSetting;
        private @Nullable Output<String> description;
        private @Nullable Output<String> filePath;
        private @Nullable Output<String> friendlyName;
        private @Nullable Output<Integer> iconIndex;
        private @Nullable Output<String> iconPath;
        private @Nullable Output<String> msixPackageApplicationId;
        private @Nullable Output<String> msixPackageFamilyName;
        private Output<String> resourceGroupName;
        private @Nullable Output<Boolean> showInPortal;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationGroupName = defaults.applicationGroupName;
    	      this.applicationName = defaults.applicationName;
    	      this.applicationType = defaults.applicationType;
    	      this.commandLineArguments = defaults.commandLineArguments;
    	      this.commandLineSetting = defaults.commandLineSetting;
    	      this.description = defaults.description;
    	      this.filePath = defaults.filePath;
    	      this.friendlyName = defaults.friendlyName;
    	      this.iconIndex = defaults.iconIndex;
    	      this.iconPath = defaults.iconPath;
    	      this.msixPackageApplicationId = defaults.msixPackageApplicationId;
    	      this.msixPackageFamilyName = defaults.msixPackageFamilyName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.showInPortal = defaults.showInPortal;
        }

        public Builder applicationGroupName(Output<String> applicationGroupName) {
            this.applicationGroupName = Objects.requireNonNull(applicationGroupName);
            return this;
        }
        public Builder applicationGroupName(String applicationGroupName) {
            this.applicationGroupName = Output.of(Objects.requireNonNull(applicationGroupName));
            return this;
        }
        public Builder applicationName(@Nullable Output<String> applicationName) {
            this.applicationName = applicationName;
            return this;
        }
        public Builder applicationName(@Nullable String applicationName) {
            this.applicationName = Output.ofNullable(applicationName);
            return this;
        }
        public Builder applicationType(@Nullable Output<Either<String,RemoteApplicationType>> applicationType) {
            this.applicationType = applicationType;
            return this;
        }
        public Builder applicationType(@Nullable Either<String,RemoteApplicationType> applicationType) {
            this.applicationType = Output.ofNullable(applicationType);
            return this;
        }
        public Builder commandLineArguments(@Nullable Output<String> commandLineArguments) {
            this.commandLineArguments = commandLineArguments;
            return this;
        }
        public Builder commandLineArguments(@Nullable String commandLineArguments) {
            this.commandLineArguments = Output.ofNullable(commandLineArguments);
            return this;
        }
        public Builder commandLineSetting(Output<Either<String,CommandLineSetting>> commandLineSetting) {
            this.commandLineSetting = Objects.requireNonNull(commandLineSetting);
            return this;
        }
        public Builder commandLineSetting(Either<String,CommandLineSetting> commandLineSetting) {
            this.commandLineSetting = Output.of(Objects.requireNonNull(commandLineSetting));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder filePath(@Nullable Output<String> filePath) {
            this.filePath = filePath;
            return this;
        }
        public Builder filePath(@Nullable String filePath) {
            this.filePath = Output.ofNullable(filePath);
            return this;
        }
        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }
        public Builder friendlyName(@Nullable String friendlyName) {
            this.friendlyName = Output.ofNullable(friendlyName);
            return this;
        }
        public Builder iconIndex(@Nullable Output<Integer> iconIndex) {
            this.iconIndex = iconIndex;
            return this;
        }
        public Builder iconIndex(@Nullable Integer iconIndex) {
            this.iconIndex = Output.ofNullable(iconIndex);
            return this;
        }
        public Builder iconPath(@Nullable Output<String> iconPath) {
            this.iconPath = iconPath;
            return this;
        }
        public Builder iconPath(@Nullable String iconPath) {
            this.iconPath = Output.ofNullable(iconPath);
            return this;
        }
        public Builder msixPackageApplicationId(@Nullable Output<String> msixPackageApplicationId) {
            this.msixPackageApplicationId = msixPackageApplicationId;
            return this;
        }
        public Builder msixPackageApplicationId(@Nullable String msixPackageApplicationId) {
            this.msixPackageApplicationId = Output.ofNullable(msixPackageApplicationId);
            return this;
        }
        public Builder msixPackageFamilyName(@Nullable Output<String> msixPackageFamilyName) {
            this.msixPackageFamilyName = msixPackageFamilyName;
            return this;
        }
        public Builder msixPackageFamilyName(@Nullable String msixPackageFamilyName) {
            this.msixPackageFamilyName = Output.ofNullable(msixPackageFamilyName);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder showInPortal(@Nullable Output<Boolean> showInPortal) {
            this.showInPortal = showInPortal;
            return this;
        }
        public Builder showInPortal(@Nullable Boolean showInPortal) {
            this.showInPortal = Output.ofNullable(showInPortal);
            return this;
        }        public ApplicationArgs build() {
            return new ApplicationArgs(applicationGroupName, applicationName, applicationType, commandLineArguments, commandLineSetting, description, filePath, friendlyName, iconIndex, iconPath, msixPackageApplicationId, msixPackageFamilyName, resourceGroupName, showInPortal);
        }
    }
}
