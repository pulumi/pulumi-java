// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.authorization;

import io.pulumi.azurenative.authorization.enums.LockLevel;
import io.pulumi.azurenative.authorization.inputs.ManagementLockOwnerArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ManagementLockAtResourceLevelArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagementLockAtResourceLevelArgs Empty = new ManagementLockAtResourceLevelArgs();

    /**
     * The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
     * 
     */
    @Import(name="level", required=true)
      private final Output<Either<String,LockLevel>> level;

    public Output<Either<String,LockLevel>> getLevel() {
        return this.level;
    }

    /**
     * The name of lock. The lock name can be a maximum of 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control characters.
     * 
     */
    @Import(name="lockName")
      private final @Nullable Output<String> lockName;

    public Output<String> getLockName() {
        return this.lockName == null ? Output.empty() : this.lockName;
    }

    /**
     * Notes about the lock. Maximum of 512 characters.
     * 
     */
    @Import(name="notes")
      private final @Nullable Output<String> notes;

    public Output<String> getNotes() {
        return this.notes == null ? Output.empty() : this.notes;
    }

    /**
     * The owners of the lock.
     * 
     */
    @Import(name="owners")
      private final @Nullable Output<List<ManagementLockOwnerArgs>> owners;

    public Output<List<ManagementLockOwnerArgs>> getOwners() {
        return this.owners == null ? Output.empty() : this.owners;
    }

    /**
     * The parent resource identity.
     * 
     */
    @Import(name="parentResourcePath", required=true)
      private final Output<String> parentResourcePath;

    public Output<String> getParentResourcePath() {
        return this.parentResourcePath;
    }

    /**
     * The name of the resource group containing the resource to lock.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the resource to lock.
     * 
     */
    @Import(name="resourceName", required=true)
      private final Output<String> resourceName;

    public Output<String> getPropResourceName() {
        return this.resourceName;
    }

    /**
     * The resource provider namespace of the resource to lock.
     * 
     */
    @Import(name="resourceProviderNamespace", required=true)
      private final Output<String> resourceProviderNamespace;

    public Output<String> getResourceProviderNamespace() {
        return this.resourceProviderNamespace;
    }

    /**
     * The resource type of the resource to lock.
     * 
     */
    @Import(name="resourceType", required=true)
      private final Output<String> resourceType;

    public Output<String> getPropResourceType() {
        return this.resourceType;
    }

    public ManagementLockAtResourceLevelArgs(
        Output<Either<String,LockLevel>> level,
        @Nullable Output<String> lockName,
        @Nullable Output<String> notes,
        @Nullable Output<List<ManagementLockOwnerArgs>> owners,
        Output<String> parentResourcePath,
        Output<String> resourceGroupName,
        Output<String> resourceName,
        Output<String> resourceProviderNamespace,
        Output<String> resourceType) {
        this.level = Objects.requireNonNull(level, "expected parameter 'level' to be non-null");
        this.lockName = lockName;
        this.notes = notes;
        this.owners = owners;
        this.parentResourcePath = Objects.requireNonNull(parentResourcePath, "expected parameter 'parentResourcePath' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceName = Objects.requireNonNull(resourceName, "expected parameter 'resourceName' to be non-null");
        this.resourceProviderNamespace = Objects.requireNonNull(resourceProviderNamespace, "expected parameter 'resourceProviderNamespace' to be non-null");
        this.resourceType = Objects.requireNonNull(resourceType, "expected parameter 'resourceType' to be non-null");
    }

    private ManagementLockAtResourceLevelArgs() {
        this.level = Output.empty();
        this.lockName = Output.empty();
        this.notes = Output.empty();
        this.owners = Output.empty();
        this.parentResourcePath = Output.empty();
        this.resourceGroupName = Output.empty();
        this.resourceName = Output.empty();
        this.resourceProviderNamespace = Output.empty();
        this.resourceType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagementLockAtResourceLevelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,LockLevel>> level;
        private @Nullable Output<String> lockName;
        private @Nullable Output<String> notes;
        private @Nullable Output<List<ManagementLockOwnerArgs>> owners;
        private Output<String> parentResourcePath;
        private Output<String> resourceGroupName;
        private Output<String> resourceName;
        private Output<String> resourceProviderNamespace;
        private Output<String> resourceType;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagementLockAtResourceLevelArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.level = defaults.level;
    	      this.lockName = defaults.lockName;
    	      this.notes = defaults.notes;
    	      this.owners = defaults.owners;
    	      this.parentResourcePath = defaults.parentResourcePath;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceName = defaults.resourceName;
    	      this.resourceProviderNamespace = defaults.resourceProviderNamespace;
    	      this.resourceType = defaults.resourceType;
        }

        public Builder level(Output<Either<String,LockLevel>> level) {
            this.level = Objects.requireNonNull(level);
            return this;
        }
        public Builder level(Either<String,LockLevel> level) {
            this.level = Output.of(Objects.requireNonNull(level));
            return this;
        }
        public Builder lockName(@Nullable Output<String> lockName) {
            this.lockName = lockName;
            return this;
        }
        public Builder lockName(@Nullable String lockName) {
            this.lockName = Output.ofNullable(lockName);
            return this;
        }
        public Builder notes(@Nullable Output<String> notes) {
            this.notes = notes;
            return this;
        }
        public Builder notes(@Nullable String notes) {
            this.notes = Output.ofNullable(notes);
            return this;
        }
        public Builder owners(@Nullable Output<List<ManagementLockOwnerArgs>> owners) {
            this.owners = owners;
            return this;
        }
        public Builder owners(@Nullable List<ManagementLockOwnerArgs> owners) {
            this.owners = Output.ofNullable(owners);
            return this;
        }
        public Builder owners(ManagementLockOwnerArgs... owners) {
            return owners(List.of(owners));
        }
        public Builder parentResourcePath(Output<String> parentResourcePath) {
            this.parentResourcePath = Objects.requireNonNull(parentResourcePath);
            return this;
        }
        public Builder parentResourcePath(String parentResourcePath) {
            this.parentResourcePath = Output.of(Objects.requireNonNull(parentResourcePath));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder resourceName(Output<String> resourceName) {
            this.resourceName = Objects.requireNonNull(resourceName);
            return this;
        }
        public Builder resourceName(String resourceName) {
            this.resourceName = Output.of(Objects.requireNonNull(resourceName));
            return this;
        }
        public Builder resourceProviderNamespace(Output<String> resourceProviderNamespace) {
            this.resourceProviderNamespace = Objects.requireNonNull(resourceProviderNamespace);
            return this;
        }
        public Builder resourceProviderNamespace(String resourceProviderNamespace) {
            this.resourceProviderNamespace = Output.of(Objects.requireNonNull(resourceProviderNamespace));
            return this;
        }
        public Builder resourceType(Output<String> resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }
        public Builder resourceType(String resourceType) {
            this.resourceType = Output.of(Objects.requireNonNull(resourceType));
            return this;
        }        public ManagementLockAtResourceLevelArgs build() {
            return new ManagementLockAtResourceLevelArgs(level, lockName, notes, owners, parentResourcePath, resourceGroupName, resourceName, resourceProviderNamespace, resourceType);
        }
    }
}
