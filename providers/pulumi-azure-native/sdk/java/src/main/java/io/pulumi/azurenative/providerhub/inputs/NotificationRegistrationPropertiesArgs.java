// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.providerhub.inputs;

import io.pulumi.azurenative.providerhub.enums.MessageScope;
import io.pulumi.azurenative.providerhub.enums.NotificationMode;
import io.pulumi.azurenative.providerhub.enums.ProvisioningState;
import io.pulumi.azurenative.providerhub.inputs.NotificationEndpointArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NotificationRegistrationPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final NotificationRegistrationPropertiesArgs Empty = new NotificationRegistrationPropertiesArgs();

    @Import(name="includedEvents")
      private final @Nullable Output<List<String>> includedEvents;

    public Output<List<String>> getIncludedEvents() {
        return this.includedEvents == null ? Output.empty() : this.includedEvents;
    }

    @Import(name="messageScope")
      private final @Nullable Output<Either<String,MessageScope>> messageScope;

    public Output<Either<String,MessageScope>> getMessageScope() {
        return this.messageScope == null ? Output.empty() : this.messageScope;
    }

    @Import(name="notificationEndpoints")
      private final @Nullable Output<List<NotificationEndpointArgs>> notificationEndpoints;

    public Output<List<NotificationEndpointArgs>> getNotificationEndpoints() {
        return this.notificationEndpoints == null ? Output.empty() : this.notificationEndpoints;
    }

    @Import(name="notificationMode")
      private final @Nullable Output<Either<String,NotificationMode>> notificationMode;

    public Output<Either<String,NotificationMode>> getNotificationMode() {
        return this.notificationMode == null ? Output.empty() : this.notificationMode;
    }

    @Import(name="provisioningState")
      private final @Nullable Output<Either<String,ProvisioningState>> provisioningState;

    public Output<Either<String,ProvisioningState>> getProvisioningState() {
        return this.provisioningState == null ? Output.empty() : this.provisioningState;
    }

    public NotificationRegistrationPropertiesArgs(
        @Nullable Output<List<String>> includedEvents,
        @Nullable Output<Either<String,MessageScope>> messageScope,
        @Nullable Output<List<NotificationEndpointArgs>> notificationEndpoints,
        @Nullable Output<Either<String,NotificationMode>> notificationMode,
        @Nullable Output<Either<String,ProvisioningState>> provisioningState) {
        this.includedEvents = includedEvents;
        this.messageScope = messageScope;
        this.notificationEndpoints = notificationEndpoints;
        this.notificationMode = notificationMode;
        this.provisioningState = provisioningState;
    }

    private NotificationRegistrationPropertiesArgs() {
        this.includedEvents = Output.empty();
        this.messageScope = Output.empty();
        this.notificationEndpoints = Output.empty();
        this.notificationMode = Output.empty();
        this.provisioningState = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationRegistrationPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> includedEvents;
        private @Nullable Output<Either<String,MessageScope>> messageScope;
        private @Nullable Output<List<NotificationEndpointArgs>> notificationEndpoints;
        private @Nullable Output<Either<String,NotificationMode>> notificationMode;
        private @Nullable Output<Either<String,ProvisioningState>> provisioningState;

        public Builder() {
    	      // Empty
        }

        public Builder(NotificationRegistrationPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includedEvents = defaults.includedEvents;
    	      this.messageScope = defaults.messageScope;
    	      this.notificationEndpoints = defaults.notificationEndpoints;
    	      this.notificationMode = defaults.notificationMode;
    	      this.provisioningState = defaults.provisioningState;
        }

        public Builder includedEvents(@Nullable Output<List<String>> includedEvents) {
            this.includedEvents = includedEvents;
            return this;
        }
        public Builder includedEvents(@Nullable List<String> includedEvents) {
            this.includedEvents = Output.ofNullable(includedEvents);
            return this;
        }
        public Builder includedEvents(String... includedEvents) {
            return includedEvents(List.of(includedEvents));
        }
        public Builder messageScope(@Nullable Output<Either<String,MessageScope>> messageScope) {
            this.messageScope = messageScope;
            return this;
        }
        public Builder messageScope(@Nullable Either<String,MessageScope> messageScope) {
            this.messageScope = Output.ofNullable(messageScope);
            return this;
        }
        public Builder notificationEndpoints(@Nullable Output<List<NotificationEndpointArgs>> notificationEndpoints) {
            this.notificationEndpoints = notificationEndpoints;
            return this;
        }
        public Builder notificationEndpoints(@Nullable List<NotificationEndpointArgs> notificationEndpoints) {
            this.notificationEndpoints = Output.ofNullable(notificationEndpoints);
            return this;
        }
        public Builder notificationEndpoints(NotificationEndpointArgs... notificationEndpoints) {
            return notificationEndpoints(List.of(notificationEndpoints));
        }
        public Builder notificationMode(@Nullable Output<Either<String,NotificationMode>> notificationMode) {
            this.notificationMode = notificationMode;
            return this;
        }
        public Builder notificationMode(@Nullable Either<String,NotificationMode> notificationMode) {
            this.notificationMode = Output.ofNullable(notificationMode);
            return this;
        }
        public Builder provisioningState(@Nullable Output<Either<String,ProvisioningState>> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        public Builder provisioningState(@Nullable Either<String,ProvisioningState> provisioningState) {
            this.provisioningState = Output.ofNullable(provisioningState);
            return this;
        }        public NotificationRegistrationPropertiesArgs build() {
            return new NotificationRegistrationPropertiesArgs(includedEvents, messageScope, notificationEndpoints, notificationMode, provisioningState);
        }
    }
}
