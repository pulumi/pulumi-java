// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.videoanalyzer.inputs;

import io.pulumi.azurenative.videoanalyzer.inputs.EccTokenKeyArgs;
import io.pulumi.azurenative.videoanalyzer.inputs.RsaTokenKeyArgs;
import io.pulumi.azurenative.videoanalyzer.inputs.TokenClaimArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Properties for access validation based on JSON Web Tokens (JWT).
 * 
 */
public final class JwtAuthenticationArgs extends io.pulumi.resources.ResourceArgs {

    public static final JwtAuthenticationArgs Empty = new JwtAuthenticationArgs();

    /**
     * List of expected token audiences. Token audience is valid if it matches at least one of the given values.
     * 
     */
    @InputImport(name="audiences")
    private final @Nullable Input<List<String>> audiences;

    public Input<List<String>> getAudiences() {
        return this.audiences == null ? Input.empty() : this.audiences;
    }

    /**
     * List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid.
     * 
     */
    @InputImport(name="claims")
    private final @Nullable Input<List<TokenClaimArgs>> claims;

    public Input<List<TokenClaimArgs>> getClaims() {
        return this.claims == null ? Input.empty() : this.claims;
    }

    /**
     * List of expected token issuers. Token issuer is valid if it matches at least one of the given values.
     * 
     */
    @InputImport(name="issuers")
    private final @Nullable Input<List<String>> issuers;

    public Input<List<String>> getIssuers() {
        return this.issuers == null ? Input.empty() : this.issuers;
    }

    /**
     * List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the token signing key. Token signature must match exactly one key.
     * 
     */
    @InputImport(name="keys")
    private final @Nullable Input<List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>>> keys;

    public Input<List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>>> getKeys() {
        return this.keys == null ? Input.empty() : this.keys;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.VideoAnalyzer.JwtAuthentication'.
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public JwtAuthenticationArgs(
        @Nullable Input<List<String>> audiences,
        @Nullable Input<List<TokenClaimArgs>> claims,
        @Nullable Input<List<String>> issuers,
        @Nullable Input<List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>>> keys,
        Input<String> type) {
        this.audiences = audiences;
        this.claims = claims;
        this.issuers = issuers;
        this.keys = keys;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private JwtAuthenticationArgs() {
        this.audiences = Input.empty();
        this.claims = Input.empty();
        this.issuers = Input.empty();
        this.keys = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JwtAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> audiences;
        private @Nullable Input<List<TokenClaimArgs>> claims;
        private @Nullable Input<List<String>> issuers;
        private @Nullable Input<List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>>> keys;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(JwtAuthenticationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.claims = defaults.claims;
    	      this.issuers = defaults.issuers;
    	      this.keys = defaults.keys;
    	      this.type = defaults.type;
        }

        public Builder setAudiences(@Nullable Input<List<String>> audiences) {
            this.audiences = audiences;
            return this;
        }

        public Builder setAudiences(@Nullable List<String> audiences) {
            this.audiences = Input.ofNullable(audiences);
            return this;
        }

        public Builder setClaims(@Nullable Input<List<TokenClaimArgs>> claims) {
            this.claims = claims;
            return this;
        }

        public Builder setClaims(@Nullable List<TokenClaimArgs> claims) {
            this.claims = Input.ofNullable(claims);
            return this;
        }

        public Builder setIssuers(@Nullable Input<List<String>> issuers) {
            this.issuers = issuers;
            return this;
        }

        public Builder setIssuers(@Nullable List<String> issuers) {
            this.issuers = Input.ofNullable(issuers);
            return this;
        }

        public Builder setKeys(@Nullable Input<List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>>> keys) {
            this.keys = keys;
            return this;
        }

        public Builder setKeys(@Nullable List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>> keys) {
            this.keys = Input.ofNullable(keys);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public JwtAuthenticationArgs build() {
            return new JwtAuthenticationArgs(audiences, claims, issuers, keys, type);
        }
    }
}
