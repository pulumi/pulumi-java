// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JsonWriteSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final JsonWriteSettingsResponse Empty = new JsonWriteSettingsResponse();

    @InputImport(name="filePattern")
    private final @Nullable Object filePattern;

    public Optional<Object> getFilePattern() {
        return this.filePattern == null ? Optional.empty() : Optional.ofNullable(this.filePattern);
    }

    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    public JsonWriteSettingsResponse(
        @Nullable Object filePattern,
        String type) {
        this.filePattern = filePattern;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private JsonWriteSettingsResponse() {
        this.filePattern = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JsonWriteSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Object filePattern;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(JsonWriteSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filePattern = defaults.filePattern;
    	      this.type = defaults.type;
        }

        public Builder setFilePattern(@Nullable Object filePattern) {
            this.filePattern = filePattern;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public JsonWriteSettingsResponse build() {
            return new JsonWriteSettingsResponse(filePattern, type);
        }
    }
}
