// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.azurestackhci.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Cluster node details.
 * 
 */
public final class ClusterNodeResponse extends io.pulumi.resources.InvokeArgs {

    public static final ClusterNodeResponse Empty = new ClusterNodeResponse();

    /**
     * Number of physical cores on the cluster node.
     * 
     */
    @Import(name="coreCount", required=true)
      private final Double coreCount;

    public Double coreCount() {
        return this.coreCount;
    }

    /**
     * Id of the node in the cluster.
     * 
     */
    @Import(name="id", required=true)
      private final Double id;

    public Double id() {
        return this.id;
    }

    /**
     * Manufacturer of the cluster node hardware.
     * 
     */
    @Import(name="manufacturer", required=true)
      private final String manufacturer;

    public String manufacturer() {
        return this.manufacturer;
    }

    /**
     * Total available memory on the cluster node (in GiB).
     * 
     */
    @Import(name="memoryInGiB", required=true)
      private final Double memoryInGiB;

    public Double memoryInGiB() {
        return this.memoryInGiB;
    }

    /**
     * Model name of the cluster node hardware.
     * 
     */
    @Import(name="model", required=true)
      private final String model;

    public String model() {
        return this.model;
    }

    /**
     * Name of the cluster node.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * Operating system running on the cluster node.
     * 
     */
    @Import(name="osName", required=true)
      private final String osName;

    public String osName() {
        return this.osName;
    }

    /**
     * Version of the operating system running on the cluster node.
     * 
     */
    @Import(name="osVersion", required=true)
      private final String osVersion;

    public String osVersion() {
        return this.osVersion;
    }

    /**
     * Immutable id of the cluster node.
     * 
     */
    @Import(name="serialNumber", required=true)
      private final String serialNumber;

    public String serialNumber() {
        return this.serialNumber;
    }

    public ClusterNodeResponse(
        Double coreCount,
        Double id,
        String manufacturer,
        Double memoryInGiB,
        String model,
        String name,
        String osName,
        String osVersion,
        String serialNumber) {
        this.coreCount = Objects.requireNonNull(coreCount, "expected parameter 'coreCount' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.manufacturer = Objects.requireNonNull(manufacturer, "expected parameter 'manufacturer' to be non-null");
        this.memoryInGiB = Objects.requireNonNull(memoryInGiB, "expected parameter 'memoryInGiB' to be non-null");
        this.model = Objects.requireNonNull(model, "expected parameter 'model' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.osName = Objects.requireNonNull(osName, "expected parameter 'osName' to be non-null");
        this.osVersion = Objects.requireNonNull(osVersion, "expected parameter 'osVersion' to be non-null");
        this.serialNumber = Objects.requireNonNull(serialNumber, "expected parameter 'serialNumber' to be non-null");
    }

    private ClusterNodeResponse() {
        this.coreCount = null;
        this.id = null;
        this.manufacturer = null;
        this.memoryInGiB = null;
        this.model = null;
        this.name = null;
        this.osName = null;
        this.osVersion = null;
        this.serialNumber = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNodeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double coreCount;
        private Double id;
        private String manufacturer;
        private Double memoryInGiB;
        private String model;
        private String name;
        private String osName;
        private String osVersion;
        private String serialNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterNodeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.coreCount = defaults.coreCount;
    	      this.id = defaults.id;
    	      this.manufacturer = defaults.manufacturer;
    	      this.memoryInGiB = defaults.memoryInGiB;
    	      this.model = defaults.model;
    	      this.name = defaults.name;
    	      this.osName = defaults.osName;
    	      this.osVersion = defaults.osVersion;
    	      this.serialNumber = defaults.serialNumber;
        }

        public Builder coreCount(Double coreCount) {
            this.coreCount = Objects.requireNonNull(coreCount);
            return this;
        }
        public Builder id(Double id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder manufacturer(String manufacturer) {
            this.manufacturer = Objects.requireNonNull(manufacturer);
            return this;
        }
        public Builder memoryInGiB(Double memoryInGiB) {
            this.memoryInGiB = Objects.requireNonNull(memoryInGiB);
            return this;
        }
        public Builder model(String model) {
            this.model = Objects.requireNonNull(model);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder osName(String osName) {
            this.osName = Objects.requireNonNull(osName);
            return this;
        }
        public Builder osVersion(String osVersion) {
            this.osVersion = Objects.requireNonNull(osVersion);
            return this;
        }
        public Builder serialNumber(String serialNumber) {
            this.serialNumber = Objects.requireNonNull(serialNumber);
            return this;
        }        public ClusterNodeResponse build() {
            return new ClusterNodeResponse(coreCount, id, manufacturer, memoryInGiB, model, name, osName, osVersion, serialNumber);
        }
    }
}
