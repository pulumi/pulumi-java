// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement.inputs;

import io.pulumi.azurenative.costmanagement.enums.GranularityType;
import io.pulumi.azurenative.costmanagement.inputs.ReportAggregationArgs;
import io.pulumi.azurenative.costmanagement.inputs.ReportDatasetConfigurationArgs;
import io.pulumi.azurenative.costmanagement.inputs.ReportFilterArgs;
import io.pulumi.azurenative.costmanagement.inputs.ReportGroupingArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The definition of data present in the report.
 * 
 */
public final class ReportDatasetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReportDatasetArgs Empty = new ReportDatasetArgs();

    /**
     * Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
     * 
     */
    @InputImport(name="aggregation")
    private final @Nullable Input<Map<String,ReportAggregationArgs>> aggregation;

    public Input<Map<String,ReportAggregationArgs>> getAggregation() {
        return this.aggregation == null ? Input.empty() : this.aggregation;
    }

    /**
     * Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
     * 
     */
    @InputImport(name="configuration")
    private final @Nullable Input<ReportDatasetConfigurationArgs> configuration;

    public Input<ReportDatasetConfigurationArgs> getConfiguration() {
        return this.configuration == null ? Input.empty() : this.configuration;
    }

    /**
     * Has filter expression to use in the report.
     * 
     */
    @InputImport(name="filter")
    private final @Nullable Input<ReportFilterArgs> filter;

    public Input<ReportFilterArgs> getFilter() {
        return this.filter == null ? Input.empty() : this.filter;
    }

    /**
     * The granularity of rows in the report.
     * 
     */
    @InputImport(name="granularity")
    private final @Nullable Input<Either<String,GranularityType>> granularity;

    public Input<Either<String,GranularityType>> getGranularity() {
        return this.granularity == null ? Input.empty() : this.granularity;
    }

    /**
     * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
     * 
     */
    @InputImport(name="grouping")
    private final @Nullable Input<List<ReportGroupingArgs>> grouping;

    public Input<List<ReportGroupingArgs>> getGrouping() {
        return this.grouping == null ? Input.empty() : this.grouping;
    }

    public ReportDatasetArgs(
        @Nullable Input<Map<String,ReportAggregationArgs>> aggregation,
        @Nullable Input<ReportDatasetConfigurationArgs> configuration,
        @Nullable Input<ReportFilterArgs> filter,
        @Nullable Input<Either<String,GranularityType>> granularity,
        @Nullable Input<List<ReportGroupingArgs>> grouping) {
        this.aggregation = aggregation;
        this.configuration = configuration;
        this.filter = filter;
        this.granularity = granularity;
        this.grouping = grouping;
    }

    private ReportDatasetArgs() {
        this.aggregation = Input.empty();
        this.configuration = Input.empty();
        this.filter = Input.empty();
        this.granularity = Input.empty();
        this.grouping = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportDatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Map<String,ReportAggregationArgs>> aggregation;
        private @Nullable Input<ReportDatasetConfigurationArgs> configuration;
        private @Nullable Input<ReportFilterArgs> filter;
        private @Nullable Input<Either<String,GranularityType>> granularity;
        private @Nullable Input<List<ReportGroupingArgs>> grouping;

        public Builder() {
    	      // Empty
        }

        public Builder(ReportDatasetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregation = defaults.aggregation;
    	      this.configuration = defaults.configuration;
    	      this.filter = defaults.filter;
    	      this.granularity = defaults.granularity;
    	      this.grouping = defaults.grouping;
        }

        public Builder setAggregation(@Nullable Input<Map<String,ReportAggregationArgs>> aggregation) {
            this.aggregation = aggregation;
            return this;
        }

        public Builder setAggregation(@Nullable Map<String,ReportAggregationArgs> aggregation) {
            this.aggregation = Input.ofNullable(aggregation);
            return this;
        }

        public Builder setConfiguration(@Nullable Input<ReportDatasetConfigurationArgs> configuration) {
            this.configuration = configuration;
            return this;
        }

        public Builder setConfiguration(@Nullable ReportDatasetConfigurationArgs configuration) {
            this.configuration = Input.ofNullable(configuration);
            return this;
        }

        public Builder setFilter(@Nullable Input<ReportFilterArgs> filter) {
            this.filter = filter;
            return this;
        }

        public Builder setFilter(@Nullable ReportFilterArgs filter) {
            this.filter = Input.ofNullable(filter);
            return this;
        }

        public Builder setGranularity(@Nullable Input<Either<String,GranularityType>> granularity) {
            this.granularity = granularity;
            return this;
        }

        public Builder setGranularity(@Nullable Either<String,GranularityType> granularity) {
            this.granularity = Input.ofNullable(granularity);
            return this;
        }

        public Builder setGrouping(@Nullable Input<List<ReportGroupingArgs>> grouping) {
            this.grouping = grouping;
            return this;
        }

        public Builder setGrouping(@Nullable List<ReportGroupingArgs> grouping) {
            this.grouping = Input.ofNullable(grouping);
            return this;
        }

        public ReportDatasetArgs build() {
            return new ReportDatasetArgs(aggregation, configuration, filter, granularity, grouping);
        }
    }
}
