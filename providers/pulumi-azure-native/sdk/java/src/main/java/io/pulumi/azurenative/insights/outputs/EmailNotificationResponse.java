// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EmailNotificationResponse {
    /**
     * the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
     * 
     */
    private final @Nullable List<String> customEmails;
    /**
     * a value indicating whether to send email to subscription administrator.
     * 
     */
    private final @Nullable Boolean sendToSubscriptionAdministrator;
    /**
     * a value indicating whether to send email to subscription co-administrators.
     * 
     */
    private final @Nullable Boolean sendToSubscriptionCoAdministrators;

    @CustomType.Constructor
    private EmailNotificationResponse(
        @CustomType.Parameter("customEmails") @Nullable List<String> customEmails,
        @CustomType.Parameter("sendToSubscriptionAdministrator") @Nullable Boolean sendToSubscriptionAdministrator,
        @CustomType.Parameter("sendToSubscriptionCoAdministrators") @Nullable Boolean sendToSubscriptionCoAdministrators) {
        this.customEmails = customEmails;
        this.sendToSubscriptionAdministrator = sendToSubscriptionAdministrator;
        this.sendToSubscriptionCoAdministrators = sendToSubscriptionCoAdministrators;
    }

    /**
     * the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
     * 
    */
    public List<String> getCustomEmails() {
        return this.customEmails == null ? List.of() : this.customEmails;
    }
    /**
     * a value indicating whether to send email to subscription administrator.
     * 
    */
    public Optional<Boolean> getSendToSubscriptionAdministrator() {
        return Optional.ofNullable(this.sendToSubscriptionAdministrator);
    }
    /**
     * a value indicating whether to send email to subscription co-administrators.
     * 
    */
    public Optional<Boolean> getSendToSubscriptionCoAdministrators() {
        return Optional.ofNullable(this.sendToSubscriptionCoAdministrators);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EmailNotificationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> customEmails;
        private @Nullable Boolean sendToSubscriptionAdministrator;
        private @Nullable Boolean sendToSubscriptionCoAdministrators;

        public Builder() {
    	      // Empty
        }

        public Builder(EmailNotificationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customEmails = defaults.customEmails;
    	      this.sendToSubscriptionAdministrator = defaults.sendToSubscriptionAdministrator;
    	      this.sendToSubscriptionCoAdministrators = defaults.sendToSubscriptionCoAdministrators;
        }

        public Builder customEmails(@Nullable List<String> customEmails) {
            this.customEmails = customEmails;
            return this;
        }
        public Builder customEmails(String... customEmails) {
            return customEmails(List.of(customEmails));
        }
        public Builder sendToSubscriptionAdministrator(@Nullable Boolean sendToSubscriptionAdministrator) {
            this.sendToSubscriptionAdministrator = sendToSubscriptionAdministrator;
            return this;
        }
        public Builder sendToSubscriptionCoAdministrators(@Nullable Boolean sendToSubscriptionCoAdministrators) {
            this.sendToSubscriptionCoAdministrators = sendToSubscriptionCoAdministrators;
            return this;
        }        public EmailNotificationResponse build() {
            return new EmailNotificationResponse(customEmails, sendToSubscriptionAdministrator, sendToSubscriptionCoAdministrators);
        }
    }
}
