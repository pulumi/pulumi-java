// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.securityinsights;

import io.pulumi.azurenative.securityinsights.enums.Kind;
import io.pulumi.azurenative.securityinsights.inputs.MetadataAuthorArgs;
import io.pulumi.azurenative.securityinsights.inputs.MetadataCategoriesArgs;
import io.pulumi.azurenative.securityinsights.inputs.MetadataDependenciesArgs;
import io.pulumi.azurenative.securityinsights.inputs.MetadataSourceArgs;
import io.pulumi.azurenative.securityinsights.inputs.MetadataSupportArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MetadataArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetadataArgs Empty = new MetadataArgs();

    /**
     * The creator of the content item.
     * 
     */
    @InputImport(name="author")
      private final @Nullable Output<MetadataAuthorArgs> author;

    public Output<MetadataAuthorArgs> getAuthor() {
        return this.author == null ? Output.empty() : this.author;
    }

    /**
     * Categories for the solution content item
     * 
     */
    @InputImport(name="categories")
      private final @Nullable Output<MetadataCategoriesArgs> categories;

    public Output<MetadataCategoriesArgs> getCategories() {
        return this.categories == null ? Output.empty() : this.categories;
    }

    /**
     * Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
     * 
     */
    @InputImport(name="contentId")
      private final @Nullable Output<String> contentId;

    public Output<String> getContentId() {
        return this.contentId == null ? Output.empty() : this.contentId;
    }

    /**
     * Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
     * 
     */
    @InputImport(name="dependencies")
      private final @Nullable Output<MetadataDependenciesArgs> dependencies;

    public Output<MetadataDependenciesArgs> getDependencies() {
        return this.dependencies == null ? Output.empty() : this.dependencies;
    }

    /**
     * first publish date solution content item
     * 
     */
    @InputImport(name="firstPublishDate")
      private final @Nullable Output<String> firstPublishDate;

    public Output<String> getFirstPublishDate() {
        return this.firstPublishDate == null ? Output.empty() : this.firstPublishDate;
    }

    /**
     * The kind of content the metadata is for.
     * 
     */
    @InputImport(name="kind", required=true)
      private final Output<Either<String,Kind>> kind;

    public Output<Either<String,Kind>> getKind() {
        return this.kind;
    }

    /**
     * last publish date for the solution content item
     * 
     */
    @InputImport(name="lastPublishDate")
      private final @Nullable Output<String> lastPublishDate;

    public Output<String> getLastPublishDate() {
        return this.lastPublishDate == null ? Output.empty() : this.lastPublishDate;
    }

    /**
     * The Metadata name.
     * 
     */
    @InputImport(name="metadataName")
      private final @Nullable Output<String> metadataName;

    public Output<String> getMetadataName() {
        return this.metadataName == null ? Output.empty() : this.metadataName;
    }

    /**
     * The namespace of workspaces resource provider- Microsoft.OperationalInsights.
     * 
     */
    @InputImport(name="operationalInsightsResourceProvider", required=true)
      private final Output<String> operationalInsightsResourceProvider;

    public Output<String> getOperationalInsightsResourceProvider() {
        return this.operationalInsightsResourceProvider;
    }

    /**
     * Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
     * 
     */
    @InputImport(name="parentId", required=true)
      private final Output<String> parentId;

    public Output<String> getParentId() {
        return this.parentId;
    }

    /**
     * Providers for the solution content item
     * 
     */
    @InputImport(name="providers")
      private final @Nullable Output<List<String>> providers;

    public Output<List<String>> getProviders() {
        return this.providers == null ? Output.empty() : this.providers;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Source of the content.  This is where/how it was created.
     * 
     */
    @InputImport(name="source")
      private final @Nullable Output<MetadataSourceArgs> source;

    public Output<MetadataSourceArgs> getSource() {
        return this.source == null ? Output.empty() : this.source;
    }

    /**
     * Support information for the metadata - type, name, contact information
     * 
     */
    @InputImport(name="support")
      private final @Nullable Output<MetadataSupportArgs> support;

    public Output<MetadataSupportArgs> getSupport() {
        return this.support == null ? Output.empty() : this.support;
    }

    /**
     * Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
     * 
     */
    @InputImport(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Output.empty() : this.version;
    }

    /**
     * The name of the workspace.
     * 
     */
    @InputImport(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public MetadataArgs(
        @Nullable Output<MetadataAuthorArgs> author,
        @Nullable Output<MetadataCategoriesArgs> categories,
        @Nullable Output<String> contentId,
        @Nullable Output<MetadataDependenciesArgs> dependencies,
        @Nullable Output<String> firstPublishDate,
        Output<Either<String,Kind>> kind,
        @Nullable Output<String> lastPublishDate,
        @Nullable Output<String> metadataName,
        Output<String> operationalInsightsResourceProvider,
        Output<String> parentId,
        @Nullable Output<List<String>> providers,
        Output<String> resourceGroupName,
        @Nullable Output<MetadataSourceArgs> source,
        @Nullable Output<MetadataSupportArgs> support,
        @Nullable Output<String> version,
        Output<String> workspaceName) {
        this.author = author;
        this.categories = categories;
        this.contentId = contentId;
        this.dependencies = dependencies;
        this.firstPublishDate = firstPublishDate;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.lastPublishDate = lastPublishDate;
        this.metadataName = metadataName;
        this.operationalInsightsResourceProvider = Objects.requireNonNull(operationalInsightsResourceProvider, "expected parameter 'operationalInsightsResourceProvider' to be non-null");
        this.parentId = Objects.requireNonNull(parentId, "expected parameter 'parentId' to be non-null");
        this.providers = providers;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.source = source;
        this.support = support;
        this.version = version;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private MetadataArgs() {
        this.author = Output.empty();
        this.categories = Output.empty();
        this.contentId = Output.empty();
        this.dependencies = Output.empty();
        this.firstPublishDate = Output.empty();
        this.kind = Output.empty();
        this.lastPublishDate = Output.empty();
        this.metadataName = Output.empty();
        this.operationalInsightsResourceProvider = Output.empty();
        this.parentId = Output.empty();
        this.providers = Output.empty();
        this.resourceGroupName = Output.empty();
        this.source = Output.empty();
        this.support = Output.empty();
        this.version = Output.empty();
        this.workspaceName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<MetadataAuthorArgs> author;
        private @Nullable Output<MetadataCategoriesArgs> categories;
        private @Nullable Output<String> contentId;
        private @Nullable Output<MetadataDependenciesArgs> dependencies;
        private @Nullable Output<String> firstPublishDate;
        private Output<Either<String,Kind>> kind;
        private @Nullable Output<String> lastPublishDate;
        private @Nullable Output<String> metadataName;
        private Output<String> operationalInsightsResourceProvider;
        private Output<String> parentId;
        private @Nullable Output<List<String>> providers;
        private Output<String> resourceGroupName;
        private @Nullable Output<MetadataSourceArgs> source;
        private @Nullable Output<MetadataSupportArgs> support;
        private @Nullable Output<String> version;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(MetadataArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.author = defaults.author;
    	      this.categories = defaults.categories;
    	      this.contentId = defaults.contentId;
    	      this.dependencies = defaults.dependencies;
    	      this.firstPublishDate = defaults.firstPublishDate;
    	      this.kind = defaults.kind;
    	      this.lastPublishDate = defaults.lastPublishDate;
    	      this.metadataName = defaults.metadataName;
    	      this.operationalInsightsResourceProvider = defaults.operationalInsightsResourceProvider;
    	      this.parentId = defaults.parentId;
    	      this.providers = defaults.providers;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.source = defaults.source;
    	      this.support = defaults.support;
    	      this.version = defaults.version;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder author(@Nullable Output<MetadataAuthorArgs> author) {
            this.author = author;
            return this;
        }

        public Builder author(@Nullable MetadataAuthorArgs author) {
            this.author = Output.ofNullable(author);
            return this;
        }

        public Builder categories(@Nullable Output<MetadataCategoriesArgs> categories) {
            this.categories = categories;
            return this;
        }

        public Builder categories(@Nullable MetadataCategoriesArgs categories) {
            this.categories = Output.ofNullable(categories);
            return this;
        }

        public Builder contentId(@Nullable Output<String> contentId) {
            this.contentId = contentId;
            return this;
        }

        public Builder contentId(@Nullable String contentId) {
            this.contentId = Output.ofNullable(contentId);
            return this;
        }

        public Builder dependencies(@Nullable Output<MetadataDependenciesArgs> dependencies) {
            this.dependencies = dependencies;
            return this;
        }

        public Builder dependencies(@Nullable MetadataDependenciesArgs dependencies) {
            this.dependencies = Output.ofNullable(dependencies);
            return this;
        }

        public Builder firstPublishDate(@Nullable Output<String> firstPublishDate) {
            this.firstPublishDate = firstPublishDate;
            return this;
        }

        public Builder firstPublishDate(@Nullable String firstPublishDate) {
            this.firstPublishDate = Output.ofNullable(firstPublishDate);
            return this;
        }

        public Builder kind(Output<Either<String,Kind>> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder kind(Either<String,Kind> kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }

        public Builder lastPublishDate(@Nullable Output<String> lastPublishDate) {
            this.lastPublishDate = lastPublishDate;
            return this;
        }

        public Builder lastPublishDate(@Nullable String lastPublishDate) {
            this.lastPublishDate = Output.ofNullable(lastPublishDate);
            return this;
        }

        public Builder metadataName(@Nullable Output<String> metadataName) {
            this.metadataName = metadataName;
            return this;
        }

        public Builder metadataName(@Nullable String metadataName) {
            this.metadataName = Output.ofNullable(metadataName);
            return this;
        }

        public Builder operationalInsightsResourceProvider(Output<String> operationalInsightsResourceProvider) {
            this.operationalInsightsResourceProvider = Objects.requireNonNull(operationalInsightsResourceProvider);
            return this;
        }

        public Builder operationalInsightsResourceProvider(String operationalInsightsResourceProvider) {
            this.operationalInsightsResourceProvider = Output.of(Objects.requireNonNull(operationalInsightsResourceProvider));
            return this;
        }

        public Builder parentId(Output<String> parentId) {
            this.parentId = Objects.requireNonNull(parentId);
            return this;
        }

        public Builder parentId(String parentId) {
            this.parentId = Output.of(Objects.requireNonNull(parentId));
            return this;
        }

        public Builder providers(@Nullable Output<List<String>> providers) {
            this.providers = providers;
            return this;
        }

        public Builder providers(@Nullable List<String> providers) {
            this.providers = Output.ofNullable(providers);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder source(@Nullable Output<MetadataSourceArgs> source) {
            this.source = source;
            return this;
        }

        public Builder source(@Nullable MetadataSourceArgs source) {
            this.source = Output.ofNullable(source);
            return this;
        }

        public Builder support(@Nullable Output<MetadataSupportArgs> support) {
            this.support = support;
            return this;
        }

        public Builder support(@Nullable MetadataSupportArgs support) {
            this.support = Output.ofNullable(support);
            return this;
        }

        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }

        public Builder version(@Nullable String version) {
            this.version = Output.ofNullable(version);
            return this;
        }

        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public MetadataArgs build() {
            return new MetadataArgs(author, categories, contentId, dependencies, firstPublishDate, kind, lastPublishDate, metadataName, operationalInsightsResourceProvider, parentId, providers, resourceGroupName, source, support, version, workspaceName);
        }
    }
}
