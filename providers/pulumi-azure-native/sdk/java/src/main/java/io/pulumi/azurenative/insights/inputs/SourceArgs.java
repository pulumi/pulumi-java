// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.azurenative.insights.enums.QueryType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies the log search query.
 * 
 */
public final class SourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final SourceArgs Empty = new SourceArgs();

    /**
     * List of  Resource referred into query
     * 
     */
    @InputImport(name="authorizedResources")
    private final @Nullable Input<List<String>> authorizedResources;

    public Input<List<String>> getAuthorizedResources() {
        return this.authorizedResources == null ? Input.empty() : this.authorizedResources;
    }

    /**
     * The resource uri over which log search query is to be run.
     * 
     */
    @InputImport(name="dataSourceId", required=true)
    private final Input<String> dataSourceId;

    public Input<String> getDataSourceId() {
        return this.dataSourceId;
    }

    /**
     * Log search query. Required for action type - AlertingAction
     * 
     */
    @InputImport(name="query")
    private final @Nullable Input<String> query;

    public Input<String> getQuery() {
        return this.query == null ? Input.empty() : this.query;
    }

    /**
     * Set value to 'ResultCount' .
     * 
     */
    @InputImport(name="queryType")
    private final @Nullable Input<Either<String,QueryType>> queryType;

    public Input<Either<String,QueryType>> getQueryType() {
        return this.queryType == null ? Input.empty() : this.queryType;
    }

    public SourceArgs(
        @Nullable Input<List<String>> authorizedResources,
        Input<String> dataSourceId,
        @Nullable Input<String> query,
        @Nullable Input<Either<String,QueryType>> queryType) {
        this.authorizedResources = authorizedResources;
        this.dataSourceId = Objects.requireNonNull(dataSourceId, "expected parameter 'dataSourceId' to be non-null");
        this.query = query;
        this.queryType = queryType;
    }

    private SourceArgs() {
        this.authorizedResources = Input.empty();
        this.dataSourceId = Input.empty();
        this.query = Input.empty();
        this.queryType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> authorizedResources;
        private Input<String> dataSourceId;
        private @Nullable Input<String> query;
        private @Nullable Input<Either<String,QueryType>> queryType;

        public Builder() {
    	      // Empty
        }

        public Builder(SourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizedResources = defaults.authorizedResources;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.query = defaults.query;
    	      this.queryType = defaults.queryType;
        }

        public Builder setAuthorizedResources(@Nullable Input<List<String>> authorizedResources) {
            this.authorizedResources = authorizedResources;
            return this;
        }

        public Builder setAuthorizedResources(@Nullable List<String> authorizedResources) {
            this.authorizedResources = Input.ofNullable(authorizedResources);
            return this;
        }

        public Builder setDataSourceId(Input<String> dataSourceId) {
            this.dataSourceId = Objects.requireNonNull(dataSourceId);
            return this;
        }

        public Builder setDataSourceId(String dataSourceId) {
            this.dataSourceId = Input.of(Objects.requireNonNull(dataSourceId));
            return this;
        }

        public Builder setQuery(@Nullable Input<String> query) {
            this.query = query;
            return this;
        }

        public Builder setQuery(@Nullable String query) {
            this.query = Input.ofNullable(query);
            return this;
        }

        public Builder setQueryType(@Nullable Input<Either<String,QueryType>> queryType) {
            this.queryType = queryType;
            return this;
        }

        public Builder setQueryType(@Nullable Either<String,QueryType> queryType) {
            this.queryType = Input.ofNullable(queryType);
            return this;
        }

        public SourceArgs build() {
            return new SourceArgs(authorizedResources, dataSourceId, query, queryType);
        }
    }
}
