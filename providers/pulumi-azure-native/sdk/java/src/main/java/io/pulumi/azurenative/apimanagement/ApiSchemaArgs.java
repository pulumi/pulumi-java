// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApiSchemaArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApiSchemaArgs Empty = new ApiSchemaArgs();

    /**
     * API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * 
     */
    @Import(name="apiId", required=true)
      private final Output<String> apiId;

    public Output<String> apiId() {
        return this.apiId;
    }

    /**
     * Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media type of the schema document (e.g. application/json, application/xml). </br> - `Swagger` Schema use `application/vnd.ms-azure-apim.swagger.definitions+json` </br> - `WSDL` Schema use `application/vnd.ms-azure-apim.xsd+xml` </br> - `OpenApi` Schema use `application/vnd.oai.openapi.components+json` </br> - `WADL Schema` use `application/vnd.ms-azure-apim.wadl.grammars+xml`.
     * 
     */
    @Import(name="contentType", required=true)
      private final Output<String> contentType;

    public Output<String> contentType() {
        return this.contentType;
    }

    /**
     * Types definitions. Used for Swagger/OpenAPI schemas only, null otherwise.
     * 
     */
    @Import(name="definitions")
      private final @Nullable Output<Object> definitions;

    public Output<Object> definitions() {
        return this.definitions == null ? Codegen.empty() : this.definitions;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Schema identifier within an API. Must be unique in the current API Management service instance.
     * 
     */
    @Import(name="schemaId")
      private final @Nullable Output<String> schemaId;

    public Output<String> schemaId() {
        return this.schemaId == null ? Codegen.empty() : this.schemaId;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Json escaped string defining the document representing the Schema. Used for schemas other than Swagger/OpenAPI.
     * 
     */
    @Import(name="value")
      private final @Nullable Output<String> value;

    public Output<String> value() {
        return this.value == null ? Codegen.empty() : this.value;
    }

    public ApiSchemaArgs(
        Output<String> apiId,
        Output<String> contentType,
        @Nullable Output<Object> definitions,
        Output<String> resourceGroupName,
        @Nullable Output<String> schemaId,
        Output<String> serviceName,
        @Nullable Output<String> value) {
        this.apiId = Objects.requireNonNull(apiId, "expected parameter 'apiId' to be non-null");
        this.contentType = Objects.requireNonNull(contentType, "expected parameter 'contentType' to be non-null");
        this.definitions = definitions;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.schemaId = schemaId;
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.value = value;
    }

    private ApiSchemaArgs() {
        this.apiId = Codegen.empty();
        this.contentType = Codegen.empty();
        this.definitions = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.schemaId = Codegen.empty();
        this.serviceName = Codegen.empty();
        this.value = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApiSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> apiId;
        private Output<String> contentType;
        private @Nullable Output<Object> definitions;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> schemaId;
        private Output<String> serviceName;
        private @Nullable Output<String> value;

        public Builder() {
    	      // Empty
        }

        public Builder(ApiSchemaArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiId = defaults.apiId;
    	      this.contentType = defaults.contentType;
    	      this.definitions = defaults.definitions;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.schemaId = defaults.schemaId;
    	      this.serviceName = defaults.serviceName;
    	      this.value = defaults.value;
        }

        public Builder apiId(Output<String> apiId) {
            this.apiId = Objects.requireNonNull(apiId);
            return this;
        }
        public Builder apiId(String apiId) {
            this.apiId = Output.of(Objects.requireNonNull(apiId));
            return this;
        }
        public Builder contentType(Output<String> contentType) {
            this.contentType = Objects.requireNonNull(contentType);
            return this;
        }
        public Builder contentType(String contentType) {
            this.contentType = Output.of(Objects.requireNonNull(contentType));
            return this;
        }
        public Builder definitions(@Nullable Output<Object> definitions) {
            this.definitions = definitions;
            return this;
        }
        public Builder definitions(@Nullable Object definitions) {
            this.definitions = Codegen.ofNullable(definitions);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder schemaId(@Nullable Output<String> schemaId) {
            this.schemaId = schemaId;
            return this;
        }
        public Builder schemaId(@Nullable String schemaId) {
            this.schemaId = Codegen.ofNullable(schemaId);
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public Builder value(@Nullable Output<String> value) {
            this.value = value;
            return this;
        }
        public Builder value(@Nullable String value) {
            this.value = Codegen.ofNullable(value);
            return this;
        }        public ApiSchemaArgs build() {
            return new ApiSchemaArgs(apiId, contentType, definitions, resourceGroupName, schemaId, serviceName, value);
        }
    }
}
