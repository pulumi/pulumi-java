// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.aad;

import io.pulumi.azurenative.aad.enums.FilteredSync;
import io.pulumi.azurenative.aad.inputs.DomainSecuritySettingsArgs;
import io.pulumi.azurenative.aad.inputs.LdapsSettingsArgs;
import io.pulumi.azurenative.aad.inputs.NotificationSettingsArgs;
import io.pulumi.azurenative.aad.inputs.ReplicaSetArgs;
import io.pulumi.azurenative.aad.inputs.ResourceForestSettingsArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final DomainServiceArgs Empty = new DomainServiceArgs();

    /**
     * Domain Configuration Type
     * 
     */
    @InputImport(name="domainConfigurationType")
      private final @Nullable Input<String> domainConfigurationType;

    public Input<String> getDomainConfigurationType() {
        return this.domainConfigurationType == null ? Input.empty() : this.domainConfigurationType;
    }

    /**
     * The name of the Azure domain that the user would like to deploy Domain Services to.
     * 
     */
    @InputImport(name="domainName")
      private final @Nullable Input<String> domainName;

    public Input<String> getDomainName() {
        return this.domainName == null ? Input.empty() : this.domainName;
    }

    /**
     * DomainSecurity Settings
     * 
     */
    @InputImport(name="domainSecuritySettings")
      private final @Nullable Input<DomainSecuritySettingsArgs> domainSecuritySettings;

    public Input<DomainSecuritySettingsArgs> getDomainSecuritySettings() {
        return this.domainSecuritySettings == null ? Input.empty() : this.domainSecuritySettings;
    }

    /**
     * The name of the domain service.
     * 
     */
    @InputImport(name="domainServiceName")
      private final @Nullable Input<String> domainServiceName;

    public Input<String> getDomainServiceName() {
        return this.domainServiceName == null ? Input.empty() : this.domainServiceName;
    }

    /**
     * Enabled or Disabled flag to turn on Group-based filtered sync
     * 
     */
    @InputImport(name="filteredSync")
      private final @Nullable Input<Either<String,FilteredSync>> filteredSync;

    public Input<Either<String,FilteredSync>> getFilteredSync() {
        return this.filteredSync == null ? Input.empty() : this.filteredSync;
    }

    /**
     * Secure LDAP Settings
     * 
     */
    @InputImport(name="ldapsSettings")
      private final @Nullable Input<LdapsSettingsArgs> ldapsSettings;

    public Input<LdapsSettingsArgs> getLdapsSettings() {
        return this.ldapsSettings == null ? Input.empty() : this.ldapsSettings;
    }

    /**
     * Resource location
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Notification Settings
     * 
     */
    @InputImport(name="notificationSettings")
      private final @Nullable Input<NotificationSettingsArgs> notificationSettings;

    public Input<NotificationSettingsArgs> getNotificationSettings() {
        return this.notificationSettings == null ? Input.empty() : this.notificationSettings;
    }

    /**
     * List of ReplicaSets
     * 
     */
    @InputImport(name="replicaSets")
      private final @Nullable Input<List<ReplicaSetArgs>> replicaSets;

    public Input<List<ReplicaSetArgs>> getReplicaSets() {
        return this.replicaSets == null ? Input.empty() : this.replicaSets;
    }

    /**
     * Resource Forest Settings
     * 
     */
    @InputImport(name="resourceForestSettings")
      private final @Nullable Input<ResourceForestSettingsArgs> resourceForestSettings;

    public Input<ResourceForestSettingsArgs> getResourceForestSettings() {
        return this.resourceForestSettings == null ? Input.empty() : this.resourceForestSettings;
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Sku Type
     * 
     */
    @InputImport(name="sku")
      private final @Nullable Input<String> sku;

    public Input<String> getSku() {
        return this.sku == null ? Input.empty() : this.sku;
    }

    /**
     * Resource tags
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public DomainServiceArgs(
        @Nullable Input<String> domainConfigurationType,
        @Nullable Input<String> domainName,
        @Nullable Input<DomainSecuritySettingsArgs> domainSecuritySettings,
        @Nullable Input<String> domainServiceName,
        @Nullable Input<Either<String,FilteredSync>> filteredSync,
        @Nullable Input<LdapsSettingsArgs> ldapsSettings,
        @Nullable Input<String> location,
        @Nullable Input<NotificationSettingsArgs> notificationSettings,
        @Nullable Input<List<ReplicaSetArgs>> replicaSets,
        @Nullable Input<ResourceForestSettingsArgs> resourceForestSettings,
        Input<String> resourceGroupName,
        @Nullable Input<String> sku,
        @Nullable Input<Map<String,String>> tags) {
        this.domainConfigurationType = domainConfigurationType;
        this.domainName = domainName;
        this.domainSecuritySettings = domainSecuritySettings;
        this.domainServiceName = domainServiceName;
        this.filteredSync = filteredSync;
        this.ldapsSettings = ldapsSettings;
        this.location = location;
        this.notificationSettings = notificationSettings;
        this.replicaSets = replicaSets;
        this.resourceForestSettings = resourceForestSettings;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.tags = tags;
    }

    private DomainServiceArgs() {
        this.domainConfigurationType = Input.empty();
        this.domainName = Input.empty();
        this.domainSecuritySettings = Input.empty();
        this.domainServiceName = Input.empty();
        this.filteredSync = Input.empty();
        this.ldapsSettings = Input.empty();
        this.location = Input.empty();
        this.notificationSettings = Input.empty();
        this.replicaSets = Input.empty();
        this.resourceForestSettings = Input.empty();
        this.resourceGroupName = Input.empty();
        this.sku = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> domainConfigurationType;
        private @Nullable Input<String> domainName;
        private @Nullable Input<DomainSecuritySettingsArgs> domainSecuritySettings;
        private @Nullable Input<String> domainServiceName;
        private @Nullable Input<Either<String,FilteredSync>> filteredSync;
        private @Nullable Input<LdapsSettingsArgs> ldapsSettings;
        private @Nullable Input<String> location;
        private @Nullable Input<NotificationSettingsArgs> notificationSettings;
        private @Nullable Input<List<ReplicaSetArgs>> replicaSets;
        private @Nullable Input<ResourceForestSettingsArgs> resourceForestSettings;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> sku;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainConfigurationType = defaults.domainConfigurationType;
    	      this.domainName = defaults.domainName;
    	      this.domainSecuritySettings = defaults.domainSecuritySettings;
    	      this.domainServiceName = defaults.domainServiceName;
    	      this.filteredSync = defaults.filteredSync;
    	      this.ldapsSettings = defaults.ldapsSettings;
    	      this.location = defaults.location;
    	      this.notificationSettings = defaults.notificationSettings;
    	      this.replicaSets = defaults.replicaSets;
    	      this.resourceForestSettings = defaults.resourceForestSettings;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder setDomainConfigurationType(@Nullable Input<String> domainConfigurationType) {
            this.domainConfigurationType = domainConfigurationType;
            return this;
        }

        public Builder setDomainConfigurationType(@Nullable String domainConfigurationType) {
            this.domainConfigurationType = Input.ofNullable(domainConfigurationType);
            return this;
        }

        public Builder setDomainName(@Nullable Input<String> domainName) {
            this.domainName = domainName;
            return this;
        }

        public Builder setDomainName(@Nullable String domainName) {
            this.domainName = Input.ofNullable(domainName);
            return this;
        }

        public Builder setDomainSecuritySettings(@Nullable Input<DomainSecuritySettingsArgs> domainSecuritySettings) {
            this.domainSecuritySettings = domainSecuritySettings;
            return this;
        }

        public Builder setDomainSecuritySettings(@Nullable DomainSecuritySettingsArgs domainSecuritySettings) {
            this.domainSecuritySettings = Input.ofNullable(domainSecuritySettings);
            return this;
        }

        public Builder setDomainServiceName(@Nullable Input<String> domainServiceName) {
            this.domainServiceName = domainServiceName;
            return this;
        }

        public Builder setDomainServiceName(@Nullable String domainServiceName) {
            this.domainServiceName = Input.ofNullable(domainServiceName);
            return this;
        }

        public Builder setFilteredSync(@Nullable Input<Either<String,FilteredSync>> filteredSync) {
            this.filteredSync = filteredSync;
            return this;
        }

        public Builder setFilteredSync(@Nullable Either<String,FilteredSync> filteredSync) {
            this.filteredSync = Input.ofNullable(filteredSync);
            return this;
        }

        public Builder setLdapsSettings(@Nullable Input<LdapsSettingsArgs> ldapsSettings) {
            this.ldapsSettings = ldapsSettings;
            return this;
        }

        public Builder setLdapsSettings(@Nullable LdapsSettingsArgs ldapsSettings) {
            this.ldapsSettings = Input.ofNullable(ldapsSettings);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setNotificationSettings(@Nullable Input<NotificationSettingsArgs> notificationSettings) {
            this.notificationSettings = notificationSettings;
            return this;
        }

        public Builder setNotificationSettings(@Nullable NotificationSettingsArgs notificationSettings) {
            this.notificationSettings = Input.ofNullable(notificationSettings);
            return this;
        }

        public Builder setReplicaSets(@Nullable Input<List<ReplicaSetArgs>> replicaSets) {
            this.replicaSets = replicaSets;
            return this;
        }

        public Builder setReplicaSets(@Nullable List<ReplicaSetArgs> replicaSets) {
            this.replicaSets = Input.ofNullable(replicaSets);
            return this;
        }

        public Builder setResourceForestSettings(@Nullable Input<ResourceForestSettingsArgs> resourceForestSettings) {
            this.resourceForestSettings = resourceForestSettings;
            return this;
        }

        public Builder setResourceForestSettings(@Nullable ResourceForestSettingsArgs resourceForestSettings) {
            this.resourceForestSettings = Input.ofNullable(resourceForestSettings);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSku(@Nullable Input<String> sku) {
            this.sku = sku;
            return this;
        }

        public Builder setSku(@Nullable String sku) {
            this.sku = Input.ofNullable(sku);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public DomainServiceArgs build() {
            return new DomainServiceArgs(domainConfigurationType, domainName, domainSecuritySettings, domainServiceName, filteredSync, ldapsSettings, location, notificationSettings, replicaSets, resourceForestSettings, resourceGroupName, sku, tags);
        }
    }
}
