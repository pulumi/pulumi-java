// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab.inputs;

import io.pulumi.azurenative.devtestlab.inputs.SubnetSharedPublicIpAddressConfigurationResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Property overrides on a subnet of a virtual network.
 * 
 */
public final class SubnetOverrideResponse extends io.pulumi.resources.InvokeArgs {

    public static final SubnetOverrideResponse Empty = new SubnetOverrideResponse();

    /**
     * The name given to the subnet within the lab.
     * 
     */
    @InputImport(name="labSubnetName")
    private final @Nullable String labSubnetName;

    public Optional<String> getLabSubnetName() {
        return this.labSubnetName == null ? Optional.empty() : Optional.ofNullable(this.labSubnetName);
    }

    /**
     * The resource ID of the subnet.
     * 
     */
    @InputImport(name="resourceId")
    private final @Nullable String resourceId;

    public Optional<String> getResourceId() {
        return this.resourceId == null ? Optional.empty() : Optional.ofNullable(this.resourceId);
    }

    /**
     * Properties that virtual machines on this subnet will share.
     * 
     */
    @InputImport(name="sharedPublicIpAddressConfiguration")
    private final @Nullable SubnetSharedPublicIpAddressConfigurationResponse sharedPublicIpAddressConfiguration;

    public Optional<SubnetSharedPublicIpAddressConfigurationResponse> getSharedPublicIpAddressConfiguration() {
        return this.sharedPublicIpAddressConfiguration == null ? Optional.empty() : Optional.ofNullable(this.sharedPublicIpAddressConfiguration);
    }

    /**
     * Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
     * 
     */
    @InputImport(name="useInVmCreationPermission")
    private final @Nullable String useInVmCreationPermission;

    public Optional<String> getUseInVmCreationPermission() {
        return this.useInVmCreationPermission == null ? Optional.empty() : Optional.ofNullable(this.useInVmCreationPermission);
    }

    /**
     * Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
     * 
     */
    @InputImport(name="usePublicIpAddressPermission")
    private final @Nullable String usePublicIpAddressPermission;

    public Optional<String> getUsePublicIpAddressPermission() {
        return this.usePublicIpAddressPermission == null ? Optional.empty() : Optional.ofNullable(this.usePublicIpAddressPermission);
    }

    /**
     * The virtual network pool associated with this subnet.
     * 
     */
    @InputImport(name="virtualNetworkPoolName")
    private final @Nullable String virtualNetworkPoolName;

    public Optional<String> getVirtualNetworkPoolName() {
        return this.virtualNetworkPoolName == null ? Optional.empty() : Optional.ofNullable(this.virtualNetworkPoolName);
    }

    public SubnetOverrideResponse(
        @Nullable String labSubnetName,
        @Nullable String resourceId,
        @Nullable SubnetSharedPublicIpAddressConfigurationResponse sharedPublicIpAddressConfiguration,
        @Nullable String useInVmCreationPermission,
        @Nullable String usePublicIpAddressPermission,
        @Nullable String virtualNetworkPoolName) {
        this.labSubnetName = labSubnetName;
        this.resourceId = resourceId;
        this.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
        this.useInVmCreationPermission = useInVmCreationPermission;
        this.usePublicIpAddressPermission = usePublicIpAddressPermission;
        this.virtualNetworkPoolName = virtualNetworkPoolName;
    }

    private SubnetOverrideResponse() {
        this.labSubnetName = null;
        this.resourceId = null;
        this.sharedPublicIpAddressConfiguration = null;
        this.useInVmCreationPermission = null;
        this.usePublicIpAddressPermission = null;
        this.virtualNetworkPoolName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubnetOverrideResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String labSubnetName;
        private @Nullable String resourceId;
        private @Nullable SubnetSharedPublicIpAddressConfigurationResponse sharedPublicIpAddressConfiguration;
        private @Nullable String useInVmCreationPermission;
        private @Nullable String usePublicIpAddressPermission;
        private @Nullable String virtualNetworkPoolName;

        public Builder() {
    	      // Empty
        }

        public Builder(SubnetOverrideResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.labSubnetName = defaults.labSubnetName;
    	      this.resourceId = defaults.resourceId;
    	      this.sharedPublicIpAddressConfiguration = defaults.sharedPublicIpAddressConfiguration;
    	      this.useInVmCreationPermission = defaults.useInVmCreationPermission;
    	      this.usePublicIpAddressPermission = defaults.usePublicIpAddressPermission;
    	      this.virtualNetworkPoolName = defaults.virtualNetworkPoolName;
        }

        public Builder setLabSubnetName(@Nullable String labSubnetName) {
            this.labSubnetName = labSubnetName;
            return this;
        }

        public Builder setResourceId(@Nullable String resourceId) {
            this.resourceId = resourceId;
            return this;
        }

        public Builder setSharedPublicIpAddressConfiguration(@Nullable SubnetSharedPublicIpAddressConfigurationResponse sharedPublicIpAddressConfiguration) {
            this.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
            return this;
        }

        public Builder setUseInVmCreationPermission(@Nullable String useInVmCreationPermission) {
            this.useInVmCreationPermission = useInVmCreationPermission;
            return this;
        }

        public Builder setUsePublicIpAddressPermission(@Nullable String usePublicIpAddressPermission) {
            this.usePublicIpAddressPermission = usePublicIpAddressPermission;
            return this;
        }

        public Builder setVirtualNetworkPoolName(@Nullable String virtualNetworkPoolName) {
            this.virtualNetworkPoolName = virtualNetworkPoolName;
            return this;
        }

        public SubnetOverrideResponse build() {
            return new SubnetOverrideResponse(labSubnetName, resourceId, sharedPublicIpAddressConfiguration, useInVmCreationPermission, usePublicIpAddressPermission, virtualNetworkPoolName);
        }
    }
}
