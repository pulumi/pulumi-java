// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databoxedge.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Contains all the contact details of the customer.
 * 
 */
public final class ContactDetailsArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContactDetailsArgs Empty = new ContactDetailsArgs();

    /**
     * The name of the company.
     * 
     */
    @Import(name="companyName", required=true)
      private final Output<String> companyName;

    public Output<String> getCompanyName() {
        return this.companyName;
    }

    /**
     * The contact person name.
     * 
     */
    @Import(name="contactPerson", required=true)
      private final Output<String> contactPerson;

    public Output<String> getContactPerson() {
        return this.contactPerson;
    }

    /**
     * The email list.
     * 
     */
    @Import(name="emailList", required=true)
      private final Output<List<String>> emailList;

    public Output<List<String>> getEmailList() {
        return this.emailList;
    }

    /**
     * The phone number.
     * 
     */
    @Import(name="phone", required=true)
      private final Output<String> phone;

    public Output<String> getPhone() {
        return this.phone;
    }

    public ContactDetailsArgs(
        Output<String> companyName,
        Output<String> contactPerson,
        Output<List<String>> emailList,
        Output<String> phone) {
        this.companyName = Objects.requireNonNull(companyName, "expected parameter 'companyName' to be non-null");
        this.contactPerson = Objects.requireNonNull(contactPerson, "expected parameter 'contactPerson' to be non-null");
        this.emailList = Objects.requireNonNull(emailList, "expected parameter 'emailList' to be non-null");
        this.phone = Objects.requireNonNull(phone, "expected parameter 'phone' to be non-null");
    }

    private ContactDetailsArgs() {
        this.companyName = Output.empty();
        this.contactPerson = Output.empty();
        this.emailList = Output.empty();
        this.phone = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContactDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> companyName;
        private Output<String> contactPerson;
        private Output<List<String>> emailList;
        private Output<String> phone;

        public Builder() {
    	      // Empty
        }

        public Builder(ContactDetailsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.companyName = defaults.companyName;
    	      this.contactPerson = defaults.contactPerson;
    	      this.emailList = defaults.emailList;
    	      this.phone = defaults.phone;
        }

        public Builder companyName(Output<String> companyName) {
            this.companyName = Objects.requireNonNull(companyName);
            return this;
        }

        public Builder companyName(String companyName) {
            this.companyName = Output.of(Objects.requireNonNull(companyName));
            return this;
        }

        public Builder contactPerson(Output<String> contactPerson) {
            this.contactPerson = Objects.requireNonNull(contactPerson);
            return this;
        }

        public Builder contactPerson(String contactPerson) {
            this.contactPerson = Output.of(Objects.requireNonNull(contactPerson));
            return this;
        }

        public Builder emailList(Output<List<String>> emailList) {
            this.emailList = Objects.requireNonNull(emailList);
            return this;
        }

        public Builder emailList(List<String> emailList) {
            this.emailList = Output.of(Objects.requireNonNull(emailList));
            return this;
        }

        public Builder phone(Output<String> phone) {
            this.phone = Objects.requireNonNull(phone);
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Output.of(Objects.requireNonNull(phone));
            return this;
        }
        public ContactDetailsArgs build() {
            return new ContactDetailsArgs(companyName, contactPerson, emailList, phone);
        }
    }
}
