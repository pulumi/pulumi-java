// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storagecache.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A namespace junction.
 * 
 */
public final class NamespaceJunctionResponse extends io.pulumi.resources.InvokeArgs {

    public static final NamespaceJunctionResponse Empty = new NamespaceJunctionResponse();

    /**
     * Namespace path on a Cache for a Storage Target.
     * 
     */
    @InputImport(name="namespacePath")
    private final @Nullable String namespacePath;

    public Optional<String> getNamespacePath() {
        return this.namespacePath == null ? Optional.empty() : Optional.ofNullable(this.namespacePath);
    }

    /**
     * Name of the access policy applied to this junction.
     * 
     */
    @InputImport(name="nfsAccessPolicy")
    private final @Nullable String nfsAccessPolicy;

    public Optional<String> getNfsAccessPolicy() {
        return this.nfsAccessPolicy == null ? Optional.empty() : Optional.ofNullable(this.nfsAccessPolicy);
    }

    /**
     * NFS export where targetPath exists.
     * 
     */
    @InputImport(name="nfsExport")
    private final @Nullable String nfsExport;

    public Optional<String> getNfsExport() {
        return this.nfsExport == null ? Optional.empty() : Optional.ofNullable(this.nfsExport);
    }

    /**
     * Path in Storage Target to which namespacePath points.
     * 
     */
    @InputImport(name="targetPath")
    private final @Nullable String targetPath;

    public Optional<String> getTargetPath() {
        return this.targetPath == null ? Optional.empty() : Optional.ofNullable(this.targetPath);
    }

    public NamespaceJunctionResponse(
        @Nullable String namespacePath,
        @Nullable String nfsAccessPolicy,
        @Nullable String nfsExport,
        @Nullable String targetPath) {
        this.namespacePath = namespacePath;
        this.nfsAccessPolicy = nfsAccessPolicy == null ? "default" : nfsAccessPolicy;
        this.nfsExport = nfsExport;
        this.targetPath = targetPath;
    }

    private NamespaceJunctionResponse() {
        this.namespacePath = null;
        this.nfsAccessPolicy = null;
        this.nfsExport = null;
        this.targetPath = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NamespaceJunctionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String namespacePath;
        private @Nullable String nfsAccessPolicy;
        private @Nullable String nfsExport;
        private @Nullable String targetPath;

        public Builder() {
    	      // Empty
        }

        public Builder(NamespaceJunctionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.namespacePath = defaults.namespacePath;
    	      this.nfsAccessPolicy = defaults.nfsAccessPolicy;
    	      this.nfsExport = defaults.nfsExport;
    	      this.targetPath = defaults.targetPath;
        }

        public Builder setNamespacePath(@Nullable String namespacePath) {
            this.namespacePath = namespacePath;
            return this;
        }

        public Builder setNfsAccessPolicy(@Nullable String nfsAccessPolicy) {
            this.nfsAccessPolicy = nfsAccessPolicy;
            return this;
        }

        public Builder setNfsExport(@Nullable String nfsExport) {
            this.nfsExport = nfsExport;
            return this;
        }

        public Builder setTargetPath(@Nullable String targetPath) {
            this.targetPath = targetPath;
            return this;
        }

        public NamespaceJunctionResponse build() {
            return new NamespaceJunctionResponse(namespacePath, nfsAccessPolicy, nfsExport, targetPath);
        }
    }
}
