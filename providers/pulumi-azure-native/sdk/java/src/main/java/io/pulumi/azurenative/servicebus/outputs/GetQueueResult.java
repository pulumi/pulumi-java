// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicebus.outputs;

import io.pulumi.azurenative.servicebus.outputs.MessageCountDetailsResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetQueueResult {
    private final String accessedAt;
    private final @Nullable String autoDeleteOnIdle;
    private final MessageCountDetailsResponse countDetails;
    private final String createdAt;
    private final @Nullable Boolean deadLetteringOnMessageExpiration;
    private final @Nullable String defaultMessageTimeToLive;
    private final @Nullable String duplicateDetectionHistoryTimeWindow;
    private final @Nullable Boolean enableBatchedOperations;
    private final @Nullable Boolean enableExpress;
    private final @Nullable Boolean enablePartitioning;
    private final @Nullable String forwardDeadLetteredMessagesTo;
    private final @Nullable String forwardTo;
    private final String id;
    private final @Nullable String lockDuration;
    private final @Nullable Integer maxDeliveryCount;
    private final @Nullable Integer maxSizeInMegabytes;
    private final Double messageCount;
    private final String name;
    private final @Nullable Boolean requiresDuplicateDetection;
    private final @Nullable Boolean requiresSession;
    private final Double sizeInBytes;
    private final @Nullable String status;
    private final String type;
    private final String updatedAt;

    @OutputCustomType.Constructor({"accessedAt","autoDeleteOnIdle","countDetails","createdAt","deadLetteringOnMessageExpiration","defaultMessageTimeToLive","duplicateDetectionHistoryTimeWindow","enableBatchedOperations","enableExpress","enablePartitioning","forwardDeadLetteredMessagesTo","forwardTo","id","lockDuration","maxDeliveryCount","maxSizeInMegabytes","messageCount","name","requiresDuplicateDetection","requiresSession","sizeInBytes","status","type","updatedAt"})
    private GetQueueResult(
        String accessedAt,
        @Nullable String autoDeleteOnIdle,
        MessageCountDetailsResponse countDetails,
        String createdAt,
        @Nullable Boolean deadLetteringOnMessageExpiration,
        @Nullable String defaultMessageTimeToLive,
        @Nullable String duplicateDetectionHistoryTimeWindow,
        @Nullable Boolean enableBatchedOperations,
        @Nullable Boolean enableExpress,
        @Nullable Boolean enablePartitioning,
        @Nullable String forwardDeadLetteredMessagesTo,
        @Nullable String forwardTo,
        String id,
        @Nullable String lockDuration,
        @Nullable Integer maxDeliveryCount,
        @Nullable Integer maxSizeInMegabytes,
        Double messageCount,
        String name,
        @Nullable Boolean requiresDuplicateDetection,
        @Nullable Boolean requiresSession,
        Double sizeInBytes,
        @Nullable String status,
        String type,
        String updatedAt) {
        this.accessedAt = Objects.requireNonNull(accessedAt);
        this.autoDeleteOnIdle = autoDeleteOnIdle;
        this.countDetails = Objects.requireNonNull(countDetails);
        this.createdAt = Objects.requireNonNull(createdAt);
        this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
        this.defaultMessageTimeToLive = defaultMessageTimeToLive;
        this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
        this.enableBatchedOperations = enableBatchedOperations;
        this.enableExpress = enableExpress;
        this.enablePartitioning = enablePartitioning;
        this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
        this.forwardTo = forwardTo;
        this.id = Objects.requireNonNull(id);
        this.lockDuration = lockDuration;
        this.maxDeliveryCount = maxDeliveryCount;
        this.maxSizeInMegabytes = maxSizeInMegabytes;
        this.messageCount = Objects.requireNonNull(messageCount);
        this.name = Objects.requireNonNull(name);
        this.requiresDuplicateDetection = requiresDuplicateDetection;
        this.requiresSession = requiresSession;
        this.sizeInBytes = Objects.requireNonNull(sizeInBytes);
        this.status = status;
        this.type = Objects.requireNonNull(type);
        this.updatedAt = Objects.requireNonNull(updatedAt);
    }

    public String getAccessedAt() {
        return this.accessedAt;
    }
    public Optional<String> getAutoDeleteOnIdle() {
        return Optional.ofNullable(this.autoDeleteOnIdle);
    }
    public MessageCountDetailsResponse getCountDetails() {
        return this.countDetails;
    }
    public String getCreatedAt() {
        return this.createdAt;
    }
    public Optional<Boolean> getDeadLetteringOnMessageExpiration() {
        return Optional.ofNullable(this.deadLetteringOnMessageExpiration);
    }
    public Optional<String> getDefaultMessageTimeToLive() {
        return Optional.ofNullable(this.defaultMessageTimeToLive);
    }
    public Optional<String> getDuplicateDetectionHistoryTimeWindow() {
        return Optional.ofNullable(this.duplicateDetectionHistoryTimeWindow);
    }
    public Optional<Boolean> getEnableBatchedOperations() {
        return Optional.ofNullable(this.enableBatchedOperations);
    }
    public Optional<Boolean> getEnableExpress() {
        return Optional.ofNullable(this.enableExpress);
    }
    public Optional<Boolean> getEnablePartitioning() {
        return Optional.ofNullable(this.enablePartitioning);
    }
    public Optional<String> getForwardDeadLetteredMessagesTo() {
        return Optional.ofNullable(this.forwardDeadLetteredMessagesTo);
    }
    public Optional<String> getForwardTo() {
        return Optional.ofNullable(this.forwardTo);
    }
    public String getId() {
        return this.id;
    }
    public Optional<String> getLockDuration() {
        return Optional.ofNullable(this.lockDuration);
    }
    public Optional<Integer> getMaxDeliveryCount() {
        return Optional.ofNullable(this.maxDeliveryCount);
    }
    public Optional<Integer> getMaxSizeInMegabytes() {
        return Optional.ofNullable(this.maxSizeInMegabytes);
    }
    public Double getMessageCount() {
        return this.messageCount;
    }
    public String getName() {
        return this.name;
    }
    public Optional<Boolean> getRequiresDuplicateDetection() {
        return Optional.ofNullable(this.requiresDuplicateDetection);
    }
    public Optional<Boolean> getRequiresSession() {
        return Optional.ofNullable(this.requiresSession);
    }
    public Double getSizeInBytes() {
        return this.sizeInBytes;
    }
    public Optional<String> getStatus() {
        return Optional.ofNullable(this.status);
    }
    public String getType() {
        return this.type;
    }
    public String getUpdatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetQueueResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessedAt;
        private @Nullable String autoDeleteOnIdle;
        private MessageCountDetailsResponse countDetails;
        private String createdAt;
        private @Nullable Boolean deadLetteringOnMessageExpiration;
        private @Nullable String defaultMessageTimeToLive;
        private @Nullable String duplicateDetectionHistoryTimeWindow;
        private @Nullable Boolean enableBatchedOperations;
        private @Nullable Boolean enableExpress;
        private @Nullable Boolean enablePartitioning;
        private @Nullable String forwardDeadLetteredMessagesTo;
        private @Nullable String forwardTo;
        private String id;
        private @Nullable String lockDuration;
        private @Nullable Integer maxDeliveryCount;
        private @Nullable Integer maxSizeInMegabytes;
        private Double messageCount;
        private String name;
        private @Nullable Boolean requiresDuplicateDetection;
        private @Nullable Boolean requiresSession;
        private Double sizeInBytes;
        private @Nullable String status;
        private String type;
        private String updatedAt;

        public Builder() {
    	      // Empty
        }

        public Builder(GetQueueResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessedAt = defaults.accessedAt;
    	      this.autoDeleteOnIdle = defaults.autoDeleteOnIdle;
    	      this.countDetails = defaults.countDetails;
    	      this.createdAt = defaults.createdAt;
    	      this.deadLetteringOnMessageExpiration = defaults.deadLetteringOnMessageExpiration;
    	      this.defaultMessageTimeToLive = defaults.defaultMessageTimeToLive;
    	      this.duplicateDetectionHistoryTimeWindow = defaults.duplicateDetectionHistoryTimeWindow;
    	      this.enableBatchedOperations = defaults.enableBatchedOperations;
    	      this.enableExpress = defaults.enableExpress;
    	      this.enablePartitioning = defaults.enablePartitioning;
    	      this.forwardDeadLetteredMessagesTo = defaults.forwardDeadLetteredMessagesTo;
    	      this.forwardTo = defaults.forwardTo;
    	      this.id = defaults.id;
    	      this.lockDuration = defaults.lockDuration;
    	      this.maxDeliveryCount = defaults.maxDeliveryCount;
    	      this.maxSizeInMegabytes = defaults.maxSizeInMegabytes;
    	      this.messageCount = defaults.messageCount;
    	      this.name = defaults.name;
    	      this.requiresDuplicateDetection = defaults.requiresDuplicateDetection;
    	      this.requiresSession = defaults.requiresSession;
    	      this.sizeInBytes = defaults.sizeInBytes;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.updatedAt = defaults.updatedAt;
        }

        public Builder setAccessedAt(String accessedAt) {
            this.accessedAt = Objects.requireNonNull(accessedAt);
            return this;
        }

        public Builder setAutoDeleteOnIdle(@Nullable String autoDeleteOnIdle) {
            this.autoDeleteOnIdle = autoDeleteOnIdle;
            return this;
        }

        public Builder setCountDetails(MessageCountDetailsResponse countDetails) {
            this.countDetails = Objects.requireNonNull(countDetails);
            return this;
        }

        public Builder setCreatedAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }

        public Builder setDeadLetteringOnMessageExpiration(@Nullable Boolean deadLetteringOnMessageExpiration) {
            this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
            return this;
        }

        public Builder setDefaultMessageTimeToLive(@Nullable String defaultMessageTimeToLive) {
            this.defaultMessageTimeToLive = defaultMessageTimeToLive;
            return this;
        }

        public Builder setDuplicateDetectionHistoryTimeWindow(@Nullable String duplicateDetectionHistoryTimeWindow) {
            this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            return this;
        }

        public Builder setEnableBatchedOperations(@Nullable Boolean enableBatchedOperations) {
            this.enableBatchedOperations = enableBatchedOperations;
            return this;
        }

        public Builder setEnableExpress(@Nullable Boolean enableExpress) {
            this.enableExpress = enableExpress;
            return this;
        }

        public Builder setEnablePartitioning(@Nullable Boolean enablePartitioning) {
            this.enablePartitioning = enablePartitioning;
            return this;
        }

        public Builder setForwardDeadLetteredMessagesTo(@Nullable String forwardDeadLetteredMessagesTo) {
            this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
            return this;
        }

        public Builder setForwardTo(@Nullable String forwardTo) {
            this.forwardTo = forwardTo;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLockDuration(@Nullable String lockDuration) {
            this.lockDuration = lockDuration;
            return this;
        }

        public Builder setMaxDeliveryCount(@Nullable Integer maxDeliveryCount) {
            this.maxDeliveryCount = maxDeliveryCount;
            return this;
        }

        public Builder setMaxSizeInMegabytes(@Nullable Integer maxSizeInMegabytes) {
            this.maxSizeInMegabytes = maxSizeInMegabytes;
            return this;
        }

        public Builder setMessageCount(Double messageCount) {
            this.messageCount = Objects.requireNonNull(messageCount);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setRequiresDuplicateDetection(@Nullable Boolean requiresDuplicateDetection) {
            this.requiresDuplicateDetection = requiresDuplicateDetection;
            return this;
        }

        public Builder setRequiresSession(@Nullable Boolean requiresSession) {
            this.requiresSession = requiresSession;
            return this;
        }

        public Builder setSizeInBytes(Double sizeInBytes) {
            this.sizeInBytes = Objects.requireNonNull(sizeInBytes);
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = status;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUpdatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }

        public GetQueueResult build() {
            return new GetQueueResult(accessedAt, autoDeleteOnIdle, countDetails, createdAt, deadLetteringOnMessageExpiration, defaultMessageTimeToLive, duplicateDetectionHistoryTimeWindow, enableBatchedOperations, enableExpress, enablePartitioning, forwardDeadLetteredMessagesTo, forwardTo, id, lockDuration, maxDeliveryCount, maxSizeInMegabytes, messageCount, name, requiresDuplicateDetection, requiresSession, sizeInBytes, status, type, updatedAt);
        }
    }
}
