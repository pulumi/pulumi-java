// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sqlvirtualmachine;

import io.pulumi.azurenative.sqlvirtualmachine.inputs.LoadBalancerConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AvailabilityGroupListenerArgs extends io.pulumi.resources.ResourceArgs {

    public static final AvailabilityGroupListenerArgs Empty = new AvailabilityGroupListenerArgs();

    /**
     * Name of the availability group listener.
     * 
     */
    @Import(name="availabilityGroupListenerName")
      private final @Nullable Output<String> availabilityGroupListenerName;

    public Output<String> availabilityGroupListenerName() {
        return this.availabilityGroupListenerName == null ? Codegen.empty() : this.availabilityGroupListenerName;
    }

    /**
     * Name of the availability group.
     * 
     */
    @Import(name="availabilityGroupName")
      private final @Nullable Output<String> availabilityGroupName;

    public Output<String> availabilityGroupName() {
        return this.availabilityGroupName == null ? Codegen.empty() : this.availabilityGroupName;
    }

    /**
     * Create a default availability group if it does not exist.
     * 
     */
    @Import(name="createDefaultAvailabilityGroupIfNotExist")
      private final @Nullable Output<Boolean> createDefaultAvailabilityGroupIfNotExist;

    public Output<Boolean> createDefaultAvailabilityGroupIfNotExist() {
        return this.createDefaultAvailabilityGroupIfNotExist == null ? Codegen.empty() : this.createDefaultAvailabilityGroupIfNotExist;
    }

    /**
     * List of load balancer configurations for an availability group listener.
     * 
     */
    @Import(name="loadBalancerConfigurations")
      private final @Nullable Output<List<LoadBalancerConfigurationArgs>> loadBalancerConfigurations;

    public Output<List<LoadBalancerConfigurationArgs>> loadBalancerConfigurations() {
        return this.loadBalancerConfigurations == null ? Codegen.empty() : this.loadBalancerConfigurations;
    }

    /**
     * Listener port.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    /**
     * Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the SQL virtual machine group.
     * 
     */
    @Import(name="sqlVirtualMachineGroupName", required=true)
      private final Output<String> sqlVirtualMachineGroupName;

    public Output<String> sqlVirtualMachineGroupName() {
        return this.sqlVirtualMachineGroupName;
    }

    public AvailabilityGroupListenerArgs(
        @Nullable Output<String> availabilityGroupListenerName,
        @Nullable Output<String> availabilityGroupName,
        @Nullable Output<Boolean> createDefaultAvailabilityGroupIfNotExist,
        @Nullable Output<List<LoadBalancerConfigurationArgs>> loadBalancerConfigurations,
        @Nullable Output<Integer> port,
        Output<String> resourceGroupName,
        Output<String> sqlVirtualMachineGroupName) {
        this.availabilityGroupListenerName = availabilityGroupListenerName;
        this.availabilityGroupName = availabilityGroupName;
        this.createDefaultAvailabilityGroupIfNotExist = createDefaultAvailabilityGroupIfNotExist;
        this.loadBalancerConfigurations = loadBalancerConfigurations;
        this.port = port;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sqlVirtualMachineGroupName = Objects.requireNonNull(sqlVirtualMachineGroupName, "expected parameter 'sqlVirtualMachineGroupName' to be non-null");
    }

    private AvailabilityGroupListenerArgs() {
        this.availabilityGroupListenerName = Codegen.empty();
        this.availabilityGroupName = Codegen.empty();
        this.createDefaultAvailabilityGroupIfNotExist = Codegen.empty();
        this.loadBalancerConfigurations = Codegen.empty();
        this.port = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sqlVirtualMachineGroupName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AvailabilityGroupListenerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> availabilityGroupListenerName;
        private @Nullable Output<String> availabilityGroupName;
        private @Nullable Output<Boolean> createDefaultAvailabilityGroupIfNotExist;
        private @Nullable Output<List<LoadBalancerConfigurationArgs>> loadBalancerConfigurations;
        private @Nullable Output<Integer> port;
        private Output<String> resourceGroupName;
        private Output<String> sqlVirtualMachineGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(AvailabilityGroupListenerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityGroupListenerName = defaults.availabilityGroupListenerName;
    	      this.availabilityGroupName = defaults.availabilityGroupName;
    	      this.createDefaultAvailabilityGroupIfNotExist = defaults.createDefaultAvailabilityGroupIfNotExist;
    	      this.loadBalancerConfigurations = defaults.loadBalancerConfigurations;
    	      this.port = defaults.port;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sqlVirtualMachineGroupName = defaults.sqlVirtualMachineGroupName;
        }

        public Builder availabilityGroupListenerName(@Nullable Output<String> availabilityGroupListenerName) {
            this.availabilityGroupListenerName = availabilityGroupListenerName;
            return this;
        }
        public Builder availabilityGroupListenerName(@Nullable String availabilityGroupListenerName) {
            this.availabilityGroupListenerName = Codegen.ofNullable(availabilityGroupListenerName);
            return this;
        }
        public Builder availabilityGroupName(@Nullable Output<String> availabilityGroupName) {
            this.availabilityGroupName = availabilityGroupName;
            return this;
        }
        public Builder availabilityGroupName(@Nullable String availabilityGroupName) {
            this.availabilityGroupName = Codegen.ofNullable(availabilityGroupName);
            return this;
        }
        public Builder createDefaultAvailabilityGroupIfNotExist(@Nullable Output<Boolean> createDefaultAvailabilityGroupIfNotExist) {
            this.createDefaultAvailabilityGroupIfNotExist = createDefaultAvailabilityGroupIfNotExist;
            return this;
        }
        public Builder createDefaultAvailabilityGroupIfNotExist(@Nullable Boolean createDefaultAvailabilityGroupIfNotExist) {
            this.createDefaultAvailabilityGroupIfNotExist = Codegen.ofNullable(createDefaultAvailabilityGroupIfNotExist);
            return this;
        }
        public Builder loadBalancerConfigurations(@Nullable Output<List<LoadBalancerConfigurationArgs>> loadBalancerConfigurations) {
            this.loadBalancerConfigurations = loadBalancerConfigurations;
            return this;
        }
        public Builder loadBalancerConfigurations(@Nullable List<LoadBalancerConfigurationArgs> loadBalancerConfigurations) {
            this.loadBalancerConfigurations = Codegen.ofNullable(loadBalancerConfigurations);
            return this;
        }
        public Builder loadBalancerConfigurations(LoadBalancerConfigurationArgs... loadBalancerConfigurations) {
            return loadBalancerConfigurations(List.of(loadBalancerConfigurations));
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sqlVirtualMachineGroupName(Output<String> sqlVirtualMachineGroupName) {
            this.sqlVirtualMachineGroupName = Objects.requireNonNull(sqlVirtualMachineGroupName);
            return this;
        }
        public Builder sqlVirtualMachineGroupName(String sqlVirtualMachineGroupName) {
            this.sqlVirtualMachineGroupName = Output.of(Objects.requireNonNull(sqlVirtualMachineGroupName));
            return this;
        }        public AvailabilityGroupListenerArgs build() {
            return new AvailabilityGroupListenerArgs(availabilityGroupListenerName, availabilityGroupName, createDefaultAvailabilityGroupIfNotExist, loadBalancerConfigurations, port, resourceGroupName, sqlVirtualMachineGroupName);
        }
    }
}
