// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningexperimentation.outputs;

import io.pulumi.azurenative.machinelearningexperimentation.outputs.StorageAccountPropertiesResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetAccountResult {
    private final String accountId;
    private final String creationDate;
    private final @Nullable String description;
    private final String discoveryUri;
    private final @Nullable String friendlyName;
    private final String id;
    private final String keyVaultId;
    private final String location;
    private final String name;
    private final String provisioningState;
    private final @Nullable String seats;
    private final StorageAccountPropertiesResponse storageAccount;
    private final @Nullable Map<String,String> tags;
    private final String type;
    private final String vsoAccountId;

    @OutputCustomType.Constructor({"accountId","creationDate","description","discoveryUri","friendlyName","id","keyVaultId","location","name","provisioningState","seats","storageAccount","tags","type","vsoAccountId"})
    private GetAccountResult(
        String accountId,
        String creationDate,
        @Nullable String description,
        String discoveryUri,
        @Nullable String friendlyName,
        String id,
        String keyVaultId,
        String location,
        String name,
        String provisioningState,
        @Nullable String seats,
        StorageAccountPropertiesResponse storageAccount,
        @Nullable Map<String,String> tags,
        String type,
        String vsoAccountId) {
        this.accountId = Objects.requireNonNull(accountId);
        this.creationDate = Objects.requireNonNull(creationDate);
        this.description = description;
        this.discoveryUri = Objects.requireNonNull(discoveryUri);
        this.friendlyName = friendlyName;
        this.id = Objects.requireNonNull(id);
        this.keyVaultId = Objects.requireNonNull(keyVaultId);
        this.location = Objects.requireNonNull(location);
        this.name = Objects.requireNonNull(name);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.seats = seats;
        this.storageAccount = Objects.requireNonNull(storageAccount);
        this.tags = tags;
        this.type = Objects.requireNonNull(type);
        this.vsoAccountId = Objects.requireNonNull(vsoAccountId);
    }

    public String getAccountId() {
        return this.accountId;
    }
    public String getCreationDate() {
        return this.creationDate;
    }
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    public String getDiscoveryUri() {
        return this.discoveryUri;
    }
    public Optional<String> getFriendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }
    public String getId() {
        return this.id;
    }
    public String getKeyVaultId() {
        return this.keyVaultId;
    }
    public String getLocation() {
        return this.location;
    }
    public String getName() {
        return this.name;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public Optional<String> getSeats() {
        return Optional.ofNullable(this.seats);
    }
    public StorageAccountPropertiesResponse getStorageAccount() {
        return this.storageAccount;
    }
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String getType() {
        return this.type;
    }
    public String getVsoAccountId() {
        return this.vsoAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accountId;
        private String creationDate;
        private @Nullable String description;
        private String discoveryUri;
        private @Nullable String friendlyName;
        private String id;
        private String keyVaultId;
        private String location;
        private String name;
        private String provisioningState;
        private @Nullable String seats;
        private StorageAccountPropertiesResponse storageAccount;
        private @Nullable Map<String,String> tags;
        private String type;
        private String vsoAccountId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.creationDate = defaults.creationDate;
    	      this.description = defaults.description;
    	      this.discoveryUri = defaults.discoveryUri;
    	      this.friendlyName = defaults.friendlyName;
    	      this.id = defaults.id;
    	      this.keyVaultId = defaults.keyVaultId;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.seats = defaults.seats;
    	      this.storageAccount = defaults.storageAccount;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.vsoAccountId = defaults.vsoAccountId;
        }

        public Builder setAccountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }

        public Builder setCreationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setDiscoveryUri(String discoveryUri) {
            this.discoveryUri = Objects.requireNonNull(discoveryUri);
            return this;
        }

        public Builder setFriendlyName(@Nullable String friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setKeyVaultId(String keyVaultId) {
            this.keyVaultId = Objects.requireNonNull(keyVaultId);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setSeats(@Nullable String seats) {
            this.seats = seats;
            return this;
        }

        public Builder setStorageAccount(StorageAccountPropertiesResponse storageAccount) {
            this.storageAccount = Objects.requireNonNull(storageAccount);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setVsoAccountId(String vsoAccountId) {
            this.vsoAccountId = Objects.requireNonNull(vsoAccountId);
            return this;
        }

        public GetAccountResult build() {
            return new GetAccountResult(accountId, creationDate, description, discoveryUri, friendlyName, id, keyVaultId, location, name, provisioningState, seats, storageAccount, tags, type, vsoAccountId);
        }
    }
}
