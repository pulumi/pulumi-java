// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storagecache.inputs;

import io.pulumi.azurenative.storagecache.enums.NfsAccessRuleAccess;
import io.pulumi.azurenative.storagecache.enums.NfsAccessRuleScope;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NfsAccessRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final NfsAccessRuleArgs Empty = new NfsAccessRuleArgs();

    @InputImport(name="access", required=true)
    private final Input<Either<String,NfsAccessRuleAccess>> access;

    public Input<Either<String,NfsAccessRuleAccess>> getAccess() {
        return this.access;
    }

    @InputImport(name="anonymousGID")
    private final @Nullable Input<String> anonymousGID;

    public Input<String> getAnonymousGID() {
        return this.anonymousGID == null ? Input.empty() : this.anonymousGID;
    }

    @InputImport(name="anonymousUID")
    private final @Nullable Input<String> anonymousUID;

    public Input<String> getAnonymousUID() {
        return this.anonymousUID == null ? Input.empty() : this.anonymousUID;
    }

    @InputImport(name="filter")
    private final @Nullable Input<String> filter;

    public Input<String> getFilter() {
        return this.filter == null ? Input.empty() : this.filter;
    }

    @InputImport(name="rootSquash")
    private final @Nullable Input<Boolean> rootSquash;

    public Input<Boolean> getRootSquash() {
        return this.rootSquash == null ? Input.empty() : this.rootSquash;
    }

    @InputImport(name="scope", required=true)
    private final Input<Either<String,NfsAccessRuleScope>> scope;

    public Input<Either<String,NfsAccessRuleScope>> getScope() {
        return this.scope;
    }

    @InputImport(name="submountAccess")
    private final @Nullable Input<Boolean> submountAccess;

    public Input<Boolean> getSubmountAccess() {
        return this.submountAccess == null ? Input.empty() : this.submountAccess;
    }

    @InputImport(name="suid")
    private final @Nullable Input<Boolean> suid;

    public Input<Boolean> getSuid() {
        return this.suid == null ? Input.empty() : this.suid;
    }

    public NfsAccessRuleArgs(
        Input<Either<String,NfsAccessRuleAccess>> access,
        @Nullable Input<String> anonymousGID,
        @Nullable Input<String> anonymousUID,
        @Nullable Input<String> filter,
        @Nullable Input<Boolean> rootSquash,
        Input<Either<String,NfsAccessRuleScope>> scope,
        @Nullable Input<Boolean> submountAccess,
        @Nullable Input<Boolean> suid) {
        this.access = Objects.requireNonNull(access, "expected parameter 'access' to be non-null");
        this.anonymousGID = anonymousGID;
        this.anonymousUID = anonymousUID;
        this.filter = filter;
        this.rootSquash = rootSquash;
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
        this.submountAccess = submountAccess;
        this.suid = suid;
    }

    private NfsAccessRuleArgs() {
        this.access = Input.empty();
        this.anonymousGID = Input.empty();
        this.anonymousUID = Input.empty();
        this.filter = Input.empty();
        this.rootSquash = Input.empty();
        this.scope = Input.empty();
        this.submountAccess = Input.empty();
        this.suid = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NfsAccessRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Either<String,NfsAccessRuleAccess>> access;
        private @Nullable Input<String> anonymousGID;
        private @Nullable Input<String> anonymousUID;
        private @Nullable Input<String> filter;
        private @Nullable Input<Boolean> rootSquash;
        private Input<Either<String,NfsAccessRuleScope>> scope;
        private @Nullable Input<Boolean> submountAccess;
        private @Nullable Input<Boolean> suid;

        public Builder() {
    	      // Empty
        }

        public Builder(NfsAccessRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.anonymousGID = defaults.anonymousGID;
    	      this.anonymousUID = defaults.anonymousUID;
    	      this.filter = defaults.filter;
    	      this.rootSquash = defaults.rootSquash;
    	      this.scope = defaults.scope;
    	      this.submountAccess = defaults.submountAccess;
    	      this.suid = defaults.suid;
        }

        public Builder setAccess(Input<Either<String,NfsAccessRuleAccess>> access) {
            this.access = Objects.requireNonNull(access);
            return this;
        }

        public Builder setAccess(Either<String,NfsAccessRuleAccess> access) {
            this.access = Input.of(Objects.requireNonNull(access));
            return this;
        }

        public Builder setAnonymousGID(@Nullable Input<String> anonymousGID) {
            this.anonymousGID = anonymousGID;
            return this;
        }

        public Builder setAnonymousGID(@Nullable String anonymousGID) {
            this.anonymousGID = Input.ofNullable(anonymousGID);
            return this;
        }

        public Builder setAnonymousUID(@Nullable Input<String> anonymousUID) {
            this.anonymousUID = anonymousUID;
            return this;
        }

        public Builder setAnonymousUID(@Nullable String anonymousUID) {
            this.anonymousUID = Input.ofNullable(anonymousUID);
            return this;
        }

        public Builder setFilter(@Nullable Input<String> filter) {
            this.filter = filter;
            return this;
        }

        public Builder setFilter(@Nullable String filter) {
            this.filter = Input.ofNullable(filter);
            return this;
        }

        public Builder setRootSquash(@Nullable Input<Boolean> rootSquash) {
            this.rootSquash = rootSquash;
            return this;
        }

        public Builder setRootSquash(@Nullable Boolean rootSquash) {
            this.rootSquash = Input.ofNullable(rootSquash);
            return this;
        }

        public Builder setScope(Input<Either<String,NfsAccessRuleScope>> scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }

        public Builder setScope(Either<String,NfsAccessRuleScope> scope) {
            this.scope = Input.of(Objects.requireNonNull(scope));
            return this;
        }

        public Builder setSubmountAccess(@Nullable Input<Boolean> submountAccess) {
            this.submountAccess = submountAccess;
            return this;
        }

        public Builder setSubmountAccess(@Nullable Boolean submountAccess) {
            this.submountAccess = Input.ofNullable(submountAccess);
            return this;
        }

        public Builder setSuid(@Nullable Input<Boolean> suid) {
            this.suid = suid;
            return this;
        }

        public Builder setSuid(@Nullable Boolean suid) {
            this.suid = Input.ofNullable(suid);
            return this;
        }

        public NfsAccessRuleArgs build() {
            return new NfsAccessRuleArgs(access, anonymousGID, anonymousUID, filter, rootSquash, scope, submountAccess, suid);
        }
    }
}
