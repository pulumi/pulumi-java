// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.automation.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RunbookParameterArgs extends io.pulumi.resources.ResourceArgs {

    public static final RunbookParameterArgs Empty = new RunbookParameterArgs();

    @InputImport(name="defaultValue")
    private final @Nullable Input<String> defaultValue;

    public Input<String> getDefaultValue() {
        return this.defaultValue == null ? Input.empty() : this.defaultValue;
    }

    @InputImport(name="isMandatory")
    private final @Nullable Input<Boolean> isMandatory;

    public Input<Boolean> getIsMandatory() {
        return this.isMandatory == null ? Input.empty() : this.isMandatory;
    }

    @InputImport(name="position")
    private final @Nullable Input<Integer> position;

    public Input<Integer> getPosition() {
        return this.position == null ? Input.empty() : this.position;
    }

    @InputImport(name="type")
    private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    public RunbookParameterArgs(
        @Nullable Input<String> defaultValue,
        @Nullable Input<Boolean> isMandatory,
        @Nullable Input<Integer> position,
        @Nullable Input<String> type) {
        this.defaultValue = defaultValue;
        this.isMandatory = isMandatory;
        this.position = position;
        this.type = type;
    }

    private RunbookParameterArgs() {
        this.defaultValue = Input.empty();
        this.isMandatory = Input.empty();
        this.position = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RunbookParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> defaultValue;
        private @Nullable Input<Boolean> isMandatory;
        private @Nullable Input<Integer> position;
        private @Nullable Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(RunbookParameterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultValue = defaults.defaultValue;
    	      this.isMandatory = defaults.isMandatory;
    	      this.position = defaults.position;
    	      this.type = defaults.type;
        }

        public Builder setDefaultValue(@Nullable Input<String> defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }

        public Builder setDefaultValue(@Nullable String defaultValue) {
            this.defaultValue = Input.ofNullable(defaultValue);
            return this;
        }

        public Builder setIsMandatory(@Nullable Input<Boolean> isMandatory) {
            this.isMandatory = isMandatory;
            return this;
        }

        public Builder setIsMandatory(@Nullable Boolean isMandatory) {
            this.isMandatory = Input.ofNullable(isMandatory);
            return this;
        }

        public Builder setPosition(@Nullable Input<Integer> position) {
            this.position = position;
            return this;
        }

        public Builder setPosition(@Nullable Integer position) {
            this.position = Input.ofNullable(position);
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public RunbookParameterArgs build() {
            return new RunbookParameterArgs(defaultValue, isMandatory, position, type);
        }
    }
}
