// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.videoanalyzer.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.util.Objects;

@OutputCustomType
public final class VideoFlagsResponse {
    /**
     * Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
     * 
     */
    private final Boolean canStream;
    /**
     * Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have this value set to false.
     * 
     */
    private final Boolean hasData;
    /**
     * Value indicating whether or not the video is currently being referenced be an active live pipeline. The fact that is being referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events or camera may not be accessible at the time.
     * 
     */
    private final Boolean isRecording;

    @OutputCustomType.Constructor({"canStream","hasData","isRecording"})
    private VideoFlagsResponse(
        Boolean canStream,
        Boolean hasData,
        Boolean isRecording) {
        this.canStream = Objects.requireNonNull(canStream);
        this.hasData = Objects.requireNonNull(hasData);
        this.isRecording = Objects.requireNonNull(isRecording);
    }

    /**
     * Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
     * 
     */
    public Boolean getCanStream() {
        return this.canStream;
    }
    /**
     * Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have this value set to false.
     * 
     */
    public Boolean getHasData() {
        return this.hasData;
    }
    /**
     * Value indicating whether or not the video is currently being referenced be an active live pipeline. The fact that is being referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events or camera may not be accessible at the time.
     * 
     */
    public Boolean getIsRecording() {
        return this.isRecording;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VideoFlagsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean canStream;
        private Boolean hasData;
        private Boolean isRecording;

        public Builder() {
    	      // Empty
        }

        public Builder(VideoFlagsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canStream = defaults.canStream;
    	      this.hasData = defaults.hasData;
    	      this.isRecording = defaults.isRecording;
        }

        public Builder setCanStream(Boolean canStream) {
            this.canStream = Objects.requireNonNull(canStream);
            return this;
        }

        public Builder setHasData(Boolean hasData) {
            this.hasData = Objects.requireNonNull(hasData);
            return this;
        }

        public Builder setIsRecording(Boolean isRecording) {
            this.isRecording = Objects.requireNonNull(isRecording);
            return this;
        }
        public VideoFlagsResponse build() {
            return new VideoFlagsResponse(canStream, hasData, isRecording);
        }
    }
}
