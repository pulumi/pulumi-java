// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.videoanalyzer.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.util.Objects;

@OutputCustomType
public final class VideoFlagsResponse {
    private final Boolean canStream;
    private final Boolean hasData;
    private final Boolean isRecording;

    @OutputCustomType.Constructor({"canStream","hasData","isRecording"})
    private VideoFlagsResponse(
        Boolean canStream,
        Boolean hasData,
        Boolean isRecording) {
        this.canStream = Objects.requireNonNull(canStream);
        this.hasData = Objects.requireNonNull(hasData);
        this.isRecording = Objects.requireNonNull(isRecording);
    }

    public Boolean getCanStream() {
        return this.canStream;
    }
    public Boolean getHasData() {
        return this.hasData;
    }
    public Boolean getIsRecording() {
        return this.isRecording;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VideoFlagsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean canStream;
        private Boolean hasData;
        private Boolean isRecording;

        public Builder() {
    	      // Empty
        }

        public Builder(VideoFlagsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canStream = defaults.canStream;
    	      this.hasData = defaults.hasData;
    	      this.isRecording = defaults.isRecording;
        }

        public Builder setCanStream(Boolean canStream) {
            this.canStream = Objects.requireNonNull(canStream);
            return this;
        }

        public Builder setHasData(Boolean hasData) {
            this.hasData = Objects.requireNonNull(hasData);
            return this;
        }

        public Builder setIsRecording(Boolean isRecording) {
            this.isRecording = Objects.requireNonNull(isRecording);
            return this;
        }

        public VideoFlagsResponse build() {
            return new VideoFlagsResponse(canStream, hasData, isRecording);
        }
    }
}
