// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databoxedge.inputs;

import io.pulumi.azurenative.databoxedge.enums.ClientPermissionType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * The mapping between a particular client IP and the type of access client has on the NFS share.
 * 
 */
public final class ClientAccessRightArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClientAccessRightArgs Empty = new ClientAccessRightArgs();

    /**
     * Type of access to be allowed for the client.
     * 
     */
    @InputImport(name="accessPermission", required=true)
      private final Input<Either<String,ClientPermissionType>> accessPermission;

    public Input<Either<String,ClientPermissionType>> getAccessPermission() {
        return this.accessPermission;
    }

    /**
     * IP of the client.
     * 
     */
    @InputImport(name="client", required=true)
      private final Input<String> client;

    public Input<String> getClient() {
        return this.client;
    }

    public ClientAccessRightArgs(
        Input<Either<String,ClientPermissionType>> accessPermission,
        Input<String> client) {
        this.accessPermission = Objects.requireNonNull(accessPermission, "expected parameter 'accessPermission' to be non-null");
        this.client = Objects.requireNonNull(client, "expected parameter 'client' to be non-null");
    }

    private ClientAccessRightArgs() {
        this.accessPermission = Input.empty();
        this.client = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClientAccessRightArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Either<String,ClientPermissionType>> accessPermission;
        private Input<String> client;

        public Builder() {
    	      // Empty
        }

        public Builder(ClientAccessRightArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPermission = defaults.accessPermission;
    	      this.client = defaults.client;
        }

        public Builder accessPermission(Input<Either<String,ClientPermissionType>> accessPermission) {
            this.accessPermission = Objects.requireNonNull(accessPermission);
            return this;
        }

        public Builder accessPermission(Either<String,ClientPermissionType> accessPermission) {
            this.accessPermission = Input.of(Objects.requireNonNull(accessPermission));
            return this;
        }

        public Builder client(Input<String> client) {
            this.client = Objects.requireNonNull(client);
            return this;
        }

        public Builder client(String client) {
            this.client = Input.of(Objects.requireNonNull(client));
            return this;
        }
        public ClientAccessRightArgs build() {
            return new ClientAccessRightArgs(accessPermission, client);
        }
    }
}
