// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.enums.UnauthenticatedClientActionV2;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The configuration settings that determines the validation flow of users using App Service Authentication/Authorization.
 * 
 */
public final class GlobalValidationArgs extends io.pulumi.resources.ResourceArgs {

    public static final GlobalValidationArgs Empty = new GlobalValidationArgs();

    /**
     * The paths for which unauthenticated flow would not be redirected to the login page.
     * 
     */
    @InputImport(name="excludedPaths")
        private final @Nullable Input<List<String>> excludedPaths;

    public Input<List<String>> getExcludedPaths() {
        return this.excludedPaths == null ? Input.empty() : this.excludedPaths;
    }

    /**
     * The default authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the unauthenticated client
     * action is set to "RedirectToLoginPage".
     * 
     */
    @InputImport(name="redirectToProvider")
        private final @Nullable Input<String> redirectToProvider;

    public Input<String> getRedirectToProvider() {
        return this.redirectToProvider == null ? Input.empty() : this.redirectToProvider;
    }

    /**
     * <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="requireAuthentication")
        private final @Nullable Input<Boolean> requireAuthentication;

    public Input<Boolean> getRequireAuthentication() {
        return this.requireAuthentication == null ? Input.empty() : this.requireAuthentication;
    }

    /**
     * The action to take when an unauthenticated client attempts to access the app.
     * 
     */
    @InputImport(name="unauthenticatedClientAction")
        private final @Nullable Input<UnauthenticatedClientActionV2> unauthenticatedClientAction;

    public Input<UnauthenticatedClientActionV2> getUnauthenticatedClientAction() {
        return this.unauthenticatedClientAction == null ? Input.empty() : this.unauthenticatedClientAction;
    }

    public GlobalValidationArgs(
        @Nullable Input<List<String>> excludedPaths,
        @Nullable Input<String> redirectToProvider,
        @Nullable Input<Boolean> requireAuthentication,
        @Nullable Input<UnauthenticatedClientActionV2> unauthenticatedClientAction) {
        this.excludedPaths = excludedPaths;
        this.redirectToProvider = redirectToProvider;
        this.requireAuthentication = requireAuthentication;
        this.unauthenticatedClientAction = unauthenticatedClientAction;
    }

    private GlobalValidationArgs() {
        this.excludedPaths = Input.empty();
        this.redirectToProvider = Input.empty();
        this.requireAuthentication = Input.empty();
        this.unauthenticatedClientAction = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalValidationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> excludedPaths;
        private @Nullable Input<String> redirectToProvider;
        private @Nullable Input<Boolean> requireAuthentication;
        private @Nullable Input<UnauthenticatedClientActionV2> unauthenticatedClientAction;

        public Builder() {
    	      // Empty
        }

        public Builder(GlobalValidationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludedPaths = defaults.excludedPaths;
    	      this.redirectToProvider = defaults.redirectToProvider;
    	      this.requireAuthentication = defaults.requireAuthentication;
    	      this.unauthenticatedClientAction = defaults.unauthenticatedClientAction;
        }

        public Builder setExcludedPaths(@Nullable Input<List<String>> excludedPaths) {
            this.excludedPaths = excludedPaths;
            return this;
        }

        public Builder setExcludedPaths(@Nullable List<String> excludedPaths) {
            this.excludedPaths = Input.ofNullable(excludedPaths);
            return this;
        }

        public Builder setRedirectToProvider(@Nullable Input<String> redirectToProvider) {
            this.redirectToProvider = redirectToProvider;
            return this;
        }

        public Builder setRedirectToProvider(@Nullable String redirectToProvider) {
            this.redirectToProvider = Input.ofNullable(redirectToProvider);
            return this;
        }

        public Builder setRequireAuthentication(@Nullable Input<Boolean> requireAuthentication) {
            this.requireAuthentication = requireAuthentication;
            return this;
        }

        public Builder setRequireAuthentication(@Nullable Boolean requireAuthentication) {
            this.requireAuthentication = Input.ofNullable(requireAuthentication);
            return this;
        }

        public Builder setUnauthenticatedClientAction(@Nullable Input<UnauthenticatedClientActionV2> unauthenticatedClientAction) {
            this.unauthenticatedClientAction = unauthenticatedClientAction;
            return this;
        }

        public Builder setUnauthenticatedClientAction(@Nullable UnauthenticatedClientActionV2 unauthenticatedClientAction) {
            this.unauthenticatedClientAction = Input.ofNullable(unauthenticatedClientAction);
            return this;
        }
        public GlobalValidationArgs build() {
            return new GlobalValidationArgs(excludedPaths, redirectToProvider, requireAuthentication, unauthenticatedClientAction);
        }
    }
}
