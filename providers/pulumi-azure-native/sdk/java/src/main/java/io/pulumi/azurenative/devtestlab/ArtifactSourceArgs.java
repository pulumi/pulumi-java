// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab;

import io.pulumi.azurenative.devtestlab.enums.EnableStatus;
import io.pulumi.azurenative.devtestlab.enums.SourceControlType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ArtifactSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ArtifactSourceArgs Empty = new ArtifactSourceArgs();

    /**
     * The folder containing Azure Resource Manager templates.
     * 
     */
    @Import(name="armTemplateFolderPath")
      private final @Nullable Output<String> armTemplateFolderPath;

    public Output<String> armTemplateFolderPath() {
        return this.armTemplateFolderPath == null ? Codegen.empty() : this.armTemplateFolderPath;
    }

    /**
     * The artifact source's branch reference.
     * 
     */
    @Import(name="branchRef")
      private final @Nullable Output<String> branchRef;

    public Output<String> branchRef() {
        return this.branchRef == null ? Codegen.empty() : this.branchRef;
    }

    /**
     * The artifact source's display name.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * The folder containing artifacts.
     * 
     */
    @Import(name="folderPath")
      private final @Nullable Output<String> folderPath;

    public Output<String> folderPath() {
        return this.folderPath == null ? Codegen.empty() : this.folderPath;
    }

    /**
     * The name of the lab.
     * 
     */
    @Import(name="labName", required=true)
      private final Output<String> labName;

    public Output<String> labName() {
        return this.labName;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the artifact source.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The security token to authenticate to the artifact source.
     * 
     */
    @Import(name="securityToken")
      private final @Nullable Output<String> securityToken;

    public Output<String> securityToken() {
        return this.securityToken == null ? Codegen.empty() : this.securityToken;
    }

    /**
     * The artifact source's type.
     * 
     */
    @Import(name="sourceType")
      private final @Nullable Output<Either<String,SourceControlType>> sourceType;

    public Output<Either<String,SourceControlType>> sourceType() {
        return this.sourceType == null ? Codegen.empty() : this.sourceType;
    }

    /**
     * Indicates if the artifact source is enabled (values: Enabled, Disabled).
     * 
     */
    @Import(name="status")
      private final @Nullable Output<Either<String,EnableStatus>> status;

    public Output<Either<String,EnableStatus>> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The artifact source's URI.
     * 
     */
    @Import(name="uri")
      private final @Nullable Output<String> uri;

    public Output<String> uri() {
        return this.uri == null ? Codegen.empty() : this.uri;
    }

    public ArtifactSourceArgs(
        @Nullable Output<String> armTemplateFolderPath,
        @Nullable Output<String> branchRef,
        @Nullable Output<String> displayName,
        @Nullable Output<String> folderPath,
        Output<String> labName,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        Output<String> resourceGroupName,
        @Nullable Output<String> securityToken,
        @Nullable Output<Either<String,SourceControlType>> sourceType,
        @Nullable Output<Either<String,EnableStatus>> status,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> uri) {
        this.armTemplateFolderPath = armTemplateFolderPath;
        this.branchRef = branchRef;
        this.displayName = displayName;
        this.folderPath = folderPath;
        this.labName = Objects.requireNonNull(labName, "expected parameter 'labName' to be non-null");
        this.location = location;
        this.name = name;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.securityToken = securityToken;
        this.sourceType = sourceType;
        this.status = status;
        this.tags = tags;
        this.uri = uri;
    }

    private ArtifactSourceArgs() {
        this.armTemplateFolderPath = Codegen.empty();
        this.branchRef = Codegen.empty();
        this.displayName = Codegen.empty();
        this.folderPath = Codegen.empty();
        this.labName = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.securityToken = Codegen.empty();
        this.sourceType = Codegen.empty();
        this.status = Codegen.empty();
        this.tags = Codegen.empty();
        this.uri = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ArtifactSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> armTemplateFolderPath;
        private @Nullable Output<String> branchRef;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> folderPath;
        private Output<String> labName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> securityToken;
        private @Nullable Output<Either<String,SourceControlType>> sourceType;
        private @Nullable Output<Either<String,EnableStatus>> status;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(ArtifactSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.armTemplateFolderPath = defaults.armTemplateFolderPath;
    	      this.branchRef = defaults.branchRef;
    	      this.displayName = defaults.displayName;
    	      this.folderPath = defaults.folderPath;
    	      this.labName = defaults.labName;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.securityToken = defaults.securityToken;
    	      this.sourceType = defaults.sourceType;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.uri = defaults.uri;
        }

        public Builder armTemplateFolderPath(@Nullable Output<String> armTemplateFolderPath) {
            this.armTemplateFolderPath = armTemplateFolderPath;
            return this;
        }
        public Builder armTemplateFolderPath(@Nullable String armTemplateFolderPath) {
            this.armTemplateFolderPath = Codegen.ofNullable(armTemplateFolderPath);
            return this;
        }
        public Builder branchRef(@Nullable Output<String> branchRef) {
            this.branchRef = branchRef;
            return this;
        }
        public Builder branchRef(@Nullable String branchRef) {
            this.branchRef = Codegen.ofNullable(branchRef);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder folderPath(@Nullable Output<String> folderPath) {
            this.folderPath = folderPath;
            return this;
        }
        public Builder folderPath(@Nullable String folderPath) {
            this.folderPath = Codegen.ofNullable(folderPath);
            return this;
        }
        public Builder labName(Output<String> labName) {
            this.labName = Objects.requireNonNull(labName);
            return this;
        }
        public Builder labName(String labName) {
            this.labName = Output.of(Objects.requireNonNull(labName));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder securityToken(@Nullable Output<String> securityToken) {
            this.securityToken = securityToken;
            return this;
        }
        public Builder securityToken(@Nullable String securityToken) {
            this.securityToken = Codegen.ofNullable(securityToken);
            return this;
        }
        public Builder sourceType(@Nullable Output<Either<String,SourceControlType>> sourceType) {
            this.sourceType = sourceType;
            return this;
        }
        public Builder sourceType(@Nullable Either<String,SourceControlType> sourceType) {
            this.sourceType = Codegen.ofNullable(sourceType);
            return this;
        }
        public Builder status(@Nullable Output<Either<String,EnableStatus>> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable Either<String,EnableStatus> status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder uri(@Nullable Output<String> uri) {
            this.uri = uri;
            return this;
        }
        public Builder uri(@Nullable String uri) {
            this.uri = Codegen.ofNullable(uri);
            return this;
        }        public ArtifactSourceArgs build() {
            return new ArtifactSourceArgs(armTemplateFolderPath, branchRef, displayName, folderPath, labName, location, name, resourceGroupName, securityToken, sourceType, status, tags, uri);
        }
    }
}
