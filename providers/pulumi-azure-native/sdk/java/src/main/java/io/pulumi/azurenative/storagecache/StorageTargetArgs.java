// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storagecache;

import io.pulumi.azurenative.storagecache.enums.ProvisioningStateType;
import io.pulumi.azurenative.storagecache.enums.StorageTargetType;
import io.pulumi.azurenative.storagecache.inputs.BlobNfsTargetArgs;
import io.pulumi.azurenative.storagecache.inputs.ClfsTargetArgs;
import io.pulumi.azurenative.storagecache.inputs.NamespaceJunctionArgs;
import io.pulumi.azurenative.storagecache.inputs.Nfs3TargetArgs;
import io.pulumi.azurenative.storagecache.inputs.UnknownTargetArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StorageTargetArgs extends io.pulumi.resources.ResourceArgs {

    public static final StorageTargetArgs Empty = new StorageTargetArgs();

    /**
     * Properties when targetType is blobNfs.
     * 
     */
    @InputImport(name="blobNfs")
    private final @Nullable Input<BlobNfsTargetArgs> blobNfs;

    public Input<BlobNfsTargetArgs> getBlobNfs() {
        return this.blobNfs == null ? Input.empty() : this.blobNfs;
    }

    /**
     * Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
     * 
     */
    @InputImport(name="cacheName", required=true)
    private final Input<String> cacheName;

    public Input<String> getCacheName() {
        return this.cacheName;
    }

    /**
     * Properties when targetType is clfs.
     * 
     */
    @InputImport(name="clfs")
    private final @Nullable Input<ClfsTargetArgs> clfs;

    public Input<ClfsTargetArgs> getClfs() {
        return this.clfs == null ? Input.empty() : this.clfs;
    }

    /**
     * List of Cache namespace junctions to target for namespace associations.
     * 
     */
    @InputImport(name="junctions")
    private final @Nullable Input<List<NamespaceJunctionArgs>> junctions;

    public Input<List<NamespaceJunctionArgs>> getJunctions() {
        return this.junctions == null ? Input.empty() : this.junctions;
    }

    /**
     * Properties when targetType is nfs3.
     * 
     */
    @InputImport(name="nfs3")
    private final @Nullable Input<Nfs3TargetArgs> nfs3;

    public Input<Nfs3TargetArgs> getNfs3() {
        return this.nfs3 == null ? Input.empty() : this.nfs3;
    }

    /**
     * ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
     * 
     */
    @InputImport(name="provisioningState")
    private final @Nullable Input<Either<String,ProvisioningStateType>> provisioningState;

    public Input<Either<String,ProvisioningStateType>> getProvisioningState() {
        return this.provisioningState == null ? Input.empty() : this.provisioningState;
    }

    /**
     * Target resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of Storage Target.
     * 
     */
    @InputImport(name="storageTargetName")
    private final @Nullable Input<String> storageTargetName;

    public Input<String> getStorageTargetName() {
        return this.storageTargetName == null ? Input.empty() : this.storageTargetName;
    }

    /**
     * Type of the Storage Target.
     * 
     */
    @InputImport(name="targetType", required=true)
    private final Input<Either<String,StorageTargetType>> targetType;

    public Input<Either<String,StorageTargetType>> getTargetType() {
        return this.targetType;
    }

    /**
     * Properties when targetType is unknown.
     * 
     */
    @InputImport(name="unknown")
    private final @Nullable Input<UnknownTargetArgs> unknown;

    public Input<UnknownTargetArgs> getUnknown() {
        return this.unknown == null ? Input.empty() : this.unknown;
    }

    public StorageTargetArgs(
        @Nullable Input<BlobNfsTargetArgs> blobNfs,
        Input<String> cacheName,
        @Nullable Input<ClfsTargetArgs> clfs,
        @Nullable Input<List<NamespaceJunctionArgs>> junctions,
        @Nullable Input<Nfs3TargetArgs> nfs3,
        @Nullable Input<Either<String,ProvisioningStateType>> provisioningState,
        Input<String> resourceGroupName,
        @Nullable Input<String> storageTargetName,
        Input<Either<String,StorageTargetType>> targetType,
        @Nullable Input<UnknownTargetArgs> unknown) {
        this.blobNfs = blobNfs;
        this.cacheName = Objects.requireNonNull(cacheName, "expected parameter 'cacheName' to be non-null");
        this.clfs = clfs;
        this.junctions = junctions;
        this.nfs3 = nfs3;
        this.provisioningState = provisioningState;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.storageTargetName = storageTargetName;
        this.targetType = Objects.requireNonNull(targetType, "expected parameter 'targetType' to be non-null");
        this.unknown = unknown;
    }

    private StorageTargetArgs() {
        this.blobNfs = Input.empty();
        this.cacheName = Input.empty();
        this.clfs = Input.empty();
        this.junctions = Input.empty();
        this.nfs3 = Input.empty();
        this.provisioningState = Input.empty();
        this.resourceGroupName = Input.empty();
        this.storageTargetName = Input.empty();
        this.targetType = Input.empty();
        this.unknown = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StorageTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<BlobNfsTargetArgs> blobNfs;
        private Input<String> cacheName;
        private @Nullable Input<ClfsTargetArgs> clfs;
        private @Nullable Input<List<NamespaceJunctionArgs>> junctions;
        private @Nullable Input<Nfs3TargetArgs> nfs3;
        private @Nullable Input<Either<String,ProvisioningStateType>> provisioningState;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> storageTargetName;
        private Input<Either<String,StorageTargetType>> targetType;
        private @Nullable Input<UnknownTargetArgs> unknown;

        public Builder() {
    	      // Empty
        }

        public Builder(StorageTargetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobNfs = defaults.blobNfs;
    	      this.cacheName = defaults.cacheName;
    	      this.clfs = defaults.clfs;
    	      this.junctions = defaults.junctions;
    	      this.nfs3 = defaults.nfs3;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.storageTargetName = defaults.storageTargetName;
    	      this.targetType = defaults.targetType;
    	      this.unknown = defaults.unknown;
        }

        public Builder setBlobNfs(@Nullable Input<BlobNfsTargetArgs> blobNfs) {
            this.blobNfs = blobNfs;
            return this;
        }

        public Builder setBlobNfs(@Nullable BlobNfsTargetArgs blobNfs) {
            this.blobNfs = Input.ofNullable(blobNfs);
            return this;
        }

        public Builder setCacheName(Input<String> cacheName) {
            this.cacheName = Objects.requireNonNull(cacheName);
            return this;
        }

        public Builder setCacheName(String cacheName) {
            this.cacheName = Input.of(Objects.requireNonNull(cacheName));
            return this;
        }

        public Builder setClfs(@Nullable Input<ClfsTargetArgs> clfs) {
            this.clfs = clfs;
            return this;
        }

        public Builder setClfs(@Nullable ClfsTargetArgs clfs) {
            this.clfs = Input.ofNullable(clfs);
            return this;
        }

        public Builder setJunctions(@Nullable Input<List<NamespaceJunctionArgs>> junctions) {
            this.junctions = junctions;
            return this;
        }

        public Builder setJunctions(@Nullable List<NamespaceJunctionArgs> junctions) {
            this.junctions = Input.ofNullable(junctions);
            return this;
        }

        public Builder setNfs3(@Nullable Input<Nfs3TargetArgs> nfs3) {
            this.nfs3 = nfs3;
            return this;
        }

        public Builder setNfs3(@Nullable Nfs3TargetArgs nfs3) {
            this.nfs3 = Input.ofNullable(nfs3);
            return this;
        }

        public Builder setProvisioningState(@Nullable Input<Either<String,ProvisioningStateType>> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }

        public Builder setProvisioningState(@Nullable Either<String,ProvisioningStateType> provisioningState) {
            this.provisioningState = Input.ofNullable(provisioningState);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setStorageTargetName(@Nullable Input<String> storageTargetName) {
            this.storageTargetName = storageTargetName;
            return this;
        }

        public Builder setStorageTargetName(@Nullable String storageTargetName) {
            this.storageTargetName = Input.ofNullable(storageTargetName);
            return this;
        }

        public Builder setTargetType(Input<Either<String,StorageTargetType>> targetType) {
            this.targetType = Objects.requireNonNull(targetType);
            return this;
        }

        public Builder setTargetType(Either<String,StorageTargetType> targetType) {
            this.targetType = Input.of(Objects.requireNonNull(targetType));
            return this;
        }

        public Builder setUnknown(@Nullable Input<UnknownTargetArgs> unknown) {
            this.unknown = unknown;
            return this;
        }

        public Builder setUnknown(@Nullable UnknownTargetArgs unknown) {
            this.unknown = Input.ofNullable(unknown);
            return this;
        }

        public StorageTargetArgs build() {
            return new StorageTargetArgs(blobNfs, cacheName, clfs, junctions, nfs3, provisioningState, resourceGroupName, storageTargetName, targetType, unknown);
        }
    }
}
