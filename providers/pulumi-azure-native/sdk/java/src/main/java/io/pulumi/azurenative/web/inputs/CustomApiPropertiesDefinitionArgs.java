// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.enums.ApiType;
import io.pulumi.azurenative.web.inputs.ApiResourceBackendServiceArgs;
import io.pulumi.azurenative.web.inputs.ApiResourceDefinitionsArgs;
import io.pulumi.azurenative.web.inputs.ConnectionParameterArgs;
import io.pulumi.azurenative.web.inputs.WsdlDefinitionArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Custom API properties
 * 
 */
public final class CustomApiPropertiesDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final CustomApiPropertiesDefinitionArgs Empty = new CustomApiPropertiesDefinitionArgs();

    /**
     * API Definitions
     * 
     */
    @InputImport(name="apiDefinitions")
      private final @Nullable Input<ApiResourceDefinitionsArgs> apiDefinitions;

    public Input<ApiResourceDefinitionsArgs> getApiDefinitions() {
        return this.apiDefinitions == null ? Input.empty() : this.apiDefinitions;
    }

    /**
     * The API type
     * 
     */
    @InputImport(name="apiType")
      private final @Nullable Input<Either<String,ApiType>> apiType;

    public Input<Either<String,ApiType>> getApiType() {
        return this.apiType == null ? Input.empty() : this.apiType;
    }

    /**
     * The API backend service
     * 
     */
    @InputImport(name="backendService")
      private final @Nullable Input<ApiResourceBackendServiceArgs> backendService;

    public Input<ApiResourceBackendServiceArgs> getBackendService() {
        return this.backendService == null ? Input.empty() : this.backendService;
    }

    /**
     * Brand color
     * 
     */
    @InputImport(name="brandColor")
      private final @Nullable Input<String> brandColor;

    public Input<String> getBrandColor() {
        return this.brandColor == null ? Input.empty() : this.brandColor;
    }

    /**
     * The custom API capabilities
     * 
     */
    @InputImport(name="capabilities")
      private final @Nullable Input<List<String>> capabilities;

    public Input<List<String>> getCapabilities() {
        return this.capabilities == null ? Input.empty() : this.capabilities;
    }

    /**
     * Connection parameters
     * 
     */
    @InputImport(name="connectionParameters")
      private final @Nullable Input<Map<String,ConnectionParameterArgs>> connectionParameters;

    public Input<Map<String,ConnectionParameterArgs>> getConnectionParameters() {
        return this.connectionParameters == null ? Input.empty() : this.connectionParameters;
    }

    /**
     * The custom API description
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The display name
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * The icon URI
     * 
     */
    @InputImport(name="iconUri")
      private final @Nullable Input<String> iconUri;

    public Input<String> getIconUri() {
        return this.iconUri == null ? Input.empty() : this.iconUri;
    }

    /**
     * Runtime URLs
     * 
     */
    @InputImport(name="runtimeUrls")
      private final @Nullable Input<List<String>> runtimeUrls;

    public Input<List<String>> getRuntimeUrls() {
        return this.runtimeUrls == null ? Input.empty() : this.runtimeUrls;
    }

    /**
     * The JSON representation of the swagger
     * 
     */
    @InputImport(name="swagger")
      private final @Nullable Input<Object> swagger;

    public Input<Object> getSwagger() {
        return this.swagger == null ? Input.empty() : this.swagger;
    }

    /**
     * The WSDL definition
     * 
     */
    @InputImport(name="wsdlDefinition")
      private final @Nullable Input<WsdlDefinitionArgs> wsdlDefinition;

    public Input<WsdlDefinitionArgs> getWsdlDefinition() {
        return this.wsdlDefinition == null ? Input.empty() : this.wsdlDefinition;
    }

    public CustomApiPropertiesDefinitionArgs(
        @Nullable Input<ApiResourceDefinitionsArgs> apiDefinitions,
        @Nullable Input<Either<String,ApiType>> apiType,
        @Nullable Input<ApiResourceBackendServiceArgs> backendService,
        @Nullable Input<String> brandColor,
        @Nullable Input<List<String>> capabilities,
        @Nullable Input<Map<String,ConnectionParameterArgs>> connectionParameters,
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        @Nullable Input<String> iconUri,
        @Nullable Input<List<String>> runtimeUrls,
        @Nullable Input<Object> swagger,
        @Nullable Input<WsdlDefinitionArgs> wsdlDefinition) {
        this.apiDefinitions = apiDefinitions;
        this.apiType = apiType;
        this.backendService = backendService;
        this.brandColor = brandColor;
        this.capabilities = capabilities;
        this.connectionParameters = connectionParameters;
        this.description = description;
        this.displayName = displayName;
        this.iconUri = iconUri;
        this.runtimeUrls = runtimeUrls;
        this.swagger = swagger;
        this.wsdlDefinition = wsdlDefinition;
    }

    private CustomApiPropertiesDefinitionArgs() {
        this.apiDefinitions = Input.empty();
        this.apiType = Input.empty();
        this.backendService = Input.empty();
        this.brandColor = Input.empty();
        this.capabilities = Input.empty();
        this.connectionParameters = Input.empty();
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.iconUri = Input.empty();
        this.runtimeUrls = Input.empty();
        this.swagger = Input.empty();
        this.wsdlDefinition = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomApiPropertiesDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ApiResourceDefinitionsArgs> apiDefinitions;
        private @Nullable Input<Either<String,ApiType>> apiType;
        private @Nullable Input<ApiResourceBackendServiceArgs> backendService;
        private @Nullable Input<String> brandColor;
        private @Nullable Input<List<String>> capabilities;
        private @Nullable Input<Map<String,ConnectionParameterArgs>> connectionParameters;
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private @Nullable Input<String> iconUri;
        private @Nullable Input<List<String>> runtimeUrls;
        private @Nullable Input<Object> swagger;
        private @Nullable Input<WsdlDefinitionArgs> wsdlDefinition;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomApiPropertiesDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiDefinitions = defaults.apiDefinitions;
    	      this.apiType = defaults.apiType;
    	      this.backendService = defaults.backendService;
    	      this.brandColor = defaults.brandColor;
    	      this.capabilities = defaults.capabilities;
    	      this.connectionParameters = defaults.connectionParameters;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.iconUri = defaults.iconUri;
    	      this.runtimeUrls = defaults.runtimeUrls;
    	      this.swagger = defaults.swagger;
    	      this.wsdlDefinition = defaults.wsdlDefinition;
        }

        public Builder apiDefinitions(@Nullable Input<ApiResourceDefinitionsArgs> apiDefinitions) {
            this.apiDefinitions = apiDefinitions;
            return this;
        }

        public Builder apiDefinitions(@Nullable ApiResourceDefinitionsArgs apiDefinitions) {
            this.apiDefinitions = Input.ofNullable(apiDefinitions);
            return this;
        }

        public Builder apiType(@Nullable Input<Either<String,ApiType>> apiType) {
            this.apiType = apiType;
            return this;
        }

        public Builder apiType(@Nullable Either<String,ApiType> apiType) {
            this.apiType = Input.ofNullable(apiType);
            return this;
        }

        public Builder backendService(@Nullable Input<ApiResourceBackendServiceArgs> backendService) {
            this.backendService = backendService;
            return this;
        }

        public Builder backendService(@Nullable ApiResourceBackendServiceArgs backendService) {
            this.backendService = Input.ofNullable(backendService);
            return this;
        }

        public Builder brandColor(@Nullable Input<String> brandColor) {
            this.brandColor = brandColor;
            return this;
        }

        public Builder brandColor(@Nullable String brandColor) {
            this.brandColor = Input.ofNullable(brandColor);
            return this;
        }

        public Builder capabilities(@Nullable Input<List<String>> capabilities) {
            this.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(@Nullable List<String> capabilities) {
            this.capabilities = Input.ofNullable(capabilities);
            return this;
        }

        public Builder connectionParameters(@Nullable Input<Map<String,ConnectionParameterArgs>> connectionParameters) {
            this.connectionParameters = connectionParameters;
            return this;
        }

        public Builder connectionParameters(@Nullable Map<String,ConnectionParameterArgs> connectionParameters) {
            this.connectionParameters = Input.ofNullable(connectionParameters);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder displayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder iconUri(@Nullable Input<String> iconUri) {
            this.iconUri = iconUri;
            return this;
        }

        public Builder iconUri(@Nullable String iconUri) {
            this.iconUri = Input.ofNullable(iconUri);
            return this;
        }

        public Builder runtimeUrls(@Nullable Input<List<String>> runtimeUrls) {
            this.runtimeUrls = runtimeUrls;
            return this;
        }

        public Builder runtimeUrls(@Nullable List<String> runtimeUrls) {
            this.runtimeUrls = Input.ofNullable(runtimeUrls);
            return this;
        }

        public Builder swagger(@Nullable Input<Object> swagger) {
            this.swagger = swagger;
            return this;
        }

        public Builder swagger(@Nullable Object swagger) {
            this.swagger = Input.ofNullable(swagger);
            return this;
        }

        public Builder wsdlDefinition(@Nullable Input<WsdlDefinitionArgs> wsdlDefinition) {
            this.wsdlDefinition = wsdlDefinition;
            return this;
        }

        public Builder wsdlDefinition(@Nullable WsdlDefinitionArgs wsdlDefinition) {
            this.wsdlDefinition = Input.ofNullable(wsdlDefinition);
            return this;
        }
        public CustomApiPropertiesDefinitionArgs build() {
            return new CustomApiPropertiesDefinitionArgs(apiDefinitions, apiType, backendService, brandColor, capabilities, connectionParameters, description, displayName, iconUri, runtimeUrls, swagger, wsdlDefinition);
        }
    }
}
