// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetIdentityProviderResult {
    /**
     * List of Allowed Tenants when configuring Azure Active Directory login.
     * 
     */
    private final @Nullable List<String> allowedTenants;
    /**
     * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
     * 
     */
    private final @Nullable String authority;
    /**
     * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
     * 
     */
    private final String clientId;
    /**
     * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
     * 
     */
    private final @Nullable String clientSecret;
    /**
     * Resource ID.
     * 
     */
    private final String id;
    /**
     * Resource name.
     * 
     */
    private final String name;
    /**
     * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    private final @Nullable String passwordResetPolicyName;
    /**
     * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    private final @Nullable String profileEditingPolicyName;
    /**
     * Signin Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    private final @Nullable String signinPolicyName;
    /**
     * The TenantId to use instead of Common when logging into Active Directory
     * 
     */
    private final @Nullable String signinTenant;
    /**
     * Signup Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    private final @Nullable String signupPolicyName;
    /**
     * Resource type for API Management resource.
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"allowedTenants","authority","clientId","clientSecret","id","name","passwordResetPolicyName","profileEditingPolicyName","signinPolicyName","signinTenant","signupPolicyName","type"})
    private GetIdentityProviderResult(
        @Nullable List<String> allowedTenants,
        @Nullable String authority,
        String clientId,
        @Nullable String clientSecret,
        String id,
        String name,
        @Nullable String passwordResetPolicyName,
        @Nullable String profileEditingPolicyName,
        @Nullable String signinPolicyName,
        @Nullable String signinTenant,
        @Nullable String signupPolicyName,
        String type) {
        this.allowedTenants = allowedTenants;
        this.authority = authority;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.id = id;
        this.name = name;
        this.passwordResetPolicyName = passwordResetPolicyName;
        this.profileEditingPolicyName = profileEditingPolicyName;
        this.signinPolicyName = signinPolicyName;
        this.signinTenant = signinTenant;
        this.signupPolicyName = signupPolicyName;
        this.type = type;
    }

    /**
     * List of Allowed Tenants when configuring Azure Active Directory login.
     * 
    */
    public List<String> getAllowedTenants() {
        return this.allowedTenants == null ? List.of() : this.allowedTenants;
    }
    /**
     * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
     * 
    */
    public Optional<String> getAuthority() {
        return Optional.ofNullable(this.authority);
    }
    /**
     * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
     * 
    */
    public String getClientId() {
        return this.clientId;
    }
    /**
     * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
     * 
    */
    public Optional<String> getClientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * Resource ID.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * Resource name.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
     * 
    */
    public Optional<String> getPasswordResetPolicyName() {
        return Optional.ofNullable(this.passwordResetPolicyName);
    }
    /**
     * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
     * 
    */
    public Optional<String> getProfileEditingPolicyName() {
        return Optional.ofNullable(this.profileEditingPolicyName);
    }
    /**
     * Signin Policy Name. Only applies to AAD B2C Identity Provider.
     * 
    */
    public Optional<String> getSigninPolicyName() {
        return Optional.ofNullable(this.signinPolicyName);
    }
    /**
     * The TenantId to use instead of Common when logging into Active Directory
     * 
    */
    public Optional<String> getSigninTenant() {
        return Optional.ofNullable(this.signinTenant);
    }
    /**
     * Signup Policy Name. Only applies to AAD B2C Identity Provider.
     * 
    */
    public Optional<String> getSignupPolicyName() {
        return Optional.ofNullable(this.signupPolicyName);
    }
    /**
     * Resource type for API Management resource.
     * 
    */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIdentityProviderResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> allowedTenants;
        private @Nullable String authority;
        private String clientId;
        private @Nullable String clientSecret;
        private String id;
        private String name;
        private @Nullable String passwordResetPolicyName;
        private @Nullable String profileEditingPolicyName;
        private @Nullable String signinPolicyName;
        private @Nullable String signinTenant;
        private @Nullable String signupPolicyName;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetIdentityProviderResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedTenants = defaults.allowedTenants;
    	      this.authority = defaults.authority;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.passwordResetPolicyName = defaults.passwordResetPolicyName;
    	      this.profileEditingPolicyName = defaults.profileEditingPolicyName;
    	      this.signinPolicyName = defaults.signinPolicyName;
    	      this.signinTenant = defaults.signinTenant;
    	      this.signupPolicyName = defaults.signupPolicyName;
    	      this.type = defaults.type;
        }

        public Builder setAllowedTenants(@Nullable List<String> allowedTenants) {
            this.allowedTenants = allowedTenants;
            return this;
        }

        public Builder setAuthority(@Nullable String authority) {
            this.authority = authority;
            return this;
        }

        public Builder setClientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }

        public Builder setClientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPasswordResetPolicyName(@Nullable String passwordResetPolicyName) {
            this.passwordResetPolicyName = passwordResetPolicyName;
            return this;
        }

        public Builder setProfileEditingPolicyName(@Nullable String profileEditingPolicyName) {
            this.profileEditingPolicyName = profileEditingPolicyName;
            return this;
        }

        public Builder setSigninPolicyName(@Nullable String signinPolicyName) {
            this.signinPolicyName = signinPolicyName;
            return this;
        }

        public Builder setSigninTenant(@Nullable String signinTenant) {
            this.signinTenant = signinTenant;
            return this;
        }

        public Builder setSignupPolicyName(@Nullable String signupPolicyName) {
            this.signupPolicyName = signupPolicyName;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetIdentityProviderResult build() {
            return new GetIdentityProviderResult(allowedTenants, authority, clientId, clientSecret, id, name, passwordResetPolicyName, profileEditingPolicyName, signinPolicyName, signinTenant, signupPolicyName, type);
        }
    }
}
