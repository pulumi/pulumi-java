// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.security.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * AWS cloud account connector based assume role, the role enables delegating access to your AWS resources. The role is composed of role Amazon Resource Name (ARN) and external ID. For more details, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html">Creating a Role to Delegate Permissions to an IAM User (write only)</a>
 * 
 */
public final class AwAssumeRoleAuthenticationDetailsPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final AwAssumeRoleAuthenticationDetailsPropertiesArgs Empty = new AwAssumeRoleAuthenticationDetailsPropertiesArgs();

    /**
     * Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
     * Expected value is 'awsAssumeRole'.
     * 
     */
    @InputImport(name="authenticationType", required=true)
      private final Input<String> authenticationType;

    public Input<String> getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Assumed role ID is an identifier that you can use to create temporary security credentials.
     * 
     */
    @InputImport(name="awsAssumeRoleArn", required=true)
      private final Input<String> awsAssumeRoleArn;

    public Input<String> getAwsAssumeRoleArn() {
        return this.awsAssumeRoleArn;
    }

    /**
     * A unique identifier that is required when you assume a role in another account.
     * 
     */
    @InputImport(name="awsExternalId", required=true)
      private final Input<String> awsExternalId;

    public Input<String> getAwsExternalId() {
        return this.awsExternalId;
    }

    public AwAssumeRoleAuthenticationDetailsPropertiesArgs(
        Input<String> authenticationType,
        Input<String> awsAssumeRoleArn,
        Input<String> awsExternalId) {
        this.authenticationType = Objects.requireNonNull(authenticationType, "expected parameter 'authenticationType' to be non-null");
        this.awsAssumeRoleArn = Objects.requireNonNull(awsAssumeRoleArn, "expected parameter 'awsAssumeRoleArn' to be non-null");
        this.awsExternalId = Objects.requireNonNull(awsExternalId, "expected parameter 'awsExternalId' to be non-null");
    }

    private AwAssumeRoleAuthenticationDetailsPropertiesArgs() {
        this.authenticationType = Input.empty();
        this.awsAssumeRoleArn = Input.empty();
        this.awsExternalId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AwAssumeRoleAuthenticationDetailsPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> authenticationType;
        private Input<String> awsAssumeRoleArn;
        private Input<String> awsExternalId;

        public Builder() {
    	      // Empty
        }

        public Builder(AwAssumeRoleAuthenticationDetailsPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationType = defaults.authenticationType;
    	      this.awsAssumeRoleArn = defaults.awsAssumeRoleArn;
    	      this.awsExternalId = defaults.awsExternalId;
        }

        public Builder setAuthenticationType(Input<String> authenticationType) {
            this.authenticationType = Objects.requireNonNull(authenticationType);
            return this;
        }

        public Builder setAuthenticationType(String authenticationType) {
            this.authenticationType = Input.of(Objects.requireNonNull(authenticationType));
            return this;
        }

        public Builder setAwsAssumeRoleArn(Input<String> awsAssumeRoleArn) {
            this.awsAssumeRoleArn = Objects.requireNonNull(awsAssumeRoleArn);
            return this;
        }

        public Builder setAwsAssumeRoleArn(String awsAssumeRoleArn) {
            this.awsAssumeRoleArn = Input.of(Objects.requireNonNull(awsAssumeRoleArn));
            return this;
        }

        public Builder setAwsExternalId(Input<String> awsExternalId) {
            this.awsExternalId = Objects.requireNonNull(awsExternalId);
            return this;
        }

        public Builder setAwsExternalId(String awsExternalId) {
            this.awsExternalId = Input.of(Objects.requireNonNull(awsExternalId));
            return this;
        }
        public AwAssumeRoleAuthenticationDetailsPropertiesArgs build() {
            return new AwAssumeRoleAuthenticationDetailsPropertiesArgs(authenticationType, awsAssumeRoleArn, awsExternalId);
        }
    }
}
