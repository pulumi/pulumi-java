// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.keyvault.inputs;

import io.pulumi.azurenative.keyvault.enums.CertificatePermissions;
import io.pulumi.azurenative.keyvault.enums.KeyPermissions;
import io.pulumi.azurenative.keyvault.enums.SecretPermissions;
import io.pulumi.azurenative.keyvault.enums.StoragePermissions;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Permissions the identity has for keys, secrets, certificates and storage.
 * 
 */
public final class PermissionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final PermissionsArgs Empty = new PermissionsArgs();

    /**
     * Permissions to certificates
     * 
     */
    @Import(name="certificates")
      private final @Nullable Output<List<Either<String,CertificatePermissions>>> certificates;

    public Output<List<Either<String,CertificatePermissions>>> getCertificates() {
        return this.certificates == null ? Codegen.empty() : this.certificates;
    }

    /**
     * Permissions to keys
     * 
     */
    @Import(name="keys")
      private final @Nullable Output<List<Either<String,KeyPermissions>>> keys;

    public Output<List<Either<String,KeyPermissions>>> getKeys() {
        return this.keys == null ? Codegen.empty() : this.keys;
    }

    /**
     * Permissions to secrets
     * 
     */
    @Import(name="secrets")
      private final @Nullable Output<List<Either<String,SecretPermissions>>> secrets;

    public Output<List<Either<String,SecretPermissions>>> getSecrets() {
        return this.secrets == null ? Codegen.empty() : this.secrets;
    }

    /**
     * Permissions to storage accounts
     * 
     */
    @Import(name="storage")
      private final @Nullable Output<List<Either<String,StoragePermissions>>> storage;

    public Output<List<Either<String,StoragePermissions>>> getStorage() {
        return this.storage == null ? Codegen.empty() : this.storage;
    }

    public PermissionsArgs(
        @Nullable Output<List<Either<String,CertificatePermissions>>> certificates,
        @Nullable Output<List<Either<String,KeyPermissions>>> keys,
        @Nullable Output<List<Either<String,SecretPermissions>>> secrets,
        @Nullable Output<List<Either<String,StoragePermissions>>> storage) {
        this.certificates = certificates;
        this.keys = keys;
        this.secrets = secrets;
        this.storage = storage;
    }

    private PermissionsArgs() {
        this.certificates = Codegen.empty();
        this.keys = Codegen.empty();
        this.secrets = Codegen.empty();
        this.storage = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PermissionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Either<String,CertificatePermissions>>> certificates;
        private @Nullable Output<List<Either<String,KeyPermissions>>> keys;
        private @Nullable Output<List<Either<String,SecretPermissions>>> secrets;
        private @Nullable Output<List<Either<String,StoragePermissions>>> storage;

        public Builder() {
    	      // Empty
        }

        public Builder(PermissionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificates = defaults.certificates;
    	      this.keys = defaults.keys;
    	      this.secrets = defaults.secrets;
    	      this.storage = defaults.storage;
        }

        public Builder certificates(@Nullable Output<List<Either<String,CertificatePermissions>>> certificates) {
            this.certificates = certificates;
            return this;
        }
        public Builder certificates(@Nullable List<Either<String,CertificatePermissions>> certificates) {
            this.certificates = Codegen.ofNullable(certificates);
            return this;
        }
        public Builder certificates(Either<String,CertificatePermissions>... certificates) {
            return certificates(List.of(certificates));
        }
        public Builder keys(@Nullable Output<List<Either<String,KeyPermissions>>> keys) {
            this.keys = keys;
            return this;
        }
        public Builder keys(@Nullable List<Either<String,KeyPermissions>> keys) {
            this.keys = Codegen.ofNullable(keys);
            return this;
        }
        public Builder keys(Either<String,KeyPermissions>... keys) {
            return keys(List.of(keys));
        }
        public Builder secrets(@Nullable Output<List<Either<String,SecretPermissions>>> secrets) {
            this.secrets = secrets;
            return this;
        }
        public Builder secrets(@Nullable List<Either<String,SecretPermissions>> secrets) {
            this.secrets = Codegen.ofNullable(secrets);
            return this;
        }
        public Builder secrets(Either<String,SecretPermissions>... secrets) {
            return secrets(List.of(secrets));
        }
        public Builder storage(@Nullable Output<List<Either<String,StoragePermissions>>> storage) {
            this.storage = storage;
            return this;
        }
        public Builder storage(@Nullable List<Either<String,StoragePermissions>> storage) {
            this.storage = Codegen.ofNullable(storage);
            return this;
        }
        public Builder storage(Either<String,StoragePermissions>... storage) {
            return storage(List.of(storage));
        }        public PermissionsArgs build() {
            return new PermissionsArgs(certificates, keys, secrets, storage);
        }
    }
}
