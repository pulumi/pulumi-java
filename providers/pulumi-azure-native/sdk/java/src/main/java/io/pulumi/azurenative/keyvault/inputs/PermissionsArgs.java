// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.keyvault.inputs;

import io.pulumi.azurenative.keyvault.enums.CertificatePermissions;
import io.pulumi.azurenative.keyvault.enums.KeyPermissions;
import io.pulumi.azurenative.keyvault.enums.SecretPermissions;
import io.pulumi.azurenative.keyvault.enums.StoragePermissions;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Permissions the identity has for keys, secrets, certificates and storage.
 * 
 */
public final class PermissionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final PermissionsArgs Empty = new PermissionsArgs();

    /**
     * Permissions to certificates
     * 
     */
    @InputImport(name="certificates")
    private final @Nullable Input<List<Either<String,CertificatePermissions>>> certificates;

    public Input<List<Either<String,CertificatePermissions>>> getCertificates() {
        return this.certificates == null ? Input.empty() : this.certificates;
    }

    /**
     * Permissions to keys
     * 
     */
    @InputImport(name="keys")
    private final @Nullable Input<List<Either<String,KeyPermissions>>> keys;

    public Input<List<Either<String,KeyPermissions>>> getKeys() {
        return this.keys == null ? Input.empty() : this.keys;
    }

    /**
     * Permissions to secrets
     * 
     */
    @InputImport(name="secrets")
    private final @Nullable Input<List<Either<String,SecretPermissions>>> secrets;

    public Input<List<Either<String,SecretPermissions>>> getSecrets() {
        return this.secrets == null ? Input.empty() : this.secrets;
    }

    /**
     * Permissions to storage accounts
     * 
     */
    @InputImport(name="storage")
    private final @Nullable Input<List<Either<String,StoragePermissions>>> storage;

    public Input<List<Either<String,StoragePermissions>>> getStorage() {
        return this.storage == null ? Input.empty() : this.storage;
    }

    public PermissionsArgs(
        @Nullable Input<List<Either<String,CertificatePermissions>>> certificates,
        @Nullable Input<List<Either<String,KeyPermissions>>> keys,
        @Nullable Input<List<Either<String,SecretPermissions>>> secrets,
        @Nullable Input<List<Either<String,StoragePermissions>>> storage) {
        this.certificates = certificates;
        this.keys = keys;
        this.secrets = secrets;
        this.storage = storage;
    }

    private PermissionsArgs() {
        this.certificates = Input.empty();
        this.keys = Input.empty();
        this.secrets = Input.empty();
        this.storage = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PermissionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<Either<String,CertificatePermissions>>> certificates;
        private @Nullable Input<List<Either<String,KeyPermissions>>> keys;
        private @Nullable Input<List<Either<String,SecretPermissions>>> secrets;
        private @Nullable Input<List<Either<String,StoragePermissions>>> storage;

        public Builder() {
    	      // Empty
        }

        public Builder(PermissionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificates = defaults.certificates;
    	      this.keys = defaults.keys;
    	      this.secrets = defaults.secrets;
    	      this.storage = defaults.storage;
        }

        public Builder setCertificates(@Nullable Input<List<Either<String,CertificatePermissions>>> certificates) {
            this.certificates = certificates;
            return this;
        }

        public Builder setCertificates(@Nullable List<Either<String,CertificatePermissions>> certificates) {
            this.certificates = Input.ofNullable(certificates);
            return this;
        }

        public Builder setKeys(@Nullable Input<List<Either<String,KeyPermissions>>> keys) {
            this.keys = keys;
            return this;
        }

        public Builder setKeys(@Nullable List<Either<String,KeyPermissions>> keys) {
            this.keys = Input.ofNullable(keys);
            return this;
        }

        public Builder setSecrets(@Nullable Input<List<Either<String,SecretPermissions>>> secrets) {
            this.secrets = secrets;
            return this;
        }

        public Builder setSecrets(@Nullable List<Either<String,SecretPermissions>> secrets) {
            this.secrets = Input.ofNullable(secrets);
            return this;
        }

        public Builder setStorage(@Nullable Input<List<Either<String,StoragePermissions>>> storage) {
            this.storage = storage;
            return this;
        }

        public Builder setStorage(@Nullable List<Either<String,StoragePermissions>> storage) {
            this.storage = Input.ofNullable(storage);
            return this;
        }

        public PermissionsArgs build() {
            return new PermissionsArgs(certificates, keys, secrets, storage);
        }
    }
}
