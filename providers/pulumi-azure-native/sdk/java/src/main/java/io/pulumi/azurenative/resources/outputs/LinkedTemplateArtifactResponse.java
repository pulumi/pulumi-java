// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.resources.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class LinkedTemplateArtifactResponse {
    /**
     * A filesystem safe relative path of the artifact.
     * 
     */
    private final String path;
    /**
     * The Azure Resource Manager template.
     * 
     */
    private final Object template;

    @OutputCustomType.Constructor({"path","template"})
    private LinkedTemplateArtifactResponse(
        String path,
        Object template) {
        this.path = Objects.requireNonNull(path);
        this.template = Objects.requireNonNull(template);
    }

    /**
     * A filesystem safe relative path of the artifact.
     * 
    */
    public String getPath() {
        return this.path;
    }
    /**
     * The Azure Resource Manager template.
     * 
    */
    public Object getTemplate() {
        return this.template;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinkedTemplateArtifactResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String path;
        private Object template;

        public Builder() {
    	      // Empty
        }

        public Builder(LinkedTemplateArtifactResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.path = defaults.path;
    	      this.template = defaults.template;
        }

        public Builder setPath(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }

        public Builder setTemplate(Object template) {
            this.template = Objects.requireNonNull(template);
            return this;
        }
        public LinkedTemplateArtifactResponse build() {
            return new LinkedTemplateArtifactResponse(path, template);
        }
    }
}
