// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.enums.VirtualNetworkGatewayConnectionMode;
import io.pulumi.azurenative.network.enums.VirtualNetworkGatewayConnectionProtocol;
import io.pulumi.azurenative.network.enums.VirtualNetworkGatewayConnectionType;
import io.pulumi.azurenative.network.inputs.IpsecPolicyArgs;
import io.pulumi.azurenative.network.inputs.LocalNetworkGatewayArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.azurenative.network.inputs.TrafficSelectorPolicyArgs;
import io.pulumi.azurenative.network.inputs.VirtualNetworkGatewayArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualNetworkGatewayConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkGatewayConnectionArgs Empty = new VirtualNetworkGatewayConnectionArgs();

    @InputImport(name="authorizationKey")
    private final @Nullable Input<String> authorizationKey;

    public Input<String> getAuthorizationKey() {
        return this.authorizationKey == null ? Input.empty() : this.authorizationKey;
    }

    @InputImport(name="connectionMode")
    private final @Nullable Input<Either<String,VirtualNetworkGatewayConnectionMode>> connectionMode;

    public Input<Either<String,VirtualNetworkGatewayConnectionMode>> getConnectionMode() {
        return this.connectionMode == null ? Input.empty() : this.connectionMode;
    }

    @InputImport(name="connectionProtocol")
    private final @Nullable Input<Either<String,VirtualNetworkGatewayConnectionProtocol>> connectionProtocol;

    public Input<Either<String,VirtualNetworkGatewayConnectionProtocol>> getConnectionProtocol() {
        return this.connectionProtocol == null ? Input.empty() : this.connectionProtocol;
    }

    @InputImport(name="connectionType", required=true)
    private final Input<Either<String,VirtualNetworkGatewayConnectionType>> connectionType;

    public Input<Either<String,VirtualNetworkGatewayConnectionType>> getConnectionType() {
        return this.connectionType;
    }

    @InputImport(name="dpdTimeoutSeconds")
    private final @Nullable Input<Integer> dpdTimeoutSeconds;

    public Input<Integer> getDpdTimeoutSeconds() {
        return this.dpdTimeoutSeconds == null ? Input.empty() : this.dpdTimeoutSeconds;
    }

    @InputImport(name="enableBgp")
    private final @Nullable Input<Boolean> enableBgp;

    public Input<Boolean> getEnableBgp() {
        return this.enableBgp == null ? Input.empty() : this.enableBgp;
    }

    @InputImport(name="expressRouteGatewayBypass")
    private final @Nullable Input<Boolean> expressRouteGatewayBypass;

    public Input<Boolean> getExpressRouteGatewayBypass() {
        return this.expressRouteGatewayBypass == null ? Input.empty() : this.expressRouteGatewayBypass;
    }

    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="ipsecPolicies")
    private final @Nullable Input<List<IpsecPolicyArgs>> ipsecPolicies;

    public Input<List<IpsecPolicyArgs>> getIpsecPolicies() {
        return this.ipsecPolicies == null ? Input.empty() : this.ipsecPolicies;
    }

    @InputImport(name="localNetworkGateway2")
    private final @Nullable Input<LocalNetworkGatewayArgs> localNetworkGateway2;

    public Input<LocalNetworkGatewayArgs> getLocalNetworkGateway2() {
        return this.localNetworkGateway2 == null ? Input.empty() : this.localNetworkGateway2;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="peer")
    private final @Nullable Input<SubResourceArgs> peer;

    public Input<SubResourceArgs> getPeer() {
        return this.peer == null ? Input.empty() : this.peer;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="routingWeight")
    private final @Nullable Input<Integer> routingWeight;

    public Input<Integer> getRoutingWeight() {
        return this.routingWeight == null ? Input.empty() : this.routingWeight;
    }

    @InputImport(name="sharedKey")
    private final @Nullable Input<String> sharedKey;

    public Input<String> getSharedKey() {
        return this.sharedKey == null ? Input.empty() : this.sharedKey;
    }

    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="trafficSelectorPolicies")
    private final @Nullable Input<List<TrafficSelectorPolicyArgs>> trafficSelectorPolicies;

    public Input<List<TrafficSelectorPolicyArgs>> getTrafficSelectorPolicies() {
        return this.trafficSelectorPolicies == null ? Input.empty() : this.trafficSelectorPolicies;
    }

    @InputImport(name="useLocalAzureIpAddress")
    private final @Nullable Input<Boolean> useLocalAzureIpAddress;

    public Input<Boolean> getUseLocalAzureIpAddress() {
        return this.useLocalAzureIpAddress == null ? Input.empty() : this.useLocalAzureIpAddress;
    }

    @InputImport(name="usePolicyBasedTrafficSelectors")
    private final @Nullable Input<Boolean> usePolicyBasedTrafficSelectors;

    public Input<Boolean> getUsePolicyBasedTrafficSelectors() {
        return this.usePolicyBasedTrafficSelectors == null ? Input.empty() : this.usePolicyBasedTrafficSelectors;
    }

    @InputImport(name="virtualNetworkGateway1", required=true)
    private final Input<VirtualNetworkGatewayArgs> virtualNetworkGateway1;

    public Input<VirtualNetworkGatewayArgs> getVirtualNetworkGateway1() {
        return this.virtualNetworkGateway1;
    }

    @InputImport(name="virtualNetworkGateway2")
    private final @Nullable Input<VirtualNetworkGatewayArgs> virtualNetworkGateway2;

    public Input<VirtualNetworkGatewayArgs> getVirtualNetworkGateway2() {
        return this.virtualNetworkGateway2 == null ? Input.empty() : this.virtualNetworkGateway2;
    }

    @InputImport(name="virtualNetworkGatewayConnectionName")
    private final @Nullable Input<String> virtualNetworkGatewayConnectionName;

    public Input<String> getVirtualNetworkGatewayConnectionName() {
        return this.virtualNetworkGatewayConnectionName == null ? Input.empty() : this.virtualNetworkGatewayConnectionName;
    }

    public VirtualNetworkGatewayConnectionArgs(
        @Nullable Input<String> authorizationKey,
        @Nullable Input<Either<String,VirtualNetworkGatewayConnectionMode>> connectionMode,
        @Nullable Input<Either<String,VirtualNetworkGatewayConnectionProtocol>> connectionProtocol,
        Input<Either<String,VirtualNetworkGatewayConnectionType>> connectionType,
        @Nullable Input<Integer> dpdTimeoutSeconds,
        @Nullable Input<Boolean> enableBgp,
        @Nullable Input<Boolean> expressRouteGatewayBypass,
        @Nullable Input<String> id,
        @Nullable Input<List<IpsecPolicyArgs>> ipsecPolicies,
        @Nullable Input<LocalNetworkGatewayArgs> localNetworkGateway2,
        @Nullable Input<String> location,
        @Nullable Input<SubResourceArgs> peer,
        Input<String> resourceGroupName,
        @Nullable Input<Integer> routingWeight,
        @Nullable Input<String> sharedKey,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<List<TrafficSelectorPolicyArgs>> trafficSelectorPolicies,
        @Nullable Input<Boolean> useLocalAzureIpAddress,
        @Nullable Input<Boolean> usePolicyBasedTrafficSelectors,
        Input<VirtualNetworkGatewayArgs> virtualNetworkGateway1,
        @Nullable Input<VirtualNetworkGatewayArgs> virtualNetworkGateway2,
        @Nullable Input<String> virtualNetworkGatewayConnectionName) {
        this.authorizationKey = authorizationKey;
        this.connectionMode = connectionMode;
        this.connectionProtocol = connectionProtocol;
        this.connectionType = Objects.requireNonNull(connectionType, "expected parameter 'connectionType' to be non-null");
        this.dpdTimeoutSeconds = dpdTimeoutSeconds;
        this.enableBgp = enableBgp;
        this.expressRouteGatewayBypass = expressRouteGatewayBypass;
        this.id = id;
        this.ipsecPolicies = ipsecPolicies;
        this.localNetworkGateway2 = localNetworkGateway2;
        this.location = location;
        this.peer = peer;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.routingWeight = routingWeight;
        this.sharedKey = sharedKey;
        this.tags = tags;
        this.trafficSelectorPolicies = trafficSelectorPolicies;
        this.useLocalAzureIpAddress = useLocalAzureIpAddress;
        this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
        this.virtualNetworkGateway1 = Objects.requireNonNull(virtualNetworkGateway1, "expected parameter 'virtualNetworkGateway1' to be non-null");
        this.virtualNetworkGateway2 = virtualNetworkGateway2;
        this.virtualNetworkGatewayConnectionName = virtualNetworkGatewayConnectionName;
    }

    private VirtualNetworkGatewayConnectionArgs() {
        this.authorizationKey = Input.empty();
        this.connectionMode = Input.empty();
        this.connectionProtocol = Input.empty();
        this.connectionType = Input.empty();
        this.dpdTimeoutSeconds = Input.empty();
        this.enableBgp = Input.empty();
        this.expressRouteGatewayBypass = Input.empty();
        this.id = Input.empty();
        this.ipsecPolicies = Input.empty();
        this.localNetworkGateway2 = Input.empty();
        this.location = Input.empty();
        this.peer = Input.empty();
        this.resourceGroupName = Input.empty();
        this.routingWeight = Input.empty();
        this.sharedKey = Input.empty();
        this.tags = Input.empty();
        this.trafficSelectorPolicies = Input.empty();
        this.useLocalAzureIpAddress = Input.empty();
        this.usePolicyBasedTrafficSelectors = Input.empty();
        this.virtualNetworkGateway1 = Input.empty();
        this.virtualNetworkGateway2 = Input.empty();
        this.virtualNetworkGatewayConnectionName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNetworkGatewayConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> authorizationKey;
        private @Nullable Input<Either<String,VirtualNetworkGatewayConnectionMode>> connectionMode;
        private @Nullable Input<Either<String,VirtualNetworkGatewayConnectionProtocol>> connectionProtocol;
        private Input<Either<String,VirtualNetworkGatewayConnectionType>> connectionType;
        private @Nullable Input<Integer> dpdTimeoutSeconds;
        private @Nullable Input<Boolean> enableBgp;
        private @Nullable Input<Boolean> expressRouteGatewayBypass;
        private @Nullable Input<String> id;
        private @Nullable Input<List<IpsecPolicyArgs>> ipsecPolicies;
        private @Nullable Input<LocalNetworkGatewayArgs> localNetworkGateway2;
        private @Nullable Input<String> location;
        private @Nullable Input<SubResourceArgs> peer;
        private Input<String> resourceGroupName;
        private @Nullable Input<Integer> routingWeight;
        private @Nullable Input<String> sharedKey;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<List<TrafficSelectorPolicyArgs>> trafficSelectorPolicies;
        private @Nullable Input<Boolean> useLocalAzureIpAddress;
        private @Nullable Input<Boolean> usePolicyBasedTrafficSelectors;
        private Input<VirtualNetworkGatewayArgs> virtualNetworkGateway1;
        private @Nullable Input<VirtualNetworkGatewayArgs> virtualNetworkGateway2;
        private @Nullable Input<String> virtualNetworkGatewayConnectionName;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNetworkGatewayConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationKey = defaults.authorizationKey;
    	      this.connectionMode = defaults.connectionMode;
    	      this.connectionProtocol = defaults.connectionProtocol;
    	      this.connectionType = defaults.connectionType;
    	      this.dpdTimeoutSeconds = defaults.dpdTimeoutSeconds;
    	      this.enableBgp = defaults.enableBgp;
    	      this.expressRouteGatewayBypass = defaults.expressRouteGatewayBypass;
    	      this.id = defaults.id;
    	      this.ipsecPolicies = defaults.ipsecPolicies;
    	      this.localNetworkGateway2 = defaults.localNetworkGateway2;
    	      this.location = defaults.location;
    	      this.peer = defaults.peer;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.routingWeight = defaults.routingWeight;
    	      this.sharedKey = defaults.sharedKey;
    	      this.tags = defaults.tags;
    	      this.trafficSelectorPolicies = defaults.trafficSelectorPolicies;
    	      this.useLocalAzureIpAddress = defaults.useLocalAzureIpAddress;
    	      this.usePolicyBasedTrafficSelectors = defaults.usePolicyBasedTrafficSelectors;
    	      this.virtualNetworkGateway1 = defaults.virtualNetworkGateway1;
    	      this.virtualNetworkGateway2 = defaults.virtualNetworkGateway2;
    	      this.virtualNetworkGatewayConnectionName = defaults.virtualNetworkGatewayConnectionName;
        }

        public Builder setAuthorizationKey(@Nullable Input<String> authorizationKey) {
            this.authorizationKey = authorizationKey;
            return this;
        }

        public Builder setAuthorizationKey(@Nullable String authorizationKey) {
            this.authorizationKey = Input.ofNullable(authorizationKey);
            return this;
        }

        public Builder setConnectionMode(@Nullable Input<Either<String,VirtualNetworkGatewayConnectionMode>> connectionMode) {
            this.connectionMode = connectionMode;
            return this;
        }

        public Builder setConnectionMode(@Nullable Either<String,VirtualNetworkGatewayConnectionMode> connectionMode) {
            this.connectionMode = Input.ofNullable(connectionMode);
            return this;
        }

        public Builder setConnectionProtocol(@Nullable Input<Either<String,VirtualNetworkGatewayConnectionProtocol>> connectionProtocol) {
            this.connectionProtocol = connectionProtocol;
            return this;
        }

        public Builder setConnectionProtocol(@Nullable Either<String,VirtualNetworkGatewayConnectionProtocol> connectionProtocol) {
            this.connectionProtocol = Input.ofNullable(connectionProtocol);
            return this;
        }

        public Builder setConnectionType(Input<Either<String,VirtualNetworkGatewayConnectionType>> connectionType) {
            this.connectionType = Objects.requireNonNull(connectionType);
            return this;
        }

        public Builder setConnectionType(Either<String,VirtualNetworkGatewayConnectionType> connectionType) {
            this.connectionType = Input.of(Objects.requireNonNull(connectionType));
            return this;
        }

        public Builder setDpdTimeoutSeconds(@Nullable Input<Integer> dpdTimeoutSeconds) {
            this.dpdTimeoutSeconds = dpdTimeoutSeconds;
            return this;
        }

        public Builder setDpdTimeoutSeconds(@Nullable Integer dpdTimeoutSeconds) {
            this.dpdTimeoutSeconds = Input.ofNullable(dpdTimeoutSeconds);
            return this;
        }

        public Builder setEnableBgp(@Nullable Input<Boolean> enableBgp) {
            this.enableBgp = enableBgp;
            return this;
        }

        public Builder setEnableBgp(@Nullable Boolean enableBgp) {
            this.enableBgp = Input.ofNullable(enableBgp);
            return this;
        }

        public Builder setExpressRouteGatewayBypass(@Nullable Input<Boolean> expressRouteGatewayBypass) {
            this.expressRouteGatewayBypass = expressRouteGatewayBypass;
            return this;
        }

        public Builder setExpressRouteGatewayBypass(@Nullable Boolean expressRouteGatewayBypass) {
            this.expressRouteGatewayBypass = Input.ofNullable(expressRouteGatewayBypass);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setIpsecPolicies(@Nullable Input<List<IpsecPolicyArgs>> ipsecPolicies) {
            this.ipsecPolicies = ipsecPolicies;
            return this;
        }

        public Builder setIpsecPolicies(@Nullable List<IpsecPolicyArgs> ipsecPolicies) {
            this.ipsecPolicies = Input.ofNullable(ipsecPolicies);
            return this;
        }

        public Builder setLocalNetworkGateway2(@Nullable Input<LocalNetworkGatewayArgs> localNetworkGateway2) {
            this.localNetworkGateway2 = localNetworkGateway2;
            return this;
        }

        public Builder setLocalNetworkGateway2(@Nullable LocalNetworkGatewayArgs localNetworkGateway2) {
            this.localNetworkGateway2 = Input.ofNullable(localNetworkGateway2);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setPeer(@Nullable Input<SubResourceArgs> peer) {
            this.peer = peer;
            return this;
        }

        public Builder setPeer(@Nullable SubResourceArgs peer) {
            this.peer = Input.ofNullable(peer);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setRoutingWeight(@Nullable Input<Integer> routingWeight) {
            this.routingWeight = routingWeight;
            return this;
        }

        public Builder setRoutingWeight(@Nullable Integer routingWeight) {
            this.routingWeight = Input.ofNullable(routingWeight);
            return this;
        }

        public Builder setSharedKey(@Nullable Input<String> sharedKey) {
            this.sharedKey = sharedKey;
            return this;
        }

        public Builder setSharedKey(@Nullable String sharedKey) {
            this.sharedKey = Input.ofNullable(sharedKey);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTrafficSelectorPolicies(@Nullable Input<List<TrafficSelectorPolicyArgs>> trafficSelectorPolicies) {
            this.trafficSelectorPolicies = trafficSelectorPolicies;
            return this;
        }

        public Builder setTrafficSelectorPolicies(@Nullable List<TrafficSelectorPolicyArgs> trafficSelectorPolicies) {
            this.trafficSelectorPolicies = Input.ofNullable(trafficSelectorPolicies);
            return this;
        }

        public Builder setUseLocalAzureIpAddress(@Nullable Input<Boolean> useLocalAzureIpAddress) {
            this.useLocalAzureIpAddress = useLocalAzureIpAddress;
            return this;
        }

        public Builder setUseLocalAzureIpAddress(@Nullable Boolean useLocalAzureIpAddress) {
            this.useLocalAzureIpAddress = Input.ofNullable(useLocalAzureIpAddress);
            return this;
        }

        public Builder setUsePolicyBasedTrafficSelectors(@Nullable Input<Boolean> usePolicyBasedTrafficSelectors) {
            this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            return this;
        }

        public Builder setUsePolicyBasedTrafficSelectors(@Nullable Boolean usePolicyBasedTrafficSelectors) {
            this.usePolicyBasedTrafficSelectors = Input.ofNullable(usePolicyBasedTrafficSelectors);
            return this;
        }

        public Builder setVirtualNetworkGateway1(Input<VirtualNetworkGatewayArgs> virtualNetworkGateway1) {
            this.virtualNetworkGateway1 = Objects.requireNonNull(virtualNetworkGateway1);
            return this;
        }

        public Builder setVirtualNetworkGateway1(VirtualNetworkGatewayArgs virtualNetworkGateway1) {
            this.virtualNetworkGateway1 = Input.of(Objects.requireNonNull(virtualNetworkGateway1));
            return this;
        }

        public Builder setVirtualNetworkGateway2(@Nullable Input<VirtualNetworkGatewayArgs> virtualNetworkGateway2) {
            this.virtualNetworkGateway2 = virtualNetworkGateway2;
            return this;
        }

        public Builder setVirtualNetworkGateway2(@Nullable VirtualNetworkGatewayArgs virtualNetworkGateway2) {
            this.virtualNetworkGateway2 = Input.ofNullable(virtualNetworkGateway2);
            return this;
        }

        public Builder setVirtualNetworkGatewayConnectionName(@Nullable Input<String> virtualNetworkGatewayConnectionName) {
            this.virtualNetworkGatewayConnectionName = virtualNetworkGatewayConnectionName;
            return this;
        }

        public Builder setVirtualNetworkGatewayConnectionName(@Nullable String virtualNetworkGatewayConnectionName) {
            this.virtualNetworkGatewayConnectionName = Input.ofNullable(virtualNetworkGatewayConnectionName);
            return this;
        }

        public VirtualNetworkGatewayConnectionArgs build() {
            return new VirtualNetworkGatewayConnectionArgs(authorizationKey, connectionMode, connectionProtocol, connectionType, dpdTimeoutSeconds, enableBgp, expressRouteGatewayBypass, id, ipsecPolicies, localNetworkGateway2, location, peer, resourceGroupName, routingWeight, sharedKey, tags, trafficSelectorPolicies, useLocalAzureIpAddress, usePolicyBasedTrafficSelectors, virtualNetworkGateway1, virtualNetworkGateway2, virtualNetworkGatewayConnectionName);
        }
    }
}
