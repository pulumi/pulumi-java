// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The Edifact agreement envelope settings.
 * 
 */
public final class EdifactEnvelopeSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final EdifactEnvelopeSettingsResponse Empty = new EdifactEnvelopeSettingsResponse();

    /**
     * The application reference id.
     * 
     */
    @Import(name="applicationReferenceId")
      private final @Nullable String applicationReferenceId;

    public Optional<String> getApplicationReferenceId() {
        return this.applicationReferenceId == null ? Optional.empty() : Optional.ofNullable(this.applicationReferenceId);
    }

    /**
     * The value indicating whether to apply delimiter string advice.
     * 
     */
    @Import(name="applyDelimiterStringAdvice", required=true)
      private final Boolean applyDelimiterStringAdvice;

    public Boolean getApplyDelimiterStringAdvice() {
        return this.applyDelimiterStringAdvice;
    }

    /**
     * The communication agreement id.
     * 
     */
    @Import(name="communicationAgreementId")
      private final @Nullable String communicationAgreementId;

    public Optional<String> getCommunicationAgreementId() {
        return this.communicationAgreementId == null ? Optional.empty() : Optional.ofNullable(this.communicationAgreementId);
    }

    /**
     * The value indicating whether to create grouping segments.
     * 
     */
    @Import(name="createGroupingSegments", required=true)
      private final Boolean createGroupingSegments;

    public Boolean getCreateGroupingSegments() {
        return this.createGroupingSegments;
    }

    /**
     * The value indicating whether to enable default group headers.
     * 
     */
    @Import(name="enableDefaultGroupHeaders", required=true)
      private final Boolean enableDefaultGroupHeaders;

    public Boolean getEnableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }

    /**
     * The functional group id.
     * 
     */
    @Import(name="functionalGroupId")
      private final @Nullable String functionalGroupId;

    public Optional<String> getFunctionalGroupId() {
        return this.functionalGroupId == null ? Optional.empty() : Optional.ofNullable(this.functionalGroupId);
    }

    /**
     * The group application password.
     * 
     */
    @Import(name="groupApplicationPassword")
      private final @Nullable String groupApplicationPassword;

    public Optional<String> getGroupApplicationPassword() {
        return this.groupApplicationPassword == null ? Optional.empty() : Optional.ofNullable(this.groupApplicationPassword);
    }

    /**
     * The group application receiver id.
     * 
     */
    @Import(name="groupApplicationReceiverId")
      private final @Nullable String groupApplicationReceiverId;

    public Optional<String> getGroupApplicationReceiverId() {
        return this.groupApplicationReceiverId == null ? Optional.empty() : Optional.ofNullable(this.groupApplicationReceiverId);
    }

    /**
     * The group application receiver qualifier.
     * 
     */
    @Import(name="groupApplicationReceiverQualifier")
      private final @Nullable String groupApplicationReceiverQualifier;

    public Optional<String> getGroupApplicationReceiverQualifier() {
        return this.groupApplicationReceiverQualifier == null ? Optional.empty() : Optional.ofNullable(this.groupApplicationReceiverQualifier);
    }

    /**
     * The group application sender id.
     * 
     */
    @Import(name="groupApplicationSenderId")
      private final @Nullable String groupApplicationSenderId;

    public Optional<String> getGroupApplicationSenderId() {
        return this.groupApplicationSenderId == null ? Optional.empty() : Optional.ofNullable(this.groupApplicationSenderId);
    }

    /**
     * The group application sender qualifier.
     * 
     */
    @Import(name="groupApplicationSenderQualifier")
      private final @Nullable String groupApplicationSenderQualifier;

    public Optional<String> getGroupApplicationSenderQualifier() {
        return this.groupApplicationSenderQualifier == null ? Optional.empty() : Optional.ofNullable(this.groupApplicationSenderQualifier);
    }

    /**
     * The group association assigned code.
     * 
     */
    @Import(name="groupAssociationAssignedCode")
      private final @Nullable String groupAssociationAssignedCode;

    public Optional<String> getGroupAssociationAssignedCode() {
        return this.groupAssociationAssignedCode == null ? Optional.empty() : Optional.ofNullable(this.groupAssociationAssignedCode);
    }

    /**
     * The group control number lower bound.
     * 
     */
    @Import(name="groupControlNumberLowerBound", required=true)
      private final Double groupControlNumberLowerBound;

    public Double getGroupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }

    /**
     * The group control number prefix.
     * 
     */
    @Import(name="groupControlNumberPrefix")
      private final @Nullable String groupControlNumberPrefix;

    public Optional<String> getGroupControlNumberPrefix() {
        return this.groupControlNumberPrefix == null ? Optional.empty() : Optional.ofNullable(this.groupControlNumberPrefix);
    }

    /**
     * The group control number suffix.
     * 
     */
    @Import(name="groupControlNumberSuffix")
      private final @Nullable String groupControlNumberSuffix;

    public Optional<String> getGroupControlNumberSuffix() {
        return this.groupControlNumberSuffix == null ? Optional.empty() : Optional.ofNullable(this.groupControlNumberSuffix);
    }

    /**
     * The group control number upper bound.
     * 
     */
    @Import(name="groupControlNumberUpperBound", required=true)
      private final Double groupControlNumberUpperBound;

    public Double getGroupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }

    /**
     * The group controlling agency code.
     * 
     */
    @Import(name="groupControllingAgencyCode")
      private final @Nullable String groupControllingAgencyCode;

    public Optional<String> getGroupControllingAgencyCode() {
        return this.groupControllingAgencyCode == null ? Optional.empty() : Optional.ofNullable(this.groupControllingAgencyCode);
    }

    /**
     * The group message release.
     * 
     */
    @Import(name="groupMessageRelease")
      private final @Nullable String groupMessageRelease;

    public Optional<String> getGroupMessageRelease() {
        return this.groupMessageRelease == null ? Optional.empty() : Optional.ofNullable(this.groupMessageRelease);
    }

    /**
     * The group message version.
     * 
     */
    @Import(name="groupMessageVersion")
      private final @Nullable String groupMessageVersion;

    public Optional<String> getGroupMessageVersion() {
        return this.groupMessageVersion == null ? Optional.empty() : Optional.ofNullable(this.groupMessageVersion);
    }

    /**
     * The interchange control number lower bound.
     * 
     */
    @Import(name="interchangeControlNumberLowerBound", required=true)
      private final Double interchangeControlNumberLowerBound;

    public Double getInterchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }

    /**
     * The interchange control number prefix.
     * 
     */
    @Import(name="interchangeControlNumberPrefix")
      private final @Nullable String interchangeControlNumberPrefix;

    public Optional<String> getInterchangeControlNumberPrefix() {
        return this.interchangeControlNumberPrefix == null ? Optional.empty() : Optional.ofNullable(this.interchangeControlNumberPrefix);
    }

    /**
     * The interchange control number suffix.
     * 
     */
    @Import(name="interchangeControlNumberSuffix")
      private final @Nullable String interchangeControlNumberSuffix;

    public Optional<String> getInterchangeControlNumberSuffix() {
        return this.interchangeControlNumberSuffix == null ? Optional.empty() : Optional.ofNullable(this.interchangeControlNumberSuffix);
    }

    /**
     * The interchange control number upper bound.
     * 
     */
    @Import(name="interchangeControlNumberUpperBound", required=true)
      private final Double interchangeControlNumberUpperBound;

    public Double getInterchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }

    /**
     * The value indicating whether the message is a test interchange.
     * 
     */
    @Import(name="isTestInterchange", required=true)
      private final Boolean isTestInterchange;

    public Boolean getIsTestInterchange() {
        return this.isTestInterchange;
    }

    /**
     * The value indicating whether to overwrite existing transaction set control number.
     * 
     */
    @Import(name="overwriteExistingTransactionSetControlNumber", required=true)
      private final Boolean overwriteExistingTransactionSetControlNumber;

    public Boolean getOverwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }

    /**
     * The processing priority code.
     * 
     */
    @Import(name="processingPriorityCode")
      private final @Nullable String processingPriorityCode;

    public Optional<String> getProcessingPriorityCode() {
        return this.processingPriorityCode == null ? Optional.empty() : Optional.ofNullable(this.processingPriorityCode);
    }

    /**
     * The receiver internal identification.
     * 
     */
    @Import(name="receiverInternalIdentification")
      private final @Nullable String receiverInternalIdentification;

    public Optional<String> getReceiverInternalIdentification() {
        return this.receiverInternalIdentification == null ? Optional.empty() : Optional.ofNullable(this.receiverInternalIdentification);
    }

    /**
     * The receiver internal sub identification.
     * 
     */
    @Import(name="receiverInternalSubIdentification")
      private final @Nullable String receiverInternalSubIdentification;

    public Optional<String> getReceiverInternalSubIdentification() {
        return this.receiverInternalSubIdentification == null ? Optional.empty() : Optional.ofNullable(this.receiverInternalSubIdentification);
    }

    /**
     * The receiver reverse routing address.
     * 
     */
    @Import(name="receiverReverseRoutingAddress")
      private final @Nullable String receiverReverseRoutingAddress;

    public Optional<String> getReceiverReverseRoutingAddress() {
        return this.receiverReverseRoutingAddress == null ? Optional.empty() : Optional.ofNullable(this.receiverReverseRoutingAddress);
    }

    /**
     * The recipient reference password qualifier.
     * 
     */
    @Import(name="recipientReferencePasswordQualifier")
      private final @Nullable String recipientReferencePasswordQualifier;

    public Optional<String> getRecipientReferencePasswordQualifier() {
        return this.recipientReferencePasswordQualifier == null ? Optional.empty() : Optional.ofNullable(this.recipientReferencePasswordQualifier);
    }

    /**
     * The recipient reference password value.
     * 
     */
    @Import(name="recipientReferencePasswordValue")
      private final @Nullable String recipientReferencePasswordValue;

    public Optional<String> getRecipientReferencePasswordValue() {
        return this.recipientReferencePasswordValue == null ? Optional.empty() : Optional.ofNullable(this.recipientReferencePasswordValue);
    }

    /**
     * The value indicating whether to rollover group control number.
     * 
     */
    @Import(name="rolloverGroupControlNumber", required=true)
      private final Boolean rolloverGroupControlNumber;

    public Boolean getRolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }

    /**
     * The value indicating whether to rollover interchange control number.
     * 
     */
    @Import(name="rolloverInterchangeControlNumber", required=true)
      private final Boolean rolloverInterchangeControlNumber;

    public Boolean getRolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }

    /**
     * The value indicating whether to rollover transaction set control number.
     * 
     */
    @Import(name="rolloverTransactionSetControlNumber", required=true)
      private final Boolean rolloverTransactionSetControlNumber;

    public Boolean getRolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }

    /**
     * The sender internal identification.
     * 
     */
    @Import(name="senderInternalIdentification")
      private final @Nullable String senderInternalIdentification;

    public Optional<String> getSenderInternalIdentification() {
        return this.senderInternalIdentification == null ? Optional.empty() : Optional.ofNullable(this.senderInternalIdentification);
    }

    /**
     * The sender internal sub identification.
     * 
     */
    @Import(name="senderInternalSubIdentification")
      private final @Nullable String senderInternalSubIdentification;

    public Optional<String> getSenderInternalSubIdentification() {
        return this.senderInternalSubIdentification == null ? Optional.empty() : Optional.ofNullable(this.senderInternalSubIdentification);
    }

    /**
     * The sender reverse routing address.
     * 
     */
    @Import(name="senderReverseRoutingAddress")
      private final @Nullable String senderReverseRoutingAddress;

    public Optional<String> getSenderReverseRoutingAddress() {
        return this.senderReverseRoutingAddress == null ? Optional.empty() : Optional.ofNullable(this.senderReverseRoutingAddress);
    }

    /**
     * The transaction set control number lower bound.
     * 
     */
    @Import(name="transactionSetControlNumberLowerBound", required=true)
      private final Double transactionSetControlNumberLowerBound;

    public Double getTransactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }

    /**
     * The transaction set control number prefix.
     * 
     */
    @Import(name="transactionSetControlNumberPrefix")
      private final @Nullable String transactionSetControlNumberPrefix;

    public Optional<String> getTransactionSetControlNumberPrefix() {
        return this.transactionSetControlNumberPrefix == null ? Optional.empty() : Optional.ofNullable(this.transactionSetControlNumberPrefix);
    }

    /**
     * The transaction set control number suffix.
     * 
     */
    @Import(name="transactionSetControlNumberSuffix")
      private final @Nullable String transactionSetControlNumberSuffix;

    public Optional<String> getTransactionSetControlNumberSuffix() {
        return this.transactionSetControlNumberSuffix == null ? Optional.empty() : Optional.ofNullable(this.transactionSetControlNumberSuffix);
    }

    /**
     * The transaction set control number upper bound.
     * 
     */
    @Import(name="transactionSetControlNumberUpperBound", required=true)
      private final Double transactionSetControlNumberUpperBound;

    public Double getTransactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }

    public EdifactEnvelopeSettingsResponse(
        @Nullable String applicationReferenceId,
        Boolean applyDelimiterStringAdvice,
        @Nullable String communicationAgreementId,
        Boolean createGroupingSegments,
        Boolean enableDefaultGroupHeaders,
        @Nullable String functionalGroupId,
        @Nullable String groupApplicationPassword,
        @Nullable String groupApplicationReceiverId,
        @Nullable String groupApplicationReceiverQualifier,
        @Nullable String groupApplicationSenderId,
        @Nullable String groupApplicationSenderQualifier,
        @Nullable String groupAssociationAssignedCode,
        Double groupControlNumberLowerBound,
        @Nullable String groupControlNumberPrefix,
        @Nullable String groupControlNumberSuffix,
        Double groupControlNumberUpperBound,
        @Nullable String groupControllingAgencyCode,
        @Nullable String groupMessageRelease,
        @Nullable String groupMessageVersion,
        Double interchangeControlNumberLowerBound,
        @Nullable String interchangeControlNumberPrefix,
        @Nullable String interchangeControlNumberSuffix,
        Double interchangeControlNumberUpperBound,
        Boolean isTestInterchange,
        Boolean overwriteExistingTransactionSetControlNumber,
        @Nullable String processingPriorityCode,
        @Nullable String receiverInternalIdentification,
        @Nullable String receiverInternalSubIdentification,
        @Nullable String receiverReverseRoutingAddress,
        @Nullable String recipientReferencePasswordQualifier,
        @Nullable String recipientReferencePasswordValue,
        Boolean rolloverGroupControlNumber,
        Boolean rolloverInterchangeControlNumber,
        Boolean rolloverTransactionSetControlNumber,
        @Nullable String senderInternalIdentification,
        @Nullable String senderInternalSubIdentification,
        @Nullable String senderReverseRoutingAddress,
        Double transactionSetControlNumberLowerBound,
        @Nullable String transactionSetControlNumberPrefix,
        @Nullable String transactionSetControlNumberSuffix,
        Double transactionSetControlNumberUpperBound) {
        this.applicationReferenceId = applicationReferenceId;
        this.applyDelimiterStringAdvice = Objects.requireNonNull(applyDelimiterStringAdvice, "expected parameter 'applyDelimiterStringAdvice' to be non-null");
        this.communicationAgreementId = communicationAgreementId;
        this.createGroupingSegments = Objects.requireNonNull(createGroupingSegments, "expected parameter 'createGroupingSegments' to be non-null");
        this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders, "expected parameter 'enableDefaultGroupHeaders' to be non-null");
        this.functionalGroupId = functionalGroupId;
        this.groupApplicationPassword = groupApplicationPassword;
        this.groupApplicationReceiverId = groupApplicationReceiverId;
        this.groupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
        this.groupApplicationSenderId = groupApplicationSenderId;
        this.groupApplicationSenderQualifier = groupApplicationSenderQualifier;
        this.groupAssociationAssignedCode = groupAssociationAssignedCode;
        this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound, "expected parameter 'groupControlNumberLowerBound' to be non-null");
        this.groupControlNumberPrefix = groupControlNumberPrefix;
        this.groupControlNumberSuffix = groupControlNumberSuffix;
        this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound, "expected parameter 'groupControlNumberUpperBound' to be non-null");
        this.groupControllingAgencyCode = groupControllingAgencyCode;
        this.groupMessageRelease = groupMessageRelease;
        this.groupMessageVersion = groupMessageVersion;
        this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound, "expected parameter 'interchangeControlNumberLowerBound' to be non-null");
        this.interchangeControlNumberPrefix = interchangeControlNumberPrefix;
        this.interchangeControlNumberSuffix = interchangeControlNumberSuffix;
        this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound, "expected parameter 'interchangeControlNumberUpperBound' to be non-null");
        this.isTestInterchange = Objects.requireNonNull(isTestInterchange, "expected parameter 'isTestInterchange' to be non-null");
        this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber, "expected parameter 'overwriteExistingTransactionSetControlNumber' to be non-null");
        this.processingPriorityCode = processingPriorityCode;
        this.receiverInternalIdentification = receiverInternalIdentification;
        this.receiverInternalSubIdentification = receiverInternalSubIdentification;
        this.receiverReverseRoutingAddress = receiverReverseRoutingAddress;
        this.recipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
        this.recipientReferencePasswordValue = recipientReferencePasswordValue;
        this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber, "expected parameter 'rolloverGroupControlNumber' to be non-null");
        this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber, "expected parameter 'rolloverInterchangeControlNumber' to be non-null");
        this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber, "expected parameter 'rolloverTransactionSetControlNumber' to be non-null");
        this.senderInternalIdentification = senderInternalIdentification;
        this.senderInternalSubIdentification = senderInternalSubIdentification;
        this.senderReverseRoutingAddress = senderReverseRoutingAddress;
        this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound, "expected parameter 'transactionSetControlNumberLowerBound' to be non-null");
        this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
        this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
        this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound, "expected parameter 'transactionSetControlNumberUpperBound' to be non-null");
    }

    private EdifactEnvelopeSettingsResponse() {
        this.applicationReferenceId = null;
        this.applyDelimiterStringAdvice = null;
        this.communicationAgreementId = null;
        this.createGroupingSegments = null;
        this.enableDefaultGroupHeaders = null;
        this.functionalGroupId = null;
        this.groupApplicationPassword = null;
        this.groupApplicationReceiverId = null;
        this.groupApplicationReceiverQualifier = null;
        this.groupApplicationSenderId = null;
        this.groupApplicationSenderQualifier = null;
        this.groupAssociationAssignedCode = null;
        this.groupControlNumberLowerBound = null;
        this.groupControlNumberPrefix = null;
        this.groupControlNumberSuffix = null;
        this.groupControlNumberUpperBound = null;
        this.groupControllingAgencyCode = null;
        this.groupMessageRelease = null;
        this.groupMessageVersion = null;
        this.interchangeControlNumberLowerBound = null;
        this.interchangeControlNumberPrefix = null;
        this.interchangeControlNumberSuffix = null;
        this.interchangeControlNumberUpperBound = null;
        this.isTestInterchange = null;
        this.overwriteExistingTransactionSetControlNumber = null;
        this.processingPriorityCode = null;
        this.receiverInternalIdentification = null;
        this.receiverInternalSubIdentification = null;
        this.receiverReverseRoutingAddress = null;
        this.recipientReferencePasswordQualifier = null;
        this.recipientReferencePasswordValue = null;
        this.rolloverGroupControlNumber = null;
        this.rolloverInterchangeControlNumber = null;
        this.rolloverTransactionSetControlNumber = null;
        this.senderInternalIdentification = null;
        this.senderInternalSubIdentification = null;
        this.senderReverseRoutingAddress = null;
        this.transactionSetControlNumberLowerBound = null;
        this.transactionSetControlNumberPrefix = null;
        this.transactionSetControlNumberSuffix = null;
        this.transactionSetControlNumberUpperBound = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdifactEnvelopeSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String applicationReferenceId;
        private Boolean applyDelimiterStringAdvice;
        private @Nullable String communicationAgreementId;
        private Boolean createGroupingSegments;
        private Boolean enableDefaultGroupHeaders;
        private @Nullable String functionalGroupId;
        private @Nullable String groupApplicationPassword;
        private @Nullable String groupApplicationReceiverId;
        private @Nullable String groupApplicationReceiverQualifier;
        private @Nullable String groupApplicationSenderId;
        private @Nullable String groupApplicationSenderQualifier;
        private @Nullable String groupAssociationAssignedCode;
        private Double groupControlNumberLowerBound;
        private @Nullable String groupControlNumberPrefix;
        private @Nullable String groupControlNumberSuffix;
        private Double groupControlNumberUpperBound;
        private @Nullable String groupControllingAgencyCode;
        private @Nullable String groupMessageRelease;
        private @Nullable String groupMessageVersion;
        private Double interchangeControlNumberLowerBound;
        private @Nullable String interchangeControlNumberPrefix;
        private @Nullable String interchangeControlNumberSuffix;
        private Double interchangeControlNumberUpperBound;
        private Boolean isTestInterchange;
        private Boolean overwriteExistingTransactionSetControlNumber;
        private @Nullable String processingPriorityCode;
        private @Nullable String receiverInternalIdentification;
        private @Nullable String receiverInternalSubIdentification;
        private @Nullable String receiverReverseRoutingAddress;
        private @Nullable String recipientReferencePasswordQualifier;
        private @Nullable String recipientReferencePasswordValue;
        private Boolean rolloverGroupControlNumber;
        private Boolean rolloverInterchangeControlNumber;
        private Boolean rolloverTransactionSetControlNumber;
        private @Nullable String senderInternalIdentification;
        private @Nullable String senderInternalSubIdentification;
        private @Nullable String senderReverseRoutingAddress;
        private Double transactionSetControlNumberLowerBound;
        private @Nullable String transactionSetControlNumberPrefix;
        private @Nullable String transactionSetControlNumberSuffix;
        private Double transactionSetControlNumberUpperBound;

        public Builder() {
    	      // Empty
        }

        public Builder(EdifactEnvelopeSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationReferenceId = defaults.applicationReferenceId;
    	      this.applyDelimiterStringAdvice = defaults.applyDelimiterStringAdvice;
    	      this.communicationAgreementId = defaults.communicationAgreementId;
    	      this.createGroupingSegments = defaults.createGroupingSegments;
    	      this.enableDefaultGroupHeaders = defaults.enableDefaultGroupHeaders;
    	      this.functionalGroupId = defaults.functionalGroupId;
    	      this.groupApplicationPassword = defaults.groupApplicationPassword;
    	      this.groupApplicationReceiverId = defaults.groupApplicationReceiverId;
    	      this.groupApplicationReceiverQualifier = defaults.groupApplicationReceiverQualifier;
    	      this.groupApplicationSenderId = defaults.groupApplicationSenderId;
    	      this.groupApplicationSenderQualifier = defaults.groupApplicationSenderQualifier;
    	      this.groupAssociationAssignedCode = defaults.groupAssociationAssignedCode;
    	      this.groupControlNumberLowerBound = defaults.groupControlNumberLowerBound;
    	      this.groupControlNumberPrefix = defaults.groupControlNumberPrefix;
    	      this.groupControlNumberSuffix = defaults.groupControlNumberSuffix;
    	      this.groupControlNumberUpperBound = defaults.groupControlNumberUpperBound;
    	      this.groupControllingAgencyCode = defaults.groupControllingAgencyCode;
    	      this.groupMessageRelease = defaults.groupMessageRelease;
    	      this.groupMessageVersion = defaults.groupMessageVersion;
    	      this.interchangeControlNumberLowerBound = defaults.interchangeControlNumberLowerBound;
    	      this.interchangeControlNumberPrefix = defaults.interchangeControlNumberPrefix;
    	      this.interchangeControlNumberSuffix = defaults.interchangeControlNumberSuffix;
    	      this.interchangeControlNumberUpperBound = defaults.interchangeControlNumberUpperBound;
    	      this.isTestInterchange = defaults.isTestInterchange;
    	      this.overwriteExistingTransactionSetControlNumber = defaults.overwriteExistingTransactionSetControlNumber;
    	      this.processingPriorityCode = defaults.processingPriorityCode;
    	      this.receiverInternalIdentification = defaults.receiverInternalIdentification;
    	      this.receiverInternalSubIdentification = defaults.receiverInternalSubIdentification;
    	      this.receiverReverseRoutingAddress = defaults.receiverReverseRoutingAddress;
    	      this.recipientReferencePasswordQualifier = defaults.recipientReferencePasswordQualifier;
    	      this.recipientReferencePasswordValue = defaults.recipientReferencePasswordValue;
    	      this.rolloverGroupControlNumber = defaults.rolloverGroupControlNumber;
    	      this.rolloverInterchangeControlNumber = defaults.rolloverInterchangeControlNumber;
    	      this.rolloverTransactionSetControlNumber = defaults.rolloverTransactionSetControlNumber;
    	      this.senderInternalIdentification = defaults.senderInternalIdentification;
    	      this.senderInternalSubIdentification = defaults.senderInternalSubIdentification;
    	      this.senderReverseRoutingAddress = defaults.senderReverseRoutingAddress;
    	      this.transactionSetControlNumberLowerBound = defaults.transactionSetControlNumberLowerBound;
    	      this.transactionSetControlNumberPrefix = defaults.transactionSetControlNumberPrefix;
    	      this.transactionSetControlNumberSuffix = defaults.transactionSetControlNumberSuffix;
    	      this.transactionSetControlNumberUpperBound = defaults.transactionSetControlNumberUpperBound;
        }

        public Builder applicationReferenceId(@Nullable String applicationReferenceId) {
            this.applicationReferenceId = applicationReferenceId;
            return this;
        }
        public Builder applyDelimiterStringAdvice(Boolean applyDelimiterStringAdvice) {
            this.applyDelimiterStringAdvice = Objects.requireNonNull(applyDelimiterStringAdvice);
            return this;
        }
        public Builder communicationAgreementId(@Nullable String communicationAgreementId) {
            this.communicationAgreementId = communicationAgreementId;
            return this;
        }
        public Builder createGroupingSegments(Boolean createGroupingSegments) {
            this.createGroupingSegments = Objects.requireNonNull(createGroupingSegments);
            return this;
        }
        public Builder enableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
            return this;
        }
        public Builder functionalGroupId(@Nullable String functionalGroupId) {
            this.functionalGroupId = functionalGroupId;
            return this;
        }
        public Builder groupApplicationPassword(@Nullable String groupApplicationPassword) {
            this.groupApplicationPassword = groupApplicationPassword;
            return this;
        }
        public Builder groupApplicationReceiverId(@Nullable String groupApplicationReceiverId) {
            this.groupApplicationReceiverId = groupApplicationReceiverId;
            return this;
        }
        public Builder groupApplicationReceiverQualifier(@Nullable String groupApplicationReceiverQualifier) {
            this.groupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
            return this;
        }
        public Builder groupApplicationSenderId(@Nullable String groupApplicationSenderId) {
            this.groupApplicationSenderId = groupApplicationSenderId;
            return this;
        }
        public Builder groupApplicationSenderQualifier(@Nullable String groupApplicationSenderQualifier) {
            this.groupApplicationSenderQualifier = groupApplicationSenderQualifier;
            return this;
        }
        public Builder groupAssociationAssignedCode(@Nullable String groupAssociationAssignedCode) {
            this.groupAssociationAssignedCode = groupAssociationAssignedCode;
            return this;
        }
        public Builder groupControlNumberLowerBound(Double groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
            return this;
        }
        public Builder groupControlNumberPrefix(@Nullable String groupControlNumberPrefix) {
            this.groupControlNumberPrefix = groupControlNumberPrefix;
            return this;
        }
        public Builder groupControlNumberSuffix(@Nullable String groupControlNumberSuffix) {
            this.groupControlNumberSuffix = groupControlNumberSuffix;
            return this;
        }
        public Builder groupControlNumberUpperBound(Double groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
            return this;
        }
        public Builder groupControllingAgencyCode(@Nullable String groupControllingAgencyCode) {
            this.groupControllingAgencyCode = groupControllingAgencyCode;
            return this;
        }
        public Builder groupMessageRelease(@Nullable String groupMessageRelease) {
            this.groupMessageRelease = groupMessageRelease;
            return this;
        }
        public Builder groupMessageVersion(@Nullable String groupMessageVersion) {
            this.groupMessageVersion = groupMessageVersion;
            return this;
        }
        public Builder interchangeControlNumberLowerBound(Double interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
            return this;
        }
        public Builder interchangeControlNumberPrefix(@Nullable String interchangeControlNumberPrefix) {
            this.interchangeControlNumberPrefix = interchangeControlNumberPrefix;
            return this;
        }
        public Builder interchangeControlNumberSuffix(@Nullable String interchangeControlNumberSuffix) {
            this.interchangeControlNumberSuffix = interchangeControlNumberSuffix;
            return this;
        }
        public Builder interchangeControlNumberUpperBound(Double interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
            return this;
        }
        public Builder isTestInterchange(Boolean isTestInterchange) {
            this.isTestInterchange = Objects.requireNonNull(isTestInterchange);
            return this;
        }
        public Builder overwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
            return this;
        }
        public Builder processingPriorityCode(@Nullable String processingPriorityCode) {
            this.processingPriorityCode = processingPriorityCode;
            return this;
        }
        public Builder receiverInternalIdentification(@Nullable String receiverInternalIdentification) {
            this.receiverInternalIdentification = receiverInternalIdentification;
            return this;
        }
        public Builder receiverInternalSubIdentification(@Nullable String receiverInternalSubIdentification) {
            this.receiverInternalSubIdentification = receiverInternalSubIdentification;
            return this;
        }
        public Builder receiverReverseRoutingAddress(@Nullable String receiverReverseRoutingAddress) {
            this.receiverReverseRoutingAddress = receiverReverseRoutingAddress;
            return this;
        }
        public Builder recipientReferencePasswordQualifier(@Nullable String recipientReferencePasswordQualifier) {
            this.recipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
            return this;
        }
        public Builder recipientReferencePasswordValue(@Nullable String recipientReferencePasswordValue) {
            this.recipientReferencePasswordValue = recipientReferencePasswordValue;
            return this;
        }
        public Builder rolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
            return this;
        }
        public Builder rolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
            return this;
        }
        public Builder rolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
            return this;
        }
        public Builder senderInternalIdentification(@Nullable String senderInternalIdentification) {
            this.senderInternalIdentification = senderInternalIdentification;
            return this;
        }
        public Builder senderInternalSubIdentification(@Nullable String senderInternalSubIdentification) {
            this.senderInternalSubIdentification = senderInternalSubIdentification;
            return this;
        }
        public Builder senderReverseRoutingAddress(@Nullable String senderReverseRoutingAddress) {
            this.senderReverseRoutingAddress = senderReverseRoutingAddress;
            return this;
        }
        public Builder transactionSetControlNumberLowerBound(Double transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
            return this;
        }
        public Builder transactionSetControlNumberPrefix(@Nullable String transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            return this;
        }
        public Builder transactionSetControlNumberSuffix(@Nullable String transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            return this;
        }
        public Builder transactionSetControlNumberUpperBound(Double transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
            return this;
        }        public EdifactEnvelopeSettingsResponse build() {
            return new EdifactEnvelopeSettingsResponse(applicationReferenceId, applyDelimiterStringAdvice, communicationAgreementId, createGroupingSegments, enableDefaultGroupHeaders, functionalGroupId, groupApplicationPassword, groupApplicationReceiverId, groupApplicationReceiverQualifier, groupApplicationSenderId, groupApplicationSenderQualifier, groupAssociationAssignedCode, groupControlNumberLowerBound, groupControlNumberPrefix, groupControlNumberSuffix, groupControlNumberUpperBound, groupControllingAgencyCode, groupMessageRelease, groupMessageVersion, interchangeControlNumberLowerBound, interchangeControlNumberPrefix, interchangeControlNumberSuffix, interchangeControlNumberUpperBound, isTestInterchange, overwriteExistingTransactionSetControlNumber, processingPriorityCode, receiverInternalIdentification, receiverInternalSubIdentification, receiverReverseRoutingAddress, recipientReferencePasswordQualifier, recipientReferencePasswordValue, rolloverGroupControlNumber, rolloverInterchangeControlNumber, rolloverTransactionSetControlNumber, senderInternalIdentification, senderInternalSubIdentification, senderReverseRoutingAddress, transactionSetControlNumberLowerBound, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberUpperBound);
        }
    }
}
