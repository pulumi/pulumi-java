// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights;

import io.pulumi.azurenative.customerinsights.enums.CardinalityTypes;
import io.pulumi.azurenative.customerinsights.inputs.PropertyDefinitionArgs;
import io.pulumi.azurenative.customerinsights.inputs.RelationshipTypeMappingArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RelationshipArgs extends io.pulumi.resources.ResourceArgs {

    public static final RelationshipArgs Empty = new RelationshipArgs();

    /**
     * The Relationship Cardinality.
     * 
     */
    @Import(name="cardinality")
      private final @Nullable Output<CardinalityTypes> cardinality;

    public Output<CardinalityTypes> getCardinality() {
        return this.cardinality == null ? Output.empty() : this.cardinality;
    }

    /**
     * Localized descriptions for the Relationship.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<Map<String,String>> description;

    public Output<Map<String,String>> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Localized display name for the Relationship.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<Map<String,String>> displayName;

    public Output<Map<String,String>> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * The expiry date time in UTC.
     * 
     */
    @Import(name="expiryDateTimeUtc")
      private final @Nullable Output<String> expiryDateTimeUtc;

    public Output<String> getExpiryDateTimeUtc() {
        return this.expiryDateTimeUtc == null ? Output.empty() : this.expiryDateTimeUtc;
    }

    /**
     * The properties of the Relationship.
     * 
     */
    @Import(name="fields")
      private final @Nullable Output<List<PropertyDefinitionArgs>> fields;

    public Output<List<PropertyDefinitionArgs>> getFields() {
        return this.fields == null ? Output.empty() : this.fields;
    }

    /**
     * The name of the hub.
     * 
     */
    @Import(name="hubName", required=true)
      private final Output<String> hubName;

    public Output<String> getHubName() {
        return this.hubName;
    }

    /**
     * Optional property to be used to map fields in profile to their strong ids in related profile.
     * 
     */
    @Import(name="lookupMappings")
      private final @Nullable Output<List<RelationshipTypeMappingArgs>> lookupMappings;

    public Output<List<RelationshipTypeMappingArgs>> getLookupMappings() {
        return this.lookupMappings == null ? Output.empty() : this.lookupMappings;
    }

    /**
     * Profile type.
     * 
     */
    @Import(name="profileType", required=true)
      private final Output<String> profileType;

    public Output<String> getProfileType() {
        return this.profileType;
    }

    /**
     * Related profile being referenced.
     * 
     */
    @Import(name="relatedProfileType", required=true)
      private final Output<String> relatedProfileType;

    public Output<String> getRelatedProfileType() {
        return this.relatedProfileType;
    }

    /**
     * The name of the Relationship.
     * 
     */
    @Import(name="relationshipName")
      private final @Nullable Output<String> relationshipName;

    public Output<String> getRelationshipName() {
        return this.relationshipName == null ? Output.empty() : this.relationshipName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    public RelationshipArgs(
        @Nullable Output<CardinalityTypes> cardinality,
        @Nullable Output<Map<String,String>> description,
        @Nullable Output<Map<String,String>> displayName,
        @Nullable Output<String> expiryDateTimeUtc,
        @Nullable Output<List<PropertyDefinitionArgs>> fields,
        Output<String> hubName,
        @Nullable Output<List<RelationshipTypeMappingArgs>> lookupMappings,
        Output<String> profileType,
        Output<String> relatedProfileType,
        @Nullable Output<String> relationshipName,
        Output<String> resourceGroupName) {
        this.cardinality = cardinality;
        this.description = description;
        this.displayName = displayName;
        this.expiryDateTimeUtc = expiryDateTimeUtc;
        this.fields = fields;
        this.hubName = Objects.requireNonNull(hubName, "expected parameter 'hubName' to be non-null");
        this.lookupMappings = lookupMappings;
        this.profileType = Objects.requireNonNull(profileType, "expected parameter 'profileType' to be non-null");
        this.relatedProfileType = Objects.requireNonNull(relatedProfileType, "expected parameter 'relatedProfileType' to be non-null");
        this.relationshipName = relationshipName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private RelationshipArgs() {
        this.cardinality = Output.empty();
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.expiryDateTimeUtc = Output.empty();
        this.fields = Output.empty();
        this.hubName = Output.empty();
        this.lookupMappings = Output.empty();
        this.profileType = Output.empty();
        this.relatedProfileType = Output.empty();
        this.relationshipName = Output.empty();
        this.resourceGroupName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RelationshipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<CardinalityTypes> cardinality;
        private @Nullable Output<Map<String,String>> description;
        private @Nullable Output<Map<String,String>> displayName;
        private @Nullable Output<String> expiryDateTimeUtc;
        private @Nullable Output<List<PropertyDefinitionArgs>> fields;
        private Output<String> hubName;
        private @Nullable Output<List<RelationshipTypeMappingArgs>> lookupMappings;
        private Output<String> profileType;
        private Output<String> relatedProfileType;
        private @Nullable Output<String> relationshipName;
        private Output<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(RelationshipArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cardinality = defaults.cardinality;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.expiryDateTimeUtc = defaults.expiryDateTimeUtc;
    	      this.fields = defaults.fields;
    	      this.hubName = defaults.hubName;
    	      this.lookupMappings = defaults.lookupMappings;
    	      this.profileType = defaults.profileType;
    	      this.relatedProfileType = defaults.relatedProfileType;
    	      this.relationshipName = defaults.relationshipName;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder cardinality(@Nullable Output<CardinalityTypes> cardinality) {
            this.cardinality = cardinality;
            return this;
        }
        public Builder cardinality(@Nullable CardinalityTypes cardinality) {
            this.cardinality = Output.ofNullable(cardinality);
            return this;
        }
        public Builder description(@Nullable Output<Map<String,String>> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable Map<String,String> description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<Map<String,String>> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable Map<String,String> displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }
        public Builder expiryDateTimeUtc(@Nullable Output<String> expiryDateTimeUtc) {
            this.expiryDateTimeUtc = expiryDateTimeUtc;
            return this;
        }
        public Builder expiryDateTimeUtc(@Nullable String expiryDateTimeUtc) {
            this.expiryDateTimeUtc = Output.ofNullable(expiryDateTimeUtc);
            return this;
        }
        public Builder fields(@Nullable Output<List<PropertyDefinitionArgs>> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(@Nullable List<PropertyDefinitionArgs> fields) {
            this.fields = Output.ofNullable(fields);
            return this;
        }
        public Builder fields(PropertyDefinitionArgs... fields) {
            return fields(List.of(fields));
        }
        public Builder hubName(Output<String> hubName) {
            this.hubName = Objects.requireNonNull(hubName);
            return this;
        }
        public Builder hubName(String hubName) {
            this.hubName = Output.of(Objects.requireNonNull(hubName));
            return this;
        }
        public Builder lookupMappings(@Nullable Output<List<RelationshipTypeMappingArgs>> lookupMappings) {
            this.lookupMappings = lookupMappings;
            return this;
        }
        public Builder lookupMappings(@Nullable List<RelationshipTypeMappingArgs> lookupMappings) {
            this.lookupMappings = Output.ofNullable(lookupMappings);
            return this;
        }
        public Builder lookupMappings(RelationshipTypeMappingArgs... lookupMappings) {
            return lookupMappings(List.of(lookupMappings));
        }
        public Builder profileType(Output<String> profileType) {
            this.profileType = Objects.requireNonNull(profileType);
            return this;
        }
        public Builder profileType(String profileType) {
            this.profileType = Output.of(Objects.requireNonNull(profileType));
            return this;
        }
        public Builder relatedProfileType(Output<String> relatedProfileType) {
            this.relatedProfileType = Objects.requireNonNull(relatedProfileType);
            return this;
        }
        public Builder relatedProfileType(String relatedProfileType) {
            this.relatedProfileType = Output.of(Objects.requireNonNull(relatedProfileType));
            return this;
        }
        public Builder relationshipName(@Nullable Output<String> relationshipName) {
            this.relationshipName = relationshipName;
            return this;
        }
        public Builder relationshipName(@Nullable String relationshipName) {
            this.relationshipName = Output.ofNullable(relationshipName);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }        public RelationshipArgs build() {
            return new RelationshipArgs(cardinality, description, displayName, expiryDateTimeUtc, fields, hubName, lookupMappings, profileType, relatedProfileType, relationshipName, resourceGroupName);
        }
    }
}
