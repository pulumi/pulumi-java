// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media;

import io.pulumi.azurenative.media.inputs.StreamingLocatorContentKeyArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StreamingLocatorArgs extends io.pulumi.resources.ResourceArgs {

    public static final StreamingLocatorArgs Empty = new StreamingLocatorArgs();

    /**
     * The Media Services account name.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> getAccountName() {
        return this.accountName;
    }

    /**
     * Alternative Media ID of this Streaming Locator
     * 
     */
    @Import(name="alternativeMediaId")
      private final @Nullable Output<String> alternativeMediaId;

    public Output<String> getAlternativeMediaId() {
        return this.alternativeMediaId == null ? Codegen.empty() : this.alternativeMediaId;
    }

    /**
     * Asset Name
     * 
     */
    @Import(name="assetName", required=true)
      private final Output<String> assetName;

    public Output<String> getAssetName() {
        return this.assetName;
    }

    /**
     * The ContentKeys used by this Streaming Locator.
     * 
     */
    @Import(name="contentKeys")
      private final @Nullable Output<List<StreamingLocatorContentKeyArgs>> contentKeys;

    public Output<List<StreamingLocatorContentKeyArgs>> getContentKeys() {
        return this.contentKeys == null ? Codegen.empty() : this.contentKeys;
    }

    /**
     * Name of the default ContentKeyPolicy used by this Streaming Locator.
     * 
     */
    @Import(name="defaultContentKeyPolicyName")
      private final @Nullable Output<String> defaultContentKeyPolicyName;

    public Output<String> getDefaultContentKeyPolicyName() {
        return this.defaultContentKeyPolicyName == null ? Codegen.empty() : this.defaultContentKeyPolicyName;
    }

    /**
     * The end time of the Streaming Locator.
     * 
     */
    @Import(name="endTime")
      private final @Nullable Output<String> endTime;

    public Output<String> getEndTime() {
        return this.endTime == null ? Codegen.empty() : this.endTime;
    }

    /**
     * A list of asset or account filters which apply to this streaming locator
     * 
     */
    @Import(name="filters")
      private final @Nullable Output<List<String>> filters;

    public Output<List<String>> getFilters() {
        return this.filters == null ? Codegen.empty() : this.filters;
    }

    /**
     * The name of the resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The start time of the Streaming Locator.
     * 
     */
    @Import(name="startTime")
      private final @Nullable Output<String> startTime;

    public Output<String> getStartTime() {
        return this.startTime == null ? Codegen.empty() : this.startTime;
    }

    /**
     * The StreamingLocatorId of the Streaming Locator.
     * 
     */
    @Import(name="streamingLocatorId")
      private final @Nullable Output<String> streamingLocatorId;

    public Output<String> getStreamingLocatorId() {
        return this.streamingLocatorId == null ? Codegen.empty() : this.streamingLocatorId;
    }

    /**
     * The Streaming Locator name.
     * 
     */
    @Import(name="streamingLocatorName")
      private final @Nullable Output<String> streamingLocatorName;

    public Output<String> getStreamingLocatorName() {
        return this.streamingLocatorName == null ? Codegen.empty() : this.streamingLocatorName;
    }

    /**
     * Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming'
     * 
     */
    @Import(name="streamingPolicyName", required=true)
      private final Output<String> streamingPolicyName;

    public Output<String> getStreamingPolicyName() {
        return this.streamingPolicyName;
    }

    public StreamingLocatorArgs(
        Output<String> accountName,
        @Nullable Output<String> alternativeMediaId,
        Output<String> assetName,
        @Nullable Output<List<StreamingLocatorContentKeyArgs>> contentKeys,
        @Nullable Output<String> defaultContentKeyPolicyName,
        @Nullable Output<String> endTime,
        @Nullable Output<List<String>> filters,
        Output<String> resourceGroupName,
        @Nullable Output<String> startTime,
        @Nullable Output<String> streamingLocatorId,
        @Nullable Output<String> streamingLocatorName,
        Output<String> streamingPolicyName) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.alternativeMediaId = alternativeMediaId;
        this.assetName = Objects.requireNonNull(assetName, "expected parameter 'assetName' to be non-null");
        this.contentKeys = contentKeys;
        this.defaultContentKeyPolicyName = defaultContentKeyPolicyName;
        this.endTime = endTime;
        this.filters = filters;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.startTime = startTime;
        this.streamingLocatorId = streamingLocatorId;
        this.streamingLocatorName = streamingLocatorName;
        this.streamingPolicyName = Objects.requireNonNull(streamingPolicyName, "expected parameter 'streamingPolicyName' to be non-null");
    }

    private StreamingLocatorArgs() {
        this.accountName = Codegen.empty();
        this.alternativeMediaId = Codegen.empty();
        this.assetName = Codegen.empty();
        this.contentKeys = Codegen.empty();
        this.defaultContentKeyPolicyName = Codegen.empty();
        this.endTime = Codegen.empty();
        this.filters = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.startTime = Codegen.empty();
        this.streamingLocatorId = Codegen.empty();
        this.streamingLocatorName = Codegen.empty();
        this.streamingPolicyName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamingLocatorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private @Nullable Output<String> alternativeMediaId;
        private Output<String> assetName;
        private @Nullable Output<List<StreamingLocatorContentKeyArgs>> contentKeys;
        private @Nullable Output<String> defaultContentKeyPolicyName;
        private @Nullable Output<String> endTime;
        private @Nullable Output<List<String>> filters;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> startTime;
        private @Nullable Output<String> streamingLocatorId;
        private @Nullable Output<String> streamingLocatorName;
        private Output<String> streamingPolicyName;

        public Builder() {
    	      // Empty
        }

        public Builder(StreamingLocatorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.alternativeMediaId = defaults.alternativeMediaId;
    	      this.assetName = defaults.assetName;
    	      this.contentKeys = defaults.contentKeys;
    	      this.defaultContentKeyPolicyName = defaults.defaultContentKeyPolicyName;
    	      this.endTime = defaults.endTime;
    	      this.filters = defaults.filters;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.startTime = defaults.startTime;
    	      this.streamingLocatorId = defaults.streamingLocatorId;
    	      this.streamingLocatorName = defaults.streamingLocatorName;
    	      this.streamingPolicyName = defaults.streamingPolicyName;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }
        public Builder alternativeMediaId(@Nullable Output<String> alternativeMediaId) {
            this.alternativeMediaId = alternativeMediaId;
            return this;
        }
        public Builder alternativeMediaId(@Nullable String alternativeMediaId) {
            this.alternativeMediaId = Codegen.ofNullable(alternativeMediaId);
            return this;
        }
        public Builder assetName(Output<String> assetName) {
            this.assetName = Objects.requireNonNull(assetName);
            return this;
        }
        public Builder assetName(String assetName) {
            this.assetName = Output.of(Objects.requireNonNull(assetName));
            return this;
        }
        public Builder contentKeys(@Nullable Output<List<StreamingLocatorContentKeyArgs>> contentKeys) {
            this.contentKeys = contentKeys;
            return this;
        }
        public Builder contentKeys(@Nullable List<StreamingLocatorContentKeyArgs> contentKeys) {
            this.contentKeys = Codegen.ofNullable(contentKeys);
            return this;
        }
        public Builder contentKeys(StreamingLocatorContentKeyArgs... contentKeys) {
            return contentKeys(List.of(contentKeys));
        }
        public Builder defaultContentKeyPolicyName(@Nullable Output<String> defaultContentKeyPolicyName) {
            this.defaultContentKeyPolicyName = defaultContentKeyPolicyName;
            return this;
        }
        public Builder defaultContentKeyPolicyName(@Nullable String defaultContentKeyPolicyName) {
            this.defaultContentKeyPolicyName = Codegen.ofNullable(defaultContentKeyPolicyName);
            return this;
        }
        public Builder endTime(@Nullable Output<String> endTime) {
            this.endTime = endTime;
            return this;
        }
        public Builder endTime(@Nullable String endTime) {
            this.endTime = Codegen.ofNullable(endTime);
            return this;
        }
        public Builder filters(@Nullable Output<List<String>> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(@Nullable List<String> filters) {
            this.filters = Codegen.ofNullable(filters);
            return this;
        }
        public Builder filters(String... filters) {
            return filters(List.of(filters));
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder startTime(@Nullable Output<String> startTime) {
            this.startTime = startTime;
            return this;
        }
        public Builder startTime(@Nullable String startTime) {
            this.startTime = Codegen.ofNullable(startTime);
            return this;
        }
        public Builder streamingLocatorId(@Nullable Output<String> streamingLocatorId) {
            this.streamingLocatorId = streamingLocatorId;
            return this;
        }
        public Builder streamingLocatorId(@Nullable String streamingLocatorId) {
            this.streamingLocatorId = Codegen.ofNullable(streamingLocatorId);
            return this;
        }
        public Builder streamingLocatorName(@Nullable Output<String> streamingLocatorName) {
            this.streamingLocatorName = streamingLocatorName;
            return this;
        }
        public Builder streamingLocatorName(@Nullable String streamingLocatorName) {
            this.streamingLocatorName = Codegen.ofNullable(streamingLocatorName);
            return this;
        }
        public Builder streamingPolicyName(Output<String> streamingPolicyName) {
            this.streamingPolicyName = Objects.requireNonNull(streamingPolicyName);
            return this;
        }
        public Builder streamingPolicyName(String streamingPolicyName) {
            this.streamingPolicyName = Output.of(Objects.requireNonNull(streamingPolicyName));
            return this;
        }        public StreamingLocatorArgs build() {
            return new StreamingLocatorArgs(accountName, alternativeMediaId, assetName, contentKeys, defaultContentKeyPolicyName, endTime, filters, resourceGroupName, startTime, streamingLocatorId, streamingLocatorName, streamingPolicyName);
        }
    }
}
