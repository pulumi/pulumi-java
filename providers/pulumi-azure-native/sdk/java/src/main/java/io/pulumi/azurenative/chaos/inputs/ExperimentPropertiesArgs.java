// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.chaos.inputs;

import io.pulumi.azurenative.chaos.inputs.SelectorArgs;
import io.pulumi.azurenative.chaos.inputs.StepArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Model that represents the Experiment properties model.
 * 
 */
public final class ExperimentPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExperimentPropertiesArgs Empty = new ExperimentPropertiesArgs();

    /**
     * List of selectors.
     * 
     */
    @Import(name="selectors", required=true)
      private final Output<List<SelectorArgs>> selectors;

    public Output<List<SelectorArgs>> getSelectors() {
        return this.selectors;
    }

    /**
     * A boolean value that indicates if experiment should be started on creation or not.
     * 
     */
    @Import(name="startOnCreation")
      private final @Nullable Output<Boolean> startOnCreation;

    public Output<Boolean> getStartOnCreation() {
        return this.startOnCreation == null ? Output.empty() : this.startOnCreation;
    }

    /**
     * List of steps.
     * 
     */
    @Import(name="steps", required=true)
      private final Output<List<StepArgs>> steps;

    public Output<List<StepArgs>> getSteps() {
        return this.steps;
    }

    public ExperimentPropertiesArgs(
        Output<List<SelectorArgs>> selectors,
        @Nullable Output<Boolean> startOnCreation,
        Output<List<StepArgs>> steps) {
        this.selectors = Objects.requireNonNull(selectors, "expected parameter 'selectors' to be non-null");
        this.startOnCreation = startOnCreation;
        this.steps = Objects.requireNonNull(steps, "expected parameter 'steps' to be non-null");
    }

    private ExperimentPropertiesArgs() {
        this.selectors = Output.empty();
        this.startOnCreation = Output.empty();
        this.steps = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExperimentPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<SelectorArgs>> selectors;
        private @Nullable Output<Boolean> startOnCreation;
        private Output<List<StepArgs>> steps;

        public Builder() {
    	      // Empty
        }

        public Builder(ExperimentPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.selectors = defaults.selectors;
    	      this.startOnCreation = defaults.startOnCreation;
    	      this.steps = defaults.steps;
        }

        public Builder selectors(Output<List<SelectorArgs>> selectors) {
            this.selectors = Objects.requireNonNull(selectors);
            return this;
        }

        public Builder selectors(List<SelectorArgs> selectors) {
            this.selectors = Output.of(Objects.requireNonNull(selectors));
            return this;
        }

        public Builder startOnCreation(@Nullable Output<Boolean> startOnCreation) {
            this.startOnCreation = startOnCreation;
            return this;
        }

        public Builder startOnCreation(@Nullable Boolean startOnCreation) {
            this.startOnCreation = Output.ofNullable(startOnCreation);
            return this;
        }

        public Builder steps(Output<List<StepArgs>> steps) {
            this.steps = Objects.requireNonNull(steps);
            return this;
        }

        public Builder steps(List<StepArgs> steps) {
            this.steps = Output.of(Objects.requireNonNull(steps));
            return this;
        }
        public ExperimentPropertiesArgs build() {
            return new ExperimentPropertiesArgs(selectors, startOnCreation, steps);
        }
    }
}
