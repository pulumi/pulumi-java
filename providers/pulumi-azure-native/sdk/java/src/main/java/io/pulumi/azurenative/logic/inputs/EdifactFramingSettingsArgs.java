// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.azurenative.logic.enums.EdifactCharacterSet;
import io.pulumi.azurenative.logic.enums.EdifactDecimalIndicator;
import io.pulumi.azurenative.logic.enums.SegmentTerminatorSuffix;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The Edifact agreement framing settings.
 * 
 */
public final class EdifactFramingSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final EdifactFramingSettingsArgs Empty = new EdifactFramingSettingsArgs();

    /**
     * The character encoding.
     * 
     */
    @InputImport(name="characterEncoding")
        private final @Nullable Input<String> characterEncoding;

    public Input<String> getCharacterEncoding() {
        return this.characterEncoding == null ? Input.empty() : this.characterEncoding;
    }

    /**
     * The EDIFACT frame setting characterSet.
     * 
     */
    @InputImport(name="characterSet", required=true)
        private final Input<Either<String,EdifactCharacterSet>> characterSet;

    public Input<Either<String,EdifactCharacterSet>> getCharacterSet() {
        return this.characterSet;
    }

    /**
     * The component separator.
     * 
     */
    @InputImport(name="componentSeparator", required=true)
        private final Input<Integer> componentSeparator;

    public Input<Integer> getComponentSeparator() {
        return this.componentSeparator;
    }

    /**
     * The data element separator.
     * 
     */
    @InputImport(name="dataElementSeparator", required=true)
        private final Input<Integer> dataElementSeparator;

    public Input<Integer> getDataElementSeparator() {
        return this.dataElementSeparator;
    }

    /**
     * The EDIFACT frame setting decimal indicator.
     * 
     */
    @InputImport(name="decimalPointIndicator", required=true)
        private final Input<EdifactDecimalIndicator> decimalPointIndicator;

    public Input<EdifactDecimalIndicator> getDecimalPointIndicator() {
        return this.decimalPointIndicator;
    }

    /**
     * The protocol version.
     * 
     */
    @InputImport(name="protocolVersion", required=true)
        private final Input<Integer> protocolVersion;

    public Input<Integer> getProtocolVersion() {
        return this.protocolVersion;
    }

    /**
     * The release indicator.
     * 
     */
    @InputImport(name="releaseIndicator", required=true)
        private final Input<Integer> releaseIndicator;

    public Input<Integer> getReleaseIndicator() {
        return this.releaseIndicator;
    }

    /**
     * The repetition separator.
     * 
     */
    @InputImport(name="repetitionSeparator", required=true)
        private final Input<Integer> repetitionSeparator;

    public Input<Integer> getRepetitionSeparator() {
        return this.repetitionSeparator;
    }

    /**
     * The segment terminator.
     * 
     */
    @InputImport(name="segmentTerminator", required=true)
        private final Input<Integer> segmentTerminator;

    public Input<Integer> getSegmentTerminator() {
        return this.segmentTerminator;
    }

    /**
     * The EDIFACT frame setting segment terminator suffix.
     * 
     */
    @InputImport(name="segmentTerminatorSuffix", required=true)
        private final Input<SegmentTerminatorSuffix> segmentTerminatorSuffix;

    public Input<SegmentTerminatorSuffix> getSegmentTerminatorSuffix() {
        return this.segmentTerminatorSuffix;
    }

    /**
     * The service code list directory version.
     * 
     */
    @InputImport(name="serviceCodeListDirectoryVersion")
        private final @Nullable Input<String> serviceCodeListDirectoryVersion;

    public Input<String> getServiceCodeListDirectoryVersion() {
        return this.serviceCodeListDirectoryVersion == null ? Input.empty() : this.serviceCodeListDirectoryVersion;
    }

    public EdifactFramingSettingsArgs(
        @Nullable Input<String> characterEncoding,
        Input<Either<String,EdifactCharacterSet>> characterSet,
        Input<Integer> componentSeparator,
        Input<Integer> dataElementSeparator,
        Input<EdifactDecimalIndicator> decimalPointIndicator,
        Input<Integer> protocolVersion,
        Input<Integer> releaseIndicator,
        Input<Integer> repetitionSeparator,
        Input<Integer> segmentTerminator,
        Input<SegmentTerminatorSuffix> segmentTerminatorSuffix,
        @Nullable Input<String> serviceCodeListDirectoryVersion) {
        this.characterEncoding = characterEncoding;
        this.characterSet = Objects.requireNonNull(characterSet, "expected parameter 'characterSet' to be non-null");
        this.componentSeparator = Objects.requireNonNull(componentSeparator, "expected parameter 'componentSeparator' to be non-null");
        this.dataElementSeparator = Objects.requireNonNull(dataElementSeparator, "expected parameter 'dataElementSeparator' to be non-null");
        this.decimalPointIndicator = Objects.requireNonNull(decimalPointIndicator, "expected parameter 'decimalPointIndicator' to be non-null");
        this.protocolVersion = Objects.requireNonNull(protocolVersion, "expected parameter 'protocolVersion' to be non-null");
        this.releaseIndicator = Objects.requireNonNull(releaseIndicator, "expected parameter 'releaseIndicator' to be non-null");
        this.repetitionSeparator = Objects.requireNonNull(repetitionSeparator, "expected parameter 'repetitionSeparator' to be non-null");
        this.segmentTerminator = Objects.requireNonNull(segmentTerminator, "expected parameter 'segmentTerminator' to be non-null");
        this.segmentTerminatorSuffix = Objects.requireNonNull(segmentTerminatorSuffix, "expected parameter 'segmentTerminatorSuffix' to be non-null");
        this.serviceCodeListDirectoryVersion = serviceCodeListDirectoryVersion;
    }

    private EdifactFramingSettingsArgs() {
        this.characterEncoding = Input.empty();
        this.characterSet = Input.empty();
        this.componentSeparator = Input.empty();
        this.dataElementSeparator = Input.empty();
        this.decimalPointIndicator = Input.empty();
        this.protocolVersion = Input.empty();
        this.releaseIndicator = Input.empty();
        this.repetitionSeparator = Input.empty();
        this.segmentTerminator = Input.empty();
        this.segmentTerminatorSuffix = Input.empty();
        this.serviceCodeListDirectoryVersion = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdifactFramingSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> characterEncoding;
        private Input<Either<String,EdifactCharacterSet>> characterSet;
        private Input<Integer> componentSeparator;
        private Input<Integer> dataElementSeparator;
        private Input<EdifactDecimalIndicator> decimalPointIndicator;
        private Input<Integer> protocolVersion;
        private Input<Integer> releaseIndicator;
        private Input<Integer> repetitionSeparator;
        private Input<Integer> segmentTerminator;
        private Input<SegmentTerminatorSuffix> segmentTerminatorSuffix;
        private @Nullable Input<String> serviceCodeListDirectoryVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(EdifactFramingSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characterEncoding = defaults.characterEncoding;
    	      this.characterSet = defaults.characterSet;
    	      this.componentSeparator = defaults.componentSeparator;
    	      this.dataElementSeparator = defaults.dataElementSeparator;
    	      this.decimalPointIndicator = defaults.decimalPointIndicator;
    	      this.protocolVersion = defaults.protocolVersion;
    	      this.releaseIndicator = defaults.releaseIndicator;
    	      this.repetitionSeparator = defaults.repetitionSeparator;
    	      this.segmentTerminator = defaults.segmentTerminator;
    	      this.segmentTerminatorSuffix = defaults.segmentTerminatorSuffix;
    	      this.serviceCodeListDirectoryVersion = defaults.serviceCodeListDirectoryVersion;
        }

        public Builder setCharacterEncoding(@Nullable Input<String> characterEncoding) {
            this.characterEncoding = characterEncoding;
            return this;
        }

        public Builder setCharacterEncoding(@Nullable String characterEncoding) {
            this.characterEncoding = Input.ofNullable(characterEncoding);
            return this;
        }

        public Builder setCharacterSet(Input<Either<String,EdifactCharacterSet>> characterSet) {
            this.characterSet = Objects.requireNonNull(characterSet);
            return this;
        }

        public Builder setCharacterSet(Either<String,EdifactCharacterSet> characterSet) {
            this.characterSet = Input.of(Objects.requireNonNull(characterSet));
            return this;
        }

        public Builder setComponentSeparator(Input<Integer> componentSeparator) {
            this.componentSeparator = Objects.requireNonNull(componentSeparator);
            return this;
        }

        public Builder setComponentSeparator(Integer componentSeparator) {
            this.componentSeparator = Input.of(Objects.requireNonNull(componentSeparator));
            return this;
        }

        public Builder setDataElementSeparator(Input<Integer> dataElementSeparator) {
            this.dataElementSeparator = Objects.requireNonNull(dataElementSeparator);
            return this;
        }

        public Builder setDataElementSeparator(Integer dataElementSeparator) {
            this.dataElementSeparator = Input.of(Objects.requireNonNull(dataElementSeparator));
            return this;
        }

        public Builder setDecimalPointIndicator(Input<EdifactDecimalIndicator> decimalPointIndicator) {
            this.decimalPointIndicator = Objects.requireNonNull(decimalPointIndicator);
            return this;
        }

        public Builder setDecimalPointIndicator(EdifactDecimalIndicator decimalPointIndicator) {
            this.decimalPointIndicator = Input.of(Objects.requireNonNull(decimalPointIndicator));
            return this;
        }

        public Builder setProtocolVersion(Input<Integer> protocolVersion) {
            this.protocolVersion = Objects.requireNonNull(protocolVersion);
            return this;
        }

        public Builder setProtocolVersion(Integer protocolVersion) {
            this.protocolVersion = Input.of(Objects.requireNonNull(protocolVersion));
            return this;
        }

        public Builder setReleaseIndicator(Input<Integer> releaseIndicator) {
            this.releaseIndicator = Objects.requireNonNull(releaseIndicator);
            return this;
        }

        public Builder setReleaseIndicator(Integer releaseIndicator) {
            this.releaseIndicator = Input.of(Objects.requireNonNull(releaseIndicator));
            return this;
        }

        public Builder setRepetitionSeparator(Input<Integer> repetitionSeparator) {
            this.repetitionSeparator = Objects.requireNonNull(repetitionSeparator);
            return this;
        }

        public Builder setRepetitionSeparator(Integer repetitionSeparator) {
            this.repetitionSeparator = Input.of(Objects.requireNonNull(repetitionSeparator));
            return this;
        }

        public Builder setSegmentTerminator(Input<Integer> segmentTerminator) {
            this.segmentTerminator = Objects.requireNonNull(segmentTerminator);
            return this;
        }

        public Builder setSegmentTerminator(Integer segmentTerminator) {
            this.segmentTerminator = Input.of(Objects.requireNonNull(segmentTerminator));
            return this;
        }

        public Builder setSegmentTerminatorSuffix(Input<SegmentTerminatorSuffix> segmentTerminatorSuffix) {
            this.segmentTerminatorSuffix = Objects.requireNonNull(segmentTerminatorSuffix);
            return this;
        }

        public Builder setSegmentTerminatorSuffix(SegmentTerminatorSuffix segmentTerminatorSuffix) {
            this.segmentTerminatorSuffix = Input.of(Objects.requireNonNull(segmentTerminatorSuffix));
            return this;
        }

        public Builder setServiceCodeListDirectoryVersion(@Nullable Input<String> serviceCodeListDirectoryVersion) {
            this.serviceCodeListDirectoryVersion = serviceCodeListDirectoryVersion;
            return this;
        }

        public Builder setServiceCodeListDirectoryVersion(@Nullable String serviceCodeListDirectoryVersion) {
            this.serviceCodeListDirectoryVersion = Input.ofNullable(serviceCodeListDirectoryVersion);
            return this;
        }
        public EdifactFramingSettingsArgs build() {
            return new EdifactFramingSettingsArgs(characterEncoding, characterSet, componentSeparator, dataElementSeparator, decimalPointIndicator, protocolVersion, releaseIndicator, repetitionSeparator, segmentTerminator, segmentTerminatorSuffix, serviceCodeListDirectoryVersion);
        }
    }
}
