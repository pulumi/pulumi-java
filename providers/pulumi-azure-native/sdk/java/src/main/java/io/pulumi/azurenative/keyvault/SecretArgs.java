// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.keyvault;

import io.pulumi.azurenative.keyvault.inputs.SecretPropertiesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecretArgs extends io.pulumi.resources.ResourceArgs {

    public static final SecretArgs Empty = new SecretArgs();

    /**
     * Properties of the secret
     * 
     */
    @InputImport(name="properties", required=true)
      private final Input<SecretPropertiesArgs> properties;

    public Input<SecretPropertiesArgs> getProperties() {
        return this.properties;
    }

    /**
     * The name of the Resource Group to which the vault belongs.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the secret
     * 
     */
    @InputImport(name="secretName")
      private final @Nullable Input<String> secretName;

    public Input<String> getSecretName() {
        return this.secretName == null ? Input.empty() : this.secretName;
    }

    /**
     * The tags that will be assigned to the secret.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Name of the vault
     * 
     */
    @InputImport(name="vaultName", required=true)
      private final Input<String> vaultName;

    public Input<String> getVaultName() {
        return this.vaultName;
    }

    public SecretArgs(
        Input<SecretPropertiesArgs> properties,
        Input<String> resourceGroupName,
        @Nullable Input<String> secretName,
        @Nullable Input<Map<String,String>> tags,
        Input<String> vaultName) {
        this.properties = Objects.requireNonNull(properties, "expected parameter 'properties' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.secretName = secretName;
        this.tags = tags;
        this.vaultName = Objects.requireNonNull(vaultName, "expected parameter 'vaultName' to be non-null");
    }

    private SecretArgs() {
        this.properties = Input.empty();
        this.resourceGroupName = Input.empty();
        this.secretName = Input.empty();
        this.tags = Input.empty();
        this.vaultName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<SecretPropertiesArgs> properties;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> secretName;
        private @Nullable Input<Map<String,String>> tags;
        private Input<String> vaultName;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.properties = defaults.properties;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secretName = defaults.secretName;
    	      this.tags = defaults.tags;
    	      this.vaultName = defaults.vaultName;
        }

        public Builder properties(Input<SecretPropertiesArgs> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }

        public Builder properties(SecretPropertiesArgs properties) {
            this.properties = Input.of(Objects.requireNonNull(properties));
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder secretName(@Nullable Input<String> secretName) {
            this.secretName = secretName;
            return this;
        }

        public Builder secretName(@Nullable String secretName) {
            this.secretName = Input.ofNullable(secretName);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder vaultName(Input<String> vaultName) {
            this.vaultName = Objects.requireNonNull(vaultName);
            return this;
        }

        public Builder vaultName(String vaultName) {
            this.vaultName = Input.of(Objects.requireNonNull(vaultName));
            return this;
        }
        public SecretArgs build() {
            return new SecretArgs(properties, resourceGroupName, secretName, tags, vaultName);
        }
    }
}
