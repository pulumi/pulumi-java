// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.securityinsights;

import io.pulumi.azurenative.securityinsights.inputs.WatchlistUserInfoArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WatchlistItemArgs extends io.pulumi.resources.ResourceArgs {

    public static final WatchlistItemArgs Empty = new WatchlistItemArgs();

    /**
     * The time the watchlist item was created
     * 
     */
    @Import(name="created")
      private final @Nullable Output<String> created;

    public Output<String> getCreated() {
        return this.created == null ? Codegen.empty() : this.created;
    }

    /**
     * Describes a user that created the watchlist item
     * 
     */
    @Import(name="createdBy")
      private final @Nullable Output<WatchlistUserInfoArgs> createdBy;

    public Output<WatchlistUserInfoArgs> getCreatedBy() {
        return this.createdBy == null ? Codegen.empty() : this.createdBy;
    }

    /**
     * key-value pairs for a watchlist item entity mapping
     * 
     */
    @Import(name="entityMapping")
      private final @Nullable Output<Object> entityMapping;

    public Output<Object> getEntityMapping() {
        return this.entityMapping == null ? Codegen.empty() : this.entityMapping;
    }

    /**
     * A flag that indicates if the watchlist item is deleted or not
     * 
     */
    @Import(name="isDeleted")
      private final @Nullable Output<Boolean> isDeleted;

    public Output<Boolean> getIsDeleted() {
        return this.isDeleted == null ? Codegen.empty() : this.isDeleted;
    }

    /**
     * key-value pairs for a watchlist item
     * 
     */
    @Import(name="itemsKeyValue", required=true)
      private final Output<Object> itemsKeyValue;

    public Output<Object> getItemsKeyValue() {
        return this.itemsKeyValue;
    }

    /**
     * The namespace of workspaces resource provider- Microsoft.OperationalInsights.
     * 
     */
    @Import(name="operationalInsightsResourceProvider", required=true)
      private final Output<String> operationalInsightsResourceProvider;

    public Output<String> getOperationalInsightsResourceProvider() {
        return this.operationalInsightsResourceProvider;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The tenantId to which the watchlist item belongs to
     * 
     */
    @Import(name="tenantId")
      private final @Nullable Output<String> tenantId;

    public Output<String> getTenantId() {
        return this.tenantId == null ? Codegen.empty() : this.tenantId;
    }

    /**
     * The last time the watchlist item was updated
     * 
     */
    @Import(name="updated")
      private final @Nullable Output<String> updated;

    public Output<String> getUpdated() {
        return this.updated == null ? Codegen.empty() : this.updated;
    }

    /**
     * Describes a user that updated the watchlist item
     * 
     */
    @Import(name="updatedBy")
      private final @Nullable Output<WatchlistUserInfoArgs> updatedBy;

    public Output<WatchlistUserInfoArgs> getUpdatedBy() {
        return this.updatedBy == null ? Codegen.empty() : this.updatedBy;
    }

    /**
     * Watchlist Alias
     * 
     */
    @Import(name="watchlistAlias", required=true)
      private final Output<String> watchlistAlias;

    public Output<String> getWatchlistAlias() {
        return this.watchlistAlias;
    }

    /**
     * The id (a Guid) of the watchlist item
     * 
     */
    @Import(name="watchlistItemId")
      private final @Nullable Output<String> watchlistItemId;

    public Output<String> getWatchlistItemId() {
        return this.watchlistItemId == null ? Codegen.empty() : this.watchlistItemId;
    }

    /**
     * The type of the watchlist item
     * 
     */
    @Import(name="watchlistItemType")
      private final @Nullable Output<String> watchlistItemType;

    public Output<String> getWatchlistItemType() {
        return this.watchlistItemType == null ? Codegen.empty() : this.watchlistItemType;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public WatchlistItemArgs(
        @Nullable Output<String> created,
        @Nullable Output<WatchlistUserInfoArgs> createdBy,
        @Nullable Output<Object> entityMapping,
        @Nullable Output<Boolean> isDeleted,
        Output<Object> itemsKeyValue,
        Output<String> operationalInsightsResourceProvider,
        Output<String> resourceGroupName,
        @Nullable Output<String> tenantId,
        @Nullable Output<String> updated,
        @Nullable Output<WatchlistUserInfoArgs> updatedBy,
        Output<String> watchlistAlias,
        @Nullable Output<String> watchlistItemId,
        @Nullable Output<String> watchlistItemType,
        Output<String> workspaceName) {
        this.created = created;
        this.createdBy = createdBy;
        this.entityMapping = entityMapping;
        this.isDeleted = isDeleted;
        this.itemsKeyValue = Objects.requireNonNull(itemsKeyValue, "expected parameter 'itemsKeyValue' to be non-null");
        this.operationalInsightsResourceProvider = Objects.requireNonNull(operationalInsightsResourceProvider, "expected parameter 'operationalInsightsResourceProvider' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tenantId = tenantId;
        this.updated = updated;
        this.updatedBy = updatedBy;
        this.watchlistAlias = Objects.requireNonNull(watchlistAlias, "expected parameter 'watchlistAlias' to be non-null");
        this.watchlistItemId = watchlistItemId;
        this.watchlistItemType = watchlistItemType;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private WatchlistItemArgs() {
        this.created = Codegen.empty();
        this.createdBy = Codegen.empty();
        this.entityMapping = Codegen.empty();
        this.isDeleted = Codegen.empty();
        this.itemsKeyValue = Codegen.empty();
        this.operationalInsightsResourceProvider = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tenantId = Codegen.empty();
        this.updated = Codegen.empty();
        this.updatedBy = Codegen.empty();
        this.watchlistAlias = Codegen.empty();
        this.watchlistItemId = Codegen.empty();
        this.watchlistItemType = Codegen.empty();
        this.workspaceName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WatchlistItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> created;
        private @Nullable Output<WatchlistUserInfoArgs> createdBy;
        private @Nullable Output<Object> entityMapping;
        private @Nullable Output<Boolean> isDeleted;
        private Output<Object> itemsKeyValue;
        private Output<String> operationalInsightsResourceProvider;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> tenantId;
        private @Nullable Output<String> updated;
        private @Nullable Output<WatchlistUserInfoArgs> updatedBy;
        private Output<String> watchlistAlias;
        private @Nullable Output<String> watchlistItemId;
        private @Nullable Output<String> watchlistItemType;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(WatchlistItemArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.created = defaults.created;
    	      this.createdBy = defaults.createdBy;
    	      this.entityMapping = defaults.entityMapping;
    	      this.isDeleted = defaults.isDeleted;
    	      this.itemsKeyValue = defaults.itemsKeyValue;
    	      this.operationalInsightsResourceProvider = defaults.operationalInsightsResourceProvider;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tenantId = defaults.tenantId;
    	      this.updated = defaults.updated;
    	      this.updatedBy = defaults.updatedBy;
    	      this.watchlistAlias = defaults.watchlistAlias;
    	      this.watchlistItemId = defaults.watchlistItemId;
    	      this.watchlistItemType = defaults.watchlistItemType;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder created(@Nullable Output<String> created) {
            this.created = created;
            return this;
        }
        public Builder created(@Nullable String created) {
            this.created = Codegen.ofNullable(created);
            return this;
        }
        public Builder createdBy(@Nullable Output<WatchlistUserInfoArgs> createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        public Builder createdBy(@Nullable WatchlistUserInfoArgs createdBy) {
            this.createdBy = Codegen.ofNullable(createdBy);
            return this;
        }
        public Builder entityMapping(@Nullable Output<Object> entityMapping) {
            this.entityMapping = entityMapping;
            return this;
        }
        public Builder entityMapping(@Nullable Object entityMapping) {
            this.entityMapping = Codegen.ofNullable(entityMapping);
            return this;
        }
        public Builder isDeleted(@Nullable Output<Boolean> isDeleted) {
            this.isDeleted = isDeleted;
            return this;
        }
        public Builder isDeleted(@Nullable Boolean isDeleted) {
            this.isDeleted = Codegen.ofNullable(isDeleted);
            return this;
        }
        public Builder itemsKeyValue(Output<Object> itemsKeyValue) {
            this.itemsKeyValue = Objects.requireNonNull(itemsKeyValue);
            return this;
        }
        public Builder itemsKeyValue(Object itemsKeyValue) {
            this.itemsKeyValue = Output.of(Objects.requireNonNull(itemsKeyValue));
            return this;
        }
        public Builder operationalInsightsResourceProvider(Output<String> operationalInsightsResourceProvider) {
            this.operationalInsightsResourceProvider = Objects.requireNonNull(operationalInsightsResourceProvider);
            return this;
        }
        public Builder operationalInsightsResourceProvider(String operationalInsightsResourceProvider) {
            this.operationalInsightsResourceProvider = Output.of(Objects.requireNonNull(operationalInsightsResourceProvider));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tenantId(@Nullable Output<String> tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = Codegen.ofNullable(tenantId);
            return this;
        }
        public Builder updated(@Nullable Output<String> updated) {
            this.updated = updated;
            return this;
        }
        public Builder updated(@Nullable String updated) {
            this.updated = Codegen.ofNullable(updated);
            return this;
        }
        public Builder updatedBy(@Nullable Output<WatchlistUserInfoArgs> updatedBy) {
            this.updatedBy = updatedBy;
            return this;
        }
        public Builder updatedBy(@Nullable WatchlistUserInfoArgs updatedBy) {
            this.updatedBy = Codegen.ofNullable(updatedBy);
            return this;
        }
        public Builder watchlistAlias(Output<String> watchlistAlias) {
            this.watchlistAlias = Objects.requireNonNull(watchlistAlias);
            return this;
        }
        public Builder watchlistAlias(String watchlistAlias) {
            this.watchlistAlias = Output.of(Objects.requireNonNull(watchlistAlias));
            return this;
        }
        public Builder watchlistItemId(@Nullable Output<String> watchlistItemId) {
            this.watchlistItemId = watchlistItemId;
            return this;
        }
        public Builder watchlistItemId(@Nullable String watchlistItemId) {
            this.watchlistItemId = Codegen.ofNullable(watchlistItemId);
            return this;
        }
        public Builder watchlistItemType(@Nullable Output<String> watchlistItemType) {
            this.watchlistItemType = watchlistItemType;
            return this;
        }
        public Builder watchlistItemType(@Nullable String watchlistItemType) {
            this.watchlistItemType = Codegen.ofNullable(watchlistItemType);
            return this;
        }
        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }
        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }        public WatchlistItemArgs build() {
            return new WatchlistItemArgs(created, createdBy, entityMapping, isDeleted, itemsKeyValue, operationalInsightsResourceProvider, resourceGroupName, tenantId, updated, updatedBy, watchlistAlias, watchlistItemId, watchlistItemType, workspaceName);
        }
    }
}
