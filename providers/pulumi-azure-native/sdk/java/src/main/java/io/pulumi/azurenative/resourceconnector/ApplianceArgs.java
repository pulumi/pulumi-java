// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.resourceconnector;

import io.pulumi.azurenative.resourceconnector.enums.Distro;
import io.pulumi.azurenative.resourceconnector.inputs.AppliancePropertiesInfrastructureConfigArgs;
import io.pulumi.azurenative.resourceconnector.inputs.IdentityArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplianceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplianceArgs Empty = new ApplianceArgs();

    /**
     * Represents a supported Fabric/Infra. (AKSEdge etc...).
     * 
     */
    @Import(name="distro")
      private final @Nullable Output<Either<String,Distro>> distro;

    public Output<Either<String,Distro>> distro() {
        return this.distro == null ? Codegen.empty() : this.distro;
    }

    /**
     * Identity for the resource.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<IdentityArgs> identity;

    public Output<IdentityArgs> identity() {
        return this.identity == null ? Codegen.empty() : this.identity;
    }

    /**
     * Contains infrastructure information about the Appliance
     * 
     */
    @Import(name="infrastructureConfig")
      private final @Nullable Output<AppliancePropertiesInfrastructureConfigArgs> infrastructureConfig;

    public Output<AppliancePropertiesInfrastructureConfigArgs> infrastructureConfig() {
        return this.infrastructureConfig == null ? Codegen.empty() : this.infrastructureConfig;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Certificates pair used to download MSI certificate from HIS
     * 
     */
    @Import(name="publicKey")
      private final @Nullable Output<String> publicKey;

    public Output<String> publicKey() {
        return this.publicKey == null ? Codegen.empty() : this.publicKey;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Appliances name.
     * 
     */
    @Import(name="resourceName")
      private final @Nullable Output<String> resourceName;

    public Output<String> resourceName() {
        return this.resourceName == null ? Codegen.empty() : this.resourceName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public ApplianceArgs(
        @Nullable Output<Either<String,Distro>> distro,
        @Nullable Output<IdentityArgs> identity,
        @Nullable Output<AppliancePropertiesInfrastructureConfigArgs> infrastructureConfig,
        @Nullable Output<String> location,
        @Nullable Output<String> publicKey,
        Output<String> resourceGroupName,
        @Nullable Output<String> resourceName,
        @Nullable Output<Map<String,String>> tags) {
        this.distro = distro == null ? Output.ofLeft("AKSEdge") : distro;
        this.identity = identity;
        this.infrastructureConfig = infrastructureConfig;
        this.location = location;
        this.publicKey = publicKey;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceName = resourceName;
        this.tags = tags;
    }

    private ApplianceArgs() {
        this.distro = Codegen.empty();
        this.identity = Codegen.empty();
        this.infrastructureConfig = Codegen.empty();
        this.location = Codegen.empty();
        this.publicKey = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.resourceName = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplianceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,Distro>> distro;
        private @Nullable Output<IdentityArgs> identity;
        private @Nullable Output<AppliancePropertiesInfrastructureConfigArgs> infrastructureConfig;
        private @Nullable Output<String> location;
        private @Nullable Output<String> publicKey;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> resourceName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplianceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distro = defaults.distro;
    	      this.identity = defaults.identity;
    	      this.infrastructureConfig = defaults.infrastructureConfig;
    	      this.location = defaults.location;
    	      this.publicKey = defaults.publicKey;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceName = defaults.resourceName;
    	      this.tags = defaults.tags;
        }

        public Builder distro(@Nullable Output<Either<String,Distro>> distro) {
            this.distro = distro;
            return this;
        }
        public Builder distro(@Nullable Either<String,Distro> distro) {
            this.distro = Codegen.ofNullable(distro);
            return this;
        }
        public Builder identity(@Nullable Output<IdentityArgs> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable IdentityArgs identity) {
            this.identity = Codegen.ofNullable(identity);
            return this;
        }
        public Builder infrastructureConfig(@Nullable Output<AppliancePropertiesInfrastructureConfigArgs> infrastructureConfig) {
            this.infrastructureConfig = infrastructureConfig;
            return this;
        }
        public Builder infrastructureConfig(@Nullable AppliancePropertiesInfrastructureConfigArgs infrastructureConfig) {
            this.infrastructureConfig = Codegen.ofNullable(infrastructureConfig);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder publicKey(@Nullable Output<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }
        public Builder publicKey(@Nullable String publicKey) {
            this.publicKey = Codegen.ofNullable(publicKey);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder resourceName(@Nullable Output<String> resourceName) {
            this.resourceName = resourceName;
            return this;
        }
        public Builder resourceName(@Nullable String resourceName) {
            this.resourceName = Codegen.ofNullable(resourceName);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public ApplianceArgs build() {
            return new ApplianceArgs(distro, identity, infrastructureConfig, location, publicKey, resourceGroupName, resourceName, tags);
        }
    }
}
