// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic;

import io.pulumi.azurenative.logic.enums.WorkflowState;
import io.pulumi.azurenative.logic.inputs.FlowAccessControlConfigurationArgs;
import io.pulumi.azurenative.logic.inputs.FlowEndpointsConfigurationArgs;
import io.pulumi.azurenative.logic.inputs.ManagedServiceIdentityArgs;
import io.pulumi.azurenative.logic.inputs.ResourceReferenceArgs;
import io.pulumi.azurenative.logic.inputs.WorkflowParameterArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WorkflowArgs extends io.pulumi.resources.ResourceArgs {

    public static final WorkflowArgs Empty = new WorkflowArgs();

    /**
     * The access control configuration.
     * 
     */
    @InputImport(name="accessControl")
        private final @Nullable Input<FlowAccessControlConfigurationArgs> accessControl;

    public Input<FlowAccessControlConfigurationArgs> getAccessControl() {
        return this.accessControl == null ? Input.empty() : this.accessControl;
    }

    /**
     * The definition.
     * 
     */
    @InputImport(name="definition")
        private final @Nullable Input<Object> definition;

    public Input<Object> getDefinition() {
        return this.definition == null ? Input.empty() : this.definition;
    }

    /**
     * The endpoints configuration.
     * 
     */
    @InputImport(name="endpointsConfiguration")
        private final @Nullable Input<FlowEndpointsConfigurationArgs> endpointsConfiguration;

    public Input<FlowEndpointsConfigurationArgs> getEndpointsConfiguration() {
        return this.endpointsConfiguration == null ? Input.empty() : this.endpointsConfiguration;
    }

    /**
     * Managed service identity properties.
     * 
     */
    @InputImport(name="identity")
        private final @Nullable Input<ManagedServiceIdentityArgs> identity;

    public Input<ManagedServiceIdentityArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    /**
     * The integration account.
     * 
     */
    @InputImport(name="integrationAccount")
        private final @Nullable Input<ResourceReferenceArgs> integrationAccount;

    public Input<ResourceReferenceArgs> getIntegrationAccount() {
        return this.integrationAccount == null ? Input.empty() : this.integrationAccount;
    }

    /**
     * The integration service environment.
     * 
     */
    @InputImport(name="integrationServiceEnvironment")
        private final @Nullable Input<ResourceReferenceArgs> integrationServiceEnvironment;

    public Input<ResourceReferenceArgs> getIntegrationServiceEnvironment() {
        return this.integrationServiceEnvironment == null ? Input.empty() : this.integrationServiceEnvironment;
    }

    /**
     * The resource location.
     * 
     */
    @InputImport(name="location")
        private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The parameters.
     * 
     */
    @InputImport(name="parameters")
        private final @Nullable Input<Map<String,WorkflowParameterArgs>> parameters;

    public Input<Map<String,WorkflowParameterArgs>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * The resource group name.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The state.
     * 
     */
    @InputImport(name="state")
        private final @Nullable Input<Either<String,WorkflowState>> state;

    public Input<Either<String,WorkflowState>> getState() {
        return this.state == null ? Input.empty() : this.state;
    }

    /**
     * The resource tags.
     * 
     */
    @InputImport(name="tags")
        private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The workflow name.
     * 
     */
    @InputImport(name="workflowName")
        private final @Nullable Input<String> workflowName;

    public Input<String> getWorkflowName() {
        return this.workflowName == null ? Input.empty() : this.workflowName;
    }

    public WorkflowArgs(
        @Nullable Input<FlowAccessControlConfigurationArgs> accessControl,
        @Nullable Input<Object> definition,
        @Nullable Input<FlowEndpointsConfigurationArgs> endpointsConfiguration,
        @Nullable Input<ManagedServiceIdentityArgs> identity,
        @Nullable Input<ResourceReferenceArgs> integrationAccount,
        @Nullable Input<ResourceReferenceArgs> integrationServiceEnvironment,
        @Nullable Input<String> location,
        @Nullable Input<Map<String,WorkflowParameterArgs>> parameters,
        Input<String> resourceGroupName,
        @Nullable Input<Either<String,WorkflowState>> state,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> workflowName) {
        this.accessControl = accessControl;
        this.definition = definition;
        this.endpointsConfiguration = endpointsConfiguration;
        this.identity = identity;
        this.integrationAccount = integrationAccount;
        this.integrationServiceEnvironment = integrationServiceEnvironment;
        this.location = location;
        this.parameters = parameters;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.state = state;
        this.tags = tags;
        this.workflowName = workflowName;
    }

    private WorkflowArgs() {
        this.accessControl = Input.empty();
        this.definition = Input.empty();
        this.endpointsConfiguration = Input.empty();
        this.identity = Input.empty();
        this.integrationAccount = Input.empty();
        this.integrationServiceEnvironment = Input.empty();
        this.location = Input.empty();
        this.parameters = Input.empty();
        this.resourceGroupName = Input.empty();
        this.state = Input.empty();
        this.tags = Input.empty();
        this.workflowName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkflowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<FlowAccessControlConfigurationArgs> accessControl;
        private @Nullable Input<Object> definition;
        private @Nullable Input<FlowEndpointsConfigurationArgs> endpointsConfiguration;
        private @Nullable Input<ManagedServiceIdentityArgs> identity;
        private @Nullable Input<ResourceReferenceArgs> integrationAccount;
        private @Nullable Input<ResourceReferenceArgs> integrationServiceEnvironment;
        private @Nullable Input<String> location;
        private @Nullable Input<Map<String,WorkflowParameterArgs>> parameters;
        private Input<String> resourceGroupName;
        private @Nullable Input<Either<String,WorkflowState>> state;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> workflowName;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkflowArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessControl = defaults.accessControl;
    	      this.definition = defaults.definition;
    	      this.endpointsConfiguration = defaults.endpointsConfiguration;
    	      this.identity = defaults.identity;
    	      this.integrationAccount = defaults.integrationAccount;
    	      this.integrationServiceEnvironment = defaults.integrationServiceEnvironment;
    	      this.location = defaults.location;
    	      this.parameters = defaults.parameters;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.workflowName = defaults.workflowName;
        }

        public Builder setAccessControl(@Nullable Input<FlowAccessControlConfigurationArgs> accessControl) {
            this.accessControl = accessControl;
            return this;
        }

        public Builder setAccessControl(@Nullable FlowAccessControlConfigurationArgs accessControl) {
            this.accessControl = Input.ofNullable(accessControl);
            return this;
        }

        public Builder setDefinition(@Nullable Input<Object> definition) {
            this.definition = definition;
            return this;
        }

        public Builder setDefinition(@Nullable Object definition) {
            this.definition = Input.ofNullable(definition);
            return this;
        }

        public Builder setEndpointsConfiguration(@Nullable Input<FlowEndpointsConfigurationArgs> endpointsConfiguration) {
            this.endpointsConfiguration = endpointsConfiguration;
            return this;
        }

        public Builder setEndpointsConfiguration(@Nullable FlowEndpointsConfigurationArgs endpointsConfiguration) {
            this.endpointsConfiguration = Input.ofNullable(endpointsConfiguration);
            return this;
        }

        public Builder setIdentity(@Nullable Input<ManagedServiceIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIdentity(@Nullable ManagedServiceIdentityArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder setIntegrationAccount(@Nullable Input<ResourceReferenceArgs> integrationAccount) {
            this.integrationAccount = integrationAccount;
            return this;
        }

        public Builder setIntegrationAccount(@Nullable ResourceReferenceArgs integrationAccount) {
            this.integrationAccount = Input.ofNullable(integrationAccount);
            return this;
        }

        public Builder setIntegrationServiceEnvironment(@Nullable Input<ResourceReferenceArgs> integrationServiceEnvironment) {
            this.integrationServiceEnvironment = integrationServiceEnvironment;
            return this;
        }

        public Builder setIntegrationServiceEnvironment(@Nullable ResourceReferenceArgs integrationServiceEnvironment) {
            this.integrationServiceEnvironment = Input.ofNullable(integrationServiceEnvironment);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setParameters(@Nullable Input<Map<String,WorkflowParameterArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setParameters(@Nullable Map<String,WorkflowParameterArgs> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setState(@Nullable Input<Either<String,WorkflowState>> state) {
            this.state = state;
            return this;
        }

        public Builder setState(@Nullable Either<String,WorkflowState> state) {
            this.state = Input.ofNullable(state);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setWorkflowName(@Nullable Input<String> workflowName) {
            this.workflowName = workflowName;
            return this;
        }

        public Builder setWorkflowName(@Nullable String workflowName) {
            this.workflowName = Input.ofNullable(workflowName);
            return this;
        }
        public WorkflowArgs build() {
            return new WorkflowArgs(accessControl, definition, endpointsConfiguration, identity, integrationAccount, integrationServiceEnvironment, location, parameters, resourceGroupName, state, tags, workflowName);
        }
    }
}
