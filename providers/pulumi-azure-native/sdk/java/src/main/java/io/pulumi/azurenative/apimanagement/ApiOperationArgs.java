// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.azurenative.apimanagement.inputs.ParameterContractArgs;
import io.pulumi.azurenative.apimanagement.inputs.RequestContractArgs;
import io.pulumi.azurenative.apimanagement.inputs.ResponseContractArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApiOperationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApiOperationArgs Empty = new ApiOperationArgs();

    /**
     * API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * 
     */
    @Import(name="apiId", required=true)
      private final Output<String> apiId;

    public Output<String> getApiId() {
        return this.apiId;
    }

    /**
     * Description of the operation. May include HTML formatting tags.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Operation Name.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
     * 
     */
    @Import(name="method", required=true)
      private final Output<String> method;

    public Output<String> getMethod() {
        return this.method;
    }

    /**
     * Operation identifier within an API. Must be unique in the current API Management service instance.
     * 
     */
    @Import(name="operationId")
      private final @Nullable Output<String> operationId;

    public Output<String> getOperationId() {
        return this.operationId == null ? Output.empty() : this.operationId;
    }

    /**
     * Operation Policies
     * 
     */
    @Import(name="policies")
      private final @Nullable Output<String> policies;

    public Output<String> getPolicies() {
        return this.policies == null ? Output.empty() : this.policies;
    }

    /**
     * An entity containing request details.
     * 
     */
    @Import(name="request")
      private final @Nullable Output<RequestContractArgs> request;

    public Output<RequestContractArgs> getRequest() {
        return this.request == null ? Output.empty() : this.request;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Array of Operation responses.
     * 
     */
    @Import(name="responses")
      private final @Nullable Output<List<ResponseContractArgs>> responses;

    public Output<List<ResponseContractArgs>> getResponses() {
        return this.responses == null ? Output.empty() : this.responses;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * Collection of URL template parameters.
     * 
     */
    @Import(name="templateParameters")
      private final @Nullable Output<List<ParameterContractArgs>> templateParameters;

    public Output<List<ParameterContractArgs>> getTemplateParameters() {
        return this.templateParameters == null ? Output.empty() : this.templateParameters;
    }

    /**
     * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
     * 
     */
    @Import(name="urlTemplate", required=true)
      private final Output<String> urlTemplate;

    public Output<String> getUrlTemplate() {
        return this.urlTemplate;
    }

    public ApiOperationArgs(
        Output<String> apiId,
        @Nullable Output<String> description,
        Output<String> displayName,
        Output<String> method,
        @Nullable Output<String> operationId,
        @Nullable Output<String> policies,
        @Nullable Output<RequestContractArgs> request,
        Output<String> resourceGroupName,
        @Nullable Output<List<ResponseContractArgs>> responses,
        Output<String> serviceName,
        @Nullable Output<List<ParameterContractArgs>> templateParameters,
        Output<String> urlTemplate) {
        this.apiId = Objects.requireNonNull(apiId, "expected parameter 'apiId' to be non-null");
        this.description = description;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.method = Objects.requireNonNull(method, "expected parameter 'method' to be non-null");
        this.operationId = operationId;
        this.policies = policies;
        this.request = request;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.responses = responses;
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.templateParameters = templateParameters;
        this.urlTemplate = Objects.requireNonNull(urlTemplate, "expected parameter 'urlTemplate' to be non-null");
    }

    private ApiOperationArgs() {
        this.apiId = Output.empty();
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.method = Output.empty();
        this.operationId = Output.empty();
        this.policies = Output.empty();
        this.request = Output.empty();
        this.resourceGroupName = Output.empty();
        this.responses = Output.empty();
        this.serviceName = Output.empty();
        this.templateParameters = Output.empty();
        this.urlTemplate = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApiOperationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> apiId;
        private @Nullable Output<String> description;
        private Output<String> displayName;
        private Output<String> method;
        private @Nullable Output<String> operationId;
        private @Nullable Output<String> policies;
        private @Nullable Output<RequestContractArgs> request;
        private Output<String> resourceGroupName;
        private @Nullable Output<List<ResponseContractArgs>> responses;
        private Output<String> serviceName;
        private @Nullable Output<List<ParameterContractArgs>> templateParameters;
        private Output<String> urlTemplate;

        public Builder() {
    	      // Empty
        }

        public Builder(ApiOperationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiId = defaults.apiId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.method = defaults.method;
    	      this.operationId = defaults.operationId;
    	      this.policies = defaults.policies;
    	      this.request = defaults.request;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.responses = defaults.responses;
    	      this.serviceName = defaults.serviceName;
    	      this.templateParameters = defaults.templateParameters;
    	      this.urlTemplate = defaults.urlTemplate;
        }

        public Builder apiId(Output<String> apiId) {
            this.apiId = Objects.requireNonNull(apiId);
            return this;
        }

        public Builder apiId(String apiId) {
            this.apiId = Output.of(Objects.requireNonNull(apiId));
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder method(Output<String> method) {
            this.method = Objects.requireNonNull(method);
            return this;
        }

        public Builder method(String method) {
            this.method = Output.of(Objects.requireNonNull(method));
            return this;
        }

        public Builder operationId(@Nullable Output<String> operationId) {
            this.operationId = operationId;
            return this;
        }

        public Builder operationId(@Nullable String operationId) {
            this.operationId = Output.ofNullable(operationId);
            return this;
        }

        public Builder policies(@Nullable Output<String> policies) {
            this.policies = policies;
            return this;
        }

        public Builder policies(@Nullable String policies) {
            this.policies = Output.ofNullable(policies);
            return this;
        }

        public Builder request(@Nullable Output<RequestContractArgs> request) {
            this.request = request;
            return this;
        }

        public Builder request(@Nullable RequestContractArgs request) {
            this.request = Output.ofNullable(request);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder responses(@Nullable Output<List<ResponseContractArgs>> responses) {
            this.responses = responses;
            return this;
        }

        public Builder responses(@Nullable List<ResponseContractArgs> responses) {
            this.responses = Output.ofNullable(responses);
            return this;
        }

        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }

        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }

        public Builder templateParameters(@Nullable Output<List<ParameterContractArgs>> templateParameters) {
            this.templateParameters = templateParameters;
            return this;
        }

        public Builder templateParameters(@Nullable List<ParameterContractArgs> templateParameters) {
            this.templateParameters = Output.ofNullable(templateParameters);
            return this;
        }

        public Builder urlTemplate(Output<String> urlTemplate) {
            this.urlTemplate = Objects.requireNonNull(urlTemplate);
            return this;
        }

        public Builder urlTemplate(String urlTemplate) {
            this.urlTemplate = Output.of(Objects.requireNonNull(urlTemplate));
            return this;
        }
        public ApiOperationArgs build() {
            return new ApiOperationArgs(apiId, description, displayName, method, operationId, policies, request, resourceGroupName, responses, serviceName, templateParameters, urlTemplate);
        }
    }
}
