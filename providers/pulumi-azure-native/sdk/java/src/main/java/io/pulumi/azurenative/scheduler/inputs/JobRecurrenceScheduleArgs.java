// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.scheduler.inputs;

import io.pulumi.azurenative.scheduler.enums.DayOfWeek;
import io.pulumi.azurenative.scheduler.inputs.JobRecurrenceScheduleMonthlyOccurrenceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobRecurrenceScheduleArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobRecurrenceScheduleArgs Empty = new JobRecurrenceScheduleArgs();

    /**
     * Gets or sets the hours of the day that the job should execute at.
     * 
     */
    @Import(name="hours")
      private final @Nullable Output<List<Integer>> hours;

    public Output<List<Integer>> hours() {
        return this.hours == null ? Codegen.empty() : this.hours;
    }

    /**
     * Gets or sets the minutes of the hour that the job should execute at.
     * 
     */
    @Import(name="minutes")
      private final @Nullable Output<List<Integer>> minutes;

    public Output<List<Integer>> minutes() {
        return this.minutes == null ? Codegen.empty() : this.minutes;
    }

    /**
     * Gets or sets the days of the month that the job should execute on. Must be between 1 and 31.
     * 
     */
    @Import(name="monthDays")
      private final @Nullable Output<List<Integer>> monthDays;

    public Output<List<Integer>> monthDays() {
        return this.monthDays == null ? Codegen.empty() : this.monthDays;
    }

    /**
     * Gets or sets the occurrences of days within a month.
     * 
     */
    @Import(name="monthlyOccurrences")
      private final @Nullable Output<List<JobRecurrenceScheduleMonthlyOccurrenceArgs>> monthlyOccurrences;

    public Output<List<JobRecurrenceScheduleMonthlyOccurrenceArgs>> monthlyOccurrences() {
        return this.monthlyOccurrences == null ? Codegen.empty() : this.monthlyOccurrences;
    }

    /**
     * Gets or sets the days of the week that the job should execute on.
     * 
     */
    @Import(name="weekDays")
      private final @Nullable Output<List<DayOfWeek>> weekDays;

    public Output<List<DayOfWeek>> weekDays() {
        return this.weekDays == null ? Codegen.empty() : this.weekDays;
    }

    public JobRecurrenceScheduleArgs(
        @Nullable Output<List<Integer>> hours,
        @Nullable Output<List<Integer>> minutes,
        @Nullable Output<List<Integer>> monthDays,
        @Nullable Output<List<JobRecurrenceScheduleMonthlyOccurrenceArgs>> monthlyOccurrences,
        @Nullable Output<List<DayOfWeek>> weekDays) {
        this.hours = hours;
        this.minutes = minutes;
        this.monthDays = monthDays;
        this.monthlyOccurrences = monthlyOccurrences;
        this.weekDays = weekDays;
    }

    private JobRecurrenceScheduleArgs() {
        this.hours = Codegen.empty();
        this.minutes = Codegen.empty();
        this.monthDays = Codegen.empty();
        this.monthlyOccurrences = Codegen.empty();
        this.weekDays = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobRecurrenceScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Integer>> hours;
        private @Nullable Output<List<Integer>> minutes;
        private @Nullable Output<List<Integer>> monthDays;
        private @Nullable Output<List<JobRecurrenceScheduleMonthlyOccurrenceArgs>> monthlyOccurrences;
        private @Nullable Output<List<DayOfWeek>> weekDays;

        public Builder() {
    	      // Empty
        }

        public Builder(JobRecurrenceScheduleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hours = defaults.hours;
    	      this.minutes = defaults.minutes;
    	      this.monthDays = defaults.monthDays;
    	      this.monthlyOccurrences = defaults.monthlyOccurrences;
    	      this.weekDays = defaults.weekDays;
        }

        public Builder hours(@Nullable Output<List<Integer>> hours) {
            this.hours = hours;
            return this;
        }
        public Builder hours(@Nullable List<Integer> hours) {
            this.hours = Codegen.ofNullable(hours);
            return this;
        }
        public Builder hours(Integer... hours) {
            return hours(List.of(hours));
        }
        public Builder minutes(@Nullable Output<List<Integer>> minutes) {
            this.minutes = minutes;
            return this;
        }
        public Builder minutes(@Nullable List<Integer> minutes) {
            this.minutes = Codegen.ofNullable(minutes);
            return this;
        }
        public Builder minutes(Integer... minutes) {
            return minutes(List.of(minutes));
        }
        public Builder monthDays(@Nullable Output<List<Integer>> monthDays) {
            this.monthDays = monthDays;
            return this;
        }
        public Builder monthDays(@Nullable List<Integer> monthDays) {
            this.monthDays = Codegen.ofNullable(monthDays);
            return this;
        }
        public Builder monthDays(Integer... monthDays) {
            return monthDays(List.of(monthDays));
        }
        public Builder monthlyOccurrences(@Nullable Output<List<JobRecurrenceScheduleMonthlyOccurrenceArgs>> monthlyOccurrences) {
            this.monthlyOccurrences = monthlyOccurrences;
            return this;
        }
        public Builder monthlyOccurrences(@Nullable List<JobRecurrenceScheduleMonthlyOccurrenceArgs> monthlyOccurrences) {
            this.monthlyOccurrences = Codegen.ofNullable(monthlyOccurrences);
            return this;
        }
        public Builder monthlyOccurrences(JobRecurrenceScheduleMonthlyOccurrenceArgs... monthlyOccurrences) {
            return monthlyOccurrences(List.of(monthlyOccurrences));
        }
        public Builder weekDays(@Nullable Output<List<DayOfWeek>> weekDays) {
            this.weekDays = weekDays;
            return this;
        }
        public Builder weekDays(@Nullable List<DayOfWeek> weekDays) {
            this.weekDays = Codegen.ofNullable(weekDays);
            return this;
        }
        public Builder weekDays(DayOfWeek... weekDays) {
            return weekDays(List.of(weekDays));
        }        public JobRecurrenceScheduleArgs build() {
            return new JobRecurrenceScheduleArgs(hours, minutes, monthDays, monthlyOccurrences, weekDays);
        }
    }
}
