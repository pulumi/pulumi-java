// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights.outputs;

import io.pulumi.azurenative.customerinsights.outputs.ParticipantPropertyReferenceResponse;
import io.pulumi.azurenative.customerinsights.outputs.TypePropertiesMappingResponse;
import io.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLinkResult {
    /**
     * Localized descriptions for the Link.
     * 
     */
    private final @Nullable Map<String,String> description;
    /**
     * Localized display name for the Link.
     * 
     */
    private final @Nullable Map<String,String> displayName;
    /**
     * Resource ID.
     * 
     */
    private final String id;
    /**
     * The link name.
     * 
     */
    private final String linkName;
    /**
     * The set of properties mappings between the source and target Types.
     * 
     */
    private final @Nullable List<TypePropertiesMappingResponse> mappings;
    /**
     * Resource name.
     * 
     */
    private final String name;
    /**
     * Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
     * 
     */
    private final @Nullable String operationType;
    /**
     * The properties that represent the participating profile.
     * 
     */
    private final List<ParticipantPropertyReferenceResponse> participantPropertyReferences;
    /**
     * Provisioning state.
     * 
     */
    private final String provisioningState;
    /**
     * Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
     * 
     */
    private final @Nullable Boolean referenceOnly;
    /**
     * Type of source entity.
     * 
     */
    private final String sourceEntityType;
    /**
     * Name of the source Entity Type.
     * 
     */
    private final String sourceEntityTypeName;
    /**
     * Type of target entity.
     * 
     */
    private final String targetEntityType;
    /**
     * Name of the target Entity Type.
     * 
     */
    private final String targetEntityTypeName;
    /**
     * The hub name.
     * 
     */
    private final String tenantId;
    /**
     * Resource type.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetLinkResult(
        @CustomType.Parameter("description") @Nullable Map<String,String> description,
        @CustomType.Parameter("displayName") @Nullable Map<String,String> displayName,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("linkName") String linkName,
        @CustomType.Parameter("mappings") @Nullable List<TypePropertiesMappingResponse> mappings,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("operationType") @Nullable String operationType,
        @CustomType.Parameter("participantPropertyReferences") List<ParticipantPropertyReferenceResponse> participantPropertyReferences,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("referenceOnly") @Nullable Boolean referenceOnly,
        @CustomType.Parameter("sourceEntityType") String sourceEntityType,
        @CustomType.Parameter("sourceEntityTypeName") String sourceEntityTypeName,
        @CustomType.Parameter("targetEntityType") String targetEntityType,
        @CustomType.Parameter("targetEntityTypeName") String targetEntityTypeName,
        @CustomType.Parameter("tenantId") String tenantId,
        @CustomType.Parameter("type") String type) {
        this.description = description;
        this.displayName = displayName;
        this.id = id;
        this.linkName = linkName;
        this.mappings = mappings;
        this.name = name;
        this.operationType = operationType;
        this.participantPropertyReferences = participantPropertyReferences;
        this.provisioningState = provisioningState;
        this.referenceOnly = referenceOnly;
        this.sourceEntityType = sourceEntityType;
        this.sourceEntityTypeName = sourceEntityTypeName;
        this.targetEntityType = targetEntityType;
        this.targetEntityTypeName = targetEntityTypeName;
        this.tenantId = tenantId;
        this.type = type;
    }

    /**
     * Localized descriptions for the Link.
     * 
    */
    public Map<String,String> description() {
        return this.description == null ? Map.of() : this.description;
    }
    /**
     * Localized display name for the Link.
     * 
    */
    public Map<String,String> displayName() {
        return this.displayName == null ? Map.of() : this.displayName;
    }
    /**
     * Resource ID.
     * 
    */
    public String id() {
        return this.id;
    }
    /**
     * The link name.
     * 
    */
    public String linkName() {
        return this.linkName;
    }
    /**
     * The set of properties mappings between the source and target Types.
     * 
    */
    public List<TypePropertiesMappingResponse> mappings() {
        return this.mappings == null ? List.of() : this.mappings;
    }
    /**
     * Resource name.
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
     * 
    */
    public Optional<String> operationType() {
        return Optional.ofNullable(this.operationType);
    }
    /**
     * The properties that represent the participating profile.
     * 
    */
    public List<ParticipantPropertyReferenceResponse> participantPropertyReferences() {
        return this.participantPropertyReferences;
    }
    /**
     * Provisioning state.
     * 
    */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
     * 
    */
    public Optional<Boolean> referenceOnly() {
        return Optional.ofNullable(this.referenceOnly);
    }
    /**
     * Type of source entity.
     * 
    */
    public String sourceEntityType() {
        return this.sourceEntityType;
    }
    /**
     * Name of the source Entity Type.
     * 
    */
    public String sourceEntityTypeName() {
        return this.sourceEntityTypeName;
    }
    /**
     * Type of target entity.
     * 
    */
    public String targetEntityType() {
        return this.targetEntityType;
    }
    /**
     * Name of the target Entity Type.
     * 
    */
    public String targetEntityTypeName() {
        return this.targetEntityTypeName;
    }
    /**
     * The hub name.
     * 
    */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * Resource type.
     * 
    */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLinkResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Map<String,String> description;
        private @Nullable Map<String,String> displayName;
        private String id;
        private String linkName;
        private @Nullable List<TypePropertiesMappingResponse> mappings;
        private String name;
        private @Nullable String operationType;
        private List<ParticipantPropertyReferenceResponse> participantPropertyReferences;
        private String provisioningState;
        private @Nullable Boolean referenceOnly;
        private String sourceEntityType;
        private String sourceEntityTypeName;
        private String targetEntityType;
        private String targetEntityTypeName;
        private String tenantId;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetLinkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.linkName = defaults.linkName;
    	      this.mappings = defaults.mappings;
    	      this.name = defaults.name;
    	      this.operationType = defaults.operationType;
    	      this.participantPropertyReferences = defaults.participantPropertyReferences;
    	      this.provisioningState = defaults.provisioningState;
    	      this.referenceOnly = defaults.referenceOnly;
    	      this.sourceEntityType = defaults.sourceEntityType;
    	      this.sourceEntityTypeName = defaults.sourceEntityTypeName;
    	      this.targetEntityType = defaults.targetEntityType;
    	      this.targetEntityTypeName = defaults.targetEntityTypeName;
    	      this.tenantId = defaults.tenantId;
    	      this.type = defaults.type;
        }

        public Builder description(@Nullable Map<String,String> description) {
            this.description = description;
            return this;
        }
        public Builder displayName(@Nullable Map<String,String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder linkName(String linkName) {
            this.linkName = Objects.requireNonNull(linkName);
            return this;
        }
        public Builder mappings(@Nullable List<TypePropertiesMappingResponse> mappings) {
            this.mappings = mappings;
            return this;
        }
        public Builder mappings(TypePropertiesMappingResponse... mappings) {
            return mappings(List.of(mappings));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder operationType(@Nullable String operationType) {
            this.operationType = operationType;
            return this;
        }
        public Builder participantPropertyReferences(List<ParticipantPropertyReferenceResponse> participantPropertyReferences) {
            this.participantPropertyReferences = Objects.requireNonNull(participantPropertyReferences);
            return this;
        }
        public Builder participantPropertyReferences(ParticipantPropertyReferenceResponse... participantPropertyReferences) {
            return participantPropertyReferences(List.of(participantPropertyReferences));
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder referenceOnly(@Nullable Boolean referenceOnly) {
            this.referenceOnly = referenceOnly;
            return this;
        }
        public Builder sourceEntityType(String sourceEntityType) {
            this.sourceEntityType = Objects.requireNonNull(sourceEntityType);
            return this;
        }
        public Builder sourceEntityTypeName(String sourceEntityTypeName) {
            this.sourceEntityTypeName = Objects.requireNonNull(sourceEntityTypeName);
            return this;
        }
        public Builder targetEntityType(String targetEntityType) {
            this.targetEntityType = Objects.requireNonNull(targetEntityType);
            return this;
        }
        public Builder targetEntityTypeName(String targetEntityTypeName) {
            this.targetEntityTypeName = Objects.requireNonNull(targetEntityTypeName);
            return this;
        }
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetLinkResult build() {
            return new GetLinkResult(description, displayName, id, linkName, mappings, name, operationType, participantPropertyReferences, provisioningState, referenceOnly, sourceEntityType, sourceEntityTypeName, targetEntityType, targetEntityTypeName, tenantId, type);
        }
    }
}
