// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.managedservices.inputs;

import io.pulumi.azurenative.managedservices.inputs.RegistrationAssignmentPropertiesResponseRegistrationDefinition;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Properties of a registration assignment.
 * 
 */
public final class RegistrationAssignmentPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final RegistrationAssignmentPropertiesResponse Empty = new RegistrationAssignmentPropertiesResponse();

    /**
     * Current state of the registration assignment.
     * 
     */
    @Import(name="provisioningState", required=true)
      private final String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Registration definition inside registration assignment.
     * 
     */
    @Import(name="registrationDefinition", required=true)
      private final RegistrationAssignmentPropertiesResponseRegistrationDefinition registrationDefinition;

    public RegistrationAssignmentPropertiesResponseRegistrationDefinition registrationDefinition() {
        return this.registrationDefinition;
    }

    /**
     * Fully qualified path of the registration definition.
     * 
     */
    @Import(name="registrationDefinitionId", required=true)
      private final String registrationDefinitionId;

    public String registrationDefinitionId() {
        return this.registrationDefinitionId;
    }

    public RegistrationAssignmentPropertiesResponse(
        String provisioningState,
        RegistrationAssignmentPropertiesResponseRegistrationDefinition registrationDefinition,
        String registrationDefinitionId) {
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.registrationDefinition = Objects.requireNonNull(registrationDefinition, "expected parameter 'registrationDefinition' to be non-null");
        this.registrationDefinitionId = Objects.requireNonNull(registrationDefinitionId, "expected parameter 'registrationDefinitionId' to be non-null");
    }

    private RegistrationAssignmentPropertiesResponse() {
        this.provisioningState = null;
        this.registrationDefinition = null;
        this.registrationDefinitionId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistrationAssignmentPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String provisioningState;
        private RegistrationAssignmentPropertiesResponseRegistrationDefinition registrationDefinition;
        private String registrationDefinitionId;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistrationAssignmentPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.provisioningState = defaults.provisioningState;
    	      this.registrationDefinition = defaults.registrationDefinition;
    	      this.registrationDefinitionId = defaults.registrationDefinitionId;
        }

        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder registrationDefinition(RegistrationAssignmentPropertiesResponseRegistrationDefinition registrationDefinition) {
            this.registrationDefinition = Objects.requireNonNull(registrationDefinition);
            return this;
        }
        public Builder registrationDefinitionId(String registrationDefinitionId) {
            this.registrationDefinitionId = Objects.requireNonNull(registrationDefinitionId);
            return this;
        }        public RegistrationAssignmentPropertiesResponse build() {
            return new RegistrationAssignmentPropertiesResponse(provisioningState, registrationDefinition, registrationDefinitionId);
        }
    }
}
