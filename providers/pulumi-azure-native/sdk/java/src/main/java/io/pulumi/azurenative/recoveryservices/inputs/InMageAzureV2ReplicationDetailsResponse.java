// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.inputs;

import io.pulumi.azurenative.recoveryservices.inputs.AzureVmDiskDetailsResponse;
import io.pulumi.azurenative.recoveryservices.inputs.HealthErrorResponse;
import io.pulumi.azurenative.recoveryservices.inputs.InMageAzureV2ManagedDiskDetailsResponse;
import io.pulumi.azurenative.recoveryservices.inputs.InMageAzureV2ProtectedDiskDetailsResponse;
import io.pulumi.azurenative.recoveryservices.inputs.VMNicDetailsResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * InMageAzureV2 provider specific settings
 * 
 */
public final class InMageAzureV2ReplicationDetailsResponse extends io.pulumi.resources.InvokeArgs {

    public static final InMageAzureV2ReplicationDetailsResponse Empty = new InMageAzureV2ReplicationDetailsResponse();

    /**
     * Agent expiry date.
     * 
     */
    @Import(name="agentExpiryDate")
      private final @Nullable String agentExpiryDate;

    public Optional<String> getAgentExpiryDate() {
        return this.agentExpiryDate == null ? Optional.empty() : Optional.ofNullable(this.agentExpiryDate);
    }

    /**
     * The agent version.
     * 
     */
    @Import(name="agentVersion")
      private final @Nullable String agentVersion;

    public Optional<String> getAgentVersion() {
        return this.agentVersion == null ? Optional.empty() : Optional.ofNullable(this.agentVersion);
    }

    /**
     * Azure VM Disk details.
     * 
     */
    @Import(name="azureVMDiskDetails")
      private final @Nullable List<AzureVmDiskDetailsResponse> azureVMDiskDetails;

    public List<AzureVmDiskDetailsResponse> getAzureVMDiskDetails() {
        return this.azureVMDiskDetails == null ? List.of() : this.azureVMDiskDetails;
    }

    /**
     * The compressed data change rate in MB.
     * 
     */
    @Import(name="compressedDataRateInMB")
      private final @Nullable Double compressedDataRateInMB;

    public Optional<Double> getCompressedDataRateInMB() {
        return this.compressedDataRateInMB == null ? Optional.empty() : Optional.ofNullable(this.compressedDataRateInMB);
    }

    /**
     * The data stores of the on-premise machine. Value can be list of strings that contain data store names.
     * 
     */
    @Import(name="datastores")
      private final @Nullable List<String> datastores;

    public List<String> getDatastores() {
        return this.datastores == null ? List.of() : this.datastores;
    }

    /**
     * A value indicating the discovery type of the machine. Value can be vCenter or physical.
     * 
     */
    @Import(name="discoveryType")
      private final @Nullable String discoveryType;

    public Optional<String> getDiscoveryType() {
        return this.discoveryType == null ? Optional.empty() : Optional.ofNullable(this.discoveryType);
    }

    /**
     * A value indicating whether any disk is resized for this VM.
     * 
     */
    @Import(name="diskResized")
      private final @Nullable String diskResized;

    public Optional<String> getDiskResized() {
        return this.diskResized == null ? Optional.empty() : Optional.ofNullable(this.diskResized);
    }

    /**
     * The selected option to enable RDP\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.
     * 
     */
    @Import(name="enableRdpOnTargetOption")
      private final @Nullable String enableRdpOnTargetOption;

    public Optional<String> getEnableRdpOnTargetOption() {
        return this.enableRdpOnTargetOption == null ? Optional.empty() : Optional.ofNullable(this.enableRdpOnTargetOption);
    }

    /**
     * The infrastructure VM Id.
     * 
     */
    @Import(name="infrastructureVmId")
      private final @Nullable String infrastructureVmId;

    public Optional<String> getInfrastructureVmId() {
        return this.infrastructureVmId == null ? Optional.empty() : Optional.ofNullable(this.infrastructureVmId);
    }

    /**
     * Gets the Instance type.
     * Expected value is 'InMageAzureV2'.
     * 
     */
    @Import(name="instanceType", required=true)
      private final String instanceType;

    public String getInstanceType() {
        return this.instanceType;
    }

    /**
     * The source IP address.
     * 
     */
    @Import(name="ipAddress")
      private final @Nullable String ipAddress;

    public Optional<String> getIpAddress() {
        return this.ipAddress == null ? Optional.empty() : Optional.ofNullable(this.ipAddress);
    }

    /**
     * A value indicating whether installed agent needs to be updated.
     * 
     */
    @Import(name="isAgentUpdateRequired")
      private final @Nullable String isAgentUpdateRequired;

    public Optional<String> getIsAgentUpdateRequired() {
        return this.isAgentUpdateRequired == null ? Optional.empty() : Optional.ofNullable(this.isAgentUpdateRequired);
    }

    /**
     * A value indicating whether the source server requires a restart after update.
     * 
     */
    @Import(name="isRebootAfterUpdateRequired")
      private final @Nullable String isRebootAfterUpdateRequired;

    public Optional<String> getIsRebootAfterUpdateRequired() {
        return this.isRebootAfterUpdateRequired == null ? Optional.empty() : Optional.ofNullable(this.isRebootAfterUpdateRequired);
    }

    /**
     * The last heartbeat received from the source server.
     * 
     */
    @Import(name="lastHeartbeat")
      private final @Nullable String lastHeartbeat;

    public Optional<String> getLastHeartbeat() {
        return this.lastHeartbeat == null ? Optional.empty() : Optional.ofNullable(this.lastHeartbeat);
    }

    /**
     * The last RPO calculated time.
     * 
     */
    @Import(name="lastRpoCalculatedTime")
      private final @Nullable String lastRpoCalculatedTime;

    public Optional<String> getLastRpoCalculatedTime() {
        return this.lastRpoCalculatedTime == null ? Optional.empty() : Optional.ofNullable(this.lastRpoCalculatedTime);
    }

    /**
     * The last update time received from on-prem components.
     * 
     */
    @Import(name="lastUpdateReceivedTime")
      private final @Nullable String lastUpdateReceivedTime;

    public Optional<String> getLastUpdateReceivedTime() {
        return this.lastUpdateReceivedTime == null ? Optional.empty() : Optional.ofNullable(this.lastUpdateReceivedTime);
    }

    /**
     * License Type of the VM to be used.
     * 
     */
    @Import(name="licenseType")
      private final @Nullable String licenseType;

    public Optional<String> getLicenseType() {
        return this.licenseType == null ? Optional.empty() : Optional.ofNullable(this.licenseType);
    }

    /**
     * The master target Id.
     * 
     */
    @Import(name="masterTargetId")
      private final @Nullable String masterTargetId;

    public Optional<String> getMasterTargetId() {
        return this.masterTargetId == null ? Optional.empty() : Optional.ofNullable(this.masterTargetId);
    }

    /**
     * The multi vm group Id.
     * 
     */
    @Import(name="multiVmGroupId")
      private final @Nullable String multiVmGroupId;

    public Optional<String> getMultiVmGroupId() {
        return this.multiVmGroupId == null ? Optional.empty() : Optional.ofNullable(this.multiVmGroupId);
    }

    /**
     * The multi vm group name.
     * 
     */
    @Import(name="multiVmGroupName")
      private final @Nullable String multiVmGroupName;

    public Optional<String> getMultiVmGroupName() {
        return this.multiVmGroupName == null ? Optional.empty() : Optional.ofNullable(this.multiVmGroupName);
    }

    /**
     * A value indicating whether multi vm sync is enabled or disabled.
     * 
     */
    @Import(name="multiVmSyncStatus")
      private final @Nullable String multiVmSyncStatus;

    public Optional<String> getMultiVmSyncStatus() {
        return this.multiVmSyncStatus == null ? Optional.empty() : Optional.ofNullable(this.multiVmSyncStatus);
    }

    /**
     * The id of the disk containing the OS.
     * 
     */
    @Import(name="osDiskId")
      private final @Nullable String osDiskId;

    public Optional<String> getOsDiskId() {
        return this.osDiskId == null ? Optional.empty() : Optional.ofNullable(this.osDiskId);
    }

    /**
     * The type of the OS on the VM.
     * 
     */
    @Import(name="osType")
      private final @Nullable String osType;

    public Optional<String> getOsType() {
        return this.osType == null ? Optional.empty() : Optional.ofNullable(this.osType);
    }

    /**
     * The OS Version of the protected item.
     * 
     */
    @Import(name="osVersion")
      private final @Nullable String osVersion;

    public Optional<String> getOsVersion() {
        return this.osVersion == null ? Optional.empty() : Optional.ofNullable(this.osVersion);
    }

    /**
     * The process server Id.
     * 
     */
    @Import(name="processServerId")
      private final @Nullable String processServerId;

    public Optional<String> getProcessServerId() {
        return this.processServerId == null ? Optional.empty() : Optional.ofNullable(this.processServerId);
    }

    /**
     * The process server name.
     * 
     */
    @Import(name="processServerName", required=true)
      private final String processServerName;

    public String getProcessServerName() {
        return this.processServerName;
    }

    /**
     * The list of protected disks.
     * 
     */
    @Import(name="protectedDisks")
      private final @Nullable List<InMageAzureV2ProtectedDiskDetailsResponse> protectedDisks;

    public List<InMageAzureV2ProtectedDiskDetailsResponse> getProtectedDisks() {
        return this.protectedDisks == null ? List.of() : this.protectedDisks;
    }

    /**
     * The list of protected managed disks.
     * 
     */
    @Import(name="protectedManagedDisks")
      private final @Nullable List<InMageAzureV2ManagedDiskDetailsResponse> protectedManagedDisks;

    public List<InMageAzureV2ManagedDiskDetailsResponse> getProtectedManagedDisks() {
        return this.protectedManagedDisks == null ? List.of() : this.protectedManagedDisks;
    }

    /**
     * The protection stage.
     * 
     */
    @Import(name="protectionStage")
      private final @Nullable String protectionStage;

    public Optional<String> getProtectionStage() {
        return this.protectionStage == null ? Optional.empty() : Optional.ofNullable(this.protectionStage);
    }

    /**
     * The recovery availability set Id.
     * 
     */
    @Import(name="recoveryAvailabilitySetId")
      private final @Nullable String recoveryAvailabilitySetId;

    public Optional<String> getRecoveryAvailabilitySetId() {
        return this.recoveryAvailabilitySetId == null ? Optional.empty() : Optional.ofNullable(this.recoveryAvailabilitySetId);
    }

    /**
     * The ARM id of the log storage account used for replication. This will be set to null if no log storage account was provided during enable protection.
     * 
     */
    @Import(name="recoveryAzureLogStorageAccountId")
      private final @Nullable String recoveryAzureLogStorageAccountId;

    public Optional<String> getRecoveryAzureLogStorageAccountId() {
        return this.recoveryAzureLogStorageAccountId == null ? Optional.empty() : Optional.ofNullable(this.recoveryAzureLogStorageAccountId);
    }

    /**
     * The target resource group Id.
     * 
     */
    @Import(name="recoveryAzureResourceGroupId")
      private final @Nullable String recoveryAzureResourceGroupId;

    public Optional<String> getRecoveryAzureResourceGroupId() {
        return this.recoveryAzureResourceGroupId == null ? Optional.empty() : Optional.ofNullable(this.recoveryAzureResourceGroupId);
    }

    /**
     * The recovery Azure storage account.
     * 
     */
    @Import(name="recoveryAzureStorageAccount")
      private final @Nullable String recoveryAzureStorageAccount;

    public Optional<String> getRecoveryAzureStorageAccount() {
        return this.recoveryAzureStorageAccount == null ? Optional.empty() : Optional.ofNullable(this.recoveryAzureStorageAccount);
    }

    /**
     * Recovery Azure given name.
     * 
     */
    @Import(name="recoveryAzureVMName")
      private final @Nullable String recoveryAzureVMName;

    public Optional<String> getRecoveryAzureVMName() {
        return this.recoveryAzureVMName == null ? Optional.empty() : Optional.ofNullable(this.recoveryAzureVMName);
    }

    /**
     * The Recovery Azure VM size.
     * 
     */
    @Import(name="recoveryAzureVMSize")
      private final @Nullable String recoveryAzureVMSize;

    public Optional<String> getRecoveryAzureVMSize() {
        return this.recoveryAzureVMSize == null ? Optional.empty() : Optional.ofNullable(this.recoveryAzureVMSize);
    }

    /**
     * The replica id of the protected item.
     * 
     */
    @Import(name="replicaId")
      private final @Nullable String replicaId;

    public Optional<String> getReplicaId() {
        return this.replicaId == null ? Optional.empty() : Optional.ofNullable(this.replicaId);
    }

    /**
     * The resync progress percentage.
     * 
     */
    @Import(name="resyncProgressPercentage")
      private final @Nullable Integer resyncProgressPercentage;

    public Optional<Integer> getResyncProgressPercentage() {
        return this.resyncProgressPercentage == null ? Optional.empty() : Optional.ofNullable(this.resyncProgressPercentage);
    }

    /**
     * The RPO in seconds.
     * 
     */
    @Import(name="rpoInSeconds")
      private final @Nullable Double rpoInSeconds;

    public Optional<Double> getRpoInSeconds() {
        return this.rpoInSeconds == null ? Optional.empty() : Optional.ofNullable(this.rpoInSeconds);
    }

    /**
     * The selected recovery azure network Id.
     * 
     */
    @Import(name="selectedRecoveryAzureNetworkId")
      private final @Nullable String selectedRecoveryAzureNetworkId;

    public Optional<String> getSelectedRecoveryAzureNetworkId() {
        return this.selectedRecoveryAzureNetworkId == null ? Optional.empty() : Optional.ofNullable(this.selectedRecoveryAzureNetworkId);
    }

    /**
     * The selected source nic Id which will be used as the primary nic during failover.
     * 
     */
    @Import(name="selectedSourceNicId")
      private final @Nullable String selectedSourceNicId;

    public Optional<String> getSelectedSourceNicId() {
        return this.selectedSourceNicId == null ? Optional.empty() : Optional.ofNullable(this.selectedSourceNicId);
    }

    /**
     * The test failover virtual network.
     * 
     */
    @Import(name="selectedTfoAzureNetworkId")
      private final @Nullable String selectedTfoAzureNetworkId;

    public Optional<String> getSelectedTfoAzureNetworkId() {
        return this.selectedTfoAzureNetworkId == null ? Optional.empty() : Optional.ofNullable(this.selectedTfoAzureNetworkId);
    }

    /**
     * The CPU count of the VM on the primary side.
     * 
     */
    @Import(name="sourceVmCpuCount")
      private final @Nullable Integer sourceVmCpuCount;

    public Optional<Integer> getSourceVmCpuCount() {
        return this.sourceVmCpuCount == null ? Optional.empty() : Optional.ofNullable(this.sourceVmCpuCount);
    }

    /**
     * The RAM size of the VM on the primary side.
     * 
     */
    @Import(name="sourceVmRamSizeInMB")
      private final @Nullable Integer sourceVmRamSizeInMB;

    public Optional<Integer> getSourceVmRamSizeInMB() {
        return this.sourceVmRamSizeInMB == null ? Optional.empty() : Optional.ofNullable(this.sourceVmRamSizeInMB);
    }

    /**
     * The target availability zone.
     * 
     */
    @Import(name="targetAvailabilityZone")
      private final @Nullable String targetAvailabilityZone;

    public Optional<String> getTargetAvailabilityZone() {
        return this.targetAvailabilityZone == null ? Optional.empty() : Optional.ofNullable(this.targetAvailabilityZone);
    }

    /**
     * The target proximity placement group Id.
     * 
     */
    @Import(name="targetProximityPlacementGroupId")
      private final @Nullable String targetProximityPlacementGroupId;

    public Optional<String> getTargetProximityPlacementGroupId() {
        return this.targetProximityPlacementGroupId == null ? Optional.empty() : Optional.ofNullable(this.targetProximityPlacementGroupId);
    }

    /**
     * The ARM Id of the target Azure VM. This value will be null until the VM is failed over. Only after failure it will be populated with the ARM Id of the Azure VM.
     * 
     */
    @Import(name="targetVmId")
      private final @Nullable String targetVmId;

    public Optional<String> getTargetVmId() {
        return this.targetVmId == null ? Optional.empty() : Optional.ofNullable(this.targetVmId);
    }

    /**
     * The uncompressed data change rate in MB.
     * 
     */
    @Import(name="uncompressedDataRateInMB")
      private final @Nullable Double uncompressedDataRateInMB;

    public Optional<Double> getUncompressedDataRateInMB() {
        return this.uncompressedDataRateInMB == null ? Optional.empty() : Optional.ofNullable(this.uncompressedDataRateInMB);
    }

    /**
     * A value indicating whether managed disks should be used during failover.
     * 
     */
    @Import(name="useManagedDisks")
      private final @Nullable String useManagedDisks;

    public Optional<String> getUseManagedDisks() {
        return this.useManagedDisks == null ? Optional.empty() : Optional.ofNullable(this.useManagedDisks);
    }

    /**
     * The vCenter infrastructure Id.
     * 
     */
    @Import(name="vCenterInfrastructureId")
      private final @Nullable String vCenterInfrastructureId;

    public Optional<String> getVCenterInfrastructureId() {
        return this.vCenterInfrastructureId == null ? Optional.empty() : Optional.ofNullable(this.vCenterInfrastructureId);
    }

    /**
     * The validation errors of the on-premise machine Value can be list of validation errors.
     * 
     */
    @Import(name="validationErrors")
      private final @Nullable List<HealthErrorResponse> validationErrors;

    public List<HealthErrorResponse> getValidationErrors() {
        return this.validationErrors == null ? List.of() : this.validationErrors;
    }

    /**
     * The OS disk VHD name.
     * 
     */
    @Import(name="vhdName")
      private final @Nullable String vhdName;

    public Optional<String> getVhdName() {
        return this.vhdName == null ? Optional.empty() : Optional.ofNullable(this.vhdName);
    }

    /**
     * The virtual machine Id.
     * 
     */
    @Import(name="vmId")
      private final @Nullable String vmId;

    public Optional<String> getVmId() {
        return this.vmId == null ? Optional.empty() : Optional.ofNullable(this.vmId);
    }

    /**
     * The PE Network details.
     * 
     */
    @Import(name="vmNics")
      private final @Nullable List<VMNicDetailsResponse> vmNics;

    public List<VMNicDetailsResponse> getVmNics() {
        return this.vmNics == null ? List.of() : this.vmNics;
    }

    /**
     * The protection state for the vm.
     * 
     */
    @Import(name="vmProtectionState")
      private final @Nullable String vmProtectionState;

    public Optional<String> getVmProtectionState() {
        return this.vmProtectionState == null ? Optional.empty() : Optional.ofNullable(this.vmProtectionState);
    }

    /**
     * The protection state description for the vm.
     * 
     */
    @Import(name="vmProtectionStateDescription")
      private final @Nullable String vmProtectionStateDescription;

    public Optional<String> getVmProtectionStateDescription() {
        return this.vmProtectionStateDescription == null ? Optional.empty() : Optional.ofNullable(this.vmProtectionStateDescription);
    }

    public InMageAzureV2ReplicationDetailsResponse(
        @Nullable String agentExpiryDate,
        @Nullable String agentVersion,
        @Nullable List<AzureVmDiskDetailsResponse> azureVMDiskDetails,
        @Nullable Double compressedDataRateInMB,
        @Nullable List<String> datastores,
        @Nullable String discoveryType,
        @Nullable String diskResized,
        @Nullable String enableRdpOnTargetOption,
        @Nullable String infrastructureVmId,
        String instanceType,
        @Nullable String ipAddress,
        @Nullable String isAgentUpdateRequired,
        @Nullable String isRebootAfterUpdateRequired,
        @Nullable String lastHeartbeat,
        @Nullable String lastRpoCalculatedTime,
        @Nullable String lastUpdateReceivedTime,
        @Nullable String licenseType,
        @Nullable String masterTargetId,
        @Nullable String multiVmGroupId,
        @Nullable String multiVmGroupName,
        @Nullable String multiVmSyncStatus,
        @Nullable String osDiskId,
        @Nullable String osType,
        @Nullable String osVersion,
        @Nullable String processServerId,
        String processServerName,
        @Nullable List<InMageAzureV2ProtectedDiskDetailsResponse> protectedDisks,
        @Nullable List<InMageAzureV2ManagedDiskDetailsResponse> protectedManagedDisks,
        @Nullable String protectionStage,
        @Nullable String recoveryAvailabilitySetId,
        @Nullable String recoveryAzureLogStorageAccountId,
        @Nullable String recoveryAzureResourceGroupId,
        @Nullable String recoveryAzureStorageAccount,
        @Nullable String recoveryAzureVMName,
        @Nullable String recoveryAzureVMSize,
        @Nullable String replicaId,
        @Nullable Integer resyncProgressPercentage,
        @Nullable Double rpoInSeconds,
        @Nullable String selectedRecoveryAzureNetworkId,
        @Nullable String selectedSourceNicId,
        @Nullable String selectedTfoAzureNetworkId,
        @Nullable Integer sourceVmCpuCount,
        @Nullable Integer sourceVmRamSizeInMB,
        @Nullable String targetAvailabilityZone,
        @Nullable String targetProximityPlacementGroupId,
        @Nullable String targetVmId,
        @Nullable Double uncompressedDataRateInMB,
        @Nullable String useManagedDisks,
        @Nullable String vCenterInfrastructureId,
        @Nullable List<HealthErrorResponse> validationErrors,
        @Nullable String vhdName,
        @Nullable String vmId,
        @Nullable List<VMNicDetailsResponse> vmNics,
        @Nullable String vmProtectionState,
        @Nullable String vmProtectionStateDescription) {
        this.agentExpiryDate = agentExpiryDate;
        this.agentVersion = agentVersion;
        this.azureVMDiskDetails = azureVMDiskDetails;
        this.compressedDataRateInMB = compressedDataRateInMB;
        this.datastores = datastores;
        this.discoveryType = discoveryType;
        this.diskResized = diskResized;
        this.enableRdpOnTargetOption = enableRdpOnTargetOption;
        this.infrastructureVmId = infrastructureVmId;
        this.instanceType = Objects.requireNonNull(instanceType, "expected parameter 'instanceType' to be non-null");
        this.ipAddress = ipAddress;
        this.isAgentUpdateRequired = isAgentUpdateRequired;
        this.isRebootAfterUpdateRequired = isRebootAfterUpdateRequired;
        this.lastHeartbeat = lastHeartbeat;
        this.lastRpoCalculatedTime = lastRpoCalculatedTime;
        this.lastUpdateReceivedTime = lastUpdateReceivedTime;
        this.licenseType = licenseType;
        this.masterTargetId = masterTargetId;
        this.multiVmGroupId = multiVmGroupId;
        this.multiVmGroupName = multiVmGroupName;
        this.multiVmSyncStatus = multiVmSyncStatus;
        this.osDiskId = osDiskId;
        this.osType = osType;
        this.osVersion = osVersion;
        this.processServerId = processServerId;
        this.processServerName = Objects.requireNonNull(processServerName, "expected parameter 'processServerName' to be non-null");
        this.protectedDisks = protectedDisks;
        this.protectedManagedDisks = protectedManagedDisks;
        this.protectionStage = protectionStage;
        this.recoveryAvailabilitySetId = recoveryAvailabilitySetId;
        this.recoveryAzureLogStorageAccountId = recoveryAzureLogStorageAccountId;
        this.recoveryAzureResourceGroupId = recoveryAzureResourceGroupId;
        this.recoveryAzureStorageAccount = recoveryAzureStorageAccount;
        this.recoveryAzureVMName = recoveryAzureVMName;
        this.recoveryAzureVMSize = recoveryAzureVMSize;
        this.replicaId = replicaId;
        this.resyncProgressPercentage = resyncProgressPercentage;
        this.rpoInSeconds = rpoInSeconds;
        this.selectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkId;
        this.selectedSourceNicId = selectedSourceNicId;
        this.selectedTfoAzureNetworkId = selectedTfoAzureNetworkId;
        this.sourceVmCpuCount = sourceVmCpuCount;
        this.sourceVmRamSizeInMB = sourceVmRamSizeInMB;
        this.targetAvailabilityZone = targetAvailabilityZone;
        this.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
        this.targetVmId = targetVmId;
        this.uncompressedDataRateInMB = uncompressedDataRateInMB;
        this.useManagedDisks = useManagedDisks;
        this.vCenterInfrastructureId = vCenterInfrastructureId;
        this.validationErrors = validationErrors;
        this.vhdName = vhdName;
        this.vmId = vmId;
        this.vmNics = vmNics;
        this.vmProtectionState = vmProtectionState;
        this.vmProtectionStateDescription = vmProtectionStateDescription;
    }

    private InMageAzureV2ReplicationDetailsResponse() {
        this.agentExpiryDate = null;
        this.agentVersion = null;
        this.azureVMDiskDetails = List.of();
        this.compressedDataRateInMB = null;
        this.datastores = List.of();
        this.discoveryType = null;
        this.diskResized = null;
        this.enableRdpOnTargetOption = null;
        this.infrastructureVmId = null;
        this.instanceType = null;
        this.ipAddress = null;
        this.isAgentUpdateRequired = null;
        this.isRebootAfterUpdateRequired = null;
        this.lastHeartbeat = null;
        this.lastRpoCalculatedTime = null;
        this.lastUpdateReceivedTime = null;
        this.licenseType = null;
        this.masterTargetId = null;
        this.multiVmGroupId = null;
        this.multiVmGroupName = null;
        this.multiVmSyncStatus = null;
        this.osDiskId = null;
        this.osType = null;
        this.osVersion = null;
        this.processServerId = null;
        this.processServerName = null;
        this.protectedDisks = List.of();
        this.protectedManagedDisks = List.of();
        this.protectionStage = null;
        this.recoveryAvailabilitySetId = null;
        this.recoveryAzureLogStorageAccountId = null;
        this.recoveryAzureResourceGroupId = null;
        this.recoveryAzureStorageAccount = null;
        this.recoveryAzureVMName = null;
        this.recoveryAzureVMSize = null;
        this.replicaId = null;
        this.resyncProgressPercentage = null;
        this.rpoInSeconds = null;
        this.selectedRecoveryAzureNetworkId = null;
        this.selectedSourceNicId = null;
        this.selectedTfoAzureNetworkId = null;
        this.sourceVmCpuCount = null;
        this.sourceVmRamSizeInMB = null;
        this.targetAvailabilityZone = null;
        this.targetProximityPlacementGroupId = null;
        this.targetVmId = null;
        this.uncompressedDataRateInMB = null;
        this.useManagedDisks = null;
        this.vCenterInfrastructureId = null;
        this.validationErrors = List.of();
        this.vhdName = null;
        this.vmId = null;
        this.vmNics = List.of();
        this.vmProtectionState = null;
        this.vmProtectionStateDescription = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InMageAzureV2ReplicationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String agentExpiryDate;
        private @Nullable String agentVersion;
        private @Nullable List<AzureVmDiskDetailsResponse> azureVMDiskDetails;
        private @Nullable Double compressedDataRateInMB;
        private @Nullable List<String> datastores;
        private @Nullable String discoveryType;
        private @Nullable String diskResized;
        private @Nullable String enableRdpOnTargetOption;
        private @Nullable String infrastructureVmId;
        private String instanceType;
        private @Nullable String ipAddress;
        private @Nullable String isAgentUpdateRequired;
        private @Nullable String isRebootAfterUpdateRequired;
        private @Nullable String lastHeartbeat;
        private @Nullable String lastRpoCalculatedTime;
        private @Nullable String lastUpdateReceivedTime;
        private @Nullable String licenseType;
        private @Nullable String masterTargetId;
        private @Nullable String multiVmGroupId;
        private @Nullable String multiVmGroupName;
        private @Nullable String multiVmSyncStatus;
        private @Nullable String osDiskId;
        private @Nullable String osType;
        private @Nullable String osVersion;
        private @Nullable String processServerId;
        private String processServerName;
        private @Nullable List<InMageAzureV2ProtectedDiskDetailsResponse> protectedDisks;
        private @Nullable List<InMageAzureV2ManagedDiskDetailsResponse> protectedManagedDisks;
        private @Nullable String protectionStage;
        private @Nullable String recoveryAvailabilitySetId;
        private @Nullable String recoveryAzureLogStorageAccountId;
        private @Nullable String recoveryAzureResourceGroupId;
        private @Nullable String recoveryAzureStorageAccount;
        private @Nullable String recoveryAzureVMName;
        private @Nullable String recoveryAzureVMSize;
        private @Nullable String replicaId;
        private @Nullable Integer resyncProgressPercentage;
        private @Nullable Double rpoInSeconds;
        private @Nullable String selectedRecoveryAzureNetworkId;
        private @Nullable String selectedSourceNicId;
        private @Nullable String selectedTfoAzureNetworkId;
        private @Nullable Integer sourceVmCpuCount;
        private @Nullable Integer sourceVmRamSizeInMB;
        private @Nullable String targetAvailabilityZone;
        private @Nullable String targetProximityPlacementGroupId;
        private @Nullable String targetVmId;
        private @Nullable Double uncompressedDataRateInMB;
        private @Nullable String useManagedDisks;
        private @Nullable String vCenterInfrastructureId;
        private @Nullable List<HealthErrorResponse> validationErrors;
        private @Nullable String vhdName;
        private @Nullable String vmId;
        private @Nullable List<VMNicDetailsResponse> vmNics;
        private @Nullable String vmProtectionState;
        private @Nullable String vmProtectionStateDescription;

        public Builder() {
    	      // Empty
        }

        public Builder(InMageAzureV2ReplicationDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentExpiryDate = defaults.agentExpiryDate;
    	      this.agentVersion = defaults.agentVersion;
    	      this.azureVMDiskDetails = defaults.azureVMDiskDetails;
    	      this.compressedDataRateInMB = defaults.compressedDataRateInMB;
    	      this.datastores = defaults.datastores;
    	      this.discoveryType = defaults.discoveryType;
    	      this.diskResized = defaults.diskResized;
    	      this.enableRdpOnTargetOption = defaults.enableRdpOnTargetOption;
    	      this.infrastructureVmId = defaults.infrastructureVmId;
    	      this.instanceType = defaults.instanceType;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isAgentUpdateRequired = defaults.isAgentUpdateRequired;
    	      this.isRebootAfterUpdateRequired = defaults.isRebootAfterUpdateRequired;
    	      this.lastHeartbeat = defaults.lastHeartbeat;
    	      this.lastRpoCalculatedTime = defaults.lastRpoCalculatedTime;
    	      this.lastUpdateReceivedTime = defaults.lastUpdateReceivedTime;
    	      this.licenseType = defaults.licenseType;
    	      this.masterTargetId = defaults.masterTargetId;
    	      this.multiVmGroupId = defaults.multiVmGroupId;
    	      this.multiVmGroupName = defaults.multiVmGroupName;
    	      this.multiVmSyncStatus = defaults.multiVmSyncStatus;
    	      this.osDiskId = defaults.osDiskId;
    	      this.osType = defaults.osType;
    	      this.osVersion = defaults.osVersion;
    	      this.processServerId = defaults.processServerId;
    	      this.processServerName = defaults.processServerName;
    	      this.protectedDisks = defaults.protectedDisks;
    	      this.protectedManagedDisks = defaults.protectedManagedDisks;
    	      this.protectionStage = defaults.protectionStage;
    	      this.recoveryAvailabilitySetId = defaults.recoveryAvailabilitySetId;
    	      this.recoveryAzureLogStorageAccountId = defaults.recoveryAzureLogStorageAccountId;
    	      this.recoveryAzureResourceGroupId = defaults.recoveryAzureResourceGroupId;
    	      this.recoveryAzureStorageAccount = defaults.recoveryAzureStorageAccount;
    	      this.recoveryAzureVMName = defaults.recoveryAzureVMName;
    	      this.recoveryAzureVMSize = defaults.recoveryAzureVMSize;
    	      this.replicaId = defaults.replicaId;
    	      this.resyncProgressPercentage = defaults.resyncProgressPercentage;
    	      this.rpoInSeconds = defaults.rpoInSeconds;
    	      this.selectedRecoveryAzureNetworkId = defaults.selectedRecoveryAzureNetworkId;
    	      this.selectedSourceNicId = defaults.selectedSourceNicId;
    	      this.selectedTfoAzureNetworkId = defaults.selectedTfoAzureNetworkId;
    	      this.sourceVmCpuCount = defaults.sourceVmCpuCount;
    	      this.sourceVmRamSizeInMB = defaults.sourceVmRamSizeInMB;
    	      this.targetAvailabilityZone = defaults.targetAvailabilityZone;
    	      this.targetProximityPlacementGroupId = defaults.targetProximityPlacementGroupId;
    	      this.targetVmId = defaults.targetVmId;
    	      this.uncompressedDataRateInMB = defaults.uncompressedDataRateInMB;
    	      this.useManagedDisks = defaults.useManagedDisks;
    	      this.vCenterInfrastructureId = defaults.vCenterInfrastructureId;
    	      this.validationErrors = defaults.validationErrors;
    	      this.vhdName = defaults.vhdName;
    	      this.vmId = defaults.vmId;
    	      this.vmNics = defaults.vmNics;
    	      this.vmProtectionState = defaults.vmProtectionState;
    	      this.vmProtectionStateDescription = defaults.vmProtectionStateDescription;
        }

        public Builder agentExpiryDate(@Nullable String agentExpiryDate) {
            this.agentExpiryDate = agentExpiryDate;
            return this;
        }
        public Builder agentVersion(@Nullable String agentVersion) {
            this.agentVersion = agentVersion;
            return this;
        }
        public Builder azureVMDiskDetails(@Nullable List<AzureVmDiskDetailsResponse> azureVMDiskDetails) {
            this.azureVMDiskDetails = azureVMDiskDetails;
            return this;
        }
        public Builder azureVMDiskDetails(AzureVmDiskDetailsResponse... azureVMDiskDetails) {
            return azureVMDiskDetails(List.of(azureVMDiskDetails));
        }
        public Builder compressedDataRateInMB(@Nullable Double compressedDataRateInMB) {
            this.compressedDataRateInMB = compressedDataRateInMB;
            return this;
        }
        public Builder datastores(@Nullable List<String> datastores) {
            this.datastores = datastores;
            return this;
        }
        public Builder datastores(String... datastores) {
            return datastores(List.of(datastores));
        }
        public Builder discoveryType(@Nullable String discoveryType) {
            this.discoveryType = discoveryType;
            return this;
        }
        public Builder diskResized(@Nullable String diskResized) {
            this.diskResized = diskResized;
            return this;
        }
        public Builder enableRdpOnTargetOption(@Nullable String enableRdpOnTargetOption) {
            this.enableRdpOnTargetOption = enableRdpOnTargetOption;
            return this;
        }
        public Builder infrastructureVmId(@Nullable String infrastructureVmId) {
            this.infrastructureVmId = infrastructureVmId;
            return this;
        }
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        public Builder isAgentUpdateRequired(@Nullable String isAgentUpdateRequired) {
            this.isAgentUpdateRequired = isAgentUpdateRequired;
            return this;
        }
        public Builder isRebootAfterUpdateRequired(@Nullable String isRebootAfterUpdateRequired) {
            this.isRebootAfterUpdateRequired = isRebootAfterUpdateRequired;
            return this;
        }
        public Builder lastHeartbeat(@Nullable String lastHeartbeat) {
            this.lastHeartbeat = lastHeartbeat;
            return this;
        }
        public Builder lastRpoCalculatedTime(@Nullable String lastRpoCalculatedTime) {
            this.lastRpoCalculatedTime = lastRpoCalculatedTime;
            return this;
        }
        public Builder lastUpdateReceivedTime(@Nullable String lastUpdateReceivedTime) {
            this.lastUpdateReceivedTime = lastUpdateReceivedTime;
            return this;
        }
        public Builder licenseType(@Nullable String licenseType) {
            this.licenseType = licenseType;
            return this;
        }
        public Builder masterTargetId(@Nullable String masterTargetId) {
            this.masterTargetId = masterTargetId;
            return this;
        }
        public Builder multiVmGroupId(@Nullable String multiVmGroupId) {
            this.multiVmGroupId = multiVmGroupId;
            return this;
        }
        public Builder multiVmGroupName(@Nullable String multiVmGroupName) {
            this.multiVmGroupName = multiVmGroupName;
            return this;
        }
        public Builder multiVmSyncStatus(@Nullable String multiVmSyncStatus) {
            this.multiVmSyncStatus = multiVmSyncStatus;
            return this;
        }
        public Builder osDiskId(@Nullable String osDiskId) {
            this.osDiskId = osDiskId;
            return this;
        }
        public Builder osType(@Nullable String osType) {
            this.osType = osType;
            return this;
        }
        public Builder osVersion(@Nullable String osVersion) {
            this.osVersion = osVersion;
            return this;
        }
        public Builder processServerId(@Nullable String processServerId) {
            this.processServerId = processServerId;
            return this;
        }
        public Builder processServerName(String processServerName) {
            this.processServerName = Objects.requireNonNull(processServerName);
            return this;
        }
        public Builder protectedDisks(@Nullable List<InMageAzureV2ProtectedDiskDetailsResponse> protectedDisks) {
            this.protectedDisks = protectedDisks;
            return this;
        }
        public Builder protectedDisks(InMageAzureV2ProtectedDiskDetailsResponse... protectedDisks) {
            return protectedDisks(List.of(protectedDisks));
        }
        public Builder protectedManagedDisks(@Nullable List<InMageAzureV2ManagedDiskDetailsResponse> protectedManagedDisks) {
            this.protectedManagedDisks = protectedManagedDisks;
            return this;
        }
        public Builder protectedManagedDisks(InMageAzureV2ManagedDiskDetailsResponse... protectedManagedDisks) {
            return protectedManagedDisks(List.of(protectedManagedDisks));
        }
        public Builder protectionStage(@Nullable String protectionStage) {
            this.protectionStage = protectionStage;
            return this;
        }
        public Builder recoveryAvailabilitySetId(@Nullable String recoveryAvailabilitySetId) {
            this.recoveryAvailabilitySetId = recoveryAvailabilitySetId;
            return this;
        }
        public Builder recoveryAzureLogStorageAccountId(@Nullable String recoveryAzureLogStorageAccountId) {
            this.recoveryAzureLogStorageAccountId = recoveryAzureLogStorageAccountId;
            return this;
        }
        public Builder recoveryAzureResourceGroupId(@Nullable String recoveryAzureResourceGroupId) {
            this.recoveryAzureResourceGroupId = recoveryAzureResourceGroupId;
            return this;
        }
        public Builder recoveryAzureStorageAccount(@Nullable String recoveryAzureStorageAccount) {
            this.recoveryAzureStorageAccount = recoveryAzureStorageAccount;
            return this;
        }
        public Builder recoveryAzureVMName(@Nullable String recoveryAzureVMName) {
            this.recoveryAzureVMName = recoveryAzureVMName;
            return this;
        }
        public Builder recoveryAzureVMSize(@Nullable String recoveryAzureVMSize) {
            this.recoveryAzureVMSize = recoveryAzureVMSize;
            return this;
        }
        public Builder replicaId(@Nullable String replicaId) {
            this.replicaId = replicaId;
            return this;
        }
        public Builder resyncProgressPercentage(@Nullable Integer resyncProgressPercentage) {
            this.resyncProgressPercentage = resyncProgressPercentage;
            return this;
        }
        public Builder rpoInSeconds(@Nullable Double rpoInSeconds) {
            this.rpoInSeconds = rpoInSeconds;
            return this;
        }
        public Builder selectedRecoveryAzureNetworkId(@Nullable String selectedRecoveryAzureNetworkId) {
            this.selectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkId;
            return this;
        }
        public Builder selectedSourceNicId(@Nullable String selectedSourceNicId) {
            this.selectedSourceNicId = selectedSourceNicId;
            return this;
        }
        public Builder selectedTfoAzureNetworkId(@Nullable String selectedTfoAzureNetworkId) {
            this.selectedTfoAzureNetworkId = selectedTfoAzureNetworkId;
            return this;
        }
        public Builder sourceVmCpuCount(@Nullable Integer sourceVmCpuCount) {
            this.sourceVmCpuCount = sourceVmCpuCount;
            return this;
        }
        public Builder sourceVmRamSizeInMB(@Nullable Integer sourceVmRamSizeInMB) {
            this.sourceVmRamSizeInMB = sourceVmRamSizeInMB;
            return this;
        }
        public Builder targetAvailabilityZone(@Nullable String targetAvailabilityZone) {
            this.targetAvailabilityZone = targetAvailabilityZone;
            return this;
        }
        public Builder targetProximityPlacementGroupId(@Nullable String targetProximityPlacementGroupId) {
            this.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
            return this;
        }
        public Builder targetVmId(@Nullable String targetVmId) {
            this.targetVmId = targetVmId;
            return this;
        }
        public Builder uncompressedDataRateInMB(@Nullable Double uncompressedDataRateInMB) {
            this.uncompressedDataRateInMB = uncompressedDataRateInMB;
            return this;
        }
        public Builder useManagedDisks(@Nullable String useManagedDisks) {
            this.useManagedDisks = useManagedDisks;
            return this;
        }
        public Builder vCenterInfrastructureId(@Nullable String vCenterInfrastructureId) {
            this.vCenterInfrastructureId = vCenterInfrastructureId;
            return this;
        }
        public Builder validationErrors(@Nullable List<HealthErrorResponse> validationErrors) {
            this.validationErrors = validationErrors;
            return this;
        }
        public Builder validationErrors(HealthErrorResponse... validationErrors) {
            return validationErrors(List.of(validationErrors));
        }
        public Builder vhdName(@Nullable String vhdName) {
            this.vhdName = vhdName;
            return this;
        }
        public Builder vmId(@Nullable String vmId) {
            this.vmId = vmId;
            return this;
        }
        public Builder vmNics(@Nullable List<VMNicDetailsResponse> vmNics) {
            this.vmNics = vmNics;
            return this;
        }
        public Builder vmNics(VMNicDetailsResponse... vmNics) {
            return vmNics(List.of(vmNics));
        }
        public Builder vmProtectionState(@Nullable String vmProtectionState) {
            this.vmProtectionState = vmProtectionState;
            return this;
        }
        public Builder vmProtectionStateDescription(@Nullable String vmProtectionStateDescription) {
            this.vmProtectionStateDescription = vmProtectionStateDescription;
            return this;
        }        public InMageAzureV2ReplicationDetailsResponse build() {
            return new InMageAzureV2ReplicationDetailsResponse(agentExpiryDate, agentVersion, azureVMDiskDetails, compressedDataRateInMB, datastores, discoveryType, diskResized, enableRdpOnTargetOption, infrastructureVmId, instanceType, ipAddress, isAgentUpdateRequired, isRebootAfterUpdateRequired, lastHeartbeat, lastRpoCalculatedTime, lastUpdateReceivedTime, licenseType, masterTargetId, multiVmGroupId, multiVmGroupName, multiVmSyncStatus, osDiskId, osType, osVersion, processServerId, processServerName, protectedDisks, protectedManagedDisks, protectionStage, recoveryAvailabilitySetId, recoveryAzureLogStorageAccountId, recoveryAzureResourceGroupId, recoveryAzureStorageAccount, recoveryAzureVMName, recoveryAzureVMSize, replicaId, resyncProgressPercentage, rpoInSeconds, selectedRecoveryAzureNetworkId, selectedSourceNicId, selectedTfoAzureNetworkId, sourceVmCpuCount, sourceVmRamSizeInMB, targetAvailabilityZone, targetProximityPlacementGroupId, targetVmId, uncompressedDataRateInMB, useManagedDisks, vCenterInfrastructureId, validationErrors, vhdName, vmId, vmNics, vmProtectionState, vmProtectionStateDescription);
        }
    }
}
