// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The Edifact agreement acknowledgement settings.
 * 
 */
public final class EdifactAcknowledgementSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final EdifactAcknowledgementSettingsArgs Empty = new EdifactAcknowledgementSettingsArgs();

    /**
     * The acknowledgement control number lower bound.
     * 
     */
    @Import(name="acknowledgementControlNumberLowerBound", required=true)
      private final Output<Integer> acknowledgementControlNumberLowerBound;

    public Output<Integer> getAcknowledgementControlNumberLowerBound() {
        return this.acknowledgementControlNumberLowerBound;
    }

    /**
     * The acknowledgement control number prefix.
     * 
     */
    @Import(name="acknowledgementControlNumberPrefix")
      private final @Nullable Output<String> acknowledgementControlNumberPrefix;

    public Output<String> getAcknowledgementControlNumberPrefix() {
        return this.acknowledgementControlNumberPrefix == null ? Output.empty() : this.acknowledgementControlNumberPrefix;
    }

    /**
     * The acknowledgement control number suffix.
     * 
     */
    @Import(name="acknowledgementControlNumberSuffix")
      private final @Nullable Output<String> acknowledgementControlNumberSuffix;

    public Output<String> getAcknowledgementControlNumberSuffix() {
        return this.acknowledgementControlNumberSuffix == null ? Output.empty() : this.acknowledgementControlNumberSuffix;
    }

    /**
     * The acknowledgement control number upper bound.
     * 
     */
    @Import(name="acknowledgementControlNumberUpperBound", required=true)
      private final Output<Integer> acknowledgementControlNumberUpperBound;

    public Output<Integer> getAcknowledgementControlNumberUpperBound() {
        return this.acknowledgementControlNumberUpperBound;
    }

    /**
     * The value indicating whether to batch functional acknowledgements.
     * 
     */
    @Import(name="batchFunctionalAcknowledgements", required=true)
      private final Output<Boolean> batchFunctionalAcknowledgements;

    public Output<Boolean> getBatchFunctionalAcknowledgements() {
        return this.batchFunctionalAcknowledgements;
    }

    /**
     * The value indicating whether to batch the technical acknowledgements.
     * 
     */
    @Import(name="batchTechnicalAcknowledgements", required=true)
      private final Output<Boolean> batchTechnicalAcknowledgements;

    public Output<Boolean> getBatchTechnicalAcknowledgements() {
        return this.batchTechnicalAcknowledgements;
    }

    /**
     * The value indicating whether functional acknowledgement is needed.
     * 
     */
    @Import(name="needFunctionalAcknowledgement", required=true)
      private final Output<Boolean> needFunctionalAcknowledgement;

    public Output<Boolean> getNeedFunctionalAcknowledgement() {
        return this.needFunctionalAcknowledgement;
    }

    /**
     * The value indicating whether a loop is needed for valid messages.
     * 
     */
    @Import(name="needLoopForValidMessages", required=true)
      private final Output<Boolean> needLoopForValidMessages;

    public Output<Boolean> getNeedLoopForValidMessages() {
        return this.needLoopForValidMessages;
    }

    /**
     * The value indicating whether technical acknowledgement is needed.
     * 
     */
    @Import(name="needTechnicalAcknowledgement", required=true)
      private final Output<Boolean> needTechnicalAcknowledgement;

    public Output<Boolean> getNeedTechnicalAcknowledgement() {
        return this.needTechnicalAcknowledgement;
    }

    /**
     * The value indicating whether to rollover acknowledgement control number.
     * 
     */
    @Import(name="rolloverAcknowledgementControlNumber", required=true)
      private final Output<Boolean> rolloverAcknowledgementControlNumber;

    public Output<Boolean> getRolloverAcknowledgementControlNumber() {
        return this.rolloverAcknowledgementControlNumber;
    }

    /**
     * The value indicating whether to send synchronous acknowledgement.
     * 
     */
    @Import(name="sendSynchronousAcknowledgement", required=true)
      private final Output<Boolean> sendSynchronousAcknowledgement;

    public Output<Boolean> getSendSynchronousAcknowledgement() {
        return this.sendSynchronousAcknowledgement;
    }

    public EdifactAcknowledgementSettingsArgs(
        Output<Integer> acknowledgementControlNumberLowerBound,
        @Nullable Output<String> acknowledgementControlNumberPrefix,
        @Nullable Output<String> acknowledgementControlNumberSuffix,
        Output<Integer> acknowledgementControlNumberUpperBound,
        Output<Boolean> batchFunctionalAcknowledgements,
        Output<Boolean> batchTechnicalAcknowledgements,
        Output<Boolean> needFunctionalAcknowledgement,
        Output<Boolean> needLoopForValidMessages,
        Output<Boolean> needTechnicalAcknowledgement,
        Output<Boolean> rolloverAcknowledgementControlNumber,
        Output<Boolean> sendSynchronousAcknowledgement) {
        this.acknowledgementControlNumberLowerBound = Objects.requireNonNull(acknowledgementControlNumberLowerBound, "expected parameter 'acknowledgementControlNumberLowerBound' to be non-null");
        this.acknowledgementControlNumberPrefix = acknowledgementControlNumberPrefix;
        this.acknowledgementControlNumberSuffix = acknowledgementControlNumberSuffix;
        this.acknowledgementControlNumberUpperBound = Objects.requireNonNull(acknowledgementControlNumberUpperBound, "expected parameter 'acknowledgementControlNumberUpperBound' to be non-null");
        this.batchFunctionalAcknowledgements = Objects.requireNonNull(batchFunctionalAcknowledgements, "expected parameter 'batchFunctionalAcknowledgements' to be non-null");
        this.batchTechnicalAcknowledgements = Objects.requireNonNull(batchTechnicalAcknowledgements, "expected parameter 'batchTechnicalAcknowledgements' to be non-null");
        this.needFunctionalAcknowledgement = Objects.requireNonNull(needFunctionalAcknowledgement, "expected parameter 'needFunctionalAcknowledgement' to be non-null");
        this.needLoopForValidMessages = Objects.requireNonNull(needLoopForValidMessages, "expected parameter 'needLoopForValidMessages' to be non-null");
        this.needTechnicalAcknowledgement = Objects.requireNonNull(needTechnicalAcknowledgement, "expected parameter 'needTechnicalAcknowledgement' to be non-null");
        this.rolloverAcknowledgementControlNumber = Objects.requireNonNull(rolloverAcknowledgementControlNumber, "expected parameter 'rolloverAcknowledgementControlNumber' to be non-null");
        this.sendSynchronousAcknowledgement = Objects.requireNonNull(sendSynchronousAcknowledgement, "expected parameter 'sendSynchronousAcknowledgement' to be non-null");
    }

    private EdifactAcknowledgementSettingsArgs() {
        this.acknowledgementControlNumberLowerBound = Output.empty();
        this.acknowledgementControlNumberPrefix = Output.empty();
        this.acknowledgementControlNumberSuffix = Output.empty();
        this.acknowledgementControlNumberUpperBound = Output.empty();
        this.batchFunctionalAcknowledgements = Output.empty();
        this.batchTechnicalAcknowledgements = Output.empty();
        this.needFunctionalAcknowledgement = Output.empty();
        this.needLoopForValidMessages = Output.empty();
        this.needTechnicalAcknowledgement = Output.empty();
        this.rolloverAcknowledgementControlNumber = Output.empty();
        this.sendSynchronousAcknowledgement = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdifactAcknowledgementSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> acknowledgementControlNumberLowerBound;
        private @Nullable Output<String> acknowledgementControlNumberPrefix;
        private @Nullable Output<String> acknowledgementControlNumberSuffix;
        private Output<Integer> acknowledgementControlNumberUpperBound;
        private Output<Boolean> batchFunctionalAcknowledgements;
        private Output<Boolean> batchTechnicalAcknowledgements;
        private Output<Boolean> needFunctionalAcknowledgement;
        private Output<Boolean> needLoopForValidMessages;
        private Output<Boolean> needTechnicalAcknowledgement;
        private Output<Boolean> rolloverAcknowledgementControlNumber;
        private Output<Boolean> sendSynchronousAcknowledgement;

        public Builder() {
    	      // Empty
        }

        public Builder(EdifactAcknowledgementSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acknowledgementControlNumberLowerBound = defaults.acknowledgementControlNumberLowerBound;
    	      this.acknowledgementControlNumberPrefix = defaults.acknowledgementControlNumberPrefix;
    	      this.acknowledgementControlNumberSuffix = defaults.acknowledgementControlNumberSuffix;
    	      this.acknowledgementControlNumberUpperBound = defaults.acknowledgementControlNumberUpperBound;
    	      this.batchFunctionalAcknowledgements = defaults.batchFunctionalAcknowledgements;
    	      this.batchTechnicalAcknowledgements = defaults.batchTechnicalAcknowledgements;
    	      this.needFunctionalAcknowledgement = defaults.needFunctionalAcknowledgement;
    	      this.needLoopForValidMessages = defaults.needLoopForValidMessages;
    	      this.needTechnicalAcknowledgement = defaults.needTechnicalAcknowledgement;
    	      this.rolloverAcknowledgementControlNumber = defaults.rolloverAcknowledgementControlNumber;
    	      this.sendSynchronousAcknowledgement = defaults.sendSynchronousAcknowledgement;
        }

        public Builder acknowledgementControlNumberLowerBound(Output<Integer> acknowledgementControlNumberLowerBound) {
            this.acknowledgementControlNumberLowerBound = Objects.requireNonNull(acknowledgementControlNumberLowerBound);
            return this;
        }
        public Builder acknowledgementControlNumberLowerBound(Integer acknowledgementControlNumberLowerBound) {
            this.acknowledgementControlNumberLowerBound = Output.of(Objects.requireNonNull(acknowledgementControlNumberLowerBound));
            return this;
        }
        public Builder acknowledgementControlNumberPrefix(@Nullable Output<String> acknowledgementControlNumberPrefix) {
            this.acknowledgementControlNumberPrefix = acknowledgementControlNumberPrefix;
            return this;
        }
        public Builder acknowledgementControlNumberPrefix(@Nullable String acknowledgementControlNumberPrefix) {
            this.acknowledgementControlNumberPrefix = Output.ofNullable(acknowledgementControlNumberPrefix);
            return this;
        }
        public Builder acknowledgementControlNumberSuffix(@Nullable Output<String> acknowledgementControlNumberSuffix) {
            this.acknowledgementControlNumberSuffix = acknowledgementControlNumberSuffix;
            return this;
        }
        public Builder acknowledgementControlNumberSuffix(@Nullable String acknowledgementControlNumberSuffix) {
            this.acknowledgementControlNumberSuffix = Output.ofNullable(acknowledgementControlNumberSuffix);
            return this;
        }
        public Builder acknowledgementControlNumberUpperBound(Output<Integer> acknowledgementControlNumberUpperBound) {
            this.acknowledgementControlNumberUpperBound = Objects.requireNonNull(acknowledgementControlNumberUpperBound);
            return this;
        }
        public Builder acknowledgementControlNumberUpperBound(Integer acknowledgementControlNumberUpperBound) {
            this.acknowledgementControlNumberUpperBound = Output.of(Objects.requireNonNull(acknowledgementControlNumberUpperBound));
            return this;
        }
        public Builder batchFunctionalAcknowledgements(Output<Boolean> batchFunctionalAcknowledgements) {
            this.batchFunctionalAcknowledgements = Objects.requireNonNull(batchFunctionalAcknowledgements);
            return this;
        }
        public Builder batchFunctionalAcknowledgements(Boolean batchFunctionalAcknowledgements) {
            this.batchFunctionalAcknowledgements = Output.of(Objects.requireNonNull(batchFunctionalAcknowledgements));
            return this;
        }
        public Builder batchTechnicalAcknowledgements(Output<Boolean> batchTechnicalAcknowledgements) {
            this.batchTechnicalAcknowledgements = Objects.requireNonNull(batchTechnicalAcknowledgements);
            return this;
        }
        public Builder batchTechnicalAcknowledgements(Boolean batchTechnicalAcknowledgements) {
            this.batchTechnicalAcknowledgements = Output.of(Objects.requireNonNull(batchTechnicalAcknowledgements));
            return this;
        }
        public Builder needFunctionalAcknowledgement(Output<Boolean> needFunctionalAcknowledgement) {
            this.needFunctionalAcknowledgement = Objects.requireNonNull(needFunctionalAcknowledgement);
            return this;
        }
        public Builder needFunctionalAcknowledgement(Boolean needFunctionalAcknowledgement) {
            this.needFunctionalAcknowledgement = Output.of(Objects.requireNonNull(needFunctionalAcknowledgement));
            return this;
        }
        public Builder needLoopForValidMessages(Output<Boolean> needLoopForValidMessages) {
            this.needLoopForValidMessages = Objects.requireNonNull(needLoopForValidMessages);
            return this;
        }
        public Builder needLoopForValidMessages(Boolean needLoopForValidMessages) {
            this.needLoopForValidMessages = Output.of(Objects.requireNonNull(needLoopForValidMessages));
            return this;
        }
        public Builder needTechnicalAcknowledgement(Output<Boolean> needTechnicalAcknowledgement) {
            this.needTechnicalAcknowledgement = Objects.requireNonNull(needTechnicalAcknowledgement);
            return this;
        }
        public Builder needTechnicalAcknowledgement(Boolean needTechnicalAcknowledgement) {
            this.needTechnicalAcknowledgement = Output.of(Objects.requireNonNull(needTechnicalAcknowledgement));
            return this;
        }
        public Builder rolloverAcknowledgementControlNumber(Output<Boolean> rolloverAcknowledgementControlNumber) {
            this.rolloverAcknowledgementControlNumber = Objects.requireNonNull(rolloverAcknowledgementControlNumber);
            return this;
        }
        public Builder rolloverAcknowledgementControlNumber(Boolean rolloverAcknowledgementControlNumber) {
            this.rolloverAcknowledgementControlNumber = Output.of(Objects.requireNonNull(rolloverAcknowledgementControlNumber));
            return this;
        }
        public Builder sendSynchronousAcknowledgement(Output<Boolean> sendSynchronousAcknowledgement) {
            this.sendSynchronousAcknowledgement = Objects.requireNonNull(sendSynchronousAcknowledgement);
            return this;
        }
        public Builder sendSynchronousAcknowledgement(Boolean sendSynchronousAcknowledgement) {
            this.sendSynchronousAcknowledgement = Output.of(Objects.requireNonNull(sendSynchronousAcknowledgement));
            return this;
        }        public EdifactAcknowledgementSettingsArgs build() {
            return new EdifactAcknowledgementSettingsArgs(acknowledgementControlNumberLowerBound, acknowledgementControlNumberPrefix, acknowledgementControlNumberSuffix, acknowledgementControlNumberUpperBound, batchFunctionalAcknowledgements, batchTechnicalAcknowledgements, needFunctionalAcknowledgement, needLoopForValidMessages, needTechnicalAcknowledgement, rolloverAcknowledgementControlNumber, sendSynchronousAcknowledgement);
        }
    }
}
