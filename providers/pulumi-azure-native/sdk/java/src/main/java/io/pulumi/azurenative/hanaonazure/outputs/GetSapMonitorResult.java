// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.hanaonazure.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetSapMonitorResult {
    /**
     * The value indicating whether to send analytics to Microsoft
     * 
     */
    private final @Nullable Boolean enableCustomerAnalytics;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * The geo-location where the resource lives
     * 
     */
    private final String location;
    /**
     * The ARM ID of the Log Analytics Workspace that is used for monitoring
     * 
     */
    private final @Nullable String logAnalyticsWorkspaceArmId;
    /**
     * The workspace ID of the log analytics workspace to be used for monitoring
     * 
     */
    private final @Nullable String logAnalyticsWorkspaceId;
    /**
     * The shared key of the log analytics workspace that is used for monitoring
     * 
     */
    private final @Nullable String logAnalyticsWorkspaceSharedKey;
    /**
     * The name of the resource group the SAP Monitor resources get deployed into.
     * 
     */
    private final String managedResourceGroupName;
    /**
     * The subnet which the SAP monitor will be deployed in
     * 
     */
    private final @Nullable String monitorSubnet;
    /**
     * The name of the resource
     * 
     */
    private final String name;
    /**
     * State of provisioning of the HanaInstance
     * 
     */
    private final String provisioningState;
    /**
     * The version of the payload running in the Collector VM
     * 
     */
    private final String sapMonitorCollectorVersion;
    /**
     * Resource tags.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"enableCustomerAnalytics","id","location","logAnalyticsWorkspaceArmId","logAnalyticsWorkspaceId","logAnalyticsWorkspaceSharedKey","managedResourceGroupName","monitorSubnet","name","provisioningState","sapMonitorCollectorVersion","tags","type"})
    private GetSapMonitorResult(
        @Nullable Boolean enableCustomerAnalytics,
        String id,
        String location,
        @Nullable String logAnalyticsWorkspaceArmId,
        @Nullable String logAnalyticsWorkspaceId,
        @Nullable String logAnalyticsWorkspaceSharedKey,
        String managedResourceGroupName,
        @Nullable String monitorSubnet,
        String name,
        String provisioningState,
        String sapMonitorCollectorVersion,
        @Nullable Map<String,String> tags,
        String type) {
        this.enableCustomerAnalytics = enableCustomerAnalytics;
        this.id = Objects.requireNonNull(id);
        this.location = Objects.requireNonNull(location);
        this.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
        this.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
        this.logAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
        this.managedResourceGroupName = Objects.requireNonNull(managedResourceGroupName);
        this.monitorSubnet = monitorSubnet;
        this.name = Objects.requireNonNull(name);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.sapMonitorCollectorVersion = Objects.requireNonNull(sapMonitorCollectorVersion);
        this.tags = tags;
        this.type = Objects.requireNonNull(type);
    }

    /**
     * The value indicating whether to send analytics to Microsoft
     * 
     */
    public Optional<Boolean> getEnableCustomerAnalytics() {
        return Optional.ofNullable(this.enableCustomerAnalytics);
    }
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * The geo-location where the resource lives
     * 
     */
    public String getLocation() {
        return this.location;
    }
    /**
     * The ARM ID of the Log Analytics Workspace that is used for monitoring
     * 
     */
    public Optional<String> getLogAnalyticsWorkspaceArmId() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceArmId);
    }
    /**
     * The workspace ID of the log analytics workspace to be used for monitoring
     * 
     */
    public Optional<String> getLogAnalyticsWorkspaceId() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceId);
    }
    /**
     * The shared key of the log analytics workspace that is used for monitoring
     * 
     */
    public Optional<String> getLogAnalyticsWorkspaceSharedKey() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceSharedKey);
    }
    /**
     * The name of the resource group the SAP Monitor resources get deployed into.
     * 
     */
    public String getManagedResourceGroupName() {
        return this.managedResourceGroupName;
    }
    /**
     * The subnet which the SAP monitor will be deployed in
     * 
     */
    public Optional<String> getMonitorSubnet() {
        return Optional.ofNullable(this.monitorSubnet);
    }
    /**
     * The name of the resource
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * State of provisioning of the HanaInstance
     * 
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The version of the payload running in the Collector VM
     * 
     */
    public String getSapMonitorCollectorVersion() {
        return this.sapMonitorCollectorVersion;
    }
    /**
     * Resource tags.
     * 
     */
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSapMonitorResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean enableCustomerAnalytics;
        private String id;
        private String location;
        private @Nullable String logAnalyticsWorkspaceArmId;
        private @Nullable String logAnalyticsWorkspaceId;
        private @Nullable String logAnalyticsWorkspaceSharedKey;
        private String managedResourceGroupName;
        private @Nullable String monitorSubnet;
        private String name;
        private String provisioningState;
        private String sapMonitorCollectorVersion;
        private @Nullable Map<String,String> tags;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSapMonitorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableCustomerAnalytics = defaults.enableCustomerAnalytics;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.logAnalyticsWorkspaceArmId = defaults.logAnalyticsWorkspaceArmId;
    	      this.logAnalyticsWorkspaceId = defaults.logAnalyticsWorkspaceId;
    	      this.logAnalyticsWorkspaceSharedKey = defaults.logAnalyticsWorkspaceSharedKey;
    	      this.managedResourceGroupName = defaults.managedResourceGroupName;
    	      this.monitorSubnet = defaults.monitorSubnet;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sapMonitorCollectorVersion = defaults.sapMonitorCollectorVersion;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder setEnableCustomerAnalytics(@Nullable Boolean enableCustomerAnalytics) {
            this.enableCustomerAnalytics = enableCustomerAnalytics;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setLogAnalyticsWorkspaceArmId(@Nullable String logAnalyticsWorkspaceArmId) {
            this.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
            return this;
        }

        public Builder setLogAnalyticsWorkspaceId(@Nullable String logAnalyticsWorkspaceId) {
            this.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
            return this;
        }

        public Builder setLogAnalyticsWorkspaceSharedKey(@Nullable String logAnalyticsWorkspaceSharedKey) {
            this.logAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
            return this;
        }

        public Builder setManagedResourceGroupName(String managedResourceGroupName) {
            this.managedResourceGroupName = Objects.requireNonNull(managedResourceGroupName);
            return this;
        }

        public Builder setMonitorSubnet(@Nullable String monitorSubnet) {
            this.monitorSubnet = monitorSubnet;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setSapMonitorCollectorVersion(String sapMonitorCollectorVersion) {
            this.sapMonitorCollectorVersion = Objects.requireNonNull(sapMonitorCollectorVersion);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetSapMonitorResult build() {
            return new GetSapMonitorResult(enableCustomerAnalytics, id, location, logAnalyticsWorkspaceArmId, logAnalyticsWorkspaceId, logAnalyticsWorkspaceSharedKey, managedResourceGroupName, monitorSubnet, name, provisioningState, sapMonitorCollectorVersion, tags, type);
        }
    }
}
