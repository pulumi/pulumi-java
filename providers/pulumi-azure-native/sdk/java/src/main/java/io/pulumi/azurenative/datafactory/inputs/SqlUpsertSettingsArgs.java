// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Sql upsert option settings
 * 
 */
public final class SqlUpsertSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final SqlUpsertSettingsArgs Empty = new SqlUpsertSettingsArgs();

    /**
     * Schema name for interim table. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="interimSchemaName")
    private final @Nullable Input<Object> interimSchemaName;

    public Input<Object> getInterimSchemaName() {
        return this.interimSchemaName == null ? Input.empty() : this.interimSchemaName;
    }

    /**
     * Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
     * 
     */
    @InputImport(name="keys")
    private final @Nullable Input<Object> keys;

    public Input<Object> getKeys() {
        return this.keys == null ? Input.empty() : this.keys;
    }

    /**
     * Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @InputImport(name="useTempDB")
    private final @Nullable Input<Object> useTempDB;

    public Input<Object> getUseTempDB() {
        return this.useTempDB == null ? Input.empty() : this.useTempDB;
    }

    public SqlUpsertSettingsArgs(
        @Nullable Input<Object> interimSchemaName,
        @Nullable Input<Object> keys,
        @Nullable Input<Object> useTempDB) {
        this.interimSchemaName = interimSchemaName;
        this.keys = keys;
        this.useTempDB = useTempDB;
    }

    private SqlUpsertSettingsArgs() {
        this.interimSchemaName = Input.empty();
        this.keys = Input.empty();
        this.useTempDB = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlUpsertSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Object> interimSchemaName;
        private @Nullable Input<Object> keys;
        private @Nullable Input<Object> useTempDB;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlUpsertSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interimSchemaName = defaults.interimSchemaName;
    	      this.keys = defaults.keys;
    	      this.useTempDB = defaults.useTempDB;
        }

        public Builder setInterimSchemaName(@Nullable Input<Object> interimSchemaName) {
            this.interimSchemaName = interimSchemaName;
            return this;
        }

        public Builder setInterimSchemaName(@Nullable Object interimSchemaName) {
            this.interimSchemaName = Input.ofNullable(interimSchemaName);
            return this;
        }

        public Builder setKeys(@Nullable Input<Object> keys) {
            this.keys = keys;
            return this;
        }

        public Builder setKeys(@Nullable Object keys) {
            this.keys = Input.ofNullable(keys);
            return this;
        }

        public Builder setUseTempDB(@Nullable Input<Object> useTempDB) {
            this.useTempDB = useTempDB;
            return this;
        }

        public Builder setUseTempDB(@Nullable Object useTempDB) {
            this.useTempDB = Input.ofNullable(useTempDB);
            return this;
        }

        public SqlUpsertSettingsArgs build() {
            return new SqlUpsertSettingsArgs(interimSchemaName, keys, useTempDB);
        }
    }
}
