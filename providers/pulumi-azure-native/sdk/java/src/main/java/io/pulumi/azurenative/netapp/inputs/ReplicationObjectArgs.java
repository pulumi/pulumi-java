// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.netapp.inputs;

import io.pulumi.azurenative.netapp.enums.EndpointType;
import io.pulumi.azurenative.netapp.enums.ReplicationSchedule;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Replication properties
 * 
 */
public final class ReplicationObjectArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReplicationObjectArgs Empty = new ReplicationObjectArgs();

    /**
     * Indicates whether the local volume is the source or destination for the Volume Replication
     * 
     */
    @InputImport(name="endpointType")
      private final @Nullable Output<Either<String,EndpointType>> endpointType;

    public Output<Either<String,EndpointType>> getEndpointType() {
        return this.endpointType == null ? Output.empty() : this.endpointType;
    }

    /**
     * The remote region for the other end of the Volume Replication.
     * 
     */
    @InputImport(name="remoteVolumeRegion")
      private final @Nullable Output<String> remoteVolumeRegion;

    public Output<String> getRemoteVolumeRegion() {
        return this.remoteVolumeRegion == null ? Output.empty() : this.remoteVolumeRegion;
    }

    /**
     * The resource ID of the remote volume.
     * 
     */
    @InputImport(name="remoteVolumeResourceId", required=true)
      private final Output<String> remoteVolumeResourceId;

    public Output<String> getRemoteVolumeResourceId() {
        return this.remoteVolumeResourceId;
    }

    /**
     * Id
     * 
     */
    @InputImport(name="replicationId")
      private final @Nullable Output<String> replicationId;

    public Output<String> getReplicationId() {
        return this.replicationId == null ? Output.empty() : this.replicationId;
    }

    /**
     * Schedule
     * 
     */
    @InputImport(name="replicationSchedule", required=true)
      private final Output<Either<String,ReplicationSchedule>> replicationSchedule;

    public Output<Either<String,ReplicationSchedule>> getReplicationSchedule() {
        return this.replicationSchedule;
    }

    public ReplicationObjectArgs(
        @Nullable Output<Either<String,EndpointType>> endpointType,
        @Nullable Output<String> remoteVolumeRegion,
        Output<String> remoteVolumeResourceId,
        @Nullable Output<String> replicationId,
        Output<Either<String,ReplicationSchedule>> replicationSchedule) {
        this.endpointType = endpointType;
        this.remoteVolumeRegion = remoteVolumeRegion;
        this.remoteVolumeResourceId = Objects.requireNonNull(remoteVolumeResourceId, "expected parameter 'remoteVolumeResourceId' to be non-null");
        this.replicationId = replicationId;
        this.replicationSchedule = Objects.requireNonNull(replicationSchedule, "expected parameter 'replicationSchedule' to be non-null");
    }

    private ReplicationObjectArgs() {
        this.endpointType = Output.empty();
        this.remoteVolumeRegion = Output.empty();
        this.remoteVolumeResourceId = Output.empty();
        this.replicationId = Output.empty();
        this.replicationSchedule = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicationObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,EndpointType>> endpointType;
        private @Nullable Output<String> remoteVolumeRegion;
        private Output<String> remoteVolumeResourceId;
        private @Nullable Output<String> replicationId;
        private Output<Either<String,ReplicationSchedule>> replicationSchedule;

        public Builder() {
    	      // Empty
        }

        public Builder(ReplicationObjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endpointType = defaults.endpointType;
    	      this.remoteVolumeRegion = defaults.remoteVolumeRegion;
    	      this.remoteVolumeResourceId = defaults.remoteVolumeResourceId;
    	      this.replicationId = defaults.replicationId;
    	      this.replicationSchedule = defaults.replicationSchedule;
        }

        public Builder endpointType(@Nullable Output<Either<String,EndpointType>> endpointType) {
            this.endpointType = endpointType;
            return this;
        }

        public Builder endpointType(@Nullable Either<String,EndpointType> endpointType) {
            this.endpointType = Output.ofNullable(endpointType);
            return this;
        }

        public Builder remoteVolumeRegion(@Nullable Output<String> remoteVolumeRegion) {
            this.remoteVolumeRegion = remoteVolumeRegion;
            return this;
        }

        public Builder remoteVolumeRegion(@Nullable String remoteVolumeRegion) {
            this.remoteVolumeRegion = Output.ofNullable(remoteVolumeRegion);
            return this;
        }

        public Builder remoteVolumeResourceId(Output<String> remoteVolumeResourceId) {
            this.remoteVolumeResourceId = Objects.requireNonNull(remoteVolumeResourceId);
            return this;
        }

        public Builder remoteVolumeResourceId(String remoteVolumeResourceId) {
            this.remoteVolumeResourceId = Output.of(Objects.requireNonNull(remoteVolumeResourceId));
            return this;
        }

        public Builder replicationId(@Nullable Output<String> replicationId) {
            this.replicationId = replicationId;
            return this;
        }

        public Builder replicationId(@Nullable String replicationId) {
            this.replicationId = Output.ofNullable(replicationId);
            return this;
        }

        public Builder replicationSchedule(Output<Either<String,ReplicationSchedule>> replicationSchedule) {
            this.replicationSchedule = Objects.requireNonNull(replicationSchedule);
            return this;
        }

        public Builder replicationSchedule(Either<String,ReplicationSchedule> replicationSchedule) {
            this.replicationSchedule = Output.of(Objects.requireNonNull(replicationSchedule));
            return this;
        }
        public ReplicationObjectArgs build() {
            return new ReplicationObjectArgs(endpointType, remoteVolumeRegion, remoteVolumeResourceId, replicationId, replicationSchedule);
        }
    }
}
