// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.resources;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.resources.AzurePowerShellScriptArgs;
import io.pulumi.azurenative.resources.outputs.ContainerConfigurationResponse;
import io.pulumi.azurenative.resources.outputs.EnvironmentVariableResponse;
import io.pulumi.azurenative.resources.outputs.ManagedServiceIdentityResponse;
import io.pulumi.azurenative.resources.outputs.ScriptStatusResponse;
import io.pulumi.azurenative.resources.outputs.StorageAccountConfigurationResponse;
import io.pulumi.azurenative.resources.outputs.SystemDataResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

@ResourceType(type="azure-native:resources:AzurePowerShellScript")
public class AzurePowerShellScript extends io.pulumi.resources.CustomResource {
    @OutputExport(name="arguments", type=String.class, parameters={})
    private Output</* @Nullable */ String> arguments;

    public Output</* @Nullable */ String> getArguments() {
        return this.arguments;
    }
    @OutputExport(name="azPowerShellVersion", type=String.class, parameters={})
    private Output<String> azPowerShellVersion;

    public Output<String> getAzPowerShellVersion() {
        return this.azPowerShellVersion;
    }
    @OutputExport(name="cleanupPreference", type=String.class, parameters={})
    private Output</* @Nullable */ String> cleanupPreference;

    public Output</* @Nullable */ String> getCleanupPreference() {
        return this.cleanupPreference;
    }
    @OutputExport(name="containerSettings", type=ContainerConfigurationResponse.class, parameters={})
    private Output</* @Nullable */ ContainerConfigurationResponse> containerSettings;

    public Output</* @Nullable */ ContainerConfigurationResponse> getContainerSettings() {
        return this.containerSettings;
    }
    @OutputExport(name="environmentVariables", type=List.class, parameters={EnvironmentVariableResponse.class})
    private Output</* @Nullable */ List<EnvironmentVariableResponse>> environmentVariables;

    public Output</* @Nullable */ List<EnvironmentVariableResponse>> getEnvironmentVariables() {
        return this.environmentVariables;
    }
    @OutputExport(name="forceUpdateTag", type=String.class, parameters={})
    private Output</* @Nullable */ String> forceUpdateTag;

    public Output</* @Nullable */ String> getForceUpdateTag() {
        return this.forceUpdateTag;
    }
    @OutputExport(name="identity", type=ManagedServiceIdentityResponse.class, parameters={})
    private Output</* @Nullable */ ManagedServiceIdentityResponse> identity;

    public Output</* @Nullable */ ManagedServiceIdentityResponse> getIdentity() {
        return this.identity;
    }
    @OutputExport(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    public Output<String> getKind() {
        return this.kind;
    }
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    public Output<String> getLocation() {
        return this.location;
    }
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    public Output<String> getName() {
        return this.name;
    }
    @OutputExport(name="outputs", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> outputs;

    public Output<Map<String,Object>> getOutputs() {
        return this.outputs;
    }
    @OutputExport(name="primaryScriptUri", type=String.class, parameters={})
    private Output</* @Nullable */ String> primaryScriptUri;

    public Output</* @Nullable */ String> getPrimaryScriptUri() {
        return this.primaryScriptUri;
    }
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    @OutputExport(name="retentionInterval", type=String.class, parameters={})
    private Output<String> retentionInterval;

    public Output<String> getRetentionInterval() {
        return this.retentionInterval;
    }
    @OutputExport(name="scriptContent", type=String.class, parameters={})
    private Output</* @Nullable */ String> scriptContent;

    public Output</* @Nullable */ String> getScriptContent() {
        return this.scriptContent;
    }
    @OutputExport(name="status", type=ScriptStatusResponse.class, parameters={})
    private Output<ScriptStatusResponse> status;

    public Output<ScriptStatusResponse> getStatus() {
        return this.status;
    }
    @OutputExport(name="storageAccountSettings", type=StorageAccountConfigurationResponse.class, parameters={})
    private Output</* @Nullable */ StorageAccountConfigurationResponse> storageAccountSettings;

    public Output</* @Nullable */ StorageAccountConfigurationResponse> getStorageAccountSettings() {
        return this.storageAccountSettings;
    }
    @OutputExport(name="supportingScriptUris", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> supportingScriptUris;

    public Output</* @Nullable */ List<String>> getSupportingScriptUris() {
        return this.supportingScriptUris;
    }
    @OutputExport(name="systemData", type=SystemDataResponse.class, parameters={})
    private Output<SystemDataResponse> systemData;

    public Output<SystemDataResponse> getSystemData() {
        return this.systemData;
    }
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    @OutputExport(name="timeout", type=String.class, parameters={})
    private Output</* @Nullable */ String> timeout;

    public Output</* @Nullable */ String> getTimeout() {
        return this.timeout;
    }
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public AzurePowerShellScript(String name, AzurePowerShellScriptArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:resources:AzurePowerShellScript", name, makeArgs(args), makeResourceOptions(options, Input.empty()));
    }

    private AzurePowerShellScript(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:resources:AzurePowerShellScript", name, null, makeResourceOptions(options, id));
    }

    private static AzurePowerShellScriptArgs makeArgs(AzurePowerShellScriptArgs args) {
        var builder = args == null ? AzurePowerShellScriptArgs.builder() : AzurePowerShellScriptArgs.builder(args);
        return builder
            .setKind("AzurePowerShell")
            .build();
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:resources/v20191001preview:AzurePowerShellScript").build()),
                Input.of(Alias.builder().setType("azure-native:resources/v20201001:AzurePowerShellScript").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    public static AzurePowerShellScript get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new AzurePowerShellScript(name, id, options);
    }
}
