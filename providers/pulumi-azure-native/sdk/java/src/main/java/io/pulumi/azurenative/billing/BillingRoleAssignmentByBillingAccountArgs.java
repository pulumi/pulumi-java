// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.billing;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BillingRoleAssignmentByBillingAccountArgs extends io.pulumi.resources.ResourceArgs {

    public static final BillingRoleAssignmentByBillingAccountArgs Empty = new BillingRoleAssignmentByBillingAccountArgs();

    /**
     * The ID that uniquely identifies a billing account.
     * 
     */
    @Import(name="billingAccountName", required=true)
      private final Output<String> billingAccountName;

    public Output<String> getBillingAccountName() {
        return this.billingAccountName;
    }

    /**
     * The ID that uniquely identifies a role assignment.
     * 
     */
    @Import(name="billingRoleAssignmentName")
      private final @Nullable Output<String> billingRoleAssignmentName;

    public Output<String> getBillingRoleAssignmentName() {
        return this.billingRoleAssignmentName == null ? Output.empty() : this.billingRoleAssignmentName;
    }

    /**
     * The principal id of the user to whom the role was assigned.
     * 
     */
    @Import(name="principalId")
      private final @Nullable Output<String> principalId;

    public Output<String> getPrincipalId() {
        return this.principalId == null ? Output.empty() : this.principalId;
    }

    /**
     * The principal tenant id of the user to whom the role was assigned.
     * 
     */
    @Import(name="principalTenantId")
      private final @Nullable Output<String> principalTenantId;

    public Output<String> getPrincipalTenantId() {
        return this.principalTenantId == null ? Output.empty() : this.principalTenantId;
    }

    /**
     * The ID of the role definition.
     * 
     */
    @Import(name="roleDefinitionId")
      private final @Nullable Output<String> roleDefinitionId;

    public Output<String> getRoleDefinitionId() {
        return this.roleDefinitionId == null ? Output.empty() : this.roleDefinitionId;
    }

    /**
     * The authentication type of the user, whether Organization or MSA, of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
     * 
     */
    @Import(name="userAuthenticationType")
      private final @Nullable Output<String> userAuthenticationType;

    public Output<String> getUserAuthenticationType() {
        return this.userAuthenticationType == null ? Output.empty() : this.userAuthenticationType;
    }

    /**
     * The email address of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.
     * 
     */
    @Import(name="userEmailAddress")
      private final @Nullable Output<String> userEmailAddress;

    public Output<String> getUserEmailAddress() {
        return this.userEmailAddress == null ? Output.empty() : this.userEmailAddress;
    }

    public BillingRoleAssignmentByBillingAccountArgs(
        Output<String> billingAccountName,
        @Nullable Output<String> billingRoleAssignmentName,
        @Nullable Output<String> principalId,
        @Nullable Output<String> principalTenantId,
        @Nullable Output<String> roleDefinitionId,
        @Nullable Output<String> userAuthenticationType,
        @Nullable Output<String> userEmailAddress) {
        this.billingAccountName = Objects.requireNonNull(billingAccountName, "expected parameter 'billingAccountName' to be non-null");
        this.billingRoleAssignmentName = billingRoleAssignmentName;
        this.principalId = principalId;
        this.principalTenantId = principalTenantId;
        this.roleDefinitionId = roleDefinitionId;
        this.userAuthenticationType = userAuthenticationType;
        this.userEmailAddress = userEmailAddress;
    }

    private BillingRoleAssignmentByBillingAccountArgs() {
        this.billingAccountName = Output.empty();
        this.billingRoleAssignmentName = Output.empty();
        this.principalId = Output.empty();
        this.principalTenantId = Output.empty();
        this.roleDefinitionId = Output.empty();
        this.userAuthenticationType = Output.empty();
        this.userEmailAddress = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BillingRoleAssignmentByBillingAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> billingAccountName;
        private @Nullable Output<String> billingRoleAssignmentName;
        private @Nullable Output<String> principalId;
        private @Nullable Output<String> principalTenantId;
        private @Nullable Output<String> roleDefinitionId;
        private @Nullable Output<String> userAuthenticationType;
        private @Nullable Output<String> userEmailAddress;

        public Builder() {
    	      // Empty
        }

        public Builder(BillingRoleAssignmentByBillingAccountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billingAccountName = defaults.billingAccountName;
    	      this.billingRoleAssignmentName = defaults.billingRoleAssignmentName;
    	      this.principalId = defaults.principalId;
    	      this.principalTenantId = defaults.principalTenantId;
    	      this.roleDefinitionId = defaults.roleDefinitionId;
    	      this.userAuthenticationType = defaults.userAuthenticationType;
    	      this.userEmailAddress = defaults.userEmailAddress;
        }

        public Builder billingAccountName(Output<String> billingAccountName) {
            this.billingAccountName = Objects.requireNonNull(billingAccountName);
            return this;
        }

        public Builder billingAccountName(String billingAccountName) {
            this.billingAccountName = Output.of(Objects.requireNonNull(billingAccountName));
            return this;
        }

        public Builder billingRoleAssignmentName(@Nullable Output<String> billingRoleAssignmentName) {
            this.billingRoleAssignmentName = billingRoleAssignmentName;
            return this;
        }

        public Builder billingRoleAssignmentName(@Nullable String billingRoleAssignmentName) {
            this.billingRoleAssignmentName = Output.ofNullable(billingRoleAssignmentName);
            return this;
        }

        public Builder principalId(@Nullable Output<String> principalId) {
            this.principalId = principalId;
            return this;
        }

        public Builder principalId(@Nullable String principalId) {
            this.principalId = Output.ofNullable(principalId);
            return this;
        }

        public Builder principalTenantId(@Nullable Output<String> principalTenantId) {
            this.principalTenantId = principalTenantId;
            return this;
        }

        public Builder principalTenantId(@Nullable String principalTenantId) {
            this.principalTenantId = Output.ofNullable(principalTenantId);
            return this;
        }

        public Builder roleDefinitionId(@Nullable Output<String> roleDefinitionId) {
            this.roleDefinitionId = roleDefinitionId;
            return this;
        }

        public Builder roleDefinitionId(@Nullable String roleDefinitionId) {
            this.roleDefinitionId = Output.ofNullable(roleDefinitionId);
            return this;
        }

        public Builder userAuthenticationType(@Nullable Output<String> userAuthenticationType) {
            this.userAuthenticationType = userAuthenticationType;
            return this;
        }

        public Builder userAuthenticationType(@Nullable String userAuthenticationType) {
            this.userAuthenticationType = Output.ofNullable(userAuthenticationType);
            return this;
        }

        public Builder userEmailAddress(@Nullable Output<String> userEmailAddress) {
            this.userEmailAddress = userEmailAddress;
            return this;
        }

        public Builder userEmailAddress(@Nullable String userEmailAddress) {
            this.userEmailAddress = Output.ofNullable(userEmailAddress);
            return this;
        }
        public BillingRoleAssignmentByBillingAccountArgs build() {
            return new BillingRoleAssignmentByBillingAccountArgs(billingAccountName, billingRoleAssignmentName, principalId, principalTenantId, roleDefinitionId, userAuthenticationType, userEmailAddress);
        }
    }
}
