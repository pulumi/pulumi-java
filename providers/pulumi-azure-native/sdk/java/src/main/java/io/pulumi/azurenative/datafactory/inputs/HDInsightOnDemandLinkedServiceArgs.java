// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.CredentialReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import io.pulumi.azurenative.datafactory.inputs.ScriptActionArgs;
import io.pulumi.azurenative.datafactory.inputs.SecureStringArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * HDInsight ondemand linked service.
 * 
 */
public final class HDInsightOnDemandLinkedServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final HDInsightOnDemandLinkedServiceArgs Empty = new HDInsightOnDemandLinkedServiceArgs();

    /**
     * Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
     * 
     */
    @Import(name="additionalLinkedServiceNames")
      private final @Nullable Output<List<LinkedServiceReferenceArgs>> additionalLinkedServiceNames;

    public Output<List<LinkedServiceReferenceArgs>> getAdditionalLinkedServiceNames() {
        return this.additionalLinkedServiceNames == null ? Output.empty() : this.additionalLinkedServiceNames;
    }

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
      private final @Nullable Output<List<Object>> annotations;

    public Output<List<Object>> getAnnotations() {
        return this.annotations == null ? Output.empty() : this.annotations;
    }

    /**
     * The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="clusterNamePrefix")
      private final @Nullable Output<Object> clusterNamePrefix;

    public Output<Object> getClusterNamePrefix() {
        return this.clusterNamePrefix == null ? Output.empty() : this.clusterNamePrefix;
    }

    /**
     * The password to access the cluster.
     * 
     */
    @Import(name="clusterPassword")
      private final @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> clusterPassword;

    public Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> getClusterPassword() {
        return this.clusterPassword == null ? Output.empty() : this.clusterPassword;
    }

    /**
     * The resource group where the cluster belongs. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="clusterResourceGroup", required=true)
      private final Output<Object> clusterResourceGroup;

    public Output<Object> getClusterResourceGroup() {
        return this.clusterResourceGroup;
    }

    /**
     * Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="clusterSize", required=true)
      private final Output<Object> clusterSize;

    public Output<Object> getClusterSize() {
        return this.clusterSize;
    }

    /**
     * The password to SSH remotely connect cluster’s node (for Linux).
     * 
     */
    @Import(name="clusterSshPassword")
      private final @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> clusterSshPassword;

    public Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> getClusterSshPassword() {
        return this.clusterSshPassword == null ? Output.empty() : this.clusterSshPassword;
    }

    /**
     * The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="clusterSshUserName")
      private final @Nullable Output<Object> clusterSshUserName;

    public Output<Object> getClusterSshUserName() {
        return this.clusterSshUserName == null ? Output.empty() : this.clusterSshUserName;
    }

    /**
     * The cluster type. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="clusterType")
      private final @Nullable Output<Object> clusterType;

    public Output<Object> getClusterType() {
        return this.clusterType == null ? Output.empty() : this.clusterType;
    }

    /**
     * The username to access the cluster. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="clusterUserName")
      private final @Nullable Output<Object> clusterUserName;

    public Output<Object> getClusterUserName() {
        return this.clusterUserName == null ? Output.empty() : this.clusterUserName;
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
      private final @Nullable Output<IntegrationRuntimeReferenceArgs> connectVia;

    public Output<IntegrationRuntimeReferenceArgs> getConnectVia() {
        return this.connectVia == null ? Output.empty() : this.connectVia;
    }

    /**
     * Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
     * 
     */
    @Import(name="coreConfiguration")
      private final @Nullable Output<Object> coreConfiguration;

    public Output<Object> getCoreConfiguration() {
        return this.coreConfiguration == null ? Output.empty() : this.coreConfiguration;
    }

    /**
     * The credential reference containing authentication information.
     * 
     */
    @Import(name="credential")
      private final @Nullable Output<CredentialReferenceArgs> credential;

    public Output<CredentialReferenceArgs> getCredential() {
        return this.credential == null ? Output.empty() : this.credential;
    }

    /**
     * Specifies the size of the data node for the HDInsight cluster.
     * 
     */
    @Import(name="dataNodeSize")
      private final @Nullable Output<Object> dataNodeSize;

    public Output<Object> getDataNodeSize() {
        return this.dataNodeSize == null ? Output.empty() : this.dataNodeSize;
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
      private final @Nullable Output<Object> encryptedCredential;

    public Output<Object> getEncryptedCredential() {
        return this.encryptedCredential == null ? Output.empty() : this.encryptedCredential;
    }

    /**
     * Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
     * 
     */
    @Import(name="hBaseConfiguration")
      private final @Nullable Output<Object> hBaseConfiguration;

    public Output<Object> getHBaseConfiguration() {
        return this.hBaseConfiguration == null ? Output.empty() : this.hBaseConfiguration;
    }

    /**
     * The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
     * 
     */
    @Import(name="hcatalogLinkedServiceName")
      private final @Nullable Output<LinkedServiceReferenceArgs> hcatalogLinkedServiceName;

    public Output<LinkedServiceReferenceArgs> getHcatalogLinkedServiceName() {
        return this.hcatalogLinkedServiceName == null ? Output.empty() : this.hcatalogLinkedServiceName;
    }

    /**
     * Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
     * 
     */
    @Import(name="hdfsConfiguration")
      private final @Nullable Output<Object> hdfsConfiguration;

    public Output<Object> getHdfsConfiguration() {
        return this.hdfsConfiguration == null ? Output.empty() : this.hdfsConfiguration;
    }

    /**
     * Specifies the size of the head node for the HDInsight cluster.
     * 
     */
    @Import(name="headNodeSize")
      private final @Nullable Output<Object> headNodeSize;

    public Output<Object> getHeadNodeSize() {
        return this.headNodeSize == null ? Output.empty() : this.headNodeSize;
    }

    /**
     * Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
     * 
     */
    @Import(name="hiveConfiguration")
      private final @Nullable Output<Object> hiveConfiguration;

    public Output<Object> getHiveConfiguration() {
        return this.hiveConfiguration == null ? Output.empty() : this.hiveConfiguration;
    }

    /**
     * The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="hostSubscriptionId", required=true)
      private final Output<Object> hostSubscriptionId;

    public Output<Object> getHostSubscriptionId() {
        return this.hostSubscriptionId;
    }

    /**
     * Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
     * 
     */
    @Import(name="linkedServiceName", required=true)
      private final Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Output<LinkedServiceReferenceArgs> getLinkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
     * 
     */
    @Import(name="mapReduceConfiguration")
      private final @Nullable Output<Object> mapReduceConfiguration;

    public Output<Object> getMapReduceConfiguration() {
        return this.mapReduceConfiguration == null ? Output.empty() : this.mapReduceConfiguration;
    }

    /**
     * Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
     * 
     */
    @Import(name="oozieConfiguration")
      private final @Nullable Output<Object> oozieConfiguration;

    public Output<Object> getOozieConfiguration() {
        return this.oozieConfiguration == null ? Output.empty() : this.oozieConfiguration;
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;

    public Output<Map<String,ParameterSpecificationArgs>> getParameters() {
        return this.parameters == null ? Output.empty() : this.parameters;
    }

    /**
     * Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
     * 
     */
    @Import(name="scriptActions")
      private final @Nullable Output<List<ScriptActionArgs>> scriptActions;

    public Output<List<ScriptActionArgs>> getScriptActions() {
        return this.scriptActions == null ? Output.empty() : this.scriptActions;
    }

    /**
     * The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="servicePrincipalId")
      private final @Nullable Output<Object> servicePrincipalId;

    public Output<Object> getServicePrincipalId() {
        return this.servicePrincipalId == null ? Output.empty() : this.servicePrincipalId;
    }

    /**
     * The key for the service principal id.
     * 
     */
    @Import(name="servicePrincipalKey")
      private final @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> servicePrincipalKey;

    public Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> getServicePrincipalKey() {
        return this.servicePrincipalKey == null ? Output.empty() : this.servicePrincipalKey;
    }

    /**
     * The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sparkVersion")
      private final @Nullable Output<Object> sparkVersion;

    public Output<Object> getSparkVersion() {
        return this.sparkVersion == null ? Output.empty() : this.sparkVersion;
    }

    /**
     * Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
     * 
     */
    @Import(name="stormConfiguration")
      private final @Nullable Output<Object> stormConfiguration;

    public Output<Object> getStormConfiguration() {
        return this.stormConfiguration == null ? Output.empty() : this.stormConfiguration;
    }

    /**
     * The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="subnetName")
      private final @Nullable Output<Object> subnetName;

    public Output<Object> getSubnetName() {
        return this.subnetName == null ? Output.empty() : this.subnetName;
    }

    /**
     * The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="tenant", required=true)
      private final Output<Object> tenant;

    public Output<Object> getTenant() {
        return this.tenant;
    }

    /**
     * The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="timeToLive", required=true)
      private final Output<Object> timeToLive;

    public Output<Object> getTimeToLive() {
        return this.timeToLive;
    }

    /**
     * Type of linked service.
     * Expected value is 'HDInsightOnDemand'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    /**
     * Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="version", required=true)
      private final Output<Object> version;

    public Output<Object> getVersion() {
        return this.version;
    }

    /**
     * The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="virtualNetworkId")
      private final @Nullable Output<Object> virtualNetworkId;

    public Output<Object> getVirtualNetworkId() {
        return this.virtualNetworkId == null ? Output.empty() : this.virtualNetworkId;
    }

    /**
     * Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
     * 
     */
    @Import(name="yarnConfiguration")
      private final @Nullable Output<Object> yarnConfiguration;

    public Output<Object> getYarnConfiguration() {
        return this.yarnConfiguration == null ? Output.empty() : this.yarnConfiguration;
    }

    /**
     * Specifies the size of the Zoo Keeper node for the HDInsight cluster.
     * 
     */
    @Import(name="zookeeperNodeSize")
      private final @Nullable Output<Object> zookeeperNodeSize;

    public Output<Object> getZookeeperNodeSize() {
        return this.zookeeperNodeSize == null ? Output.empty() : this.zookeeperNodeSize;
    }

    public HDInsightOnDemandLinkedServiceArgs(
        @Nullable Output<List<LinkedServiceReferenceArgs>> additionalLinkedServiceNames,
        @Nullable Output<List<Object>> annotations,
        @Nullable Output<Object> clusterNamePrefix,
        @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> clusterPassword,
        Output<Object> clusterResourceGroup,
        Output<Object> clusterSize,
        @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> clusterSshPassword,
        @Nullable Output<Object> clusterSshUserName,
        @Nullable Output<Object> clusterType,
        @Nullable Output<Object> clusterUserName,
        @Nullable Output<IntegrationRuntimeReferenceArgs> connectVia,
        @Nullable Output<Object> coreConfiguration,
        @Nullable Output<CredentialReferenceArgs> credential,
        @Nullable Output<Object> dataNodeSize,
        @Nullable Output<String> description,
        @Nullable Output<Object> encryptedCredential,
        @Nullable Output<Object> hBaseConfiguration,
        @Nullable Output<LinkedServiceReferenceArgs> hcatalogLinkedServiceName,
        @Nullable Output<Object> hdfsConfiguration,
        @Nullable Output<Object> headNodeSize,
        @Nullable Output<Object> hiveConfiguration,
        Output<Object> hostSubscriptionId,
        Output<LinkedServiceReferenceArgs> linkedServiceName,
        @Nullable Output<Object> mapReduceConfiguration,
        @Nullable Output<Object> oozieConfiguration,
        @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters,
        @Nullable Output<List<ScriptActionArgs>> scriptActions,
        @Nullable Output<Object> servicePrincipalId,
        @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> servicePrincipalKey,
        @Nullable Output<Object> sparkVersion,
        @Nullable Output<Object> stormConfiguration,
        @Nullable Output<Object> subnetName,
        Output<Object> tenant,
        Output<Object> timeToLive,
        Output<String> type,
        Output<Object> version,
        @Nullable Output<Object> virtualNetworkId,
        @Nullable Output<Object> yarnConfiguration,
        @Nullable Output<Object> zookeeperNodeSize) {
        this.additionalLinkedServiceNames = additionalLinkedServiceNames;
        this.annotations = annotations;
        this.clusterNamePrefix = clusterNamePrefix;
        this.clusterPassword = clusterPassword;
        this.clusterResourceGroup = Objects.requireNonNull(clusterResourceGroup, "expected parameter 'clusterResourceGroup' to be non-null");
        this.clusterSize = Objects.requireNonNull(clusterSize, "expected parameter 'clusterSize' to be non-null");
        this.clusterSshPassword = clusterSshPassword;
        this.clusterSshUserName = clusterSshUserName;
        this.clusterType = clusterType;
        this.clusterUserName = clusterUserName;
        this.connectVia = connectVia;
        this.coreConfiguration = coreConfiguration;
        this.credential = credential;
        this.dataNodeSize = dataNodeSize;
        this.description = description;
        this.encryptedCredential = encryptedCredential;
        this.hBaseConfiguration = hBaseConfiguration;
        this.hcatalogLinkedServiceName = hcatalogLinkedServiceName;
        this.hdfsConfiguration = hdfsConfiguration;
        this.headNodeSize = headNodeSize;
        this.hiveConfiguration = hiveConfiguration;
        this.hostSubscriptionId = Objects.requireNonNull(hostSubscriptionId, "expected parameter 'hostSubscriptionId' to be non-null");
        this.linkedServiceName = Objects.requireNonNull(linkedServiceName, "expected parameter 'linkedServiceName' to be non-null");
        this.mapReduceConfiguration = mapReduceConfiguration;
        this.oozieConfiguration = oozieConfiguration;
        this.parameters = parameters;
        this.scriptActions = scriptActions;
        this.servicePrincipalId = servicePrincipalId;
        this.servicePrincipalKey = servicePrincipalKey;
        this.sparkVersion = sparkVersion;
        this.stormConfiguration = stormConfiguration;
        this.subnetName = subnetName;
        this.tenant = Objects.requireNonNull(tenant, "expected parameter 'tenant' to be non-null");
        this.timeToLive = Objects.requireNonNull(timeToLive, "expected parameter 'timeToLive' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
        this.virtualNetworkId = virtualNetworkId;
        this.yarnConfiguration = yarnConfiguration;
        this.zookeeperNodeSize = zookeeperNodeSize;
    }

    private HDInsightOnDemandLinkedServiceArgs() {
        this.additionalLinkedServiceNames = Output.empty();
        this.annotations = Output.empty();
        this.clusterNamePrefix = Output.empty();
        this.clusterPassword = Output.empty();
        this.clusterResourceGroup = Output.empty();
        this.clusterSize = Output.empty();
        this.clusterSshPassword = Output.empty();
        this.clusterSshUserName = Output.empty();
        this.clusterType = Output.empty();
        this.clusterUserName = Output.empty();
        this.connectVia = Output.empty();
        this.coreConfiguration = Output.empty();
        this.credential = Output.empty();
        this.dataNodeSize = Output.empty();
        this.description = Output.empty();
        this.encryptedCredential = Output.empty();
        this.hBaseConfiguration = Output.empty();
        this.hcatalogLinkedServiceName = Output.empty();
        this.hdfsConfiguration = Output.empty();
        this.headNodeSize = Output.empty();
        this.hiveConfiguration = Output.empty();
        this.hostSubscriptionId = Output.empty();
        this.linkedServiceName = Output.empty();
        this.mapReduceConfiguration = Output.empty();
        this.oozieConfiguration = Output.empty();
        this.parameters = Output.empty();
        this.scriptActions = Output.empty();
        this.servicePrincipalId = Output.empty();
        this.servicePrincipalKey = Output.empty();
        this.sparkVersion = Output.empty();
        this.stormConfiguration = Output.empty();
        this.subnetName = Output.empty();
        this.tenant = Output.empty();
        this.timeToLive = Output.empty();
        this.type = Output.empty();
        this.version = Output.empty();
        this.virtualNetworkId = Output.empty();
        this.yarnConfiguration = Output.empty();
        this.zookeeperNodeSize = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HDInsightOnDemandLinkedServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<LinkedServiceReferenceArgs>> additionalLinkedServiceNames;
        private @Nullable Output<List<Object>> annotations;
        private @Nullable Output<Object> clusterNamePrefix;
        private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> clusterPassword;
        private Output<Object> clusterResourceGroup;
        private Output<Object> clusterSize;
        private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> clusterSshPassword;
        private @Nullable Output<Object> clusterSshUserName;
        private @Nullable Output<Object> clusterType;
        private @Nullable Output<Object> clusterUserName;
        private @Nullable Output<IntegrationRuntimeReferenceArgs> connectVia;
        private @Nullable Output<Object> coreConfiguration;
        private @Nullable Output<CredentialReferenceArgs> credential;
        private @Nullable Output<Object> dataNodeSize;
        private @Nullable Output<String> description;
        private @Nullable Output<Object> encryptedCredential;
        private @Nullable Output<Object> hBaseConfiguration;
        private @Nullable Output<LinkedServiceReferenceArgs> hcatalogLinkedServiceName;
        private @Nullable Output<Object> hdfsConfiguration;
        private @Nullable Output<Object> headNodeSize;
        private @Nullable Output<Object> hiveConfiguration;
        private Output<Object> hostSubscriptionId;
        private Output<LinkedServiceReferenceArgs> linkedServiceName;
        private @Nullable Output<Object> mapReduceConfiguration;
        private @Nullable Output<Object> oozieConfiguration;
        private @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;
        private @Nullable Output<List<ScriptActionArgs>> scriptActions;
        private @Nullable Output<Object> servicePrincipalId;
        private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> servicePrincipalKey;
        private @Nullable Output<Object> sparkVersion;
        private @Nullable Output<Object> stormConfiguration;
        private @Nullable Output<Object> subnetName;
        private Output<Object> tenant;
        private Output<Object> timeToLive;
        private Output<String> type;
        private Output<Object> version;
        private @Nullable Output<Object> virtualNetworkId;
        private @Nullable Output<Object> yarnConfiguration;
        private @Nullable Output<Object> zookeeperNodeSize;

        public Builder() {
    	      // Empty
        }

        public Builder(HDInsightOnDemandLinkedServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalLinkedServiceNames = defaults.additionalLinkedServiceNames;
    	      this.annotations = defaults.annotations;
    	      this.clusterNamePrefix = defaults.clusterNamePrefix;
    	      this.clusterPassword = defaults.clusterPassword;
    	      this.clusterResourceGroup = defaults.clusterResourceGroup;
    	      this.clusterSize = defaults.clusterSize;
    	      this.clusterSshPassword = defaults.clusterSshPassword;
    	      this.clusterSshUserName = defaults.clusterSshUserName;
    	      this.clusterType = defaults.clusterType;
    	      this.clusterUserName = defaults.clusterUserName;
    	      this.connectVia = defaults.connectVia;
    	      this.coreConfiguration = defaults.coreConfiguration;
    	      this.credential = defaults.credential;
    	      this.dataNodeSize = defaults.dataNodeSize;
    	      this.description = defaults.description;
    	      this.encryptedCredential = defaults.encryptedCredential;
    	      this.hBaseConfiguration = defaults.hBaseConfiguration;
    	      this.hcatalogLinkedServiceName = defaults.hcatalogLinkedServiceName;
    	      this.hdfsConfiguration = defaults.hdfsConfiguration;
    	      this.headNodeSize = defaults.headNodeSize;
    	      this.hiveConfiguration = defaults.hiveConfiguration;
    	      this.hostSubscriptionId = defaults.hostSubscriptionId;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.mapReduceConfiguration = defaults.mapReduceConfiguration;
    	      this.oozieConfiguration = defaults.oozieConfiguration;
    	      this.parameters = defaults.parameters;
    	      this.scriptActions = defaults.scriptActions;
    	      this.servicePrincipalId = defaults.servicePrincipalId;
    	      this.servicePrincipalKey = defaults.servicePrincipalKey;
    	      this.sparkVersion = defaults.sparkVersion;
    	      this.stormConfiguration = defaults.stormConfiguration;
    	      this.subnetName = defaults.subnetName;
    	      this.tenant = defaults.tenant;
    	      this.timeToLive = defaults.timeToLive;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
    	      this.virtualNetworkId = defaults.virtualNetworkId;
    	      this.yarnConfiguration = defaults.yarnConfiguration;
    	      this.zookeeperNodeSize = defaults.zookeeperNodeSize;
        }

        public Builder additionalLinkedServiceNames(@Nullable Output<List<LinkedServiceReferenceArgs>> additionalLinkedServiceNames) {
            this.additionalLinkedServiceNames = additionalLinkedServiceNames;
            return this;
        }

        public Builder additionalLinkedServiceNames(@Nullable List<LinkedServiceReferenceArgs> additionalLinkedServiceNames) {
            this.additionalLinkedServiceNames = Output.ofNullable(additionalLinkedServiceNames);
            return this;
        }

        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            this.annotations = annotations;
            return this;
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = Output.ofNullable(annotations);
            return this;
        }

        public Builder clusterNamePrefix(@Nullable Output<Object> clusterNamePrefix) {
            this.clusterNamePrefix = clusterNamePrefix;
            return this;
        }

        public Builder clusterNamePrefix(@Nullable Object clusterNamePrefix) {
            this.clusterNamePrefix = Output.ofNullable(clusterNamePrefix);
            return this;
        }

        public Builder clusterPassword(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> clusterPassword) {
            this.clusterPassword = clusterPassword;
            return this;
        }

        public Builder clusterPassword(@Nullable Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> clusterPassword) {
            this.clusterPassword = Output.ofNullable(clusterPassword);
            return this;
        }

        public Builder clusterResourceGroup(Output<Object> clusterResourceGroup) {
            this.clusterResourceGroup = Objects.requireNonNull(clusterResourceGroup);
            return this;
        }

        public Builder clusterResourceGroup(Object clusterResourceGroup) {
            this.clusterResourceGroup = Output.of(Objects.requireNonNull(clusterResourceGroup));
            return this;
        }

        public Builder clusterSize(Output<Object> clusterSize) {
            this.clusterSize = Objects.requireNonNull(clusterSize);
            return this;
        }

        public Builder clusterSize(Object clusterSize) {
            this.clusterSize = Output.of(Objects.requireNonNull(clusterSize));
            return this;
        }

        public Builder clusterSshPassword(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> clusterSshPassword) {
            this.clusterSshPassword = clusterSshPassword;
            return this;
        }

        public Builder clusterSshPassword(@Nullable Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> clusterSshPassword) {
            this.clusterSshPassword = Output.ofNullable(clusterSshPassword);
            return this;
        }

        public Builder clusterSshUserName(@Nullable Output<Object> clusterSshUserName) {
            this.clusterSshUserName = clusterSshUserName;
            return this;
        }

        public Builder clusterSshUserName(@Nullable Object clusterSshUserName) {
            this.clusterSshUserName = Output.ofNullable(clusterSshUserName);
            return this;
        }

        public Builder clusterType(@Nullable Output<Object> clusterType) {
            this.clusterType = clusterType;
            return this;
        }

        public Builder clusterType(@Nullable Object clusterType) {
            this.clusterType = Output.ofNullable(clusterType);
            return this;
        }

        public Builder clusterUserName(@Nullable Output<Object> clusterUserName) {
            this.clusterUserName = clusterUserName;
            return this;
        }

        public Builder clusterUserName(@Nullable Object clusterUserName) {
            this.clusterUserName = Output.ofNullable(clusterUserName);
            return this;
        }

        public Builder connectVia(@Nullable Output<IntegrationRuntimeReferenceArgs> connectVia) {
            this.connectVia = connectVia;
            return this;
        }

        public Builder connectVia(@Nullable IntegrationRuntimeReferenceArgs connectVia) {
            this.connectVia = Output.ofNullable(connectVia);
            return this;
        }

        public Builder coreConfiguration(@Nullable Output<Object> coreConfiguration) {
            this.coreConfiguration = coreConfiguration;
            return this;
        }

        public Builder coreConfiguration(@Nullable Object coreConfiguration) {
            this.coreConfiguration = Output.ofNullable(coreConfiguration);
            return this;
        }

        public Builder credential(@Nullable Output<CredentialReferenceArgs> credential) {
            this.credential = credential;
            return this;
        }

        public Builder credential(@Nullable CredentialReferenceArgs credential) {
            this.credential = Output.ofNullable(credential);
            return this;
        }

        public Builder dataNodeSize(@Nullable Output<Object> dataNodeSize) {
            this.dataNodeSize = dataNodeSize;
            return this;
        }

        public Builder dataNodeSize(@Nullable Object dataNodeSize) {
            this.dataNodeSize = Output.ofNullable(dataNodeSize);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder encryptedCredential(@Nullable Output<Object> encryptedCredential) {
            this.encryptedCredential = encryptedCredential;
            return this;
        }

        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            this.encryptedCredential = Output.ofNullable(encryptedCredential);
            return this;
        }

        public Builder hBaseConfiguration(@Nullable Output<Object> hBaseConfiguration) {
            this.hBaseConfiguration = hBaseConfiguration;
            return this;
        }

        public Builder hBaseConfiguration(@Nullable Object hBaseConfiguration) {
            this.hBaseConfiguration = Output.ofNullable(hBaseConfiguration);
            return this;
        }

        public Builder hcatalogLinkedServiceName(@Nullable Output<LinkedServiceReferenceArgs> hcatalogLinkedServiceName) {
            this.hcatalogLinkedServiceName = hcatalogLinkedServiceName;
            return this;
        }

        public Builder hcatalogLinkedServiceName(@Nullable LinkedServiceReferenceArgs hcatalogLinkedServiceName) {
            this.hcatalogLinkedServiceName = Output.ofNullable(hcatalogLinkedServiceName);
            return this;
        }

        public Builder hdfsConfiguration(@Nullable Output<Object> hdfsConfiguration) {
            this.hdfsConfiguration = hdfsConfiguration;
            return this;
        }

        public Builder hdfsConfiguration(@Nullable Object hdfsConfiguration) {
            this.hdfsConfiguration = Output.ofNullable(hdfsConfiguration);
            return this;
        }

        public Builder headNodeSize(@Nullable Output<Object> headNodeSize) {
            this.headNodeSize = headNodeSize;
            return this;
        }

        public Builder headNodeSize(@Nullable Object headNodeSize) {
            this.headNodeSize = Output.ofNullable(headNodeSize);
            return this;
        }

        public Builder hiveConfiguration(@Nullable Output<Object> hiveConfiguration) {
            this.hiveConfiguration = hiveConfiguration;
            return this;
        }

        public Builder hiveConfiguration(@Nullable Object hiveConfiguration) {
            this.hiveConfiguration = Output.ofNullable(hiveConfiguration);
            return this;
        }

        public Builder hostSubscriptionId(Output<Object> hostSubscriptionId) {
            this.hostSubscriptionId = Objects.requireNonNull(hostSubscriptionId);
            return this;
        }

        public Builder hostSubscriptionId(Object hostSubscriptionId) {
            this.hostSubscriptionId = Output.of(Objects.requireNonNull(hostSubscriptionId));
            return this;
        }

        public Builder linkedServiceName(Output<LinkedServiceReferenceArgs> linkedServiceName) {
            this.linkedServiceName = Objects.requireNonNull(linkedServiceName);
            return this;
        }

        public Builder linkedServiceName(LinkedServiceReferenceArgs linkedServiceName) {
            this.linkedServiceName = Output.of(Objects.requireNonNull(linkedServiceName));
            return this;
        }

        public Builder mapReduceConfiguration(@Nullable Output<Object> mapReduceConfiguration) {
            this.mapReduceConfiguration = mapReduceConfiguration;
            return this;
        }

        public Builder mapReduceConfiguration(@Nullable Object mapReduceConfiguration) {
            this.mapReduceConfiguration = Output.ofNullable(mapReduceConfiguration);
            return this;
        }

        public Builder oozieConfiguration(@Nullable Output<Object> oozieConfiguration) {
            this.oozieConfiguration = oozieConfiguration;
            return this;
        }

        public Builder oozieConfiguration(@Nullable Object oozieConfiguration) {
            this.oozieConfiguration = Output.ofNullable(oozieConfiguration);
            return this;
        }

        public Builder parameters(@Nullable Output<Map<String,ParameterSpecificationArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Map<String,ParameterSpecificationArgs> parameters) {
            this.parameters = Output.ofNullable(parameters);
            return this;
        }

        public Builder scriptActions(@Nullable Output<List<ScriptActionArgs>> scriptActions) {
            this.scriptActions = scriptActions;
            return this;
        }

        public Builder scriptActions(@Nullable List<ScriptActionArgs> scriptActions) {
            this.scriptActions = Output.ofNullable(scriptActions);
            return this;
        }

        public Builder servicePrincipalId(@Nullable Output<Object> servicePrincipalId) {
            this.servicePrincipalId = servicePrincipalId;
            return this;
        }

        public Builder servicePrincipalId(@Nullable Object servicePrincipalId) {
            this.servicePrincipalId = Output.ofNullable(servicePrincipalId);
            return this;
        }

        public Builder servicePrincipalKey(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> servicePrincipalKey) {
            this.servicePrincipalKey = servicePrincipalKey;
            return this;
        }

        public Builder servicePrincipalKey(@Nullable Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> servicePrincipalKey) {
            this.servicePrincipalKey = Output.ofNullable(servicePrincipalKey);
            return this;
        }

        public Builder sparkVersion(@Nullable Output<Object> sparkVersion) {
            this.sparkVersion = sparkVersion;
            return this;
        }

        public Builder sparkVersion(@Nullable Object sparkVersion) {
            this.sparkVersion = Output.ofNullable(sparkVersion);
            return this;
        }

        public Builder stormConfiguration(@Nullable Output<Object> stormConfiguration) {
            this.stormConfiguration = stormConfiguration;
            return this;
        }

        public Builder stormConfiguration(@Nullable Object stormConfiguration) {
            this.stormConfiguration = Output.ofNullable(stormConfiguration);
            return this;
        }

        public Builder subnetName(@Nullable Output<Object> subnetName) {
            this.subnetName = subnetName;
            return this;
        }

        public Builder subnetName(@Nullable Object subnetName) {
            this.subnetName = Output.ofNullable(subnetName);
            return this;
        }

        public Builder tenant(Output<Object> tenant) {
            this.tenant = Objects.requireNonNull(tenant);
            return this;
        }

        public Builder tenant(Object tenant) {
            this.tenant = Output.of(Objects.requireNonNull(tenant));
            return this;
        }

        public Builder timeToLive(Output<Object> timeToLive) {
            this.timeToLive = Objects.requireNonNull(timeToLive);
            return this;
        }

        public Builder timeToLive(Object timeToLive) {
            this.timeToLive = Output.of(Objects.requireNonNull(timeToLive));
            return this;
        }

        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder version(Output<Object> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public Builder version(Object version) {
            this.version = Output.of(Objects.requireNonNull(version));
            return this;
        }

        public Builder virtualNetworkId(@Nullable Output<Object> virtualNetworkId) {
            this.virtualNetworkId = virtualNetworkId;
            return this;
        }

        public Builder virtualNetworkId(@Nullable Object virtualNetworkId) {
            this.virtualNetworkId = Output.ofNullable(virtualNetworkId);
            return this;
        }

        public Builder yarnConfiguration(@Nullable Output<Object> yarnConfiguration) {
            this.yarnConfiguration = yarnConfiguration;
            return this;
        }

        public Builder yarnConfiguration(@Nullable Object yarnConfiguration) {
            this.yarnConfiguration = Output.ofNullable(yarnConfiguration);
            return this;
        }

        public Builder zookeeperNodeSize(@Nullable Output<Object> zookeeperNodeSize) {
            this.zookeeperNodeSize = zookeeperNodeSize;
            return this;
        }

        public Builder zookeeperNodeSize(@Nullable Object zookeeperNodeSize) {
            this.zookeeperNodeSize = Output.ofNullable(zookeeperNodeSize);
            return this;
        }
        public HDInsightOnDemandLinkedServiceArgs build() {
            return new HDInsightOnDemandLinkedServiceArgs(additionalLinkedServiceNames, annotations, clusterNamePrefix, clusterPassword, clusterResourceGroup, clusterSize, clusterSshPassword, clusterSshUserName, clusterType, clusterUserName, connectVia, coreConfiguration, credential, dataNodeSize, description, encryptedCredential, hBaseConfiguration, hcatalogLinkedServiceName, hdfsConfiguration, headNodeSize, hiveConfiguration, hostSubscriptionId, linkedServiceName, mapReduceConfiguration, oozieConfiguration, parameters, scriptActions, servicePrincipalId, servicePrincipalKey, sparkVersion, stormConfiguration, subnetName, tenant, timeToLive, type, version, virtualNetworkId, yarnConfiguration, zookeeperNodeSize);
        }
    }
}
