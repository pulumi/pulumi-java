// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.enums.ContentKeyPolicyRestrictionTokenType;
import io.pulumi.azurenative.media.inputs.ContentKeyPolicyRsaTokenKeyArgs;
import io.pulumi.azurenative.media.inputs.ContentKeyPolicySymmetricTokenKeyArgs;
import io.pulumi.azurenative.media.inputs.ContentKeyPolicyTokenClaimArgs;
import io.pulumi.azurenative.media.inputs.ContentKeyPolicyX509CertificateTokenKeyArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a token restriction. Provided token must match these requirements for successful license or key delivery.
 * 
 */
public final class ContentKeyPolicyTokenRestrictionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContentKeyPolicyTokenRestrictionArgs Empty = new ContentKeyPolicyTokenRestrictionArgs();

    /**
     * A list of alternative verification keys.
     * 
     */
    @Import(name="alternateVerificationKeys")
      private final @Nullable Output<List<Object>> alternateVerificationKeys;

    public Output<List<Object>> getAlternateVerificationKeys() {
        return this.alternateVerificationKeys == null ? Output.empty() : this.alternateVerificationKeys;
    }

    /**
     * The audience for the token.
     * 
     */
    @Import(name="audience", required=true)
      private final Output<String> audience;

    public Output<String> getAudience() {
        return this.audience;
    }

    /**
     * The token issuer.
     * 
     */
    @Import(name="issuer", required=true)
      private final Output<String> issuer;

    public Output<String> getIssuer() {
        return this.issuer;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.Media.ContentKeyPolicyTokenRestriction'.
     * 
     */
    @Import(name="odataType", required=true)
      private final Output<String> odataType;

    public Output<String> getOdataType() {
        return this.odataType;
    }

    /**
     * The OpenID connect discovery document.
     * 
     */
    @Import(name="openIdConnectDiscoveryDocument")
      private final @Nullable Output<String> openIdConnectDiscoveryDocument;

    public Output<String> getOpenIdConnectDiscoveryDocument() {
        return this.openIdConnectDiscoveryDocument == null ? Output.empty() : this.openIdConnectDiscoveryDocument;
    }

    /**
     * The primary verification key.
     * 
     */
    @Import(name="primaryVerificationKey", required=true)
      private final Output<Object> primaryVerificationKey;

    public Output<Object> getPrimaryVerificationKey() {
        return this.primaryVerificationKey;
    }

    /**
     * A list of required token claims.
     * 
     */
    @Import(name="requiredClaims")
      private final @Nullable Output<List<ContentKeyPolicyTokenClaimArgs>> requiredClaims;

    public Output<List<ContentKeyPolicyTokenClaimArgs>> getRequiredClaims() {
        return this.requiredClaims == null ? Output.empty() : this.requiredClaims;
    }

    /**
     * The type of token.
     * 
     */
    @Import(name="restrictionTokenType", required=true)
      private final Output<Either<String,ContentKeyPolicyRestrictionTokenType>> restrictionTokenType;

    public Output<Either<String,ContentKeyPolicyRestrictionTokenType>> getRestrictionTokenType() {
        return this.restrictionTokenType;
    }

    public ContentKeyPolicyTokenRestrictionArgs(
        @Nullable Output<List<Object>> alternateVerificationKeys,
        Output<String> audience,
        Output<String> issuer,
        Output<String> odataType,
        @Nullable Output<String> openIdConnectDiscoveryDocument,
        Output<Object> primaryVerificationKey,
        @Nullable Output<List<ContentKeyPolicyTokenClaimArgs>> requiredClaims,
        Output<Either<String,ContentKeyPolicyRestrictionTokenType>> restrictionTokenType) {
        this.alternateVerificationKeys = alternateVerificationKeys;
        this.audience = Objects.requireNonNull(audience, "expected parameter 'audience' to be non-null");
        this.issuer = Objects.requireNonNull(issuer, "expected parameter 'issuer' to be non-null");
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.openIdConnectDiscoveryDocument = openIdConnectDiscoveryDocument;
        this.primaryVerificationKey = Objects.requireNonNull(primaryVerificationKey, "expected parameter 'primaryVerificationKey' to be non-null");
        this.requiredClaims = requiredClaims;
        this.restrictionTokenType = Objects.requireNonNull(restrictionTokenType, "expected parameter 'restrictionTokenType' to be non-null");
    }

    private ContentKeyPolicyTokenRestrictionArgs() {
        this.alternateVerificationKeys = Output.empty();
        this.audience = Output.empty();
        this.issuer = Output.empty();
        this.odataType = Output.empty();
        this.openIdConnectDiscoveryDocument = Output.empty();
        this.primaryVerificationKey = Output.empty();
        this.requiredClaims = Output.empty();
        this.restrictionTokenType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContentKeyPolicyTokenRestrictionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Object>> alternateVerificationKeys;
        private Output<String> audience;
        private Output<String> issuer;
        private Output<String> odataType;
        private @Nullable Output<String> openIdConnectDiscoveryDocument;
        private Output<Object> primaryVerificationKey;
        private @Nullable Output<List<ContentKeyPolicyTokenClaimArgs>> requiredClaims;
        private Output<Either<String,ContentKeyPolicyRestrictionTokenType>> restrictionTokenType;

        public Builder() {
    	      // Empty
        }

        public Builder(ContentKeyPolicyTokenRestrictionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternateVerificationKeys = defaults.alternateVerificationKeys;
    	      this.audience = defaults.audience;
    	      this.issuer = defaults.issuer;
    	      this.odataType = defaults.odataType;
    	      this.openIdConnectDiscoveryDocument = defaults.openIdConnectDiscoveryDocument;
    	      this.primaryVerificationKey = defaults.primaryVerificationKey;
    	      this.requiredClaims = defaults.requiredClaims;
    	      this.restrictionTokenType = defaults.restrictionTokenType;
        }

        public Builder alternateVerificationKeys(@Nullable Output<List<Object>> alternateVerificationKeys) {
            this.alternateVerificationKeys = alternateVerificationKeys;
            return this;
        }
        public Builder alternateVerificationKeys(@Nullable List<Object> alternateVerificationKeys) {
            this.alternateVerificationKeys = Output.ofNullable(alternateVerificationKeys);
            return this;
        }
        public Builder alternateVerificationKeys(Object... alternateVerificationKeys) {
            return alternateVerificationKeys(List.of(alternateVerificationKeys));
        }
        public Builder audience(Output<String> audience) {
            this.audience = Objects.requireNonNull(audience);
            return this;
        }
        public Builder audience(String audience) {
            this.audience = Output.of(Objects.requireNonNull(audience));
            return this;
        }
        public Builder issuer(Output<String> issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        public Builder issuer(String issuer) {
            this.issuer = Output.of(Objects.requireNonNull(issuer));
            return this;
        }
        public Builder odataType(Output<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }
        public Builder odataType(String odataType) {
            this.odataType = Output.of(Objects.requireNonNull(odataType));
            return this;
        }
        public Builder openIdConnectDiscoveryDocument(@Nullable Output<String> openIdConnectDiscoveryDocument) {
            this.openIdConnectDiscoveryDocument = openIdConnectDiscoveryDocument;
            return this;
        }
        public Builder openIdConnectDiscoveryDocument(@Nullable String openIdConnectDiscoveryDocument) {
            this.openIdConnectDiscoveryDocument = Output.ofNullable(openIdConnectDiscoveryDocument);
            return this;
        }
        public Builder primaryVerificationKey(Output<Object> primaryVerificationKey) {
            this.primaryVerificationKey = Objects.requireNonNull(primaryVerificationKey);
            return this;
        }
        public Builder primaryVerificationKey(Object primaryVerificationKey) {
            this.primaryVerificationKey = Output.of(Objects.requireNonNull(primaryVerificationKey));
            return this;
        }
        public Builder requiredClaims(@Nullable Output<List<ContentKeyPolicyTokenClaimArgs>> requiredClaims) {
            this.requiredClaims = requiredClaims;
            return this;
        }
        public Builder requiredClaims(@Nullable List<ContentKeyPolicyTokenClaimArgs> requiredClaims) {
            this.requiredClaims = Output.ofNullable(requiredClaims);
            return this;
        }
        public Builder requiredClaims(ContentKeyPolicyTokenClaimArgs... requiredClaims) {
            return requiredClaims(List.of(requiredClaims));
        }
        public Builder restrictionTokenType(Output<Either<String,ContentKeyPolicyRestrictionTokenType>> restrictionTokenType) {
            this.restrictionTokenType = Objects.requireNonNull(restrictionTokenType);
            return this;
        }
        public Builder restrictionTokenType(Either<String,ContentKeyPolicyRestrictionTokenType> restrictionTokenType) {
            this.restrictionTokenType = Output.of(Objects.requireNonNull(restrictionTokenType));
            return this;
        }        public ContentKeyPolicyTokenRestrictionArgs build() {
            return new ContentKeyPolicyTokenRestrictionArgs(alternateVerificationKeys, audience, issuer, odataType, openIdConnectDiscoveryDocument, primaryVerificationKey, requiredClaims, restrictionTokenType);
        }
    }
}
