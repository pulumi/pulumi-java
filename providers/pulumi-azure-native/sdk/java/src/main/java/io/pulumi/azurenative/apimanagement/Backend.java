// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.apimanagement.BackendArgs;
import io.pulumi.azurenative.apimanagement.outputs.BackendCredentialsContractResponse;
import io.pulumi.azurenative.apimanagement.outputs.BackendPropertiesResponse;
import io.pulumi.azurenative.apimanagement.outputs.BackendProxyContractResponse;
import io.pulumi.azurenative.apimanagement.outputs.BackendTlsPropertiesResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Backend details.
 * API Version: 2020-12-01.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### ApiManagementCreateBackendProxyBackend
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var backend = new AzureNative.ApiManagement.Backend("backend", new AzureNative.ApiManagement.BackendArgs
 *         {
 *             BackendId = "proxybackend",
 *             Credentials = new AzureNative.ApiManagement.Inputs.BackendCredentialsContractArgs
 *             {
 *                 Authorization = new AzureNative.ApiManagement.Inputs.BackendAuthorizationHeaderCredentialsArgs
 *                 {
 *                     Parameter = "opensesma",
 *                     Scheme = "Basic",
 *                 },
 *                 Header = 
 *                 {
 *                     { "x-my-1", 
 *                     {
 *                         "val1",
 *                         "val2",
 *                     } },
 *                 },
 *                 Query = 
 *                 {
 *                     { "sv", 
 *                     {
 *                         "xx",
 *                         "bb",
 *                         "cc",
 *                     } },
 *                 },
 *             },
 *             Description = "description5308",
 *             Protocol = "http",
 *             Proxy = new AzureNative.ApiManagement.Inputs.BackendProxyContractArgs
 *             {
 *                 Password = "<password>",
 *                 Url = "http://192.168.1.1:8080",
 *                 Username = "Contoso\\admin",
 *             },
 *             ResourceGroupName = "rg1",
 *             ServiceName = "apimService1",
 *             Tls = new AzureNative.ApiManagement.Inputs.BackendTlsPropertiesArgs
 *             {
 *                 ValidateCertificateChain = true,
 *                 ValidateCertificateName = true,
 *             },
 *             Url = "https://backendname2644/",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	apimanagement "github.com/pulumi/pulumi-azure-native/sdk/go/azure/apimanagement"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := apimanagement.NewBackend(ctx, "backend", &apimanagement.BackendArgs{
 * 			BackendId: pulumi.String("proxybackend"),
 * 			Credentials: &apimanagement.BackendCredentialsContractArgs{
 * 				Authorization: &apimanagement.BackendAuthorizationHeaderCredentialsArgs{
 * 					Parameter: pulumi.String("opensesma"),
 * 					Scheme:    pulumi.String("Basic"),
 * 				},
 * 				Header: pulumi.StringArrayMap{
 * 					"x-my-1": pulumi.StringArray{
 * 						pulumi.String("val1"),
 * 						pulumi.String("val2"),
 * 					},
 * 				},
 * 				Query: pulumi.StringArrayMap{
 * 					"sv": pulumi.StringArray{
 * 						pulumi.String("xx"),
 * 						pulumi.String("bb"),
 * 						pulumi.String("cc"),
 * 					},
 * 				},
 * 			},
 * 			Description: pulumi.String("description5308"),
 * 			Protocol:    pulumi.String("http"),
 * 			Proxy: &apimanagement.BackendProxyContractArgs{
 * 				Password: pulumi.String("<password>"),
 * 				Url:      pulumi.String("http://192.168.1.1:8080"),
 * 				Username: pulumi.String("Contoso\\admin"),
 * 			},
 * 			ResourceGroupName: pulumi.String("rg1"),
 * 			ServiceName:       pulumi.String("apimService1"),
 * 			Tls: &apimanagement.BackendTlsPropertiesArgs{
 * 				ValidateCertificateChain: pulumi.Bool(true),
 * 				ValidateCertificateName:  pulumi.Bool(true),
 * 			},
 * 			Url: pulumi.String("https://backendname2644/"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const backend = new azure_native.apimanagement.Backend("backend", {
 *     backendId: "proxybackend",
 *     credentials: {
 *         authorization: {
 *             parameter: "opensesma",
 *             scheme: "Basic",
 *         },
 *         header: {
 *             "x-my-1": [
 *                 "val1",
 *                 "val2",
 *             ],
 *         },
 *         query: {
 *             sv: [
 *                 "xx",
 *                 "bb",
 *                 "cc",
 *             ],
 *         },
 *     },
 *     description: "description5308",
 *     protocol: "http",
 *     proxy: {
 *         password: "<password>",
 *         url: "http://192.168.1.1:8080",
 *         username: "Contoso\\admin",
 *     },
 *     resourceGroupName: "rg1",
 *     serviceName: "apimService1",
 *     tls: {
 *         validateCertificateChain: true,
 *         validateCertificateName: true,
 *     },
 *     url: "https://backendname2644/",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * backend = azure_native.apimanagement.Backend("backend",
 *     backend_id="proxybackend",
 *     credentials=azure_native.apimanagement.BackendCredentialsContractArgs(
 *         authorization=azure_native.apimanagement.BackendAuthorizationHeaderCredentialsArgs(
 *             parameter="opensesma",
 *             scheme="Basic",
 *         ),
 *         header={
 *             "x-my-1": [
 *                 "val1",
 *                 "val2",
 *             ],
 *         },
 *         query={
 *             "sv": [
 *                 "xx",
 *                 "bb",
 *                 "cc",
 *             ],
 *         },
 *     ),
 *     description="description5308",
 *     protocol="http",
 *     proxy=azure_native.apimanagement.BackendProxyContractArgs(
 *         password="<password>",
 *         url="http://192.168.1.1:8080",
 *         username="Contoso\\admin",
 *     ),
 *     resource_group_name="rg1",
 *     service_name="apimService1",
 *     tls=azure_native.apimanagement.BackendTlsPropertiesArgs(
 *         validate_certificate_chain=True,
 *         validate_certificate_name=True,
 *     ),
 *     url="https://backendname2644/")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### ApiManagementCreateBackendServiceFabric
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var backend = new AzureNative.ApiManagement.Backend("backend", new AzureNative.ApiManagement.BackendArgs
 *         {
 *             BackendId = "sfbackend",
 *             Description = "Service Fabric Test App 1",
 *             Properties = new AzureNative.ApiManagement.Inputs.BackendPropertiesArgs
 *             {
 *                 ServiceFabricCluster = new AzureNative.ApiManagement.Inputs.BackendServiceFabricClusterPropertiesArgs
 *                 {
 *                     ClientCertificateId = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1",
 *                     ManagementEndpoints = 
 *                     {
 *                         "https://somecluster.com",
 *                     },
 *                     MaxPartitionResolutionRetries = 5,
 *                     ServerX509Names = 
 *                     {
 *                         new AzureNative.ApiManagement.Inputs.X509CertificateNameArgs
 *                         {
 *                             IssuerCertificateThumbprint = "IssuerCertificateThumbprint1",
 *                             Name = "ServerCommonName1",
 *                         },
 *                     },
 *                 },
 *             },
 *             Protocol = "http",
 *             ResourceGroupName = "rg1",
 *             ServiceName = "apimService1",
 *             Url = "fabric:/mytestapp/mytestservice",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	apimanagement "github.com/pulumi/pulumi-azure-native/sdk/go/azure/apimanagement"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := apimanagement.NewBackend(ctx, "backend", &apimanagement.BackendArgs{
 * 			BackendId:   pulumi.String("sfbackend"),
 * 			Description: pulumi.String("Service Fabric Test App 1"),
 * 			Properties: &apimanagement.BackendPropertiesArgs{
 * 				ServiceFabricCluster: &apimanagement.BackendServiceFabricClusterPropertiesArgs{
 * 					ClientCertificateId: pulumi.String("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
 * 					ManagementEndpoints: pulumi.StringArray{
 * 						pulumi.String("https://somecluster.com"),
 * 					},
 * 					MaxPartitionResolutionRetries: pulumi.Int(5),
 * 					ServerX509Names: apimanagement.X509CertificateNameArray{
 * 						&apimanagement.X509CertificateNameArgs{
 * 							IssuerCertificateThumbprint: pulumi.String("IssuerCertificateThumbprint1"),
 * 							Name:                        pulumi.String("ServerCommonName1"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Protocol:          pulumi.String("http"),
 * 			ResourceGroupName: pulumi.String("rg1"),
 * 			ServiceName:       pulumi.String("apimService1"),
 * 			Url:               pulumi.String("fabric:/mytestapp/mytestservice"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const backend = new azure_native.apimanagement.Backend("backend", {
 *     backendId: "sfbackend",
 *     description: "Service Fabric Test App 1",
 *     properties: {
 *         serviceFabricCluster: {
 *             clientCertificateId: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1",
 *             managementEndpoints: ["https://somecluster.com"],
 *             maxPartitionResolutionRetries: 5,
 *             serverX509Names: [{
 *                 issuerCertificateThumbprint: "IssuerCertificateThumbprint1",
 *                 name: "ServerCommonName1",
 *             }],
 *         },
 *     },
 *     protocol: "http",
 *     resourceGroupName: "rg1",
 *     serviceName: "apimService1",
 *     url: "fabric:/mytestapp/mytestservice",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * backend = azure_native.apimanagement.Backend("backend",
 *     backend_id="sfbackend",
 *     description="Service Fabric Test App 1",
 *     properties=azure_native.apimanagement.BackendPropertiesArgs(
 *         service_fabric_cluster=azure_native.apimanagement.BackendServiceFabricClusterPropertiesArgs(
 *             client_certificate_id="/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1",
 *             management_endpoints=["https://somecluster.com"],
 *             max_partition_resolution_retries=5,
 *             server_x509_names=[azure_native.apimanagement.X509CertificateNameArgs(
 *                 issuer_certificate_thumbprint="IssuerCertificateThumbprint1",
 *                 name="ServerCommonName1",
 *             )],
 *         ),
 *     ),
 *     protocol="http",
 *     resource_group_name="rg1",
 *     service_name="apimService1",
 *     url="fabric:/mytestapp/mytestservice")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:apimanagement:Backend sfbackend /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/sfbackend 
 * ```
 * 
 */
@ResourceType(type="azure-native:apimanagement:Backend")
public class Backend extends io.pulumi.resources.CustomResource {
    /**
     * Backend Credentials Contract Properties
     */
    @Export(name="credentials", type=BackendCredentialsContractResponse.class, parameters={})
    private Output</* @Nullable */ BackendCredentialsContractResponse> credentials;

    /**
     * @return Backend Credentials Contract Properties
     */
    public Output</* @Nullable */ BackendCredentialsContractResponse> getCredentials() {
        return this.credentials;
    }
    /**
     * Backend Description.
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Backend Description.
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Resource name.
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Backend Properties contract
     */
    @Export(name="properties", type=BackendPropertiesResponse.class, parameters={})
    private Output<BackendPropertiesResponse> properties;

    /**
     * @return Backend Properties contract
     */
    public Output<BackendPropertiesResponse> getProperties() {
        return this.properties;
    }
    /**
     * Backend communication protocol.
     */
    @Export(name="protocol", type=String.class, parameters={})
    private Output<String> protocol;

    /**
     * @return Backend communication protocol.
     */
    public Output<String> getProtocol() {
        return this.protocol;
    }
    /**
     * Backend Proxy Contract Properties
     */
    @Export(name="proxy", type=BackendProxyContractResponse.class, parameters={})
    private Output</* @Nullable */ BackendProxyContractResponse> proxy;

    /**
     * @return Backend Proxy Contract Properties
     */
    public Output</* @Nullable */ BackendProxyContractResponse> getProxy() {
        return this.proxy;
    }
    /**
     * Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
     */
    @Export(name="resourceId", type=String.class, parameters={})
    private Output</* @Nullable */ String> resourceId;

    /**
     * @return Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
     */
    public Output</* @Nullable */ String> getResourceId() {
        return this.resourceId;
    }
    /**
     * Backend Title.
     */
    @Export(name="title", type=String.class, parameters={})
    private Output</* @Nullable */ String> title;

    /**
     * @return Backend Title.
     */
    public Output</* @Nullable */ String> getTitle() {
        return this.title;
    }
    /**
     * Backend TLS Properties
     */
    @Export(name="tls", type=BackendTlsPropertiesResponse.class, parameters={})
    private Output</* @Nullable */ BackendTlsPropertiesResponse> tls;

    /**
     * @return Backend TLS Properties
     */
    public Output</* @Nullable */ BackendTlsPropertiesResponse> getTls() {
        return this.tls;
    }
    /**
     * Resource type for API Management resource.
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type for API Management resource.
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * Runtime Url of the Backend.
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return Runtime Url of the Backend.
     */
    public Output<String> getUrl() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Backend(String name) {
        this(name, BackendArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Backend(String name, BackendArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Backend(String name, BackendArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:apimanagement:Backend", name, args == null ? BackendArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Backend(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:apimanagement:Backend", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:apimanagement/v20160707:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20161010:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20170301:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20180101:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20180601preview:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20190101:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20191201:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20191201preview:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20200601preview:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20201201:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20210101preview:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20210401preview:Backend").build()),
                Output.of(Alias.builder().type("azure-native:apimanagement/v20210801:Backend").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Backend get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Backend(name, id, options);
    }
}
