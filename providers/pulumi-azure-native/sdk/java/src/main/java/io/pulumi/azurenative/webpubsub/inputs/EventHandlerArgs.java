// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.webpubsub.inputs;

import io.pulumi.azurenative.webpubsub.inputs.UpstreamAuthSettingsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Properties of event handler.
 * 
 */
public final class EventHandlerArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventHandlerArgs Empty = new EventHandlerArgs();

    /**
     * Upstream auth settings. If not set, no auth is used for upstream messages.
     * 
     */
    @Import(name="auth")
      private final @Nullable Output<UpstreamAuthSettingsArgs> auth;

    public Output<UpstreamAuthSettingsArgs> auth() {
        return this.auth == null ? Codegen.empty() : this.auth;
    }

    /**
     * Gets ot sets the list of system events.
     * 
     */
    @Import(name="systemEvents")
      private final @Nullable Output<List<String>> systemEvents;

    public Output<List<String>> systemEvents() {
        return this.systemEvents == null ? Codegen.empty() : this.systemEvents;
    }

    /**
     * Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
     * For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters.
     * 
     */
    @Import(name="urlTemplate", required=true)
      private final Output<String> urlTemplate;

    public Output<String> urlTemplate() {
        return this.urlTemplate;
    }

    /**
     * Gets or sets the matching pattern for event names.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any event name
     *     2. Combine multiple events with ",", for example "event1,event2", it matches event "event1" and "event2"
     *     3. The single event name, for example, "event1", it matches "event1"
     * 
     */
    @Import(name="userEventPattern")
      private final @Nullable Output<String> userEventPattern;

    public Output<String> userEventPattern() {
        return this.userEventPattern == null ? Codegen.empty() : this.userEventPattern;
    }

    public EventHandlerArgs(
        @Nullable Output<UpstreamAuthSettingsArgs> auth,
        @Nullable Output<List<String>> systemEvents,
        Output<String> urlTemplate,
        @Nullable Output<String> userEventPattern) {
        this.auth = auth;
        this.systemEvents = systemEvents;
        this.urlTemplate = Objects.requireNonNull(urlTemplate, "expected parameter 'urlTemplate' to be non-null");
        this.userEventPattern = userEventPattern;
    }

    private EventHandlerArgs() {
        this.auth = Codegen.empty();
        this.systemEvents = Codegen.empty();
        this.urlTemplate = Codegen.empty();
        this.userEventPattern = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventHandlerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<UpstreamAuthSettingsArgs> auth;
        private @Nullable Output<List<String>> systemEvents;
        private Output<String> urlTemplate;
        private @Nullable Output<String> userEventPattern;

        public Builder() {
    	      // Empty
        }

        public Builder(EventHandlerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auth = defaults.auth;
    	      this.systemEvents = defaults.systemEvents;
    	      this.urlTemplate = defaults.urlTemplate;
    	      this.userEventPattern = defaults.userEventPattern;
        }

        public Builder auth(@Nullable Output<UpstreamAuthSettingsArgs> auth) {
            this.auth = auth;
            return this;
        }
        public Builder auth(@Nullable UpstreamAuthSettingsArgs auth) {
            this.auth = Codegen.ofNullable(auth);
            return this;
        }
        public Builder systemEvents(@Nullable Output<List<String>> systemEvents) {
            this.systemEvents = systemEvents;
            return this;
        }
        public Builder systemEvents(@Nullable List<String> systemEvents) {
            this.systemEvents = Codegen.ofNullable(systemEvents);
            return this;
        }
        public Builder systemEvents(String... systemEvents) {
            return systemEvents(List.of(systemEvents));
        }
        public Builder urlTemplate(Output<String> urlTemplate) {
            this.urlTemplate = Objects.requireNonNull(urlTemplate);
            return this;
        }
        public Builder urlTemplate(String urlTemplate) {
            this.urlTemplate = Output.of(Objects.requireNonNull(urlTemplate));
            return this;
        }
        public Builder userEventPattern(@Nullable Output<String> userEventPattern) {
            this.userEventPattern = userEventPattern;
            return this;
        }
        public Builder userEventPattern(@Nullable String userEventPattern) {
            this.userEventPattern = Codegen.ofNullable(userEventPattern);
            return this;
        }        public EventHandlerArgs build() {
            return new EventHandlerArgs(auth, systemEvents, urlTemplate, userEventPattern);
        }
    }
}
