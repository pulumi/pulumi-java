// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.inputs.ForwardProxyArgs;
import io.pulumi.azurenative.web.inputs.HttpSettingsRoutesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
 * 
 */
public final class HttpSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final HttpSettingsArgs Empty = new HttpSettingsArgs();

    /**
     * The configuration settings of a forward proxy used to make the requests.
     * 
     */
    @Import(name="forwardProxy")
      private final @Nullable Output<ForwardProxyArgs> forwardProxy;

    public Output<ForwardProxyArgs> getForwardProxy() {
        return this.forwardProxy == null ? Output.empty() : this.forwardProxy;
    }

    /**
     * <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
     * 
     */
    @Import(name="requireHttps")
      private final @Nullable Output<Boolean> requireHttps;

    public Output<Boolean> getRequireHttps() {
        return this.requireHttps == null ? Output.empty() : this.requireHttps;
    }

    /**
     * The configuration settings of the paths HTTP requests.
     * 
     */
    @Import(name="routes")
      private final @Nullable Output<HttpSettingsRoutesArgs> routes;

    public Output<HttpSettingsRoutesArgs> getRoutes() {
        return this.routes == null ? Output.empty() : this.routes;
    }

    public HttpSettingsArgs(
        @Nullable Output<ForwardProxyArgs> forwardProxy,
        @Nullable Output<Boolean> requireHttps,
        @Nullable Output<HttpSettingsRoutesArgs> routes) {
        this.forwardProxy = forwardProxy;
        this.requireHttps = requireHttps;
        this.routes = routes;
    }

    private HttpSettingsArgs() {
        this.forwardProxy = Output.empty();
        this.requireHttps = Output.empty();
        this.routes = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ForwardProxyArgs> forwardProxy;
        private @Nullable Output<Boolean> requireHttps;
        private @Nullable Output<HttpSettingsRoutesArgs> routes;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.forwardProxy = defaults.forwardProxy;
    	      this.requireHttps = defaults.requireHttps;
    	      this.routes = defaults.routes;
        }

        public Builder forwardProxy(@Nullable Output<ForwardProxyArgs> forwardProxy) {
            this.forwardProxy = forwardProxy;
            return this;
        }
        public Builder forwardProxy(@Nullable ForwardProxyArgs forwardProxy) {
            this.forwardProxy = Output.ofNullable(forwardProxy);
            return this;
        }
        public Builder requireHttps(@Nullable Output<Boolean> requireHttps) {
            this.requireHttps = requireHttps;
            return this;
        }
        public Builder requireHttps(@Nullable Boolean requireHttps) {
            this.requireHttps = Output.ofNullable(requireHttps);
            return this;
        }
        public Builder routes(@Nullable Output<HttpSettingsRoutesArgs> routes) {
            this.routes = routes;
            return this;
        }
        public Builder routes(@Nullable HttpSettingsRoutesArgs routes) {
            this.routes = Output.ofNullable(routes);
            return this;
        }        public HttpSettingsArgs build() {
            return new HttpSettingsArgs(forwardProxy, requireHttps, routes);
        }
    }
}
