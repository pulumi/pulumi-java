// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.enums.TumblingWindowFrequency;
import io.pulumi.azurenative.datafactory.inputs.RetryPolicyArgs;
import io.pulumi.azurenative.datafactory.inputs.SelfDependencyTumblingWindowTriggerReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.TriggerDependencyReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.TriggerPipelineReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.TumblingWindowTriggerDependencyReferenceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TumblingWindowTriggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final TumblingWindowTriggerArgs Empty = new TumblingWindowTriggerArgs();

    @InputImport(name="annotations")
    private final @Nullable Input<List<Object>> annotations;

    public Input<List<Object>> getAnnotations() {
        return this.annotations == null ? Input.empty() : this.annotations;
    }

    @InputImport(name="delay")
    private final @Nullable Input<Object> delay;

    public Input<Object> getDelay() {
        return this.delay == null ? Input.empty() : this.delay;
    }

    @InputImport(name="dependsOn")
    private final @Nullable Input<List<Object>> dependsOn;

    public Input<List<Object>> getDependsOn() {
        return this.dependsOn == null ? Input.empty() : this.dependsOn;
    }

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="endTime")
    private final @Nullable Input<String> endTime;

    public Input<String> getEndTime() {
        return this.endTime == null ? Input.empty() : this.endTime;
    }

    @InputImport(name="frequency", required=true)
    private final Input<Either<String,TumblingWindowFrequency>> frequency;

    public Input<Either<String,TumblingWindowFrequency>> getFrequency() {
        return this.frequency;
    }

    @InputImport(name="interval", required=true)
    private final Input<Integer> interval;

    public Input<Integer> getInterval() {
        return this.interval;
    }

    @InputImport(name="maxConcurrency", required=true)
    private final Input<Integer> maxConcurrency;

    public Input<Integer> getMaxConcurrency() {
        return this.maxConcurrency;
    }

    @InputImport(name="pipeline", required=true)
    private final Input<TriggerPipelineReferenceArgs> pipeline;

    public Input<TriggerPipelineReferenceArgs> getPipeline() {
        return this.pipeline;
    }

    @InputImport(name="retryPolicy")
    private final @Nullable Input<RetryPolicyArgs> retryPolicy;

    public Input<RetryPolicyArgs> getRetryPolicy() {
        return this.retryPolicy == null ? Input.empty() : this.retryPolicy;
    }

    @InputImport(name="startTime", required=true)
    private final Input<String> startTime;

    public Input<String> getStartTime() {
        return this.startTime;
    }

    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public TumblingWindowTriggerArgs(
        @Nullable Input<List<Object>> annotations,
        @Nullable Input<Object> delay,
        @Nullable Input<List<Object>> dependsOn,
        @Nullable Input<String> description,
        @Nullable Input<String> endTime,
        Input<Either<String,TumblingWindowFrequency>> frequency,
        Input<Integer> interval,
        Input<Integer> maxConcurrency,
        Input<TriggerPipelineReferenceArgs> pipeline,
        @Nullable Input<RetryPolicyArgs> retryPolicy,
        Input<String> startTime,
        Input<String> type) {
        this.annotations = annotations;
        this.delay = delay;
        this.dependsOn = dependsOn;
        this.description = description;
        this.endTime = endTime;
        this.frequency = Objects.requireNonNull(frequency, "expected parameter 'frequency' to be non-null");
        this.interval = Objects.requireNonNull(interval, "expected parameter 'interval' to be non-null");
        this.maxConcurrency = Objects.requireNonNull(maxConcurrency, "expected parameter 'maxConcurrency' to be non-null");
        this.pipeline = Objects.requireNonNull(pipeline, "expected parameter 'pipeline' to be non-null");
        this.retryPolicy = retryPolicy;
        this.startTime = Objects.requireNonNull(startTime, "expected parameter 'startTime' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private TumblingWindowTriggerArgs() {
        this.annotations = Input.empty();
        this.delay = Input.empty();
        this.dependsOn = Input.empty();
        this.description = Input.empty();
        this.endTime = Input.empty();
        this.frequency = Input.empty();
        this.interval = Input.empty();
        this.maxConcurrency = Input.empty();
        this.pipeline = Input.empty();
        this.retryPolicy = Input.empty();
        this.startTime = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TumblingWindowTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<Object>> annotations;
        private @Nullable Input<Object> delay;
        private @Nullable Input<List<Object>> dependsOn;
        private @Nullable Input<String> description;
        private @Nullable Input<String> endTime;
        private Input<Either<String,TumblingWindowFrequency>> frequency;
        private Input<Integer> interval;
        private Input<Integer> maxConcurrency;
        private Input<TriggerPipelineReferenceArgs> pipeline;
        private @Nullable Input<RetryPolicyArgs> retryPolicy;
        private Input<String> startTime;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(TumblingWindowTriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.delay = defaults.delay;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.endTime = defaults.endTime;
    	      this.frequency = defaults.frequency;
    	      this.interval = defaults.interval;
    	      this.maxConcurrency = defaults.maxConcurrency;
    	      this.pipeline = defaults.pipeline;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.startTime = defaults.startTime;
    	      this.type = defaults.type;
        }

        public Builder setAnnotations(@Nullable Input<List<Object>> annotations) {
            this.annotations = annotations;
            return this;
        }

        public Builder setAnnotations(@Nullable List<Object> annotations) {
            this.annotations = Input.ofNullable(annotations);
            return this;
        }

        public Builder setDelay(@Nullable Input<Object> delay) {
            this.delay = delay;
            return this;
        }

        public Builder setDelay(@Nullable Object delay) {
            this.delay = Input.ofNullable(delay);
            return this;
        }

        public Builder setDependsOn(@Nullable Input<List<Object>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }

        public Builder setDependsOn(@Nullable List<Object> dependsOn) {
            this.dependsOn = Input.ofNullable(dependsOn);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEndTime(@Nullable Input<String> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder setEndTime(@Nullable String endTime) {
            this.endTime = Input.ofNullable(endTime);
            return this;
        }

        public Builder setFrequency(Input<Either<String,TumblingWindowFrequency>> frequency) {
            this.frequency = Objects.requireNonNull(frequency);
            return this;
        }

        public Builder setFrequency(Either<String,TumblingWindowFrequency> frequency) {
            this.frequency = Input.of(Objects.requireNonNull(frequency));
            return this;
        }

        public Builder setInterval(Input<Integer> interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }

        public Builder setInterval(Integer interval) {
            this.interval = Input.of(Objects.requireNonNull(interval));
            return this;
        }

        public Builder setMaxConcurrency(Input<Integer> maxConcurrency) {
            this.maxConcurrency = Objects.requireNonNull(maxConcurrency);
            return this;
        }

        public Builder setMaxConcurrency(Integer maxConcurrency) {
            this.maxConcurrency = Input.of(Objects.requireNonNull(maxConcurrency));
            return this;
        }

        public Builder setPipeline(Input<TriggerPipelineReferenceArgs> pipeline) {
            this.pipeline = Objects.requireNonNull(pipeline);
            return this;
        }

        public Builder setPipeline(TriggerPipelineReferenceArgs pipeline) {
            this.pipeline = Input.of(Objects.requireNonNull(pipeline));
            return this;
        }

        public Builder setRetryPolicy(@Nullable Input<RetryPolicyArgs> retryPolicy) {
            this.retryPolicy = retryPolicy;
            return this;
        }

        public Builder setRetryPolicy(@Nullable RetryPolicyArgs retryPolicy) {
            this.retryPolicy = Input.ofNullable(retryPolicy);
            return this;
        }

        public Builder setStartTime(Input<String> startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder setStartTime(String startTime) {
            this.startTime = Input.of(Objects.requireNonNull(startTime));
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public TumblingWindowTriggerArgs build() {
            return new TumblingWindowTriggerArgs(annotations, delay, dependsOn, description, endTime, frequency, interval, maxConcurrency, pipeline, retryPolicy, startTime, type);
        }
    }
}
