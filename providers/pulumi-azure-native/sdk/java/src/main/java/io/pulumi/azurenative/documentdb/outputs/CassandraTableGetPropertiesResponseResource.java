// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb.outputs;

import io.pulumi.azurenative.documentdb.outputs.CassandraSchemaResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class CassandraTableGetPropertiesResponseResource {
    /**
     * Analytical TTL.
     * 
     */
    private final @Nullable Integer analyticalStorageTtl;
    /**
     * Time to live of the Cosmos DB Cassandra table
     * 
     */
    private final @Nullable Integer defaultTtl;
    /**
     * A system generated property representing the resource etag required for optimistic concurrency control.
     * 
     */
    private final String etag;
    /**
     * Name of the Cosmos DB Cassandra table
     * 
     */
    private final String id;
    /**
     * A system generated property. A unique identifier.
     * 
     */
    private final String rid;
    /**
     * Schema of the Cosmos DB Cassandra table
     * 
     */
    private final @Nullable CassandraSchemaResponse schema;
    /**
     * A system generated property that denotes the last updated timestamp of the resource.
     * 
     */
    private final Double ts;

    @OutputCustomType.Constructor({"analyticalStorageTtl","defaultTtl","etag","id","rid","schema","ts"})
    private CassandraTableGetPropertiesResponseResource(
        @Nullable Integer analyticalStorageTtl,
        @Nullable Integer defaultTtl,
        String etag,
        String id,
        String rid,
        @Nullable CassandraSchemaResponse schema,
        Double ts) {
        this.analyticalStorageTtl = analyticalStorageTtl;
        this.defaultTtl = defaultTtl;
        this.etag = Objects.requireNonNull(etag);
        this.id = Objects.requireNonNull(id);
        this.rid = Objects.requireNonNull(rid);
        this.schema = schema;
        this.ts = Objects.requireNonNull(ts);
    }

    /**
     * Analytical TTL.
     * 
     */
    public Optional<Integer> getAnalyticalStorageTtl() {
        return Optional.ofNullable(this.analyticalStorageTtl);
    }
    /**
     * Time to live of the Cosmos DB Cassandra table
     * 
     */
    public Optional<Integer> getDefaultTtl() {
        return Optional.ofNullable(this.defaultTtl);
    }
    /**
     * A system generated property representing the resource etag required for optimistic concurrency control.
     * 
     */
    public String getEtag() {
        return this.etag;
    }
    /**
     * Name of the Cosmos DB Cassandra table
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * A system generated property. A unique identifier.
     * 
     */
    public String getRid() {
        return this.rid;
    }
    /**
     * Schema of the Cosmos DB Cassandra table
     * 
     */
    public Optional<CassandraSchemaResponse> getSchema() {
        return Optional.ofNullable(this.schema);
    }
    /**
     * A system generated property that denotes the last updated timestamp of the resource.
     * 
     */
    public Double getTs() {
        return this.ts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CassandraTableGetPropertiesResponseResource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer analyticalStorageTtl;
        private @Nullable Integer defaultTtl;
        private String etag;
        private String id;
        private String rid;
        private @Nullable CassandraSchemaResponse schema;
        private Double ts;

        public Builder() {
    	      // Empty
        }

        public Builder(CassandraTableGetPropertiesResponseResource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analyticalStorageTtl = defaults.analyticalStorageTtl;
    	      this.defaultTtl = defaults.defaultTtl;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.rid = defaults.rid;
    	      this.schema = defaults.schema;
    	      this.ts = defaults.ts;
        }

        public Builder setAnalyticalStorageTtl(@Nullable Integer analyticalStorageTtl) {
            this.analyticalStorageTtl = analyticalStorageTtl;
            return this;
        }

        public Builder setDefaultTtl(@Nullable Integer defaultTtl) {
            this.defaultTtl = defaultTtl;
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setRid(String rid) {
            this.rid = Objects.requireNonNull(rid);
            return this;
        }

        public Builder setSchema(@Nullable CassandraSchemaResponse schema) {
            this.schema = schema;
            return this;
        }

        public Builder setTs(Double ts) {
            this.ts = Objects.requireNonNull(ts);
            return this;
        }

        public CassandraTableGetPropertiesResponseResource build() {
            return new CassandraTableGetPropertiesResponseResource(analyticalStorageTtl, defaultTtl, etag, id, rid, schema, ts);
        }
    }
}
