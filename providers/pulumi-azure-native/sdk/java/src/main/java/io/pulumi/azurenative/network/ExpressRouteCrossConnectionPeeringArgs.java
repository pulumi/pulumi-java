// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.enums.ExpressRoutePeeringState;
import io.pulumi.azurenative.network.enums.ExpressRoutePeeringType;
import io.pulumi.azurenative.network.inputs.ExpressRouteCircuitPeeringConfigArgs;
import io.pulumi.azurenative.network.inputs.Ipv6ExpressRouteCircuitPeeringConfigArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExpressRouteCrossConnectionPeeringArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExpressRouteCrossConnectionPeeringArgs Empty = new ExpressRouteCrossConnectionPeeringArgs();

    @InputImport(name="crossConnectionName", required=true)
    private final Input<String> crossConnectionName;

    public Input<String> getCrossConnectionName() {
        return this.crossConnectionName;
    }

    @InputImport(name="gatewayManagerEtag")
    private final @Nullable Input<String> gatewayManagerEtag;

    public Input<String> getGatewayManagerEtag() {
        return this.gatewayManagerEtag == null ? Input.empty() : this.gatewayManagerEtag;
    }

    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="ipv6PeeringConfig")
    private final @Nullable Input<Ipv6ExpressRouteCircuitPeeringConfigArgs> ipv6PeeringConfig;

    public Input<Ipv6ExpressRouteCircuitPeeringConfigArgs> getIpv6PeeringConfig() {
        return this.ipv6PeeringConfig == null ? Input.empty() : this.ipv6PeeringConfig;
    }

    @InputImport(name="microsoftPeeringConfig")
    private final @Nullable Input<ExpressRouteCircuitPeeringConfigArgs> microsoftPeeringConfig;

    public Input<ExpressRouteCircuitPeeringConfigArgs> getMicrosoftPeeringConfig() {
        return this.microsoftPeeringConfig == null ? Input.empty() : this.microsoftPeeringConfig;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="peerASN")
    private final @Nullable Input<Double> peerASN;

    public Input<Double> getPeerASN() {
        return this.peerASN == null ? Input.empty() : this.peerASN;
    }

    @InputImport(name="peeringName")
    private final @Nullable Input<String> peeringName;

    public Input<String> getPeeringName() {
        return this.peeringName == null ? Input.empty() : this.peeringName;
    }

    @InputImport(name="peeringType")
    private final @Nullable Input<Either<String,ExpressRoutePeeringType>> peeringType;

    public Input<Either<String,ExpressRoutePeeringType>> getPeeringType() {
        return this.peeringType == null ? Input.empty() : this.peeringType;
    }

    @InputImport(name="primaryPeerAddressPrefix")
    private final @Nullable Input<String> primaryPeerAddressPrefix;

    public Input<String> getPrimaryPeerAddressPrefix() {
        return this.primaryPeerAddressPrefix == null ? Input.empty() : this.primaryPeerAddressPrefix;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="secondaryPeerAddressPrefix")
    private final @Nullable Input<String> secondaryPeerAddressPrefix;

    public Input<String> getSecondaryPeerAddressPrefix() {
        return this.secondaryPeerAddressPrefix == null ? Input.empty() : this.secondaryPeerAddressPrefix;
    }

    @InputImport(name="sharedKey")
    private final @Nullable Input<String> sharedKey;

    public Input<String> getSharedKey() {
        return this.sharedKey == null ? Input.empty() : this.sharedKey;
    }

    @InputImport(name="state")
    private final @Nullable Input<Either<String,ExpressRoutePeeringState>> state;

    public Input<Either<String,ExpressRoutePeeringState>> getState() {
        return this.state == null ? Input.empty() : this.state;
    }

    @InputImport(name="vlanId")
    private final @Nullable Input<Integer> vlanId;

    public Input<Integer> getVlanId() {
        return this.vlanId == null ? Input.empty() : this.vlanId;
    }

    public ExpressRouteCrossConnectionPeeringArgs(
        Input<String> crossConnectionName,
        @Nullable Input<String> gatewayManagerEtag,
        @Nullable Input<String> id,
        @Nullable Input<Ipv6ExpressRouteCircuitPeeringConfigArgs> ipv6PeeringConfig,
        @Nullable Input<ExpressRouteCircuitPeeringConfigArgs> microsoftPeeringConfig,
        @Nullable Input<String> name,
        @Nullable Input<Double> peerASN,
        @Nullable Input<String> peeringName,
        @Nullable Input<Either<String,ExpressRoutePeeringType>> peeringType,
        @Nullable Input<String> primaryPeerAddressPrefix,
        Input<String> resourceGroupName,
        @Nullable Input<String> secondaryPeerAddressPrefix,
        @Nullable Input<String> sharedKey,
        @Nullable Input<Either<String,ExpressRoutePeeringState>> state,
        @Nullable Input<Integer> vlanId) {
        this.crossConnectionName = Objects.requireNonNull(crossConnectionName, "expected parameter 'crossConnectionName' to be non-null");
        this.gatewayManagerEtag = gatewayManagerEtag;
        this.id = id;
        this.ipv6PeeringConfig = ipv6PeeringConfig;
        this.microsoftPeeringConfig = microsoftPeeringConfig;
        this.name = name;
        this.peerASN = peerASN;
        this.peeringName = peeringName;
        this.peeringType = peeringType;
        this.primaryPeerAddressPrefix = primaryPeerAddressPrefix;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.secondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
        this.sharedKey = sharedKey;
        this.state = state;
        this.vlanId = vlanId;
    }

    private ExpressRouteCrossConnectionPeeringArgs() {
        this.crossConnectionName = Input.empty();
        this.gatewayManagerEtag = Input.empty();
        this.id = Input.empty();
        this.ipv6PeeringConfig = Input.empty();
        this.microsoftPeeringConfig = Input.empty();
        this.name = Input.empty();
        this.peerASN = Input.empty();
        this.peeringName = Input.empty();
        this.peeringType = Input.empty();
        this.primaryPeerAddressPrefix = Input.empty();
        this.resourceGroupName = Input.empty();
        this.secondaryPeerAddressPrefix = Input.empty();
        this.sharedKey = Input.empty();
        this.state = Input.empty();
        this.vlanId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExpressRouteCrossConnectionPeeringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> crossConnectionName;
        private @Nullable Input<String> gatewayManagerEtag;
        private @Nullable Input<String> id;
        private @Nullable Input<Ipv6ExpressRouteCircuitPeeringConfigArgs> ipv6PeeringConfig;
        private @Nullable Input<ExpressRouteCircuitPeeringConfigArgs> microsoftPeeringConfig;
        private @Nullable Input<String> name;
        private @Nullable Input<Double> peerASN;
        private @Nullable Input<String> peeringName;
        private @Nullable Input<Either<String,ExpressRoutePeeringType>> peeringType;
        private @Nullable Input<String> primaryPeerAddressPrefix;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> secondaryPeerAddressPrefix;
        private @Nullable Input<String> sharedKey;
        private @Nullable Input<Either<String,ExpressRoutePeeringState>> state;
        private @Nullable Input<Integer> vlanId;

        public Builder() {
    	      // Empty
        }

        public Builder(ExpressRouteCrossConnectionPeeringArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crossConnectionName = defaults.crossConnectionName;
    	      this.gatewayManagerEtag = defaults.gatewayManagerEtag;
    	      this.id = defaults.id;
    	      this.ipv6PeeringConfig = defaults.ipv6PeeringConfig;
    	      this.microsoftPeeringConfig = defaults.microsoftPeeringConfig;
    	      this.name = defaults.name;
    	      this.peerASN = defaults.peerASN;
    	      this.peeringName = defaults.peeringName;
    	      this.peeringType = defaults.peeringType;
    	      this.primaryPeerAddressPrefix = defaults.primaryPeerAddressPrefix;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secondaryPeerAddressPrefix = defaults.secondaryPeerAddressPrefix;
    	      this.sharedKey = defaults.sharedKey;
    	      this.state = defaults.state;
    	      this.vlanId = defaults.vlanId;
        }

        public Builder setCrossConnectionName(Input<String> crossConnectionName) {
            this.crossConnectionName = Objects.requireNonNull(crossConnectionName);
            return this;
        }

        public Builder setCrossConnectionName(String crossConnectionName) {
            this.crossConnectionName = Input.of(Objects.requireNonNull(crossConnectionName));
            return this;
        }

        public Builder setGatewayManagerEtag(@Nullable Input<String> gatewayManagerEtag) {
            this.gatewayManagerEtag = gatewayManagerEtag;
            return this;
        }

        public Builder setGatewayManagerEtag(@Nullable String gatewayManagerEtag) {
            this.gatewayManagerEtag = Input.ofNullable(gatewayManagerEtag);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setIpv6PeeringConfig(@Nullable Input<Ipv6ExpressRouteCircuitPeeringConfigArgs> ipv6PeeringConfig) {
            this.ipv6PeeringConfig = ipv6PeeringConfig;
            return this;
        }

        public Builder setIpv6PeeringConfig(@Nullable Ipv6ExpressRouteCircuitPeeringConfigArgs ipv6PeeringConfig) {
            this.ipv6PeeringConfig = Input.ofNullable(ipv6PeeringConfig);
            return this;
        }

        public Builder setMicrosoftPeeringConfig(@Nullable Input<ExpressRouteCircuitPeeringConfigArgs> microsoftPeeringConfig) {
            this.microsoftPeeringConfig = microsoftPeeringConfig;
            return this;
        }

        public Builder setMicrosoftPeeringConfig(@Nullable ExpressRouteCircuitPeeringConfigArgs microsoftPeeringConfig) {
            this.microsoftPeeringConfig = Input.ofNullable(microsoftPeeringConfig);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPeerASN(@Nullable Input<Double> peerASN) {
            this.peerASN = peerASN;
            return this;
        }

        public Builder setPeerASN(@Nullable Double peerASN) {
            this.peerASN = Input.ofNullable(peerASN);
            return this;
        }

        public Builder setPeeringName(@Nullable Input<String> peeringName) {
            this.peeringName = peeringName;
            return this;
        }

        public Builder setPeeringName(@Nullable String peeringName) {
            this.peeringName = Input.ofNullable(peeringName);
            return this;
        }

        public Builder setPeeringType(@Nullable Input<Either<String,ExpressRoutePeeringType>> peeringType) {
            this.peeringType = peeringType;
            return this;
        }

        public Builder setPeeringType(@Nullable Either<String,ExpressRoutePeeringType> peeringType) {
            this.peeringType = Input.ofNullable(peeringType);
            return this;
        }

        public Builder setPrimaryPeerAddressPrefix(@Nullable Input<String> primaryPeerAddressPrefix) {
            this.primaryPeerAddressPrefix = primaryPeerAddressPrefix;
            return this;
        }

        public Builder setPrimaryPeerAddressPrefix(@Nullable String primaryPeerAddressPrefix) {
            this.primaryPeerAddressPrefix = Input.ofNullable(primaryPeerAddressPrefix);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSecondaryPeerAddressPrefix(@Nullable Input<String> secondaryPeerAddressPrefix) {
            this.secondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
            return this;
        }

        public Builder setSecondaryPeerAddressPrefix(@Nullable String secondaryPeerAddressPrefix) {
            this.secondaryPeerAddressPrefix = Input.ofNullable(secondaryPeerAddressPrefix);
            return this;
        }

        public Builder setSharedKey(@Nullable Input<String> sharedKey) {
            this.sharedKey = sharedKey;
            return this;
        }

        public Builder setSharedKey(@Nullable String sharedKey) {
            this.sharedKey = Input.ofNullable(sharedKey);
            return this;
        }

        public Builder setState(@Nullable Input<Either<String,ExpressRoutePeeringState>> state) {
            this.state = state;
            return this;
        }

        public Builder setState(@Nullable Either<String,ExpressRoutePeeringState> state) {
            this.state = Input.ofNullable(state);
            return this;
        }

        public Builder setVlanId(@Nullable Input<Integer> vlanId) {
            this.vlanId = vlanId;
            return this;
        }

        public Builder setVlanId(@Nullable Integer vlanId) {
            this.vlanId = Input.ofNullable(vlanId);
            return this;
        }

        public ExpressRouteCrossConnectionPeeringArgs build() {
            return new ExpressRouteCrossConnectionPeeringArgs(crossConnectionName, gatewayManagerEtag, id, ipv6PeeringConfig, microsoftPeeringConfig, name, peerASN, peeringName, peeringType, primaryPeerAddressPrefix, resourceGroupName, secondaryPeerAddressPrefix, sharedKey, state, vlanId);
        }
    }
}
