// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.outputs;

import io.pulumi.azurenative.media.outputs.LiveEventEndpointResponse;
import io.pulumi.azurenative.media.outputs.LiveEventPreviewAccessControlResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class LiveEventPreviewResponse {
    private final @Nullable LiveEventPreviewAccessControlResponse accessControl;
    private final @Nullable String alternativeMediaId;
    private final @Nullable List<LiveEventEndpointResponse> endpoints;
    private final @Nullable String previewLocator;
    private final @Nullable String streamingPolicyName;

    @OutputCustomType.Constructor({"accessControl","alternativeMediaId","endpoints","previewLocator","streamingPolicyName"})
    private LiveEventPreviewResponse(
        @Nullable LiveEventPreviewAccessControlResponse accessControl,
        @Nullable String alternativeMediaId,
        @Nullable List<LiveEventEndpointResponse> endpoints,
        @Nullable String previewLocator,
        @Nullable String streamingPolicyName) {
        this.accessControl = accessControl;
        this.alternativeMediaId = alternativeMediaId;
        this.endpoints = endpoints;
        this.previewLocator = previewLocator;
        this.streamingPolicyName = streamingPolicyName;
    }

    public Optional<LiveEventPreviewAccessControlResponse> getAccessControl() {
        return Optional.ofNullable(this.accessControl);
    }
    public Optional<String> getAlternativeMediaId() {
        return Optional.ofNullable(this.alternativeMediaId);
    }
    public List<LiveEventEndpointResponse> getEndpoints() {
        return this.endpoints == null ? List.of() : this.endpoints;
    }
    public Optional<String> getPreviewLocator() {
        return Optional.ofNullable(this.previewLocator);
    }
    public Optional<String> getStreamingPolicyName() {
        return Optional.ofNullable(this.streamingPolicyName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveEventPreviewResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable LiveEventPreviewAccessControlResponse accessControl;
        private @Nullable String alternativeMediaId;
        private @Nullable List<LiveEventEndpointResponse> endpoints;
        private @Nullable String previewLocator;
        private @Nullable String streamingPolicyName;

        public Builder() {
    	      // Empty
        }

        public Builder(LiveEventPreviewResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessControl = defaults.accessControl;
    	      this.alternativeMediaId = defaults.alternativeMediaId;
    	      this.endpoints = defaults.endpoints;
    	      this.previewLocator = defaults.previewLocator;
    	      this.streamingPolicyName = defaults.streamingPolicyName;
        }

        public Builder setAccessControl(@Nullable LiveEventPreviewAccessControlResponse accessControl) {
            this.accessControl = accessControl;
            return this;
        }

        public Builder setAlternativeMediaId(@Nullable String alternativeMediaId) {
            this.alternativeMediaId = alternativeMediaId;
            return this;
        }

        public Builder setEndpoints(@Nullable List<LiveEventEndpointResponse> endpoints) {
            this.endpoints = endpoints;
            return this;
        }

        public Builder setPreviewLocator(@Nullable String previewLocator) {
            this.previewLocator = previewLocator;
            return this;
        }

        public Builder setStreamingPolicyName(@Nullable String streamingPolicyName) {
            this.streamingPolicyName = streamingPolicyName;
            return this;
        }

        public LiveEventPreviewResponse build() {
            return new LiveEventPreviewResponse(accessControl, alternativeMediaId, endpoints, previewLocator, streamingPolicyName);
        }
    }
}
