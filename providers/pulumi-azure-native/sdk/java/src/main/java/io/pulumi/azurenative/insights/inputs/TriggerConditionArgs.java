// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.azurenative.insights.enums.ConditionalOperator;
import io.pulumi.azurenative.insights.inputs.LogMetricTriggerArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The condition that results in the Log Search rule.
 * 
 */
public final class TriggerConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final TriggerConditionArgs Empty = new TriggerConditionArgs();

    /**
     * Trigger condition for metric query rule
     * 
     */
    @InputImport(name="metricTrigger")
      private final @Nullable Output<LogMetricTriggerArgs> metricTrigger;

    public Output<LogMetricTriggerArgs> getMetricTrigger() {
        return this.metricTrigger == null ? Output.empty() : this.metricTrigger;
    }

    /**
     * Result or count threshold based on which rule should be triggered.
     * 
     */
    @InputImport(name="threshold", required=true)
      private final Output<Double> threshold;

    public Output<Double> getThreshold() {
        return this.threshold;
    }

    /**
     * Evaluation operation for rule - 'GreaterThan' or 'LessThan.
     * 
     */
    @InputImport(name="thresholdOperator", required=true)
      private final Output<Either<String,ConditionalOperator>> thresholdOperator;

    public Output<Either<String,ConditionalOperator>> getThresholdOperator() {
        return this.thresholdOperator;
    }

    public TriggerConditionArgs(
        @Nullable Output<LogMetricTriggerArgs> metricTrigger,
        Output<Double> threshold,
        Output<Either<String,ConditionalOperator>> thresholdOperator) {
        this.metricTrigger = metricTrigger;
        this.threshold = Objects.requireNonNull(threshold, "expected parameter 'threshold' to be non-null");
        this.thresholdOperator = Objects.requireNonNull(thresholdOperator, "expected parameter 'thresholdOperator' to be non-null");
    }

    private TriggerConditionArgs() {
        this.metricTrigger = Output.empty();
        this.threshold = Output.empty();
        this.thresholdOperator = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<LogMetricTriggerArgs> metricTrigger;
        private Output<Double> threshold;
        private Output<Either<String,ConditionalOperator>> thresholdOperator;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricTrigger = defaults.metricTrigger;
    	      this.threshold = defaults.threshold;
    	      this.thresholdOperator = defaults.thresholdOperator;
        }

        public Builder metricTrigger(@Nullable Output<LogMetricTriggerArgs> metricTrigger) {
            this.metricTrigger = metricTrigger;
            return this;
        }

        public Builder metricTrigger(@Nullable LogMetricTriggerArgs metricTrigger) {
            this.metricTrigger = Output.ofNullable(metricTrigger);
            return this;
        }

        public Builder threshold(Output<Double> threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }

        public Builder threshold(Double threshold) {
            this.threshold = Output.of(Objects.requireNonNull(threshold));
            return this;
        }

        public Builder thresholdOperator(Output<Either<String,ConditionalOperator>> thresholdOperator) {
            this.thresholdOperator = Objects.requireNonNull(thresholdOperator);
            return this;
        }

        public Builder thresholdOperator(Either<String,ConditionalOperator> thresholdOperator) {
            this.thresholdOperator = Output.of(Objects.requireNonNull(thresholdOperator));
            return this;
        }
        public TriggerConditionArgs build() {
            return new TriggerConditionArgs(metricTrigger, threshold, thresholdOperator);
        }
    }
}
