// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sqlvirtualmachine.outputs;

import io.pulumi.azurenative.sqlvirtualmachine.outputs.LoadBalancerConfigurationResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetAvailabilityGroupListenerResult {
    private final @Nullable String availabilityGroupName;
    private final @Nullable Boolean createDefaultAvailabilityGroupIfNotExist;
    private final String id;
    private final @Nullable List<LoadBalancerConfigurationResponse> loadBalancerConfigurations;
    private final String name;
    private final @Nullable Integer port;
    private final String provisioningState;
    private final String type;

    @OutputCustomType.Constructor({"availabilityGroupName","createDefaultAvailabilityGroupIfNotExist","id","loadBalancerConfigurations","name","port","provisioningState","type"})
    private GetAvailabilityGroupListenerResult(
        @Nullable String availabilityGroupName,
        @Nullable Boolean createDefaultAvailabilityGroupIfNotExist,
        String id,
        @Nullable List<LoadBalancerConfigurationResponse> loadBalancerConfigurations,
        String name,
        @Nullable Integer port,
        String provisioningState,
        String type) {
        this.availabilityGroupName = availabilityGroupName;
        this.createDefaultAvailabilityGroupIfNotExist = createDefaultAvailabilityGroupIfNotExist;
        this.id = Objects.requireNonNull(id);
        this.loadBalancerConfigurations = loadBalancerConfigurations;
        this.name = Objects.requireNonNull(name);
        this.port = port;
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.type = Objects.requireNonNull(type);
    }

    public Optional<String> getAvailabilityGroupName() {
        return Optional.ofNullable(this.availabilityGroupName);
    }
    public Optional<Boolean> getCreateDefaultAvailabilityGroupIfNotExist() {
        return Optional.ofNullable(this.createDefaultAvailabilityGroupIfNotExist);
    }
    public String getId() {
        return this.id;
    }
    public List<LoadBalancerConfigurationResponse> getLoadBalancerConfigurations() {
        return this.loadBalancerConfigurations == null ? List.of() : this.loadBalancerConfigurations;
    }
    public String getName() {
        return this.name;
    }
    public Optional<Integer> getPort() {
        return Optional.ofNullable(this.port);
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAvailabilityGroupListenerResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String availabilityGroupName;
        private @Nullable Boolean createDefaultAvailabilityGroupIfNotExist;
        private String id;
        private @Nullable List<LoadBalancerConfigurationResponse> loadBalancerConfigurations;
        private String name;
        private @Nullable Integer port;
        private String provisioningState;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAvailabilityGroupListenerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityGroupName = defaults.availabilityGroupName;
    	      this.createDefaultAvailabilityGroupIfNotExist = defaults.createDefaultAvailabilityGroupIfNotExist;
    	      this.id = defaults.id;
    	      this.loadBalancerConfigurations = defaults.loadBalancerConfigurations;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.provisioningState = defaults.provisioningState;
    	      this.type = defaults.type;
        }

        public Builder setAvailabilityGroupName(@Nullable String availabilityGroupName) {
            this.availabilityGroupName = availabilityGroupName;
            return this;
        }

        public Builder setCreateDefaultAvailabilityGroupIfNotExist(@Nullable Boolean createDefaultAvailabilityGroupIfNotExist) {
            this.createDefaultAvailabilityGroupIfNotExist = createDefaultAvailabilityGroupIfNotExist;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLoadBalancerConfigurations(@Nullable List<LoadBalancerConfigurationResponse> loadBalancerConfigurations) {
            this.loadBalancerConfigurations = loadBalancerConfigurations;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPort(@Nullable Integer port) {
            this.port = port;
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetAvailabilityGroupListenerResult build() {
            return new GetAvailabilityGroupListenerResult(availabilityGroupName, createDefaultAvailabilityGroupIfNotExist, id, loadBalancerConfigurations, name, port, provisioningState, type);
        }
    }
}
