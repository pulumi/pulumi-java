// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storagecache.inputs;

import io.pulumi.azurenative.storagecache.inputs.ConditionResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheHealthResponse extends io.pulumi.resources.InvokeArgs {

    public static final CacheHealthResponse Empty = new CacheHealthResponse();

    @InputImport(name="conditions", required=true)
    private final List<ConditionResponse> conditions;

    public List<ConditionResponse> getConditions() {
        return this.conditions;
    }

    @InputImport(name="state")
    private final @Nullable String state;

    public Optional<String> getState() {
        return this.state == null ? Optional.empty() : Optional.ofNullable(this.state);
    }

    @InputImport(name="statusDescription")
    private final @Nullable String statusDescription;

    public Optional<String> getStatusDescription() {
        return this.statusDescription == null ? Optional.empty() : Optional.ofNullable(this.statusDescription);
    }

    public CacheHealthResponse(
        List<ConditionResponse> conditions,
        @Nullable String state,
        @Nullable String statusDescription) {
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
        this.state = state;
        this.statusDescription = statusDescription;
    }

    private CacheHealthResponse() {
        this.conditions = List.of();
        this.state = null;
        this.statusDescription = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheHealthResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<ConditionResponse> conditions;
        private @Nullable String state;
        private @Nullable String statusDescription;

        public Builder() {
    	      // Empty
        }

        public Builder(CacheHealthResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.state = defaults.state;
    	      this.statusDescription = defaults.statusDescription;
        }

        public Builder setConditions(List<ConditionResponse> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }

        public Builder setState(@Nullable String state) {
            this.state = state;
            return this;
        }

        public Builder setStatusDescription(@Nullable String statusDescription) {
            this.statusDescription = statusDescription;
            return this;
        }

        public CacheHealthResponse build() {
            return new CacheHealthResponse(conditions, state, statusDescription);
        }
    }
}
