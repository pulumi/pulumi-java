// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.azurenative.compute.enums.StorageAccountType;
import io.pulumi.azurenative.compute.inputs.EncryptionImagesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the target region information.
 * 
 */
public final class TargetRegionArgs extends io.pulumi.resources.ResourceArgs {

    public static final TargetRegionArgs Empty = new TargetRegionArgs();

    /**
     * Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
     * 
     */
    @InputImport(name="encryption")
      private final @Nullable Output<EncryptionImagesArgs> encryption;

    public Output<EncryptionImagesArgs> getEncryption() {
        return this.encryption == null ? Output.empty() : this.encryption;
    }

    /**
     * The name of the region.
     * 
     */
    @InputImport(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * The number of replicas of the Image Version to be created per region. This property is updatable.
     * 
     */
    @InputImport(name="regionalReplicaCount")
      private final @Nullable Output<Integer> regionalReplicaCount;

    public Output<Integer> getRegionalReplicaCount() {
        return this.regionalReplicaCount == null ? Output.empty() : this.regionalReplicaCount;
    }

    /**
     * Specifies the storage account type to be used to store the image. This property is not updatable.
     * 
     */
    @InputImport(name="storageAccountType")
      private final @Nullable Output<Either<String,StorageAccountType>> storageAccountType;

    public Output<Either<String,StorageAccountType>> getStorageAccountType() {
        return this.storageAccountType == null ? Output.empty() : this.storageAccountType;
    }

    public TargetRegionArgs(
        @Nullable Output<EncryptionImagesArgs> encryption,
        Output<String> name,
        @Nullable Output<Integer> regionalReplicaCount,
        @Nullable Output<Either<String,StorageAccountType>> storageAccountType) {
        this.encryption = encryption;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.regionalReplicaCount = regionalReplicaCount;
        this.storageAccountType = storageAccountType;
    }

    private TargetRegionArgs() {
        this.encryption = Output.empty();
        this.name = Output.empty();
        this.regionalReplicaCount = Output.empty();
        this.storageAccountType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TargetRegionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<EncryptionImagesArgs> encryption;
        private Output<String> name;
        private @Nullable Output<Integer> regionalReplicaCount;
        private @Nullable Output<Either<String,StorageAccountType>> storageAccountType;

        public Builder() {
    	      // Empty
        }

        public Builder(TargetRegionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encryption = defaults.encryption;
    	      this.name = defaults.name;
    	      this.regionalReplicaCount = defaults.regionalReplicaCount;
    	      this.storageAccountType = defaults.storageAccountType;
        }

        public Builder encryption(@Nullable Output<EncryptionImagesArgs> encryption) {
            this.encryption = encryption;
            return this;
        }

        public Builder encryption(@Nullable EncryptionImagesArgs encryption) {
            this.encryption = Output.ofNullable(encryption);
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder regionalReplicaCount(@Nullable Output<Integer> regionalReplicaCount) {
            this.regionalReplicaCount = regionalReplicaCount;
            return this;
        }

        public Builder regionalReplicaCount(@Nullable Integer regionalReplicaCount) {
            this.regionalReplicaCount = Output.ofNullable(regionalReplicaCount);
            return this;
        }

        public Builder storageAccountType(@Nullable Output<Either<String,StorageAccountType>> storageAccountType) {
            this.storageAccountType = storageAccountType;
            return this;
        }

        public Builder storageAccountType(@Nullable Either<String,StorageAccountType> storageAccountType) {
            this.storageAccountType = Output.ofNullable(storageAccountType);
            return this;
        }
        public TargetRegionArgs build() {
            return new TargetRegionArgs(encryption, name, regionalReplicaCount, storageAccountType);
        }
    }
}
