// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * scale settings for AML Compute
 * 
 */
public final class ScaleSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScaleSettingsArgs Empty = new ScaleSettingsArgs();

    /**
     * Max number of nodes to use
     * 
     */
    @Import(name="maxNodeCount", required=true)
      private final Output<Integer> maxNodeCount;

    public Output<Integer> getMaxNodeCount() {
        return this.maxNodeCount;
    }

    /**
     * Min number of nodes to use
     * 
     */
    @Import(name="minNodeCount")
      private final @Nullable Output<Integer> minNodeCount;

    public Output<Integer> getMinNodeCount() {
        return this.minNodeCount == null ? Output.empty() : this.minNodeCount;
    }

    /**
     * Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
     * 
     */
    @Import(name="nodeIdleTimeBeforeScaleDown")
      private final @Nullable Output<String> nodeIdleTimeBeforeScaleDown;

    public Output<String> getNodeIdleTimeBeforeScaleDown() {
        return this.nodeIdleTimeBeforeScaleDown == null ? Output.empty() : this.nodeIdleTimeBeforeScaleDown;
    }

    public ScaleSettingsArgs(
        Output<Integer> maxNodeCount,
        @Nullable Output<Integer> minNodeCount,
        @Nullable Output<String> nodeIdleTimeBeforeScaleDown) {
        this.maxNodeCount = Objects.requireNonNull(maxNodeCount, "expected parameter 'maxNodeCount' to be non-null");
        this.minNodeCount = minNodeCount == null ? Output.ofNullable(0) : minNodeCount;
        this.nodeIdleTimeBeforeScaleDown = nodeIdleTimeBeforeScaleDown;
    }

    private ScaleSettingsArgs() {
        this.maxNodeCount = Output.empty();
        this.minNodeCount = Output.empty();
        this.nodeIdleTimeBeforeScaleDown = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScaleSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> maxNodeCount;
        private @Nullable Output<Integer> minNodeCount;
        private @Nullable Output<String> nodeIdleTimeBeforeScaleDown;

        public Builder() {
    	      // Empty
        }

        public Builder(ScaleSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxNodeCount = defaults.maxNodeCount;
    	      this.minNodeCount = defaults.minNodeCount;
    	      this.nodeIdleTimeBeforeScaleDown = defaults.nodeIdleTimeBeforeScaleDown;
        }

        public Builder maxNodeCount(Output<Integer> maxNodeCount) {
            this.maxNodeCount = Objects.requireNonNull(maxNodeCount);
            return this;
        }
        public Builder maxNodeCount(Integer maxNodeCount) {
            this.maxNodeCount = Output.of(Objects.requireNonNull(maxNodeCount));
            return this;
        }
        public Builder minNodeCount(@Nullable Output<Integer> minNodeCount) {
            this.minNodeCount = minNodeCount;
            return this;
        }
        public Builder minNodeCount(@Nullable Integer minNodeCount) {
            this.minNodeCount = Output.ofNullable(minNodeCount);
            return this;
        }
        public Builder nodeIdleTimeBeforeScaleDown(@Nullable Output<String> nodeIdleTimeBeforeScaleDown) {
            this.nodeIdleTimeBeforeScaleDown = nodeIdleTimeBeforeScaleDown;
            return this;
        }
        public Builder nodeIdleTimeBeforeScaleDown(@Nullable String nodeIdleTimeBeforeScaleDown) {
            this.nodeIdleTimeBeforeScaleDown = Output.ofNullable(nodeIdleTimeBeforeScaleDown);
            return this;
        }        public ScaleSettingsArgs build() {
            return new ScaleSettingsArgs(maxNodeCount, minNodeCount, nodeIdleTimeBeforeScaleDown);
        }
    }
}
