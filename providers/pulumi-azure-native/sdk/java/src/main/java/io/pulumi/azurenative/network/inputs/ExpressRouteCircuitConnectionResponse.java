// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.Ipv6CircuitConnectionConfigResponse;
import io.pulumi.azurenative.network.inputs.SubResourceResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
 * 
 */
public final class ExpressRouteCircuitConnectionResponse extends io.pulumi.resources.InvokeArgs {

    public static final ExpressRouteCircuitConnectionResponse Empty = new ExpressRouteCircuitConnectionResponse();

    /**
     * /29 IP address space to carve out Customer addresses for tunnels.
     * 
     */
    @InputImport(name="addressPrefix")
    private final @Nullable String addressPrefix;

    public Optional<String> getAddressPrefix() {
        return this.addressPrefix == null ? Optional.empty() : Optional.ofNullable(this.addressPrefix);
    }

    /**
     * The authorization key.
     * 
     */
    @InputImport(name="authorizationKey")
    private final @Nullable String authorizationKey;

    public Optional<String> getAuthorizationKey() {
        return this.authorizationKey == null ? Optional.empty() : Optional.ofNullable(this.authorizationKey);
    }

    /**
     * Express Route Circuit connection state.
     * 
     */
    @InputImport(name="circuitConnectionStatus", required=true)
    private final String circuitConnectionStatus;

    public String getCircuitConnectionStatus() {
        return this.circuitConnectionStatus;
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @InputImport(name="etag", required=true)
    private final String etag;

    public String getEtag() {
        return this.etag;
    }

    /**
     * Reference to Express Route Circuit Private Peering Resource of the circuit initiating connection.
     * 
     */
    @InputImport(name="expressRouteCircuitPeering")
    private final @Nullable SubResourceResponse expressRouteCircuitPeering;

    public Optional<SubResourceResponse> getExpressRouteCircuitPeering() {
        return this.expressRouteCircuitPeering == null ? Optional.empty() : Optional.ofNullable(this.expressRouteCircuitPeering);
    }

    /**
     * Resource ID.
     * 
     */
    @InputImport(name="id")
    private final @Nullable String id;

    public Optional<String> getId() {
        return this.id == null ? Optional.empty() : Optional.ofNullable(this.id);
    }

    /**
     * IPv6 Address PrefixProperties of the express route circuit connection.
     * 
     */
    @InputImport(name="ipv6CircuitConnectionConfig")
    private final @Nullable Ipv6CircuitConnectionConfigResponse ipv6CircuitConnectionConfig;

    public Optional<Ipv6CircuitConnectionConfigResponse> getIpv6CircuitConnectionConfig() {
        return this.ipv6CircuitConnectionConfig == null ? Optional.empty() : Optional.ofNullable(this.ipv6CircuitConnectionConfig);
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @InputImport(name="name")
    private final @Nullable String name;

    public Optional<String> getName() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * Reference to Express Route Circuit Private Peering Resource of the peered circuit.
     * 
     */
    @InputImport(name="peerExpressRouteCircuitPeering")
    private final @Nullable SubResourceResponse peerExpressRouteCircuitPeering;

    public Optional<SubResourceResponse> getPeerExpressRouteCircuitPeering() {
        return this.peerExpressRouteCircuitPeering == null ? Optional.empty() : Optional.ofNullable(this.peerExpressRouteCircuitPeering);
    }

    /**
     * The provisioning state of the express route circuit connection resource.
     * 
     */
    @InputImport(name="provisioningState", required=true)
    private final String provisioningState;

    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Type of the resource.
     * 
     */
    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    public ExpressRouteCircuitConnectionResponse(
        @Nullable String addressPrefix,
        @Nullable String authorizationKey,
        String circuitConnectionStatus,
        String etag,
        @Nullable SubResourceResponse expressRouteCircuitPeering,
        @Nullable String id,
        @Nullable Ipv6CircuitConnectionConfigResponse ipv6CircuitConnectionConfig,
        @Nullable String name,
        @Nullable SubResourceResponse peerExpressRouteCircuitPeering,
        String provisioningState,
        String type) {
        this.addressPrefix = addressPrefix;
        this.authorizationKey = authorizationKey;
        this.circuitConnectionStatus = Objects.requireNonNull(circuitConnectionStatus, "expected parameter 'circuitConnectionStatus' to be non-null");
        this.etag = Objects.requireNonNull(etag, "expected parameter 'etag' to be non-null");
        this.expressRouteCircuitPeering = expressRouteCircuitPeering;
        this.id = id;
        this.ipv6CircuitConnectionConfig = ipv6CircuitConnectionConfig;
        this.name = name;
        this.peerExpressRouteCircuitPeering = peerExpressRouteCircuitPeering;
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ExpressRouteCircuitConnectionResponse() {
        this.addressPrefix = null;
        this.authorizationKey = null;
        this.circuitConnectionStatus = null;
        this.etag = null;
        this.expressRouteCircuitPeering = null;
        this.id = null;
        this.ipv6CircuitConnectionConfig = null;
        this.name = null;
        this.peerExpressRouteCircuitPeering = null;
        this.provisioningState = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExpressRouteCircuitConnectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String addressPrefix;
        private @Nullable String authorizationKey;
        private String circuitConnectionStatus;
        private String etag;
        private @Nullable SubResourceResponse expressRouteCircuitPeering;
        private @Nullable String id;
        private @Nullable Ipv6CircuitConnectionConfigResponse ipv6CircuitConnectionConfig;
        private @Nullable String name;
        private @Nullable SubResourceResponse peerExpressRouteCircuitPeering;
        private String provisioningState;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(ExpressRouteCircuitConnectionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressPrefix = defaults.addressPrefix;
    	      this.authorizationKey = defaults.authorizationKey;
    	      this.circuitConnectionStatus = defaults.circuitConnectionStatus;
    	      this.etag = defaults.etag;
    	      this.expressRouteCircuitPeering = defaults.expressRouteCircuitPeering;
    	      this.id = defaults.id;
    	      this.ipv6CircuitConnectionConfig = defaults.ipv6CircuitConnectionConfig;
    	      this.name = defaults.name;
    	      this.peerExpressRouteCircuitPeering = defaults.peerExpressRouteCircuitPeering;
    	      this.provisioningState = defaults.provisioningState;
    	      this.type = defaults.type;
        }

        public Builder setAddressPrefix(@Nullable String addressPrefix) {
            this.addressPrefix = addressPrefix;
            return this;
        }

        public Builder setAuthorizationKey(@Nullable String authorizationKey) {
            this.authorizationKey = authorizationKey;
            return this;
        }

        public Builder setCircuitConnectionStatus(String circuitConnectionStatus) {
            this.circuitConnectionStatus = Objects.requireNonNull(circuitConnectionStatus);
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setExpressRouteCircuitPeering(@Nullable SubResourceResponse expressRouteCircuitPeering) {
            this.expressRouteCircuitPeering = expressRouteCircuitPeering;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setIpv6CircuitConnectionConfig(@Nullable Ipv6CircuitConnectionConfigResponse ipv6CircuitConnectionConfig) {
            this.ipv6CircuitConnectionConfig = ipv6CircuitConnectionConfig;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setPeerExpressRouteCircuitPeering(@Nullable SubResourceResponse peerExpressRouteCircuitPeering) {
            this.peerExpressRouteCircuitPeering = peerExpressRouteCircuitPeering;
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public ExpressRouteCircuitConnectionResponse build() {
            return new ExpressRouteCircuitConnectionResponse(addressPrefix, authorizationKey, circuitConnectionStatus, etag, expressRouteCircuitPeering, id, ipv6CircuitConnectionConfig, name, peerExpressRouteCircuitPeering, provisioningState, type);
        }
    }
}
