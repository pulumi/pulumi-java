// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.keyvault.inputs;

import io.pulumi.azurenative.keyvault.inputs.PermissionsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
 * 
 */
public final class AccessPolicyEntryArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccessPolicyEntryArgs Empty = new AccessPolicyEntryArgs();

    /**
     *  Application ID of the client making request on behalf of a principal
     * 
     */
    @InputImport(name="applicationId")
      private final @Nullable Output<String> applicationId;

    public Output<String> getApplicationId() {
        return this.applicationId == null ? Output.empty() : this.applicationId;
    }

    /**
     * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
     * 
     */
    @InputImport(name="objectId", required=true)
      private final Output<String> objectId;

    public Output<String> getObjectId() {
        return this.objectId;
    }

    /**
     * Permissions the identity has for keys, secrets and certificates.
     * 
     */
    @InputImport(name="permissions", required=true)
      private final Output<PermissionsArgs> permissions;

    public Output<PermissionsArgs> getPermissions() {
        return this.permissions;
    }

    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     * 
     */
    @InputImport(name="tenantId", required=true)
      private final Output<String> tenantId;

    public Output<String> getTenantId() {
        return this.tenantId;
    }

    public AccessPolicyEntryArgs(
        @Nullable Output<String> applicationId,
        Output<String> objectId,
        Output<PermissionsArgs> permissions,
        Output<String> tenantId) {
        this.applicationId = applicationId;
        this.objectId = Objects.requireNonNull(objectId, "expected parameter 'objectId' to be non-null");
        this.permissions = Objects.requireNonNull(permissions, "expected parameter 'permissions' to be non-null");
        this.tenantId = Objects.requireNonNull(tenantId, "expected parameter 'tenantId' to be non-null");
    }

    private AccessPolicyEntryArgs() {
        this.applicationId = Output.empty();
        this.objectId = Output.empty();
        this.permissions = Output.empty();
        this.tenantId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessPolicyEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> applicationId;
        private Output<String> objectId;
        private Output<PermissionsArgs> permissions;
        private Output<String> tenantId;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessPolicyEntryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.objectId = defaults.objectId;
    	      this.permissions = defaults.permissions;
    	      this.tenantId = defaults.tenantId;
        }

        public Builder applicationId(@Nullable Output<String> applicationId) {
            this.applicationId = applicationId;
            return this;
        }

        public Builder applicationId(@Nullable String applicationId) {
            this.applicationId = Output.ofNullable(applicationId);
            return this;
        }

        public Builder objectId(Output<String> objectId) {
            this.objectId = Objects.requireNonNull(objectId);
            return this;
        }

        public Builder objectId(String objectId) {
            this.objectId = Output.of(Objects.requireNonNull(objectId));
            return this;
        }

        public Builder permissions(Output<PermissionsArgs> permissions) {
            this.permissions = Objects.requireNonNull(permissions);
            return this;
        }

        public Builder permissions(PermissionsArgs permissions) {
            this.permissions = Output.of(Objects.requireNonNull(permissions));
            return this;
        }

        public Builder tenantId(Output<String> tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }

        public Builder tenantId(String tenantId) {
            this.tenantId = Output.of(Objects.requireNonNull(tenantId));
            return this;
        }
        public AccessPolicyEntryArgs build() {
            return new AccessPolicyEntryArgs(applicationId, objectId, permissions, tenantId);
        }
    }
}
