// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.RulesEngineActionResponse;
import io.pulumi.azurenative.network.inputs.RulesEngineMatchConditionResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
 * 
 */
public final class RulesEngineRuleResponse extends io.pulumi.resources.InvokeArgs {

    public static final RulesEngineRuleResponse Empty = new RulesEngineRuleResponse();

    /**
     * Actions to perform on the request and response if all of the match conditions are met.
     * 
     */
    @InputImport(name="action", required=true)
        private final RulesEngineActionResponse action;

    public RulesEngineActionResponse getAction() {
        return this.action;
    }

    /**
     * A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
     * 
     */
    @InputImport(name="matchConditions")
        private final @Nullable List<RulesEngineMatchConditionResponse> matchConditions;

    public List<RulesEngineMatchConditionResponse> getMatchConditions() {
        return this.matchConditions == null ? List.of() : this.matchConditions;
    }

    /**
     * If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
     * 
     */
    @InputImport(name="matchProcessingBehavior")
        private final @Nullable String matchProcessingBehavior;

    public Optional<String> getMatchProcessingBehavior() {
        return this.matchProcessingBehavior == null ? Optional.empty() : Optional.ofNullable(this.matchProcessingBehavior);
    }

    /**
     * A name to refer to this specific rule.
     * 
     */
    @InputImport(name="name", required=true)
        private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * A priority assigned to this rule.
     * 
     */
    @InputImport(name="priority", required=true)
        private final Integer priority;

    public Integer getPriority() {
        return this.priority;
    }

    public RulesEngineRuleResponse(
        RulesEngineActionResponse action,
        @Nullable List<RulesEngineMatchConditionResponse> matchConditions,
        @Nullable String matchProcessingBehavior,
        String name,
        Integer priority) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.matchConditions = matchConditions;
        this.matchProcessingBehavior = matchProcessingBehavior;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.priority = Objects.requireNonNull(priority, "expected parameter 'priority' to be non-null");
    }

    private RulesEngineRuleResponse() {
        this.action = null;
        this.matchConditions = List.of();
        this.matchProcessingBehavior = null;
        this.name = null;
        this.priority = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesEngineRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesEngineActionResponse action;
        private @Nullable List<RulesEngineMatchConditionResponse> matchConditions;
        private @Nullable String matchProcessingBehavior;
        private String name;
        private Integer priority;

        public Builder() {
    	      // Empty
        }

        public Builder(RulesEngineRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.matchConditions = defaults.matchConditions;
    	      this.matchProcessingBehavior = defaults.matchProcessingBehavior;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
        }

        public Builder setAction(RulesEngineActionResponse action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }

        public Builder setMatchConditions(@Nullable List<RulesEngineMatchConditionResponse> matchConditions) {
            this.matchConditions = matchConditions;
            return this;
        }

        public Builder setMatchProcessingBehavior(@Nullable String matchProcessingBehavior) {
            this.matchProcessingBehavior = matchProcessingBehavior;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPriority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        public RulesEngineRuleResponse build() {
            return new RulesEngineRuleResponse(action, matchConditions, matchProcessingBehavior, name, priority);
        }
    }
}
