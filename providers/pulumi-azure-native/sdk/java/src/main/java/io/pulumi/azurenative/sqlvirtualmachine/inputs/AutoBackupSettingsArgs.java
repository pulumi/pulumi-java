// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sqlvirtualmachine.inputs;

import io.pulumi.azurenative.sqlvirtualmachine.enums.BackupScheduleType;
import io.pulumi.azurenative.sqlvirtualmachine.enums.FullBackupFrequencyType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configure backups for databases in your SQL virtual machine.
 * 
 */
public final class AutoBackupSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutoBackupSettingsArgs Empty = new AutoBackupSettingsArgs();

    /**
     * Backup schedule type.
     * 
     */
    @InputImport(name="backupScheduleType")
      private final @Nullable Input<Either<String,BackupScheduleType>> backupScheduleType;

    public Input<Either<String,BackupScheduleType>> getBackupScheduleType() {
        return this.backupScheduleType == null ? Input.empty() : this.backupScheduleType;
    }

    /**
     * Include or exclude system databases from auto backup.
     * 
     */
    @InputImport(name="backupSystemDbs")
      private final @Nullable Input<Boolean> backupSystemDbs;

    public Input<Boolean> getBackupSystemDbs() {
        return this.backupSystemDbs == null ? Input.empty() : this.backupSystemDbs;
    }

    /**
     * Enable or disable autobackup on SQL virtual machine.
     * 
     */
    @InputImport(name="enable")
      private final @Nullable Input<Boolean> enable;

    public Input<Boolean> getEnable() {
        return this.enable == null ? Input.empty() : this.enable;
    }

    /**
     * Enable or disable encryption for backup on SQL virtual machine.
     * 
     */
    @InputImport(name="enableEncryption")
      private final @Nullable Input<Boolean> enableEncryption;

    public Input<Boolean> getEnableEncryption() {
        return this.enableEncryption == null ? Input.empty() : this.enableEncryption;
    }

    /**
     * Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
     * 
     */
    @InputImport(name="fullBackupFrequency")
      private final @Nullable Input<Either<String,FullBackupFrequencyType>> fullBackupFrequency;

    public Input<Either<String,FullBackupFrequencyType>> getFullBackupFrequency() {
        return this.fullBackupFrequency == null ? Input.empty() : this.fullBackupFrequency;
    }

    /**
     * Start time of a given day during which full backups can take place. 0-23 hours.
     * 
     */
    @InputImport(name="fullBackupStartTime")
      private final @Nullable Input<Integer> fullBackupStartTime;

    public Input<Integer> getFullBackupStartTime() {
        return this.fullBackupStartTime == null ? Input.empty() : this.fullBackupStartTime;
    }

    /**
     * Duration of the time window of a given day during which full backups can take place. 1-23 hours.
     * 
     */
    @InputImport(name="fullBackupWindowHours")
      private final @Nullable Input<Integer> fullBackupWindowHours;

    public Input<Integer> getFullBackupWindowHours() {
        return this.fullBackupWindowHours == null ? Input.empty() : this.fullBackupWindowHours;
    }

    /**
     * Frequency of log backups. 5-60 minutes.
     * 
     */
    @InputImport(name="logBackupFrequency")
      private final @Nullable Input<Integer> logBackupFrequency;

    public Input<Integer> getLogBackupFrequency() {
        return this.logBackupFrequency == null ? Input.empty() : this.logBackupFrequency;
    }

    /**
     * Password for encryption on backup.
     * 
     */
    @InputImport(name="password")
      private final @Nullable Input<String> password;

    public Input<String> getPassword() {
        return this.password == null ? Input.empty() : this.password;
    }

    /**
     * Retention period of backup: 1-30 days.
     * 
     */
    @InputImport(name="retentionPeriod")
      private final @Nullable Input<Integer> retentionPeriod;

    public Input<Integer> getRetentionPeriod() {
        return this.retentionPeriod == null ? Input.empty() : this.retentionPeriod;
    }

    /**
     * Storage account key where backup will be taken to.
     * 
     */
    @InputImport(name="storageAccessKey")
      private final @Nullable Input<String> storageAccessKey;

    public Input<String> getStorageAccessKey() {
        return this.storageAccessKey == null ? Input.empty() : this.storageAccessKey;
    }

    /**
     * Storage account url where backup will be taken to.
     * 
     */
    @InputImport(name="storageAccountUrl")
      private final @Nullable Input<String> storageAccountUrl;

    public Input<String> getStorageAccountUrl() {
        return this.storageAccountUrl == null ? Input.empty() : this.storageAccountUrl;
    }

    public AutoBackupSettingsArgs(
        @Nullable Input<Either<String,BackupScheduleType>> backupScheduleType,
        @Nullable Input<Boolean> backupSystemDbs,
        @Nullable Input<Boolean> enable,
        @Nullable Input<Boolean> enableEncryption,
        @Nullable Input<Either<String,FullBackupFrequencyType>> fullBackupFrequency,
        @Nullable Input<Integer> fullBackupStartTime,
        @Nullable Input<Integer> fullBackupWindowHours,
        @Nullable Input<Integer> logBackupFrequency,
        @Nullable Input<String> password,
        @Nullable Input<Integer> retentionPeriod,
        @Nullable Input<String> storageAccessKey,
        @Nullable Input<String> storageAccountUrl) {
        this.backupScheduleType = backupScheduleType;
        this.backupSystemDbs = backupSystemDbs;
        this.enable = enable;
        this.enableEncryption = enableEncryption;
        this.fullBackupFrequency = fullBackupFrequency;
        this.fullBackupStartTime = fullBackupStartTime;
        this.fullBackupWindowHours = fullBackupWindowHours;
        this.logBackupFrequency = logBackupFrequency;
        this.password = password;
        this.retentionPeriod = retentionPeriod;
        this.storageAccessKey = storageAccessKey;
        this.storageAccountUrl = storageAccountUrl;
    }

    private AutoBackupSettingsArgs() {
        this.backupScheduleType = Input.empty();
        this.backupSystemDbs = Input.empty();
        this.enable = Input.empty();
        this.enableEncryption = Input.empty();
        this.fullBackupFrequency = Input.empty();
        this.fullBackupStartTime = Input.empty();
        this.fullBackupWindowHours = Input.empty();
        this.logBackupFrequency = Input.empty();
        this.password = Input.empty();
        this.retentionPeriod = Input.empty();
        this.storageAccessKey = Input.empty();
        this.storageAccountUrl = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoBackupSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,BackupScheduleType>> backupScheduleType;
        private @Nullable Input<Boolean> backupSystemDbs;
        private @Nullable Input<Boolean> enable;
        private @Nullable Input<Boolean> enableEncryption;
        private @Nullable Input<Either<String,FullBackupFrequencyType>> fullBackupFrequency;
        private @Nullable Input<Integer> fullBackupStartTime;
        private @Nullable Input<Integer> fullBackupWindowHours;
        private @Nullable Input<Integer> logBackupFrequency;
        private @Nullable Input<String> password;
        private @Nullable Input<Integer> retentionPeriod;
        private @Nullable Input<String> storageAccessKey;
        private @Nullable Input<String> storageAccountUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoBackupSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupScheduleType = defaults.backupScheduleType;
    	      this.backupSystemDbs = defaults.backupSystemDbs;
    	      this.enable = defaults.enable;
    	      this.enableEncryption = defaults.enableEncryption;
    	      this.fullBackupFrequency = defaults.fullBackupFrequency;
    	      this.fullBackupStartTime = defaults.fullBackupStartTime;
    	      this.fullBackupWindowHours = defaults.fullBackupWindowHours;
    	      this.logBackupFrequency = defaults.logBackupFrequency;
    	      this.password = defaults.password;
    	      this.retentionPeriod = defaults.retentionPeriod;
    	      this.storageAccessKey = defaults.storageAccessKey;
    	      this.storageAccountUrl = defaults.storageAccountUrl;
        }

        public Builder setBackupScheduleType(@Nullable Input<Either<String,BackupScheduleType>> backupScheduleType) {
            this.backupScheduleType = backupScheduleType;
            return this;
        }

        public Builder setBackupScheduleType(@Nullable Either<String,BackupScheduleType> backupScheduleType) {
            this.backupScheduleType = Input.ofNullable(backupScheduleType);
            return this;
        }

        public Builder setBackupSystemDbs(@Nullable Input<Boolean> backupSystemDbs) {
            this.backupSystemDbs = backupSystemDbs;
            return this;
        }

        public Builder setBackupSystemDbs(@Nullable Boolean backupSystemDbs) {
            this.backupSystemDbs = Input.ofNullable(backupSystemDbs);
            return this;
        }

        public Builder setEnable(@Nullable Input<Boolean> enable) {
            this.enable = enable;
            return this;
        }

        public Builder setEnable(@Nullable Boolean enable) {
            this.enable = Input.ofNullable(enable);
            return this;
        }

        public Builder setEnableEncryption(@Nullable Input<Boolean> enableEncryption) {
            this.enableEncryption = enableEncryption;
            return this;
        }

        public Builder setEnableEncryption(@Nullable Boolean enableEncryption) {
            this.enableEncryption = Input.ofNullable(enableEncryption);
            return this;
        }

        public Builder setFullBackupFrequency(@Nullable Input<Either<String,FullBackupFrequencyType>> fullBackupFrequency) {
            this.fullBackupFrequency = fullBackupFrequency;
            return this;
        }

        public Builder setFullBackupFrequency(@Nullable Either<String,FullBackupFrequencyType> fullBackupFrequency) {
            this.fullBackupFrequency = Input.ofNullable(fullBackupFrequency);
            return this;
        }

        public Builder setFullBackupStartTime(@Nullable Input<Integer> fullBackupStartTime) {
            this.fullBackupStartTime = fullBackupStartTime;
            return this;
        }

        public Builder setFullBackupStartTime(@Nullable Integer fullBackupStartTime) {
            this.fullBackupStartTime = Input.ofNullable(fullBackupStartTime);
            return this;
        }

        public Builder setFullBackupWindowHours(@Nullable Input<Integer> fullBackupWindowHours) {
            this.fullBackupWindowHours = fullBackupWindowHours;
            return this;
        }

        public Builder setFullBackupWindowHours(@Nullable Integer fullBackupWindowHours) {
            this.fullBackupWindowHours = Input.ofNullable(fullBackupWindowHours);
            return this;
        }

        public Builder setLogBackupFrequency(@Nullable Input<Integer> logBackupFrequency) {
            this.logBackupFrequency = logBackupFrequency;
            return this;
        }

        public Builder setLogBackupFrequency(@Nullable Integer logBackupFrequency) {
            this.logBackupFrequency = Input.ofNullable(logBackupFrequency);
            return this;
        }

        public Builder setPassword(@Nullable Input<String> password) {
            this.password = password;
            return this;
        }

        public Builder setPassword(@Nullable String password) {
            this.password = Input.ofNullable(password);
            return this;
        }

        public Builder setRetentionPeriod(@Nullable Input<Integer> retentionPeriod) {
            this.retentionPeriod = retentionPeriod;
            return this;
        }

        public Builder setRetentionPeriod(@Nullable Integer retentionPeriod) {
            this.retentionPeriod = Input.ofNullable(retentionPeriod);
            return this;
        }

        public Builder setStorageAccessKey(@Nullable Input<String> storageAccessKey) {
            this.storageAccessKey = storageAccessKey;
            return this;
        }

        public Builder setStorageAccessKey(@Nullable String storageAccessKey) {
            this.storageAccessKey = Input.ofNullable(storageAccessKey);
            return this;
        }

        public Builder setStorageAccountUrl(@Nullable Input<String> storageAccountUrl) {
            this.storageAccountUrl = storageAccountUrl;
            return this;
        }

        public Builder setStorageAccountUrl(@Nullable String storageAccountUrl) {
            this.storageAccountUrl = Input.ofNullable(storageAccountUrl);
            return this;
        }
        public AutoBackupSettingsArgs build() {
            return new AutoBackupSettingsArgs(backupScheduleType, backupSystemDbs, enable, enableEncryption, fullBackupFrequency, fullBackupStartTime, fullBackupWindowHours, logBackupFrequency, password, retentionPeriod, storageAccessKey, storageAccountUrl);
        }
    }
}
