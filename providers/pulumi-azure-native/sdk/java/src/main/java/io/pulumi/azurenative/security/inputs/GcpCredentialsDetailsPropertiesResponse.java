// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.security.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * GCP cloud account connector based service to service credentials, the credentials are composed of the organization ID and a JSON API key (write only)
 * 
 */
public final class GcpCredentialsDetailsPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final GcpCredentialsDetailsPropertiesResponse Empty = new GcpCredentialsDetailsPropertiesResponse();

    /**
     * Auth provider x509 certificate URL field of the API key (write only)
     * 
     */
    @InputImport(name="authProviderX509CertUrl", required=true)
      private final String authProviderX509CertUrl;

    public String getAuthProviderX509CertUrl() {
        return this.authProviderX509CertUrl;
    }

    /**
     * Auth URI field of the API key (write only)
     * 
     */
    @InputImport(name="authUri", required=true)
      private final String authUri;

    public String getAuthUri() {
        return this.authUri;
    }

    /**
     * State of the multi-cloud connector
     * 
     */
    @InputImport(name="authenticationProvisioningState", required=true)
      private final String authenticationProvisioningState;

    public String getAuthenticationProvisioningState() {
        return this.authenticationProvisioningState;
    }

    /**
     * Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
     * Expected value is 'gcpCredentials'.
     * 
     */
    @InputImport(name="authenticationType", required=true)
      private final String authenticationType;

    public String getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Client email field of the API key (write only)
     * 
     */
    @InputImport(name="clientEmail", required=true)
      private final String clientEmail;

    public String getClientEmail() {
        return this.clientEmail;
    }

    /**
     * Client ID field of the API key (write only)
     * 
     */
    @InputImport(name="clientId", required=true)
      private final String clientId;

    public String getClientId() {
        return this.clientId;
    }

    /**
     * Client x509 certificate URL field of the API key (write only)
     * 
     */
    @InputImport(name="clientX509CertUrl", required=true)
      private final String clientX509CertUrl;

    public String getClientX509CertUrl() {
        return this.clientX509CertUrl;
    }

    /**
     * The permissions detected in the cloud account.
     * 
     */
    @InputImport(name="grantedPermissions", required=true)
      private final List<String> grantedPermissions;

    public List<String> getGrantedPermissions() {
        return this.grantedPermissions;
    }

    /**
     * The organization ID of the GCP cloud account
     * 
     */
    @InputImport(name="organizationId", required=true)
      private final String organizationId;

    public String getOrganizationId() {
        return this.organizationId;
    }

    /**
     * Private key field of the API key (write only)
     * 
     */
    @InputImport(name="privateKey", required=true)
      private final String privateKey;

    public String getPrivateKey() {
        return this.privateKey;
    }

    /**
     * Private key ID field of the API key (write only)
     * 
     */
    @InputImport(name="privateKeyId", required=true)
      private final String privateKeyId;

    public String getPrivateKeyId() {
        return this.privateKeyId;
    }

    /**
     * Project ID field of the API key (write only)
     * 
     */
    @InputImport(name="projectId", required=true)
      private final String projectId;

    public String getProjectId() {
        return this.projectId;
    }

    /**
     * Token URI field of the API key (write only)
     * 
     */
    @InputImport(name="tokenUri", required=true)
      private final String tokenUri;

    public String getTokenUri() {
        return this.tokenUri;
    }

    /**
     * Type field of the API key (write only)
     * 
     */
    @InputImport(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    public GcpCredentialsDetailsPropertiesResponse(
        String authProviderX509CertUrl,
        String authUri,
        String authenticationProvisioningState,
        String authenticationType,
        String clientEmail,
        String clientId,
        String clientX509CertUrl,
        List<String> grantedPermissions,
        String organizationId,
        String privateKey,
        String privateKeyId,
        String projectId,
        String tokenUri,
        String type) {
        this.authProviderX509CertUrl = Objects.requireNonNull(authProviderX509CertUrl, "expected parameter 'authProviderX509CertUrl' to be non-null");
        this.authUri = Objects.requireNonNull(authUri, "expected parameter 'authUri' to be non-null");
        this.authenticationProvisioningState = Objects.requireNonNull(authenticationProvisioningState, "expected parameter 'authenticationProvisioningState' to be non-null");
        this.authenticationType = Objects.requireNonNull(authenticationType, "expected parameter 'authenticationType' to be non-null");
        this.clientEmail = Objects.requireNonNull(clientEmail, "expected parameter 'clientEmail' to be non-null");
        this.clientId = Objects.requireNonNull(clientId, "expected parameter 'clientId' to be non-null");
        this.clientX509CertUrl = Objects.requireNonNull(clientX509CertUrl, "expected parameter 'clientX509CertUrl' to be non-null");
        this.grantedPermissions = Objects.requireNonNull(grantedPermissions, "expected parameter 'grantedPermissions' to be non-null");
        this.organizationId = Objects.requireNonNull(organizationId, "expected parameter 'organizationId' to be non-null");
        this.privateKey = Objects.requireNonNull(privateKey, "expected parameter 'privateKey' to be non-null");
        this.privateKeyId = Objects.requireNonNull(privateKeyId, "expected parameter 'privateKeyId' to be non-null");
        this.projectId = Objects.requireNonNull(projectId, "expected parameter 'projectId' to be non-null");
        this.tokenUri = Objects.requireNonNull(tokenUri, "expected parameter 'tokenUri' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private GcpCredentialsDetailsPropertiesResponse() {
        this.authProviderX509CertUrl = null;
        this.authUri = null;
        this.authenticationProvisioningState = null;
        this.authenticationType = null;
        this.clientEmail = null;
        this.clientId = null;
        this.clientX509CertUrl = null;
        this.grantedPermissions = List.of();
        this.organizationId = null;
        this.privateKey = null;
        this.privateKeyId = null;
        this.projectId = null;
        this.tokenUri = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GcpCredentialsDetailsPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String authProviderX509CertUrl;
        private String authUri;
        private String authenticationProvisioningState;
        private String authenticationType;
        private String clientEmail;
        private String clientId;
        private String clientX509CertUrl;
        private List<String> grantedPermissions;
        private String organizationId;
        private String privateKey;
        private String privateKeyId;
        private String projectId;
        private String tokenUri;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GcpCredentialsDetailsPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authProviderX509CertUrl = defaults.authProviderX509CertUrl;
    	      this.authUri = defaults.authUri;
    	      this.authenticationProvisioningState = defaults.authenticationProvisioningState;
    	      this.authenticationType = defaults.authenticationType;
    	      this.clientEmail = defaults.clientEmail;
    	      this.clientId = defaults.clientId;
    	      this.clientX509CertUrl = defaults.clientX509CertUrl;
    	      this.grantedPermissions = defaults.grantedPermissions;
    	      this.organizationId = defaults.organizationId;
    	      this.privateKey = defaults.privateKey;
    	      this.privateKeyId = defaults.privateKeyId;
    	      this.projectId = defaults.projectId;
    	      this.tokenUri = defaults.tokenUri;
    	      this.type = defaults.type;
        }

        public Builder authProviderX509CertUrl(String authProviderX509CertUrl) {
            this.authProviderX509CertUrl = Objects.requireNonNull(authProviderX509CertUrl);
            return this;
        }

        public Builder authUri(String authUri) {
            this.authUri = Objects.requireNonNull(authUri);
            return this;
        }

        public Builder authenticationProvisioningState(String authenticationProvisioningState) {
            this.authenticationProvisioningState = Objects.requireNonNull(authenticationProvisioningState);
            return this;
        }

        public Builder authenticationType(String authenticationType) {
            this.authenticationType = Objects.requireNonNull(authenticationType);
            return this;
        }

        public Builder clientEmail(String clientEmail) {
            this.clientEmail = Objects.requireNonNull(clientEmail);
            return this;
        }

        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }

        public Builder clientX509CertUrl(String clientX509CertUrl) {
            this.clientX509CertUrl = Objects.requireNonNull(clientX509CertUrl);
            return this;
        }

        public Builder grantedPermissions(List<String> grantedPermissions) {
            this.grantedPermissions = Objects.requireNonNull(grantedPermissions);
            return this;
        }

        public Builder organizationId(String organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }

        public Builder privateKey(String privateKey) {
            this.privateKey = Objects.requireNonNull(privateKey);
            return this;
        }

        public Builder privateKeyId(String privateKeyId) {
            this.privateKeyId = Objects.requireNonNull(privateKeyId);
            return this;
        }

        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }

        public Builder tokenUri(String tokenUri) {
            this.tokenUri = Objects.requireNonNull(tokenUri);
            return this;
        }

        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GcpCredentialsDetailsPropertiesResponse build() {
            return new GcpCredentialsDetailsPropertiesResponse(authProviderX509CertUrl, authUri, authenticationProvisioningState, authenticationType, clientEmail, clientId, clientX509CertUrl, grantedPermissions, organizationId, privateKey, privateKeyId, projectId, tokenUri, type);
        }
    }
}
