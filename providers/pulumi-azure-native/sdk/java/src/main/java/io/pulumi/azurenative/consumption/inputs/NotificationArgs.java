// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.consumption.inputs;

import io.pulumi.azurenative.consumption.enums.CultureCode;
import io.pulumi.azurenative.consumption.enums.OperatorType;
import io.pulumi.azurenative.consumption.enums.ThresholdType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The notification associated with a budget.
 * 
 */
public final class NotificationArgs extends io.pulumi.resources.ResourceArgs {

    public static final NotificationArgs Empty = new NotificationArgs();

    /**
     * Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
     * 
     */
    @InputImport(name="contactEmails", required=true)
      private final Input<List<String>> contactEmails;

    public Input<List<String>> getContactEmails() {
        return this.contactEmails;
    }

    /**
     * Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
     * 
     */
    @InputImport(name="contactGroups")
      private final @Nullable Input<List<String>> contactGroups;

    public Input<List<String>> getContactGroups() {
        return this.contactGroups == null ? Input.empty() : this.contactGroups;
    }

    /**
     * Contact roles to send the budget notification to when the threshold is exceeded.
     * 
     */
    @InputImport(name="contactRoles")
      private final @Nullable Input<List<String>> contactRoles;

    public Input<List<String>> getContactRoles() {
        return this.contactRoles == null ? Input.empty() : this.contactRoles;
    }

    /**
     * The notification is enabled or not.
     * 
     */
    @InputImport(name="enabled", required=true)
      private final Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled;
    }

    /**
     * Language in which the recipient will receive the notification
     * 
     */
    @InputImport(name="locale")
      private final @Nullable Input<Either<String,CultureCode>> locale;

    public Input<Either<String,CultureCode>> getLocale() {
        return this.locale == null ? Input.empty() : this.locale;
    }

    /**
     * The comparison operator.
     * 
     */
    @InputImport(name="operator", required=true)
      private final Input<Either<String,OperatorType>> operator;

    public Input<Either<String,OperatorType>> getOperator() {
        return this.operator;
    }

    /**
     * Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
     * 
     */
    @InputImport(name="threshold", required=true)
      private final Input<Double> threshold;

    public Input<Double> getThreshold() {
        return this.threshold;
    }

    /**
     * The type of threshold
     * 
     */
    @InputImport(name="thresholdType")
      private final @Nullable Input<Either<String,ThresholdType>> thresholdType;

    public Input<Either<String,ThresholdType>> getThresholdType() {
        return this.thresholdType == null ? Input.empty() : this.thresholdType;
    }

    public NotificationArgs(
        Input<List<String>> contactEmails,
        @Nullable Input<List<String>> contactGroups,
        @Nullable Input<List<String>> contactRoles,
        Input<Boolean> enabled,
        @Nullable Input<Either<String,CultureCode>> locale,
        Input<Either<String,OperatorType>> operator,
        Input<Double> threshold,
        @Nullable Input<Either<String,ThresholdType>> thresholdType) {
        this.contactEmails = Objects.requireNonNull(contactEmails, "expected parameter 'contactEmails' to be non-null");
        this.contactGroups = contactGroups;
        this.contactRoles = contactRoles;
        this.enabled = Objects.requireNonNull(enabled, "expected parameter 'enabled' to be non-null");
        this.locale = locale;
        this.operator = Objects.requireNonNull(operator, "expected parameter 'operator' to be non-null");
        this.threshold = Objects.requireNonNull(threshold, "expected parameter 'threshold' to be non-null");
        this.thresholdType = thresholdType == null ? Input.ofLeft("Actual") : thresholdType;
    }

    private NotificationArgs() {
        this.contactEmails = Input.empty();
        this.contactGroups = Input.empty();
        this.contactRoles = Input.empty();
        this.enabled = Input.empty();
        this.locale = Input.empty();
        this.operator = Input.empty();
        this.threshold = Input.empty();
        this.thresholdType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> contactEmails;
        private @Nullable Input<List<String>> contactGroups;
        private @Nullable Input<List<String>> contactRoles;
        private Input<Boolean> enabled;
        private @Nullable Input<Either<String,CultureCode>> locale;
        private Input<Either<String,OperatorType>> operator;
        private Input<Double> threshold;
        private @Nullable Input<Either<String,ThresholdType>> thresholdType;

        public Builder() {
    	      // Empty
        }

        public Builder(NotificationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contactEmails = defaults.contactEmails;
    	      this.contactGroups = defaults.contactGroups;
    	      this.contactRoles = defaults.contactRoles;
    	      this.enabled = defaults.enabled;
    	      this.locale = defaults.locale;
    	      this.operator = defaults.operator;
    	      this.threshold = defaults.threshold;
    	      this.thresholdType = defaults.thresholdType;
        }

        public Builder contactEmails(Input<List<String>> contactEmails) {
            this.contactEmails = Objects.requireNonNull(contactEmails);
            return this;
        }

        public Builder contactEmails(List<String> contactEmails) {
            this.contactEmails = Input.of(Objects.requireNonNull(contactEmails));
            return this;
        }

        public Builder contactGroups(@Nullable Input<List<String>> contactGroups) {
            this.contactGroups = contactGroups;
            return this;
        }

        public Builder contactGroups(@Nullable List<String> contactGroups) {
            this.contactGroups = Input.ofNullable(contactGroups);
            return this;
        }

        public Builder contactRoles(@Nullable Input<List<String>> contactRoles) {
            this.contactRoles = contactRoles;
            return this;
        }

        public Builder contactRoles(@Nullable List<String> contactRoles) {
            this.contactRoles = Input.ofNullable(contactRoles);
            return this;
        }

        public Builder enabled(Input<Boolean> enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Input.of(Objects.requireNonNull(enabled));
            return this;
        }

        public Builder locale(@Nullable Input<Either<String,CultureCode>> locale) {
            this.locale = locale;
            return this;
        }

        public Builder locale(@Nullable Either<String,CultureCode> locale) {
            this.locale = Input.ofNullable(locale);
            return this;
        }

        public Builder operator(Input<Either<String,OperatorType>> operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }

        public Builder operator(Either<String,OperatorType> operator) {
            this.operator = Input.of(Objects.requireNonNull(operator));
            return this;
        }

        public Builder threshold(Input<Double> threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }

        public Builder threshold(Double threshold) {
            this.threshold = Input.of(Objects.requireNonNull(threshold));
            return this;
        }

        public Builder thresholdType(@Nullable Input<Either<String,ThresholdType>> thresholdType) {
            this.thresholdType = thresholdType;
            return this;
        }

        public Builder thresholdType(@Nullable Either<String,ThresholdType> thresholdType) {
            this.thresholdType = Input.ofNullable(thresholdType);
            return this;
        }
        public NotificationArgs build() {
            return new NotificationArgs(contactEmails, contactGroups, contactRoles, enabled, locale, operator, threshold, thresholdType);
        }
    }
}
