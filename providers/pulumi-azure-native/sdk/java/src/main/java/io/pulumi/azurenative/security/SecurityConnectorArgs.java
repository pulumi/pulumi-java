// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.security;

import io.pulumi.azurenative.security.enums.CloudName;
import io.pulumi.azurenative.security.inputs.CspmMonitorAwsOfferingArgs;
import io.pulumi.azurenative.security.inputs.DefenderForContainersAwsOfferingArgs;
import io.pulumi.azurenative.security.inputs.DefenderForServersAwsOfferingArgs;
import io.pulumi.azurenative.security.inputs.SecurityConnectorPropertiesOrganizationalDataArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecurityConnectorArgs extends io.pulumi.resources.ResourceArgs {

    public static final SecurityConnectorArgs Empty = new SecurityConnectorArgs();

    /**
     * The multi cloud resource's cloud name.
     * 
     */
    @InputImport(name="cloudName")
        private final @Nullable Input<Either<String,CloudName>> cloudName;

    public Input<Either<String,CloudName>> getCloudName() {
        return this.cloudName == null ? Input.empty() : this.cloudName;
    }

    /**
     * The multi cloud resource identifier (account id in case of AWS connector).
     * 
     */
    @InputImport(name="hierarchyIdentifier")
        private final @Nullable Input<String> hierarchyIdentifier;

    public Input<String> getHierarchyIdentifier() {
        return this.hierarchyIdentifier == null ? Input.empty() : this.hierarchyIdentifier;
    }

    /**
     * Kind of the resource
     * 
     */
    @InputImport(name="kind")
        private final @Nullable Input<String> kind;

    public Input<String> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    /**
     * Location where the resource is stored
     * 
     */
    @InputImport(name="location")
        private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * A collection of offerings for the security connector.
     * 
     */
    @InputImport(name="offerings")
        private final @Nullable Input<List<Object>> offerings;

    public Input<List<Object>> getOfferings() {
        return this.offerings == null ? Input.empty() : this.offerings;
    }

    /**
     * The multi cloud account's organizational data
     * 
     */
    @InputImport(name="organizationalData")
        private final @Nullable Input<SecurityConnectorPropertiesOrganizationalDataArgs> organizationalData;

    public Input<SecurityConnectorPropertiesOrganizationalDataArgs> getOrganizationalData() {
        return this.organizationalData == null ? Input.empty() : this.organizationalData;
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The security connector name.
     * 
     */
    @InputImport(name="securityConnectorName")
        private final @Nullable Input<String> securityConnectorName;

    public Input<String> getSecurityConnectorName() {
        return this.securityConnectorName == null ? Input.empty() : this.securityConnectorName;
    }

    /**
     * A list of key value pairs that describe the resource.
     * 
     */
    @InputImport(name="tags")
        private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public SecurityConnectorArgs(
        @Nullable Input<Either<String,CloudName>> cloudName,
        @Nullable Input<String> hierarchyIdentifier,
        @Nullable Input<String> kind,
        @Nullable Input<String> location,
        @Nullable Input<List<Object>> offerings,
        @Nullable Input<SecurityConnectorPropertiesOrganizationalDataArgs> organizationalData,
        Input<String> resourceGroupName,
        @Nullable Input<String> securityConnectorName,
        @Nullable Input<Map<String,String>> tags) {
        this.cloudName = cloudName;
        this.hierarchyIdentifier = hierarchyIdentifier;
        this.kind = kind;
        this.location = location;
        this.offerings = offerings;
        this.organizationalData = organizationalData;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.securityConnectorName = securityConnectorName;
        this.tags = tags;
    }

    private SecurityConnectorArgs() {
        this.cloudName = Input.empty();
        this.hierarchyIdentifier = Input.empty();
        this.kind = Input.empty();
        this.location = Input.empty();
        this.offerings = Input.empty();
        this.organizationalData = Input.empty();
        this.resourceGroupName = Input.empty();
        this.securityConnectorName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,CloudName>> cloudName;
        private @Nullable Input<String> hierarchyIdentifier;
        private @Nullable Input<String> kind;
        private @Nullable Input<String> location;
        private @Nullable Input<List<Object>> offerings;
        private @Nullable Input<SecurityConnectorPropertiesOrganizationalDataArgs> organizationalData;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> securityConnectorName;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(SecurityConnectorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudName = defaults.cloudName;
    	      this.hierarchyIdentifier = defaults.hierarchyIdentifier;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.offerings = defaults.offerings;
    	      this.organizationalData = defaults.organizationalData;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.securityConnectorName = defaults.securityConnectorName;
    	      this.tags = defaults.tags;
        }

        public Builder setCloudName(@Nullable Input<Either<String,CloudName>> cloudName) {
            this.cloudName = cloudName;
            return this;
        }

        public Builder setCloudName(@Nullable Either<String,CloudName> cloudName) {
            this.cloudName = Input.ofNullable(cloudName);
            return this;
        }

        public Builder setHierarchyIdentifier(@Nullable Input<String> hierarchyIdentifier) {
            this.hierarchyIdentifier = hierarchyIdentifier;
            return this;
        }

        public Builder setHierarchyIdentifier(@Nullable String hierarchyIdentifier) {
            this.hierarchyIdentifier = Input.ofNullable(hierarchyIdentifier);
            return this;
        }

        public Builder setKind(@Nullable Input<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder setKind(@Nullable String kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setOfferings(@Nullable Input<List<Object>> offerings) {
            this.offerings = offerings;
            return this;
        }

        public Builder setOfferings(@Nullable List<Object> offerings) {
            this.offerings = Input.ofNullable(offerings);
            return this;
        }

        public Builder setOrganizationalData(@Nullable Input<SecurityConnectorPropertiesOrganizationalDataArgs> organizationalData) {
            this.organizationalData = organizationalData;
            return this;
        }

        public Builder setOrganizationalData(@Nullable SecurityConnectorPropertiesOrganizationalDataArgs organizationalData) {
            this.organizationalData = Input.ofNullable(organizationalData);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSecurityConnectorName(@Nullable Input<String> securityConnectorName) {
            this.securityConnectorName = securityConnectorName;
            return this;
        }

        public Builder setSecurityConnectorName(@Nullable String securityConnectorName) {
            this.securityConnectorName = Input.ofNullable(securityConnectorName);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public SecurityConnectorArgs build() {
            return new SecurityConnectorArgs(cloudName, hierarchyIdentifier, kind, location, offerings, organizationalData, resourceGroupName, securityConnectorName, tags);
        }
    }
}
