// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.azurenative.streamanalytics.enums.Encoding;
import io.pulumi.azurenative.streamanalytics.enums.JsonOutputSerializationFormat;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes how data from an input is serialized or how data is serialized when written to an output in JSON format.
 * 
 */
public final class JsonSerializationArgs extends io.pulumi.resources.ResourceArgs {

    public static final JsonSerializationArgs Empty = new JsonSerializationArgs();

    /**
     * Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @InputImport(name="encoding")
      private final @Nullable Input<Either<String,Encoding>> encoding;

    public Input<Either<String,Encoding>> getEncoding() {
        return this.encoding == null ? Input.empty() : this.encoding;
    }

    /**
     * This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is 'lineSeparated' if left null.
     * 
     */
    @InputImport(name="format")
      private final @Nullable Input<Either<String,JsonOutputSerializationFormat>> format;

    public Input<Either<String,JsonOutputSerializationFormat>> getFormat() {
        return this.format == null ? Input.empty() : this.format;
    }

    /**
     * Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
     * Expected value is 'Json'.
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public JsonSerializationArgs(
        @Nullable Input<Either<String,Encoding>> encoding,
        @Nullable Input<Either<String,JsonOutputSerializationFormat>> format,
        Input<String> type) {
        this.encoding = encoding;
        this.format = format;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private JsonSerializationArgs() {
        this.encoding = Input.empty();
        this.format = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JsonSerializationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,Encoding>> encoding;
        private @Nullable Input<Either<String,JsonOutputSerializationFormat>> format;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(JsonSerializationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encoding = defaults.encoding;
    	      this.format = defaults.format;
    	      this.type = defaults.type;
        }

        public Builder setEncoding(@Nullable Input<Either<String,Encoding>> encoding) {
            this.encoding = encoding;
            return this;
        }

        public Builder setEncoding(@Nullable Either<String,Encoding> encoding) {
            this.encoding = Input.ofNullable(encoding);
            return this;
        }

        public Builder setFormat(@Nullable Input<Either<String,JsonOutputSerializationFormat>> format) {
            this.format = format;
            return this;
        }

        public Builder setFormat(@Nullable Either<String,JsonOutputSerializationFormat> format) {
            this.format = Input.ofNullable(format);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }
        public JsonSerializationArgs build() {
            return new JsonSerializationArgs(encoding, format, type);
        }
    }
}
