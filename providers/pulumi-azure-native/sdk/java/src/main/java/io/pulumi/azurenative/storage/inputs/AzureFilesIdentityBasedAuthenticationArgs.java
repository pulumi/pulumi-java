// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.inputs;

import io.pulumi.azurenative.storage.enums.DirectoryServiceOptions;
import io.pulumi.azurenative.storage.inputs.ActiveDirectoryPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Settings for Azure Files identity based authentication.
 * 
 */
public final class AzureFilesIdentityBasedAuthenticationArgs extends io.pulumi.resources.ResourceArgs {

    public static final AzureFilesIdentityBasedAuthenticationArgs Empty = new AzureFilesIdentityBasedAuthenticationArgs();

    /**
     * Required if choose AD.
     * 
     */
    @Import(name="activeDirectoryProperties")
      private final @Nullable Output<ActiveDirectoryPropertiesArgs> activeDirectoryProperties;

    public Output<ActiveDirectoryPropertiesArgs> activeDirectoryProperties() {
        return this.activeDirectoryProperties == null ? Codegen.empty() : this.activeDirectoryProperties;
    }

    /**
     * Indicates the directory service used.
     * 
     */
    @Import(name="directoryServiceOptions", required=true)
      private final Output<Either<String,DirectoryServiceOptions>> directoryServiceOptions;

    public Output<Either<String,DirectoryServiceOptions>> directoryServiceOptions() {
        return this.directoryServiceOptions;
    }

    public AzureFilesIdentityBasedAuthenticationArgs(
        @Nullable Output<ActiveDirectoryPropertiesArgs> activeDirectoryProperties,
        Output<Either<String,DirectoryServiceOptions>> directoryServiceOptions) {
        this.activeDirectoryProperties = activeDirectoryProperties;
        this.directoryServiceOptions = Objects.requireNonNull(directoryServiceOptions, "expected parameter 'directoryServiceOptions' to be non-null");
    }

    private AzureFilesIdentityBasedAuthenticationArgs() {
        this.activeDirectoryProperties = Codegen.empty();
        this.directoryServiceOptions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureFilesIdentityBasedAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ActiveDirectoryPropertiesArgs> activeDirectoryProperties;
        private Output<Either<String,DirectoryServiceOptions>> directoryServiceOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureFilesIdentityBasedAuthenticationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDirectoryProperties = defaults.activeDirectoryProperties;
    	      this.directoryServiceOptions = defaults.directoryServiceOptions;
        }

        public Builder activeDirectoryProperties(@Nullable Output<ActiveDirectoryPropertiesArgs> activeDirectoryProperties) {
            this.activeDirectoryProperties = activeDirectoryProperties;
            return this;
        }
        public Builder activeDirectoryProperties(@Nullable ActiveDirectoryPropertiesArgs activeDirectoryProperties) {
            this.activeDirectoryProperties = Codegen.ofNullable(activeDirectoryProperties);
            return this;
        }
        public Builder directoryServiceOptions(Output<Either<String,DirectoryServiceOptions>> directoryServiceOptions) {
            this.directoryServiceOptions = Objects.requireNonNull(directoryServiceOptions);
            return this;
        }
        public Builder directoryServiceOptions(Either<String,DirectoryServiceOptions> directoryServiceOptions) {
            this.directoryServiceOptions = Output.of(Objects.requireNonNull(directoryServiceOptions));
            return this;
        }        public AzureFilesIdentityBasedAuthenticationArgs build() {
            return new AzureFilesIdentityBasedAuthenticationArgs(activeDirectoryProperties, directoryServiceOptions);
        }
    }
}
