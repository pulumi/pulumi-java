// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.enums.FtpsState;
import io.pulumi.azurenative.web.enums.ManagedPipelineMode;
import io.pulumi.azurenative.web.enums.ScmType;
import io.pulumi.azurenative.web.enums.SiteLoadBalancing;
import io.pulumi.azurenative.web.enums.SupportedTlsVersions;
import io.pulumi.azurenative.web.inputs.ApiDefinitionInfoArgs;
import io.pulumi.azurenative.web.inputs.ApiManagementConfigArgs;
import io.pulumi.azurenative.web.inputs.AutoHealRulesArgs;
import io.pulumi.azurenative.web.inputs.AzureStorageInfoValueArgs;
import io.pulumi.azurenative.web.inputs.ConnStringInfoArgs;
import io.pulumi.azurenative.web.inputs.CorsSettingsArgs;
import io.pulumi.azurenative.web.inputs.ExperimentsArgs;
import io.pulumi.azurenative.web.inputs.HandlerMappingArgs;
import io.pulumi.azurenative.web.inputs.IpSecurityRestrictionArgs;
import io.pulumi.azurenative.web.inputs.NameValuePairArgs;
import io.pulumi.azurenative.web.inputs.PushSettingsArgs;
import io.pulumi.azurenative.web.inputs.SiteLimitsArgs;
import io.pulumi.azurenative.web.inputs.VirtualApplicationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration of an App Service app.
 * 
 */
public final class SiteConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final SiteConfigArgs Empty = new SiteConfigArgs();

    /**
     * Flag to use Managed Identity Creds for ACR pull
     * 
     */
    @InputImport(name="acrUseManagedIdentityCreds")
        private final @Nullable Input<Boolean> acrUseManagedIdentityCreds;

    public Input<Boolean> getAcrUseManagedIdentityCreds() {
        return this.acrUseManagedIdentityCreds == null ? Input.empty() : this.acrUseManagedIdentityCreds;
    }

    /**
     * If using user managed identity, the user managed identity ClientId
     * 
     */
    @InputImport(name="acrUserManagedIdentityID")
        private final @Nullable Input<String> acrUserManagedIdentityID;

    public Input<String> getAcrUserManagedIdentityID() {
        return this.acrUserManagedIdentityID == null ? Input.empty() : this.acrUserManagedIdentityID;
    }

    /**
     * <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="alwaysOn")
        private final @Nullable Input<Boolean> alwaysOn;

    public Input<Boolean> getAlwaysOn() {
        return this.alwaysOn == null ? Input.empty() : this.alwaysOn;
    }

    /**
     * Information about the formal API definition for the app.
     * 
     */
    @InputImport(name="apiDefinition")
        private final @Nullable Input<ApiDefinitionInfoArgs> apiDefinition;

    public Input<ApiDefinitionInfoArgs> getApiDefinition() {
        return this.apiDefinition == null ? Input.empty() : this.apiDefinition;
    }

    /**
     * Azure API management settings linked to the app.
     * 
     */
    @InputImport(name="apiManagementConfig")
        private final @Nullable Input<ApiManagementConfigArgs> apiManagementConfig;

    public Input<ApiManagementConfigArgs> getApiManagementConfig() {
        return this.apiManagementConfig == null ? Input.empty() : this.apiManagementConfig;
    }

    /**
     * App command line to launch.
     * 
     */
    @InputImport(name="appCommandLine")
        private final @Nullable Input<String> appCommandLine;

    public Input<String> getAppCommandLine() {
        return this.appCommandLine == null ? Input.empty() : this.appCommandLine;
    }

    /**
     * Application settings.
     * 
     */
    @InputImport(name="appSettings")
        private final @Nullable Input<List<NameValuePairArgs>> appSettings;

    public Input<List<NameValuePairArgs>> getAppSettings() {
        return this.appSettings == null ? Input.empty() : this.appSettings;
    }

    /**
     * <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="autoHealEnabled")
        private final @Nullable Input<Boolean> autoHealEnabled;

    public Input<Boolean> getAutoHealEnabled() {
        return this.autoHealEnabled == null ? Input.empty() : this.autoHealEnabled;
    }

    /**
     * Auto Heal rules.
     * 
     */
    @InputImport(name="autoHealRules")
        private final @Nullable Input<AutoHealRulesArgs> autoHealRules;

    public Input<AutoHealRulesArgs> getAutoHealRules() {
        return this.autoHealRules == null ? Input.empty() : this.autoHealRules;
    }

    /**
     * Auto-swap slot name.
     * 
     */
    @InputImport(name="autoSwapSlotName")
        private final @Nullable Input<String> autoSwapSlotName;

    public Input<String> getAutoSwapSlotName() {
        return this.autoSwapSlotName == null ? Input.empty() : this.autoSwapSlotName;
    }

    /**
     * List of Azure Storage Accounts.
     * 
     */
    @InputImport(name="azureStorageAccounts")
        private final @Nullable Input<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts;

    public Input<Map<String,AzureStorageInfoValueArgs>> getAzureStorageAccounts() {
        return this.azureStorageAccounts == null ? Input.empty() : this.azureStorageAccounts;
    }

    /**
     * Connection strings.
     * 
     */
    @InputImport(name="connectionStrings")
        private final @Nullable Input<List<ConnStringInfoArgs>> connectionStrings;

    public Input<List<ConnStringInfoArgs>> getConnectionStrings() {
        return this.connectionStrings == null ? Input.empty() : this.connectionStrings;
    }

    /**
     * Cross-Origin Resource Sharing (CORS) settings.
     * 
     */
    @InputImport(name="cors")
        private final @Nullable Input<CorsSettingsArgs> cors;

    public Input<CorsSettingsArgs> getCors() {
        return this.cors == null ? Input.empty() : this.cors;
    }

    /**
     * Default documents.
     * 
     */
    @InputImport(name="defaultDocuments")
        private final @Nullable Input<List<String>> defaultDocuments;

    public Input<List<String>> getDefaultDocuments() {
        return this.defaultDocuments == null ? Input.empty() : this.defaultDocuments;
    }

    /**
     * <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="detailedErrorLoggingEnabled")
        private final @Nullable Input<Boolean> detailedErrorLoggingEnabled;

    public Input<Boolean> getDetailedErrorLoggingEnabled() {
        return this.detailedErrorLoggingEnabled == null ? Input.empty() : this.detailedErrorLoggingEnabled;
    }

    /**
     * Document root.
     * 
     */
    @InputImport(name="documentRoot")
        private final @Nullable Input<String> documentRoot;

    public Input<String> getDocumentRoot() {
        return this.documentRoot == null ? Input.empty() : this.documentRoot;
    }

    /**
     * This is work around for polymorphic types.
     * 
     */
    @InputImport(name="experiments")
        private final @Nullable Input<ExperimentsArgs> experiments;

    public Input<ExperimentsArgs> getExperiments() {
        return this.experiments == null ? Input.empty() : this.experiments;
    }

    /**
     * State of FTP / FTPS service
     * 
     */
    @InputImport(name="ftpsState")
        private final @Nullable Input<Either<String,FtpsState>> ftpsState;

    public Input<Either<String,FtpsState>> getFtpsState() {
        return this.ftpsState == null ? Input.empty() : this.ftpsState;
    }

    /**
     * Maximum number of workers that a site can scale out to.
     * This setting only applies to the Consumption and Elastic Premium Plans
     * 
     */
    @InputImport(name="functionAppScaleLimit")
        private final @Nullable Input<Integer> functionAppScaleLimit;

    public Input<Integer> getFunctionAppScaleLimit() {
        return this.functionAppScaleLimit == null ? Input.empty() : this.functionAppScaleLimit;
    }

    /**
     * Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
     * the ScaleController will not monitor event sources directly, but will instead call to the
     * runtime to get scale status.
     * 
     */
    @InputImport(name="functionsRuntimeScaleMonitoringEnabled")
        private final @Nullable Input<Boolean> functionsRuntimeScaleMonitoringEnabled;

    public Input<Boolean> getFunctionsRuntimeScaleMonitoringEnabled() {
        return this.functionsRuntimeScaleMonitoringEnabled == null ? Input.empty() : this.functionsRuntimeScaleMonitoringEnabled;
    }

    /**
     * Handler mappings.
     * 
     */
    @InputImport(name="handlerMappings")
        private final @Nullable Input<List<HandlerMappingArgs>> handlerMappings;

    public Input<List<HandlerMappingArgs>> getHandlerMappings() {
        return this.handlerMappings == null ? Input.empty() : this.handlerMappings;
    }

    /**
     * Health check path
     * 
     */
    @InputImport(name="healthCheckPath")
        private final @Nullable Input<String> healthCheckPath;

    public Input<String> getHealthCheckPath() {
        return this.healthCheckPath == null ? Input.empty() : this.healthCheckPath;
    }

    /**
     * Http20Enabled: configures a web site to allow clients to connect over http2.0
     * 
     */
    @InputImport(name="http20Enabled")
        private final @Nullable Input<Boolean> http20Enabled;

    public Input<Boolean> getHttp20Enabled() {
        return this.http20Enabled == null ? Input.empty() : this.http20Enabled;
    }

    /**
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="httpLoggingEnabled")
        private final @Nullable Input<Boolean> httpLoggingEnabled;

    public Input<Boolean> getHttpLoggingEnabled() {
        return this.httpLoggingEnabled == null ? Input.empty() : this.httpLoggingEnabled;
    }

    /**
     * IP security restrictions for main.
     * 
     */
    @InputImport(name="ipSecurityRestrictions")
        private final @Nullable Input<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions;

    public Input<List<IpSecurityRestrictionArgs>> getIpSecurityRestrictions() {
        return this.ipSecurityRestrictions == null ? Input.empty() : this.ipSecurityRestrictions;
    }

    /**
     * Java container.
     * 
     */
    @InputImport(name="javaContainer")
        private final @Nullable Input<String> javaContainer;

    public Input<String> getJavaContainer() {
        return this.javaContainer == null ? Input.empty() : this.javaContainer;
    }

    /**
     * Java container version.
     * 
     */
    @InputImport(name="javaContainerVersion")
        private final @Nullable Input<String> javaContainerVersion;

    public Input<String> getJavaContainerVersion() {
        return this.javaContainerVersion == null ? Input.empty() : this.javaContainerVersion;
    }

    /**
     * Java version.
     * 
     */
    @InputImport(name="javaVersion")
        private final @Nullable Input<String> javaVersion;

    public Input<String> getJavaVersion() {
        return this.javaVersion == null ? Input.empty() : this.javaVersion;
    }

    /**
     * Identity to use for Key Vault Reference authentication.
     * 
     */
    @InputImport(name="keyVaultReferenceIdentity")
        private final @Nullable Input<String> keyVaultReferenceIdentity;

    public Input<String> getKeyVaultReferenceIdentity() {
        return this.keyVaultReferenceIdentity == null ? Input.empty() : this.keyVaultReferenceIdentity;
    }

    /**
     * Site limits.
     * 
     */
    @InputImport(name="limits")
        private final @Nullable Input<SiteLimitsArgs> limits;

    public Input<SiteLimitsArgs> getLimits() {
        return this.limits == null ? Input.empty() : this.limits;
    }

    /**
     * Linux App Framework and version
     * 
     */
    @InputImport(name="linuxFxVersion")
        private final @Nullable Input<String> linuxFxVersion;

    public Input<String> getLinuxFxVersion() {
        return this.linuxFxVersion == null ? Input.empty() : this.linuxFxVersion;
    }

    /**
     * Site load balancing.
     * 
     */
    @InputImport(name="loadBalancing")
        private final @Nullable Input<SiteLoadBalancing> loadBalancing;

    public Input<SiteLoadBalancing> getLoadBalancing() {
        return this.loadBalancing == null ? Input.empty() : this.loadBalancing;
    }

    /**
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="localMySqlEnabled")
        private final @Nullable Input<Boolean> localMySqlEnabled;

    public Input<Boolean> getLocalMySqlEnabled() {
        return this.localMySqlEnabled == null ? Input.empty() : this.localMySqlEnabled;
    }

    /**
     * HTTP logs directory size limit.
     * 
     */
    @InputImport(name="logsDirectorySizeLimit")
        private final @Nullable Input<Integer> logsDirectorySizeLimit;

    public Input<Integer> getLogsDirectorySizeLimit() {
        return this.logsDirectorySizeLimit == null ? Input.empty() : this.logsDirectorySizeLimit;
    }

    /**
     * Managed pipeline mode.
     * 
     */
    @InputImport(name="managedPipelineMode")
        private final @Nullable Input<ManagedPipelineMode> managedPipelineMode;

    public Input<ManagedPipelineMode> getManagedPipelineMode() {
        return this.managedPipelineMode == null ? Input.empty() : this.managedPipelineMode;
    }

    /**
     * Managed Service Identity Id
     * 
     */
    @InputImport(name="managedServiceIdentityId")
        private final @Nullable Input<Integer> managedServiceIdentityId;

    public Input<Integer> getManagedServiceIdentityId() {
        return this.managedServiceIdentityId == null ? Input.empty() : this.managedServiceIdentityId;
    }

    /**
     * MinTlsVersion: configures the minimum version of TLS required for SSL requests
     * 
     */
    @InputImport(name="minTlsVersion")
        private final @Nullable Input<Either<String,SupportedTlsVersions>> minTlsVersion;

    public Input<Either<String,SupportedTlsVersions>> getMinTlsVersion() {
        return this.minTlsVersion == null ? Input.empty() : this.minTlsVersion;
    }

    /**
     * Number of minimum instance count for a site
     * This setting only applies to the Elastic Plans
     * 
     */
    @InputImport(name="minimumElasticInstanceCount")
        private final @Nullable Input<Integer> minimumElasticInstanceCount;

    public Input<Integer> getMinimumElasticInstanceCount() {
        return this.minimumElasticInstanceCount == null ? Input.empty() : this.minimumElasticInstanceCount;
    }

    /**
     * .NET Framework version.
     * 
     */
    @InputImport(name="netFrameworkVersion")
        private final @Nullable Input<String> netFrameworkVersion;

    public Input<String> getNetFrameworkVersion() {
        return this.netFrameworkVersion == null ? Input.empty() : this.netFrameworkVersion;
    }

    /**
     * Version of Node.js.
     * 
     */
    @InputImport(name="nodeVersion")
        private final @Nullable Input<String> nodeVersion;

    public Input<String> getNodeVersion() {
        return this.nodeVersion == null ? Input.empty() : this.nodeVersion;
    }

    /**
     * Number of workers.
     * 
     */
    @InputImport(name="numberOfWorkers")
        private final @Nullable Input<Integer> numberOfWorkers;

    public Input<Integer> getNumberOfWorkers() {
        return this.numberOfWorkers == null ? Input.empty() : this.numberOfWorkers;
    }

    /**
     * Version of PHP.
     * 
     */
    @InputImport(name="phpVersion")
        private final @Nullable Input<String> phpVersion;

    public Input<String> getPhpVersion() {
        return this.phpVersion == null ? Input.empty() : this.phpVersion;
    }

    /**
     * Version of PowerShell.
     * 
     */
    @InputImport(name="powerShellVersion")
        private final @Nullable Input<String> powerShellVersion;

    public Input<String> getPowerShellVersion() {
        return this.powerShellVersion == null ? Input.empty() : this.powerShellVersion;
    }

    /**
     * Number of preWarmed instances.
     * This setting only applies to the Consumption and Elastic Plans
     * 
     */
    @InputImport(name="preWarmedInstanceCount")
        private final @Nullable Input<Integer> preWarmedInstanceCount;

    public Input<Integer> getPreWarmedInstanceCount() {
        return this.preWarmedInstanceCount == null ? Input.empty() : this.preWarmedInstanceCount;
    }

    /**
     * Property to allow or block all public traffic.
     * 
     */
    @InputImport(name="publicNetworkAccess")
        private final @Nullable Input<String> publicNetworkAccess;

    public Input<String> getPublicNetworkAccess() {
        return this.publicNetworkAccess == null ? Input.empty() : this.publicNetworkAccess;
    }

    /**
     * Publishing user name.
     * 
     */
    @InputImport(name="publishingUsername")
        private final @Nullable Input<String> publishingUsername;

    public Input<String> getPublishingUsername() {
        return this.publishingUsername == null ? Input.empty() : this.publishingUsername;
    }

    /**
     * Push endpoint settings.
     * 
     */
    @InputImport(name="push")
        private final @Nullable Input<PushSettingsArgs> push;

    public Input<PushSettingsArgs> getPush() {
        return this.push == null ? Input.empty() : this.push;
    }

    /**
     * Version of Python.
     * 
     */
    @InputImport(name="pythonVersion")
        private final @Nullable Input<String> pythonVersion;

    public Input<String> getPythonVersion() {
        return this.pythonVersion == null ? Input.empty() : this.pythonVersion;
    }

    /**
     * <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="remoteDebuggingEnabled")
        private final @Nullable Input<Boolean> remoteDebuggingEnabled;

    public Input<Boolean> getRemoteDebuggingEnabled() {
        return this.remoteDebuggingEnabled == null ? Input.empty() : this.remoteDebuggingEnabled;
    }

    /**
     * Remote debugging version.
     * 
     */
    @InputImport(name="remoteDebuggingVersion")
        private final @Nullable Input<String> remoteDebuggingVersion;

    public Input<String> getRemoteDebuggingVersion() {
        return this.remoteDebuggingVersion == null ? Input.empty() : this.remoteDebuggingVersion;
    }

    /**
     * <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="requestTracingEnabled")
        private final @Nullable Input<Boolean> requestTracingEnabled;

    public Input<Boolean> getRequestTracingEnabled() {
        return this.requestTracingEnabled == null ? Input.empty() : this.requestTracingEnabled;
    }

    /**
     * Request tracing expiration time.
     * 
     */
    @InputImport(name="requestTracingExpirationTime")
        private final @Nullable Input<String> requestTracingExpirationTime;

    public Input<String> getRequestTracingExpirationTime() {
        return this.requestTracingExpirationTime == null ? Input.empty() : this.requestTracingExpirationTime;
    }

    /**
     * IP security restrictions for scm.
     * 
     */
    @InputImport(name="scmIpSecurityRestrictions")
        private final @Nullable Input<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions;

    public Input<List<IpSecurityRestrictionArgs>> getScmIpSecurityRestrictions() {
        return this.scmIpSecurityRestrictions == null ? Input.empty() : this.scmIpSecurityRestrictions;
    }

    /**
     * IP security restrictions for scm to use main.
     * 
     */
    @InputImport(name="scmIpSecurityRestrictionsUseMain")
        private final @Nullable Input<Boolean> scmIpSecurityRestrictionsUseMain;

    public Input<Boolean> getScmIpSecurityRestrictionsUseMain() {
        return this.scmIpSecurityRestrictionsUseMain == null ? Input.empty() : this.scmIpSecurityRestrictionsUseMain;
    }

    /**
     * ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
     * 
     */
    @InputImport(name="scmMinTlsVersion")
        private final @Nullable Input<Either<String,SupportedTlsVersions>> scmMinTlsVersion;

    public Input<Either<String,SupportedTlsVersions>> getScmMinTlsVersion() {
        return this.scmMinTlsVersion == null ? Input.empty() : this.scmMinTlsVersion;
    }

    /**
     * SCM type.
     * 
     */
    @InputImport(name="scmType")
        private final @Nullable Input<Either<String,ScmType>> scmType;

    public Input<Either<String,ScmType>> getScmType() {
        return this.scmType == null ? Input.empty() : this.scmType;
    }

    /**
     * Tracing options.
     * 
     */
    @InputImport(name="tracingOptions")
        private final @Nullable Input<String> tracingOptions;

    public Input<String> getTracingOptions() {
        return this.tracingOptions == null ? Input.empty() : this.tracingOptions;
    }

    /**
     * <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="use32BitWorkerProcess")
        private final @Nullable Input<Boolean> use32BitWorkerProcess;

    public Input<Boolean> getUse32BitWorkerProcess() {
        return this.use32BitWorkerProcess == null ? Input.empty() : this.use32BitWorkerProcess;
    }

    /**
     * Virtual applications.
     * 
     */
    @InputImport(name="virtualApplications")
        private final @Nullable Input<List<VirtualApplicationArgs>> virtualApplications;

    public Input<List<VirtualApplicationArgs>> getVirtualApplications() {
        return this.virtualApplications == null ? Input.empty() : this.virtualApplications;
    }

    /**
     * Virtual Network name.
     * 
     */
    @InputImport(name="vnetName")
        private final @Nullable Input<String> vnetName;

    public Input<String> getVnetName() {
        return this.vnetName == null ? Input.empty() : this.vnetName;
    }

    /**
     * The number of private ports assigned to this app. These will be assigned dynamically on runtime.
     * 
     */
    @InputImport(name="vnetPrivatePortsCount")
        private final @Nullable Input<Integer> vnetPrivatePortsCount;

    public Input<Integer> getVnetPrivatePortsCount() {
        return this.vnetPrivatePortsCount == null ? Input.empty() : this.vnetPrivatePortsCount;
    }

    /**
     * Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     * 
     */
    @InputImport(name="vnetRouteAllEnabled")
        private final @Nullable Input<Boolean> vnetRouteAllEnabled;

    public Input<Boolean> getVnetRouteAllEnabled() {
        return this.vnetRouteAllEnabled == null ? Input.empty() : this.vnetRouteAllEnabled;
    }

    /**
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="webSocketsEnabled")
        private final @Nullable Input<Boolean> webSocketsEnabled;

    public Input<Boolean> getWebSocketsEnabled() {
        return this.webSocketsEnabled == null ? Input.empty() : this.webSocketsEnabled;
    }

    /**
     * Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
     * 
     */
    @InputImport(name="websiteTimeZone")
        private final @Nullable Input<String> websiteTimeZone;

    public Input<String> getWebsiteTimeZone() {
        return this.websiteTimeZone == null ? Input.empty() : this.websiteTimeZone;
    }

    /**
     * Xenon App Framework and version
     * 
     */
    @InputImport(name="windowsFxVersion")
        private final @Nullable Input<String> windowsFxVersion;

    public Input<String> getWindowsFxVersion() {
        return this.windowsFxVersion == null ? Input.empty() : this.windowsFxVersion;
    }

    /**
     * Explicit Managed Service Identity Id
     * 
     */
    @InputImport(name="xManagedServiceIdentityId")
        private final @Nullable Input<Integer> xManagedServiceIdentityId;

    public Input<Integer> getXManagedServiceIdentityId() {
        return this.xManagedServiceIdentityId == null ? Input.empty() : this.xManagedServiceIdentityId;
    }

    public SiteConfigArgs(
        @Nullable Input<Boolean> acrUseManagedIdentityCreds,
        @Nullable Input<String> acrUserManagedIdentityID,
        @Nullable Input<Boolean> alwaysOn,
        @Nullable Input<ApiDefinitionInfoArgs> apiDefinition,
        @Nullable Input<ApiManagementConfigArgs> apiManagementConfig,
        @Nullable Input<String> appCommandLine,
        @Nullable Input<List<NameValuePairArgs>> appSettings,
        @Nullable Input<Boolean> autoHealEnabled,
        @Nullable Input<AutoHealRulesArgs> autoHealRules,
        @Nullable Input<String> autoSwapSlotName,
        @Nullable Input<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts,
        @Nullable Input<List<ConnStringInfoArgs>> connectionStrings,
        @Nullable Input<CorsSettingsArgs> cors,
        @Nullable Input<List<String>> defaultDocuments,
        @Nullable Input<Boolean> detailedErrorLoggingEnabled,
        @Nullable Input<String> documentRoot,
        @Nullable Input<ExperimentsArgs> experiments,
        @Nullable Input<Either<String,FtpsState>> ftpsState,
        @Nullable Input<Integer> functionAppScaleLimit,
        @Nullable Input<Boolean> functionsRuntimeScaleMonitoringEnabled,
        @Nullable Input<List<HandlerMappingArgs>> handlerMappings,
        @Nullable Input<String> healthCheckPath,
        @Nullable Input<Boolean> http20Enabled,
        @Nullable Input<Boolean> httpLoggingEnabled,
        @Nullable Input<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions,
        @Nullable Input<String> javaContainer,
        @Nullable Input<String> javaContainerVersion,
        @Nullable Input<String> javaVersion,
        @Nullable Input<String> keyVaultReferenceIdentity,
        @Nullable Input<SiteLimitsArgs> limits,
        @Nullable Input<String> linuxFxVersion,
        @Nullable Input<SiteLoadBalancing> loadBalancing,
        @Nullable Input<Boolean> localMySqlEnabled,
        @Nullable Input<Integer> logsDirectorySizeLimit,
        @Nullable Input<ManagedPipelineMode> managedPipelineMode,
        @Nullable Input<Integer> managedServiceIdentityId,
        @Nullable Input<Either<String,SupportedTlsVersions>> minTlsVersion,
        @Nullable Input<Integer> minimumElasticInstanceCount,
        @Nullable Input<String> netFrameworkVersion,
        @Nullable Input<String> nodeVersion,
        @Nullable Input<Integer> numberOfWorkers,
        @Nullable Input<String> phpVersion,
        @Nullable Input<String> powerShellVersion,
        @Nullable Input<Integer> preWarmedInstanceCount,
        @Nullable Input<String> publicNetworkAccess,
        @Nullable Input<String> publishingUsername,
        @Nullable Input<PushSettingsArgs> push,
        @Nullable Input<String> pythonVersion,
        @Nullable Input<Boolean> remoteDebuggingEnabled,
        @Nullable Input<String> remoteDebuggingVersion,
        @Nullable Input<Boolean> requestTracingEnabled,
        @Nullable Input<String> requestTracingExpirationTime,
        @Nullable Input<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions,
        @Nullable Input<Boolean> scmIpSecurityRestrictionsUseMain,
        @Nullable Input<Either<String,SupportedTlsVersions>> scmMinTlsVersion,
        @Nullable Input<Either<String,ScmType>> scmType,
        @Nullable Input<String> tracingOptions,
        @Nullable Input<Boolean> use32BitWorkerProcess,
        @Nullable Input<List<VirtualApplicationArgs>> virtualApplications,
        @Nullable Input<String> vnetName,
        @Nullable Input<Integer> vnetPrivatePortsCount,
        @Nullable Input<Boolean> vnetRouteAllEnabled,
        @Nullable Input<Boolean> webSocketsEnabled,
        @Nullable Input<String> websiteTimeZone,
        @Nullable Input<String> windowsFxVersion,
        @Nullable Input<Integer> xManagedServiceIdentityId) {
        this.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
        this.acrUserManagedIdentityID = acrUserManagedIdentityID;
        this.alwaysOn = alwaysOn;
        this.apiDefinition = apiDefinition;
        this.apiManagementConfig = apiManagementConfig;
        this.appCommandLine = appCommandLine;
        this.appSettings = appSettings;
        this.autoHealEnabled = autoHealEnabled;
        this.autoHealRules = autoHealRules;
        this.autoSwapSlotName = autoSwapSlotName;
        this.azureStorageAccounts = azureStorageAccounts;
        this.connectionStrings = connectionStrings;
        this.cors = cors;
        this.defaultDocuments = defaultDocuments;
        this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
        this.documentRoot = documentRoot;
        this.experiments = experiments;
        this.ftpsState = ftpsState;
        this.functionAppScaleLimit = functionAppScaleLimit;
        this.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
        this.handlerMappings = handlerMappings;
        this.healthCheckPath = healthCheckPath;
        this.http20Enabled = http20Enabled == null ? Input.ofNullable(true) : http20Enabled;
        this.httpLoggingEnabled = httpLoggingEnabled;
        this.ipSecurityRestrictions = ipSecurityRestrictions;
        this.javaContainer = javaContainer;
        this.javaContainerVersion = javaContainerVersion;
        this.javaVersion = javaVersion;
        this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
        this.limits = limits;
        this.linuxFxVersion = linuxFxVersion;
        this.loadBalancing = loadBalancing;
        this.localMySqlEnabled = localMySqlEnabled == null ? Input.ofNullable(false) : localMySqlEnabled;
        this.logsDirectorySizeLimit = logsDirectorySizeLimit;
        this.managedPipelineMode = managedPipelineMode;
        this.managedServiceIdentityId = managedServiceIdentityId;
        this.minTlsVersion = minTlsVersion;
        this.minimumElasticInstanceCount = minimumElasticInstanceCount;
        this.netFrameworkVersion = netFrameworkVersion == null ? Input.ofNullable("v4.6") : netFrameworkVersion;
        this.nodeVersion = nodeVersion;
        this.numberOfWorkers = numberOfWorkers;
        this.phpVersion = phpVersion;
        this.powerShellVersion = powerShellVersion;
        this.preWarmedInstanceCount = preWarmedInstanceCount;
        this.publicNetworkAccess = publicNetworkAccess;
        this.publishingUsername = publishingUsername;
        this.push = push;
        this.pythonVersion = pythonVersion;
        this.remoteDebuggingEnabled = remoteDebuggingEnabled;
        this.remoteDebuggingVersion = remoteDebuggingVersion;
        this.requestTracingEnabled = requestTracingEnabled;
        this.requestTracingExpirationTime = requestTracingExpirationTime;
        this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
        this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
        this.scmMinTlsVersion = scmMinTlsVersion;
        this.scmType = scmType;
        this.tracingOptions = tracingOptions;
        this.use32BitWorkerProcess = use32BitWorkerProcess;
        this.virtualApplications = virtualApplications;
        this.vnetName = vnetName;
        this.vnetPrivatePortsCount = vnetPrivatePortsCount;
        this.vnetRouteAllEnabled = vnetRouteAllEnabled;
        this.webSocketsEnabled = webSocketsEnabled;
        this.websiteTimeZone = websiteTimeZone;
        this.windowsFxVersion = windowsFxVersion;
        this.xManagedServiceIdentityId = xManagedServiceIdentityId;
    }

    private SiteConfigArgs() {
        this.acrUseManagedIdentityCreds = Input.empty();
        this.acrUserManagedIdentityID = Input.empty();
        this.alwaysOn = Input.empty();
        this.apiDefinition = Input.empty();
        this.apiManagementConfig = Input.empty();
        this.appCommandLine = Input.empty();
        this.appSettings = Input.empty();
        this.autoHealEnabled = Input.empty();
        this.autoHealRules = Input.empty();
        this.autoSwapSlotName = Input.empty();
        this.azureStorageAccounts = Input.empty();
        this.connectionStrings = Input.empty();
        this.cors = Input.empty();
        this.defaultDocuments = Input.empty();
        this.detailedErrorLoggingEnabled = Input.empty();
        this.documentRoot = Input.empty();
        this.experiments = Input.empty();
        this.ftpsState = Input.empty();
        this.functionAppScaleLimit = Input.empty();
        this.functionsRuntimeScaleMonitoringEnabled = Input.empty();
        this.handlerMappings = Input.empty();
        this.healthCheckPath = Input.empty();
        this.http20Enabled = Input.empty();
        this.httpLoggingEnabled = Input.empty();
        this.ipSecurityRestrictions = Input.empty();
        this.javaContainer = Input.empty();
        this.javaContainerVersion = Input.empty();
        this.javaVersion = Input.empty();
        this.keyVaultReferenceIdentity = Input.empty();
        this.limits = Input.empty();
        this.linuxFxVersion = Input.empty();
        this.loadBalancing = Input.empty();
        this.localMySqlEnabled = Input.empty();
        this.logsDirectorySizeLimit = Input.empty();
        this.managedPipelineMode = Input.empty();
        this.managedServiceIdentityId = Input.empty();
        this.minTlsVersion = Input.empty();
        this.minimumElasticInstanceCount = Input.empty();
        this.netFrameworkVersion = Input.empty();
        this.nodeVersion = Input.empty();
        this.numberOfWorkers = Input.empty();
        this.phpVersion = Input.empty();
        this.powerShellVersion = Input.empty();
        this.preWarmedInstanceCount = Input.empty();
        this.publicNetworkAccess = Input.empty();
        this.publishingUsername = Input.empty();
        this.push = Input.empty();
        this.pythonVersion = Input.empty();
        this.remoteDebuggingEnabled = Input.empty();
        this.remoteDebuggingVersion = Input.empty();
        this.requestTracingEnabled = Input.empty();
        this.requestTracingExpirationTime = Input.empty();
        this.scmIpSecurityRestrictions = Input.empty();
        this.scmIpSecurityRestrictionsUseMain = Input.empty();
        this.scmMinTlsVersion = Input.empty();
        this.scmType = Input.empty();
        this.tracingOptions = Input.empty();
        this.use32BitWorkerProcess = Input.empty();
        this.virtualApplications = Input.empty();
        this.vnetName = Input.empty();
        this.vnetPrivatePortsCount = Input.empty();
        this.vnetRouteAllEnabled = Input.empty();
        this.webSocketsEnabled = Input.empty();
        this.websiteTimeZone = Input.empty();
        this.windowsFxVersion = Input.empty();
        this.xManagedServiceIdentityId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SiteConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> acrUseManagedIdentityCreds;
        private @Nullable Input<String> acrUserManagedIdentityID;
        private @Nullable Input<Boolean> alwaysOn;
        private @Nullable Input<ApiDefinitionInfoArgs> apiDefinition;
        private @Nullable Input<ApiManagementConfigArgs> apiManagementConfig;
        private @Nullable Input<String> appCommandLine;
        private @Nullable Input<List<NameValuePairArgs>> appSettings;
        private @Nullable Input<Boolean> autoHealEnabled;
        private @Nullable Input<AutoHealRulesArgs> autoHealRules;
        private @Nullable Input<String> autoSwapSlotName;
        private @Nullable Input<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts;
        private @Nullable Input<List<ConnStringInfoArgs>> connectionStrings;
        private @Nullable Input<CorsSettingsArgs> cors;
        private @Nullable Input<List<String>> defaultDocuments;
        private @Nullable Input<Boolean> detailedErrorLoggingEnabled;
        private @Nullable Input<String> documentRoot;
        private @Nullable Input<ExperimentsArgs> experiments;
        private @Nullable Input<Either<String,FtpsState>> ftpsState;
        private @Nullable Input<Integer> functionAppScaleLimit;
        private @Nullable Input<Boolean> functionsRuntimeScaleMonitoringEnabled;
        private @Nullable Input<List<HandlerMappingArgs>> handlerMappings;
        private @Nullable Input<String> healthCheckPath;
        private @Nullable Input<Boolean> http20Enabled;
        private @Nullable Input<Boolean> httpLoggingEnabled;
        private @Nullable Input<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions;
        private @Nullable Input<String> javaContainer;
        private @Nullable Input<String> javaContainerVersion;
        private @Nullable Input<String> javaVersion;
        private @Nullable Input<String> keyVaultReferenceIdentity;
        private @Nullable Input<SiteLimitsArgs> limits;
        private @Nullable Input<String> linuxFxVersion;
        private @Nullable Input<SiteLoadBalancing> loadBalancing;
        private @Nullable Input<Boolean> localMySqlEnabled;
        private @Nullable Input<Integer> logsDirectorySizeLimit;
        private @Nullable Input<ManagedPipelineMode> managedPipelineMode;
        private @Nullable Input<Integer> managedServiceIdentityId;
        private @Nullable Input<Either<String,SupportedTlsVersions>> minTlsVersion;
        private @Nullable Input<Integer> minimumElasticInstanceCount;
        private @Nullable Input<String> netFrameworkVersion;
        private @Nullable Input<String> nodeVersion;
        private @Nullable Input<Integer> numberOfWorkers;
        private @Nullable Input<String> phpVersion;
        private @Nullable Input<String> powerShellVersion;
        private @Nullable Input<Integer> preWarmedInstanceCount;
        private @Nullable Input<String> publicNetworkAccess;
        private @Nullable Input<String> publishingUsername;
        private @Nullable Input<PushSettingsArgs> push;
        private @Nullable Input<String> pythonVersion;
        private @Nullable Input<Boolean> remoteDebuggingEnabled;
        private @Nullable Input<String> remoteDebuggingVersion;
        private @Nullable Input<Boolean> requestTracingEnabled;
        private @Nullable Input<String> requestTracingExpirationTime;
        private @Nullable Input<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions;
        private @Nullable Input<Boolean> scmIpSecurityRestrictionsUseMain;
        private @Nullable Input<Either<String,SupportedTlsVersions>> scmMinTlsVersion;
        private @Nullable Input<Either<String,ScmType>> scmType;
        private @Nullable Input<String> tracingOptions;
        private @Nullable Input<Boolean> use32BitWorkerProcess;
        private @Nullable Input<List<VirtualApplicationArgs>> virtualApplications;
        private @Nullable Input<String> vnetName;
        private @Nullable Input<Integer> vnetPrivatePortsCount;
        private @Nullable Input<Boolean> vnetRouteAllEnabled;
        private @Nullable Input<Boolean> webSocketsEnabled;
        private @Nullable Input<String> websiteTimeZone;
        private @Nullable Input<String> windowsFxVersion;
        private @Nullable Input<Integer> xManagedServiceIdentityId;

        public Builder() {
    	      // Empty
        }

        public Builder(SiteConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acrUseManagedIdentityCreds = defaults.acrUseManagedIdentityCreds;
    	      this.acrUserManagedIdentityID = defaults.acrUserManagedIdentityID;
    	      this.alwaysOn = defaults.alwaysOn;
    	      this.apiDefinition = defaults.apiDefinition;
    	      this.apiManagementConfig = defaults.apiManagementConfig;
    	      this.appCommandLine = defaults.appCommandLine;
    	      this.appSettings = defaults.appSettings;
    	      this.autoHealEnabled = defaults.autoHealEnabled;
    	      this.autoHealRules = defaults.autoHealRules;
    	      this.autoSwapSlotName = defaults.autoSwapSlotName;
    	      this.azureStorageAccounts = defaults.azureStorageAccounts;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.cors = defaults.cors;
    	      this.defaultDocuments = defaults.defaultDocuments;
    	      this.detailedErrorLoggingEnabled = defaults.detailedErrorLoggingEnabled;
    	      this.documentRoot = defaults.documentRoot;
    	      this.experiments = defaults.experiments;
    	      this.ftpsState = defaults.ftpsState;
    	      this.functionAppScaleLimit = defaults.functionAppScaleLimit;
    	      this.functionsRuntimeScaleMonitoringEnabled = defaults.functionsRuntimeScaleMonitoringEnabled;
    	      this.handlerMappings = defaults.handlerMappings;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.http20Enabled = defaults.http20Enabled;
    	      this.httpLoggingEnabled = defaults.httpLoggingEnabled;
    	      this.ipSecurityRestrictions = defaults.ipSecurityRestrictions;
    	      this.javaContainer = defaults.javaContainer;
    	      this.javaContainerVersion = defaults.javaContainerVersion;
    	      this.javaVersion = defaults.javaVersion;
    	      this.keyVaultReferenceIdentity = defaults.keyVaultReferenceIdentity;
    	      this.limits = defaults.limits;
    	      this.linuxFxVersion = defaults.linuxFxVersion;
    	      this.loadBalancing = defaults.loadBalancing;
    	      this.localMySqlEnabled = defaults.localMySqlEnabled;
    	      this.logsDirectorySizeLimit = defaults.logsDirectorySizeLimit;
    	      this.managedPipelineMode = defaults.managedPipelineMode;
    	      this.managedServiceIdentityId = defaults.managedServiceIdentityId;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.minimumElasticInstanceCount = defaults.minimumElasticInstanceCount;
    	      this.netFrameworkVersion = defaults.netFrameworkVersion;
    	      this.nodeVersion = defaults.nodeVersion;
    	      this.numberOfWorkers = defaults.numberOfWorkers;
    	      this.phpVersion = defaults.phpVersion;
    	      this.powerShellVersion = defaults.powerShellVersion;
    	      this.preWarmedInstanceCount = defaults.preWarmedInstanceCount;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.publishingUsername = defaults.publishingUsername;
    	      this.push = defaults.push;
    	      this.pythonVersion = defaults.pythonVersion;
    	      this.remoteDebuggingEnabled = defaults.remoteDebuggingEnabled;
    	      this.remoteDebuggingVersion = defaults.remoteDebuggingVersion;
    	      this.requestTracingEnabled = defaults.requestTracingEnabled;
    	      this.requestTracingExpirationTime = defaults.requestTracingExpirationTime;
    	      this.scmIpSecurityRestrictions = defaults.scmIpSecurityRestrictions;
    	      this.scmIpSecurityRestrictionsUseMain = defaults.scmIpSecurityRestrictionsUseMain;
    	      this.scmMinTlsVersion = defaults.scmMinTlsVersion;
    	      this.scmType = defaults.scmType;
    	      this.tracingOptions = defaults.tracingOptions;
    	      this.use32BitWorkerProcess = defaults.use32BitWorkerProcess;
    	      this.virtualApplications = defaults.virtualApplications;
    	      this.vnetName = defaults.vnetName;
    	      this.vnetPrivatePortsCount = defaults.vnetPrivatePortsCount;
    	      this.vnetRouteAllEnabled = defaults.vnetRouteAllEnabled;
    	      this.webSocketsEnabled = defaults.webSocketsEnabled;
    	      this.websiteTimeZone = defaults.websiteTimeZone;
    	      this.windowsFxVersion = defaults.windowsFxVersion;
    	      this.xManagedServiceIdentityId = defaults.xManagedServiceIdentityId;
        }

        public Builder setAcrUseManagedIdentityCreds(@Nullable Input<Boolean> acrUseManagedIdentityCreds) {
            this.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
            return this;
        }

        public Builder setAcrUseManagedIdentityCreds(@Nullable Boolean acrUseManagedIdentityCreds) {
            this.acrUseManagedIdentityCreds = Input.ofNullable(acrUseManagedIdentityCreds);
            return this;
        }

        public Builder setAcrUserManagedIdentityID(@Nullable Input<String> acrUserManagedIdentityID) {
            this.acrUserManagedIdentityID = acrUserManagedIdentityID;
            return this;
        }

        public Builder setAcrUserManagedIdentityID(@Nullable String acrUserManagedIdentityID) {
            this.acrUserManagedIdentityID = Input.ofNullable(acrUserManagedIdentityID);
            return this;
        }

        public Builder setAlwaysOn(@Nullable Input<Boolean> alwaysOn) {
            this.alwaysOn = alwaysOn;
            return this;
        }

        public Builder setAlwaysOn(@Nullable Boolean alwaysOn) {
            this.alwaysOn = Input.ofNullable(alwaysOn);
            return this;
        }

        public Builder setApiDefinition(@Nullable Input<ApiDefinitionInfoArgs> apiDefinition) {
            this.apiDefinition = apiDefinition;
            return this;
        }

        public Builder setApiDefinition(@Nullable ApiDefinitionInfoArgs apiDefinition) {
            this.apiDefinition = Input.ofNullable(apiDefinition);
            return this;
        }

        public Builder setApiManagementConfig(@Nullable Input<ApiManagementConfigArgs> apiManagementConfig) {
            this.apiManagementConfig = apiManagementConfig;
            return this;
        }

        public Builder setApiManagementConfig(@Nullable ApiManagementConfigArgs apiManagementConfig) {
            this.apiManagementConfig = Input.ofNullable(apiManagementConfig);
            return this;
        }

        public Builder setAppCommandLine(@Nullable Input<String> appCommandLine) {
            this.appCommandLine = appCommandLine;
            return this;
        }

        public Builder setAppCommandLine(@Nullable String appCommandLine) {
            this.appCommandLine = Input.ofNullable(appCommandLine);
            return this;
        }

        public Builder setAppSettings(@Nullable Input<List<NameValuePairArgs>> appSettings) {
            this.appSettings = appSettings;
            return this;
        }

        public Builder setAppSettings(@Nullable List<NameValuePairArgs> appSettings) {
            this.appSettings = Input.ofNullable(appSettings);
            return this;
        }

        public Builder setAutoHealEnabled(@Nullable Input<Boolean> autoHealEnabled) {
            this.autoHealEnabled = autoHealEnabled;
            return this;
        }

        public Builder setAutoHealEnabled(@Nullable Boolean autoHealEnabled) {
            this.autoHealEnabled = Input.ofNullable(autoHealEnabled);
            return this;
        }

        public Builder setAutoHealRules(@Nullable Input<AutoHealRulesArgs> autoHealRules) {
            this.autoHealRules = autoHealRules;
            return this;
        }

        public Builder setAutoHealRules(@Nullable AutoHealRulesArgs autoHealRules) {
            this.autoHealRules = Input.ofNullable(autoHealRules);
            return this;
        }

        public Builder setAutoSwapSlotName(@Nullable Input<String> autoSwapSlotName) {
            this.autoSwapSlotName = autoSwapSlotName;
            return this;
        }

        public Builder setAutoSwapSlotName(@Nullable String autoSwapSlotName) {
            this.autoSwapSlotName = Input.ofNullable(autoSwapSlotName);
            return this;
        }

        public Builder setAzureStorageAccounts(@Nullable Input<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts) {
            this.azureStorageAccounts = azureStorageAccounts;
            return this;
        }

        public Builder setAzureStorageAccounts(@Nullable Map<String,AzureStorageInfoValueArgs> azureStorageAccounts) {
            this.azureStorageAccounts = Input.ofNullable(azureStorageAccounts);
            return this;
        }

        public Builder setConnectionStrings(@Nullable Input<List<ConnStringInfoArgs>> connectionStrings) {
            this.connectionStrings = connectionStrings;
            return this;
        }

        public Builder setConnectionStrings(@Nullable List<ConnStringInfoArgs> connectionStrings) {
            this.connectionStrings = Input.ofNullable(connectionStrings);
            return this;
        }

        public Builder setCors(@Nullable Input<CorsSettingsArgs> cors) {
            this.cors = cors;
            return this;
        }

        public Builder setCors(@Nullable CorsSettingsArgs cors) {
            this.cors = Input.ofNullable(cors);
            return this;
        }

        public Builder setDefaultDocuments(@Nullable Input<List<String>> defaultDocuments) {
            this.defaultDocuments = defaultDocuments;
            return this;
        }

        public Builder setDefaultDocuments(@Nullable List<String> defaultDocuments) {
            this.defaultDocuments = Input.ofNullable(defaultDocuments);
            return this;
        }

        public Builder setDetailedErrorLoggingEnabled(@Nullable Input<Boolean> detailedErrorLoggingEnabled) {
            this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            return this;
        }

        public Builder setDetailedErrorLoggingEnabled(@Nullable Boolean detailedErrorLoggingEnabled) {
            this.detailedErrorLoggingEnabled = Input.ofNullable(detailedErrorLoggingEnabled);
            return this;
        }

        public Builder setDocumentRoot(@Nullable Input<String> documentRoot) {
            this.documentRoot = documentRoot;
            return this;
        }

        public Builder setDocumentRoot(@Nullable String documentRoot) {
            this.documentRoot = Input.ofNullable(documentRoot);
            return this;
        }

        public Builder setExperiments(@Nullable Input<ExperimentsArgs> experiments) {
            this.experiments = experiments;
            return this;
        }

        public Builder setExperiments(@Nullable ExperimentsArgs experiments) {
            this.experiments = Input.ofNullable(experiments);
            return this;
        }

        public Builder setFtpsState(@Nullable Input<Either<String,FtpsState>> ftpsState) {
            this.ftpsState = ftpsState;
            return this;
        }

        public Builder setFtpsState(@Nullable Either<String,FtpsState> ftpsState) {
            this.ftpsState = Input.ofNullable(ftpsState);
            return this;
        }

        public Builder setFunctionAppScaleLimit(@Nullable Input<Integer> functionAppScaleLimit) {
            this.functionAppScaleLimit = functionAppScaleLimit;
            return this;
        }

        public Builder setFunctionAppScaleLimit(@Nullable Integer functionAppScaleLimit) {
            this.functionAppScaleLimit = Input.ofNullable(functionAppScaleLimit);
            return this;
        }

        public Builder setFunctionsRuntimeScaleMonitoringEnabled(@Nullable Input<Boolean> functionsRuntimeScaleMonitoringEnabled) {
            this.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
            return this;
        }

        public Builder setFunctionsRuntimeScaleMonitoringEnabled(@Nullable Boolean functionsRuntimeScaleMonitoringEnabled) {
            this.functionsRuntimeScaleMonitoringEnabled = Input.ofNullable(functionsRuntimeScaleMonitoringEnabled);
            return this;
        }

        public Builder setHandlerMappings(@Nullable Input<List<HandlerMappingArgs>> handlerMappings) {
            this.handlerMappings = handlerMappings;
            return this;
        }

        public Builder setHandlerMappings(@Nullable List<HandlerMappingArgs> handlerMappings) {
            this.handlerMappings = Input.ofNullable(handlerMappings);
            return this;
        }

        public Builder setHealthCheckPath(@Nullable Input<String> healthCheckPath) {
            this.healthCheckPath = healthCheckPath;
            return this;
        }

        public Builder setHealthCheckPath(@Nullable String healthCheckPath) {
            this.healthCheckPath = Input.ofNullable(healthCheckPath);
            return this;
        }

        public Builder setHttp20Enabled(@Nullable Input<Boolean> http20Enabled) {
            this.http20Enabled = http20Enabled;
            return this;
        }

        public Builder setHttp20Enabled(@Nullable Boolean http20Enabled) {
            this.http20Enabled = Input.ofNullable(http20Enabled);
            return this;
        }

        public Builder setHttpLoggingEnabled(@Nullable Input<Boolean> httpLoggingEnabled) {
            this.httpLoggingEnabled = httpLoggingEnabled;
            return this;
        }

        public Builder setHttpLoggingEnabled(@Nullable Boolean httpLoggingEnabled) {
            this.httpLoggingEnabled = Input.ofNullable(httpLoggingEnabled);
            return this;
        }

        public Builder setIpSecurityRestrictions(@Nullable Input<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions) {
            this.ipSecurityRestrictions = ipSecurityRestrictions;
            return this;
        }

        public Builder setIpSecurityRestrictions(@Nullable List<IpSecurityRestrictionArgs> ipSecurityRestrictions) {
            this.ipSecurityRestrictions = Input.ofNullable(ipSecurityRestrictions);
            return this;
        }

        public Builder setJavaContainer(@Nullable Input<String> javaContainer) {
            this.javaContainer = javaContainer;
            return this;
        }

        public Builder setJavaContainer(@Nullable String javaContainer) {
            this.javaContainer = Input.ofNullable(javaContainer);
            return this;
        }

        public Builder setJavaContainerVersion(@Nullable Input<String> javaContainerVersion) {
            this.javaContainerVersion = javaContainerVersion;
            return this;
        }

        public Builder setJavaContainerVersion(@Nullable String javaContainerVersion) {
            this.javaContainerVersion = Input.ofNullable(javaContainerVersion);
            return this;
        }

        public Builder setJavaVersion(@Nullable Input<String> javaVersion) {
            this.javaVersion = javaVersion;
            return this;
        }

        public Builder setJavaVersion(@Nullable String javaVersion) {
            this.javaVersion = Input.ofNullable(javaVersion);
            return this;
        }

        public Builder setKeyVaultReferenceIdentity(@Nullable Input<String> keyVaultReferenceIdentity) {
            this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            return this;
        }

        public Builder setKeyVaultReferenceIdentity(@Nullable String keyVaultReferenceIdentity) {
            this.keyVaultReferenceIdentity = Input.ofNullable(keyVaultReferenceIdentity);
            return this;
        }

        public Builder setLimits(@Nullable Input<SiteLimitsArgs> limits) {
            this.limits = limits;
            return this;
        }

        public Builder setLimits(@Nullable SiteLimitsArgs limits) {
            this.limits = Input.ofNullable(limits);
            return this;
        }

        public Builder setLinuxFxVersion(@Nullable Input<String> linuxFxVersion) {
            this.linuxFxVersion = linuxFxVersion;
            return this;
        }

        public Builder setLinuxFxVersion(@Nullable String linuxFxVersion) {
            this.linuxFxVersion = Input.ofNullable(linuxFxVersion);
            return this;
        }

        public Builder setLoadBalancing(@Nullable Input<SiteLoadBalancing> loadBalancing) {
            this.loadBalancing = loadBalancing;
            return this;
        }

        public Builder setLoadBalancing(@Nullable SiteLoadBalancing loadBalancing) {
            this.loadBalancing = Input.ofNullable(loadBalancing);
            return this;
        }

        public Builder setLocalMySqlEnabled(@Nullable Input<Boolean> localMySqlEnabled) {
            this.localMySqlEnabled = localMySqlEnabled;
            return this;
        }

        public Builder setLocalMySqlEnabled(@Nullable Boolean localMySqlEnabled) {
            this.localMySqlEnabled = Input.ofNullable(localMySqlEnabled);
            return this;
        }

        public Builder setLogsDirectorySizeLimit(@Nullable Input<Integer> logsDirectorySizeLimit) {
            this.logsDirectorySizeLimit = logsDirectorySizeLimit;
            return this;
        }

        public Builder setLogsDirectorySizeLimit(@Nullable Integer logsDirectorySizeLimit) {
            this.logsDirectorySizeLimit = Input.ofNullable(logsDirectorySizeLimit);
            return this;
        }

        public Builder setManagedPipelineMode(@Nullable Input<ManagedPipelineMode> managedPipelineMode) {
            this.managedPipelineMode = managedPipelineMode;
            return this;
        }

        public Builder setManagedPipelineMode(@Nullable ManagedPipelineMode managedPipelineMode) {
            this.managedPipelineMode = Input.ofNullable(managedPipelineMode);
            return this;
        }

        public Builder setManagedServiceIdentityId(@Nullable Input<Integer> managedServiceIdentityId) {
            this.managedServiceIdentityId = managedServiceIdentityId;
            return this;
        }

        public Builder setManagedServiceIdentityId(@Nullable Integer managedServiceIdentityId) {
            this.managedServiceIdentityId = Input.ofNullable(managedServiceIdentityId);
            return this;
        }

        public Builder setMinTlsVersion(@Nullable Input<Either<String,SupportedTlsVersions>> minTlsVersion) {
            this.minTlsVersion = minTlsVersion;
            return this;
        }

        public Builder setMinTlsVersion(@Nullable Either<String,SupportedTlsVersions> minTlsVersion) {
            this.minTlsVersion = Input.ofNullable(minTlsVersion);
            return this;
        }

        public Builder setMinimumElasticInstanceCount(@Nullable Input<Integer> minimumElasticInstanceCount) {
            this.minimumElasticInstanceCount = minimumElasticInstanceCount;
            return this;
        }

        public Builder setMinimumElasticInstanceCount(@Nullable Integer minimumElasticInstanceCount) {
            this.minimumElasticInstanceCount = Input.ofNullable(minimumElasticInstanceCount);
            return this;
        }

        public Builder setNetFrameworkVersion(@Nullable Input<String> netFrameworkVersion) {
            this.netFrameworkVersion = netFrameworkVersion;
            return this;
        }

        public Builder setNetFrameworkVersion(@Nullable String netFrameworkVersion) {
            this.netFrameworkVersion = Input.ofNullable(netFrameworkVersion);
            return this;
        }

        public Builder setNodeVersion(@Nullable Input<String> nodeVersion) {
            this.nodeVersion = nodeVersion;
            return this;
        }

        public Builder setNodeVersion(@Nullable String nodeVersion) {
            this.nodeVersion = Input.ofNullable(nodeVersion);
            return this;
        }

        public Builder setNumberOfWorkers(@Nullable Input<Integer> numberOfWorkers) {
            this.numberOfWorkers = numberOfWorkers;
            return this;
        }

        public Builder setNumberOfWorkers(@Nullable Integer numberOfWorkers) {
            this.numberOfWorkers = Input.ofNullable(numberOfWorkers);
            return this;
        }

        public Builder setPhpVersion(@Nullable Input<String> phpVersion) {
            this.phpVersion = phpVersion;
            return this;
        }

        public Builder setPhpVersion(@Nullable String phpVersion) {
            this.phpVersion = Input.ofNullable(phpVersion);
            return this;
        }

        public Builder setPowerShellVersion(@Nullable Input<String> powerShellVersion) {
            this.powerShellVersion = powerShellVersion;
            return this;
        }

        public Builder setPowerShellVersion(@Nullable String powerShellVersion) {
            this.powerShellVersion = Input.ofNullable(powerShellVersion);
            return this;
        }

        public Builder setPreWarmedInstanceCount(@Nullable Input<Integer> preWarmedInstanceCount) {
            this.preWarmedInstanceCount = preWarmedInstanceCount;
            return this;
        }

        public Builder setPreWarmedInstanceCount(@Nullable Integer preWarmedInstanceCount) {
            this.preWarmedInstanceCount = Input.ofNullable(preWarmedInstanceCount);
            return this;
        }

        public Builder setPublicNetworkAccess(@Nullable Input<String> publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder setPublicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = Input.ofNullable(publicNetworkAccess);
            return this;
        }

        public Builder setPublishingUsername(@Nullable Input<String> publishingUsername) {
            this.publishingUsername = publishingUsername;
            return this;
        }

        public Builder setPublishingUsername(@Nullable String publishingUsername) {
            this.publishingUsername = Input.ofNullable(publishingUsername);
            return this;
        }

        public Builder setPush(@Nullable Input<PushSettingsArgs> push) {
            this.push = push;
            return this;
        }

        public Builder setPush(@Nullable PushSettingsArgs push) {
            this.push = Input.ofNullable(push);
            return this;
        }

        public Builder setPythonVersion(@Nullable Input<String> pythonVersion) {
            this.pythonVersion = pythonVersion;
            return this;
        }

        public Builder setPythonVersion(@Nullable String pythonVersion) {
            this.pythonVersion = Input.ofNullable(pythonVersion);
            return this;
        }

        public Builder setRemoteDebuggingEnabled(@Nullable Input<Boolean> remoteDebuggingEnabled) {
            this.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }

        public Builder setRemoteDebuggingEnabled(@Nullable Boolean remoteDebuggingEnabled) {
            this.remoteDebuggingEnabled = Input.ofNullable(remoteDebuggingEnabled);
            return this;
        }

        public Builder setRemoteDebuggingVersion(@Nullable Input<String> remoteDebuggingVersion) {
            this.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }

        public Builder setRemoteDebuggingVersion(@Nullable String remoteDebuggingVersion) {
            this.remoteDebuggingVersion = Input.ofNullable(remoteDebuggingVersion);
            return this;
        }

        public Builder setRequestTracingEnabled(@Nullable Input<Boolean> requestTracingEnabled) {
            this.requestTracingEnabled = requestTracingEnabled;
            return this;
        }

        public Builder setRequestTracingEnabled(@Nullable Boolean requestTracingEnabled) {
            this.requestTracingEnabled = Input.ofNullable(requestTracingEnabled);
            return this;
        }

        public Builder setRequestTracingExpirationTime(@Nullable Input<String> requestTracingExpirationTime) {
            this.requestTracingExpirationTime = requestTracingExpirationTime;
            return this;
        }

        public Builder setRequestTracingExpirationTime(@Nullable String requestTracingExpirationTime) {
            this.requestTracingExpirationTime = Input.ofNullable(requestTracingExpirationTime);
            return this;
        }

        public Builder setScmIpSecurityRestrictions(@Nullable Input<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions) {
            this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
            return this;
        }

        public Builder setScmIpSecurityRestrictions(@Nullable List<IpSecurityRestrictionArgs> scmIpSecurityRestrictions) {
            this.scmIpSecurityRestrictions = Input.ofNullable(scmIpSecurityRestrictions);
            return this;
        }

        public Builder setScmIpSecurityRestrictionsUseMain(@Nullable Input<Boolean> scmIpSecurityRestrictionsUseMain) {
            this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
            return this;
        }

        public Builder setScmIpSecurityRestrictionsUseMain(@Nullable Boolean scmIpSecurityRestrictionsUseMain) {
            this.scmIpSecurityRestrictionsUseMain = Input.ofNullable(scmIpSecurityRestrictionsUseMain);
            return this;
        }

        public Builder setScmMinTlsVersion(@Nullable Input<Either<String,SupportedTlsVersions>> scmMinTlsVersion) {
            this.scmMinTlsVersion = scmMinTlsVersion;
            return this;
        }

        public Builder setScmMinTlsVersion(@Nullable Either<String,SupportedTlsVersions> scmMinTlsVersion) {
            this.scmMinTlsVersion = Input.ofNullable(scmMinTlsVersion);
            return this;
        }

        public Builder setScmType(@Nullable Input<Either<String,ScmType>> scmType) {
            this.scmType = scmType;
            return this;
        }

        public Builder setScmType(@Nullable Either<String,ScmType> scmType) {
            this.scmType = Input.ofNullable(scmType);
            return this;
        }

        public Builder setTracingOptions(@Nullable Input<String> tracingOptions) {
            this.tracingOptions = tracingOptions;
            return this;
        }

        public Builder setTracingOptions(@Nullable String tracingOptions) {
            this.tracingOptions = Input.ofNullable(tracingOptions);
            return this;
        }

        public Builder setUse32BitWorkerProcess(@Nullable Input<Boolean> use32BitWorkerProcess) {
            this.use32BitWorkerProcess = use32BitWorkerProcess;
            return this;
        }

        public Builder setUse32BitWorkerProcess(@Nullable Boolean use32BitWorkerProcess) {
            this.use32BitWorkerProcess = Input.ofNullable(use32BitWorkerProcess);
            return this;
        }

        public Builder setVirtualApplications(@Nullable Input<List<VirtualApplicationArgs>> virtualApplications) {
            this.virtualApplications = virtualApplications;
            return this;
        }

        public Builder setVirtualApplications(@Nullable List<VirtualApplicationArgs> virtualApplications) {
            this.virtualApplications = Input.ofNullable(virtualApplications);
            return this;
        }

        public Builder setVnetName(@Nullable Input<String> vnetName) {
            this.vnetName = vnetName;
            return this;
        }

        public Builder setVnetName(@Nullable String vnetName) {
            this.vnetName = Input.ofNullable(vnetName);
            return this;
        }

        public Builder setVnetPrivatePortsCount(@Nullable Input<Integer> vnetPrivatePortsCount) {
            this.vnetPrivatePortsCount = vnetPrivatePortsCount;
            return this;
        }

        public Builder setVnetPrivatePortsCount(@Nullable Integer vnetPrivatePortsCount) {
            this.vnetPrivatePortsCount = Input.ofNullable(vnetPrivatePortsCount);
            return this;
        }

        public Builder setVnetRouteAllEnabled(@Nullable Input<Boolean> vnetRouteAllEnabled) {
            this.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }

        public Builder setVnetRouteAllEnabled(@Nullable Boolean vnetRouteAllEnabled) {
            this.vnetRouteAllEnabled = Input.ofNullable(vnetRouteAllEnabled);
            return this;
        }

        public Builder setWebSocketsEnabled(@Nullable Input<Boolean> webSocketsEnabled) {
            this.webSocketsEnabled = webSocketsEnabled;
            return this;
        }

        public Builder setWebSocketsEnabled(@Nullable Boolean webSocketsEnabled) {
            this.webSocketsEnabled = Input.ofNullable(webSocketsEnabled);
            return this;
        }

        public Builder setWebsiteTimeZone(@Nullable Input<String> websiteTimeZone) {
            this.websiteTimeZone = websiteTimeZone;
            return this;
        }

        public Builder setWebsiteTimeZone(@Nullable String websiteTimeZone) {
            this.websiteTimeZone = Input.ofNullable(websiteTimeZone);
            return this;
        }

        public Builder setWindowsFxVersion(@Nullable Input<String> windowsFxVersion) {
            this.windowsFxVersion = windowsFxVersion;
            return this;
        }

        public Builder setWindowsFxVersion(@Nullable String windowsFxVersion) {
            this.windowsFxVersion = Input.ofNullable(windowsFxVersion);
            return this;
        }

        public Builder setXManagedServiceIdentityId(@Nullable Input<Integer> xManagedServiceIdentityId) {
            this.xManagedServiceIdentityId = xManagedServiceIdentityId;
            return this;
        }

        public Builder setXManagedServiceIdentityId(@Nullable Integer xManagedServiceIdentityId) {
            this.xManagedServiceIdentityId = Input.ofNullable(xManagedServiceIdentityId);
            return this;
        }
        public SiteConfigArgs build() {
            return new SiteConfigArgs(acrUseManagedIdentityCreds, acrUserManagedIdentityID, alwaysOn, apiDefinition, apiManagementConfig, appCommandLine, appSettings, autoHealEnabled, autoHealRules, autoSwapSlotName, azureStorageAccounts, connectionStrings, cors, defaultDocuments, detailedErrorLoggingEnabled, documentRoot, experiments, ftpsState, functionAppScaleLimit, functionsRuntimeScaleMonitoringEnabled, handlerMappings, healthCheckPath, http20Enabled, httpLoggingEnabled, ipSecurityRestrictions, javaContainer, javaContainerVersion, javaVersion, keyVaultReferenceIdentity, limits, linuxFxVersion, loadBalancing, localMySqlEnabled, logsDirectorySizeLimit, managedPipelineMode, managedServiceIdentityId, minTlsVersion, minimumElasticInstanceCount, netFrameworkVersion, nodeVersion, numberOfWorkers, phpVersion, powerShellVersion, preWarmedInstanceCount, publicNetworkAccess, publishingUsername, push, pythonVersion, remoteDebuggingEnabled, remoteDebuggingVersion, requestTracingEnabled, requestTracingExpirationTime, scmIpSecurityRestrictions, scmIpSecurityRestrictionsUseMain, scmMinTlsVersion, scmType, tracingOptions, use32BitWorkerProcess, virtualApplications, vnetName, vnetPrivatePortsCount, vnetRouteAllEnabled, webSocketsEnabled, websiteTimeZone, windowsFxVersion, xManagedServiceIdentityId);
        }
    }
}
