// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement.inputs;

import io.pulumi.azurenative.costmanagement.inputs.ReportComparisonExpressionResponse;
import io.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The filter expression to be used in the report.
 * 
 */
public final class ReportFilterResponse extends io.pulumi.resources.InvokeArgs {

    public static final ReportFilterResponse Empty = new ReportFilterResponse();

    /**
     * The logical "AND" expression. Must have at least 2 items.
     * 
     */
    @Import(name="and")
      private final @Nullable List<ReportFilterResponse> and;

    public List<ReportFilterResponse> getAnd() {
        return this.and == null ? List.of() : this.and;
    }

    /**
     * Has comparison expression for a dimension
     * 
     */
    @Import(name="dimension")
      private final @Nullable ReportComparisonExpressionResponse dimension;

    public Optional<ReportComparisonExpressionResponse> getDimension() {
        return this.dimension == null ? Optional.empty() : Optional.ofNullable(this.dimension);
    }

    /**
     * The logical "NOT" expression.
     * 
     */
    @Import(name="not")
      private final @Nullable ReportFilterResponse not;

    public Optional<ReportFilterResponse> getNot() {
        return this.not == null ? Optional.empty() : Optional.ofNullable(this.not);
    }

    /**
     * The logical "OR" expression. Must have at least 2 items.
     * 
     */
    @Import(name="or")
      private final @Nullable List<ReportFilterResponse> or;

    public List<ReportFilterResponse> getOr() {
        return this.or == null ? List.of() : this.or;
    }

    /**
     * Has comparison expression for a tag
     * 
     */
    @Import(name="tag")
      private final @Nullable ReportComparisonExpressionResponse tag;

    public Optional<ReportComparisonExpressionResponse> getTag() {
        return this.tag == null ? Optional.empty() : Optional.ofNullable(this.tag);
    }

    public ReportFilterResponse(
        @Nullable List<ReportFilterResponse> and,
        @Nullable ReportComparisonExpressionResponse dimension,
        @Nullable ReportFilterResponse not,
        @Nullable List<ReportFilterResponse> or,
        @Nullable ReportComparisonExpressionResponse tag) {
        this.and = and;
        this.dimension = dimension;
        this.not = not;
        this.or = or;
        this.tag = tag;
    }

    private ReportFilterResponse() {
        this.and = List.of();
        this.dimension = null;
        this.not = null;
        this.or = List.of();
        this.tag = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<ReportFilterResponse> and;
        private @Nullable ReportComparisonExpressionResponse dimension;
        private @Nullable ReportFilterResponse not;
        private @Nullable List<ReportFilterResponse> or;
        private @Nullable ReportComparisonExpressionResponse tag;

        public Builder() {
    	      // Empty
        }

        public Builder(ReportFilterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.and = defaults.and;
    	      this.dimension = defaults.dimension;
    	      this.not = defaults.not;
    	      this.or = defaults.or;
    	      this.tag = defaults.tag;
        }

        public Builder and(@Nullable List<ReportFilterResponse> and) {
            this.and = and;
            return this;
        }
        public Builder and(ReportFilterResponse... and) {
            return and(List.of(and));
        }
        public Builder dimension(@Nullable ReportComparisonExpressionResponse dimension) {
            this.dimension = dimension;
            return this;
        }
        public Builder not(@Nullable ReportFilterResponse not) {
            this.not = not;
            return this;
        }
        public Builder or(@Nullable List<ReportFilterResponse> or) {
            this.or = or;
            return this;
        }
        public Builder or(ReportFilterResponse... or) {
            return or(List.of(or));
        }
        public Builder tag(@Nullable ReportComparisonExpressionResponse tag) {
            this.tag = tag;
            return this;
        }        public ReportFilterResponse build() {
            return new ReportFilterResponse(and, dimension, not, or, tag);
        }
    }
}
