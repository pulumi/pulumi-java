// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.outputs;

import io.pulumi.azurenative.datafactory.outputs.LinkedServiceReferenceResponse;
import io.pulumi.azurenative.datafactory.outputs.TriggerPipelineReferenceResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class BlobTriggerResponse {
    /**
     * List of tags that can be used for describing the trigger.
     * 
     */
    private final @Nullable List<Object> annotations;
    /**
     * Trigger description.
     * 
     */
    private final @Nullable String description;
    /**
     * The path of the container/folder that will trigger the pipeline.
     * 
     */
    private final String folderPath;
    /**
     * The Azure Storage linked service reference.
     * 
     */
    private final LinkedServiceReferenceResponse linkedService;
    /**
     * The max number of parallel files to handle when it is triggered.
     * 
     */
    private final Integer maxConcurrency;
    /**
     * Pipelines that need to be started.
     * 
     */
    private final @Nullable List<TriggerPipelineReferenceResponse> pipelines;
    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    private final String runtimeState;
    /**
     * Trigger type.
     * Expected value is 'BlobTrigger'.
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"annotations","description","folderPath","linkedService","maxConcurrency","pipelines","runtimeState","type"})
    private BlobTriggerResponse(
        @Nullable List<Object> annotations,
        @Nullable String description,
        String folderPath,
        LinkedServiceReferenceResponse linkedService,
        Integer maxConcurrency,
        @Nullable List<TriggerPipelineReferenceResponse> pipelines,
        String runtimeState,
        String type) {
        this.annotations = annotations;
        this.description = description;
        this.folderPath = Objects.requireNonNull(folderPath);
        this.linkedService = Objects.requireNonNull(linkedService);
        this.maxConcurrency = Objects.requireNonNull(maxConcurrency);
        this.pipelines = pipelines;
        this.runtimeState = Objects.requireNonNull(runtimeState);
        this.type = Objects.requireNonNull(type);
    }

    /**
     * List of tags that can be used for describing the trigger.
     * 
    */
    public List<Object> getAnnotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * Trigger description.
     * 
    */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * The path of the container/folder that will trigger the pipeline.
     * 
    */
    public String getFolderPath() {
        return this.folderPath;
    }
    /**
     * The Azure Storage linked service reference.
     * 
    */
    public LinkedServiceReferenceResponse getLinkedService() {
        return this.linkedService;
    }
    /**
     * The max number of parallel files to handle when it is triggered.
     * 
    */
    public Integer getMaxConcurrency() {
        return this.maxConcurrency;
    }
    /**
     * Pipelines that need to be started.
     * 
    */
    public List<TriggerPipelineReferenceResponse> getPipelines() {
        return this.pipelines == null ? List.of() : this.pipelines;
    }
    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
    */
    public String getRuntimeState() {
        return this.runtimeState;
    }
    /**
     * Trigger type.
     * Expected value is 'BlobTrigger'.
     * 
    */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlobTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<Object> annotations;
        private @Nullable String description;
        private String folderPath;
        private LinkedServiceReferenceResponse linkedService;
        private Integer maxConcurrency;
        private @Nullable List<TriggerPipelineReferenceResponse> pipelines;
        private String runtimeState;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(BlobTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.description = defaults.description;
    	      this.folderPath = defaults.folderPath;
    	      this.linkedService = defaults.linkedService;
    	      this.maxConcurrency = defaults.maxConcurrency;
    	      this.pipelines = defaults.pipelines;
    	      this.runtimeState = defaults.runtimeState;
    	      this.type = defaults.type;
        }

        public Builder setAnnotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setFolderPath(String folderPath) {
            this.folderPath = Objects.requireNonNull(folderPath);
            return this;
        }

        public Builder setLinkedService(LinkedServiceReferenceResponse linkedService) {
            this.linkedService = Objects.requireNonNull(linkedService);
            return this;
        }

        public Builder setMaxConcurrency(Integer maxConcurrency) {
            this.maxConcurrency = Objects.requireNonNull(maxConcurrency);
            return this;
        }

        public Builder setPipelines(@Nullable List<TriggerPipelineReferenceResponse> pipelines) {
            this.pipelines = pipelines;
            return this;
        }

        public Builder setRuntimeState(String runtimeState) {
            this.runtimeState = Objects.requireNonNull(runtimeState);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public BlobTriggerResponse build() {
            return new BlobTriggerResponse(annotations, description, folderPath, linkedService, maxConcurrency, pipelines, runtimeState, type);
        }
    }
}
