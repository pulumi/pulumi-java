// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.inputs;

import io.pulumi.azurenative.cdn.enums.CacheBehavior;
import io.pulumi.azurenative.cdn.enums.CacheType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Defines the parameters for the cache expiration action.
 * 
 */
public final class CacheExpirationActionParametersArgs extends io.pulumi.resources.ResourceArgs {

    public static final CacheExpirationActionParametersArgs Empty = new CacheExpirationActionParametersArgs();

    /**
     * Caching behavior for the requests
     * 
     */
    @InputImport(name="cacheBehavior", required=true)
      private final Output<Either<String,CacheBehavior>> cacheBehavior;

    public Output<Either<String,CacheBehavior>> getCacheBehavior() {
        return this.cacheBehavior;
    }

    /**
     * The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss
     * 
     */
    @InputImport(name="cacheDuration")
      private final @Nullable Output<String> cacheDuration;

    public Output<String> getCacheDuration() {
        return this.cacheDuration == null ? Output.empty() : this.cacheDuration;
    }

    /**
     * The level at which the content needs to be cached.
     * 
     */
    @InputImport(name="cacheType", required=true)
      private final Output<Either<String,CacheType>> cacheType;

    public Output<Either<String,CacheType>> getCacheType() {
        return this.cacheType;
    }

    @InputImport(name="odataType", required=true)
      private final Output<String> odataType;

    public Output<String> getOdataType() {
        return this.odataType;
    }

    public CacheExpirationActionParametersArgs(
        Output<Either<String,CacheBehavior>> cacheBehavior,
        @Nullable Output<String> cacheDuration,
        Output<Either<String,CacheType>> cacheType,
        Output<String> odataType) {
        this.cacheBehavior = Objects.requireNonNull(cacheBehavior, "expected parameter 'cacheBehavior' to be non-null");
        this.cacheDuration = cacheDuration;
        this.cacheType = Objects.requireNonNull(cacheType, "expected parameter 'cacheType' to be non-null");
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
    }

    private CacheExpirationActionParametersArgs() {
        this.cacheBehavior = Output.empty();
        this.cacheDuration = Output.empty();
        this.cacheType = Output.empty();
        this.odataType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheExpirationActionParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,CacheBehavior>> cacheBehavior;
        private @Nullable Output<String> cacheDuration;
        private Output<Either<String,CacheType>> cacheType;
        private Output<String> odataType;

        public Builder() {
    	      // Empty
        }

        public Builder(CacheExpirationActionParametersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheBehavior = defaults.cacheBehavior;
    	      this.cacheDuration = defaults.cacheDuration;
    	      this.cacheType = defaults.cacheType;
    	      this.odataType = defaults.odataType;
        }

        public Builder cacheBehavior(Output<Either<String,CacheBehavior>> cacheBehavior) {
            this.cacheBehavior = Objects.requireNonNull(cacheBehavior);
            return this;
        }

        public Builder cacheBehavior(Either<String,CacheBehavior> cacheBehavior) {
            this.cacheBehavior = Output.of(Objects.requireNonNull(cacheBehavior));
            return this;
        }

        public Builder cacheDuration(@Nullable Output<String> cacheDuration) {
            this.cacheDuration = cacheDuration;
            return this;
        }

        public Builder cacheDuration(@Nullable String cacheDuration) {
            this.cacheDuration = Output.ofNullable(cacheDuration);
            return this;
        }

        public Builder cacheType(Output<Either<String,CacheType>> cacheType) {
            this.cacheType = Objects.requireNonNull(cacheType);
            return this;
        }

        public Builder cacheType(Either<String,CacheType> cacheType) {
            this.cacheType = Output.of(Objects.requireNonNull(cacheType));
            return this;
        }

        public Builder odataType(Output<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }

        public Builder odataType(String odataType) {
            this.odataType = Output.of(Objects.requireNonNull(odataType));
            return this;
        }
        public CacheExpirationActionParametersArgs build() {
            return new CacheExpirationActionParametersArgs(cacheBehavior, cacheDuration, cacheType, odataType);
        }
    }
}
