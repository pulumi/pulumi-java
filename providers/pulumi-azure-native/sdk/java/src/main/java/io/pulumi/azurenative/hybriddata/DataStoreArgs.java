// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.hybriddata;

import io.pulumi.azurenative.hybriddata.enums.State;
import io.pulumi.azurenative.hybriddata.inputs.CustomerSecretArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DataStoreArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataStoreArgs Empty = new DataStoreArgs();

    /**
     * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     * 
     */
    @InputImport(name="customerSecrets")
      private final @Nullable Input<List<CustomerSecretArgs>> customerSecrets;

    public Input<List<CustomerSecretArgs>> getCustomerSecrets() {
        return this.customerSecrets == null ? Input.empty() : this.customerSecrets;
    }

    /**
     * The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * 
     */
    @InputImport(name="dataManagerName", required=true)
      private final Input<String> dataManagerName;

    public Input<String> getDataManagerName() {
        return this.dataManagerName;
    }

    /**
     * The data store/repository name to be created or updated.
     * 
     */
    @InputImport(name="dataStoreName")
      private final @Nullable Input<String> dataStoreName;

    public Input<String> getDataStoreName() {
        return this.dataStoreName == null ? Input.empty() : this.dataStoreName;
    }

    /**
     * The arm id of the data store type.
     * 
     */
    @InputImport(name="dataStoreTypeId", required=true)
      private final Input<String> dataStoreTypeId;

    public Input<String> getDataStoreTypeId() {
        return this.dataStoreTypeId;
    }

    /**
     * A generic json used differently by each data source type.
     * 
     */
    @InputImport(name="extendedProperties")
      private final @Nullable Input<Object> extendedProperties;

    public Input<Object> getExtendedProperties() {
        return this.extendedProperties == null ? Input.empty() : this.extendedProperties;
    }

    /**
     * Arm Id for the manager resource to which the data source is associated. This is optional.
     * 
     */
    @InputImport(name="repositoryId")
      private final @Nullable Input<String> repositoryId;

    public Input<String> getRepositoryId() {
        return this.repositoryId == null ? Input.empty() : this.repositoryId;
    }

    /**
     * The Resource Group Name
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * State of the data source.
     * 
     */
    @InputImport(name="state", required=true)
      private final Input<State> state;

    public Input<State> getState() {
        return this.state;
    }

    public DataStoreArgs(
        @Nullable Input<List<CustomerSecretArgs>> customerSecrets,
        Input<String> dataManagerName,
        @Nullable Input<String> dataStoreName,
        Input<String> dataStoreTypeId,
        @Nullable Input<Object> extendedProperties,
        @Nullable Input<String> repositoryId,
        Input<String> resourceGroupName,
        Input<State> state) {
        this.customerSecrets = customerSecrets;
        this.dataManagerName = Objects.requireNonNull(dataManagerName, "expected parameter 'dataManagerName' to be non-null");
        this.dataStoreName = dataStoreName;
        this.dataStoreTypeId = Objects.requireNonNull(dataStoreTypeId, "expected parameter 'dataStoreTypeId' to be non-null");
        this.extendedProperties = extendedProperties;
        this.repositoryId = repositoryId;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.state = Objects.requireNonNull(state, "expected parameter 'state' to be non-null");
    }

    private DataStoreArgs() {
        this.customerSecrets = Input.empty();
        this.dataManagerName = Input.empty();
        this.dataStoreName = Input.empty();
        this.dataStoreTypeId = Input.empty();
        this.extendedProperties = Input.empty();
        this.repositoryId = Input.empty();
        this.resourceGroupName = Input.empty();
        this.state = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<CustomerSecretArgs>> customerSecrets;
        private Input<String> dataManagerName;
        private @Nullable Input<String> dataStoreName;
        private Input<String> dataStoreTypeId;
        private @Nullable Input<Object> extendedProperties;
        private @Nullable Input<String> repositoryId;
        private Input<String> resourceGroupName;
        private Input<State> state;

        public Builder() {
    	      // Empty
        }

        public Builder(DataStoreArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customerSecrets = defaults.customerSecrets;
    	      this.dataManagerName = defaults.dataManagerName;
    	      this.dataStoreName = defaults.dataStoreName;
    	      this.dataStoreTypeId = defaults.dataStoreTypeId;
    	      this.extendedProperties = defaults.extendedProperties;
    	      this.repositoryId = defaults.repositoryId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.state = defaults.state;
        }

        public Builder setCustomerSecrets(@Nullable Input<List<CustomerSecretArgs>> customerSecrets) {
            this.customerSecrets = customerSecrets;
            return this;
        }

        public Builder setCustomerSecrets(@Nullable List<CustomerSecretArgs> customerSecrets) {
            this.customerSecrets = Input.ofNullable(customerSecrets);
            return this;
        }

        public Builder setDataManagerName(Input<String> dataManagerName) {
            this.dataManagerName = Objects.requireNonNull(dataManagerName);
            return this;
        }

        public Builder setDataManagerName(String dataManagerName) {
            this.dataManagerName = Input.of(Objects.requireNonNull(dataManagerName));
            return this;
        }

        public Builder setDataStoreName(@Nullable Input<String> dataStoreName) {
            this.dataStoreName = dataStoreName;
            return this;
        }

        public Builder setDataStoreName(@Nullable String dataStoreName) {
            this.dataStoreName = Input.ofNullable(dataStoreName);
            return this;
        }

        public Builder setDataStoreTypeId(Input<String> dataStoreTypeId) {
            this.dataStoreTypeId = Objects.requireNonNull(dataStoreTypeId);
            return this;
        }

        public Builder setDataStoreTypeId(String dataStoreTypeId) {
            this.dataStoreTypeId = Input.of(Objects.requireNonNull(dataStoreTypeId));
            return this;
        }

        public Builder setExtendedProperties(@Nullable Input<Object> extendedProperties) {
            this.extendedProperties = extendedProperties;
            return this;
        }

        public Builder setExtendedProperties(@Nullable Object extendedProperties) {
            this.extendedProperties = Input.ofNullable(extendedProperties);
            return this;
        }

        public Builder setRepositoryId(@Nullable Input<String> repositoryId) {
            this.repositoryId = repositoryId;
            return this;
        }

        public Builder setRepositoryId(@Nullable String repositoryId) {
            this.repositoryId = Input.ofNullable(repositoryId);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setState(Input<State> state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setState(State state) {
            this.state = Input.of(Objects.requireNonNull(state));
            return this;
        }
        public DataStoreArgs build() {
            return new DataStoreArgs(customerSecrets, dataManagerName, dataStoreName, dataStoreTypeId, extendedProperties, repositoryId, resourceGroupName, state);
        }
    }
}
