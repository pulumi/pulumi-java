// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabricmesh.outputs;

import io.pulumi.azurenative.servicefabricmesh.outputs.AutoScalingResourceMetricResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class AverageLoadScalingTriggerResponse {
    /**
     * Enumerates the triggers for auto scaling.
     * Expected value is 'AverageLoad'.
     * 
     */
    private final String kind;
    /**
     * Lower load threshold (if average load is below this threshold, service will scale down).
     * 
     */
    private final Double lowerLoadThreshold;
    /**
     * Description of the metric that is used for scaling.
     * 
     */
    private final AutoScalingResourceMetricResponse metric;
    /**
     * Scale interval that indicates how often will this trigger be checked.
     * 
     */
    private final Integer scaleIntervalInSeconds;
    /**
     * Upper load threshold (if average load is above this threshold, service will scale up).
     * 
     */
    private final Double upperLoadThreshold;

    @OutputCustomType.Constructor({"kind","lowerLoadThreshold","metric","scaleIntervalInSeconds","upperLoadThreshold"})
    private AverageLoadScalingTriggerResponse(
        String kind,
        Double lowerLoadThreshold,
        AutoScalingResourceMetricResponse metric,
        Integer scaleIntervalInSeconds,
        Double upperLoadThreshold) {
        this.kind = Objects.requireNonNull(kind);
        this.lowerLoadThreshold = Objects.requireNonNull(lowerLoadThreshold);
        this.metric = Objects.requireNonNull(metric);
        this.scaleIntervalInSeconds = Objects.requireNonNull(scaleIntervalInSeconds);
        this.upperLoadThreshold = Objects.requireNonNull(upperLoadThreshold);
    }

    /**
     * Enumerates the triggers for auto scaling.
     * Expected value is 'AverageLoad'.
     * 
     */
    public String getKind() {
        return this.kind;
    }
    /**
     * Lower load threshold (if average load is below this threshold, service will scale down).
     * 
     */
    public Double getLowerLoadThreshold() {
        return this.lowerLoadThreshold;
    }
    /**
     * Description of the metric that is used for scaling.
     * 
     */
    public AutoScalingResourceMetricResponse getMetric() {
        return this.metric;
    }
    /**
     * Scale interval that indicates how often will this trigger be checked.
     * 
     */
    public Integer getScaleIntervalInSeconds() {
        return this.scaleIntervalInSeconds;
    }
    /**
     * Upper load threshold (if average load is above this threshold, service will scale up).
     * 
     */
    public Double getUpperLoadThreshold() {
        return this.upperLoadThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AverageLoadScalingTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String kind;
        private Double lowerLoadThreshold;
        private AutoScalingResourceMetricResponse metric;
        private Integer scaleIntervalInSeconds;
        private Double upperLoadThreshold;

        public Builder() {
    	      // Empty
        }

        public Builder(AverageLoadScalingTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kind = defaults.kind;
    	      this.lowerLoadThreshold = defaults.lowerLoadThreshold;
    	      this.metric = defaults.metric;
    	      this.scaleIntervalInSeconds = defaults.scaleIntervalInSeconds;
    	      this.upperLoadThreshold = defaults.upperLoadThreshold;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLowerLoadThreshold(Double lowerLoadThreshold) {
            this.lowerLoadThreshold = Objects.requireNonNull(lowerLoadThreshold);
            return this;
        }

        public Builder setMetric(AutoScalingResourceMetricResponse metric) {
            this.metric = Objects.requireNonNull(metric);
            return this;
        }

        public Builder setScaleIntervalInSeconds(Integer scaleIntervalInSeconds) {
            this.scaleIntervalInSeconds = Objects.requireNonNull(scaleIntervalInSeconds);
            return this;
        }

        public Builder setUpperLoadThreshold(Double upperLoadThreshold) {
            this.upperLoadThreshold = Objects.requireNonNull(upperLoadThreshold);
            return this;
        }
        public AverageLoadScalingTriggerResponse build() {
            return new AverageLoadScalingTriggerResponse(kind, lowerLoadThreshold, metric, scaleIntervalInSeconds, upperLoadThreshold);
        }
    }
}
