// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web;

import io.pulumi.azurenative.web.enums.BuiltInAuthenticationProvider;
import io.pulumi.azurenative.web.enums.UnauthenticatedClientAction;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WebAppAuthSettingsSlotArgs extends io.pulumi.resources.ResourceArgs {

    public static final WebAppAuthSettingsSlotArgs Empty = new WebAppAuthSettingsSlotArgs();

    /**
     * Gets a JSON string containing the Azure AD Acl settings.
     * 
     */
    @InputImport(name="aadClaimsAuthorization")
      private final @Nullable Input<String> aadClaimsAuthorization;

    public Input<String> getAadClaimsAuthorization() {
        return this.aadClaimsAuthorization == null ? Input.empty() : this.aadClaimsAuthorization;
    }

    /**
     * Login parameters to send to the OpenID Connect authorization endpoint when
     * a user logs in. Each parameter must be in the form "key=value".
     * 
     */
    @InputImport(name="additionalLoginParams")
      private final @Nullable Input<List<String>> additionalLoginParams;

    public Input<List<String>> getAdditionalLoginParams() {
        return this.additionalLoginParams == null ? Input.empty() : this.additionalLoginParams;
    }

    /**
     * Allowed audience values to consider when validating JWTs issued by
     * Azure Active Directory. Note that the <code>ClientID</code> value is always considered an
     * allowed audience, regardless of this setting.
     * 
     */
    @InputImport(name="allowedAudiences")
      private final @Nullable Input<List<String>> allowedAudiences;

    public Input<List<String>> getAllowedAudiences() {
        return this.allowedAudiences == null ? Input.empty() : this.allowedAudiences;
    }

    /**
     * External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     * 
     */
    @InputImport(name="allowedExternalRedirectUrls")
      private final @Nullable Input<List<String>> allowedExternalRedirectUrls;

    public Input<List<String>> getAllowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls == null ? Input.empty() : this.allowedExternalRedirectUrls;
    }

    /**
     * The path of the config file containing auth settings.
     * If the path is relative, base will the site's root directory.
     * 
     */
    @InputImport(name="authFilePath")
      private final @Nullable Input<String> authFilePath;

    public Input<String> getAuthFilePath() {
        return this.authFilePath == null ? Input.empty() : this.authFilePath;
    }

    /**
     * The Client ID of this relying party application, known as the client_id.
     * This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
     * other 3rd party OpenID Connect providers.
     * More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
     * 
     */
    @InputImport(name="clientId")
      private final @Nullable Input<String> clientId;

    public Input<String> getClientId() {
        return this.clientId == null ? Input.empty() : this.clientId;
    }

    /**
     * The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).
     * This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.
     * Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.
     * More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
     * 
     */
    @InputImport(name="clientSecret")
      private final @Nullable Input<String> clientSecret;

    public Input<String> getClientSecret() {
        return this.clientSecret == null ? Input.empty() : this.clientSecret;
    }

    /**
     * An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
     * a replacement for the Client Secret. It is also optional.
     * 
     */
    @InputImport(name="clientSecretCertificateThumbprint")
      private final @Nullable Input<String> clientSecretCertificateThumbprint;

    public Input<String> getClientSecretCertificateThumbprint() {
        return this.clientSecretCertificateThumbprint == null ? Input.empty() : this.clientSecretCertificateThumbprint;
    }

    /**
     * The app setting name that contains the client secret of the relying party application.
     * 
     */
    @InputImport(name="clientSecretSettingName")
      private final @Nullable Input<String> clientSecretSettingName;

    public Input<String> getClientSecretSettingName() {
        return this.clientSecretSettingName == null ? Input.empty() : this.clientSecretSettingName;
    }

    /**
     * The ConfigVersion of the Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of the control plane for Authentication / Authorization.
     * 
     */
    @InputImport(name="configVersion")
      private final @Nullable Input<String> configVersion;

    public Input<String> getConfigVersion() {
        return this.configVersion == null ? Input.empty() : this.configVersion;
    }

    /**
     * The default authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the unauthenticated client
     * action is set to "RedirectToLoginPage".
     * 
     */
    @InputImport(name="defaultProvider")
      private final @Nullable Input<BuiltInAuthenticationProvider> defaultProvider;

    public Input<BuiltInAuthenticationProvider> getDefaultProvider() {
        return this.defaultProvider == null ? Input.empty() : this.defaultProvider;
    }

    /**
     * <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="enabled")
      private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * The App ID of the Facebook app used for login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
     * 
     */
    @InputImport(name="facebookAppId")
      private final @Nullable Input<String> facebookAppId;

    public Input<String> getFacebookAppId() {
        return this.facebookAppId == null ? Input.empty() : this.facebookAppId;
    }

    /**
     * The App Secret of the Facebook app used for Facebook Login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
     * 
     */
    @InputImport(name="facebookAppSecret")
      private final @Nullable Input<String> facebookAppSecret;

    public Input<String> getFacebookAppSecret() {
        return this.facebookAppSecret == null ? Input.empty() : this.facebookAppSecret;
    }

    /**
     * The app setting name that contains the app secret used for Facebook Login.
     * 
     */
    @InputImport(name="facebookAppSecretSettingName")
      private final @Nullable Input<String> facebookAppSecretSettingName;

    public Input<String> getFacebookAppSecretSettingName() {
        return this.facebookAppSecretSettingName == null ? Input.empty() : this.facebookAppSecretSettingName;
    }

    /**
     * The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication.
     * This setting is optional.
     * Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
     * 
     */
    @InputImport(name="facebookOAuthScopes")
      private final @Nullable Input<List<String>> facebookOAuthScopes;

    public Input<List<String>> getFacebookOAuthScopes() {
        return this.facebookOAuthScopes == null ? Input.empty() : this.facebookOAuthScopes;
    }

    /**
     * The Client Id of the GitHub app used for login.
     * This setting is required for enabling Github login
     * 
     */
    @InputImport(name="gitHubClientId")
      private final @Nullable Input<String> gitHubClientId;

    public Input<String> getGitHubClientId() {
        return this.gitHubClientId == null ? Input.empty() : this.gitHubClientId;
    }

    /**
     * The Client Secret of the GitHub app used for Github Login.
     * This setting is required for enabling Github login.
     * 
     */
    @InputImport(name="gitHubClientSecret")
      private final @Nullable Input<String> gitHubClientSecret;

    public Input<String> getGitHubClientSecret() {
        return this.gitHubClientSecret == null ? Input.empty() : this.gitHubClientSecret;
    }

    /**
     * The app setting name that contains the client secret of the Github
     * app used for GitHub Login.
     * 
     */
    @InputImport(name="gitHubClientSecretSettingName")
      private final @Nullable Input<String> gitHubClientSecretSettingName;

    public Input<String> getGitHubClientSecretSettingName() {
        return this.gitHubClientSecretSettingName == null ? Input.empty() : this.gitHubClientSecretSettingName;
    }

    /**
     * The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication.
     * This setting is optional
     * 
     */
    @InputImport(name="gitHubOAuthScopes")
      private final @Nullable Input<List<String>> gitHubOAuthScopes;

    public Input<List<String>> getGitHubOAuthScopes() {
        return this.gitHubOAuthScopes == null ? Input.empty() : this.gitHubOAuthScopes;
    }

    /**
     * The OpenID Connect Client ID for the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
     * 
     */
    @InputImport(name="googleClientId")
      private final @Nullable Input<String> googleClientId;

    public Input<String> getGoogleClientId() {
        return this.googleClientId == null ? Input.empty() : this.googleClientId;
    }

    /**
     * The client secret associated with the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
     * 
     */
    @InputImport(name="googleClientSecret")
      private final @Nullable Input<String> googleClientSecret;

    public Input<String> getGoogleClientSecret() {
        return this.googleClientSecret == null ? Input.empty() : this.googleClientSecret;
    }

    /**
     * The app setting name that contains the client secret associated with
     * the Google web application.
     * 
     */
    @InputImport(name="googleClientSecretSettingName")
      private final @Nullable Input<String> googleClientSecretSettingName;

    public Input<String> getGoogleClientSecretSettingName() {
        return this.googleClientSecretSettingName == null ? Input.empty() : this.googleClientSecretSettingName;
    }

    /**
     * The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication.
     * This setting is optional. If not specified, "openid", "profile", and "email" are used as default scopes.
     * Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
     * 
     */
    @InputImport(name="googleOAuthScopes")
      private final @Nullable Input<List<String>> googleOAuthScopes;

    public Input<List<String>> getGoogleOAuthScopes() {
        return this.googleOAuthScopes == null ? Input.empty() : this.googleOAuthScopes;
    }

    /**
     * "true" if the auth config settings should be read from a file,
     * "false" otherwise
     * 
     */
    @InputImport(name="isAuthFromFile")
      private final @Nullable Input<String> isAuthFromFile;

    public Input<String> getIsAuthFromFile() {
        return this.isAuthFromFile == null ? Input.empty() : this.isAuthFromFile;
    }

    /**
     * The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
     * When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
     * This URI is a case-sensitive identifier for the token issuer.
     * More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
     * 
     */
    @InputImport(name="issuer")
      private final @Nullable Input<String> issuer;

    public Input<String> getIssuer() {
        return this.issuer == null ? Input.empty() : this.issuer;
    }

    /**
     * Kind of resource.
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Input<String> kind;

    public Input<String> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    /**
     * The OAuth 2.0 client ID that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
     * 
     */
    @InputImport(name="microsoftAccountClientId")
      private final @Nullable Input<String> microsoftAccountClientId;

    public Input<String> getMicrosoftAccountClientId() {
        return this.microsoftAccountClientId == null ? Input.empty() : this.microsoftAccountClientId;
    }

    /**
     * The OAuth 2.0 client secret that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
     * 
     */
    @InputImport(name="microsoftAccountClientSecret")
      private final @Nullable Input<String> microsoftAccountClientSecret;

    public Input<String> getMicrosoftAccountClientSecret() {
        return this.microsoftAccountClientSecret == null ? Input.empty() : this.microsoftAccountClientSecret;
    }

    /**
     * The app setting name containing the OAuth 2.0 client secret that was created for the
     * app used for authentication.
     * 
     */
    @InputImport(name="microsoftAccountClientSecretSettingName")
      private final @Nullable Input<String> microsoftAccountClientSecretSettingName;

    public Input<String> getMicrosoftAccountClientSecretSettingName() {
        return this.microsoftAccountClientSecretSettingName == null ? Input.empty() : this.microsoftAccountClientSecretSettingName;
    }

    /**
     * The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication.
     * This setting is optional. If not specified, "wl.basic" is used as the default scope.
     * Microsoft Account Scopes and permissions documentation: https://msdn.microsoft.com/en-us/library/dn631845.aspx
     * 
     */
    @InputImport(name="microsoftAccountOAuthScopes")
      private final @Nullable Input<List<String>> microsoftAccountOAuthScopes;

    public Input<List<String>> getMicrosoftAccountOAuthScopes() {
        return this.microsoftAccountOAuthScopes == null ? Input.empty() : this.microsoftAccountOAuthScopes;
    }

    /**
     * Name of web app.
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
     * 
     */
    @InputImport(name="runtimeVersion")
      private final @Nullable Input<String> runtimeVersion;

    public Input<String> getRuntimeVersion() {
        return this.runtimeVersion == null ? Input.empty() : this.runtimeVersion;
    }

    /**
     * Name of web app slot. If not specified then will default to production slot.
     * 
     */
    @InputImport(name="slot", required=true)
      private final Input<String> slot;

    public Input<String> getSlot() {
        return this.slot;
    }

    /**
     * The number of hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     * 
     */
    @InputImport(name="tokenRefreshExtensionHours")
      private final @Nullable Input<Double> tokenRefreshExtensionHours;

    public Input<Double> getTokenRefreshExtensionHours() {
        return this.tokenRefreshExtensionHours == null ? Input.empty() : this.tokenRefreshExtensionHours;
    }

    /**
     * <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
     *  The default is <code>false</code>.
     * 
     */
    @InputImport(name="tokenStoreEnabled")
      private final @Nullable Input<Boolean> tokenStoreEnabled;

    public Input<Boolean> getTokenStoreEnabled() {
        return this.tokenStoreEnabled == null ? Input.empty() : this.tokenStoreEnabled;
    }

    /**
     * The OAuth 1.0a consumer key of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     * 
     */
    @InputImport(name="twitterConsumerKey")
      private final @Nullable Input<String> twitterConsumerKey;

    public Input<String> getTwitterConsumerKey() {
        return this.twitterConsumerKey == null ? Input.empty() : this.twitterConsumerKey;
    }

    /**
     * The OAuth 1.0a consumer secret of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     * 
     */
    @InputImport(name="twitterConsumerSecret")
      private final @Nullable Input<String> twitterConsumerSecret;

    public Input<String> getTwitterConsumerSecret() {
        return this.twitterConsumerSecret == null ? Input.empty() : this.twitterConsumerSecret;
    }

    /**
     * The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
     * application used for sign-in.
     * 
     */
    @InputImport(name="twitterConsumerSecretSettingName")
      private final @Nullable Input<String> twitterConsumerSecretSettingName;

    public Input<String> getTwitterConsumerSecretSettingName() {
        return this.twitterConsumerSecretSettingName == null ? Input.empty() : this.twitterConsumerSecretSettingName;
    }

    /**
     * The action to take when an unauthenticated client attempts to access the app.
     * 
     */
    @InputImport(name="unauthenticatedClientAction")
      private final @Nullable Input<UnauthenticatedClientAction> unauthenticatedClientAction;

    public Input<UnauthenticatedClientAction> getUnauthenticatedClientAction() {
        return this.unauthenticatedClientAction == null ? Input.empty() : this.unauthenticatedClientAction;
    }

    /**
     * Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such.
     * 
     */
    @InputImport(name="validateIssuer")
      private final @Nullable Input<Boolean> validateIssuer;

    public Input<Boolean> getValidateIssuer() {
        return this.validateIssuer == null ? Input.empty() : this.validateIssuer;
    }

    public WebAppAuthSettingsSlotArgs(
        @Nullable Input<String> aadClaimsAuthorization,
        @Nullable Input<List<String>> additionalLoginParams,
        @Nullable Input<List<String>> allowedAudiences,
        @Nullable Input<List<String>> allowedExternalRedirectUrls,
        @Nullable Input<String> authFilePath,
        @Nullable Input<String> clientId,
        @Nullable Input<String> clientSecret,
        @Nullable Input<String> clientSecretCertificateThumbprint,
        @Nullable Input<String> clientSecretSettingName,
        @Nullable Input<String> configVersion,
        @Nullable Input<BuiltInAuthenticationProvider> defaultProvider,
        @Nullable Input<Boolean> enabled,
        @Nullable Input<String> facebookAppId,
        @Nullable Input<String> facebookAppSecret,
        @Nullable Input<String> facebookAppSecretSettingName,
        @Nullable Input<List<String>> facebookOAuthScopes,
        @Nullable Input<String> gitHubClientId,
        @Nullable Input<String> gitHubClientSecret,
        @Nullable Input<String> gitHubClientSecretSettingName,
        @Nullable Input<List<String>> gitHubOAuthScopes,
        @Nullable Input<String> googleClientId,
        @Nullable Input<String> googleClientSecret,
        @Nullable Input<String> googleClientSecretSettingName,
        @Nullable Input<List<String>> googleOAuthScopes,
        @Nullable Input<String> isAuthFromFile,
        @Nullable Input<String> issuer,
        @Nullable Input<String> kind,
        @Nullable Input<String> microsoftAccountClientId,
        @Nullable Input<String> microsoftAccountClientSecret,
        @Nullable Input<String> microsoftAccountClientSecretSettingName,
        @Nullable Input<List<String>> microsoftAccountOAuthScopes,
        Input<String> name,
        Input<String> resourceGroupName,
        @Nullable Input<String> runtimeVersion,
        Input<String> slot,
        @Nullable Input<Double> tokenRefreshExtensionHours,
        @Nullable Input<Boolean> tokenStoreEnabled,
        @Nullable Input<String> twitterConsumerKey,
        @Nullable Input<String> twitterConsumerSecret,
        @Nullable Input<String> twitterConsumerSecretSettingName,
        @Nullable Input<UnauthenticatedClientAction> unauthenticatedClientAction,
        @Nullable Input<Boolean> validateIssuer) {
        this.aadClaimsAuthorization = aadClaimsAuthorization;
        this.additionalLoginParams = additionalLoginParams;
        this.allowedAudiences = allowedAudiences;
        this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
        this.authFilePath = authFilePath;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.clientSecretCertificateThumbprint = clientSecretCertificateThumbprint;
        this.clientSecretSettingName = clientSecretSettingName;
        this.configVersion = configVersion;
        this.defaultProvider = defaultProvider;
        this.enabled = enabled;
        this.facebookAppId = facebookAppId;
        this.facebookAppSecret = facebookAppSecret;
        this.facebookAppSecretSettingName = facebookAppSecretSettingName;
        this.facebookOAuthScopes = facebookOAuthScopes;
        this.gitHubClientId = gitHubClientId;
        this.gitHubClientSecret = gitHubClientSecret;
        this.gitHubClientSecretSettingName = gitHubClientSecretSettingName;
        this.gitHubOAuthScopes = gitHubOAuthScopes;
        this.googleClientId = googleClientId;
        this.googleClientSecret = googleClientSecret;
        this.googleClientSecretSettingName = googleClientSecretSettingName;
        this.googleOAuthScopes = googleOAuthScopes;
        this.isAuthFromFile = isAuthFromFile;
        this.issuer = issuer;
        this.kind = kind;
        this.microsoftAccountClientId = microsoftAccountClientId;
        this.microsoftAccountClientSecret = microsoftAccountClientSecret;
        this.microsoftAccountClientSecretSettingName = microsoftAccountClientSecretSettingName;
        this.microsoftAccountOAuthScopes = microsoftAccountOAuthScopes;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.runtimeVersion = runtimeVersion;
        this.slot = Objects.requireNonNull(slot, "expected parameter 'slot' to be non-null");
        this.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
        this.tokenStoreEnabled = tokenStoreEnabled;
        this.twitterConsumerKey = twitterConsumerKey;
        this.twitterConsumerSecret = twitterConsumerSecret;
        this.twitterConsumerSecretSettingName = twitterConsumerSecretSettingName;
        this.unauthenticatedClientAction = unauthenticatedClientAction;
        this.validateIssuer = validateIssuer;
    }

    private WebAppAuthSettingsSlotArgs() {
        this.aadClaimsAuthorization = Input.empty();
        this.additionalLoginParams = Input.empty();
        this.allowedAudiences = Input.empty();
        this.allowedExternalRedirectUrls = Input.empty();
        this.authFilePath = Input.empty();
        this.clientId = Input.empty();
        this.clientSecret = Input.empty();
        this.clientSecretCertificateThumbprint = Input.empty();
        this.clientSecretSettingName = Input.empty();
        this.configVersion = Input.empty();
        this.defaultProvider = Input.empty();
        this.enabled = Input.empty();
        this.facebookAppId = Input.empty();
        this.facebookAppSecret = Input.empty();
        this.facebookAppSecretSettingName = Input.empty();
        this.facebookOAuthScopes = Input.empty();
        this.gitHubClientId = Input.empty();
        this.gitHubClientSecret = Input.empty();
        this.gitHubClientSecretSettingName = Input.empty();
        this.gitHubOAuthScopes = Input.empty();
        this.googleClientId = Input.empty();
        this.googleClientSecret = Input.empty();
        this.googleClientSecretSettingName = Input.empty();
        this.googleOAuthScopes = Input.empty();
        this.isAuthFromFile = Input.empty();
        this.issuer = Input.empty();
        this.kind = Input.empty();
        this.microsoftAccountClientId = Input.empty();
        this.microsoftAccountClientSecret = Input.empty();
        this.microsoftAccountClientSecretSettingName = Input.empty();
        this.microsoftAccountOAuthScopes = Input.empty();
        this.name = Input.empty();
        this.resourceGroupName = Input.empty();
        this.runtimeVersion = Input.empty();
        this.slot = Input.empty();
        this.tokenRefreshExtensionHours = Input.empty();
        this.tokenStoreEnabled = Input.empty();
        this.twitterConsumerKey = Input.empty();
        this.twitterConsumerSecret = Input.empty();
        this.twitterConsumerSecretSettingName = Input.empty();
        this.unauthenticatedClientAction = Input.empty();
        this.validateIssuer = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAppAuthSettingsSlotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> aadClaimsAuthorization;
        private @Nullable Input<List<String>> additionalLoginParams;
        private @Nullable Input<List<String>> allowedAudiences;
        private @Nullable Input<List<String>> allowedExternalRedirectUrls;
        private @Nullable Input<String> authFilePath;
        private @Nullable Input<String> clientId;
        private @Nullable Input<String> clientSecret;
        private @Nullable Input<String> clientSecretCertificateThumbprint;
        private @Nullable Input<String> clientSecretSettingName;
        private @Nullable Input<String> configVersion;
        private @Nullable Input<BuiltInAuthenticationProvider> defaultProvider;
        private @Nullable Input<Boolean> enabled;
        private @Nullable Input<String> facebookAppId;
        private @Nullable Input<String> facebookAppSecret;
        private @Nullable Input<String> facebookAppSecretSettingName;
        private @Nullable Input<List<String>> facebookOAuthScopes;
        private @Nullable Input<String> gitHubClientId;
        private @Nullable Input<String> gitHubClientSecret;
        private @Nullable Input<String> gitHubClientSecretSettingName;
        private @Nullable Input<List<String>> gitHubOAuthScopes;
        private @Nullable Input<String> googleClientId;
        private @Nullable Input<String> googleClientSecret;
        private @Nullable Input<String> googleClientSecretSettingName;
        private @Nullable Input<List<String>> googleOAuthScopes;
        private @Nullable Input<String> isAuthFromFile;
        private @Nullable Input<String> issuer;
        private @Nullable Input<String> kind;
        private @Nullable Input<String> microsoftAccountClientId;
        private @Nullable Input<String> microsoftAccountClientSecret;
        private @Nullable Input<String> microsoftAccountClientSecretSettingName;
        private @Nullable Input<List<String>> microsoftAccountOAuthScopes;
        private Input<String> name;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> runtimeVersion;
        private Input<String> slot;
        private @Nullable Input<Double> tokenRefreshExtensionHours;
        private @Nullable Input<Boolean> tokenStoreEnabled;
        private @Nullable Input<String> twitterConsumerKey;
        private @Nullable Input<String> twitterConsumerSecret;
        private @Nullable Input<String> twitterConsumerSecretSettingName;
        private @Nullable Input<UnauthenticatedClientAction> unauthenticatedClientAction;
        private @Nullable Input<Boolean> validateIssuer;

        public Builder() {
    	      // Empty
        }

        public Builder(WebAppAuthSettingsSlotArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aadClaimsAuthorization = defaults.aadClaimsAuthorization;
    	      this.additionalLoginParams = defaults.additionalLoginParams;
    	      this.allowedAudiences = defaults.allowedAudiences;
    	      this.allowedExternalRedirectUrls = defaults.allowedExternalRedirectUrls;
    	      this.authFilePath = defaults.authFilePath;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.clientSecretCertificateThumbprint = defaults.clientSecretCertificateThumbprint;
    	      this.clientSecretSettingName = defaults.clientSecretSettingName;
    	      this.configVersion = defaults.configVersion;
    	      this.defaultProvider = defaults.defaultProvider;
    	      this.enabled = defaults.enabled;
    	      this.facebookAppId = defaults.facebookAppId;
    	      this.facebookAppSecret = defaults.facebookAppSecret;
    	      this.facebookAppSecretSettingName = defaults.facebookAppSecretSettingName;
    	      this.facebookOAuthScopes = defaults.facebookOAuthScopes;
    	      this.gitHubClientId = defaults.gitHubClientId;
    	      this.gitHubClientSecret = defaults.gitHubClientSecret;
    	      this.gitHubClientSecretSettingName = defaults.gitHubClientSecretSettingName;
    	      this.gitHubOAuthScopes = defaults.gitHubOAuthScopes;
    	      this.googleClientId = defaults.googleClientId;
    	      this.googleClientSecret = defaults.googleClientSecret;
    	      this.googleClientSecretSettingName = defaults.googleClientSecretSettingName;
    	      this.googleOAuthScopes = defaults.googleOAuthScopes;
    	      this.isAuthFromFile = defaults.isAuthFromFile;
    	      this.issuer = defaults.issuer;
    	      this.kind = defaults.kind;
    	      this.microsoftAccountClientId = defaults.microsoftAccountClientId;
    	      this.microsoftAccountClientSecret = defaults.microsoftAccountClientSecret;
    	      this.microsoftAccountClientSecretSettingName = defaults.microsoftAccountClientSecretSettingName;
    	      this.microsoftAccountOAuthScopes = defaults.microsoftAccountOAuthScopes;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.runtimeVersion = defaults.runtimeVersion;
    	      this.slot = defaults.slot;
    	      this.tokenRefreshExtensionHours = defaults.tokenRefreshExtensionHours;
    	      this.tokenStoreEnabled = defaults.tokenStoreEnabled;
    	      this.twitterConsumerKey = defaults.twitterConsumerKey;
    	      this.twitterConsumerSecret = defaults.twitterConsumerSecret;
    	      this.twitterConsumerSecretSettingName = defaults.twitterConsumerSecretSettingName;
    	      this.unauthenticatedClientAction = defaults.unauthenticatedClientAction;
    	      this.validateIssuer = defaults.validateIssuer;
        }

        public Builder aadClaimsAuthorization(@Nullable Input<String> aadClaimsAuthorization) {
            this.aadClaimsAuthorization = aadClaimsAuthorization;
            return this;
        }

        public Builder aadClaimsAuthorization(@Nullable String aadClaimsAuthorization) {
            this.aadClaimsAuthorization = Input.ofNullable(aadClaimsAuthorization);
            return this;
        }

        public Builder additionalLoginParams(@Nullable Input<List<String>> additionalLoginParams) {
            this.additionalLoginParams = additionalLoginParams;
            return this;
        }

        public Builder additionalLoginParams(@Nullable List<String> additionalLoginParams) {
            this.additionalLoginParams = Input.ofNullable(additionalLoginParams);
            return this;
        }

        public Builder allowedAudiences(@Nullable Input<List<String>> allowedAudiences) {
            this.allowedAudiences = allowedAudiences;
            return this;
        }

        public Builder allowedAudiences(@Nullable List<String> allowedAudiences) {
            this.allowedAudiences = Input.ofNullable(allowedAudiences);
            return this;
        }

        public Builder allowedExternalRedirectUrls(@Nullable Input<List<String>> allowedExternalRedirectUrls) {
            this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }

        public Builder allowedExternalRedirectUrls(@Nullable List<String> allowedExternalRedirectUrls) {
            this.allowedExternalRedirectUrls = Input.ofNullable(allowedExternalRedirectUrls);
            return this;
        }

        public Builder authFilePath(@Nullable Input<String> authFilePath) {
            this.authFilePath = authFilePath;
            return this;
        }

        public Builder authFilePath(@Nullable String authFilePath) {
            this.authFilePath = Input.ofNullable(authFilePath);
            return this;
        }

        public Builder clientId(@Nullable Input<String> clientId) {
            this.clientId = clientId;
            return this;
        }

        public Builder clientId(@Nullable String clientId) {
            this.clientId = Input.ofNullable(clientId);
            return this;
        }

        public Builder clientSecret(@Nullable Input<String> clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }

        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = Input.ofNullable(clientSecret);
            return this;
        }

        public Builder clientSecretCertificateThumbprint(@Nullable Input<String> clientSecretCertificateThumbprint) {
            this.clientSecretCertificateThumbprint = clientSecretCertificateThumbprint;
            return this;
        }

        public Builder clientSecretCertificateThumbprint(@Nullable String clientSecretCertificateThumbprint) {
            this.clientSecretCertificateThumbprint = Input.ofNullable(clientSecretCertificateThumbprint);
            return this;
        }

        public Builder clientSecretSettingName(@Nullable Input<String> clientSecretSettingName) {
            this.clientSecretSettingName = clientSecretSettingName;
            return this;
        }

        public Builder clientSecretSettingName(@Nullable String clientSecretSettingName) {
            this.clientSecretSettingName = Input.ofNullable(clientSecretSettingName);
            return this;
        }

        public Builder configVersion(@Nullable Input<String> configVersion) {
            this.configVersion = configVersion;
            return this;
        }

        public Builder configVersion(@Nullable String configVersion) {
            this.configVersion = Input.ofNullable(configVersion);
            return this;
        }

        public Builder defaultProvider(@Nullable Input<BuiltInAuthenticationProvider> defaultProvider) {
            this.defaultProvider = defaultProvider;
            return this;
        }

        public Builder defaultProvider(@Nullable BuiltInAuthenticationProvider defaultProvider) {
            this.defaultProvider = Input.ofNullable(defaultProvider);
            return this;
        }

        public Builder enabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder facebookAppId(@Nullable Input<String> facebookAppId) {
            this.facebookAppId = facebookAppId;
            return this;
        }

        public Builder facebookAppId(@Nullable String facebookAppId) {
            this.facebookAppId = Input.ofNullable(facebookAppId);
            return this;
        }

        public Builder facebookAppSecret(@Nullable Input<String> facebookAppSecret) {
            this.facebookAppSecret = facebookAppSecret;
            return this;
        }

        public Builder facebookAppSecret(@Nullable String facebookAppSecret) {
            this.facebookAppSecret = Input.ofNullable(facebookAppSecret);
            return this;
        }

        public Builder facebookAppSecretSettingName(@Nullable Input<String> facebookAppSecretSettingName) {
            this.facebookAppSecretSettingName = facebookAppSecretSettingName;
            return this;
        }

        public Builder facebookAppSecretSettingName(@Nullable String facebookAppSecretSettingName) {
            this.facebookAppSecretSettingName = Input.ofNullable(facebookAppSecretSettingName);
            return this;
        }

        public Builder facebookOAuthScopes(@Nullable Input<List<String>> facebookOAuthScopes) {
            this.facebookOAuthScopes = facebookOAuthScopes;
            return this;
        }

        public Builder facebookOAuthScopes(@Nullable List<String> facebookOAuthScopes) {
            this.facebookOAuthScopes = Input.ofNullable(facebookOAuthScopes);
            return this;
        }

        public Builder gitHubClientId(@Nullable Input<String> gitHubClientId) {
            this.gitHubClientId = gitHubClientId;
            return this;
        }

        public Builder gitHubClientId(@Nullable String gitHubClientId) {
            this.gitHubClientId = Input.ofNullable(gitHubClientId);
            return this;
        }

        public Builder gitHubClientSecret(@Nullable Input<String> gitHubClientSecret) {
            this.gitHubClientSecret = gitHubClientSecret;
            return this;
        }

        public Builder gitHubClientSecret(@Nullable String gitHubClientSecret) {
            this.gitHubClientSecret = Input.ofNullable(gitHubClientSecret);
            return this;
        }

        public Builder gitHubClientSecretSettingName(@Nullable Input<String> gitHubClientSecretSettingName) {
            this.gitHubClientSecretSettingName = gitHubClientSecretSettingName;
            return this;
        }

        public Builder gitHubClientSecretSettingName(@Nullable String gitHubClientSecretSettingName) {
            this.gitHubClientSecretSettingName = Input.ofNullable(gitHubClientSecretSettingName);
            return this;
        }

        public Builder gitHubOAuthScopes(@Nullable Input<List<String>> gitHubOAuthScopes) {
            this.gitHubOAuthScopes = gitHubOAuthScopes;
            return this;
        }

        public Builder gitHubOAuthScopes(@Nullable List<String> gitHubOAuthScopes) {
            this.gitHubOAuthScopes = Input.ofNullable(gitHubOAuthScopes);
            return this;
        }

        public Builder googleClientId(@Nullable Input<String> googleClientId) {
            this.googleClientId = googleClientId;
            return this;
        }

        public Builder googleClientId(@Nullable String googleClientId) {
            this.googleClientId = Input.ofNullable(googleClientId);
            return this;
        }

        public Builder googleClientSecret(@Nullable Input<String> googleClientSecret) {
            this.googleClientSecret = googleClientSecret;
            return this;
        }

        public Builder googleClientSecret(@Nullable String googleClientSecret) {
            this.googleClientSecret = Input.ofNullable(googleClientSecret);
            return this;
        }

        public Builder googleClientSecretSettingName(@Nullable Input<String> googleClientSecretSettingName) {
            this.googleClientSecretSettingName = googleClientSecretSettingName;
            return this;
        }

        public Builder googleClientSecretSettingName(@Nullable String googleClientSecretSettingName) {
            this.googleClientSecretSettingName = Input.ofNullable(googleClientSecretSettingName);
            return this;
        }

        public Builder googleOAuthScopes(@Nullable Input<List<String>> googleOAuthScopes) {
            this.googleOAuthScopes = googleOAuthScopes;
            return this;
        }

        public Builder googleOAuthScopes(@Nullable List<String> googleOAuthScopes) {
            this.googleOAuthScopes = Input.ofNullable(googleOAuthScopes);
            return this;
        }

        public Builder isAuthFromFile(@Nullable Input<String> isAuthFromFile) {
            this.isAuthFromFile = isAuthFromFile;
            return this;
        }

        public Builder isAuthFromFile(@Nullable String isAuthFromFile) {
            this.isAuthFromFile = Input.ofNullable(isAuthFromFile);
            return this;
        }

        public Builder issuer(@Nullable Input<String> issuer) {
            this.issuer = issuer;
            return this;
        }

        public Builder issuer(@Nullable String issuer) {
            this.issuer = Input.ofNullable(issuer);
            return this;
        }

        public Builder kind(@Nullable Input<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder microsoftAccountClientId(@Nullable Input<String> microsoftAccountClientId) {
            this.microsoftAccountClientId = microsoftAccountClientId;
            return this;
        }

        public Builder microsoftAccountClientId(@Nullable String microsoftAccountClientId) {
            this.microsoftAccountClientId = Input.ofNullable(microsoftAccountClientId);
            return this;
        }

        public Builder microsoftAccountClientSecret(@Nullable Input<String> microsoftAccountClientSecret) {
            this.microsoftAccountClientSecret = microsoftAccountClientSecret;
            return this;
        }

        public Builder microsoftAccountClientSecret(@Nullable String microsoftAccountClientSecret) {
            this.microsoftAccountClientSecret = Input.ofNullable(microsoftAccountClientSecret);
            return this;
        }

        public Builder microsoftAccountClientSecretSettingName(@Nullable Input<String> microsoftAccountClientSecretSettingName) {
            this.microsoftAccountClientSecretSettingName = microsoftAccountClientSecretSettingName;
            return this;
        }

        public Builder microsoftAccountClientSecretSettingName(@Nullable String microsoftAccountClientSecretSettingName) {
            this.microsoftAccountClientSecretSettingName = Input.ofNullable(microsoftAccountClientSecretSettingName);
            return this;
        }

        public Builder microsoftAccountOAuthScopes(@Nullable Input<List<String>> microsoftAccountOAuthScopes) {
            this.microsoftAccountOAuthScopes = microsoftAccountOAuthScopes;
            return this;
        }

        public Builder microsoftAccountOAuthScopes(@Nullable List<String> microsoftAccountOAuthScopes) {
            this.microsoftAccountOAuthScopes = Input.ofNullable(microsoftAccountOAuthScopes);
            return this;
        }

        public Builder name(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder runtimeVersion(@Nullable Input<String> runtimeVersion) {
            this.runtimeVersion = runtimeVersion;
            return this;
        }

        public Builder runtimeVersion(@Nullable String runtimeVersion) {
            this.runtimeVersion = Input.ofNullable(runtimeVersion);
            return this;
        }

        public Builder slot(Input<String> slot) {
            this.slot = Objects.requireNonNull(slot);
            return this;
        }

        public Builder slot(String slot) {
            this.slot = Input.of(Objects.requireNonNull(slot));
            return this;
        }

        public Builder tokenRefreshExtensionHours(@Nullable Input<Double> tokenRefreshExtensionHours) {
            this.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            return this;
        }

        public Builder tokenRefreshExtensionHours(@Nullable Double tokenRefreshExtensionHours) {
            this.tokenRefreshExtensionHours = Input.ofNullable(tokenRefreshExtensionHours);
            return this;
        }

        public Builder tokenStoreEnabled(@Nullable Input<Boolean> tokenStoreEnabled) {
            this.tokenStoreEnabled = tokenStoreEnabled;
            return this;
        }

        public Builder tokenStoreEnabled(@Nullable Boolean tokenStoreEnabled) {
            this.tokenStoreEnabled = Input.ofNullable(tokenStoreEnabled);
            return this;
        }

        public Builder twitterConsumerKey(@Nullable Input<String> twitterConsumerKey) {
            this.twitterConsumerKey = twitterConsumerKey;
            return this;
        }

        public Builder twitterConsumerKey(@Nullable String twitterConsumerKey) {
            this.twitterConsumerKey = Input.ofNullable(twitterConsumerKey);
            return this;
        }

        public Builder twitterConsumerSecret(@Nullable Input<String> twitterConsumerSecret) {
            this.twitterConsumerSecret = twitterConsumerSecret;
            return this;
        }

        public Builder twitterConsumerSecret(@Nullable String twitterConsumerSecret) {
            this.twitterConsumerSecret = Input.ofNullable(twitterConsumerSecret);
            return this;
        }

        public Builder twitterConsumerSecretSettingName(@Nullable Input<String> twitterConsumerSecretSettingName) {
            this.twitterConsumerSecretSettingName = twitterConsumerSecretSettingName;
            return this;
        }

        public Builder twitterConsumerSecretSettingName(@Nullable String twitterConsumerSecretSettingName) {
            this.twitterConsumerSecretSettingName = Input.ofNullable(twitterConsumerSecretSettingName);
            return this;
        }

        public Builder unauthenticatedClientAction(@Nullable Input<UnauthenticatedClientAction> unauthenticatedClientAction) {
            this.unauthenticatedClientAction = unauthenticatedClientAction;
            return this;
        }

        public Builder unauthenticatedClientAction(@Nullable UnauthenticatedClientAction unauthenticatedClientAction) {
            this.unauthenticatedClientAction = Input.ofNullable(unauthenticatedClientAction);
            return this;
        }

        public Builder validateIssuer(@Nullable Input<Boolean> validateIssuer) {
            this.validateIssuer = validateIssuer;
            return this;
        }

        public Builder validateIssuer(@Nullable Boolean validateIssuer) {
            this.validateIssuer = Input.ofNullable(validateIssuer);
            return this;
        }
        public WebAppAuthSettingsSlotArgs build() {
            return new WebAppAuthSettingsSlotArgs(aadClaimsAuthorization, additionalLoginParams, allowedAudiences, allowedExternalRedirectUrls, authFilePath, clientId, clientSecret, clientSecretCertificateThumbprint, clientSecretSettingName, configVersion, defaultProvider, enabled, facebookAppId, facebookAppSecret, facebookAppSecretSettingName, facebookOAuthScopes, gitHubClientId, gitHubClientSecret, gitHubClientSecretSettingName, gitHubOAuthScopes, googleClientId, googleClientSecret, googleClientSecretSettingName, googleOAuthScopes, isAuthFromFile, issuer, kind, microsoftAccountClientId, microsoftAccountClientSecret, microsoftAccountClientSecretSettingName, microsoftAccountOAuthScopes, name, resourceGroupName, runtimeVersion, slot, tokenRefreshExtensionHours, tokenStoreEnabled, twitterConsumerKey, twitterConsumerSecret, twitterConsumerSecretSettingName, unauthenticatedClientAction, validateIssuer);
        }
    }
}
