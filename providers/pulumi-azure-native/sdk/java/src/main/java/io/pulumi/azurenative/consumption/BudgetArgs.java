// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.consumption;

import io.pulumi.azurenative.consumption.enums.CategoryType;
import io.pulumi.azurenative.consumption.enums.TimeGrainType;
import io.pulumi.azurenative.consumption.inputs.BudgetFilterArgs;
import io.pulumi.azurenative.consumption.inputs.BudgetTimePeriodArgs;
import io.pulumi.azurenative.consumption.inputs.NotificationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BudgetArgs extends io.pulumi.resources.ResourceArgs {

    public static final BudgetArgs Empty = new BudgetArgs();

    /**
     * The total amount of cost to track with the budget
     * 
     */
    @InputImport(name="amount", required=true)
    private final Input<Double> amount;

    public Input<Double> getAmount() {
        return this.amount;
    }

    /**
     * Budget Name.
     * 
     */
    @InputImport(name="budgetName")
    private final @Nullable Input<String> budgetName;

    public Input<String> getBudgetName() {
        return this.budgetName == null ? Input.empty() : this.budgetName;
    }

    /**
     * The category of the budget, whether the budget tracks cost or usage.
     * 
     */
    @InputImport(name="category", required=true)
    private final Input<Either<String,CategoryType>> category;

    public Input<Either<String,CategoryType>> getCategory() {
        return this.category;
    }

    /**
     * eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     * 
     */
    @InputImport(name="eTag")
    private final @Nullable Input<String> eTag;

    public Input<String> getETag() {
        return this.eTag == null ? Input.empty() : this.eTag;
    }

    /**
     * May be used to filter budgets by user-specified dimensions and/or tags.
     * 
     */
    @InputImport(name="filter")
    private final @Nullable Input<BudgetFilterArgs> filter;

    public Input<BudgetFilterArgs> getFilter() {
        return this.filter == null ? Input.empty() : this.filter;
    }

    /**
     * Dictionary of notifications associated with the budget. Budget can have up to five notifications.
     * 
     */
    @InputImport(name="notifications")
    private final @Nullable Input<Map<String,NotificationArgs>> notifications;

    public Input<Map<String,NotificationArgs>> getNotifications() {
        return this.notifications == null ? Input.empty() : this.notifications;
    }

    /**
     * The scope associated with budget operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope.
     * 
     */
    @InputImport(name="scope", required=true)
    private final Input<String> scope;

    public Input<String> getScope() {
        return this.scope;
    }

    /**
     * The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
     * 
     */
    @InputImport(name="timeGrain", required=true)
    private final Input<Either<String,TimeGrainType>> timeGrain;

    public Input<Either<String,TimeGrainType>> getTimeGrain() {
        return this.timeGrain;
    }

    /**
     * Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
     * 
     */
    @InputImport(name="timePeriod", required=true)
    private final Input<BudgetTimePeriodArgs> timePeriod;

    public Input<BudgetTimePeriodArgs> getTimePeriod() {
        return this.timePeriod;
    }

    public BudgetArgs(
        Input<Double> amount,
        @Nullable Input<String> budgetName,
        Input<Either<String,CategoryType>> category,
        @Nullable Input<String> eTag,
        @Nullable Input<BudgetFilterArgs> filter,
        @Nullable Input<Map<String,NotificationArgs>> notifications,
        Input<String> scope,
        Input<Either<String,TimeGrainType>> timeGrain,
        Input<BudgetTimePeriodArgs> timePeriod) {
        this.amount = Objects.requireNonNull(amount, "expected parameter 'amount' to be non-null");
        this.budgetName = budgetName;
        this.category = Objects.requireNonNull(category, "expected parameter 'category' to be non-null");
        this.eTag = eTag;
        this.filter = filter;
        this.notifications = notifications;
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
        this.timeGrain = Objects.requireNonNull(timeGrain, "expected parameter 'timeGrain' to be non-null");
        this.timePeriod = Objects.requireNonNull(timePeriod, "expected parameter 'timePeriod' to be non-null");
    }

    private BudgetArgs() {
        this.amount = Input.empty();
        this.budgetName = Input.empty();
        this.category = Input.empty();
        this.eTag = Input.empty();
        this.filter = Input.empty();
        this.notifications = Input.empty();
        this.scope = Input.empty();
        this.timeGrain = Input.empty();
        this.timePeriod = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Double> amount;
        private @Nullable Input<String> budgetName;
        private Input<Either<String,CategoryType>> category;
        private @Nullable Input<String> eTag;
        private @Nullable Input<BudgetFilterArgs> filter;
        private @Nullable Input<Map<String,NotificationArgs>> notifications;
        private Input<String> scope;
        private Input<Either<String,TimeGrainType>> timeGrain;
        private Input<BudgetTimePeriodArgs> timePeriod;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amount = defaults.amount;
    	      this.budgetName = defaults.budgetName;
    	      this.category = defaults.category;
    	      this.eTag = defaults.eTag;
    	      this.filter = defaults.filter;
    	      this.notifications = defaults.notifications;
    	      this.scope = defaults.scope;
    	      this.timeGrain = defaults.timeGrain;
    	      this.timePeriod = defaults.timePeriod;
        }

        public Builder setAmount(Input<Double> amount) {
            this.amount = Objects.requireNonNull(amount);
            return this;
        }

        public Builder setAmount(Double amount) {
            this.amount = Input.of(Objects.requireNonNull(amount));
            return this;
        }

        public Builder setBudgetName(@Nullable Input<String> budgetName) {
            this.budgetName = budgetName;
            return this;
        }

        public Builder setBudgetName(@Nullable String budgetName) {
            this.budgetName = Input.ofNullable(budgetName);
            return this;
        }

        public Builder setCategory(Input<Either<String,CategoryType>> category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }

        public Builder setCategory(Either<String,CategoryType> category) {
            this.category = Input.of(Objects.requireNonNull(category));
            return this;
        }

        public Builder setETag(@Nullable Input<String> eTag) {
            this.eTag = eTag;
            return this;
        }

        public Builder setETag(@Nullable String eTag) {
            this.eTag = Input.ofNullable(eTag);
            return this;
        }

        public Builder setFilter(@Nullable Input<BudgetFilterArgs> filter) {
            this.filter = filter;
            return this;
        }

        public Builder setFilter(@Nullable BudgetFilterArgs filter) {
            this.filter = Input.ofNullable(filter);
            return this;
        }

        public Builder setNotifications(@Nullable Input<Map<String,NotificationArgs>> notifications) {
            this.notifications = notifications;
            return this;
        }

        public Builder setNotifications(@Nullable Map<String,NotificationArgs> notifications) {
            this.notifications = Input.ofNullable(notifications);
            return this;
        }

        public Builder setScope(Input<String> scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }

        public Builder setScope(String scope) {
            this.scope = Input.of(Objects.requireNonNull(scope));
            return this;
        }

        public Builder setTimeGrain(Input<Either<String,TimeGrainType>> timeGrain) {
            this.timeGrain = Objects.requireNonNull(timeGrain);
            return this;
        }

        public Builder setTimeGrain(Either<String,TimeGrainType> timeGrain) {
            this.timeGrain = Input.of(Objects.requireNonNull(timeGrain));
            return this;
        }

        public Builder setTimePeriod(Input<BudgetTimePeriodArgs> timePeriod) {
            this.timePeriod = Objects.requireNonNull(timePeriod);
            return this;
        }

        public Builder setTimePeriod(BudgetTimePeriodArgs timePeriod) {
            this.timePeriod = Input.of(Objects.requireNonNull(timePeriod));
            return this;
        }

        public BudgetArgs build() {
            return new BudgetArgs(amount, budgetName, category, eTag, filter, notifications, scope, timeGrain, timePeriod);
        }
    }
}
