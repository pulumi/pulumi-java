// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb.inputs;

import io.pulumi.azurenative.documentdb.enums.ConflictResolutionMode;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConflictResolutionPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConflictResolutionPolicyArgs Empty = new ConflictResolutionPolicyArgs();

    @InputImport(name="conflictResolutionPath")
    private final @Nullable Input<String> conflictResolutionPath;

    public Input<String> getConflictResolutionPath() {
        return this.conflictResolutionPath == null ? Input.empty() : this.conflictResolutionPath;
    }

    @InputImport(name="conflictResolutionProcedure")
    private final @Nullable Input<String> conflictResolutionProcedure;

    public Input<String> getConflictResolutionProcedure() {
        return this.conflictResolutionProcedure == null ? Input.empty() : this.conflictResolutionProcedure;
    }

    @InputImport(name="mode")
    private final @Nullable Input<Either<String,ConflictResolutionMode>> mode;

    public Input<Either<String,ConflictResolutionMode>> getMode() {
        return this.mode == null ? Input.empty() : this.mode;
    }

    public ConflictResolutionPolicyArgs(
        @Nullable Input<String> conflictResolutionPath,
        @Nullable Input<String> conflictResolutionProcedure,
        @Nullable Input<Either<String,ConflictResolutionMode>> mode) {
        this.conflictResolutionPath = conflictResolutionPath;
        this.conflictResolutionProcedure = conflictResolutionProcedure;
        this.mode = mode == null ? Input.ofLeft("LastWriterWins") : mode;
    }

    private ConflictResolutionPolicyArgs() {
        this.conflictResolutionPath = Input.empty();
        this.conflictResolutionProcedure = Input.empty();
        this.mode = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConflictResolutionPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> conflictResolutionPath;
        private @Nullable Input<String> conflictResolutionProcedure;
        private @Nullable Input<Either<String,ConflictResolutionMode>> mode;

        public Builder() {
    	      // Empty
        }

        public Builder(ConflictResolutionPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conflictResolutionPath = defaults.conflictResolutionPath;
    	      this.conflictResolutionProcedure = defaults.conflictResolutionProcedure;
    	      this.mode = defaults.mode;
        }

        public Builder setConflictResolutionPath(@Nullable Input<String> conflictResolutionPath) {
            this.conflictResolutionPath = conflictResolutionPath;
            return this;
        }

        public Builder setConflictResolutionPath(@Nullable String conflictResolutionPath) {
            this.conflictResolutionPath = Input.ofNullable(conflictResolutionPath);
            return this;
        }

        public Builder setConflictResolutionProcedure(@Nullable Input<String> conflictResolutionProcedure) {
            this.conflictResolutionProcedure = conflictResolutionProcedure;
            return this;
        }

        public Builder setConflictResolutionProcedure(@Nullable String conflictResolutionProcedure) {
            this.conflictResolutionProcedure = Input.ofNullable(conflictResolutionProcedure);
            return this;
        }

        public Builder setMode(@Nullable Input<Either<String,ConflictResolutionMode>> mode) {
            this.mode = mode;
            return this;
        }

        public Builder setMode(@Nullable Either<String,ConflictResolutionMode> mode) {
            this.mode = Input.ofNullable(mode);
            return this;
        }

        public ConflictResolutionPolicyArgs build() {
            return new ConflictResolutionPolicyArgs(conflictResolutionPath, conflictResolutionProcedure, mode);
        }
    }
}
