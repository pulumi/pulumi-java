// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.eventgrid.inputs;

import io.pulumi.azurenative.eventgrid.inputs.EventSubscriptionIdentityResponse;
import io.pulumi.azurenative.eventgrid.inputs.StorageBlobDeadLetterDestinationResponse;
import io.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information about the deadletter destination with resource identity.
 * 
 */
public final class DeadLetterWithResourceIdentityResponse extends io.pulumi.resources.InvokeArgs {

    public static final DeadLetterWithResourceIdentityResponse Empty = new DeadLetterWithResourceIdentityResponse();

    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    @Import(name="deadLetterDestination")
      private final @Nullable StorageBlobDeadLetterDestinationResponse deadLetterDestination;

    public Optional<StorageBlobDeadLetterDestinationResponse> getDeadLetterDestination() {
        return this.deadLetterDestination == null ? Optional.empty() : Optional.ofNullable(this.deadLetterDestination);
    }

    /**
     * The identity to use when dead-lettering events.
     * 
     */
    @Import(name="identity")
      private final @Nullable EventSubscriptionIdentityResponse identity;

    public Optional<EventSubscriptionIdentityResponse> getIdentity() {
        return this.identity == null ? Optional.empty() : Optional.ofNullable(this.identity);
    }

    public DeadLetterWithResourceIdentityResponse(
        @Nullable StorageBlobDeadLetterDestinationResponse deadLetterDestination,
        @Nullable EventSubscriptionIdentityResponse identity) {
        this.deadLetterDestination = deadLetterDestination;
        this.identity = identity;
    }

    private DeadLetterWithResourceIdentityResponse() {
        this.deadLetterDestination = null;
        this.identity = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeadLetterWithResourceIdentityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable StorageBlobDeadLetterDestinationResponse deadLetterDestination;
        private @Nullable EventSubscriptionIdentityResponse identity;

        public Builder() {
    	      // Empty
        }

        public Builder(DeadLetterWithResourceIdentityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deadLetterDestination = defaults.deadLetterDestination;
    	      this.identity = defaults.identity;
        }

        public Builder deadLetterDestination(@Nullable StorageBlobDeadLetterDestinationResponse deadLetterDestination) {
            this.deadLetterDestination = deadLetterDestination;
            return this;
        }
        public Builder identity(@Nullable EventSubscriptionIdentityResponse identity) {
            this.identity = identity;
            return this;
        }        public DeadLetterWithResourceIdentityResponse build() {
            return new DeadLetterWithResourceIdentityResponse(deadLetterDestination, identity);
        }
    }
}
