// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListEffectiveVirtualNetworkByNetworkManagerArgs extends io.pulumi.resources.InvokeArgs {

    public static final ListEffectiveVirtualNetworkByNetworkManagerArgs Empty = new ListEffectiveVirtualNetworkByNetworkManagerArgs();

    /**
     * Conditional Members.
     * 
     */
    @InputImport(name="conditionalMembers")
    private final @Nullable String conditionalMembers;

    public Optional<String> getConditionalMembers() {
        return this.conditionalMembers == null ? Optional.empty() : Optional.ofNullable(this.conditionalMembers);
    }

    /**
     * The name of the network manager.
     * 
     */
    @InputImport(name="networkManagerName", required=true)
    private final String networkManagerName;

    public String getNetworkManagerName() {
        return this.networkManagerName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final String resourceGroupName;

    public String getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.
     * 
     */
    @InputImport(name="skipToken")
    private final @Nullable String skipToken;

    public Optional<String> getSkipToken() {
        return this.skipToken == null ? Optional.empty() : Optional.ofNullable(this.skipToken);
    }

    /**
     * An optional query parameter which specifies the maximum number of records to be returned by the server.
     * 
     */
    @InputImport(name="top")
    private final @Nullable Integer top;

    public Optional<Integer> getTop() {
        return this.top == null ? Optional.empty() : Optional.ofNullable(this.top);
    }

    public ListEffectiveVirtualNetworkByNetworkManagerArgs(
        @Nullable String conditionalMembers,
        String networkManagerName,
        String resourceGroupName,
        @Nullable String skipToken,
        @Nullable Integer top) {
        this.conditionalMembers = conditionalMembers;
        this.networkManagerName = Objects.requireNonNull(networkManagerName, "expected parameter 'networkManagerName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.skipToken = skipToken;
        this.top = top;
    }

    private ListEffectiveVirtualNetworkByNetworkManagerArgs() {
        this.conditionalMembers = null;
        this.networkManagerName = null;
        this.resourceGroupName = null;
        this.skipToken = null;
        this.top = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListEffectiveVirtualNetworkByNetworkManagerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String conditionalMembers;
        private String networkManagerName;
        private String resourceGroupName;
        private @Nullable String skipToken;
        private @Nullable Integer top;

        public Builder() {
    	      // Empty
        }

        public Builder(ListEffectiveVirtualNetworkByNetworkManagerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionalMembers = defaults.conditionalMembers;
    	      this.networkManagerName = defaults.networkManagerName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.skipToken = defaults.skipToken;
    	      this.top = defaults.top;
        }

        public Builder setConditionalMembers(@Nullable String conditionalMembers) {
            this.conditionalMembers = conditionalMembers;
            return this;
        }

        public Builder setNetworkManagerName(String networkManagerName) {
            this.networkManagerName = Objects.requireNonNull(networkManagerName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setSkipToken(@Nullable String skipToken) {
            this.skipToken = skipToken;
            return this;
        }

        public Builder setTop(@Nullable Integer top) {
            this.top = top;
            return this;
        }

        public ListEffectiveVirtualNetworkByNetworkManagerArgs build() {
            return new ListEffectiveVirtualNetworkByNetworkManagerArgs(conditionalMembers, networkManagerName, resourceGroupName, skipToken, top);
        }
    }
}
