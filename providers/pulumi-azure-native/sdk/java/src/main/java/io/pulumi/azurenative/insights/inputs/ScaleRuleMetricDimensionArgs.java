// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.azurenative.insights.enums.ScaleRuleMetricDimensionOperationType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Specifies an auto scale rule metric dimension.
 * 
 */
public final class ScaleRuleMetricDimensionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScaleRuleMetricDimensionArgs Empty = new ScaleRuleMetricDimensionArgs();

    /**
     * Name of the dimension.
     * 
     */
    @InputImport(name="dimensionName", required=true)
      private final Output<String> dimensionName;

    public Output<String> getDimensionName() {
        return this.dimensionName;
    }

    /**
     * the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
     * 
     */
    @InputImport(name="operator", required=true)
      private final Output<Either<String,ScaleRuleMetricDimensionOperationType>> operator;

    public Output<Either<String,ScaleRuleMetricDimensionOperationType>> getOperator() {
        return this.operator;
    }

    /**
     * list of dimension values. For example: ["App1","App2"].
     * 
     */
    @InputImport(name="values", required=true)
      private final Output<List<String>> values;

    public Output<List<String>> getValues() {
        return this.values;
    }

    public ScaleRuleMetricDimensionArgs(
        Output<String> dimensionName,
        Output<Either<String,ScaleRuleMetricDimensionOperationType>> operator,
        Output<List<String>> values) {
        this.dimensionName = Objects.requireNonNull(dimensionName, "expected parameter 'dimensionName' to be non-null");
        this.operator = Objects.requireNonNull(operator, "expected parameter 'operator' to be non-null");
        this.values = Objects.requireNonNull(values, "expected parameter 'values' to be non-null");
    }

    private ScaleRuleMetricDimensionArgs() {
        this.dimensionName = Output.empty();
        this.operator = Output.empty();
        this.values = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScaleRuleMetricDimensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> dimensionName;
        private Output<Either<String,ScaleRuleMetricDimensionOperationType>> operator;
        private Output<List<String>> values;

        public Builder() {
    	      // Empty
        }

        public Builder(ScaleRuleMetricDimensionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dimensionName = defaults.dimensionName;
    	      this.operator = defaults.operator;
    	      this.values = defaults.values;
        }

        public Builder dimensionName(Output<String> dimensionName) {
            this.dimensionName = Objects.requireNonNull(dimensionName);
            return this;
        }

        public Builder dimensionName(String dimensionName) {
            this.dimensionName = Output.of(Objects.requireNonNull(dimensionName));
            return this;
        }

        public Builder operator(Output<Either<String,ScaleRuleMetricDimensionOperationType>> operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }

        public Builder operator(Either<String,ScaleRuleMetricDimensionOperationType> operator) {
            this.operator = Output.of(Objects.requireNonNull(operator));
            return this;
        }

        public Builder values(Output<List<String>> values) {
            this.values = Objects.requireNonNull(values);
            return this;
        }

        public Builder values(List<String> values) {
            this.values = Output.of(Objects.requireNonNull(values));
            return this;
        }
        public ScaleRuleMetricDimensionArgs build() {
            return new ScaleRuleMetricDimensionArgs(dimensionName, operator, values);
        }
    }
}
