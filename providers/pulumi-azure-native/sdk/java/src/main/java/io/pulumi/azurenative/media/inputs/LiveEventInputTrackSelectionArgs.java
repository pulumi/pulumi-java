// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
 * 
 */
public final class LiveEventInputTrackSelectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final LiveEventInputTrackSelectionArgs Empty = new LiveEventInputTrackSelectionArgs();

    /**
     * Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
     * 
     */
    @InputImport(name="operation")
      private final @Nullable Output<String> operation;

    public Output<String> getOperation() {
        return this.operation == null ? Output.empty() : this.operation;
    }

    /**
     * Property name to select. This property is reserved for future use, any value set on this property will be ignored.
     * 
     */
    @InputImport(name="property")
      private final @Nullable Output<String> property;

    public Output<String> getProperty() {
        return this.property == null ? Output.empty() : this.property;
    }

    /**
     * Property value to select. This property is reserved for future use, any value set on this property will be ignored.
     * 
     */
    @InputImport(name="value")
      private final @Nullable Output<String> value;

    public Output<String> getValue() {
        return this.value == null ? Output.empty() : this.value;
    }

    public LiveEventInputTrackSelectionArgs(
        @Nullable Output<String> operation,
        @Nullable Output<String> property,
        @Nullable Output<String> value) {
        this.operation = operation;
        this.property = property;
        this.value = value;
    }

    private LiveEventInputTrackSelectionArgs() {
        this.operation = Output.empty();
        this.property = Output.empty();
        this.value = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveEventInputTrackSelectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> operation;
        private @Nullable Output<String> property;
        private @Nullable Output<String> value;

        public Builder() {
    	      // Empty
        }

        public Builder(LiveEventInputTrackSelectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.operation = defaults.operation;
    	      this.property = defaults.property;
    	      this.value = defaults.value;
        }

        public Builder operation(@Nullable Output<String> operation) {
            this.operation = operation;
            return this;
        }

        public Builder operation(@Nullable String operation) {
            this.operation = Output.ofNullable(operation);
            return this;
        }

        public Builder property(@Nullable Output<String> property) {
            this.property = property;
            return this;
        }

        public Builder property(@Nullable String property) {
            this.property = Output.ofNullable(property);
            return this;
        }

        public Builder value(@Nullable Output<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(@Nullable String value) {
            this.value = Output.ofNullable(value);
            return this;
        }
        public LiveEventInputTrackSelectionArgs build() {
            return new LiveEventInputTrackSelectionArgs(operation, property, value);
        }
    }
}
