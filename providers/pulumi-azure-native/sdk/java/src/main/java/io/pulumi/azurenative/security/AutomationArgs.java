// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.security;

import io.pulumi.azurenative.security.inputs.AutomationActionEventHubArgs;
import io.pulumi.azurenative.security.inputs.AutomationActionLogicAppArgs;
import io.pulumi.azurenative.security.inputs.AutomationActionWorkspaceArgs;
import io.pulumi.azurenative.security.inputs.AutomationScopeArgs;
import io.pulumi.azurenative.security.inputs.AutomationSourceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AutomationArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutomationArgs Empty = new AutomationArgs();

    /**
     * A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
     * 
     */
    @Import(name="actions")
      private final @Nullable Output<List<Object>> actions;

    public Output<List<Object>> getActions() {
        return this.actions == null ? Output.empty() : this.actions;
    }

    /**
     * The security automation name.
     * 
     */
    @Import(name="automationName")
      private final @Nullable Output<String> automationName;

    public Output<String> getAutomationName() {
        return this.automationName == null ? Output.empty() : this.automationName;
    }

    /**
     * The security automation description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Indicates whether the security automation is enabled.
     * 
     */
    @Import(name="isEnabled")
      private final @Nullable Output<Boolean> isEnabled;

    public Output<Boolean> getIsEnabled() {
        return this.isEnabled == null ? Output.empty() : this.isEnabled;
    }

    /**
     * Kind of the resource
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * Location where the resource is stored
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
     * 
     */
    @Import(name="scopes")
      private final @Nullable Output<List<AutomationScopeArgs>> scopes;

    public Output<List<AutomationScopeArgs>> getScopes() {
        return this.scopes == null ? Output.empty() : this.scopes;
    }

    /**
     * A collection of the source event types which evaluate the security automation set of rules.
     * 
     */
    @Import(name="sources")
      private final @Nullable Output<List<AutomationSourceArgs>> sources;

    public Output<List<AutomationSourceArgs>> getSources() {
        return this.sources == null ? Output.empty() : this.sources;
    }

    /**
     * A list of key value pairs that describe the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public AutomationArgs(
        @Nullable Output<List<Object>> actions,
        @Nullable Output<String> automationName,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> isEnabled,
        @Nullable Output<String> kind,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<List<AutomationScopeArgs>> scopes,
        @Nullable Output<List<AutomationSourceArgs>> sources,
        @Nullable Output<Map<String,String>> tags) {
        this.actions = actions;
        this.automationName = automationName;
        this.description = description;
        this.isEnabled = isEnabled;
        this.kind = kind;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scopes = scopes;
        this.sources = sources;
        this.tags = tags;
    }

    private AutomationArgs() {
        this.actions = Output.empty();
        this.automationName = Output.empty();
        this.description = Output.empty();
        this.isEnabled = Output.empty();
        this.kind = Output.empty();
        this.location = Output.empty();
        this.resourceGroupName = Output.empty();
        this.scopes = Output.empty();
        this.sources = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutomationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Object>> actions;
        private @Nullable Output<String> automationName;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> isEnabled;
        private @Nullable Output<String> kind;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<List<AutomationScopeArgs>> scopes;
        private @Nullable Output<List<AutomationSourceArgs>> sources;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(AutomationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.automationName = defaults.automationName;
    	      this.description = defaults.description;
    	      this.isEnabled = defaults.isEnabled;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scopes = defaults.scopes;
    	      this.sources = defaults.sources;
    	      this.tags = defaults.tags;
        }

        public Builder actions(@Nullable Output<List<Object>> actions) {
            this.actions = actions;
            return this;
        }

        public Builder actions(@Nullable List<Object> actions) {
            this.actions = Output.ofNullable(actions);
            return this;
        }

        public Builder automationName(@Nullable Output<String> automationName) {
            this.automationName = automationName;
            return this;
        }

        public Builder automationName(@Nullable String automationName) {
            this.automationName = Output.ofNullable(automationName);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }

        public Builder isEnabled(@Nullable Boolean isEnabled) {
            this.isEnabled = Output.ofNullable(isEnabled);
            return this;
        }

        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder scopes(@Nullable Output<List<AutomationScopeArgs>> scopes) {
            this.scopes = scopes;
            return this;
        }

        public Builder scopes(@Nullable List<AutomationScopeArgs> scopes) {
            this.scopes = Output.ofNullable(scopes);
            return this;
        }

        public Builder sources(@Nullable Output<List<AutomationSourceArgs>> sources) {
            this.sources = sources;
            return this;
        }

        public Builder sources(@Nullable List<AutomationSourceArgs> sources) {
            this.sources = Output.ofNullable(sources);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public AutomationArgs build() {
            return new AutomationArgs(actions, automationName, description, isEnabled, kind, location, resourceGroupName, scopes, sources, tags);
        }
    }
}
