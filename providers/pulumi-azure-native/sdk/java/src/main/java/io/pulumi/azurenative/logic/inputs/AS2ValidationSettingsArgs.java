// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.azurenative.logic.enums.EncryptionAlgorithm;
import io.pulumi.azurenative.logic.enums.SigningAlgorithm;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The AS2 agreement validation settings.
 * 
 */
public final class AS2ValidationSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AS2ValidationSettingsArgs Empty = new AS2ValidationSettingsArgs();

    /**
     * The value indicating whether to check for certificate revocation list on receive.
     * 
     */
    @InputImport(name="checkCertificateRevocationListOnReceive", required=true)
      private final Input<Boolean> checkCertificateRevocationListOnReceive;

    public Input<Boolean> getCheckCertificateRevocationListOnReceive() {
        return this.checkCertificateRevocationListOnReceive;
    }

    /**
     * The value indicating whether to check for certificate revocation list on send.
     * 
     */
    @InputImport(name="checkCertificateRevocationListOnSend", required=true)
      private final Input<Boolean> checkCertificateRevocationListOnSend;

    public Input<Boolean> getCheckCertificateRevocationListOnSend() {
        return this.checkCertificateRevocationListOnSend;
    }

    /**
     * The value indicating whether to check for duplicate message.
     * 
     */
    @InputImport(name="checkDuplicateMessage", required=true)
      private final Input<Boolean> checkDuplicateMessage;

    public Input<Boolean> getCheckDuplicateMessage() {
        return this.checkDuplicateMessage;
    }

    /**
     * The value indicating whether the message has to be compressed.
     * 
     */
    @InputImport(name="compressMessage", required=true)
      private final Input<Boolean> compressMessage;

    public Input<Boolean> getCompressMessage() {
        return this.compressMessage;
    }

    /**
     * The value indicating whether the message has to be encrypted.
     * 
     */
    @InputImport(name="encryptMessage", required=true)
      private final Input<Boolean> encryptMessage;

    public Input<Boolean> getEncryptMessage() {
        return this.encryptMessage;
    }

    /**
     * The encryption algorithm.
     * 
     */
    @InputImport(name="encryptionAlgorithm", required=true)
      private final Input<Either<String,EncryptionAlgorithm>> encryptionAlgorithm;

    public Input<Either<String,EncryptionAlgorithm>> getEncryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }

    /**
     * The number of days to look back for duplicate interchange.
     * 
     */
    @InputImport(name="interchangeDuplicatesValidityDays", required=true)
      private final Input<Integer> interchangeDuplicatesValidityDays;

    public Input<Integer> getInterchangeDuplicatesValidityDays() {
        return this.interchangeDuplicatesValidityDays;
    }

    /**
     * The value indicating whether to override incoming message properties with those in agreement.
     * 
     */
    @InputImport(name="overrideMessageProperties", required=true)
      private final Input<Boolean> overrideMessageProperties;

    public Input<Boolean> getOverrideMessageProperties() {
        return this.overrideMessageProperties;
    }

    /**
     * The value indicating whether the message has to be signed.
     * 
     */
    @InputImport(name="signMessage", required=true)
      private final Input<Boolean> signMessage;

    public Input<Boolean> getSignMessage() {
        return this.signMessage;
    }

    /**
     * The signing algorithm.
     * 
     */
    @InputImport(name="signingAlgorithm")
      private final @Nullable Input<Either<String,SigningAlgorithm>> signingAlgorithm;

    public Input<Either<String,SigningAlgorithm>> getSigningAlgorithm() {
        return this.signingAlgorithm == null ? Input.empty() : this.signingAlgorithm;
    }

    public AS2ValidationSettingsArgs(
        Input<Boolean> checkCertificateRevocationListOnReceive,
        Input<Boolean> checkCertificateRevocationListOnSend,
        Input<Boolean> checkDuplicateMessage,
        Input<Boolean> compressMessage,
        Input<Boolean> encryptMessage,
        Input<Either<String,EncryptionAlgorithm>> encryptionAlgorithm,
        Input<Integer> interchangeDuplicatesValidityDays,
        Input<Boolean> overrideMessageProperties,
        Input<Boolean> signMessage,
        @Nullable Input<Either<String,SigningAlgorithm>> signingAlgorithm) {
        this.checkCertificateRevocationListOnReceive = Objects.requireNonNull(checkCertificateRevocationListOnReceive, "expected parameter 'checkCertificateRevocationListOnReceive' to be non-null");
        this.checkCertificateRevocationListOnSend = Objects.requireNonNull(checkCertificateRevocationListOnSend, "expected parameter 'checkCertificateRevocationListOnSend' to be non-null");
        this.checkDuplicateMessage = Objects.requireNonNull(checkDuplicateMessage, "expected parameter 'checkDuplicateMessage' to be non-null");
        this.compressMessage = Objects.requireNonNull(compressMessage, "expected parameter 'compressMessage' to be non-null");
        this.encryptMessage = Objects.requireNonNull(encryptMessage, "expected parameter 'encryptMessage' to be non-null");
        this.encryptionAlgorithm = Objects.requireNonNull(encryptionAlgorithm, "expected parameter 'encryptionAlgorithm' to be non-null");
        this.interchangeDuplicatesValidityDays = Objects.requireNonNull(interchangeDuplicatesValidityDays, "expected parameter 'interchangeDuplicatesValidityDays' to be non-null");
        this.overrideMessageProperties = Objects.requireNonNull(overrideMessageProperties, "expected parameter 'overrideMessageProperties' to be non-null");
        this.signMessage = Objects.requireNonNull(signMessage, "expected parameter 'signMessage' to be non-null");
        this.signingAlgorithm = signingAlgorithm;
    }

    private AS2ValidationSettingsArgs() {
        this.checkCertificateRevocationListOnReceive = Input.empty();
        this.checkCertificateRevocationListOnSend = Input.empty();
        this.checkDuplicateMessage = Input.empty();
        this.compressMessage = Input.empty();
        this.encryptMessage = Input.empty();
        this.encryptionAlgorithm = Input.empty();
        this.interchangeDuplicatesValidityDays = Input.empty();
        this.overrideMessageProperties = Input.empty();
        this.signMessage = Input.empty();
        this.signingAlgorithm = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AS2ValidationSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Boolean> checkCertificateRevocationListOnReceive;
        private Input<Boolean> checkCertificateRevocationListOnSend;
        private Input<Boolean> checkDuplicateMessage;
        private Input<Boolean> compressMessage;
        private Input<Boolean> encryptMessage;
        private Input<Either<String,EncryptionAlgorithm>> encryptionAlgorithm;
        private Input<Integer> interchangeDuplicatesValidityDays;
        private Input<Boolean> overrideMessageProperties;
        private Input<Boolean> signMessage;
        private @Nullable Input<Either<String,SigningAlgorithm>> signingAlgorithm;

        public Builder() {
    	      // Empty
        }

        public Builder(AS2ValidationSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkCertificateRevocationListOnReceive = defaults.checkCertificateRevocationListOnReceive;
    	      this.checkCertificateRevocationListOnSend = defaults.checkCertificateRevocationListOnSend;
    	      this.checkDuplicateMessage = defaults.checkDuplicateMessage;
    	      this.compressMessage = defaults.compressMessage;
    	      this.encryptMessage = defaults.encryptMessage;
    	      this.encryptionAlgorithm = defaults.encryptionAlgorithm;
    	      this.interchangeDuplicatesValidityDays = defaults.interchangeDuplicatesValidityDays;
    	      this.overrideMessageProperties = defaults.overrideMessageProperties;
    	      this.signMessage = defaults.signMessage;
    	      this.signingAlgorithm = defaults.signingAlgorithm;
        }

        public Builder checkCertificateRevocationListOnReceive(Input<Boolean> checkCertificateRevocationListOnReceive) {
            this.checkCertificateRevocationListOnReceive = Objects.requireNonNull(checkCertificateRevocationListOnReceive);
            return this;
        }

        public Builder checkCertificateRevocationListOnReceive(Boolean checkCertificateRevocationListOnReceive) {
            this.checkCertificateRevocationListOnReceive = Input.of(Objects.requireNonNull(checkCertificateRevocationListOnReceive));
            return this;
        }

        public Builder checkCertificateRevocationListOnSend(Input<Boolean> checkCertificateRevocationListOnSend) {
            this.checkCertificateRevocationListOnSend = Objects.requireNonNull(checkCertificateRevocationListOnSend);
            return this;
        }

        public Builder checkCertificateRevocationListOnSend(Boolean checkCertificateRevocationListOnSend) {
            this.checkCertificateRevocationListOnSend = Input.of(Objects.requireNonNull(checkCertificateRevocationListOnSend));
            return this;
        }

        public Builder checkDuplicateMessage(Input<Boolean> checkDuplicateMessage) {
            this.checkDuplicateMessage = Objects.requireNonNull(checkDuplicateMessage);
            return this;
        }

        public Builder checkDuplicateMessage(Boolean checkDuplicateMessage) {
            this.checkDuplicateMessage = Input.of(Objects.requireNonNull(checkDuplicateMessage));
            return this;
        }

        public Builder compressMessage(Input<Boolean> compressMessage) {
            this.compressMessage = Objects.requireNonNull(compressMessage);
            return this;
        }

        public Builder compressMessage(Boolean compressMessage) {
            this.compressMessage = Input.of(Objects.requireNonNull(compressMessage));
            return this;
        }

        public Builder encryptMessage(Input<Boolean> encryptMessage) {
            this.encryptMessage = Objects.requireNonNull(encryptMessage);
            return this;
        }

        public Builder encryptMessage(Boolean encryptMessage) {
            this.encryptMessage = Input.of(Objects.requireNonNull(encryptMessage));
            return this;
        }

        public Builder encryptionAlgorithm(Input<Either<String,EncryptionAlgorithm>> encryptionAlgorithm) {
            this.encryptionAlgorithm = Objects.requireNonNull(encryptionAlgorithm);
            return this;
        }

        public Builder encryptionAlgorithm(Either<String,EncryptionAlgorithm> encryptionAlgorithm) {
            this.encryptionAlgorithm = Input.of(Objects.requireNonNull(encryptionAlgorithm));
            return this;
        }

        public Builder interchangeDuplicatesValidityDays(Input<Integer> interchangeDuplicatesValidityDays) {
            this.interchangeDuplicatesValidityDays = Objects.requireNonNull(interchangeDuplicatesValidityDays);
            return this;
        }

        public Builder interchangeDuplicatesValidityDays(Integer interchangeDuplicatesValidityDays) {
            this.interchangeDuplicatesValidityDays = Input.of(Objects.requireNonNull(interchangeDuplicatesValidityDays));
            return this;
        }

        public Builder overrideMessageProperties(Input<Boolean> overrideMessageProperties) {
            this.overrideMessageProperties = Objects.requireNonNull(overrideMessageProperties);
            return this;
        }

        public Builder overrideMessageProperties(Boolean overrideMessageProperties) {
            this.overrideMessageProperties = Input.of(Objects.requireNonNull(overrideMessageProperties));
            return this;
        }

        public Builder signMessage(Input<Boolean> signMessage) {
            this.signMessage = Objects.requireNonNull(signMessage);
            return this;
        }

        public Builder signMessage(Boolean signMessage) {
            this.signMessage = Input.of(Objects.requireNonNull(signMessage));
            return this;
        }

        public Builder signingAlgorithm(@Nullable Input<Either<String,SigningAlgorithm>> signingAlgorithm) {
            this.signingAlgorithm = signingAlgorithm;
            return this;
        }

        public Builder signingAlgorithm(@Nullable Either<String,SigningAlgorithm> signingAlgorithm) {
            this.signingAlgorithm = Input.ofNullable(signingAlgorithm);
            return this;
        }
        public AS2ValidationSettingsArgs build() {
            return new AS2ValidationSettingsArgs(checkCertificateRevocationListOnReceive, checkCertificateRevocationListOnSend, checkDuplicateMessage, compressMessage, encryptMessage, encryptionAlgorithm, interchangeDuplicatesValidityDays, overrideMessageProperties, signMessage, signingAlgorithm);
        }
    }
}
