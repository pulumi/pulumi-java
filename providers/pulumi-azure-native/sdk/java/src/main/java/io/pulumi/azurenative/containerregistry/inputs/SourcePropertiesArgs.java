// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry.inputs;

import io.pulumi.azurenative.containerregistry.enums.SourceControlType;
import io.pulumi.azurenative.containerregistry.inputs.AuthInfoArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The properties of the source code repository.
 * 
 */
public final class SourcePropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final SourcePropertiesArgs Empty = new SourcePropertiesArgs();

    /**
     * The branch name of the source code.
     * 
     */
    @InputImport(name="branch")
      private final @Nullable Output<String> branch;

    public Output<String> getBranch() {
        return this.branch == null ? Output.empty() : this.branch;
    }

    /**
     * The full URL to the source code repository
     * 
     */
    @InputImport(name="repositoryUrl", required=true)
      private final Output<String> repositoryUrl;

    public Output<String> getRepositoryUrl() {
        return this.repositoryUrl;
    }

    /**
     * The authorization properties for accessing the source code repository and to set up
     * webhooks for notifications.
     * 
     */
    @InputImport(name="sourceControlAuthProperties")
      private final @Nullable Output<AuthInfoArgs> sourceControlAuthProperties;

    public Output<AuthInfoArgs> getSourceControlAuthProperties() {
        return this.sourceControlAuthProperties == null ? Output.empty() : this.sourceControlAuthProperties;
    }

    /**
     * The type of source control service.
     * 
     */
    @InputImport(name="sourceControlType", required=true)
      private final Output<Either<String,SourceControlType>> sourceControlType;

    public Output<Either<String,SourceControlType>> getSourceControlType() {
        return this.sourceControlType;
    }

    public SourcePropertiesArgs(
        @Nullable Output<String> branch,
        Output<String> repositoryUrl,
        @Nullable Output<AuthInfoArgs> sourceControlAuthProperties,
        Output<Either<String,SourceControlType>> sourceControlType) {
        this.branch = branch;
        this.repositoryUrl = Objects.requireNonNull(repositoryUrl, "expected parameter 'repositoryUrl' to be non-null");
        this.sourceControlAuthProperties = sourceControlAuthProperties;
        this.sourceControlType = Objects.requireNonNull(sourceControlType, "expected parameter 'sourceControlType' to be non-null");
    }

    private SourcePropertiesArgs() {
        this.branch = Output.empty();
        this.repositoryUrl = Output.empty();
        this.sourceControlAuthProperties = Output.empty();
        this.sourceControlType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourcePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> branch;
        private Output<String> repositoryUrl;
        private @Nullable Output<AuthInfoArgs> sourceControlAuthProperties;
        private Output<Either<String,SourceControlType>> sourceControlType;

        public Builder() {
    	      // Empty
        }

        public Builder(SourcePropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.sourceControlAuthProperties = defaults.sourceControlAuthProperties;
    	      this.sourceControlType = defaults.sourceControlType;
        }

        public Builder branch(@Nullable Output<String> branch) {
            this.branch = branch;
            return this;
        }

        public Builder branch(@Nullable String branch) {
            this.branch = Output.ofNullable(branch);
            return this;
        }

        public Builder repositoryUrl(Output<String> repositoryUrl) {
            this.repositoryUrl = Objects.requireNonNull(repositoryUrl);
            return this;
        }

        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = Output.of(Objects.requireNonNull(repositoryUrl));
            return this;
        }

        public Builder sourceControlAuthProperties(@Nullable Output<AuthInfoArgs> sourceControlAuthProperties) {
            this.sourceControlAuthProperties = sourceControlAuthProperties;
            return this;
        }

        public Builder sourceControlAuthProperties(@Nullable AuthInfoArgs sourceControlAuthProperties) {
            this.sourceControlAuthProperties = Output.ofNullable(sourceControlAuthProperties);
            return this;
        }

        public Builder sourceControlType(Output<Either<String,SourceControlType>> sourceControlType) {
            this.sourceControlType = Objects.requireNonNull(sourceControlType);
            return this;
        }

        public Builder sourceControlType(Either<String,SourceControlType> sourceControlType) {
            this.sourceControlType = Output.of(Objects.requireNonNull(sourceControlType));
            return this;
        }
        public SourcePropertiesArgs build() {
            return new SourcePropertiesArgs(branch, repositoryUrl, sourceControlAuthProperties, sourceControlType);
        }
    }
}
