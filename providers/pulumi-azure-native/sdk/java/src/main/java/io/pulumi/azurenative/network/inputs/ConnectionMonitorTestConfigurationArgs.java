// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.ConnectionMonitorTestConfigurationProtocol;
import io.pulumi.azurenative.network.enums.PreferredIPVersion;
import io.pulumi.azurenative.network.inputs.ConnectionMonitorHttpConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ConnectionMonitorIcmpConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ConnectionMonitorSuccessThresholdArgs;
import io.pulumi.azurenative.network.inputs.ConnectionMonitorTcpConfigurationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes a connection monitor test configuration.
 * 
 */
public final class ConnectionMonitorTestConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectionMonitorTestConfigurationArgs Empty = new ConnectionMonitorTestConfigurationArgs();

    /**
     * The parameters used to perform test evaluation over HTTP.
     * 
     */
    @InputImport(name="httpConfiguration")
      private final @Nullable Input<ConnectionMonitorHttpConfigurationArgs> httpConfiguration;

    public Input<ConnectionMonitorHttpConfigurationArgs> getHttpConfiguration() {
        return this.httpConfiguration == null ? Input.empty() : this.httpConfiguration;
    }

    /**
     * The parameters used to perform test evaluation over ICMP.
     * 
     */
    @InputImport(name="icmpConfiguration")
      private final @Nullable Input<ConnectionMonitorIcmpConfigurationArgs> icmpConfiguration;

    public Input<ConnectionMonitorIcmpConfigurationArgs> getIcmpConfiguration() {
        return this.icmpConfiguration == null ? Input.empty() : this.icmpConfiguration;
    }

    /**
     * The name of the connection monitor test configuration.
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
     * 
     */
    @InputImport(name="preferredIPVersion")
      private final @Nullable Input<Either<String,PreferredIPVersion>> preferredIPVersion;

    public Input<Either<String,PreferredIPVersion>> getPreferredIPVersion() {
        return this.preferredIPVersion == null ? Input.empty() : this.preferredIPVersion;
    }

    /**
     * The protocol to use in test evaluation.
     * 
     */
    @InputImport(name="protocol", required=true)
      private final Input<Either<String,ConnectionMonitorTestConfigurationProtocol>> protocol;

    public Input<Either<String,ConnectionMonitorTestConfigurationProtocol>> getProtocol() {
        return this.protocol;
    }

    /**
     * The threshold for declaring a test successful.
     * 
     */
    @InputImport(name="successThreshold")
      private final @Nullable Input<ConnectionMonitorSuccessThresholdArgs> successThreshold;

    public Input<ConnectionMonitorSuccessThresholdArgs> getSuccessThreshold() {
        return this.successThreshold == null ? Input.empty() : this.successThreshold;
    }

    /**
     * The parameters used to perform test evaluation over TCP.
     * 
     */
    @InputImport(name="tcpConfiguration")
      private final @Nullable Input<ConnectionMonitorTcpConfigurationArgs> tcpConfiguration;

    public Input<ConnectionMonitorTcpConfigurationArgs> getTcpConfiguration() {
        return this.tcpConfiguration == null ? Input.empty() : this.tcpConfiguration;
    }

    /**
     * The frequency of test evaluation, in seconds.
     * 
     */
    @InputImport(name="testFrequencySec")
      private final @Nullable Input<Integer> testFrequencySec;

    public Input<Integer> getTestFrequencySec() {
        return this.testFrequencySec == null ? Input.empty() : this.testFrequencySec;
    }

    public ConnectionMonitorTestConfigurationArgs(
        @Nullable Input<ConnectionMonitorHttpConfigurationArgs> httpConfiguration,
        @Nullable Input<ConnectionMonitorIcmpConfigurationArgs> icmpConfiguration,
        Input<String> name,
        @Nullable Input<Either<String,PreferredIPVersion>> preferredIPVersion,
        Input<Either<String,ConnectionMonitorTestConfigurationProtocol>> protocol,
        @Nullable Input<ConnectionMonitorSuccessThresholdArgs> successThreshold,
        @Nullable Input<ConnectionMonitorTcpConfigurationArgs> tcpConfiguration,
        @Nullable Input<Integer> testFrequencySec) {
        this.httpConfiguration = httpConfiguration;
        this.icmpConfiguration = icmpConfiguration;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.preferredIPVersion = preferredIPVersion;
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
        this.successThreshold = successThreshold;
        this.tcpConfiguration = tcpConfiguration;
        this.testFrequencySec = testFrequencySec;
    }

    private ConnectionMonitorTestConfigurationArgs() {
        this.httpConfiguration = Input.empty();
        this.icmpConfiguration = Input.empty();
        this.name = Input.empty();
        this.preferredIPVersion = Input.empty();
        this.protocol = Input.empty();
        this.successThreshold = Input.empty();
        this.tcpConfiguration = Input.empty();
        this.testFrequencySec = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionMonitorTestConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ConnectionMonitorHttpConfigurationArgs> httpConfiguration;
        private @Nullable Input<ConnectionMonitorIcmpConfigurationArgs> icmpConfiguration;
        private Input<String> name;
        private @Nullable Input<Either<String,PreferredIPVersion>> preferredIPVersion;
        private Input<Either<String,ConnectionMonitorTestConfigurationProtocol>> protocol;
        private @Nullable Input<ConnectionMonitorSuccessThresholdArgs> successThreshold;
        private @Nullable Input<ConnectionMonitorTcpConfigurationArgs> tcpConfiguration;
        private @Nullable Input<Integer> testFrequencySec;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectionMonitorTestConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpConfiguration = defaults.httpConfiguration;
    	      this.icmpConfiguration = defaults.icmpConfiguration;
    	      this.name = defaults.name;
    	      this.preferredIPVersion = defaults.preferredIPVersion;
    	      this.protocol = defaults.protocol;
    	      this.successThreshold = defaults.successThreshold;
    	      this.tcpConfiguration = defaults.tcpConfiguration;
    	      this.testFrequencySec = defaults.testFrequencySec;
        }

        public Builder setHttpConfiguration(@Nullable Input<ConnectionMonitorHttpConfigurationArgs> httpConfiguration) {
            this.httpConfiguration = httpConfiguration;
            return this;
        }

        public Builder setHttpConfiguration(@Nullable ConnectionMonitorHttpConfigurationArgs httpConfiguration) {
            this.httpConfiguration = Input.ofNullable(httpConfiguration);
            return this;
        }

        public Builder setIcmpConfiguration(@Nullable Input<ConnectionMonitorIcmpConfigurationArgs> icmpConfiguration) {
            this.icmpConfiguration = icmpConfiguration;
            return this;
        }

        public Builder setIcmpConfiguration(@Nullable ConnectionMonitorIcmpConfigurationArgs icmpConfiguration) {
            this.icmpConfiguration = Input.ofNullable(icmpConfiguration);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setPreferredIPVersion(@Nullable Input<Either<String,PreferredIPVersion>> preferredIPVersion) {
            this.preferredIPVersion = preferredIPVersion;
            return this;
        }

        public Builder setPreferredIPVersion(@Nullable Either<String,PreferredIPVersion> preferredIPVersion) {
            this.preferredIPVersion = Input.ofNullable(preferredIPVersion);
            return this;
        }

        public Builder setProtocol(Input<Either<String,ConnectionMonitorTestConfigurationProtocol>> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder setProtocol(Either<String,ConnectionMonitorTestConfigurationProtocol> protocol) {
            this.protocol = Input.of(Objects.requireNonNull(protocol));
            return this;
        }

        public Builder setSuccessThreshold(@Nullable Input<ConnectionMonitorSuccessThresholdArgs> successThreshold) {
            this.successThreshold = successThreshold;
            return this;
        }

        public Builder setSuccessThreshold(@Nullable ConnectionMonitorSuccessThresholdArgs successThreshold) {
            this.successThreshold = Input.ofNullable(successThreshold);
            return this;
        }

        public Builder setTcpConfiguration(@Nullable Input<ConnectionMonitorTcpConfigurationArgs> tcpConfiguration) {
            this.tcpConfiguration = tcpConfiguration;
            return this;
        }

        public Builder setTcpConfiguration(@Nullable ConnectionMonitorTcpConfigurationArgs tcpConfiguration) {
            this.tcpConfiguration = Input.ofNullable(tcpConfiguration);
            return this;
        }

        public Builder setTestFrequencySec(@Nullable Input<Integer> testFrequencySec) {
            this.testFrequencySec = testFrequencySec;
            return this;
        }

        public Builder setTestFrequencySec(@Nullable Integer testFrequencySec) {
            this.testFrequencySec = Input.ofNullable(testFrequencySec);
            return this;
        }
        public ConnectionMonitorTestConfigurationArgs build() {
            return new ConnectionMonitorTestConfigurationArgs(httpConfiguration, icmpConfiguration, name, preferredIPVersion, protocol, successThreshold, tcpConfiguration, testFrequencySec);
        }
    }
}
