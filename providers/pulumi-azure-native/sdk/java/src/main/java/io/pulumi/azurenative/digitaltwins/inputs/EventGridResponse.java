// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.digitaltwins.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties related to EventGrid.
 * 
 */
public final class EventGridResponse extends io.pulumi.resources.InvokeArgs {

    public static final EventGridResponse Empty = new EventGridResponse();

    /**
     * EventGrid secondary accesskey. Will be obfuscated during read.
     * 
     */
    @InputImport(name="accessKey1", required=true)
        private final String accessKey1;

    public String getAccessKey1() {
        return this.accessKey1;
    }

    /**
     * EventGrid secondary accesskey. Will be obfuscated during read.
     * 
     */
    @InputImport(name="accessKey2")
        private final @Nullable String accessKey2;

    public Optional<String> getAccessKey2() {
        return this.accessKey2 == null ? Optional.empty() : Optional.ofNullable(this.accessKey2);
    }

    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     * 
     */
    @InputImport(name="authenticationType")
        private final @Nullable String authenticationType;

    public Optional<String> getAuthenticationType() {
        return this.authenticationType == null ? Optional.empty() : Optional.ofNullable(this.authenticationType);
    }

    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     * 
     */
    @InputImport(name="createdTime", required=true)
        private final String createdTime;

    public String getCreatedTime() {
        return this.createdTime;
    }

    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     * 
     */
    @InputImport(name="deadLetterSecret")
        private final @Nullable String deadLetterSecret;

    public Optional<String> getDeadLetterSecret() {
        return this.deadLetterSecret == null ? Optional.empty() : Optional.ofNullable(this.deadLetterSecret);
    }

    /**
     * Dead letter storage URL for identity-based authentication.
     * 
     */
    @InputImport(name="deadLetterUri")
        private final @Nullable String deadLetterUri;

    public Optional<String> getDeadLetterUri() {
        return this.deadLetterUri == null ? Optional.empty() : Optional.ofNullable(this.deadLetterUri);
    }

    /**
     * The type of Digital Twins endpoint
     * Expected value is 'EventGrid'.
     * 
     */
    @InputImport(name="endpointType", required=true)
        private final String endpointType;

    public String getEndpointType() {
        return this.endpointType;
    }

    /**
     * The provisioning state.
     * 
     */
    @InputImport(name="provisioningState", required=true)
        private final String provisioningState;

    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * EventGrid Topic Endpoint
     * 
     */
    @InputImport(name="topicEndpoint", required=true)
        private final String topicEndpoint;

    public String getTopicEndpoint() {
        return this.topicEndpoint;
    }

    public EventGridResponse(
        String accessKey1,
        @Nullable String accessKey2,
        @Nullable String authenticationType,
        String createdTime,
        @Nullable String deadLetterSecret,
        @Nullable String deadLetterUri,
        String endpointType,
        String provisioningState,
        String topicEndpoint) {
        this.accessKey1 = Objects.requireNonNull(accessKey1, "expected parameter 'accessKey1' to be non-null");
        this.accessKey2 = accessKey2;
        this.authenticationType = authenticationType;
        this.createdTime = Objects.requireNonNull(createdTime, "expected parameter 'createdTime' to be non-null");
        this.deadLetterSecret = deadLetterSecret;
        this.deadLetterUri = deadLetterUri;
        this.endpointType = Objects.requireNonNull(endpointType, "expected parameter 'endpointType' to be non-null");
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.topicEndpoint = Objects.requireNonNull(topicEndpoint, "expected parameter 'topicEndpoint' to be non-null");
    }

    private EventGridResponse() {
        this.accessKey1 = null;
        this.accessKey2 = null;
        this.authenticationType = null;
        this.createdTime = null;
        this.deadLetterSecret = null;
        this.deadLetterUri = null;
        this.endpointType = null;
        this.provisioningState = null;
        this.topicEndpoint = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventGridResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessKey1;
        private @Nullable String accessKey2;
        private @Nullable String authenticationType;
        private String createdTime;
        private @Nullable String deadLetterSecret;
        private @Nullable String deadLetterUri;
        private String endpointType;
        private String provisioningState;
        private String topicEndpoint;

        public Builder() {
    	      // Empty
        }

        public Builder(EventGridResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey1 = defaults.accessKey1;
    	      this.accessKey2 = defaults.accessKey2;
    	      this.authenticationType = defaults.authenticationType;
    	      this.createdTime = defaults.createdTime;
    	      this.deadLetterSecret = defaults.deadLetterSecret;
    	      this.deadLetterUri = defaults.deadLetterUri;
    	      this.endpointType = defaults.endpointType;
    	      this.provisioningState = defaults.provisioningState;
    	      this.topicEndpoint = defaults.topicEndpoint;
        }

        public Builder setAccessKey1(String accessKey1) {
            this.accessKey1 = Objects.requireNonNull(accessKey1);
            return this;
        }

        public Builder setAccessKey2(@Nullable String accessKey2) {
            this.accessKey2 = accessKey2;
            return this;
        }

        public Builder setAuthenticationType(@Nullable String authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }

        public Builder setCreatedTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }

        public Builder setDeadLetterSecret(@Nullable String deadLetterSecret) {
            this.deadLetterSecret = deadLetterSecret;
            return this;
        }

        public Builder setDeadLetterUri(@Nullable String deadLetterUri) {
            this.deadLetterUri = deadLetterUri;
            return this;
        }

        public Builder setEndpointType(String endpointType) {
            this.endpointType = Objects.requireNonNull(endpointType);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setTopicEndpoint(String topicEndpoint) {
            this.topicEndpoint = Objects.requireNonNull(topicEndpoint);
            return this;
        }
        public EventGridResponse build() {
            return new EventGridResponse(accessKey1, accessKey2, authenticationType, createdTime, deadLetterSecret, deadLetterUri, endpointType, provisioningState, topicEndpoint);
        }
    }
}
