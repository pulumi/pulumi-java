// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.outputs;

import io.pulumi.azurenative.datafactory.outputs.ActivityDependencyResponse;
import io.pulumi.azurenative.datafactory.outputs.ActivityPolicyResponse;
import io.pulumi.azurenative.datafactory.outputs.AmazonS3CompatibleReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.AmazonS3ReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.AzureBlobFSReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.AzureBlobStorageReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.AzureDataLakeStoreReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.AzureFileStorageReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.DatasetReferenceResponse;
import io.pulumi.azurenative.datafactory.outputs.FileServerReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.FtpReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.GoogleCloudStorageReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.HdfsReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.HttpReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.LinkedServiceReferenceResponse;
import io.pulumi.azurenative.datafactory.outputs.LogStorageSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.OracleCloudStorageReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.SftpReadSettingsResponse;
import io.pulumi.azurenative.datafactory.outputs.UserPropertyResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class DeleteActivityResponse {
    /**
     * Delete activity dataset reference.
     * 
     */
    private final DatasetReferenceResponse dataset;
    /**
     * Activity depends on condition.
     * 
     */
    private final @Nullable List<ActivityDependencyResponse> dependsOn;
    /**
     * Activity description.
     * 
     */
    private final @Nullable String description;
    /**
     * Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    private final @Nullable Object enableLogging;
    /**
     * Linked service reference.
     * 
     */
    private final @Nullable LinkedServiceReferenceResponse linkedServiceName;
    /**
     * Log storage settings customer need to provide when enableLogging is true.
     * 
     */
    private final @Nullable LogStorageSettingsResponse logStorageSettings;
    /**
     * The max concurrent connections to connect data source at the same time.
     * 
     */
    private final @Nullable Integer maxConcurrentConnections;
    /**
     * Activity name.
     * 
     */
    private final String name;
    /**
     * Activity policy.
     * 
     */
    private final @Nullable ActivityPolicyResponse policy;
    /**
     * If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    private final @Nullable Object recursive;
    /**
     * Delete activity store settings.
     * 
     */
    private final @Nullable Object storeSettings;
    /**
     * Type of activity.
     * Expected value is 'Delete'.
     * 
     */
    private final String type;
    /**
     * Activity user properties.
     * 
     */
    private final @Nullable List<UserPropertyResponse> userProperties;

    @OutputCustomType.Constructor({"dataset","dependsOn","description","enableLogging","linkedServiceName","logStorageSettings","maxConcurrentConnections","name","policy","recursive","storeSettings","type","userProperties"})
    private DeleteActivityResponse(
        DatasetReferenceResponse dataset,
        @Nullable List<ActivityDependencyResponse> dependsOn,
        @Nullable String description,
        @Nullable Object enableLogging,
        @Nullable LinkedServiceReferenceResponse linkedServiceName,
        @Nullable LogStorageSettingsResponse logStorageSettings,
        @Nullable Integer maxConcurrentConnections,
        String name,
        @Nullable ActivityPolicyResponse policy,
        @Nullable Object recursive,
        @Nullable Object storeSettings,
        String type,
        @Nullable List<UserPropertyResponse> userProperties) {
        this.dataset = Objects.requireNonNull(dataset);
        this.dependsOn = dependsOn;
        this.description = description;
        this.enableLogging = enableLogging;
        this.linkedServiceName = linkedServiceName;
        this.logStorageSettings = logStorageSettings;
        this.maxConcurrentConnections = maxConcurrentConnections;
        this.name = Objects.requireNonNull(name);
        this.policy = policy;
        this.recursive = recursive;
        this.storeSettings = storeSettings;
        this.type = Objects.requireNonNull(type);
        this.userProperties = userProperties;
    }

    /**
     * Delete activity dataset reference.
     * 
    */
    public DatasetReferenceResponse getDataset() {
        return this.dataset;
    }
    /**
     * Activity depends on condition.
     * 
    */
    public List<ActivityDependencyResponse> getDependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }
    /**
     * Activity description.
     * 
    */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
    */
    public Optional<Object> getEnableLogging() {
        return Optional.ofNullable(this.enableLogging);
    }
    /**
     * Linked service reference.
     * 
    */
    public Optional<LinkedServiceReferenceResponse> getLinkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }
    /**
     * Log storage settings customer need to provide when enableLogging is true.
     * 
    */
    public Optional<LogStorageSettingsResponse> getLogStorageSettings() {
        return Optional.ofNullable(this.logStorageSettings);
    }
    /**
     * The max concurrent connections to connect data source at the same time.
     * 
    */
    public Optional<Integer> getMaxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }
    /**
     * Activity name.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Activity policy.
     * 
    */
    public Optional<ActivityPolicyResponse> getPolicy() {
        return Optional.ofNullable(this.policy);
    }
    /**
     * If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
    */
    public Optional<Object> getRecursive() {
        return Optional.ofNullable(this.recursive);
    }
    /**
     * Delete activity store settings.
     * 
    */
    public Optional<Object> getStoreSettings() {
        return Optional.ofNullable(this.storeSettings);
    }
    /**
     * Type of activity.
     * Expected value is 'Delete'.
     * 
    */
    public String getType() {
        return this.type;
    }
    /**
     * Activity user properties.
     * 
    */
    public List<UserPropertyResponse> getUserProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeleteActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetReferenceResponse dataset;
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private @Nullable Object enableLogging;
        private @Nullable LinkedServiceReferenceResponse linkedServiceName;
        private @Nullable LogStorageSettingsResponse logStorageSettings;
        private @Nullable Integer maxConcurrentConnections;
        private String name;
        private @Nullable ActivityPolicyResponse policy;
        private @Nullable Object recursive;
        private @Nullable Object storeSettings;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(DeleteActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.enableLogging = defaults.enableLogging;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.logStorageSettings = defaults.logStorageSettings;
    	      this.maxConcurrentConnections = defaults.maxConcurrentConnections;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.recursive = defaults.recursive;
    	      this.storeSettings = defaults.storeSettings;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder setDataset(DatasetReferenceResponse dataset) {
            this.dataset = Objects.requireNonNull(dataset);
            return this;
        }

        public Builder setDependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setEnableLogging(@Nullable Object enableLogging) {
            this.enableLogging = enableLogging;
            return this;
        }

        public Builder setLinkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder setLogStorageSettings(@Nullable LogStorageSettingsResponse logStorageSettings) {
            this.logStorageSettings = logStorageSettings;
            return this;
        }

        public Builder setMaxConcurrentConnections(@Nullable Integer maxConcurrentConnections) {
            this.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPolicy(@Nullable ActivityPolicyResponse policy) {
            this.policy = policy;
            return this;
        }

        public Builder setRecursive(@Nullable Object recursive) {
            this.recursive = recursive;
            return this;
        }

        public Builder setStoreSettings(@Nullable Object storeSettings) {
            this.storeSettings = storeSettings;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUserProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public DeleteActivityResponse build() {
            return new DeleteActivityResponse(dataset, dependsOn, description, enableLogging, linkedServiceName, logStorageSettings, maxConcurrentConnections, name, policy, recursive, storeSettings, type, userProperties);
        }
    }
}
