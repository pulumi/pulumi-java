// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.peering;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.peering.PeeringArgs;
import io.pulumi.azurenative.peering.outputs.PeeringPropertiesDirectResponse;
import io.pulumi.azurenative.peering.outputs.PeeringPropertiesExchangeResponse;
import io.pulumi.azurenative.peering.outputs.PeeringSkuResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
API Version: 2021-01-01.

{{% examples %}}
## Example Usage
{{% example %}}
### Create a direct peering
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var peering = new AzureNative.Peering.Peering("peering", new AzureNative.Peering.PeeringArgs
        {
            Direct = new AzureNative.Peering.Inputs.PeeringPropertiesDirectArgs
            {
                Connections = 
                {
                    new AzureNative.Peering.Inputs.DirectConnectionArgs
                    {
                        BandwidthInMbps = 10000,
                        BgpSession = new AzureNative.Peering.Inputs.BgpSessionArgs
                        {
                            MaxPrefixesAdvertisedV4 = 1000,
                            MaxPrefixesAdvertisedV6 = 100,
                            Md5AuthenticationKey = "test-md5-auth-key",
                            SessionPrefixV4 = "192.168.0.0/31",
                            SessionPrefixV6 = "fd00::0/127",
                        },
                        ConnectionIdentifier = "5F4CB5C7-6B43-4444-9338-9ABC72606C16",
                        PeeringDBFacilityId = 99999,
                        SessionAddressProvider = "Peer",
                        UseForPeeringService = false,
                    },
                    new AzureNative.Peering.Inputs.DirectConnectionArgs
                    {
                        BandwidthInMbps = 10000,
                        ConnectionIdentifier = "8AB00818-D533-4504-A25A-03A17F61201C",
                        PeeringDBFacilityId = 99999,
                        SessionAddressProvider = "Microsoft",
                        UseForPeeringService = true,
                    },
                },
                DirectPeeringType = "Edge",
                PeerAsn = new AzureNative.Peering.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1",
                },
            },
            Kind = "Direct",
            Location = "eastus",
            PeeringLocation = "peeringLocation0",
            PeeringName = "peeringName",
            ResourceGroupName = "rgName",
            Sku = new AzureNative.Peering.Inputs.PeeringSkuArgs
            {
                Name = "Basic_Direct_Free",
            },
        });
    }

}

```

```go
package main

import (
	peering "github.com/pulumi/pulumi-azure-native/sdk/go/azure/peering"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := peering.NewPeering(ctx, "peering", &peering.PeeringArgs{
			Direct: &peering.PeeringPropertiesDirectArgs{
				Connections: peering.DirectConnectionArray{
					&peering.DirectConnectionArgs{
						BandwidthInMbps: pulumi.Int(10000),
						BgpSession: &peering.BgpSessionArgs{
							MaxPrefixesAdvertisedV4: pulumi.Int(1000),
							MaxPrefixesAdvertisedV6: pulumi.Int(100),
							Md5AuthenticationKey:    pulumi.String("test-md5-auth-key"),
							SessionPrefixV4:         pulumi.String("192.168.0.0/31"),
							SessionPrefixV6:         pulumi.String("fd00::0/127"),
						},
						ConnectionIdentifier:   pulumi.String("5F4CB5C7-6B43-4444-9338-9ABC72606C16"),
						PeeringDBFacilityId:    pulumi.Int(99999),
						SessionAddressProvider: pulumi.String("Peer"),
						UseForPeeringService:   pulumi.Bool(false),
					},
					&peering.DirectConnectionArgs{
						BandwidthInMbps:        pulumi.Int(10000),
						ConnectionIdentifier:   pulumi.String("8AB00818-D533-4504-A25A-03A17F61201C"),
						PeeringDBFacilityId:    pulumi.Int(99999),
						SessionAddressProvider: pulumi.String("Microsoft"),
						UseForPeeringService:   pulumi.Bool(true),
					},
				},
				DirectPeeringType: pulumi.String("Edge"),
				PeerAsn: &peering.SubResourceArgs{
					Id: pulumi.String("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
				},
			},
			Kind:              pulumi.String("Direct"),
			Location:          pulumi.String("eastus"),
			PeeringLocation:   pulumi.String("peeringLocation0"),
			PeeringName:       pulumi.String("peeringName"),
			ResourceGroupName: pulumi.String("rgName"),
			Sku: &peering.PeeringSkuArgs{
				Name: pulumi.String("Basic_Direct_Free"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const peering = new azure_native.peering.Peering("peering", {
    direct: {
        connections: [
            {
                bandwidthInMbps: 10000,
                bgpSession: {
                    maxPrefixesAdvertisedV4: 1000,
                    maxPrefixesAdvertisedV6: 100,
                    md5AuthenticationKey: "test-md5-auth-key",
                    sessionPrefixV4: "192.168.0.0/31",
                    sessionPrefixV6: "fd00::0/127",
                },
                connectionIdentifier: "5F4CB5C7-6B43-4444-9338-9ABC72606C16",
                peeringDBFacilityId: 99999,
                sessionAddressProvider: "Peer",
                useForPeeringService: false,
            },
            {
                bandwidthInMbps: 10000,
                connectionIdentifier: "8AB00818-D533-4504-A25A-03A17F61201C",
                peeringDBFacilityId: 99999,
                sessionAddressProvider: "Microsoft",
                useForPeeringService: true,
            },
        ],
        directPeeringType: "Edge",
        peerAsn: {
            id: "/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1",
        },
    },
    kind: "Direct",
    location: "eastus",
    peeringLocation: "peeringLocation0",
    peeringName: "peeringName",
    resourceGroupName: "rgName",
    sku: {
        name: "Basic_Direct_Free",
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

peering = azure_native.peering.Peering("peering",
    direct=azure_native.peering.PeeringPropertiesDirectArgs(
        connections=[
            azure_native.peering.DirectConnectionArgs(
                bandwidth_in_mbps=10000,
                bgp_session=azure_native.peering.BgpSessionArgs(
                    max_prefixes_advertised_v4=1000,
                    max_prefixes_advertised_v6=100,
                    md5_authentication_key="test-md5-auth-key",
                    session_prefix_v4="192.168.0.0/31",
                    session_prefix_v6="fd00::0/127",
                ),
                connection_identifier="5F4CB5C7-6B43-4444-9338-9ABC72606C16",
                peering_db_facility_id=99999,
                session_address_provider="Peer",
                use_for_peering_service=False,
            ),
            azure_native.peering.DirectConnectionArgs(
                bandwidth_in_mbps=10000,
                connection_identifier="8AB00818-D533-4504-A25A-03A17F61201C",
                peering_db_facility_id=99999,
                session_address_provider="Microsoft",
                use_for_peering_service=True,
            ),
        ],
        direct_peering_type="Edge",
        peer_asn=azure_native.peering.SubResourceArgs(
            id="/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1",
        ),
    ),
    kind="Direct",
    location="eastus",
    peering_location="peeringLocation0",
    peering_name="peeringName",
    resource_group_name="rgName",
    sku=azure_native.peering.PeeringSkuArgs(
        name="Basic_Direct_Free",
    ))

```

{{% /example %}}
{{% example %}}
### Create a peering with exchange route server
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var peering = new AzureNative.Peering.Peering("peering", new AzureNative.Peering.PeeringArgs
        {
            Direct = new AzureNative.Peering.Inputs.PeeringPropertiesDirectArgs
            {
                Connections = 
                {
                    new AzureNative.Peering.Inputs.DirectConnectionArgs
                    {
                        BandwidthInMbps = 10000,
                        BgpSession = new AzureNative.Peering.Inputs.BgpSessionArgs
                        {
                            MaxPrefixesAdvertisedV4 = 1000,
                            MaxPrefixesAdvertisedV6 = 100,
                            MicrosoftSessionIPv4Address = "192.168.0.123",
                            PeerSessionIPv4Address = "192.168.0.234",
                            SessionPrefixV4 = "192.168.0.0/24",
                        },
                        ConnectionIdentifier = "5F4CB5C7-6B43-4444-9338-9ABC72606C16",
                        PeeringDBFacilityId = 99999,
                        SessionAddressProvider = "Peer",
                        UseForPeeringService = true,
                    },
                },
                DirectPeeringType = "IxRs",
                PeerAsn = new AzureNative.Peering.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1",
                },
            },
            Kind = "Direct",
            Location = "eastus",
            PeeringLocation = "peeringLocation0",
            PeeringName = "peeringName",
            ResourceGroupName = "rgName",
            Sku = new AzureNative.Peering.Inputs.PeeringSkuArgs
            {
                Name = "Premium_Direct_Free",
            },
        });
    }

}

```

```go
package main

import (
	peering "github.com/pulumi/pulumi-azure-native/sdk/go/azure/peering"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := peering.NewPeering(ctx, "peering", &peering.PeeringArgs{
			Direct: &peering.PeeringPropertiesDirectArgs{
				Connections: peering.DirectConnectionArray{
					&peering.DirectConnectionArgs{
						BandwidthInMbps: pulumi.Int(10000),
						BgpSession: &peering.BgpSessionArgs{
							MaxPrefixesAdvertisedV4:     pulumi.Int(1000),
							MaxPrefixesAdvertisedV6:     pulumi.Int(100),
							MicrosoftSessionIPv4Address: pulumi.String("192.168.0.123"),
							PeerSessionIPv4Address:      pulumi.String("192.168.0.234"),
							SessionPrefixV4:             pulumi.String("192.168.0.0/24"),
						},
						ConnectionIdentifier:   pulumi.String("5F4CB5C7-6B43-4444-9338-9ABC72606C16"),
						PeeringDBFacilityId:    pulumi.Int(99999),
						SessionAddressProvider: pulumi.String("Peer"),
						UseForPeeringService:   pulumi.Bool(true),
					},
				},
				DirectPeeringType: pulumi.String("IxRs"),
				PeerAsn: &peering.SubResourceArgs{
					Id: pulumi.String("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
				},
			},
			Kind:              pulumi.String("Direct"),
			Location:          pulumi.String("eastus"),
			PeeringLocation:   pulumi.String("peeringLocation0"),
			PeeringName:       pulumi.String("peeringName"),
			ResourceGroupName: pulumi.String("rgName"),
			Sku: &peering.PeeringSkuArgs{
				Name: pulumi.String("Premium_Direct_Free"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const peering = new azure_native.peering.Peering("peering", {
    direct: {
        connections: [{
            bandwidthInMbps: 10000,
            bgpSession: {
                maxPrefixesAdvertisedV4: 1000,
                maxPrefixesAdvertisedV6: 100,
                microsoftSessionIPv4Address: "192.168.0.123",
                peerSessionIPv4Address: "192.168.0.234",
                sessionPrefixV4: "192.168.0.0/24",
            },
            connectionIdentifier: "5F4CB5C7-6B43-4444-9338-9ABC72606C16",
            peeringDBFacilityId: 99999,
            sessionAddressProvider: "Peer",
            useForPeeringService: true,
        }],
        directPeeringType: "IxRs",
        peerAsn: {
            id: "/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1",
        },
    },
    kind: "Direct",
    location: "eastus",
    peeringLocation: "peeringLocation0",
    peeringName: "peeringName",
    resourceGroupName: "rgName",
    sku: {
        name: "Premium_Direct_Free",
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

peering = azure_native.peering.Peering("peering",
    direct=azure_native.peering.PeeringPropertiesDirectArgs(
        connections=[azure_native.peering.DirectConnectionArgs(
            bandwidth_in_mbps=10000,
            bgp_session=azure_native.peering.BgpSessionArgs(
                max_prefixes_advertised_v4=1000,
                max_prefixes_advertised_v6=100,
                microsoft_session_i_pv4_address="192.168.0.123",
                peer_session_i_pv4_address="192.168.0.234",
                session_prefix_v4="192.168.0.0/24",
            ),
            connection_identifier="5F4CB5C7-6B43-4444-9338-9ABC72606C16",
            peering_db_facility_id=99999,
            session_address_provider="Peer",
            use_for_peering_service=True,
        )],
        direct_peering_type="IxRs",
        peer_asn=azure_native.peering.SubResourceArgs(
            id="/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1",
        ),
    ),
    kind="Direct",
    location="eastus",
    peering_location="peeringLocation0",
    peering_name="peeringName",
    resource_group_name="rgName",
    sku=azure_native.peering.PeeringSkuArgs(
        name="Premium_Direct_Free",
    ))

```

{{% /example %}}
{{% example %}}
### Create an exchange peering
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var peering = new AzureNative.Peering.Peering("peering", new AzureNative.Peering.PeeringArgs
        {
            Exchange = new AzureNative.Peering.Inputs.PeeringPropertiesExchangeArgs
            {
                Connections = 
                {
                    new AzureNative.Peering.Inputs.ExchangeConnectionArgs
                    {
                        BgpSession = new AzureNative.Peering.Inputs.BgpSessionArgs
                        {
                            MaxPrefixesAdvertisedV4 = 1000,
                            MaxPrefixesAdvertisedV6 = 100,
                            Md5AuthenticationKey = "test-md5-auth-key",
                            PeerSessionIPv4Address = "192.168.2.1",
                            PeerSessionIPv6Address = "fd00::1",
                        },
                        ConnectionIdentifier = "CE495334-0E94-4E51-8164-8116D6CD284D",
                        PeeringDBFacilityId = 99999,
                    },
                    new AzureNative.Peering.Inputs.ExchangeConnectionArgs
                    {
                        BgpSession = new AzureNative.Peering.Inputs.BgpSessionArgs
                        {
                            MaxPrefixesAdvertisedV4 = 1000,
                            MaxPrefixesAdvertisedV6 = 100,
                            Md5AuthenticationKey = "test-md5-auth-key",
                            PeerSessionIPv4Address = "192.168.2.2",
                            PeerSessionIPv6Address = "fd00::2",
                        },
                        ConnectionIdentifier = "CDD8E673-CB07-47E6-84DE-3739F778762B",
                        PeeringDBFacilityId = 99999,
                    },
                },
                PeerAsn = new AzureNative.Peering.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1",
                },
            },
            Kind = "Exchange",
            Location = "eastus",
            PeeringLocation = "peeringLocation0",
            PeeringName = "peeringName",
            ResourceGroupName = "rgName",
            Sku = new AzureNative.Peering.Inputs.PeeringSkuArgs
            {
                Name = "Basic_Exchange_Free",
            },
        });
    }

}

```

```go
package main

import (
	peering "github.com/pulumi/pulumi-azure-native/sdk/go/azure/peering"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := peering.NewPeering(ctx, "peering", &peering.PeeringArgs{
			Exchange: &peering.PeeringPropertiesExchangeArgs{
				Connections: peering.ExchangeConnectionArray{
					&peering.ExchangeConnectionArgs{
						BgpSession: &peering.BgpSessionArgs{
							MaxPrefixesAdvertisedV4: pulumi.Int(1000),
							MaxPrefixesAdvertisedV6: pulumi.Int(100),
							Md5AuthenticationKey:    pulumi.String("test-md5-auth-key"),
							PeerSessionIPv4Address:  pulumi.String("192.168.2.1"),
							PeerSessionIPv6Address:  pulumi.String("fd00::1"),
						},
						ConnectionIdentifier: pulumi.String("CE495334-0E94-4E51-8164-8116D6CD284D"),
						PeeringDBFacilityId:  pulumi.Int(99999),
					},
					&peering.ExchangeConnectionArgs{
						BgpSession: &peering.BgpSessionArgs{
							MaxPrefixesAdvertisedV4: pulumi.Int(1000),
							MaxPrefixesAdvertisedV6: pulumi.Int(100),
							Md5AuthenticationKey:    pulumi.String("test-md5-auth-key"),
							PeerSessionIPv4Address:  pulumi.String("192.168.2.2"),
							PeerSessionIPv6Address:  pulumi.String("fd00::2"),
						},
						ConnectionIdentifier: pulumi.String("CDD8E673-CB07-47E6-84DE-3739F778762B"),
						PeeringDBFacilityId:  pulumi.Int(99999),
					},
				},
				PeerAsn: &peering.SubResourceArgs{
					Id: pulumi.String("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
				},
			},
			Kind:              pulumi.String("Exchange"),
			Location:          pulumi.String("eastus"),
			PeeringLocation:   pulumi.String("peeringLocation0"),
			PeeringName:       pulumi.String("peeringName"),
			ResourceGroupName: pulumi.String("rgName"),
			Sku: &peering.PeeringSkuArgs{
				Name: pulumi.String("Basic_Exchange_Free"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const peering = new azure_native.peering.Peering("peering", {
    exchange: {
        connections: [
            {
                bgpSession: {
                    maxPrefixesAdvertisedV4: 1000,
                    maxPrefixesAdvertisedV6: 100,
                    md5AuthenticationKey: "test-md5-auth-key",
                    peerSessionIPv4Address: "192.168.2.1",
                    peerSessionIPv6Address: "fd00::1",
                },
                connectionIdentifier: "CE495334-0E94-4E51-8164-8116D6CD284D",
                peeringDBFacilityId: 99999,
            },
            {
                bgpSession: {
                    maxPrefixesAdvertisedV4: 1000,
                    maxPrefixesAdvertisedV6: 100,
                    md5AuthenticationKey: "test-md5-auth-key",
                    peerSessionIPv4Address: "192.168.2.2",
                    peerSessionIPv6Address: "fd00::2",
                },
                connectionIdentifier: "CDD8E673-CB07-47E6-84DE-3739F778762B",
                peeringDBFacilityId: 99999,
            },
        ],
        peerAsn: {
            id: "/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1",
        },
    },
    kind: "Exchange",
    location: "eastus",
    peeringLocation: "peeringLocation0",
    peeringName: "peeringName",
    resourceGroupName: "rgName",
    sku: {
        name: "Basic_Exchange_Free",
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

peering = azure_native.peering.Peering("peering",
    exchange=azure_native.peering.PeeringPropertiesExchangeArgs(
        connections=[
            azure_native.peering.ExchangeConnectionArgs(
                bgp_session=azure_native.peering.BgpSessionArgs(
                    max_prefixes_advertised_v4=1000,
                    max_prefixes_advertised_v6=100,
                    md5_authentication_key="test-md5-auth-key",
                    peer_session_i_pv4_address="192.168.2.1",
                    peer_session_i_pv6_address="fd00::1",
                ),
                connection_identifier="CE495334-0E94-4E51-8164-8116D6CD284D",
                peering_db_facility_id=99999,
            ),
            azure_native.peering.ExchangeConnectionArgs(
                bgp_session=azure_native.peering.BgpSessionArgs(
                    max_prefixes_advertised_v4=1000,
                    max_prefixes_advertised_v6=100,
                    md5_authentication_key="test-md5-auth-key",
                    peer_session_i_pv4_address="192.168.2.2",
                    peer_session_i_pv6_address="fd00::2",
                ),
                connection_identifier="CDD8E673-CB07-47E6-84DE-3739F778762B",
                peering_db_facility_id=99999,
            ),
        ],
        peer_asn=azure_native.peering.SubResourceArgs(
            id="/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1",
        ),
    ),
    kind="Exchange",
    location="eastus",
    peering_location="peeringLocation0",
    peering_name="peeringName",
    resource_group_name="rgName",
    sku=azure_native.peering.PeeringSkuArgs(
        name="Basic_Exchange_Free",
    ))

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:peering:Peering peeringName /subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName 
```

 */
@ResourceType(type="azure-native:peering:Peering")
public class Peering extends io.pulumi.resources.CustomResource {
    /**
     * The properties that define a direct peering.
     */
    @OutputExport(name="direct", type=PeeringPropertiesDirectResponse.class, parameters={})
    private Output</* @Nullable */ PeeringPropertiesDirectResponse> direct;

    /**
     * @return The properties that define a direct peering.
     */
    public Output</* @Nullable */ PeeringPropertiesDirectResponse> getDirect() {
        return this.direct;
    }
    /**
     * The properties that define an exchange peering.
     */
    @OutputExport(name="exchange", type=PeeringPropertiesExchangeResponse.class, parameters={})
    private Output</* @Nullable */ PeeringPropertiesExchangeResponse> exchange;

    /**
     * @return The properties that define an exchange peering.
     */
    public Output</* @Nullable */ PeeringPropertiesExchangeResponse> getExchange() {
        return this.exchange;
    }
    /**
     * The kind of the peering.
     */
    @OutputExport(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return The kind of the peering.
     */
    public Output<String> getKind() {
        return this.kind;
    }
    /**
     * The location of the resource.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The location of the resource.
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * The name of the resource.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The location of the peering.
     */
    @OutputExport(name="peeringLocation", type=String.class, parameters={})
    private Output</* @Nullable */ String> peeringLocation;

    /**
     * @return The location of the peering.
     */
    public Output</* @Nullable */ String> getPeeringLocation() {
        return this.peeringLocation;
    }
    /**
     * The provisioning state of the resource.
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning state of the resource.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The SKU that defines the tier and kind of the peering.
     */
    @OutputExport(name="sku", type=PeeringSkuResponse.class, parameters={})
    private Output<PeeringSkuResponse> sku;

    /**
     * @return The SKU that defines the tier and kind of the peering.
     */
    public Output<PeeringSkuResponse> getSku() {
        return this.sku;
    }
    /**
     * The resource tags.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return The resource tags.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * The type of the resource.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Peering(String name, PeeringArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:peering:Peering", name, args == null ? PeeringArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Peering(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:peering:Peering", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:peering/v20190801preview:Peering").build()),
                Input.of(Alias.builder().setType("azure-native:peering/v20190901preview:Peering").build()),
                Input.of(Alias.builder().setType("azure-native:peering/v20200101preview:Peering").build()),
                Input.of(Alias.builder().setType("azure-native:peering/v20200401:Peering").build()),
                Input.of(Alias.builder().setType("azure-native:peering/v20201001:Peering").build()),
                Input.of(Alias.builder().setType("azure-native:peering/v20210101:Peering").build()),
                Input.of(Alias.builder().setType("azure-native:peering/v20210601:Peering").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Peering get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Peering(name, id, options);
    }
}
