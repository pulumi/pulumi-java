// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights.inputs;

import io.pulumi.azurenative.customerinsights.inputs.RelationshipTypeFieldMappingArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.util.List;
import java.util.Objects;


/**
 * Maps fields in Profile to their corresponding StrongIds in Related Profile.
 * 
 */
public final class RelationshipTypeMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final RelationshipTypeMappingArgs Empty = new RelationshipTypeMappingArgs();

    /**
     * Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
     * 
     */
    @InputImport(name="fieldMappings", required=true)
      private final Output<List<RelationshipTypeFieldMappingArgs>> fieldMappings;

    public Output<List<RelationshipTypeFieldMappingArgs>> getFieldMappings() {
        return this.fieldMappings;
    }

    public RelationshipTypeMappingArgs(Output<List<RelationshipTypeFieldMappingArgs>> fieldMappings) {
        this.fieldMappings = Objects.requireNonNull(fieldMappings, "expected parameter 'fieldMappings' to be non-null");
    }

    private RelationshipTypeMappingArgs() {
        this.fieldMappings = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RelationshipTypeMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<RelationshipTypeFieldMappingArgs>> fieldMappings;

        public Builder() {
    	      // Empty
        }

        public Builder(RelationshipTypeMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fieldMappings = defaults.fieldMappings;
        }

        public Builder fieldMappings(Output<List<RelationshipTypeFieldMappingArgs>> fieldMappings) {
            this.fieldMappings = Objects.requireNonNull(fieldMappings);
            return this;
        }

        public Builder fieldMappings(List<RelationshipTypeFieldMappingArgs> fieldMappings) {
            this.fieldMappings = Output.of(Objects.requireNonNull(fieldMappings));
            return this;
        }
        public RelationshipTypeMappingArgs build() {
            return new RelationshipTypeMappingArgs(fieldMappings);
        }
    }
}
