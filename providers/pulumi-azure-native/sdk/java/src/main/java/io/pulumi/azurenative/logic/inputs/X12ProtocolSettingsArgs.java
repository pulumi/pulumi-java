// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.azurenative.logic.inputs.X12AcknowledgementSettingsArgs;
import io.pulumi.azurenative.logic.inputs.X12DelimiterOverridesArgs;
import io.pulumi.azurenative.logic.inputs.X12EnvelopeOverrideArgs;
import io.pulumi.azurenative.logic.inputs.X12EnvelopeSettingsArgs;
import io.pulumi.azurenative.logic.inputs.X12FramingSettingsArgs;
import io.pulumi.azurenative.logic.inputs.X12MessageFilterArgs;
import io.pulumi.azurenative.logic.inputs.X12MessageIdentifierArgs;
import io.pulumi.azurenative.logic.inputs.X12ProcessingSettingsArgs;
import io.pulumi.azurenative.logic.inputs.X12SchemaReferenceArgs;
import io.pulumi.azurenative.logic.inputs.X12SecuritySettingsArgs;
import io.pulumi.azurenative.logic.inputs.X12ValidationOverrideArgs;
import io.pulumi.azurenative.logic.inputs.X12ValidationSettingsArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class X12ProtocolSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final X12ProtocolSettingsArgs Empty = new X12ProtocolSettingsArgs();

    @InputImport(name="acknowledgementSettings", required=true)
    private final Input<X12AcknowledgementSettingsArgs> acknowledgementSettings;

    public Input<X12AcknowledgementSettingsArgs> getAcknowledgementSettings() {
        return this.acknowledgementSettings;
    }

    @InputImport(name="envelopeOverrides")
    private final @Nullable Input<List<X12EnvelopeOverrideArgs>> envelopeOverrides;

    public Input<List<X12EnvelopeOverrideArgs>> getEnvelopeOverrides() {
        return this.envelopeOverrides == null ? Input.empty() : this.envelopeOverrides;
    }

    @InputImport(name="envelopeSettings", required=true)
    private final Input<X12EnvelopeSettingsArgs> envelopeSettings;

    public Input<X12EnvelopeSettingsArgs> getEnvelopeSettings() {
        return this.envelopeSettings;
    }

    @InputImport(name="framingSettings", required=true)
    private final Input<X12FramingSettingsArgs> framingSettings;

    public Input<X12FramingSettingsArgs> getFramingSettings() {
        return this.framingSettings;
    }

    @InputImport(name="messageFilter", required=true)
    private final Input<X12MessageFilterArgs> messageFilter;

    public Input<X12MessageFilterArgs> getMessageFilter() {
        return this.messageFilter;
    }

    @InputImport(name="messageFilterList")
    private final @Nullable Input<List<X12MessageIdentifierArgs>> messageFilterList;

    public Input<List<X12MessageIdentifierArgs>> getMessageFilterList() {
        return this.messageFilterList == null ? Input.empty() : this.messageFilterList;
    }

    @InputImport(name="processingSettings", required=true)
    private final Input<X12ProcessingSettingsArgs> processingSettings;

    public Input<X12ProcessingSettingsArgs> getProcessingSettings() {
        return this.processingSettings;
    }

    @InputImport(name="schemaReferences", required=true)
    private final Input<List<X12SchemaReferenceArgs>> schemaReferences;

    public Input<List<X12SchemaReferenceArgs>> getSchemaReferences() {
        return this.schemaReferences;
    }

    @InputImport(name="securitySettings", required=true)
    private final Input<X12SecuritySettingsArgs> securitySettings;

    public Input<X12SecuritySettingsArgs> getSecuritySettings() {
        return this.securitySettings;
    }

    @InputImport(name="validationOverrides")
    private final @Nullable Input<List<X12ValidationOverrideArgs>> validationOverrides;

    public Input<List<X12ValidationOverrideArgs>> getValidationOverrides() {
        return this.validationOverrides == null ? Input.empty() : this.validationOverrides;
    }

    @InputImport(name="validationSettings", required=true)
    private final Input<X12ValidationSettingsArgs> validationSettings;

    public Input<X12ValidationSettingsArgs> getValidationSettings() {
        return this.validationSettings;
    }

    @InputImport(name="x12DelimiterOverrides")
    private final @Nullable Input<List<X12DelimiterOverridesArgs>> x12DelimiterOverrides;

    public Input<List<X12DelimiterOverridesArgs>> getX12DelimiterOverrides() {
        return this.x12DelimiterOverrides == null ? Input.empty() : this.x12DelimiterOverrides;
    }

    public X12ProtocolSettingsArgs(
        Input<X12AcknowledgementSettingsArgs> acknowledgementSettings,
        @Nullable Input<List<X12EnvelopeOverrideArgs>> envelopeOverrides,
        Input<X12EnvelopeSettingsArgs> envelopeSettings,
        Input<X12FramingSettingsArgs> framingSettings,
        Input<X12MessageFilterArgs> messageFilter,
        @Nullable Input<List<X12MessageIdentifierArgs>> messageFilterList,
        Input<X12ProcessingSettingsArgs> processingSettings,
        Input<List<X12SchemaReferenceArgs>> schemaReferences,
        Input<X12SecuritySettingsArgs> securitySettings,
        @Nullable Input<List<X12ValidationOverrideArgs>> validationOverrides,
        Input<X12ValidationSettingsArgs> validationSettings,
        @Nullable Input<List<X12DelimiterOverridesArgs>> x12DelimiterOverrides) {
        this.acknowledgementSettings = Objects.requireNonNull(acknowledgementSettings, "expected parameter 'acknowledgementSettings' to be non-null");
        this.envelopeOverrides = envelopeOverrides;
        this.envelopeSettings = Objects.requireNonNull(envelopeSettings, "expected parameter 'envelopeSettings' to be non-null");
        this.framingSettings = Objects.requireNonNull(framingSettings, "expected parameter 'framingSettings' to be non-null");
        this.messageFilter = Objects.requireNonNull(messageFilter, "expected parameter 'messageFilter' to be non-null");
        this.messageFilterList = messageFilterList;
        this.processingSettings = Objects.requireNonNull(processingSettings, "expected parameter 'processingSettings' to be non-null");
        this.schemaReferences = Objects.requireNonNull(schemaReferences, "expected parameter 'schemaReferences' to be non-null");
        this.securitySettings = Objects.requireNonNull(securitySettings, "expected parameter 'securitySettings' to be non-null");
        this.validationOverrides = validationOverrides;
        this.validationSettings = Objects.requireNonNull(validationSettings, "expected parameter 'validationSettings' to be non-null");
        this.x12DelimiterOverrides = x12DelimiterOverrides;
    }

    private X12ProtocolSettingsArgs() {
        this.acknowledgementSettings = Input.empty();
        this.envelopeOverrides = Input.empty();
        this.envelopeSettings = Input.empty();
        this.framingSettings = Input.empty();
        this.messageFilter = Input.empty();
        this.messageFilterList = Input.empty();
        this.processingSettings = Input.empty();
        this.schemaReferences = Input.empty();
        this.securitySettings = Input.empty();
        this.validationOverrides = Input.empty();
        this.validationSettings = Input.empty();
        this.x12DelimiterOverrides = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12ProtocolSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<X12AcknowledgementSettingsArgs> acknowledgementSettings;
        private @Nullable Input<List<X12EnvelopeOverrideArgs>> envelopeOverrides;
        private Input<X12EnvelopeSettingsArgs> envelopeSettings;
        private Input<X12FramingSettingsArgs> framingSettings;
        private Input<X12MessageFilterArgs> messageFilter;
        private @Nullable Input<List<X12MessageIdentifierArgs>> messageFilterList;
        private Input<X12ProcessingSettingsArgs> processingSettings;
        private Input<List<X12SchemaReferenceArgs>> schemaReferences;
        private Input<X12SecuritySettingsArgs> securitySettings;
        private @Nullable Input<List<X12ValidationOverrideArgs>> validationOverrides;
        private Input<X12ValidationSettingsArgs> validationSettings;
        private @Nullable Input<List<X12DelimiterOverridesArgs>> x12DelimiterOverrides;

        public Builder() {
    	      // Empty
        }

        public Builder(X12ProtocolSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acknowledgementSettings = defaults.acknowledgementSettings;
    	      this.envelopeOverrides = defaults.envelopeOverrides;
    	      this.envelopeSettings = defaults.envelopeSettings;
    	      this.framingSettings = defaults.framingSettings;
    	      this.messageFilter = defaults.messageFilter;
    	      this.messageFilterList = defaults.messageFilterList;
    	      this.processingSettings = defaults.processingSettings;
    	      this.schemaReferences = defaults.schemaReferences;
    	      this.securitySettings = defaults.securitySettings;
    	      this.validationOverrides = defaults.validationOverrides;
    	      this.validationSettings = defaults.validationSettings;
    	      this.x12DelimiterOverrides = defaults.x12DelimiterOverrides;
        }

        public Builder setAcknowledgementSettings(Input<X12AcknowledgementSettingsArgs> acknowledgementSettings) {
            this.acknowledgementSettings = Objects.requireNonNull(acknowledgementSettings);
            return this;
        }

        public Builder setAcknowledgementSettings(X12AcknowledgementSettingsArgs acknowledgementSettings) {
            this.acknowledgementSettings = Input.of(Objects.requireNonNull(acknowledgementSettings));
            return this;
        }

        public Builder setEnvelopeOverrides(@Nullable Input<List<X12EnvelopeOverrideArgs>> envelopeOverrides) {
            this.envelopeOverrides = envelopeOverrides;
            return this;
        }

        public Builder setEnvelopeOverrides(@Nullable List<X12EnvelopeOverrideArgs> envelopeOverrides) {
            this.envelopeOverrides = Input.ofNullable(envelopeOverrides);
            return this;
        }

        public Builder setEnvelopeSettings(Input<X12EnvelopeSettingsArgs> envelopeSettings) {
            this.envelopeSettings = Objects.requireNonNull(envelopeSettings);
            return this;
        }

        public Builder setEnvelopeSettings(X12EnvelopeSettingsArgs envelopeSettings) {
            this.envelopeSettings = Input.of(Objects.requireNonNull(envelopeSettings));
            return this;
        }

        public Builder setFramingSettings(Input<X12FramingSettingsArgs> framingSettings) {
            this.framingSettings = Objects.requireNonNull(framingSettings);
            return this;
        }

        public Builder setFramingSettings(X12FramingSettingsArgs framingSettings) {
            this.framingSettings = Input.of(Objects.requireNonNull(framingSettings));
            return this;
        }

        public Builder setMessageFilter(Input<X12MessageFilterArgs> messageFilter) {
            this.messageFilter = Objects.requireNonNull(messageFilter);
            return this;
        }

        public Builder setMessageFilter(X12MessageFilterArgs messageFilter) {
            this.messageFilter = Input.of(Objects.requireNonNull(messageFilter));
            return this;
        }

        public Builder setMessageFilterList(@Nullable Input<List<X12MessageIdentifierArgs>> messageFilterList) {
            this.messageFilterList = messageFilterList;
            return this;
        }

        public Builder setMessageFilterList(@Nullable List<X12MessageIdentifierArgs> messageFilterList) {
            this.messageFilterList = Input.ofNullable(messageFilterList);
            return this;
        }

        public Builder setProcessingSettings(Input<X12ProcessingSettingsArgs> processingSettings) {
            this.processingSettings = Objects.requireNonNull(processingSettings);
            return this;
        }

        public Builder setProcessingSettings(X12ProcessingSettingsArgs processingSettings) {
            this.processingSettings = Input.of(Objects.requireNonNull(processingSettings));
            return this;
        }

        public Builder setSchemaReferences(Input<List<X12SchemaReferenceArgs>> schemaReferences) {
            this.schemaReferences = Objects.requireNonNull(schemaReferences);
            return this;
        }

        public Builder setSchemaReferences(List<X12SchemaReferenceArgs> schemaReferences) {
            this.schemaReferences = Input.of(Objects.requireNonNull(schemaReferences));
            return this;
        }

        public Builder setSecuritySettings(Input<X12SecuritySettingsArgs> securitySettings) {
            this.securitySettings = Objects.requireNonNull(securitySettings);
            return this;
        }

        public Builder setSecuritySettings(X12SecuritySettingsArgs securitySettings) {
            this.securitySettings = Input.of(Objects.requireNonNull(securitySettings));
            return this;
        }

        public Builder setValidationOverrides(@Nullable Input<List<X12ValidationOverrideArgs>> validationOverrides) {
            this.validationOverrides = validationOverrides;
            return this;
        }

        public Builder setValidationOverrides(@Nullable List<X12ValidationOverrideArgs> validationOverrides) {
            this.validationOverrides = Input.ofNullable(validationOverrides);
            return this;
        }

        public Builder setValidationSettings(Input<X12ValidationSettingsArgs> validationSettings) {
            this.validationSettings = Objects.requireNonNull(validationSettings);
            return this;
        }

        public Builder setValidationSettings(X12ValidationSettingsArgs validationSettings) {
            this.validationSettings = Input.of(Objects.requireNonNull(validationSettings));
            return this;
        }

        public Builder setX12DelimiterOverrides(@Nullable Input<List<X12DelimiterOverridesArgs>> x12DelimiterOverrides) {
            this.x12DelimiterOverrides = x12DelimiterOverrides;
            return this;
        }

        public Builder setX12DelimiterOverrides(@Nullable List<X12DelimiterOverridesArgs> x12DelimiterOverrides) {
            this.x12DelimiterOverrides = Input.ofNullable(x12DelimiterOverrides);
            return this;
        }

        public X12ProtocolSettingsArgs build() {
            return new X12ProtocolSettingsArgs(acknowledgementSettings, envelopeOverrides, envelopeSettings, framingSettings, messageFilter, messageFilterList, processingSettings, schemaReferences, securitySettings, validationOverrides, validationSettings, x12DelimiterOverrides);
        }
    }
}
