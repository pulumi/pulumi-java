// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class FtpReadSettingsResponse {
    private final @Nullable Object deleteFilesAfterCompletion;
    private final @Nullable Object disableChunking;
    private final @Nullable Object disableMetricsCollection;
    private final @Nullable Boolean enablePartitionDiscovery;
    private final @Nullable Object fileListPath;
    private final @Nullable Object maxConcurrentConnections;
    private final @Nullable Object partitionRootPath;
    private final @Nullable Object recursive;
    private final String type;
    private final @Nullable Boolean useBinaryTransfer;
    private final @Nullable Object wildcardFileName;
    private final @Nullable Object wildcardFolderPath;

    @OutputCustomType.Constructor({"deleteFilesAfterCompletion","disableChunking","disableMetricsCollection","enablePartitionDiscovery","fileListPath","maxConcurrentConnections","partitionRootPath","recursive","type","useBinaryTransfer","wildcardFileName","wildcardFolderPath"})
    private FtpReadSettingsResponse(
        @Nullable Object deleteFilesAfterCompletion,
        @Nullable Object disableChunking,
        @Nullable Object disableMetricsCollection,
        @Nullable Boolean enablePartitionDiscovery,
        @Nullable Object fileListPath,
        @Nullable Object maxConcurrentConnections,
        @Nullable Object partitionRootPath,
        @Nullable Object recursive,
        String type,
        @Nullable Boolean useBinaryTransfer,
        @Nullable Object wildcardFileName,
        @Nullable Object wildcardFolderPath) {
        this.deleteFilesAfterCompletion = deleteFilesAfterCompletion;
        this.disableChunking = disableChunking;
        this.disableMetricsCollection = disableMetricsCollection;
        this.enablePartitionDiscovery = enablePartitionDiscovery;
        this.fileListPath = fileListPath;
        this.maxConcurrentConnections = maxConcurrentConnections;
        this.partitionRootPath = partitionRootPath;
        this.recursive = recursive;
        this.type = Objects.requireNonNull(type);
        this.useBinaryTransfer = useBinaryTransfer;
        this.wildcardFileName = wildcardFileName;
        this.wildcardFolderPath = wildcardFolderPath;
    }

    public Optional<Object> getDeleteFilesAfterCompletion() {
        return Optional.ofNullable(this.deleteFilesAfterCompletion);
    }
    public Optional<Object> getDisableChunking() {
        return Optional.ofNullable(this.disableChunking);
    }
    public Optional<Object> getDisableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }
    public Optional<Boolean> getEnablePartitionDiscovery() {
        return Optional.ofNullable(this.enablePartitionDiscovery);
    }
    public Optional<Object> getFileListPath() {
        return Optional.ofNullable(this.fileListPath);
    }
    public Optional<Object> getMaxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }
    public Optional<Object> getPartitionRootPath() {
        return Optional.ofNullable(this.partitionRootPath);
    }
    public Optional<Object> getRecursive() {
        return Optional.ofNullable(this.recursive);
    }
    public String getType() {
        return this.type;
    }
    public Optional<Boolean> getUseBinaryTransfer() {
        return Optional.ofNullable(this.useBinaryTransfer);
    }
    public Optional<Object> getWildcardFileName() {
        return Optional.ofNullable(this.wildcardFileName);
    }
    public Optional<Object> getWildcardFolderPath() {
        return Optional.ofNullable(this.wildcardFolderPath);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FtpReadSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Object deleteFilesAfterCompletion;
        private @Nullable Object disableChunking;
        private @Nullable Object disableMetricsCollection;
        private @Nullable Boolean enablePartitionDiscovery;
        private @Nullable Object fileListPath;
        private @Nullable Object maxConcurrentConnections;
        private @Nullable Object partitionRootPath;
        private @Nullable Object recursive;
        private String type;
        private @Nullable Boolean useBinaryTransfer;
        private @Nullable Object wildcardFileName;
        private @Nullable Object wildcardFolderPath;

        public Builder() {
    	      // Empty
        }

        public Builder(FtpReadSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteFilesAfterCompletion = defaults.deleteFilesAfterCompletion;
    	      this.disableChunking = defaults.disableChunking;
    	      this.disableMetricsCollection = defaults.disableMetricsCollection;
    	      this.enablePartitionDiscovery = defaults.enablePartitionDiscovery;
    	      this.fileListPath = defaults.fileListPath;
    	      this.maxConcurrentConnections = defaults.maxConcurrentConnections;
    	      this.partitionRootPath = defaults.partitionRootPath;
    	      this.recursive = defaults.recursive;
    	      this.type = defaults.type;
    	      this.useBinaryTransfer = defaults.useBinaryTransfer;
    	      this.wildcardFileName = defaults.wildcardFileName;
    	      this.wildcardFolderPath = defaults.wildcardFolderPath;
        }

        public Builder setDeleteFilesAfterCompletion(@Nullable Object deleteFilesAfterCompletion) {
            this.deleteFilesAfterCompletion = deleteFilesAfterCompletion;
            return this;
        }

        public Builder setDisableChunking(@Nullable Object disableChunking) {
            this.disableChunking = disableChunking;
            return this;
        }

        public Builder setDisableMetricsCollection(@Nullable Object disableMetricsCollection) {
            this.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder setEnablePartitionDiscovery(@Nullable Boolean enablePartitionDiscovery) {
            this.enablePartitionDiscovery = enablePartitionDiscovery;
            return this;
        }

        public Builder setFileListPath(@Nullable Object fileListPath) {
            this.fileListPath = fileListPath;
            return this;
        }

        public Builder setMaxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            this.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder setPartitionRootPath(@Nullable Object partitionRootPath) {
            this.partitionRootPath = partitionRootPath;
            return this;
        }

        public Builder setRecursive(@Nullable Object recursive) {
            this.recursive = recursive;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUseBinaryTransfer(@Nullable Boolean useBinaryTransfer) {
            this.useBinaryTransfer = useBinaryTransfer;
            return this;
        }

        public Builder setWildcardFileName(@Nullable Object wildcardFileName) {
            this.wildcardFileName = wildcardFileName;
            return this;
        }

        public Builder setWildcardFolderPath(@Nullable Object wildcardFolderPath) {
            this.wildcardFolderPath = wildcardFolderPath;
            return this;
        }

        public FtpReadSettingsResponse build() {
            return new FtpReadSettingsResponse(deleteFilesAfterCompletion, disableChunking, disableMetricsCollection, enablePartitionDiscovery, fileListPath, maxConcurrentConnections, partitionRootPath, recursive, type, useBinaryTransfer, wildcardFileName, wildcardFolderPath);
        }
    }
}
