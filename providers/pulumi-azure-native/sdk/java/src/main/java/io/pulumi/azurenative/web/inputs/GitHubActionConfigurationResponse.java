// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.inputs.GitHubActionCodeConfigurationResponse;
import io.pulumi.azurenative.web.inputs.GitHubActionContainerConfigurationResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The GitHub action configuration.
 * 
 */
public final class GitHubActionConfigurationResponse extends io.pulumi.resources.InvokeArgs {

    public static final GitHubActionConfigurationResponse Empty = new GitHubActionConfigurationResponse();

    /**
     * GitHub Action code configuration.
     * 
     */
    @Import(name="codeConfiguration")
      private final @Nullable GitHubActionCodeConfigurationResponse codeConfiguration;

    public Optional<GitHubActionCodeConfigurationResponse> getCodeConfiguration() {
        return this.codeConfiguration == null ? Optional.empty() : Optional.ofNullable(this.codeConfiguration);
    }

    /**
     * GitHub Action container configuration.
     * 
     */
    @Import(name="containerConfiguration")
      private final @Nullable GitHubActionContainerConfigurationResponse containerConfiguration;

    public Optional<GitHubActionContainerConfigurationResponse> getContainerConfiguration() {
        return this.containerConfiguration == null ? Optional.empty() : Optional.ofNullable(this.containerConfiguration);
    }

    /**
     * Workflow option to determine whether the workflow file should be generated and written to the repository.
     * 
     */
    @Import(name="generateWorkflowFile")
      private final @Nullable Boolean generateWorkflowFile;

    public Optional<Boolean> getGenerateWorkflowFile() {
        return this.generateWorkflowFile == null ? Optional.empty() : Optional.ofNullable(this.generateWorkflowFile);
    }

    /**
     * This will help determine the workflow configuration to select.
     * 
     */
    @Import(name="isLinux")
      private final @Nullable Boolean isLinux;

    public Optional<Boolean> getIsLinux() {
        return this.isLinux == null ? Optional.empty() : Optional.ofNullable(this.isLinux);
    }

    public GitHubActionConfigurationResponse(
        @Nullable GitHubActionCodeConfigurationResponse codeConfiguration,
        @Nullable GitHubActionContainerConfigurationResponse containerConfiguration,
        @Nullable Boolean generateWorkflowFile,
        @Nullable Boolean isLinux) {
        this.codeConfiguration = codeConfiguration;
        this.containerConfiguration = containerConfiguration;
        this.generateWorkflowFile = generateWorkflowFile;
        this.isLinux = isLinux;
    }

    private GitHubActionConfigurationResponse() {
        this.codeConfiguration = null;
        this.containerConfiguration = null;
        this.generateWorkflowFile = null;
        this.isLinux = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitHubActionConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable GitHubActionCodeConfigurationResponse codeConfiguration;
        private @Nullable GitHubActionContainerConfigurationResponse containerConfiguration;
        private @Nullable Boolean generateWorkflowFile;
        private @Nullable Boolean isLinux;

        public Builder() {
    	      // Empty
        }

        public Builder(GitHubActionConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.codeConfiguration = defaults.codeConfiguration;
    	      this.containerConfiguration = defaults.containerConfiguration;
    	      this.generateWorkflowFile = defaults.generateWorkflowFile;
    	      this.isLinux = defaults.isLinux;
        }

        public Builder codeConfiguration(@Nullable GitHubActionCodeConfigurationResponse codeConfiguration) {
            this.codeConfiguration = codeConfiguration;
            return this;
        }

        public Builder containerConfiguration(@Nullable GitHubActionContainerConfigurationResponse containerConfiguration) {
            this.containerConfiguration = containerConfiguration;
            return this;
        }

        public Builder generateWorkflowFile(@Nullable Boolean generateWorkflowFile) {
            this.generateWorkflowFile = generateWorkflowFile;
            return this;
        }

        public Builder isLinux(@Nullable Boolean isLinux) {
            this.isLinux = isLinux;
            return this;
        }
        public GitHubActionConfigurationResponse build() {
            return new GitHubActionConfigurationResponse(codeConfiguration, containerConfiguration, generateWorkflowFile, isLinux);
        }
    }
}
