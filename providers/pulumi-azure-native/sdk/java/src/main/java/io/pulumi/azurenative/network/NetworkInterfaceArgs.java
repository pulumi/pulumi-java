// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.enums.NetworkInterfaceMigrationPhase;
import io.pulumi.azurenative.network.enums.NetworkInterfaceNicType;
import io.pulumi.azurenative.network.inputs.ExtendedLocationArgs;
import io.pulumi.azurenative.network.inputs.NetworkInterfaceDnsSettingsArgs;
import io.pulumi.azurenative.network.inputs.NetworkInterfaceIPConfigurationArgs;
import io.pulumi.azurenative.network.inputs.NetworkSecurityGroupArgs;
import io.pulumi.azurenative.network.inputs.PrivateLinkServiceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NetworkInterfaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final NetworkInterfaceArgs Empty = new NetworkInterfaceArgs();

    /**
     * The DNS settings in network interface.
     * 
     */
    @Import(name="dnsSettings")
      private final @Nullable Output<NetworkInterfaceDnsSettingsArgs> dnsSettings;

    public Output<NetworkInterfaceDnsSettingsArgs> getDnsSettings() {
        return this.dnsSettings == null ? Codegen.empty() : this.dnsSettings;
    }

    /**
     * If the network interface is accelerated networking enabled.
     * 
     */
    @Import(name="enableAcceleratedNetworking")
      private final @Nullable Output<Boolean> enableAcceleratedNetworking;

    public Output<Boolean> getEnableAcceleratedNetworking() {
        return this.enableAcceleratedNetworking == null ? Codegen.empty() : this.enableAcceleratedNetworking;
    }

    /**
     * Indicates whether IP forwarding is enabled on this network interface.
     * 
     */
    @Import(name="enableIPForwarding")
      private final @Nullable Output<Boolean> enableIPForwarding;

    public Output<Boolean> getEnableIPForwarding() {
        return this.enableIPForwarding == null ? Codegen.empty() : this.enableIPForwarding;
    }

    /**
     * The extended location of the network interface.
     * 
     */
    @Import(name="extendedLocation")
      private final @Nullable Output<ExtendedLocationArgs> extendedLocation;

    public Output<ExtendedLocationArgs> getExtendedLocation() {
        return this.extendedLocation == null ? Codegen.empty() : this.extendedLocation;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * A list of IPConfigurations of the network interface.
     * 
     */
    @Import(name="ipConfigurations")
      private final @Nullable Output<List<NetworkInterfaceIPConfigurationArgs>> ipConfigurations;

    public Output<List<NetworkInterfaceIPConfigurationArgs>> getIpConfigurations() {
        return this.ipConfigurations == null ? Codegen.empty() : this.ipConfigurations;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Migration phase of Network Interface resource.
     * 
     */
    @Import(name="migrationPhase")
      private final @Nullable Output<Either<String,NetworkInterfaceMigrationPhase>> migrationPhase;

    public Output<Either<String,NetworkInterfaceMigrationPhase>> getMigrationPhase() {
        return this.migrationPhase == null ? Codegen.empty() : this.migrationPhase;
    }

    /**
     * The name of the network interface.
     * 
     */
    @Import(name="networkInterfaceName")
      private final @Nullable Output<String> networkInterfaceName;

    public Output<String> getNetworkInterfaceName() {
        return this.networkInterfaceName == null ? Codegen.empty() : this.networkInterfaceName;
    }

    /**
     * The reference to the NetworkSecurityGroup resource.
     * 
     */
    @Import(name="networkSecurityGroup")
      private final @Nullable Output<NetworkSecurityGroupArgs> networkSecurityGroup;

    public Output<NetworkSecurityGroupArgs> getNetworkSecurityGroup() {
        return this.networkSecurityGroup == null ? Codegen.empty() : this.networkSecurityGroup;
    }

    /**
     * Type of Network Interface resource.
     * 
     */
    @Import(name="nicType")
      private final @Nullable Output<Either<String,NetworkInterfaceNicType>> nicType;

    public Output<Either<String,NetworkInterfaceNicType>> getNicType() {
        return this.nicType == null ? Codegen.empty() : this.nicType;
    }

    /**
     * Privatelinkservice of the network interface resource.
     * 
     */
    @Import(name="privateLinkService")
      private final @Nullable Output<PrivateLinkServiceArgs> privateLinkService;

    public Output<PrivateLinkServiceArgs> getPrivateLinkService() {
        return this.privateLinkService == null ? Codegen.empty() : this.privateLinkService;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public NetworkInterfaceArgs(
        @Nullable Output<NetworkInterfaceDnsSettingsArgs> dnsSettings,
        @Nullable Output<Boolean> enableAcceleratedNetworking,
        @Nullable Output<Boolean> enableIPForwarding,
        @Nullable Output<ExtendedLocationArgs> extendedLocation,
        @Nullable Output<String> id,
        @Nullable Output<List<NetworkInterfaceIPConfigurationArgs>> ipConfigurations,
        @Nullable Output<String> location,
        @Nullable Output<Either<String,NetworkInterfaceMigrationPhase>> migrationPhase,
        @Nullable Output<String> networkInterfaceName,
        @Nullable Output<NetworkSecurityGroupArgs> networkSecurityGroup,
        @Nullable Output<Either<String,NetworkInterfaceNicType>> nicType,
        @Nullable Output<PrivateLinkServiceArgs> privateLinkService,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags) {
        this.dnsSettings = dnsSettings;
        this.enableAcceleratedNetworking = enableAcceleratedNetworking;
        this.enableIPForwarding = enableIPForwarding;
        this.extendedLocation = extendedLocation;
        this.id = id;
        this.ipConfigurations = ipConfigurations;
        this.location = location;
        this.migrationPhase = migrationPhase;
        this.networkInterfaceName = networkInterfaceName;
        this.networkSecurityGroup = networkSecurityGroup;
        this.nicType = nicType;
        this.privateLinkService = privateLinkService;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private NetworkInterfaceArgs() {
        this.dnsSettings = Codegen.empty();
        this.enableAcceleratedNetworking = Codegen.empty();
        this.enableIPForwarding = Codegen.empty();
        this.extendedLocation = Codegen.empty();
        this.id = Codegen.empty();
        this.ipConfigurations = Codegen.empty();
        this.location = Codegen.empty();
        this.migrationPhase = Codegen.empty();
        this.networkInterfaceName = Codegen.empty();
        this.networkSecurityGroup = Codegen.empty();
        this.nicType = Codegen.empty();
        this.privateLinkService = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<NetworkInterfaceDnsSettingsArgs> dnsSettings;
        private @Nullable Output<Boolean> enableAcceleratedNetworking;
        private @Nullable Output<Boolean> enableIPForwarding;
        private @Nullable Output<ExtendedLocationArgs> extendedLocation;
        private @Nullable Output<String> id;
        private @Nullable Output<List<NetworkInterfaceIPConfigurationArgs>> ipConfigurations;
        private @Nullable Output<String> location;
        private @Nullable Output<Either<String,NetworkInterfaceMigrationPhase>> migrationPhase;
        private @Nullable Output<String> networkInterfaceName;
        private @Nullable Output<NetworkSecurityGroupArgs> networkSecurityGroup;
        private @Nullable Output<Either<String,NetworkInterfaceNicType>> nicType;
        private @Nullable Output<PrivateLinkServiceArgs> privateLinkService;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkInterfaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsSettings = defaults.dnsSettings;
    	      this.enableAcceleratedNetworking = defaults.enableAcceleratedNetworking;
    	      this.enableIPForwarding = defaults.enableIPForwarding;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.id = defaults.id;
    	      this.ipConfigurations = defaults.ipConfigurations;
    	      this.location = defaults.location;
    	      this.migrationPhase = defaults.migrationPhase;
    	      this.networkInterfaceName = defaults.networkInterfaceName;
    	      this.networkSecurityGroup = defaults.networkSecurityGroup;
    	      this.nicType = defaults.nicType;
    	      this.privateLinkService = defaults.privateLinkService;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder dnsSettings(@Nullable Output<NetworkInterfaceDnsSettingsArgs> dnsSettings) {
            this.dnsSettings = dnsSettings;
            return this;
        }
        public Builder dnsSettings(@Nullable NetworkInterfaceDnsSettingsArgs dnsSettings) {
            this.dnsSettings = Codegen.ofNullable(dnsSettings);
            return this;
        }
        public Builder enableAcceleratedNetworking(@Nullable Output<Boolean> enableAcceleratedNetworking) {
            this.enableAcceleratedNetworking = enableAcceleratedNetworking;
            return this;
        }
        public Builder enableAcceleratedNetworking(@Nullable Boolean enableAcceleratedNetworking) {
            this.enableAcceleratedNetworking = Codegen.ofNullable(enableAcceleratedNetworking);
            return this;
        }
        public Builder enableIPForwarding(@Nullable Output<Boolean> enableIPForwarding) {
            this.enableIPForwarding = enableIPForwarding;
            return this;
        }
        public Builder enableIPForwarding(@Nullable Boolean enableIPForwarding) {
            this.enableIPForwarding = Codegen.ofNullable(enableIPForwarding);
            return this;
        }
        public Builder extendedLocation(@Nullable Output<ExtendedLocationArgs> extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }
        public Builder extendedLocation(@Nullable ExtendedLocationArgs extendedLocation) {
            this.extendedLocation = Codegen.ofNullable(extendedLocation);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder ipConfigurations(@Nullable Output<List<NetworkInterfaceIPConfigurationArgs>> ipConfigurations) {
            this.ipConfigurations = ipConfigurations;
            return this;
        }
        public Builder ipConfigurations(@Nullable List<NetworkInterfaceIPConfigurationArgs> ipConfigurations) {
            this.ipConfigurations = Codegen.ofNullable(ipConfigurations);
            return this;
        }
        public Builder ipConfigurations(NetworkInterfaceIPConfigurationArgs... ipConfigurations) {
            return ipConfigurations(List.of(ipConfigurations));
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder migrationPhase(@Nullable Output<Either<String,NetworkInterfaceMigrationPhase>> migrationPhase) {
            this.migrationPhase = migrationPhase;
            return this;
        }
        public Builder migrationPhase(@Nullable Either<String,NetworkInterfaceMigrationPhase> migrationPhase) {
            this.migrationPhase = Codegen.ofNullable(migrationPhase);
            return this;
        }
        public Builder networkInterfaceName(@Nullable Output<String> networkInterfaceName) {
            this.networkInterfaceName = networkInterfaceName;
            return this;
        }
        public Builder networkInterfaceName(@Nullable String networkInterfaceName) {
            this.networkInterfaceName = Codegen.ofNullable(networkInterfaceName);
            return this;
        }
        public Builder networkSecurityGroup(@Nullable Output<NetworkSecurityGroupArgs> networkSecurityGroup) {
            this.networkSecurityGroup = networkSecurityGroup;
            return this;
        }
        public Builder networkSecurityGroup(@Nullable NetworkSecurityGroupArgs networkSecurityGroup) {
            this.networkSecurityGroup = Codegen.ofNullable(networkSecurityGroup);
            return this;
        }
        public Builder nicType(@Nullable Output<Either<String,NetworkInterfaceNicType>> nicType) {
            this.nicType = nicType;
            return this;
        }
        public Builder nicType(@Nullable Either<String,NetworkInterfaceNicType> nicType) {
            this.nicType = Codegen.ofNullable(nicType);
            return this;
        }
        public Builder privateLinkService(@Nullable Output<PrivateLinkServiceArgs> privateLinkService) {
            this.privateLinkService = privateLinkService;
            return this;
        }
        public Builder privateLinkService(@Nullable PrivateLinkServiceArgs privateLinkService) {
            this.privateLinkService = Codegen.ofNullable(privateLinkService);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public NetworkInterfaceArgs build() {
            return new NetworkInterfaceArgs(dnsSettings, enableAcceleratedNetworking, enableIPForwarding, extendedLocation, id, ipConfigurations, location, migrationPhase, networkInterfaceName, networkSecurityGroup, nicType, privateLinkService, resourceGroupName, tags);
        }
    }
}
