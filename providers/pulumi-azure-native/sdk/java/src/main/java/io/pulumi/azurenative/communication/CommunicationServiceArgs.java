// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.communication;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CommunicationServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final CommunicationServiceArgs Empty = new CommunicationServiceArgs();

    /**
     * The name of the CommunicationService resource.
     * 
     */
    @InputImport(name="communicationServiceName")
      private final @Nullable Input<String> communicationServiceName;

    public Input<String> getCommunicationServiceName() {
        return this.communicationServiceName == null ? Input.empty() : this.communicationServiceName;
    }

    /**
     * The location where the communication service stores its data at rest.
     * 
     */
    @InputImport(name="dataLocation", required=true)
      private final Input<String> dataLocation;

    public Input<String> getDataLocation() {
        return this.dataLocation;
    }

    /**
     * The Azure location where the CommunicationService is running.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Tags of the service which is a list of key value pairs that describe the resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public CommunicationServiceArgs(
        @Nullable Input<String> communicationServiceName,
        Input<String> dataLocation,
        @Nullable Input<String> location,
        Input<String> resourceGroupName,
        @Nullable Input<Map<String,String>> tags) {
        this.communicationServiceName = communicationServiceName;
        this.dataLocation = Objects.requireNonNull(dataLocation, "expected parameter 'dataLocation' to be non-null");
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private CommunicationServiceArgs() {
        this.communicationServiceName = Input.empty();
        this.dataLocation = Input.empty();
        this.location = Input.empty();
        this.resourceGroupName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CommunicationServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> communicationServiceName;
        private Input<String> dataLocation;
        private @Nullable Input<String> location;
        private Input<String> resourceGroupName;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(CommunicationServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.communicationServiceName = defaults.communicationServiceName;
    	      this.dataLocation = defaults.dataLocation;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder setCommunicationServiceName(@Nullable Input<String> communicationServiceName) {
            this.communicationServiceName = communicationServiceName;
            return this;
        }

        public Builder setCommunicationServiceName(@Nullable String communicationServiceName) {
            this.communicationServiceName = Input.ofNullable(communicationServiceName);
            return this;
        }

        public Builder setDataLocation(Input<String> dataLocation) {
            this.dataLocation = Objects.requireNonNull(dataLocation);
            return this;
        }

        public Builder setDataLocation(String dataLocation) {
            this.dataLocation = Input.of(Objects.requireNonNull(dataLocation));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public CommunicationServiceArgs build() {
            return new CommunicationServiceArgs(communicationServiceName, dataLocation, location, resourceGroupName, tags);
        }
    }
}
