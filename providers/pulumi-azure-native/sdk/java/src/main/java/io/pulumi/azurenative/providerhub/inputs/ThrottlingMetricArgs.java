// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.providerhub.inputs;

import io.pulumi.azurenative.providerhub.enums.ThrottlingMetricType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ThrottlingMetricArgs extends io.pulumi.resources.ResourceArgs {

    public static final ThrottlingMetricArgs Empty = new ThrottlingMetricArgs();

    @InputImport(name="interval")
        private final @Nullable Input<String> interval;

    public Input<String> getInterval() {
        return this.interval == null ? Input.empty() : this.interval;
    }

    @InputImport(name="limit", required=true)
        private final Input<Double> limit;

    public Input<Double> getLimit() {
        return this.limit;
    }

    @InputImport(name="type", required=true)
        private final Input<Either<String,ThrottlingMetricType>> type;

    public Input<Either<String,ThrottlingMetricType>> getType() {
        return this.type;
    }

    public ThrottlingMetricArgs(
        @Nullable Input<String> interval,
        Input<Double> limit,
        Input<Either<String,ThrottlingMetricType>> type) {
        this.interval = interval;
        this.limit = Objects.requireNonNull(limit, "expected parameter 'limit' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ThrottlingMetricArgs() {
        this.interval = Input.empty();
        this.limit = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThrottlingMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> interval;
        private Input<Double> limit;
        private Input<Either<String,ThrottlingMetricType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ThrottlingMetricArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interval = defaults.interval;
    	      this.limit = defaults.limit;
    	      this.type = defaults.type;
        }

        public Builder setInterval(@Nullable Input<String> interval) {
            this.interval = interval;
            return this;
        }

        public Builder setInterval(@Nullable String interval) {
            this.interval = Input.ofNullable(interval);
            return this;
        }

        public Builder setLimit(Input<Double> limit) {
            this.limit = Objects.requireNonNull(limit);
            return this;
        }

        public Builder setLimit(Double limit) {
            this.limit = Input.of(Objects.requireNonNull(limit));
            return this;
        }

        public Builder setType(Input<Either<String,ThrottlingMetricType>> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(Either<String,ThrottlingMetricType> type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }
        public ThrottlingMetricArgs build() {
            return new ThrottlingMetricArgs(interval, limit, type);
        }
    }
}
