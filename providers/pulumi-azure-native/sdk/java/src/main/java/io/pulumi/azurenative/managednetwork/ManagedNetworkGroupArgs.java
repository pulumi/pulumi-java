// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.managednetwork;

import io.pulumi.azurenative.managednetwork.enums.Kind;
import io.pulumi.azurenative.managednetwork.inputs.ResourceIdArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ManagedNetworkGroupArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagedNetworkGroupArgs Empty = new ManagedNetworkGroupArgs();

    /**
     * Responsibility role under which this Managed Network Group will be created
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Input<Either<String,Kind>> kind;

    public Input<Either<String,Kind>> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the Managed Network Group.
     * 
     */
    @InputImport(name="managedNetworkGroupName")
      private final @Nullable Input<String> managedNetworkGroupName;

    public Input<String> getManagedNetworkGroupName() {
        return this.managedNetworkGroupName == null ? Input.empty() : this.managedNetworkGroupName;
    }

    /**
     * The name of the Managed Network.
     * 
     */
    @InputImport(name="managedNetworkName", required=true)
      private final Input<String> managedNetworkName;

    public Input<String> getManagedNetworkName() {
        return this.managedNetworkName;
    }

    /**
     * The collection of management groups covered by the Managed Network
     * 
     */
    @InputImport(name="managementGroups")
      private final @Nullable Input<List<ResourceIdArgs>> managementGroups;

    public Input<List<ResourceIdArgs>> getManagementGroups() {
        return this.managementGroups == null ? Input.empty() : this.managementGroups;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The collection of  subnets covered by the Managed Network
     * 
     */
    @InputImport(name="subnets")
      private final @Nullable Input<List<ResourceIdArgs>> subnets;

    public Input<List<ResourceIdArgs>> getSubnets() {
        return this.subnets == null ? Input.empty() : this.subnets;
    }

    /**
     * The collection of subscriptions covered by the Managed Network
     * 
     */
    @InputImport(name="subscriptions")
      private final @Nullable Input<List<ResourceIdArgs>> subscriptions;

    public Input<List<ResourceIdArgs>> getSubscriptions() {
        return this.subscriptions == null ? Input.empty() : this.subscriptions;
    }

    /**
     * The collection of virtual nets covered by the Managed Network
     * 
     */
    @InputImport(name="virtualNetworks")
      private final @Nullable Input<List<ResourceIdArgs>> virtualNetworks;

    public Input<List<ResourceIdArgs>> getVirtualNetworks() {
        return this.virtualNetworks == null ? Input.empty() : this.virtualNetworks;
    }

    public ManagedNetworkGroupArgs(
        @Nullable Input<Either<String,Kind>> kind,
        @Nullable Input<String> location,
        @Nullable Input<String> managedNetworkGroupName,
        Input<String> managedNetworkName,
        @Nullable Input<List<ResourceIdArgs>> managementGroups,
        Input<String> resourceGroupName,
        @Nullable Input<List<ResourceIdArgs>> subnets,
        @Nullable Input<List<ResourceIdArgs>> subscriptions,
        @Nullable Input<List<ResourceIdArgs>> virtualNetworks) {
        this.kind = kind;
        this.location = location;
        this.managedNetworkGroupName = managedNetworkGroupName;
        this.managedNetworkName = Objects.requireNonNull(managedNetworkName, "expected parameter 'managedNetworkName' to be non-null");
        this.managementGroups = managementGroups;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.subnets = subnets;
        this.subscriptions = subscriptions;
        this.virtualNetworks = virtualNetworks;
    }

    private ManagedNetworkGroupArgs() {
        this.kind = Input.empty();
        this.location = Input.empty();
        this.managedNetworkGroupName = Input.empty();
        this.managedNetworkName = Input.empty();
        this.managementGroups = Input.empty();
        this.resourceGroupName = Input.empty();
        this.subnets = Input.empty();
        this.subscriptions = Input.empty();
        this.virtualNetworks = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedNetworkGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,Kind>> kind;
        private @Nullable Input<String> location;
        private @Nullable Input<String> managedNetworkGroupName;
        private Input<String> managedNetworkName;
        private @Nullable Input<List<ResourceIdArgs>> managementGroups;
        private Input<String> resourceGroupName;
        private @Nullable Input<List<ResourceIdArgs>> subnets;
        private @Nullable Input<List<ResourceIdArgs>> subscriptions;
        private @Nullable Input<List<ResourceIdArgs>> virtualNetworks;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedNetworkGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.managedNetworkGroupName = defaults.managedNetworkGroupName;
    	      this.managedNetworkName = defaults.managedNetworkName;
    	      this.managementGroups = defaults.managementGroups;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.subnets = defaults.subnets;
    	      this.subscriptions = defaults.subscriptions;
    	      this.virtualNetworks = defaults.virtualNetworks;
        }

        public Builder kind(@Nullable Input<Either<String,Kind>> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable Either<String,Kind> kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder managedNetworkGroupName(@Nullable Input<String> managedNetworkGroupName) {
            this.managedNetworkGroupName = managedNetworkGroupName;
            return this;
        }

        public Builder managedNetworkGroupName(@Nullable String managedNetworkGroupName) {
            this.managedNetworkGroupName = Input.ofNullable(managedNetworkGroupName);
            return this;
        }

        public Builder managedNetworkName(Input<String> managedNetworkName) {
            this.managedNetworkName = Objects.requireNonNull(managedNetworkName);
            return this;
        }

        public Builder managedNetworkName(String managedNetworkName) {
            this.managedNetworkName = Input.of(Objects.requireNonNull(managedNetworkName));
            return this;
        }

        public Builder managementGroups(@Nullable Input<List<ResourceIdArgs>> managementGroups) {
            this.managementGroups = managementGroups;
            return this;
        }

        public Builder managementGroups(@Nullable List<ResourceIdArgs> managementGroups) {
            this.managementGroups = Input.ofNullable(managementGroups);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder subnets(@Nullable Input<List<ResourceIdArgs>> subnets) {
            this.subnets = subnets;
            return this;
        }

        public Builder subnets(@Nullable List<ResourceIdArgs> subnets) {
            this.subnets = Input.ofNullable(subnets);
            return this;
        }

        public Builder subscriptions(@Nullable Input<List<ResourceIdArgs>> subscriptions) {
            this.subscriptions = subscriptions;
            return this;
        }

        public Builder subscriptions(@Nullable List<ResourceIdArgs> subscriptions) {
            this.subscriptions = Input.ofNullable(subscriptions);
            return this;
        }

        public Builder virtualNetworks(@Nullable Input<List<ResourceIdArgs>> virtualNetworks) {
            this.virtualNetworks = virtualNetworks;
            return this;
        }

        public Builder virtualNetworks(@Nullable List<ResourceIdArgs> virtualNetworks) {
            this.virtualNetworks = Input.ofNullable(virtualNetworks);
            return this;
        }
        public ManagedNetworkGroupArgs build() {
            return new ManagedNetworkGroupArgs(kind, location, managedNetworkGroupName, managedNetworkName, managementGroups, resourceGroupName, subnets, subscriptions, virtualNetworks);
        }
    }
}
