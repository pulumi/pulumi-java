// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class MigrationValidationOptionsResponse {
    /**
     * Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
     * 
     */
    private final @Nullable Boolean enableDataIntegrityValidation;
    /**
     * Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
     * 
     */
    private final @Nullable Boolean enableQueryAnalysisValidation;
    /**
     * Allows to compare the schema information between source and target.
     * 
     */
    private final @Nullable Boolean enableSchemaValidation;

    @OutputCustomType.Constructor({"enableDataIntegrityValidation","enableQueryAnalysisValidation","enableSchemaValidation"})
    private MigrationValidationOptionsResponse(
        @Nullable Boolean enableDataIntegrityValidation,
        @Nullable Boolean enableQueryAnalysisValidation,
        @Nullable Boolean enableSchemaValidation) {
        this.enableDataIntegrityValidation = enableDataIntegrityValidation;
        this.enableQueryAnalysisValidation = enableQueryAnalysisValidation;
        this.enableSchemaValidation = enableSchemaValidation;
    }

    /**
     * Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
     * 
     */
    public Optional<Boolean> getEnableDataIntegrityValidation() {
        return Optional.ofNullable(this.enableDataIntegrityValidation);
    }
    /**
     * Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
     * 
     */
    public Optional<Boolean> getEnableQueryAnalysisValidation() {
        return Optional.ofNullable(this.enableQueryAnalysisValidation);
    }
    /**
     * Allows to compare the schema information between source and target.
     * 
     */
    public Optional<Boolean> getEnableSchemaValidation() {
        return Optional.ofNullable(this.enableSchemaValidation);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrationValidationOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean enableDataIntegrityValidation;
        private @Nullable Boolean enableQueryAnalysisValidation;
        private @Nullable Boolean enableSchemaValidation;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrationValidationOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableDataIntegrityValidation = defaults.enableDataIntegrityValidation;
    	      this.enableQueryAnalysisValidation = defaults.enableQueryAnalysisValidation;
    	      this.enableSchemaValidation = defaults.enableSchemaValidation;
        }

        public Builder setEnableDataIntegrityValidation(@Nullable Boolean enableDataIntegrityValidation) {
            this.enableDataIntegrityValidation = enableDataIntegrityValidation;
            return this;
        }

        public Builder setEnableQueryAnalysisValidation(@Nullable Boolean enableQueryAnalysisValidation) {
            this.enableQueryAnalysisValidation = enableQueryAnalysisValidation;
            return this;
        }

        public Builder setEnableSchemaValidation(@Nullable Boolean enableSchemaValidation) {
            this.enableSchemaValidation = enableSchemaValidation;
            return this;
        }

        public MigrationValidationOptionsResponse build() {
            return new MigrationValidationOptionsResponse(enableDataIntegrityValidation, enableQueryAnalysisValidation, enableSchemaValidation);
        }
    }
}
