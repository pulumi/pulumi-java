// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights;

import io.pulumi.azurenative.customerinsights.enums.ConnectorTypes;
import io.pulumi.azurenative.customerinsights.enums.EntityTypes;
import io.pulumi.azurenative.customerinsights.inputs.ConnectorMappingPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConnectorMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectorMappingArgs Empty = new ConnectorMappingArgs();

    /**
     * The name of the connector.
     * 
     */
    @Import(name="connectorName", required=true)
      private final Output<String> connectorName;

    public Output<String> connectorName() {
        return this.connectorName;
    }

    /**
     * Type of connector.
     * 
     */
    @Import(name="connectorType")
      private final @Nullable Output<Either<String,ConnectorTypes>> connectorType;

    public Output<Either<String,ConnectorTypes>> connectorType() {
        return this.connectorType == null ? Codegen.empty() : this.connectorType;
    }

    /**
     * The description of the connector mapping.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Display name for the connector mapping.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * Defines which entity type the file should map to.
     * 
     */
    @Import(name="entityType", required=true)
      private final Output<EntityTypes> entityType;

    public Output<EntityTypes> entityType() {
        return this.entityType;
    }

    /**
     * The mapping entity name.
     * 
     */
    @Import(name="entityTypeName", required=true)
      private final Output<String> entityTypeName;

    public Output<String> entityTypeName() {
        return this.entityTypeName;
    }

    /**
     * The name of the hub.
     * 
     */
    @Import(name="hubName", required=true)
      private final Output<String> hubName;

    public Output<String> hubName() {
        return this.hubName;
    }

    /**
     * The name of the connector mapping.
     * 
     */
    @Import(name="mappingName")
      private final @Nullable Output<String> mappingName;

    public Output<String> mappingName() {
        return this.mappingName == null ? Codegen.empty() : this.mappingName;
    }

    /**
     * The properties of the mapping.
     * 
     */
    @Import(name="mappingProperties", required=true)
      private final Output<ConnectorMappingPropertiesArgs> mappingProperties;

    public Output<ConnectorMappingPropertiesArgs> mappingProperties() {
        return this.mappingProperties;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    public ConnectorMappingArgs(
        Output<String> connectorName,
        @Nullable Output<Either<String,ConnectorTypes>> connectorType,
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        Output<EntityTypes> entityType,
        Output<String> entityTypeName,
        Output<String> hubName,
        @Nullable Output<String> mappingName,
        Output<ConnectorMappingPropertiesArgs> mappingProperties,
        Output<String> resourceGroupName) {
        this.connectorName = Objects.requireNonNull(connectorName, "expected parameter 'connectorName' to be non-null");
        this.connectorType = connectorType;
        this.description = description;
        this.displayName = displayName;
        this.entityType = Objects.requireNonNull(entityType, "expected parameter 'entityType' to be non-null");
        this.entityTypeName = Objects.requireNonNull(entityTypeName, "expected parameter 'entityTypeName' to be non-null");
        this.hubName = Objects.requireNonNull(hubName, "expected parameter 'hubName' to be non-null");
        this.mappingName = mappingName;
        this.mappingProperties = Objects.requireNonNull(mappingProperties, "expected parameter 'mappingProperties' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private ConnectorMappingArgs() {
        this.connectorName = Codegen.empty();
        this.connectorType = Codegen.empty();
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.entityType = Codegen.empty();
        this.entityTypeName = Codegen.empty();
        this.hubName = Codegen.empty();
        this.mappingName = Codegen.empty();
        this.mappingProperties = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> connectorName;
        private @Nullable Output<Either<String,ConnectorTypes>> connectorType;
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private Output<EntityTypes> entityType;
        private Output<String> entityTypeName;
        private Output<String> hubName;
        private @Nullable Output<String> mappingName;
        private Output<ConnectorMappingPropertiesArgs> mappingProperties;
        private Output<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectorMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorName = defaults.connectorName;
    	      this.connectorType = defaults.connectorType;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.entityType = defaults.entityType;
    	      this.entityTypeName = defaults.entityTypeName;
    	      this.hubName = defaults.hubName;
    	      this.mappingName = defaults.mappingName;
    	      this.mappingProperties = defaults.mappingProperties;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder connectorName(Output<String> connectorName) {
            this.connectorName = Objects.requireNonNull(connectorName);
            return this;
        }
        public Builder connectorName(String connectorName) {
            this.connectorName = Output.of(Objects.requireNonNull(connectorName));
            return this;
        }
        public Builder connectorType(@Nullable Output<Either<String,ConnectorTypes>> connectorType) {
            this.connectorType = connectorType;
            return this;
        }
        public Builder connectorType(@Nullable Either<String,ConnectorTypes> connectorType) {
            this.connectorType = Codegen.ofNullable(connectorType);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder entityType(Output<EntityTypes> entityType) {
            this.entityType = Objects.requireNonNull(entityType);
            return this;
        }
        public Builder entityType(EntityTypes entityType) {
            this.entityType = Output.of(Objects.requireNonNull(entityType));
            return this;
        }
        public Builder entityTypeName(Output<String> entityTypeName) {
            this.entityTypeName = Objects.requireNonNull(entityTypeName);
            return this;
        }
        public Builder entityTypeName(String entityTypeName) {
            this.entityTypeName = Output.of(Objects.requireNonNull(entityTypeName));
            return this;
        }
        public Builder hubName(Output<String> hubName) {
            this.hubName = Objects.requireNonNull(hubName);
            return this;
        }
        public Builder hubName(String hubName) {
            this.hubName = Output.of(Objects.requireNonNull(hubName));
            return this;
        }
        public Builder mappingName(@Nullable Output<String> mappingName) {
            this.mappingName = mappingName;
            return this;
        }
        public Builder mappingName(@Nullable String mappingName) {
            this.mappingName = Codegen.ofNullable(mappingName);
            return this;
        }
        public Builder mappingProperties(Output<ConnectorMappingPropertiesArgs> mappingProperties) {
            this.mappingProperties = Objects.requireNonNull(mappingProperties);
            return this;
        }
        public Builder mappingProperties(ConnectorMappingPropertiesArgs mappingProperties) {
            this.mappingProperties = Output.of(Objects.requireNonNull(mappingProperties));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }        public ConnectorMappingArgs build() {
            return new ConnectorMappingArgs(connectorName, connectorType, description, displayName, entityType, entityTypeName, hubName, mappingName, mappingProperties, resourceGroupName);
        }
    }
}
