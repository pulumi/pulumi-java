// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databricks;

import io.pulumi.azurenative.databricks.inputs.AddressSpaceArgs;
import io.pulumi.azurenative.databricks.inputs.VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetworkArgs;
import io.pulumi.azurenative.databricks.inputs.VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetworkArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VNetPeeringArgs extends io.pulumi.resources.ResourceArgs {

    public static final VNetPeeringArgs Empty = new VNetPeeringArgs();

    /**
     * Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     * 
     */
    @InputImport(name="allowForwardedTraffic")
      private final @Nullable Output<Boolean> allowForwardedTraffic;

    public Output<Boolean> getAllowForwardedTraffic() {
        return this.allowForwardedTraffic == null ? Output.empty() : this.allowForwardedTraffic;
    }

    /**
     * If gateway links can be used in remote virtual networking to link to this virtual network.
     * 
     */
    @InputImport(name="allowGatewayTransit")
      private final @Nullable Output<Boolean> allowGatewayTransit;

    public Output<Boolean> getAllowGatewayTransit() {
        return this.allowGatewayTransit == null ? Output.empty() : this.allowGatewayTransit;
    }

    /**
     * Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     * 
     */
    @InputImport(name="allowVirtualNetworkAccess")
      private final @Nullable Output<Boolean> allowVirtualNetworkAccess;

    public Output<Boolean> getAllowVirtualNetworkAccess() {
        return this.allowVirtualNetworkAccess == null ? Output.empty() : this.allowVirtualNetworkAccess;
    }

    /**
     * The reference to the databricks virtual network address space.
     * 
     */
    @InputImport(name="databricksAddressSpace")
      private final @Nullable Output<AddressSpaceArgs> databricksAddressSpace;

    public Output<AddressSpaceArgs> getDatabricksAddressSpace() {
        return this.databricksAddressSpace == null ? Output.empty() : this.databricksAddressSpace;
    }

    /**
     *  The remote virtual network should be in the same region. See here to learn more (https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering).
     * 
     */
    @InputImport(name="databricksVirtualNetwork")
      private final @Nullable Output<VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetworkArgs> databricksVirtualNetwork;

    public Output<VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetworkArgs> getDatabricksVirtualNetwork() {
        return this.databricksVirtualNetwork == null ? Output.empty() : this.databricksVirtualNetwork;
    }

    /**
     * The name of the workspace vNet peering.
     * 
     */
    @InputImport(name="peeringName")
      private final @Nullable Output<String> peeringName;

    public Output<String> getPeeringName() {
        return this.peeringName == null ? Output.empty() : this.peeringName;
    }

    /**
     * The reference to the remote virtual network address space.
     * 
     */
    @InputImport(name="remoteAddressSpace")
      private final @Nullable Output<AddressSpaceArgs> remoteAddressSpace;

    public Output<AddressSpaceArgs> getRemoteAddressSpace() {
        return this.remoteAddressSpace == null ? Output.empty() : this.remoteAddressSpace;
    }

    /**
     *  The remote virtual network should be in the same region. See here to learn more (https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering).
     * 
     */
    @InputImport(name="remoteVirtualNetwork", required=true)
      private final Output<VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetworkArgs> remoteVirtualNetwork;

    public Output<VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetworkArgs> getRemoteVirtualNetwork() {
        return this.remoteVirtualNetwork;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     * 
     */
    @InputImport(name="useRemoteGateways")
      private final @Nullable Output<Boolean> useRemoteGateways;

    public Output<Boolean> getUseRemoteGateways() {
        return this.useRemoteGateways == null ? Output.empty() : this.useRemoteGateways;
    }

    /**
     * The name of the workspace.
     * 
     */
    @InputImport(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public VNetPeeringArgs(
        @Nullable Output<Boolean> allowForwardedTraffic,
        @Nullable Output<Boolean> allowGatewayTransit,
        @Nullable Output<Boolean> allowVirtualNetworkAccess,
        @Nullable Output<AddressSpaceArgs> databricksAddressSpace,
        @Nullable Output<VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetworkArgs> databricksVirtualNetwork,
        @Nullable Output<String> peeringName,
        @Nullable Output<AddressSpaceArgs> remoteAddressSpace,
        Output<VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetworkArgs> remoteVirtualNetwork,
        Output<String> resourceGroupName,
        @Nullable Output<Boolean> useRemoteGateways,
        Output<String> workspaceName) {
        this.allowForwardedTraffic = allowForwardedTraffic;
        this.allowGatewayTransit = allowGatewayTransit;
        this.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
        this.databricksAddressSpace = databricksAddressSpace;
        this.databricksVirtualNetwork = databricksVirtualNetwork;
        this.peeringName = peeringName;
        this.remoteAddressSpace = remoteAddressSpace;
        this.remoteVirtualNetwork = Objects.requireNonNull(remoteVirtualNetwork, "expected parameter 'remoteVirtualNetwork' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.useRemoteGateways = useRemoteGateways;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private VNetPeeringArgs() {
        this.allowForwardedTraffic = Output.empty();
        this.allowGatewayTransit = Output.empty();
        this.allowVirtualNetworkAccess = Output.empty();
        this.databricksAddressSpace = Output.empty();
        this.databricksVirtualNetwork = Output.empty();
        this.peeringName = Output.empty();
        this.remoteAddressSpace = Output.empty();
        this.remoteVirtualNetwork = Output.empty();
        this.resourceGroupName = Output.empty();
        this.useRemoteGateways = Output.empty();
        this.workspaceName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VNetPeeringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowForwardedTraffic;
        private @Nullable Output<Boolean> allowGatewayTransit;
        private @Nullable Output<Boolean> allowVirtualNetworkAccess;
        private @Nullable Output<AddressSpaceArgs> databricksAddressSpace;
        private @Nullable Output<VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetworkArgs> databricksVirtualNetwork;
        private @Nullable Output<String> peeringName;
        private @Nullable Output<AddressSpaceArgs> remoteAddressSpace;
        private Output<VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetworkArgs> remoteVirtualNetwork;
        private Output<String> resourceGroupName;
        private @Nullable Output<Boolean> useRemoteGateways;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(VNetPeeringArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowForwardedTraffic = defaults.allowForwardedTraffic;
    	      this.allowGatewayTransit = defaults.allowGatewayTransit;
    	      this.allowVirtualNetworkAccess = defaults.allowVirtualNetworkAccess;
    	      this.databricksAddressSpace = defaults.databricksAddressSpace;
    	      this.databricksVirtualNetwork = defaults.databricksVirtualNetwork;
    	      this.peeringName = defaults.peeringName;
    	      this.remoteAddressSpace = defaults.remoteAddressSpace;
    	      this.remoteVirtualNetwork = defaults.remoteVirtualNetwork;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.useRemoteGateways = defaults.useRemoteGateways;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder allowForwardedTraffic(@Nullable Output<Boolean> allowForwardedTraffic) {
            this.allowForwardedTraffic = allowForwardedTraffic;
            return this;
        }

        public Builder allowForwardedTraffic(@Nullable Boolean allowForwardedTraffic) {
            this.allowForwardedTraffic = Output.ofNullable(allowForwardedTraffic);
            return this;
        }

        public Builder allowGatewayTransit(@Nullable Output<Boolean> allowGatewayTransit) {
            this.allowGatewayTransit = allowGatewayTransit;
            return this;
        }

        public Builder allowGatewayTransit(@Nullable Boolean allowGatewayTransit) {
            this.allowGatewayTransit = Output.ofNullable(allowGatewayTransit);
            return this;
        }

        public Builder allowVirtualNetworkAccess(@Nullable Output<Boolean> allowVirtualNetworkAccess) {
            this.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
            return this;
        }

        public Builder allowVirtualNetworkAccess(@Nullable Boolean allowVirtualNetworkAccess) {
            this.allowVirtualNetworkAccess = Output.ofNullable(allowVirtualNetworkAccess);
            return this;
        }

        public Builder databricksAddressSpace(@Nullable Output<AddressSpaceArgs> databricksAddressSpace) {
            this.databricksAddressSpace = databricksAddressSpace;
            return this;
        }

        public Builder databricksAddressSpace(@Nullable AddressSpaceArgs databricksAddressSpace) {
            this.databricksAddressSpace = Output.ofNullable(databricksAddressSpace);
            return this;
        }

        public Builder databricksVirtualNetwork(@Nullable Output<VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetworkArgs> databricksVirtualNetwork) {
            this.databricksVirtualNetwork = databricksVirtualNetwork;
            return this;
        }

        public Builder databricksVirtualNetwork(@Nullable VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetworkArgs databricksVirtualNetwork) {
            this.databricksVirtualNetwork = Output.ofNullable(databricksVirtualNetwork);
            return this;
        }

        public Builder peeringName(@Nullable Output<String> peeringName) {
            this.peeringName = peeringName;
            return this;
        }

        public Builder peeringName(@Nullable String peeringName) {
            this.peeringName = Output.ofNullable(peeringName);
            return this;
        }

        public Builder remoteAddressSpace(@Nullable Output<AddressSpaceArgs> remoteAddressSpace) {
            this.remoteAddressSpace = remoteAddressSpace;
            return this;
        }

        public Builder remoteAddressSpace(@Nullable AddressSpaceArgs remoteAddressSpace) {
            this.remoteAddressSpace = Output.ofNullable(remoteAddressSpace);
            return this;
        }

        public Builder remoteVirtualNetwork(Output<VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetworkArgs> remoteVirtualNetwork) {
            this.remoteVirtualNetwork = Objects.requireNonNull(remoteVirtualNetwork);
            return this;
        }

        public Builder remoteVirtualNetwork(VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetworkArgs remoteVirtualNetwork) {
            this.remoteVirtualNetwork = Output.of(Objects.requireNonNull(remoteVirtualNetwork));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder useRemoteGateways(@Nullable Output<Boolean> useRemoteGateways) {
            this.useRemoteGateways = useRemoteGateways;
            return this;
        }

        public Builder useRemoteGateways(@Nullable Boolean useRemoteGateways) {
            this.useRemoteGateways = Output.ofNullable(useRemoteGateways);
            return this;
        }

        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public VNetPeeringArgs build() {
            return new VNetPeeringArgs(allowForwardedTraffic, allowGatewayTransit, allowVirtualNetworkAccess, databricksAddressSpace, databricksVirtualNetwork, peeringName, remoteAddressSpace, remoteVirtualNetwork, resourceGroupName, useRemoteGateways, workspaceName);
        }
    }
}
