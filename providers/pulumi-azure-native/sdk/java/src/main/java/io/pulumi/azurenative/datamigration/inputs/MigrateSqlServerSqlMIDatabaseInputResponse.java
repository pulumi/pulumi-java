// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.inputs;

import io.pulumi.azurenative.datamigration.inputs.FileShareResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
 * 
 */
public final class MigrateSqlServerSqlMIDatabaseInputResponse extends io.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlMIDatabaseInputResponse Empty = new MigrateSqlServerSqlMIDatabaseInputResponse();

    /**
     * The list of backup files to be used in case of existing backups.
     * 
     */
    @InputImport(name="backupFilePaths")
      private final @Nullable List<String> backupFilePaths;

    public List<String> getBackupFilePaths() {
        return this.backupFilePaths == null ? List.of() : this.backupFilePaths;
    }

    /**
     * Backup file share information for backing up this database.
     * 
     */
    @InputImport(name="backupFileShare")
      private final @Nullable FileShareResponse backupFileShare;

    public Optional<FileShareResponse> getBackupFileShare() {
        return this.backupFileShare == null ? Optional.empty() : Optional.ofNullable(this.backupFileShare);
    }

    /**
     * Name of the database
     * 
     */
    @InputImport(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * Name of the database at destination
     * 
     */
    @InputImport(name="restoreDatabaseName", required=true)
      private final String restoreDatabaseName;

    public String getRestoreDatabaseName() {
        return this.restoreDatabaseName;
    }

    public MigrateSqlServerSqlMIDatabaseInputResponse(
        @Nullable List<String> backupFilePaths,
        @Nullable FileShareResponse backupFileShare,
        String name,
        String restoreDatabaseName) {
        this.backupFilePaths = backupFilePaths;
        this.backupFileShare = backupFileShare;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.restoreDatabaseName = Objects.requireNonNull(restoreDatabaseName, "expected parameter 'restoreDatabaseName' to be non-null");
    }

    private MigrateSqlServerSqlMIDatabaseInputResponse() {
        this.backupFilePaths = List.of();
        this.backupFileShare = null;
        this.name = null;
        this.restoreDatabaseName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlMIDatabaseInputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> backupFilePaths;
        private @Nullable FileShareResponse backupFileShare;
        private String name;
        private String restoreDatabaseName;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrateSqlServerSqlMIDatabaseInputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupFilePaths = defaults.backupFilePaths;
    	      this.backupFileShare = defaults.backupFileShare;
    	      this.name = defaults.name;
    	      this.restoreDatabaseName = defaults.restoreDatabaseName;
        }

        public Builder backupFilePaths(@Nullable List<String> backupFilePaths) {
            this.backupFilePaths = backupFilePaths;
            return this;
        }

        public Builder backupFileShare(@Nullable FileShareResponse backupFileShare) {
            this.backupFileShare = backupFileShare;
            return this;
        }

        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder restoreDatabaseName(String restoreDatabaseName) {
            this.restoreDatabaseName = Objects.requireNonNull(restoreDatabaseName);
            return this;
        }
        public MigrateSqlServerSqlMIDatabaseInputResponse build() {
            return new MigrateSqlServerSqlMIDatabaseInputResponse(backupFilePaths, backupFileShare, name, restoreDatabaseName);
        }
    }
}
