// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.eventgrid;

import io.pulumi.azurenative.eventgrid.enums.InputSchema;
import io.pulumi.azurenative.eventgrid.enums.PublicNetworkAccess;
import io.pulumi.azurenative.eventgrid.inputs.InboundIpRuleArgs;
import io.pulumi.azurenative.eventgrid.inputs.JsonInputSchemaMappingArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainArgs extends io.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    /**
     * Name of the domain.
     * 
     */
    @InputImport(name="domainName")
      private final @Nullable Output<String> domainName;

    public Output<String> getDomainName() {
        return this.domainName == null ? Output.empty() : this.domainName;
    }

    /**
     * This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
     * 
     */
    @InputImport(name="inboundIpRules")
      private final @Nullable Output<List<InboundIpRuleArgs>> inboundIpRules;

    public Output<List<InboundIpRuleArgs>> getInboundIpRules() {
        return this.inboundIpRules == null ? Output.empty() : this.inboundIpRules;
    }

    /**
     * This determines the format that Event Grid should expect for incoming events published to the domain.
     * 
     */
    @InputImport(name="inputSchema")
      private final @Nullable Output<Either<String,InputSchema>> inputSchema;

    public Output<Either<String,InputSchema>> getInputSchema() {
        return this.inputSchema == null ? Output.empty() : this.inputSchema;
    }

    /**
     * Information about the InputSchemaMapping which specified the info about mapping event payload.
     * 
     */
    @InputImport(name="inputSchemaMapping")
      private final @Nullable Output<JsonInputSchemaMappingArgs> inputSchemaMapping;

    public Output<JsonInputSchemaMappingArgs> getInputSchemaMapping() {
        return this.inputSchemaMapping == null ? Output.empty() : this.inputSchemaMapping;
    }

    /**
     * Location of the resource.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * This determines if traffic is allowed over public network. By default it is enabled.
     * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" />
     * 
     */
    @InputImport(name="publicNetworkAccess")
      private final @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;

    public Output<Either<String,PublicNetworkAccess>> getPublicNetworkAccess() {
        return this.publicNetworkAccess == null ? Output.empty() : this.publicNetworkAccess;
    }

    /**
     * The name of the resource group within the user's subscription.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Tags of the resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DomainArgs(
        @Nullable Output<String> domainName,
        @Nullable Output<List<InboundIpRuleArgs>> inboundIpRules,
        @Nullable Output<Either<String,InputSchema>> inputSchema,
        @Nullable Output<JsonInputSchemaMappingArgs> inputSchemaMapping,
        @Nullable Output<String> location,
        @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags) {
        this.domainName = domainName;
        this.inboundIpRules = inboundIpRules;
        this.inputSchema = inputSchema == null ? Output.ofLeft("EventGridSchema") : inputSchema;
        this.inputSchemaMapping = inputSchemaMapping;
        this.location = location;
        this.publicNetworkAccess = publicNetworkAccess == null ? Output.ofLeft("Enabled") : publicNetworkAccess;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private DomainArgs() {
        this.domainName = Output.empty();
        this.inboundIpRules = Output.empty();
        this.inputSchema = Output.empty();
        this.inputSchemaMapping = Output.empty();
        this.location = Output.empty();
        this.publicNetworkAccess = Output.empty();
        this.resourceGroupName = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> domainName;
        private @Nullable Output<List<InboundIpRuleArgs>> inboundIpRules;
        private @Nullable Output<Either<String,InputSchema>> inputSchema;
        private @Nullable Output<JsonInputSchemaMappingArgs> inputSchemaMapping;
        private @Nullable Output<String> location;
        private @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.inboundIpRules = defaults.inboundIpRules;
    	      this.inputSchema = defaults.inputSchema;
    	      this.inputSchemaMapping = defaults.inputSchemaMapping;
    	      this.location = defaults.location;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            this.domainName = domainName;
            return this;
        }

        public Builder domainName(@Nullable String domainName) {
            this.domainName = Output.ofNullable(domainName);
            return this;
        }

        public Builder inboundIpRules(@Nullable Output<List<InboundIpRuleArgs>> inboundIpRules) {
            this.inboundIpRules = inboundIpRules;
            return this;
        }

        public Builder inboundIpRules(@Nullable List<InboundIpRuleArgs> inboundIpRules) {
            this.inboundIpRules = Output.ofNullable(inboundIpRules);
            return this;
        }

        public Builder inputSchema(@Nullable Output<Either<String,InputSchema>> inputSchema) {
            this.inputSchema = inputSchema;
            return this;
        }

        public Builder inputSchema(@Nullable Either<String,InputSchema> inputSchema) {
            this.inputSchema = Output.ofNullable(inputSchema);
            return this;
        }

        public Builder inputSchemaMapping(@Nullable Output<JsonInputSchemaMappingArgs> inputSchemaMapping) {
            this.inputSchemaMapping = inputSchemaMapping;
            return this;
        }

        public Builder inputSchemaMapping(@Nullable JsonInputSchemaMappingArgs inputSchemaMapping) {
            this.inputSchemaMapping = Output.ofNullable(inputSchemaMapping);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder publicNetworkAccess(@Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publicNetworkAccess(@Nullable Either<String,PublicNetworkAccess> publicNetworkAccess) {
            this.publicNetworkAccess = Output.ofNullable(publicNetworkAccess);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public DomainArgs build() {
            return new DomainArgs(domainName, inboundIpRules, inputSchema, inputSchemaMapping, location, publicNetworkAccess, resourceGroupName, tags);
        }
    }
}
