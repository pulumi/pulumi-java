// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.outputs;

import io.pulumi.azurenative.web.outputs.HostNameSslStateResponse;
import io.pulumi.azurenative.web.outputs.HostingEnvironmentProfileResponse;
import io.pulumi.azurenative.web.outputs.ManagedServiceIdentityResponse;
import io.pulumi.azurenative.web.outputs.SiteConfigResponse;
import io.pulumi.azurenative.web.outputs.SlotSwapStatusResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetWebAppSlotResult {
    private final String availabilityState;
    private final @Nullable Boolean clientAffinityEnabled;
    private final @Nullable Boolean clientCertEnabled;
    private final @Nullable String clientCertExclusionPaths;
    private final @Nullable String clientCertMode;
    private final @Nullable Integer containerSize;
    private final @Nullable String customDomainVerificationId;
    private final @Nullable Integer dailyMemoryTimeQuota;
    private final String defaultHostName;
    private final @Nullable Boolean enabled;
    private final List<String> enabledHostNames;
    private final @Nullable List<HostNameSslStateResponse> hostNameSslStates;
    private final List<String> hostNames;
    private final @Nullable Boolean hostNamesDisabled;
    private final @Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile;
    private final @Nullable Boolean httpsOnly;
    private final @Nullable Boolean hyperV;
    private final String id;
    private final @Nullable ManagedServiceIdentityResponse identity;
    private final String inProgressOperationId;
    private final Boolean isDefaultContainer;
    private final @Nullable Boolean isXenon;
    private final @Nullable String keyVaultReferenceIdentity;
    private final @Nullable String kind;
    private final String lastModifiedTimeUtc;
    private final String location;
    private final Integer maxNumberOfWorkers;
    private final String name;
    private final String outboundIpAddresses;
    private final String possibleOutboundIpAddresses;
    private final @Nullable String redundancyMode;
    private final String repositorySiteName;
    private final @Nullable Boolean reserved;
    private final String resourceGroup;
    private final @Nullable Boolean scmSiteAlsoStopped;
    private final @Nullable String serverFarmId;
    private final @Nullable SiteConfigResponse siteConfig;
    private final SlotSwapStatusResponse slotSwapStatus;
    private final String state;
    private final @Nullable Boolean storageAccountRequired;
    private final String suspendedTill;
    private final @Nullable Map<String,String> tags;
    private final String targetSwapSlot;
    private final List<String> trafficManagerHostNames;
    private final String type;
    private final String usageState;
    private final @Nullable String virtualNetworkSubnetId;

    @OutputCustomType.Constructor({"availabilityState","clientAffinityEnabled","clientCertEnabled","clientCertExclusionPaths","clientCertMode","containerSize","customDomainVerificationId","dailyMemoryTimeQuota","defaultHostName","enabled","enabledHostNames","hostNameSslStates","hostNames","hostNamesDisabled","hostingEnvironmentProfile","httpsOnly","hyperV","id","identity","inProgressOperationId","isDefaultContainer","isXenon","keyVaultReferenceIdentity","kind","lastModifiedTimeUtc","location","maxNumberOfWorkers","name","outboundIpAddresses","possibleOutboundIpAddresses","redundancyMode","repositorySiteName","reserved","resourceGroup","scmSiteAlsoStopped","serverFarmId","siteConfig","slotSwapStatus","state","storageAccountRequired","suspendedTill","tags","targetSwapSlot","trafficManagerHostNames","type","usageState","virtualNetworkSubnetId"})
    private GetWebAppSlotResult(
        String availabilityState,
        @Nullable Boolean clientAffinityEnabled,
        @Nullable Boolean clientCertEnabled,
        @Nullable String clientCertExclusionPaths,
        @Nullable String clientCertMode,
        @Nullable Integer containerSize,
        @Nullable String customDomainVerificationId,
        @Nullable Integer dailyMemoryTimeQuota,
        String defaultHostName,
        @Nullable Boolean enabled,
        List<String> enabledHostNames,
        @Nullable List<HostNameSslStateResponse> hostNameSslStates,
        List<String> hostNames,
        @Nullable Boolean hostNamesDisabled,
        @Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile,
        @Nullable Boolean httpsOnly,
        @Nullable Boolean hyperV,
        String id,
        @Nullable ManagedServiceIdentityResponse identity,
        String inProgressOperationId,
        Boolean isDefaultContainer,
        @Nullable Boolean isXenon,
        @Nullable String keyVaultReferenceIdentity,
        @Nullable String kind,
        String lastModifiedTimeUtc,
        String location,
        Integer maxNumberOfWorkers,
        String name,
        String outboundIpAddresses,
        String possibleOutboundIpAddresses,
        @Nullable String redundancyMode,
        String repositorySiteName,
        @Nullable Boolean reserved,
        String resourceGroup,
        @Nullable Boolean scmSiteAlsoStopped,
        @Nullable String serverFarmId,
        @Nullable SiteConfigResponse siteConfig,
        SlotSwapStatusResponse slotSwapStatus,
        String state,
        @Nullable Boolean storageAccountRequired,
        String suspendedTill,
        @Nullable Map<String,String> tags,
        String targetSwapSlot,
        List<String> trafficManagerHostNames,
        String type,
        String usageState,
        @Nullable String virtualNetworkSubnetId) {
        this.availabilityState = Objects.requireNonNull(availabilityState);
        this.clientAffinityEnabled = clientAffinityEnabled;
        this.clientCertEnabled = clientCertEnabled;
        this.clientCertExclusionPaths = clientCertExclusionPaths;
        this.clientCertMode = clientCertMode;
        this.containerSize = containerSize;
        this.customDomainVerificationId = customDomainVerificationId;
        this.dailyMemoryTimeQuota = dailyMemoryTimeQuota;
        this.defaultHostName = Objects.requireNonNull(defaultHostName);
        this.enabled = enabled;
        this.enabledHostNames = Objects.requireNonNull(enabledHostNames);
        this.hostNameSslStates = hostNameSslStates;
        this.hostNames = Objects.requireNonNull(hostNames);
        this.hostNamesDisabled = hostNamesDisabled;
        this.hostingEnvironmentProfile = hostingEnvironmentProfile;
        this.httpsOnly = httpsOnly;
        this.hyperV = hyperV;
        this.id = Objects.requireNonNull(id);
        this.identity = identity;
        this.inProgressOperationId = Objects.requireNonNull(inProgressOperationId);
        this.isDefaultContainer = Objects.requireNonNull(isDefaultContainer);
        this.isXenon = isXenon;
        this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
        this.kind = kind;
        this.lastModifiedTimeUtc = Objects.requireNonNull(lastModifiedTimeUtc);
        this.location = Objects.requireNonNull(location);
        this.maxNumberOfWorkers = Objects.requireNonNull(maxNumberOfWorkers);
        this.name = Objects.requireNonNull(name);
        this.outboundIpAddresses = Objects.requireNonNull(outboundIpAddresses);
        this.possibleOutboundIpAddresses = Objects.requireNonNull(possibleOutboundIpAddresses);
        this.redundancyMode = redundancyMode;
        this.repositorySiteName = Objects.requireNonNull(repositorySiteName);
        this.reserved = reserved;
        this.resourceGroup = Objects.requireNonNull(resourceGroup);
        this.scmSiteAlsoStopped = scmSiteAlsoStopped;
        this.serverFarmId = serverFarmId;
        this.siteConfig = siteConfig;
        this.slotSwapStatus = Objects.requireNonNull(slotSwapStatus);
        this.state = Objects.requireNonNull(state);
        this.storageAccountRequired = storageAccountRequired;
        this.suspendedTill = Objects.requireNonNull(suspendedTill);
        this.tags = tags;
        this.targetSwapSlot = Objects.requireNonNull(targetSwapSlot);
        this.trafficManagerHostNames = Objects.requireNonNull(trafficManagerHostNames);
        this.type = Objects.requireNonNull(type);
        this.usageState = Objects.requireNonNull(usageState);
        this.virtualNetworkSubnetId = virtualNetworkSubnetId;
    }

    public String getAvailabilityState() {
        return this.availabilityState;
    }
    public Optional<Boolean> getClientAffinityEnabled() {
        return Optional.ofNullable(this.clientAffinityEnabled);
    }
    public Optional<Boolean> getClientCertEnabled() {
        return Optional.ofNullable(this.clientCertEnabled);
    }
    public Optional<String> getClientCertExclusionPaths() {
        return Optional.ofNullable(this.clientCertExclusionPaths);
    }
    public Optional<String> getClientCertMode() {
        return Optional.ofNullable(this.clientCertMode);
    }
    public Optional<Integer> getContainerSize() {
        return Optional.ofNullable(this.containerSize);
    }
    public Optional<String> getCustomDomainVerificationId() {
        return Optional.ofNullable(this.customDomainVerificationId);
    }
    public Optional<Integer> getDailyMemoryTimeQuota() {
        return Optional.ofNullable(this.dailyMemoryTimeQuota);
    }
    public String getDefaultHostName() {
        return this.defaultHostName;
    }
    public Optional<Boolean> getEnabled() {
        return Optional.ofNullable(this.enabled);
    }
    public List<String> getEnabledHostNames() {
        return this.enabledHostNames;
    }
    public List<HostNameSslStateResponse> getHostNameSslStates() {
        return this.hostNameSslStates == null ? List.of() : this.hostNameSslStates;
    }
    public List<String> getHostNames() {
        return this.hostNames;
    }
    public Optional<Boolean> getHostNamesDisabled() {
        return Optional.ofNullable(this.hostNamesDisabled);
    }
    public Optional<HostingEnvironmentProfileResponse> getHostingEnvironmentProfile() {
        return Optional.ofNullable(this.hostingEnvironmentProfile);
    }
    public Optional<Boolean> getHttpsOnly() {
        return Optional.ofNullable(this.httpsOnly);
    }
    public Optional<Boolean> getHyperV() {
        return Optional.ofNullable(this.hyperV);
    }
    public String getId() {
        return this.id;
    }
    public Optional<ManagedServiceIdentityResponse> getIdentity() {
        return Optional.ofNullable(this.identity);
    }
    public String getInProgressOperationId() {
        return this.inProgressOperationId;
    }
    public Boolean getIsDefaultContainer() {
        return this.isDefaultContainer;
    }
    public Optional<Boolean> getIsXenon() {
        return Optional.ofNullable(this.isXenon);
    }
    public Optional<String> getKeyVaultReferenceIdentity() {
        return Optional.ofNullable(this.keyVaultReferenceIdentity);
    }
    public Optional<String> getKind() {
        return Optional.ofNullable(this.kind);
    }
    public String getLastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }
    public String getLocation() {
        return this.location;
    }
    public Integer getMaxNumberOfWorkers() {
        return this.maxNumberOfWorkers;
    }
    public String getName() {
        return this.name;
    }
    public String getOutboundIpAddresses() {
        return this.outboundIpAddresses;
    }
    public String getPossibleOutboundIpAddresses() {
        return this.possibleOutboundIpAddresses;
    }
    public Optional<String> getRedundancyMode() {
        return Optional.ofNullable(this.redundancyMode);
    }
    public String getRepositorySiteName() {
        return this.repositorySiteName;
    }
    public Optional<Boolean> getReserved() {
        return Optional.ofNullable(this.reserved);
    }
    public String getResourceGroup() {
        return this.resourceGroup;
    }
    public Optional<Boolean> getScmSiteAlsoStopped() {
        return Optional.ofNullable(this.scmSiteAlsoStopped);
    }
    public Optional<String> getServerFarmId() {
        return Optional.ofNullable(this.serverFarmId);
    }
    public Optional<SiteConfigResponse> getSiteConfig() {
        return Optional.ofNullable(this.siteConfig);
    }
    public SlotSwapStatusResponse getSlotSwapStatus() {
        return this.slotSwapStatus;
    }
    public String getState() {
        return this.state;
    }
    public Optional<Boolean> getStorageAccountRequired() {
        return Optional.ofNullable(this.storageAccountRequired);
    }
    public String getSuspendedTill() {
        return this.suspendedTill;
    }
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String getTargetSwapSlot() {
        return this.targetSwapSlot;
    }
    public List<String> getTrafficManagerHostNames() {
        return this.trafficManagerHostNames;
    }
    public String getType() {
        return this.type;
    }
    public String getUsageState() {
        return this.usageState;
    }
    public Optional<String> getVirtualNetworkSubnetId() {
        return Optional.ofNullable(this.virtualNetworkSubnetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebAppSlotResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String availabilityState;
        private @Nullable Boolean clientAffinityEnabled;
        private @Nullable Boolean clientCertEnabled;
        private @Nullable String clientCertExclusionPaths;
        private @Nullable String clientCertMode;
        private @Nullable Integer containerSize;
        private @Nullable String customDomainVerificationId;
        private @Nullable Integer dailyMemoryTimeQuota;
        private String defaultHostName;
        private @Nullable Boolean enabled;
        private List<String> enabledHostNames;
        private @Nullable List<HostNameSslStateResponse> hostNameSslStates;
        private List<String> hostNames;
        private @Nullable Boolean hostNamesDisabled;
        private @Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile;
        private @Nullable Boolean httpsOnly;
        private @Nullable Boolean hyperV;
        private String id;
        private @Nullable ManagedServiceIdentityResponse identity;
        private String inProgressOperationId;
        private Boolean isDefaultContainer;
        private @Nullable Boolean isXenon;
        private @Nullable String keyVaultReferenceIdentity;
        private @Nullable String kind;
        private String lastModifiedTimeUtc;
        private String location;
        private Integer maxNumberOfWorkers;
        private String name;
        private String outboundIpAddresses;
        private String possibleOutboundIpAddresses;
        private @Nullable String redundancyMode;
        private String repositorySiteName;
        private @Nullable Boolean reserved;
        private String resourceGroup;
        private @Nullable Boolean scmSiteAlsoStopped;
        private @Nullable String serverFarmId;
        private @Nullable SiteConfigResponse siteConfig;
        private SlotSwapStatusResponse slotSwapStatus;
        private String state;
        private @Nullable Boolean storageAccountRequired;
        private String suspendedTill;
        private @Nullable Map<String,String> tags;
        private String targetSwapSlot;
        private List<String> trafficManagerHostNames;
        private String type;
        private String usageState;
        private @Nullable String virtualNetworkSubnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetWebAppSlotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityState = defaults.availabilityState;
    	      this.clientAffinityEnabled = defaults.clientAffinityEnabled;
    	      this.clientCertEnabled = defaults.clientCertEnabled;
    	      this.clientCertExclusionPaths = defaults.clientCertExclusionPaths;
    	      this.clientCertMode = defaults.clientCertMode;
    	      this.containerSize = defaults.containerSize;
    	      this.customDomainVerificationId = defaults.customDomainVerificationId;
    	      this.dailyMemoryTimeQuota = defaults.dailyMemoryTimeQuota;
    	      this.defaultHostName = defaults.defaultHostName;
    	      this.enabled = defaults.enabled;
    	      this.enabledHostNames = defaults.enabledHostNames;
    	      this.hostNameSslStates = defaults.hostNameSslStates;
    	      this.hostNames = defaults.hostNames;
    	      this.hostNamesDisabled = defaults.hostNamesDisabled;
    	      this.hostingEnvironmentProfile = defaults.hostingEnvironmentProfile;
    	      this.httpsOnly = defaults.httpsOnly;
    	      this.hyperV = defaults.hyperV;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.inProgressOperationId = defaults.inProgressOperationId;
    	      this.isDefaultContainer = defaults.isDefaultContainer;
    	      this.isXenon = defaults.isXenon;
    	      this.keyVaultReferenceIdentity = defaults.keyVaultReferenceIdentity;
    	      this.kind = defaults.kind;
    	      this.lastModifiedTimeUtc = defaults.lastModifiedTimeUtc;
    	      this.location = defaults.location;
    	      this.maxNumberOfWorkers = defaults.maxNumberOfWorkers;
    	      this.name = defaults.name;
    	      this.outboundIpAddresses = defaults.outboundIpAddresses;
    	      this.possibleOutboundIpAddresses = defaults.possibleOutboundIpAddresses;
    	      this.redundancyMode = defaults.redundancyMode;
    	      this.repositorySiteName = defaults.repositorySiteName;
    	      this.reserved = defaults.reserved;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.scmSiteAlsoStopped = defaults.scmSiteAlsoStopped;
    	      this.serverFarmId = defaults.serverFarmId;
    	      this.siteConfig = defaults.siteConfig;
    	      this.slotSwapStatus = defaults.slotSwapStatus;
    	      this.state = defaults.state;
    	      this.storageAccountRequired = defaults.storageAccountRequired;
    	      this.suspendedTill = defaults.suspendedTill;
    	      this.tags = defaults.tags;
    	      this.targetSwapSlot = defaults.targetSwapSlot;
    	      this.trafficManagerHostNames = defaults.trafficManagerHostNames;
    	      this.type = defaults.type;
    	      this.usageState = defaults.usageState;
    	      this.virtualNetworkSubnetId = defaults.virtualNetworkSubnetId;
        }

        public Builder setAvailabilityState(String availabilityState) {
            this.availabilityState = Objects.requireNonNull(availabilityState);
            return this;
        }

        public Builder setClientAffinityEnabled(@Nullable Boolean clientAffinityEnabled) {
            this.clientAffinityEnabled = clientAffinityEnabled;
            return this;
        }

        public Builder setClientCertEnabled(@Nullable Boolean clientCertEnabled) {
            this.clientCertEnabled = clientCertEnabled;
            return this;
        }

        public Builder setClientCertExclusionPaths(@Nullable String clientCertExclusionPaths) {
            this.clientCertExclusionPaths = clientCertExclusionPaths;
            return this;
        }

        public Builder setClientCertMode(@Nullable String clientCertMode) {
            this.clientCertMode = clientCertMode;
            return this;
        }

        public Builder setContainerSize(@Nullable Integer containerSize) {
            this.containerSize = containerSize;
            return this;
        }

        public Builder setCustomDomainVerificationId(@Nullable String customDomainVerificationId) {
            this.customDomainVerificationId = customDomainVerificationId;
            return this;
        }

        public Builder setDailyMemoryTimeQuota(@Nullable Integer dailyMemoryTimeQuota) {
            this.dailyMemoryTimeQuota = dailyMemoryTimeQuota;
            return this;
        }

        public Builder setDefaultHostName(String defaultHostName) {
            this.defaultHostName = Objects.requireNonNull(defaultHostName);
            return this;
        }

        public Builder setEnabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder setEnabledHostNames(List<String> enabledHostNames) {
            this.enabledHostNames = Objects.requireNonNull(enabledHostNames);
            return this;
        }

        public Builder setHostNameSslStates(@Nullable List<HostNameSslStateResponse> hostNameSslStates) {
            this.hostNameSslStates = hostNameSslStates;
            return this;
        }

        public Builder setHostNames(List<String> hostNames) {
            this.hostNames = Objects.requireNonNull(hostNames);
            return this;
        }

        public Builder setHostNamesDisabled(@Nullable Boolean hostNamesDisabled) {
            this.hostNamesDisabled = hostNamesDisabled;
            return this;
        }

        public Builder setHostingEnvironmentProfile(@Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile) {
            this.hostingEnvironmentProfile = hostingEnvironmentProfile;
            return this;
        }

        public Builder setHttpsOnly(@Nullable Boolean httpsOnly) {
            this.httpsOnly = httpsOnly;
            return this;
        }

        public Builder setHyperV(@Nullable Boolean hyperV) {
            this.hyperV = hyperV;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIdentity(@Nullable ManagedServiceIdentityResponse identity) {
            this.identity = identity;
            return this;
        }

        public Builder setInProgressOperationId(String inProgressOperationId) {
            this.inProgressOperationId = Objects.requireNonNull(inProgressOperationId);
            return this;
        }

        public Builder setIsDefaultContainer(Boolean isDefaultContainer) {
            this.isDefaultContainer = Objects.requireNonNull(isDefaultContainer);
            return this;
        }

        public Builder setIsXenon(@Nullable Boolean isXenon) {
            this.isXenon = isXenon;
            return this;
        }

        public Builder setKeyVaultReferenceIdentity(@Nullable String keyVaultReferenceIdentity) {
            this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            return this;
        }

        public Builder setKind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }

        public Builder setLastModifiedTimeUtc(String lastModifiedTimeUtc) {
            this.lastModifiedTimeUtc = Objects.requireNonNull(lastModifiedTimeUtc);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setMaxNumberOfWorkers(Integer maxNumberOfWorkers) {
            this.maxNumberOfWorkers = Objects.requireNonNull(maxNumberOfWorkers);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setOutboundIpAddresses(String outboundIpAddresses) {
            this.outboundIpAddresses = Objects.requireNonNull(outboundIpAddresses);
            return this;
        }

        public Builder setPossibleOutboundIpAddresses(String possibleOutboundIpAddresses) {
            this.possibleOutboundIpAddresses = Objects.requireNonNull(possibleOutboundIpAddresses);
            return this;
        }

        public Builder setRedundancyMode(@Nullable String redundancyMode) {
            this.redundancyMode = redundancyMode;
            return this;
        }

        public Builder setRepositorySiteName(String repositorySiteName) {
            this.repositorySiteName = Objects.requireNonNull(repositorySiteName);
            return this;
        }

        public Builder setReserved(@Nullable Boolean reserved) {
            this.reserved = reserved;
            return this;
        }

        public Builder setResourceGroup(String resourceGroup) {
            this.resourceGroup = Objects.requireNonNull(resourceGroup);
            return this;
        }

        public Builder setScmSiteAlsoStopped(@Nullable Boolean scmSiteAlsoStopped) {
            this.scmSiteAlsoStopped = scmSiteAlsoStopped;
            return this;
        }

        public Builder setServerFarmId(@Nullable String serverFarmId) {
            this.serverFarmId = serverFarmId;
            return this;
        }

        public Builder setSiteConfig(@Nullable SiteConfigResponse siteConfig) {
            this.siteConfig = siteConfig;
            return this;
        }

        public Builder setSlotSwapStatus(SlotSwapStatusResponse slotSwapStatus) {
            this.slotSwapStatus = Objects.requireNonNull(slotSwapStatus);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setStorageAccountRequired(@Nullable Boolean storageAccountRequired) {
            this.storageAccountRequired = storageAccountRequired;
            return this;
        }

        public Builder setSuspendedTill(String suspendedTill) {
            this.suspendedTill = Objects.requireNonNull(suspendedTill);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTargetSwapSlot(String targetSwapSlot) {
            this.targetSwapSlot = Objects.requireNonNull(targetSwapSlot);
            return this;
        }

        public Builder setTrafficManagerHostNames(List<String> trafficManagerHostNames) {
            this.trafficManagerHostNames = Objects.requireNonNull(trafficManagerHostNames);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUsageState(String usageState) {
            this.usageState = Objects.requireNonNull(usageState);
            return this;
        }

        public Builder setVirtualNetworkSubnetId(@Nullable String virtualNetworkSubnetId) {
            this.virtualNetworkSubnetId = virtualNetworkSubnetId;
            return this;
        }

        public GetWebAppSlotResult build() {
            return new GetWebAppSlotResult(availabilityState, clientAffinityEnabled, clientCertEnabled, clientCertExclusionPaths, clientCertMode, containerSize, customDomainVerificationId, dailyMemoryTimeQuota, defaultHostName, enabled, enabledHostNames, hostNameSslStates, hostNames, hostNamesDisabled, hostingEnvironmentProfile, httpsOnly, hyperV, id, identity, inProgressOperationId, isDefaultContainer, isXenon, keyVaultReferenceIdentity, kind, lastModifiedTimeUtc, location, maxNumberOfWorkers, name, outboundIpAddresses, possibleOutboundIpAddresses, redundancyMode, repositorySiteName, reserved, resourceGroup, scmSiteAlsoStopped, serverFarmId, siteConfig, slotSwapStatus, state, storageAccountRequired, suspendedTill, tags, targetSwapSlot, trafficManagerHostNames, type, usageState, virtualNetworkSubnetId);
        }
    }
}
