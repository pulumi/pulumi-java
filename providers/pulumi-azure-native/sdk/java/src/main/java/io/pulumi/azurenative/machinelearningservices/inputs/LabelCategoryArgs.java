// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.azurenative.machinelearningservices.inputs.LabelClassArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a category of labels in a labeling job.
 * 
 */
public final class LabelCategoryArgs extends io.pulumi.resources.ResourceArgs {

    public static final LabelCategoryArgs Empty = new LabelCategoryArgs();

    /**
     * Indicates whether it is allowed to select multiple classes in this category.
     * 
     */
    @Import(name="allowMultiSelect")
      private final @Nullable Output<Boolean> allowMultiSelect;

    public Output<Boolean> getAllowMultiSelect() {
        return this.allowMultiSelect == null ? Output.empty() : this.allowMultiSelect;
    }

    /**
     * Dictionary of label classes in this category.
     * 
     */
    @Import(name="classes", required=true)
      private final Output<Map<String,LabelClassArgs>> classes;

    public Output<Map<String,LabelClassArgs>> getClasses() {
        return this.classes;
    }

    /**
     * Display name of the label category.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    public LabelCategoryArgs(
        @Nullable Output<Boolean> allowMultiSelect,
        Output<Map<String,LabelClassArgs>> classes,
        @Nullable Output<String> displayName) {
        this.allowMultiSelect = allowMultiSelect;
        this.classes = Objects.requireNonNull(classes, "expected parameter 'classes' to be non-null");
        this.displayName = displayName;
    }

    private LabelCategoryArgs() {
        this.allowMultiSelect = Output.empty();
        this.classes = Output.empty();
        this.displayName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LabelCategoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowMultiSelect;
        private Output<Map<String,LabelClassArgs>> classes;
        private @Nullable Output<String> displayName;

        public Builder() {
    	      // Empty
        }

        public Builder(LabelCategoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowMultiSelect = defaults.allowMultiSelect;
    	      this.classes = defaults.classes;
    	      this.displayName = defaults.displayName;
        }

        public Builder allowMultiSelect(@Nullable Output<Boolean> allowMultiSelect) {
            this.allowMultiSelect = allowMultiSelect;
            return this;
        }
        public Builder allowMultiSelect(@Nullable Boolean allowMultiSelect) {
            this.allowMultiSelect = Output.ofNullable(allowMultiSelect);
            return this;
        }
        public Builder classes(Output<Map<String,LabelClassArgs>> classes) {
            this.classes = Objects.requireNonNull(classes);
            return this;
        }
        public Builder classes(Map<String,LabelClassArgs> classes) {
            this.classes = Output.of(Objects.requireNonNull(classes));
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }        public LabelCategoryArgs build() {
            return new LabelCategoryArgs(allowMultiSelect, classes, displayName);
        }
    }
}
