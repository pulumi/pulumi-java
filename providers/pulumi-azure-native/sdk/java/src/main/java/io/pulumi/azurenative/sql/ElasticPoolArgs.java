// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.sql.enums.ElasticPoolLicenseType;
import io.pulumi.azurenative.sql.inputs.ElasticPoolPerDatabaseSettingsArgs;
import io.pulumi.azurenative.sql.inputs.SkuArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ElasticPoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final ElasticPoolArgs Empty = new ElasticPoolArgs();

    /**
     * The name of the elastic pool.
     * 
     */
    @InputImport(name="elasticPoolName")
      private final @Nullable Input<String> elasticPoolName;

    public Input<String> getElasticPoolName() {
        return this.elasticPoolName == null ? Input.empty() : this.elasticPoolName;
    }

    /**
     * The license type to apply for this elastic pool.
     * 
     */
    @InputImport(name="licenseType")
      private final @Nullable Input<Either<String,ElasticPoolLicenseType>> licenseType;

    public Input<Either<String,ElasticPoolLicenseType>> getLicenseType() {
        return this.licenseType == null ? Input.empty() : this.licenseType;
    }

    /**
     * Resource location.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Maintenance configuration id assigned to the elastic pool. This configuration defines the period when the maintenance updates will will occur.
     * 
     */
    @InputImport(name="maintenanceConfigurationId")
      private final @Nullable Input<String> maintenanceConfigurationId;

    public Input<String> getMaintenanceConfigurationId() {
        return this.maintenanceConfigurationId == null ? Input.empty() : this.maintenanceConfigurationId;
    }

    /**
     * The storage limit for the database elastic pool in bytes.
     * 
     */
    @InputImport(name="maxSizeBytes")
      private final @Nullable Input<Double> maxSizeBytes;

    public Input<Double> getMaxSizeBytes() {
        return this.maxSizeBytes == null ? Input.empty() : this.maxSizeBytes;
    }

    /**
     * The per database settings for the elastic pool.
     * 
     */
    @InputImport(name="perDatabaseSettings")
      private final @Nullable Input<ElasticPoolPerDatabaseSettingsArgs> perDatabaseSettings;

    public Input<ElasticPoolPerDatabaseSettingsArgs> getPerDatabaseSettings() {
        return this.perDatabaseSettings == null ? Input.empty() : this.perDatabaseSettings;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @InputImport(name="serverName", required=true)
      private final Input<String> serverName;

    public Input<String> getServerName() {
        return this.serverName;
    }

    /**
     * The elastic pool SKU.
     * 
     * The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or the following command:
     * 
     */
    @InputImport(name="sku")
      private final @Nullable Input<SkuArgs> sku;

    public Input<SkuArgs> getSku() {
        return this.sku == null ? Input.empty() : this.sku;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones.
     * 
     */
    @InputImport(name="zoneRedundant")
      private final @Nullable Input<Boolean> zoneRedundant;

    public Input<Boolean> getZoneRedundant() {
        return this.zoneRedundant == null ? Input.empty() : this.zoneRedundant;
    }

    public ElasticPoolArgs(
        @Nullable Input<String> elasticPoolName,
        @Nullable Input<Either<String,ElasticPoolLicenseType>> licenseType,
        @Nullable Input<String> location,
        @Nullable Input<String> maintenanceConfigurationId,
        @Nullable Input<Double> maxSizeBytes,
        @Nullable Input<ElasticPoolPerDatabaseSettingsArgs> perDatabaseSettings,
        Input<String> resourceGroupName,
        Input<String> serverName,
        @Nullable Input<SkuArgs> sku,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Boolean> zoneRedundant) {
        this.elasticPoolName = elasticPoolName;
        this.licenseType = licenseType;
        this.location = location;
        this.maintenanceConfigurationId = maintenanceConfigurationId;
        this.maxSizeBytes = maxSizeBytes;
        this.perDatabaseSettings = perDatabaseSettings;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
        this.sku = sku;
        this.tags = tags;
        this.zoneRedundant = zoneRedundant;
    }

    private ElasticPoolArgs() {
        this.elasticPoolName = Input.empty();
        this.licenseType = Input.empty();
        this.location = Input.empty();
        this.maintenanceConfigurationId = Input.empty();
        this.maxSizeBytes = Input.empty();
        this.perDatabaseSettings = Input.empty();
        this.resourceGroupName = Input.empty();
        this.serverName = Input.empty();
        this.sku = Input.empty();
        this.tags = Input.empty();
        this.zoneRedundant = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ElasticPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> elasticPoolName;
        private @Nullable Input<Either<String,ElasticPoolLicenseType>> licenseType;
        private @Nullable Input<String> location;
        private @Nullable Input<String> maintenanceConfigurationId;
        private @Nullable Input<Double> maxSizeBytes;
        private @Nullable Input<ElasticPoolPerDatabaseSettingsArgs> perDatabaseSettings;
        private Input<String> resourceGroupName;
        private Input<String> serverName;
        private @Nullable Input<SkuArgs> sku;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Boolean> zoneRedundant;

        public Builder() {
    	      // Empty
        }

        public Builder(ElasticPoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.elasticPoolName = defaults.elasticPoolName;
    	      this.licenseType = defaults.licenseType;
    	      this.location = defaults.location;
    	      this.maintenanceConfigurationId = defaults.maintenanceConfigurationId;
    	      this.maxSizeBytes = defaults.maxSizeBytes;
    	      this.perDatabaseSettings = defaults.perDatabaseSettings;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.zoneRedundant = defaults.zoneRedundant;
        }

        public Builder elasticPoolName(@Nullable Input<String> elasticPoolName) {
            this.elasticPoolName = elasticPoolName;
            return this;
        }

        public Builder elasticPoolName(@Nullable String elasticPoolName) {
            this.elasticPoolName = Input.ofNullable(elasticPoolName);
            return this;
        }

        public Builder licenseType(@Nullable Input<Either<String,ElasticPoolLicenseType>> licenseType) {
            this.licenseType = licenseType;
            return this;
        }

        public Builder licenseType(@Nullable Either<String,ElasticPoolLicenseType> licenseType) {
            this.licenseType = Input.ofNullable(licenseType);
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder maintenanceConfigurationId(@Nullable Input<String> maintenanceConfigurationId) {
            this.maintenanceConfigurationId = maintenanceConfigurationId;
            return this;
        }

        public Builder maintenanceConfigurationId(@Nullable String maintenanceConfigurationId) {
            this.maintenanceConfigurationId = Input.ofNullable(maintenanceConfigurationId);
            return this;
        }

        public Builder maxSizeBytes(@Nullable Input<Double> maxSizeBytes) {
            this.maxSizeBytes = maxSizeBytes;
            return this;
        }

        public Builder maxSizeBytes(@Nullable Double maxSizeBytes) {
            this.maxSizeBytes = Input.ofNullable(maxSizeBytes);
            return this;
        }

        public Builder perDatabaseSettings(@Nullable Input<ElasticPoolPerDatabaseSettingsArgs> perDatabaseSettings) {
            this.perDatabaseSettings = perDatabaseSettings;
            return this;
        }

        public Builder perDatabaseSettings(@Nullable ElasticPoolPerDatabaseSettingsArgs perDatabaseSettings) {
            this.perDatabaseSettings = Input.ofNullable(perDatabaseSettings);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder serverName(Input<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }

        public Builder serverName(String serverName) {
            this.serverName = Input.of(Objects.requireNonNull(serverName));
            return this;
        }

        public Builder sku(@Nullable Input<SkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder sku(@Nullable SkuArgs sku) {
            this.sku = Input.ofNullable(sku);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder zoneRedundant(@Nullable Input<Boolean> zoneRedundant) {
            this.zoneRedundant = zoneRedundant;
            return this;
        }

        public Builder zoneRedundant(@Nullable Boolean zoneRedundant) {
            this.zoneRedundant = Input.ofNullable(zoneRedundant);
            return this;
        }
        public ElasticPoolArgs build() {
            return new ElasticPoolArgs(elasticPoolName, licenseType, location, maintenanceConfigurationId, maxSizeBytes, perDatabaseSettings, resourceGroupName, serverName, sku, tags, zoneRedundant);
        }
    }
}
