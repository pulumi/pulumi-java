// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.testbase;

import io.pulumi.azurenative.testbase.inputs.NotificationEventReceiverArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CustomerEventArgs extends io.pulumi.resources.ResourceArgs {

    public static final CustomerEventArgs Empty = new CustomerEventArgs();

    /**
     * The resource name of the Test Base Customer event.
     * 
     */
    @InputImport(name="customerEventName")
      private final @Nullable Input<String> customerEventName;

    public Input<String> getCustomerEventName() {
        return this.customerEventName == null ? Input.empty() : this.customerEventName;
    }

    /**
     * The name of the event subscribed to.
     * 
     */
    @InputImport(name="eventName", required=true)
      private final Input<String> eventName;

    public Input<String> getEventName() {
        return this.eventName;
    }

    /**
     * The notification event receivers.
     * 
     */
    @InputImport(name="receivers", required=true)
      private final Input<List<NotificationEventReceiverArgs>> receivers;

    public Input<List<NotificationEventReceiverArgs>> getReceivers() {
        return this.receivers;
    }

    /**
     * The name of the resource group that contains the resource.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource name of the Test Base Account.
     * 
     */
    @InputImport(name="testBaseAccountName", required=true)
      private final Input<String> testBaseAccountName;

    public Input<String> getTestBaseAccountName() {
        return this.testBaseAccountName;
    }

    public CustomerEventArgs(
        @Nullable Input<String> customerEventName,
        Input<String> eventName,
        Input<List<NotificationEventReceiverArgs>> receivers,
        Input<String> resourceGroupName,
        Input<String> testBaseAccountName) {
        this.customerEventName = customerEventName;
        this.eventName = Objects.requireNonNull(eventName, "expected parameter 'eventName' to be non-null");
        this.receivers = Objects.requireNonNull(receivers, "expected parameter 'receivers' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.testBaseAccountName = Objects.requireNonNull(testBaseAccountName, "expected parameter 'testBaseAccountName' to be non-null");
    }

    private CustomerEventArgs() {
        this.customerEventName = Input.empty();
        this.eventName = Input.empty();
        this.receivers = Input.empty();
        this.resourceGroupName = Input.empty();
        this.testBaseAccountName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomerEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> customerEventName;
        private Input<String> eventName;
        private Input<List<NotificationEventReceiverArgs>> receivers;
        private Input<String> resourceGroupName;
        private Input<String> testBaseAccountName;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomerEventArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customerEventName = defaults.customerEventName;
    	      this.eventName = defaults.eventName;
    	      this.receivers = defaults.receivers;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.testBaseAccountName = defaults.testBaseAccountName;
        }

        public Builder customerEventName(@Nullable Input<String> customerEventName) {
            this.customerEventName = customerEventName;
            return this;
        }

        public Builder customerEventName(@Nullable String customerEventName) {
            this.customerEventName = Input.ofNullable(customerEventName);
            return this;
        }

        public Builder eventName(Input<String> eventName) {
            this.eventName = Objects.requireNonNull(eventName);
            return this;
        }

        public Builder eventName(String eventName) {
            this.eventName = Input.of(Objects.requireNonNull(eventName));
            return this;
        }

        public Builder receivers(Input<List<NotificationEventReceiverArgs>> receivers) {
            this.receivers = Objects.requireNonNull(receivers);
            return this;
        }

        public Builder receivers(List<NotificationEventReceiverArgs> receivers) {
            this.receivers = Input.of(Objects.requireNonNull(receivers));
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder testBaseAccountName(Input<String> testBaseAccountName) {
            this.testBaseAccountName = Objects.requireNonNull(testBaseAccountName);
            return this;
        }

        public Builder testBaseAccountName(String testBaseAccountName) {
            this.testBaseAccountName = Input.of(Objects.requireNonNull(testBaseAccountName));
            return this;
        }
        public CustomerEventArgs build() {
            return new CustomerEventArgs(customerEventName, eventName, receivers, resourceGroupName, testBaseAccountName);
        }
    }
}
