// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabric.outputs;

import io.pulumi.azurenative.servicefabric.outputs.EndpointRangeDescriptionResponse;
import io.pulumi.azurenative.servicefabric.outputs.VMSSExtensionResponse;
import io.pulumi.azurenative.servicefabric.outputs.VaultSecretGroupResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetNodeTypeResult {
    /**
     * The range of ports from which cluster assigned port to Service Fabric applications.
     * 
     */
    private final @Nullable EndpointRangeDescriptionResponse applicationPorts;
    /**
     * The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    private final @Nullable Map<String,String> capacities;
    /**
     * Disk size for each vm in the node type in GBs.
     * 
     */
    private final Integer dataDiskSizeGB;
    /**
     * The range of ephemeral ports that nodes in this node type should be configured with.
     * 
     */
    private final @Nullable EndpointRangeDescriptionResponse ephemeralPorts;
    /**
     * Azure resource identifier.
     * 
     */
    private final String id;
    /**
     * The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
     * 
     */
    private final Boolean isPrimary;
    /**
     * Azure resource name.
     * 
     */
    private final String name;
    /**
     * The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    private final @Nullable Map<String,String> placementProperties;
    /**
     * The provisioning state of the managed cluster resource.
     * 
     */
    private final String provisioningState;
    /**
     * Azure resource tags.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * Azure resource type.
     * 
     */
    private final String type;
    /**
     * Set of extensions that should be installed onto the virtual machines.
     * 
     */
    private final @Nullable List<VMSSExtensionResponse> vmExtensions;
    /**
     * The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
     * 
     */
    private final @Nullable String vmImageOffer;
    /**
     * The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
     * 
     */
    private final @Nullable String vmImagePublisher;
    /**
     * The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
     * 
     */
    private final @Nullable String vmImageSku;
    /**
     * The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
     * 
     */
    private final @Nullable String vmImageVersion;
    /**
     * The number of nodes in the node type.
     * 
     */
    private final Integer vmInstanceCount;
    /**
     * The secrets to install in the virtual machines.
     * 
     */
    private final @Nullable List<VaultSecretGroupResponse> vmSecrets;
    /**
     * The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3.
     * 
     */
    private final @Nullable String vmSize;

    @OutputCustomType.Constructor
    private GetNodeTypeResult(
        @OutputCustomType.Parameter("applicationPorts") @Nullable EndpointRangeDescriptionResponse applicationPorts,
        @OutputCustomType.Parameter("capacities") @Nullable Map<String,String> capacities,
        @OutputCustomType.Parameter("dataDiskSizeGB") Integer dataDiskSizeGB,
        @OutputCustomType.Parameter("ephemeralPorts") @Nullable EndpointRangeDescriptionResponse ephemeralPorts,
        @OutputCustomType.Parameter("id") String id,
        @OutputCustomType.Parameter("isPrimary") Boolean isPrimary,
        @OutputCustomType.Parameter("name") String name,
        @OutputCustomType.Parameter("placementProperties") @Nullable Map<String,String> placementProperties,
        @OutputCustomType.Parameter("provisioningState") String provisioningState,
        @OutputCustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @OutputCustomType.Parameter("type") String type,
        @OutputCustomType.Parameter("vmExtensions") @Nullable List<VMSSExtensionResponse> vmExtensions,
        @OutputCustomType.Parameter("vmImageOffer") @Nullable String vmImageOffer,
        @OutputCustomType.Parameter("vmImagePublisher") @Nullable String vmImagePublisher,
        @OutputCustomType.Parameter("vmImageSku") @Nullable String vmImageSku,
        @OutputCustomType.Parameter("vmImageVersion") @Nullable String vmImageVersion,
        @OutputCustomType.Parameter("vmInstanceCount") Integer vmInstanceCount,
        @OutputCustomType.Parameter("vmSecrets") @Nullable List<VaultSecretGroupResponse> vmSecrets,
        @OutputCustomType.Parameter("vmSize") @Nullable String vmSize) {
        this.applicationPorts = applicationPorts;
        this.capacities = capacities;
        this.dataDiskSizeGB = dataDiskSizeGB;
        this.ephemeralPorts = ephemeralPorts;
        this.id = id;
        this.isPrimary = isPrimary;
        this.name = name;
        this.placementProperties = placementProperties;
        this.provisioningState = provisioningState;
        this.tags = tags;
        this.type = type;
        this.vmExtensions = vmExtensions;
        this.vmImageOffer = vmImageOffer;
        this.vmImagePublisher = vmImagePublisher;
        this.vmImageSku = vmImageSku;
        this.vmImageVersion = vmImageVersion;
        this.vmInstanceCount = vmInstanceCount;
        this.vmSecrets = vmSecrets;
        this.vmSize = vmSize;
    }

    /**
     * The range of ports from which cluster assigned port to Service Fabric applications.
     * 
    */
    public Optional<EndpointRangeDescriptionResponse> getApplicationPorts() {
        return Optional.ofNullable(this.applicationPorts);
    }
    /**
     * The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
    */
    public Map<String,String> getCapacities() {
        return this.capacities == null ? Map.of() : this.capacities;
    }
    /**
     * Disk size for each vm in the node type in GBs.
     * 
    */
    public Integer getDataDiskSizeGB() {
        return this.dataDiskSizeGB;
    }
    /**
     * The range of ephemeral ports that nodes in this node type should be configured with.
     * 
    */
    public Optional<EndpointRangeDescriptionResponse> getEphemeralPorts() {
        return Optional.ofNullable(this.ephemeralPorts);
    }
    /**
     * Azure resource identifier.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
     * 
    */
    public Boolean getIsPrimary() {
        return this.isPrimary;
    }
    /**
     * Azure resource name.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
    */
    public Map<String,String> getPlacementProperties() {
        return this.placementProperties == null ? Map.of() : this.placementProperties;
    }
    /**
     * The provisioning state of the managed cluster resource.
     * 
    */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * Azure resource tags.
     * 
    */
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * Azure resource type.
     * 
    */
    public String getType() {
        return this.type;
    }
    /**
     * Set of extensions that should be installed onto the virtual machines.
     * 
    */
    public List<VMSSExtensionResponse> getVmExtensions() {
        return this.vmExtensions == null ? List.of() : this.vmExtensions;
    }
    /**
     * The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
     * 
    */
    public Optional<String> getVmImageOffer() {
        return Optional.ofNullable(this.vmImageOffer);
    }
    /**
     * The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
     * 
    */
    public Optional<String> getVmImagePublisher() {
        return Optional.ofNullable(this.vmImagePublisher);
    }
    /**
     * The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
     * 
    */
    public Optional<String> getVmImageSku() {
        return Optional.ofNullable(this.vmImageSku);
    }
    /**
     * The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
     * 
    */
    public Optional<String> getVmImageVersion() {
        return Optional.ofNullable(this.vmImageVersion);
    }
    /**
     * The number of nodes in the node type.
     * 
    */
    public Integer getVmInstanceCount() {
        return this.vmInstanceCount;
    }
    /**
     * The secrets to install in the virtual machines.
     * 
    */
    public List<VaultSecretGroupResponse> getVmSecrets() {
        return this.vmSecrets == null ? List.of() : this.vmSecrets;
    }
    /**
     * The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3.
     * 
    */
    public Optional<String> getVmSize() {
        return Optional.ofNullable(this.vmSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeTypeResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable EndpointRangeDescriptionResponse applicationPorts;
        private @Nullable Map<String,String> capacities;
        private Integer dataDiskSizeGB;
        private @Nullable EndpointRangeDescriptionResponse ephemeralPorts;
        private String id;
        private Boolean isPrimary;
        private String name;
        private @Nullable Map<String,String> placementProperties;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable List<VMSSExtensionResponse> vmExtensions;
        private @Nullable String vmImageOffer;
        private @Nullable String vmImagePublisher;
        private @Nullable String vmImageSku;
        private @Nullable String vmImageVersion;
        private Integer vmInstanceCount;
        private @Nullable List<VaultSecretGroupResponse> vmSecrets;
        private @Nullable String vmSize;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNodeTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationPorts = defaults.applicationPorts;
    	      this.capacities = defaults.capacities;
    	      this.dataDiskSizeGB = defaults.dataDiskSizeGB;
    	      this.ephemeralPorts = defaults.ephemeralPorts;
    	      this.id = defaults.id;
    	      this.isPrimary = defaults.isPrimary;
    	      this.name = defaults.name;
    	      this.placementProperties = defaults.placementProperties;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.vmExtensions = defaults.vmExtensions;
    	      this.vmImageOffer = defaults.vmImageOffer;
    	      this.vmImagePublisher = defaults.vmImagePublisher;
    	      this.vmImageSku = defaults.vmImageSku;
    	      this.vmImageVersion = defaults.vmImageVersion;
    	      this.vmInstanceCount = defaults.vmInstanceCount;
    	      this.vmSecrets = defaults.vmSecrets;
    	      this.vmSize = defaults.vmSize;
        }

        public Builder setApplicationPorts(@Nullable EndpointRangeDescriptionResponse applicationPorts) {
            this.applicationPorts = applicationPorts;
            return this;
        }

        public Builder setCapacities(@Nullable Map<String,String> capacities) {
            this.capacities = capacities;
            return this;
        }

        public Builder setDataDiskSizeGB(Integer dataDiskSizeGB) {
            this.dataDiskSizeGB = Objects.requireNonNull(dataDiskSizeGB);
            return this;
        }

        public Builder setEphemeralPorts(@Nullable EndpointRangeDescriptionResponse ephemeralPorts) {
            this.ephemeralPorts = ephemeralPorts;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIsPrimary(Boolean isPrimary) {
            this.isPrimary = Objects.requireNonNull(isPrimary);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPlacementProperties(@Nullable Map<String,String> placementProperties) {
            this.placementProperties = placementProperties;
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setVmExtensions(@Nullable List<VMSSExtensionResponse> vmExtensions) {
            this.vmExtensions = vmExtensions;
            return this;
        }

        public Builder setVmImageOffer(@Nullable String vmImageOffer) {
            this.vmImageOffer = vmImageOffer;
            return this;
        }

        public Builder setVmImagePublisher(@Nullable String vmImagePublisher) {
            this.vmImagePublisher = vmImagePublisher;
            return this;
        }

        public Builder setVmImageSku(@Nullable String vmImageSku) {
            this.vmImageSku = vmImageSku;
            return this;
        }

        public Builder setVmImageVersion(@Nullable String vmImageVersion) {
            this.vmImageVersion = vmImageVersion;
            return this;
        }

        public Builder setVmInstanceCount(Integer vmInstanceCount) {
            this.vmInstanceCount = Objects.requireNonNull(vmInstanceCount);
            return this;
        }

        public Builder setVmSecrets(@Nullable List<VaultSecretGroupResponse> vmSecrets) {
            this.vmSecrets = vmSecrets;
            return this;
        }

        public Builder setVmSize(@Nullable String vmSize) {
            this.vmSize = vmSize;
            return this;
        }
        public GetNodeTypeResult build() {
            return new GetNodeTypeResult(applicationPorts, capacities, dataDiskSizeGB, ephemeralPorts, id, isPrimary, name, placementProperties, provisioningState, tags, type, vmExtensions, vmImageOffer, vmImagePublisher, vmImageSku, vmImageVersion, vmInstanceCount, vmSecrets, vmSize);
        }
    }
}
