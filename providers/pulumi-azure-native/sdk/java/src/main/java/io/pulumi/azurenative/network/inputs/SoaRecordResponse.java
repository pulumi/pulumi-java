// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An SOA record.
 * 
 */
public final class SoaRecordResponse extends io.pulumi.resources.InvokeArgs {

    public static final SoaRecordResponse Empty = new SoaRecordResponse();

    /**
     * The email contact for this SOA record.
     * 
     */
    @Import(name="email")
      private final @Nullable String email;

    public Optional<String> email() {
        return this.email == null ? Optional.empty() : Optional.ofNullable(this.email);
    }

    /**
     * The expire time for this SOA record.
     * 
     */
    @Import(name="expireTime")
      private final @Nullable Double expireTime;

    public Optional<Double> expireTime() {
        return this.expireTime == null ? Optional.empty() : Optional.ofNullable(this.expireTime);
    }

    /**
     * The domain name of the authoritative name server for this SOA record.
     * 
     */
    @Import(name="host")
      private final @Nullable String host;

    public Optional<String> host() {
        return this.host == null ? Optional.empty() : Optional.ofNullable(this.host);
    }

    /**
     * The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
     * 
     */
    @Import(name="minimumTtl")
      private final @Nullable Double minimumTtl;

    public Optional<Double> minimumTtl() {
        return this.minimumTtl == null ? Optional.empty() : Optional.ofNullable(this.minimumTtl);
    }

    /**
     * The refresh value for this SOA record.
     * 
     */
    @Import(name="refreshTime")
      private final @Nullable Double refreshTime;

    public Optional<Double> refreshTime() {
        return this.refreshTime == null ? Optional.empty() : Optional.ofNullable(this.refreshTime);
    }

    /**
     * The retry time for this SOA record.
     * 
     */
    @Import(name="retryTime")
      private final @Nullable Double retryTime;

    public Optional<Double> retryTime() {
        return this.retryTime == null ? Optional.empty() : Optional.ofNullable(this.retryTime);
    }

    /**
     * The serial number for this SOA record.
     * 
     */
    @Import(name="serialNumber")
      private final @Nullable Double serialNumber;

    public Optional<Double> serialNumber() {
        return this.serialNumber == null ? Optional.empty() : Optional.ofNullable(this.serialNumber);
    }

    public SoaRecordResponse(
        @Nullable String email,
        @Nullable Double expireTime,
        @Nullable String host,
        @Nullable Double minimumTtl,
        @Nullable Double refreshTime,
        @Nullable Double retryTime,
        @Nullable Double serialNumber) {
        this.email = email;
        this.expireTime = expireTime;
        this.host = host;
        this.minimumTtl = minimumTtl;
        this.refreshTime = refreshTime;
        this.retryTime = retryTime;
        this.serialNumber = serialNumber;
    }

    private SoaRecordResponse() {
        this.email = null;
        this.expireTime = null;
        this.host = null;
        this.minimumTtl = null;
        this.refreshTime = null;
        this.retryTime = null;
        this.serialNumber = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SoaRecordResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String email;
        private @Nullable Double expireTime;
        private @Nullable String host;
        private @Nullable Double minimumTtl;
        private @Nullable Double refreshTime;
        private @Nullable Double retryTime;
        private @Nullable Double serialNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(SoaRecordResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.expireTime = defaults.expireTime;
    	      this.host = defaults.host;
    	      this.minimumTtl = defaults.minimumTtl;
    	      this.refreshTime = defaults.refreshTime;
    	      this.retryTime = defaults.retryTime;
    	      this.serialNumber = defaults.serialNumber;
        }

        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }
        public Builder expireTime(@Nullable Double expireTime) {
            this.expireTime = expireTime;
            return this;
        }
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        public Builder minimumTtl(@Nullable Double minimumTtl) {
            this.minimumTtl = minimumTtl;
            return this;
        }
        public Builder refreshTime(@Nullable Double refreshTime) {
            this.refreshTime = refreshTime;
            return this;
        }
        public Builder retryTime(@Nullable Double retryTime) {
            this.retryTime = retryTime;
            return this;
        }
        public Builder serialNumber(@Nullable Double serialNumber) {
            this.serialNumber = serialNumber;
            return this;
        }        public SoaRecordResponse build() {
            return new SoaRecordResponse(email, expireTime, host, minimumTtl, refreshTime, retryTime, serialNumber);
        }
    }
}
