// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.ProbeProtocol;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProbeArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProbeArgs Empty = new ProbeArgs();

    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="intervalInSeconds")
    private final @Nullable Input<Integer> intervalInSeconds;

    public Input<Integer> getIntervalInSeconds() {
        return this.intervalInSeconds == null ? Input.empty() : this.intervalInSeconds;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="numberOfProbes")
    private final @Nullable Input<Integer> numberOfProbes;

    public Input<Integer> getNumberOfProbes() {
        return this.numberOfProbes == null ? Input.empty() : this.numberOfProbes;
    }

    @InputImport(name="port", required=true)
    private final Input<Integer> port;

    public Input<Integer> getPort() {
        return this.port;
    }

    @InputImport(name="protocol", required=true)
    private final Input<Either<String,ProbeProtocol>> protocol;

    public Input<Either<String,ProbeProtocol>> getProtocol() {
        return this.protocol;
    }

    @InputImport(name="requestPath")
    private final @Nullable Input<String> requestPath;

    public Input<String> getRequestPath() {
        return this.requestPath == null ? Input.empty() : this.requestPath;
    }

    public ProbeArgs(
        @Nullable Input<String> id,
        @Nullable Input<Integer> intervalInSeconds,
        @Nullable Input<String> name,
        @Nullable Input<Integer> numberOfProbes,
        Input<Integer> port,
        Input<Either<String,ProbeProtocol>> protocol,
        @Nullable Input<String> requestPath) {
        this.id = id;
        this.intervalInSeconds = intervalInSeconds;
        this.name = name;
        this.numberOfProbes = numberOfProbes;
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
        this.requestPath = requestPath;
    }

    private ProbeArgs() {
        this.id = Input.empty();
        this.intervalInSeconds = Input.empty();
        this.name = Input.empty();
        this.numberOfProbes = Input.empty();
        this.port = Input.empty();
        this.protocol = Input.empty();
        this.requestPath = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProbeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> id;
        private @Nullable Input<Integer> intervalInSeconds;
        private @Nullable Input<String> name;
        private @Nullable Input<Integer> numberOfProbes;
        private Input<Integer> port;
        private Input<Either<String,ProbeProtocol>> protocol;
        private @Nullable Input<String> requestPath;

        public Builder() {
    	      // Empty
        }

        public Builder(ProbeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.name = defaults.name;
    	      this.numberOfProbes = defaults.numberOfProbes;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.requestPath = defaults.requestPath;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setIntervalInSeconds(@Nullable Input<Integer> intervalInSeconds) {
            this.intervalInSeconds = intervalInSeconds;
            return this;
        }

        public Builder setIntervalInSeconds(@Nullable Integer intervalInSeconds) {
            this.intervalInSeconds = Input.ofNullable(intervalInSeconds);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNumberOfProbes(@Nullable Input<Integer> numberOfProbes) {
            this.numberOfProbes = numberOfProbes;
            return this;
        }

        public Builder setNumberOfProbes(@Nullable Integer numberOfProbes) {
            this.numberOfProbes = Input.ofNullable(numberOfProbes);
            return this;
        }

        public Builder setPort(Input<Integer> port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder setPort(Integer port) {
            this.port = Input.of(Objects.requireNonNull(port));
            return this;
        }

        public Builder setProtocol(Input<Either<String,ProbeProtocol>> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder setProtocol(Either<String,ProbeProtocol> protocol) {
            this.protocol = Input.of(Objects.requireNonNull(protocol));
            return this;
        }

        public Builder setRequestPath(@Nullable Input<String> requestPath) {
            this.requestPath = requestPath;
            return this;
        }

        public Builder setRequestPath(@Nullable String requestPath) {
            this.requestPath = Input.ofNullable(requestPath);
            return this;
        }

        public ProbeArgs build() {
            return new ProbeArgs(id, intervalInSeconds, name, numberOfProbes, port, protocol, requestPath);
        }
    }
}
