// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.ProbeProtocol;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A load balancer probe.
 * 
 */
public final class ProbeArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProbeArgs Empty = new ProbeArgs();

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
     * 
     */
    @Import(name="intervalInSeconds")
      private final @Nullable Output<Integer> intervalInSeconds;

    public Output<Integer> getIntervalInSeconds() {
        return this.intervalInSeconds == null ? Codegen.empty() : this.intervalInSeconds;
    }

    /**
     * The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
     * 
     */
    @Import(name="numberOfProbes")
      private final @Nullable Output<Integer> numberOfProbes;

    public Output<Integer> getNumberOfProbes() {
        return this.numberOfProbes == null ? Codegen.empty() : this.numberOfProbes;
    }

    /**
     * The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
     * 
     */
    @Import(name="port", required=true)
      private final Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port;
    }

    /**
     * The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
     * 
     */
    @Import(name="protocol", required=true)
      private final Output<Either<String,ProbeProtocol>> protocol;

    public Output<Either<String,ProbeProtocol>> getProtocol() {
        return this.protocol;
    }

    /**
     * The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
     * 
     */
    @Import(name="requestPath")
      private final @Nullable Output<String> requestPath;

    public Output<String> getRequestPath() {
        return this.requestPath == null ? Codegen.empty() : this.requestPath;
    }

    public ProbeArgs(
        @Nullable Output<String> id,
        @Nullable Output<Integer> intervalInSeconds,
        @Nullable Output<String> name,
        @Nullable Output<Integer> numberOfProbes,
        Output<Integer> port,
        Output<Either<String,ProbeProtocol>> protocol,
        @Nullable Output<String> requestPath) {
        this.id = id;
        this.intervalInSeconds = intervalInSeconds;
        this.name = name;
        this.numberOfProbes = numberOfProbes;
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
        this.requestPath = requestPath;
    }

    private ProbeArgs() {
        this.id = Codegen.empty();
        this.intervalInSeconds = Codegen.empty();
        this.name = Codegen.empty();
        this.numberOfProbes = Codegen.empty();
        this.port = Codegen.empty();
        this.protocol = Codegen.empty();
        this.requestPath = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProbeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> id;
        private @Nullable Output<Integer> intervalInSeconds;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> numberOfProbes;
        private Output<Integer> port;
        private Output<Either<String,ProbeProtocol>> protocol;
        private @Nullable Output<String> requestPath;

        public Builder() {
    	      // Empty
        }

        public Builder(ProbeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.name = defaults.name;
    	      this.numberOfProbes = defaults.numberOfProbes;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.requestPath = defaults.requestPath;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder intervalInSeconds(@Nullable Output<Integer> intervalInSeconds) {
            this.intervalInSeconds = intervalInSeconds;
            return this;
        }
        public Builder intervalInSeconds(@Nullable Integer intervalInSeconds) {
            this.intervalInSeconds = Codegen.ofNullable(intervalInSeconds);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder numberOfProbes(@Nullable Output<Integer> numberOfProbes) {
            this.numberOfProbes = numberOfProbes;
            return this;
        }
        public Builder numberOfProbes(@Nullable Integer numberOfProbes) {
            this.numberOfProbes = Codegen.ofNullable(numberOfProbes);
            return this;
        }
        public Builder port(Output<Integer> port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Output.of(Objects.requireNonNull(port));
            return this;
        }
        public Builder protocol(Output<Either<String,ProbeProtocol>> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder protocol(Either<String,ProbeProtocol> protocol) {
            this.protocol = Output.of(Objects.requireNonNull(protocol));
            return this;
        }
        public Builder requestPath(@Nullable Output<String> requestPath) {
            this.requestPath = requestPath;
            return this;
        }
        public Builder requestPath(@Nullable String requestPath) {
            this.requestPath = Codegen.ofNullable(requestPath);
            return this;
        }        public ProbeArgs build() {
            return new ProbeArgs(id, intervalInSeconds, name, numberOfProbes, port, protocol, requestPath);
        }
    }
}
