// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storsimple.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAccessControlRecordResult {
    /**
     * The path ID that uniquely identifies the object.
     * 
     */
    private final String id;
    /**
     * The iSCSI initiator name (IQN).
     * 
     */
    private final String initiatorName;
    /**
     * The Kind of the object. Currently only Series8000 is supported
     * 
     */
    private final @Nullable String kind;
    /**
     * The name of the object.
     * 
     */
    private final String name;
    /**
     * The hierarchical type of the object.
     * 
     */
    private final String type;
    /**
     * The number of volumes using the access control record.
     * 
     */
    private final Integer volumeCount;

    @CustomType.Constructor
    private GetAccessControlRecordResult(
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("initiatorName") String initiatorName,
        @CustomType.Parameter("kind") @Nullable String kind,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("volumeCount") Integer volumeCount) {
        this.id = id;
        this.initiatorName = initiatorName;
        this.kind = kind;
        this.name = name;
        this.type = type;
        this.volumeCount = volumeCount;
    }

    /**
     * The path ID that uniquely identifies the object.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * The iSCSI initiator name (IQN).
     * 
    */
    public String getInitiatorName() {
        return this.initiatorName;
    }
    /**
     * The Kind of the object. Currently only Series8000 is supported
     * 
    */
    public Optional<String> getKind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * The name of the object.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * The hierarchical type of the object.
     * 
    */
    public String getType() {
        return this.type;
    }
    /**
     * The number of volumes using the access control record.
     * 
    */
    public Integer getVolumeCount() {
        return this.volumeCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccessControlRecordResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String id;
        private String initiatorName;
        private @Nullable String kind;
        private String name;
        private String type;
        private Integer volumeCount;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAccessControlRecordResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.initiatorName = defaults.initiatorName;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
    	      this.volumeCount = defaults.volumeCount;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder initiatorName(String initiatorName) {
            this.initiatorName = Objects.requireNonNull(initiatorName);
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder volumeCount(Integer volumeCount) {
            this.volumeCount = Objects.requireNonNull(volumeCount);
            return this;
        }        public GetAccessControlRecordResult build() {
            return new GetAccessControlRecordResult(id, initiatorName, kind, name, type, volumeCount);
        }
    }
}
