// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.outputs;

import io.pulumi.azurenative.network.outputs.ExpressRouteCircuitAuthorizationResponse;
import io.pulumi.azurenative.network.outputs.ExpressRouteCircuitPeeringResponse;
import io.pulumi.azurenative.network.outputs.ExpressRouteCircuitServiceProviderPropertiesResponse;
import io.pulumi.azurenative.network.outputs.ExpressRouteCircuitSkuResponse;
import io.pulumi.azurenative.network.outputs.SubResourceResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetExpressRouteCircuitResult {
    private final @Nullable Boolean allowClassicOperations;
    private final @Nullable List<ExpressRouteCircuitAuthorizationResponse> authorizations;
    private final @Nullable Double bandwidthInGbps;
    private final @Nullable String circuitProvisioningState;
    private final String etag;
    private final @Nullable SubResourceResponse expressRoutePort;
    private final @Nullable String gatewayManagerEtag;
    private final @Nullable Boolean globalReachEnabled;
    private final @Nullable String id;
    private final @Nullable String location;
    private final String name;
    private final @Nullable List<ExpressRouteCircuitPeeringResponse> peerings;
    private final String provisioningState;
    private final @Nullable String serviceKey;
    private final @Nullable String serviceProviderNotes;
    private final @Nullable ExpressRouteCircuitServiceProviderPropertiesResponse serviceProviderProperties;
    private final @Nullable String serviceProviderProvisioningState;
    private final @Nullable ExpressRouteCircuitSkuResponse sku;
    private final Integer stag;
    private final @Nullable Map<String,String> tags;
    private final String type;

    @OutputCustomType.Constructor({"allowClassicOperations","authorizations","bandwidthInGbps","circuitProvisioningState","etag","expressRoutePort","gatewayManagerEtag","globalReachEnabled","id","location","name","peerings","provisioningState","serviceKey","serviceProviderNotes","serviceProviderProperties","serviceProviderProvisioningState","sku","stag","tags","type"})
    private GetExpressRouteCircuitResult(
        @Nullable Boolean allowClassicOperations,
        @Nullable List<ExpressRouteCircuitAuthorizationResponse> authorizations,
        @Nullable Double bandwidthInGbps,
        @Nullable String circuitProvisioningState,
        String etag,
        @Nullable SubResourceResponse expressRoutePort,
        @Nullable String gatewayManagerEtag,
        @Nullable Boolean globalReachEnabled,
        @Nullable String id,
        @Nullable String location,
        String name,
        @Nullable List<ExpressRouteCircuitPeeringResponse> peerings,
        String provisioningState,
        @Nullable String serviceKey,
        @Nullable String serviceProviderNotes,
        @Nullable ExpressRouteCircuitServiceProviderPropertiesResponse serviceProviderProperties,
        @Nullable String serviceProviderProvisioningState,
        @Nullable ExpressRouteCircuitSkuResponse sku,
        Integer stag,
        @Nullable Map<String,String> tags,
        String type) {
        this.allowClassicOperations = allowClassicOperations;
        this.authorizations = authorizations;
        this.bandwidthInGbps = bandwidthInGbps;
        this.circuitProvisioningState = circuitProvisioningState;
        this.etag = Objects.requireNonNull(etag);
        this.expressRoutePort = expressRoutePort;
        this.gatewayManagerEtag = gatewayManagerEtag;
        this.globalReachEnabled = globalReachEnabled;
        this.id = id;
        this.location = location;
        this.name = Objects.requireNonNull(name);
        this.peerings = peerings;
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.serviceKey = serviceKey;
        this.serviceProviderNotes = serviceProviderNotes;
        this.serviceProviderProperties = serviceProviderProperties;
        this.serviceProviderProvisioningState = serviceProviderProvisioningState;
        this.sku = sku;
        this.stag = Objects.requireNonNull(stag);
        this.tags = tags;
        this.type = Objects.requireNonNull(type);
    }

    public Optional<Boolean> getAllowClassicOperations() {
        return Optional.ofNullable(this.allowClassicOperations);
    }
    public List<ExpressRouteCircuitAuthorizationResponse> getAuthorizations() {
        return this.authorizations == null ? List.of() : this.authorizations;
    }
    public Optional<Double> getBandwidthInGbps() {
        return Optional.ofNullable(this.bandwidthInGbps);
    }
    public Optional<String> getCircuitProvisioningState() {
        return Optional.ofNullable(this.circuitProvisioningState);
    }
    public String getEtag() {
        return this.etag;
    }
    public Optional<SubResourceResponse> getExpressRoutePort() {
        return Optional.ofNullable(this.expressRoutePort);
    }
    public Optional<String> getGatewayManagerEtag() {
        return Optional.ofNullable(this.gatewayManagerEtag);
    }
    public Optional<Boolean> getGlobalReachEnabled() {
        return Optional.ofNullable(this.globalReachEnabled);
    }
    public Optional<String> getId() {
        return Optional.ofNullable(this.id);
    }
    public Optional<String> getLocation() {
        return Optional.ofNullable(this.location);
    }
    public String getName() {
        return this.name;
    }
    public List<ExpressRouteCircuitPeeringResponse> getPeerings() {
        return this.peerings == null ? List.of() : this.peerings;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public Optional<String> getServiceKey() {
        return Optional.ofNullable(this.serviceKey);
    }
    public Optional<String> getServiceProviderNotes() {
        return Optional.ofNullable(this.serviceProviderNotes);
    }
    public Optional<ExpressRouteCircuitServiceProviderPropertiesResponse> getServiceProviderProperties() {
        return Optional.ofNullable(this.serviceProviderProperties);
    }
    public Optional<String> getServiceProviderProvisioningState() {
        return Optional.ofNullable(this.serviceProviderProvisioningState);
    }
    public Optional<ExpressRouteCircuitSkuResponse> getSku() {
        return Optional.ofNullable(this.sku);
    }
    public Integer getStag() {
        return this.stag;
    }
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExpressRouteCircuitResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean allowClassicOperations;
        private @Nullable List<ExpressRouteCircuitAuthorizationResponse> authorizations;
        private @Nullable Double bandwidthInGbps;
        private @Nullable String circuitProvisioningState;
        private String etag;
        private @Nullable SubResourceResponse expressRoutePort;
        private @Nullable String gatewayManagerEtag;
        private @Nullable Boolean globalReachEnabled;
        private @Nullable String id;
        private @Nullable String location;
        private String name;
        private @Nullable List<ExpressRouteCircuitPeeringResponse> peerings;
        private String provisioningState;
        private @Nullable String serviceKey;
        private @Nullable String serviceProviderNotes;
        private @Nullable ExpressRouteCircuitServiceProviderPropertiesResponse serviceProviderProperties;
        private @Nullable String serviceProviderProvisioningState;
        private @Nullable ExpressRouteCircuitSkuResponse sku;
        private Integer stag;
        private @Nullable Map<String,String> tags;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetExpressRouteCircuitResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowClassicOperations = defaults.allowClassicOperations;
    	      this.authorizations = defaults.authorizations;
    	      this.bandwidthInGbps = defaults.bandwidthInGbps;
    	      this.circuitProvisioningState = defaults.circuitProvisioningState;
    	      this.etag = defaults.etag;
    	      this.expressRoutePort = defaults.expressRoutePort;
    	      this.gatewayManagerEtag = defaults.gatewayManagerEtag;
    	      this.globalReachEnabled = defaults.globalReachEnabled;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.peerings = defaults.peerings;
    	      this.provisioningState = defaults.provisioningState;
    	      this.serviceKey = defaults.serviceKey;
    	      this.serviceProviderNotes = defaults.serviceProviderNotes;
    	      this.serviceProviderProperties = defaults.serviceProviderProperties;
    	      this.serviceProviderProvisioningState = defaults.serviceProviderProvisioningState;
    	      this.sku = defaults.sku;
    	      this.stag = defaults.stag;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder setAllowClassicOperations(@Nullable Boolean allowClassicOperations) {
            this.allowClassicOperations = allowClassicOperations;
            return this;
        }

        public Builder setAuthorizations(@Nullable List<ExpressRouteCircuitAuthorizationResponse> authorizations) {
            this.authorizations = authorizations;
            return this;
        }

        public Builder setBandwidthInGbps(@Nullable Double bandwidthInGbps) {
            this.bandwidthInGbps = bandwidthInGbps;
            return this;
        }

        public Builder setCircuitProvisioningState(@Nullable String circuitProvisioningState) {
            this.circuitProvisioningState = circuitProvisioningState;
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setExpressRoutePort(@Nullable SubResourceResponse expressRoutePort) {
            this.expressRoutePort = expressRoutePort;
            return this;
        }

        public Builder setGatewayManagerEtag(@Nullable String gatewayManagerEtag) {
            this.gatewayManagerEtag = gatewayManagerEtag;
            return this;
        }

        public Builder setGlobalReachEnabled(@Nullable Boolean globalReachEnabled) {
            this.globalReachEnabled = globalReachEnabled;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = location;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPeerings(@Nullable List<ExpressRouteCircuitPeeringResponse> peerings) {
            this.peerings = peerings;
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setServiceKey(@Nullable String serviceKey) {
            this.serviceKey = serviceKey;
            return this;
        }

        public Builder setServiceProviderNotes(@Nullable String serviceProviderNotes) {
            this.serviceProviderNotes = serviceProviderNotes;
            return this;
        }

        public Builder setServiceProviderProperties(@Nullable ExpressRouteCircuitServiceProviderPropertiesResponse serviceProviderProperties) {
            this.serviceProviderProperties = serviceProviderProperties;
            return this;
        }

        public Builder setServiceProviderProvisioningState(@Nullable String serviceProviderProvisioningState) {
            this.serviceProviderProvisioningState = serviceProviderProvisioningState;
            return this;
        }

        public Builder setSku(@Nullable ExpressRouteCircuitSkuResponse sku) {
            this.sku = sku;
            return this;
        }

        public Builder setStag(Integer stag) {
            this.stag = Objects.requireNonNull(stag);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetExpressRouteCircuitResult build() {
            return new GetExpressRouteCircuitResult(allowClassicOperations, authorizations, bandwidthInGbps, circuitProvisioningState, etag, expressRoutePort, gatewayManagerEtag, globalReachEnabled, id, location, name, peerings, provisioningState, serviceKey, serviceProviderNotes, serviceProviderProperties, serviceProviderProvisioningState, sku, stag, tags, type);
        }
    }
}
