// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.enums.FrontDoorEnabledState;
import io.pulumi.azurenative.network.inputs.BackendPoolArgs;
import io.pulumi.azurenative.network.inputs.BackendPoolsSettingsArgs;
import io.pulumi.azurenative.network.inputs.FrontendEndpointArgs;
import io.pulumi.azurenative.network.inputs.HealthProbeSettingsModelArgs;
import io.pulumi.azurenative.network.inputs.LoadBalancingSettingsModelArgs;
import io.pulumi.azurenative.network.inputs.RoutingRuleArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FrontDoorArgs extends io.pulumi.resources.ResourceArgs {

    public static final FrontDoorArgs Empty = new FrontDoorArgs();

    /**
     * Backend pools available to routing rules.
     * 
     */
    @Import(name="backendPools")
      private final @Nullable Output<List<BackendPoolArgs>> backendPools;

    public Output<List<BackendPoolArgs>> getBackendPools() {
        return this.backendPools == null ? Output.empty() : this.backendPools;
    }

    /**
     * Settings for all backendPools
     * 
     */
    @Import(name="backendPoolsSettings")
      private final @Nullable Output<BackendPoolsSettingsArgs> backendPoolsSettings;

    public Output<BackendPoolsSettingsArgs> getBackendPoolsSettings() {
        return this.backendPoolsSettings == null ? Output.empty() : this.backendPoolsSettings;
    }

    /**
     * Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
     * 
     */
    @Import(name="enabledState")
      private final @Nullable Output<Either<String,FrontDoorEnabledState>> enabledState;

    public Output<Either<String,FrontDoorEnabledState>> getEnabledState() {
        return this.enabledState == null ? Output.empty() : this.enabledState;
    }

    /**
     * A friendly name for the frontDoor
     * 
     */
    @Import(name="friendlyName")
      private final @Nullable Output<String> friendlyName;

    public Output<String> getFriendlyName() {
        return this.friendlyName == null ? Output.empty() : this.friendlyName;
    }

    /**
     * Name of the Front Door which is globally unique.
     * 
     */
    @Import(name="frontDoorName")
      private final @Nullable Output<String> frontDoorName;

    public Output<String> getFrontDoorName() {
        return this.frontDoorName == null ? Output.empty() : this.frontDoorName;
    }

    /**
     * Frontend endpoints available to routing rules.
     * 
     */
    @Import(name="frontendEndpoints")
      private final @Nullable Output<List<FrontendEndpointArgs>> frontendEndpoints;

    public Output<List<FrontendEndpointArgs>> getFrontendEndpoints() {
        return this.frontendEndpoints == null ? Output.empty() : this.frontendEndpoints;
    }

    /**
     * Health probe settings associated with this Front Door instance.
     * 
     */
    @Import(name="healthProbeSettings")
      private final @Nullable Output<List<HealthProbeSettingsModelArgs>> healthProbeSettings;

    public Output<List<HealthProbeSettingsModelArgs>> getHealthProbeSettings() {
        return this.healthProbeSettings == null ? Output.empty() : this.healthProbeSettings;
    }

    /**
     * Load balancing settings associated with this Front Door instance.
     * 
     */
    @Import(name="loadBalancingSettings")
      private final @Nullable Output<List<LoadBalancingSettingsModelArgs>> loadBalancingSettings;

    public Output<List<LoadBalancingSettingsModelArgs>> getLoadBalancingSettings() {
        return this.loadBalancingSettings == null ? Output.empty() : this.loadBalancingSettings;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Routing rules associated with this Front Door.
     * 
     */
    @Import(name="routingRules")
      private final @Nullable Output<List<RoutingRuleArgs>> routingRules;

    public Output<List<RoutingRuleArgs>> getRoutingRules() {
        return this.routingRules == null ? Output.empty() : this.routingRules;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public FrontDoorArgs(
        @Nullable Output<List<BackendPoolArgs>> backendPools,
        @Nullable Output<BackendPoolsSettingsArgs> backendPoolsSettings,
        @Nullable Output<Either<String,FrontDoorEnabledState>> enabledState,
        @Nullable Output<String> friendlyName,
        @Nullable Output<String> frontDoorName,
        @Nullable Output<List<FrontendEndpointArgs>> frontendEndpoints,
        @Nullable Output<List<HealthProbeSettingsModelArgs>> healthProbeSettings,
        @Nullable Output<List<LoadBalancingSettingsModelArgs>> loadBalancingSettings,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<List<RoutingRuleArgs>> routingRules,
        @Nullable Output<Map<String,String>> tags) {
        this.backendPools = backendPools;
        this.backendPoolsSettings = backendPoolsSettings;
        this.enabledState = enabledState;
        this.friendlyName = friendlyName;
        this.frontDoorName = frontDoorName;
        this.frontendEndpoints = frontendEndpoints;
        this.healthProbeSettings = healthProbeSettings;
        this.loadBalancingSettings = loadBalancingSettings;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.routingRules = routingRules;
        this.tags = tags;
    }

    private FrontDoorArgs() {
        this.backendPools = Output.empty();
        this.backendPoolsSettings = Output.empty();
        this.enabledState = Output.empty();
        this.friendlyName = Output.empty();
        this.frontDoorName = Output.empty();
        this.frontendEndpoints = Output.empty();
        this.healthProbeSettings = Output.empty();
        this.loadBalancingSettings = Output.empty();
        this.location = Output.empty();
        this.resourceGroupName = Output.empty();
        this.routingRules = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontDoorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<BackendPoolArgs>> backendPools;
        private @Nullable Output<BackendPoolsSettingsArgs> backendPoolsSettings;
        private @Nullable Output<Either<String,FrontDoorEnabledState>> enabledState;
        private @Nullable Output<String> friendlyName;
        private @Nullable Output<String> frontDoorName;
        private @Nullable Output<List<FrontendEndpointArgs>> frontendEndpoints;
        private @Nullable Output<List<HealthProbeSettingsModelArgs>> healthProbeSettings;
        private @Nullable Output<List<LoadBalancingSettingsModelArgs>> loadBalancingSettings;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<List<RoutingRuleArgs>> routingRules;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(FrontDoorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendPools = defaults.backendPools;
    	      this.backendPoolsSettings = defaults.backendPoolsSettings;
    	      this.enabledState = defaults.enabledState;
    	      this.friendlyName = defaults.friendlyName;
    	      this.frontDoorName = defaults.frontDoorName;
    	      this.frontendEndpoints = defaults.frontendEndpoints;
    	      this.healthProbeSettings = defaults.healthProbeSettings;
    	      this.loadBalancingSettings = defaults.loadBalancingSettings;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.routingRules = defaults.routingRules;
    	      this.tags = defaults.tags;
        }

        public Builder backendPools(@Nullable Output<List<BackendPoolArgs>> backendPools) {
            this.backendPools = backendPools;
            return this;
        }

        public Builder backendPools(@Nullable List<BackendPoolArgs> backendPools) {
            this.backendPools = Output.ofNullable(backendPools);
            return this;
        }

        public Builder backendPoolsSettings(@Nullable Output<BackendPoolsSettingsArgs> backendPoolsSettings) {
            this.backendPoolsSettings = backendPoolsSettings;
            return this;
        }

        public Builder backendPoolsSettings(@Nullable BackendPoolsSettingsArgs backendPoolsSettings) {
            this.backendPoolsSettings = Output.ofNullable(backendPoolsSettings);
            return this;
        }

        public Builder enabledState(@Nullable Output<Either<String,FrontDoorEnabledState>> enabledState) {
            this.enabledState = enabledState;
            return this;
        }

        public Builder enabledState(@Nullable Either<String,FrontDoorEnabledState> enabledState) {
            this.enabledState = Output.ofNullable(enabledState);
            return this;
        }

        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }

        public Builder friendlyName(@Nullable String friendlyName) {
            this.friendlyName = Output.ofNullable(friendlyName);
            return this;
        }

        public Builder frontDoorName(@Nullable Output<String> frontDoorName) {
            this.frontDoorName = frontDoorName;
            return this;
        }

        public Builder frontDoorName(@Nullable String frontDoorName) {
            this.frontDoorName = Output.ofNullable(frontDoorName);
            return this;
        }

        public Builder frontendEndpoints(@Nullable Output<List<FrontendEndpointArgs>> frontendEndpoints) {
            this.frontendEndpoints = frontendEndpoints;
            return this;
        }

        public Builder frontendEndpoints(@Nullable List<FrontendEndpointArgs> frontendEndpoints) {
            this.frontendEndpoints = Output.ofNullable(frontendEndpoints);
            return this;
        }

        public Builder healthProbeSettings(@Nullable Output<List<HealthProbeSettingsModelArgs>> healthProbeSettings) {
            this.healthProbeSettings = healthProbeSettings;
            return this;
        }

        public Builder healthProbeSettings(@Nullable List<HealthProbeSettingsModelArgs> healthProbeSettings) {
            this.healthProbeSettings = Output.ofNullable(healthProbeSettings);
            return this;
        }

        public Builder loadBalancingSettings(@Nullable Output<List<LoadBalancingSettingsModelArgs>> loadBalancingSettings) {
            this.loadBalancingSettings = loadBalancingSettings;
            return this;
        }

        public Builder loadBalancingSettings(@Nullable List<LoadBalancingSettingsModelArgs> loadBalancingSettings) {
            this.loadBalancingSettings = Output.ofNullable(loadBalancingSettings);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder routingRules(@Nullable Output<List<RoutingRuleArgs>> routingRules) {
            this.routingRules = routingRules;
            return this;
        }

        public Builder routingRules(@Nullable List<RoutingRuleArgs> routingRules) {
            this.routingRules = Output.ofNullable(routingRules);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public FrontDoorArgs build() {
            return new FrontDoorArgs(backendPools, backendPoolsSettings, enabledState, friendlyName, frontDoorName, frontendEndpoints, healthProbeSettings, loadBalancingSettings, location, resourceGroupName, routingRules, tags);
        }
    }
}
