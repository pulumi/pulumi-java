// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.inputs;

import io.pulumi.azurenative.storage.inputs.BlobInventoryPolicyRuleResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The storage account blob inventory policy rules.
 * 
 */
public final class BlobInventoryPolicySchemaResponse extends io.pulumi.resources.InvokeArgs {

    public static final BlobInventoryPolicySchemaResponse Empty = new BlobInventoryPolicySchemaResponse();

    /**
     * Container name where blob inventory files are stored. Must be pre-created.
     * 
     */
    @InputImport(name="destination", required=true)
      private final String destination;

    public String getDestination() {
        return this.destination;
    }

    /**
     * Policy is enabled if set to true.
     * 
     */
    @InputImport(name="enabled", required=true)
      private final Boolean enabled;

    public Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * The storage account blob inventory policy rules. The rule is applied when it is enabled.
     * 
     */
    @InputImport(name="rules", required=true)
      private final List<BlobInventoryPolicyRuleResponse> rules;

    public List<BlobInventoryPolicyRuleResponse> getRules() {
        return this.rules;
    }

    /**
     * The valid value is Inventory
     * 
     */
    @InputImport(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    public BlobInventoryPolicySchemaResponse(
        String destination,
        Boolean enabled,
        List<BlobInventoryPolicyRuleResponse> rules,
        String type) {
        this.destination = Objects.requireNonNull(destination, "expected parameter 'destination' to be non-null");
        this.enabled = Objects.requireNonNull(enabled, "expected parameter 'enabled' to be non-null");
        this.rules = Objects.requireNonNull(rules, "expected parameter 'rules' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private BlobInventoryPolicySchemaResponse() {
        this.destination = null;
        this.enabled = null;
        this.rules = List.of();
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlobInventoryPolicySchemaResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String destination;
        private Boolean enabled;
        private List<BlobInventoryPolicyRuleResponse> rules;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(BlobInventoryPolicySchemaResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destination = defaults.destination;
    	      this.enabled = defaults.enabled;
    	      this.rules = defaults.rules;
    	      this.type = defaults.type;
        }

        public Builder destination(String destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }

        public Builder rules(List<BlobInventoryPolicyRuleResponse> rules) {
            this.rules = Objects.requireNonNull(rules);
            return this;
        }

        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public BlobInventoryPolicySchemaResponse build() {
            return new BlobInventoryPolicySchemaResponse(destination, enabled, rules, type);
        }
    }
}
