// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement.outputs;

import io.pulumi.azurenative.apimanagement.outputs.PipelineDiagnosticSettingsResponse;
import io.pulumi.azurenative.apimanagement.outputs.SamplingSettingsResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetApiDiagnosticResult {
    /**
     * Specifies for what type of messages sampling settings should not apply.
     * 
     */
    private final @Nullable String alwaysLog;
    /**
     * Diagnostic settings for incoming/outgoing HTTP messages to the Backend
     * 
     */
    private final @Nullable PipelineDiagnosticSettingsResponse backend;
    /**
     * Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
     * 
     */
    private final @Nullable PipelineDiagnosticSettingsResponse frontend;
    /**
     * Sets correlation protocol to use for Application Insights diagnostics.
     * 
     */
    private final @Nullable String httpCorrelationProtocol;
    /**
     * Resource ID.
     * 
     */
    private final String id;
    /**
     * Log the ClientIP. Default is false.
     * 
     */
    private final @Nullable Boolean logClientIp;
    /**
     * Resource Id of a target logger.
     * 
     */
    private final String loggerId;
    /**
     * Resource name.
     * 
     */
    private final String name;
    /**
     * The format of the Operation Name for Application Insights telemetries. Default is Name.
     * 
     */
    private final @Nullable String operationNameFormat;
    /**
     * Sampling settings for Diagnostic.
     * 
     */
    private final @Nullable SamplingSettingsResponse sampling;
    /**
     * Resource type for API Management resource.
     * 
     */
    private final String type;
    /**
     * The verbosity level applied to traces emitted by trace policies.
     * 
     */
    private final @Nullable String verbosity;

    @OutputCustomType.Constructor({"alwaysLog","backend","frontend","httpCorrelationProtocol","id","logClientIp","loggerId","name","operationNameFormat","sampling","type","verbosity"})
    private GetApiDiagnosticResult(
        @Nullable String alwaysLog,
        @Nullable PipelineDiagnosticSettingsResponse backend,
        @Nullable PipelineDiagnosticSettingsResponse frontend,
        @Nullable String httpCorrelationProtocol,
        String id,
        @Nullable Boolean logClientIp,
        String loggerId,
        String name,
        @Nullable String operationNameFormat,
        @Nullable SamplingSettingsResponse sampling,
        String type,
        @Nullable String verbosity) {
        this.alwaysLog = alwaysLog;
        this.backend = backend;
        this.frontend = frontend;
        this.httpCorrelationProtocol = httpCorrelationProtocol;
        this.id = Objects.requireNonNull(id);
        this.logClientIp = logClientIp;
        this.loggerId = Objects.requireNonNull(loggerId);
        this.name = Objects.requireNonNull(name);
        this.operationNameFormat = operationNameFormat;
        this.sampling = sampling;
        this.type = Objects.requireNonNull(type);
        this.verbosity = verbosity;
    }

    /**
     * Specifies for what type of messages sampling settings should not apply.
     * 
     */
    public Optional<String> getAlwaysLog() {
        return Optional.ofNullable(this.alwaysLog);
    }
    /**
     * Diagnostic settings for incoming/outgoing HTTP messages to the Backend
     * 
     */
    public Optional<PipelineDiagnosticSettingsResponse> getBackend() {
        return Optional.ofNullable(this.backend);
    }
    /**
     * Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
     * 
     */
    public Optional<PipelineDiagnosticSettingsResponse> getFrontend() {
        return Optional.ofNullable(this.frontend);
    }
    /**
     * Sets correlation protocol to use for Application Insights diagnostics.
     * 
     */
    public Optional<String> getHttpCorrelationProtocol() {
        return Optional.ofNullable(this.httpCorrelationProtocol);
    }
    /**
     * Resource ID.
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * Log the ClientIP. Default is false.
     * 
     */
    public Optional<Boolean> getLogClientIp() {
        return Optional.ofNullable(this.logClientIp);
    }
    /**
     * Resource Id of a target logger.
     * 
     */
    public String getLoggerId() {
        return this.loggerId;
    }
    /**
     * Resource name.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * The format of the Operation Name for Application Insights telemetries. Default is Name.
     * 
     */
    public Optional<String> getOperationNameFormat() {
        return Optional.ofNullable(this.operationNameFormat);
    }
    /**
     * Sampling settings for Diagnostic.
     * 
     */
    public Optional<SamplingSettingsResponse> getSampling() {
        return Optional.ofNullable(this.sampling);
    }
    /**
     * Resource type for API Management resource.
     * 
     */
    public String getType() {
        return this.type;
    }
    /**
     * The verbosity level applied to traces emitted by trace policies.
     * 
     */
    public Optional<String> getVerbosity() {
        return Optional.ofNullable(this.verbosity);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApiDiagnosticResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String alwaysLog;
        private @Nullable PipelineDiagnosticSettingsResponse backend;
        private @Nullable PipelineDiagnosticSettingsResponse frontend;
        private @Nullable String httpCorrelationProtocol;
        private String id;
        private @Nullable Boolean logClientIp;
        private String loggerId;
        private String name;
        private @Nullable String operationNameFormat;
        private @Nullable SamplingSettingsResponse sampling;
        private String type;
        private @Nullable String verbosity;

        public Builder() {
    	      // Empty
        }

        public Builder(GetApiDiagnosticResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alwaysLog = defaults.alwaysLog;
    	      this.backend = defaults.backend;
    	      this.frontend = defaults.frontend;
    	      this.httpCorrelationProtocol = defaults.httpCorrelationProtocol;
    	      this.id = defaults.id;
    	      this.logClientIp = defaults.logClientIp;
    	      this.loggerId = defaults.loggerId;
    	      this.name = defaults.name;
    	      this.operationNameFormat = defaults.operationNameFormat;
    	      this.sampling = defaults.sampling;
    	      this.type = defaults.type;
    	      this.verbosity = defaults.verbosity;
        }

        public Builder setAlwaysLog(@Nullable String alwaysLog) {
            this.alwaysLog = alwaysLog;
            return this;
        }

        public Builder setBackend(@Nullable PipelineDiagnosticSettingsResponse backend) {
            this.backend = backend;
            return this;
        }

        public Builder setFrontend(@Nullable PipelineDiagnosticSettingsResponse frontend) {
            this.frontend = frontend;
            return this;
        }

        public Builder setHttpCorrelationProtocol(@Nullable String httpCorrelationProtocol) {
            this.httpCorrelationProtocol = httpCorrelationProtocol;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLogClientIp(@Nullable Boolean logClientIp) {
            this.logClientIp = logClientIp;
            return this;
        }

        public Builder setLoggerId(String loggerId) {
            this.loggerId = Objects.requireNonNull(loggerId);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setOperationNameFormat(@Nullable String operationNameFormat) {
            this.operationNameFormat = operationNameFormat;
            return this;
        }

        public Builder setSampling(@Nullable SamplingSettingsResponse sampling) {
            this.sampling = sampling;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setVerbosity(@Nullable String verbosity) {
            this.verbosity = verbosity;
            return this;
        }

        public GetApiDiagnosticResult build() {
            return new GetApiDiagnosticResult(alwaysLog, backend, frontend, httpCorrelationProtocol, id, logClientIp, loggerId, name, operationNameFormat, sampling, type, verbosity);
        }
    }
}
