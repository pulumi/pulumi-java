// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storsimple;

import io.pulumi.azurenative.storsimple.enums.Kind;
import io.pulumi.azurenative.storsimple.enums.MonitoringStatus;
import io.pulumi.azurenative.storsimple.enums.VolumeStatus;
import io.pulumi.azurenative.storsimple.enums.VolumeType;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VolumeArgs extends io.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * The IDs of the access control records, associated with the volume.
     * 
     */
    @Import(name="accessControlRecordIds", required=true)
      private final Output<List<String>> accessControlRecordIds;

    public Output<List<String>> accessControlRecordIds() {
        return this.accessControlRecordIds;
    }

    /**
     * The device name
     * 
     */
    @Import(name="deviceName", required=true)
      private final Output<String> deviceName;

    public Output<String> deviceName() {
        return this.deviceName;
    }

    /**
     * The Kind of the object. Currently only Series8000 is supported
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<Kind> kind;

    public Output<Kind> kind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * The manager name
     * 
     */
    @Import(name="managerName", required=true)
      private final Output<String> managerName;

    public Output<String> managerName() {
        return this.managerName;
    }

    /**
     * The monitoring status of the volume.
     * 
     */
    @Import(name="monitoringStatus", required=true)
      private final Output<MonitoringStatus> monitoringStatus;

    public Output<MonitoringStatus> monitoringStatus() {
        return this.monitoringStatus;
    }

    /**
     * The resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The size of the volume in bytes.
     * 
     */
    @Import(name="sizeInBytes", required=true)
      private final Output<Double> sizeInBytes;

    public Output<Double> sizeInBytes() {
        return this.sizeInBytes;
    }

    /**
     * The volume container name.
     * 
     */
    @Import(name="volumeContainerName", required=true)
      private final Output<String> volumeContainerName;

    public Output<String> volumeContainerName() {
        return this.volumeContainerName;
    }

    /**
     * The volume name.
     * 
     */
    @Import(name="volumeName")
      private final @Nullable Output<String> volumeName;

    public Output<String> volumeName() {
        return this.volumeName == null ? Codegen.empty() : this.volumeName;
    }

    /**
     * The volume status.
     * 
     */
    @Import(name="volumeStatus", required=true)
      private final Output<VolumeStatus> volumeStatus;

    public Output<VolumeStatus> volumeStatus() {
        return this.volumeStatus;
    }

    /**
     * The type of the volume.
     * 
     */
    @Import(name="volumeType", required=true)
      private final Output<VolumeType> volumeType;

    public Output<VolumeType> volumeType() {
        return this.volumeType;
    }

    public VolumeArgs(
        Output<List<String>> accessControlRecordIds,
        Output<String> deviceName,
        @Nullable Output<Kind> kind,
        Output<String> managerName,
        Output<MonitoringStatus> monitoringStatus,
        Output<String> resourceGroupName,
        Output<Double> sizeInBytes,
        Output<String> volumeContainerName,
        @Nullable Output<String> volumeName,
        Output<VolumeStatus> volumeStatus,
        Output<VolumeType> volumeType) {
        this.accessControlRecordIds = Objects.requireNonNull(accessControlRecordIds, "expected parameter 'accessControlRecordIds' to be non-null");
        this.deviceName = Objects.requireNonNull(deviceName, "expected parameter 'deviceName' to be non-null");
        this.kind = kind;
        this.managerName = Objects.requireNonNull(managerName, "expected parameter 'managerName' to be non-null");
        this.monitoringStatus = Objects.requireNonNull(monitoringStatus, "expected parameter 'monitoringStatus' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sizeInBytes = Objects.requireNonNull(sizeInBytes, "expected parameter 'sizeInBytes' to be non-null");
        this.volumeContainerName = Objects.requireNonNull(volumeContainerName, "expected parameter 'volumeContainerName' to be non-null");
        this.volumeName = volumeName;
        this.volumeStatus = Objects.requireNonNull(volumeStatus, "expected parameter 'volumeStatus' to be non-null");
        this.volumeType = Objects.requireNonNull(volumeType, "expected parameter 'volumeType' to be non-null");
    }

    private VolumeArgs() {
        this.accessControlRecordIds = Codegen.empty();
        this.deviceName = Codegen.empty();
        this.kind = Codegen.empty();
        this.managerName = Codegen.empty();
        this.monitoringStatus = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sizeInBytes = Codegen.empty();
        this.volumeContainerName = Codegen.empty();
        this.volumeName = Codegen.empty();
        this.volumeStatus = Codegen.empty();
        this.volumeType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> accessControlRecordIds;
        private Output<String> deviceName;
        private @Nullable Output<Kind> kind;
        private Output<String> managerName;
        private Output<MonitoringStatus> monitoringStatus;
        private Output<String> resourceGroupName;
        private Output<Double> sizeInBytes;
        private Output<String> volumeContainerName;
        private @Nullable Output<String> volumeName;
        private Output<VolumeStatus> volumeStatus;
        private Output<VolumeType> volumeType;

        public Builder() {
    	      // Empty
        }

        public Builder(VolumeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessControlRecordIds = defaults.accessControlRecordIds;
    	      this.deviceName = defaults.deviceName;
    	      this.kind = defaults.kind;
    	      this.managerName = defaults.managerName;
    	      this.monitoringStatus = defaults.monitoringStatus;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sizeInBytes = defaults.sizeInBytes;
    	      this.volumeContainerName = defaults.volumeContainerName;
    	      this.volumeName = defaults.volumeName;
    	      this.volumeStatus = defaults.volumeStatus;
    	      this.volumeType = defaults.volumeType;
        }

        public Builder accessControlRecordIds(Output<List<String>> accessControlRecordIds) {
            this.accessControlRecordIds = Objects.requireNonNull(accessControlRecordIds);
            return this;
        }
        public Builder accessControlRecordIds(List<String> accessControlRecordIds) {
            this.accessControlRecordIds = Output.of(Objects.requireNonNull(accessControlRecordIds));
            return this;
        }
        public Builder accessControlRecordIds(String... accessControlRecordIds) {
            return accessControlRecordIds(List.of(accessControlRecordIds));
        }
        public Builder deviceName(Output<String> deviceName) {
            this.deviceName = Objects.requireNonNull(deviceName);
            return this;
        }
        public Builder deviceName(String deviceName) {
            this.deviceName = Output.of(Objects.requireNonNull(deviceName));
            return this;
        }
        public Builder kind(@Nullable Output<Kind> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable Kind kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder managerName(Output<String> managerName) {
            this.managerName = Objects.requireNonNull(managerName);
            return this;
        }
        public Builder managerName(String managerName) {
            this.managerName = Output.of(Objects.requireNonNull(managerName));
            return this;
        }
        public Builder monitoringStatus(Output<MonitoringStatus> monitoringStatus) {
            this.monitoringStatus = Objects.requireNonNull(monitoringStatus);
            return this;
        }
        public Builder monitoringStatus(MonitoringStatus monitoringStatus) {
            this.monitoringStatus = Output.of(Objects.requireNonNull(monitoringStatus));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sizeInBytes(Output<Double> sizeInBytes) {
            this.sizeInBytes = Objects.requireNonNull(sizeInBytes);
            return this;
        }
        public Builder sizeInBytes(Double sizeInBytes) {
            this.sizeInBytes = Output.of(Objects.requireNonNull(sizeInBytes));
            return this;
        }
        public Builder volumeContainerName(Output<String> volumeContainerName) {
            this.volumeContainerName = Objects.requireNonNull(volumeContainerName);
            return this;
        }
        public Builder volumeContainerName(String volumeContainerName) {
            this.volumeContainerName = Output.of(Objects.requireNonNull(volumeContainerName));
            return this;
        }
        public Builder volumeName(@Nullable Output<String> volumeName) {
            this.volumeName = volumeName;
            return this;
        }
        public Builder volumeName(@Nullable String volumeName) {
            this.volumeName = Codegen.ofNullable(volumeName);
            return this;
        }
        public Builder volumeStatus(Output<VolumeStatus> volumeStatus) {
            this.volumeStatus = Objects.requireNonNull(volumeStatus);
            return this;
        }
        public Builder volumeStatus(VolumeStatus volumeStatus) {
            this.volumeStatus = Output.of(Objects.requireNonNull(volumeStatus));
            return this;
        }
        public Builder volumeType(Output<VolumeType> volumeType) {
            this.volumeType = Objects.requireNonNull(volumeType);
            return this;
        }
        public Builder volumeType(VolumeType volumeType) {
            this.volumeType = Output.of(Objects.requireNonNull(volumeType));
            return this;
        }        public VolumeArgs build() {
            return new VolumeArgs(accessControlRecordIds, deviceName, kind, managerName, monitoringStatus, resourceGroupName, sizeInBytes, volumeContainerName, volumeName, volumeStatus, volumeType);
        }
    }
}
