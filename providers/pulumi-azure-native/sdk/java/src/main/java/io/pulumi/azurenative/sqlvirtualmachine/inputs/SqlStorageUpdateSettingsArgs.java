// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sqlvirtualmachine.inputs;

import io.pulumi.azurenative.sqlvirtualmachine.enums.DiskConfigurationType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Set disk storage settings for SQL Server.
 * 
 */
public final class SqlStorageUpdateSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final SqlStorageUpdateSettingsArgs Empty = new SqlStorageUpdateSettingsArgs();

    /**
     * Disk configuration to apply to SQL Server.
     * 
     */
    @Import(name="diskConfigurationType")
      private final @Nullable Output<Either<String,DiskConfigurationType>> diskConfigurationType;

    public Output<Either<String,DiskConfigurationType>> getDiskConfigurationType() {
        return this.diskConfigurationType == null ? Codegen.empty() : this.diskConfigurationType;
    }

    /**
     * Virtual machine disk count.
     * 
     */
    @Import(name="diskCount")
      private final @Nullable Output<Integer> diskCount;

    public Output<Integer> getDiskCount() {
        return this.diskCount == null ? Codegen.empty() : this.diskCount;
    }

    /**
     * Device id of the first disk to be updated.
     * 
     */
    @Import(name="startingDeviceId")
      private final @Nullable Output<Integer> startingDeviceId;

    public Output<Integer> getStartingDeviceId() {
        return this.startingDeviceId == null ? Codegen.empty() : this.startingDeviceId;
    }

    public SqlStorageUpdateSettingsArgs(
        @Nullable Output<Either<String,DiskConfigurationType>> diskConfigurationType,
        @Nullable Output<Integer> diskCount,
        @Nullable Output<Integer> startingDeviceId) {
        this.diskConfigurationType = diskConfigurationType;
        this.diskCount = diskCount;
        this.startingDeviceId = startingDeviceId;
    }

    private SqlStorageUpdateSettingsArgs() {
        this.diskConfigurationType = Codegen.empty();
        this.diskCount = Codegen.empty();
        this.startingDeviceId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlStorageUpdateSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,DiskConfigurationType>> diskConfigurationType;
        private @Nullable Output<Integer> diskCount;
        private @Nullable Output<Integer> startingDeviceId;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlStorageUpdateSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskConfigurationType = defaults.diskConfigurationType;
    	      this.diskCount = defaults.diskCount;
    	      this.startingDeviceId = defaults.startingDeviceId;
        }

        public Builder diskConfigurationType(@Nullable Output<Either<String,DiskConfigurationType>> diskConfigurationType) {
            this.diskConfigurationType = diskConfigurationType;
            return this;
        }
        public Builder diskConfigurationType(@Nullable Either<String,DiskConfigurationType> diskConfigurationType) {
            this.diskConfigurationType = Codegen.ofNullable(diskConfigurationType);
            return this;
        }
        public Builder diskCount(@Nullable Output<Integer> diskCount) {
            this.diskCount = diskCount;
            return this;
        }
        public Builder diskCount(@Nullable Integer diskCount) {
            this.diskCount = Codegen.ofNullable(diskCount);
            return this;
        }
        public Builder startingDeviceId(@Nullable Output<Integer> startingDeviceId) {
            this.startingDeviceId = startingDeviceId;
            return this;
        }
        public Builder startingDeviceId(@Nullable Integer startingDeviceId) {
            this.startingDeviceId = Codegen.ofNullable(startingDeviceId);
            return this;
        }        public SqlStorageUpdateSettingsArgs build() {
            return new SqlStorageUpdateSettingsArgs(diskConfigurationType, diskCount, startingDeviceId);
        }
    }
}
