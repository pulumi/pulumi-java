// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sqlvirtualmachine.inputs;

import io.pulumi.azurenative.sqlvirtualmachine.enums.DiskConfigurationType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Set disk storage settings for SQL Server.
 * 
 */
public final class SqlStorageUpdateSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final SqlStorageUpdateSettingsArgs Empty = new SqlStorageUpdateSettingsArgs();

    /**
     * Disk configuration to apply to SQL Server.
     * 
     */
    @InputImport(name="diskConfigurationType")
    private final @Nullable Input<Either<String,DiskConfigurationType>> diskConfigurationType;

    public Input<Either<String,DiskConfigurationType>> getDiskConfigurationType() {
        return this.diskConfigurationType == null ? Input.empty() : this.diskConfigurationType;
    }

    /**
     * Virtual machine disk count.
     * 
     */
    @InputImport(name="diskCount")
    private final @Nullable Input<Integer> diskCount;

    public Input<Integer> getDiskCount() {
        return this.diskCount == null ? Input.empty() : this.diskCount;
    }

    /**
     * Device id of the first disk to be updated.
     * 
     */
    @InputImport(name="startingDeviceId")
    private final @Nullable Input<Integer> startingDeviceId;

    public Input<Integer> getStartingDeviceId() {
        return this.startingDeviceId == null ? Input.empty() : this.startingDeviceId;
    }

    public SqlStorageUpdateSettingsArgs(
        @Nullable Input<Either<String,DiskConfigurationType>> diskConfigurationType,
        @Nullable Input<Integer> diskCount,
        @Nullable Input<Integer> startingDeviceId) {
        this.diskConfigurationType = diskConfigurationType;
        this.diskCount = diskCount;
        this.startingDeviceId = startingDeviceId;
    }

    private SqlStorageUpdateSettingsArgs() {
        this.diskConfigurationType = Input.empty();
        this.diskCount = Input.empty();
        this.startingDeviceId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlStorageUpdateSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,DiskConfigurationType>> diskConfigurationType;
        private @Nullable Input<Integer> diskCount;
        private @Nullable Input<Integer> startingDeviceId;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlStorageUpdateSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskConfigurationType = defaults.diskConfigurationType;
    	      this.diskCount = defaults.diskCount;
    	      this.startingDeviceId = defaults.startingDeviceId;
        }

        public Builder setDiskConfigurationType(@Nullable Input<Either<String,DiskConfigurationType>> diskConfigurationType) {
            this.diskConfigurationType = diskConfigurationType;
            return this;
        }

        public Builder setDiskConfigurationType(@Nullable Either<String,DiskConfigurationType> diskConfigurationType) {
            this.diskConfigurationType = Input.ofNullable(diskConfigurationType);
            return this;
        }

        public Builder setDiskCount(@Nullable Input<Integer> diskCount) {
            this.diskCount = diskCount;
            return this;
        }

        public Builder setDiskCount(@Nullable Integer diskCount) {
            this.diskCount = Input.ofNullable(diskCount);
            return this;
        }

        public Builder setStartingDeviceId(@Nullable Input<Integer> startingDeviceId) {
            this.startingDeviceId = startingDeviceId;
            return this;
        }

        public Builder setStartingDeviceId(@Nullable Integer startingDeviceId) {
            this.startingDeviceId = Input.ofNullable(startingDeviceId);
            return this;
        }

        public SqlStorageUpdateSettingsArgs build() {
            return new SqlStorageUpdateSettingsArgs(diskConfigurationType, diskCount, startingDeviceId);
        }
    }
}
