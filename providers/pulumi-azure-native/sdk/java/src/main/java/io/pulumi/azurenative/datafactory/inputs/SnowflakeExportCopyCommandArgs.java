// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Snowflake export command settings.
 * 
 */
public final class SnowflakeExportCopyCommandArgs extends io.pulumi.resources.ResourceArgs {

    public static final SnowflakeExportCopyCommandArgs Empty = new SnowflakeExportCopyCommandArgs();

    /**
     * Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
     * 
     */
    @InputImport(name="additionalCopyOptions")
    private final @Nullable Input<Map<String,Object>> additionalCopyOptions;

    public Input<Map<String,Object>> getAdditionalCopyOptions() {
        return this.additionalCopyOptions == null ? Input.empty() : this.additionalCopyOptions;
    }

    /**
     * Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" }
     * 
     */
    @InputImport(name="additionalFormatOptions")
    private final @Nullable Input<Map<String,Object>> additionalFormatOptions;

    public Input<Map<String,Object>> getAdditionalFormatOptions() {
        return this.additionalFormatOptions == null ? Input.empty() : this.additionalFormatOptions;
    }

    /**
     * The export setting type.
     * Expected value is 'SnowflakeExportCopyCommand'.
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public SnowflakeExportCopyCommandArgs(
        @Nullable Input<Map<String,Object>> additionalCopyOptions,
        @Nullable Input<Map<String,Object>> additionalFormatOptions,
        Input<String> type) {
        this.additionalCopyOptions = additionalCopyOptions;
        this.additionalFormatOptions = additionalFormatOptions;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private SnowflakeExportCopyCommandArgs() {
        this.additionalCopyOptions = Input.empty();
        this.additionalFormatOptions = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SnowflakeExportCopyCommandArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Map<String,Object>> additionalCopyOptions;
        private @Nullable Input<Map<String,Object>> additionalFormatOptions;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(SnowflakeExportCopyCommandArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalCopyOptions = defaults.additionalCopyOptions;
    	      this.additionalFormatOptions = defaults.additionalFormatOptions;
    	      this.type = defaults.type;
        }

        public Builder setAdditionalCopyOptions(@Nullable Input<Map<String,Object>> additionalCopyOptions) {
            this.additionalCopyOptions = additionalCopyOptions;
            return this;
        }

        public Builder setAdditionalCopyOptions(@Nullable Map<String,Object> additionalCopyOptions) {
            this.additionalCopyOptions = Input.ofNullable(additionalCopyOptions);
            return this;
        }

        public Builder setAdditionalFormatOptions(@Nullable Input<Map<String,Object>> additionalFormatOptions) {
            this.additionalFormatOptions = additionalFormatOptions;
            return this;
        }

        public Builder setAdditionalFormatOptions(@Nullable Map<String,Object> additionalFormatOptions) {
            this.additionalFormatOptions = Input.ofNullable(additionalFormatOptions);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public SnowflakeExportCopyCommandArgs build() {
            return new SnowflakeExportCopyCommandArgs(additionalCopyOptions, additionalFormatOptions, type);
        }
    }
}
