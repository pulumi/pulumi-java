// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.certificateregistration.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class CertificateDetailsResponse {
    /**
     * Certificate Issuer.
     * 
     */
    private final String issuer;
    /**
     * Date Certificate is valid to.
     * 
     */
    private final String notAfter;
    /**
     * Date Certificate is valid from.
     * 
     */
    private final String notBefore;
    /**
     * Raw certificate data.
     * 
     */
    private final String rawData;
    /**
     * Certificate Serial Number.
     * 
     */
    private final String serialNumber;
    /**
     * Certificate Signature algorithm.
     * 
     */
    private final String signatureAlgorithm;
    /**
     * Certificate Subject.
     * 
     */
    private final String subject;
    /**
     * Certificate Thumbprint.
     * 
     */
    private final String thumbprint;
    /**
     * Certificate Version.
     * 
     */
    private final Integer version;

    @OutputCustomType.Constructor
    private CertificateDetailsResponse(
        @OutputCustomType.Parameter("issuer") String issuer,
        @OutputCustomType.Parameter("notAfter") String notAfter,
        @OutputCustomType.Parameter("notBefore") String notBefore,
        @OutputCustomType.Parameter("rawData") String rawData,
        @OutputCustomType.Parameter("serialNumber") String serialNumber,
        @OutputCustomType.Parameter("signatureAlgorithm") String signatureAlgorithm,
        @OutputCustomType.Parameter("subject") String subject,
        @OutputCustomType.Parameter("thumbprint") String thumbprint,
        @OutputCustomType.Parameter("version") Integer version) {
        this.issuer = issuer;
        this.notAfter = notAfter;
        this.notBefore = notBefore;
        this.rawData = rawData;
        this.serialNumber = serialNumber;
        this.signatureAlgorithm = signatureAlgorithm;
        this.subject = subject;
        this.thumbprint = thumbprint;
        this.version = version;
    }

    /**
     * Certificate Issuer.
     * 
    */
    public String getIssuer() {
        return this.issuer;
    }
    /**
     * Date Certificate is valid to.
     * 
    */
    public String getNotAfter() {
        return this.notAfter;
    }
    /**
     * Date Certificate is valid from.
     * 
    */
    public String getNotBefore() {
        return this.notBefore;
    }
    /**
     * Raw certificate data.
     * 
    */
    public String getRawData() {
        return this.rawData;
    }
    /**
     * Certificate Serial Number.
     * 
    */
    public String getSerialNumber() {
        return this.serialNumber;
    }
    /**
     * Certificate Signature algorithm.
     * 
    */
    public String getSignatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    /**
     * Certificate Subject.
     * 
    */
    public String getSubject() {
        return this.subject;
    }
    /**
     * Certificate Thumbprint.
     * 
    */
    public String getThumbprint() {
        return this.thumbprint;
    }
    /**
     * Certificate Version.
     * 
    */
    public Integer getVersion() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String issuer;
        private String notAfter;
        private String notBefore;
        private String rawData;
        private String serialNumber;
        private String signatureAlgorithm;
        private String subject;
        private String thumbprint;
        private Integer version;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.issuer = defaults.issuer;
    	      this.notAfter = defaults.notAfter;
    	      this.notBefore = defaults.notBefore;
    	      this.rawData = defaults.rawData;
    	      this.serialNumber = defaults.serialNumber;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.subject = defaults.subject;
    	      this.thumbprint = defaults.thumbprint;
    	      this.version = defaults.version;
        }

        public Builder issuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }

        public Builder notAfter(String notAfter) {
            this.notAfter = Objects.requireNonNull(notAfter);
            return this;
        }

        public Builder notBefore(String notBefore) {
            this.notBefore = Objects.requireNonNull(notBefore);
            return this;
        }

        public Builder rawData(String rawData) {
            this.rawData = Objects.requireNonNull(rawData);
            return this;
        }

        public Builder serialNumber(String serialNumber) {
            this.serialNumber = Objects.requireNonNull(serialNumber);
            return this;
        }

        public Builder signatureAlgorithm(String signatureAlgorithm) {
            this.signatureAlgorithm = Objects.requireNonNull(signatureAlgorithm);
            return this;
        }

        public Builder subject(String subject) {
            this.subject = Objects.requireNonNull(subject);
            return this;
        }

        public Builder thumbprint(String thumbprint) {
            this.thumbprint = Objects.requireNonNull(thumbprint);
            return this;
        }

        public Builder version(Integer version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public CertificateDetailsResponse build() {
            return new CertificateDetailsResponse(issuer, notAfter, notBefore, rawData, serialNumber, signatureAlgorithm, subject, thumbprint, version);
        }
    }
}
