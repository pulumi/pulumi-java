// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry;

import io.pulumi.azurenative.containerregistry.enums.PipelineOptions;
import io.pulumi.azurenative.containerregistry.inputs.IdentityPropertiesArgs;
import io.pulumi.azurenative.containerregistry.inputs.ImportPipelineSourcePropertiesArgs;
import io.pulumi.azurenative.containerregistry.inputs.PipelineTriggerPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ImportPipelineArgs extends io.pulumi.resources.ResourceArgs {

    public static final ImportPipelineArgs Empty = new ImportPipelineArgs();

    /**
     * The identity of the import pipeline.
     * 
     */
    @InputImport(name="identity")
    private final @Nullable Input<IdentityPropertiesArgs> identity;

    public Input<IdentityPropertiesArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    /**
     * The name of the import pipeline.
     * 
     */
    @InputImport(name="importPipelineName")
    private final @Nullable Input<String> importPipelineName;

    public Input<String> getImportPipelineName() {
        return this.importPipelineName == null ? Input.empty() : this.importPipelineName;
    }

    /**
     * The location of the import pipeline.
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The list of all options configured for the pipeline.
     * 
     */
    @InputImport(name="options")
    private final @Nullable Input<List<Either<String,PipelineOptions>>> options;

    public Input<List<Either<String,PipelineOptions>>> getOptions() {
        return this.options == null ? Input.empty() : this.options;
    }

    /**
     * The name of the container registry.
     * 
     */
    @InputImport(name="registryName", required=true)
    private final Input<String> registryName;

    public Input<String> getRegistryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The source properties of the import pipeline.
     * 
     */
    @InputImport(name="source", required=true)
    private final Input<ImportPipelineSourcePropertiesArgs> source;

    public Input<ImportPipelineSourcePropertiesArgs> getSource() {
        return this.source;
    }

    /**
     * The properties that describe the trigger of the import pipeline.
     * 
     */
    @InputImport(name="trigger")
    private final @Nullable Input<PipelineTriggerPropertiesArgs> trigger;

    public Input<PipelineTriggerPropertiesArgs> getTrigger() {
        return this.trigger == null ? Input.empty() : this.trigger;
    }

    public ImportPipelineArgs(
        @Nullable Input<IdentityPropertiesArgs> identity,
        @Nullable Input<String> importPipelineName,
        @Nullable Input<String> location,
        @Nullable Input<List<Either<String,PipelineOptions>>> options,
        Input<String> registryName,
        Input<String> resourceGroupName,
        Input<ImportPipelineSourcePropertiesArgs> source,
        @Nullable Input<PipelineTriggerPropertiesArgs> trigger) {
        this.identity = identity;
        this.importPipelineName = importPipelineName;
        this.location = location;
        this.options = options;
        this.registryName = Objects.requireNonNull(registryName, "expected parameter 'registryName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.source = Objects.requireNonNull(source, "expected parameter 'source' to be non-null");
        this.trigger = trigger;
    }

    private ImportPipelineArgs() {
        this.identity = Input.empty();
        this.importPipelineName = Input.empty();
        this.location = Input.empty();
        this.options = Input.empty();
        this.registryName = Input.empty();
        this.resourceGroupName = Input.empty();
        this.source = Input.empty();
        this.trigger = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImportPipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<IdentityPropertiesArgs> identity;
        private @Nullable Input<String> importPipelineName;
        private @Nullable Input<String> location;
        private @Nullable Input<List<Either<String,PipelineOptions>>> options;
        private Input<String> registryName;
        private Input<String> resourceGroupName;
        private Input<ImportPipelineSourcePropertiesArgs> source;
        private @Nullable Input<PipelineTriggerPropertiesArgs> trigger;

        public Builder() {
    	      // Empty
        }

        public Builder(ImportPipelineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.identity = defaults.identity;
    	      this.importPipelineName = defaults.importPipelineName;
    	      this.location = defaults.location;
    	      this.options = defaults.options;
    	      this.registryName = defaults.registryName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.source = defaults.source;
    	      this.trigger = defaults.trigger;
        }

        public Builder setIdentity(@Nullable Input<IdentityPropertiesArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIdentity(@Nullable IdentityPropertiesArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder setImportPipelineName(@Nullable Input<String> importPipelineName) {
            this.importPipelineName = importPipelineName;
            return this;
        }

        public Builder setImportPipelineName(@Nullable String importPipelineName) {
            this.importPipelineName = Input.ofNullable(importPipelineName);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setOptions(@Nullable Input<List<Either<String,PipelineOptions>>> options) {
            this.options = options;
            return this;
        }

        public Builder setOptions(@Nullable List<Either<String,PipelineOptions>> options) {
            this.options = Input.ofNullable(options);
            return this;
        }

        public Builder setRegistryName(Input<String> registryName) {
            this.registryName = Objects.requireNonNull(registryName);
            return this;
        }

        public Builder setRegistryName(String registryName) {
            this.registryName = Input.of(Objects.requireNonNull(registryName));
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSource(Input<ImportPipelineSourcePropertiesArgs> source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }

        public Builder setSource(ImportPipelineSourcePropertiesArgs source) {
            this.source = Input.of(Objects.requireNonNull(source));
            return this;
        }

        public Builder setTrigger(@Nullable Input<PipelineTriggerPropertiesArgs> trigger) {
            this.trigger = trigger;
            return this;
        }

        public Builder setTrigger(@Nullable PipelineTriggerPropertiesArgs trigger) {
            this.trigger = Input.ofNullable(trigger);
            return this;
        }

        public ImportPipelineArgs build() {
            return new ImportPipelineArgs(identity, importPipelineName, location, options, registryName, resourceGroupName, source, trigger);
        }
    }
}
