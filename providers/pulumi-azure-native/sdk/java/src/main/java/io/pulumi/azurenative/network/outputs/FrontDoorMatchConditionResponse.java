// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FrontDoorMatchConditionResponse {
    /**
     * List of possible match values.
     * 
     */
    private final List<String> matchValue;
    /**
     * Request variable to compare with.
     * 
     */
    private final String matchVariable;
    /**
     * Describes if the result of this condition should be negated.
     * 
     */
    private final @Nullable Boolean negateCondition;
    /**
     * Comparison type to use for matching with the variable value.
     * 
     */
    private final String operator;
    /**
     * Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.
     * 
     */
    private final @Nullable String selector;
    /**
     * List of transforms.
     * 
     */
    private final @Nullable List<String> transforms;

    @CustomType.Constructor
    private FrontDoorMatchConditionResponse(
        @CustomType.Parameter("matchValue") List<String> matchValue,
        @CustomType.Parameter("matchVariable") String matchVariable,
        @CustomType.Parameter("negateCondition") @Nullable Boolean negateCondition,
        @CustomType.Parameter("operator") String operator,
        @CustomType.Parameter("selector") @Nullable String selector,
        @CustomType.Parameter("transforms") @Nullable List<String> transforms) {
        this.matchValue = matchValue;
        this.matchVariable = matchVariable;
        this.negateCondition = negateCondition;
        this.operator = operator;
        this.selector = selector;
        this.transforms = transforms;
    }

    /**
     * List of possible match values.
     * 
    */
    public List<String> matchValue() {
        return this.matchValue;
    }
    /**
     * Request variable to compare with.
     * 
    */
    public String matchVariable() {
        return this.matchVariable;
    }
    /**
     * Describes if the result of this condition should be negated.
     * 
    */
    public Optional<Boolean> negateCondition() {
        return Optional.ofNullable(this.negateCondition);
    }
    /**
     * Comparison type to use for matching with the variable value.
     * 
    */
    public String operator() {
        return this.operator;
    }
    /**
     * Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.
     * 
    */
    public Optional<String> selector() {
        return Optional.ofNullable(this.selector);
    }
    /**
     * List of transforms.
     * 
    */
    public List<String> transforms() {
        return this.transforms == null ? List.of() : this.transforms;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontDoorMatchConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> matchValue;
        private String matchVariable;
        private @Nullable Boolean negateCondition;
        private String operator;
        private @Nullable String selector;
        private @Nullable List<String> transforms;

        public Builder() {
    	      // Empty
        }

        public Builder(FrontDoorMatchConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchValue = defaults.matchValue;
    	      this.matchVariable = defaults.matchVariable;
    	      this.negateCondition = defaults.negateCondition;
    	      this.operator = defaults.operator;
    	      this.selector = defaults.selector;
    	      this.transforms = defaults.transforms;
        }

        public Builder matchValue(List<String> matchValue) {
            this.matchValue = Objects.requireNonNull(matchValue);
            return this;
        }
        public Builder matchValue(String... matchValue) {
            return matchValue(List.of(matchValue));
        }
        public Builder matchVariable(String matchVariable) {
            this.matchVariable = Objects.requireNonNull(matchVariable);
            return this;
        }
        public Builder negateCondition(@Nullable Boolean negateCondition) {
            this.negateCondition = negateCondition;
            return this;
        }
        public Builder operator(String operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }
        public Builder selector(@Nullable String selector) {
            this.selector = selector;
            return this;
        }
        public Builder transforms(@Nullable List<String> transforms) {
            this.transforms = transforms;
            return this;
        }
        public Builder transforms(String... transforms) {
            return transforms(List.of(transforms));
        }        public FrontDoorMatchConditionResponse build() {
            return new FrontDoorMatchConditionResponse(matchValue, matchVariable, negateCondition, operator, selector, transforms);
        }
    }
}
