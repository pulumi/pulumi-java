// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabricmesh.outputs;

import io.pulumi.azurenative.servicefabricmesh.outputs.HttpConfigResponse;
import io.pulumi.azurenative.servicefabricmesh.outputs.NetworkRefResponse;
import io.pulumi.azurenative.servicefabricmesh.outputs.TcpConfigResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetGatewayResult {
    /**
     * User readable description of the gateway.
     * 
     */
    private final @Nullable String description;
    /**
     * Network that the Application is using.
     * 
     */
    private final NetworkRefResponse destinationNetwork;
    /**
     * Configuration for http connectivity for this gateway.
     * 
     */
    private final @Nullable List<HttpConfigResponse> http;
    /**
     * Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * IP address of the gateway. This is populated in the response and is ignored for incoming requests.
     * 
     */
    private final String ipAddress;
    /**
     * The geo-location where the resource lives
     * 
     */
    private final String location;
    /**
     * The name of the resource
     * 
     */
    private final String name;
    /**
     * State of the resource.
     * 
     */
    private final String provisioningState;
    /**
     * Network the gateway should listen on for requests.
     * 
     */
    private final NetworkRefResponse sourceNetwork;
    /**
     * Status of the resource.
     * 
     */
    private final String status;
    /**
     * Gives additional information about the current status of the gateway.
     * 
     */
    private final String statusDetails;
    /**
     * Resource tags.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * Configuration for tcp connectivity for this gateway.
     * 
     */
    private final @Nullable List<TcpConfigResponse> tcp;
    /**
     * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"description","destinationNetwork","http","id","ipAddress","location","name","provisioningState","sourceNetwork","status","statusDetails","tags","tcp","type"})
    private GetGatewayResult(
        @Nullable String description,
        NetworkRefResponse destinationNetwork,
        @Nullable List<HttpConfigResponse> http,
        String id,
        String ipAddress,
        String location,
        String name,
        String provisioningState,
        NetworkRefResponse sourceNetwork,
        String status,
        String statusDetails,
        @Nullable Map<String,String> tags,
        @Nullable List<TcpConfigResponse> tcp,
        String type) {
        this.description = description;
        this.destinationNetwork = Objects.requireNonNull(destinationNetwork);
        this.http = http;
        this.id = Objects.requireNonNull(id);
        this.ipAddress = Objects.requireNonNull(ipAddress);
        this.location = Objects.requireNonNull(location);
        this.name = Objects.requireNonNull(name);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.sourceNetwork = Objects.requireNonNull(sourceNetwork);
        this.status = Objects.requireNonNull(status);
        this.statusDetails = Objects.requireNonNull(statusDetails);
        this.tags = tags;
        this.tcp = tcp;
        this.type = Objects.requireNonNull(type);
    }

    /**
     * User readable description of the gateway.
     * 
     */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * Network that the Application is using.
     * 
     */
    public NetworkRefResponse getDestinationNetwork() {
        return this.destinationNetwork;
    }
    /**
     * Configuration for http connectivity for this gateway.
     * 
     */
    public List<HttpConfigResponse> getHttp() {
        return this.http == null ? List.of() : this.http;
    }
    /**
     * Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * IP address of the gateway. This is populated in the response and is ignored for incoming requests.
     * 
     */
    public String getIpAddress() {
        return this.ipAddress;
    }
    /**
     * The geo-location where the resource lives
     * 
     */
    public String getLocation() {
        return this.location;
    }
    /**
     * The name of the resource
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * State of the resource.
     * 
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * Network the gateway should listen on for requests.
     * 
     */
    public NetworkRefResponse getSourceNetwork() {
        return this.sourceNetwork;
    }
    /**
     * Status of the resource.
     * 
     */
    public String getStatus() {
        return this.status;
    }
    /**
     * Gives additional information about the current status of the gateway.
     * 
     */
    public String getStatusDetails() {
        return this.statusDetails;
    }
    /**
     * Resource tags.
     * 
     */
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * Configuration for tcp connectivity for this gateway.
     * 
     */
    public List<TcpConfigResponse> getTcp() {
        return this.tcp == null ? List.of() : this.tcp;
    }
    /**
     * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     * 
     */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private NetworkRefResponse destinationNetwork;
        private @Nullable List<HttpConfigResponse> http;
        private String id;
        private String ipAddress;
        private String location;
        private String name;
        private String provisioningState;
        private NetworkRefResponse sourceNetwork;
        private String status;
        private String statusDetails;
        private @Nullable Map<String,String> tags;
        private @Nullable List<TcpConfigResponse> tcp;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destinationNetwork = defaults.destinationNetwork;
    	      this.http = defaults.http;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sourceNetwork = defaults.sourceNetwork;
    	      this.status = defaults.status;
    	      this.statusDetails = defaults.statusDetails;
    	      this.tags = defaults.tags;
    	      this.tcp = defaults.tcp;
    	      this.type = defaults.type;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setDestinationNetwork(NetworkRefResponse destinationNetwork) {
            this.destinationNetwork = Objects.requireNonNull(destinationNetwork);
            return this;
        }

        public Builder setHttp(@Nullable List<HttpConfigResponse> http) {
            this.http = http;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIpAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setSourceNetwork(NetworkRefResponse sourceNetwork) {
            this.sourceNetwork = Objects.requireNonNull(sourceNetwork);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setStatusDetails(String statusDetails) {
            this.statusDetails = Objects.requireNonNull(statusDetails);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTcp(@Nullable List<TcpConfigResponse> tcp) {
            this.tcp = tcp;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetGatewayResult build() {
            return new GetGatewayResult(description, destinationNetwork, http, id, ipAddress, location, name, provisioningState, sourceNetwork, status, statusDetails, tags, tcp, type);
        }
    }
}
