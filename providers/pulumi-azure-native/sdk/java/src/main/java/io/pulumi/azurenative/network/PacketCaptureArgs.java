// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.inputs.PacketCaptureFilterArgs;
import io.pulumi.azurenative.network.inputs.PacketCaptureStorageLocationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PacketCaptureArgs extends io.pulumi.resources.ResourceArgs {

    public static final PacketCaptureArgs Empty = new PacketCaptureArgs();

    /**
     * Number of bytes captured per packet, the remaining bytes are truncated.
     * 
     */
    @InputImport(name="bytesToCapturePerPacket")
    private final @Nullable Input<Double> bytesToCapturePerPacket;

    public Input<Double> getBytesToCapturePerPacket() {
        return this.bytesToCapturePerPacket == null ? Input.empty() : this.bytesToCapturePerPacket;
    }

    /**
     * A list of packet capture filters.
     * 
     */
    @InputImport(name="filters")
    private final @Nullable Input<List<PacketCaptureFilterArgs>> filters;

    public Input<List<PacketCaptureFilterArgs>> getFilters() {
        return this.filters == null ? Input.empty() : this.filters;
    }

    /**
     * The name of the network watcher.
     * 
     */
    @InputImport(name="networkWatcherName", required=true)
    private final Input<String> networkWatcherName;

    public Input<String> getNetworkWatcherName() {
        return this.networkWatcherName;
    }

    /**
     * The name of the packet capture session.
     * 
     */
    @InputImport(name="packetCaptureName")
    private final @Nullable Input<String> packetCaptureName;

    public Input<String> getPacketCaptureName() {
        return this.packetCaptureName == null ? Input.empty() : this.packetCaptureName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The storage location for a packet capture session.
     * 
     */
    @InputImport(name="storageLocation", required=true)
    private final Input<PacketCaptureStorageLocationArgs> storageLocation;

    public Input<PacketCaptureStorageLocationArgs> getStorageLocation() {
        return this.storageLocation;
    }

    /**
     * The ID of the targeted resource, only VM is currently supported.
     * 
     */
    @InputImport(name="target", required=true)
    private final Input<String> target;

    public Input<String> getTarget() {
        return this.target;
    }

    /**
     * Maximum duration of the capture session in seconds.
     * 
     */
    @InputImport(name="timeLimitInSeconds")
    private final @Nullable Input<Integer> timeLimitInSeconds;

    public Input<Integer> getTimeLimitInSeconds() {
        return this.timeLimitInSeconds == null ? Input.empty() : this.timeLimitInSeconds;
    }

    /**
     * Maximum size of the capture output.
     * 
     */
    @InputImport(name="totalBytesPerSession")
    private final @Nullable Input<Double> totalBytesPerSession;

    public Input<Double> getTotalBytesPerSession() {
        return this.totalBytesPerSession == null ? Input.empty() : this.totalBytesPerSession;
    }

    public PacketCaptureArgs(
        @Nullable Input<Double> bytesToCapturePerPacket,
        @Nullable Input<List<PacketCaptureFilterArgs>> filters,
        Input<String> networkWatcherName,
        @Nullable Input<String> packetCaptureName,
        Input<String> resourceGroupName,
        Input<PacketCaptureStorageLocationArgs> storageLocation,
        Input<String> target,
        @Nullable Input<Integer> timeLimitInSeconds,
        @Nullable Input<Double> totalBytesPerSession) {
        this.bytesToCapturePerPacket = bytesToCapturePerPacket == null ? Input.ofNullable(0e+00) : bytesToCapturePerPacket;
        this.filters = filters;
        this.networkWatcherName = Objects.requireNonNull(networkWatcherName, "expected parameter 'networkWatcherName' to be non-null");
        this.packetCaptureName = packetCaptureName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.storageLocation = Objects.requireNonNull(storageLocation, "expected parameter 'storageLocation' to be non-null");
        this.target = Objects.requireNonNull(target, "expected parameter 'target' to be non-null");
        this.timeLimitInSeconds = timeLimitInSeconds == null ? Input.ofNullable(18000) : timeLimitInSeconds;
        this.totalBytesPerSession = totalBytesPerSession == null ? Input.ofNullable(1.073741824e+09) : totalBytesPerSession;
    }

    private PacketCaptureArgs() {
        this.bytesToCapturePerPacket = Input.empty();
        this.filters = Input.empty();
        this.networkWatcherName = Input.empty();
        this.packetCaptureName = Input.empty();
        this.resourceGroupName = Input.empty();
        this.storageLocation = Input.empty();
        this.target = Input.empty();
        this.timeLimitInSeconds = Input.empty();
        this.totalBytesPerSession = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PacketCaptureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Double> bytesToCapturePerPacket;
        private @Nullable Input<List<PacketCaptureFilterArgs>> filters;
        private Input<String> networkWatcherName;
        private @Nullable Input<String> packetCaptureName;
        private Input<String> resourceGroupName;
        private Input<PacketCaptureStorageLocationArgs> storageLocation;
        private Input<String> target;
        private @Nullable Input<Integer> timeLimitInSeconds;
        private @Nullable Input<Double> totalBytesPerSession;

        public Builder() {
    	      // Empty
        }

        public Builder(PacketCaptureArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bytesToCapturePerPacket = defaults.bytesToCapturePerPacket;
    	      this.filters = defaults.filters;
    	      this.networkWatcherName = defaults.networkWatcherName;
    	      this.packetCaptureName = defaults.packetCaptureName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.storageLocation = defaults.storageLocation;
    	      this.target = defaults.target;
    	      this.timeLimitInSeconds = defaults.timeLimitInSeconds;
    	      this.totalBytesPerSession = defaults.totalBytesPerSession;
        }

        public Builder setBytesToCapturePerPacket(@Nullable Input<Double> bytesToCapturePerPacket) {
            this.bytesToCapturePerPacket = bytesToCapturePerPacket;
            return this;
        }

        public Builder setBytesToCapturePerPacket(@Nullable Double bytesToCapturePerPacket) {
            this.bytesToCapturePerPacket = Input.ofNullable(bytesToCapturePerPacket);
            return this;
        }

        public Builder setFilters(@Nullable Input<List<PacketCaptureFilterArgs>> filters) {
            this.filters = filters;
            return this;
        }

        public Builder setFilters(@Nullable List<PacketCaptureFilterArgs> filters) {
            this.filters = Input.ofNullable(filters);
            return this;
        }

        public Builder setNetworkWatcherName(Input<String> networkWatcherName) {
            this.networkWatcherName = Objects.requireNonNull(networkWatcherName);
            return this;
        }

        public Builder setNetworkWatcherName(String networkWatcherName) {
            this.networkWatcherName = Input.of(Objects.requireNonNull(networkWatcherName));
            return this;
        }

        public Builder setPacketCaptureName(@Nullable Input<String> packetCaptureName) {
            this.packetCaptureName = packetCaptureName;
            return this;
        }

        public Builder setPacketCaptureName(@Nullable String packetCaptureName) {
            this.packetCaptureName = Input.ofNullable(packetCaptureName);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setStorageLocation(Input<PacketCaptureStorageLocationArgs> storageLocation) {
            this.storageLocation = Objects.requireNonNull(storageLocation);
            return this;
        }

        public Builder setStorageLocation(PacketCaptureStorageLocationArgs storageLocation) {
            this.storageLocation = Input.of(Objects.requireNonNull(storageLocation));
            return this;
        }

        public Builder setTarget(Input<String> target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }

        public Builder setTarget(String target) {
            this.target = Input.of(Objects.requireNonNull(target));
            return this;
        }

        public Builder setTimeLimitInSeconds(@Nullable Input<Integer> timeLimitInSeconds) {
            this.timeLimitInSeconds = timeLimitInSeconds;
            return this;
        }

        public Builder setTimeLimitInSeconds(@Nullable Integer timeLimitInSeconds) {
            this.timeLimitInSeconds = Input.ofNullable(timeLimitInSeconds);
            return this;
        }

        public Builder setTotalBytesPerSession(@Nullable Input<Double> totalBytesPerSession) {
            this.totalBytesPerSession = totalBytesPerSession;
            return this;
        }

        public Builder setTotalBytesPerSession(@Nullable Double totalBytesPerSession) {
            this.totalBytesPerSession = Input.ofNullable(totalBytesPerSession);
            return this;
        }

        public PacketCaptureArgs build() {
            return new PacketCaptureArgs(bytesToCapturePerPacket, filters, networkWatcherName, packetCaptureName, resourceGroupName, storageLocation, target, timeLimitInSeconds, totalBytesPerSession);
        }
    }
}
