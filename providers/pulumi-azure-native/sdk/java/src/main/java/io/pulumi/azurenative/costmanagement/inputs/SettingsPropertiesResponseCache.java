// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SettingsPropertiesResponseCache extends io.pulumi.resources.InvokeArgs {

    public static final SettingsPropertiesResponseCache Empty = new SettingsPropertiesResponseCache();

    /**
     * Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal, Unknown.
     * 
     */
    @Import(name="channel", required=true)
      private final String channel;

    public String channel() {
        return this.channel;
    }

    /**
     * Resource ID used by Resource Manager to uniquely identify the scope.
     * 
     */
    @Import(name="id", required=true)
      private final String id;

    public String id() {
        return this.id;
    }

    /**
     * Display name for the scope.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * Resource ID of the parent scope. For instance, subscription's resource ID for a resource group or a management group resource ID for a subscription.
     * 
     */
    @Import(name="parent")
      private final @Nullable String parent;

    public Optional<String> parent() {
        return this.parent == null ? Optional.empty() : Optional.ofNullable(this.parent);
    }

    /**
     * Indicates the status of the scope. Status only applies to subscriptions and billing accounts.
     * 
     */
    @Import(name="status")
      private final @Nullable String status;

    public Optional<String> status() {
        return this.status == null ? Optional.empty() : Optional.ofNullable(this.status);
    }

    /**
     * Indicates the type of modern account. Allowed values include: Individual, Enterprise, Partner, Indirect, NotApplicable
     * 
     */
    @Import(name="subchannel", required=true)
      private final String subchannel;

    public String subchannel() {
        return this.subchannel;
    }

    public SettingsPropertiesResponseCache(
        String channel,
        String id,
        String name,
        @Nullable String parent,
        @Nullable String status,
        String subchannel) {
        this.channel = Objects.requireNonNull(channel, "expected parameter 'channel' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.parent = parent;
        this.status = status;
        this.subchannel = Objects.requireNonNull(subchannel, "expected parameter 'subchannel' to be non-null");
    }

    private SettingsPropertiesResponseCache() {
        this.channel = null;
        this.id = null;
        this.name = null;
        this.parent = null;
        this.status = null;
        this.subchannel = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SettingsPropertiesResponseCache defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String channel;
        private String id;
        private String name;
        private @Nullable String parent;
        private @Nullable String status;
        private String subchannel;

        public Builder() {
    	      // Empty
        }

        public Builder(SettingsPropertiesResponseCache defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channel = defaults.channel;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.status = defaults.status;
    	      this.subchannel = defaults.subchannel;
        }

        public Builder channel(String channel) {
            this.channel = Objects.requireNonNull(channel);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder parent(@Nullable String parent) {
            this.parent = parent;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        public Builder subchannel(String subchannel) {
            this.subchannel = Objects.requireNonNull(subchannel);
            return this;
        }        public SettingsPropertiesResponseCache build() {
            return new SettingsPropertiesResponseCache(channel, id, name, parent, status, subchannel);
        }
    }
}
