// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement.outputs;

import io.pulumi.azurenative.costmanagement.outputs.ReportConfigAggregationResponse;
import io.pulumi.azurenative.costmanagement.outputs.ReportConfigDatasetConfigurationResponse;
import io.pulumi.azurenative.costmanagement.outputs.ReportConfigFilterResponse;
import io.pulumi.azurenative.costmanagement.outputs.ReportConfigGroupingResponse;
import io.pulumi.azurenative.costmanagement.outputs.ReportConfigSortingResponse;
import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReportConfigDatasetResponse {
    /**
     * Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
     * 
     */
    private final @Nullable Map<String,ReportConfigAggregationResponse> aggregation;
    /**
     * Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
     * 
     */
    private final @Nullable ReportConfigDatasetConfigurationResponse configuration;
    /**
     * Has filter expression to use in the report.
     * 
     */
    private final @Nullable ReportConfigFilterResponse filter;
    /**
     * The granularity of rows in the report.
     * 
     */
    private final @Nullable String granularity;
    /**
     * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
     * 
     */
    private final @Nullable List<ReportConfigGroupingResponse> grouping;
    /**
     * Array of order by expression to use in the report.
     * 
     */
    private final @Nullable List<ReportConfigSortingResponse> sorting;

    @CustomType.Constructor
    private ReportConfigDatasetResponse(
        @CustomType.Parameter("aggregation") @Nullable Map<String,ReportConfigAggregationResponse> aggregation,
        @CustomType.Parameter("configuration") @Nullable ReportConfigDatasetConfigurationResponse configuration,
        @CustomType.Parameter("filter") @Nullable ReportConfigFilterResponse filter,
        @CustomType.Parameter("granularity") @Nullable String granularity,
        @CustomType.Parameter("grouping") @Nullable List<ReportConfigGroupingResponse> grouping,
        @CustomType.Parameter("sorting") @Nullable List<ReportConfigSortingResponse> sorting) {
        this.aggregation = aggregation;
        this.configuration = configuration;
        this.filter = filter;
        this.granularity = granularity;
        this.grouping = grouping;
        this.sorting = sorting;
    }

    /**
     * Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
     * 
    */
    public Map<String,ReportConfigAggregationResponse> getAggregation() {
        return this.aggregation == null ? Map.of() : this.aggregation;
    }
    /**
     * Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
     * 
    */
    public Optional<ReportConfigDatasetConfigurationResponse> getConfiguration() {
        return Optional.ofNullable(this.configuration);
    }
    /**
     * Has filter expression to use in the report.
     * 
    */
    public Optional<ReportConfigFilterResponse> getFilter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * The granularity of rows in the report.
     * 
    */
    public Optional<String> getGranularity() {
        return Optional.ofNullable(this.granularity);
    }
    /**
     * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
     * 
    */
    public List<ReportConfigGroupingResponse> getGrouping() {
        return this.grouping == null ? List.of() : this.grouping;
    }
    /**
     * Array of order by expression to use in the report.
     * 
    */
    public List<ReportConfigSortingResponse> getSorting() {
        return this.sorting == null ? List.of() : this.sorting;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportConfigDatasetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Map<String,ReportConfigAggregationResponse> aggregation;
        private @Nullable ReportConfigDatasetConfigurationResponse configuration;
        private @Nullable ReportConfigFilterResponse filter;
        private @Nullable String granularity;
        private @Nullable List<ReportConfigGroupingResponse> grouping;
        private @Nullable List<ReportConfigSortingResponse> sorting;

        public Builder() {
    	      // Empty
        }

        public Builder(ReportConfigDatasetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregation = defaults.aggregation;
    	      this.configuration = defaults.configuration;
    	      this.filter = defaults.filter;
    	      this.granularity = defaults.granularity;
    	      this.grouping = defaults.grouping;
    	      this.sorting = defaults.sorting;
        }

        public Builder aggregation(@Nullable Map<String,ReportConfigAggregationResponse> aggregation) {
            this.aggregation = aggregation;
            return this;
        }
        public Builder configuration(@Nullable ReportConfigDatasetConfigurationResponse configuration) {
            this.configuration = configuration;
            return this;
        }
        public Builder filter(@Nullable ReportConfigFilterResponse filter) {
            this.filter = filter;
            return this;
        }
        public Builder granularity(@Nullable String granularity) {
            this.granularity = granularity;
            return this;
        }
        public Builder grouping(@Nullable List<ReportConfigGroupingResponse> grouping) {
            this.grouping = grouping;
            return this;
        }
        public Builder grouping(ReportConfigGroupingResponse... grouping) {
            return grouping(List.of(grouping));
        }
        public Builder sorting(@Nullable List<ReportConfigSortingResponse> sorting) {
            this.sorting = sorting;
            return this;
        }
        public Builder sorting(ReportConfigSortingResponse... sorting) {
            return sorting(List.of(sorting));
        }        public ReportConfigDatasetResponse build() {
            return new ReportConfigDatasetResponse(aggregation, configuration, filter, granularity, grouping, sorting);
        }
    }
}
