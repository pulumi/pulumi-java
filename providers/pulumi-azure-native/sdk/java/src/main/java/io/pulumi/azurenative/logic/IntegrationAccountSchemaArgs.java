// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic;

import io.pulumi.azurenative.logic.enums.SchemaType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IntegrationAccountSchemaArgs extends io.pulumi.resources.ResourceArgs {

    public static final IntegrationAccountSchemaArgs Empty = new IntegrationAccountSchemaArgs();

    /**
     * The content.
     * 
     */
    @InputImport(name="content")
    private final @Nullable Input<String> content;

    public Input<String> getContent() {
        return this.content == null ? Input.empty() : this.content;
    }

    /**
     * The content type.
     * 
     */
    @InputImport(name="contentType")
    private final @Nullable Input<String> contentType;

    public Input<String> getContentType() {
        return this.contentType == null ? Input.empty() : this.contentType;
    }

    /**
     * The document name.
     * 
     */
    @InputImport(name="documentName")
    private final @Nullable Input<String> documentName;

    public Input<String> getDocumentName() {
        return this.documentName == null ? Input.empty() : this.documentName;
    }

    /**
     * The file name.
     * 
     */
    @InputImport(name="fileName")
    private final @Nullable Input<String> fileName;

    public Input<String> getFileName() {
        return this.fileName == null ? Input.empty() : this.fileName;
    }

    /**
     * The integration account name.
     * 
     */
    @InputImport(name="integrationAccountName", required=true)
    private final Input<String> integrationAccountName;

    public Input<String> getIntegrationAccountName() {
        return this.integrationAccountName;
    }

    /**
     * The resource location.
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The metadata.
     * 
     */
    @InputImport(name="metadata")
    private final @Nullable Input<Object> metadata;

    public Input<Object> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    /**
     * The resource group name.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The integration account schema name.
     * 
     */
    @InputImport(name="schemaName")
    private final @Nullable Input<String> schemaName;

    public Input<String> getSchemaName() {
        return this.schemaName == null ? Input.empty() : this.schemaName;
    }

    /**
     * The schema type.
     * 
     */
    @InputImport(name="schemaType", required=true)
    private final Input<Either<String,SchemaType>> schemaType;

    public Input<Either<String,SchemaType>> getSchemaType() {
        return this.schemaType;
    }

    /**
     * The resource tags.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The target namespace of the schema.
     * 
     */
    @InputImport(name="targetNamespace")
    private final @Nullable Input<String> targetNamespace;

    public Input<String> getTargetNamespace() {
        return this.targetNamespace == null ? Input.empty() : this.targetNamespace;
    }

    public IntegrationAccountSchemaArgs(
        @Nullable Input<String> content,
        @Nullable Input<String> contentType,
        @Nullable Input<String> documentName,
        @Nullable Input<String> fileName,
        Input<String> integrationAccountName,
        @Nullable Input<String> location,
        @Nullable Input<Object> metadata,
        Input<String> resourceGroupName,
        @Nullable Input<String> schemaName,
        Input<Either<String,SchemaType>> schemaType,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> targetNamespace) {
        this.content = content;
        this.contentType = contentType;
        this.documentName = documentName;
        this.fileName = fileName;
        this.integrationAccountName = Objects.requireNonNull(integrationAccountName, "expected parameter 'integrationAccountName' to be non-null");
        this.location = location;
        this.metadata = metadata;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.schemaName = schemaName;
        this.schemaType = Objects.requireNonNull(schemaType, "expected parameter 'schemaType' to be non-null");
        this.tags = tags;
        this.targetNamespace = targetNamespace;
    }

    private IntegrationAccountSchemaArgs() {
        this.content = Input.empty();
        this.contentType = Input.empty();
        this.documentName = Input.empty();
        this.fileName = Input.empty();
        this.integrationAccountName = Input.empty();
        this.location = Input.empty();
        this.metadata = Input.empty();
        this.resourceGroupName = Input.empty();
        this.schemaName = Input.empty();
        this.schemaType = Input.empty();
        this.tags = Input.empty();
        this.targetNamespace = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IntegrationAccountSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> content;
        private @Nullable Input<String> contentType;
        private @Nullable Input<String> documentName;
        private @Nullable Input<String> fileName;
        private Input<String> integrationAccountName;
        private @Nullable Input<String> location;
        private @Nullable Input<Object> metadata;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> schemaName;
        private Input<Either<String,SchemaType>> schemaType;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> targetNamespace;

        public Builder() {
    	      // Empty
        }

        public Builder(IntegrationAccountSchemaArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.contentType = defaults.contentType;
    	      this.documentName = defaults.documentName;
    	      this.fileName = defaults.fileName;
    	      this.integrationAccountName = defaults.integrationAccountName;
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.schemaName = defaults.schemaName;
    	      this.schemaType = defaults.schemaType;
    	      this.tags = defaults.tags;
    	      this.targetNamespace = defaults.targetNamespace;
        }

        public Builder setContent(@Nullable Input<String> content) {
            this.content = content;
            return this;
        }

        public Builder setContent(@Nullable String content) {
            this.content = Input.ofNullable(content);
            return this;
        }

        public Builder setContentType(@Nullable Input<String> contentType) {
            this.contentType = contentType;
            return this;
        }

        public Builder setContentType(@Nullable String contentType) {
            this.contentType = Input.ofNullable(contentType);
            return this;
        }

        public Builder setDocumentName(@Nullable Input<String> documentName) {
            this.documentName = documentName;
            return this;
        }

        public Builder setDocumentName(@Nullable String documentName) {
            this.documentName = Input.ofNullable(documentName);
            return this;
        }

        public Builder setFileName(@Nullable Input<String> fileName) {
            this.fileName = fileName;
            return this;
        }

        public Builder setFileName(@Nullable String fileName) {
            this.fileName = Input.ofNullable(fileName);
            return this;
        }

        public Builder setIntegrationAccountName(Input<String> integrationAccountName) {
            this.integrationAccountName = Objects.requireNonNull(integrationAccountName);
            return this;
        }

        public Builder setIntegrationAccountName(String integrationAccountName) {
            this.integrationAccountName = Input.of(Objects.requireNonNull(integrationAccountName));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMetadata(@Nullable Input<Object> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setMetadata(@Nullable Object metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSchemaName(@Nullable Input<String> schemaName) {
            this.schemaName = schemaName;
            return this;
        }

        public Builder setSchemaName(@Nullable String schemaName) {
            this.schemaName = Input.ofNullable(schemaName);
            return this;
        }

        public Builder setSchemaType(Input<Either<String,SchemaType>> schemaType) {
            this.schemaType = Objects.requireNonNull(schemaType);
            return this;
        }

        public Builder setSchemaType(Either<String,SchemaType> schemaType) {
            this.schemaType = Input.of(Objects.requireNonNull(schemaType));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTargetNamespace(@Nullable Input<String> targetNamespace) {
            this.targetNamespace = targetNamespace;
            return this;
        }

        public Builder setTargetNamespace(@Nullable String targetNamespace) {
            this.targetNamespace = Input.ofNullable(targetNamespace);
            return this;
        }

        public IntegrationAccountSchemaArgs build() {
            return new IntegrationAccountSchemaArgs(content, contentType, documentName, fileName, integrationAccountName, location, metadata, resourceGroupName, schemaName, schemaType, tags, targetNamespace);
        }
    }
}
