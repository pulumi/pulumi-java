// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.ApplicationGatewayIPConfigurationResponse;
import io.pulumi.azurenative.network.inputs.DelegationResponse;
import io.pulumi.azurenative.network.inputs.IPConfigurationProfileResponse;
import io.pulumi.azurenative.network.inputs.IPConfigurationResponse;
import io.pulumi.azurenative.network.inputs.NetworkSecurityGroupResponse;
import io.pulumi.azurenative.network.inputs.PrivateEndpointResponse;
import io.pulumi.azurenative.network.inputs.ResourceNavigationLinkResponse;
import io.pulumi.azurenative.network.inputs.RouteTableResponse;
import io.pulumi.azurenative.network.inputs.ServiceAssociationLinkResponse;
import io.pulumi.azurenative.network.inputs.ServiceEndpointPolicyResponse;
import io.pulumi.azurenative.network.inputs.ServiceEndpointPropertiesFormatResponse;
import io.pulumi.azurenative.network.inputs.SubResourceResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Subnet in a virtual network resource.
 * 
 */
public final class SubnetResponse extends io.pulumi.resources.InvokeArgs {

    public static final SubnetResponse Empty = new SubnetResponse();

    /**
     * The address prefix for the subnet.
     * 
     */
    @InputImport(name="addressPrefix")
      private final @Nullable String addressPrefix;

    public Optional<String> getAddressPrefix() {
        return this.addressPrefix == null ? Optional.empty() : Optional.ofNullable(this.addressPrefix);
    }

    /**
     * List of address prefixes for the subnet.
     * 
     */
    @InputImport(name="addressPrefixes")
      private final @Nullable List<String> addressPrefixes;

    public List<String> getAddressPrefixes() {
        return this.addressPrefixes == null ? List.of() : this.addressPrefixes;
    }

    /**
     * Application gateway IP configurations of virtual network resource.
     * 
     */
    @InputImport(name="applicationGatewayIpConfigurations")
      private final @Nullable List<ApplicationGatewayIPConfigurationResponse> applicationGatewayIpConfigurations;

    public List<ApplicationGatewayIPConfigurationResponse> getApplicationGatewayIpConfigurations() {
        return this.applicationGatewayIpConfigurations == null ? List.of() : this.applicationGatewayIpConfigurations;
    }

    /**
     * An array of references to the delegations on the subnet.
     * 
     */
    @InputImport(name="delegations")
      private final @Nullable List<DelegationResponse> delegations;

    public List<DelegationResponse> getDelegations() {
        return this.delegations == null ? List.of() : this.delegations;
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @InputImport(name="etag", required=true)
      private final String etag;

    public String getEtag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @InputImport(name="id")
      private final @Nullable String id;

    public Optional<String> getId() {
        return this.id == null ? Optional.empty() : Optional.ofNullable(this.id);
    }

    /**
     * Array of IpAllocation which reference this subnet.
     * 
     */
    @InputImport(name="ipAllocations")
      private final @Nullable List<SubResourceResponse> ipAllocations;

    public List<SubResourceResponse> getIpAllocations() {
        return this.ipAllocations == null ? List.of() : this.ipAllocations;
    }

    /**
     * Array of IP configuration profiles which reference this subnet.
     * 
     */
    @InputImport(name="ipConfigurationProfiles", required=true)
      private final List<IPConfigurationProfileResponse> ipConfigurationProfiles;

    public List<IPConfigurationProfileResponse> getIpConfigurationProfiles() {
        return this.ipConfigurationProfiles;
    }

    /**
     * An array of references to the network interface IP configurations using subnet.
     * 
     */
    @InputImport(name="ipConfigurations", required=true)
      private final List<IPConfigurationResponse> ipConfigurations;

    public List<IPConfigurationResponse> getIpConfigurations() {
        return this.ipConfigurations;
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @InputImport(name="name")
      private final @Nullable String name;

    public Optional<String> getName() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * Nat gateway associated with this subnet.
     * 
     */
    @InputImport(name="natGateway")
      private final @Nullable SubResourceResponse natGateway;

    public Optional<SubResourceResponse> getNatGateway() {
        return this.natGateway == null ? Optional.empty() : Optional.ofNullable(this.natGateway);
    }

    /**
     * The reference to the NetworkSecurityGroup resource.
     * 
     */
    @InputImport(name="networkSecurityGroup")
      private final @Nullable NetworkSecurityGroupResponse networkSecurityGroup;

    public Optional<NetworkSecurityGroupResponse> getNetworkSecurityGroup() {
        return this.networkSecurityGroup == null ? Optional.empty() : Optional.ofNullable(this.networkSecurityGroup);
    }

    /**
     * Enable or Disable apply network policies on private end point in the subnet.
     * 
     */
    @InputImport(name="privateEndpointNetworkPolicies")
      private final @Nullable String privateEndpointNetworkPolicies;

    public Optional<String> getPrivateEndpointNetworkPolicies() {
        return this.privateEndpointNetworkPolicies == null ? Optional.empty() : Optional.ofNullable(this.privateEndpointNetworkPolicies);
    }

    /**
     * An array of references to private endpoints.
     * 
     */
    @InputImport(name="privateEndpoints", required=true)
      private final List<PrivateEndpointResponse> privateEndpoints;

    public List<PrivateEndpointResponse> getPrivateEndpoints() {
        return this.privateEndpoints;
    }

    /**
     * Enable or Disable apply network policies on private link service in the subnet.
     * 
     */
    @InputImport(name="privateLinkServiceNetworkPolicies")
      private final @Nullable String privateLinkServiceNetworkPolicies;

    public Optional<String> getPrivateLinkServiceNetworkPolicies() {
        return this.privateLinkServiceNetworkPolicies == null ? Optional.empty() : Optional.ofNullable(this.privateLinkServiceNetworkPolicies);
    }

    /**
     * The provisioning state of the subnet resource.
     * 
     */
    @InputImport(name="provisioningState", required=true)
      private final String provisioningState;

    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
     * 
     */
    @InputImport(name="purpose", required=true)
      private final String purpose;

    public String getPurpose() {
        return this.purpose;
    }

    /**
     * An array of references to the external resources using subnet.
     * 
     */
    @InputImport(name="resourceNavigationLinks", required=true)
      private final List<ResourceNavigationLinkResponse> resourceNavigationLinks;

    public List<ResourceNavigationLinkResponse> getResourceNavigationLinks() {
        return this.resourceNavigationLinks;
    }

    /**
     * The reference to the RouteTable resource.
     * 
     */
    @InputImport(name="routeTable")
      private final @Nullable RouteTableResponse routeTable;

    public Optional<RouteTableResponse> getRouteTable() {
        return this.routeTable == null ? Optional.empty() : Optional.ofNullable(this.routeTable);
    }

    /**
     * An array of references to services injecting into this subnet.
     * 
     */
    @InputImport(name="serviceAssociationLinks", required=true)
      private final List<ServiceAssociationLinkResponse> serviceAssociationLinks;

    public List<ServiceAssociationLinkResponse> getServiceAssociationLinks() {
        return this.serviceAssociationLinks;
    }

    /**
     * An array of service endpoint policies.
     * 
     */
    @InputImport(name="serviceEndpointPolicies")
      private final @Nullable List<ServiceEndpointPolicyResponse> serviceEndpointPolicies;

    public List<ServiceEndpointPolicyResponse> getServiceEndpointPolicies() {
        return this.serviceEndpointPolicies == null ? List.of() : this.serviceEndpointPolicies;
    }

    /**
     * An array of service endpoints.
     * 
     */
    @InputImport(name="serviceEndpoints")
      private final @Nullable List<ServiceEndpointPropertiesFormatResponse> serviceEndpoints;

    public List<ServiceEndpointPropertiesFormatResponse> getServiceEndpoints() {
        return this.serviceEndpoints == null ? List.of() : this.serviceEndpoints;
    }

    /**
     * Resource type.
     * 
     */
    @InputImport(name="type")
      private final @Nullable String type;

    public Optional<String> getType() {
        return this.type == null ? Optional.empty() : Optional.ofNullable(this.type);
    }

    public SubnetResponse(
        @Nullable String addressPrefix,
        @Nullable List<String> addressPrefixes,
        @Nullable List<ApplicationGatewayIPConfigurationResponse> applicationGatewayIpConfigurations,
        @Nullable List<DelegationResponse> delegations,
        String etag,
        @Nullable String id,
        @Nullable List<SubResourceResponse> ipAllocations,
        List<IPConfigurationProfileResponse> ipConfigurationProfiles,
        List<IPConfigurationResponse> ipConfigurations,
        @Nullable String name,
        @Nullable SubResourceResponse natGateway,
        @Nullable NetworkSecurityGroupResponse networkSecurityGroup,
        @Nullable String privateEndpointNetworkPolicies,
        List<PrivateEndpointResponse> privateEndpoints,
        @Nullable String privateLinkServiceNetworkPolicies,
        String provisioningState,
        String purpose,
        List<ResourceNavigationLinkResponse> resourceNavigationLinks,
        @Nullable RouteTableResponse routeTable,
        List<ServiceAssociationLinkResponse> serviceAssociationLinks,
        @Nullable List<ServiceEndpointPolicyResponse> serviceEndpointPolicies,
        @Nullable List<ServiceEndpointPropertiesFormatResponse> serviceEndpoints,
        @Nullable String type) {
        this.addressPrefix = addressPrefix;
        this.addressPrefixes = addressPrefixes;
        this.applicationGatewayIpConfigurations = applicationGatewayIpConfigurations;
        this.delegations = delegations;
        this.etag = Objects.requireNonNull(etag, "expected parameter 'etag' to be non-null");
        this.id = id;
        this.ipAllocations = ipAllocations;
        this.ipConfigurationProfiles = Objects.requireNonNull(ipConfigurationProfiles, "expected parameter 'ipConfigurationProfiles' to be non-null");
        this.ipConfigurations = Objects.requireNonNull(ipConfigurations, "expected parameter 'ipConfigurations' to be non-null");
        this.name = name;
        this.natGateway = natGateway;
        this.networkSecurityGroup = networkSecurityGroup;
        this.privateEndpointNetworkPolicies = privateEndpointNetworkPolicies == null ? "Enabled" : privateEndpointNetworkPolicies;
        this.privateEndpoints = Objects.requireNonNull(privateEndpoints, "expected parameter 'privateEndpoints' to be non-null");
        this.privateLinkServiceNetworkPolicies = privateLinkServiceNetworkPolicies == null ? "Enabled" : privateLinkServiceNetworkPolicies;
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.purpose = Objects.requireNonNull(purpose, "expected parameter 'purpose' to be non-null");
        this.resourceNavigationLinks = Objects.requireNonNull(resourceNavigationLinks, "expected parameter 'resourceNavigationLinks' to be non-null");
        this.routeTable = routeTable;
        this.serviceAssociationLinks = Objects.requireNonNull(serviceAssociationLinks, "expected parameter 'serviceAssociationLinks' to be non-null");
        this.serviceEndpointPolicies = serviceEndpointPolicies;
        this.serviceEndpoints = serviceEndpoints;
        this.type = type;
    }

    private SubnetResponse() {
        this.addressPrefix = null;
        this.addressPrefixes = List.of();
        this.applicationGatewayIpConfigurations = List.of();
        this.delegations = List.of();
        this.etag = null;
        this.id = null;
        this.ipAllocations = List.of();
        this.ipConfigurationProfiles = List.of();
        this.ipConfigurations = List.of();
        this.name = null;
        this.natGateway = null;
        this.networkSecurityGroup = null;
        this.privateEndpointNetworkPolicies = null;
        this.privateEndpoints = List.of();
        this.privateLinkServiceNetworkPolicies = null;
        this.provisioningState = null;
        this.purpose = null;
        this.resourceNavigationLinks = List.of();
        this.routeTable = null;
        this.serviceAssociationLinks = List.of();
        this.serviceEndpointPolicies = List.of();
        this.serviceEndpoints = List.of();
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubnetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String addressPrefix;
        private @Nullable List<String> addressPrefixes;
        private @Nullable List<ApplicationGatewayIPConfigurationResponse> applicationGatewayIpConfigurations;
        private @Nullable List<DelegationResponse> delegations;
        private String etag;
        private @Nullable String id;
        private @Nullable List<SubResourceResponse> ipAllocations;
        private List<IPConfigurationProfileResponse> ipConfigurationProfiles;
        private List<IPConfigurationResponse> ipConfigurations;
        private @Nullable String name;
        private @Nullable SubResourceResponse natGateway;
        private @Nullable NetworkSecurityGroupResponse networkSecurityGroup;
        private @Nullable String privateEndpointNetworkPolicies;
        private List<PrivateEndpointResponse> privateEndpoints;
        private @Nullable String privateLinkServiceNetworkPolicies;
        private String provisioningState;
        private String purpose;
        private List<ResourceNavigationLinkResponse> resourceNavigationLinks;
        private @Nullable RouteTableResponse routeTable;
        private List<ServiceAssociationLinkResponse> serviceAssociationLinks;
        private @Nullable List<ServiceEndpointPolicyResponse> serviceEndpointPolicies;
        private @Nullable List<ServiceEndpointPropertiesFormatResponse> serviceEndpoints;
        private @Nullable String type;

        public Builder() {
    	      // Empty
        }

        public Builder(SubnetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressPrefix = defaults.addressPrefix;
    	      this.addressPrefixes = defaults.addressPrefixes;
    	      this.applicationGatewayIpConfigurations = defaults.applicationGatewayIpConfigurations;
    	      this.delegations = defaults.delegations;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.ipAllocations = defaults.ipAllocations;
    	      this.ipConfigurationProfiles = defaults.ipConfigurationProfiles;
    	      this.ipConfigurations = defaults.ipConfigurations;
    	      this.name = defaults.name;
    	      this.natGateway = defaults.natGateway;
    	      this.networkSecurityGroup = defaults.networkSecurityGroup;
    	      this.privateEndpointNetworkPolicies = defaults.privateEndpointNetworkPolicies;
    	      this.privateEndpoints = defaults.privateEndpoints;
    	      this.privateLinkServiceNetworkPolicies = defaults.privateLinkServiceNetworkPolicies;
    	      this.provisioningState = defaults.provisioningState;
    	      this.purpose = defaults.purpose;
    	      this.resourceNavigationLinks = defaults.resourceNavigationLinks;
    	      this.routeTable = defaults.routeTable;
    	      this.serviceAssociationLinks = defaults.serviceAssociationLinks;
    	      this.serviceEndpointPolicies = defaults.serviceEndpointPolicies;
    	      this.serviceEndpoints = defaults.serviceEndpoints;
    	      this.type = defaults.type;
        }

        public Builder setAddressPrefix(@Nullable String addressPrefix) {
            this.addressPrefix = addressPrefix;
            return this;
        }

        public Builder setAddressPrefixes(@Nullable List<String> addressPrefixes) {
            this.addressPrefixes = addressPrefixes;
            return this;
        }

        public Builder setApplicationGatewayIpConfigurations(@Nullable List<ApplicationGatewayIPConfigurationResponse> applicationGatewayIpConfigurations) {
            this.applicationGatewayIpConfigurations = applicationGatewayIpConfigurations;
            return this;
        }

        public Builder setDelegations(@Nullable List<DelegationResponse> delegations) {
            this.delegations = delegations;
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setIpAllocations(@Nullable List<SubResourceResponse> ipAllocations) {
            this.ipAllocations = ipAllocations;
            return this;
        }

        public Builder setIpConfigurationProfiles(List<IPConfigurationProfileResponse> ipConfigurationProfiles) {
            this.ipConfigurationProfiles = Objects.requireNonNull(ipConfigurationProfiles);
            return this;
        }

        public Builder setIpConfigurations(List<IPConfigurationResponse> ipConfigurations) {
            this.ipConfigurations = Objects.requireNonNull(ipConfigurations);
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setNatGateway(@Nullable SubResourceResponse natGateway) {
            this.natGateway = natGateway;
            return this;
        }

        public Builder setNetworkSecurityGroup(@Nullable NetworkSecurityGroupResponse networkSecurityGroup) {
            this.networkSecurityGroup = networkSecurityGroup;
            return this;
        }

        public Builder setPrivateEndpointNetworkPolicies(@Nullable String privateEndpointNetworkPolicies) {
            this.privateEndpointNetworkPolicies = privateEndpointNetworkPolicies;
            return this;
        }

        public Builder setPrivateEndpoints(List<PrivateEndpointResponse> privateEndpoints) {
            this.privateEndpoints = Objects.requireNonNull(privateEndpoints);
            return this;
        }

        public Builder setPrivateLinkServiceNetworkPolicies(@Nullable String privateLinkServiceNetworkPolicies) {
            this.privateLinkServiceNetworkPolicies = privateLinkServiceNetworkPolicies;
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setPurpose(String purpose) {
            this.purpose = Objects.requireNonNull(purpose);
            return this;
        }

        public Builder setResourceNavigationLinks(List<ResourceNavigationLinkResponse> resourceNavigationLinks) {
            this.resourceNavigationLinks = Objects.requireNonNull(resourceNavigationLinks);
            return this;
        }

        public Builder setRouteTable(@Nullable RouteTableResponse routeTable) {
            this.routeTable = routeTable;
            return this;
        }

        public Builder setServiceAssociationLinks(List<ServiceAssociationLinkResponse> serviceAssociationLinks) {
            this.serviceAssociationLinks = Objects.requireNonNull(serviceAssociationLinks);
            return this;
        }

        public Builder setServiceEndpointPolicies(@Nullable List<ServiceEndpointPolicyResponse> serviceEndpointPolicies) {
            this.serviceEndpointPolicies = serviceEndpointPolicies;
            return this;
        }

        public Builder setServiceEndpoints(@Nullable List<ServiceEndpointPropertiesFormatResponse> serviceEndpoints) {
            this.serviceEndpoints = serviceEndpoints;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = type;
            return this;
        }
        public SubnetResponse build() {
            return new SubnetResponse(addressPrefix, addressPrefixes, applicationGatewayIpConfigurations, delegations, etag, id, ipAllocations, ipConfigurationProfiles, ipConfigurations, name, natGateway, networkSecurityGroup, privateEndpointNetworkPolicies, privateEndpoints, privateLinkServiceNetworkPolicies, provisioningState, purpose, resourceNavigationLinks, routeTable, serviceAssociationLinks, serviceEndpointPolicies, serviceEndpoints, type);
        }
    }
}
