// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.outputs;

import io.pulumi.azurenative.network.outputs.SubResourceResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class ProbeResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private final String etag;
    /**
     * Resource ID.
     * 
     */
    private final @Nullable String id;
    /**
     * The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
     * 
     */
    private final @Nullable Integer intervalInSeconds;
    /**
     * The load balancer rules that use this probe.
     * 
     */
    private final List<SubResourceResponse> loadBalancingRules;
    /**
     * The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access the resource.
     * 
     */
    private final @Nullable String name;
    /**
     * The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
     * 
     */
    private final @Nullable Integer numberOfProbes;
    /**
     * The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
     * 
     */
    private final Integer port;
    /**
     * The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
     * 
     */
    private final String protocol;
    /**
     * The provisioning state of the probe resource.
     * 
     */
    private final String provisioningState;
    /**
     * The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
     * 
     */
    private final @Nullable String requestPath;
    /**
     * Type of the resource.
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"etag","id","intervalInSeconds","loadBalancingRules","name","numberOfProbes","port","protocol","provisioningState","requestPath","type"})
    private ProbeResponse(
        String etag,
        @Nullable String id,
        @Nullable Integer intervalInSeconds,
        List<SubResourceResponse> loadBalancingRules,
        @Nullable String name,
        @Nullable Integer numberOfProbes,
        Integer port,
        String protocol,
        String provisioningState,
        @Nullable String requestPath,
        String type) {
        this.etag = Objects.requireNonNull(etag);
        this.id = id;
        this.intervalInSeconds = intervalInSeconds;
        this.loadBalancingRules = Objects.requireNonNull(loadBalancingRules);
        this.name = name;
        this.numberOfProbes = numberOfProbes;
        this.port = Objects.requireNonNull(port);
        this.protocol = Objects.requireNonNull(protocol);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.requestPath = requestPath;
        this.type = Objects.requireNonNull(type);
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
    */
    public String getEtag() {
        return this.etag;
    }
    /**
     * Resource ID.
     * 
    */
    public Optional<String> getId() {
        return Optional.ofNullable(this.id);
    }
    /**
     * The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
     * 
    */
    public Optional<Integer> getIntervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }
    /**
     * The load balancer rules that use this probe.
     * 
    */
    public List<SubResourceResponse> getLoadBalancingRules() {
        return this.loadBalancingRules;
    }
    /**
     * The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access the resource.
     * 
    */
    public Optional<String> getName() {
        return Optional.ofNullable(this.name);
    }
    /**
     * The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
     * 
    */
    public Optional<Integer> getNumberOfProbes() {
        return Optional.ofNullable(this.numberOfProbes);
    }
    /**
     * The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
     * 
    */
    public Integer getPort() {
        return this.port;
    }
    /**
     * The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
     * 
    */
    public String getProtocol() {
        return this.protocol;
    }
    /**
     * The provisioning state of the probe resource.
     * 
    */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
     * 
    */
    public Optional<String> getRequestPath() {
        return Optional.ofNullable(this.requestPath);
    }
    /**
     * Type of the resource.
     * 
    */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProbeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String etag;
        private @Nullable String id;
        private @Nullable Integer intervalInSeconds;
        private List<SubResourceResponse> loadBalancingRules;
        private @Nullable String name;
        private @Nullable Integer numberOfProbes;
        private Integer port;
        private String protocol;
        private String provisioningState;
        private @Nullable String requestPath;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(ProbeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.loadBalancingRules = defaults.loadBalancingRules;
    	      this.name = defaults.name;
    	      this.numberOfProbes = defaults.numberOfProbes;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.provisioningState = defaults.provisioningState;
    	      this.requestPath = defaults.requestPath;
    	      this.type = defaults.type;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setIntervalInSeconds(@Nullable Integer intervalInSeconds) {
            this.intervalInSeconds = intervalInSeconds;
            return this;
        }

        public Builder setLoadBalancingRules(List<SubResourceResponse> loadBalancingRules) {
            this.loadBalancingRules = Objects.requireNonNull(loadBalancingRules);
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setNumberOfProbes(@Nullable Integer numberOfProbes) {
            this.numberOfProbes = numberOfProbes;
            return this;
        }

        public Builder setPort(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder setProtocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setRequestPath(@Nullable String requestPath) {
            this.requestPath = requestPath;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ProbeResponse build() {
            return new ProbeResponse(etag, id, intervalInSeconds, loadBalancingRules, name, numberOfProbes, port, protocol, provisioningState, requestPath, type);
        }
    }
}
