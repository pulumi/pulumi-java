// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.security.inputs;

import io.pulumi.azurenative.security.inputs.PublisherInfoArgs;
import io.pulumi.azurenative.security.inputs.UserRecommendationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a path that is recommended to be allowed and its properties
 * 
 */
public final class PathRecommendationArgs extends io.pulumi.resources.ResourceArgs {

    public static final PathRecommendationArgs Empty = new PathRecommendationArgs();

    /**
     * The recommendation action of the machine or rule
     * 
     */
    @Import(name="action")
      private final @Nullable Output<String> action;

    public Output<String> getAction() {
        return this.action == null ? Codegen.empty() : this.action;
    }

    /**
     * Whether the application is commonly run on the machine
     * 
     */
    @Import(name="common")
      private final @Nullable Output<Boolean> common;

    public Output<Boolean> getCommon() {
        return this.common == null ? Codegen.empty() : this.common;
    }

    /**
     * The configuration status of the machines group or machine or rule
     * 
     */
    @Import(name="configurationStatus")
      private final @Nullable Output<String> configurationStatus;

    public Output<String> getConfigurationStatus() {
        return this.configurationStatus == null ? Codegen.empty() : this.configurationStatus;
    }

    /**
     * The type of the file (for Linux files - Executable is used)
     * 
     */
    @Import(name="fileType")
      private final @Nullable Output<String> fileType;

    public Output<String> getFileType() {
        return this.fileType == null ? Codegen.empty() : this.fileType;
    }

    /**
     * The full path of the file, or an identifier of the application
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> getPath() {
        return this.path == null ? Codegen.empty() : this.path;
    }

    /**
     * Represents the publisher information of a process/rule
     * 
     */
    @Import(name="publisherInfo")
      private final @Nullable Output<PublisherInfoArgs> publisherInfo;

    public Output<PublisherInfoArgs> getPublisherInfo() {
        return this.publisherInfo == null ? Codegen.empty() : this.publisherInfo;
    }

    /**
     * The type of the rule to be allowed
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    @Import(name="userSids")
      private final @Nullable Output<List<String>> userSids;

    public Output<List<String>> getUserSids() {
        return this.userSids == null ? Codegen.empty() : this.userSids;
    }

    @Import(name="usernames")
      private final @Nullable Output<List<UserRecommendationArgs>> usernames;

    public Output<List<UserRecommendationArgs>> getUsernames() {
        return this.usernames == null ? Codegen.empty() : this.usernames;
    }

    public PathRecommendationArgs(
        @Nullable Output<String> action,
        @Nullable Output<Boolean> common,
        @Nullable Output<String> configurationStatus,
        @Nullable Output<String> fileType,
        @Nullable Output<String> path,
        @Nullable Output<PublisherInfoArgs> publisherInfo,
        @Nullable Output<String> type,
        @Nullable Output<List<String>> userSids,
        @Nullable Output<List<UserRecommendationArgs>> usernames) {
        this.action = action;
        this.common = common;
        this.configurationStatus = configurationStatus;
        this.fileType = fileType;
        this.path = path;
        this.publisherInfo = publisherInfo;
        this.type = type;
        this.userSids = userSids;
        this.usernames = usernames;
    }

    private PathRecommendationArgs() {
        this.action = Codegen.empty();
        this.common = Codegen.empty();
        this.configurationStatus = Codegen.empty();
        this.fileType = Codegen.empty();
        this.path = Codegen.empty();
        this.publisherInfo = Codegen.empty();
        this.type = Codegen.empty();
        this.userSids = Codegen.empty();
        this.usernames = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PathRecommendationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> action;
        private @Nullable Output<Boolean> common;
        private @Nullable Output<String> configurationStatus;
        private @Nullable Output<String> fileType;
        private @Nullable Output<String> path;
        private @Nullable Output<PublisherInfoArgs> publisherInfo;
        private @Nullable Output<String> type;
        private @Nullable Output<List<String>> userSids;
        private @Nullable Output<List<UserRecommendationArgs>> usernames;

        public Builder() {
    	      // Empty
        }

        public Builder(PathRecommendationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.common = defaults.common;
    	      this.configurationStatus = defaults.configurationStatus;
    	      this.fileType = defaults.fileType;
    	      this.path = defaults.path;
    	      this.publisherInfo = defaults.publisherInfo;
    	      this.type = defaults.type;
    	      this.userSids = defaults.userSids;
    	      this.usernames = defaults.usernames;
        }

        public Builder action(@Nullable Output<String> action) {
            this.action = action;
            return this;
        }
        public Builder action(@Nullable String action) {
            this.action = Codegen.ofNullable(action);
            return this;
        }
        public Builder common(@Nullable Output<Boolean> common) {
            this.common = common;
            return this;
        }
        public Builder common(@Nullable Boolean common) {
            this.common = Codegen.ofNullable(common);
            return this;
        }
        public Builder configurationStatus(@Nullable Output<String> configurationStatus) {
            this.configurationStatus = configurationStatus;
            return this;
        }
        public Builder configurationStatus(@Nullable String configurationStatus) {
            this.configurationStatus = Codegen.ofNullable(configurationStatus);
            return this;
        }
        public Builder fileType(@Nullable Output<String> fileType) {
            this.fileType = fileType;
            return this;
        }
        public Builder fileType(@Nullable String fileType) {
            this.fileType = Codegen.ofNullable(fileType);
            return this;
        }
        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = Codegen.ofNullable(path);
            return this;
        }
        public Builder publisherInfo(@Nullable Output<PublisherInfoArgs> publisherInfo) {
            this.publisherInfo = publisherInfo;
            return this;
        }
        public Builder publisherInfo(@Nullable PublisherInfoArgs publisherInfo) {
            this.publisherInfo = Codegen.ofNullable(publisherInfo);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder userSids(@Nullable Output<List<String>> userSids) {
            this.userSids = userSids;
            return this;
        }
        public Builder userSids(@Nullable List<String> userSids) {
            this.userSids = Codegen.ofNullable(userSids);
            return this;
        }
        public Builder userSids(String... userSids) {
            return userSids(List.of(userSids));
        }
        public Builder usernames(@Nullable Output<List<UserRecommendationArgs>> usernames) {
            this.usernames = usernames;
            return this;
        }
        public Builder usernames(@Nullable List<UserRecommendationArgs> usernames) {
            this.usernames = Codegen.ofNullable(usernames);
            return this;
        }
        public Builder usernames(UserRecommendationArgs... usernames) {
            return usernames(List.of(usernames));
        }        public PathRecommendationArgs build() {
            return new PathRecommendationArgs(action, common, configurationStatus, fileType, path, publisherInfo, type, userSids, usernames);
        }
    }
}
