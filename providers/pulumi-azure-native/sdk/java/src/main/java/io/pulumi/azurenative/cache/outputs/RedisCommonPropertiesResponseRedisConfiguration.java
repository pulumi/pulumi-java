// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cache.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class RedisCommonPropertiesResponseRedisConfiguration {
    private final @Nullable String aofStorageConnectionString0;
    private final @Nullable String aofStorageConnectionString1;
    private final String maxclients;
    private final @Nullable String maxfragmentationmemoryReserved;
    private final @Nullable String maxmemoryDelta;
    private final @Nullable String maxmemoryPolicy;
    private final @Nullable String maxmemoryReserved;
    private final @Nullable String rdbBackupEnabled;
    private final @Nullable String rdbBackupFrequency;
    private final @Nullable String rdbBackupMaxSnapshotCount;
    private final @Nullable String rdbStorageConnectionString;

    @OutputCustomType.Constructor({"aofStorageConnectionString0","aofStorageConnectionString1","maxclients","maxfragmentationmemoryReserved","maxmemoryDelta","maxmemoryPolicy","maxmemoryReserved","rdbBackupEnabled","rdbBackupFrequency","rdbBackupMaxSnapshotCount","rdbStorageConnectionString"})
    private RedisCommonPropertiesResponseRedisConfiguration(
        @Nullable String aofStorageConnectionString0,
        @Nullable String aofStorageConnectionString1,
        String maxclients,
        @Nullable String maxfragmentationmemoryReserved,
        @Nullable String maxmemoryDelta,
        @Nullable String maxmemoryPolicy,
        @Nullable String maxmemoryReserved,
        @Nullable String rdbBackupEnabled,
        @Nullable String rdbBackupFrequency,
        @Nullable String rdbBackupMaxSnapshotCount,
        @Nullable String rdbStorageConnectionString) {
        this.aofStorageConnectionString0 = aofStorageConnectionString0;
        this.aofStorageConnectionString1 = aofStorageConnectionString1;
        this.maxclients = Objects.requireNonNull(maxclients);
        this.maxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
        this.maxmemoryDelta = maxmemoryDelta;
        this.maxmemoryPolicy = maxmemoryPolicy;
        this.maxmemoryReserved = maxmemoryReserved;
        this.rdbBackupEnabled = rdbBackupEnabled;
        this.rdbBackupFrequency = rdbBackupFrequency;
        this.rdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
        this.rdbStorageConnectionString = rdbStorageConnectionString;
    }

    public Optional<String> getAofStorageConnectionString0() {
        return Optional.ofNullable(this.aofStorageConnectionString0);
    }
    public Optional<String> getAofStorageConnectionString1() {
        return Optional.ofNullable(this.aofStorageConnectionString1);
    }
    public String getMaxclients() {
        return this.maxclients;
    }
    public Optional<String> getMaxfragmentationmemoryReserved() {
        return Optional.ofNullable(this.maxfragmentationmemoryReserved);
    }
    public Optional<String> getMaxmemoryDelta() {
        return Optional.ofNullable(this.maxmemoryDelta);
    }
    public Optional<String> getMaxmemoryPolicy() {
        return Optional.ofNullable(this.maxmemoryPolicy);
    }
    public Optional<String> getMaxmemoryReserved() {
        return Optional.ofNullable(this.maxmemoryReserved);
    }
    public Optional<String> getRdbBackupEnabled() {
        return Optional.ofNullable(this.rdbBackupEnabled);
    }
    public Optional<String> getRdbBackupFrequency() {
        return Optional.ofNullable(this.rdbBackupFrequency);
    }
    public Optional<String> getRdbBackupMaxSnapshotCount() {
        return Optional.ofNullable(this.rdbBackupMaxSnapshotCount);
    }
    public Optional<String> getRdbStorageConnectionString() {
        return Optional.ofNullable(this.rdbStorageConnectionString);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RedisCommonPropertiesResponseRedisConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String aofStorageConnectionString0;
        private @Nullable String aofStorageConnectionString1;
        private String maxclients;
        private @Nullable String maxfragmentationmemoryReserved;
        private @Nullable String maxmemoryDelta;
        private @Nullable String maxmemoryPolicy;
        private @Nullable String maxmemoryReserved;
        private @Nullable String rdbBackupEnabled;
        private @Nullable String rdbBackupFrequency;
        private @Nullable String rdbBackupMaxSnapshotCount;
        private @Nullable String rdbStorageConnectionString;

        public Builder() {
    	      // Empty
        }

        public Builder(RedisCommonPropertiesResponseRedisConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aofStorageConnectionString0 = defaults.aofStorageConnectionString0;
    	      this.aofStorageConnectionString1 = defaults.aofStorageConnectionString1;
    	      this.maxclients = defaults.maxclients;
    	      this.maxfragmentationmemoryReserved = defaults.maxfragmentationmemoryReserved;
    	      this.maxmemoryDelta = defaults.maxmemoryDelta;
    	      this.maxmemoryPolicy = defaults.maxmemoryPolicy;
    	      this.maxmemoryReserved = defaults.maxmemoryReserved;
    	      this.rdbBackupEnabled = defaults.rdbBackupEnabled;
    	      this.rdbBackupFrequency = defaults.rdbBackupFrequency;
    	      this.rdbBackupMaxSnapshotCount = defaults.rdbBackupMaxSnapshotCount;
    	      this.rdbStorageConnectionString = defaults.rdbStorageConnectionString;
        }

        public Builder setAofStorageConnectionString0(@Nullable String aofStorageConnectionString0) {
            this.aofStorageConnectionString0 = aofStorageConnectionString0;
            return this;
        }

        public Builder setAofStorageConnectionString1(@Nullable String aofStorageConnectionString1) {
            this.aofStorageConnectionString1 = aofStorageConnectionString1;
            return this;
        }

        public Builder setMaxclients(String maxclients) {
            this.maxclients = Objects.requireNonNull(maxclients);
            return this;
        }

        public Builder setMaxfragmentationmemoryReserved(@Nullable String maxfragmentationmemoryReserved) {
            this.maxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
            return this;
        }

        public Builder setMaxmemoryDelta(@Nullable String maxmemoryDelta) {
            this.maxmemoryDelta = maxmemoryDelta;
            return this;
        }

        public Builder setMaxmemoryPolicy(@Nullable String maxmemoryPolicy) {
            this.maxmemoryPolicy = maxmemoryPolicy;
            return this;
        }

        public Builder setMaxmemoryReserved(@Nullable String maxmemoryReserved) {
            this.maxmemoryReserved = maxmemoryReserved;
            return this;
        }

        public Builder setRdbBackupEnabled(@Nullable String rdbBackupEnabled) {
            this.rdbBackupEnabled = rdbBackupEnabled;
            return this;
        }

        public Builder setRdbBackupFrequency(@Nullable String rdbBackupFrequency) {
            this.rdbBackupFrequency = rdbBackupFrequency;
            return this;
        }

        public Builder setRdbBackupMaxSnapshotCount(@Nullable String rdbBackupMaxSnapshotCount) {
            this.rdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
            return this;
        }

        public Builder setRdbStorageConnectionString(@Nullable String rdbStorageConnectionString) {
            this.rdbStorageConnectionString = rdbStorageConnectionString;
            return this;
        }

        public RedisCommonPropertiesResponseRedisConfiguration build() {
            return new RedisCommonPropertiesResponseRedisConfiguration(aofStorageConnectionString0, aofStorageConnectionString1, maxclients, maxfragmentationmemoryReserved, maxmemoryDelta, maxmemoryPolicy, maxmemoryReserved, rdbBackupEnabled, rdbBackupFrequency, rdbBackupMaxSnapshotCount, rdbStorageConnectionString);
        }
    }
}
