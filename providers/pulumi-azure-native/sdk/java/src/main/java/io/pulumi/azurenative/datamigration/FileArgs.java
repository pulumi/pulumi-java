// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration;

import io.pulumi.azurenative.datamigration.inputs.ProjectFilePropertiesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FileArgs extends io.pulumi.resources.ResourceArgs {

    public static final FileArgs Empty = new FileArgs();

    /**
     * Name of the File
     * 
     */
    @InputImport(name="fileName")
      private final @Nullable Input<String> fileName;

    public Input<String> getFileName() {
        return this.fileName == null ? Input.empty() : this.fileName;
    }

    /**
     * Name of the resource group
     * 
     */
    @InputImport(name="groupName", required=true)
      private final Input<String> groupName;

    public Input<String> getGroupName() {
        return this.groupName;
    }

    /**
     * Name of the project
     * 
     */
    @InputImport(name="projectName", required=true)
      private final Input<String> projectName;

    public Input<String> getProjectName() {
        return this.projectName;
    }

    /**
     * Custom file properties
     * 
     */
    @InputImport(name="properties")
      private final @Nullable Input<ProjectFilePropertiesArgs> properties;

    public Input<ProjectFilePropertiesArgs> getProperties() {
        return this.properties == null ? Input.empty() : this.properties;
    }

    /**
     * Name of the service
     * 
     */
    @InputImport(name="serviceName", required=true)
      private final Input<String> serviceName;

    public Input<String> getServiceName() {
        return this.serviceName;
    }

    public FileArgs(
        @Nullable Input<String> fileName,
        Input<String> groupName,
        Input<String> projectName,
        @Nullable Input<ProjectFilePropertiesArgs> properties,
        Input<String> serviceName) {
        this.fileName = fileName;
        this.groupName = Objects.requireNonNull(groupName, "expected parameter 'groupName' to be non-null");
        this.projectName = Objects.requireNonNull(projectName, "expected parameter 'projectName' to be non-null");
        this.properties = properties;
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
    }

    private FileArgs() {
        this.fileName = Input.empty();
        this.groupName = Input.empty();
        this.projectName = Input.empty();
        this.properties = Input.empty();
        this.serviceName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> fileName;
        private Input<String> groupName;
        private Input<String> projectName;
        private @Nullable Input<ProjectFilePropertiesArgs> properties;
        private Input<String> serviceName;

        public Builder() {
    	      // Empty
        }

        public Builder(FileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fileName = defaults.fileName;
    	      this.groupName = defaults.groupName;
    	      this.projectName = defaults.projectName;
    	      this.properties = defaults.properties;
    	      this.serviceName = defaults.serviceName;
        }

        public Builder fileName(@Nullable Input<String> fileName) {
            this.fileName = fileName;
            return this;
        }

        public Builder fileName(@Nullable String fileName) {
            this.fileName = Input.ofNullable(fileName);
            return this;
        }

        public Builder groupName(Input<String> groupName) {
            this.groupName = Objects.requireNonNull(groupName);
            return this;
        }

        public Builder groupName(String groupName) {
            this.groupName = Input.of(Objects.requireNonNull(groupName));
            return this;
        }

        public Builder projectName(Input<String> projectName) {
            this.projectName = Objects.requireNonNull(projectName);
            return this;
        }

        public Builder projectName(String projectName) {
            this.projectName = Input.of(Objects.requireNonNull(projectName));
            return this;
        }

        public Builder properties(@Nullable Input<ProjectFilePropertiesArgs> properties) {
            this.properties = properties;
            return this;
        }

        public Builder properties(@Nullable ProjectFilePropertiesArgs properties) {
            this.properties = Input.ofNullable(properties);
            return this;
        }

        public Builder serviceName(Input<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }

        public Builder serviceName(String serviceName) {
            this.serviceName = Input.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public FileArgs build() {
            return new FileArgs(fileName, groupName, projectName, properties, serviceName);
        }
    }
}
