// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.securityinsights;

import io.pulumi.azurenative.securityinsights.inputs.AutomationRuleModifyPropertiesActionArgs;
import io.pulumi.azurenative.securityinsights.inputs.AutomationRuleRunPlaybookActionArgs;
import io.pulumi.azurenative.securityinsights.inputs.AutomationRuleTriggeringLogicArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AutomationRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutomationRuleArgs Empty = new AutomationRuleArgs();

    /**
     * The actions to execute when the automation rule is triggered
     * 
     */
    @Import(name="actions", required=true)
      private final Output<List<Either<AutomationRuleModifyPropertiesActionArgs,AutomationRuleRunPlaybookActionArgs>>> actions;

    public Output<List<Either<AutomationRuleModifyPropertiesActionArgs,AutomationRuleRunPlaybookActionArgs>>> actions() {
        return this.actions;
    }

    /**
     * Automation rule ID
     * 
     */
    @Import(name="automationRuleId")
      private final @Nullable Output<String> automationRuleId;

    public Output<String> automationRuleId() {
        return this.automationRuleId == null ? Codegen.empty() : this.automationRuleId;
    }

    /**
     * The display name of the automation  rule
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The namespace of workspaces resource provider- Microsoft.OperationalInsights.
     * 
     */
    @Import(name="operationalInsightsResourceProvider", required=true)
      private final Output<String> operationalInsightsResourceProvider;

    public Output<String> operationalInsightsResourceProvider() {
        return this.operationalInsightsResourceProvider;
    }

    /**
     * The order of execution of the automation rule
     * 
     */
    @Import(name="order", required=true)
      private final Output<Integer> order;

    public Output<Integer> order() {
        return this.order;
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The triggering logic of the automation rule
     * 
     */
    @Import(name="triggeringLogic", required=true)
      private final Output<AutomationRuleTriggeringLogicArgs> triggeringLogic;

    public Output<AutomationRuleTriggeringLogicArgs> triggeringLogic() {
        return this.triggeringLogic;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    public AutomationRuleArgs(
        Output<List<Either<AutomationRuleModifyPropertiesActionArgs,AutomationRuleRunPlaybookActionArgs>>> actions,
        @Nullable Output<String> automationRuleId,
        Output<String> displayName,
        Output<String> operationalInsightsResourceProvider,
        Output<Integer> order,
        Output<String> resourceGroupName,
        Output<AutomationRuleTriggeringLogicArgs> triggeringLogic,
        Output<String> workspaceName) {
        this.actions = Objects.requireNonNull(actions, "expected parameter 'actions' to be non-null");
        this.automationRuleId = automationRuleId;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.operationalInsightsResourceProvider = Objects.requireNonNull(operationalInsightsResourceProvider, "expected parameter 'operationalInsightsResourceProvider' to be non-null");
        this.order = Objects.requireNonNull(order, "expected parameter 'order' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.triggeringLogic = Objects.requireNonNull(triggeringLogic, "expected parameter 'triggeringLogic' to be non-null");
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private AutomationRuleArgs() {
        this.actions = Codegen.empty();
        this.automationRuleId = Codegen.empty();
        this.displayName = Codegen.empty();
        this.operationalInsightsResourceProvider = Codegen.empty();
        this.order = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.triggeringLogic = Codegen.empty();
        this.workspaceName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutomationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<Either<AutomationRuleModifyPropertiesActionArgs,AutomationRuleRunPlaybookActionArgs>>> actions;
        private @Nullable Output<String> automationRuleId;
        private Output<String> displayName;
        private Output<String> operationalInsightsResourceProvider;
        private Output<Integer> order;
        private Output<String> resourceGroupName;
        private Output<AutomationRuleTriggeringLogicArgs> triggeringLogic;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(AutomationRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.automationRuleId = defaults.automationRuleId;
    	      this.displayName = defaults.displayName;
    	      this.operationalInsightsResourceProvider = defaults.operationalInsightsResourceProvider;
    	      this.order = defaults.order;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.triggeringLogic = defaults.triggeringLogic;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder actions(Output<List<Either<AutomationRuleModifyPropertiesActionArgs,AutomationRuleRunPlaybookActionArgs>>> actions) {
            this.actions = Objects.requireNonNull(actions);
            return this;
        }
        public Builder actions(List<Either<AutomationRuleModifyPropertiesActionArgs,AutomationRuleRunPlaybookActionArgs>> actions) {
            this.actions = Output.of(Objects.requireNonNull(actions));
            return this;
        }
        public Builder actions(Either<AutomationRuleModifyPropertiesActionArgs,AutomationRuleRunPlaybookActionArgs>... actions) {
            return actions(List.of(actions));
        }
        public Builder automationRuleId(@Nullable Output<String> automationRuleId) {
            this.automationRuleId = automationRuleId;
            return this;
        }
        public Builder automationRuleId(@Nullable String automationRuleId) {
            this.automationRuleId = Codegen.ofNullable(automationRuleId);
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder operationalInsightsResourceProvider(Output<String> operationalInsightsResourceProvider) {
            this.operationalInsightsResourceProvider = Objects.requireNonNull(operationalInsightsResourceProvider);
            return this;
        }
        public Builder operationalInsightsResourceProvider(String operationalInsightsResourceProvider) {
            this.operationalInsightsResourceProvider = Output.of(Objects.requireNonNull(operationalInsightsResourceProvider));
            return this;
        }
        public Builder order(Output<Integer> order) {
            this.order = Objects.requireNonNull(order);
            return this;
        }
        public Builder order(Integer order) {
            this.order = Output.of(Objects.requireNonNull(order));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder triggeringLogic(Output<AutomationRuleTriggeringLogicArgs> triggeringLogic) {
            this.triggeringLogic = Objects.requireNonNull(triggeringLogic);
            return this;
        }
        public Builder triggeringLogic(AutomationRuleTriggeringLogicArgs triggeringLogic) {
            this.triggeringLogic = Output.of(Objects.requireNonNull(triggeringLogic));
            return this;
        }
        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }
        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }        public AutomationRuleArgs build() {
            return new AutomationRuleArgs(actions, automationRuleId, displayName, operationalInsightsResourceProvider, order, resourceGroupName, triggeringLogic, workspaceName);
        }
    }
}
