// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration;

import io.pulumi.azurenative.datamigration.enums.ProjectSourcePlatform;
import io.pulumi.azurenative.datamigration.enums.ProjectTargetPlatform;
import io.pulumi.azurenative.datamigration.inputs.DatabaseInfoArgs;
import io.pulumi.azurenative.datamigration.inputs.MiSqlConnectionInfoArgs;
import io.pulumi.azurenative.datamigration.inputs.MySqlConnectionInfoArgs;
import io.pulumi.azurenative.datamigration.inputs.PostgreSqlConnectionInfoArgs;
import io.pulumi.azurenative.datamigration.inputs.SqlConnectionInfoArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProjectArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * List of DatabaseInfo
     * 
     */
    @InputImport(name="databasesInfo")
      private final @Nullable Output<List<DatabaseInfoArgs>> databasesInfo;

    public Output<List<DatabaseInfoArgs>> getDatabasesInfo() {
        return this.databasesInfo == null ? Output.empty() : this.databasesInfo;
    }

    /**
     * Name of the resource group
     * 
     */
    @InputImport(name="groupName", required=true)
      private final Output<String> groupName;

    public Output<String> getGroupName() {
        return this.groupName;
    }

    /**
     * Resource location.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Name of the project
     * 
     */
    @InputImport(name="projectName")
      private final @Nullable Output<String> projectName;

    public Output<String> getProjectName() {
        return this.projectName == null ? Output.empty() : this.projectName;
    }

    /**
     * Name of the service
     * 
     */
    @InputImport(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * Information for connecting to source
     * 
     */
    @InputImport(name="sourceConnectionInfo")
      private final @Nullable Output<Object> sourceConnectionInfo;

    public Output<Object> getSourceConnectionInfo() {
        return this.sourceConnectionInfo == null ? Output.empty() : this.sourceConnectionInfo;
    }

    /**
     * Source platform for the project
     * 
     */
    @InputImport(name="sourcePlatform", required=true)
      private final Output<Either<String,ProjectSourcePlatform>> sourcePlatform;

    public Output<Either<String,ProjectSourcePlatform>> getSourcePlatform() {
        return this.sourcePlatform;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Information for connecting to target
     * 
     */
    @InputImport(name="targetConnectionInfo")
      private final @Nullable Output<Object> targetConnectionInfo;

    public Output<Object> getTargetConnectionInfo() {
        return this.targetConnectionInfo == null ? Output.empty() : this.targetConnectionInfo;
    }

    /**
     * Target platform for the project
     * 
     */
    @InputImport(name="targetPlatform", required=true)
      private final Output<Either<String,ProjectTargetPlatform>> targetPlatform;

    public Output<Either<String,ProjectTargetPlatform>> getTargetPlatform() {
        return this.targetPlatform;
    }

    public ProjectArgs(
        @Nullable Output<List<DatabaseInfoArgs>> databasesInfo,
        Output<String> groupName,
        @Nullable Output<String> location,
        @Nullable Output<String> projectName,
        Output<String> serviceName,
        @Nullable Output<Object> sourceConnectionInfo,
        Output<Either<String,ProjectSourcePlatform>> sourcePlatform,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Object> targetConnectionInfo,
        Output<Either<String,ProjectTargetPlatform>> targetPlatform) {
        this.databasesInfo = databasesInfo;
        this.groupName = Objects.requireNonNull(groupName, "expected parameter 'groupName' to be non-null");
        this.location = location;
        this.projectName = projectName;
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.sourceConnectionInfo = sourceConnectionInfo;
        this.sourcePlatform = Objects.requireNonNull(sourcePlatform, "expected parameter 'sourcePlatform' to be non-null");
        this.tags = tags;
        this.targetConnectionInfo = targetConnectionInfo;
        this.targetPlatform = Objects.requireNonNull(targetPlatform, "expected parameter 'targetPlatform' to be non-null");
    }

    private ProjectArgs() {
        this.databasesInfo = Output.empty();
        this.groupName = Output.empty();
        this.location = Output.empty();
        this.projectName = Output.empty();
        this.serviceName = Output.empty();
        this.sourceConnectionInfo = Output.empty();
        this.sourcePlatform = Output.empty();
        this.tags = Output.empty();
        this.targetConnectionInfo = Output.empty();
        this.targetPlatform = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<DatabaseInfoArgs>> databasesInfo;
        private Output<String> groupName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> projectName;
        private Output<String> serviceName;
        private @Nullable Output<Object> sourceConnectionInfo;
        private Output<Either<String,ProjectSourcePlatform>> sourcePlatform;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Object> targetConnectionInfo;
        private Output<Either<String,ProjectTargetPlatform>> targetPlatform;

        public Builder() {
    	      // Empty
        }

        public Builder(ProjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databasesInfo = defaults.databasesInfo;
    	      this.groupName = defaults.groupName;
    	      this.location = defaults.location;
    	      this.projectName = defaults.projectName;
    	      this.serviceName = defaults.serviceName;
    	      this.sourceConnectionInfo = defaults.sourceConnectionInfo;
    	      this.sourcePlatform = defaults.sourcePlatform;
    	      this.tags = defaults.tags;
    	      this.targetConnectionInfo = defaults.targetConnectionInfo;
    	      this.targetPlatform = defaults.targetPlatform;
        }

        public Builder databasesInfo(@Nullable Output<List<DatabaseInfoArgs>> databasesInfo) {
            this.databasesInfo = databasesInfo;
            return this;
        }

        public Builder databasesInfo(@Nullable List<DatabaseInfoArgs> databasesInfo) {
            this.databasesInfo = Output.ofNullable(databasesInfo);
            return this;
        }

        public Builder groupName(Output<String> groupName) {
            this.groupName = Objects.requireNonNull(groupName);
            return this;
        }

        public Builder groupName(String groupName) {
            this.groupName = Output.of(Objects.requireNonNull(groupName));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder projectName(@Nullable Output<String> projectName) {
            this.projectName = projectName;
            return this;
        }

        public Builder projectName(@Nullable String projectName) {
            this.projectName = Output.ofNullable(projectName);
            return this;
        }

        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }

        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }

        public Builder sourceConnectionInfo(@Nullable Output<Object> sourceConnectionInfo) {
            this.sourceConnectionInfo = sourceConnectionInfo;
            return this;
        }

        public Builder sourceConnectionInfo(@Nullable Object sourceConnectionInfo) {
            this.sourceConnectionInfo = Output.ofNullable(sourceConnectionInfo);
            return this;
        }

        public Builder sourcePlatform(Output<Either<String,ProjectSourcePlatform>> sourcePlatform) {
            this.sourcePlatform = Objects.requireNonNull(sourcePlatform);
            return this;
        }

        public Builder sourcePlatform(Either<String,ProjectSourcePlatform> sourcePlatform) {
            this.sourcePlatform = Output.of(Objects.requireNonNull(sourcePlatform));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder targetConnectionInfo(@Nullable Output<Object> targetConnectionInfo) {
            this.targetConnectionInfo = targetConnectionInfo;
            return this;
        }

        public Builder targetConnectionInfo(@Nullable Object targetConnectionInfo) {
            this.targetConnectionInfo = Output.ofNullable(targetConnectionInfo);
            return this;
        }

        public Builder targetPlatform(Output<Either<String,ProjectTargetPlatform>> targetPlatform) {
            this.targetPlatform = Objects.requireNonNull(targetPlatform);
            return this;
        }

        public Builder targetPlatform(Either<String,ProjectTargetPlatform> targetPlatform) {
            this.targetPlatform = Output.of(Objects.requireNonNull(targetPlatform));
            return this;
        }
        public ProjectArgs build() {
            return new ProjectArgs(databasesInfo, groupName, location, projectName, serviceName, sourceConnectionInfo, sourcePlatform, tags, targetConnectionInfo, targetPlatform);
        }
    }
}
