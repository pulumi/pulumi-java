// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.outputs;

import io.pulumi.azurenative.datamigration.outputs.DatabaseSummaryResultResponse;
import io.pulumi.azurenative.datamigration.outputs.MigrationReportResultResponse;
import io.pulumi.azurenative.datamigration.outputs.ReportableExceptionResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse {
    /**
     * Summary of database results in the migration
     * 
     */
    private final Map<String,DatabaseSummaryResultResponse> databaseSummary;
    /**
     * Selected databases as a map from database name to database id
     * 
     */
    private final Map<String,String> databases;
    /**
     * Duration of task execution in seconds.
     * 
     */
    private final Double durationInSeconds;
    /**
     * Migration end time
     * 
     */
    private final String endedOn;
    /**
     * Migration exceptions and warnings.
     * 
     */
    private final List<ReportableExceptionResponse> exceptionsAndWarnings;
    /**
     * Result identifier
     * 
     */
    private final String id;
    /**
     * Migration progress message
     * 
     */
    private final String message;
    /**
     * Migration Report Result, provides unique url for downloading your migration report.
     * 
     */
    private final MigrationReportResultResponse migrationReport;
    /**
     * Result type
     * Expected value is 'MigrationLevelOutput'.
     * 
     */
    private final String resultType;
    /**
     * Source server brand version
     * 
     */
    private final String sourceServerBrandVersion;
    /**
     * Source server version
     * 
     */
    private final String sourceServerVersion;
    /**
     * Migration start time
     * 
     */
    private final String startedOn;
    /**
     * Current status of migration
     * 
     */
    private final String status;
    /**
     * Migration status message
     * 
     */
    private final String statusMessage;
    /**
     * Target server brand version
     * 
     */
    private final String targetServerBrandVersion;
    /**
     * Target server version
     * 
     */
    private final String targetServerVersion;

    @OutputCustomType.Constructor({"databaseSummary","databases","durationInSeconds","endedOn","exceptionsAndWarnings","id","message","migrationReport","resultType","sourceServerBrandVersion","sourceServerVersion","startedOn","status","statusMessage","targetServerBrandVersion","targetServerVersion"})
    private MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse(
        Map<String,DatabaseSummaryResultResponse> databaseSummary,
        Map<String,String> databases,
        Double durationInSeconds,
        String endedOn,
        List<ReportableExceptionResponse> exceptionsAndWarnings,
        String id,
        String message,
        MigrationReportResultResponse migrationReport,
        String resultType,
        String sourceServerBrandVersion,
        String sourceServerVersion,
        String startedOn,
        String status,
        String statusMessage,
        String targetServerBrandVersion,
        String targetServerVersion) {
        this.databaseSummary = Objects.requireNonNull(databaseSummary);
        this.databases = Objects.requireNonNull(databases);
        this.durationInSeconds = Objects.requireNonNull(durationInSeconds);
        this.endedOn = Objects.requireNonNull(endedOn);
        this.exceptionsAndWarnings = Objects.requireNonNull(exceptionsAndWarnings);
        this.id = Objects.requireNonNull(id);
        this.message = Objects.requireNonNull(message);
        this.migrationReport = Objects.requireNonNull(migrationReport);
        this.resultType = Objects.requireNonNull(resultType);
        this.sourceServerBrandVersion = Objects.requireNonNull(sourceServerBrandVersion);
        this.sourceServerVersion = Objects.requireNonNull(sourceServerVersion);
        this.startedOn = Objects.requireNonNull(startedOn);
        this.status = Objects.requireNonNull(status);
        this.statusMessage = Objects.requireNonNull(statusMessage);
        this.targetServerBrandVersion = Objects.requireNonNull(targetServerBrandVersion);
        this.targetServerVersion = Objects.requireNonNull(targetServerVersion);
    }

    /**
     * Summary of database results in the migration
     * 
     */
    public Map<String,DatabaseSummaryResultResponse> getDatabaseSummary() {
        return this.databaseSummary;
    }
    /**
     * Selected databases as a map from database name to database id
     * 
     */
    public Map<String,String> getDatabases() {
        return this.databases;
    }
    /**
     * Duration of task execution in seconds.
     * 
     */
    public Double getDurationInSeconds() {
        return this.durationInSeconds;
    }
    /**
     * Migration end time
     * 
     */
    public String getEndedOn() {
        return this.endedOn;
    }
    /**
     * Migration exceptions and warnings.
     * 
     */
    public List<ReportableExceptionResponse> getExceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }
    /**
     * Result identifier
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * Migration progress message
     * 
     */
    public String getMessage() {
        return this.message;
    }
    /**
     * Migration Report Result, provides unique url for downloading your migration report.
     * 
     */
    public MigrationReportResultResponse getMigrationReport() {
        return this.migrationReport;
    }
    /**
     * Result type
     * Expected value is 'MigrationLevelOutput'.
     * 
     */
    public String getResultType() {
        return this.resultType;
    }
    /**
     * Source server brand version
     * 
     */
    public String getSourceServerBrandVersion() {
        return this.sourceServerBrandVersion;
    }
    /**
     * Source server version
     * 
     */
    public String getSourceServerVersion() {
        return this.sourceServerVersion;
    }
    /**
     * Migration start time
     * 
     */
    public String getStartedOn() {
        return this.startedOn;
    }
    /**
     * Current status of migration
     * 
     */
    public String getStatus() {
        return this.status;
    }
    /**
     * Migration status message
     * 
     */
    public String getStatusMessage() {
        return this.statusMessage;
    }
    /**
     * Target server brand version
     * 
     */
    public String getTargetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }
    /**
     * Target server version
     * 
     */
    public String getTargetServerVersion() {
        return this.targetServerVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,DatabaseSummaryResultResponse> databaseSummary;
        private Map<String,String> databases;
        private Double durationInSeconds;
        private String endedOn;
        private List<ReportableExceptionResponse> exceptionsAndWarnings;
        private String id;
        private String message;
        private MigrationReportResultResponse migrationReport;
        private String resultType;
        private String sourceServerBrandVersion;
        private String sourceServerVersion;
        private String startedOn;
        private String status;
        private String statusMessage;
        private String targetServerBrandVersion;
        private String targetServerVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseSummary = defaults.databaseSummary;
    	      this.databases = defaults.databases;
    	      this.durationInSeconds = defaults.durationInSeconds;
    	      this.endedOn = defaults.endedOn;
    	      this.exceptionsAndWarnings = defaults.exceptionsAndWarnings;
    	      this.id = defaults.id;
    	      this.message = defaults.message;
    	      this.migrationReport = defaults.migrationReport;
    	      this.resultType = defaults.resultType;
    	      this.sourceServerBrandVersion = defaults.sourceServerBrandVersion;
    	      this.sourceServerVersion = defaults.sourceServerVersion;
    	      this.startedOn = defaults.startedOn;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.targetServerBrandVersion = defaults.targetServerBrandVersion;
    	      this.targetServerVersion = defaults.targetServerVersion;
        }

        public Builder setDatabaseSummary(Map<String,DatabaseSummaryResultResponse> databaseSummary) {
            this.databaseSummary = Objects.requireNonNull(databaseSummary);
            return this;
        }

        public Builder setDatabases(Map<String,String> databases) {
            this.databases = Objects.requireNonNull(databases);
            return this;
        }

        public Builder setDurationInSeconds(Double durationInSeconds) {
            this.durationInSeconds = Objects.requireNonNull(durationInSeconds);
            return this;
        }

        public Builder setEndedOn(String endedOn) {
            this.endedOn = Objects.requireNonNull(endedOn);
            return this;
        }

        public Builder setExceptionsAndWarnings(List<ReportableExceptionResponse> exceptionsAndWarnings) {
            this.exceptionsAndWarnings = Objects.requireNonNull(exceptionsAndWarnings);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setMessage(String message) {
            this.message = Objects.requireNonNull(message);
            return this;
        }

        public Builder setMigrationReport(MigrationReportResultResponse migrationReport) {
            this.migrationReport = Objects.requireNonNull(migrationReport);
            return this;
        }

        public Builder setResultType(String resultType) {
            this.resultType = Objects.requireNonNull(resultType);
            return this;
        }

        public Builder setSourceServerBrandVersion(String sourceServerBrandVersion) {
            this.sourceServerBrandVersion = Objects.requireNonNull(sourceServerBrandVersion);
            return this;
        }

        public Builder setSourceServerVersion(String sourceServerVersion) {
            this.sourceServerVersion = Objects.requireNonNull(sourceServerVersion);
            return this;
        }

        public Builder setStartedOn(String startedOn) {
            this.startedOn = Objects.requireNonNull(startedOn);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setStatusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }

        public Builder setTargetServerBrandVersion(String targetServerBrandVersion) {
            this.targetServerBrandVersion = Objects.requireNonNull(targetServerBrandVersion);
            return this;
        }

        public Builder setTargetServerVersion(String targetServerVersion) {
            this.targetServerVersion = Objects.requireNonNull(targetServerVersion);
            return this;
        }
        public MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse build() {
            return new MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse(databaseSummary, databases, durationInSeconds, endedOn, exceptionsAndWarnings, id, message, migrationReport, resultType, sourceServerBrandVersion, sourceServerVersion, startedOn, status, statusMessage, targetServerBrandVersion, targetServerVersion);
        }
    }
}
