// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * Cosmos DB Cassandra view resource object
 * 
 */
public final class CassandraViewResourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final CassandraViewResourceArgs Empty = new CassandraViewResourceArgs();

    /**
     * Name of the Cosmos DB Cassandra view
     * 
     */
    @InputImport(name="id", required=true)
    private final Input<String> id;

    public Input<String> getId() {
        return this.id;
    }

    /**
     * View Definition of the Cosmos DB Cassandra view
     * 
     */
    @InputImport(name="viewDefinition", required=true)
    private final Input<String> viewDefinition;

    public Input<String> getViewDefinition() {
        return this.viewDefinition;
    }

    public CassandraViewResourceArgs(
        Input<String> id,
        Input<String> viewDefinition) {
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.viewDefinition = Objects.requireNonNull(viewDefinition, "expected parameter 'viewDefinition' to be non-null");
    }

    private CassandraViewResourceArgs() {
        this.id = Input.empty();
        this.viewDefinition = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CassandraViewResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> id;
        private Input<String> viewDefinition;

        public Builder() {
    	      // Empty
        }

        public Builder(CassandraViewResourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.viewDefinition = defaults.viewDefinition;
        }

        public Builder setId(Input<String> id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setId(String id) {
            this.id = Input.of(Objects.requireNonNull(id));
            return this;
        }

        public Builder setViewDefinition(Input<String> viewDefinition) {
            this.viewDefinition = Objects.requireNonNull(viewDefinition);
            return this;
        }

        public Builder setViewDefinition(String viewDefinition) {
            this.viewDefinition = Input.of(Objects.requireNonNull(viewDefinition));
            return this;
        }

        public CassandraViewResourceArgs build() {
            return new CassandraViewResourceArgs(id, viewDefinition);
        }
    }
}
