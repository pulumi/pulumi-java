// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.vmwarecloudsimple.inputs;

import io.pulumi.azurenative.vmwarecloudsimple.enums.NICType;
import io.pulumi.azurenative.vmwarecloudsimple.inputs.GuestOSNICCustomizationArgs;
import io.pulumi.azurenative.vmwarecloudsimple.inputs.VirtualNetworkArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Virtual NIC model
 * 
 */
public final class VirtualNicArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualNicArgs Empty = new VirtualNicArgs();

    /**
     * guest OS customization for nic
     * 
     */
    @Import(name="customization")
      private final @Nullable Output<GuestOSNICCustomizationArgs> customization;

    public Output<GuestOSNICCustomizationArgs> getCustomization() {
        return this.customization == null ? Output.empty() : this.customization;
    }

    /**
     * NIC ip address
     * 
     */
    @Import(name="ipAddresses")
      private final @Nullable Output<List<String>> ipAddresses;

    public Output<List<String>> getIpAddresses() {
        return this.ipAddresses == null ? Output.empty() : this.ipAddresses;
    }

    /**
     * NIC MAC address
     * 
     */
    @Import(name="macAddress")
      private final @Nullable Output<String> macAddress;

    public Output<String> getMacAddress() {
        return this.macAddress == null ? Output.empty() : this.macAddress;
    }

    /**
     * Virtual Network
     * 
     */
    @Import(name="network", required=true)
      private final Output<VirtualNetworkArgs> network;

    public Output<VirtualNetworkArgs> getNetwork() {
        return this.network;
    }

    /**
     * NIC type
     * 
     */
    @Import(name="nicType", required=true)
      private final Output<NICType> nicType;

    public Output<NICType> getNicType() {
        return this.nicType;
    }

    /**
     * Is NIC powered on/off on boot
     * 
     */
    @Import(name="powerOnBoot")
      private final @Nullable Output<Boolean> powerOnBoot;

    public Output<Boolean> getPowerOnBoot() {
        return this.powerOnBoot == null ? Output.empty() : this.powerOnBoot;
    }

    /**
     * NIC id
     * 
     */
    @Import(name="virtualNicId")
      private final @Nullable Output<String> virtualNicId;

    public Output<String> getVirtualNicId() {
        return this.virtualNicId == null ? Output.empty() : this.virtualNicId;
    }

    public VirtualNicArgs(
        @Nullable Output<GuestOSNICCustomizationArgs> customization,
        @Nullable Output<List<String>> ipAddresses,
        @Nullable Output<String> macAddress,
        Output<VirtualNetworkArgs> network,
        Output<NICType> nicType,
        @Nullable Output<Boolean> powerOnBoot,
        @Nullable Output<String> virtualNicId) {
        this.customization = customization;
        this.ipAddresses = ipAddresses;
        this.macAddress = macAddress;
        this.network = Objects.requireNonNull(network, "expected parameter 'network' to be non-null");
        this.nicType = Objects.requireNonNull(nicType, "expected parameter 'nicType' to be non-null");
        this.powerOnBoot = powerOnBoot;
        this.virtualNicId = virtualNicId;
    }

    private VirtualNicArgs() {
        this.customization = Output.empty();
        this.ipAddresses = Output.empty();
        this.macAddress = Output.empty();
        this.network = Output.empty();
        this.nicType = Output.empty();
        this.powerOnBoot = Output.empty();
        this.virtualNicId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<GuestOSNICCustomizationArgs> customization;
        private @Nullable Output<List<String>> ipAddresses;
        private @Nullable Output<String> macAddress;
        private Output<VirtualNetworkArgs> network;
        private Output<NICType> nicType;
        private @Nullable Output<Boolean> powerOnBoot;
        private @Nullable Output<String> virtualNicId;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNicArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customization = defaults.customization;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.macAddress = defaults.macAddress;
    	      this.network = defaults.network;
    	      this.nicType = defaults.nicType;
    	      this.powerOnBoot = defaults.powerOnBoot;
    	      this.virtualNicId = defaults.virtualNicId;
        }

        public Builder customization(@Nullable Output<GuestOSNICCustomizationArgs> customization) {
            this.customization = customization;
            return this;
        }
        public Builder customization(@Nullable GuestOSNICCustomizationArgs customization) {
            this.customization = Output.ofNullable(customization);
            return this;
        }
        public Builder ipAddresses(@Nullable Output<List<String>> ipAddresses) {
            this.ipAddresses = ipAddresses;
            return this;
        }
        public Builder ipAddresses(@Nullable List<String> ipAddresses) {
            this.ipAddresses = Output.ofNullable(ipAddresses);
            return this;
        }
        public Builder ipAddresses(String... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }
        public Builder macAddress(@Nullable Output<String> macAddress) {
            this.macAddress = macAddress;
            return this;
        }
        public Builder macAddress(@Nullable String macAddress) {
            this.macAddress = Output.ofNullable(macAddress);
            return this;
        }
        public Builder network(Output<VirtualNetworkArgs> network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        public Builder network(VirtualNetworkArgs network) {
            this.network = Output.of(Objects.requireNonNull(network));
            return this;
        }
        public Builder nicType(Output<NICType> nicType) {
            this.nicType = Objects.requireNonNull(nicType);
            return this;
        }
        public Builder nicType(NICType nicType) {
            this.nicType = Output.of(Objects.requireNonNull(nicType));
            return this;
        }
        public Builder powerOnBoot(@Nullable Output<Boolean> powerOnBoot) {
            this.powerOnBoot = powerOnBoot;
            return this;
        }
        public Builder powerOnBoot(@Nullable Boolean powerOnBoot) {
            this.powerOnBoot = Output.ofNullable(powerOnBoot);
            return this;
        }
        public Builder virtualNicId(@Nullable Output<String> virtualNicId) {
            this.virtualNicId = virtualNicId;
            return this;
        }
        public Builder virtualNicId(@Nullable String virtualNicId) {
            this.virtualNicId = Output.ofNullable(virtualNicId);
            return this;
        }        public VirtualNicArgs build() {
            return new VirtualNicArgs(customization, ipAddresses, macAddress, network, nicType, powerOnBoot, virtualNicId);
        }
    }
}
