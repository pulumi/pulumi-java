// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicebus;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MigrationConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final MigrationConfigArgs Empty = new MigrationConfigArgs();

    /**
     * The configuration name. Should always be "$default".
     * 
     */
    @InputImport(name="configName")
    private final @Nullable Input<String> configName;

    public Input<String> getConfigName() {
        return this.configName == null ? Input.empty() : this.configName;
    }

    /**
     * The namespace name
     * 
     */
    @InputImport(name="namespaceName", required=true)
    private final Input<String> namespaceName;

    public Input<String> getNamespaceName() {
        return this.namespaceName;
    }

    /**
     * Name to access Standard Namespace after migration
     * 
     */
    @InputImport(name="postMigrationName", required=true)
    private final Input<String> postMigrationName;

    public Input<String> getPostMigrationName() {
        return this.postMigrationName;
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Existing premium Namespace ARM Id name which has no entities, will be used for migration
     * 
     */
    @InputImport(name="targetNamespace", required=true)
    private final Input<String> targetNamespace;

    public Input<String> getTargetNamespace() {
        return this.targetNamespace;
    }

    public MigrationConfigArgs(
        @Nullable Input<String> configName,
        Input<String> namespaceName,
        Input<String> postMigrationName,
        Input<String> resourceGroupName,
        Input<String> targetNamespace) {
        this.configName = configName;
        this.namespaceName = Objects.requireNonNull(namespaceName, "expected parameter 'namespaceName' to be non-null");
        this.postMigrationName = Objects.requireNonNull(postMigrationName, "expected parameter 'postMigrationName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.targetNamespace = Objects.requireNonNull(targetNamespace, "expected parameter 'targetNamespace' to be non-null");
    }

    private MigrationConfigArgs() {
        this.configName = Input.empty();
        this.namespaceName = Input.empty();
        this.postMigrationName = Input.empty();
        this.resourceGroupName = Input.empty();
        this.targetNamespace = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> configName;
        private Input<String> namespaceName;
        private Input<String> postMigrationName;
        private Input<String> resourceGroupName;
        private Input<String> targetNamespace;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrationConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configName = defaults.configName;
    	      this.namespaceName = defaults.namespaceName;
    	      this.postMigrationName = defaults.postMigrationName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.targetNamespace = defaults.targetNamespace;
        }

        public Builder setConfigName(@Nullable Input<String> configName) {
            this.configName = configName;
            return this;
        }

        public Builder setConfigName(@Nullable String configName) {
            this.configName = Input.ofNullable(configName);
            return this;
        }

        public Builder setNamespaceName(Input<String> namespaceName) {
            this.namespaceName = Objects.requireNonNull(namespaceName);
            return this;
        }

        public Builder setNamespaceName(String namespaceName) {
            this.namespaceName = Input.of(Objects.requireNonNull(namespaceName));
            return this;
        }

        public Builder setPostMigrationName(Input<String> postMigrationName) {
            this.postMigrationName = Objects.requireNonNull(postMigrationName);
            return this;
        }

        public Builder setPostMigrationName(String postMigrationName) {
            this.postMigrationName = Input.of(Objects.requireNonNull(postMigrationName));
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTargetNamespace(Input<String> targetNamespace) {
            this.targetNamespace = Objects.requireNonNull(targetNamespace);
            return this;
        }

        public Builder setTargetNamespace(String targetNamespace) {
            this.targetNamespace = Input.of(Objects.requireNonNull(targetNamespace));
            return this;
        }

        public MigrationConfigArgs build() {
            return new MigrationConfigArgs(configName, namespaceName, postMigrationName, resourceGroupName, targetNamespace);
        }
    }
}
