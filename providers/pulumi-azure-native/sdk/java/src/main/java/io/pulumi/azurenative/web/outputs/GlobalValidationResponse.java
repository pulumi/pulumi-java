// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GlobalValidationResponse {
    /**
     * The paths for which unauthenticated flow would not be redirected to the login page.
     * 
     */
    private final @Nullable List<String> excludedPaths;
    /**
     * The default authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the unauthenticated client
     * action is set to "RedirectToLoginPage".
     * 
     */
    private final @Nullable String redirectToProvider;
    /**
     * <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
     * 
     */
    private final @Nullable Boolean requireAuthentication;
    /**
     * The action to take when an unauthenticated client attempts to access the app.
     * 
     */
    private final @Nullable String unauthenticatedClientAction;

    @OutputCustomType.Constructor({"excludedPaths","redirectToProvider","requireAuthentication","unauthenticatedClientAction"})
    private GlobalValidationResponse(
        @Nullable List<String> excludedPaths,
        @Nullable String redirectToProvider,
        @Nullable Boolean requireAuthentication,
        @Nullable String unauthenticatedClientAction) {
        this.excludedPaths = excludedPaths;
        this.redirectToProvider = redirectToProvider;
        this.requireAuthentication = requireAuthentication;
        this.unauthenticatedClientAction = unauthenticatedClientAction;
    }

    /**
     * The paths for which unauthenticated flow would not be redirected to the login page.
     * 
    */
    public List<String> getExcludedPaths() {
        return this.excludedPaths == null ? List.of() : this.excludedPaths;
    }
    /**
     * The default authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the unauthenticated client
     * action is set to "RedirectToLoginPage".
     * 
    */
    public Optional<String> getRedirectToProvider() {
        return Optional.ofNullable(this.redirectToProvider);
    }
    /**
     * <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
     * 
    */
    public Optional<Boolean> getRequireAuthentication() {
        return Optional.ofNullable(this.requireAuthentication);
    }
    /**
     * The action to take when an unauthenticated client attempts to access the app.
     * 
    */
    public Optional<String> getUnauthenticatedClientAction() {
        return Optional.ofNullable(this.unauthenticatedClientAction);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalValidationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> excludedPaths;
        private @Nullable String redirectToProvider;
        private @Nullable Boolean requireAuthentication;
        private @Nullable String unauthenticatedClientAction;

        public Builder() {
    	      // Empty
        }

        public Builder(GlobalValidationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludedPaths = defaults.excludedPaths;
    	      this.redirectToProvider = defaults.redirectToProvider;
    	      this.requireAuthentication = defaults.requireAuthentication;
    	      this.unauthenticatedClientAction = defaults.unauthenticatedClientAction;
        }

        public Builder setExcludedPaths(@Nullable List<String> excludedPaths) {
            this.excludedPaths = excludedPaths;
            return this;
        }

        public Builder setRedirectToProvider(@Nullable String redirectToProvider) {
            this.redirectToProvider = redirectToProvider;
            return this;
        }

        public Builder setRequireAuthentication(@Nullable Boolean requireAuthentication) {
            this.requireAuthentication = requireAuthentication;
            return this;
        }

        public Builder setUnauthenticatedClientAction(@Nullable String unauthenticatedClientAction) {
            this.unauthenticatedClientAction = unauthenticatedClientAction;
            return this;
        }
        public GlobalValidationResponse build() {
            return new GlobalValidationResponse(excludedPaths, redirectToProvider, requireAuthentication, unauthenticatedClientAction);
        }
    }
}
