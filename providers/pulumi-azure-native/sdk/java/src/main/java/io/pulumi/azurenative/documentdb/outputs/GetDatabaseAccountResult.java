// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb.outputs;

import io.pulumi.azurenative.documentdb.outputs.ApiPropertiesResponse;
import io.pulumi.azurenative.documentdb.outputs.CapabilityResponse;
import io.pulumi.azurenative.documentdb.outputs.ConsistencyPolicyResponse;
import io.pulumi.azurenative.documentdb.outputs.ContinuousModeBackupPolicyResponse;
import io.pulumi.azurenative.documentdb.outputs.CorsPolicyResponse;
import io.pulumi.azurenative.documentdb.outputs.FailoverPolicyResponse;
import io.pulumi.azurenative.documentdb.outputs.IpAddressOrRangeResponse;
import io.pulumi.azurenative.documentdb.outputs.LocationResponse;
import io.pulumi.azurenative.documentdb.outputs.ManagedServiceIdentityResponse;
import io.pulumi.azurenative.documentdb.outputs.PeriodicModeBackupPolicyResponse;
import io.pulumi.azurenative.documentdb.outputs.PrivateEndpointConnectionResponse;
import io.pulumi.azurenative.documentdb.outputs.VirtualNetworkRuleResponse;
import io.pulumi.core.Either;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetDatabaseAccountResult {
    private final @Nullable ApiPropertiesResponse apiProperties;
    private final @Nullable Either<ContinuousModeBackupPolicyResponse,PeriodicModeBackupPolicyResponse> backupPolicy;
    private final @Nullable List<CapabilityResponse> capabilities;
    private final @Nullable String connectorOffer;
    private final @Nullable ConsistencyPolicyResponse consistencyPolicy;
    private final @Nullable List<CorsPolicyResponse> cors;
    private final String databaseAccountOfferType;
    private final @Nullable String defaultIdentity;
    private final @Nullable Boolean disableKeyBasedMetadataWriteAccess;
    private final String documentEndpoint;
    private final @Nullable Boolean enableAnalyticalStorage;
    private final @Nullable Boolean enableAutomaticFailover;
    private final @Nullable Boolean enableCassandraConnector;
    private final @Nullable Boolean enableFreeTier;
    private final @Nullable Boolean enableMultipleWriteLocations;
    private final List<FailoverPolicyResponse> failoverPolicies;
    private final String id;
    private final @Nullable ManagedServiceIdentityResponse identity;
    private final @Nullable List<IpAddressOrRangeResponse> ipRules;
    private final @Nullable Boolean isVirtualNetworkFilterEnabled;
    private final @Nullable String keyVaultKeyUri;
    private final @Nullable String kind;
    private final @Nullable String location;
    private final List<LocationResponse> locations;
    private final String name;
    private final @Nullable String networkAclBypass;
    private final @Nullable List<String> networkAclBypassResourceIds;
    private final List<PrivateEndpointConnectionResponse> privateEndpointConnections;
    private final String provisioningState;
    private final @Nullable String publicNetworkAccess;
    private final List<LocationResponse> readLocations;
    private final @Nullable Map<String,String> tags;
    private final String type;
    private final @Nullable List<VirtualNetworkRuleResponse> virtualNetworkRules;
    private final List<LocationResponse> writeLocations;

    @OutputCustomType.Constructor({"apiProperties","backupPolicy","capabilities","connectorOffer","consistencyPolicy","cors","databaseAccountOfferType","defaultIdentity","disableKeyBasedMetadataWriteAccess","documentEndpoint","enableAnalyticalStorage","enableAutomaticFailover","enableCassandraConnector","enableFreeTier","enableMultipleWriteLocations","failoverPolicies","id","identity","ipRules","isVirtualNetworkFilterEnabled","keyVaultKeyUri","kind","location","locations","name","networkAclBypass","networkAclBypassResourceIds","privateEndpointConnections","provisioningState","publicNetworkAccess","readLocations","tags","type","virtualNetworkRules","writeLocations"})
    private GetDatabaseAccountResult(
        @Nullable ApiPropertiesResponse apiProperties,
        @Nullable Either<ContinuousModeBackupPolicyResponse,PeriodicModeBackupPolicyResponse> backupPolicy,
        @Nullable List<CapabilityResponse> capabilities,
        @Nullable String connectorOffer,
        @Nullable ConsistencyPolicyResponse consistencyPolicy,
        @Nullable List<CorsPolicyResponse> cors,
        String databaseAccountOfferType,
        @Nullable String defaultIdentity,
        @Nullable Boolean disableKeyBasedMetadataWriteAccess,
        String documentEndpoint,
        @Nullable Boolean enableAnalyticalStorage,
        @Nullable Boolean enableAutomaticFailover,
        @Nullable Boolean enableCassandraConnector,
        @Nullable Boolean enableFreeTier,
        @Nullable Boolean enableMultipleWriteLocations,
        List<FailoverPolicyResponse> failoverPolicies,
        String id,
        @Nullable ManagedServiceIdentityResponse identity,
        @Nullable List<IpAddressOrRangeResponse> ipRules,
        @Nullable Boolean isVirtualNetworkFilterEnabled,
        @Nullable String keyVaultKeyUri,
        @Nullable String kind,
        @Nullable String location,
        List<LocationResponse> locations,
        String name,
        @Nullable String networkAclBypass,
        @Nullable List<String> networkAclBypassResourceIds,
        List<PrivateEndpointConnectionResponse> privateEndpointConnections,
        String provisioningState,
        @Nullable String publicNetworkAccess,
        List<LocationResponse> readLocations,
        @Nullable Map<String,String> tags,
        String type,
        @Nullable List<VirtualNetworkRuleResponse> virtualNetworkRules,
        List<LocationResponse> writeLocations) {
        this.apiProperties = apiProperties;
        this.backupPolicy = backupPolicy;
        this.capabilities = capabilities;
        this.connectorOffer = connectorOffer;
        this.consistencyPolicy = consistencyPolicy;
        this.cors = cors;
        this.databaseAccountOfferType = Objects.requireNonNull(databaseAccountOfferType);
        this.defaultIdentity = defaultIdentity;
        this.disableKeyBasedMetadataWriteAccess = disableKeyBasedMetadataWriteAccess;
        this.documentEndpoint = Objects.requireNonNull(documentEndpoint);
        this.enableAnalyticalStorage = enableAnalyticalStorage;
        this.enableAutomaticFailover = enableAutomaticFailover;
        this.enableCassandraConnector = enableCassandraConnector;
        this.enableFreeTier = enableFreeTier;
        this.enableMultipleWriteLocations = enableMultipleWriteLocations;
        this.failoverPolicies = Objects.requireNonNull(failoverPolicies);
        this.id = Objects.requireNonNull(id);
        this.identity = identity;
        this.ipRules = ipRules;
        this.isVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
        this.keyVaultKeyUri = keyVaultKeyUri;
        this.kind = kind;
        this.location = location;
        this.locations = Objects.requireNonNull(locations);
        this.name = Objects.requireNonNull(name);
        this.networkAclBypass = networkAclBypass;
        this.networkAclBypassResourceIds = networkAclBypassResourceIds;
        this.privateEndpointConnections = Objects.requireNonNull(privateEndpointConnections);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.publicNetworkAccess = publicNetworkAccess;
        this.readLocations = Objects.requireNonNull(readLocations);
        this.tags = tags;
        this.type = Objects.requireNonNull(type);
        this.virtualNetworkRules = virtualNetworkRules;
        this.writeLocations = Objects.requireNonNull(writeLocations);
    }

    public Optional<ApiPropertiesResponse> getApiProperties() {
        return Optional.ofNullable(this.apiProperties);
    }
    public Optional<Either<ContinuousModeBackupPolicyResponse,PeriodicModeBackupPolicyResponse>> getBackupPolicy() {
        return Optional.ofNullable(this.backupPolicy);
    }
    public List<CapabilityResponse> getCapabilities() {
        return this.capabilities == null ? List.of() : this.capabilities;
    }
    public Optional<String> getConnectorOffer() {
        return Optional.ofNullable(this.connectorOffer);
    }
    public Optional<ConsistencyPolicyResponse> getConsistencyPolicy() {
        return Optional.ofNullable(this.consistencyPolicy);
    }
    public List<CorsPolicyResponse> getCors() {
        return this.cors == null ? List.of() : this.cors;
    }
    public String getDatabaseAccountOfferType() {
        return this.databaseAccountOfferType;
    }
    public Optional<String> getDefaultIdentity() {
        return Optional.ofNullable(this.defaultIdentity);
    }
    public Optional<Boolean> getDisableKeyBasedMetadataWriteAccess() {
        return Optional.ofNullable(this.disableKeyBasedMetadataWriteAccess);
    }
    public String getDocumentEndpoint() {
        return this.documentEndpoint;
    }
    public Optional<Boolean> getEnableAnalyticalStorage() {
        return Optional.ofNullable(this.enableAnalyticalStorage);
    }
    public Optional<Boolean> getEnableAutomaticFailover() {
        return Optional.ofNullable(this.enableAutomaticFailover);
    }
    public Optional<Boolean> getEnableCassandraConnector() {
        return Optional.ofNullable(this.enableCassandraConnector);
    }
    public Optional<Boolean> getEnableFreeTier() {
        return Optional.ofNullable(this.enableFreeTier);
    }
    public Optional<Boolean> getEnableMultipleWriteLocations() {
        return Optional.ofNullable(this.enableMultipleWriteLocations);
    }
    public List<FailoverPolicyResponse> getFailoverPolicies() {
        return this.failoverPolicies;
    }
    public String getId() {
        return this.id;
    }
    public Optional<ManagedServiceIdentityResponse> getIdentity() {
        return Optional.ofNullable(this.identity);
    }
    public List<IpAddressOrRangeResponse> getIpRules() {
        return this.ipRules == null ? List.of() : this.ipRules;
    }
    public Optional<Boolean> getIsVirtualNetworkFilterEnabled() {
        return Optional.ofNullable(this.isVirtualNetworkFilterEnabled);
    }
    public Optional<String> getKeyVaultKeyUri() {
        return Optional.ofNullable(this.keyVaultKeyUri);
    }
    public Optional<String> getKind() {
        return Optional.ofNullable(this.kind);
    }
    public Optional<String> getLocation() {
        return Optional.ofNullable(this.location);
    }
    public List<LocationResponse> getLocations() {
        return this.locations;
    }
    public String getName() {
        return this.name;
    }
    public Optional<String> getNetworkAclBypass() {
        return Optional.ofNullable(this.networkAclBypass);
    }
    public List<String> getNetworkAclBypassResourceIds() {
        return this.networkAclBypassResourceIds == null ? List.of() : this.networkAclBypassResourceIds;
    }
    public List<PrivateEndpointConnectionResponse> getPrivateEndpointConnections() {
        return this.privateEndpointConnections;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public Optional<String> getPublicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }
    public List<LocationResponse> getReadLocations() {
        return this.readLocations;
    }
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String getType() {
        return this.type;
    }
    public List<VirtualNetworkRuleResponse> getVirtualNetworkRules() {
        return this.virtualNetworkRules == null ? List.of() : this.virtualNetworkRules;
    }
    public List<LocationResponse> getWriteLocations() {
        return this.writeLocations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseAccountResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable ApiPropertiesResponse apiProperties;
        private @Nullable Either<ContinuousModeBackupPolicyResponse,PeriodicModeBackupPolicyResponse> backupPolicy;
        private @Nullable List<CapabilityResponse> capabilities;
        private @Nullable String connectorOffer;
        private @Nullable ConsistencyPolicyResponse consistencyPolicy;
        private @Nullable List<CorsPolicyResponse> cors;
        private String databaseAccountOfferType;
        private @Nullable String defaultIdentity;
        private @Nullable Boolean disableKeyBasedMetadataWriteAccess;
        private String documentEndpoint;
        private @Nullable Boolean enableAnalyticalStorage;
        private @Nullable Boolean enableAutomaticFailover;
        private @Nullable Boolean enableCassandraConnector;
        private @Nullable Boolean enableFreeTier;
        private @Nullable Boolean enableMultipleWriteLocations;
        private List<FailoverPolicyResponse> failoverPolicies;
        private String id;
        private @Nullable ManagedServiceIdentityResponse identity;
        private @Nullable List<IpAddressOrRangeResponse> ipRules;
        private @Nullable Boolean isVirtualNetworkFilterEnabled;
        private @Nullable String keyVaultKeyUri;
        private @Nullable String kind;
        private @Nullable String location;
        private List<LocationResponse> locations;
        private String name;
        private @Nullable String networkAclBypass;
        private @Nullable List<String> networkAclBypassResourceIds;
        private List<PrivateEndpointConnectionResponse> privateEndpointConnections;
        private String provisioningState;
        private @Nullable String publicNetworkAccess;
        private List<LocationResponse> readLocations;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable List<VirtualNetworkRuleResponse> virtualNetworkRules;
        private List<LocationResponse> writeLocations;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseAccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiProperties = defaults.apiProperties;
    	      this.backupPolicy = defaults.backupPolicy;
    	      this.capabilities = defaults.capabilities;
    	      this.connectorOffer = defaults.connectorOffer;
    	      this.consistencyPolicy = defaults.consistencyPolicy;
    	      this.cors = defaults.cors;
    	      this.databaseAccountOfferType = defaults.databaseAccountOfferType;
    	      this.defaultIdentity = defaults.defaultIdentity;
    	      this.disableKeyBasedMetadataWriteAccess = defaults.disableKeyBasedMetadataWriteAccess;
    	      this.documentEndpoint = defaults.documentEndpoint;
    	      this.enableAnalyticalStorage = defaults.enableAnalyticalStorage;
    	      this.enableAutomaticFailover = defaults.enableAutomaticFailover;
    	      this.enableCassandraConnector = defaults.enableCassandraConnector;
    	      this.enableFreeTier = defaults.enableFreeTier;
    	      this.enableMultipleWriteLocations = defaults.enableMultipleWriteLocations;
    	      this.failoverPolicies = defaults.failoverPolicies;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.ipRules = defaults.ipRules;
    	      this.isVirtualNetworkFilterEnabled = defaults.isVirtualNetworkFilterEnabled;
    	      this.keyVaultKeyUri = defaults.keyVaultKeyUri;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.locations = defaults.locations;
    	      this.name = defaults.name;
    	      this.networkAclBypass = defaults.networkAclBypass;
    	      this.networkAclBypassResourceIds = defaults.networkAclBypassResourceIds;
    	      this.privateEndpointConnections = defaults.privateEndpointConnections;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.readLocations = defaults.readLocations;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualNetworkRules = defaults.virtualNetworkRules;
    	      this.writeLocations = defaults.writeLocations;
        }

        public Builder setApiProperties(@Nullable ApiPropertiesResponse apiProperties) {
            this.apiProperties = apiProperties;
            return this;
        }

        public Builder setBackupPolicy(@Nullable Either<ContinuousModeBackupPolicyResponse,PeriodicModeBackupPolicyResponse> backupPolicy) {
            this.backupPolicy = backupPolicy;
            return this;
        }

        public Builder setCapabilities(@Nullable List<CapabilityResponse> capabilities) {
            this.capabilities = capabilities;
            return this;
        }

        public Builder setConnectorOffer(@Nullable String connectorOffer) {
            this.connectorOffer = connectorOffer;
            return this;
        }

        public Builder setConsistencyPolicy(@Nullable ConsistencyPolicyResponse consistencyPolicy) {
            this.consistencyPolicy = consistencyPolicy;
            return this;
        }

        public Builder setCors(@Nullable List<CorsPolicyResponse> cors) {
            this.cors = cors;
            return this;
        }

        public Builder setDatabaseAccountOfferType(String databaseAccountOfferType) {
            this.databaseAccountOfferType = Objects.requireNonNull(databaseAccountOfferType);
            return this;
        }

        public Builder setDefaultIdentity(@Nullable String defaultIdentity) {
            this.defaultIdentity = defaultIdentity;
            return this;
        }

        public Builder setDisableKeyBasedMetadataWriteAccess(@Nullable Boolean disableKeyBasedMetadataWriteAccess) {
            this.disableKeyBasedMetadataWriteAccess = disableKeyBasedMetadataWriteAccess;
            return this;
        }

        public Builder setDocumentEndpoint(String documentEndpoint) {
            this.documentEndpoint = Objects.requireNonNull(documentEndpoint);
            return this;
        }

        public Builder setEnableAnalyticalStorage(@Nullable Boolean enableAnalyticalStorage) {
            this.enableAnalyticalStorage = enableAnalyticalStorage;
            return this;
        }

        public Builder setEnableAutomaticFailover(@Nullable Boolean enableAutomaticFailover) {
            this.enableAutomaticFailover = enableAutomaticFailover;
            return this;
        }

        public Builder setEnableCassandraConnector(@Nullable Boolean enableCassandraConnector) {
            this.enableCassandraConnector = enableCassandraConnector;
            return this;
        }

        public Builder setEnableFreeTier(@Nullable Boolean enableFreeTier) {
            this.enableFreeTier = enableFreeTier;
            return this;
        }

        public Builder setEnableMultipleWriteLocations(@Nullable Boolean enableMultipleWriteLocations) {
            this.enableMultipleWriteLocations = enableMultipleWriteLocations;
            return this;
        }

        public Builder setFailoverPolicies(List<FailoverPolicyResponse> failoverPolicies) {
            this.failoverPolicies = Objects.requireNonNull(failoverPolicies);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIdentity(@Nullable ManagedServiceIdentityResponse identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIpRules(@Nullable List<IpAddressOrRangeResponse> ipRules) {
            this.ipRules = ipRules;
            return this;
        }

        public Builder setIsVirtualNetworkFilterEnabled(@Nullable Boolean isVirtualNetworkFilterEnabled) {
            this.isVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
            return this;
        }

        public Builder setKeyVaultKeyUri(@Nullable String keyVaultKeyUri) {
            this.keyVaultKeyUri = keyVaultKeyUri;
            return this;
        }

        public Builder setKind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = location;
            return this;
        }

        public Builder setLocations(List<LocationResponse> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetworkAclBypass(@Nullable String networkAclBypass) {
            this.networkAclBypass = networkAclBypass;
            return this;
        }

        public Builder setNetworkAclBypassResourceIds(@Nullable List<String> networkAclBypassResourceIds) {
            this.networkAclBypassResourceIds = networkAclBypassResourceIds;
            return this;
        }

        public Builder setPrivateEndpointConnections(List<PrivateEndpointConnectionResponse> privateEndpointConnections) {
            this.privateEndpointConnections = Objects.requireNonNull(privateEndpointConnections);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setPublicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder setReadLocations(List<LocationResponse> readLocations) {
            this.readLocations = Objects.requireNonNull(readLocations);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setVirtualNetworkRules(@Nullable List<VirtualNetworkRuleResponse> virtualNetworkRules) {
            this.virtualNetworkRules = virtualNetworkRules;
            return this;
        }

        public Builder setWriteLocations(List<LocationResponse> writeLocations) {
            this.writeLocations = Objects.requireNonNull(writeLocations);
            return this;
        }

        public GetDatabaseAccountResult build() {
            return new GetDatabaseAccountResult(apiProperties, backupPolicy, capabilities, connectorOffer, consistencyPolicy, cors, databaseAccountOfferType, defaultIdentity, disableKeyBasedMetadataWriteAccess, documentEndpoint, enableAnalyticalStorage, enableAutomaticFailover, enableCassandraConnector, enableFreeTier, enableMultipleWriteLocations, failoverPolicies, id, identity, ipRules, isVirtualNetworkFilterEnabled, keyVaultKeyUri, kind, location, locations, name, networkAclBypass, networkAclBypassResourceIds, privateEndpointConnections, provisioningState, publicNetworkAccess, readLocations, tags, type, virtualNetworkRules, writeLocations);
        }
    }
}
