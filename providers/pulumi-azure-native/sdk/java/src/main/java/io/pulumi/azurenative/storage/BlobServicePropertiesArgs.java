// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage;

import io.pulumi.azurenative.storage.inputs.ChangeFeedArgs;
import io.pulumi.azurenative.storage.inputs.CorsRulesArgs;
import io.pulumi.azurenative.storage.inputs.DeleteRetentionPolicyArgs;
import io.pulumi.azurenative.storage.inputs.LastAccessTimeTrackingPolicyArgs;
import io.pulumi.azurenative.storage.inputs.RestorePolicyPropertiesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BlobServicePropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final BlobServicePropertiesArgs Empty = new BlobServicePropertiesArgs();

    /**
     * The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * 
     */
    @InputImport(name="accountName", required=true)
      private final Input<String> accountName;

    public Input<String> getAccountName() {
        return this.accountName;
    }

    /**
     * Deprecated in favor of isVersioningEnabled property.
     * 
     */
    @InputImport(name="automaticSnapshotPolicyEnabled")
      private final @Nullable Input<Boolean> automaticSnapshotPolicyEnabled;

    public Input<Boolean> getAutomaticSnapshotPolicyEnabled() {
        return this.automaticSnapshotPolicyEnabled == null ? Input.empty() : this.automaticSnapshotPolicyEnabled;
    }

    /**
     * The name of the blob Service within the specified storage account. Blob Service Name must be 'default'
     * 
     */
    @InputImport(name="blobServicesName")
      private final @Nullable Input<String> blobServicesName;

    public Input<String> getBlobServicesName() {
        return this.blobServicesName == null ? Input.empty() : this.blobServicesName;
    }

    /**
     * The blob service properties for change feed events.
     * 
     */
    @InputImport(name="changeFeed")
      private final @Nullable Input<ChangeFeedArgs> changeFeed;

    public Input<ChangeFeedArgs> getChangeFeed() {
        return this.changeFeed == null ? Input.empty() : this.changeFeed;
    }

    /**
     * The blob service properties for container soft delete.
     * 
     */
    @InputImport(name="containerDeleteRetentionPolicy")
      private final @Nullable Input<DeleteRetentionPolicyArgs> containerDeleteRetentionPolicy;

    public Input<DeleteRetentionPolicyArgs> getContainerDeleteRetentionPolicy() {
        return this.containerDeleteRetentionPolicy == null ? Input.empty() : this.containerDeleteRetentionPolicy;
    }

    /**
     * Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service.
     * 
     */
    @InputImport(name="cors")
      private final @Nullable Input<CorsRulesArgs> cors;

    public Input<CorsRulesArgs> getCors() {
        return this.cors == null ? Input.empty() : this.cors;
    }

    /**
     * DefaultServiceVersion indicates the default version to use for requests to the Blob service if an incoming requestâ€™s version is not specified. Possible values include version 2008-10-27 and all more recent versions.
     * 
     */
    @InputImport(name="defaultServiceVersion")
      private final @Nullable Input<String> defaultServiceVersion;

    public Input<String> getDefaultServiceVersion() {
        return this.defaultServiceVersion == null ? Input.empty() : this.defaultServiceVersion;
    }

    /**
     * The blob service properties for blob soft delete.
     * 
     */
    @InputImport(name="deleteRetentionPolicy")
      private final @Nullable Input<DeleteRetentionPolicyArgs> deleteRetentionPolicy;

    public Input<DeleteRetentionPolicyArgs> getDeleteRetentionPolicy() {
        return this.deleteRetentionPolicy == null ? Input.empty() : this.deleteRetentionPolicy;
    }

    /**
     * Versioning is enabled if set to true.
     * 
     */
    @InputImport(name="isVersioningEnabled")
      private final @Nullable Input<Boolean> isVersioningEnabled;

    public Input<Boolean> getIsVersioningEnabled() {
        return this.isVersioningEnabled == null ? Input.empty() : this.isVersioningEnabled;
    }

    /**
     * The blob service property to configure last access time based tracking policy.
     * 
     */
    @InputImport(name="lastAccessTimeTrackingPolicy")
      private final @Nullable Input<LastAccessTimeTrackingPolicyArgs> lastAccessTimeTrackingPolicy;

    public Input<LastAccessTimeTrackingPolicyArgs> getLastAccessTimeTrackingPolicy() {
        return this.lastAccessTimeTrackingPolicy == null ? Input.empty() : this.lastAccessTimeTrackingPolicy;
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The blob service properties for blob restore policy.
     * 
     */
    @InputImport(name="restorePolicy")
      private final @Nullable Input<RestorePolicyPropertiesArgs> restorePolicy;

    public Input<RestorePolicyPropertiesArgs> getRestorePolicy() {
        return this.restorePolicy == null ? Input.empty() : this.restorePolicy;
    }

    public BlobServicePropertiesArgs(
        Input<String> accountName,
        @Nullable Input<Boolean> automaticSnapshotPolicyEnabled,
        @Nullable Input<String> blobServicesName,
        @Nullable Input<ChangeFeedArgs> changeFeed,
        @Nullable Input<DeleteRetentionPolicyArgs> containerDeleteRetentionPolicy,
        @Nullable Input<CorsRulesArgs> cors,
        @Nullable Input<String> defaultServiceVersion,
        @Nullable Input<DeleteRetentionPolicyArgs> deleteRetentionPolicy,
        @Nullable Input<Boolean> isVersioningEnabled,
        @Nullable Input<LastAccessTimeTrackingPolicyArgs> lastAccessTimeTrackingPolicy,
        Input<String> resourceGroupName,
        @Nullable Input<RestorePolicyPropertiesArgs> restorePolicy) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.automaticSnapshotPolicyEnabled = automaticSnapshotPolicyEnabled;
        this.blobServicesName = blobServicesName;
        this.changeFeed = changeFeed;
        this.containerDeleteRetentionPolicy = containerDeleteRetentionPolicy;
        this.cors = cors;
        this.defaultServiceVersion = defaultServiceVersion;
        this.deleteRetentionPolicy = deleteRetentionPolicy;
        this.isVersioningEnabled = isVersioningEnabled;
        this.lastAccessTimeTrackingPolicy = lastAccessTimeTrackingPolicy;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.restorePolicy = restorePolicy;
    }

    private BlobServicePropertiesArgs() {
        this.accountName = Input.empty();
        this.automaticSnapshotPolicyEnabled = Input.empty();
        this.blobServicesName = Input.empty();
        this.changeFeed = Input.empty();
        this.containerDeleteRetentionPolicy = Input.empty();
        this.cors = Input.empty();
        this.defaultServiceVersion = Input.empty();
        this.deleteRetentionPolicy = Input.empty();
        this.isVersioningEnabled = Input.empty();
        this.lastAccessTimeTrackingPolicy = Input.empty();
        this.resourceGroupName = Input.empty();
        this.restorePolicy = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlobServicePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> accountName;
        private @Nullable Input<Boolean> automaticSnapshotPolicyEnabled;
        private @Nullable Input<String> blobServicesName;
        private @Nullable Input<ChangeFeedArgs> changeFeed;
        private @Nullable Input<DeleteRetentionPolicyArgs> containerDeleteRetentionPolicy;
        private @Nullable Input<CorsRulesArgs> cors;
        private @Nullable Input<String> defaultServiceVersion;
        private @Nullable Input<DeleteRetentionPolicyArgs> deleteRetentionPolicy;
        private @Nullable Input<Boolean> isVersioningEnabled;
        private @Nullable Input<LastAccessTimeTrackingPolicyArgs> lastAccessTimeTrackingPolicy;
        private Input<String> resourceGroupName;
        private @Nullable Input<RestorePolicyPropertiesArgs> restorePolicy;

        public Builder() {
    	      // Empty
        }

        public Builder(BlobServicePropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.automaticSnapshotPolicyEnabled = defaults.automaticSnapshotPolicyEnabled;
    	      this.blobServicesName = defaults.blobServicesName;
    	      this.changeFeed = defaults.changeFeed;
    	      this.containerDeleteRetentionPolicy = defaults.containerDeleteRetentionPolicy;
    	      this.cors = defaults.cors;
    	      this.defaultServiceVersion = defaults.defaultServiceVersion;
    	      this.deleteRetentionPolicy = defaults.deleteRetentionPolicy;
    	      this.isVersioningEnabled = defaults.isVersioningEnabled;
    	      this.lastAccessTimeTrackingPolicy = defaults.lastAccessTimeTrackingPolicy;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.restorePolicy = defaults.restorePolicy;
        }

        public Builder accountName(Input<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }

        public Builder accountName(String accountName) {
            this.accountName = Input.of(Objects.requireNonNull(accountName));
            return this;
        }

        public Builder automaticSnapshotPolicyEnabled(@Nullable Input<Boolean> automaticSnapshotPolicyEnabled) {
            this.automaticSnapshotPolicyEnabled = automaticSnapshotPolicyEnabled;
            return this;
        }

        public Builder automaticSnapshotPolicyEnabled(@Nullable Boolean automaticSnapshotPolicyEnabled) {
            this.automaticSnapshotPolicyEnabled = Input.ofNullable(automaticSnapshotPolicyEnabled);
            return this;
        }

        public Builder blobServicesName(@Nullable Input<String> blobServicesName) {
            this.blobServicesName = blobServicesName;
            return this;
        }

        public Builder blobServicesName(@Nullable String blobServicesName) {
            this.blobServicesName = Input.ofNullable(blobServicesName);
            return this;
        }

        public Builder changeFeed(@Nullable Input<ChangeFeedArgs> changeFeed) {
            this.changeFeed = changeFeed;
            return this;
        }

        public Builder changeFeed(@Nullable ChangeFeedArgs changeFeed) {
            this.changeFeed = Input.ofNullable(changeFeed);
            return this;
        }

        public Builder containerDeleteRetentionPolicy(@Nullable Input<DeleteRetentionPolicyArgs> containerDeleteRetentionPolicy) {
            this.containerDeleteRetentionPolicy = containerDeleteRetentionPolicy;
            return this;
        }

        public Builder containerDeleteRetentionPolicy(@Nullable DeleteRetentionPolicyArgs containerDeleteRetentionPolicy) {
            this.containerDeleteRetentionPolicy = Input.ofNullable(containerDeleteRetentionPolicy);
            return this;
        }

        public Builder cors(@Nullable Input<CorsRulesArgs> cors) {
            this.cors = cors;
            return this;
        }

        public Builder cors(@Nullable CorsRulesArgs cors) {
            this.cors = Input.ofNullable(cors);
            return this;
        }

        public Builder defaultServiceVersion(@Nullable Input<String> defaultServiceVersion) {
            this.defaultServiceVersion = defaultServiceVersion;
            return this;
        }

        public Builder defaultServiceVersion(@Nullable String defaultServiceVersion) {
            this.defaultServiceVersion = Input.ofNullable(defaultServiceVersion);
            return this;
        }

        public Builder deleteRetentionPolicy(@Nullable Input<DeleteRetentionPolicyArgs> deleteRetentionPolicy) {
            this.deleteRetentionPolicy = deleteRetentionPolicy;
            return this;
        }

        public Builder deleteRetentionPolicy(@Nullable DeleteRetentionPolicyArgs deleteRetentionPolicy) {
            this.deleteRetentionPolicy = Input.ofNullable(deleteRetentionPolicy);
            return this;
        }

        public Builder isVersioningEnabled(@Nullable Input<Boolean> isVersioningEnabled) {
            this.isVersioningEnabled = isVersioningEnabled;
            return this;
        }

        public Builder isVersioningEnabled(@Nullable Boolean isVersioningEnabled) {
            this.isVersioningEnabled = Input.ofNullable(isVersioningEnabled);
            return this;
        }

        public Builder lastAccessTimeTrackingPolicy(@Nullable Input<LastAccessTimeTrackingPolicyArgs> lastAccessTimeTrackingPolicy) {
            this.lastAccessTimeTrackingPolicy = lastAccessTimeTrackingPolicy;
            return this;
        }

        public Builder lastAccessTimeTrackingPolicy(@Nullable LastAccessTimeTrackingPolicyArgs lastAccessTimeTrackingPolicy) {
            this.lastAccessTimeTrackingPolicy = Input.ofNullable(lastAccessTimeTrackingPolicy);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder restorePolicy(@Nullable Input<RestorePolicyPropertiesArgs> restorePolicy) {
            this.restorePolicy = restorePolicy;
            return this;
        }

        public Builder restorePolicy(@Nullable RestorePolicyPropertiesArgs restorePolicy) {
            this.restorePolicy = Input.ofNullable(restorePolicy);
            return this;
        }
        public BlobServicePropertiesArgs build() {
            return new BlobServicePropertiesArgs(accountName, automaticSnapshotPolicyEnabled, blobServicesName, changeFeed, containerDeleteRetentionPolicy, cors, defaultServiceVersion, deleteRetentionPolicy, isVersioningEnabled, lastAccessTimeTrackingPolicy, resourceGroupName, restorePolicy);
        }
    }
}
