// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogAnalyticExportThrottledRequestsArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetLogAnalyticExportThrottledRequestsArgs Empty = new GetLogAnalyticExportThrottledRequestsArgs();

    /**
     * SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to.
     * 
     */
    @Import(name="blobContainerSasUri", required=true)
      private final String blobContainerSasUri;

    public String blobContainerSasUri() {
        return this.blobContainerSasUri;
    }

    /**
     * From time of the query
     * 
     */
    @Import(name="fromTime", required=true)
      private final String fromTime;

    public String fromTime() {
        return this.fromTime;
    }

    /**
     * Group query result by Client Application ID.
     * 
     */
    @Import(name="groupByClientApplicationId")
      private final @Nullable Boolean groupByClientApplicationId;

    public Optional<Boolean> groupByClientApplicationId() {
        return this.groupByClientApplicationId == null ? Optional.empty() : Optional.ofNullable(this.groupByClientApplicationId);
    }

    /**
     * Group query result by Operation Name.
     * 
     */
    @Import(name="groupByOperationName")
      private final @Nullable Boolean groupByOperationName;

    public Optional<Boolean> groupByOperationName() {
        return this.groupByOperationName == null ? Optional.empty() : Optional.ofNullable(this.groupByOperationName);
    }

    /**
     * Group query result by Resource Name.
     * 
     */
    @Import(name="groupByResourceName")
      private final @Nullable Boolean groupByResourceName;

    public Optional<Boolean> groupByResourceName() {
        return this.groupByResourceName == null ? Optional.empty() : Optional.ofNullable(this.groupByResourceName);
    }

    /**
     * Group query result by Throttle Policy applied.
     * 
     */
    @Import(name="groupByThrottlePolicy")
      private final @Nullable Boolean groupByThrottlePolicy;

    public Optional<Boolean> groupByThrottlePolicy() {
        return this.groupByThrottlePolicy == null ? Optional.empty() : Optional.ofNullable(this.groupByThrottlePolicy);
    }

    /**
     * Group query result by User Agent.
     * 
     */
    @Import(name="groupByUserAgent")
      private final @Nullable Boolean groupByUserAgent;

    public Optional<Boolean> groupByUserAgent() {
        return this.groupByUserAgent == null ? Optional.empty() : Optional.ofNullable(this.groupByUserAgent);
    }

    /**
     * The location upon which virtual-machine-sizes is queried.
     * 
     */
    @Import(name="location", required=true)
      private final String location;

    public String location() {
        return this.location;
    }

    /**
     * To time of the query
     * 
     */
    @Import(name="toTime", required=true)
      private final String toTime;

    public String toTime() {
        return this.toTime;
    }

    public GetLogAnalyticExportThrottledRequestsArgs(
        String blobContainerSasUri,
        String fromTime,
        @Nullable Boolean groupByClientApplicationId,
        @Nullable Boolean groupByOperationName,
        @Nullable Boolean groupByResourceName,
        @Nullable Boolean groupByThrottlePolicy,
        @Nullable Boolean groupByUserAgent,
        String location,
        String toTime) {
        this.blobContainerSasUri = Objects.requireNonNull(blobContainerSasUri, "expected parameter 'blobContainerSasUri' to be non-null");
        this.fromTime = Objects.requireNonNull(fromTime, "expected parameter 'fromTime' to be non-null");
        this.groupByClientApplicationId = groupByClientApplicationId;
        this.groupByOperationName = groupByOperationName;
        this.groupByResourceName = groupByResourceName;
        this.groupByThrottlePolicy = groupByThrottlePolicy;
        this.groupByUserAgent = groupByUserAgent;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.toTime = Objects.requireNonNull(toTime, "expected parameter 'toTime' to be non-null");
    }

    private GetLogAnalyticExportThrottledRequestsArgs() {
        this.blobContainerSasUri = null;
        this.fromTime = null;
        this.groupByClientApplicationId = null;
        this.groupByOperationName = null;
        this.groupByResourceName = null;
        this.groupByThrottlePolicy = null;
        this.groupByUserAgent = null;
        this.location = null;
        this.toTime = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLogAnalyticExportThrottledRequestsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String blobContainerSasUri;
        private String fromTime;
        private @Nullable Boolean groupByClientApplicationId;
        private @Nullable Boolean groupByOperationName;
        private @Nullable Boolean groupByResourceName;
        private @Nullable Boolean groupByThrottlePolicy;
        private @Nullable Boolean groupByUserAgent;
        private String location;
        private String toTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetLogAnalyticExportThrottledRequestsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobContainerSasUri = defaults.blobContainerSasUri;
    	      this.fromTime = defaults.fromTime;
    	      this.groupByClientApplicationId = defaults.groupByClientApplicationId;
    	      this.groupByOperationName = defaults.groupByOperationName;
    	      this.groupByResourceName = defaults.groupByResourceName;
    	      this.groupByThrottlePolicy = defaults.groupByThrottlePolicy;
    	      this.groupByUserAgent = defaults.groupByUserAgent;
    	      this.location = defaults.location;
    	      this.toTime = defaults.toTime;
        }

        public Builder blobContainerSasUri(String blobContainerSasUri) {
            this.blobContainerSasUri = Objects.requireNonNull(blobContainerSasUri);
            return this;
        }
        public Builder fromTime(String fromTime) {
            this.fromTime = Objects.requireNonNull(fromTime);
            return this;
        }
        public Builder groupByClientApplicationId(@Nullable Boolean groupByClientApplicationId) {
            this.groupByClientApplicationId = groupByClientApplicationId;
            return this;
        }
        public Builder groupByOperationName(@Nullable Boolean groupByOperationName) {
            this.groupByOperationName = groupByOperationName;
            return this;
        }
        public Builder groupByResourceName(@Nullable Boolean groupByResourceName) {
            this.groupByResourceName = groupByResourceName;
            return this;
        }
        public Builder groupByThrottlePolicy(@Nullable Boolean groupByThrottlePolicy) {
            this.groupByThrottlePolicy = groupByThrottlePolicy;
            return this;
        }
        public Builder groupByUserAgent(@Nullable Boolean groupByUserAgent) {
            this.groupByUserAgent = groupByUserAgent;
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder toTime(String toTime) {
            this.toTime = Objects.requireNonNull(toTime);
            return this;
        }        public GetLogAnalyticExportThrottledRequestsArgs build() {
            return new GetLogAnalyticExportThrottledRequestsArgs(blobContainerSasUri, fromTime, groupByClientApplicationId, groupByOperationName, groupByResourceName, groupByThrottlePolicy, groupByUserAgent, location, toTime);
        }
    }
}
