// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement;

import io.pulumi.azurenative.costmanagement.inputs.SettingsPropertiesCacheArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SettingArgs extends io.pulumi.resources.ResourceArgs {

    public static final SettingArgs Empty = new SettingArgs();

    /**
     * Array of scopes with additional details used by Cost Management in the Azure portal.
     * 
     */
    @InputImport(name="cache")
        private final @Nullable Input<List<SettingsPropertiesCacheArgs>> cache;

    public Input<List<SettingsPropertiesCacheArgs>> getCache() {
        return this.cache == null ? Input.empty() : this.cache;
    }

    /**
     * Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
     * 
     */
    @InputImport(name="scope", required=true)
        private final Input<String> scope;

    public Input<String> getScope() {
        return this.scope;
    }

    /**
     * Name of the setting. Allowed values: myscope
     * 
     */
    @InputImport(name="settingName")
        private final @Nullable Input<String> settingName;

    public Input<String> getSettingName() {
        return this.settingName == null ? Input.empty() : this.settingName;
    }

    /**
     * Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
     * 
     */
    @InputImport(name="startOn")
        private final @Nullable Input<String> startOn;

    public Input<String> getStartOn() {
        return this.startOn == null ? Input.empty() : this.startOn;
    }

    public SettingArgs(
        @Nullable Input<List<SettingsPropertiesCacheArgs>> cache,
        Input<String> scope,
        @Nullable Input<String> settingName,
        @Nullable Input<String> startOn) {
        this.cache = cache;
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
        this.settingName = settingName;
        this.startOn = startOn;
    }

    private SettingArgs() {
        this.cache = Input.empty();
        this.scope = Input.empty();
        this.settingName = Input.empty();
        this.startOn = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<SettingsPropertiesCacheArgs>> cache;
        private Input<String> scope;
        private @Nullable Input<String> settingName;
        private @Nullable Input<String> startOn;

        public Builder() {
    	      // Empty
        }

        public Builder(SettingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cache = defaults.cache;
    	      this.scope = defaults.scope;
    	      this.settingName = defaults.settingName;
    	      this.startOn = defaults.startOn;
        }

        public Builder setCache(@Nullable Input<List<SettingsPropertiesCacheArgs>> cache) {
            this.cache = cache;
            return this;
        }

        public Builder setCache(@Nullable List<SettingsPropertiesCacheArgs> cache) {
            this.cache = Input.ofNullable(cache);
            return this;
        }

        public Builder setScope(Input<String> scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }

        public Builder setScope(String scope) {
            this.scope = Input.of(Objects.requireNonNull(scope));
            return this;
        }

        public Builder setSettingName(@Nullable Input<String> settingName) {
            this.settingName = settingName;
            return this;
        }

        public Builder setSettingName(@Nullable String settingName) {
            this.settingName = Input.ofNullable(settingName);
            return this;
        }

        public Builder setStartOn(@Nullable Input<String> startOn) {
            this.startOn = startOn;
            return this;
        }

        public Builder setStartOn(@Nullable String startOn) {
            this.startOn = Input.ofNullable(startOn);
            return this;
        }
        public SettingArgs build() {
            return new SettingArgs(cache, scope, settingName, startOn);
        }
    }
}
