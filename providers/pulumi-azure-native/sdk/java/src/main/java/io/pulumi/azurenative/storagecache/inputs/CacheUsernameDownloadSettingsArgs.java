// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storagecache.inputs;

import io.pulumi.azurenative.storagecache.enums.UsernameSource;
import io.pulumi.azurenative.storagecache.inputs.CacheUsernameDownloadSettingsCredentialsArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Settings for Extended Groups username and group download.
 * 
 */
public final class CacheUsernameDownloadSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final CacheUsernameDownloadSettingsArgs Empty = new CacheUsernameDownloadSettingsArgs();

    /**
     * Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
     * 
     */
    @Import(name="autoDownloadCertificate")
      private final @Nullable Output<Boolean> autoDownloadCertificate;

    public Output<Boolean> getAutoDownloadCertificate() {
        return this.autoDownloadCertificate == null ? Codegen.empty() : this.autoDownloadCertificate;
    }

    /**
     * The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
     * 
     */
    @Import(name="caCertificateURI")
      private final @Nullable Output<String> caCertificateURI;

    public Output<String> getCaCertificateURI() {
        return this.caCertificateURI == null ? Codegen.empty() : this.caCertificateURI;
    }

    /**
     * When present, these are the credentials for the secure LDAP connection.
     * 
     */
    @Import(name="credentials")
      private final @Nullable Output<CacheUsernameDownloadSettingsCredentialsArgs> credentials;

    public Output<CacheUsernameDownloadSettingsCredentialsArgs> getCredentials() {
        return this.credentials == null ? Codegen.empty() : this.credentials;
    }

    /**
     * Whether or not the LDAP connection should be encrypted.
     * 
     */
    @Import(name="encryptLdapConnection")
      private final @Nullable Output<Boolean> encryptLdapConnection;

    public Output<Boolean> getEncryptLdapConnection() {
        return this.encryptLdapConnection == null ? Codegen.empty() : this.encryptLdapConnection;
    }

    /**
     * Whether or not Extended Groups is enabled.
     * 
     */
    @Import(name="extendedGroups")
      private final @Nullable Output<Boolean> extendedGroups;

    public Output<Boolean> getExtendedGroups() {
        return this.extendedGroups == null ? Codegen.empty() : this.extendedGroups;
    }

    /**
     * The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
     * 
     */
    @Import(name="groupFileURI")
      private final @Nullable Output<String> groupFileURI;

    public Output<String> getGroupFileURI() {
        return this.groupFileURI == null ? Codegen.empty() : this.groupFileURI;
    }

    /**
     * The base distinguished name for the LDAP domain.
     * 
     */
    @Import(name="ldapBaseDN")
      private final @Nullable Output<String> ldapBaseDN;

    public Output<String> getLdapBaseDN() {
        return this.ldapBaseDN == null ? Codegen.empty() : this.ldapBaseDN;
    }

    /**
     * The fully qualified domain name or IP address of the LDAP server to use.
     * 
     */
    @Import(name="ldapServer")
      private final @Nullable Output<String> ldapServer;

    public Output<String> getLdapServer() {
        return this.ldapServer == null ? Codegen.empty() : this.ldapServer;
    }

    /**
     * Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
     * 
     */
    @Import(name="requireValidCertificate")
      private final @Nullable Output<Boolean> requireValidCertificate;

    public Output<Boolean> getRequireValidCertificate() {
        return this.requireValidCertificate == null ? Codegen.empty() : this.requireValidCertificate;
    }

    /**
     * The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
     * 
     */
    @Import(name="userFileURI")
      private final @Nullable Output<String> userFileURI;

    public Output<String> getUserFileURI() {
        return this.userFileURI == null ? Codegen.empty() : this.userFileURI;
    }

    /**
     * This setting determines how the cache gets username and group names for clients.
     * 
     */
    @Import(name="usernameSource")
      private final @Nullable Output<Either<String,UsernameSource>> usernameSource;

    public Output<Either<String,UsernameSource>> getUsernameSource() {
        return this.usernameSource == null ? Codegen.empty() : this.usernameSource;
    }

    public CacheUsernameDownloadSettingsArgs(
        @Nullable Output<Boolean> autoDownloadCertificate,
        @Nullable Output<String> caCertificateURI,
        @Nullable Output<CacheUsernameDownloadSettingsCredentialsArgs> credentials,
        @Nullable Output<Boolean> encryptLdapConnection,
        @Nullable Output<Boolean> extendedGroups,
        @Nullable Output<String> groupFileURI,
        @Nullable Output<String> ldapBaseDN,
        @Nullable Output<String> ldapServer,
        @Nullable Output<Boolean> requireValidCertificate,
        @Nullable Output<String> userFileURI,
        @Nullable Output<Either<String,UsernameSource>> usernameSource) {
        this.autoDownloadCertificate = autoDownloadCertificate;
        this.caCertificateURI = caCertificateURI;
        this.credentials = credentials;
        this.encryptLdapConnection = encryptLdapConnection;
        this.extendedGroups = extendedGroups;
        this.groupFileURI = groupFileURI;
        this.ldapBaseDN = ldapBaseDN;
        this.ldapServer = ldapServer;
        this.requireValidCertificate = requireValidCertificate;
        this.userFileURI = userFileURI;
        this.usernameSource = usernameSource == null ? Output.ofLeft("None") : usernameSource;
    }

    private CacheUsernameDownloadSettingsArgs() {
        this.autoDownloadCertificate = Codegen.empty();
        this.caCertificateURI = Codegen.empty();
        this.credentials = Codegen.empty();
        this.encryptLdapConnection = Codegen.empty();
        this.extendedGroups = Codegen.empty();
        this.groupFileURI = Codegen.empty();
        this.ldapBaseDN = Codegen.empty();
        this.ldapServer = Codegen.empty();
        this.requireValidCertificate = Codegen.empty();
        this.userFileURI = Codegen.empty();
        this.usernameSource = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheUsernameDownloadSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> autoDownloadCertificate;
        private @Nullable Output<String> caCertificateURI;
        private @Nullable Output<CacheUsernameDownloadSettingsCredentialsArgs> credentials;
        private @Nullable Output<Boolean> encryptLdapConnection;
        private @Nullable Output<Boolean> extendedGroups;
        private @Nullable Output<String> groupFileURI;
        private @Nullable Output<String> ldapBaseDN;
        private @Nullable Output<String> ldapServer;
        private @Nullable Output<Boolean> requireValidCertificate;
        private @Nullable Output<String> userFileURI;
        private @Nullable Output<Either<String,UsernameSource>> usernameSource;

        public Builder() {
    	      // Empty
        }

        public Builder(CacheUsernameDownloadSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoDownloadCertificate = defaults.autoDownloadCertificate;
    	      this.caCertificateURI = defaults.caCertificateURI;
    	      this.credentials = defaults.credentials;
    	      this.encryptLdapConnection = defaults.encryptLdapConnection;
    	      this.extendedGroups = defaults.extendedGroups;
    	      this.groupFileURI = defaults.groupFileURI;
    	      this.ldapBaseDN = defaults.ldapBaseDN;
    	      this.ldapServer = defaults.ldapServer;
    	      this.requireValidCertificate = defaults.requireValidCertificate;
    	      this.userFileURI = defaults.userFileURI;
    	      this.usernameSource = defaults.usernameSource;
        }

        public Builder autoDownloadCertificate(@Nullable Output<Boolean> autoDownloadCertificate) {
            this.autoDownloadCertificate = autoDownloadCertificate;
            return this;
        }
        public Builder autoDownloadCertificate(@Nullable Boolean autoDownloadCertificate) {
            this.autoDownloadCertificate = Codegen.ofNullable(autoDownloadCertificate);
            return this;
        }
        public Builder caCertificateURI(@Nullable Output<String> caCertificateURI) {
            this.caCertificateURI = caCertificateURI;
            return this;
        }
        public Builder caCertificateURI(@Nullable String caCertificateURI) {
            this.caCertificateURI = Codegen.ofNullable(caCertificateURI);
            return this;
        }
        public Builder credentials(@Nullable Output<CacheUsernameDownloadSettingsCredentialsArgs> credentials) {
            this.credentials = credentials;
            return this;
        }
        public Builder credentials(@Nullable CacheUsernameDownloadSettingsCredentialsArgs credentials) {
            this.credentials = Codegen.ofNullable(credentials);
            return this;
        }
        public Builder encryptLdapConnection(@Nullable Output<Boolean> encryptLdapConnection) {
            this.encryptLdapConnection = encryptLdapConnection;
            return this;
        }
        public Builder encryptLdapConnection(@Nullable Boolean encryptLdapConnection) {
            this.encryptLdapConnection = Codegen.ofNullable(encryptLdapConnection);
            return this;
        }
        public Builder extendedGroups(@Nullable Output<Boolean> extendedGroups) {
            this.extendedGroups = extendedGroups;
            return this;
        }
        public Builder extendedGroups(@Nullable Boolean extendedGroups) {
            this.extendedGroups = Codegen.ofNullable(extendedGroups);
            return this;
        }
        public Builder groupFileURI(@Nullable Output<String> groupFileURI) {
            this.groupFileURI = groupFileURI;
            return this;
        }
        public Builder groupFileURI(@Nullable String groupFileURI) {
            this.groupFileURI = Codegen.ofNullable(groupFileURI);
            return this;
        }
        public Builder ldapBaseDN(@Nullable Output<String> ldapBaseDN) {
            this.ldapBaseDN = ldapBaseDN;
            return this;
        }
        public Builder ldapBaseDN(@Nullable String ldapBaseDN) {
            this.ldapBaseDN = Codegen.ofNullable(ldapBaseDN);
            return this;
        }
        public Builder ldapServer(@Nullable Output<String> ldapServer) {
            this.ldapServer = ldapServer;
            return this;
        }
        public Builder ldapServer(@Nullable String ldapServer) {
            this.ldapServer = Codegen.ofNullable(ldapServer);
            return this;
        }
        public Builder requireValidCertificate(@Nullable Output<Boolean> requireValidCertificate) {
            this.requireValidCertificate = requireValidCertificate;
            return this;
        }
        public Builder requireValidCertificate(@Nullable Boolean requireValidCertificate) {
            this.requireValidCertificate = Codegen.ofNullable(requireValidCertificate);
            return this;
        }
        public Builder userFileURI(@Nullable Output<String> userFileURI) {
            this.userFileURI = userFileURI;
            return this;
        }
        public Builder userFileURI(@Nullable String userFileURI) {
            this.userFileURI = Codegen.ofNullable(userFileURI);
            return this;
        }
        public Builder usernameSource(@Nullable Output<Either<String,UsernameSource>> usernameSource) {
            this.usernameSource = usernameSource;
            return this;
        }
        public Builder usernameSource(@Nullable Either<String,UsernameSource> usernameSource) {
            this.usernameSource = Codegen.ofNullable(usernameSource);
            return this;
        }        public CacheUsernameDownloadSettingsArgs build() {
            return new CacheUsernameDownloadSettingsArgs(autoDownloadCertificate, caCertificateURI, credentials, encryptLdapConnection, extendedGroups, groupFileURI, ldapBaseDN, ldapServer, requireValidCertificate, userFileURI, usernameSource);
        }
    }
}
