// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.SubResourceResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProbeResponse extends io.pulumi.resources.InvokeArgs {

    public static final ProbeResponse Empty = new ProbeResponse();

    @InputImport(name="etag", required=true)
    private final String etag;

    public String getEtag() {
        return this.etag;
    }

    @InputImport(name="id")
    private final @Nullable String id;

    public Optional<String> getId() {
        return this.id == null ? Optional.empty() : Optional.ofNullable(this.id);
    }

    @InputImport(name="intervalInSeconds")
    private final @Nullable Integer intervalInSeconds;

    public Optional<Integer> getIntervalInSeconds() {
        return this.intervalInSeconds == null ? Optional.empty() : Optional.ofNullable(this.intervalInSeconds);
    }

    @InputImport(name="loadBalancingRules", required=true)
    private final List<SubResourceResponse> loadBalancingRules;

    public List<SubResourceResponse> getLoadBalancingRules() {
        return this.loadBalancingRules;
    }

    @InputImport(name="name")
    private final @Nullable String name;

    public Optional<String> getName() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    @InputImport(name="numberOfProbes")
    private final @Nullable Integer numberOfProbes;

    public Optional<Integer> getNumberOfProbes() {
        return this.numberOfProbes == null ? Optional.empty() : Optional.ofNullable(this.numberOfProbes);
    }

    @InputImport(name="port", required=true)
    private final Integer port;

    public Integer getPort() {
        return this.port;
    }

    @InputImport(name="protocol", required=true)
    private final String protocol;

    public String getProtocol() {
        return this.protocol;
    }

    @InputImport(name="provisioningState", required=true)
    private final String provisioningState;

    public String getProvisioningState() {
        return this.provisioningState;
    }

    @InputImport(name="requestPath")
    private final @Nullable String requestPath;

    public Optional<String> getRequestPath() {
        return this.requestPath == null ? Optional.empty() : Optional.ofNullable(this.requestPath);
    }

    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    public ProbeResponse(
        String etag,
        @Nullable String id,
        @Nullable Integer intervalInSeconds,
        List<SubResourceResponse> loadBalancingRules,
        @Nullable String name,
        @Nullable Integer numberOfProbes,
        Integer port,
        String protocol,
        String provisioningState,
        @Nullable String requestPath,
        String type) {
        this.etag = Objects.requireNonNull(etag, "expected parameter 'etag' to be non-null");
        this.id = id;
        this.intervalInSeconds = intervalInSeconds;
        this.loadBalancingRules = Objects.requireNonNull(loadBalancingRules, "expected parameter 'loadBalancingRules' to be non-null");
        this.name = name;
        this.numberOfProbes = numberOfProbes;
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.requestPath = requestPath;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ProbeResponse() {
        this.etag = null;
        this.id = null;
        this.intervalInSeconds = null;
        this.loadBalancingRules = List.of();
        this.name = null;
        this.numberOfProbes = null;
        this.port = null;
        this.protocol = null;
        this.provisioningState = null;
        this.requestPath = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProbeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String etag;
        private @Nullable String id;
        private @Nullable Integer intervalInSeconds;
        private List<SubResourceResponse> loadBalancingRules;
        private @Nullable String name;
        private @Nullable Integer numberOfProbes;
        private Integer port;
        private String protocol;
        private String provisioningState;
        private @Nullable String requestPath;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(ProbeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.loadBalancingRules = defaults.loadBalancingRules;
    	      this.name = defaults.name;
    	      this.numberOfProbes = defaults.numberOfProbes;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.provisioningState = defaults.provisioningState;
    	      this.requestPath = defaults.requestPath;
    	      this.type = defaults.type;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setIntervalInSeconds(@Nullable Integer intervalInSeconds) {
            this.intervalInSeconds = intervalInSeconds;
            return this;
        }

        public Builder setLoadBalancingRules(List<SubResourceResponse> loadBalancingRules) {
            this.loadBalancingRules = Objects.requireNonNull(loadBalancingRules);
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setNumberOfProbes(@Nullable Integer numberOfProbes) {
            this.numberOfProbes = numberOfProbes;
            return this;
        }

        public Builder setPort(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder setProtocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setRequestPath(@Nullable String requestPath) {
            this.requestPath = requestPath;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public ProbeResponse build() {
            return new ProbeResponse(etag, id, intervalInSeconds, loadBalancingRules, name, numberOfProbes, port, protocol, provisioningState, requestPath, type);
        }
    }
}
