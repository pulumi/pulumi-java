// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.sql.enums.InstancePoolLicenseType;
import io.pulumi.azurenative.sql.inputs.SkuArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstancePoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstancePoolArgs Empty = new InstancePoolArgs();

    /**
     * The name of the instance pool to be created or updated.
     * 
     */
    @Import(name="instancePoolName")
      private final @Nullable Output<String> instancePoolName;

    public Output<String> getInstancePoolName() {
        return this.instancePoolName == null ? Output.empty() : this.instancePoolName;
    }

    /**
     * The license type. Possible values are 'LicenseIncluded' (price for SQL license is included) and 'BasePrice' (without SQL license price).
     * 
     */
    @Import(name="licenseType", required=true)
      private final Output<Either<String,InstancePoolLicenseType>> licenseType;

    public Output<Either<String,InstancePoolLicenseType>> getLicenseType() {
        return this.licenseType;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name and tier of the SKU.
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<SkuArgs> sku;

    public Output<SkuArgs> getSku() {
        return this.sku == null ? Output.empty() : this.sku;
    }

    /**
     * Resource ID of the subnet to place this instance pool in.
     * 
     */
    @Import(name="subnetId", required=true)
      private final Output<String> subnetId;

    public Output<String> getSubnetId() {
        return this.subnetId;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Count of vCores belonging to this instance pool.
     * 
     */
    @Import(name="vCores", required=true)
      private final Output<Integer> vCores;

    public Output<Integer> getVCores() {
        return this.vCores;
    }

    public InstancePoolArgs(
        @Nullable Output<String> instancePoolName,
        Output<Either<String,InstancePoolLicenseType>> licenseType,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<SkuArgs> sku,
        Output<String> subnetId,
        @Nullable Output<Map<String,String>> tags,
        Output<Integer> vCores) {
        this.instancePoolName = instancePoolName;
        this.licenseType = Objects.requireNonNull(licenseType, "expected parameter 'licenseType' to be non-null");
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
        this.tags = tags;
        this.vCores = Objects.requireNonNull(vCores, "expected parameter 'vCores' to be non-null");
    }

    private InstancePoolArgs() {
        this.instancePoolName = Output.empty();
        this.licenseType = Output.empty();
        this.location = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sku = Output.empty();
        this.subnetId = Output.empty();
        this.tags = Output.empty();
        this.vCores = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstancePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> instancePoolName;
        private Output<Either<String,InstancePoolLicenseType>> licenseType;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<SkuArgs> sku;
        private Output<String> subnetId;
        private @Nullable Output<Map<String,String>> tags;
        private Output<Integer> vCores;

        public Builder() {
    	      // Empty
        }

        public Builder(InstancePoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instancePoolName = defaults.instancePoolName;
    	      this.licenseType = defaults.licenseType;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.vCores = defaults.vCores;
        }

        public Builder instancePoolName(@Nullable Output<String> instancePoolName) {
            this.instancePoolName = instancePoolName;
            return this;
        }

        public Builder instancePoolName(@Nullable String instancePoolName) {
            this.instancePoolName = Output.ofNullable(instancePoolName);
            return this;
        }

        public Builder licenseType(Output<Either<String,InstancePoolLicenseType>> licenseType) {
            this.licenseType = Objects.requireNonNull(licenseType);
            return this;
        }

        public Builder licenseType(Either<String,InstancePoolLicenseType> licenseType) {
            this.licenseType = Output.of(Objects.requireNonNull(licenseType));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder sku(@Nullable Output<SkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder sku(@Nullable SkuArgs sku) {
            this.sku = Output.ofNullable(sku);
            return this;
        }

        public Builder subnetId(Output<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }

        public Builder subnetId(String subnetId) {
            this.subnetId = Output.of(Objects.requireNonNull(subnetId));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder vCores(Output<Integer> vCores) {
            this.vCores = Objects.requireNonNull(vCores);
            return this;
        }

        public Builder vCores(Integer vCores) {
            this.vCores = Output.of(Objects.requireNonNull(vCores));
            return this;
        }
        public InstancePoolArgs build() {
            return new InstancePoolArgs(instancePoolName, licenseType, location, resourceGroupName, sku, subnetId, tags, vCores);
        }
    }
}
