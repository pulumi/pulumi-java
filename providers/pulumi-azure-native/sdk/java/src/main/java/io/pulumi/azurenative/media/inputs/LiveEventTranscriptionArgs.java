// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.inputs.LiveEventInputTrackSelectionArgs;
import io.pulumi.azurenative.media.inputs.LiveEventOutputTranscriptionTrackArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
 * 
 */
public final class LiveEventTranscriptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final LiveEventTranscriptionArgs Empty = new LiveEventTranscriptionArgs();

    /**
     * Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
     * 
     */
    @Import(name="inputTrackSelection")
      private final @Nullable Output<List<LiveEventInputTrackSelectionArgs>> inputTrackSelection;

    public Output<List<LiveEventInputTrackSelectionArgs>> inputTrackSelection() {
        return this.inputTrackSelection == null ? Codegen.empty() : this.inputTrackSelection;
    }

    /**
     * Specifies the language (locale) to be used for speech-to-text transcription â€“ it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
     * 
     */
    @Import(name="language")
      private final @Nullable Output<String> language;

    public Output<String> language() {
        return this.language == null ? Codegen.empty() : this.language;
    }

    /**
     * Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
     * 
     */
    @Import(name="outputTranscriptionTrack")
      private final @Nullable Output<LiveEventOutputTranscriptionTrackArgs> outputTranscriptionTrack;

    public Output<LiveEventOutputTranscriptionTrackArgs> outputTranscriptionTrack() {
        return this.outputTranscriptionTrack == null ? Codegen.empty() : this.outputTranscriptionTrack;
    }

    public LiveEventTranscriptionArgs(
        @Nullable Output<List<LiveEventInputTrackSelectionArgs>> inputTrackSelection,
        @Nullable Output<String> language,
        @Nullable Output<LiveEventOutputTranscriptionTrackArgs> outputTranscriptionTrack) {
        this.inputTrackSelection = inputTrackSelection;
        this.language = language;
        this.outputTranscriptionTrack = outputTranscriptionTrack;
    }

    private LiveEventTranscriptionArgs() {
        this.inputTrackSelection = Codegen.empty();
        this.language = Codegen.empty();
        this.outputTranscriptionTrack = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveEventTranscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<LiveEventInputTrackSelectionArgs>> inputTrackSelection;
        private @Nullable Output<String> language;
        private @Nullable Output<LiveEventOutputTranscriptionTrackArgs> outputTranscriptionTrack;

        public Builder() {
    	      // Empty
        }

        public Builder(LiveEventTranscriptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inputTrackSelection = defaults.inputTrackSelection;
    	      this.language = defaults.language;
    	      this.outputTranscriptionTrack = defaults.outputTranscriptionTrack;
        }

        public Builder inputTrackSelection(@Nullable Output<List<LiveEventInputTrackSelectionArgs>> inputTrackSelection) {
            this.inputTrackSelection = inputTrackSelection;
            return this;
        }
        public Builder inputTrackSelection(@Nullable List<LiveEventInputTrackSelectionArgs> inputTrackSelection) {
            this.inputTrackSelection = Codegen.ofNullable(inputTrackSelection);
            return this;
        }
        public Builder inputTrackSelection(LiveEventInputTrackSelectionArgs... inputTrackSelection) {
            return inputTrackSelection(List.of(inputTrackSelection));
        }
        public Builder language(@Nullable Output<String> language) {
            this.language = language;
            return this;
        }
        public Builder language(@Nullable String language) {
            this.language = Codegen.ofNullable(language);
            return this;
        }
        public Builder outputTranscriptionTrack(@Nullable Output<LiveEventOutputTranscriptionTrackArgs> outputTranscriptionTrack) {
            this.outputTranscriptionTrack = outputTranscriptionTrack;
            return this;
        }
        public Builder outputTranscriptionTrack(@Nullable LiveEventOutputTranscriptionTrackArgs outputTranscriptionTrack) {
            this.outputTranscriptionTrack = Codegen.ofNullable(outputTranscriptionTrack);
            return this;
        }        public LiveEventTranscriptionArgs build() {
            return new LiveEventTranscriptionArgs(inputTrackSelection, language, outputTranscriptionTrack);
        }
    }
}
