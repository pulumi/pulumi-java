// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.inputs.LiveEventInputTrackSelectionArgs;
import io.pulumi.azurenative.media.inputs.LiveEventOutputTranscriptionTrackArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LiveEventTranscriptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final LiveEventTranscriptionArgs Empty = new LiveEventTranscriptionArgs();

    @InputImport(name="inputTrackSelection")
    private final @Nullable Input<List<LiveEventInputTrackSelectionArgs>> inputTrackSelection;

    public Input<List<LiveEventInputTrackSelectionArgs>> getInputTrackSelection() {
        return this.inputTrackSelection == null ? Input.empty() : this.inputTrackSelection;
    }

    @InputImport(name="language")
    private final @Nullable Input<String> language;

    public Input<String> getLanguage() {
        return this.language == null ? Input.empty() : this.language;
    }

    @InputImport(name="outputTranscriptionTrack")
    private final @Nullable Input<LiveEventOutputTranscriptionTrackArgs> outputTranscriptionTrack;

    public Input<LiveEventOutputTranscriptionTrackArgs> getOutputTranscriptionTrack() {
        return this.outputTranscriptionTrack == null ? Input.empty() : this.outputTranscriptionTrack;
    }

    public LiveEventTranscriptionArgs(
        @Nullable Input<List<LiveEventInputTrackSelectionArgs>> inputTrackSelection,
        @Nullable Input<String> language,
        @Nullable Input<LiveEventOutputTranscriptionTrackArgs> outputTranscriptionTrack) {
        this.inputTrackSelection = inputTrackSelection;
        this.language = language;
        this.outputTranscriptionTrack = outputTranscriptionTrack;
    }

    private LiveEventTranscriptionArgs() {
        this.inputTrackSelection = Input.empty();
        this.language = Input.empty();
        this.outputTranscriptionTrack = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveEventTranscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<LiveEventInputTrackSelectionArgs>> inputTrackSelection;
        private @Nullable Input<String> language;
        private @Nullable Input<LiveEventOutputTranscriptionTrackArgs> outputTranscriptionTrack;

        public Builder() {
    	      // Empty
        }

        public Builder(LiveEventTranscriptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inputTrackSelection = defaults.inputTrackSelection;
    	      this.language = defaults.language;
    	      this.outputTranscriptionTrack = defaults.outputTranscriptionTrack;
        }

        public Builder setInputTrackSelection(@Nullable Input<List<LiveEventInputTrackSelectionArgs>> inputTrackSelection) {
            this.inputTrackSelection = inputTrackSelection;
            return this;
        }

        public Builder setInputTrackSelection(@Nullable List<LiveEventInputTrackSelectionArgs> inputTrackSelection) {
            this.inputTrackSelection = Input.ofNullable(inputTrackSelection);
            return this;
        }

        public Builder setLanguage(@Nullable Input<String> language) {
            this.language = language;
            return this;
        }

        public Builder setLanguage(@Nullable String language) {
            this.language = Input.ofNullable(language);
            return this;
        }

        public Builder setOutputTranscriptionTrack(@Nullable Input<LiveEventOutputTranscriptionTrackArgs> outputTranscriptionTrack) {
            this.outputTranscriptionTrack = outputTranscriptionTrack;
            return this;
        }

        public Builder setOutputTranscriptionTrack(@Nullable LiveEventOutputTranscriptionTrackArgs outputTranscriptionTrack) {
            this.outputTranscriptionTrack = Input.ofNullable(outputTranscriptionTrack);
            return this;
        }

        public LiveEventTranscriptionArgs build() {
            return new LiveEventTranscriptionArgs(inputTrackSelection, language, outputTranscriptionTrack);
        }
    }
}
