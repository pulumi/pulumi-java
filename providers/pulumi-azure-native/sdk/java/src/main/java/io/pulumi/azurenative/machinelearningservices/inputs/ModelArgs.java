// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.azurenative.machinelearningservices.inputs.ContainerResourceRequirementsArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.DatasetReferenceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * An Azure Machine Learning Model.
 * 
 */
public final class ModelArgs extends io.pulumi.resources.ResourceArgs {

    public static final ModelArgs Empty = new ModelArgs();

    /**
     * The Model creation time (UTC).
     * 
     */
    @InputImport(name="createdTime")
      private final @Nullable Input<String> createdTime;

    public Input<String> getCreatedTime() {
        return this.createdTime == null ? Input.empty() : this.createdTime;
    }

    /**
     * The list of datasets associated with the model.
     * 
     */
    @InputImport(name="datasets")
      private final @Nullable Input<List<DatasetReferenceArgs>> datasets;

    public Input<List<DatasetReferenceArgs>> getDatasets() {
        return this.datasets == null ? Input.empty() : this.datasets;
    }

    /**
     * Models derived from this model
     * 
     */
    @InputImport(name="derivedModelIds")
      private final @Nullable Input<List<String>> derivedModelIds;

    public Input<List<String>> getDerivedModelIds() {
        return this.derivedModelIds == null ? Input.empty() : this.derivedModelIds;
    }

    /**
     * The Model description text.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The name of the experiment where this model was created.
     * 
     */
    @InputImport(name="experimentName")
      private final @Nullable Input<String> experimentName;

    public Input<String> getExperimentName() {
        return this.experimentName == null ? Input.empty() : this.experimentName;
    }

    /**
     * The Model framework.
     * 
     */
    @InputImport(name="framework")
      private final @Nullable Input<String> framework;

    public Input<String> getFramework() {
        return this.framework == null ? Input.empty() : this.framework;
    }

    /**
     * The Model framework version.
     * 
     */
    @InputImport(name="frameworkVersion")
      private final @Nullable Input<String> frameworkVersion;

    public Input<String> getFrameworkVersion() {
        return this.frameworkVersion == null ? Input.empty() : this.frameworkVersion;
    }

    /**
     * The Model Id.
     * 
     */
    @InputImport(name="id")
      private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * The Model tag dictionary. Items are mutable.
     * 
     */
    @InputImport(name="kvTags")
      private final @Nullable Input<Map<String,String>> kvTags;

    public Input<Map<String,String>> getKvTags() {
        return this.kvTags == null ? Input.empty() : this.kvTags;
    }

    /**
     * The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml
     * 
     */
    @InputImport(name="mimeType", required=true)
      private final Input<String> mimeType;

    public Input<String> getMimeType() {
        return this.mimeType;
    }

    /**
     * The Model last modified time (UTC).
     * 
     */
    @InputImport(name="modifiedTime")
      private final @Nullable Input<String> modifiedTime;

    public Input<String> getModifiedTime() {
        return this.modifiedTime == null ? Input.empty() : this.modifiedTime;
    }

    /**
     * The Model name.
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * The Parent Model Id.
     * 
     */
    @InputImport(name="parentModelId")
      private final @Nullable Input<String> parentModelId;

    public Input<String> getParentModelId() {
        return this.parentModelId == null ? Input.empty() : this.parentModelId;
    }

    /**
     * The Model property dictionary. Properties are immutable.
     * 
     */
    @InputImport(name="properties")
      private final @Nullable Input<Map<String,String>> properties;

    public Input<Map<String,String>> getProperties() {
        return this.properties == null ? Input.empty() : this.properties;
    }

    /**
     * Resource requirements for the model
     * 
     */
    @InputImport(name="resourceRequirements")
      private final @Nullable Input<ContainerResourceRequirementsArgs> resourceRequirements;

    public Input<ContainerResourceRequirementsArgs> getResourceRequirements() {
        return this.resourceRequirements == null ? Input.empty() : this.resourceRequirements;
    }

    /**
     * The RunId that created this model.
     * 
     */
    @InputImport(name="runId")
      private final @Nullable Input<String> runId;

    public Input<String> getRunId() {
        return this.runId == null ? Input.empty() : this.runId;
    }

    /**
     * Sample Input Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}
     * 
     */
    @InputImport(name="sampleInputData")
      private final @Nullable Input<String> sampleInputData;

    public Input<String> getSampleInputData() {
        return this.sampleInputData == null ? Input.empty() : this.sampleInputData;
    }

    /**
     * Sample Output Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}
     * 
     */
    @InputImport(name="sampleOutputData")
      private final @Nullable Input<String> sampleOutputData;

    public Input<String> getSampleOutputData() {
        return this.sampleOutputData == null ? Input.empty() : this.sampleOutputData;
    }

    /**
     * Indicates whether we need to unpack the Model during docker Image creation.
     * 
     */
    @InputImport(name="unpack")
      private final @Nullable Input<Boolean> unpack;

    public Input<Boolean> getUnpack() {
        return this.unpack == null ? Input.empty() : this.unpack;
    }

    /**
     * The URL of the Model. Usually a SAS URL.
     * 
     */
    @InputImport(name="url", required=true)
      private final Input<String> url;

    public Input<String> getUrl() {
        return this.url;
    }

    /**
     * The Model version assigned by Model Management Service.
     * 
     */
    @InputImport(name="version")
      private final @Nullable Input<Double> version;

    public Input<Double> getVersion() {
        return this.version == null ? Input.empty() : this.version;
    }

    public ModelArgs(
        @Nullable Input<String> createdTime,
        @Nullable Input<List<DatasetReferenceArgs>> datasets,
        @Nullable Input<List<String>> derivedModelIds,
        @Nullable Input<String> description,
        @Nullable Input<String> experimentName,
        @Nullable Input<String> framework,
        @Nullable Input<String> frameworkVersion,
        @Nullable Input<String> id,
        @Nullable Input<Map<String,String>> kvTags,
        Input<String> mimeType,
        @Nullable Input<String> modifiedTime,
        Input<String> name,
        @Nullable Input<String> parentModelId,
        @Nullable Input<Map<String,String>> properties,
        @Nullable Input<ContainerResourceRequirementsArgs> resourceRequirements,
        @Nullable Input<String> runId,
        @Nullable Input<String> sampleInputData,
        @Nullable Input<String> sampleOutputData,
        @Nullable Input<Boolean> unpack,
        Input<String> url,
        @Nullable Input<Double> version) {
        this.createdTime = createdTime;
        this.datasets = datasets;
        this.derivedModelIds = derivedModelIds;
        this.description = description;
        this.experimentName = experimentName;
        this.framework = framework;
        this.frameworkVersion = frameworkVersion;
        this.id = id;
        this.kvTags = kvTags;
        this.mimeType = Objects.requireNonNull(mimeType, "expected parameter 'mimeType' to be non-null");
        this.modifiedTime = modifiedTime;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.parentModelId = parentModelId;
        this.properties = properties;
        this.resourceRequirements = resourceRequirements;
        this.runId = runId;
        this.sampleInputData = sampleInputData;
        this.sampleOutputData = sampleOutputData;
        this.unpack = unpack;
        this.url = Objects.requireNonNull(url, "expected parameter 'url' to be non-null");
        this.version = version;
    }

    private ModelArgs() {
        this.createdTime = Input.empty();
        this.datasets = Input.empty();
        this.derivedModelIds = Input.empty();
        this.description = Input.empty();
        this.experimentName = Input.empty();
        this.framework = Input.empty();
        this.frameworkVersion = Input.empty();
        this.id = Input.empty();
        this.kvTags = Input.empty();
        this.mimeType = Input.empty();
        this.modifiedTime = Input.empty();
        this.name = Input.empty();
        this.parentModelId = Input.empty();
        this.properties = Input.empty();
        this.resourceRequirements = Input.empty();
        this.runId = Input.empty();
        this.sampleInputData = Input.empty();
        this.sampleOutputData = Input.empty();
        this.unpack = Input.empty();
        this.url = Input.empty();
        this.version = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> createdTime;
        private @Nullable Input<List<DatasetReferenceArgs>> datasets;
        private @Nullable Input<List<String>> derivedModelIds;
        private @Nullable Input<String> description;
        private @Nullable Input<String> experimentName;
        private @Nullable Input<String> framework;
        private @Nullable Input<String> frameworkVersion;
        private @Nullable Input<String> id;
        private @Nullable Input<Map<String,String>> kvTags;
        private Input<String> mimeType;
        private @Nullable Input<String> modifiedTime;
        private Input<String> name;
        private @Nullable Input<String> parentModelId;
        private @Nullable Input<Map<String,String>> properties;
        private @Nullable Input<ContainerResourceRequirementsArgs> resourceRequirements;
        private @Nullable Input<String> runId;
        private @Nullable Input<String> sampleInputData;
        private @Nullable Input<String> sampleOutputData;
        private @Nullable Input<Boolean> unpack;
        private Input<String> url;
        private @Nullable Input<Double> version;

        public Builder() {
    	      // Empty
        }

        public Builder(ModelArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdTime = defaults.createdTime;
    	      this.datasets = defaults.datasets;
    	      this.derivedModelIds = defaults.derivedModelIds;
    	      this.description = defaults.description;
    	      this.experimentName = defaults.experimentName;
    	      this.framework = defaults.framework;
    	      this.frameworkVersion = defaults.frameworkVersion;
    	      this.id = defaults.id;
    	      this.kvTags = defaults.kvTags;
    	      this.mimeType = defaults.mimeType;
    	      this.modifiedTime = defaults.modifiedTime;
    	      this.name = defaults.name;
    	      this.parentModelId = defaults.parentModelId;
    	      this.properties = defaults.properties;
    	      this.resourceRequirements = defaults.resourceRequirements;
    	      this.runId = defaults.runId;
    	      this.sampleInputData = defaults.sampleInputData;
    	      this.sampleOutputData = defaults.sampleOutputData;
    	      this.unpack = defaults.unpack;
    	      this.url = defaults.url;
    	      this.version = defaults.version;
        }

        public Builder setCreatedTime(@Nullable Input<String> createdTime) {
            this.createdTime = createdTime;
            return this;
        }

        public Builder setCreatedTime(@Nullable String createdTime) {
            this.createdTime = Input.ofNullable(createdTime);
            return this;
        }

        public Builder setDatasets(@Nullable Input<List<DatasetReferenceArgs>> datasets) {
            this.datasets = datasets;
            return this;
        }

        public Builder setDatasets(@Nullable List<DatasetReferenceArgs> datasets) {
            this.datasets = Input.ofNullable(datasets);
            return this;
        }

        public Builder setDerivedModelIds(@Nullable Input<List<String>> derivedModelIds) {
            this.derivedModelIds = derivedModelIds;
            return this;
        }

        public Builder setDerivedModelIds(@Nullable List<String> derivedModelIds) {
            this.derivedModelIds = Input.ofNullable(derivedModelIds);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setExperimentName(@Nullable Input<String> experimentName) {
            this.experimentName = experimentName;
            return this;
        }

        public Builder setExperimentName(@Nullable String experimentName) {
            this.experimentName = Input.ofNullable(experimentName);
            return this;
        }

        public Builder setFramework(@Nullable Input<String> framework) {
            this.framework = framework;
            return this;
        }

        public Builder setFramework(@Nullable String framework) {
            this.framework = Input.ofNullable(framework);
            return this;
        }

        public Builder setFrameworkVersion(@Nullable Input<String> frameworkVersion) {
            this.frameworkVersion = frameworkVersion;
            return this;
        }

        public Builder setFrameworkVersion(@Nullable String frameworkVersion) {
            this.frameworkVersion = Input.ofNullable(frameworkVersion);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setKvTags(@Nullable Input<Map<String,String>> kvTags) {
            this.kvTags = kvTags;
            return this;
        }

        public Builder setKvTags(@Nullable Map<String,String> kvTags) {
            this.kvTags = Input.ofNullable(kvTags);
            return this;
        }

        public Builder setMimeType(Input<String> mimeType) {
            this.mimeType = Objects.requireNonNull(mimeType);
            return this;
        }

        public Builder setMimeType(String mimeType) {
            this.mimeType = Input.of(Objects.requireNonNull(mimeType));
            return this;
        }

        public Builder setModifiedTime(@Nullable Input<String> modifiedTime) {
            this.modifiedTime = modifiedTime;
            return this;
        }

        public Builder setModifiedTime(@Nullable String modifiedTime) {
            this.modifiedTime = Input.ofNullable(modifiedTime);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setParentModelId(@Nullable Input<String> parentModelId) {
            this.parentModelId = parentModelId;
            return this;
        }

        public Builder setParentModelId(@Nullable String parentModelId) {
            this.parentModelId = Input.ofNullable(parentModelId);
            return this;
        }

        public Builder setProperties(@Nullable Input<Map<String,String>> properties) {
            this.properties = properties;
            return this;
        }

        public Builder setProperties(@Nullable Map<String,String> properties) {
            this.properties = Input.ofNullable(properties);
            return this;
        }

        public Builder setResourceRequirements(@Nullable Input<ContainerResourceRequirementsArgs> resourceRequirements) {
            this.resourceRequirements = resourceRequirements;
            return this;
        }

        public Builder setResourceRequirements(@Nullable ContainerResourceRequirementsArgs resourceRequirements) {
            this.resourceRequirements = Input.ofNullable(resourceRequirements);
            return this;
        }

        public Builder setRunId(@Nullable Input<String> runId) {
            this.runId = runId;
            return this;
        }

        public Builder setRunId(@Nullable String runId) {
            this.runId = Input.ofNullable(runId);
            return this;
        }

        public Builder setSampleInputData(@Nullable Input<String> sampleInputData) {
            this.sampleInputData = sampleInputData;
            return this;
        }

        public Builder setSampleInputData(@Nullable String sampleInputData) {
            this.sampleInputData = Input.ofNullable(sampleInputData);
            return this;
        }

        public Builder setSampleOutputData(@Nullable Input<String> sampleOutputData) {
            this.sampleOutputData = sampleOutputData;
            return this;
        }

        public Builder setSampleOutputData(@Nullable String sampleOutputData) {
            this.sampleOutputData = Input.ofNullable(sampleOutputData);
            return this;
        }

        public Builder setUnpack(@Nullable Input<Boolean> unpack) {
            this.unpack = unpack;
            return this;
        }

        public Builder setUnpack(@Nullable Boolean unpack) {
            this.unpack = Input.ofNullable(unpack);
            return this;
        }

        public Builder setUrl(Input<String> url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }

        public Builder setUrl(String url) {
            this.url = Input.of(Objects.requireNonNull(url));
            return this;
        }

        public Builder setVersion(@Nullable Input<Double> version) {
            this.version = version;
            return this;
        }

        public Builder setVersion(@Nullable Double version) {
            this.version = Input.ofNullable(version);
            return this;
        }
        public ModelArgs build() {
            return new ModelArgs(createdTime, datasets, derivedModelIds, description, experimentName, framework, frameworkVersion, id, kvTags, mimeType, modifiedTime, name, parentModelId, properties, resourceRequirements, runId, sampleInputData, sampleOutputData, unpack, url, version);
        }
    }
}
