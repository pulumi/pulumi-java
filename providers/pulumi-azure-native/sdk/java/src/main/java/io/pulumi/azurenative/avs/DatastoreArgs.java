// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.avs;

import io.pulumi.azurenative.avs.inputs.DiskPoolVolumeArgs;
import io.pulumi.azurenative.avs.inputs.NetAppVolumeArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatastoreArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatastoreArgs Empty = new DatastoreArgs();

    @InputImport(name="clusterName", required=true)
    private final Input<String> clusterName;

    public Input<String> getClusterName() {
        return this.clusterName;
    }

    @InputImport(name="datastoreName")
    private final @Nullable Input<String> datastoreName;

    public Input<String> getDatastoreName() {
        return this.datastoreName == null ? Input.empty() : this.datastoreName;
    }

    @InputImport(name="diskPoolVolume")
    private final @Nullable Input<DiskPoolVolumeArgs> diskPoolVolume;

    public Input<DiskPoolVolumeArgs> getDiskPoolVolume() {
        return this.diskPoolVolume == null ? Input.empty() : this.diskPoolVolume;
    }

    @InputImport(name="netAppVolume")
    private final @Nullable Input<NetAppVolumeArgs> netAppVolume;

    public Input<NetAppVolumeArgs> getNetAppVolume() {
        return this.netAppVolume == null ? Input.empty() : this.netAppVolume;
    }

    @InputImport(name="privateCloudName", required=true)
    private final Input<String> privateCloudName;

    public Input<String> getPrivateCloudName() {
        return this.privateCloudName;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    public DatastoreArgs(
        Input<String> clusterName,
        @Nullable Input<String> datastoreName,
        @Nullable Input<DiskPoolVolumeArgs> diskPoolVolume,
        @Nullable Input<NetAppVolumeArgs> netAppVolume,
        Input<String> privateCloudName,
        Input<String> resourceGroupName) {
        this.clusterName = Objects.requireNonNull(clusterName, "expected parameter 'clusterName' to be non-null");
        this.datastoreName = datastoreName;
        this.diskPoolVolume = diskPoolVolume;
        this.netAppVolume = netAppVolume;
        this.privateCloudName = Objects.requireNonNull(privateCloudName, "expected parameter 'privateCloudName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private DatastoreArgs() {
        this.clusterName = Input.empty();
        this.datastoreName = Input.empty();
        this.diskPoolVolume = Input.empty();
        this.netAppVolume = Input.empty();
        this.privateCloudName = Input.empty();
        this.resourceGroupName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatastoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> clusterName;
        private @Nullable Input<String> datastoreName;
        private @Nullable Input<DiskPoolVolumeArgs> diskPoolVolume;
        private @Nullable Input<NetAppVolumeArgs> netAppVolume;
        private Input<String> privateCloudName;
        private Input<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(DatastoreArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterName = defaults.clusterName;
    	      this.datastoreName = defaults.datastoreName;
    	      this.diskPoolVolume = defaults.diskPoolVolume;
    	      this.netAppVolume = defaults.netAppVolume;
    	      this.privateCloudName = defaults.privateCloudName;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder setClusterName(Input<String> clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }

        public Builder setClusterName(String clusterName) {
            this.clusterName = Input.of(Objects.requireNonNull(clusterName));
            return this;
        }

        public Builder setDatastoreName(@Nullable Input<String> datastoreName) {
            this.datastoreName = datastoreName;
            return this;
        }

        public Builder setDatastoreName(@Nullable String datastoreName) {
            this.datastoreName = Input.ofNullable(datastoreName);
            return this;
        }

        public Builder setDiskPoolVolume(@Nullable Input<DiskPoolVolumeArgs> diskPoolVolume) {
            this.diskPoolVolume = diskPoolVolume;
            return this;
        }

        public Builder setDiskPoolVolume(@Nullable DiskPoolVolumeArgs diskPoolVolume) {
            this.diskPoolVolume = Input.ofNullable(diskPoolVolume);
            return this;
        }

        public Builder setNetAppVolume(@Nullable Input<NetAppVolumeArgs> netAppVolume) {
            this.netAppVolume = netAppVolume;
            return this;
        }

        public Builder setNetAppVolume(@Nullable NetAppVolumeArgs netAppVolume) {
            this.netAppVolume = Input.ofNullable(netAppVolume);
            return this;
        }

        public Builder setPrivateCloudName(Input<String> privateCloudName) {
            this.privateCloudName = Objects.requireNonNull(privateCloudName);
            return this;
        }

        public Builder setPrivateCloudName(String privateCloudName) {
            this.privateCloudName = Input.of(Objects.requireNonNull(privateCloudName));
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public DatastoreArgs build() {
            return new DatastoreArgs(clusterName, datastoreName, diskPoolVolume, netAppVolume, privateCloudName, resourceGroupName);
        }
    }
}
