// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights;

import io.pulumi.azurenative.customerinsights.enums.EntityType;
import io.pulumi.azurenative.customerinsights.enums.InstanceOperationType;
import io.pulumi.azurenative.customerinsights.inputs.ParticipantPropertyReferenceArgs;
import io.pulumi.azurenative.customerinsights.inputs.TypePropertiesMappingArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LinkArgs extends io.pulumi.resources.ResourceArgs {

    public static final LinkArgs Empty = new LinkArgs();

    @InputImport(name="description")
    private final @Nullable Input<Map<String,String>> description;

    public Input<Map<String,String>> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="displayName")
    private final @Nullable Input<Map<String,String>> displayName;

    public Input<Map<String,String>> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    @InputImport(name="hubName", required=true)
    private final Input<String> hubName;

    public Input<String> getHubName() {
        return this.hubName;
    }

    @InputImport(name="linkName")
    private final @Nullable Input<String> linkName;

    public Input<String> getLinkName() {
        return this.linkName == null ? Input.empty() : this.linkName;
    }

    @InputImport(name="mappings")
    private final @Nullable Input<List<TypePropertiesMappingArgs>> mappings;

    public Input<List<TypePropertiesMappingArgs>> getMappings() {
        return this.mappings == null ? Input.empty() : this.mappings;
    }

    @InputImport(name="operationType")
    private final @Nullable Input<InstanceOperationType> operationType;

    public Input<InstanceOperationType> getOperationType() {
        return this.operationType == null ? Input.empty() : this.operationType;
    }

    @InputImport(name="participantPropertyReferences", required=true)
    private final Input<List<ParticipantPropertyReferenceArgs>> participantPropertyReferences;

    public Input<List<ParticipantPropertyReferenceArgs>> getParticipantPropertyReferences() {
        return this.participantPropertyReferences;
    }

    @InputImport(name="referenceOnly")
    private final @Nullable Input<Boolean> referenceOnly;

    public Input<Boolean> getReferenceOnly() {
        return this.referenceOnly == null ? Input.empty() : this.referenceOnly;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="sourceEntityType", required=true)
    private final Input<EntityType> sourceEntityType;

    public Input<EntityType> getSourceEntityType() {
        return this.sourceEntityType;
    }

    @InputImport(name="sourceEntityTypeName", required=true)
    private final Input<String> sourceEntityTypeName;

    public Input<String> getSourceEntityTypeName() {
        return this.sourceEntityTypeName;
    }

    @InputImport(name="targetEntityType", required=true)
    private final Input<EntityType> targetEntityType;

    public Input<EntityType> getTargetEntityType() {
        return this.targetEntityType;
    }

    @InputImport(name="targetEntityTypeName", required=true)
    private final Input<String> targetEntityTypeName;

    public Input<String> getTargetEntityTypeName() {
        return this.targetEntityTypeName;
    }

    public LinkArgs(
        @Nullable Input<Map<String,String>> description,
        @Nullable Input<Map<String,String>> displayName,
        Input<String> hubName,
        @Nullable Input<String> linkName,
        @Nullable Input<List<TypePropertiesMappingArgs>> mappings,
        @Nullable Input<InstanceOperationType> operationType,
        Input<List<ParticipantPropertyReferenceArgs>> participantPropertyReferences,
        @Nullable Input<Boolean> referenceOnly,
        Input<String> resourceGroupName,
        Input<EntityType> sourceEntityType,
        Input<String> sourceEntityTypeName,
        Input<EntityType> targetEntityType,
        Input<String> targetEntityTypeName) {
        this.description = description;
        this.displayName = displayName;
        this.hubName = Objects.requireNonNull(hubName, "expected parameter 'hubName' to be non-null");
        this.linkName = linkName;
        this.mappings = mappings;
        this.operationType = operationType;
        this.participantPropertyReferences = Objects.requireNonNull(participantPropertyReferences, "expected parameter 'participantPropertyReferences' to be non-null");
        this.referenceOnly = referenceOnly;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sourceEntityType = Objects.requireNonNull(sourceEntityType, "expected parameter 'sourceEntityType' to be non-null");
        this.sourceEntityTypeName = Objects.requireNonNull(sourceEntityTypeName, "expected parameter 'sourceEntityTypeName' to be non-null");
        this.targetEntityType = Objects.requireNonNull(targetEntityType, "expected parameter 'targetEntityType' to be non-null");
        this.targetEntityTypeName = Objects.requireNonNull(targetEntityTypeName, "expected parameter 'targetEntityTypeName' to be non-null");
    }

    private LinkArgs() {
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.hubName = Input.empty();
        this.linkName = Input.empty();
        this.mappings = Input.empty();
        this.operationType = Input.empty();
        this.participantPropertyReferences = Input.empty();
        this.referenceOnly = Input.empty();
        this.resourceGroupName = Input.empty();
        this.sourceEntityType = Input.empty();
        this.sourceEntityTypeName = Input.empty();
        this.targetEntityType = Input.empty();
        this.targetEntityTypeName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Map<String,String>> description;
        private @Nullable Input<Map<String,String>> displayName;
        private Input<String> hubName;
        private @Nullable Input<String> linkName;
        private @Nullable Input<List<TypePropertiesMappingArgs>> mappings;
        private @Nullable Input<InstanceOperationType> operationType;
        private Input<List<ParticipantPropertyReferenceArgs>> participantPropertyReferences;
        private @Nullable Input<Boolean> referenceOnly;
        private Input<String> resourceGroupName;
        private Input<EntityType> sourceEntityType;
        private Input<String> sourceEntityTypeName;
        private Input<EntityType> targetEntityType;
        private Input<String> targetEntityTypeName;

        public Builder() {
    	      // Empty
        }

        public Builder(LinkArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.hubName = defaults.hubName;
    	      this.linkName = defaults.linkName;
    	      this.mappings = defaults.mappings;
    	      this.operationType = defaults.operationType;
    	      this.participantPropertyReferences = defaults.participantPropertyReferences;
    	      this.referenceOnly = defaults.referenceOnly;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sourceEntityType = defaults.sourceEntityType;
    	      this.sourceEntityTypeName = defaults.sourceEntityTypeName;
    	      this.targetEntityType = defaults.targetEntityType;
    	      this.targetEntityTypeName = defaults.targetEntityTypeName;
        }

        public Builder setDescription(@Nullable Input<Map<String,String>> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable Map<String,String> description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<Map<String,String>> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable Map<String,String> displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setHubName(Input<String> hubName) {
            this.hubName = Objects.requireNonNull(hubName);
            return this;
        }

        public Builder setHubName(String hubName) {
            this.hubName = Input.of(Objects.requireNonNull(hubName));
            return this;
        }

        public Builder setLinkName(@Nullable Input<String> linkName) {
            this.linkName = linkName;
            return this;
        }

        public Builder setLinkName(@Nullable String linkName) {
            this.linkName = Input.ofNullable(linkName);
            return this;
        }

        public Builder setMappings(@Nullable Input<List<TypePropertiesMappingArgs>> mappings) {
            this.mappings = mappings;
            return this;
        }

        public Builder setMappings(@Nullable List<TypePropertiesMappingArgs> mappings) {
            this.mappings = Input.ofNullable(mappings);
            return this;
        }

        public Builder setOperationType(@Nullable Input<InstanceOperationType> operationType) {
            this.operationType = operationType;
            return this;
        }

        public Builder setOperationType(@Nullable InstanceOperationType operationType) {
            this.operationType = Input.ofNullable(operationType);
            return this;
        }

        public Builder setParticipantPropertyReferences(Input<List<ParticipantPropertyReferenceArgs>> participantPropertyReferences) {
            this.participantPropertyReferences = Objects.requireNonNull(participantPropertyReferences);
            return this;
        }

        public Builder setParticipantPropertyReferences(List<ParticipantPropertyReferenceArgs> participantPropertyReferences) {
            this.participantPropertyReferences = Input.of(Objects.requireNonNull(participantPropertyReferences));
            return this;
        }

        public Builder setReferenceOnly(@Nullable Input<Boolean> referenceOnly) {
            this.referenceOnly = referenceOnly;
            return this;
        }

        public Builder setReferenceOnly(@Nullable Boolean referenceOnly) {
            this.referenceOnly = Input.ofNullable(referenceOnly);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSourceEntityType(Input<EntityType> sourceEntityType) {
            this.sourceEntityType = Objects.requireNonNull(sourceEntityType);
            return this;
        }

        public Builder setSourceEntityType(EntityType sourceEntityType) {
            this.sourceEntityType = Input.of(Objects.requireNonNull(sourceEntityType));
            return this;
        }

        public Builder setSourceEntityTypeName(Input<String> sourceEntityTypeName) {
            this.sourceEntityTypeName = Objects.requireNonNull(sourceEntityTypeName);
            return this;
        }

        public Builder setSourceEntityTypeName(String sourceEntityTypeName) {
            this.sourceEntityTypeName = Input.of(Objects.requireNonNull(sourceEntityTypeName));
            return this;
        }

        public Builder setTargetEntityType(Input<EntityType> targetEntityType) {
            this.targetEntityType = Objects.requireNonNull(targetEntityType);
            return this;
        }

        public Builder setTargetEntityType(EntityType targetEntityType) {
            this.targetEntityType = Input.of(Objects.requireNonNull(targetEntityType));
            return this;
        }

        public Builder setTargetEntityTypeName(Input<String> targetEntityTypeName) {
            this.targetEntityTypeName = Objects.requireNonNull(targetEntityTypeName);
            return this;
        }

        public Builder setTargetEntityTypeName(String targetEntityTypeName) {
            this.targetEntityTypeName = Input.of(Objects.requireNonNull(targetEntityTypeName));
            return this;
        }

        public LinkArgs build() {
            return new LinkArgs(description, displayName, hubName, linkName, mappings, operationType, participantPropertyReferences, referenceOnly, resourceGroupName, sourceEntityType, sourceEntityTypeName, targetEntityType, targetEntityTypeName);
        }
    }
}
