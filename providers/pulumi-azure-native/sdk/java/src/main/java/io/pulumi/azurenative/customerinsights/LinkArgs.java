// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights;

import io.pulumi.azurenative.customerinsights.enums.EntityType;
import io.pulumi.azurenative.customerinsights.enums.InstanceOperationType;
import io.pulumi.azurenative.customerinsights.inputs.ParticipantPropertyReferenceArgs;
import io.pulumi.azurenative.customerinsights.inputs.TypePropertiesMappingArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LinkArgs extends io.pulumi.resources.ResourceArgs {

    public static final LinkArgs Empty = new LinkArgs();

    /**
     * Localized descriptions for the Link.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<Map<String,String>> description;

    public Output<Map<String,String>> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Localized display name for the Link.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<Map<String,String>> displayName;

    public Output<Map<String,String>> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * The name of the hub.
     * 
     */
    @Import(name="hubName", required=true)
      private final Output<String> hubName;

    public Output<String> getHubName() {
        return this.hubName;
    }

    /**
     * The name of the link.
     * 
     */
    @Import(name="linkName")
      private final @Nullable Output<String> linkName;

    public Output<String> getLinkName() {
        return this.linkName == null ? Output.empty() : this.linkName;
    }

    /**
     * The set of properties mappings between the source and target Types.
     * 
     */
    @Import(name="mappings")
      private final @Nullable Output<List<TypePropertiesMappingArgs>> mappings;

    public Output<List<TypePropertiesMappingArgs>> getMappings() {
        return this.mappings == null ? Output.empty() : this.mappings;
    }

    /**
     * Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
     * 
     */
    @Import(name="operationType")
      private final @Nullable Output<InstanceOperationType> operationType;

    public Output<InstanceOperationType> getOperationType() {
        return this.operationType == null ? Output.empty() : this.operationType;
    }

    /**
     * The properties that represent the participating profile.
     * 
     */
    @Import(name="participantPropertyReferences", required=true)
      private final Output<List<ParticipantPropertyReferenceArgs>> participantPropertyReferences;

    public Output<List<ParticipantPropertyReferenceArgs>> getParticipantPropertyReferences() {
        return this.participantPropertyReferences;
    }

    /**
     * Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
     * 
     */
    @Import(name="referenceOnly")
      private final @Nullable Output<Boolean> referenceOnly;

    public Output<Boolean> getReferenceOnly() {
        return this.referenceOnly == null ? Output.empty() : this.referenceOnly;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Type of source entity.
     * 
     */
    @Import(name="sourceEntityType", required=true)
      private final Output<EntityType> sourceEntityType;

    public Output<EntityType> getSourceEntityType() {
        return this.sourceEntityType;
    }

    /**
     * Name of the source Entity Type.
     * 
     */
    @Import(name="sourceEntityTypeName", required=true)
      private final Output<String> sourceEntityTypeName;

    public Output<String> getSourceEntityTypeName() {
        return this.sourceEntityTypeName;
    }

    /**
     * Type of target entity.
     * 
     */
    @Import(name="targetEntityType", required=true)
      private final Output<EntityType> targetEntityType;

    public Output<EntityType> getTargetEntityType() {
        return this.targetEntityType;
    }

    /**
     * Name of the target Entity Type.
     * 
     */
    @Import(name="targetEntityTypeName", required=true)
      private final Output<String> targetEntityTypeName;

    public Output<String> getTargetEntityTypeName() {
        return this.targetEntityTypeName;
    }

    public LinkArgs(
        @Nullable Output<Map<String,String>> description,
        @Nullable Output<Map<String,String>> displayName,
        Output<String> hubName,
        @Nullable Output<String> linkName,
        @Nullable Output<List<TypePropertiesMappingArgs>> mappings,
        @Nullable Output<InstanceOperationType> operationType,
        Output<List<ParticipantPropertyReferenceArgs>> participantPropertyReferences,
        @Nullable Output<Boolean> referenceOnly,
        Output<String> resourceGroupName,
        Output<EntityType> sourceEntityType,
        Output<String> sourceEntityTypeName,
        Output<EntityType> targetEntityType,
        Output<String> targetEntityTypeName) {
        this.description = description;
        this.displayName = displayName;
        this.hubName = Objects.requireNonNull(hubName, "expected parameter 'hubName' to be non-null");
        this.linkName = linkName;
        this.mappings = mappings;
        this.operationType = operationType;
        this.participantPropertyReferences = Objects.requireNonNull(participantPropertyReferences, "expected parameter 'participantPropertyReferences' to be non-null");
        this.referenceOnly = referenceOnly;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sourceEntityType = Objects.requireNonNull(sourceEntityType, "expected parameter 'sourceEntityType' to be non-null");
        this.sourceEntityTypeName = Objects.requireNonNull(sourceEntityTypeName, "expected parameter 'sourceEntityTypeName' to be non-null");
        this.targetEntityType = Objects.requireNonNull(targetEntityType, "expected parameter 'targetEntityType' to be non-null");
        this.targetEntityTypeName = Objects.requireNonNull(targetEntityTypeName, "expected parameter 'targetEntityTypeName' to be non-null");
    }

    private LinkArgs() {
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.hubName = Output.empty();
        this.linkName = Output.empty();
        this.mappings = Output.empty();
        this.operationType = Output.empty();
        this.participantPropertyReferences = Output.empty();
        this.referenceOnly = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sourceEntityType = Output.empty();
        this.sourceEntityTypeName = Output.empty();
        this.targetEntityType = Output.empty();
        this.targetEntityTypeName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> description;
        private @Nullable Output<Map<String,String>> displayName;
        private Output<String> hubName;
        private @Nullable Output<String> linkName;
        private @Nullable Output<List<TypePropertiesMappingArgs>> mappings;
        private @Nullable Output<InstanceOperationType> operationType;
        private Output<List<ParticipantPropertyReferenceArgs>> participantPropertyReferences;
        private @Nullable Output<Boolean> referenceOnly;
        private Output<String> resourceGroupName;
        private Output<EntityType> sourceEntityType;
        private Output<String> sourceEntityTypeName;
        private Output<EntityType> targetEntityType;
        private Output<String> targetEntityTypeName;

        public Builder() {
    	      // Empty
        }

        public Builder(LinkArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.hubName = defaults.hubName;
    	      this.linkName = defaults.linkName;
    	      this.mappings = defaults.mappings;
    	      this.operationType = defaults.operationType;
    	      this.participantPropertyReferences = defaults.participantPropertyReferences;
    	      this.referenceOnly = defaults.referenceOnly;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sourceEntityType = defaults.sourceEntityType;
    	      this.sourceEntityTypeName = defaults.sourceEntityTypeName;
    	      this.targetEntityType = defaults.targetEntityType;
    	      this.targetEntityTypeName = defaults.targetEntityTypeName;
        }

        public Builder description(@Nullable Output<Map<String,String>> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable Map<String,String> description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<Map<String,String>> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable Map<String,String> displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }
        public Builder hubName(Output<String> hubName) {
            this.hubName = Objects.requireNonNull(hubName);
            return this;
        }
        public Builder hubName(String hubName) {
            this.hubName = Output.of(Objects.requireNonNull(hubName));
            return this;
        }
        public Builder linkName(@Nullable Output<String> linkName) {
            this.linkName = linkName;
            return this;
        }
        public Builder linkName(@Nullable String linkName) {
            this.linkName = Output.ofNullable(linkName);
            return this;
        }
        public Builder mappings(@Nullable Output<List<TypePropertiesMappingArgs>> mappings) {
            this.mappings = mappings;
            return this;
        }
        public Builder mappings(@Nullable List<TypePropertiesMappingArgs> mappings) {
            this.mappings = Output.ofNullable(mappings);
            return this;
        }
        public Builder mappings(TypePropertiesMappingArgs... mappings) {
            return mappings(List.of(mappings));
        }
        public Builder operationType(@Nullable Output<InstanceOperationType> operationType) {
            this.operationType = operationType;
            return this;
        }
        public Builder operationType(@Nullable InstanceOperationType operationType) {
            this.operationType = Output.ofNullable(operationType);
            return this;
        }
        public Builder participantPropertyReferences(Output<List<ParticipantPropertyReferenceArgs>> participantPropertyReferences) {
            this.participantPropertyReferences = Objects.requireNonNull(participantPropertyReferences);
            return this;
        }
        public Builder participantPropertyReferences(List<ParticipantPropertyReferenceArgs> participantPropertyReferences) {
            this.participantPropertyReferences = Output.of(Objects.requireNonNull(participantPropertyReferences));
            return this;
        }
        public Builder participantPropertyReferences(ParticipantPropertyReferenceArgs... participantPropertyReferences) {
            return participantPropertyReferences(List.of(participantPropertyReferences));
        }
        public Builder referenceOnly(@Nullable Output<Boolean> referenceOnly) {
            this.referenceOnly = referenceOnly;
            return this;
        }
        public Builder referenceOnly(@Nullable Boolean referenceOnly) {
            this.referenceOnly = Output.ofNullable(referenceOnly);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sourceEntityType(Output<EntityType> sourceEntityType) {
            this.sourceEntityType = Objects.requireNonNull(sourceEntityType);
            return this;
        }
        public Builder sourceEntityType(EntityType sourceEntityType) {
            this.sourceEntityType = Output.of(Objects.requireNonNull(sourceEntityType));
            return this;
        }
        public Builder sourceEntityTypeName(Output<String> sourceEntityTypeName) {
            this.sourceEntityTypeName = Objects.requireNonNull(sourceEntityTypeName);
            return this;
        }
        public Builder sourceEntityTypeName(String sourceEntityTypeName) {
            this.sourceEntityTypeName = Output.of(Objects.requireNonNull(sourceEntityTypeName));
            return this;
        }
        public Builder targetEntityType(Output<EntityType> targetEntityType) {
            this.targetEntityType = Objects.requireNonNull(targetEntityType);
            return this;
        }
        public Builder targetEntityType(EntityType targetEntityType) {
            this.targetEntityType = Output.of(Objects.requireNonNull(targetEntityType));
            return this;
        }
        public Builder targetEntityTypeName(Output<String> targetEntityTypeName) {
            this.targetEntityTypeName = Objects.requireNonNull(targetEntityTypeName);
            return this;
        }
        public Builder targetEntityTypeName(String targetEntityTypeName) {
            this.targetEntityTypeName = Output.of(Objects.requireNonNull(targetEntityTypeName));
            return this;
        }        public LinkArgs build() {
            return new LinkArgs(description, displayName, hubName, linkName, mappings, operationType, participantPropertyReferences, referenceOnly, resourceGroupName, sourceEntityType, sourceEntityTypeName, targetEntityType, targetEntityTypeName);
        }
    }
}
