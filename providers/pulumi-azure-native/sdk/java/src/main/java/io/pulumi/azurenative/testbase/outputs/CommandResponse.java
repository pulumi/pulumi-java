// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.testbase.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class CommandResponse {
    /**
     * The action of the command.
     * 
     */
    private final String action;
    /**
     * Specifies whether to run the command even if a previous command is failed.
     * 
     */
    private final @Nullable Boolean alwaysRun;
    /**
     * Specifies whether to apply update before the command.
     * 
     */
    private final @Nullable Boolean applyUpdateBefore;
    /**
     * The content of the command. The content depends on source type.
     * 
     */
    private final String content;
    /**
     * The type of command content.
     * 
     */
    private final String contentType;
    /**
     * Specifies the max run time of the command.
     * 
     */
    private final @Nullable Integer maxRunTime;
    /**
     * The name of the command.
     * 
     */
    private final String name;
    /**
     * Specifies whether to restart the VM after the command executed.
     * 
     */
    private final @Nullable Boolean restartAfter;
    /**
     * Specifies whether to run the command in interactive mode.
     * 
     */
    private final @Nullable Boolean runAsInteractive;
    /**
     * Specifies whether to run the command as administrator.
     * 
     */
    private final @Nullable Boolean runElevated;

    @OutputCustomType.Constructor({"action","alwaysRun","applyUpdateBefore","content","contentType","maxRunTime","name","restartAfter","runAsInteractive","runElevated"})
    private CommandResponse(
        String action,
        @Nullable Boolean alwaysRun,
        @Nullable Boolean applyUpdateBefore,
        String content,
        String contentType,
        @Nullable Integer maxRunTime,
        String name,
        @Nullable Boolean restartAfter,
        @Nullable Boolean runAsInteractive,
        @Nullable Boolean runElevated) {
        this.action = Objects.requireNonNull(action);
        this.alwaysRun = alwaysRun;
        this.applyUpdateBefore = applyUpdateBefore;
        this.content = Objects.requireNonNull(content);
        this.contentType = Objects.requireNonNull(contentType);
        this.maxRunTime = maxRunTime;
        this.name = Objects.requireNonNull(name);
        this.restartAfter = restartAfter;
        this.runAsInteractive = runAsInteractive;
        this.runElevated = runElevated;
    }

    /**
     * The action of the command.
     * 
     */
    public String getAction() {
        return this.action;
    }
    /**
     * Specifies whether to run the command even if a previous command is failed.
     * 
     */
    public Optional<Boolean> getAlwaysRun() {
        return Optional.ofNullable(this.alwaysRun);
    }
    /**
     * Specifies whether to apply update before the command.
     * 
     */
    public Optional<Boolean> getApplyUpdateBefore() {
        return Optional.ofNullable(this.applyUpdateBefore);
    }
    /**
     * The content of the command. The content depends on source type.
     * 
     */
    public String getContent() {
        return this.content;
    }
    /**
     * The type of command content.
     * 
     */
    public String getContentType() {
        return this.contentType;
    }
    /**
     * Specifies the max run time of the command.
     * 
     */
    public Optional<Integer> getMaxRunTime() {
        return Optional.ofNullable(this.maxRunTime);
    }
    /**
     * The name of the command.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * Specifies whether to restart the VM after the command executed.
     * 
     */
    public Optional<Boolean> getRestartAfter() {
        return Optional.ofNullable(this.restartAfter);
    }
    /**
     * Specifies whether to run the command in interactive mode.
     * 
     */
    public Optional<Boolean> getRunAsInteractive() {
        return Optional.ofNullable(this.runAsInteractive);
    }
    /**
     * Specifies whether to run the command as administrator.
     * 
     */
    public Optional<Boolean> getRunElevated() {
        return Optional.ofNullable(this.runElevated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CommandResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String action;
        private @Nullable Boolean alwaysRun;
        private @Nullable Boolean applyUpdateBefore;
        private String content;
        private String contentType;
        private @Nullable Integer maxRunTime;
        private String name;
        private @Nullable Boolean restartAfter;
        private @Nullable Boolean runAsInteractive;
        private @Nullable Boolean runElevated;

        public Builder() {
    	      // Empty
        }

        public Builder(CommandResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.alwaysRun = defaults.alwaysRun;
    	      this.applyUpdateBefore = defaults.applyUpdateBefore;
    	      this.content = defaults.content;
    	      this.contentType = defaults.contentType;
    	      this.maxRunTime = defaults.maxRunTime;
    	      this.name = defaults.name;
    	      this.restartAfter = defaults.restartAfter;
    	      this.runAsInteractive = defaults.runAsInteractive;
    	      this.runElevated = defaults.runElevated;
        }

        public Builder setAction(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }

        public Builder setAlwaysRun(@Nullable Boolean alwaysRun) {
            this.alwaysRun = alwaysRun;
            return this;
        }

        public Builder setApplyUpdateBefore(@Nullable Boolean applyUpdateBefore) {
            this.applyUpdateBefore = applyUpdateBefore;
            return this;
        }

        public Builder setContent(String content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }

        public Builder setContentType(String contentType) {
            this.contentType = Objects.requireNonNull(contentType);
            return this;
        }

        public Builder setMaxRunTime(@Nullable Integer maxRunTime) {
            this.maxRunTime = maxRunTime;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setRestartAfter(@Nullable Boolean restartAfter) {
            this.restartAfter = restartAfter;
            return this;
        }

        public Builder setRunAsInteractive(@Nullable Boolean runAsInteractive) {
            this.runAsInteractive = runAsInteractive;
            return this;
        }

        public Builder setRunElevated(@Nullable Boolean runElevated) {
            this.runElevated = runElevated;
            return this;
        }

        public CommandResponse build() {
            return new CommandResponse(action, alwaysRun, applyUpdateBefore, content, contentType, maxRunTime, name, restartAfter, runAsInteractive, runElevated);
        }
    }
}
