// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.automation;

import io.pulumi.azurenative.automation.enums.SourceType;
import io.pulumi.azurenative.automation.inputs.SourceControlSecurityTokenPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SourceControlArgs extends io.pulumi.resources.ResourceArgs {

    public static final SourceControlArgs Empty = new SourceControlArgs();

    /**
     * The auto async of the source control. Default is false.
     * 
     */
    @Import(name="autoSync")
      private final @Nullable Output<Boolean> autoSync;

    public Output<Boolean> autoSync() {
        return this.autoSync == null ? Codegen.empty() : this.autoSync;
    }

    /**
     * The name of the automation account.
     * 
     */
    @Import(name="automationAccountName", required=true)
      private final Output<String> automationAccountName;

    public Output<String> automationAccountName() {
        return this.automationAccountName;
    }

    /**
     * The repo branch of the source control. Include branch as empty string for VsoTfvc.
     * 
     */
    @Import(name="branch")
      private final @Nullable Output<String> branch;

    public Output<String> branch() {
        return this.branch == null ? Codegen.empty() : this.branch;
    }

    /**
     * The user description of the source control.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The folder path of the source control. Path must be relative.
     * 
     */
    @Import(name="folderPath")
      private final @Nullable Output<String> folderPath;

    public Output<String> folderPath() {
        return this.folderPath == null ? Codegen.empty() : this.folderPath;
    }

    /**
     * The auto publish of the source control. Default is true.
     * 
     */
    @Import(name="publishRunbook")
      private final @Nullable Output<Boolean> publishRunbook;

    public Output<Boolean> publishRunbook() {
        return this.publishRunbook == null ? Codegen.empty() : this.publishRunbook;
    }

    /**
     * The repo url of the source control.
     * 
     */
    @Import(name="repoUrl")
      private final @Nullable Output<String> repoUrl;

    public Output<String> repoUrl() {
        return this.repoUrl == null ? Codegen.empty() : this.repoUrl;
    }

    /**
     * Name of an Azure Resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The authorization token for the repo of the source control.
     * 
     */
    @Import(name="securityToken")
      private final @Nullable Output<SourceControlSecurityTokenPropertiesArgs> securityToken;

    public Output<SourceControlSecurityTokenPropertiesArgs> securityToken() {
        return this.securityToken == null ? Codegen.empty() : this.securityToken;
    }

    /**
     * The source control name.
     * 
     */
    @Import(name="sourceControlName")
      private final @Nullable Output<String> sourceControlName;

    public Output<String> sourceControlName() {
        return this.sourceControlName == null ? Codegen.empty() : this.sourceControlName;
    }

    /**
     * The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.
     * 
     */
    @Import(name="sourceType")
      private final @Nullable Output<Either<String,SourceType>> sourceType;

    public Output<Either<String,SourceType>> sourceType() {
        return this.sourceType == null ? Codegen.empty() : this.sourceType;
    }

    public SourceControlArgs(
        @Nullable Output<Boolean> autoSync,
        Output<String> automationAccountName,
        @Nullable Output<String> branch,
        @Nullable Output<String> description,
        @Nullable Output<String> folderPath,
        @Nullable Output<Boolean> publishRunbook,
        @Nullable Output<String> repoUrl,
        Output<String> resourceGroupName,
        @Nullable Output<SourceControlSecurityTokenPropertiesArgs> securityToken,
        @Nullable Output<String> sourceControlName,
        @Nullable Output<Either<String,SourceType>> sourceType) {
        this.autoSync = autoSync;
        this.automationAccountName = Objects.requireNonNull(automationAccountName, "expected parameter 'automationAccountName' to be non-null");
        this.branch = branch;
        this.description = description;
        this.folderPath = folderPath;
        this.publishRunbook = publishRunbook;
        this.repoUrl = repoUrl;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.securityToken = securityToken;
        this.sourceControlName = sourceControlName;
        this.sourceType = sourceType;
    }

    private SourceControlArgs() {
        this.autoSync = Codegen.empty();
        this.automationAccountName = Codegen.empty();
        this.branch = Codegen.empty();
        this.description = Codegen.empty();
        this.folderPath = Codegen.empty();
        this.publishRunbook = Codegen.empty();
        this.repoUrl = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.securityToken = Codegen.empty();
        this.sourceControlName = Codegen.empty();
        this.sourceType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourceControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> autoSync;
        private Output<String> automationAccountName;
        private @Nullable Output<String> branch;
        private @Nullable Output<String> description;
        private @Nullable Output<String> folderPath;
        private @Nullable Output<Boolean> publishRunbook;
        private @Nullable Output<String> repoUrl;
        private Output<String> resourceGroupName;
        private @Nullable Output<SourceControlSecurityTokenPropertiesArgs> securityToken;
        private @Nullable Output<String> sourceControlName;
        private @Nullable Output<Either<String,SourceType>> sourceType;

        public Builder() {
    	      // Empty
        }

        public Builder(SourceControlArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoSync = defaults.autoSync;
    	      this.automationAccountName = defaults.automationAccountName;
    	      this.branch = defaults.branch;
    	      this.description = defaults.description;
    	      this.folderPath = defaults.folderPath;
    	      this.publishRunbook = defaults.publishRunbook;
    	      this.repoUrl = defaults.repoUrl;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.securityToken = defaults.securityToken;
    	      this.sourceControlName = defaults.sourceControlName;
    	      this.sourceType = defaults.sourceType;
        }

        public Builder autoSync(@Nullable Output<Boolean> autoSync) {
            this.autoSync = autoSync;
            return this;
        }
        public Builder autoSync(@Nullable Boolean autoSync) {
            this.autoSync = Codegen.ofNullable(autoSync);
            return this;
        }
        public Builder automationAccountName(Output<String> automationAccountName) {
            this.automationAccountName = Objects.requireNonNull(automationAccountName);
            return this;
        }
        public Builder automationAccountName(String automationAccountName) {
            this.automationAccountName = Output.of(Objects.requireNonNull(automationAccountName));
            return this;
        }
        public Builder branch(@Nullable Output<String> branch) {
            this.branch = branch;
            return this;
        }
        public Builder branch(@Nullable String branch) {
            this.branch = Codegen.ofNullable(branch);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder folderPath(@Nullable Output<String> folderPath) {
            this.folderPath = folderPath;
            return this;
        }
        public Builder folderPath(@Nullable String folderPath) {
            this.folderPath = Codegen.ofNullable(folderPath);
            return this;
        }
        public Builder publishRunbook(@Nullable Output<Boolean> publishRunbook) {
            this.publishRunbook = publishRunbook;
            return this;
        }
        public Builder publishRunbook(@Nullable Boolean publishRunbook) {
            this.publishRunbook = Codegen.ofNullable(publishRunbook);
            return this;
        }
        public Builder repoUrl(@Nullable Output<String> repoUrl) {
            this.repoUrl = repoUrl;
            return this;
        }
        public Builder repoUrl(@Nullable String repoUrl) {
            this.repoUrl = Codegen.ofNullable(repoUrl);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder securityToken(@Nullable Output<SourceControlSecurityTokenPropertiesArgs> securityToken) {
            this.securityToken = securityToken;
            return this;
        }
        public Builder securityToken(@Nullable SourceControlSecurityTokenPropertiesArgs securityToken) {
            this.securityToken = Codegen.ofNullable(securityToken);
            return this;
        }
        public Builder sourceControlName(@Nullable Output<String> sourceControlName) {
            this.sourceControlName = sourceControlName;
            return this;
        }
        public Builder sourceControlName(@Nullable String sourceControlName) {
            this.sourceControlName = Codegen.ofNullable(sourceControlName);
            return this;
        }
        public Builder sourceType(@Nullable Output<Either<String,SourceType>> sourceType) {
            this.sourceType = sourceType;
            return this;
        }
        public Builder sourceType(@Nullable Either<String,SourceType> sourceType) {
            this.sourceType = Codegen.ofNullable(sourceType);
            return this;
        }        public SourceControlArgs build() {
            return new SourceControlArgs(autoSync, automationAccountName, branch, description, folderPath, publishRunbook, repoUrl, resourceGroupName, securityToken, sourceControlName, sourceType);
        }
    }
}
