// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.alertsmanagement;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.alertsmanagement.HealthAlertArgs;
import io.pulumi.azurenative.alertsmanagement.outputs.HealthAlertActionResponse;
import io.pulumi.azurenative.alertsmanagement.outputs.HealthAlertCriteriaResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * The health alert resource.
API Version: 2020-08-04-preview.

{{% examples %}}
## Example Usage
{{% example %}}
### CreateResourceHealthAlertRule
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var healthAlert = new AzureNative.AlertsManagement.HealthAlert("healthAlert", new AzureNative.AlertsManagement.HealthAlertArgs
        {
            Actions = 
            {
                new AzureNative.AlertsManagement.Inputs.HealthAlertActionArgs
                {
                    ActionGroupId = "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/notificationgroups/group2",
                    WebHookProperties = 
                    {
                        { "key11", "value11" },
                        { "key12", "value12" },
                    },
                },
            },
            Criteria = new AzureNative.AlertsManagement.Inputs.HealthAlertCriteriaArgs
            {
                AllOf = 
                {
                    new AzureNative.AlertsManagement.Inputs.VmGuestHealthAlertCriterionArgs
                    {
                        HealthStates = 
                        {
                            new AzureNative.AlertsManagement.Inputs.HealthStateArgs
                            {
                                Severity = 2,
                            },
                            new AzureNative.AlertsManagement.Inputs.HealthStateArgs
                            {
                                Severity = 3,
                            },
                        },
                        MonitorNames = 
                        {
                            "root",
                        },
                        Namespace = "GuestVmHealth",
                    },
                },
            },
            Description = "This is the description of the rule1",
            Enabled = true,
            Location = "global",
            ResourceGroupName = "gigtest",
            RuleName = "highcpu",
            Scopes = 
            {
                "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme",
            },
        });
    }

}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const healthAlert = new azure_native.alertsmanagement.HealthAlert("healthAlert", {
    actions: [{
        actionGroupId: "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/notificationgroups/group2",
        webHookProperties: {
            key11: "value11",
            key12: "value12",
        },
    }],
    criteria: {
        allOf: [{
            healthStates: [
                {
                    severity: 2,
                },
                {
                    severity: 3,
                },
            ],
            monitorNames: ["root"],
            namespace: "GuestVmHealth",
        }],
    },
    description: "This is the description of the rule1",
    enabled: true,
    location: "global",
    resourceGroupName: "gigtest",
    ruleName: "highcpu",
    scopes: ["/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"],
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

health_alert = azure_native.alertsmanagement.HealthAlert("healthAlert",
    actions=[azure_native.alertsmanagement.HealthAlertActionArgs(
        action_group_id="/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/notificationgroups/group2",
        web_hook_properties={
            "key11": "value11",
            "key12": "value12",
        },
    )],
    criteria=azure_native.alertsmanagement.HealthAlertCriteriaArgs(
        all_of=[{
            "healthStates": [
                azure_native.alertsmanagement.HealthStateArgs(
                    severity=2,
                ),
                azure_native.alertsmanagement.HealthStateArgs(
                    severity=3,
                ),
            ],
            "monitorNames": ["root"],
            "namespace": "GuestVmHealth",
        }],
    ),
    description="This is the description of the rule1",
    enabled=True,
    location="global",
    resource_group_name="gigtest",
    rule_name="highcpu",
    scopes=["/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"])

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:alertsmanagement:HealthAlert myresource1 /subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/Microsoft.AlertsManagement/resourceHealthAlerts/highcpu 
```

 */
@ResourceType(type="azure-native:alertsmanagement:HealthAlert")
public class HealthAlert extends io.pulumi.resources.CustomResource {
    /**
     * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
     */
    @OutputExport(name="actions", type=List.class, parameters={HealthAlertActionResponse.class})
    private Output</* @Nullable */ List<HealthAlertActionResponse>> actions;

    /**
     * @return the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
     */
    public Output</* @Nullable */ List<HealthAlertActionResponse>> getActions() {
        return this.actions;
    }
    /**
     * defines the specific alert criteria information.
     */
    @OutputExport(name="criteria", type=HealthAlertCriteriaResponse.class, parameters={})
    private Output<HealthAlertCriteriaResponse> criteria;

    /**
     * @return defines the specific alert criteria information.
     */
    public Output<HealthAlertCriteriaResponse> getCriteria() {
        return this.criteria;
    }
    /**
     * the description of the health alert that will be included in the alert email.
     */
    @OutputExport(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return the description of the health alert that will be included in the alert email.
     */
    public Output<String> getDescription() {
        return this.description;
    }
    /**
     * the flag that indicates whether the health alert is enabled.
     */
    @OutputExport(name="enabled", type=Boolean.class, parameters={})
    private Output<Boolean> enabled;

    /**
     * @return the flag that indicates whether the health alert is enabled.
     */
    public Output<Boolean> getEnabled() {
        return this.enabled;
    }
    /**
     * Last time the rule was updated in ISO8601 format.
     */
    @OutputExport(name="lastUpdatedTime", type=String.class, parameters={})
    private Output<String> lastUpdatedTime;

    /**
     * @return Last time the rule was updated in ISO8601 format.
     */
    public Output<String> getLastUpdatedTime() {
        return this.lastUpdatedTime;
    }
    /**
     * Resource location
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource location
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Azure resource name
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Azure resource name
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * the list of resource id's that this health alert is scoped to.
     */
    @OutputExport(name="scopes", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> scopes;

    /**
     * @return the list of resource id's that this health alert is scoped to.
     */
    public Output</* @Nullable */ List<String>> getScopes() {
        return this.scopes;
    }
    /**
     * Resource tags
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Azure resource type
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Azure resource type
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public HealthAlert(String name, HealthAlertArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:alertsmanagement:HealthAlert", name, args == null ? HealthAlertArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private HealthAlert(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:alertsmanagement:HealthAlert", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:alertsmanagement/v20200804preview:HealthAlert").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static HealthAlert get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new HealthAlert(name, id, options);
    }
}
