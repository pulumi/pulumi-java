// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.hybridcompute;

import io.pulumi.azurenative.hybridcompute.inputs.LocationDataArgs;
import io.pulumi.azurenative.hybridcompute.inputs.MachineIdentityArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MachineArgs extends io.pulumi.resources.ResourceArgs {

    public static final MachineArgs Empty = new MachineArgs();

    /**
     * Public Key that the client provides to be used during initial resource onboarding
     * 
     */
    @InputImport(name="clientPublicKey")
    private final @Nullable Input<String> clientPublicKey;

    public Input<String> getClientPublicKey() {
        return this.clientPublicKey == null ? Input.empty() : this.clientPublicKey;
    }

    @InputImport(name="identity")
    private final @Nullable Input<MachineIdentityArgs> identity;

    public Input<MachineIdentityArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Metadata pertaining to the geographic location of the resource.
     * 
     */
    @InputImport(name="locationData")
    private final @Nullable Input<LocationDataArgs> locationData;

    public Input<LocationDataArgs> getLocationData() {
        return this.locationData == null ? Input.empty() : this.locationData;
    }

    /**
     * The name of the hybrid machine.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Specifies the hybrid machine unique ID.
     * 
     */
    @InputImport(name="vmId")
    private final @Nullable Input<String> vmId;

    public Input<String> getVmId() {
        return this.vmId == null ? Input.empty() : this.vmId;
    }

    public MachineArgs(
        @Nullable Input<String> clientPublicKey,
        @Nullable Input<MachineIdentityArgs> identity,
        @Nullable Input<String> location,
        @Nullable Input<LocationDataArgs> locationData,
        @Nullable Input<String> name,
        Input<String> resourceGroupName,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> vmId) {
        this.clientPublicKey = clientPublicKey;
        this.identity = identity;
        this.location = location;
        this.locationData = locationData;
        this.name = name;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.vmId = vmId;
    }

    private MachineArgs() {
        this.clientPublicKey = Input.empty();
        this.identity = Input.empty();
        this.location = Input.empty();
        this.locationData = Input.empty();
        this.name = Input.empty();
        this.resourceGroupName = Input.empty();
        this.tags = Input.empty();
        this.vmId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MachineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> clientPublicKey;
        private @Nullable Input<MachineIdentityArgs> identity;
        private @Nullable Input<String> location;
        private @Nullable Input<LocationDataArgs> locationData;
        private @Nullable Input<String> name;
        private Input<String> resourceGroupName;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> vmId;

        public Builder() {
    	      // Empty
        }

        public Builder(MachineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientPublicKey = defaults.clientPublicKey;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.locationData = defaults.locationData;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.vmId = defaults.vmId;
        }

        public Builder setClientPublicKey(@Nullable Input<String> clientPublicKey) {
            this.clientPublicKey = clientPublicKey;
            return this;
        }

        public Builder setClientPublicKey(@Nullable String clientPublicKey) {
            this.clientPublicKey = Input.ofNullable(clientPublicKey);
            return this;
        }

        public Builder setIdentity(@Nullable Input<MachineIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIdentity(@Nullable MachineIdentityArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setLocationData(@Nullable Input<LocationDataArgs> locationData) {
            this.locationData = locationData;
            return this;
        }

        public Builder setLocationData(@Nullable LocationDataArgs locationData) {
            this.locationData = Input.ofNullable(locationData);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVmId(@Nullable Input<String> vmId) {
            this.vmId = vmId;
            return this;
        }

        public Builder setVmId(@Nullable String vmId) {
            this.vmId = Input.ofNullable(vmId);
            return this;
        }

        public MachineArgs build() {
            return new MachineArgs(clientPublicKey, identity, location, locationData, name, resourceGroupName, tags, vmId);
        }
    }
}
