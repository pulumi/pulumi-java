// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.consumption.inputs;

import io.pulumi.azurenative.consumption.inputs.BudgetComparisonExpressionArgs;
import io.pulumi.azurenative.consumption.inputs.BudgetFilterPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * May be used to filter budgets by resource group, resource, or meter.
 * 
 */
public final class BudgetFilterArgs extends io.pulumi.resources.ResourceArgs {

    public static final BudgetFilterArgs Empty = new BudgetFilterArgs();

    /**
     * The logical "AND" expression. Must have at least 2 items.
     * 
     */
    @Import(name="and")
      private final @Nullable Output<List<BudgetFilterPropertiesArgs>> and;

    public Output<List<BudgetFilterPropertiesArgs>> getAnd() {
        return this.and == null ? Codegen.empty() : this.and;
    }

    /**
     * Has comparison expression for a dimension
     * 
     */
    @Import(name="dimensions")
      private final @Nullable Output<BudgetComparisonExpressionArgs> dimensions;

    public Output<BudgetComparisonExpressionArgs> getDimensions() {
        return this.dimensions == null ? Codegen.empty() : this.dimensions;
    }

    /**
     * The logical "NOT" expression.
     * 
     */
    @Import(name="not")
      private final @Nullable Output<BudgetFilterPropertiesArgs> not;

    public Output<BudgetFilterPropertiesArgs> getNot() {
        return this.not == null ? Codegen.empty() : this.not;
    }

    /**
     * Has comparison expression for a tag
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<BudgetComparisonExpressionArgs> tags;

    public Output<BudgetComparisonExpressionArgs> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public BudgetFilterArgs(
        @Nullable Output<List<BudgetFilterPropertiesArgs>> and,
        @Nullable Output<BudgetComparisonExpressionArgs> dimensions,
        @Nullable Output<BudgetFilterPropertiesArgs> not,
        @Nullable Output<BudgetComparisonExpressionArgs> tags) {
        this.and = and;
        this.dimensions = dimensions;
        this.not = not;
        this.tags = tags;
    }

    private BudgetFilterArgs() {
        this.and = Codegen.empty();
        this.dimensions = Codegen.empty();
        this.not = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<BudgetFilterPropertiesArgs>> and;
        private @Nullable Output<BudgetComparisonExpressionArgs> dimensions;
        private @Nullable Output<BudgetFilterPropertiesArgs> not;
        private @Nullable Output<BudgetComparisonExpressionArgs> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.and = defaults.and;
    	      this.dimensions = defaults.dimensions;
    	      this.not = defaults.not;
    	      this.tags = defaults.tags;
        }

        public Builder and(@Nullable Output<List<BudgetFilterPropertiesArgs>> and) {
            this.and = and;
            return this;
        }
        public Builder and(@Nullable List<BudgetFilterPropertiesArgs> and) {
            this.and = Codegen.ofNullable(and);
            return this;
        }
        public Builder and(BudgetFilterPropertiesArgs... and) {
            return and(List.of(and));
        }
        public Builder dimensions(@Nullable Output<BudgetComparisonExpressionArgs> dimensions) {
            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(@Nullable BudgetComparisonExpressionArgs dimensions) {
            this.dimensions = Codegen.ofNullable(dimensions);
            return this;
        }
        public Builder not(@Nullable Output<BudgetFilterPropertiesArgs> not) {
            this.not = not;
            return this;
        }
        public Builder not(@Nullable BudgetFilterPropertiesArgs not) {
            this.not = Codegen.ofNullable(not);
            return this;
        }
        public Builder tags(@Nullable Output<BudgetComparisonExpressionArgs> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable BudgetComparisonExpressionArgs tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public BudgetFilterArgs build() {
            return new BudgetFilterArgs(and, dimensions, not, tags);
        }
    }
}
