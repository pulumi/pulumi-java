// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.network.outputs.AddressSpaceResponse;
import io.pulumi.azurenative.network.outputs.DhcpOptionsResponse;
import io.pulumi.azurenative.network.outputs.ExtendedLocationResponse;
import io.pulumi.azurenative.network.outputs.SubResourceResponse;
import io.pulumi.azurenative.network.outputs.SubnetResponse;
import io.pulumi.azurenative.network.outputs.VirtualNetworkBgpCommunitiesResponse;
import io.pulumi.azurenative.network.outputs.VirtualNetworkPeeringResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Virtual Network resource.
API Version: 2020-11-01.

{{% examples %}}
## Example Usage
{{% example %}}
### Create virtual network
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var virtualNetwork = new AzureNative.Network.VirtualNetwork("virtualNetwork", new AzureNative.Network.VirtualNetworkArgs
        {
            AddressSpace = new AzureNative.Network.Inputs.AddressSpaceArgs
            {
                AddressPrefixes = 
                {
                    "10.0.0.0/16",
                },
            },
            Location = "eastus",
            ResourceGroupName = "rg1",
            VirtualNetworkName = "test-vnet",
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewVirtualNetwork(ctx, "virtualNetwork", &network.VirtualNetworkArgs{
			AddressSpace: &network.AddressSpaceArgs{
				AddressPrefixes: pulumi.StringArray{
					pulumi.String("10.0.0.0/16"),
				},
			},
			Location:           pulumi.String("eastus"),
			ResourceGroupName:  pulumi.String("rg1"),
			VirtualNetworkName: pulumi.String("test-vnet"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const virtualNetwork = new azure_native.network.VirtualNetwork("virtualNetwork", {
    addressSpace: {
        addressPrefixes: ["10.0.0.0/16"],
    },
    location: "eastus",
    resourceGroupName: "rg1",
    virtualNetworkName: "test-vnet",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

virtual_network = azure_native.network.VirtualNetwork("virtualNetwork",
    address_space=azure_native.network.AddressSpaceArgs(
        address_prefixes=["10.0.0.0/16"],
    ),
    location="eastus",
    resource_group_name="rg1",
    virtual_network_name="test-vnet")

```

{{% /example %}}
{{% example %}}
### Create virtual network with Bgp Communities
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var virtualNetwork = new AzureNative.Network.VirtualNetwork("virtualNetwork", new AzureNative.Network.VirtualNetworkArgs
        {
            AddressSpace = new AzureNative.Network.Inputs.AddressSpaceArgs
            {
                AddressPrefixes = 
                {
                    "10.0.0.0/16",
                },
            },
            BgpCommunities = new AzureNative.Network.Inputs.VirtualNetworkBgpCommunitiesArgs
            {
                VirtualNetworkCommunity = "12076:20000",
            },
            Location = "eastus",
            ResourceGroupName = "rg1",
            Subnets = 
            {
                new AzureNative.Network.Inputs.SubnetArgs
                {
                    AddressPrefix = "10.0.0.0/24",
                    Name = "test-1",
                },
            },
            VirtualNetworkName = "test-vnet",
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewVirtualNetwork(ctx, "virtualNetwork", &network.VirtualNetworkArgs{
			AddressSpace: &network.AddressSpaceArgs{
				AddressPrefixes: pulumi.StringArray{
					pulumi.String("10.0.0.0/16"),
				},
			},
			BgpCommunities: &network.VirtualNetworkBgpCommunitiesArgs{
				VirtualNetworkCommunity: pulumi.String("12076:20000"),
			},
			Location:          pulumi.String("eastus"),
			ResourceGroupName: pulumi.String("rg1"),
			Subnets: []network.SubnetArgs{
				&network.SubnetArgs{
					AddressPrefix: pulumi.String("10.0.0.0/24"),
					Name:          pulumi.String("test-1"),
				},
			},
			VirtualNetworkName: pulumi.String("test-vnet"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const virtualNetwork = new azure_native.network.VirtualNetwork("virtualNetwork", {
    addressSpace: {
        addressPrefixes: ["10.0.0.0/16"],
    },
    bgpCommunities: {
        virtualNetworkCommunity: "12076:20000",
    },
    location: "eastus",
    resourceGroupName: "rg1",
    subnets: [{
        addressPrefix: "10.0.0.0/24",
        name: "test-1",
    }],
    virtualNetworkName: "test-vnet",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

virtual_network = azure_native.network.VirtualNetwork("virtualNetwork",
    address_space=azure_native.network.AddressSpaceArgs(
        address_prefixes=["10.0.0.0/16"],
    ),
    bgp_communities=azure_native.network.VirtualNetworkBgpCommunitiesArgs(
        virtual_network_community="12076:20000",
    ),
    location="eastus",
    resource_group_name="rg1",
    subnets=[azure_native.network.SubnetArgs(
        address_prefix="10.0.0.0/24",
        name="test-1",
    )],
    virtual_network_name="test-vnet")

```

{{% /example %}}
{{% example %}}
### Create virtual network with delegated subnets
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var virtualNetwork = new AzureNative.Network.VirtualNetwork("virtualNetwork", new AzureNative.Network.VirtualNetworkArgs
        {
            AddressSpace = new AzureNative.Network.Inputs.AddressSpaceArgs
            {
                AddressPrefixes = 
                {
                    "10.0.0.0/16",
                },
            },
            Location = "westcentralus",
            ResourceGroupName = "rg1",
            Subnets = 
            {
                new AzureNative.Network.Inputs.SubnetArgs
                {
                    AddressPrefix = "10.0.0.0/24",
                    Delegations = 
                    {
                        new AzureNative.Network.Inputs.DelegationArgs
                        {
                            Name = "myDelegation",
                            ServiceName = "Microsoft.Sql/managedInstances",
                        },
                    },
                    Name = "test-1",
                },
            },
            VirtualNetworkName = "test-vnet",
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewVirtualNetwork(ctx, "virtualNetwork", &network.VirtualNetworkArgs{
			AddressSpace: &network.AddressSpaceArgs{
				AddressPrefixes: pulumi.StringArray{
					pulumi.String("10.0.0.0/16"),
				},
			},
			Location:          pulumi.String("westcentralus"),
			ResourceGroupName: pulumi.String("rg1"),
			Subnets: []network.SubnetArgs{
				&network.SubnetArgs{
					AddressPrefix: pulumi.String("10.0.0.0/24"),
					Delegations: network.DelegationArray{
						&network.DelegationArgs{
							Name:        pulumi.String("myDelegation"),
							ServiceName: pulumi.String("Microsoft.Sql/managedInstances"),
						},
					},
					Name: pulumi.String("test-1"),
				},
			},
			VirtualNetworkName: pulumi.String("test-vnet"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const virtualNetwork = new azure_native.network.VirtualNetwork("virtualNetwork", {
    addressSpace: {
        addressPrefixes: ["10.0.0.0/16"],
    },
    location: "westcentralus",
    resourceGroupName: "rg1",
    subnets: [{
        addressPrefix: "10.0.0.0/24",
        delegations: [{
            name: "myDelegation",
            serviceName: "Microsoft.Sql/managedInstances",
        }],
        name: "test-1",
    }],
    virtualNetworkName: "test-vnet",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

virtual_network = azure_native.network.VirtualNetwork("virtualNetwork",
    address_space=azure_native.network.AddressSpaceArgs(
        address_prefixes=["10.0.0.0/16"],
    ),
    location="westcentralus",
    resource_group_name="rg1",
    subnets=[azure_native.network.SubnetArgs(
        address_prefix="10.0.0.0/24",
        delegations=[azure_native.network.DelegationArgs(
            name="myDelegation",
            service_name="Microsoft.Sql/managedInstances",
        )],
        name="test-1",
    )],
    virtual_network_name="test-vnet")

```

{{% /example %}}
{{% example %}}
### Create virtual network with service endpoints
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var virtualNetwork = new AzureNative.Network.VirtualNetwork("virtualNetwork", new AzureNative.Network.VirtualNetworkArgs
        {
            AddressSpace = new AzureNative.Network.Inputs.AddressSpaceArgs
            {
                AddressPrefixes = 
                {
                    "10.0.0.0/16",
                },
            },
            Location = "eastus",
            ResourceGroupName = "vnetTest",
            Subnets = 
            {
                new AzureNative.Network.Inputs.SubnetArgs
                {
                    AddressPrefix = "10.0.0.0/16",
                    Name = "test-1",
                    ServiceEndpoints = 
                    {
                        new AzureNative.Network.Inputs.ServiceEndpointPropertiesFormatArgs
                        {
                            Service = "Microsoft.Storage",
                        },
                    },
                },
            },
            VirtualNetworkName = "vnet1",
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewVirtualNetwork(ctx, "virtualNetwork", &network.VirtualNetworkArgs{
			AddressSpace: &network.AddressSpaceArgs{
				AddressPrefixes: pulumi.StringArray{
					pulumi.String("10.0.0.0/16"),
				},
			},
			Location:          pulumi.String("eastus"),
			ResourceGroupName: pulumi.String("vnetTest"),
			Subnets: []network.SubnetArgs{
				&network.SubnetArgs{
					AddressPrefix: pulumi.String("10.0.0.0/16"),
					Name:          pulumi.String("test-1"),
					ServiceEndpoints: network.ServiceEndpointPropertiesFormatArray{
						&network.ServiceEndpointPropertiesFormatArgs{
							Service: pulumi.String("Microsoft.Storage"),
						},
					},
				},
			},
			VirtualNetworkName: pulumi.String("vnet1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const virtualNetwork = new azure_native.network.VirtualNetwork("virtualNetwork", {
    addressSpace: {
        addressPrefixes: ["10.0.0.0/16"],
    },
    location: "eastus",
    resourceGroupName: "vnetTest",
    subnets: [{
        addressPrefix: "10.0.0.0/16",
        name: "test-1",
        serviceEndpoints: [{
            service: "Microsoft.Storage",
        }],
    }],
    virtualNetworkName: "vnet1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

virtual_network = azure_native.network.VirtualNetwork("virtualNetwork",
    address_space=azure_native.network.AddressSpaceArgs(
        address_prefixes=["10.0.0.0/16"],
    ),
    location="eastus",
    resource_group_name="vnetTest",
    subnets=[azure_native.network.SubnetArgs(
        address_prefix="10.0.0.0/16",
        name="test-1",
        service_endpoints=[azure_native.network.ServiceEndpointPropertiesFormatArgs(
            service="Microsoft.Storage",
        )],
    )],
    virtual_network_name="vnet1")

```

{{% /example %}}
{{% example %}}
### Create virtual network with service endpoints and service endpoint policy
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var virtualNetwork = new AzureNative.Network.VirtualNetwork("virtualNetwork", new AzureNative.Network.VirtualNetworkArgs
        {
            AddressSpace = new AzureNative.Network.Inputs.AddressSpaceArgs
            {
                AddressPrefixes = 
                {
                    "10.0.0.0/16",
                },
            },
            Location = "eastus2euap",
            ResourceGroupName = "vnetTest",
            Subnets = 
            {
                new AzureNative.Network.Inputs.SubnetArgs
                {
                    AddressPrefix = "10.0.0.0/16",
                    Name = "test-1",
                    ServiceEndpointPolicies = 
                    {
                        new AzureNative.Network.Inputs.ServiceEndpointPolicyArgs
                        {
                            Id = "/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/serviceEndpointPolicies/ServiceEndpointPolicy1",
                        },
                    },
                    ServiceEndpoints = 
                    {
                        new AzureNative.Network.Inputs.ServiceEndpointPropertiesFormatArgs
                        {
                            Service = "Microsoft.Storage",
                        },
                    },
                },
            },
            VirtualNetworkName = "vnet1",
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewVirtualNetwork(ctx, "virtualNetwork", &network.VirtualNetworkArgs{
			AddressSpace: &network.AddressSpaceArgs{
				AddressPrefixes: pulumi.StringArray{
					pulumi.String("10.0.0.0/16"),
				},
			},
			Location:          pulumi.String("eastus2euap"),
			ResourceGroupName: pulumi.String("vnetTest"),
			Subnets: []network.SubnetArgs{
				&network.SubnetArgs{
					AddressPrefix: pulumi.String("10.0.0.0/16"),
					Name:          pulumi.String("test-1"),
					ServiceEndpointPolicies: network.ServiceEndpointPolicyArray{
						&network.ServiceEndpointPolicyArgs{
							Id: pulumi.String("/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/serviceEndpointPolicies/ServiceEndpointPolicy1"),
						},
					},
					ServiceEndpoints: network.ServiceEndpointPropertiesFormatArray{
						&network.ServiceEndpointPropertiesFormatArgs{
							Service: pulumi.String("Microsoft.Storage"),
						},
					},
				},
			},
			VirtualNetworkName: pulumi.String("vnet1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const virtualNetwork = new azure_native.network.VirtualNetwork("virtualNetwork", {
    addressSpace: {
        addressPrefixes: ["10.0.0.0/16"],
    },
    location: "eastus2euap",
    resourceGroupName: "vnetTest",
    subnets: [{
        addressPrefix: "10.0.0.0/16",
        name: "test-1",
        serviceEndpointPolicies: [{
            id: "/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/serviceEndpointPolicies/ServiceEndpointPolicy1",
        }],
        serviceEndpoints: [{
            service: "Microsoft.Storage",
        }],
    }],
    virtualNetworkName: "vnet1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

virtual_network = azure_native.network.VirtualNetwork("virtualNetwork",
    address_space=azure_native.network.AddressSpaceArgs(
        address_prefixes=["10.0.0.0/16"],
    ),
    location="eastus2euap",
    resource_group_name="vnetTest",
    subnets=[azure_native.network.SubnetArgs(
        address_prefix="10.0.0.0/16",
        name="test-1",
        service_endpoint_policies=[azure_native.network.ServiceEndpointPolicyArgs(
            id="/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/serviceEndpointPolicies/ServiceEndpointPolicy1",
        )],
        service_endpoints=[azure_native.network.ServiceEndpointPropertiesFormatArgs(
            service="Microsoft.Storage",
        )],
    )],
    virtual_network_name="vnet1")

```

{{% /example %}}
{{% example %}}
### Create virtual network with subnet
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var virtualNetwork = new AzureNative.Network.VirtualNetwork("virtualNetwork", new AzureNative.Network.VirtualNetworkArgs
        {
            AddressSpace = new AzureNative.Network.Inputs.AddressSpaceArgs
            {
                AddressPrefixes = 
                {
                    "10.0.0.0/16",
                },
            },
            Location = "eastus",
            ResourceGroupName = "rg1",
            Subnets = 
            {
                new AzureNative.Network.Inputs.SubnetArgs
                {
                    AddressPrefix = "10.0.0.0/24",
                    Name = "test-1",
                },
            },
            VirtualNetworkName = "test-vnet",
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewVirtualNetwork(ctx, "virtualNetwork", &network.VirtualNetworkArgs{
			AddressSpace: &network.AddressSpaceArgs{
				AddressPrefixes: pulumi.StringArray{
					pulumi.String("10.0.0.0/16"),
				},
			},
			Location:          pulumi.String("eastus"),
			ResourceGroupName: pulumi.String("rg1"),
			Subnets: []network.SubnetArgs{
				&network.SubnetArgs{
					AddressPrefix: pulumi.String("10.0.0.0/24"),
					Name:          pulumi.String("test-1"),
				},
			},
			VirtualNetworkName: pulumi.String("test-vnet"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const virtualNetwork = new azure_native.network.VirtualNetwork("virtualNetwork", {
    addressSpace: {
        addressPrefixes: ["10.0.0.0/16"],
    },
    location: "eastus",
    resourceGroupName: "rg1",
    subnets: [{
        addressPrefix: "10.0.0.0/24",
        name: "test-1",
    }],
    virtualNetworkName: "test-vnet",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

virtual_network = azure_native.network.VirtualNetwork("virtualNetwork",
    address_space=azure_native.network.AddressSpaceArgs(
        address_prefixes=["10.0.0.0/16"],
    ),
    location="eastus",
    resource_group_name="rg1",
    subnets=[azure_native.network.SubnetArgs(
        address_prefix="10.0.0.0/24",
        name="test-1",
    )],
    virtual_network_name="test-vnet")

```

{{% /example %}}
{{% example %}}
### Create virtual network with subnet containing address prefixes
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var virtualNetwork = new AzureNative.Network.VirtualNetwork("virtualNetwork", new AzureNative.Network.VirtualNetworkArgs
        {
            AddressSpace = new AzureNative.Network.Inputs.AddressSpaceArgs
            {
                AddressPrefixes = 
                {
                    "10.0.0.0/16",
                },
            },
            Location = "eastus",
            ResourceGroupName = "rg1",
            Subnets = 
            {
                new AzureNative.Network.Inputs.SubnetArgs
                {
                    AddressPrefixes = 
                    {
                        "10.0.0.0/28",
                        "10.0.1.0/28",
                    },
                    Name = "test-2",
                },
            },
            VirtualNetworkName = "test-vnet",
        });
    }

}

```

```go
package main

import (
	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := network.NewVirtualNetwork(ctx, "virtualNetwork", &network.VirtualNetworkArgs{
			AddressSpace: &network.AddressSpaceArgs{
				AddressPrefixes: pulumi.StringArray{
					pulumi.String("10.0.0.0/16"),
				},
			},
			Location:          pulumi.String("eastus"),
			ResourceGroupName: pulumi.String("rg1"),
			Subnets: []network.SubnetArgs{
				&network.SubnetArgs{
					AddressPrefixes: pulumi.StringArray{
						pulumi.String("10.0.0.0/28"),
						pulumi.String("10.0.1.0/28"),
					},
					Name: pulumi.String("test-2"),
				},
			},
			VirtualNetworkName: pulumi.String("test-vnet"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const virtualNetwork = new azure_native.network.VirtualNetwork("virtualNetwork", {
    addressSpace: {
        addressPrefixes: ["10.0.0.0/16"],
    },
    location: "eastus",
    resourceGroupName: "rg1",
    subnets: [{
        addressPrefixes: [
            "10.0.0.0/28",
            "10.0.1.0/28",
        ],
        name: "test-2",
    }],
    virtualNetworkName: "test-vnet",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

virtual_network = azure_native.network.VirtualNetwork("virtualNetwork",
    address_space=azure_native.network.AddressSpaceArgs(
        address_prefixes=["10.0.0.0/16"],
    ),
    location="eastus",
    resource_group_name="rg1",
    subnets=[azure_native.network.SubnetArgs(
        address_prefixes=[
            "10.0.0.0/28",
            "10.0.1.0/28",
        ],
        name="test-2",
    )],
    virtual_network_name="test-vnet")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:network:VirtualNetwork test-vnet /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet 
```

 */
@ResourceType(type="azure-native:network:VirtualNetwork")
public class VirtualNetwork extends io.pulumi.resources.CustomResource {
    /**
     * The AddressSpace that contains an array of IP address ranges that can be used by subnets.
     */
    @OutputExport(name="addressSpace", type=AddressSpaceResponse.class, parameters={})
    private Output</* @Nullable */ AddressSpaceResponse> addressSpace;

    /**
     * @return The AddressSpace that contains an array of IP address ranges that can be used by subnets.
     */
    public Output</* @Nullable */ AddressSpaceResponse> getAddressSpace() {
        return this.addressSpace;
    }
    /**
     * Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
     */
    @OutputExport(name="bgpCommunities", type=VirtualNetworkBgpCommunitiesResponse.class, parameters={})
    private Output</* @Nullable */ VirtualNetworkBgpCommunitiesResponse> bgpCommunities;

    /**
     * @return Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
     */
    public Output</* @Nullable */ VirtualNetworkBgpCommunitiesResponse> getBgpCommunities() {
        return this.bgpCommunities;
    }
    /**
     * The DDoS protection plan associated with the virtual network.
     */
    @OutputExport(name="ddosProtectionPlan", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> ddosProtectionPlan;

    /**
     * @return The DDoS protection plan associated with the virtual network.
     */
    public Output</* @Nullable */ SubResourceResponse> getDdosProtectionPlan() {
        return this.ddosProtectionPlan;
    }
    /**
     * The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
     */
    @OutputExport(name="dhcpOptions", type=DhcpOptionsResponse.class, parameters={})
    private Output</* @Nullable */ DhcpOptionsResponse> dhcpOptions;

    /**
     * @return The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
     */
    public Output</* @Nullable */ DhcpOptionsResponse> getDhcpOptions() {
        return this.dhcpOptions;
    }
    /**
     * Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
     */
    @OutputExport(name="enableDdosProtection", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableDdosProtection;

    /**
     * @return Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
     */
    public Output</* @Nullable */ Boolean> getEnableDdosProtection() {
        return this.enableDdosProtection;
    }
    /**
     * Indicates if VM protection is enabled for all the subnets in the virtual network.
     */
    @OutputExport(name="enableVmProtection", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableVmProtection;

    /**
     * @return Indicates if VM protection is enabled for all the subnets in the virtual network.
     */
    public Output</* @Nullable */ Boolean> getEnableVmProtection() {
        return this.enableVmProtection;
    }
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    @OutputExport(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * The extended location of the virtual network.
     */
    @OutputExport(name="extendedLocation", type=ExtendedLocationResponse.class, parameters={})
    private Output</* @Nullable */ ExtendedLocationResponse> extendedLocation;

    /**
     * @return The extended location of the virtual network.
     */
    public Output</* @Nullable */ ExtendedLocationResponse> getExtendedLocation() {
        return this.extendedLocation;
    }
    /**
     * Array of IpAllocation which reference this VNET.
     */
    @OutputExport(name="ipAllocations", type=List.class, parameters={SubResourceResponse.class})
    private Output</* @Nullable */ List<SubResourceResponse>> ipAllocations;

    /**
     * @return Array of IpAllocation which reference this VNET.
     */
    public Output</* @Nullable */ List<SubResourceResponse>> getIpAllocations() {
        return this.ipAllocations;
    }
    /**
     * Resource location.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return Resource location.
     */
    public Output</* @Nullable */ String> getLocation() {
        return this.location;
    }
    /**
     * Resource name.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The provisioning state of the virtual network resource.
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning state of the virtual network resource.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The resourceGuid property of the Virtual Network resource.
     */
    @OutputExport(name="resourceGuid", type=String.class, parameters={})
    private Output<String> resourceGuid;

    /**
     * @return The resourceGuid property of the Virtual Network resource.
     */
    public Output<String> getResourceGuid() {
        return this.resourceGuid;
    }
    /**
     * A list of subnets in a Virtual Network.
     */
    @OutputExport(name="subnets", type=List.class, parameters={SubnetResponse.class})
    private Output</* @Nullable */ List<SubnetResponse>> subnets;

    /**
     * @return A list of subnets in a Virtual Network.
     */
    public Output</* @Nullable */ List<SubnetResponse>> getSubnets() {
        return this.subnets;
    }
    /**
     * Resource tags.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Resource type.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type.
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * A list of peerings in a Virtual Network.
     */
    @OutputExport(name="virtualNetworkPeerings", type=List.class, parameters={VirtualNetworkPeeringResponse.class})
    private Output</* @Nullable */ List<VirtualNetworkPeeringResponse>> virtualNetworkPeerings;

    /**
     * @return A list of peerings in a Virtual Network.
     */
    public Output</* @Nullable */ List<VirtualNetworkPeeringResponse>> getVirtualNetworkPeerings() {
        return this.virtualNetworkPeerings;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualNetwork(String name, VirtualNetworkArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:network:VirtualNetwork", name, args == null ? VirtualNetworkArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private VirtualNetwork(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:network:VirtualNetwork", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:network/v20150501preview:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20150615:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20160330:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20160601:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20160901:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20161201:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20170301:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20170601:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20170801:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20170901:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20171001:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20171101:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20180101:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20180201:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20180401:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20180601:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20180701:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20180801:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20181001:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20181101:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20181201:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190201:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190401:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190601:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190701:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190801:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20190901:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20191101:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20191201:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200301:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200401:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200501:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200601:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200701:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20200801:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20201101:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20210201:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20210301:VirtualNetwork").build()),
                Input.of(Alias.builder().setType("azure-native:network/v20210501:VirtualNetwork").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualNetwork get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new VirtualNetwork(name, id, options);
    }
}
