// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.batch.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CIFSMountConfigurationResponse extends io.pulumi.resources.InvokeArgs {

    public static final CIFSMountConfigurationResponse Empty = new CIFSMountConfigurationResponse();

    /**
     * These are 'net use' options in Windows and 'mount' options in Linux.
     * 
     */
    @InputImport(name="mountOptions")
      private final @Nullable String mountOptions;

    public Optional<String> getMountOptions() {
        return this.mountOptions == null ? Optional.empty() : Optional.ofNullable(this.mountOptions);
    }

    @InputImport(name="password", required=true)
      private final String password;

    public String getPassword() {
        return this.password;
    }

    /**
     * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
     * 
     */
    @InputImport(name="relativeMountPath", required=true)
      private final String relativeMountPath;

    public String getRelativeMountPath() {
        return this.relativeMountPath;
    }

    @InputImport(name="source", required=true)
      private final String source;

    public String getSource() {
        return this.source;
    }

    @InputImport(name="username", required=true)
      private final String username;

    public String getUsername() {
        return this.username;
    }

    public CIFSMountConfigurationResponse(
        @Nullable String mountOptions,
        String password,
        String relativeMountPath,
        String source,
        String username) {
        this.mountOptions = mountOptions;
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.relativeMountPath = Objects.requireNonNull(relativeMountPath, "expected parameter 'relativeMountPath' to be non-null");
        this.source = Objects.requireNonNull(source, "expected parameter 'source' to be non-null");
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
    }

    private CIFSMountConfigurationResponse() {
        this.mountOptions = null;
        this.password = null;
        this.relativeMountPath = null;
        this.source = null;
        this.username = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CIFSMountConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String mountOptions;
        private String password;
        private String relativeMountPath;
        private String source;
        private String username;

        public Builder() {
    	      // Empty
        }

        public Builder(CIFSMountConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mountOptions = defaults.mountOptions;
    	      this.password = defaults.password;
    	      this.relativeMountPath = defaults.relativeMountPath;
    	      this.source = defaults.source;
    	      this.username = defaults.username;
        }

        public Builder mountOptions(@Nullable String mountOptions) {
            this.mountOptions = mountOptions;
            return this;
        }

        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder relativeMountPath(String relativeMountPath) {
            this.relativeMountPath = Objects.requireNonNull(relativeMountPath);
            return this;
        }

        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }

        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public CIFSMountConfigurationResponse build() {
            return new CIFSMountConfigurationResponse(mountOptions, password, relativeMountPath, source, username);
        }
    }
}
