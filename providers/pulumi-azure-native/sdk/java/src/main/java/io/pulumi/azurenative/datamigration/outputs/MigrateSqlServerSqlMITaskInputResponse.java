// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.outputs;

import io.pulumi.azurenative.datamigration.outputs.BlobShareResponse;
import io.pulumi.azurenative.datamigration.outputs.FileShareResponse;
import io.pulumi.azurenative.datamigration.outputs.MigrateSqlServerSqlMIDatabaseInputResponse;
import io.pulumi.azurenative.datamigration.outputs.SqlConnectionInfoResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class MigrateSqlServerSqlMITaskInputResponse {
    private final BlobShareResponse backupBlobShare;
    private final @Nullable FileShareResponse backupFileShare;
    private final @Nullable String backupMode;
    private final @Nullable List<String> selectedAgentJobs;
    private final List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases;
    private final @Nullable List<String> selectedLogins;
    private final SqlConnectionInfoResponse sourceConnectionInfo;
    private final SqlConnectionInfoResponse targetConnectionInfo;

    @OutputCustomType.Constructor({"backupBlobShare","backupFileShare","backupMode","selectedAgentJobs","selectedDatabases","selectedLogins","sourceConnectionInfo","targetConnectionInfo"})
    private MigrateSqlServerSqlMITaskInputResponse(
        BlobShareResponse backupBlobShare,
        @Nullable FileShareResponse backupFileShare,
        @Nullable String backupMode,
        @Nullable List<String> selectedAgentJobs,
        List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases,
        @Nullable List<String> selectedLogins,
        SqlConnectionInfoResponse sourceConnectionInfo,
        SqlConnectionInfoResponse targetConnectionInfo) {
        this.backupBlobShare = Objects.requireNonNull(backupBlobShare);
        this.backupFileShare = backupFileShare;
        this.backupMode = backupMode;
        this.selectedAgentJobs = selectedAgentJobs;
        this.selectedDatabases = Objects.requireNonNull(selectedDatabases);
        this.selectedLogins = selectedLogins;
        this.sourceConnectionInfo = Objects.requireNonNull(sourceConnectionInfo);
        this.targetConnectionInfo = Objects.requireNonNull(targetConnectionInfo);
    }

    public BlobShareResponse getBackupBlobShare() {
        return this.backupBlobShare;
    }
    public Optional<FileShareResponse> getBackupFileShare() {
        return Optional.ofNullable(this.backupFileShare);
    }
    public Optional<String> getBackupMode() {
        return Optional.ofNullable(this.backupMode);
    }
    public List<String> getSelectedAgentJobs() {
        return this.selectedAgentJobs == null ? List.of() : this.selectedAgentJobs;
    }
    public List<MigrateSqlServerSqlMIDatabaseInputResponse> getSelectedDatabases() {
        return this.selectedDatabases;
    }
    public List<String> getSelectedLogins() {
        return this.selectedLogins == null ? List.of() : this.selectedLogins;
    }
    public SqlConnectionInfoResponse getSourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }
    public SqlConnectionInfoResponse getTargetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlMITaskInputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlobShareResponse backupBlobShare;
        private @Nullable FileShareResponse backupFileShare;
        private @Nullable String backupMode;
        private @Nullable List<String> selectedAgentJobs;
        private List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases;
        private @Nullable List<String> selectedLogins;
        private SqlConnectionInfoResponse sourceConnectionInfo;
        private SqlConnectionInfoResponse targetConnectionInfo;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrateSqlServerSqlMITaskInputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupBlobShare = defaults.backupBlobShare;
    	      this.backupFileShare = defaults.backupFileShare;
    	      this.backupMode = defaults.backupMode;
    	      this.selectedAgentJobs = defaults.selectedAgentJobs;
    	      this.selectedDatabases = defaults.selectedDatabases;
    	      this.selectedLogins = defaults.selectedLogins;
    	      this.sourceConnectionInfo = defaults.sourceConnectionInfo;
    	      this.targetConnectionInfo = defaults.targetConnectionInfo;
        }

        public Builder setBackupBlobShare(BlobShareResponse backupBlobShare) {
            this.backupBlobShare = Objects.requireNonNull(backupBlobShare);
            return this;
        }

        public Builder setBackupFileShare(@Nullable FileShareResponse backupFileShare) {
            this.backupFileShare = backupFileShare;
            return this;
        }

        public Builder setBackupMode(@Nullable String backupMode) {
            this.backupMode = backupMode;
            return this;
        }

        public Builder setSelectedAgentJobs(@Nullable List<String> selectedAgentJobs) {
            this.selectedAgentJobs = selectedAgentJobs;
            return this;
        }

        public Builder setSelectedDatabases(List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases) {
            this.selectedDatabases = Objects.requireNonNull(selectedDatabases);
            return this;
        }

        public Builder setSelectedLogins(@Nullable List<String> selectedLogins) {
            this.selectedLogins = selectedLogins;
            return this;
        }

        public Builder setSourceConnectionInfo(SqlConnectionInfoResponse sourceConnectionInfo) {
            this.sourceConnectionInfo = Objects.requireNonNull(sourceConnectionInfo);
            return this;
        }

        public Builder setTargetConnectionInfo(SqlConnectionInfoResponse targetConnectionInfo) {
            this.targetConnectionInfo = Objects.requireNonNull(targetConnectionInfo);
            return this;
        }

        public MigrateSqlServerSqlMITaskInputResponse build() {
            return new MigrateSqlServerSqlMITaskInputResponse(backupBlobShare, backupFileShare, backupMode, selectedAgentJobs, selectedDatabases, selectedLogins, sourceConnectionInfo, targetConnectionInfo);
        }
    }
}
