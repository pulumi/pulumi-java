// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Hyper-V Replica specific policy Input.
 * 
 */
public final class HyperVReplicaPolicyInputArgs extends io.pulumi.resources.ResourceArgs {

    public static final HyperVReplicaPolicyInputArgs Empty = new HyperVReplicaPolicyInputArgs();

    /**
     * A value indicating the authentication type.
     * 
     */
    @Import(name="allowedAuthenticationType")
      private final @Nullable Output<Integer> allowedAuthenticationType;

    public Output<Integer> getAllowedAuthenticationType() {
        return this.allowedAuthenticationType == null ? Output.empty() : this.allowedAuthenticationType;
    }

    /**
     * A value indicating the application consistent frequency.
     * 
     */
    @Import(name="applicationConsistentSnapshotFrequencyInHours")
      private final @Nullable Output<Integer> applicationConsistentSnapshotFrequencyInHours;

    public Output<Integer> getApplicationConsistentSnapshotFrequencyInHours() {
        return this.applicationConsistentSnapshotFrequencyInHours == null ? Output.empty() : this.applicationConsistentSnapshotFrequencyInHours;
    }

    /**
     * A value indicating whether compression has to be enabled.
     * 
     */
    @Import(name="compression")
      private final @Nullable Output<String> compression;

    public Output<String> getCompression() {
        return this.compression == null ? Output.empty() : this.compression;
    }

    /**
     * A value indicating whether IR is online.
     * 
     */
    @Import(name="initialReplicationMethod")
      private final @Nullable Output<String> initialReplicationMethod;

    public Output<String> getInitialReplicationMethod() {
        return this.initialReplicationMethod == null ? Output.empty() : this.initialReplicationMethod;
    }

    /**
     * The class type.
     * Expected value is 'HyperVReplica2012'.
     * 
     */
    @Import(name="instanceType")
      private final @Nullable Output<String> instanceType;

    public Output<String> getInstanceType() {
        return this.instanceType == null ? Output.empty() : this.instanceType;
    }

    /**
     * A value indicating the offline IR export path.
     * 
     */
    @Import(name="offlineReplicationExportPath")
      private final @Nullable Output<String> offlineReplicationExportPath;

    public Output<String> getOfflineReplicationExportPath() {
        return this.offlineReplicationExportPath == null ? Output.empty() : this.offlineReplicationExportPath;
    }

    /**
     * A value indicating the offline IR import path.
     * 
     */
    @Import(name="offlineReplicationImportPath")
      private final @Nullable Output<String> offlineReplicationImportPath;

    public Output<String> getOfflineReplicationImportPath() {
        return this.offlineReplicationImportPath == null ? Output.empty() : this.offlineReplicationImportPath;
    }

    /**
     * A value indicating the online IR start time.
     * 
     */
    @Import(name="onlineReplicationStartTime")
      private final @Nullable Output<String> onlineReplicationStartTime;

    public Output<String> getOnlineReplicationStartTime() {
        return this.onlineReplicationStartTime == null ? Output.empty() : this.onlineReplicationStartTime;
    }

    /**
     * A value indicating the number of recovery points.
     * 
     */
    @Import(name="recoveryPoints")
      private final @Nullable Output<Integer> recoveryPoints;

    public Output<Integer> getRecoveryPoints() {
        return this.recoveryPoints == null ? Output.empty() : this.recoveryPoints;
    }

    /**
     * A value indicating whether the VM has to be auto deleted.
     * 
     */
    @Import(name="replicaDeletion")
      private final @Nullable Output<String> replicaDeletion;

    public Output<String> getReplicaDeletion() {
        return this.replicaDeletion == null ? Output.empty() : this.replicaDeletion;
    }

    /**
     * A value indicating the recovery HTTPS port.
     * 
     */
    @Import(name="replicationPort")
      private final @Nullable Output<Integer> replicationPort;

    public Output<Integer> getReplicationPort() {
        return this.replicationPort == null ? Output.empty() : this.replicationPort;
    }

    public HyperVReplicaPolicyInputArgs(
        @Nullable Output<Integer> allowedAuthenticationType,
        @Nullable Output<Integer> applicationConsistentSnapshotFrequencyInHours,
        @Nullable Output<String> compression,
        @Nullable Output<String> initialReplicationMethod,
        @Nullable Output<String> instanceType,
        @Nullable Output<String> offlineReplicationExportPath,
        @Nullable Output<String> offlineReplicationImportPath,
        @Nullable Output<String> onlineReplicationStartTime,
        @Nullable Output<Integer> recoveryPoints,
        @Nullable Output<String> replicaDeletion,
        @Nullable Output<Integer> replicationPort) {
        this.allowedAuthenticationType = allowedAuthenticationType;
        this.applicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHours;
        this.compression = compression;
        this.initialReplicationMethod = initialReplicationMethod;
        this.instanceType = instanceType;
        this.offlineReplicationExportPath = offlineReplicationExportPath;
        this.offlineReplicationImportPath = offlineReplicationImportPath;
        this.onlineReplicationStartTime = onlineReplicationStartTime;
        this.recoveryPoints = recoveryPoints;
        this.replicaDeletion = replicaDeletion;
        this.replicationPort = replicationPort;
    }

    private HyperVReplicaPolicyInputArgs() {
        this.allowedAuthenticationType = Output.empty();
        this.applicationConsistentSnapshotFrequencyInHours = Output.empty();
        this.compression = Output.empty();
        this.initialReplicationMethod = Output.empty();
        this.instanceType = Output.empty();
        this.offlineReplicationExportPath = Output.empty();
        this.offlineReplicationImportPath = Output.empty();
        this.onlineReplicationStartTime = Output.empty();
        this.recoveryPoints = Output.empty();
        this.replicaDeletion = Output.empty();
        this.replicationPort = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HyperVReplicaPolicyInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> allowedAuthenticationType;
        private @Nullable Output<Integer> applicationConsistentSnapshotFrequencyInHours;
        private @Nullable Output<String> compression;
        private @Nullable Output<String> initialReplicationMethod;
        private @Nullable Output<String> instanceType;
        private @Nullable Output<String> offlineReplicationExportPath;
        private @Nullable Output<String> offlineReplicationImportPath;
        private @Nullable Output<String> onlineReplicationStartTime;
        private @Nullable Output<Integer> recoveryPoints;
        private @Nullable Output<String> replicaDeletion;
        private @Nullable Output<Integer> replicationPort;

        public Builder() {
    	      // Empty
        }

        public Builder(HyperVReplicaPolicyInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedAuthenticationType = defaults.allowedAuthenticationType;
    	      this.applicationConsistentSnapshotFrequencyInHours = defaults.applicationConsistentSnapshotFrequencyInHours;
    	      this.compression = defaults.compression;
    	      this.initialReplicationMethod = defaults.initialReplicationMethod;
    	      this.instanceType = defaults.instanceType;
    	      this.offlineReplicationExportPath = defaults.offlineReplicationExportPath;
    	      this.offlineReplicationImportPath = defaults.offlineReplicationImportPath;
    	      this.onlineReplicationStartTime = defaults.onlineReplicationStartTime;
    	      this.recoveryPoints = defaults.recoveryPoints;
    	      this.replicaDeletion = defaults.replicaDeletion;
    	      this.replicationPort = defaults.replicationPort;
        }

        public Builder allowedAuthenticationType(@Nullable Output<Integer> allowedAuthenticationType) {
            this.allowedAuthenticationType = allowedAuthenticationType;
            return this;
        }

        public Builder allowedAuthenticationType(@Nullable Integer allowedAuthenticationType) {
            this.allowedAuthenticationType = Output.ofNullable(allowedAuthenticationType);
            return this;
        }

        public Builder applicationConsistentSnapshotFrequencyInHours(@Nullable Output<Integer> applicationConsistentSnapshotFrequencyInHours) {
            this.applicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHours;
            return this;
        }

        public Builder applicationConsistentSnapshotFrequencyInHours(@Nullable Integer applicationConsistentSnapshotFrequencyInHours) {
            this.applicationConsistentSnapshotFrequencyInHours = Output.ofNullable(applicationConsistentSnapshotFrequencyInHours);
            return this;
        }

        public Builder compression(@Nullable Output<String> compression) {
            this.compression = compression;
            return this;
        }

        public Builder compression(@Nullable String compression) {
            this.compression = Output.ofNullable(compression);
            return this;
        }

        public Builder initialReplicationMethod(@Nullable Output<String> initialReplicationMethod) {
            this.initialReplicationMethod = initialReplicationMethod;
            return this;
        }

        public Builder initialReplicationMethod(@Nullable String initialReplicationMethod) {
            this.initialReplicationMethod = Output.ofNullable(initialReplicationMethod);
            return this;
        }

        public Builder instanceType(@Nullable Output<String> instanceType) {
            this.instanceType = instanceType;
            return this;
        }

        public Builder instanceType(@Nullable String instanceType) {
            this.instanceType = Output.ofNullable(instanceType);
            return this;
        }

        public Builder offlineReplicationExportPath(@Nullable Output<String> offlineReplicationExportPath) {
            this.offlineReplicationExportPath = offlineReplicationExportPath;
            return this;
        }

        public Builder offlineReplicationExportPath(@Nullable String offlineReplicationExportPath) {
            this.offlineReplicationExportPath = Output.ofNullable(offlineReplicationExportPath);
            return this;
        }

        public Builder offlineReplicationImportPath(@Nullable Output<String> offlineReplicationImportPath) {
            this.offlineReplicationImportPath = offlineReplicationImportPath;
            return this;
        }

        public Builder offlineReplicationImportPath(@Nullable String offlineReplicationImportPath) {
            this.offlineReplicationImportPath = Output.ofNullable(offlineReplicationImportPath);
            return this;
        }

        public Builder onlineReplicationStartTime(@Nullable Output<String> onlineReplicationStartTime) {
            this.onlineReplicationStartTime = onlineReplicationStartTime;
            return this;
        }

        public Builder onlineReplicationStartTime(@Nullable String onlineReplicationStartTime) {
            this.onlineReplicationStartTime = Output.ofNullable(onlineReplicationStartTime);
            return this;
        }

        public Builder recoveryPoints(@Nullable Output<Integer> recoveryPoints) {
            this.recoveryPoints = recoveryPoints;
            return this;
        }

        public Builder recoveryPoints(@Nullable Integer recoveryPoints) {
            this.recoveryPoints = Output.ofNullable(recoveryPoints);
            return this;
        }

        public Builder replicaDeletion(@Nullable Output<String> replicaDeletion) {
            this.replicaDeletion = replicaDeletion;
            return this;
        }

        public Builder replicaDeletion(@Nullable String replicaDeletion) {
            this.replicaDeletion = Output.ofNullable(replicaDeletion);
            return this;
        }

        public Builder replicationPort(@Nullable Output<Integer> replicationPort) {
            this.replicationPort = replicationPort;
            return this;
        }

        public Builder replicationPort(@Nullable Integer replicationPort) {
            this.replicationPort = Output.ofNullable(replicationPort);
            return this;
        }
        public HyperVReplicaPolicyInputArgs build() {
            return new HyperVReplicaPolicyInputArgs(allowedAuthenticationType, applicationConsistentSnapshotFrequencyInHours, compression, initialReplicationMethod, instanceType, offlineReplicationExportPath, offlineReplicationImportPath, onlineReplicationStartTime, recoveryPoints, replicaDeletion, replicationPort);
        }
    }
}
