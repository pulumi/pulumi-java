// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.digitaltwins.inputs;

import io.pulumi.azurenative.digitaltwins.enums.AuthenticationType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Properties related to EventHub.
 * 
 */
public final class EventHubArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventHubArgs Empty = new EventHubArgs();

    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     * 
     */
    @Import(name="authenticationType")
      private final @Nullable Output<Either<String,AuthenticationType>> authenticationType;

    public Output<Either<String,AuthenticationType>> getAuthenticationType() {
        return this.authenticationType == null ? Output.empty() : this.authenticationType;
    }

    /**
     * PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     * 
     */
    @Import(name="connectionStringPrimaryKey")
      private final @Nullable Output<String> connectionStringPrimaryKey;

    public Output<String> getConnectionStringPrimaryKey() {
        return this.connectionStringPrimaryKey == null ? Output.empty() : this.connectionStringPrimaryKey;
    }

    /**
     * SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     * 
     */
    @Import(name="connectionStringSecondaryKey")
      private final @Nullable Output<String> connectionStringSecondaryKey;

    public Output<String> getConnectionStringSecondaryKey() {
        return this.connectionStringSecondaryKey == null ? Output.empty() : this.connectionStringSecondaryKey;
    }

    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     * 
     */
    @Import(name="deadLetterSecret")
      private final @Nullable Output<String> deadLetterSecret;

    public Output<String> getDeadLetterSecret() {
        return this.deadLetterSecret == null ? Output.empty() : this.deadLetterSecret;
    }

    /**
     * Dead letter storage URL for identity-based authentication.
     * 
     */
    @Import(name="deadLetterUri")
      private final @Nullable Output<String> deadLetterUri;

    public Output<String> getDeadLetterUri() {
        return this.deadLetterUri == null ? Output.empty() : this.deadLetterUri;
    }

    /**
     * The type of Digital Twins endpoint
     * Expected value is 'EventHub'.
     * 
     */
    @Import(name="endpointType", required=true)
      private final Output<String> endpointType;

    public Output<String> getEndpointType() {
        return this.endpointType;
    }

    /**
     * The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb://
     * 
     */
    @Import(name="endpointUri")
      private final @Nullable Output<String> endpointUri;

    public Output<String> getEndpointUri() {
        return this.endpointUri == null ? Output.empty() : this.endpointUri;
    }

    /**
     * The EventHub name in the EventHub namespace for identity-based authentication.
     * 
     */
    @Import(name="entityPath")
      private final @Nullable Output<String> entityPath;

    public Output<String> getEntityPath() {
        return this.entityPath == null ? Output.empty() : this.entityPath;
    }

    public EventHubArgs(
        @Nullable Output<Either<String,AuthenticationType>> authenticationType,
        @Nullable Output<String> connectionStringPrimaryKey,
        @Nullable Output<String> connectionStringSecondaryKey,
        @Nullable Output<String> deadLetterSecret,
        @Nullable Output<String> deadLetterUri,
        Output<String> endpointType,
        @Nullable Output<String> endpointUri,
        @Nullable Output<String> entityPath) {
        this.authenticationType = authenticationType;
        this.connectionStringPrimaryKey = connectionStringPrimaryKey;
        this.connectionStringSecondaryKey = connectionStringSecondaryKey;
        this.deadLetterSecret = deadLetterSecret;
        this.deadLetterUri = deadLetterUri;
        this.endpointType = Objects.requireNonNull(endpointType, "expected parameter 'endpointType' to be non-null");
        this.endpointUri = endpointUri;
        this.entityPath = entityPath;
    }

    private EventHubArgs() {
        this.authenticationType = Output.empty();
        this.connectionStringPrimaryKey = Output.empty();
        this.connectionStringSecondaryKey = Output.empty();
        this.deadLetterSecret = Output.empty();
        this.deadLetterUri = Output.empty();
        this.endpointType = Output.empty();
        this.endpointUri = Output.empty();
        this.entityPath = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventHubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,AuthenticationType>> authenticationType;
        private @Nullable Output<String> connectionStringPrimaryKey;
        private @Nullable Output<String> connectionStringSecondaryKey;
        private @Nullable Output<String> deadLetterSecret;
        private @Nullable Output<String> deadLetterUri;
        private Output<String> endpointType;
        private @Nullable Output<String> endpointUri;
        private @Nullable Output<String> entityPath;

        public Builder() {
    	      // Empty
        }

        public Builder(EventHubArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationType = defaults.authenticationType;
    	      this.connectionStringPrimaryKey = defaults.connectionStringPrimaryKey;
    	      this.connectionStringSecondaryKey = defaults.connectionStringSecondaryKey;
    	      this.deadLetterSecret = defaults.deadLetterSecret;
    	      this.deadLetterUri = defaults.deadLetterUri;
    	      this.endpointType = defaults.endpointType;
    	      this.endpointUri = defaults.endpointUri;
    	      this.entityPath = defaults.entityPath;
        }

        public Builder authenticationType(@Nullable Output<Either<String,AuthenticationType>> authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }
        public Builder authenticationType(@Nullable Either<String,AuthenticationType> authenticationType) {
            this.authenticationType = Output.ofNullable(authenticationType);
            return this;
        }
        public Builder connectionStringPrimaryKey(@Nullable Output<String> connectionStringPrimaryKey) {
            this.connectionStringPrimaryKey = connectionStringPrimaryKey;
            return this;
        }
        public Builder connectionStringPrimaryKey(@Nullable String connectionStringPrimaryKey) {
            this.connectionStringPrimaryKey = Output.ofNullable(connectionStringPrimaryKey);
            return this;
        }
        public Builder connectionStringSecondaryKey(@Nullable Output<String> connectionStringSecondaryKey) {
            this.connectionStringSecondaryKey = connectionStringSecondaryKey;
            return this;
        }
        public Builder connectionStringSecondaryKey(@Nullable String connectionStringSecondaryKey) {
            this.connectionStringSecondaryKey = Output.ofNullable(connectionStringSecondaryKey);
            return this;
        }
        public Builder deadLetterSecret(@Nullable Output<String> deadLetterSecret) {
            this.deadLetterSecret = deadLetterSecret;
            return this;
        }
        public Builder deadLetterSecret(@Nullable String deadLetterSecret) {
            this.deadLetterSecret = Output.ofNullable(deadLetterSecret);
            return this;
        }
        public Builder deadLetterUri(@Nullable Output<String> deadLetterUri) {
            this.deadLetterUri = deadLetterUri;
            return this;
        }
        public Builder deadLetterUri(@Nullable String deadLetterUri) {
            this.deadLetterUri = Output.ofNullable(deadLetterUri);
            return this;
        }
        public Builder endpointType(Output<String> endpointType) {
            this.endpointType = Objects.requireNonNull(endpointType);
            return this;
        }
        public Builder endpointType(String endpointType) {
            this.endpointType = Output.of(Objects.requireNonNull(endpointType));
            return this;
        }
        public Builder endpointUri(@Nullable Output<String> endpointUri) {
            this.endpointUri = endpointUri;
            return this;
        }
        public Builder endpointUri(@Nullable String endpointUri) {
            this.endpointUri = Output.ofNullable(endpointUri);
            return this;
        }
        public Builder entityPath(@Nullable Output<String> entityPath) {
            this.entityPath = entityPath;
            return this;
        }
        public Builder entityPath(@Nullable String entityPath) {
            this.entityPath = Output.ofNullable(entityPath);
            return this;
        }        public EventHubArgs build() {
            return new EventHubArgs(authenticationType, connectionStringPrimaryKey, connectionStringSecondaryKey, deadLetterSecret, deadLetterUri, endpointType, endpointUri, entityPath);
        }
    }
}
