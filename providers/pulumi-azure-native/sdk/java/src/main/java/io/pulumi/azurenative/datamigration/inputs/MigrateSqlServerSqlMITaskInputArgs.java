// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.inputs;

import io.pulumi.azurenative.datamigration.enums.BackupMode;
import io.pulumi.azurenative.datamigration.inputs.BlobShareArgs;
import io.pulumi.azurenative.datamigration.inputs.FileShareArgs;
import io.pulumi.azurenative.datamigration.inputs.MigrateSqlServerSqlMIDatabaseInputArgs;
import io.pulumi.azurenative.datamigration.inputs.SqlConnectionInfoArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
 * 
 */
public final class MigrateSqlServerSqlMITaskInputArgs extends io.pulumi.resources.ResourceArgs {

    public static final MigrateSqlServerSqlMITaskInputArgs Empty = new MigrateSqlServerSqlMITaskInputArgs();

    /**
     * SAS URI of Azure Storage Account Container to be used for storing backup files.
     * 
     */
    @Import(name="backupBlobShare", required=true)
      private final Output<BlobShareArgs> backupBlobShare;

    public Output<BlobShareArgs> backupBlobShare() {
        return this.backupBlobShare;
    }

    /**
     * Backup file share information for all selected databases.
     * 
     */
    @Import(name="backupFileShare")
      private final @Nullable Output<FileShareArgs> backupFileShare;

    public Output<FileShareArgs> backupFileShare() {
        return this.backupFileShare == null ? Codegen.empty() : this.backupFileShare;
    }

    /**
     * Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
     * 
     */
    @Import(name="backupMode")
      private final @Nullable Output<Either<String,BackupMode>> backupMode;

    public Output<Either<String,BackupMode>> backupMode() {
        return this.backupMode == null ? Codegen.empty() : this.backupMode;
    }

    /**
     * Agent Jobs to migrate.
     * 
     */
    @Import(name="selectedAgentJobs")
      private final @Nullable Output<List<String>> selectedAgentJobs;

    public Output<List<String>> selectedAgentJobs() {
        return this.selectedAgentJobs == null ? Codegen.empty() : this.selectedAgentJobs;
    }

    /**
     * Databases to migrate
     * 
     */
    @Import(name="selectedDatabases", required=true)
      private final Output<List<MigrateSqlServerSqlMIDatabaseInputArgs>> selectedDatabases;

    public Output<List<MigrateSqlServerSqlMIDatabaseInputArgs>> selectedDatabases() {
        return this.selectedDatabases;
    }

    /**
     * Logins to migrate.
     * 
     */
    @Import(name="selectedLogins")
      private final @Nullable Output<List<String>> selectedLogins;

    public Output<List<String>> selectedLogins() {
        return this.selectedLogins == null ? Codegen.empty() : this.selectedLogins;
    }

    /**
     * Information for connecting to source
     * 
     */
    @Import(name="sourceConnectionInfo", required=true)
      private final Output<SqlConnectionInfoArgs> sourceConnectionInfo;

    public Output<SqlConnectionInfoArgs> sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }

    /**
     * Information for connecting to target
     * 
     */
    @Import(name="targetConnectionInfo", required=true)
      private final Output<SqlConnectionInfoArgs> targetConnectionInfo;

    public Output<SqlConnectionInfoArgs> targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    public MigrateSqlServerSqlMITaskInputArgs(
        Output<BlobShareArgs> backupBlobShare,
        @Nullable Output<FileShareArgs> backupFileShare,
        @Nullable Output<Either<String,BackupMode>> backupMode,
        @Nullable Output<List<String>> selectedAgentJobs,
        Output<List<MigrateSqlServerSqlMIDatabaseInputArgs>> selectedDatabases,
        @Nullable Output<List<String>> selectedLogins,
        Output<SqlConnectionInfoArgs> sourceConnectionInfo,
        Output<SqlConnectionInfoArgs> targetConnectionInfo) {
        this.backupBlobShare = Objects.requireNonNull(backupBlobShare, "expected parameter 'backupBlobShare' to be non-null");
        this.backupFileShare = backupFileShare;
        this.backupMode = backupMode;
        this.selectedAgentJobs = selectedAgentJobs;
        this.selectedDatabases = Objects.requireNonNull(selectedDatabases, "expected parameter 'selectedDatabases' to be non-null");
        this.selectedLogins = selectedLogins;
        this.sourceConnectionInfo = Objects.requireNonNull(sourceConnectionInfo, "expected parameter 'sourceConnectionInfo' to be non-null");
        this.targetConnectionInfo = Objects.requireNonNull(targetConnectionInfo, "expected parameter 'targetConnectionInfo' to be non-null");
    }

    private MigrateSqlServerSqlMITaskInputArgs() {
        this.backupBlobShare = Codegen.empty();
        this.backupFileShare = Codegen.empty();
        this.backupMode = Codegen.empty();
        this.selectedAgentJobs = Codegen.empty();
        this.selectedDatabases = Codegen.empty();
        this.selectedLogins = Codegen.empty();
        this.sourceConnectionInfo = Codegen.empty();
        this.targetConnectionInfo = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlMITaskInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<BlobShareArgs> backupBlobShare;
        private @Nullable Output<FileShareArgs> backupFileShare;
        private @Nullable Output<Either<String,BackupMode>> backupMode;
        private @Nullable Output<List<String>> selectedAgentJobs;
        private Output<List<MigrateSqlServerSqlMIDatabaseInputArgs>> selectedDatabases;
        private @Nullable Output<List<String>> selectedLogins;
        private Output<SqlConnectionInfoArgs> sourceConnectionInfo;
        private Output<SqlConnectionInfoArgs> targetConnectionInfo;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrateSqlServerSqlMITaskInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupBlobShare = defaults.backupBlobShare;
    	      this.backupFileShare = defaults.backupFileShare;
    	      this.backupMode = defaults.backupMode;
    	      this.selectedAgentJobs = defaults.selectedAgentJobs;
    	      this.selectedDatabases = defaults.selectedDatabases;
    	      this.selectedLogins = defaults.selectedLogins;
    	      this.sourceConnectionInfo = defaults.sourceConnectionInfo;
    	      this.targetConnectionInfo = defaults.targetConnectionInfo;
        }

        public Builder backupBlobShare(Output<BlobShareArgs> backupBlobShare) {
            this.backupBlobShare = Objects.requireNonNull(backupBlobShare);
            return this;
        }
        public Builder backupBlobShare(BlobShareArgs backupBlobShare) {
            this.backupBlobShare = Output.of(Objects.requireNonNull(backupBlobShare));
            return this;
        }
        public Builder backupFileShare(@Nullable Output<FileShareArgs> backupFileShare) {
            this.backupFileShare = backupFileShare;
            return this;
        }
        public Builder backupFileShare(@Nullable FileShareArgs backupFileShare) {
            this.backupFileShare = Codegen.ofNullable(backupFileShare);
            return this;
        }
        public Builder backupMode(@Nullable Output<Either<String,BackupMode>> backupMode) {
            this.backupMode = backupMode;
            return this;
        }
        public Builder backupMode(@Nullable Either<String,BackupMode> backupMode) {
            this.backupMode = Codegen.ofNullable(backupMode);
            return this;
        }
        public Builder selectedAgentJobs(@Nullable Output<List<String>> selectedAgentJobs) {
            this.selectedAgentJobs = selectedAgentJobs;
            return this;
        }
        public Builder selectedAgentJobs(@Nullable List<String> selectedAgentJobs) {
            this.selectedAgentJobs = Codegen.ofNullable(selectedAgentJobs);
            return this;
        }
        public Builder selectedAgentJobs(String... selectedAgentJobs) {
            return selectedAgentJobs(List.of(selectedAgentJobs));
        }
        public Builder selectedDatabases(Output<List<MigrateSqlServerSqlMIDatabaseInputArgs>> selectedDatabases) {
            this.selectedDatabases = Objects.requireNonNull(selectedDatabases);
            return this;
        }
        public Builder selectedDatabases(List<MigrateSqlServerSqlMIDatabaseInputArgs> selectedDatabases) {
            this.selectedDatabases = Output.of(Objects.requireNonNull(selectedDatabases));
            return this;
        }
        public Builder selectedDatabases(MigrateSqlServerSqlMIDatabaseInputArgs... selectedDatabases) {
            return selectedDatabases(List.of(selectedDatabases));
        }
        public Builder selectedLogins(@Nullable Output<List<String>> selectedLogins) {
            this.selectedLogins = selectedLogins;
            return this;
        }
        public Builder selectedLogins(@Nullable List<String> selectedLogins) {
            this.selectedLogins = Codegen.ofNullable(selectedLogins);
            return this;
        }
        public Builder selectedLogins(String... selectedLogins) {
            return selectedLogins(List.of(selectedLogins));
        }
        public Builder sourceConnectionInfo(Output<SqlConnectionInfoArgs> sourceConnectionInfo) {
            this.sourceConnectionInfo = Objects.requireNonNull(sourceConnectionInfo);
            return this;
        }
        public Builder sourceConnectionInfo(SqlConnectionInfoArgs sourceConnectionInfo) {
            this.sourceConnectionInfo = Output.of(Objects.requireNonNull(sourceConnectionInfo));
            return this;
        }
        public Builder targetConnectionInfo(Output<SqlConnectionInfoArgs> targetConnectionInfo) {
            this.targetConnectionInfo = Objects.requireNonNull(targetConnectionInfo);
            return this;
        }
        public Builder targetConnectionInfo(SqlConnectionInfoArgs targetConnectionInfo) {
            this.targetConnectionInfo = Output.of(Objects.requireNonNull(targetConnectionInfo));
            return this;
        }        public MigrateSqlServerSqlMITaskInputArgs build() {
            return new MigrateSqlServerSqlMITaskInputArgs(backupBlobShare, backupFileShare, backupMode, selectedAgentJobs, selectedDatabases, selectedLogins, sourceConnectionInfo, targetConnectionInfo);
        }
    }
}
