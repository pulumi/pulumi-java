// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.azurenative.apimanagement.enums.SchemaType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SchemaArgs extends io.pulumi.resources.ResourceArgs {

    public static final SchemaArgs Empty = new SchemaArgs();

    /**
     * Free-form schema entity description.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Schema id identifier. Must be unique in the current API Management service instance.
     * 
     */
    @InputImport(name="schemaId")
      private final @Nullable Output<String> schemaId;

    public Output<String> getSchemaId() {
        return this.schemaId == null ? Output.empty() : this.schemaId;
    }

    /**
     * Schema Type. Immutable.
     * 
     */
    @InputImport(name="schemaType", required=true)
      private final Output<Either<String,SchemaType>> schemaType;

    public Output<Either<String,SchemaType>> getSchemaType() {
        return this.schemaType;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @InputImport(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * Json-encoded string for non json-based schema.
     * 
     */
    @InputImport(name="value")
      private final @Nullable Output<String> value;

    public Output<String> getValue() {
        return this.value == null ? Output.empty() : this.value;
    }

    public SchemaArgs(
        @Nullable Output<String> description,
        Output<String> resourceGroupName,
        @Nullable Output<String> schemaId,
        Output<Either<String,SchemaType>> schemaType,
        Output<String> serviceName,
        @Nullable Output<String> value) {
        this.description = description;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.schemaId = schemaId;
        this.schemaType = Objects.requireNonNull(schemaType, "expected parameter 'schemaType' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.value = value;
    }

    private SchemaArgs() {
        this.description = Output.empty();
        this.resourceGroupName = Output.empty();
        this.schemaId = Output.empty();
        this.schemaType = Output.empty();
        this.serviceName = Output.empty();
        this.value = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> schemaId;
        private Output<Either<String,SchemaType>> schemaType;
        private Output<String> serviceName;
        private @Nullable Output<String> value;

        public Builder() {
    	      // Empty
        }

        public Builder(SchemaArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.schemaId = defaults.schemaId;
    	      this.schemaType = defaults.schemaType;
    	      this.serviceName = defaults.serviceName;
    	      this.value = defaults.value;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder schemaId(@Nullable Output<String> schemaId) {
            this.schemaId = schemaId;
            return this;
        }

        public Builder schemaId(@Nullable String schemaId) {
            this.schemaId = Output.ofNullable(schemaId);
            return this;
        }

        public Builder schemaType(Output<Either<String,SchemaType>> schemaType) {
            this.schemaType = Objects.requireNonNull(schemaType);
            return this;
        }

        public Builder schemaType(Either<String,SchemaType> schemaType) {
            this.schemaType = Output.of(Objects.requireNonNull(schemaType));
            return this;
        }

        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }

        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }

        public Builder value(@Nullable Output<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(@Nullable String value) {
            this.value = Output.ofNullable(value);
            return this;
        }
        public SchemaArgs build() {
            return new SchemaArgs(description, resourceGroupName, schemaId, schemaType, serviceName, value);
        }
    }
}
