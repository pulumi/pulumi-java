// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The sync properties of the connected registry with its parent.
 * 
 */
public final class SyncPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final SyncPropertiesArgs Empty = new SyncPropertiesArgs();

    /**
     * The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     * 
     */
    @Import(name="messageTtl", required=true)
      private final Output<String> messageTtl;

    public Output<String> getMessageTtl() {
        return this.messageTtl;
    }

    /**
     * The cron expression indicating the schedule that the connected registry will sync with its parent.
     * 
     */
    @Import(name="schedule")
      private final @Nullable Output<String> schedule;

    public Output<String> getSchedule() {
        return this.schedule == null ? Output.empty() : this.schedule;
    }

    /**
     * The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     * 
     */
    @Import(name="syncWindow")
      private final @Nullable Output<String> syncWindow;

    public Output<String> getSyncWindow() {
        return this.syncWindow == null ? Output.empty() : this.syncWindow;
    }

    /**
     * The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
     * 
     */
    @Import(name="tokenId", required=true)
      private final Output<String> tokenId;

    public Output<String> getTokenId() {
        return this.tokenId;
    }

    public SyncPropertiesArgs(
        Output<String> messageTtl,
        @Nullable Output<String> schedule,
        @Nullable Output<String> syncWindow,
        Output<String> tokenId) {
        this.messageTtl = Objects.requireNonNull(messageTtl, "expected parameter 'messageTtl' to be non-null");
        this.schedule = schedule;
        this.syncWindow = syncWindow;
        this.tokenId = Objects.requireNonNull(tokenId, "expected parameter 'tokenId' to be non-null");
    }

    private SyncPropertiesArgs() {
        this.messageTtl = Output.empty();
        this.schedule = Output.empty();
        this.syncWindow = Output.empty();
        this.tokenId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyncPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> messageTtl;
        private @Nullable Output<String> schedule;
        private @Nullable Output<String> syncWindow;
        private Output<String> tokenId;

        public Builder() {
    	      // Empty
        }

        public Builder(SyncPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.messageTtl = defaults.messageTtl;
    	      this.schedule = defaults.schedule;
    	      this.syncWindow = defaults.syncWindow;
    	      this.tokenId = defaults.tokenId;
        }

        public Builder messageTtl(Output<String> messageTtl) {
            this.messageTtl = Objects.requireNonNull(messageTtl);
            return this;
        }
        public Builder messageTtl(String messageTtl) {
            this.messageTtl = Output.of(Objects.requireNonNull(messageTtl));
            return this;
        }
        public Builder schedule(@Nullable Output<String> schedule) {
            this.schedule = schedule;
            return this;
        }
        public Builder schedule(@Nullable String schedule) {
            this.schedule = Output.ofNullable(schedule);
            return this;
        }
        public Builder syncWindow(@Nullable Output<String> syncWindow) {
            this.syncWindow = syncWindow;
            return this;
        }
        public Builder syncWindow(@Nullable String syncWindow) {
            this.syncWindow = Output.ofNullable(syncWindow);
            return this;
        }
        public Builder tokenId(Output<String> tokenId) {
            this.tokenId = Objects.requireNonNull(tokenId);
            return this;
        }
        public Builder tokenId(String tokenId) {
            this.tokenId = Output.of(Objects.requireNonNull(tokenId));
            return this;
        }        public SyncPropertiesArgs build() {
            return new SyncPropertiesArgs(messageTtl, schedule, syncWindow, tokenId);
        }
    }
}
