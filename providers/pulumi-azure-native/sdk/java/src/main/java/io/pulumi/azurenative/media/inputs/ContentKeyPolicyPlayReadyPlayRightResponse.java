// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.inputs.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContentKeyPolicyPlayReadyPlayRightResponse extends io.pulumi.resources.InvokeArgs {

    public static final ContentKeyPolicyPlayReadyPlayRightResponse Empty = new ContentKeyPolicyPlayReadyPlayRightResponse();

    @InputImport(name="agcAndColorStripeRestriction")
    private final @Nullable Integer agcAndColorStripeRestriction;

    public Optional<Integer> getAgcAndColorStripeRestriction() {
        return this.agcAndColorStripeRestriction == null ? Optional.empty() : Optional.ofNullable(this.agcAndColorStripeRestriction);
    }

    @InputImport(name="allowPassingVideoContentToUnknownOutput", required=true)
    private final String allowPassingVideoContentToUnknownOutput;

    public String getAllowPassingVideoContentToUnknownOutput() {
        return this.allowPassingVideoContentToUnknownOutput;
    }

    @InputImport(name="analogVideoOpl")
    private final @Nullable Integer analogVideoOpl;

    public Optional<Integer> getAnalogVideoOpl() {
        return this.analogVideoOpl == null ? Optional.empty() : Optional.ofNullable(this.analogVideoOpl);
    }

    @InputImport(name="compressedDigitalAudioOpl")
    private final @Nullable Integer compressedDigitalAudioOpl;

    public Optional<Integer> getCompressedDigitalAudioOpl() {
        return this.compressedDigitalAudioOpl == null ? Optional.empty() : Optional.ofNullable(this.compressedDigitalAudioOpl);
    }

    @InputImport(name="compressedDigitalVideoOpl")
    private final @Nullable Integer compressedDigitalVideoOpl;

    public Optional<Integer> getCompressedDigitalVideoOpl() {
        return this.compressedDigitalVideoOpl == null ? Optional.empty() : Optional.ofNullable(this.compressedDigitalVideoOpl);
    }

    @InputImport(name="digitalVideoOnlyContentRestriction", required=true)
    private final Boolean digitalVideoOnlyContentRestriction;

    public Boolean getDigitalVideoOnlyContentRestriction() {
        return this.digitalVideoOnlyContentRestriction;
    }

    @InputImport(name="explicitAnalogTelevisionOutputRestriction")
    private final @Nullable ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse explicitAnalogTelevisionOutputRestriction;

    public Optional<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse> getExplicitAnalogTelevisionOutputRestriction() {
        return this.explicitAnalogTelevisionOutputRestriction == null ? Optional.empty() : Optional.ofNullable(this.explicitAnalogTelevisionOutputRestriction);
    }

    @InputImport(name="firstPlayExpiration")
    private final @Nullable String firstPlayExpiration;

    public Optional<String> getFirstPlayExpiration() {
        return this.firstPlayExpiration == null ? Optional.empty() : Optional.ofNullable(this.firstPlayExpiration);
    }

    @InputImport(name="imageConstraintForAnalogComponentVideoRestriction", required=true)
    private final Boolean imageConstraintForAnalogComponentVideoRestriction;

    public Boolean getImageConstraintForAnalogComponentVideoRestriction() {
        return this.imageConstraintForAnalogComponentVideoRestriction;
    }

    @InputImport(name="imageConstraintForAnalogComputerMonitorRestriction", required=true)
    private final Boolean imageConstraintForAnalogComputerMonitorRestriction;

    public Boolean getImageConstraintForAnalogComputerMonitorRestriction() {
        return this.imageConstraintForAnalogComputerMonitorRestriction;
    }

    @InputImport(name="scmsRestriction")
    private final @Nullable Integer scmsRestriction;

    public Optional<Integer> getScmsRestriction() {
        return this.scmsRestriction == null ? Optional.empty() : Optional.ofNullable(this.scmsRestriction);
    }

    @InputImport(name="uncompressedDigitalAudioOpl")
    private final @Nullable Integer uncompressedDigitalAudioOpl;

    public Optional<Integer> getUncompressedDigitalAudioOpl() {
        return this.uncompressedDigitalAudioOpl == null ? Optional.empty() : Optional.ofNullable(this.uncompressedDigitalAudioOpl);
    }

    @InputImport(name="uncompressedDigitalVideoOpl")
    private final @Nullable Integer uncompressedDigitalVideoOpl;

    public Optional<Integer> getUncompressedDigitalVideoOpl() {
        return this.uncompressedDigitalVideoOpl == null ? Optional.empty() : Optional.ofNullable(this.uncompressedDigitalVideoOpl);
    }

    public ContentKeyPolicyPlayReadyPlayRightResponse(
        @Nullable Integer agcAndColorStripeRestriction,
        String allowPassingVideoContentToUnknownOutput,
        @Nullable Integer analogVideoOpl,
        @Nullable Integer compressedDigitalAudioOpl,
        @Nullable Integer compressedDigitalVideoOpl,
        Boolean digitalVideoOnlyContentRestriction,
        @Nullable ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse explicitAnalogTelevisionOutputRestriction,
        @Nullable String firstPlayExpiration,
        Boolean imageConstraintForAnalogComponentVideoRestriction,
        Boolean imageConstraintForAnalogComputerMonitorRestriction,
        @Nullable Integer scmsRestriction,
        @Nullable Integer uncompressedDigitalAudioOpl,
        @Nullable Integer uncompressedDigitalVideoOpl) {
        this.agcAndColorStripeRestriction = agcAndColorStripeRestriction;
        this.allowPassingVideoContentToUnknownOutput = Objects.requireNonNull(allowPassingVideoContentToUnknownOutput, "expected parameter 'allowPassingVideoContentToUnknownOutput' to be non-null");
        this.analogVideoOpl = analogVideoOpl;
        this.compressedDigitalAudioOpl = compressedDigitalAudioOpl;
        this.compressedDigitalVideoOpl = compressedDigitalVideoOpl;
        this.digitalVideoOnlyContentRestriction = Objects.requireNonNull(digitalVideoOnlyContentRestriction, "expected parameter 'digitalVideoOnlyContentRestriction' to be non-null");
        this.explicitAnalogTelevisionOutputRestriction = explicitAnalogTelevisionOutputRestriction;
        this.firstPlayExpiration = firstPlayExpiration;
        this.imageConstraintForAnalogComponentVideoRestriction = Objects.requireNonNull(imageConstraintForAnalogComponentVideoRestriction, "expected parameter 'imageConstraintForAnalogComponentVideoRestriction' to be non-null");
        this.imageConstraintForAnalogComputerMonitorRestriction = Objects.requireNonNull(imageConstraintForAnalogComputerMonitorRestriction, "expected parameter 'imageConstraintForAnalogComputerMonitorRestriction' to be non-null");
        this.scmsRestriction = scmsRestriction;
        this.uncompressedDigitalAudioOpl = uncompressedDigitalAudioOpl;
        this.uncompressedDigitalVideoOpl = uncompressedDigitalVideoOpl;
    }

    private ContentKeyPolicyPlayReadyPlayRightResponse() {
        this.agcAndColorStripeRestriction = null;
        this.allowPassingVideoContentToUnknownOutput = null;
        this.analogVideoOpl = null;
        this.compressedDigitalAudioOpl = null;
        this.compressedDigitalVideoOpl = null;
        this.digitalVideoOnlyContentRestriction = null;
        this.explicitAnalogTelevisionOutputRestriction = null;
        this.firstPlayExpiration = null;
        this.imageConstraintForAnalogComponentVideoRestriction = null;
        this.imageConstraintForAnalogComputerMonitorRestriction = null;
        this.scmsRestriction = null;
        this.uncompressedDigitalAudioOpl = null;
        this.uncompressedDigitalVideoOpl = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContentKeyPolicyPlayReadyPlayRightResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer agcAndColorStripeRestriction;
        private String allowPassingVideoContentToUnknownOutput;
        private @Nullable Integer analogVideoOpl;
        private @Nullable Integer compressedDigitalAudioOpl;
        private @Nullable Integer compressedDigitalVideoOpl;
        private Boolean digitalVideoOnlyContentRestriction;
        private @Nullable ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse explicitAnalogTelevisionOutputRestriction;
        private @Nullable String firstPlayExpiration;
        private Boolean imageConstraintForAnalogComponentVideoRestriction;
        private Boolean imageConstraintForAnalogComputerMonitorRestriction;
        private @Nullable Integer scmsRestriction;
        private @Nullable Integer uncompressedDigitalAudioOpl;
        private @Nullable Integer uncompressedDigitalVideoOpl;

        public Builder() {
    	      // Empty
        }

        public Builder(ContentKeyPolicyPlayReadyPlayRightResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agcAndColorStripeRestriction = defaults.agcAndColorStripeRestriction;
    	      this.allowPassingVideoContentToUnknownOutput = defaults.allowPassingVideoContentToUnknownOutput;
    	      this.analogVideoOpl = defaults.analogVideoOpl;
    	      this.compressedDigitalAudioOpl = defaults.compressedDigitalAudioOpl;
    	      this.compressedDigitalVideoOpl = defaults.compressedDigitalVideoOpl;
    	      this.digitalVideoOnlyContentRestriction = defaults.digitalVideoOnlyContentRestriction;
    	      this.explicitAnalogTelevisionOutputRestriction = defaults.explicitAnalogTelevisionOutputRestriction;
    	      this.firstPlayExpiration = defaults.firstPlayExpiration;
    	      this.imageConstraintForAnalogComponentVideoRestriction = defaults.imageConstraintForAnalogComponentVideoRestriction;
    	      this.imageConstraintForAnalogComputerMonitorRestriction = defaults.imageConstraintForAnalogComputerMonitorRestriction;
    	      this.scmsRestriction = defaults.scmsRestriction;
    	      this.uncompressedDigitalAudioOpl = defaults.uncompressedDigitalAudioOpl;
    	      this.uncompressedDigitalVideoOpl = defaults.uncompressedDigitalVideoOpl;
        }

        public Builder setAgcAndColorStripeRestriction(@Nullable Integer agcAndColorStripeRestriction) {
            this.agcAndColorStripeRestriction = agcAndColorStripeRestriction;
            return this;
        }

        public Builder setAllowPassingVideoContentToUnknownOutput(String allowPassingVideoContentToUnknownOutput) {
            this.allowPassingVideoContentToUnknownOutput = Objects.requireNonNull(allowPassingVideoContentToUnknownOutput);
            return this;
        }

        public Builder setAnalogVideoOpl(@Nullable Integer analogVideoOpl) {
            this.analogVideoOpl = analogVideoOpl;
            return this;
        }

        public Builder setCompressedDigitalAudioOpl(@Nullable Integer compressedDigitalAudioOpl) {
            this.compressedDigitalAudioOpl = compressedDigitalAudioOpl;
            return this;
        }

        public Builder setCompressedDigitalVideoOpl(@Nullable Integer compressedDigitalVideoOpl) {
            this.compressedDigitalVideoOpl = compressedDigitalVideoOpl;
            return this;
        }

        public Builder setDigitalVideoOnlyContentRestriction(Boolean digitalVideoOnlyContentRestriction) {
            this.digitalVideoOnlyContentRestriction = Objects.requireNonNull(digitalVideoOnlyContentRestriction);
            return this;
        }

        public Builder setExplicitAnalogTelevisionOutputRestriction(@Nullable ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse explicitAnalogTelevisionOutputRestriction) {
            this.explicitAnalogTelevisionOutputRestriction = explicitAnalogTelevisionOutputRestriction;
            return this;
        }

        public Builder setFirstPlayExpiration(@Nullable String firstPlayExpiration) {
            this.firstPlayExpiration = firstPlayExpiration;
            return this;
        }

        public Builder setImageConstraintForAnalogComponentVideoRestriction(Boolean imageConstraintForAnalogComponentVideoRestriction) {
            this.imageConstraintForAnalogComponentVideoRestriction = Objects.requireNonNull(imageConstraintForAnalogComponentVideoRestriction);
            return this;
        }

        public Builder setImageConstraintForAnalogComputerMonitorRestriction(Boolean imageConstraintForAnalogComputerMonitorRestriction) {
            this.imageConstraintForAnalogComputerMonitorRestriction = Objects.requireNonNull(imageConstraintForAnalogComputerMonitorRestriction);
            return this;
        }

        public Builder setScmsRestriction(@Nullable Integer scmsRestriction) {
            this.scmsRestriction = scmsRestriction;
            return this;
        }

        public Builder setUncompressedDigitalAudioOpl(@Nullable Integer uncompressedDigitalAudioOpl) {
            this.uncompressedDigitalAudioOpl = uncompressedDigitalAudioOpl;
            return this;
        }

        public Builder setUncompressedDigitalVideoOpl(@Nullable Integer uncompressedDigitalVideoOpl) {
            this.uncompressedDigitalVideoOpl = uncompressedDigitalVideoOpl;
            return this;
        }

        public ContentKeyPolicyPlayReadyPlayRightResponse build() {
            return new ContentKeyPolicyPlayReadyPlayRightResponse(agcAndColorStripeRestriction, allowPassingVideoContentToUnknownOutput, analogVideoOpl, compressedDigitalAudioOpl, compressedDigitalVideoOpl, digitalVideoOnlyContentRestriction, explicitAnalogTelevisionOutputRestriction, firstPlayExpiration, imageConstraintForAnalogComponentVideoRestriction, imageConstraintForAnalogComputerMonitorRestriction, scmsRestriction, uncompressedDigitalAudioOpl, uncompressedDigitalVideoOpl);
        }
    }
}
