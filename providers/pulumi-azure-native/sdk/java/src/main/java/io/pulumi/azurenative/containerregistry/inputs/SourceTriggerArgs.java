// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry.inputs;

import io.pulumi.azurenative.containerregistry.enums.SourceTriggerEvent;
import io.pulumi.azurenative.containerregistry.enums.TriggerStatus;
import io.pulumi.azurenative.containerregistry.inputs.SourcePropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The properties of a source based trigger.
 * 
 */
public final class SourceTriggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final SourceTriggerArgs Empty = new SourceTriggerArgs();

    /**
     * The name of the trigger.
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * The properties that describes the source(code) for the task.
     * 
     */
    @InputImport(name="sourceRepository", required=true)
      private final Input<SourcePropertiesArgs> sourceRepository;

    public Input<SourcePropertiesArgs> getSourceRepository() {
        return this.sourceRepository;
    }

    /**
     * The source event corresponding to the trigger.
     * 
     */
    @InputImport(name="sourceTriggerEvents", required=true)
      private final Input<List<Either<String,SourceTriggerEvent>>> sourceTriggerEvents;

    public Input<List<Either<String,SourceTriggerEvent>>> getSourceTriggerEvents() {
        return this.sourceTriggerEvents;
    }

    /**
     * The current status of trigger.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Input<Either<String,TriggerStatus>> status;

    public Input<Either<String,TriggerStatus>> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    public SourceTriggerArgs(
        Input<String> name,
        Input<SourcePropertiesArgs> sourceRepository,
        Input<List<Either<String,SourceTriggerEvent>>> sourceTriggerEvents,
        @Nullable Input<Either<String,TriggerStatus>> status) {
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.sourceRepository = Objects.requireNonNull(sourceRepository, "expected parameter 'sourceRepository' to be non-null");
        this.sourceTriggerEvents = Objects.requireNonNull(sourceTriggerEvents, "expected parameter 'sourceTriggerEvents' to be non-null");
        this.status = status == null ? Input.ofLeft("Enabled") : status;
    }

    private SourceTriggerArgs() {
        this.name = Input.empty();
        this.sourceRepository = Input.empty();
        this.sourceTriggerEvents = Input.empty();
        this.status = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourceTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> name;
        private Input<SourcePropertiesArgs> sourceRepository;
        private Input<List<Either<String,SourceTriggerEvent>>> sourceTriggerEvents;
        private @Nullable Input<Either<String,TriggerStatus>> status;

        public Builder() {
    	      // Empty
        }

        public Builder(SourceTriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.sourceRepository = defaults.sourceRepository;
    	      this.sourceTriggerEvents = defaults.sourceTriggerEvents;
    	      this.status = defaults.status;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setSourceRepository(Input<SourcePropertiesArgs> sourceRepository) {
            this.sourceRepository = Objects.requireNonNull(sourceRepository);
            return this;
        }

        public Builder setSourceRepository(SourcePropertiesArgs sourceRepository) {
            this.sourceRepository = Input.of(Objects.requireNonNull(sourceRepository));
            return this;
        }

        public Builder setSourceTriggerEvents(Input<List<Either<String,SourceTriggerEvent>>> sourceTriggerEvents) {
            this.sourceTriggerEvents = Objects.requireNonNull(sourceTriggerEvents);
            return this;
        }

        public Builder setSourceTriggerEvents(List<Either<String,SourceTriggerEvent>> sourceTriggerEvents) {
            this.sourceTriggerEvents = Input.of(Objects.requireNonNull(sourceTriggerEvents));
            return this;
        }

        public Builder setStatus(@Nullable Input<Either<String,TriggerStatus>> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable Either<String,TriggerStatus> status) {
            this.status = Input.ofNullable(status);
            return this;
        }
        public SourceTriggerArgs build() {
            return new SourceTriggerArgs(name, sourceRepository, sourceTriggerEvents, status);
        }
    }
}
