// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import io.pulumi.azurenative.datafactory.inputs.SecureStringArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Azure File Storage linked service.
 * 
 */
public final class AzureFileStorageLinkedServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final AzureFileStorageLinkedServiceArgs Empty = new AzureFileStorageLinkedServiceArgs();

    /**
     * The Azure key vault secret reference of accountKey in connection string.
     * 
     */
    @InputImport(name="accountKey")
    private final @Nullable Input<AzureKeyVaultSecretReferenceArgs> accountKey;

    public Input<AzureKeyVaultSecretReferenceArgs> getAccountKey() {
        return this.accountKey == null ? Input.empty() : this.accountKey;
    }

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @InputImport(name="annotations")
    private final @Nullable Input<List<Object>> annotations;

    public Input<List<Object>> getAnnotations() {
        return this.annotations == null ? Input.empty() : this.annotations;
    }

    /**
     * The integration runtime reference.
     * 
     */
    @InputImport(name="connectVia")
    private final @Nullable Input<IntegrationRuntimeReferenceArgs> connectVia;

    public Input<IntegrationRuntimeReferenceArgs> getConnectVia() {
        return this.connectVia == null ? Input.empty() : this.connectVia;
    }

    /**
     * The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     */
    @InputImport(name="connectionString")
    private final @Nullable Input<Object> connectionString;

    public Input<Object> getConnectionString() {
        return this.connectionString == null ? Input.empty() : this.connectionString;
    }

    /**
     * Linked service description.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="encryptedCredential")
    private final @Nullable Input<Object> encryptedCredential;

    public Input<Object> getEncryptedCredential() {
        return this.encryptedCredential == null ? Input.empty() : this.encryptedCredential;
    }

    /**
     * The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="fileShare")
    private final @Nullable Input<Object> fileShare;

    public Input<Object> getFileShare() {
        return this.fileShare == null ? Input.empty() : this.fileShare;
    }

    /**
     * Host name of the server. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="host")
    private final @Nullable Input<Object> host;

    public Input<Object> getHost() {
        return this.host == null ? Input.empty() : this.host;
    }

    /**
     * Parameters for linked service.
     * 
     */
    @InputImport(name="parameters")
    private final @Nullable Input<Map<String,ParameterSpecificationArgs>> parameters;

    public Input<Map<String,ParameterSpecificationArgs>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * Password to logon the server.
     * 
     */
    @InputImport(name="password")
    private final @Nullable Input<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password;

    public Input<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> getPassword() {
        return this.password == null ? Input.empty() : this.password;
    }

    /**
     * The Azure key vault secret reference of sasToken in sas uri.
     * 
     */
    @InputImport(name="sasToken")
    private final @Nullable Input<AzureKeyVaultSecretReferenceArgs> sasToken;

    public Input<AzureKeyVaultSecretReferenceArgs> getSasToken() {
        return this.sasToken == null ? Input.empty() : this.sasToken;
    }

    /**
     * SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     */
    @InputImport(name="sasUri")
    private final @Nullable Input<Object> sasUri;

    public Input<Object> getSasUri() {
        return this.sasUri == null ? Input.empty() : this.sasUri;
    }

    /**
     * The azure file share snapshot version. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="snapshot")
    private final @Nullable Input<Object> snapshot;

    public Input<Object> getSnapshot() {
        return this.snapshot == null ? Input.empty() : this.snapshot;
    }

    /**
     * Type of linked service.
     * Expected value is 'AzureFileStorage'.
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    /**
     * User ID to logon the server. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="userId")
    private final @Nullable Input<Object> userId;

    public Input<Object> getUserId() {
        return this.userId == null ? Input.empty() : this.userId;
    }

    public AzureFileStorageLinkedServiceArgs(
        @Nullable Input<AzureKeyVaultSecretReferenceArgs> accountKey,
        @Nullable Input<List<Object>> annotations,
        @Nullable Input<IntegrationRuntimeReferenceArgs> connectVia,
        @Nullable Input<Object> connectionString,
        @Nullable Input<String> description,
        @Nullable Input<Object> encryptedCredential,
        @Nullable Input<Object> fileShare,
        @Nullable Input<Object> host,
        @Nullable Input<Map<String,ParameterSpecificationArgs>> parameters,
        @Nullable Input<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password,
        @Nullable Input<AzureKeyVaultSecretReferenceArgs> sasToken,
        @Nullable Input<Object> sasUri,
        @Nullable Input<Object> snapshot,
        Input<String> type,
        @Nullable Input<Object> userId) {
        this.accountKey = accountKey;
        this.annotations = annotations;
        this.connectVia = connectVia;
        this.connectionString = connectionString;
        this.description = description;
        this.encryptedCredential = encryptedCredential;
        this.fileShare = fileShare;
        this.host = host;
        this.parameters = parameters;
        this.password = password;
        this.sasToken = sasToken;
        this.sasUri = sasUri;
        this.snapshot = snapshot;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userId = userId;
    }

    private AzureFileStorageLinkedServiceArgs() {
        this.accountKey = Input.empty();
        this.annotations = Input.empty();
        this.connectVia = Input.empty();
        this.connectionString = Input.empty();
        this.description = Input.empty();
        this.encryptedCredential = Input.empty();
        this.fileShare = Input.empty();
        this.host = Input.empty();
        this.parameters = Input.empty();
        this.password = Input.empty();
        this.sasToken = Input.empty();
        this.sasUri = Input.empty();
        this.snapshot = Input.empty();
        this.type = Input.empty();
        this.userId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureFileStorageLinkedServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<AzureKeyVaultSecretReferenceArgs> accountKey;
        private @Nullable Input<List<Object>> annotations;
        private @Nullable Input<IntegrationRuntimeReferenceArgs> connectVia;
        private @Nullable Input<Object> connectionString;
        private @Nullable Input<String> description;
        private @Nullable Input<Object> encryptedCredential;
        private @Nullable Input<Object> fileShare;
        private @Nullable Input<Object> host;
        private @Nullable Input<Map<String,ParameterSpecificationArgs>> parameters;
        private @Nullable Input<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password;
        private @Nullable Input<AzureKeyVaultSecretReferenceArgs> sasToken;
        private @Nullable Input<Object> sasUri;
        private @Nullable Input<Object> snapshot;
        private Input<String> type;
        private @Nullable Input<Object> userId;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureFileStorageLinkedServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountKey = defaults.accountKey;
    	      this.annotations = defaults.annotations;
    	      this.connectVia = defaults.connectVia;
    	      this.connectionString = defaults.connectionString;
    	      this.description = defaults.description;
    	      this.encryptedCredential = defaults.encryptedCredential;
    	      this.fileShare = defaults.fileShare;
    	      this.host = defaults.host;
    	      this.parameters = defaults.parameters;
    	      this.password = defaults.password;
    	      this.sasToken = defaults.sasToken;
    	      this.sasUri = defaults.sasUri;
    	      this.snapshot = defaults.snapshot;
    	      this.type = defaults.type;
    	      this.userId = defaults.userId;
        }

        public Builder setAccountKey(@Nullable Input<AzureKeyVaultSecretReferenceArgs> accountKey) {
            this.accountKey = accountKey;
            return this;
        }

        public Builder setAccountKey(@Nullable AzureKeyVaultSecretReferenceArgs accountKey) {
            this.accountKey = Input.ofNullable(accountKey);
            return this;
        }

        public Builder setAnnotations(@Nullable Input<List<Object>> annotations) {
            this.annotations = annotations;
            return this;
        }

        public Builder setAnnotations(@Nullable List<Object> annotations) {
            this.annotations = Input.ofNullable(annotations);
            return this;
        }

        public Builder setConnectVia(@Nullable Input<IntegrationRuntimeReferenceArgs> connectVia) {
            this.connectVia = connectVia;
            return this;
        }

        public Builder setConnectVia(@Nullable IntegrationRuntimeReferenceArgs connectVia) {
            this.connectVia = Input.ofNullable(connectVia);
            return this;
        }

        public Builder setConnectionString(@Nullable Input<Object> connectionString) {
            this.connectionString = connectionString;
            return this;
        }

        public Builder setConnectionString(@Nullable Object connectionString) {
            this.connectionString = Input.ofNullable(connectionString);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEncryptedCredential(@Nullable Input<Object> encryptedCredential) {
            this.encryptedCredential = encryptedCredential;
            return this;
        }

        public Builder setEncryptedCredential(@Nullable Object encryptedCredential) {
            this.encryptedCredential = Input.ofNullable(encryptedCredential);
            return this;
        }

        public Builder setFileShare(@Nullable Input<Object> fileShare) {
            this.fileShare = fileShare;
            return this;
        }

        public Builder setFileShare(@Nullable Object fileShare) {
            this.fileShare = Input.ofNullable(fileShare);
            return this;
        }

        public Builder setHost(@Nullable Input<Object> host) {
            this.host = host;
            return this;
        }

        public Builder setHost(@Nullable Object host) {
            this.host = Input.ofNullable(host);
            return this;
        }

        public Builder setParameters(@Nullable Input<Map<String,ParameterSpecificationArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setParameters(@Nullable Map<String,ParameterSpecificationArgs> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder setPassword(@Nullable Input<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password) {
            this.password = password;
            return this;
        }

        public Builder setPassword(@Nullable Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> password) {
            this.password = Input.ofNullable(password);
            return this;
        }

        public Builder setSasToken(@Nullable Input<AzureKeyVaultSecretReferenceArgs> sasToken) {
            this.sasToken = sasToken;
            return this;
        }

        public Builder setSasToken(@Nullable AzureKeyVaultSecretReferenceArgs sasToken) {
            this.sasToken = Input.ofNullable(sasToken);
            return this;
        }

        public Builder setSasUri(@Nullable Input<Object> sasUri) {
            this.sasUri = sasUri;
            return this;
        }

        public Builder setSasUri(@Nullable Object sasUri) {
            this.sasUri = Input.ofNullable(sasUri);
            return this;
        }

        public Builder setSnapshot(@Nullable Input<Object> snapshot) {
            this.snapshot = snapshot;
            return this;
        }

        public Builder setSnapshot(@Nullable Object snapshot) {
            this.snapshot = Input.ofNullable(snapshot);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder setUserId(@Nullable Input<Object> userId) {
            this.userId = userId;
            return this;
        }

        public Builder setUserId(@Nullable Object userId) {
            this.userId = Input.ofNullable(userId);
            return this;
        }

        public AzureFileStorageLinkedServiceArgs build() {
            return new AzureFileStorageLinkedServiceArgs(accountKey, annotations, connectVia, connectionString, description, encryptedCredential, fileShare, host, parameters, password, sasToken, sasUri, snapshot, type, userId);
        }
    }
}
