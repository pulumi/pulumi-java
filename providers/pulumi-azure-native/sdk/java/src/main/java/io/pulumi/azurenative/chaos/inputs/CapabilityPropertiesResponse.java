// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.chaos.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Model that represents the Capability properties model.
 * 
 */
public final class CapabilityPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final CapabilityPropertiesResponse Empty = new CapabilityPropertiesResponse();

    /**
     * Localized string of the description.
     * 
     */
    @Import(name="description", required=true)
      private final String description;

    public String description() {
        return this.description;
    }

    /**
     * URL to retrieve JSON schema of the Capability parameters.
     * 
     */
    @Import(name="parametersSchema", required=true)
      private final String parametersSchema;

    public String parametersSchema() {
        return this.parametersSchema;
    }

    /**
     * String of the Publisher that this Capability extends.
     * 
     */
    @Import(name="publisher", required=true)
      private final String publisher;

    public String publisher() {
        return this.publisher;
    }

    /**
     * String of the Target Type that this Capability extends.
     * 
     */
    @Import(name="targetType", required=true)
      private final String targetType;

    public String targetType() {
        return this.targetType;
    }

    /**
     * String of the URN for this Capability Type.
     * 
     */
    @Import(name="urn", required=true)
      private final String urn;

    public String urn() {
        return this.urn;
    }

    public CapabilityPropertiesResponse(
        String description,
        String parametersSchema,
        String publisher,
        String targetType,
        String urn) {
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.parametersSchema = Objects.requireNonNull(parametersSchema, "expected parameter 'parametersSchema' to be non-null");
        this.publisher = Objects.requireNonNull(publisher, "expected parameter 'publisher' to be non-null");
        this.targetType = Objects.requireNonNull(targetType, "expected parameter 'targetType' to be non-null");
        this.urn = Objects.requireNonNull(urn, "expected parameter 'urn' to be non-null");
    }

    private CapabilityPropertiesResponse() {
        this.description = null;
        this.parametersSchema = null;
        this.publisher = null;
        this.targetType = null;
        this.urn = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CapabilityPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private String parametersSchema;
        private String publisher;
        private String targetType;
        private String urn;

        public Builder() {
    	      // Empty
        }

        public Builder(CapabilityPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.parametersSchema = defaults.parametersSchema;
    	      this.publisher = defaults.publisher;
    	      this.targetType = defaults.targetType;
    	      this.urn = defaults.urn;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder parametersSchema(String parametersSchema) {
            this.parametersSchema = Objects.requireNonNull(parametersSchema);
            return this;
        }
        public Builder publisher(String publisher) {
            this.publisher = Objects.requireNonNull(publisher);
            return this;
        }
        public Builder targetType(String targetType) {
            this.targetType = Objects.requireNonNull(targetType);
            return this;
        }
        public Builder urn(String urn) {
            this.urn = Objects.requireNonNull(urn);
            return this;
        }        public CapabilityPropertiesResponse build() {
            return new CapabilityPropertiesResponse(description, parametersSchema, publisher, targetType, urn);
        }
    }
}
