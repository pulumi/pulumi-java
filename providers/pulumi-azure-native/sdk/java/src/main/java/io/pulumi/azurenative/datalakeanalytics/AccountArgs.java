// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datalakeanalytics;

import io.pulumi.azurenative.datalakeanalytics.enums.FirewallAllowAzureIpsState;
import io.pulumi.azurenative.datalakeanalytics.enums.FirewallState;
import io.pulumi.azurenative.datalakeanalytics.enums.TierType;
import io.pulumi.azurenative.datalakeanalytics.inputs.AddDataLakeStoreWithAccountParametersArgs;
import io.pulumi.azurenative.datalakeanalytics.inputs.AddStorageAccountWithAccountParametersArgs;
import io.pulumi.azurenative.datalakeanalytics.inputs.CreateComputePolicyWithAccountParametersArgs;
import io.pulumi.azurenative.datalakeanalytics.inputs.CreateFirewallRuleWithAccountParametersArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccountArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccountArgs Empty = new AccountArgs();

    @InputImport(name="accountName")
    private final @Nullable Input<String> accountName;

    public Input<String> getAccountName() {
        return this.accountName == null ? Input.empty() : this.accountName;
    }

    @InputImport(name="computePolicies")
    private final @Nullable Input<List<CreateComputePolicyWithAccountParametersArgs>> computePolicies;

    public Input<List<CreateComputePolicyWithAccountParametersArgs>> getComputePolicies() {
        return this.computePolicies == null ? Input.empty() : this.computePolicies;
    }

    @InputImport(name="dataLakeStoreAccounts", required=true)
    private final Input<List<AddDataLakeStoreWithAccountParametersArgs>> dataLakeStoreAccounts;

    public Input<List<AddDataLakeStoreWithAccountParametersArgs>> getDataLakeStoreAccounts() {
        return this.dataLakeStoreAccounts;
    }

    @InputImport(name="defaultDataLakeStoreAccount", required=true)
    private final Input<String> defaultDataLakeStoreAccount;

    public Input<String> getDefaultDataLakeStoreAccount() {
        return this.defaultDataLakeStoreAccount;
    }

    @InputImport(name="firewallAllowAzureIps")
    private final @Nullable Input<FirewallAllowAzureIpsState> firewallAllowAzureIps;

    public Input<FirewallAllowAzureIpsState> getFirewallAllowAzureIps() {
        return this.firewallAllowAzureIps == null ? Input.empty() : this.firewallAllowAzureIps;
    }

    @InputImport(name="firewallRules")
    private final @Nullable Input<List<CreateFirewallRuleWithAccountParametersArgs>> firewallRules;

    public Input<List<CreateFirewallRuleWithAccountParametersArgs>> getFirewallRules() {
        return this.firewallRules == null ? Input.empty() : this.firewallRules;
    }

    @InputImport(name="firewallState")
    private final @Nullable Input<FirewallState> firewallState;

    public Input<FirewallState> getFirewallState() {
        return this.firewallState == null ? Input.empty() : this.firewallState;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="maxDegreeOfParallelism")
    private final @Nullable Input<Integer> maxDegreeOfParallelism;

    public Input<Integer> getMaxDegreeOfParallelism() {
        return this.maxDegreeOfParallelism == null ? Input.empty() : this.maxDegreeOfParallelism;
    }

    @InputImport(name="maxDegreeOfParallelismPerJob")
    private final @Nullable Input<Integer> maxDegreeOfParallelismPerJob;

    public Input<Integer> getMaxDegreeOfParallelismPerJob() {
        return this.maxDegreeOfParallelismPerJob == null ? Input.empty() : this.maxDegreeOfParallelismPerJob;
    }

    @InputImport(name="maxJobCount")
    private final @Nullable Input<Integer> maxJobCount;

    public Input<Integer> getMaxJobCount() {
        return this.maxJobCount == null ? Input.empty() : this.maxJobCount;
    }

    @InputImport(name="minPriorityPerJob")
    private final @Nullable Input<Integer> minPriorityPerJob;

    public Input<Integer> getMinPriorityPerJob() {
        return this.minPriorityPerJob == null ? Input.empty() : this.minPriorityPerJob;
    }

    @InputImport(name="newTier")
    private final @Nullable Input<TierType> newTier;

    public Input<TierType> getNewTier() {
        return this.newTier == null ? Input.empty() : this.newTier;
    }

    @InputImport(name="queryStoreRetention")
    private final @Nullable Input<Integer> queryStoreRetention;

    public Input<Integer> getQueryStoreRetention() {
        return this.queryStoreRetention == null ? Input.empty() : this.queryStoreRetention;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="storageAccounts")
    private final @Nullable Input<List<AddStorageAccountWithAccountParametersArgs>> storageAccounts;

    public Input<List<AddStorageAccountWithAccountParametersArgs>> getStorageAccounts() {
        return this.storageAccounts == null ? Input.empty() : this.storageAccounts;
    }

    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public AccountArgs(
        @Nullable Input<String> accountName,
        @Nullable Input<List<CreateComputePolicyWithAccountParametersArgs>> computePolicies,
        Input<List<AddDataLakeStoreWithAccountParametersArgs>> dataLakeStoreAccounts,
        Input<String> defaultDataLakeStoreAccount,
        @Nullable Input<FirewallAllowAzureIpsState> firewallAllowAzureIps,
        @Nullable Input<List<CreateFirewallRuleWithAccountParametersArgs>> firewallRules,
        @Nullable Input<FirewallState> firewallState,
        @Nullable Input<String> location,
        @Nullable Input<Integer> maxDegreeOfParallelism,
        @Nullable Input<Integer> maxDegreeOfParallelismPerJob,
        @Nullable Input<Integer> maxJobCount,
        @Nullable Input<Integer> minPriorityPerJob,
        @Nullable Input<TierType> newTier,
        @Nullable Input<Integer> queryStoreRetention,
        Input<String> resourceGroupName,
        @Nullable Input<List<AddStorageAccountWithAccountParametersArgs>> storageAccounts,
        @Nullable Input<Map<String,String>> tags) {
        this.accountName = accountName;
        this.computePolicies = computePolicies;
        this.dataLakeStoreAccounts = Objects.requireNonNull(dataLakeStoreAccounts, "expected parameter 'dataLakeStoreAccounts' to be non-null");
        this.defaultDataLakeStoreAccount = Objects.requireNonNull(defaultDataLakeStoreAccount, "expected parameter 'defaultDataLakeStoreAccount' to be non-null");
        this.firewallAllowAzureIps = firewallAllowAzureIps == null ? Input.ofNullable(io.pulumi.azurenative.datalakeanalytics.enums.FirewallAllowAzureIpsState.Disabled) : firewallAllowAzureIps;
        this.firewallRules = firewallRules;
        this.firewallState = firewallState == null ? Input.ofNullable(io.pulumi.azurenative.datalakeanalytics.enums.FirewallState.Disabled) : firewallState;
        this.location = location;
        this.maxDegreeOfParallelism = maxDegreeOfParallelism == null ? Input.ofNullable(30) : maxDegreeOfParallelism;
        this.maxDegreeOfParallelismPerJob = maxDegreeOfParallelismPerJob == null ? Input.ofNullable(32) : maxDegreeOfParallelismPerJob;
        this.maxJobCount = maxJobCount == null ? Input.ofNullable(3) : maxJobCount;
        this.minPriorityPerJob = minPriorityPerJob;
        this.newTier = newTier == null ? Input.ofNullable(io.pulumi.azurenative.datalakeanalytics.enums.TierType.Consumption) : newTier;
        this.queryStoreRetention = queryStoreRetention == null ? Input.ofNullable(30) : queryStoreRetention;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.storageAccounts = storageAccounts;
        this.tags = tags;
    }

    private AccountArgs() {
        this.accountName = Input.empty();
        this.computePolicies = Input.empty();
        this.dataLakeStoreAccounts = Input.empty();
        this.defaultDataLakeStoreAccount = Input.empty();
        this.firewallAllowAzureIps = Input.empty();
        this.firewallRules = Input.empty();
        this.firewallState = Input.empty();
        this.location = Input.empty();
        this.maxDegreeOfParallelism = Input.empty();
        this.maxDegreeOfParallelismPerJob = Input.empty();
        this.maxJobCount = Input.empty();
        this.minPriorityPerJob = Input.empty();
        this.newTier = Input.empty();
        this.queryStoreRetention = Input.empty();
        this.resourceGroupName = Input.empty();
        this.storageAccounts = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accountName;
        private @Nullable Input<List<CreateComputePolicyWithAccountParametersArgs>> computePolicies;
        private Input<List<AddDataLakeStoreWithAccountParametersArgs>> dataLakeStoreAccounts;
        private Input<String> defaultDataLakeStoreAccount;
        private @Nullable Input<FirewallAllowAzureIpsState> firewallAllowAzureIps;
        private @Nullable Input<List<CreateFirewallRuleWithAccountParametersArgs>> firewallRules;
        private @Nullable Input<FirewallState> firewallState;
        private @Nullable Input<String> location;
        private @Nullable Input<Integer> maxDegreeOfParallelism;
        private @Nullable Input<Integer> maxDegreeOfParallelismPerJob;
        private @Nullable Input<Integer> maxJobCount;
        private @Nullable Input<Integer> minPriorityPerJob;
        private @Nullable Input<TierType> newTier;
        private @Nullable Input<Integer> queryStoreRetention;
        private Input<String> resourceGroupName;
        private @Nullable Input<List<AddStorageAccountWithAccountParametersArgs>> storageAccounts;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(AccountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.computePolicies = defaults.computePolicies;
    	      this.dataLakeStoreAccounts = defaults.dataLakeStoreAccounts;
    	      this.defaultDataLakeStoreAccount = defaults.defaultDataLakeStoreAccount;
    	      this.firewallAllowAzureIps = defaults.firewallAllowAzureIps;
    	      this.firewallRules = defaults.firewallRules;
    	      this.firewallState = defaults.firewallState;
    	      this.location = defaults.location;
    	      this.maxDegreeOfParallelism = defaults.maxDegreeOfParallelism;
    	      this.maxDegreeOfParallelismPerJob = defaults.maxDegreeOfParallelismPerJob;
    	      this.maxJobCount = defaults.maxJobCount;
    	      this.minPriorityPerJob = defaults.minPriorityPerJob;
    	      this.newTier = defaults.newTier;
    	      this.queryStoreRetention = defaults.queryStoreRetention;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.storageAccounts = defaults.storageAccounts;
    	      this.tags = defaults.tags;
        }

        public Builder setAccountName(@Nullable Input<String> accountName) {
            this.accountName = accountName;
            return this;
        }

        public Builder setAccountName(@Nullable String accountName) {
            this.accountName = Input.ofNullable(accountName);
            return this;
        }

        public Builder setComputePolicies(@Nullable Input<List<CreateComputePolicyWithAccountParametersArgs>> computePolicies) {
            this.computePolicies = computePolicies;
            return this;
        }

        public Builder setComputePolicies(@Nullable List<CreateComputePolicyWithAccountParametersArgs> computePolicies) {
            this.computePolicies = Input.ofNullable(computePolicies);
            return this;
        }

        public Builder setDataLakeStoreAccounts(Input<List<AddDataLakeStoreWithAccountParametersArgs>> dataLakeStoreAccounts) {
            this.dataLakeStoreAccounts = Objects.requireNonNull(dataLakeStoreAccounts);
            return this;
        }

        public Builder setDataLakeStoreAccounts(List<AddDataLakeStoreWithAccountParametersArgs> dataLakeStoreAccounts) {
            this.dataLakeStoreAccounts = Input.of(Objects.requireNonNull(dataLakeStoreAccounts));
            return this;
        }

        public Builder setDefaultDataLakeStoreAccount(Input<String> defaultDataLakeStoreAccount) {
            this.defaultDataLakeStoreAccount = Objects.requireNonNull(defaultDataLakeStoreAccount);
            return this;
        }

        public Builder setDefaultDataLakeStoreAccount(String defaultDataLakeStoreAccount) {
            this.defaultDataLakeStoreAccount = Input.of(Objects.requireNonNull(defaultDataLakeStoreAccount));
            return this;
        }

        public Builder setFirewallAllowAzureIps(@Nullable Input<FirewallAllowAzureIpsState> firewallAllowAzureIps) {
            this.firewallAllowAzureIps = firewallAllowAzureIps;
            return this;
        }

        public Builder setFirewallAllowAzureIps(@Nullable FirewallAllowAzureIpsState firewallAllowAzureIps) {
            this.firewallAllowAzureIps = Input.ofNullable(firewallAllowAzureIps);
            return this;
        }

        public Builder setFirewallRules(@Nullable Input<List<CreateFirewallRuleWithAccountParametersArgs>> firewallRules) {
            this.firewallRules = firewallRules;
            return this;
        }

        public Builder setFirewallRules(@Nullable List<CreateFirewallRuleWithAccountParametersArgs> firewallRules) {
            this.firewallRules = Input.ofNullable(firewallRules);
            return this;
        }

        public Builder setFirewallState(@Nullable Input<FirewallState> firewallState) {
            this.firewallState = firewallState;
            return this;
        }

        public Builder setFirewallState(@Nullable FirewallState firewallState) {
            this.firewallState = Input.ofNullable(firewallState);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMaxDegreeOfParallelism(@Nullable Input<Integer> maxDegreeOfParallelism) {
            this.maxDegreeOfParallelism = maxDegreeOfParallelism;
            return this;
        }

        public Builder setMaxDegreeOfParallelism(@Nullable Integer maxDegreeOfParallelism) {
            this.maxDegreeOfParallelism = Input.ofNullable(maxDegreeOfParallelism);
            return this;
        }

        public Builder setMaxDegreeOfParallelismPerJob(@Nullable Input<Integer> maxDegreeOfParallelismPerJob) {
            this.maxDegreeOfParallelismPerJob = maxDegreeOfParallelismPerJob;
            return this;
        }

        public Builder setMaxDegreeOfParallelismPerJob(@Nullable Integer maxDegreeOfParallelismPerJob) {
            this.maxDegreeOfParallelismPerJob = Input.ofNullable(maxDegreeOfParallelismPerJob);
            return this;
        }

        public Builder setMaxJobCount(@Nullable Input<Integer> maxJobCount) {
            this.maxJobCount = maxJobCount;
            return this;
        }

        public Builder setMaxJobCount(@Nullable Integer maxJobCount) {
            this.maxJobCount = Input.ofNullable(maxJobCount);
            return this;
        }

        public Builder setMinPriorityPerJob(@Nullable Input<Integer> minPriorityPerJob) {
            this.minPriorityPerJob = minPriorityPerJob;
            return this;
        }

        public Builder setMinPriorityPerJob(@Nullable Integer minPriorityPerJob) {
            this.minPriorityPerJob = Input.ofNullable(minPriorityPerJob);
            return this;
        }

        public Builder setNewTier(@Nullable Input<TierType> newTier) {
            this.newTier = newTier;
            return this;
        }

        public Builder setNewTier(@Nullable TierType newTier) {
            this.newTier = Input.ofNullable(newTier);
            return this;
        }

        public Builder setQueryStoreRetention(@Nullable Input<Integer> queryStoreRetention) {
            this.queryStoreRetention = queryStoreRetention;
            return this;
        }

        public Builder setQueryStoreRetention(@Nullable Integer queryStoreRetention) {
            this.queryStoreRetention = Input.ofNullable(queryStoreRetention);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setStorageAccounts(@Nullable Input<List<AddStorageAccountWithAccountParametersArgs>> storageAccounts) {
            this.storageAccounts = storageAccounts;
            return this;
        }

        public Builder setStorageAccounts(@Nullable List<AddStorageAccountWithAccountParametersArgs> storageAccounts) {
            this.storageAccounts = Input.ofNullable(storageAccounts);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public AccountArgs build() {
            return new AccountArgs(accountName, computePolicies, dataLakeStoreAccounts, defaultDataLakeStoreAccount, firewallAllowAzureIps, firewallRules, firewallState, location, maxDegreeOfParallelism, maxDegreeOfParallelismPerJob, maxJobCount, minPriorityPerJob, newTier, queryStoreRetention, resourceGroupName, storageAccounts, tags);
        }
    }
}
