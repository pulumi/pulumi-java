// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.peering;

import io.pulumi.azurenative.peering.enums.Kind;
import io.pulumi.azurenative.peering.inputs.PeeringPropertiesDirectArgs;
import io.pulumi.azurenative.peering.inputs.PeeringPropertiesExchangeArgs;
import io.pulumi.azurenative.peering.inputs.PeeringSkuArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PeeringArgs extends io.pulumi.resources.ResourceArgs {

    public static final PeeringArgs Empty = new PeeringArgs();

    @InputImport(name="direct")
    private final @Nullable Input<PeeringPropertiesDirectArgs> direct;

    public Input<PeeringPropertiesDirectArgs> getDirect() {
        return this.direct == null ? Input.empty() : this.direct;
    }

    @InputImport(name="exchange")
    private final @Nullable Input<PeeringPropertiesExchangeArgs> exchange;

    public Input<PeeringPropertiesExchangeArgs> getExchange() {
        return this.exchange == null ? Input.empty() : this.exchange;
    }

    @InputImport(name="kind", required=true)
    private final Input<Either<String,Kind>> kind;

    public Input<Either<String,Kind>> getKind() {
        return this.kind;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="peeringLocation")
    private final @Nullable Input<String> peeringLocation;

    public Input<String> getPeeringLocation() {
        return this.peeringLocation == null ? Input.empty() : this.peeringLocation;
    }

    @InputImport(name="peeringName")
    private final @Nullable Input<String> peeringName;

    public Input<String> getPeeringName() {
        return this.peeringName == null ? Input.empty() : this.peeringName;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="sku", required=true)
    private final Input<PeeringSkuArgs> sku;

    public Input<PeeringSkuArgs> getSku() {
        return this.sku;
    }

    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public PeeringArgs(
        @Nullable Input<PeeringPropertiesDirectArgs> direct,
        @Nullable Input<PeeringPropertiesExchangeArgs> exchange,
        Input<Either<String,Kind>> kind,
        @Nullable Input<String> location,
        @Nullable Input<String> peeringLocation,
        @Nullable Input<String> peeringName,
        Input<String> resourceGroupName,
        Input<PeeringSkuArgs> sku,
        @Nullable Input<Map<String,String>> tags) {
        this.direct = direct;
        this.exchange = exchange;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.location = location;
        this.peeringLocation = peeringLocation;
        this.peeringName = peeringName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = Objects.requireNonNull(sku, "expected parameter 'sku' to be non-null");
        this.tags = tags;
    }

    private PeeringArgs() {
        this.direct = Input.empty();
        this.exchange = Input.empty();
        this.kind = Input.empty();
        this.location = Input.empty();
        this.peeringLocation = Input.empty();
        this.peeringName = Input.empty();
        this.resourceGroupName = Input.empty();
        this.sku = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PeeringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<PeeringPropertiesDirectArgs> direct;
        private @Nullable Input<PeeringPropertiesExchangeArgs> exchange;
        private Input<Either<String,Kind>> kind;
        private @Nullable Input<String> location;
        private @Nullable Input<String> peeringLocation;
        private @Nullable Input<String> peeringName;
        private Input<String> resourceGroupName;
        private Input<PeeringSkuArgs> sku;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(PeeringArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.direct = defaults.direct;
    	      this.exchange = defaults.exchange;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.peeringLocation = defaults.peeringLocation;
    	      this.peeringName = defaults.peeringName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder setDirect(@Nullable Input<PeeringPropertiesDirectArgs> direct) {
            this.direct = direct;
            return this;
        }

        public Builder setDirect(@Nullable PeeringPropertiesDirectArgs direct) {
            this.direct = Input.ofNullable(direct);
            return this;
        }

        public Builder setExchange(@Nullable Input<PeeringPropertiesExchangeArgs> exchange) {
            this.exchange = exchange;
            return this;
        }

        public Builder setExchange(@Nullable PeeringPropertiesExchangeArgs exchange) {
            this.exchange = Input.ofNullable(exchange);
            return this;
        }

        public Builder setKind(Input<Either<String,Kind>> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setKind(Either<String,Kind> kind) {
            this.kind = Input.of(Objects.requireNonNull(kind));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setPeeringLocation(@Nullable Input<String> peeringLocation) {
            this.peeringLocation = peeringLocation;
            return this;
        }

        public Builder setPeeringLocation(@Nullable String peeringLocation) {
            this.peeringLocation = Input.ofNullable(peeringLocation);
            return this;
        }

        public Builder setPeeringName(@Nullable Input<String> peeringName) {
            this.peeringName = peeringName;
            return this;
        }

        public Builder setPeeringName(@Nullable String peeringName) {
            this.peeringName = Input.ofNullable(peeringName);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSku(Input<PeeringSkuArgs> sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }

        public Builder setSku(PeeringSkuArgs sku) {
            this.sku = Input.of(Objects.requireNonNull(sku));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public PeeringArgs build() {
            return new PeeringArgs(direct, exchange, kind, location, peeringLocation, peeringName, resourceGroupName, sku, tags);
        }
    }
}
