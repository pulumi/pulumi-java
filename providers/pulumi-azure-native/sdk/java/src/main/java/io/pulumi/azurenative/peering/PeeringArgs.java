// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.peering;

import io.pulumi.azurenative.peering.enums.Kind;
import io.pulumi.azurenative.peering.inputs.PeeringPropertiesDirectArgs;
import io.pulumi.azurenative.peering.inputs.PeeringPropertiesExchangeArgs;
import io.pulumi.azurenative.peering.inputs.PeeringSkuArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PeeringArgs extends io.pulumi.resources.ResourceArgs {

    public static final PeeringArgs Empty = new PeeringArgs();

    /**
     * The properties that define a direct peering.
     * 
     */
    @Import(name="direct")
      private final @Nullable Output<PeeringPropertiesDirectArgs> direct;

    public Output<PeeringPropertiesDirectArgs> getDirect() {
        return this.direct == null ? Output.empty() : this.direct;
    }

    /**
     * The properties that define an exchange peering.
     * 
     */
    @Import(name="exchange")
      private final @Nullable Output<PeeringPropertiesExchangeArgs> exchange;

    public Output<PeeringPropertiesExchangeArgs> getExchange() {
        return this.exchange == null ? Output.empty() : this.exchange;
    }

    /**
     * The kind of the peering.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<Either<String,Kind>> kind;

    public Output<Either<String,Kind>> getKind() {
        return this.kind;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The location of the peering.
     * 
     */
    @Import(name="peeringLocation")
      private final @Nullable Output<String> peeringLocation;

    public Output<String> getPeeringLocation() {
        return this.peeringLocation == null ? Output.empty() : this.peeringLocation;
    }

    /**
     * The name of the peering.
     * 
     */
    @Import(name="peeringName")
      private final @Nullable Output<String> peeringName;

    public Output<String> getPeeringName() {
        return this.peeringName == null ? Output.empty() : this.peeringName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SKU that defines the tier and kind of the peering.
     * 
     */
    @Import(name="sku", required=true)
      private final Output<PeeringSkuArgs> sku;

    public Output<PeeringSkuArgs> getSku() {
        return this.sku;
    }

    /**
     * The resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public PeeringArgs(
        @Nullable Output<PeeringPropertiesDirectArgs> direct,
        @Nullable Output<PeeringPropertiesExchangeArgs> exchange,
        Output<Either<String,Kind>> kind,
        @Nullable Output<String> location,
        @Nullable Output<String> peeringLocation,
        @Nullable Output<String> peeringName,
        Output<String> resourceGroupName,
        Output<PeeringSkuArgs> sku,
        @Nullable Output<Map<String,String>> tags) {
        this.direct = direct;
        this.exchange = exchange;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.location = location;
        this.peeringLocation = peeringLocation;
        this.peeringName = peeringName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = Objects.requireNonNull(sku, "expected parameter 'sku' to be non-null");
        this.tags = tags;
    }

    private PeeringArgs() {
        this.direct = Output.empty();
        this.exchange = Output.empty();
        this.kind = Output.empty();
        this.location = Output.empty();
        this.peeringLocation = Output.empty();
        this.peeringName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sku = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PeeringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<PeeringPropertiesDirectArgs> direct;
        private @Nullable Output<PeeringPropertiesExchangeArgs> exchange;
        private Output<Either<String,Kind>> kind;
        private @Nullable Output<String> location;
        private @Nullable Output<String> peeringLocation;
        private @Nullable Output<String> peeringName;
        private Output<String> resourceGroupName;
        private Output<PeeringSkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(PeeringArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.direct = defaults.direct;
    	      this.exchange = defaults.exchange;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.peeringLocation = defaults.peeringLocation;
    	      this.peeringName = defaults.peeringName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder direct(@Nullable Output<PeeringPropertiesDirectArgs> direct) {
            this.direct = direct;
            return this;
        }

        public Builder direct(@Nullable PeeringPropertiesDirectArgs direct) {
            this.direct = Output.ofNullable(direct);
            return this;
        }

        public Builder exchange(@Nullable Output<PeeringPropertiesExchangeArgs> exchange) {
            this.exchange = exchange;
            return this;
        }

        public Builder exchange(@Nullable PeeringPropertiesExchangeArgs exchange) {
            this.exchange = Output.ofNullable(exchange);
            return this;
        }

        public Builder kind(Output<Either<String,Kind>> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder kind(Either<String,Kind> kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder peeringLocation(@Nullable Output<String> peeringLocation) {
            this.peeringLocation = peeringLocation;
            return this;
        }

        public Builder peeringLocation(@Nullable String peeringLocation) {
            this.peeringLocation = Output.ofNullable(peeringLocation);
            return this;
        }

        public Builder peeringName(@Nullable Output<String> peeringName) {
            this.peeringName = peeringName;
            return this;
        }

        public Builder peeringName(@Nullable String peeringName) {
            this.peeringName = Output.ofNullable(peeringName);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder sku(Output<PeeringSkuArgs> sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }

        public Builder sku(PeeringSkuArgs sku) {
            this.sku = Output.of(Objects.requireNonNull(sku));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public PeeringArgs build() {
            return new PeeringArgs(direct, exchange, kind, location, peeringLocation, peeringName, resourceGroupName, sku, tags);
        }
    }
}
