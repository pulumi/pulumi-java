// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.outputs;

import io.pulumi.azurenative.compute.outputs.ExtendedLocationResponse;
import io.pulumi.azurenative.compute.outputs.ImageStorageProfileResponse;
import io.pulumi.azurenative.compute.outputs.SubResourceResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetImageResult {
    private final @Nullable ExtendedLocationResponse extendedLocation;
    private final @Nullable String hyperVGeneration;
    private final String id;
    private final String location;
    private final String name;
    private final String provisioningState;
    private final @Nullable SubResourceResponse sourceVirtualMachine;
    private final @Nullable ImageStorageProfileResponse storageProfile;
    private final @Nullable Map<String,String> tags;
    private final String type;

    @OutputCustomType.Constructor({"extendedLocation","hyperVGeneration","id","location","name","provisioningState","sourceVirtualMachine","storageProfile","tags","type"})
    private GetImageResult(
        @Nullable ExtendedLocationResponse extendedLocation,
        @Nullable String hyperVGeneration,
        String id,
        String location,
        String name,
        String provisioningState,
        @Nullable SubResourceResponse sourceVirtualMachine,
        @Nullable ImageStorageProfileResponse storageProfile,
        @Nullable Map<String,String> tags,
        String type) {
        this.extendedLocation = extendedLocation;
        this.hyperVGeneration = hyperVGeneration;
        this.id = Objects.requireNonNull(id);
        this.location = Objects.requireNonNull(location);
        this.name = Objects.requireNonNull(name);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.sourceVirtualMachine = sourceVirtualMachine;
        this.storageProfile = storageProfile;
        this.tags = tags;
        this.type = Objects.requireNonNull(type);
    }

    public Optional<ExtendedLocationResponse> getExtendedLocation() {
        return Optional.ofNullable(this.extendedLocation);
    }
    public Optional<String> getHyperVGeneration() {
        return Optional.ofNullable(this.hyperVGeneration);
    }
    public String getId() {
        return this.id;
    }
    public String getLocation() {
        return this.location;
    }
    public String getName() {
        return this.name;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public Optional<SubResourceResponse> getSourceVirtualMachine() {
        return Optional.ofNullable(this.sourceVirtualMachine);
    }
    public Optional<ImageStorageProfileResponse> getStorageProfile() {
        return Optional.ofNullable(this.storageProfile);
    }
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable ExtendedLocationResponse extendedLocation;
        private @Nullable String hyperVGeneration;
        private String id;
        private String location;
        private String name;
        private String provisioningState;
        private @Nullable SubResourceResponse sourceVirtualMachine;
        private @Nullable ImageStorageProfileResponse storageProfile;
        private @Nullable Map<String,String> tags;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sourceVirtualMachine = defaults.sourceVirtualMachine;
    	      this.storageProfile = defaults.storageProfile;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder setExtendedLocation(@Nullable ExtendedLocationResponse extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }

        public Builder setHyperVGeneration(@Nullable String hyperVGeneration) {
            this.hyperVGeneration = hyperVGeneration;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setSourceVirtualMachine(@Nullable SubResourceResponse sourceVirtualMachine) {
            this.sourceVirtualMachine = sourceVirtualMachine;
            return this;
        }

        public Builder setStorageProfile(@Nullable ImageStorageProfileResponse storageProfile) {
            this.storageProfile = storageProfile;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetImageResult build() {
            return new GetImageResult(extendedLocation, hyperVGeneration, id, location, name, provisioningState, sourceVirtualMachine, storageProfile, tags, type);
        }
    }
}
