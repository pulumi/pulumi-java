// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.compute.enums.DedicatedHostLicenseTypes;
import io.pulumi.azurenative.compute.inputs.SkuArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DedicatedHostArgs extends io.pulumi.resources.ResourceArgs {

    public static final DedicatedHostArgs Empty = new DedicatedHostArgs();

    /**
     * Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.
     * 
     */
    @InputImport(name="autoReplaceOnFailure")
      private final @Nullable Output<Boolean> autoReplaceOnFailure;

    public Output<Boolean> getAutoReplaceOnFailure() {
        return this.autoReplaceOnFailure == null ? Output.empty() : this.autoReplaceOnFailure;
    }

    /**
     * The name of the dedicated host group.
     * 
     */
    @InputImport(name="hostGroupName", required=true)
      private final Output<String> hostGroupName;

    public Output<String> getHostGroupName() {
        return this.hostGroupName;
    }

    /**
     * The name of the dedicated host .
     * 
     */
    @InputImport(name="hostName")
      private final @Nullable Output<String> hostName;

    public Output<String> getHostName() {
        return this.hostName == null ? Output.empty() : this.hostName;
    }

    /**
     * Specifies the software license type that will be applied to the VMs deployed on the dedicated host. <br><br> Possible values are: <br><br> **None** <br><br> **Windows_Server_Hybrid** <br><br> **Windows_Server_Perpetual** <br><br> Default: **None**
     * 
     */
    @InputImport(name="licenseType")
      private final @Nullable Output<DedicatedHostLicenseTypes> licenseType;

    public Output<DedicatedHostLicenseTypes> getLicenseType() {
        return this.licenseType == null ? Output.empty() : this.licenseType;
    }

    /**
     * Resource location
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Fault domain of the dedicated host within a dedicated host group.
     * 
     */
    @InputImport(name="platformFaultDomain")
      private final @Nullable Output<Integer> platformFaultDomain;

    public Output<Integer> getPlatformFaultDomain() {
        return this.platformFaultDomain == null ? Output.empty() : this.platformFaultDomain;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible values.
     * 
     */
    @InputImport(name="sku", required=true)
      private final Output<SkuArgs> sku;

    public Output<SkuArgs> getSku() {
        return this.sku;
    }

    /**
     * Resource tags
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DedicatedHostArgs(
        @Nullable Output<Boolean> autoReplaceOnFailure,
        Output<String> hostGroupName,
        @Nullable Output<String> hostName,
        @Nullable Output<DedicatedHostLicenseTypes> licenseType,
        @Nullable Output<String> location,
        @Nullable Output<Integer> platformFaultDomain,
        Output<String> resourceGroupName,
        Output<SkuArgs> sku,
        @Nullable Output<Map<String,String>> tags) {
        this.autoReplaceOnFailure = autoReplaceOnFailure;
        this.hostGroupName = Objects.requireNonNull(hostGroupName, "expected parameter 'hostGroupName' to be non-null");
        this.hostName = hostName;
        this.licenseType = licenseType;
        this.location = location;
        this.platformFaultDomain = platformFaultDomain;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = Objects.requireNonNull(sku, "expected parameter 'sku' to be non-null");
        this.tags = tags;
    }

    private DedicatedHostArgs() {
        this.autoReplaceOnFailure = Output.empty();
        this.hostGroupName = Output.empty();
        this.hostName = Output.empty();
        this.licenseType = Output.empty();
        this.location = Output.empty();
        this.platformFaultDomain = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sku = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DedicatedHostArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> autoReplaceOnFailure;
        private Output<String> hostGroupName;
        private @Nullable Output<String> hostName;
        private @Nullable Output<DedicatedHostLicenseTypes> licenseType;
        private @Nullable Output<String> location;
        private @Nullable Output<Integer> platformFaultDomain;
        private Output<String> resourceGroupName;
        private Output<SkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DedicatedHostArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoReplaceOnFailure = defaults.autoReplaceOnFailure;
    	      this.hostGroupName = defaults.hostGroupName;
    	      this.hostName = defaults.hostName;
    	      this.licenseType = defaults.licenseType;
    	      this.location = defaults.location;
    	      this.platformFaultDomain = defaults.platformFaultDomain;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder autoReplaceOnFailure(@Nullable Output<Boolean> autoReplaceOnFailure) {
            this.autoReplaceOnFailure = autoReplaceOnFailure;
            return this;
        }

        public Builder autoReplaceOnFailure(@Nullable Boolean autoReplaceOnFailure) {
            this.autoReplaceOnFailure = Output.ofNullable(autoReplaceOnFailure);
            return this;
        }

        public Builder hostGroupName(Output<String> hostGroupName) {
            this.hostGroupName = Objects.requireNonNull(hostGroupName);
            return this;
        }

        public Builder hostGroupName(String hostGroupName) {
            this.hostGroupName = Output.of(Objects.requireNonNull(hostGroupName));
            return this;
        }

        public Builder hostName(@Nullable Output<String> hostName) {
            this.hostName = hostName;
            return this;
        }

        public Builder hostName(@Nullable String hostName) {
            this.hostName = Output.ofNullable(hostName);
            return this;
        }

        public Builder licenseType(@Nullable Output<DedicatedHostLicenseTypes> licenseType) {
            this.licenseType = licenseType;
            return this;
        }

        public Builder licenseType(@Nullable DedicatedHostLicenseTypes licenseType) {
            this.licenseType = Output.ofNullable(licenseType);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder platformFaultDomain(@Nullable Output<Integer> platformFaultDomain) {
            this.platformFaultDomain = platformFaultDomain;
            return this;
        }

        public Builder platformFaultDomain(@Nullable Integer platformFaultDomain) {
            this.platformFaultDomain = Output.ofNullable(platformFaultDomain);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder sku(Output<SkuArgs> sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }

        public Builder sku(SkuArgs sku) {
            this.sku = Output.of(Objects.requireNonNull(sku));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public DedicatedHostArgs build() {
            return new DedicatedHostArgs(autoReplaceOnFailure, hostGroupName, hostName, licenseType, location, platformFaultDomain, resourceGroupName, sku, tags);
        }
    }
}
