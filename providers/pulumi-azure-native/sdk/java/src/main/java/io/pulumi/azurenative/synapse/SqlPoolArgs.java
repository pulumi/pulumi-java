// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.synapse;

import io.pulumi.azurenative.synapse.enums.CreateMode;
import io.pulumi.azurenative.synapse.enums.StorageAccountType;
import io.pulumi.azurenative.synapse.inputs.SkuArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SqlPoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final SqlPoolArgs Empty = new SqlPoolArgs();

    /**
     * Collation mode
     * 
     */
    @InputImport(name="collation")
      private final @Nullable Output<String> collation;

    public Output<String> getCollation() {
        return this.collation == null ? Output.empty() : this.collation;
    }

    /**
     * Specifies the mode of sql pool creation.
     * 
     * Default: regular sql pool creation.
     * 
     * PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
     * 
     * Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
     * 
     * Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool's original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
     * 
     */
    @InputImport(name="createMode")
      private final @Nullable Output<Either<String,CreateMode>> createMode;

    public Output<Either<String,CreateMode>> getCreateMode() {
        return this.createMode == null ? Output.empty() : this.createMode;
    }

    /**
     * Date the SQL pool was created
     * 
     */
    @InputImport(name="creationDate")
      private final @Nullable Output<String> creationDate;

    public Output<String> getCreationDate() {
        return this.creationDate == null ? Output.empty() : this.creationDate;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Maximum size in bytes
     * 
     */
    @InputImport(name="maxSizeBytes")
      private final @Nullable Output<Double> maxSizeBytes;

    public Output<Double> getMaxSizeBytes() {
        return this.maxSizeBytes == null ? Output.empty() : this.maxSizeBytes;
    }

    /**
     * Resource state
     * 
     */
    @InputImport(name="provisioningState")
      private final @Nullable Output<String> provisioningState;

    public Output<String> getProvisioningState() {
        return this.provisioningState == null ? Output.empty() : this.provisioningState;
    }

    /**
     * Backup database to restore from
     * 
     */
    @InputImport(name="recoverableDatabaseId")
      private final @Nullable Output<String> recoverableDatabaseId;

    public Output<String> getRecoverableDatabaseId() {
        return this.recoverableDatabaseId == null ? Output.empty() : this.recoverableDatabaseId;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Snapshot time to restore
     * 
     */
    @InputImport(name="restorePointInTime")
      private final @Nullable Output<String> restorePointInTime;

    public Output<String> getRestorePointInTime() {
        return this.restorePointInTime == null ? Output.empty() : this.restorePointInTime;
    }

    /**
     * SQL pool SKU
     * 
     */
    @InputImport(name="sku")
      private final @Nullable Output<SkuArgs> sku;

    public Output<SkuArgs> getSku() {
        return this.sku == null ? Output.empty() : this.sku;
    }

    /**
     * Source database to create from
     * 
     */
    @InputImport(name="sourceDatabaseId")
      private final @Nullable Output<String> sourceDatabaseId;

    public Output<String> getSourceDatabaseId() {
        return this.sourceDatabaseId == null ? Output.empty() : this.sourceDatabaseId;
    }

    /**
     * SQL pool name
     * 
     */
    @InputImport(name="sqlPoolName")
      private final @Nullable Output<String> sqlPoolName;

    public Output<String> getSqlPoolName() {
        return this.sqlPoolName == null ? Output.empty() : this.sqlPoolName;
    }

    /**
     * Resource status
     * 
     */
    @InputImport(name="status")
      private final @Nullable Output<String> status;

    public Output<String> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * The storage account type used to store backups for this sql pool.
     * 
     */
    @InputImport(name="storageAccountType")
      private final @Nullable Output<Either<String,StorageAccountType>> storageAccountType;

    public Output<Either<String,StorageAccountType>> getStorageAccountType() {
        return this.storageAccountType == null ? Output.empty() : this.storageAccountType;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The name of the workspace
     * 
     */
    @InputImport(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public SqlPoolArgs(
        @Nullable Output<String> collation,
        @Nullable Output<Either<String,CreateMode>> createMode,
        @Nullable Output<String> creationDate,
        @Nullable Output<String> location,
        @Nullable Output<Double> maxSizeBytes,
        @Nullable Output<String> provisioningState,
        @Nullable Output<String> recoverableDatabaseId,
        Output<String> resourceGroupName,
        @Nullable Output<String> restorePointInTime,
        @Nullable Output<SkuArgs> sku,
        @Nullable Output<String> sourceDatabaseId,
        @Nullable Output<String> sqlPoolName,
        @Nullable Output<String> status,
        @Nullable Output<Either<String,StorageAccountType>> storageAccountType,
        @Nullable Output<Map<String,String>> tags,
        Output<String> workspaceName) {
        this.collation = collation;
        this.createMode = createMode;
        this.creationDate = creationDate;
        this.location = location;
        this.maxSizeBytes = maxSizeBytes;
        this.provisioningState = provisioningState;
        this.recoverableDatabaseId = recoverableDatabaseId;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.restorePointInTime = restorePointInTime;
        this.sku = sku;
        this.sourceDatabaseId = sourceDatabaseId;
        this.sqlPoolName = sqlPoolName;
        this.status = status;
        this.storageAccountType = storageAccountType;
        this.tags = tags;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private SqlPoolArgs() {
        this.collation = Output.empty();
        this.createMode = Output.empty();
        this.creationDate = Output.empty();
        this.location = Output.empty();
        this.maxSizeBytes = Output.empty();
        this.provisioningState = Output.empty();
        this.recoverableDatabaseId = Output.empty();
        this.resourceGroupName = Output.empty();
        this.restorePointInTime = Output.empty();
        this.sku = Output.empty();
        this.sourceDatabaseId = Output.empty();
        this.sqlPoolName = Output.empty();
        this.status = Output.empty();
        this.storageAccountType = Output.empty();
        this.tags = Output.empty();
        this.workspaceName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> collation;
        private @Nullable Output<Either<String,CreateMode>> createMode;
        private @Nullable Output<String> creationDate;
        private @Nullable Output<String> location;
        private @Nullable Output<Double> maxSizeBytes;
        private @Nullable Output<String> provisioningState;
        private @Nullable Output<String> recoverableDatabaseId;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> restorePointInTime;
        private @Nullable Output<SkuArgs> sku;
        private @Nullable Output<String> sourceDatabaseId;
        private @Nullable Output<String> sqlPoolName;
        private @Nullable Output<String> status;
        private @Nullable Output<Either<String,StorageAccountType>> storageAccountType;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlPoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collation = defaults.collation;
    	      this.createMode = defaults.createMode;
    	      this.creationDate = defaults.creationDate;
    	      this.location = defaults.location;
    	      this.maxSizeBytes = defaults.maxSizeBytes;
    	      this.provisioningState = defaults.provisioningState;
    	      this.recoverableDatabaseId = defaults.recoverableDatabaseId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.restorePointInTime = defaults.restorePointInTime;
    	      this.sku = defaults.sku;
    	      this.sourceDatabaseId = defaults.sourceDatabaseId;
    	      this.sqlPoolName = defaults.sqlPoolName;
    	      this.status = defaults.status;
    	      this.storageAccountType = defaults.storageAccountType;
    	      this.tags = defaults.tags;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder collation(@Nullable Output<String> collation) {
            this.collation = collation;
            return this;
        }

        public Builder collation(@Nullable String collation) {
            this.collation = Output.ofNullable(collation);
            return this;
        }

        public Builder createMode(@Nullable Output<Either<String,CreateMode>> createMode) {
            this.createMode = createMode;
            return this;
        }

        public Builder createMode(@Nullable Either<String,CreateMode> createMode) {
            this.createMode = Output.ofNullable(createMode);
            return this;
        }

        public Builder creationDate(@Nullable Output<String> creationDate) {
            this.creationDate = creationDate;
            return this;
        }

        public Builder creationDate(@Nullable String creationDate) {
            this.creationDate = Output.ofNullable(creationDate);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder maxSizeBytes(@Nullable Output<Double> maxSizeBytes) {
            this.maxSizeBytes = maxSizeBytes;
            return this;
        }

        public Builder maxSizeBytes(@Nullable Double maxSizeBytes) {
            this.maxSizeBytes = Output.ofNullable(maxSizeBytes);
            return this;
        }

        public Builder provisioningState(@Nullable Output<String> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }

        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = Output.ofNullable(provisioningState);
            return this;
        }

        public Builder recoverableDatabaseId(@Nullable Output<String> recoverableDatabaseId) {
            this.recoverableDatabaseId = recoverableDatabaseId;
            return this;
        }

        public Builder recoverableDatabaseId(@Nullable String recoverableDatabaseId) {
            this.recoverableDatabaseId = Output.ofNullable(recoverableDatabaseId);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder restorePointInTime(@Nullable Output<String> restorePointInTime) {
            this.restorePointInTime = restorePointInTime;
            return this;
        }

        public Builder restorePointInTime(@Nullable String restorePointInTime) {
            this.restorePointInTime = Output.ofNullable(restorePointInTime);
            return this;
        }

        public Builder sku(@Nullable Output<SkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder sku(@Nullable SkuArgs sku) {
            this.sku = Output.ofNullable(sku);
            return this;
        }

        public Builder sourceDatabaseId(@Nullable Output<String> sourceDatabaseId) {
            this.sourceDatabaseId = sourceDatabaseId;
            return this;
        }

        public Builder sourceDatabaseId(@Nullable String sourceDatabaseId) {
            this.sourceDatabaseId = Output.ofNullable(sourceDatabaseId);
            return this;
        }

        public Builder sqlPoolName(@Nullable Output<String> sqlPoolName) {
            this.sqlPoolName = sqlPoolName;
            return this;
        }

        public Builder sqlPoolName(@Nullable String sqlPoolName) {
            this.sqlPoolName = Output.ofNullable(sqlPoolName);
            return this;
        }

        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Output.ofNullable(status);
            return this;
        }

        public Builder storageAccountType(@Nullable Output<Either<String,StorageAccountType>> storageAccountType) {
            this.storageAccountType = storageAccountType;
            return this;
        }

        public Builder storageAccountType(@Nullable Either<String,StorageAccountType> storageAccountType) {
            this.storageAccountType = Output.ofNullable(storageAccountType);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public SqlPoolArgs build() {
            return new SqlPoolArgs(collation, createMode, creationDate, location, maxSizeBytes, provisioningState, recoverableDatabaseId, resourceGroupName, restorePointInTime, sku, sourceDatabaseId, sqlPoolName, status, storageAccountType, tags, workspaceName);
        }
    }
}
