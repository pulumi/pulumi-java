// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration;

import io.pulumi.azurenative.datamigration.inputs.ServiceSkuArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * Name of the resource group
     * 
     */
    @Import(name="groupName", required=true)
      private final Output<String> groupName;

    public Output<String> getGroupName() {
        return this.groupName;
    }

    /**
     * The resource kind. Only 'vm' (the default) is supported.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> getKind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The public key of the service, used to encrypt secrets sent to the service
     * 
     */
    @Import(name="publicKey")
      private final @Nullable Output<String> publicKey;

    public Output<String> getPublicKey() {
        return this.publicKey == null ? Codegen.empty() : this.publicKey;
    }

    /**
     * Name of the service
     * 
     */
    @Import(name="serviceName")
      private final @Nullable Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName == null ? Codegen.empty() : this.serviceName;
    }

    /**
     * Service SKU
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<ServiceSkuArgs> sku;

    public Output<ServiceSkuArgs> getSku() {
        return this.sku == null ? Codegen.empty() : this.sku;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined
     * 
     */
    @Import(name="virtualSubnetId", required=true)
      private final Output<String> virtualSubnetId;

    public Output<String> getVirtualSubnetId() {
        return this.virtualSubnetId;
    }

    public ServiceArgs(
        Output<String> groupName,
        @Nullable Output<String> kind,
        @Nullable Output<String> location,
        @Nullable Output<String> publicKey,
        @Nullable Output<String> serviceName,
        @Nullable Output<ServiceSkuArgs> sku,
        @Nullable Output<Map<String,String>> tags,
        Output<String> virtualSubnetId) {
        this.groupName = Objects.requireNonNull(groupName, "expected parameter 'groupName' to be non-null");
        this.kind = kind;
        this.location = location;
        this.publicKey = publicKey;
        this.serviceName = serviceName;
        this.sku = sku;
        this.tags = tags;
        this.virtualSubnetId = Objects.requireNonNull(virtualSubnetId, "expected parameter 'virtualSubnetId' to be non-null");
    }

    private ServiceArgs() {
        this.groupName = Codegen.empty();
        this.kind = Codegen.empty();
        this.location = Codegen.empty();
        this.publicKey = Codegen.empty();
        this.serviceName = Codegen.empty();
        this.sku = Codegen.empty();
        this.tags = Codegen.empty();
        this.virtualSubnetId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> groupName;
        private @Nullable Output<String> kind;
        private @Nullable Output<String> location;
        private @Nullable Output<String> publicKey;
        private @Nullable Output<String> serviceName;
        private @Nullable Output<ServiceSkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> virtualSubnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.groupName = defaults.groupName;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.publicKey = defaults.publicKey;
    	      this.serviceName = defaults.serviceName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.virtualSubnetId = defaults.virtualSubnetId;
        }

        public Builder groupName(Output<String> groupName) {
            this.groupName = Objects.requireNonNull(groupName);
            return this;
        }
        public Builder groupName(String groupName) {
            this.groupName = Output.of(Objects.requireNonNull(groupName));
            return this;
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder publicKey(@Nullable Output<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }
        public Builder publicKey(@Nullable String publicKey) {
            this.publicKey = Codegen.ofNullable(publicKey);
            return this;
        }
        public Builder serviceName(@Nullable Output<String> serviceName) {
            this.serviceName = serviceName;
            return this;
        }
        public Builder serviceName(@Nullable String serviceName) {
            this.serviceName = Codegen.ofNullable(serviceName);
            return this;
        }
        public Builder sku(@Nullable Output<ServiceSkuArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable ServiceSkuArgs sku) {
            this.sku = Codegen.ofNullable(sku);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder virtualSubnetId(Output<String> virtualSubnetId) {
            this.virtualSubnetId = Objects.requireNonNull(virtualSubnetId);
            return this;
        }
        public Builder virtualSubnetId(String virtualSubnetId) {
            this.virtualSubnetId = Output.of(Objects.requireNonNull(virtualSubnetId));
            return this;
        }        public ServiceArgs build() {
            return new ServiceArgs(groupName, kind, location, publicKey, serviceName, sku, tags, virtualSubnetId);
        }
    }
}
