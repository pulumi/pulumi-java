// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.inputs;

import io.pulumi.azurenative.storage.inputs.BlobInventoryPolicyDefinitionArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * An object that wraps the blob inventory rule. Each rule is uniquely defined by name.
 * 
 */
public final class BlobInventoryPolicyRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final BlobInventoryPolicyRuleArgs Empty = new BlobInventoryPolicyRuleArgs();

    /**
     * An object that defines the blob inventory policy rule.
     * 
     */
    @InputImport(name="definition", required=true)
      private final Input<BlobInventoryPolicyDefinitionArgs> definition;

    public Input<BlobInventoryPolicyDefinitionArgs> getDefinition() {
        return this.definition;
    }

    /**
     * Rule is enabled when set to true.
     * 
     */
    @InputImport(name="enabled", required=true)
      private final Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled;
    }

    /**
     * A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    public BlobInventoryPolicyRuleArgs(
        Input<BlobInventoryPolicyDefinitionArgs> definition,
        Input<Boolean> enabled,
        Input<String> name) {
        this.definition = Objects.requireNonNull(definition, "expected parameter 'definition' to be non-null");
        this.enabled = Objects.requireNonNull(enabled, "expected parameter 'enabled' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
    }

    private BlobInventoryPolicyRuleArgs() {
        this.definition = Input.empty();
        this.enabled = Input.empty();
        this.name = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlobInventoryPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<BlobInventoryPolicyDefinitionArgs> definition;
        private Input<Boolean> enabled;
        private Input<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(BlobInventoryPolicyRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.definition = defaults.definition;
    	      this.enabled = defaults.enabled;
    	      this.name = defaults.name;
        }

        public Builder setDefinition(Input<BlobInventoryPolicyDefinitionArgs> definition) {
            this.definition = Objects.requireNonNull(definition);
            return this;
        }

        public Builder setDefinition(BlobInventoryPolicyDefinitionArgs definition) {
            this.definition = Input.of(Objects.requireNonNull(definition));
            return this;
        }

        public Builder setEnabled(Input<Boolean> enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }

        public Builder setEnabled(Boolean enabled) {
            this.enabled = Input.of(Objects.requireNonNull(enabled));
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }
        public BlobInventoryPolicyRuleArgs build() {
            return new BlobInventoryPolicyRuleArgs(definition, enabled, name);
        }
    }
}
