// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabric;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.servicefabric.outputs.ApplicationTypeVersionsCleanupPolicyResponse;
import io.pulumi.azurenative.servicefabric.outputs.AzureActiveDirectoryResponse;
import io.pulumi.azurenative.servicefabric.outputs.CertificateDescriptionResponse;
import io.pulumi.azurenative.servicefabric.outputs.ClientCertificateCommonNameResponse;
import io.pulumi.azurenative.servicefabric.outputs.ClientCertificateThumbprintResponse;
import io.pulumi.azurenative.servicefabric.outputs.ClusterUpgradePolicyResponse;
import io.pulumi.azurenative.servicefabric.outputs.ClusterVersionDetailsResponse;
import io.pulumi.azurenative.servicefabric.outputs.DiagnosticsStorageAccountConfigResponse;
import io.pulumi.azurenative.servicefabric.outputs.NodeTypeDescriptionResponse;
import io.pulumi.azurenative.servicefabric.outputs.ServerCertificateCommonNamesResponse;
import io.pulumi.azurenative.servicefabric.outputs.SettingsSectionDescriptionResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * The cluster resource

API Version: 2020-03-01.

{{% examples %}}
## Example Usage
{{% example %}}
### Put a cluster with maximum parameters
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.ServiceFabric.Cluster("cluster", new AzureNative.ServiceFabric.ClusterArgs
        {
            AddOnFeatures = 
            {
                "RepairManager",
                "DnsService",
                "BackupRestoreService",
                "ResourceMonitorService",
            },
            ApplicationTypeVersionsCleanupPolicy = new AzureNative.ServiceFabric.Inputs.ApplicationTypeVersionsCleanupPolicyArgs
            {
                MaxUnusedVersionsToKeep = 2,
            },
            AzureActiveDirectory = new AzureNative.ServiceFabric.Inputs.AzureActiveDirectoryArgs
            {
                ClientApplication = "d151ad89-4bce-4ae8-b3d1-1dc79679fa75",
                ClusterApplication = "5886372e-7bf4-4878-a497-8098aba608ae",
                TenantId = "6abcc6a0-8666-43f1-87b8-172cf86a9f9c",
            },
            CertificateCommonNames = new AzureNative.ServiceFabric.Inputs.ServerCertificateCommonNamesArgs
            {
                CommonNames = 
                {
                    new AzureNative.ServiceFabric.Inputs.ServerCertificateCommonNameArgs
                    {
                        CertificateCommonName = "abc.com",
                        CertificateIssuerThumbprint = "12599211F8F14C90AFA9532AD79A6F2CA1C00622",
                    },
                },
                X509StoreName = "My",
            },
            ClientCertificateCommonNames = 
            {
                new AzureNative.ServiceFabric.Inputs.ClientCertificateCommonNameArgs
                {
                    CertificateCommonName = "abc.com",
                    CertificateIssuerThumbprint = "5F3660C715EBBDA31DB1FFDCF508302348DE8E7A",
                    IsAdmin = true,
                },
            },
            ClientCertificateThumbprints = 
            {
                new AzureNative.ServiceFabric.Inputs.ClientCertificateThumbprintArgs
                {
                    CertificateThumbprint = "5F3660C715EBBDA31DB1FFDCF508302348DE8E7A",
                    IsAdmin = true,
                },
            },
            ClusterCodeVersion = "7.0.470.9590",
            ClusterName = "myCluster",
            DiagnosticsStorageAccountConfig = new AzureNative.ServiceFabric.Inputs.DiagnosticsStorageAccountConfigArgs
            {
                BlobEndpoint = "https://diag.blob.core.windows.net/",
                ProtectedAccountKeyName = "StorageAccountKey1",
                QueueEndpoint = "https://diag.queue.core.windows.net/",
                StorageAccountName = "diag",
                TableEndpoint = "https://diag.table.core.windows.net/",
            },
            EventStoreServiceEnabled = true,
            FabricSettings = 
            {
                new AzureNative.ServiceFabric.Inputs.SettingsSectionDescriptionArgs
                {
                    Name = "UpgradeService",
                    Parameters = 
                    {
                        new AzureNative.ServiceFabric.Inputs.SettingsParameterDescriptionArgs
                        {
                            Name = "AppPollIntervalInSeconds",
                            Value = "60",
                        },
                    },
                },
            },
            Location = "eastus",
            ManagementEndpoint = "https://myCluster.eastus.cloudapp.azure.com:19080",
            NodeTypes = 
            {
                new AzureNative.ServiceFabric.Inputs.NodeTypeDescriptionArgs
                {
                    ApplicationPorts = new AzureNative.ServiceFabric.Inputs.EndpointRangeDescriptionArgs
                    {
                        EndPort = 30000,
                        StartPort = 20000,
                    },
                    ClientConnectionEndpointPort = 19000,
                    DurabilityLevel = "Bronze",
                    EphemeralPorts = new AzureNative.ServiceFabric.Inputs.EndpointRangeDescriptionArgs
                    {
                        EndPort = 64000,
                        StartPort = 49000,
                    },
                    HttpGatewayEndpointPort = 19007,
                    IsPrimary = true,
                    Name = "nt1vm",
                    VmInstanceCount = 5,
                },
            },
            ReliabilityLevel = "Silver",
            ResourceGroupName = "resRg",
            ReverseProxyCertificateCommonNames = new AzureNative.ServiceFabric.Inputs.ServerCertificateCommonNamesArgs
            {
                CommonNames = 
                {
                    new AzureNative.ServiceFabric.Inputs.ServerCertificateCommonNameArgs
                    {
                        CertificateCommonName = "abc.com",
                        CertificateIssuerThumbprint = "12599211F8F14C90AFA9532AD79A6F2CA1C00622",
                    },
                },
                X509StoreName = "My",
            },
            Tags = ,
            UpgradeDescription = new AzureNative.ServiceFabric.Inputs.ClusterUpgradePolicyArgs
            {
                DeltaHealthPolicy = new AzureNative.ServiceFabric.Inputs.ClusterUpgradeDeltaHealthPolicyArgs
                {
                    ApplicationDeltaHealthPolicies = 
                    {
                        { "fabric:/myApp1", new AzureNative.ServiceFabric.Inputs.ApplicationDeltaHealthPolicyArgs
                        {
                            DefaultServiceTypeDeltaHealthPolicy = new AzureNative.ServiceFabric.Inputs.ServiceTypeDeltaHealthPolicyArgs
                            {
                                MaxPercentDeltaUnhealthyServices = 0,
                            },
                            ServiceTypeDeltaHealthPolicies = 
                            {
                                { "myServiceType1", new AzureNative.ServiceFabric.Inputs.ServiceTypeDeltaHealthPolicyArgs
                                {
                                    MaxPercentDeltaUnhealthyServices = 0,
                                } },
                            },
                        } },
                    },
                    MaxPercentDeltaUnhealthyApplications = 0,
                    MaxPercentDeltaUnhealthyNodes = 0,
                    MaxPercentUpgradeDomainDeltaUnhealthyNodes = 0,
                },
                ForceRestart = false,
                HealthCheckRetryTimeout = "00:05:00",
                HealthCheckStableDuration = "00:00:30",
                HealthCheckWaitDuration = "00:00:30",
                HealthPolicy = new AzureNative.ServiceFabric.Inputs.ClusterHealthPolicyArgs
                {
                    ApplicationHealthPolicies = 
                    {
                        { "fabric:/myApp1", new AzureNative.ServiceFabric.Inputs.ApplicationHealthPolicyArgs
                        {
                            DefaultServiceTypeHealthPolicy = new AzureNative.ServiceFabric.Inputs.ServiceTypeHealthPolicyArgs
                            {
                                MaxPercentUnhealthyServices = 0,
                            },
                            ServiceTypeHealthPolicies = 
                            {
                                { "myServiceType1", new AzureNative.ServiceFabric.Inputs.ServiceTypeHealthPolicyArgs
                                {
                                    MaxPercentUnhealthyServices = 100,
                                } },
                            },
                        } },
                    },
                    MaxPercentUnhealthyApplications = 0,
                    MaxPercentUnhealthyNodes = 0,
                },
                UpgradeDomainTimeout = "00:15:00",
                UpgradeReplicaSetCheckTimeout = "00:10:00",
                UpgradeTimeout = "01:00:00",
            },
            UpgradeMode = "Manual",
            VmImage = "Windows",
        });
    }

}

```

```go
package main

import (
	servicefabric "github.com/pulumi/pulumi-azure-native/sdk/go/azure/servicefabric"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicefabric.NewCluster(ctx, "cluster", &servicefabric.ClusterArgs{
			AddOnFeatures: pulumi.StringArray{
				pulumi.String("RepairManager"),
				pulumi.String("DnsService"),
				pulumi.String("BackupRestoreService"),
				pulumi.String("ResourceMonitorService"),
			},
			ApplicationTypeVersionsCleanupPolicy: &servicefabric.ApplicationTypeVersionsCleanupPolicyArgs{
				MaxUnusedVersionsToKeep: pulumi.Float64(2),
			},
			AzureActiveDirectory: &servicefabric.AzureActiveDirectoryArgs{
				ClientApplication:  pulumi.String("d151ad89-4bce-4ae8-b3d1-1dc79679fa75"),
				ClusterApplication: pulumi.String("5886372e-7bf4-4878-a497-8098aba608ae"),
				TenantId:           pulumi.String("6abcc6a0-8666-43f1-87b8-172cf86a9f9c"),
			},
			CertificateCommonNames: &servicefabric.ServerCertificateCommonNamesArgs{
				CommonNames: servicefabric.ServerCertificateCommonNameArray{
					&servicefabric.ServerCertificateCommonNameArgs{
						CertificateCommonName:       pulumi.String("abc.com"),
						CertificateIssuerThumbprint: pulumi.String("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
					},
				},
				X509StoreName: pulumi.String("My"),
			},
			ClientCertificateCommonNames: []servicefabric.ClientCertificateCommonNameArgs{
				&servicefabric.ClientCertificateCommonNameArgs{
					CertificateCommonName:       pulumi.String("abc.com"),
					CertificateIssuerThumbprint: pulumi.String("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
					IsAdmin:                     pulumi.Bool(true),
				},
			},
			ClientCertificateThumbprints: []servicefabric.ClientCertificateThumbprintArgs{
				&servicefabric.ClientCertificateThumbprintArgs{
					CertificateThumbprint: pulumi.String("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
					IsAdmin:               pulumi.Bool(true),
				},
			},
			ClusterCodeVersion: pulumi.String("7.0.470.9590"),
			ClusterName:        pulumi.String("myCluster"),
			DiagnosticsStorageAccountConfig: &servicefabric.DiagnosticsStorageAccountConfigArgs{
				BlobEndpoint:            pulumi.String("https://diag.blob.core.windows.net/"),
				ProtectedAccountKeyName: pulumi.String("StorageAccountKey1"),
				QueueEndpoint:           pulumi.String("https://diag.queue.core.windows.net/"),
				StorageAccountName:      pulumi.String("diag"),
				TableEndpoint:           pulumi.String("https://diag.table.core.windows.net/"),
			},
			EventStoreServiceEnabled: pulumi.Bool(true),
			FabricSettings: []servicefabric.SettingsSectionDescriptionArgs{
				&servicefabric.SettingsSectionDescriptionArgs{
					Name: pulumi.String("UpgradeService"),
					Parameters: []servicefabric.SettingsParameterDescriptionArgs{
						&servicefabric.SettingsParameterDescriptionArgs{
							Name:  pulumi.String("AppPollIntervalInSeconds"),
							Value: pulumi.String("60"),
						},
					},
				},
			},
			Location:           pulumi.String("eastus"),
			ManagementEndpoint: pulumi.String("https://myCluster.eastus.cloudapp.azure.com:19080"),
			NodeTypes: servicefabric.NodeTypeDescriptionArray{
				&servicefabric.NodeTypeDescriptionArgs{
					ApplicationPorts: &servicefabric.EndpointRangeDescriptionArgs{
						EndPort:   pulumi.Int(30000),
						StartPort: pulumi.Int(20000),
					},
					ClientConnectionEndpointPort: pulumi.Int(19000),
					DurabilityLevel:              pulumi.String("Bronze"),
					EphemeralPorts: &servicefabric.EndpointRangeDescriptionArgs{
						EndPort:   pulumi.Int(64000),
						StartPort: pulumi.Int(49000),
					},
					HttpGatewayEndpointPort: pulumi.Int(19007),
					IsPrimary:               pulumi.Bool(true),
					Name:                    pulumi.String("nt1vm"),
					VmInstanceCount:         pulumi.Int(5),
				},
			},
			ReliabilityLevel:  pulumi.String("Silver"),
			ResourceGroupName: pulumi.String("resRg"),
			ReverseProxyCertificateCommonNames: &servicefabric.ServerCertificateCommonNamesArgs{
				CommonNames: servicefabric.ServerCertificateCommonNameArray{
					&servicefabric.ServerCertificateCommonNameArgs{
						CertificateCommonName:       pulumi.String("abc.com"),
						CertificateIssuerThumbprint: pulumi.String("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
					},
				},
				X509StoreName: pulumi.String("My"),
			},
			Tags: nil,
			UpgradeDescription: &servicefabric.ClusterUpgradePolicyArgs{
				DeltaHealthPolicy: &servicefabric.ClusterUpgradeDeltaHealthPolicyArgs{
					ApplicationDeltaHealthPolicies: servicefabric.ApplicationDeltaHealthPolicyMap{
						"fabric:/myApp1": &servicefabric.ApplicationDeltaHealthPolicyArgs{
							DefaultServiceTypeDeltaHealthPolicy: &servicefabric.ServiceTypeDeltaHealthPolicyArgs{
								MaxPercentDeltaUnhealthyServices: pulumi.Int(0),
							},
							ServiceTypeDeltaHealthPolicies: servicefabric.ServiceTypeDeltaHealthPolicyMap{
								"myServiceType1": &servicefabric.ServiceTypeDeltaHealthPolicyArgs{
									MaxPercentDeltaUnhealthyServices: pulumi.Int(0),
								},
							},
						},
					},
					MaxPercentDeltaUnhealthyApplications:       pulumi.Int(0),
					MaxPercentDeltaUnhealthyNodes:              pulumi.Int(0),
					MaxPercentUpgradeDomainDeltaUnhealthyNodes: pulumi.Int(0),
				},
				ForceRestart:              pulumi.Bool(false),
				HealthCheckRetryTimeout:   pulumi.String("00:05:00"),
				HealthCheckStableDuration: pulumi.String("00:00:30"),
				HealthCheckWaitDuration:   pulumi.String("00:00:30"),
				HealthPolicy: &servicefabric.ClusterHealthPolicyArgs{
					ApplicationHealthPolicies: servicefabric.ApplicationHealthPolicyMap{
						"fabric:/myApp1": &servicefabric.ApplicationHealthPolicyArgs{
							DefaultServiceTypeHealthPolicy: &servicefabric.ServiceTypeHealthPolicyArgs{
								MaxPercentUnhealthyServices: pulumi.Int(0),
							},
							ServiceTypeHealthPolicies: servicefabric.ServiceTypeHealthPolicyMap{
								"myServiceType1": &servicefabric.ServiceTypeHealthPolicyArgs{
									MaxPercentUnhealthyServices: pulumi.Int(100),
								},
							},
						},
					},
					MaxPercentUnhealthyApplications: pulumi.Int(0),
					MaxPercentUnhealthyNodes:        pulumi.Int(0),
				},
				UpgradeDomainTimeout:          pulumi.String("00:15:00"),
				UpgradeReplicaSetCheckTimeout: pulumi.String("00:10:00"),
				UpgradeTimeout:                pulumi.String("01:00:00"),
			},
			UpgradeMode: pulumi.String("Manual"),
			VmImage:     pulumi.String("Windows"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.servicefabric.Cluster("cluster", {
    addOnFeatures: [
        "RepairManager",
        "DnsService",
        "BackupRestoreService",
        "ResourceMonitorService",
    ],
    applicationTypeVersionsCleanupPolicy: {
        maxUnusedVersionsToKeep: 2,
    },
    azureActiveDirectory: {
        clientApplication: "d151ad89-4bce-4ae8-b3d1-1dc79679fa75",
        clusterApplication: "5886372e-7bf4-4878-a497-8098aba608ae",
        tenantId: "6abcc6a0-8666-43f1-87b8-172cf86a9f9c",
    },
    certificateCommonNames: {
        commonNames: [{
            certificateCommonName: "abc.com",
            certificateIssuerThumbprint: "12599211F8F14C90AFA9532AD79A6F2CA1C00622",
        }],
        x509StoreName: "My",
    },
    clientCertificateCommonNames: [{
        certificateCommonName: "abc.com",
        certificateIssuerThumbprint: "5F3660C715EBBDA31DB1FFDCF508302348DE8E7A",
        isAdmin: true,
    }],
    clientCertificateThumbprints: [{
        certificateThumbprint: "5F3660C715EBBDA31DB1FFDCF508302348DE8E7A",
        isAdmin: true,
    }],
    clusterCodeVersion: "7.0.470.9590",
    clusterName: "myCluster",
    diagnosticsStorageAccountConfig: {
        blobEndpoint: "https://diag.blob.core.windows.net/",
        protectedAccountKeyName: "StorageAccountKey1",
        queueEndpoint: "https://diag.queue.core.windows.net/",
        storageAccountName: "diag",
        tableEndpoint: "https://diag.table.core.windows.net/",
    },
    eventStoreServiceEnabled: true,
    fabricSettings: [{
        name: "UpgradeService",
        parameters: [{
            name: "AppPollIntervalInSeconds",
            value: "60",
        }],
    }],
    location: "eastus",
    managementEndpoint: "https://myCluster.eastus.cloudapp.azure.com:19080",
    nodeTypes: [{
        applicationPorts: {
            endPort: 30000,
            startPort: 20000,
        },
        clientConnectionEndpointPort: 19000,
        durabilityLevel: "Bronze",
        ephemeralPorts: {
            endPort: 64000,
            startPort: 49000,
        },
        httpGatewayEndpointPort: 19007,
        isPrimary: true,
        name: "nt1vm",
        vmInstanceCount: 5,
    }],
    reliabilityLevel: "Silver",
    resourceGroupName: "resRg",
    reverseProxyCertificateCommonNames: {
        commonNames: [{
            certificateCommonName: "abc.com",
            certificateIssuerThumbprint: "12599211F8F14C90AFA9532AD79A6F2CA1C00622",
        }],
        x509StoreName: "My",
    },
    tags: {},
    upgradeDescription: {
        deltaHealthPolicy: {
            applicationDeltaHealthPolicies: {
                "fabric:/myApp1": {
                    defaultServiceTypeDeltaHealthPolicy: {
                        maxPercentDeltaUnhealthyServices: 0,
                    },
                    serviceTypeDeltaHealthPolicies: {
                        myServiceType1: {
                            maxPercentDeltaUnhealthyServices: 0,
                        },
                    },
                },
            },
            maxPercentDeltaUnhealthyApplications: 0,
            maxPercentDeltaUnhealthyNodes: 0,
            maxPercentUpgradeDomainDeltaUnhealthyNodes: 0,
        },
        forceRestart: false,
        healthCheckRetryTimeout: "00:05:00",
        healthCheckStableDuration: "00:00:30",
        healthCheckWaitDuration: "00:00:30",
        healthPolicy: {
            applicationHealthPolicies: {
                "fabric:/myApp1": {
                    defaultServiceTypeHealthPolicy: {
                        maxPercentUnhealthyServices: 0,
                    },
                    serviceTypeHealthPolicies: {
                        myServiceType1: {
                            maxPercentUnhealthyServices: 100,
                        },
                    },
                },
            },
            maxPercentUnhealthyApplications: 0,
            maxPercentUnhealthyNodes: 0,
        },
        upgradeDomainTimeout: "00:15:00",
        upgradeReplicaSetCheckTimeout: "00:10:00",
        upgradeTimeout: "01:00:00",
    },
    upgradeMode: "Manual",
    vmImage: "Windows",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.servicefabric.Cluster("cluster",
    add_on_features=[
        "RepairManager",
        "DnsService",
        "BackupRestoreService",
        "ResourceMonitorService",
    ],
    application_type_versions_cleanup_policy=azure_native.servicefabric.ApplicationTypeVersionsCleanupPolicyArgs(
        max_unused_versions_to_keep=2,
    ),
    azure_active_directory=azure_native.servicefabric.AzureActiveDirectoryArgs(
        client_application="d151ad89-4bce-4ae8-b3d1-1dc79679fa75",
        cluster_application="5886372e-7bf4-4878-a497-8098aba608ae",
        tenant_id="6abcc6a0-8666-43f1-87b8-172cf86a9f9c",
    ),
    certificate_common_names=azure_native.servicefabric.ServerCertificateCommonNamesArgs(
        common_names=[azure_native.servicefabric.ServerCertificateCommonNameArgs(
            certificate_common_name="abc.com",
            certificate_issuer_thumbprint="12599211F8F14C90AFA9532AD79A6F2CA1C00622",
        )],
        x509_store_name="My",
    ),
    client_certificate_common_names=[azure_native.servicefabric.ClientCertificateCommonNameArgs(
        certificate_common_name="abc.com",
        certificate_issuer_thumbprint="5F3660C715EBBDA31DB1FFDCF508302348DE8E7A",
        is_admin=True,
    )],
    client_certificate_thumbprints=[azure_native.servicefabric.ClientCertificateThumbprintArgs(
        certificate_thumbprint="5F3660C715EBBDA31DB1FFDCF508302348DE8E7A",
        is_admin=True,
    )],
    cluster_code_version="7.0.470.9590",
    cluster_name="myCluster",
    diagnostics_storage_account_config=azure_native.servicefabric.DiagnosticsStorageAccountConfigArgs(
        blob_endpoint="https://diag.blob.core.windows.net/",
        protected_account_key_name="StorageAccountKey1",
        queue_endpoint="https://diag.queue.core.windows.net/",
        storage_account_name="diag",
        table_endpoint="https://diag.table.core.windows.net/",
    ),
    event_store_service_enabled=True,
    fabric_settings=[azure_native.servicefabric.SettingsSectionDescriptionArgs(
        name="UpgradeService",
        parameters=[azure_native.servicefabric.SettingsParameterDescriptionArgs(
            name="AppPollIntervalInSeconds",
            value="60",
        )],
    )],
    location="eastus",
    management_endpoint="https://myCluster.eastus.cloudapp.azure.com:19080",
    node_types=[azure_native.servicefabric.NodeTypeDescriptionArgs(
        application_ports=azure_native.servicefabric.EndpointRangeDescriptionArgs(
            end_port=30000,
            start_port=20000,
        ),
        client_connection_endpoint_port=19000,
        durability_level="Bronze",
        ephemeral_ports=azure_native.servicefabric.EndpointRangeDescriptionArgs(
            end_port=64000,
            start_port=49000,
        ),
        http_gateway_endpoint_port=19007,
        is_primary=True,
        name="nt1vm",
        vm_instance_count=5,
    )],
    reliability_level="Silver",
    resource_group_name="resRg",
    reverse_proxy_certificate_common_names=azure_native.servicefabric.ServerCertificateCommonNamesArgs(
        common_names=[azure_native.servicefabric.ServerCertificateCommonNameArgs(
            certificate_common_name="abc.com",
            certificate_issuer_thumbprint="12599211F8F14C90AFA9532AD79A6F2CA1C00622",
        )],
        x509_store_name="My",
    ),
    tags={},
    upgrade_description=azure_native.servicefabric.ClusterUpgradePolicyArgs(
        delta_health_policy=azure_native.servicefabric.ClusterUpgradeDeltaHealthPolicyArgs(
            application_delta_health_policies={
                "fabric:/myApp1": azure_native.servicefabric.ApplicationDeltaHealthPolicyArgs(
                    default_service_type_delta_health_policy=azure_native.servicefabric.ServiceTypeDeltaHealthPolicyArgs(
                        max_percent_delta_unhealthy_services=0,
                    ),
                    service_type_delta_health_policies={
                        "myServiceType1": azure_native.servicefabric.ServiceTypeDeltaHealthPolicyArgs(
                            max_percent_delta_unhealthy_services=0,
                        ),
                    },
                ),
            },
            max_percent_delta_unhealthy_applications=0,
            max_percent_delta_unhealthy_nodes=0,
            max_percent_upgrade_domain_delta_unhealthy_nodes=0,
        ),
        force_restart=False,
        health_check_retry_timeout="00:05:00",
        health_check_stable_duration="00:00:30",
        health_check_wait_duration="00:00:30",
        health_policy=azure_native.servicefabric.ClusterHealthPolicyArgs(
            application_health_policies={
                "fabric:/myApp1": azure_native.servicefabric.ApplicationHealthPolicyArgs(
                    default_service_type_health_policy=azure_native.servicefabric.ServiceTypeHealthPolicyArgs(
                        max_percent_unhealthy_services=0,
                    ),
                    service_type_health_policies={
                        "myServiceType1": azure_native.servicefabric.ServiceTypeHealthPolicyArgs(
                            max_percent_unhealthy_services=100,
                        ),
                    },
                ),
            },
            max_percent_unhealthy_applications=0,
            max_percent_unhealthy_nodes=0,
        ),
        upgrade_domain_timeout="00:15:00",
        upgrade_replica_set_check_timeout="00:10:00",
        upgrade_timeout="01:00:00",
    ),
    upgrade_mode="Manual",
    vm_image="Windows")

```

{{% /example %}}
{{% example %}}
### Put a cluster with minimum parameters
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.ServiceFabric.Cluster("cluster", new AzureNative.ServiceFabric.ClusterArgs
        {
            ClusterName = "myCluster",
            DiagnosticsStorageAccountConfig = new AzureNative.ServiceFabric.Inputs.DiagnosticsStorageAccountConfigArgs
            {
                BlobEndpoint = "https://diag.blob.core.windows.net/",
                ProtectedAccountKeyName = "StorageAccountKey1",
                QueueEndpoint = "https://diag.queue.core.windows.net/",
                StorageAccountName = "diag",
                TableEndpoint = "https://diag.table.core.windows.net/",
            },
            FabricSettings = 
            {
                new AzureNative.ServiceFabric.Inputs.SettingsSectionDescriptionArgs
                {
                    Name = "UpgradeService",
                    Parameters = 
                    {
                        new AzureNative.ServiceFabric.Inputs.SettingsParameterDescriptionArgs
                        {
                            Name = "AppPollIntervalInSeconds",
                            Value = "60",
                        },
                    },
                },
            },
            Location = "eastus",
            ManagementEndpoint = "http://myCluster.eastus.cloudapp.azure.com:19080",
            NodeTypes = 
            {
                new AzureNative.ServiceFabric.Inputs.NodeTypeDescriptionArgs
                {
                    ApplicationPorts = new AzureNative.ServiceFabric.Inputs.EndpointRangeDescriptionArgs
                    {
                        EndPort = 30000,
                        StartPort = 20000,
                    },
                    ClientConnectionEndpointPort = 19000,
                    DurabilityLevel = "Bronze",
                    EphemeralPorts = new AzureNative.ServiceFabric.Inputs.EndpointRangeDescriptionArgs
                    {
                        EndPort = 64000,
                        StartPort = 49000,
                    },
                    HttpGatewayEndpointPort = 19007,
                    IsPrimary = true,
                    Name = "nt1vm",
                    VmInstanceCount = 5,
                },
            },
            ReliabilityLevel = "Silver",
            ResourceGroupName = "resRg",
            Tags = ,
            UpgradeMode = "Automatic",
        });
    }

}

```

```go
package main

import (
	servicefabric "github.com/pulumi/pulumi-azure-native/sdk/go/azure/servicefabric"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicefabric.NewCluster(ctx, "cluster", &servicefabric.ClusterArgs{
			ClusterName: pulumi.String("myCluster"),
			DiagnosticsStorageAccountConfig: &servicefabric.DiagnosticsStorageAccountConfigArgs{
				BlobEndpoint:            pulumi.String("https://diag.blob.core.windows.net/"),
				ProtectedAccountKeyName: pulumi.String("StorageAccountKey1"),
				QueueEndpoint:           pulumi.String("https://diag.queue.core.windows.net/"),
				StorageAccountName:      pulumi.String("diag"),
				TableEndpoint:           pulumi.String("https://diag.table.core.windows.net/"),
			},
			FabricSettings: []servicefabric.SettingsSectionDescriptionArgs{
				&servicefabric.SettingsSectionDescriptionArgs{
					Name: pulumi.String("UpgradeService"),
					Parameters: []servicefabric.SettingsParameterDescriptionArgs{
						&servicefabric.SettingsParameterDescriptionArgs{
							Name:  pulumi.String("AppPollIntervalInSeconds"),
							Value: pulumi.String("60"),
						},
					},
				},
			},
			Location:           pulumi.String("eastus"),
			ManagementEndpoint: pulumi.String("http://myCluster.eastus.cloudapp.azure.com:19080"),
			NodeTypes: servicefabric.NodeTypeDescriptionArray{
				&servicefabric.NodeTypeDescriptionArgs{
					ApplicationPorts: &servicefabric.EndpointRangeDescriptionArgs{
						EndPort:   pulumi.Int(30000),
						StartPort: pulumi.Int(20000),
					},
					ClientConnectionEndpointPort: pulumi.Int(19000),
					DurabilityLevel:              pulumi.String("Bronze"),
					EphemeralPorts: &servicefabric.EndpointRangeDescriptionArgs{
						EndPort:   pulumi.Int(64000),
						StartPort: pulumi.Int(49000),
					},
					HttpGatewayEndpointPort: pulumi.Int(19007),
					IsPrimary:               pulumi.Bool(true),
					Name:                    pulumi.String("nt1vm"),
					VmInstanceCount:         pulumi.Int(5),
				},
			},
			ReliabilityLevel:  pulumi.String("Silver"),
			ResourceGroupName: pulumi.String("resRg"),
			Tags:              nil,
			UpgradeMode:       pulumi.String("Automatic"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.servicefabric.Cluster("cluster", {
    clusterName: "myCluster",
    diagnosticsStorageAccountConfig: {
        blobEndpoint: "https://diag.blob.core.windows.net/",
        protectedAccountKeyName: "StorageAccountKey1",
        queueEndpoint: "https://diag.queue.core.windows.net/",
        storageAccountName: "diag",
        tableEndpoint: "https://diag.table.core.windows.net/",
    },
    fabricSettings: [{
        name: "UpgradeService",
        parameters: [{
            name: "AppPollIntervalInSeconds",
            value: "60",
        }],
    }],
    location: "eastus",
    managementEndpoint: "http://myCluster.eastus.cloudapp.azure.com:19080",
    nodeTypes: [{
        applicationPorts: {
            endPort: 30000,
            startPort: 20000,
        },
        clientConnectionEndpointPort: 19000,
        durabilityLevel: "Bronze",
        ephemeralPorts: {
            endPort: 64000,
            startPort: 49000,
        },
        httpGatewayEndpointPort: 19007,
        isPrimary: true,
        name: "nt1vm",
        vmInstanceCount: 5,
    }],
    reliabilityLevel: "Silver",
    resourceGroupName: "resRg",
    tags: {},
    upgradeMode: "Automatic",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.servicefabric.Cluster("cluster",
    cluster_name="myCluster",
    diagnostics_storage_account_config=azure_native.servicefabric.DiagnosticsStorageAccountConfigArgs(
        blob_endpoint="https://diag.blob.core.windows.net/",
        protected_account_key_name="StorageAccountKey1",
        queue_endpoint="https://diag.queue.core.windows.net/",
        storage_account_name="diag",
        table_endpoint="https://diag.table.core.windows.net/",
    ),
    fabric_settings=[azure_native.servicefabric.SettingsSectionDescriptionArgs(
        name="UpgradeService",
        parameters=[azure_native.servicefabric.SettingsParameterDescriptionArgs(
            name="AppPollIntervalInSeconds",
            value="60",
        )],
    )],
    location="eastus",
    management_endpoint="http://myCluster.eastus.cloudapp.azure.com:19080",
    node_types=[azure_native.servicefabric.NodeTypeDescriptionArgs(
        application_ports=azure_native.servicefabric.EndpointRangeDescriptionArgs(
            end_port=30000,
            start_port=20000,
        ),
        client_connection_endpoint_port=19000,
        durability_level="Bronze",
        ephemeral_ports=azure_native.servicefabric.EndpointRangeDescriptionArgs(
            end_port=64000,
            start_port=49000,
        ),
        http_gateway_endpoint_port=19007,
        is_primary=True,
        name="nt1vm",
        vm_instance_count=5,
    )],
    reliability_level="Silver",
    resource_group_name="resRg",
    tags={},
    upgrade_mode="Automatic")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:servicefabric:Cluster myCluster /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster 
```

 */
@ResourceType(type="azure-native:servicefabric:Cluster")
public class Cluster extends io.pulumi.resources.CustomResource {
    /**
     * The list of add-on features to enable in the cluster.
     */
    @OutputExport(name="addOnFeatures", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> addOnFeatures;

    /**
     * @return The list of add-on features to enable in the cluster.
     */
    public Output</* @Nullable */ List<String>> getAddOnFeatures() {
        return this.addOnFeatures;
    }
    /**
     * The policy used to clean up unused versions.
     */
    @OutputExport(name="applicationTypeVersionsCleanupPolicy", type=ApplicationTypeVersionsCleanupPolicyResponse.class, parameters={})
    private Output</* @Nullable */ ApplicationTypeVersionsCleanupPolicyResponse> applicationTypeVersionsCleanupPolicy;

    /**
     * @return The policy used to clean up unused versions.
     */
    public Output</* @Nullable */ ApplicationTypeVersionsCleanupPolicyResponse> getApplicationTypeVersionsCleanupPolicy() {
        return this.applicationTypeVersionsCleanupPolicy;
    }
    /**
     * The Service Fabric runtime versions available for this cluster.
     */
    @OutputExport(name="availableClusterVersions", type=List.class, parameters={ClusterVersionDetailsResponse.class})
    private Output<List<ClusterVersionDetailsResponse>> availableClusterVersions;

    /**
     * @return The Service Fabric runtime versions available for this cluster.
     */
    public Output<List<ClusterVersionDetailsResponse>> getAvailableClusterVersions() {
        return this.availableClusterVersions;
    }
    /**
     * The AAD authentication settings of the cluster.
     */
    @OutputExport(name="azureActiveDirectory", type=AzureActiveDirectoryResponse.class, parameters={})
    private Output</* @Nullable */ AzureActiveDirectoryResponse> azureActiveDirectory;

    /**
     * @return The AAD authentication settings of the cluster.
     */
    public Output</* @Nullable */ AzureActiveDirectoryResponse> getAzureActiveDirectory() {
        return this.azureActiveDirectory;
    }
    /**
     * The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
     */
    @OutputExport(name="certificate", type=CertificateDescriptionResponse.class, parameters={})
    private Output</* @Nullable */ CertificateDescriptionResponse> certificate;

    /**
     * @return The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
     */
    public Output</* @Nullable */ CertificateDescriptionResponse> getCertificate() {
        return this.certificate;
    }
    /**
     * Describes a list of server certificates referenced by common name that are used to secure the cluster.
     */
    @OutputExport(name="certificateCommonNames", type=ServerCertificateCommonNamesResponse.class, parameters={})
    private Output</* @Nullable */ ServerCertificateCommonNamesResponse> certificateCommonNames;

    /**
     * @return Describes a list of server certificates referenced by common name that are used to secure the cluster.
     */
    public Output</* @Nullable */ ServerCertificateCommonNamesResponse> getCertificateCommonNames() {
        return this.certificateCommonNames;
    }
    /**
     * The list of client certificates referenced by common name that are allowed to manage the cluster.
     */
    @OutputExport(name="clientCertificateCommonNames", type=List.class, parameters={ClientCertificateCommonNameResponse.class})
    private Output</* @Nullable */ List<ClientCertificateCommonNameResponse>> clientCertificateCommonNames;

    /**
     * @return The list of client certificates referenced by common name that are allowed to manage the cluster.
     */
    public Output</* @Nullable */ List<ClientCertificateCommonNameResponse>> getClientCertificateCommonNames() {
        return this.clientCertificateCommonNames;
    }
    /**
     * The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
     */
    @OutputExport(name="clientCertificateThumbprints", type=List.class, parameters={ClientCertificateThumbprintResponse.class})
    private Output</* @Nullable */ List<ClientCertificateThumbprintResponse>> clientCertificateThumbprints;

    /**
     * @return The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
     */
    public Output</* @Nullable */ List<ClientCertificateThumbprintResponse>> getClientCertificateThumbprints() {
        return this.clientCertificateThumbprints;
    }
    /**
     * The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
     */
    @OutputExport(name="clusterCodeVersion", type=String.class, parameters={})
    private Output</* @Nullable */ String> clusterCodeVersion;

    /**
     * @return The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
     */
    public Output</* @Nullable */ String> getClusterCodeVersion() {
        return this.clusterCodeVersion;
    }
    /**
     * The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
     */
    @OutputExport(name="clusterEndpoint", type=String.class, parameters={})
    private Output<String> clusterEndpoint;

    /**
     * @return The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
     */
    public Output<String> getClusterEndpoint() {
        return this.clusterEndpoint;
    }
    /**
     * A service generated unique identifier for the cluster resource.
     */
    @OutputExport(name="clusterId", type=String.class, parameters={})
    private Output<String> clusterId;

    /**
     * @return A service generated unique identifier for the cluster resource.
     */
    public Output<String> getClusterId() {
        return this.clusterId;
    }
    /**
     * The current state of the cluster.

  - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
  - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
  - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
  - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
  - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
  - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.
  - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
  - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
  - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
  - Ready - Indicates that the cluster is in a stable state.

     */
    @OutputExport(name="clusterState", type=String.class, parameters={})
    private Output<String> clusterState;

    /**
     * @return The current state of the cluster.

  - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
  - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
  - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
  - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
  - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
  - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.
  - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
  - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
  - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
  - Ready - Indicates that the cluster is in a stable state.

     */
    public Output<String> getClusterState() {
        return this.clusterState;
    }
    /**
     * The storage account information for storing Service Fabric diagnostic logs.
     */
    @OutputExport(name="diagnosticsStorageAccountConfig", type=DiagnosticsStorageAccountConfigResponse.class, parameters={})
    private Output</* @Nullable */ DiagnosticsStorageAccountConfigResponse> diagnosticsStorageAccountConfig;

    /**
     * @return The storage account information for storing Service Fabric diagnostic logs.
     */
    public Output</* @Nullable */ DiagnosticsStorageAccountConfigResponse> getDiagnosticsStorageAccountConfig() {
        return this.diagnosticsStorageAccountConfig;
    }
    /**
     * Azure resource etag.
     */
    @OutputExport(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return Azure resource etag.
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * Indicates if the event store service is enabled.
     */
    @OutputExport(name="eventStoreServiceEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> eventStoreServiceEnabled;

    /**
     * @return Indicates if the event store service is enabled.
     */
    public Output</* @Nullable */ Boolean> getEventStoreServiceEnabled() {
        return this.eventStoreServiceEnabled;
    }
    /**
     * The list of custom fabric settings to configure the cluster.
     */
    @OutputExport(name="fabricSettings", type=List.class, parameters={SettingsSectionDescriptionResponse.class})
    private Output</* @Nullable */ List<SettingsSectionDescriptionResponse>> fabricSettings;

    /**
     * @return The list of custom fabric settings to configure the cluster.
     */
    public Output</* @Nullable */ List<SettingsSectionDescriptionResponse>> getFabricSettings() {
        return this.fabricSettings;
    }
    /**
     * Azure resource location.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Azure resource location.
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * The http management endpoint of the cluster.
     */
    @OutputExport(name="managementEndpoint", type=String.class, parameters={})
    private Output<String> managementEndpoint;

    /**
     * @return The http management endpoint of the cluster.
     */
    public Output<String> getManagementEndpoint() {
        return this.managementEndpoint;
    }
    /**
     * Azure resource name.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Azure resource name.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The list of node types in the cluster.
     */
    @OutputExport(name="nodeTypes", type=List.class, parameters={NodeTypeDescriptionResponse.class})
    private Output<List<NodeTypeDescriptionResponse>> nodeTypes;

    /**
     * @return The list of node types in the cluster.
     */
    public Output<List<NodeTypeDescriptionResponse>> getNodeTypes() {
        return this.nodeTypes;
    }
    /**
     * The provisioning state of the cluster resource.
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning state of the cluster resource.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).

  - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
  - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
  - Silver - Run the System services with a target replica set count of 5.
  - Gold - Run the System services with a target replica set count of 7.
  - Platinum - Run the System services with a target replica set count of 9.

     */
    @OutputExport(name="reliabilityLevel", type=String.class, parameters={})
    private Output</* @Nullable */ String> reliabilityLevel;

    /**
     * @return The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).

  - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
  - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
  - Silver - Run the System services with a target replica set count of 5.
  - Gold - Run the System services with a target replica set count of 7.
  - Platinum - Run the System services with a target replica set count of 9.

     */
    public Output</* @Nullable */ String> getReliabilityLevel() {
        return this.reliabilityLevel;
    }
    /**
     * The server certificate used by reverse proxy.
     */
    @OutputExport(name="reverseProxyCertificate", type=CertificateDescriptionResponse.class, parameters={})
    private Output</* @Nullable */ CertificateDescriptionResponse> reverseProxyCertificate;

    /**
     * @return The server certificate used by reverse proxy.
     */
    public Output</* @Nullable */ CertificateDescriptionResponse> getReverseProxyCertificate() {
        return this.reverseProxyCertificate;
    }
    /**
     * Describes a list of server certificates referenced by common name that are used to secure the cluster.
     */
    @OutputExport(name="reverseProxyCertificateCommonNames", type=ServerCertificateCommonNamesResponse.class, parameters={})
    private Output</* @Nullable */ ServerCertificateCommonNamesResponse> reverseProxyCertificateCommonNames;

    /**
     * @return Describes a list of server certificates referenced by common name that are used to secure the cluster.
     */
    public Output</* @Nullable */ ServerCertificateCommonNamesResponse> getReverseProxyCertificateCommonNames() {
        return this.reverseProxyCertificateCommonNames;
    }
    /**
     * Azure resource tags.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Azure resource tags.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Azure resource type.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Azure resource type.
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * The policy to use when upgrading the cluster.
     */
    @OutputExport(name="upgradeDescription", type=ClusterUpgradePolicyResponse.class, parameters={})
    private Output</* @Nullable */ ClusterUpgradePolicyResponse> upgradeDescription;

    /**
     * @return The policy to use when upgrading the cluster.
     */
    public Output</* @Nullable */ ClusterUpgradePolicyResponse> getUpgradeDescription() {
        return this.upgradeDescription;
    }
    /**
     * The upgrade mode of the cluster when new Service Fabric runtime version is available.

  - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
  - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.

     */
    @OutputExport(name="upgradeMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> upgradeMode;

    /**
     * @return The upgrade mode of the cluster when new Service Fabric runtime version is available.

  - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
  - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.

     */
    public Output</* @Nullable */ String> getUpgradeMode() {
        return this.upgradeMode;
    }
    /**
     * The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     */
    @OutputExport(name="vmImage", type=String.class, parameters={})
    private Output</* @Nullable */ String> vmImage;

    /**
     * @return The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     */
    public Output</* @Nullable */ String> getVmImage() {
        return this.vmImage;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Cluster(String name, ClusterArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:servicefabric:Cluster", name, args == null ? ClusterArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Cluster(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:servicefabric:Cluster", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:servicefabric/v20160901:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:servicefabric/v20170701preview:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:servicefabric/v20180201:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:servicefabric/v20190301:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:servicefabric/v20190301preview:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:servicefabric/v20190601preview:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:servicefabric/v20191101preview:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:servicefabric/v20200301:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:servicefabric/v20201201preview:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:servicefabric/v20210601:Cluster").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Cluster get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Cluster(name, id, options);
    }
}
