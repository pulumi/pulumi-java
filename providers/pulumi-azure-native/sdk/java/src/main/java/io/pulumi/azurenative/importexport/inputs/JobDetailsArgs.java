// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.importexport.inputs;

import io.pulumi.azurenative.importexport.inputs.DeliveryPackageInformationArgs;
import io.pulumi.azurenative.importexport.inputs.DriveStatusArgs;
import io.pulumi.azurenative.importexport.inputs.EncryptionKeyDetailsArgs;
import io.pulumi.azurenative.importexport.inputs.ExportArgs;
import io.pulumi.azurenative.importexport.inputs.PackageInformationArgs;
import io.pulumi.azurenative.importexport.inputs.ReturnAddressArgs;
import io.pulumi.azurenative.importexport.inputs.ReturnShippingArgs;
import io.pulumi.azurenative.importexport.inputs.ShippingInformationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies the job properties
 * 
 */
public final class JobDetailsArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobDetailsArgs Empty = new JobDetailsArgs();

    /**
     * Default value is false. Indicates whether the manifest files on the drives should be copied to block blobs.
     * 
     */
    @InputImport(name="backupDriveManifest")
        private final @Nullable Input<Boolean> backupDriveManifest;

    public Input<Boolean> getBackupDriveManifest() {
        return this.backupDriveManifest == null ? Input.empty() : this.backupDriveManifest;
    }

    /**
     * Indicates whether a request has been submitted to cancel the job.
     * 
     */
    @InputImport(name="cancelRequested")
        private final @Nullable Input<Boolean> cancelRequested;

    public Input<Boolean> getCancelRequested() {
        return this.cancelRequested == null ? Input.empty() : this.cancelRequested;
    }

    /**
     * Contains information about the package being shipped by the customer to the Microsoft data center.
     * 
     */
    @InputImport(name="deliveryPackage")
        private final @Nullable Input<DeliveryPackageInformationArgs> deliveryPackage;

    public Input<DeliveryPackageInformationArgs> getDeliveryPackage() {
        return this.deliveryPackage == null ? Input.empty() : this.deliveryPackage;
    }

    /**
     * The virtual blob directory to which the copy logs and backups of drive manifest files (if enabled) will be stored.
     * 
     */
    @InputImport(name="diagnosticsPath")
        private final @Nullable Input<String> diagnosticsPath;

    public Input<String> getDiagnosticsPath() {
        return this.diagnosticsPath == null ? Input.empty() : this.diagnosticsPath;
    }

    /**
     * List of up to ten drives that comprise the job. The drive list is a required element for an import job; it is not specified for export jobs.
     * 
     */
    @InputImport(name="driveList")
        private final @Nullable Input<List<DriveStatusArgs>> driveList;

    public Input<List<DriveStatusArgs>> getDriveList() {
        return this.driveList == null ? Input.empty() : this.driveList;
    }

    /**
     * Contains information about the encryption key.
     * 
     */
    @InputImport(name="encryptionKey")
        private final @Nullable Input<EncryptionKeyDetailsArgs> encryptionKey;

    public Input<EncryptionKeyDetailsArgs> getEncryptionKey() {
        return this.encryptionKey == null ? Input.empty() : this.encryptionKey;
    }

    /**
     * A property containing information about the blobs to be exported for an export job. This property is included for export jobs only.
     * 
     */
    @InputImport(name="export")
        private final @Nullable Input<ExportArgs> export;

    public Input<ExportArgs> getExport() {
        return this.export == null ? Input.empty() : this.export;
    }

    /**
     * A blob path that points to a block blob containing a list of blob names that were not exported due to insufficient drive space. If all blobs were exported successfully, then this element is not included in the response.
     * 
     */
    @InputImport(name="incompleteBlobListUri")
        private final @Nullable Input<String> incompleteBlobListUri;

    public Input<String> getIncompleteBlobListUri() {
        return this.incompleteBlobListUri == null ? Input.empty() : this.incompleteBlobListUri;
    }

    /**
     * The type of job
     * 
     */
    @InputImport(name="jobType")
        private final @Nullable Input<String> jobType;

    public Input<String> getJobType() {
        return this.jobType == null ? Input.empty() : this.jobType;
    }

    /**
     * Default value is Error. Indicates whether error logging or verbose logging will be enabled.
     * 
     */
    @InputImport(name="logLevel")
        private final @Nullable Input<String> logLevel;

    public Input<String> getLogLevel() {
        return this.logLevel == null ? Input.empty() : this.logLevel;
    }

    /**
     * Overall percentage completed for the job.
     * 
     */
    @InputImport(name="percentComplete")
        private final @Nullable Input<Integer> percentComplete;

    public Input<Integer> getPercentComplete() {
        return this.percentComplete == null ? Input.empty() : this.percentComplete;
    }

    /**
     * Specifies the provisioning state of the job.
     * 
     */
    @InputImport(name="provisioningState")
        private final @Nullable Input<String> provisioningState;

    public Input<String> getProvisioningState() {
        return this.provisioningState == null ? Input.empty() : this.provisioningState;
    }

    /**
     * Specifies the return address information for the job.
     * 
     */
    @InputImport(name="returnAddress")
        private final @Nullable Input<ReturnAddressArgs> returnAddress;

    public Input<ReturnAddressArgs> getReturnAddress() {
        return this.returnAddress == null ? Input.empty() : this.returnAddress;
    }

    /**
     * Contains information about the package being shipped from the Microsoft data center to the customer to return the drives. The format is the same as the deliveryPackage property above. This property is not included if the drives have not yet been returned.
     * 
     */
    @InputImport(name="returnPackage")
        private final @Nullable Input<PackageInformationArgs> returnPackage;

    public Input<PackageInformationArgs> getReturnPackage() {
        return this.returnPackage == null ? Input.empty() : this.returnPackage;
    }

    /**
     * Specifies the return carrier and customer's account with the carrier.
     * 
     */
    @InputImport(name="returnShipping")
        private final @Nullable Input<ReturnShippingArgs> returnShipping;

    public Input<ReturnShippingArgs> getReturnShipping() {
        return this.returnShipping == null ? Input.empty() : this.returnShipping;
    }

    /**
     * Contains information about the Microsoft datacenter to which the drives should be shipped.
     * 
     */
    @InputImport(name="shippingInformation")
        private final @Nullable Input<ShippingInformationArgs> shippingInformation;

    public Input<ShippingInformationArgs> getShippingInformation() {
        return this.shippingInformation == null ? Input.empty() : this.shippingInformation;
    }

    /**
     * Current state of the job.
     * 
     */
    @InputImport(name="state")
        private final @Nullable Input<String> state;

    public Input<String> getState() {
        return this.state == null ? Input.empty() : this.state;
    }

    /**
     * The resource identifier of the storage account where data will be imported to or exported from.
     * 
     */
    @InputImport(name="storageAccountId")
        private final @Nullable Input<String> storageAccountId;

    public Input<String> getStorageAccountId() {
        return this.storageAccountId == null ? Input.empty() : this.storageAccountId;
    }

    public JobDetailsArgs(
        @Nullable Input<Boolean> backupDriveManifest,
        @Nullable Input<Boolean> cancelRequested,
        @Nullable Input<DeliveryPackageInformationArgs> deliveryPackage,
        @Nullable Input<String> diagnosticsPath,
        @Nullable Input<List<DriveStatusArgs>> driveList,
        @Nullable Input<EncryptionKeyDetailsArgs> encryptionKey,
        @Nullable Input<ExportArgs> export,
        @Nullable Input<String> incompleteBlobListUri,
        @Nullable Input<String> jobType,
        @Nullable Input<String> logLevel,
        @Nullable Input<Integer> percentComplete,
        @Nullable Input<String> provisioningState,
        @Nullable Input<ReturnAddressArgs> returnAddress,
        @Nullable Input<PackageInformationArgs> returnPackage,
        @Nullable Input<ReturnShippingArgs> returnShipping,
        @Nullable Input<ShippingInformationArgs> shippingInformation,
        @Nullable Input<String> state,
        @Nullable Input<String> storageAccountId) {
        this.backupDriveManifest = backupDriveManifest == null ? Input.ofNullable(false) : backupDriveManifest;
        this.cancelRequested = cancelRequested == null ? Input.ofNullable(false) : cancelRequested;
        this.deliveryPackage = deliveryPackage;
        this.diagnosticsPath = diagnosticsPath;
        this.driveList = driveList;
        this.encryptionKey = encryptionKey;
        this.export = export;
        this.incompleteBlobListUri = incompleteBlobListUri;
        this.jobType = jobType;
        this.logLevel = logLevel;
        this.percentComplete = percentComplete;
        this.provisioningState = provisioningState;
        this.returnAddress = returnAddress;
        this.returnPackage = returnPackage;
        this.returnShipping = returnShipping;
        this.shippingInformation = shippingInformation;
        this.state = state == null ? Input.ofNullable("Creating") : state;
        this.storageAccountId = storageAccountId;
    }

    private JobDetailsArgs() {
        this.backupDriveManifest = Input.empty();
        this.cancelRequested = Input.empty();
        this.deliveryPackage = Input.empty();
        this.diagnosticsPath = Input.empty();
        this.driveList = Input.empty();
        this.encryptionKey = Input.empty();
        this.export = Input.empty();
        this.incompleteBlobListUri = Input.empty();
        this.jobType = Input.empty();
        this.logLevel = Input.empty();
        this.percentComplete = Input.empty();
        this.provisioningState = Input.empty();
        this.returnAddress = Input.empty();
        this.returnPackage = Input.empty();
        this.returnShipping = Input.empty();
        this.shippingInformation = Input.empty();
        this.state = Input.empty();
        this.storageAccountId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> backupDriveManifest;
        private @Nullable Input<Boolean> cancelRequested;
        private @Nullable Input<DeliveryPackageInformationArgs> deliveryPackage;
        private @Nullable Input<String> diagnosticsPath;
        private @Nullable Input<List<DriveStatusArgs>> driveList;
        private @Nullable Input<EncryptionKeyDetailsArgs> encryptionKey;
        private @Nullable Input<ExportArgs> export;
        private @Nullable Input<String> incompleteBlobListUri;
        private @Nullable Input<String> jobType;
        private @Nullable Input<String> logLevel;
        private @Nullable Input<Integer> percentComplete;
        private @Nullable Input<String> provisioningState;
        private @Nullable Input<ReturnAddressArgs> returnAddress;
        private @Nullable Input<PackageInformationArgs> returnPackage;
        private @Nullable Input<ReturnShippingArgs> returnShipping;
        private @Nullable Input<ShippingInformationArgs> shippingInformation;
        private @Nullable Input<String> state;
        private @Nullable Input<String> storageAccountId;

        public Builder() {
    	      // Empty
        }

        public Builder(JobDetailsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupDriveManifest = defaults.backupDriveManifest;
    	      this.cancelRequested = defaults.cancelRequested;
    	      this.deliveryPackage = defaults.deliveryPackage;
    	      this.diagnosticsPath = defaults.diagnosticsPath;
    	      this.driveList = defaults.driveList;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.export = defaults.export;
    	      this.incompleteBlobListUri = defaults.incompleteBlobListUri;
    	      this.jobType = defaults.jobType;
    	      this.logLevel = defaults.logLevel;
    	      this.percentComplete = defaults.percentComplete;
    	      this.provisioningState = defaults.provisioningState;
    	      this.returnAddress = defaults.returnAddress;
    	      this.returnPackage = defaults.returnPackage;
    	      this.returnShipping = defaults.returnShipping;
    	      this.shippingInformation = defaults.shippingInformation;
    	      this.state = defaults.state;
    	      this.storageAccountId = defaults.storageAccountId;
        }

        public Builder setBackupDriveManifest(@Nullable Input<Boolean> backupDriveManifest) {
            this.backupDriveManifest = backupDriveManifest;
            return this;
        }

        public Builder setBackupDriveManifest(@Nullable Boolean backupDriveManifest) {
            this.backupDriveManifest = Input.ofNullable(backupDriveManifest);
            return this;
        }

        public Builder setCancelRequested(@Nullable Input<Boolean> cancelRequested) {
            this.cancelRequested = cancelRequested;
            return this;
        }

        public Builder setCancelRequested(@Nullable Boolean cancelRequested) {
            this.cancelRequested = Input.ofNullable(cancelRequested);
            return this;
        }

        public Builder setDeliveryPackage(@Nullable Input<DeliveryPackageInformationArgs> deliveryPackage) {
            this.deliveryPackage = deliveryPackage;
            return this;
        }

        public Builder setDeliveryPackage(@Nullable DeliveryPackageInformationArgs deliveryPackage) {
            this.deliveryPackage = Input.ofNullable(deliveryPackage);
            return this;
        }

        public Builder setDiagnosticsPath(@Nullable Input<String> diagnosticsPath) {
            this.diagnosticsPath = diagnosticsPath;
            return this;
        }

        public Builder setDiagnosticsPath(@Nullable String diagnosticsPath) {
            this.diagnosticsPath = Input.ofNullable(diagnosticsPath);
            return this;
        }

        public Builder setDriveList(@Nullable Input<List<DriveStatusArgs>> driveList) {
            this.driveList = driveList;
            return this;
        }

        public Builder setDriveList(@Nullable List<DriveStatusArgs> driveList) {
            this.driveList = Input.ofNullable(driveList);
            return this;
        }

        public Builder setEncryptionKey(@Nullable Input<EncryptionKeyDetailsArgs> encryptionKey) {
            this.encryptionKey = encryptionKey;
            return this;
        }

        public Builder setEncryptionKey(@Nullable EncryptionKeyDetailsArgs encryptionKey) {
            this.encryptionKey = Input.ofNullable(encryptionKey);
            return this;
        }

        public Builder setExport(@Nullable Input<ExportArgs> export) {
            this.export = export;
            return this;
        }

        public Builder setExport(@Nullable ExportArgs export) {
            this.export = Input.ofNullable(export);
            return this;
        }

        public Builder setIncompleteBlobListUri(@Nullable Input<String> incompleteBlobListUri) {
            this.incompleteBlobListUri = incompleteBlobListUri;
            return this;
        }

        public Builder setIncompleteBlobListUri(@Nullable String incompleteBlobListUri) {
            this.incompleteBlobListUri = Input.ofNullable(incompleteBlobListUri);
            return this;
        }

        public Builder setJobType(@Nullable Input<String> jobType) {
            this.jobType = jobType;
            return this;
        }

        public Builder setJobType(@Nullable String jobType) {
            this.jobType = Input.ofNullable(jobType);
            return this;
        }

        public Builder setLogLevel(@Nullable Input<String> logLevel) {
            this.logLevel = logLevel;
            return this;
        }

        public Builder setLogLevel(@Nullable String logLevel) {
            this.logLevel = Input.ofNullable(logLevel);
            return this;
        }

        public Builder setPercentComplete(@Nullable Input<Integer> percentComplete) {
            this.percentComplete = percentComplete;
            return this;
        }

        public Builder setPercentComplete(@Nullable Integer percentComplete) {
            this.percentComplete = Input.ofNullable(percentComplete);
            return this;
        }

        public Builder setProvisioningState(@Nullable Input<String> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }

        public Builder setProvisioningState(@Nullable String provisioningState) {
            this.provisioningState = Input.ofNullable(provisioningState);
            return this;
        }

        public Builder setReturnAddress(@Nullable Input<ReturnAddressArgs> returnAddress) {
            this.returnAddress = returnAddress;
            return this;
        }

        public Builder setReturnAddress(@Nullable ReturnAddressArgs returnAddress) {
            this.returnAddress = Input.ofNullable(returnAddress);
            return this;
        }

        public Builder setReturnPackage(@Nullable Input<PackageInformationArgs> returnPackage) {
            this.returnPackage = returnPackage;
            return this;
        }

        public Builder setReturnPackage(@Nullable PackageInformationArgs returnPackage) {
            this.returnPackage = Input.ofNullable(returnPackage);
            return this;
        }

        public Builder setReturnShipping(@Nullable Input<ReturnShippingArgs> returnShipping) {
            this.returnShipping = returnShipping;
            return this;
        }

        public Builder setReturnShipping(@Nullable ReturnShippingArgs returnShipping) {
            this.returnShipping = Input.ofNullable(returnShipping);
            return this;
        }

        public Builder setShippingInformation(@Nullable Input<ShippingInformationArgs> shippingInformation) {
            this.shippingInformation = shippingInformation;
            return this;
        }

        public Builder setShippingInformation(@Nullable ShippingInformationArgs shippingInformation) {
            this.shippingInformation = Input.ofNullable(shippingInformation);
            return this;
        }

        public Builder setState(@Nullable Input<String> state) {
            this.state = state;
            return this;
        }

        public Builder setState(@Nullable String state) {
            this.state = Input.ofNullable(state);
            return this;
        }

        public Builder setStorageAccountId(@Nullable Input<String> storageAccountId) {
            this.storageAccountId = storageAccountId;
            return this;
        }

        public Builder setStorageAccountId(@Nullable String storageAccountId) {
            this.storageAccountId = Input.ofNullable(storageAccountId);
            return this;
        }
        public JobDetailsArgs build() {
            return new JobDetailsArgs(backupDriveManifest, cancelRequested, deliveryPackage, diagnosticsPath, driveList, encryptionKey, export, incompleteBlobListUri, jobType, logLevel, percentComplete, provisioningState, returnAddress, returnPackage, returnShipping, shippingInformation, state, storageAccountId);
        }
    }
}
