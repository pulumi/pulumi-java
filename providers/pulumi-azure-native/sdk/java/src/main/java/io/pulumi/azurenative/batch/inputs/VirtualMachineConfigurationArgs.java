// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.batch.inputs;

import io.pulumi.azurenative.batch.inputs.ContainerConfigurationArgs;
import io.pulumi.azurenative.batch.inputs.DataDiskArgs;
import io.pulumi.azurenative.batch.inputs.DiskEncryptionConfigurationArgs;
import io.pulumi.azurenative.batch.inputs.ImageReferenceArgs;
import io.pulumi.azurenative.batch.inputs.NodePlacementConfigurationArgs;
import io.pulumi.azurenative.batch.inputs.VMExtensionArgs;
import io.pulumi.azurenative.batch.inputs.WindowsConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualMachineConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualMachineConfigurationArgs Empty = new VirtualMachineConfigurationArgs();

    /**
     * If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
     * 
     */
    @InputImport(name="containerConfiguration")
      private final @Nullable Output<ContainerConfigurationArgs> containerConfiguration;

    public Output<ContainerConfigurationArgs> getContainerConfiguration() {
        return this.containerConfiguration == null ? Output.empty() : this.containerConfiguration;
    }

    /**
     * This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
     * 
     */
    @InputImport(name="dataDisks")
      private final @Nullable Output<List<DataDiskArgs>> dataDisks;

    public Output<List<DataDiskArgs>> getDataDisks() {
        return this.dataDisks == null ? Output.empty() : this.dataDisks;
    }

    /**
     * If specified, encryption is performed on each node in the pool during node provisioning.
     * 
     */
    @InputImport(name="diskEncryptionConfiguration")
      private final @Nullable Output<DiskEncryptionConfigurationArgs> diskEncryptionConfiguration;

    public Output<DiskEncryptionConfigurationArgs> getDiskEncryptionConfiguration() {
        return this.diskEncryptionConfiguration == null ? Output.empty() : this.diskEncryptionConfiguration;
    }

    /**
     * If specified, the extensions mentioned in this configuration will be installed on each node.
     * 
     */
    @InputImport(name="extensions")
      private final @Nullable Output<List<VMExtensionArgs>> extensions;

    public Output<List<VMExtensionArgs>> getExtensions() {
        return this.extensions == null ? Output.empty() : this.extensions;
    }

    @InputImport(name="imageReference", required=true)
      private final Output<ImageReferenceArgs> imageReference;

    public Output<ImageReferenceArgs> getImageReference() {
        return this.imageReference;
    }

    /**
     * This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
     * 
     *  Windows_Server - The on-premises license is for Windows Server.
     *  Windows_Client - The on-premises license is for Windows Client.
     * 
     */
    @InputImport(name="licenseType")
      private final @Nullable Output<String> licenseType;

    public Output<String> getLicenseType() {
        return this.licenseType == null ? Output.empty() : this.licenseType;
    }

    /**
     * The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
     * 
     */
    @InputImport(name="nodeAgentSkuId", required=true)
      private final Output<String> nodeAgentSkuId;

    public Output<String> getNodeAgentSkuId() {
        return this.nodeAgentSkuId;
    }

    /**
     * This configuration will specify rules on how nodes in the pool will be physically allocated.
     * 
     */
    @InputImport(name="nodePlacementConfiguration")
      private final @Nullable Output<NodePlacementConfigurationArgs> nodePlacementConfiguration;

    public Output<NodePlacementConfigurationArgs> getNodePlacementConfiguration() {
        return this.nodePlacementConfiguration == null ? Output.empty() : this.nodePlacementConfiguration;
    }

    /**
     * This property must not be specified if the imageReference specifies a Linux OS image.
     * 
     */
    @InputImport(name="windowsConfiguration")
      private final @Nullable Output<WindowsConfigurationArgs> windowsConfiguration;

    public Output<WindowsConfigurationArgs> getWindowsConfiguration() {
        return this.windowsConfiguration == null ? Output.empty() : this.windowsConfiguration;
    }

    public VirtualMachineConfigurationArgs(
        @Nullable Output<ContainerConfigurationArgs> containerConfiguration,
        @Nullable Output<List<DataDiskArgs>> dataDisks,
        @Nullable Output<DiskEncryptionConfigurationArgs> diskEncryptionConfiguration,
        @Nullable Output<List<VMExtensionArgs>> extensions,
        Output<ImageReferenceArgs> imageReference,
        @Nullable Output<String> licenseType,
        Output<String> nodeAgentSkuId,
        @Nullable Output<NodePlacementConfigurationArgs> nodePlacementConfiguration,
        @Nullable Output<WindowsConfigurationArgs> windowsConfiguration) {
        this.containerConfiguration = containerConfiguration;
        this.dataDisks = dataDisks;
        this.diskEncryptionConfiguration = diskEncryptionConfiguration;
        this.extensions = extensions;
        this.imageReference = Objects.requireNonNull(imageReference, "expected parameter 'imageReference' to be non-null");
        this.licenseType = licenseType;
        this.nodeAgentSkuId = Objects.requireNonNull(nodeAgentSkuId, "expected parameter 'nodeAgentSkuId' to be non-null");
        this.nodePlacementConfiguration = nodePlacementConfiguration;
        this.windowsConfiguration = windowsConfiguration;
    }

    private VirtualMachineConfigurationArgs() {
        this.containerConfiguration = Output.empty();
        this.dataDisks = Output.empty();
        this.diskEncryptionConfiguration = Output.empty();
        this.extensions = Output.empty();
        this.imageReference = Output.empty();
        this.licenseType = Output.empty();
        this.nodeAgentSkuId = Output.empty();
        this.nodePlacementConfiguration = Output.empty();
        this.windowsConfiguration = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ContainerConfigurationArgs> containerConfiguration;
        private @Nullable Output<List<DataDiskArgs>> dataDisks;
        private @Nullable Output<DiskEncryptionConfigurationArgs> diskEncryptionConfiguration;
        private @Nullable Output<List<VMExtensionArgs>> extensions;
        private Output<ImageReferenceArgs> imageReference;
        private @Nullable Output<String> licenseType;
        private Output<String> nodeAgentSkuId;
        private @Nullable Output<NodePlacementConfigurationArgs> nodePlacementConfiguration;
        private @Nullable Output<WindowsConfigurationArgs> windowsConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerConfiguration = defaults.containerConfiguration;
    	      this.dataDisks = defaults.dataDisks;
    	      this.diskEncryptionConfiguration = defaults.diskEncryptionConfiguration;
    	      this.extensions = defaults.extensions;
    	      this.imageReference = defaults.imageReference;
    	      this.licenseType = defaults.licenseType;
    	      this.nodeAgentSkuId = defaults.nodeAgentSkuId;
    	      this.nodePlacementConfiguration = defaults.nodePlacementConfiguration;
    	      this.windowsConfiguration = defaults.windowsConfiguration;
        }

        public Builder containerConfiguration(@Nullable Output<ContainerConfigurationArgs> containerConfiguration) {
            this.containerConfiguration = containerConfiguration;
            return this;
        }

        public Builder containerConfiguration(@Nullable ContainerConfigurationArgs containerConfiguration) {
            this.containerConfiguration = Output.ofNullable(containerConfiguration);
            return this;
        }

        public Builder dataDisks(@Nullable Output<List<DataDiskArgs>> dataDisks) {
            this.dataDisks = dataDisks;
            return this;
        }

        public Builder dataDisks(@Nullable List<DataDiskArgs> dataDisks) {
            this.dataDisks = Output.ofNullable(dataDisks);
            return this;
        }

        public Builder diskEncryptionConfiguration(@Nullable Output<DiskEncryptionConfigurationArgs> diskEncryptionConfiguration) {
            this.diskEncryptionConfiguration = diskEncryptionConfiguration;
            return this;
        }

        public Builder diskEncryptionConfiguration(@Nullable DiskEncryptionConfigurationArgs diskEncryptionConfiguration) {
            this.diskEncryptionConfiguration = Output.ofNullable(diskEncryptionConfiguration);
            return this;
        }

        public Builder extensions(@Nullable Output<List<VMExtensionArgs>> extensions) {
            this.extensions = extensions;
            return this;
        }

        public Builder extensions(@Nullable List<VMExtensionArgs> extensions) {
            this.extensions = Output.ofNullable(extensions);
            return this;
        }

        public Builder imageReference(Output<ImageReferenceArgs> imageReference) {
            this.imageReference = Objects.requireNonNull(imageReference);
            return this;
        }

        public Builder imageReference(ImageReferenceArgs imageReference) {
            this.imageReference = Output.of(Objects.requireNonNull(imageReference));
            return this;
        }

        public Builder licenseType(@Nullable Output<String> licenseType) {
            this.licenseType = licenseType;
            return this;
        }

        public Builder licenseType(@Nullable String licenseType) {
            this.licenseType = Output.ofNullable(licenseType);
            return this;
        }

        public Builder nodeAgentSkuId(Output<String> nodeAgentSkuId) {
            this.nodeAgentSkuId = Objects.requireNonNull(nodeAgentSkuId);
            return this;
        }

        public Builder nodeAgentSkuId(String nodeAgentSkuId) {
            this.nodeAgentSkuId = Output.of(Objects.requireNonNull(nodeAgentSkuId));
            return this;
        }

        public Builder nodePlacementConfiguration(@Nullable Output<NodePlacementConfigurationArgs> nodePlacementConfiguration) {
            this.nodePlacementConfiguration = nodePlacementConfiguration;
            return this;
        }

        public Builder nodePlacementConfiguration(@Nullable NodePlacementConfigurationArgs nodePlacementConfiguration) {
            this.nodePlacementConfiguration = Output.ofNullable(nodePlacementConfiguration);
            return this;
        }

        public Builder windowsConfiguration(@Nullable Output<WindowsConfigurationArgs> windowsConfiguration) {
            this.windowsConfiguration = windowsConfiguration;
            return this;
        }

        public Builder windowsConfiguration(@Nullable WindowsConfigurationArgs windowsConfiguration) {
            this.windowsConfiguration = Output.ofNullable(windowsConfiguration);
            return this;
        }
        public VirtualMachineConfigurationArgs build() {
            return new VirtualMachineConfigurationArgs(containerConfiguration, dataDisks, diskEncryptionConfiguration, extensions, imageReference, licenseType, nodeAgentSkuId, nodePlacementConfiguration, windowsConfiguration);
        }
    }
}
