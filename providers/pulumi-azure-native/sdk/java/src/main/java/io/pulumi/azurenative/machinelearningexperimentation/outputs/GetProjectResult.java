// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningexperimentation.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetProjectResult {
    private final String accountId;
    private final String creationDate;
    private final @Nullable String description;
    private final String friendlyName;
    private final @Nullable String gitrepo;
    private final String id;
    private final String location;
    private final String name;
    private final String projectId;
    private final String provisioningState;
    private final @Nullable Map<String,String> tags;
    private final String type;
    private final String workspaceId;

    @OutputCustomType.Constructor({"accountId","creationDate","description","friendlyName","gitrepo","id","location","name","projectId","provisioningState","tags","type","workspaceId"})
    private GetProjectResult(
        String accountId,
        String creationDate,
        @Nullable String description,
        String friendlyName,
        @Nullable String gitrepo,
        String id,
        String location,
        String name,
        String projectId,
        String provisioningState,
        @Nullable Map<String,String> tags,
        String type,
        String workspaceId) {
        this.accountId = Objects.requireNonNull(accountId);
        this.creationDate = Objects.requireNonNull(creationDate);
        this.description = description;
        this.friendlyName = Objects.requireNonNull(friendlyName);
        this.gitrepo = gitrepo;
        this.id = Objects.requireNonNull(id);
        this.location = Objects.requireNonNull(location);
        this.name = Objects.requireNonNull(name);
        this.projectId = Objects.requireNonNull(projectId);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.tags = tags;
        this.type = Objects.requireNonNull(type);
        this.workspaceId = Objects.requireNonNull(workspaceId);
    }

    public String getAccountId() {
        return this.accountId;
    }
    public String getCreationDate() {
        return this.creationDate;
    }
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    public String getFriendlyName() {
        return this.friendlyName;
    }
    public Optional<String> getGitrepo() {
        return Optional.ofNullable(this.gitrepo);
    }
    public String getId() {
        return this.id;
    }
    public String getLocation() {
        return this.location;
    }
    public String getName() {
        return this.name;
    }
    public String getProjectId() {
        return this.projectId;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String getType() {
        return this.type;
    }
    public String getWorkspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accountId;
        private String creationDate;
        private @Nullable String description;
        private String friendlyName;
        private @Nullable String gitrepo;
        private String id;
        private String location;
        private String name;
        private String projectId;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private String workspaceId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.creationDate = defaults.creationDate;
    	      this.description = defaults.description;
    	      this.friendlyName = defaults.friendlyName;
    	      this.gitrepo = defaults.gitrepo;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.workspaceId = defaults.workspaceId;
        }

        public Builder setAccountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }

        public Builder setCreationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setFriendlyName(String friendlyName) {
            this.friendlyName = Objects.requireNonNull(friendlyName);
            return this;
        }

        public Builder setGitrepo(@Nullable String gitrepo) {
            this.gitrepo = gitrepo;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProjectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setWorkspaceId(String workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }

        public GetProjectResult build() {
            return new GetProjectResult(accountId, creationDate, description, friendlyName, gitrepo, id, location, name, projectId, provisioningState, tags, type, workspaceId);
        }
    }
}
