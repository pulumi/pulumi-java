// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.compute.inputs.VirtualMachineExtensionInstanceViewArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualMachineScaleSetVMExtensionArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualMachineScaleSetVMExtensionArgs Empty = new VirtualMachineScaleSetVMExtensionArgs();

    /**
     * Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
     * 
     */
    @Import(name="autoUpgradeMinorVersion")
      private final @Nullable Output<Boolean> autoUpgradeMinorVersion;

    public Output<Boolean> getAutoUpgradeMinorVersion() {
        return this.autoUpgradeMinorVersion == null ? Codegen.empty() : this.autoUpgradeMinorVersion;
    }

    /**
     * Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
     * 
     */
    @Import(name="enableAutomaticUpgrade")
      private final @Nullable Output<Boolean> enableAutomaticUpgrade;

    public Output<Boolean> getEnableAutomaticUpgrade() {
        return this.enableAutomaticUpgrade == null ? Codegen.empty() : this.enableAutomaticUpgrade;
    }

    /**
     * How the extension handler should be forced to update even if the extension configuration has not changed.
     * 
     */
    @Import(name="forceUpdateTag")
      private final @Nullable Output<String> forceUpdateTag;

    public Output<String> getForceUpdateTag() {
        return this.forceUpdateTag == null ? Codegen.empty() : this.forceUpdateTag;
    }

    /**
     * The instance ID of the virtual machine.
     * 
     */
    @Import(name="instanceId", required=true)
      private final Output<String> instanceId;

    public Output<String> getInstanceId() {
        return this.instanceId;
    }

    /**
     * The virtual machine extension instance view.
     * 
     */
    @Import(name="instanceView")
      private final @Nullable Output<VirtualMachineExtensionInstanceViewArgs> instanceView;

    public Output<VirtualMachineExtensionInstanceViewArgs> getInstanceView() {
        return this.instanceView == null ? Codegen.empty() : this.instanceView;
    }

    /**
     * The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
     * 
     */
    @Import(name="protectedSettings")
      private final @Nullable Output<Object> protectedSettings;

    public Output<Object> getProtectedSettings() {
        return this.protectedSettings == null ? Codegen.empty() : this.protectedSettings;
    }

    /**
     * The name of the extension handler publisher.
     * 
     */
    @Import(name="publisher")
      private final @Nullable Output<String> publisher;

    public Output<String> getPublisher() {
        return this.publisher == null ? Codegen.empty() : this.publisher;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Json formatted public settings for the extension.
     * 
     */
    @Import(name="settings")
      private final @Nullable Output<Object> settings;

    public Output<Object> getSettings() {
        return this.settings == null ? Codegen.empty() : this.settings;
    }

    /**
     * Specifies the type of the extension; an example is "CustomScriptExtension".
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * Specifies the version of the script handler.
     * 
     */
    @Import(name="typeHandlerVersion")
      private final @Nullable Output<String> typeHandlerVersion;

    public Output<String> getTypeHandlerVersion() {
        return this.typeHandlerVersion == null ? Codegen.empty() : this.typeHandlerVersion;
    }

    /**
     * The name of the virtual machine extension.
     * 
     */
    @Import(name="vmExtensionName")
      private final @Nullable Output<String> vmExtensionName;

    public Output<String> getVmExtensionName() {
        return this.vmExtensionName == null ? Codegen.empty() : this.vmExtensionName;
    }

    /**
     * The name of the VM scale set.
     * 
     */
    @Import(name="vmScaleSetName", required=true)
      private final Output<String> vmScaleSetName;

    public Output<String> getVmScaleSetName() {
        return this.vmScaleSetName;
    }

    public VirtualMachineScaleSetVMExtensionArgs(
        @Nullable Output<Boolean> autoUpgradeMinorVersion,
        @Nullable Output<Boolean> enableAutomaticUpgrade,
        @Nullable Output<String> forceUpdateTag,
        Output<String> instanceId,
        @Nullable Output<VirtualMachineExtensionInstanceViewArgs> instanceView,
        @Nullable Output<Object> protectedSettings,
        @Nullable Output<String> publisher,
        Output<String> resourceGroupName,
        @Nullable Output<Object> settings,
        @Nullable Output<String> type,
        @Nullable Output<String> typeHandlerVersion,
        @Nullable Output<String> vmExtensionName,
        Output<String> vmScaleSetName) {
        this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
        this.enableAutomaticUpgrade = enableAutomaticUpgrade;
        this.forceUpdateTag = forceUpdateTag;
        this.instanceId = Objects.requireNonNull(instanceId, "expected parameter 'instanceId' to be non-null");
        this.instanceView = instanceView;
        this.protectedSettings = protectedSettings;
        this.publisher = publisher;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.settings = settings;
        this.type = type;
        this.typeHandlerVersion = typeHandlerVersion;
        this.vmExtensionName = vmExtensionName;
        this.vmScaleSetName = Objects.requireNonNull(vmScaleSetName, "expected parameter 'vmScaleSetName' to be non-null");
    }

    private VirtualMachineScaleSetVMExtensionArgs() {
        this.autoUpgradeMinorVersion = Codegen.empty();
        this.enableAutomaticUpgrade = Codegen.empty();
        this.forceUpdateTag = Codegen.empty();
        this.instanceId = Codegen.empty();
        this.instanceView = Codegen.empty();
        this.protectedSettings = Codegen.empty();
        this.publisher = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.settings = Codegen.empty();
        this.type = Codegen.empty();
        this.typeHandlerVersion = Codegen.empty();
        this.vmExtensionName = Codegen.empty();
        this.vmScaleSetName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineScaleSetVMExtensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> autoUpgradeMinorVersion;
        private @Nullable Output<Boolean> enableAutomaticUpgrade;
        private @Nullable Output<String> forceUpdateTag;
        private Output<String> instanceId;
        private @Nullable Output<VirtualMachineExtensionInstanceViewArgs> instanceView;
        private @Nullable Output<Object> protectedSettings;
        private @Nullable Output<String> publisher;
        private Output<String> resourceGroupName;
        private @Nullable Output<Object> settings;
        private @Nullable Output<String> type;
        private @Nullable Output<String> typeHandlerVersion;
        private @Nullable Output<String> vmExtensionName;
        private Output<String> vmScaleSetName;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineScaleSetVMExtensionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoUpgradeMinorVersion = defaults.autoUpgradeMinorVersion;
    	      this.enableAutomaticUpgrade = defaults.enableAutomaticUpgrade;
    	      this.forceUpdateTag = defaults.forceUpdateTag;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceView = defaults.instanceView;
    	      this.protectedSettings = defaults.protectedSettings;
    	      this.publisher = defaults.publisher;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.settings = defaults.settings;
    	      this.type = defaults.type;
    	      this.typeHandlerVersion = defaults.typeHandlerVersion;
    	      this.vmExtensionName = defaults.vmExtensionName;
    	      this.vmScaleSetName = defaults.vmScaleSetName;
        }

        public Builder autoUpgradeMinorVersion(@Nullable Output<Boolean> autoUpgradeMinorVersion) {
            this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
            return this;
        }
        public Builder autoUpgradeMinorVersion(@Nullable Boolean autoUpgradeMinorVersion) {
            this.autoUpgradeMinorVersion = Codegen.ofNullable(autoUpgradeMinorVersion);
            return this;
        }
        public Builder enableAutomaticUpgrade(@Nullable Output<Boolean> enableAutomaticUpgrade) {
            this.enableAutomaticUpgrade = enableAutomaticUpgrade;
            return this;
        }
        public Builder enableAutomaticUpgrade(@Nullable Boolean enableAutomaticUpgrade) {
            this.enableAutomaticUpgrade = Codegen.ofNullable(enableAutomaticUpgrade);
            return this;
        }
        public Builder forceUpdateTag(@Nullable Output<String> forceUpdateTag) {
            this.forceUpdateTag = forceUpdateTag;
            return this;
        }
        public Builder forceUpdateTag(@Nullable String forceUpdateTag) {
            this.forceUpdateTag = Codegen.ofNullable(forceUpdateTag);
            return this;
        }
        public Builder instanceId(Output<String> instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Output.of(Objects.requireNonNull(instanceId));
            return this;
        }
        public Builder instanceView(@Nullable Output<VirtualMachineExtensionInstanceViewArgs> instanceView) {
            this.instanceView = instanceView;
            return this;
        }
        public Builder instanceView(@Nullable VirtualMachineExtensionInstanceViewArgs instanceView) {
            this.instanceView = Codegen.ofNullable(instanceView);
            return this;
        }
        public Builder protectedSettings(@Nullable Output<Object> protectedSettings) {
            this.protectedSettings = protectedSettings;
            return this;
        }
        public Builder protectedSettings(@Nullable Object protectedSettings) {
            this.protectedSettings = Codegen.ofNullable(protectedSettings);
            return this;
        }
        public Builder publisher(@Nullable Output<String> publisher) {
            this.publisher = publisher;
            return this;
        }
        public Builder publisher(@Nullable String publisher) {
            this.publisher = Codegen.ofNullable(publisher);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder settings(@Nullable Output<Object> settings) {
            this.settings = settings;
            return this;
        }
        public Builder settings(@Nullable Object settings) {
            this.settings = Codegen.ofNullable(settings);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder typeHandlerVersion(@Nullable Output<String> typeHandlerVersion) {
            this.typeHandlerVersion = typeHandlerVersion;
            return this;
        }
        public Builder typeHandlerVersion(@Nullable String typeHandlerVersion) {
            this.typeHandlerVersion = Codegen.ofNullable(typeHandlerVersion);
            return this;
        }
        public Builder vmExtensionName(@Nullable Output<String> vmExtensionName) {
            this.vmExtensionName = vmExtensionName;
            return this;
        }
        public Builder vmExtensionName(@Nullable String vmExtensionName) {
            this.vmExtensionName = Codegen.ofNullable(vmExtensionName);
            return this;
        }
        public Builder vmScaleSetName(Output<String> vmScaleSetName) {
            this.vmScaleSetName = Objects.requireNonNull(vmScaleSetName);
            return this;
        }
        public Builder vmScaleSetName(String vmScaleSetName) {
            this.vmScaleSetName = Output.of(Objects.requireNonNull(vmScaleSetName));
            return this;
        }        public VirtualMachineScaleSetVMExtensionArgs build() {
            return new VirtualMachineScaleSetVMExtensionArgs(autoUpgradeMinorVersion, enableAutomaticUpgrade, forceUpdateTag, instanceId, instanceView, protectedSettings, publisher, resourceGroupName, settings, type, typeHandlerVersion, vmExtensionName, vmScaleSetName);
        }
    }
}
