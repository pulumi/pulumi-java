// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import io.pulumi.azurenative.datafactory.inputs.ActivityPolicyArgs;
import io.pulumi.azurenative.datafactory.inputs.AmazonMWSSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AmazonRdsForOracleSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AmazonRdsForSqlServerSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AmazonRedshiftSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AvroSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AvroSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureBlobFSSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureBlobFSSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureDataExplorerSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureDataExplorerSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureDataLakeStoreSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureDataLakeStoreSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureDatabricksDeltaLakeSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureDatabricksDeltaLakeSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureMariaDBSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureMySqlSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureMySqlSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AzurePostgreSqlSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AzurePostgreSqlSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureQueueSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureSearchIndexSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureSqlSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureSqlSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureTableSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureTableSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.BinarySinkArgs;
import io.pulumi.azurenative.datafactory.inputs.BinarySourceArgs;
import io.pulumi.azurenative.datafactory.inputs.BlobSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.BlobSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.CassandraSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.CommonDataServiceForAppsSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.CommonDataServiceForAppsSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.ConcurSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.CosmosDbMongoDbApiSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.CosmosDbMongoDbApiSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.CosmosDbSqlApiSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.CosmosDbSqlApiSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.CouchbaseSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.DatasetReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.Db2SourceArgs;
import io.pulumi.azurenative.datafactory.inputs.DelimitedTextSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.DelimitedTextSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.DocumentDbCollectionSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.DocumentDbCollectionSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.DrillSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.DynamicsAXSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.DynamicsCrmSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.DynamicsCrmSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.DynamicsSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.DynamicsSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.EloquaSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.ExcelSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.FileSystemSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.FileSystemSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.GoogleAdWordsSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.GoogleBigQuerySourceArgs;
import io.pulumi.azurenative.datafactory.inputs.GreenplumSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.HBaseSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.HdfsSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.HiveSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.HttpSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.HubspotSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.ImpalaSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.InformixSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.InformixSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.JiraSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.JsonSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.JsonSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.LogSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.LogStorageSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.MagentoSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.MariaDBSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.MarketoSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.MicrosoftAccessSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.MicrosoftAccessSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.MongoDbAtlasSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.MongoDbAtlasSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.MongoDbSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.MongoDbV2SinkArgs;
import io.pulumi.azurenative.datafactory.inputs.MongoDbV2SourceArgs;
import io.pulumi.azurenative.datafactory.inputs.MySqlSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.NetezzaSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.ODataSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.OdbcSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.OdbcSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.Office365SourceArgs;
import io.pulumi.azurenative.datafactory.inputs.OracleServiceCloudSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.OracleSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.OracleSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.OrcSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.OrcSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.ParquetSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.ParquetSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.PaypalSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.PhoenixSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.PostgreSqlSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.PrestoSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.QuickBooksSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.RedirectIncompatibleRowSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.RelationalSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.ResponsysSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.RestSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.RestSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SalesforceMarketingCloudSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SalesforceServiceCloudSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.SalesforceServiceCloudSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SalesforceSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.SalesforceSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SapBwSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SapCloudForCustomerSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.SapCloudForCustomerSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SapEccSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SapHanaSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SapOpenHubSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SapTableSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.ServiceNowSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SharePointOnlineListSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.ShopifySourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SkipErrorFileArgs;
import io.pulumi.azurenative.datafactory.inputs.SnowflakeSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.SnowflakeSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SparkSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SqlDWSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.SqlDWSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SqlMISinkArgs;
import io.pulumi.azurenative.datafactory.inputs.SqlMISourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SqlServerSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.SqlServerSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SqlSinkArgs;
import io.pulumi.azurenative.datafactory.inputs.SqlSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.SquareSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.StagingSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.SybaseSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.TabularSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.TeradataSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import io.pulumi.azurenative.datafactory.inputs.VerticaSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.WebSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.XeroSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.XmlSourceArgs;
import io.pulumi.azurenative.datafactory.inputs.ZohoSourceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Copy activity.
 * 
 */
public final class CopyActivityArgs extends io.pulumi.resources.ResourceArgs {

    public static final CopyActivityArgs Empty = new CopyActivityArgs();

    /**
     * Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    @Import(name="dataIntegrationUnits")
      private final @Nullable Output<Object> dataIntegrationUnits;

    public Output<Object> getDataIntegrationUnits() {
        return this.dataIntegrationUnits == null ? Output.empty() : this.dataIntegrationUnits;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    public Output<List<ActivityDependencyArgs>> getDependsOn() {
        return this.dependsOn == null ? Output.empty() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="enableSkipIncompatibleRow")
      private final @Nullable Output<Object> enableSkipIncompatibleRow;

    public Output<Object> getEnableSkipIncompatibleRow() {
        return this.enableSkipIncompatibleRow == null ? Output.empty() : this.enableSkipIncompatibleRow;
    }

    /**
     * Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="enableStaging")
      private final @Nullable Output<Object> enableStaging;

    public Output<Object> getEnableStaging() {
        return this.enableStaging == null ? Output.empty() : this.enableStaging;
    }

    /**
     * List of inputs for the activity.
     * 
     */
    @Import(name="inputs")
      private final @Nullable Output<List<DatasetReferenceArgs>> inputs;

    public Output<List<DatasetReferenceArgs>> getInputs() {
        return this.inputs == null ? Output.empty() : this.inputs;
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
      private final @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Output<LinkedServiceReferenceArgs> getLinkedServiceName() {
        return this.linkedServiceName == null ? Output.empty() : this.linkedServiceName;
    }

    /**
     * Log settings customer needs provide when enabling log.
     * 
     */
    @Import(name="logSettings")
      private final @Nullable Output<LogSettingsArgs> logSettings;

    public Output<LogSettingsArgs> getLogSettings() {
        return this.logSettings == null ? Output.empty() : this.logSettings;
    }

    /**
     * (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
     * 
     */
    @Import(name="logStorageSettings")
      private final @Nullable Output<LogStorageSettingsArgs> logStorageSettings;

    public Output<LogStorageSettingsArgs> getLogStorageSettings() {
        return this.logStorageSettings == null ? Output.empty() : this.logStorageSettings;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * List of outputs for the activity.
     * 
     */
    @Import(name="outputs")
      private final @Nullable Output<List<DatasetReferenceArgs>> outputs;

    public Output<List<DatasetReferenceArgs>> getOutputs() {
        return this.outputs == null ? Output.empty() : this.outputs;
    }

    /**
     * Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    @Import(name="parallelCopies")
      private final @Nullable Output<Object> parallelCopies;

    public Output<Object> getParallelCopies() {
        return this.parallelCopies == null ? Output.empty() : this.parallelCopies;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
      private final @Nullable Output<ActivityPolicyArgs> policy;

    public Output<ActivityPolicyArgs> getPolicy() {
        return this.policy == null ? Output.empty() : this.policy;
    }

    /**
     * Preserve rules.
     * 
     */
    @Import(name="preserve")
      private final @Nullable Output<List<Object>> preserve;

    public Output<List<Object>> getPreserve() {
        return this.preserve == null ? Output.empty() : this.preserve;
    }

    /**
     * Preserve Rules.
     * 
     */
    @Import(name="preserveRules")
      private final @Nullable Output<List<Object>> preserveRules;

    public Output<List<Object>> getPreserveRules() {
        return this.preserveRules == null ? Output.empty() : this.preserveRules;
    }

    /**
     * Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
     * 
     */
    @Import(name="redirectIncompatibleRowSettings")
      private final @Nullable Output<RedirectIncompatibleRowSettingsArgs> redirectIncompatibleRowSettings;

    public Output<RedirectIncompatibleRowSettingsArgs> getRedirectIncompatibleRowSettings() {
        return this.redirectIncompatibleRowSettings == null ? Output.empty() : this.redirectIncompatibleRowSettings;
    }

    /**
     * Copy activity sink.
     * 
     */
    @Import(name="sink", required=true)
      private final Output<Object> sink;

    public Output<Object> getSink() {
        return this.sink;
    }

    /**
     * Specify the fault tolerance for data consistency.
     * 
     */
    @Import(name="skipErrorFile")
      private final @Nullable Output<SkipErrorFileArgs> skipErrorFile;

    public Output<SkipErrorFileArgs> getSkipErrorFile() {
        return this.skipErrorFile == null ? Output.empty() : this.skipErrorFile;
    }

    /**
     * Copy activity source.
     * 
     */
    @Import(name="source", required=true)
      private final Output<Object> source;

    public Output<Object> getSource() {
        return this.source;
    }

    /**
     * Specifies interim staging settings when EnableStaging is true.
     * 
     */
    @Import(name="stagingSettings")
      private final @Nullable Output<StagingSettingsArgs> stagingSettings;

    public Output<StagingSettingsArgs> getStagingSettings() {
        return this.stagingSettings == null ? Output.empty() : this.stagingSettings;
    }

    /**
     * Copy activity translator. If not specified, tabular translator is used.
     * 
     */
    @Import(name="translator")
      private final @Nullable Output<Object> translator;

    public Output<Object> getTranslator() {
        return this.translator == null ? Output.empty() : this.translator;
    }

    /**
     * Type of activity.
     * Expected value is 'Copy'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
      private final @Nullable Output<List<UserPropertyArgs>> userProperties;

    public Output<List<UserPropertyArgs>> getUserProperties() {
        return this.userProperties == null ? Output.empty() : this.userProperties;
    }

    /**
     * Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="validateDataConsistency")
      private final @Nullable Output<Object> validateDataConsistency;

    public Output<Object> getValidateDataConsistency() {
        return this.validateDataConsistency == null ? Output.empty() : this.validateDataConsistency;
    }

    public CopyActivityArgs(
        @Nullable Output<Object> dataIntegrationUnits,
        @Nullable Output<List<ActivityDependencyArgs>> dependsOn,
        @Nullable Output<String> description,
        @Nullable Output<Object> enableSkipIncompatibleRow,
        @Nullable Output<Object> enableStaging,
        @Nullable Output<List<DatasetReferenceArgs>> inputs,
        @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName,
        @Nullable Output<LogSettingsArgs> logSettings,
        @Nullable Output<LogStorageSettingsArgs> logStorageSettings,
        Output<String> name,
        @Nullable Output<List<DatasetReferenceArgs>> outputs,
        @Nullable Output<Object> parallelCopies,
        @Nullable Output<ActivityPolicyArgs> policy,
        @Nullable Output<List<Object>> preserve,
        @Nullable Output<List<Object>> preserveRules,
        @Nullable Output<RedirectIncompatibleRowSettingsArgs> redirectIncompatibleRowSettings,
        Output<Object> sink,
        @Nullable Output<SkipErrorFileArgs> skipErrorFile,
        Output<Object> source,
        @Nullable Output<StagingSettingsArgs> stagingSettings,
        @Nullable Output<Object> translator,
        Output<String> type,
        @Nullable Output<List<UserPropertyArgs>> userProperties,
        @Nullable Output<Object> validateDataConsistency) {
        this.dataIntegrationUnits = dataIntegrationUnits;
        this.dependsOn = dependsOn;
        this.description = description;
        this.enableSkipIncompatibleRow = enableSkipIncompatibleRow;
        this.enableStaging = enableStaging;
        this.inputs = inputs;
        this.linkedServiceName = linkedServiceName;
        this.logSettings = logSettings;
        this.logStorageSettings = logStorageSettings;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.outputs = outputs;
        this.parallelCopies = parallelCopies;
        this.policy = policy;
        this.preserve = preserve;
        this.preserveRules = preserveRules;
        this.redirectIncompatibleRowSettings = redirectIncompatibleRowSettings;
        this.sink = Objects.requireNonNull(sink, "expected parameter 'sink' to be non-null");
        this.skipErrorFile = skipErrorFile;
        this.source = Objects.requireNonNull(source, "expected parameter 'source' to be non-null");
        this.stagingSettings = stagingSettings;
        this.translator = translator;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userProperties = userProperties;
        this.validateDataConsistency = validateDataConsistency;
    }

    private CopyActivityArgs() {
        this.dataIntegrationUnits = Output.empty();
        this.dependsOn = Output.empty();
        this.description = Output.empty();
        this.enableSkipIncompatibleRow = Output.empty();
        this.enableStaging = Output.empty();
        this.inputs = Output.empty();
        this.linkedServiceName = Output.empty();
        this.logSettings = Output.empty();
        this.logStorageSettings = Output.empty();
        this.name = Output.empty();
        this.outputs = Output.empty();
        this.parallelCopies = Output.empty();
        this.policy = Output.empty();
        this.preserve = Output.empty();
        this.preserveRules = Output.empty();
        this.redirectIncompatibleRowSettings = Output.empty();
        this.sink = Output.empty();
        this.skipErrorFile = Output.empty();
        this.source = Output.empty();
        this.stagingSettings = Output.empty();
        this.translator = Output.empty();
        this.type = Output.empty();
        this.userProperties = Output.empty();
        this.validateDataConsistency = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CopyActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Object> dataIntegrationUnits;
        private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;
        private @Nullable Output<String> description;
        private @Nullable Output<Object> enableSkipIncompatibleRow;
        private @Nullable Output<Object> enableStaging;
        private @Nullable Output<List<DatasetReferenceArgs>> inputs;
        private @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;
        private @Nullable Output<LogSettingsArgs> logSettings;
        private @Nullable Output<LogStorageSettingsArgs> logStorageSettings;
        private Output<String> name;
        private @Nullable Output<List<DatasetReferenceArgs>> outputs;
        private @Nullable Output<Object> parallelCopies;
        private @Nullable Output<ActivityPolicyArgs> policy;
        private @Nullable Output<List<Object>> preserve;
        private @Nullable Output<List<Object>> preserveRules;
        private @Nullable Output<RedirectIncompatibleRowSettingsArgs> redirectIncompatibleRowSettings;
        private Output<Object> sink;
        private @Nullable Output<SkipErrorFileArgs> skipErrorFile;
        private Output<Object> source;
        private @Nullable Output<StagingSettingsArgs> stagingSettings;
        private @Nullable Output<Object> translator;
        private Output<String> type;
        private @Nullable Output<List<UserPropertyArgs>> userProperties;
        private @Nullable Output<Object> validateDataConsistency;

        public Builder() {
    	      // Empty
        }

        public Builder(CopyActivityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataIntegrationUnits = defaults.dataIntegrationUnits;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.enableSkipIncompatibleRow = defaults.enableSkipIncompatibleRow;
    	      this.enableStaging = defaults.enableStaging;
    	      this.inputs = defaults.inputs;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.logSettings = defaults.logSettings;
    	      this.logStorageSettings = defaults.logStorageSettings;
    	      this.name = defaults.name;
    	      this.outputs = defaults.outputs;
    	      this.parallelCopies = defaults.parallelCopies;
    	      this.policy = defaults.policy;
    	      this.preserve = defaults.preserve;
    	      this.preserveRules = defaults.preserveRules;
    	      this.redirectIncompatibleRowSettings = defaults.redirectIncompatibleRowSettings;
    	      this.sink = defaults.sink;
    	      this.skipErrorFile = defaults.skipErrorFile;
    	      this.source = defaults.source;
    	      this.stagingSettings = defaults.stagingSettings;
    	      this.translator = defaults.translator;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
    	      this.validateDataConsistency = defaults.validateDataConsistency;
        }

        public Builder dataIntegrationUnits(@Nullable Output<Object> dataIntegrationUnits) {
            this.dataIntegrationUnits = dataIntegrationUnits;
            return this;
        }
        public Builder dataIntegrationUnits(@Nullable Object dataIntegrationUnits) {
            this.dataIntegrationUnits = Output.ofNullable(dataIntegrationUnits);
            return this;
        }
        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(@Nullable List<ActivityDependencyArgs> dependsOn) {
            this.dependsOn = Output.ofNullable(dependsOn);
            return this;
        }
        public Builder dependsOn(ActivityDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder enableSkipIncompatibleRow(@Nullable Output<Object> enableSkipIncompatibleRow) {
            this.enableSkipIncompatibleRow = enableSkipIncompatibleRow;
            return this;
        }
        public Builder enableSkipIncompatibleRow(@Nullable Object enableSkipIncompatibleRow) {
            this.enableSkipIncompatibleRow = Output.ofNullable(enableSkipIncompatibleRow);
            return this;
        }
        public Builder enableStaging(@Nullable Output<Object> enableStaging) {
            this.enableStaging = enableStaging;
            return this;
        }
        public Builder enableStaging(@Nullable Object enableStaging) {
            this.enableStaging = Output.ofNullable(enableStaging);
            return this;
        }
        public Builder inputs(@Nullable Output<List<DatasetReferenceArgs>> inputs) {
            this.inputs = inputs;
            return this;
        }
        public Builder inputs(@Nullable List<DatasetReferenceArgs> inputs) {
            this.inputs = Output.ofNullable(inputs);
            return this;
        }
        public Builder inputs(DatasetReferenceArgs... inputs) {
            return inputs(List.of(inputs));
        }
        public Builder linkedServiceName(@Nullable Output<LinkedServiceReferenceArgs> linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceArgs linkedServiceName) {
            this.linkedServiceName = Output.ofNullable(linkedServiceName);
            return this;
        }
        public Builder logSettings(@Nullable Output<LogSettingsArgs> logSettings) {
            this.logSettings = logSettings;
            return this;
        }
        public Builder logSettings(@Nullable LogSettingsArgs logSettings) {
            this.logSettings = Output.ofNullable(logSettings);
            return this;
        }
        public Builder logStorageSettings(@Nullable Output<LogStorageSettingsArgs> logStorageSettings) {
            this.logStorageSettings = logStorageSettings;
            return this;
        }
        public Builder logStorageSettings(@Nullable LogStorageSettingsArgs logStorageSettings) {
            this.logStorageSettings = Output.ofNullable(logStorageSettings);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder outputs(@Nullable Output<List<DatasetReferenceArgs>> outputs) {
            this.outputs = outputs;
            return this;
        }
        public Builder outputs(@Nullable List<DatasetReferenceArgs> outputs) {
            this.outputs = Output.ofNullable(outputs);
            return this;
        }
        public Builder outputs(DatasetReferenceArgs... outputs) {
            return outputs(List.of(outputs));
        }
        public Builder parallelCopies(@Nullable Output<Object> parallelCopies) {
            this.parallelCopies = parallelCopies;
            return this;
        }
        public Builder parallelCopies(@Nullable Object parallelCopies) {
            this.parallelCopies = Output.ofNullable(parallelCopies);
            return this;
        }
        public Builder policy(@Nullable Output<ActivityPolicyArgs> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable ActivityPolicyArgs policy) {
            this.policy = Output.ofNullable(policy);
            return this;
        }
        public Builder preserve(@Nullable Output<List<Object>> preserve) {
            this.preserve = preserve;
            return this;
        }
        public Builder preserve(@Nullable List<Object> preserve) {
            this.preserve = Output.ofNullable(preserve);
            return this;
        }
        public Builder preserve(Object... preserve) {
            return preserve(List.of(preserve));
        }
        public Builder preserveRules(@Nullable Output<List<Object>> preserveRules) {
            this.preserveRules = preserveRules;
            return this;
        }
        public Builder preserveRules(@Nullable List<Object> preserveRules) {
            this.preserveRules = Output.ofNullable(preserveRules);
            return this;
        }
        public Builder preserveRules(Object... preserveRules) {
            return preserveRules(List.of(preserveRules));
        }
        public Builder redirectIncompatibleRowSettings(@Nullable Output<RedirectIncompatibleRowSettingsArgs> redirectIncompatibleRowSettings) {
            this.redirectIncompatibleRowSettings = redirectIncompatibleRowSettings;
            return this;
        }
        public Builder redirectIncompatibleRowSettings(@Nullable RedirectIncompatibleRowSettingsArgs redirectIncompatibleRowSettings) {
            this.redirectIncompatibleRowSettings = Output.ofNullable(redirectIncompatibleRowSettings);
            return this;
        }
        public Builder sink(Output<Object> sink) {
            this.sink = Objects.requireNonNull(sink);
            return this;
        }
        public Builder sink(Object sink) {
            this.sink = Output.of(Objects.requireNonNull(sink));
            return this;
        }
        public Builder skipErrorFile(@Nullable Output<SkipErrorFileArgs> skipErrorFile) {
            this.skipErrorFile = skipErrorFile;
            return this;
        }
        public Builder skipErrorFile(@Nullable SkipErrorFileArgs skipErrorFile) {
            this.skipErrorFile = Output.ofNullable(skipErrorFile);
            return this;
        }
        public Builder source(Output<Object> source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        public Builder source(Object source) {
            this.source = Output.of(Objects.requireNonNull(source));
            return this;
        }
        public Builder stagingSettings(@Nullable Output<StagingSettingsArgs> stagingSettings) {
            this.stagingSettings = stagingSettings;
            return this;
        }
        public Builder stagingSettings(@Nullable StagingSettingsArgs stagingSettings) {
            this.stagingSettings = Output.ofNullable(stagingSettings);
            return this;
        }
        public Builder translator(@Nullable Output<Object> translator) {
            this.translator = translator;
            return this;
        }
        public Builder translator(@Nullable Object translator) {
            this.translator = Output.ofNullable(translator);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyArgs> userProperties) {
            this.userProperties = Output.ofNullable(userProperties);
            return this;
        }
        public Builder userProperties(UserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }
        public Builder validateDataConsistency(@Nullable Output<Object> validateDataConsistency) {
            this.validateDataConsistency = validateDataConsistency;
            return this;
        }
        public Builder validateDataConsistency(@Nullable Object validateDataConsistency) {
            this.validateDataConsistency = Output.ofNullable(validateDataConsistency);
            return this;
        }        public CopyActivityArgs build() {
            return new CopyActivityArgs(dataIntegrationUnits, dependsOn, description, enableSkipIncompatibleRow, enableStaging, inputs, linkedServiceName, logSettings, logStorageSettings, name, outputs, parallelCopies, policy, preserve, preserveRules, redirectIncompatibleRowSettings, sink, skipErrorFile, source, stagingSettings, translator, type, userProperties, validateDataConsistency);
        }
    }
}
