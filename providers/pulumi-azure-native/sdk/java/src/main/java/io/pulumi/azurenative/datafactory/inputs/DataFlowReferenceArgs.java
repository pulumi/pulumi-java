// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Data flow reference type.
 * 
 */
public final class DataFlowReferenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataFlowReferenceArgs Empty = new DataFlowReferenceArgs();

    /**
     * Reference data flow parameters from dataset.
     * 
     */
    @Import(name="datasetParameters")
      private final @Nullable Output<Object> datasetParameters;

    public Output<Object> datasetParameters() {
        return this.datasetParameters == null ? Codegen.empty() : this.datasetParameters;
    }

    /**
     * Data flow parameters
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Map<String,Object>> parameters;

    public Output<Map<String,Object>> parameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * Reference data flow name.
     * 
     */
    @Import(name="referenceName", required=true)
      private final Output<String> referenceName;

    public Output<String> referenceName() {
        return this.referenceName;
    }

    /**
     * Data flow reference type.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public DataFlowReferenceArgs(
        @Nullable Output<Object> datasetParameters,
        @Nullable Output<Map<String,Object>> parameters,
        Output<String> referenceName,
        Output<String> type) {
        this.datasetParameters = datasetParameters;
        this.parameters = parameters;
        this.referenceName = Objects.requireNonNull(referenceName, "expected parameter 'referenceName' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private DataFlowReferenceArgs() {
        this.datasetParameters = Codegen.empty();
        this.parameters = Codegen.empty();
        this.referenceName = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataFlowReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Object> datasetParameters;
        private @Nullable Output<Map<String,Object>> parameters;
        private Output<String> referenceName;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(DataFlowReferenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasetParameters = defaults.datasetParameters;
    	      this.parameters = defaults.parameters;
    	      this.referenceName = defaults.referenceName;
    	      this.type = defaults.type;
        }

        public Builder datasetParameters(@Nullable Output<Object> datasetParameters) {
            this.datasetParameters = datasetParameters;
            return this;
        }
        public Builder datasetParameters(@Nullable Object datasetParameters) {
            this.datasetParameters = Codegen.ofNullable(datasetParameters);
            return this;
        }
        public Builder parameters(@Nullable Output<Map<String,Object>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable Map<String,Object> parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder referenceName(Output<String> referenceName) {
            this.referenceName = Objects.requireNonNull(referenceName);
            return this;
        }
        public Builder referenceName(String referenceName) {
            this.referenceName = Output.of(Objects.requireNonNull(referenceName));
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public DataFlowReferenceArgs build() {
            return new DataFlowReferenceArgs(datasetParameters, parameters, referenceName, type);
        }
    }
}
