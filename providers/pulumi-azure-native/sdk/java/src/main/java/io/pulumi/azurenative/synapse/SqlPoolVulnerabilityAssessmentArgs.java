// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.synapse;

import io.pulumi.azurenative.synapse.inputs.VulnerabilityAssessmentRecurringScansPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SqlPoolVulnerabilityAssessmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final SqlPoolVulnerabilityAssessmentArgs Empty = new SqlPoolVulnerabilityAssessmentArgs();

    /**
     * The recurring scans settings
     * 
     */
    @Import(name="recurringScans")
      private final @Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans;

    public Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans() {
        return this.recurringScans == null ? Codegen.empty() : this.recurringScans;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * SQL pool name
     * 
     */
    @Import(name="sqlPoolName", required=true)
      private final Output<String> sqlPoolName;

    public Output<String> sqlPoolName() {
        return this.sqlPoolName;
    }

    /**
     * Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
     * 
     */
    @Import(name="storageAccountAccessKey")
      private final @Nullable Output<String> storageAccountAccessKey;

    public Output<String> storageAccountAccessKey() {
        return this.storageAccountAccessKey == null ? Codegen.empty() : this.storageAccountAccessKey;
    }

    /**
     * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
     * 
     */
    @Import(name="storageContainerPath")
      private final @Nullable Output<String> storageContainerPath;

    public Output<String> storageContainerPath() {
        return this.storageContainerPath == null ? Codegen.empty() : this.storageContainerPath;
    }

    /**
     * A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
     * 
     */
    @Import(name="storageContainerSasKey")
      private final @Nullable Output<String> storageContainerSasKey;

    public Output<String> storageContainerSasKey() {
        return this.storageContainerSasKey == null ? Codegen.empty() : this.storageContainerSasKey;
    }

    /**
     * The name of the vulnerability assessment.
     * 
     */
    @Import(name="vulnerabilityAssessmentName")
      private final @Nullable Output<String> vulnerabilityAssessmentName;

    public Output<String> vulnerabilityAssessmentName() {
        return this.vulnerabilityAssessmentName == null ? Codegen.empty() : this.vulnerabilityAssessmentName;
    }

    /**
     * The name of the workspace
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    public SqlPoolVulnerabilityAssessmentArgs(
        @Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans,
        Output<String> resourceGroupName,
        Output<String> sqlPoolName,
        @Nullable Output<String> storageAccountAccessKey,
        @Nullable Output<String> storageContainerPath,
        @Nullable Output<String> storageContainerSasKey,
        @Nullable Output<String> vulnerabilityAssessmentName,
        Output<String> workspaceName) {
        this.recurringScans = recurringScans;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sqlPoolName = Objects.requireNonNull(sqlPoolName, "expected parameter 'sqlPoolName' to be non-null");
        this.storageAccountAccessKey = storageAccountAccessKey;
        this.storageContainerPath = storageContainerPath;
        this.storageContainerSasKey = storageContainerSasKey;
        this.vulnerabilityAssessmentName = vulnerabilityAssessmentName;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private SqlPoolVulnerabilityAssessmentArgs() {
        this.recurringScans = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sqlPoolName = Codegen.empty();
        this.storageAccountAccessKey = Codegen.empty();
        this.storageContainerPath = Codegen.empty();
        this.storageContainerSasKey = Codegen.empty();
        this.vulnerabilityAssessmentName = Codegen.empty();
        this.workspaceName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlPoolVulnerabilityAssessmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans;
        private Output<String> resourceGroupName;
        private Output<String> sqlPoolName;
        private @Nullable Output<String> storageAccountAccessKey;
        private @Nullable Output<String> storageContainerPath;
        private @Nullable Output<String> storageContainerSasKey;
        private @Nullable Output<String> vulnerabilityAssessmentName;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlPoolVulnerabilityAssessmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recurringScans = defaults.recurringScans;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sqlPoolName = defaults.sqlPoolName;
    	      this.storageAccountAccessKey = defaults.storageAccountAccessKey;
    	      this.storageContainerPath = defaults.storageContainerPath;
    	      this.storageContainerSasKey = defaults.storageContainerSasKey;
    	      this.vulnerabilityAssessmentName = defaults.vulnerabilityAssessmentName;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder recurringScans(@Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans) {
            this.recurringScans = recurringScans;
            return this;
        }
        public Builder recurringScans(@Nullable VulnerabilityAssessmentRecurringScansPropertiesArgs recurringScans) {
            this.recurringScans = Codegen.ofNullable(recurringScans);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sqlPoolName(Output<String> sqlPoolName) {
            this.sqlPoolName = Objects.requireNonNull(sqlPoolName);
            return this;
        }
        public Builder sqlPoolName(String sqlPoolName) {
            this.sqlPoolName = Output.of(Objects.requireNonNull(sqlPoolName));
            return this;
        }
        public Builder storageAccountAccessKey(@Nullable Output<String> storageAccountAccessKey) {
            this.storageAccountAccessKey = storageAccountAccessKey;
            return this;
        }
        public Builder storageAccountAccessKey(@Nullable String storageAccountAccessKey) {
            this.storageAccountAccessKey = Codegen.ofNullable(storageAccountAccessKey);
            return this;
        }
        public Builder storageContainerPath(@Nullable Output<String> storageContainerPath) {
            this.storageContainerPath = storageContainerPath;
            return this;
        }
        public Builder storageContainerPath(@Nullable String storageContainerPath) {
            this.storageContainerPath = Codegen.ofNullable(storageContainerPath);
            return this;
        }
        public Builder storageContainerSasKey(@Nullable Output<String> storageContainerSasKey) {
            this.storageContainerSasKey = storageContainerSasKey;
            return this;
        }
        public Builder storageContainerSasKey(@Nullable String storageContainerSasKey) {
            this.storageContainerSasKey = Codegen.ofNullable(storageContainerSasKey);
            return this;
        }
        public Builder vulnerabilityAssessmentName(@Nullable Output<String> vulnerabilityAssessmentName) {
            this.vulnerabilityAssessmentName = vulnerabilityAssessmentName;
            return this;
        }
        public Builder vulnerabilityAssessmentName(@Nullable String vulnerabilityAssessmentName) {
            this.vulnerabilityAssessmentName = Codegen.ofNullable(vulnerabilityAssessmentName);
            return this;
        }
        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }
        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }        public SqlPoolVulnerabilityAssessmentArgs build() {
            return new SqlPoolVulnerabilityAssessmentArgs(recurringScans, resourceGroupName, sqlPoolName, storageAccountAccessKey, storageContainerPath, storageContainerSasKey, vulnerabilityAssessmentName, workspaceName);
        }
    }
}
