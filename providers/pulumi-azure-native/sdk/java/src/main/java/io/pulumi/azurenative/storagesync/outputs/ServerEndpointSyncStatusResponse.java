// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storagesync.outputs;

import io.pulumi.azurenative.storagesync.outputs.ServerEndpointSyncActivityStatusResponse;
import io.pulumi.azurenative.storagesync.outputs.ServerEndpointSyncSessionStatusResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class ServerEndpointSyncStatusResponse {
    private final String combinedHealth;
    private final ServerEndpointSyncActivityStatusResponse downloadActivity;
    private final String downloadHealth;
    private final ServerEndpointSyncSessionStatusResponse downloadStatus;
    private final String lastUpdatedTimestamp;
    private final String offlineDataTransferStatus;
    private final String syncActivity;
    private final Double totalPersistentFilesNotSyncingCount;
    private final ServerEndpointSyncActivityStatusResponse uploadActivity;
    private final String uploadHealth;
    private final ServerEndpointSyncSessionStatusResponse uploadStatus;

    @OutputCustomType.Constructor({"combinedHealth","downloadActivity","downloadHealth","downloadStatus","lastUpdatedTimestamp","offlineDataTransferStatus","syncActivity","totalPersistentFilesNotSyncingCount","uploadActivity","uploadHealth","uploadStatus"})
    private ServerEndpointSyncStatusResponse(
        String combinedHealth,
        ServerEndpointSyncActivityStatusResponse downloadActivity,
        String downloadHealth,
        ServerEndpointSyncSessionStatusResponse downloadStatus,
        String lastUpdatedTimestamp,
        String offlineDataTransferStatus,
        String syncActivity,
        Double totalPersistentFilesNotSyncingCount,
        ServerEndpointSyncActivityStatusResponse uploadActivity,
        String uploadHealth,
        ServerEndpointSyncSessionStatusResponse uploadStatus) {
        this.combinedHealth = Objects.requireNonNull(combinedHealth);
        this.downloadActivity = Objects.requireNonNull(downloadActivity);
        this.downloadHealth = Objects.requireNonNull(downloadHealth);
        this.downloadStatus = Objects.requireNonNull(downloadStatus);
        this.lastUpdatedTimestamp = Objects.requireNonNull(lastUpdatedTimestamp);
        this.offlineDataTransferStatus = Objects.requireNonNull(offlineDataTransferStatus);
        this.syncActivity = Objects.requireNonNull(syncActivity);
        this.totalPersistentFilesNotSyncingCount = Objects.requireNonNull(totalPersistentFilesNotSyncingCount);
        this.uploadActivity = Objects.requireNonNull(uploadActivity);
        this.uploadHealth = Objects.requireNonNull(uploadHealth);
        this.uploadStatus = Objects.requireNonNull(uploadStatus);
    }

    public String getCombinedHealth() {
        return this.combinedHealth;
    }
    public ServerEndpointSyncActivityStatusResponse getDownloadActivity() {
        return this.downloadActivity;
    }
    public String getDownloadHealth() {
        return this.downloadHealth;
    }
    public ServerEndpointSyncSessionStatusResponse getDownloadStatus() {
        return this.downloadStatus;
    }
    public String getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }
    public String getOfflineDataTransferStatus() {
        return this.offlineDataTransferStatus;
    }
    public String getSyncActivity() {
        return this.syncActivity;
    }
    public Double getTotalPersistentFilesNotSyncingCount() {
        return this.totalPersistentFilesNotSyncingCount;
    }
    public ServerEndpointSyncActivityStatusResponse getUploadActivity() {
        return this.uploadActivity;
    }
    public String getUploadHealth() {
        return this.uploadHealth;
    }
    public ServerEndpointSyncSessionStatusResponse getUploadStatus() {
        return this.uploadStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerEndpointSyncStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String combinedHealth;
        private ServerEndpointSyncActivityStatusResponse downloadActivity;
        private String downloadHealth;
        private ServerEndpointSyncSessionStatusResponse downloadStatus;
        private String lastUpdatedTimestamp;
        private String offlineDataTransferStatus;
        private String syncActivity;
        private Double totalPersistentFilesNotSyncingCount;
        private ServerEndpointSyncActivityStatusResponse uploadActivity;
        private String uploadHealth;
        private ServerEndpointSyncSessionStatusResponse uploadStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(ServerEndpointSyncStatusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.combinedHealth = defaults.combinedHealth;
    	      this.downloadActivity = defaults.downloadActivity;
    	      this.downloadHealth = defaults.downloadHealth;
    	      this.downloadStatus = defaults.downloadStatus;
    	      this.lastUpdatedTimestamp = defaults.lastUpdatedTimestamp;
    	      this.offlineDataTransferStatus = defaults.offlineDataTransferStatus;
    	      this.syncActivity = defaults.syncActivity;
    	      this.totalPersistentFilesNotSyncingCount = defaults.totalPersistentFilesNotSyncingCount;
    	      this.uploadActivity = defaults.uploadActivity;
    	      this.uploadHealth = defaults.uploadHealth;
    	      this.uploadStatus = defaults.uploadStatus;
        }

        public Builder setCombinedHealth(String combinedHealth) {
            this.combinedHealth = Objects.requireNonNull(combinedHealth);
            return this;
        }

        public Builder setDownloadActivity(ServerEndpointSyncActivityStatusResponse downloadActivity) {
            this.downloadActivity = Objects.requireNonNull(downloadActivity);
            return this;
        }

        public Builder setDownloadHealth(String downloadHealth) {
            this.downloadHealth = Objects.requireNonNull(downloadHealth);
            return this;
        }

        public Builder setDownloadStatus(ServerEndpointSyncSessionStatusResponse downloadStatus) {
            this.downloadStatus = Objects.requireNonNull(downloadStatus);
            return this;
        }

        public Builder setLastUpdatedTimestamp(String lastUpdatedTimestamp) {
            this.lastUpdatedTimestamp = Objects.requireNonNull(lastUpdatedTimestamp);
            return this;
        }

        public Builder setOfflineDataTransferStatus(String offlineDataTransferStatus) {
            this.offlineDataTransferStatus = Objects.requireNonNull(offlineDataTransferStatus);
            return this;
        }

        public Builder setSyncActivity(String syncActivity) {
            this.syncActivity = Objects.requireNonNull(syncActivity);
            return this;
        }

        public Builder setTotalPersistentFilesNotSyncingCount(Double totalPersistentFilesNotSyncingCount) {
            this.totalPersistentFilesNotSyncingCount = Objects.requireNonNull(totalPersistentFilesNotSyncingCount);
            return this;
        }

        public Builder setUploadActivity(ServerEndpointSyncActivityStatusResponse uploadActivity) {
            this.uploadActivity = Objects.requireNonNull(uploadActivity);
            return this;
        }

        public Builder setUploadHealth(String uploadHealth) {
            this.uploadHealth = Objects.requireNonNull(uploadHealth);
            return this;
        }

        public Builder setUploadStatus(ServerEndpointSyncSessionStatusResponse uploadStatus) {
            this.uploadStatus = Objects.requireNonNull(uploadStatus);
            return this;
        }

        public ServerEndpointSyncStatusResponse build() {
            return new ServerEndpointSyncStatusResponse(combinedHealth, downloadActivity, downloadHealth, downloadStatus, lastUpdatedTimestamp, offlineDataTransferStatus, syncActivity, totalPersistentFilesNotSyncingCount, uploadActivity, uploadHealth, uploadStatus);
        }
    }
}
