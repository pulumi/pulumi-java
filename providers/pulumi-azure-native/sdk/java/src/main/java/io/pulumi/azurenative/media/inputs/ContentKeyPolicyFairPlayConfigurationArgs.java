// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.enums.ContentKeyPolicyFairPlayRentalAndLeaseKeyType;
import io.pulumi.azurenative.media.inputs.ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies a configuration for FairPlay licenses.
 * 
 */
public final class ContentKeyPolicyFairPlayConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContentKeyPolicyFairPlayConfigurationArgs Empty = new ContentKeyPolicyFairPlayConfigurationArgs();

    /**
     * The key that must be used as FairPlay Application Secret key.
     * 
     */
    @InputImport(name="ask", required=true)
        private final Input<String> ask;

    public Input<String> getAsk() {
        return this.ask;
    }

    /**
     * The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
     * 
     */
    @InputImport(name="fairPlayPfx", required=true)
        private final Input<String> fairPlayPfx;

    public Input<String> getFairPlayPfx() {
        return this.fairPlayPfx;
    }

    /**
     * The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
     * 
     */
    @InputImport(name="fairPlayPfxPassword", required=true)
        private final Input<String> fairPlayPfxPassword;

    public Input<String> getFairPlayPfxPassword() {
        return this.fairPlayPfxPassword;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration'.
     * 
     */
    @InputImport(name="odataType", required=true)
        private final Input<String> odataType;

    public Input<String> getOdataType() {
        return this.odataType;
    }

    /**
     * Offline rental policy
     * 
     */
    @InputImport(name="offlineRentalConfiguration")
        private final @Nullable Input<ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs> offlineRentalConfiguration;

    public Input<ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs> getOfflineRentalConfiguration() {
        return this.offlineRentalConfiguration == null ? Input.empty() : this.offlineRentalConfiguration;
    }

    /**
     * The rental and lease key type.
     * 
     */
    @InputImport(name="rentalAndLeaseKeyType", required=true)
        private final Input<Either<String,ContentKeyPolicyFairPlayRentalAndLeaseKeyType>> rentalAndLeaseKeyType;

    public Input<Either<String,ContentKeyPolicyFairPlayRentalAndLeaseKeyType>> getRentalAndLeaseKeyType() {
        return this.rentalAndLeaseKeyType;
    }

    /**
     * The rental duration. Must be greater than or equal to 0.
     * 
     */
    @InputImport(name="rentalDuration", required=true)
        private final Input<Double> rentalDuration;

    public Input<Double> getRentalDuration() {
        return this.rentalDuration;
    }

    public ContentKeyPolicyFairPlayConfigurationArgs(
        Input<String> ask,
        Input<String> fairPlayPfx,
        Input<String> fairPlayPfxPassword,
        Input<String> odataType,
        @Nullable Input<ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs> offlineRentalConfiguration,
        Input<Either<String,ContentKeyPolicyFairPlayRentalAndLeaseKeyType>> rentalAndLeaseKeyType,
        Input<Double> rentalDuration) {
        this.ask = Objects.requireNonNull(ask, "expected parameter 'ask' to be non-null");
        this.fairPlayPfx = Objects.requireNonNull(fairPlayPfx, "expected parameter 'fairPlayPfx' to be non-null");
        this.fairPlayPfxPassword = Objects.requireNonNull(fairPlayPfxPassword, "expected parameter 'fairPlayPfxPassword' to be non-null");
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.offlineRentalConfiguration = offlineRentalConfiguration;
        this.rentalAndLeaseKeyType = Objects.requireNonNull(rentalAndLeaseKeyType, "expected parameter 'rentalAndLeaseKeyType' to be non-null");
        this.rentalDuration = Objects.requireNonNull(rentalDuration, "expected parameter 'rentalDuration' to be non-null");
    }

    private ContentKeyPolicyFairPlayConfigurationArgs() {
        this.ask = Input.empty();
        this.fairPlayPfx = Input.empty();
        this.fairPlayPfxPassword = Input.empty();
        this.odataType = Input.empty();
        this.offlineRentalConfiguration = Input.empty();
        this.rentalAndLeaseKeyType = Input.empty();
        this.rentalDuration = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContentKeyPolicyFairPlayConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> ask;
        private Input<String> fairPlayPfx;
        private Input<String> fairPlayPfxPassword;
        private Input<String> odataType;
        private @Nullable Input<ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs> offlineRentalConfiguration;
        private Input<Either<String,ContentKeyPolicyFairPlayRentalAndLeaseKeyType>> rentalAndLeaseKeyType;
        private Input<Double> rentalDuration;

        public Builder() {
    	      // Empty
        }

        public Builder(ContentKeyPolicyFairPlayConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ask = defaults.ask;
    	      this.fairPlayPfx = defaults.fairPlayPfx;
    	      this.fairPlayPfxPassword = defaults.fairPlayPfxPassword;
    	      this.odataType = defaults.odataType;
    	      this.offlineRentalConfiguration = defaults.offlineRentalConfiguration;
    	      this.rentalAndLeaseKeyType = defaults.rentalAndLeaseKeyType;
    	      this.rentalDuration = defaults.rentalDuration;
        }

        public Builder setAsk(Input<String> ask) {
            this.ask = Objects.requireNonNull(ask);
            return this;
        }

        public Builder setAsk(String ask) {
            this.ask = Input.of(Objects.requireNonNull(ask));
            return this;
        }

        public Builder setFairPlayPfx(Input<String> fairPlayPfx) {
            this.fairPlayPfx = Objects.requireNonNull(fairPlayPfx);
            return this;
        }

        public Builder setFairPlayPfx(String fairPlayPfx) {
            this.fairPlayPfx = Input.of(Objects.requireNonNull(fairPlayPfx));
            return this;
        }

        public Builder setFairPlayPfxPassword(Input<String> fairPlayPfxPassword) {
            this.fairPlayPfxPassword = Objects.requireNonNull(fairPlayPfxPassword);
            return this;
        }

        public Builder setFairPlayPfxPassword(String fairPlayPfxPassword) {
            this.fairPlayPfxPassword = Input.of(Objects.requireNonNull(fairPlayPfxPassword));
            return this;
        }

        public Builder setOdataType(Input<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }

        public Builder setOdataType(String odataType) {
            this.odataType = Input.of(Objects.requireNonNull(odataType));
            return this;
        }

        public Builder setOfflineRentalConfiguration(@Nullable Input<ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs> offlineRentalConfiguration) {
            this.offlineRentalConfiguration = offlineRentalConfiguration;
            return this;
        }

        public Builder setOfflineRentalConfiguration(@Nullable ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs offlineRentalConfiguration) {
            this.offlineRentalConfiguration = Input.ofNullable(offlineRentalConfiguration);
            return this;
        }

        public Builder setRentalAndLeaseKeyType(Input<Either<String,ContentKeyPolicyFairPlayRentalAndLeaseKeyType>> rentalAndLeaseKeyType) {
            this.rentalAndLeaseKeyType = Objects.requireNonNull(rentalAndLeaseKeyType);
            return this;
        }

        public Builder setRentalAndLeaseKeyType(Either<String,ContentKeyPolicyFairPlayRentalAndLeaseKeyType> rentalAndLeaseKeyType) {
            this.rentalAndLeaseKeyType = Input.of(Objects.requireNonNull(rentalAndLeaseKeyType));
            return this;
        }

        public Builder setRentalDuration(Input<Double> rentalDuration) {
            this.rentalDuration = Objects.requireNonNull(rentalDuration);
            return this;
        }

        public Builder setRentalDuration(Double rentalDuration) {
            this.rentalDuration = Input.of(Objects.requireNonNull(rentalDuration));
            return this;
        }
        public ContentKeyPolicyFairPlayConfigurationArgs build() {
            return new ContentKeyPolicyFairPlayConfigurationArgs(ask, fairPlayPfx, fairPlayPfxPassword, odataType, offlineRentalConfiguration, rentalAndLeaseKeyType, rentalDuration);
        }
    }
}
