// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cache.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
 * 
 */
public final class RedisCommonPropertiesRedisConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final RedisCommonPropertiesRedisConfigurationArgs Empty = new RedisCommonPropertiesRedisConfigurationArgs();

    /**
     * First storage account connection string
     * 
     */
    @InputImport(name="aofStorageConnectionString0")
      private final @Nullable Output<String> aofStorageConnectionString0;

    public Output<String> getAofStorageConnectionString0() {
        return this.aofStorageConnectionString0 == null ? Output.empty() : this.aofStorageConnectionString0;
    }

    /**
     * Second storage account connection string
     * 
     */
    @InputImport(name="aofStorageConnectionString1")
      private final @Nullable Output<String> aofStorageConnectionString1;

    public Output<String> getAofStorageConnectionString1() {
        return this.aofStorageConnectionString1 == null ? Output.empty() : this.aofStorageConnectionString1;
    }

    /**
     * Value in megabytes reserved for fragmentation per shard
     * 
     */
    @InputImport(name="maxfragmentationmemoryReserved")
      private final @Nullable Output<String> maxfragmentationmemoryReserved;

    public Output<String> getMaxfragmentationmemoryReserved() {
        return this.maxfragmentationmemoryReserved == null ? Output.empty() : this.maxfragmentationmemoryReserved;
    }

    /**
     * Value in megabytes reserved for non-cache usage per shard e.g. failover.
     * 
     */
    @InputImport(name="maxmemoryDelta")
      private final @Nullable Output<String> maxmemoryDelta;

    public Output<String> getMaxmemoryDelta() {
        return this.maxmemoryDelta == null ? Output.empty() : this.maxmemoryDelta;
    }

    /**
     * The eviction strategy used when your data won't fit within its memory limit.
     * 
     */
    @InputImport(name="maxmemoryPolicy")
      private final @Nullable Output<String> maxmemoryPolicy;

    public Output<String> getMaxmemoryPolicy() {
        return this.maxmemoryPolicy == null ? Output.empty() : this.maxmemoryPolicy;
    }

    /**
     * Value in megabytes reserved for non-cache usage per shard e.g. failover.
     * 
     */
    @InputImport(name="maxmemoryReserved")
      private final @Nullable Output<String> maxmemoryReserved;

    public Output<String> getMaxmemoryReserved() {
        return this.maxmemoryReserved == null ? Output.empty() : this.maxmemoryReserved;
    }

    /**
     * Specifies whether the rdb backup is enabled
     * 
     */
    @InputImport(name="rdbBackupEnabled")
      private final @Nullable Output<String> rdbBackupEnabled;

    public Output<String> getRdbBackupEnabled() {
        return this.rdbBackupEnabled == null ? Output.empty() : this.rdbBackupEnabled;
    }

    /**
     * Specifies the frequency for creating rdb backup
     * 
     */
    @InputImport(name="rdbBackupFrequency")
      private final @Nullable Output<String> rdbBackupFrequency;

    public Output<String> getRdbBackupFrequency() {
        return this.rdbBackupFrequency == null ? Output.empty() : this.rdbBackupFrequency;
    }

    /**
     * Specifies the maximum number of snapshots for rdb backup
     * 
     */
    @InputImport(name="rdbBackupMaxSnapshotCount")
      private final @Nullable Output<String> rdbBackupMaxSnapshotCount;

    public Output<String> getRdbBackupMaxSnapshotCount() {
        return this.rdbBackupMaxSnapshotCount == null ? Output.empty() : this.rdbBackupMaxSnapshotCount;
    }

    /**
     * The storage account connection string for storing rdb file
     * 
     */
    @InputImport(name="rdbStorageConnectionString")
      private final @Nullable Output<String> rdbStorageConnectionString;

    public Output<String> getRdbStorageConnectionString() {
        return this.rdbStorageConnectionString == null ? Output.empty() : this.rdbStorageConnectionString;
    }

    public RedisCommonPropertiesRedisConfigurationArgs(
        @Nullable Output<String> aofStorageConnectionString0,
        @Nullable Output<String> aofStorageConnectionString1,
        @Nullable Output<String> maxfragmentationmemoryReserved,
        @Nullable Output<String> maxmemoryDelta,
        @Nullable Output<String> maxmemoryPolicy,
        @Nullable Output<String> maxmemoryReserved,
        @Nullable Output<String> rdbBackupEnabled,
        @Nullable Output<String> rdbBackupFrequency,
        @Nullable Output<String> rdbBackupMaxSnapshotCount,
        @Nullable Output<String> rdbStorageConnectionString) {
        this.aofStorageConnectionString0 = aofStorageConnectionString0;
        this.aofStorageConnectionString1 = aofStorageConnectionString1;
        this.maxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
        this.maxmemoryDelta = maxmemoryDelta;
        this.maxmemoryPolicy = maxmemoryPolicy;
        this.maxmemoryReserved = maxmemoryReserved;
        this.rdbBackupEnabled = rdbBackupEnabled;
        this.rdbBackupFrequency = rdbBackupFrequency;
        this.rdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
        this.rdbStorageConnectionString = rdbStorageConnectionString;
    }

    private RedisCommonPropertiesRedisConfigurationArgs() {
        this.aofStorageConnectionString0 = Output.empty();
        this.aofStorageConnectionString1 = Output.empty();
        this.maxfragmentationmemoryReserved = Output.empty();
        this.maxmemoryDelta = Output.empty();
        this.maxmemoryPolicy = Output.empty();
        this.maxmemoryReserved = Output.empty();
        this.rdbBackupEnabled = Output.empty();
        this.rdbBackupFrequency = Output.empty();
        this.rdbBackupMaxSnapshotCount = Output.empty();
        this.rdbStorageConnectionString = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RedisCommonPropertiesRedisConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> aofStorageConnectionString0;
        private @Nullable Output<String> aofStorageConnectionString1;
        private @Nullable Output<String> maxfragmentationmemoryReserved;
        private @Nullable Output<String> maxmemoryDelta;
        private @Nullable Output<String> maxmemoryPolicy;
        private @Nullable Output<String> maxmemoryReserved;
        private @Nullable Output<String> rdbBackupEnabled;
        private @Nullable Output<String> rdbBackupFrequency;
        private @Nullable Output<String> rdbBackupMaxSnapshotCount;
        private @Nullable Output<String> rdbStorageConnectionString;

        public Builder() {
    	      // Empty
        }

        public Builder(RedisCommonPropertiesRedisConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aofStorageConnectionString0 = defaults.aofStorageConnectionString0;
    	      this.aofStorageConnectionString1 = defaults.aofStorageConnectionString1;
    	      this.maxfragmentationmemoryReserved = defaults.maxfragmentationmemoryReserved;
    	      this.maxmemoryDelta = defaults.maxmemoryDelta;
    	      this.maxmemoryPolicy = defaults.maxmemoryPolicy;
    	      this.maxmemoryReserved = defaults.maxmemoryReserved;
    	      this.rdbBackupEnabled = defaults.rdbBackupEnabled;
    	      this.rdbBackupFrequency = defaults.rdbBackupFrequency;
    	      this.rdbBackupMaxSnapshotCount = defaults.rdbBackupMaxSnapshotCount;
    	      this.rdbStorageConnectionString = defaults.rdbStorageConnectionString;
        }

        public Builder aofStorageConnectionString0(@Nullable Output<String> aofStorageConnectionString0) {
            this.aofStorageConnectionString0 = aofStorageConnectionString0;
            return this;
        }

        public Builder aofStorageConnectionString0(@Nullable String aofStorageConnectionString0) {
            this.aofStorageConnectionString0 = Output.ofNullable(aofStorageConnectionString0);
            return this;
        }

        public Builder aofStorageConnectionString1(@Nullable Output<String> aofStorageConnectionString1) {
            this.aofStorageConnectionString1 = aofStorageConnectionString1;
            return this;
        }

        public Builder aofStorageConnectionString1(@Nullable String aofStorageConnectionString1) {
            this.aofStorageConnectionString1 = Output.ofNullable(aofStorageConnectionString1);
            return this;
        }

        public Builder maxfragmentationmemoryReserved(@Nullable Output<String> maxfragmentationmemoryReserved) {
            this.maxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
            return this;
        }

        public Builder maxfragmentationmemoryReserved(@Nullable String maxfragmentationmemoryReserved) {
            this.maxfragmentationmemoryReserved = Output.ofNullable(maxfragmentationmemoryReserved);
            return this;
        }

        public Builder maxmemoryDelta(@Nullable Output<String> maxmemoryDelta) {
            this.maxmemoryDelta = maxmemoryDelta;
            return this;
        }

        public Builder maxmemoryDelta(@Nullable String maxmemoryDelta) {
            this.maxmemoryDelta = Output.ofNullable(maxmemoryDelta);
            return this;
        }

        public Builder maxmemoryPolicy(@Nullable Output<String> maxmemoryPolicy) {
            this.maxmemoryPolicy = maxmemoryPolicy;
            return this;
        }

        public Builder maxmemoryPolicy(@Nullable String maxmemoryPolicy) {
            this.maxmemoryPolicy = Output.ofNullable(maxmemoryPolicy);
            return this;
        }

        public Builder maxmemoryReserved(@Nullable Output<String> maxmemoryReserved) {
            this.maxmemoryReserved = maxmemoryReserved;
            return this;
        }

        public Builder maxmemoryReserved(@Nullable String maxmemoryReserved) {
            this.maxmemoryReserved = Output.ofNullable(maxmemoryReserved);
            return this;
        }

        public Builder rdbBackupEnabled(@Nullable Output<String> rdbBackupEnabled) {
            this.rdbBackupEnabled = rdbBackupEnabled;
            return this;
        }

        public Builder rdbBackupEnabled(@Nullable String rdbBackupEnabled) {
            this.rdbBackupEnabled = Output.ofNullable(rdbBackupEnabled);
            return this;
        }

        public Builder rdbBackupFrequency(@Nullable Output<String> rdbBackupFrequency) {
            this.rdbBackupFrequency = rdbBackupFrequency;
            return this;
        }

        public Builder rdbBackupFrequency(@Nullable String rdbBackupFrequency) {
            this.rdbBackupFrequency = Output.ofNullable(rdbBackupFrequency);
            return this;
        }

        public Builder rdbBackupMaxSnapshotCount(@Nullable Output<String> rdbBackupMaxSnapshotCount) {
            this.rdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
            return this;
        }

        public Builder rdbBackupMaxSnapshotCount(@Nullable String rdbBackupMaxSnapshotCount) {
            this.rdbBackupMaxSnapshotCount = Output.ofNullable(rdbBackupMaxSnapshotCount);
            return this;
        }

        public Builder rdbStorageConnectionString(@Nullable Output<String> rdbStorageConnectionString) {
            this.rdbStorageConnectionString = rdbStorageConnectionString;
            return this;
        }

        public Builder rdbStorageConnectionString(@Nullable String rdbStorageConnectionString) {
            this.rdbStorageConnectionString = Output.ofNullable(rdbStorageConnectionString);
            return this;
        }
        public RedisCommonPropertiesRedisConfigurationArgs build() {
            return new RedisCommonPropertiesRedisConfigurationArgs(aofStorageConnectionString0, aofStorageConnectionString1, maxfragmentationmemoryReserved, maxmemoryDelta, maxmemoryPolicy, maxmemoryReserved, rdbBackupEnabled, rdbBackupFrequency, rdbBackupMaxSnapshotCount, rdbStorageConnectionString);
        }
    }
}
