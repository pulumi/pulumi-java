// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.SubResourceResponse;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Load balancer backend addresses.
 * 
 */
public final class LoadBalancerBackendAddressResponse extends io.pulumi.resources.InvokeArgs {

    public static final LoadBalancerBackendAddressResponse Empty = new LoadBalancerBackendAddressResponse();

    /**
     * IP Address belonging to the referenced virtual network.
     * 
     */
    @Import(name="ipAddress")
      private final @Nullable String ipAddress;

    public Optional<String> ipAddress() {
        return this.ipAddress == null ? Optional.empty() : Optional.ofNullable(this.ipAddress);
    }

    /**
     * Reference to the frontend ip address configuration defined in regional loadbalancer.
     * 
     */
    @Import(name="loadBalancerFrontendIPConfiguration")
      private final @Nullable SubResourceResponse loadBalancerFrontendIPConfiguration;

    public Optional<SubResourceResponse> loadBalancerFrontendIPConfiguration() {
        return this.loadBalancerFrontendIPConfiguration == null ? Optional.empty() : Optional.ofNullable(this.loadBalancerFrontendIPConfiguration);
    }

    /**
     * Name of the backend address.
     * 
     */
    @Import(name="name")
      private final @Nullable String name;

    public Optional<String> name() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * Reference to IP address defined in network interfaces.
     * 
     */
    @Import(name="networkInterfaceIPConfiguration", required=true)
      private final SubResourceResponse networkInterfaceIPConfiguration;

    public SubResourceResponse networkInterfaceIPConfiguration() {
        return this.networkInterfaceIPConfiguration;
    }

    /**
     * Reference to an existing subnet.
     * 
     */
    @Import(name="subnet")
      private final @Nullable SubResourceResponse subnet;

    public Optional<SubResourceResponse> subnet() {
        return this.subnet == null ? Optional.empty() : Optional.ofNullable(this.subnet);
    }

    /**
     * Reference to an existing virtual network.
     * 
     */
    @Import(name="virtualNetwork")
      private final @Nullable SubResourceResponse virtualNetwork;

    public Optional<SubResourceResponse> virtualNetwork() {
        return this.virtualNetwork == null ? Optional.empty() : Optional.ofNullable(this.virtualNetwork);
    }

    public LoadBalancerBackendAddressResponse(
        @Nullable String ipAddress,
        @Nullable SubResourceResponse loadBalancerFrontendIPConfiguration,
        @Nullable String name,
        SubResourceResponse networkInterfaceIPConfiguration,
        @Nullable SubResourceResponse subnet,
        @Nullable SubResourceResponse virtualNetwork) {
        this.ipAddress = ipAddress;
        this.loadBalancerFrontendIPConfiguration = loadBalancerFrontendIPConfiguration;
        this.name = name;
        this.networkInterfaceIPConfiguration = Objects.requireNonNull(networkInterfaceIPConfiguration, "expected parameter 'networkInterfaceIPConfiguration' to be non-null");
        this.subnet = subnet;
        this.virtualNetwork = virtualNetwork;
    }

    private LoadBalancerBackendAddressResponse() {
        this.ipAddress = null;
        this.loadBalancerFrontendIPConfiguration = null;
        this.name = null;
        this.networkInterfaceIPConfiguration = null;
        this.subnet = null;
        this.virtualNetwork = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerBackendAddressResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String ipAddress;
        private @Nullable SubResourceResponse loadBalancerFrontendIPConfiguration;
        private @Nullable String name;
        private SubResourceResponse networkInterfaceIPConfiguration;
        private @Nullable SubResourceResponse subnet;
        private @Nullable SubResourceResponse virtualNetwork;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancerBackendAddressResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipAddress = defaults.ipAddress;
    	      this.loadBalancerFrontendIPConfiguration = defaults.loadBalancerFrontendIPConfiguration;
    	      this.name = defaults.name;
    	      this.networkInterfaceIPConfiguration = defaults.networkInterfaceIPConfiguration;
    	      this.subnet = defaults.subnet;
    	      this.virtualNetwork = defaults.virtualNetwork;
        }

        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        public Builder loadBalancerFrontendIPConfiguration(@Nullable SubResourceResponse loadBalancerFrontendIPConfiguration) {
            this.loadBalancerFrontendIPConfiguration = loadBalancerFrontendIPConfiguration;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder networkInterfaceIPConfiguration(SubResourceResponse networkInterfaceIPConfiguration) {
            this.networkInterfaceIPConfiguration = Objects.requireNonNull(networkInterfaceIPConfiguration);
            return this;
        }
        public Builder subnet(@Nullable SubResourceResponse subnet) {
            this.subnet = subnet;
            return this;
        }
        public Builder virtualNetwork(@Nullable SubResourceResponse virtualNetwork) {
            this.virtualNetwork = virtualNetwork;
            return this;
        }        public LoadBalancerBackendAddressResponse build() {
            return new LoadBalancerBackendAddressResponse(ipAddress, loadBalancerFrontendIPConfiguration, name, networkInterfaceIPConfiguration, subnet, virtualNetwork);
        }
    }
}
