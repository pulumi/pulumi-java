// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RollingUpgradePolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final RollingUpgradePolicyArgs Empty = new RollingUpgradePolicyArgs();

    @InputImport(name="enableCrossZoneUpgrade")
    private final @Nullable Input<Boolean> enableCrossZoneUpgrade;

    public Input<Boolean> getEnableCrossZoneUpgrade() {
        return this.enableCrossZoneUpgrade == null ? Input.empty() : this.enableCrossZoneUpgrade;
    }

    @InputImport(name="maxBatchInstancePercent")
    private final @Nullable Input<Integer> maxBatchInstancePercent;

    public Input<Integer> getMaxBatchInstancePercent() {
        return this.maxBatchInstancePercent == null ? Input.empty() : this.maxBatchInstancePercent;
    }

    @InputImport(name="maxUnhealthyInstancePercent")
    private final @Nullable Input<Integer> maxUnhealthyInstancePercent;

    public Input<Integer> getMaxUnhealthyInstancePercent() {
        return this.maxUnhealthyInstancePercent == null ? Input.empty() : this.maxUnhealthyInstancePercent;
    }

    @InputImport(name="maxUnhealthyUpgradedInstancePercent")
    private final @Nullable Input<Integer> maxUnhealthyUpgradedInstancePercent;

    public Input<Integer> getMaxUnhealthyUpgradedInstancePercent() {
        return this.maxUnhealthyUpgradedInstancePercent == null ? Input.empty() : this.maxUnhealthyUpgradedInstancePercent;
    }

    @InputImport(name="pauseTimeBetweenBatches")
    private final @Nullable Input<String> pauseTimeBetweenBatches;

    public Input<String> getPauseTimeBetweenBatches() {
        return this.pauseTimeBetweenBatches == null ? Input.empty() : this.pauseTimeBetweenBatches;
    }

    @InputImport(name="prioritizeUnhealthyInstances")
    private final @Nullable Input<Boolean> prioritizeUnhealthyInstances;

    public Input<Boolean> getPrioritizeUnhealthyInstances() {
        return this.prioritizeUnhealthyInstances == null ? Input.empty() : this.prioritizeUnhealthyInstances;
    }

    public RollingUpgradePolicyArgs(
        @Nullable Input<Boolean> enableCrossZoneUpgrade,
        @Nullable Input<Integer> maxBatchInstancePercent,
        @Nullable Input<Integer> maxUnhealthyInstancePercent,
        @Nullable Input<Integer> maxUnhealthyUpgradedInstancePercent,
        @Nullable Input<String> pauseTimeBetweenBatches,
        @Nullable Input<Boolean> prioritizeUnhealthyInstances) {
        this.enableCrossZoneUpgrade = enableCrossZoneUpgrade;
        this.maxBatchInstancePercent = maxBatchInstancePercent;
        this.maxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
        this.maxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
        this.pauseTimeBetweenBatches = pauseTimeBetweenBatches;
        this.prioritizeUnhealthyInstances = prioritizeUnhealthyInstances;
    }

    private RollingUpgradePolicyArgs() {
        this.enableCrossZoneUpgrade = Input.empty();
        this.maxBatchInstancePercent = Input.empty();
        this.maxUnhealthyInstancePercent = Input.empty();
        this.maxUnhealthyUpgradedInstancePercent = Input.empty();
        this.pauseTimeBetweenBatches = Input.empty();
        this.prioritizeUnhealthyInstances = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RollingUpgradePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> enableCrossZoneUpgrade;
        private @Nullable Input<Integer> maxBatchInstancePercent;
        private @Nullable Input<Integer> maxUnhealthyInstancePercent;
        private @Nullable Input<Integer> maxUnhealthyUpgradedInstancePercent;
        private @Nullable Input<String> pauseTimeBetweenBatches;
        private @Nullable Input<Boolean> prioritizeUnhealthyInstances;

        public Builder() {
    	      // Empty
        }

        public Builder(RollingUpgradePolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableCrossZoneUpgrade = defaults.enableCrossZoneUpgrade;
    	      this.maxBatchInstancePercent = defaults.maxBatchInstancePercent;
    	      this.maxUnhealthyInstancePercent = defaults.maxUnhealthyInstancePercent;
    	      this.maxUnhealthyUpgradedInstancePercent = defaults.maxUnhealthyUpgradedInstancePercent;
    	      this.pauseTimeBetweenBatches = defaults.pauseTimeBetweenBatches;
    	      this.prioritizeUnhealthyInstances = defaults.prioritizeUnhealthyInstances;
        }

        public Builder setEnableCrossZoneUpgrade(@Nullable Input<Boolean> enableCrossZoneUpgrade) {
            this.enableCrossZoneUpgrade = enableCrossZoneUpgrade;
            return this;
        }

        public Builder setEnableCrossZoneUpgrade(@Nullable Boolean enableCrossZoneUpgrade) {
            this.enableCrossZoneUpgrade = Input.ofNullable(enableCrossZoneUpgrade);
            return this;
        }

        public Builder setMaxBatchInstancePercent(@Nullable Input<Integer> maxBatchInstancePercent) {
            this.maxBatchInstancePercent = maxBatchInstancePercent;
            return this;
        }

        public Builder setMaxBatchInstancePercent(@Nullable Integer maxBatchInstancePercent) {
            this.maxBatchInstancePercent = Input.ofNullable(maxBatchInstancePercent);
            return this;
        }

        public Builder setMaxUnhealthyInstancePercent(@Nullable Input<Integer> maxUnhealthyInstancePercent) {
            this.maxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
            return this;
        }

        public Builder setMaxUnhealthyInstancePercent(@Nullable Integer maxUnhealthyInstancePercent) {
            this.maxUnhealthyInstancePercent = Input.ofNullable(maxUnhealthyInstancePercent);
            return this;
        }

        public Builder setMaxUnhealthyUpgradedInstancePercent(@Nullable Input<Integer> maxUnhealthyUpgradedInstancePercent) {
            this.maxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
            return this;
        }

        public Builder setMaxUnhealthyUpgradedInstancePercent(@Nullable Integer maxUnhealthyUpgradedInstancePercent) {
            this.maxUnhealthyUpgradedInstancePercent = Input.ofNullable(maxUnhealthyUpgradedInstancePercent);
            return this;
        }

        public Builder setPauseTimeBetweenBatches(@Nullable Input<String> pauseTimeBetweenBatches) {
            this.pauseTimeBetweenBatches = pauseTimeBetweenBatches;
            return this;
        }

        public Builder setPauseTimeBetweenBatches(@Nullable String pauseTimeBetweenBatches) {
            this.pauseTimeBetweenBatches = Input.ofNullable(pauseTimeBetweenBatches);
            return this;
        }

        public Builder setPrioritizeUnhealthyInstances(@Nullable Input<Boolean> prioritizeUnhealthyInstances) {
            this.prioritizeUnhealthyInstances = prioritizeUnhealthyInstances;
            return this;
        }

        public Builder setPrioritizeUnhealthyInstances(@Nullable Boolean prioritizeUnhealthyInstances) {
            this.prioritizeUnhealthyInstances = Input.ofNullable(prioritizeUnhealthyInstances);
            return this;
        }

        public RollingUpgradePolicyArgs build() {
            return new RollingUpgradePolicyArgs(enableCrossZoneUpgrade, maxBatchInstancePercent, maxUnhealthyInstancePercent, maxUnhealthyUpgradedInstancePercent, pauseTimeBetweenBatches, prioritizeUnhealthyInstances);
        }
    }
}
