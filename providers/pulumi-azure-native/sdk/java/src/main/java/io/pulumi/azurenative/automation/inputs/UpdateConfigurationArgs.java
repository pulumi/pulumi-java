// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.automation.inputs;

import io.pulumi.azurenative.automation.enums.OperatingSystemType;
import io.pulumi.azurenative.automation.inputs.LinuxPropertiesArgs;
import io.pulumi.azurenative.automation.inputs.TargetPropertiesArgs;
import io.pulumi.azurenative.automation.inputs.WindowsPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Update specific properties of the software update configuration.
 * 
 */
public final class UpdateConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final UpdateConfigurationArgs Empty = new UpdateConfigurationArgs();

    /**
     * List of azure resource Ids for azure virtual machines targeted by the software update configuration.
     * 
     */
    @InputImport(name="azureVirtualMachines")
      private final @Nullable Output<List<String>> azureVirtualMachines;

    public Output<List<String>> getAzureVirtualMachines() {
        return this.azureVirtualMachines == null ? Output.empty() : this.azureVirtualMachines;
    }

    /**
     * Maximum time allowed for the software update configuration run. Duration needs to be specified using the format PT[n]H[n]M[n]S as per ISO8601
     * 
     */
    @InputImport(name="duration")
      private final @Nullable Output<String> duration;

    public Output<String> getDuration() {
        return this.duration == null ? Output.empty() : this.duration;
    }

    /**
     * Linux specific update configuration.
     * 
     */
    @InputImport(name="linux")
      private final @Nullable Output<LinuxPropertiesArgs> linux;

    public Output<LinuxPropertiesArgs> getLinux() {
        return this.linux == null ? Output.empty() : this.linux;
    }

    /**
     * List of names of non-azure machines targeted by the software update configuration.
     * 
     */
    @InputImport(name="nonAzureComputerNames")
      private final @Nullable Output<List<String>> nonAzureComputerNames;

    public Output<List<String>> getNonAzureComputerNames() {
        return this.nonAzureComputerNames == null ? Output.empty() : this.nonAzureComputerNames;
    }

    /**
     * operating system of target machines
     * 
     */
    @InputImport(name="operatingSystem", required=true)
      private final Output<OperatingSystemType> operatingSystem;

    public Output<OperatingSystemType> getOperatingSystem() {
        return this.operatingSystem;
    }

    /**
     * Group targets for the software update configuration.
     * 
     */
    @InputImport(name="targets")
      private final @Nullable Output<TargetPropertiesArgs> targets;

    public Output<TargetPropertiesArgs> getTargets() {
        return this.targets == null ? Output.empty() : this.targets;
    }

    /**
     * Windows specific update configuration.
     * 
     */
    @InputImport(name="windows")
      private final @Nullable Output<WindowsPropertiesArgs> windows;

    public Output<WindowsPropertiesArgs> getWindows() {
        return this.windows == null ? Output.empty() : this.windows;
    }

    public UpdateConfigurationArgs(
        @Nullable Output<List<String>> azureVirtualMachines,
        @Nullable Output<String> duration,
        @Nullable Output<LinuxPropertiesArgs> linux,
        @Nullable Output<List<String>> nonAzureComputerNames,
        Output<OperatingSystemType> operatingSystem,
        @Nullable Output<TargetPropertiesArgs> targets,
        @Nullable Output<WindowsPropertiesArgs> windows) {
        this.azureVirtualMachines = azureVirtualMachines;
        this.duration = duration;
        this.linux = linux;
        this.nonAzureComputerNames = nonAzureComputerNames;
        this.operatingSystem = Objects.requireNonNull(operatingSystem, "expected parameter 'operatingSystem' to be non-null");
        this.targets = targets;
        this.windows = windows;
    }

    private UpdateConfigurationArgs() {
        this.azureVirtualMachines = Output.empty();
        this.duration = Output.empty();
        this.linux = Output.empty();
        this.nonAzureComputerNames = Output.empty();
        this.operatingSystem = Output.empty();
        this.targets = Output.empty();
        this.windows = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UpdateConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> azureVirtualMachines;
        private @Nullable Output<String> duration;
        private @Nullable Output<LinuxPropertiesArgs> linux;
        private @Nullable Output<List<String>> nonAzureComputerNames;
        private Output<OperatingSystemType> operatingSystem;
        private @Nullable Output<TargetPropertiesArgs> targets;
        private @Nullable Output<WindowsPropertiesArgs> windows;

        public Builder() {
    	      // Empty
        }

        public Builder(UpdateConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureVirtualMachines = defaults.azureVirtualMachines;
    	      this.duration = defaults.duration;
    	      this.linux = defaults.linux;
    	      this.nonAzureComputerNames = defaults.nonAzureComputerNames;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.targets = defaults.targets;
    	      this.windows = defaults.windows;
        }

        public Builder azureVirtualMachines(@Nullable Output<List<String>> azureVirtualMachines) {
            this.azureVirtualMachines = azureVirtualMachines;
            return this;
        }

        public Builder azureVirtualMachines(@Nullable List<String> azureVirtualMachines) {
            this.azureVirtualMachines = Output.ofNullable(azureVirtualMachines);
            return this;
        }

        public Builder duration(@Nullable Output<String> duration) {
            this.duration = duration;
            return this;
        }

        public Builder duration(@Nullable String duration) {
            this.duration = Output.ofNullable(duration);
            return this;
        }

        public Builder linux(@Nullable Output<LinuxPropertiesArgs> linux) {
            this.linux = linux;
            return this;
        }

        public Builder linux(@Nullable LinuxPropertiesArgs linux) {
            this.linux = Output.ofNullable(linux);
            return this;
        }

        public Builder nonAzureComputerNames(@Nullable Output<List<String>> nonAzureComputerNames) {
            this.nonAzureComputerNames = nonAzureComputerNames;
            return this;
        }

        public Builder nonAzureComputerNames(@Nullable List<String> nonAzureComputerNames) {
            this.nonAzureComputerNames = Output.ofNullable(nonAzureComputerNames);
            return this;
        }

        public Builder operatingSystem(Output<OperatingSystemType> operatingSystem) {
            this.operatingSystem = Objects.requireNonNull(operatingSystem);
            return this;
        }

        public Builder operatingSystem(OperatingSystemType operatingSystem) {
            this.operatingSystem = Output.of(Objects.requireNonNull(operatingSystem));
            return this;
        }

        public Builder targets(@Nullable Output<TargetPropertiesArgs> targets) {
            this.targets = targets;
            return this;
        }

        public Builder targets(@Nullable TargetPropertiesArgs targets) {
            this.targets = Output.ofNullable(targets);
            return this;
        }

        public Builder windows(@Nullable Output<WindowsPropertiesArgs> windows) {
            this.windows = windows;
            return this;
        }

        public Builder windows(@Nullable WindowsPropertiesArgs windows) {
            this.windows = Output.ofNullable(windows);
            return this;
        }
        public UpdateConfigurationArgs build() {
            return new UpdateConfigurationArgs(azureVirtualMachines, duration, linux, nonAzureComputerNames, operatingSystem, targets, windows);
        }
    }
}
