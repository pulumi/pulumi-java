// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.inputs;

import io.pulumi.azurenative.storage.enums.KeySource;
import io.pulumi.azurenative.storage.inputs.EncryptionIdentityArgs;
import io.pulumi.azurenative.storage.inputs.EncryptionServicesArgs;
import io.pulumi.azurenative.storage.inputs.KeyVaultPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EncryptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final EncryptionArgs Empty = new EncryptionArgs();

    @InputImport(name="encryptionIdentity")
    private final @Nullable Input<EncryptionIdentityArgs> encryptionIdentity;

    public Input<EncryptionIdentityArgs> getEncryptionIdentity() {
        return this.encryptionIdentity == null ? Input.empty() : this.encryptionIdentity;
    }

    @InputImport(name="keySource", required=true)
    private final Input<Either<String,KeySource>> keySource;

    public Input<Either<String,KeySource>> getKeySource() {
        return this.keySource;
    }

    @InputImport(name="keyVaultProperties")
    private final @Nullable Input<KeyVaultPropertiesArgs> keyVaultProperties;

    public Input<KeyVaultPropertiesArgs> getKeyVaultProperties() {
        return this.keyVaultProperties == null ? Input.empty() : this.keyVaultProperties;
    }

    @InputImport(name="requireInfrastructureEncryption")
    private final @Nullable Input<Boolean> requireInfrastructureEncryption;

    public Input<Boolean> getRequireInfrastructureEncryption() {
        return this.requireInfrastructureEncryption == null ? Input.empty() : this.requireInfrastructureEncryption;
    }

    @InputImport(name="services")
    private final @Nullable Input<EncryptionServicesArgs> services;

    public Input<EncryptionServicesArgs> getServices() {
        return this.services == null ? Input.empty() : this.services;
    }

    public EncryptionArgs(
        @Nullable Input<EncryptionIdentityArgs> encryptionIdentity,
        Input<Either<String,KeySource>> keySource,
        @Nullable Input<KeyVaultPropertiesArgs> keyVaultProperties,
        @Nullable Input<Boolean> requireInfrastructureEncryption,
        @Nullable Input<EncryptionServicesArgs> services) {
        this.encryptionIdentity = encryptionIdentity;
        this.keySource = keySource == null ? Input.ofLeft("Microsoft.Storage") : Objects.requireNonNull(keySource, "expected parameter 'keySource' to be non-null");
        this.keyVaultProperties = keyVaultProperties;
        this.requireInfrastructureEncryption = requireInfrastructureEncryption;
        this.services = services;
    }

    private EncryptionArgs() {
        this.encryptionIdentity = Input.empty();
        this.keySource = Input.empty();
        this.keyVaultProperties = Input.empty();
        this.requireInfrastructureEncryption = Input.empty();
        this.services = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<EncryptionIdentityArgs> encryptionIdentity;
        private Input<Either<String,KeySource>> keySource;
        private @Nullable Input<KeyVaultPropertiesArgs> keyVaultProperties;
        private @Nullable Input<Boolean> requireInfrastructureEncryption;
        private @Nullable Input<EncryptionServicesArgs> services;

        public Builder() {
    	      // Empty
        }

        public Builder(EncryptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encryptionIdentity = defaults.encryptionIdentity;
    	      this.keySource = defaults.keySource;
    	      this.keyVaultProperties = defaults.keyVaultProperties;
    	      this.requireInfrastructureEncryption = defaults.requireInfrastructureEncryption;
    	      this.services = defaults.services;
        }

        public Builder setEncryptionIdentity(@Nullable Input<EncryptionIdentityArgs> encryptionIdentity) {
            this.encryptionIdentity = encryptionIdentity;
            return this;
        }

        public Builder setEncryptionIdentity(@Nullable EncryptionIdentityArgs encryptionIdentity) {
            this.encryptionIdentity = Input.ofNullable(encryptionIdentity);
            return this;
        }

        public Builder setKeySource(Input<Either<String,KeySource>> keySource) {
            this.keySource = Objects.requireNonNull(keySource);
            return this;
        }

        public Builder setKeySource(Either<String,KeySource> keySource) {
            this.keySource = Input.of(Objects.requireNonNull(keySource));
            return this;
        }

        public Builder setKeyVaultProperties(@Nullable Input<KeyVaultPropertiesArgs> keyVaultProperties) {
            this.keyVaultProperties = keyVaultProperties;
            return this;
        }

        public Builder setKeyVaultProperties(@Nullable KeyVaultPropertiesArgs keyVaultProperties) {
            this.keyVaultProperties = Input.ofNullable(keyVaultProperties);
            return this;
        }

        public Builder setRequireInfrastructureEncryption(@Nullable Input<Boolean> requireInfrastructureEncryption) {
            this.requireInfrastructureEncryption = requireInfrastructureEncryption;
            return this;
        }

        public Builder setRequireInfrastructureEncryption(@Nullable Boolean requireInfrastructureEncryption) {
            this.requireInfrastructureEncryption = Input.ofNullable(requireInfrastructureEncryption);
            return this;
        }

        public Builder setServices(@Nullable Input<EncryptionServicesArgs> services) {
            this.services = services;
            return this;
        }

        public Builder setServices(@Nullable EncryptionServicesArgs services) {
            this.services = Input.ofNullable(services);
            return this;
        }

        public EncryptionArgs build() {
            return new EncryptionArgs(encryptionIdentity, keySource, keyVaultProperties, requireInfrastructureEncryption, services);
        }
    }
}
