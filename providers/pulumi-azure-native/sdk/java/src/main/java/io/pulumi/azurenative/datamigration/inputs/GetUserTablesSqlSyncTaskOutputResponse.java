// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.inputs;

import io.pulumi.azurenative.datamigration.inputs.DatabaseTableResponse;
import io.pulumi.azurenative.datamigration.inputs.ReportableExceptionResponse;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Output of the task that collects user tables for the given list of databases
 * 
 */
public final class GetUserTablesSqlSyncTaskOutputResponse extends io.pulumi.resources.InvokeArgs {

    public static final GetUserTablesSqlSyncTaskOutputResponse Empty = new GetUserTablesSqlSyncTaskOutputResponse();

    /**
     * Mapping from database name to list of source tables
     * 
     */
    @Import(name="databasesToSourceTables", required=true)
      private final Map<String,List<DatabaseTableResponse>> databasesToSourceTables;

    public Map<String,List<DatabaseTableResponse>> getDatabasesToSourceTables() {
        return this.databasesToSourceTables;
    }

    /**
     * Mapping from database name to list of target tables
     * 
     */
    @Import(name="databasesToTargetTables", required=true)
      private final Map<String,List<DatabaseTableResponse>> databasesToTargetTables;

    public Map<String,List<DatabaseTableResponse>> getDatabasesToTargetTables() {
        return this.databasesToTargetTables;
    }

    /**
     * Mapping from database name to list of validation errors
     * 
     */
    @Import(name="tableValidationErrors", required=true)
      private final Map<String,List<String>> tableValidationErrors;

    public Map<String,List<String>> getTableValidationErrors() {
        return this.tableValidationErrors;
    }

    /**
     * Validation errors
     * 
     */
    @Import(name="validationErrors", required=true)
      private final List<ReportableExceptionResponse> validationErrors;

    public List<ReportableExceptionResponse> getValidationErrors() {
        return this.validationErrors;
    }

    public GetUserTablesSqlSyncTaskOutputResponse(
        Map<String,List<DatabaseTableResponse>> databasesToSourceTables,
        Map<String,List<DatabaseTableResponse>> databasesToTargetTables,
        Map<String,List<String>> tableValidationErrors,
        List<ReportableExceptionResponse> validationErrors) {
        this.databasesToSourceTables = Objects.requireNonNull(databasesToSourceTables, "expected parameter 'databasesToSourceTables' to be non-null");
        this.databasesToTargetTables = Objects.requireNonNull(databasesToTargetTables, "expected parameter 'databasesToTargetTables' to be non-null");
        this.tableValidationErrors = Objects.requireNonNull(tableValidationErrors, "expected parameter 'tableValidationErrors' to be non-null");
        this.validationErrors = Objects.requireNonNull(validationErrors, "expected parameter 'validationErrors' to be non-null");
    }

    private GetUserTablesSqlSyncTaskOutputResponse() {
        this.databasesToSourceTables = Map.of();
        this.databasesToTargetTables = Map.of();
        this.tableValidationErrors = Map.of();
        this.validationErrors = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserTablesSqlSyncTaskOutputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,List<DatabaseTableResponse>> databasesToSourceTables;
        private Map<String,List<DatabaseTableResponse>> databasesToTargetTables;
        private Map<String,List<String>> tableValidationErrors;
        private List<ReportableExceptionResponse> validationErrors;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserTablesSqlSyncTaskOutputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databasesToSourceTables = defaults.databasesToSourceTables;
    	      this.databasesToTargetTables = defaults.databasesToTargetTables;
    	      this.tableValidationErrors = defaults.tableValidationErrors;
    	      this.validationErrors = defaults.validationErrors;
        }

        public Builder databasesToSourceTables(Map<String,List<DatabaseTableResponse>> databasesToSourceTables) {
            this.databasesToSourceTables = Objects.requireNonNull(databasesToSourceTables);
            return this;
        }

        public Builder databasesToTargetTables(Map<String,List<DatabaseTableResponse>> databasesToTargetTables) {
            this.databasesToTargetTables = Objects.requireNonNull(databasesToTargetTables);
            return this;
        }

        public Builder tableValidationErrors(Map<String,List<String>> tableValidationErrors) {
            this.tableValidationErrors = Objects.requireNonNull(tableValidationErrors);
            return this;
        }

        public Builder validationErrors(List<ReportableExceptionResponse> validationErrors) {
            this.validationErrors = Objects.requireNonNull(validationErrors);
            return this;
        }
        public GetUserTablesSqlSyncTaskOutputResponse build() {
            return new GetUserTablesSqlSyncTaskOutputResponse(databasesToSourceTables, databasesToTargetTables, tableValidationErrors, validationErrors);
        }
    }
}
