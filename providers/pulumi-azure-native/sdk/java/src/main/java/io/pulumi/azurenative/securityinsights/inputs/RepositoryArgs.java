// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.securityinsights.inputs;

import io.pulumi.azurenative.securityinsights.inputs.ContentPathMapArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * metadata of a repository.
 * 
 */
public final class RepositoryArgs extends io.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    /**
     * Branch name of repository.
     * 
     */
    @Import(name="branch")
      private final @Nullable Output<String> branch;

    public Output<String> getBranch() {
        return this.branch == null ? Codegen.empty() : this.branch;
    }

    /**
     * Url to access repository action logs.
     * 
     */
    @Import(name="deploymentLogsUrl")
      private final @Nullable Output<String> deploymentLogsUrl;

    public Output<String> getDeploymentLogsUrl() {
        return this.deploymentLogsUrl == null ? Codegen.empty() : this.deploymentLogsUrl;
    }

    /**
     * Display url of repository.
     * 
     */
    @Import(name="displayUrl")
      private final @Nullable Output<String> displayUrl;

    public Output<String> getDisplayUrl() {
        return this.displayUrl == null ? Codegen.empty() : this.displayUrl;
    }

    /**
     * Dictionary of source control content type and path mapping.
     * 
     */
    @Import(name="pathMapping")
      private final @Nullable Output<List<ContentPathMapArgs>> pathMapping;

    public Output<List<ContentPathMapArgs>> getPathMapping() {
        return this.pathMapping == null ? Codegen.empty() : this.pathMapping;
    }

    /**
     * Url of repository.
     * 
     */
    @Import(name="url")
      private final @Nullable Output<String> url;

    public Output<String> getUrl() {
        return this.url == null ? Codegen.empty() : this.url;
    }

    public RepositoryArgs(
        @Nullable Output<String> branch,
        @Nullable Output<String> deploymentLogsUrl,
        @Nullable Output<String> displayUrl,
        @Nullable Output<List<ContentPathMapArgs>> pathMapping,
        @Nullable Output<String> url) {
        this.branch = branch;
        this.deploymentLogsUrl = deploymentLogsUrl;
        this.displayUrl = displayUrl;
        this.pathMapping = pathMapping;
        this.url = url;
    }

    private RepositoryArgs() {
        this.branch = Codegen.empty();
        this.deploymentLogsUrl = Codegen.empty();
        this.displayUrl = Codegen.empty();
        this.pathMapping = Codegen.empty();
        this.url = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> branch;
        private @Nullable Output<String> deploymentLogsUrl;
        private @Nullable Output<String> displayUrl;
        private @Nullable Output<List<ContentPathMapArgs>> pathMapping;
        private @Nullable Output<String> url;

        public Builder() {
    	      // Empty
        }

        public Builder(RepositoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.deploymentLogsUrl = defaults.deploymentLogsUrl;
    	      this.displayUrl = defaults.displayUrl;
    	      this.pathMapping = defaults.pathMapping;
    	      this.url = defaults.url;
        }

        public Builder branch(@Nullable Output<String> branch) {
            this.branch = branch;
            return this;
        }
        public Builder branch(@Nullable String branch) {
            this.branch = Codegen.ofNullable(branch);
            return this;
        }
        public Builder deploymentLogsUrl(@Nullable Output<String> deploymentLogsUrl) {
            this.deploymentLogsUrl = deploymentLogsUrl;
            return this;
        }
        public Builder deploymentLogsUrl(@Nullable String deploymentLogsUrl) {
            this.deploymentLogsUrl = Codegen.ofNullable(deploymentLogsUrl);
            return this;
        }
        public Builder displayUrl(@Nullable Output<String> displayUrl) {
            this.displayUrl = displayUrl;
            return this;
        }
        public Builder displayUrl(@Nullable String displayUrl) {
            this.displayUrl = Codegen.ofNullable(displayUrl);
            return this;
        }
        public Builder pathMapping(@Nullable Output<List<ContentPathMapArgs>> pathMapping) {
            this.pathMapping = pathMapping;
            return this;
        }
        public Builder pathMapping(@Nullable List<ContentPathMapArgs> pathMapping) {
            this.pathMapping = Codegen.ofNullable(pathMapping);
            return this;
        }
        public Builder pathMapping(ContentPathMapArgs... pathMapping) {
            return pathMapping(List.of(pathMapping));
        }
        public Builder url(@Nullable Output<String> url) {
            this.url = url;
            return this;
        }
        public Builder url(@Nullable String url) {
            this.url = Codegen.ofNullable(url);
            return this;
        }        public RepositoryArgs build() {
            return new RepositoryArgs(branch, deploymentLogsUrl, displayUrl, pathMapping, url);
        }
    }
}
