// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.inputs;

import io.pulumi.azurenative.storage.inputs.ObjectReplicationPolicyFilterArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The replication policy rule between two containers.
 * 
 */
public final class ObjectReplicationPolicyRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final ObjectReplicationPolicyRuleArgs Empty = new ObjectReplicationPolicyRuleArgs();

    /**
     * Required. Destination container name.
     * 
     */
    @Import(name="destinationContainer", required=true)
      private final Output<String> destinationContainer;

    public Output<String> getDestinationContainer() {
        return this.destinationContainer;
    }

    /**
     * Optional. An object that defines the filter set.
     * 
     */
    @Import(name="filters")
      private final @Nullable Output<ObjectReplicationPolicyFilterArgs> filters;

    public Output<ObjectReplicationPolicyFilterArgs> getFilters() {
        return this.filters == null ? Output.empty() : this.filters;
    }

    /**
     * Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
     * 
     */
    @Import(name="ruleId")
      private final @Nullable Output<String> ruleId;

    public Output<String> getRuleId() {
        return this.ruleId == null ? Output.empty() : this.ruleId;
    }

    /**
     * Required. Source container name.
     * 
     */
    @Import(name="sourceContainer", required=true)
      private final Output<String> sourceContainer;

    public Output<String> getSourceContainer() {
        return this.sourceContainer;
    }

    public ObjectReplicationPolicyRuleArgs(
        Output<String> destinationContainer,
        @Nullable Output<ObjectReplicationPolicyFilterArgs> filters,
        @Nullable Output<String> ruleId,
        Output<String> sourceContainer) {
        this.destinationContainer = Objects.requireNonNull(destinationContainer, "expected parameter 'destinationContainer' to be non-null");
        this.filters = filters;
        this.ruleId = ruleId;
        this.sourceContainer = Objects.requireNonNull(sourceContainer, "expected parameter 'sourceContainer' to be non-null");
    }

    private ObjectReplicationPolicyRuleArgs() {
        this.destinationContainer = Output.empty();
        this.filters = Output.empty();
        this.ruleId = Output.empty();
        this.sourceContainer = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObjectReplicationPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> destinationContainer;
        private @Nullable Output<ObjectReplicationPolicyFilterArgs> filters;
        private @Nullable Output<String> ruleId;
        private Output<String> sourceContainer;

        public Builder() {
    	      // Empty
        }

        public Builder(ObjectReplicationPolicyRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationContainer = defaults.destinationContainer;
    	      this.filters = defaults.filters;
    	      this.ruleId = defaults.ruleId;
    	      this.sourceContainer = defaults.sourceContainer;
        }

        public Builder destinationContainer(Output<String> destinationContainer) {
            this.destinationContainer = Objects.requireNonNull(destinationContainer);
            return this;
        }

        public Builder destinationContainer(String destinationContainer) {
            this.destinationContainer = Output.of(Objects.requireNonNull(destinationContainer));
            return this;
        }

        public Builder filters(@Nullable Output<ObjectReplicationPolicyFilterArgs> filters) {
            this.filters = filters;
            return this;
        }

        public Builder filters(@Nullable ObjectReplicationPolicyFilterArgs filters) {
            this.filters = Output.ofNullable(filters);
            return this;
        }

        public Builder ruleId(@Nullable Output<String> ruleId) {
            this.ruleId = ruleId;
            return this;
        }

        public Builder ruleId(@Nullable String ruleId) {
            this.ruleId = Output.ofNullable(ruleId);
            return this;
        }

        public Builder sourceContainer(Output<String> sourceContainer) {
            this.sourceContainer = Objects.requireNonNull(sourceContainer);
            return this;
        }

        public Builder sourceContainer(String sourceContainer) {
            this.sourceContainer = Output.of(Objects.requireNonNull(sourceContainer));
            return this;
        }
        public ObjectReplicationPolicyRuleArgs build() {
            return new ObjectReplicationPolicyRuleArgs(destinationContainer, filters, ruleId, sourceContainer);
        }
    }
}
