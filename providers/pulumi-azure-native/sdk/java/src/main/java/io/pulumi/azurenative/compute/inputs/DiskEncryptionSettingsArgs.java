// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.azurenative.compute.inputs.KeyVaultKeyReferenceArgs;
import io.pulumi.azurenative.compute.inputs.KeyVaultSecretReferenceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes a Encryption Settings for a Disk
 * 
 */
public final class DiskEncryptionSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final DiskEncryptionSettingsArgs Empty = new DiskEncryptionSettingsArgs();

    /**
     * Specifies the location of the disk encryption key, which is a Key Vault Secret.
     * 
     */
    @Import(name="diskEncryptionKey")
      private final @Nullable Output<KeyVaultSecretReferenceArgs> diskEncryptionKey;

    public Output<KeyVaultSecretReferenceArgs> getDiskEncryptionKey() {
        return this.diskEncryptionKey == null ? Output.empty() : this.diskEncryptionKey;
    }

    /**
     * Specifies whether disk encryption should be enabled on the virtual machine.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * Specifies the location of the key encryption key in Key Vault.
     * 
     */
    @Import(name="keyEncryptionKey")
      private final @Nullable Output<KeyVaultKeyReferenceArgs> keyEncryptionKey;

    public Output<KeyVaultKeyReferenceArgs> getKeyEncryptionKey() {
        return this.keyEncryptionKey == null ? Output.empty() : this.keyEncryptionKey;
    }

    public DiskEncryptionSettingsArgs(
        @Nullable Output<KeyVaultSecretReferenceArgs> diskEncryptionKey,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<KeyVaultKeyReferenceArgs> keyEncryptionKey) {
        this.diskEncryptionKey = diskEncryptionKey;
        this.enabled = enabled;
        this.keyEncryptionKey = keyEncryptionKey;
    }

    private DiskEncryptionSettingsArgs() {
        this.diskEncryptionKey = Output.empty();
        this.enabled = Output.empty();
        this.keyEncryptionKey = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiskEncryptionSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<KeyVaultSecretReferenceArgs> diskEncryptionKey;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<KeyVaultKeyReferenceArgs> keyEncryptionKey;

        public Builder() {
    	      // Empty
        }

        public Builder(DiskEncryptionSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskEncryptionKey = defaults.diskEncryptionKey;
    	      this.enabled = defaults.enabled;
    	      this.keyEncryptionKey = defaults.keyEncryptionKey;
        }

        public Builder diskEncryptionKey(@Nullable Output<KeyVaultSecretReferenceArgs> diskEncryptionKey) {
            this.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        public Builder diskEncryptionKey(@Nullable KeyVaultSecretReferenceArgs diskEncryptionKey) {
            this.diskEncryptionKey = Output.ofNullable(diskEncryptionKey);
            return this;
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }

        public Builder keyEncryptionKey(@Nullable Output<KeyVaultKeyReferenceArgs> keyEncryptionKey) {
            this.keyEncryptionKey = keyEncryptionKey;
            return this;
        }

        public Builder keyEncryptionKey(@Nullable KeyVaultKeyReferenceArgs keyEncryptionKey) {
            this.keyEncryptionKey = Output.ofNullable(keyEncryptionKey);
            return this;
        }
        public DiskEncryptionSettingsArgs build() {
            return new DiskEncryptionSettingsArgs(diskEncryptionKey, enabled, keyEncryptionKey);
        }
    }
}
