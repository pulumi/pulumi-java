// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.ForwardingConfigurationResponse;
import io.pulumi.azurenative.network.inputs.RedirectConfigurationResponse;
import io.pulumi.azurenative.network.inputs.RoutingRuleUpdateParametersResponseWebApplicationFirewallPolicyLink;
import io.pulumi.azurenative.network.inputs.SubResourceResponse;
import io.pulumi.core.Either;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoutingRuleResponse extends io.pulumi.resources.InvokeArgs {

    public static final RoutingRuleResponse Empty = new RoutingRuleResponse();

    @InputImport(name="acceptedProtocols")
    private final @Nullable List<String> acceptedProtocols;

    public List<String> getAcceptedProtocols() {
        return this.acceptedProtocols == null ? List.of() : this.acceptedProtocols;
    }

    @InputImport(name="enabledState")
    private final @Nullable String enabledState;

    public Optional<String> getEnabledState() {
        return this.enabledState == null ? Optional.empty() : Optional.ofNullable(this.enabledState);
    }

    @InputImport(name="frontendEndpoints")
    private final @Nullable List<SubResourceResponse> frontendEndpoints;

    public List<SubResourceResponse> getFrontendEndpoints() {
        return this.frontendEndpoints == null ? List.of() : this.frontendEndpoints;
    }

    @InputImport(name="id")
    private final @Nullable String id;

    public Optional<String> getId() {
        return this.id == null ? Optional.empty() : Optional.ofNullable(this.id);
    }

    @InputImport(name="name")
    private final @Nullable String name;

    public Optional<String> getName() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    @InputImport(name="patternsToMatch")
    private final @Nullable List<String> patternsToMatch;

    public List<String> getPatternsToMatch() {
        return this.patternsToMatch == null ? List.of() : this.patternsToMatch;
    }

    @InputImport(name="resourceState", required=true)
    private final String resourceState;

    public String getResourceState() {
        return this.resourceState;
    }

    @InputImport(name="routeConfiguration")
    private final @Nullable Either<ForwardingConfigurationResponse,RedirectConfigurationResponse> routeConfiguration;

    public Either<ForwardingConfigurationResponse,RedirectConfigurationResponse> getRouteConfiguration() {
        return this.routeConfiguration == null ? null : this.routeConfiguration;
    }

    @InputImport(name="rulesEngine")
    private final @Nullable SubResourceResponse rulesEngine;

    public Optional<SubResourceResponse> getRulesEngine() {
        return this.rulesEngine == null ? Optional.empty() : Optional.ofNullable(this.rulesEngine);
    }

    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    @InputImport(name="webApplicationFirewallPolicyLink")
    private final @Nullable RoutingRuleUpdateParametersResponseWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink;

    public Optional<RoutingRuleUpdateParametersResponseWebApplicationFirewallPolicyLink> getWebApplicationFirewallPolicyLink() {
        return this.webApplicationFirewallPolicyLink == null ? Optional.empty() : Optional.ofNullable(this.webApplicationFirewallPolicyLink);
    }

    public RoutingRuleResponse(
        @Nullable List<String> acceptedProtocols,
        @Nullable String enabledState,
        @Nullable List<SubResourceResponse> frontendEndpoints,
        @Nullable String id,
        @Nullable String name,
        @Nullable List<String> patternsToMatch,
        String resourceState,
        @Nullable Either<ForwardingConfigurationResponse,RedirectConfigurationResponse> routeConfiguration,
        @Nullable SubResourceResponse rulesEngine,
        String type,
        @Nullable RoutingRuleUpdateParametersResponseWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink) {
        this.acceptedProtocols = acceptedProtocols;
        this.enabledState = enabledState;
        this.frontendEndpoints = frontendEndpoints;
        this.id = id;
        this.name = name;
        this.patternsToMatch = patternsToMatch;
        this.resourceState = Objects.requireNonNull(resourceState, "expected parameter 'resourceState' to be non-null");
        this.routeConfiguration = routeConfiguration;
        this.rulesEngine = rulesEngine;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
    }

    private RoutingRuleResponse() {
        this.acceptedProtocols = List.of();
        this.enabledState = null;
        this.frontendEndpoints = List.of();
        this.id = null;
        this.name = null;
        this.patternsToMatch = List.of();
        this.resourceState = null;
        this.routeConfiguration = null;
        this.rulesEngine = null;
        this.type = null;
        this.webApplicationFirewallPolicyLink = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoutingRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> acceptedProtocols;
        private @Nullable String enabledState;
        private @Nullable List<SubResourceResponse> frontendEndpoints;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable List<String> patternsToMatch;
        private String resourceState;
        private @Nullable Either<ForwardingConfigurationResponse,RedirectConfigurationResponse> routeConfiguration;
        private @Nullable SubResourceResponse rulesEngine;
        private String type;
        private @Nullable RoutingRuleUpdateParametersResponseWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink;

        public Builder() {
    	      // Empty
        }

        public Builder(RoutingRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptedProtocols = defaults.acceptedProtocols;
    	      this.enabledState = defaults.enabledState;
    	      this.frontendEndpoints = defaults.frontendEndpoints;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.patternsToMatch = defaults.patternsToMatch;
    	      this.resourceState = defaults.resourceState;
    	      this.routeConfiguration = defaults.routeConfiguration;
    	      this.rulesEngine = defaults.rulesEngine;
    	      this.type = defaults.type;
    	      this.webApplicationFirewallPolicyLink = defaults.webApplicationFirewallPolicyLink;
        }

        public Builder setAcceptedProtocols(@Nullable List<String> acceptedProtocols) {
            this.acceptedProtocols = acceptedProtocols;
            return this;
        }

        public Builder setEnabledState(@Nullable String enabledState) {
            this.enabledState = enabledState;
            return this;
        }

        public Builder setFrontendEndpoints(@Nullable List<SubResourceResponse> frontendEndpoints) {
            this.frontendEndpoints = frontendEndpoints;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setPatternsToMatch(@Nullable List<String> patternsToMatch) {
            this.patternsToMatch = patternsToMatch;
            return this;
        }

        public Builder setResourceState(String resourceState) {
            this.resourceState = Objects.requireNonNull(resourceState);
            return this;
        }

        public Builder setRouteConfiguration(@Nullable Either<ForwardingConfigurationResponse,RedirectConfigurationResponse> routeConfiguration) {
            this.routeConfiguration = routeConfiguration;
            return this;
        }

        public Builder setRulesEngine(@Nullable SubResourceResponse rulesEngine) {
            this.rulesEngine = rulesEngine;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setWebApplicationFirewallPolicyLink(@Nullable RoutingRuleUpdateParametersResponseWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink) {
            this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
            return this;
        }

        public RoutingRuleResponse build() {
            return new RoutingRuleResponse(acceptedProtocols, enabledState, frontendEndpoints, id, name, patternsToMatch, resourceState, routeConfiguration, rulesEngine, type, webApplicationFirewallPolicyLink);
        }
    }
}
