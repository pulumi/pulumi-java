// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databoxedge.inputs;

import io.pulumi.azurenative.databoxedge.inputs.MetricCounterArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.util.List;
import java.util.Objects;


/**
 * The metric counter set
 * 
 */
public final class MetricCounterSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricCounterSetArgs Empty = new MetricCounterSetArgs();

    /**
     * The counters that should be collected in this set.
     * 
     */
    @InputImport(name="counters", required=true)
      private final Input<List<MetricCounterArgs>> counters;

    public Input<List<MetricCounterArgs>> getCounters() {
        return this.counters;
    }

    public MetricCounterSetArgs(Input<List<MetricCounterArgs>> counters) {
        this.counters = Objects.requireNonNull(counters, "expected parameter 'counters' to be non-null");
    }

    private MetricCounterSetArgs() {
        this.counters = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricCounterSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<MetricCounterArgs>> counters;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricCounterSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.counters = defaults.counters;
        }

        public Builder counters(Input<List<MetricCounterArgs>> counters) {
            this.counters = Objects.requireNonNull(counters);
            return this;
        }

        public Builder counters(List<MetricCounterArgs> counters) {
            this.counters = Input.of(Objects.requireNonNull(counters));
            return this;
        }
        public MetricCounterSetArgs build() {
            return new MetricCounterSetArgs(counters);
        }
    }
}
