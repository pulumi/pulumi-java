// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databox.inputs;

import io.pulumi.azurenative.databox.enums.TransferConfigurationType;
import io.pulumi.azurenative.databox.inputs.TransferConfigurationTransferAllDetailsArgs;
import io.pulumi.azurenative.databox.inputs.TransferConfigurationTransferFilterDetailsArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration for defining the transfer of data.
 * 
 */
public final class TransferConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final TransferConfigurationArgs Empty = new TransferConfigurationArgs();

    /**
     * Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType is given as TransferAll
     * 
     */
    @InputImport(name="transferAllDetails")
    private final @Nullable Input<TransferConfigurationTransferAllDetailsArgs> transferAllDetails;

    public Input<TransferConfigurationTransferAllDetailsArgs> getTransferAllDetails() {
        return this.transferAllDetails == null ? Input.empty() : this.transferAllDetails;
    }

    /**
     * Type of the configuration for transfer.
     * 
     */
    @InputImport(name="transferConfigurationType", required=true)
    private final Input<Either<String,TransferConfigurationType>> transferConfigurationType;

    public Input<Either<String,TransferConfigurationType>> getTransferConfigurationType() {
        return this.transferConfigurationType;
    }

    /**
     * Map of filter type and the details to filter. This field is required only if the TransferConfigurationType is given as TransferUsingFilter.
     * 
     */
    @InputImport(name="transferFilterDetails")
    private final @Nullable Input<TransferConfigurationTransferFilterDetailsArgs> transferFilterDetails;

    public Input<TransferConfigurationTransferFilterDetailsArgs> getTransferFilterDetails() {
        return this.transferFilterDetails == null ? Input.empty() : this.transferFilterDetails;
    }

    public TransferConfigurationArgs(
        @Nullable Input<TransferConfigurationTransferAllDetailsArgs> transferAllDetails,
        Input<Either<String,TransferConfigurationType>> transferConfigurationType,
        @Nullable Input<TransferConfigurationTransferFilterDetailsArgs> transferFilterDetails) {
        this.transferAllDetails = transferAllDetails;
        this.transferConfigurationType = Objects.requireNonNull(transferConfigurationType, "expected parameter 'transferConfigurationType' to be non-null");
        this.transferFilterDetails = transferFilterDetails;
    }

    private TransferConfigurationArgs() {
        this.transferAllDetails = Input.empty();
        this.transferConfigurationType = Input.empty();
        this.transferFilterDetails = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransferConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<TransferConfigurationTransferAllDetailsArgs> transferAllDetails;
        private Input<Either<String,TransferConfigurationType>> transferConfigurationType;
        private @Nullable Input<TransferConfigurationTransferFilterDetailsArgs> transferFilterDetails;

        public Builder() {
    	      // Empty
        }

        public Builder(TransferConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.transferAllDetails = defaults.transferAllDetails;
    	      this.transferConfigurationType = defaults.transferConfigurationType;
    	      this.transferFilterDetails = defaults.transferFilterDetails;
        }

        public Builder setTransferAllDetails(@Nullable Input<TransferConfigurationTransferAllDetailsArgs> transferAllDetails) {
            this.transferAllDetails = transferAllDetails;
            return this;
        }

        public Builder setTransferAllDetails(@Nullable TransferConfigurationTransferAllDetailsArgs transferAllDetails) {
            this.transferAllDetails = Input.ofNullable(transferAllDetails);
            return this;
        }

        public Builder setTransferConfigurationType(Input<Either<String,TransferConfigurationType>> transferConfigurationType) {
            this.transferConfigurationType = Objects.requireNonNull(transferConfigurationType);
            return this;
        }

        public Builder setTransferConfigurationType(Either<String,TransferConfigurationType> transferConfigurationType) {
            this.transferConfigurationType = Input.of(Objects.requireNonNull(transferConfigurationType));
            return this;
        }

        public Builder setTransferFilterDetails(@Nullable Input<TransferConfigurationTransferFilterDetailsArgs> transferFilterDetails) {
            this.transferFilterDetails = transferFilterDetails;
            return this;
        }

        public Builder setTransferFilterDetails(@Nullable TransferConfigurationTransferFilterDetailsArgs transferFilterDetails) {
            this.transferFilterDetails = Input.ofNullable(transferFilterDetails);
            return this;
        }

        public TransferConfigurationArgs build() {
            return new TransferConfigurationArgs(transferAllDetails, transferConfigurationType, transferFilterDetails);
        }
    }
}
