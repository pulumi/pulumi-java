// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic;

import io.pulumi.azurenative.logic.enums.AgreementType;
import io.pulumi.azurenative.logic.inputs.AgreementContentArgs;
import io.pulumi.azurenative.logic.inputs.BusinessIdentityArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IntegrationAccountAgreementArgs extends io.pulumi.resources.ResourceArgs {

    public static final IntegrationAccountAgreementArgs Empty = new IntegrationAccountAgreementArgs();

    /**
     * The integration account agreement name.
     * 
     */
    @Import(name="agreementName")
      private final @Nullable Output<String> agreementName;

    public Output<String> getAgreementName() {
        return this.agreementName == null ? Output.empty() : this.agreementName;
    }

    /**
     * The agreement type.
     * 
     */
    @Import(name="agreementType", required=true)
      private final Output<AgreementType> agreementType;

    public Output<AgreementType> getAgreementType() {
        return this.agreementType;
    }

    /**
     * The agreement content.
     * 
     */
    @Import(name="content", required=true)
      private final Output<AgreementContentArgs> content;

    public Output<AgreementContentArgs> getContent() {
        return this.content;
    }

    /**
     * The business identity of the guest partner.
     * 
     */
    @Import(name="guestIdentity", required=true)
      private final Output<BusinessIdentityArgs> guestIdentity;

    public Output<BusinessIdentityArgs> getGuestIdentity() {
        return this.guestIdentity;
    }

    /**
     * The integration account partner that is set as guest partner for this agreement.
     * 
     */
    @Import(name="guestPartner", required=true)
      private final Output<String> guestPartner;

    public Output<String> getGuestPartner() {
        return this.guestPartner;
    }

    /**
     * The business identity of the host partner.
     * 
     */
    @Import(name="hostIdentity", required=true)
      private final Output<BusinessIdentityArgs> hostIdentity;

    public Output<BusinessIdentityArgs> getHostIdentity() {
        return this.hostIdentity;
    }

    /**
     * The integration account partner that is set as host partner for this agreement.
     * 
     */
    @Import(name="hostPartner", required=true)
      private final Output<String> hostPartner;

    public Output<String> getHostPartner() {
        return this.hostPartner;
    }

    /**
     * The integration account name.
     * 
     */
    @Import(name="integrationAccountName", required=true)
      private final Output<String> integrationAccountName;

    public Output<String> getIntegrationAccountName() {
        return this.integrationAccountName;
    }

    /**
     * The resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The metadata.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<Object> metadata;

    public Output<Object> getMetadata() {
        return this.metadata == null ? Output.empty() : this.metadata;
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public IntegrationAccountAgreementArgs(
        @Nullable Output<String> agreementName,
        Output<AgreementType> agreementType,
        Output<AgreementContentArgs> content,
        Output<BusinessIdentityArgs> guestIdentity,
        Output<String> guestPartner,
        Output<BusinessIdentityArgs> hostIdentity,
        Output<String> hostPartner,
        Output<String> integrationAccountName,
        @Nullable Output<String> location,
        @Nullable Output<Object> metadata,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags) {
        this.agreementName = agreementName;
        this.agreementType = Objects.requireNonNull(agreementType, "expected parameter 'agreementType' to be non-null");
        this.content = Objects.requireNonNull(content, "expected parameter 'content' to be non-null");
        this.guestIdentity = Objects.requireNonNull(guestIdentity, "expected parameter 'guestIdentity' to be non-null");
        this.guestPartner = Objects.requireNonNull(guestPartner, "expected parameter 'guestPartner' to be non-null");
        this.hostIdentity = Objects.requireNonNull(hostIdentity, "expected parameter 'hostIdentity' to be non-null");
        this.hostPartner = Objects.requireNonNull(hostPartner, "expected parameter 'hostPartner' to be non-null");
        this.integrationAccountName = Objects.requireNonNull(integrationAccountName, "expected parameter 'integrationAccountName' to be non-null");
        this.location = location;
        this.metadata = metadata;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private IntegrationAccountAgreementArgs() {
        this.agreementName = Output.empty();
        this.agreementType = Output.empty();
        this.content = Output.empty();
        this.guestIdentity = Output.empty();
        this.guestPartner = Output.empty();
        this.hostIdentity = Output.empty();
        this.hostPartner = Output.empty();
        this.integrationAccountName = Output.empty();
        this.location = Output.empty();
        this.metadata = Output.empty();
        this.resourceGroupName = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IntegrationAccountAgreementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> agreementName;
        private Output<AgreementType> agreementType;
        private Output<AgreementContentArgs> content;
        private Output<BusinessIdentityArgs> guestIdentity;
        private Output<String> guestPartner;
        private Output<BusinessIdentityArgs> hostIdentity;
        private Output<String> hostPartner;
        private Output<String> integrationAccountName;
        private @Nullable Output<String> location;
        private @Nullable Output<Object> metadata;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(IntegrationAccountAgreementArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agreementName = defaults.agreementName;
    	      this.agreementType = defaults.agreementType;
    	      this.content = defaults.content;
    	      this.guestIdentity = defaults.guestIdentity;
    	      this.guestPartner = defaults.guestPartner;
    	      this.hostIdentity = defaults.hostIdentity;
    	      this.hostPartner = defaults.hostPartner;
    	      this.integrationAccountName = defaults.integrationAccountName;
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder agreementName(@Nullable Output<String> agreementName) {
            this.agreementName = agreementName;
            return this;
        }
        public Builder agreementName(@Nullable String agreementName) {
            this.agreementName = Output.ofNullable(agreementName);
            return this;
        }
        public Builder agreementType(Output<AgreementType> agreementType) {
            this.agreementType = Objects.requireNonNull(agreementType);
            return this;
        }
        public Builder agreementType(AgreementType agreementType) {
            this.agreementType = Output.of(Objects.requireNonNull(agreementType));
            return this;
        }
        public Builder content(Output<AgreementContentArgs> content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }
        public Builder content(AgreementContentArgs content) {
            this.content = Output.of(Objects.requireNonNull(content));
            return this;
        }
        public Builder guestIdentity(Output<BusinessIdentityArgs> guestIdentity) {
            this.guestIdentity = Objects.requireNonNull(guestIdentity);
            return this;
        }
        public Builder guestIdentity(BusinessIdentityArgs guestIdentity) {
            this.guestIdentity = Output.of(Objects.requireNonNull(guestIdentity));
            return this;
        }
        public Builder guestPartner(Output<String> guestPartner) {
            this.guestPartner = Objects.requireNonNull(guestPartner);
            return this;
        }
        public Builder guestPartner(String guestPartner) {
            this.guestPartner = Output.of(Objects.requireNonNull(guestPartner));
            return this;
        }
        public Builder hostIdentity(Output<BusinessIdentityArgs> hostIdentity) {
            this.hostIdentity = Objects.requireNonNull(hostIdentity);
            return this;
        }
        public Builder hostIdentity(BusinessIdentityArgs hostIdentity) {
            this.hostIdentity = Output.of(Objects.requireNonNull(hostIdentity));
            return this;
        }
        public Builder hostPartner(Output<String> hostPartner) {
            this.hostPartner = Objects.requireNonNull(hostPartner);
            return this;
        }
        public Builder hostPartner(String hostPartner) {
            this.hostPartner = Output.of(Objects.requireNonNull(hostPartner));
            return this;
        }
        public Builder integrationAccountName(Output<String> integrationAccountName) {
            this.integrationAccountName = Objects.requireNonNull(integrationAccountName);
            return this;
        }
        public Builder integrationAccountName(String integrationAccountName) {
            this.integrationAccountName = Output.of(Objects.requireNonNull(integrationAccountName));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder metadata(@Nullable Output<Object> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable Object metadata) {
            this.metadata = Output.ofNullable(metadata);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }        public IntegrationAccountAgreementArgs build() {
            return new IntegrationAccountAgreementArgs(agreementName, agreementType, content, guestIdentity, guestPartner, hostIdentity, hostPartner, integrationAccountName, location, metadata, resourceGroupName, tags);
        }
    }
}
