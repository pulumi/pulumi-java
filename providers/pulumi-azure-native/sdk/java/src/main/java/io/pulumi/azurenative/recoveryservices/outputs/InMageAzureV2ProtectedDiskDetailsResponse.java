// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InMageAzureV2ProtectedDiskDetailsResponse {
    /**
     * The disk capacity in bytes.
     * 
     */
    private final @Nullable Double diskCapacityInBytes;
    /**
     * The disk id.
     * 
     */
    private final @Nullable String diskId;
    /**
     * The disk name.
     * 
     */
    private final @Nullable String diskName;
    /**
     * A value indicating whether disk is resized.
     * 
     */
    private final @Nullable String diskResized;
    /**
     * The disk file system capacity in bytes.
     * 
     */
    private final @Nullable Double fileSystemCapacityInBytes;
    /**
     * The health error code for the disk.
     * 
     */
    private final @Nullable String healthErrorCode;
    /**
     * The last RPO calculated time.
     * 
     */
    private final @Nullable String lastRpoCalculatedTime;
    /**
     * The protection stage.
     * 
     */
    private final @Nullable String protectionStage;
    /**
     * The PS data transit in MB.
     * 
     */
    private final @Nullable Double psDataInMegaBytes;
    /**
     * The resync duration in seconds.
     * 
     */
    private final @Nullable Double resyncDurationInSeconds;
    /**
     * The resync progress percentage.
     * 
     */
    private final @Nullable Integer resyncProgressPercentage;
    /**
     * A value indicating whether resync is required for this disk.
     * 
     */
    private final @Nullable String resyncRequired;
    /**
     * The RPO in seconds.
     * 
     */
    private final @Nullable Double rpoInSeconds;
    /**
     * The source data transit in MB.
     * 
     */
    private final @Nullable Double sourceDataInMegaBytes;
    /**
     * The target data transit in MB.
     * 
     */
    private final @Nullable Double targetDataInMegaBytes;

    @CustomType.Constructor
    private InMageAzureV2ProtectedDiskDetailsResponse(
        @CustomType.Parameter("diskCapacityInBytes") @Nullable Double diskCapacityInBytes,
        @CustomType.Parameter("diskId") @Nullable String diskId,
        @CustomType.Parameter("diskName") @Nullable String diskName,
        @CustomType.Parameter("diskResized") @Nullable String diskResized,
        @CustomType.Parameter("fileSystemCapacityInBytes") @Nullable Double fileSystemCapacityInBytes,
        @CustomType.Parameter("healthErrorCode") @Nullable String healthErrorCode,
        @CustomType.Parameter("lastRpoCalculatedTime") @Nullable String lastRpoCalculatedTime,
        @CustomType.Parameter("protectionStage") @Nullable String protectionStage,
        @CustomType.Parameter("psDataInMegaBytes") @Nullable Double psDataInMegaBytes,
        @CustomType.Parameter("resyncDurationInSeconds") @Nullable Double resyncDurationInSeconds,
        @CustomType.Parameter("resyncProgressPercentage") @Nullable Integer resyncProgressPercentage,
        @CustomType.Parameter("resyncRequired") @Nullable String resyncRequired,
        @CustomType.Parameter("rpoInSeconds") @Nullable Double rpoInSeconds,
        @CustomType.Parameter("sourceDataInMegaBytes") @Nullable Double sourceDataInMegaBytes,
        @CustomType.Parameter("targetDataInMegaBytes") @Nullable Double targetDataInMegaBytes) {
        this.diskCapacityInBytes = diskCapacityInBytes;
        this.diskId = diskId;
        this.diskName = diskName;
        this.diskResized = diskResized;
        this.fileSystemCapacityInBytes = fileSystemCapacityInBytes;
        this.healthErrorCode = healthErrorCode;
        this.lastRpoCalculatedTime = lastRpoCalculatedTime;
        this.protectionStage = protectionStage;
        this.psDataInMegaBytes = psDataInMegaBytes;
        this.resyncDurationInSeconds = resyncDurationInSeconds;
        this.resyncProgressPercentage = resyncProgressPercentage;
        this.resyncRequired = resyncRequired;
        this.rpoInSeconds = rpoInSeconds;
        this.sourceDataInMegaBytes = sourceDataInMegaBytes;
        this.targetDataInMegaBytes = targetDataInMegaBytes;
    }

    /**
     * The disk capacity in bytes.
     * 
    */
    public Optional<Double> diskCapacityInBytes() {
        return Optional.ofNullable(this.diskCapacityInBytes);
    }
    /**
     * The disk id.
     * 
    */
    public Optional<String> diskId() {
        return Optional.ofNullable(this.diskId);
    }
    /**
     * The disk name.
     * 
    */
    public Optional<String> diskName() {
        return Optional.ofNullable(this.diskName);
    }
    /**
     * A value indicating whether disk is resized.
     * 
    */
    public Optional<String> diskResized() {
        return Optional.ofNullable(this.diskResized);
    }
    /**
     * The disk file system capacity in bytes.
     * 
    */
    public Optional<Double> fileSystemCapacityInBytes() {
        return Optional.ofNullable(this.fileSystemCapacityInBytes);
    }
    /**
     * The health error code for the disk.
     * 
    */
    public Optional<String> healthErrorCode() {
        return Optional.ofNullable(this.healthErrorCode);
    }
    /**
     * The last RPO calculated time.
     * 
    */
    public Optional<String> lastRpoCalculatedTime() {
        return Optional.ofNullable(this.lastRpoCalculatedTime);
    }
    /**
     * The protection stage.
     * 
    */
    public Optional<String> protectionStage() {
        return Optional.ofNullable(this.protectionStage);
    }
    /**
     * The PS data transit in MB.
     * 
    */
    public Optional<Double> psDataInMegaBytes() {
        return Optional.ofNullable(this.psDataInMegaBytes);
    }
    /**
     * The resync duration in seconds.
     * 
    */
    public Optional<Double> resyncDurationInSeconds() {
        return Optional.ofNullable(this.resyncDurationInSeconds);
    }
    /**
     * The resync progress percentage.
     * 
    */
    public Optional<Integer> resyncProgressPercentage() {
        return Optional.ofNullable(this.resyncProgressPercentage);
    }
    /**
     * A value indicating whether resync is required for this disk.
     * 
    */
    public Optional<String> resyncRequired() {
        return Optional.ofNullable(this.resyncRequired);
    }
    /**
     * The RPO in seconds.
     * 
    */
    public Optional<Double> rpoInSeconds() {
        return Optional.ofNullable(this.rpoInSeconds);
    }
    /**
     * The source data transit in MB.
     * 
    */
    public Optional<Double> sourceDataInMegaBytes() {
        return Optional.ofNullable(this.sourceDataInMegaBytes);
    }
    /**
     * The target data transit in MB.
     * 
    */
    public Optional<Double> targetDataInMegaBytes() {
        return Optional.ofNullable(this.targetDataInMegaBytes);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InMageAzureV2ProtectedDiskDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Double diskCapacityInBytes;
        private @Nullable String diskId;
        private @Nullable String diskName;
        private @Nullable String diskResized;
        private @Nullable Double fileSystemCapacityInBytes;
        private @Nullable String healthErrorCode;
        private @Nullable String lastRpoCalculatedTime;
        private @Nullable String protectionStage;
        private @Nullable Double psDataInMegaBytes;
        private @Nullable Double resyncDurationInSeconds;
        private @Nullable Integer resyncProgressPercentage;
        private @Nullable String resyncRequired;
        private @Nullable Double rpoInSeconds;
        private @Nullable Double sourceDataInMegaBytes;
        private @Nullable Double targetDataInMegaBytes;

        public Builder() {
    	      // Empty
        }

        public Builder(InMageAzureV2ProtectedDiskDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskCapacityInBytes = defaults.diskCapacityInBytes;
    	      this.diskId = defaults.diskId;
    	      this.diskName = defaults.diskName;
    	      this.diskResized = defaults.diskResized;
    	      this.fileSystemCapacityInBytes = defaults.fileSystemCapacityInBytes;
    	      this.healthErrorCode = defaults.healthErrorCode;
    	      this.lastRpoCalculatedTime = defaults.lastRpoCalculatedTime;
    	      this.protectionStage = defaults.protectionStage;
    	      this.psDataInMegaBytes = defaults.psDataInMegaBytes;
    	      this.resyncDurationInSeconds = defaults.resyncDurationInSeconds;
    	      this.resyncProgressPercentage = defaults.resyncProgressPercentage;
    	      this.resyncRequired = defaults.resyncRequired;
    	      this.rpoInSeconds = defaults.rpoInSeconds;
    	      this.sourceDataInMegaBytes = defaults.sourceDataInMegaBytes;
    	      this.targetDataInMegaBytes = defaults.targetDataInMegaBytes;
        }

        public Builder diskCapacityInBytes(@Nullable Double diskCapacityInBytes) {
            this.diskCapacityInBytes = diskCapacityInBytes;
            return this;
        }
        public Builder diskId(@Nullable String diskId) {
            this.diskId = diskId;
            return this;
        }
        public Builder diskName(@Nullable String diskName) {
            this.diskName = diskName;
            return this;
        }
        public Builder diskResized(@Nullable String diskResized) {
            this.diskResized = diskResized;
            return this;
        }
        public Builder fileSystemCapacityInBytes(@Nullable Double fileSystemCapacityInBytes) {
            this.fileSystemCapacityInBytes = fileSystemCapacityInBytes;
            return this;
        }
        public Builder healthErrorCode(@Nullable String healthErrorCode) {
            this.healthErrorCode = healthErrorCode;
            return this;
        }
        public Builder lastRpoCalculatedTime(@Nullable String lastRpoCalculatedTime) {
            this.lastRpoCalculatedTime = lastRpoCalculatedTime;
            return this;
        }
        public Builder protectionStage(@Nullable String protectionStage) {
            this.protectionStage = protectionStage;
            return this;
        }
        public Builder psDataInMegaBytes(@Nullable Double psDataInMegaBytes) {
            this.psDataInMegaBytes = psDataInMegaBytes;
            return this;
        }
        public Builder resyncDurationInSeconds(@Nullable Double resyncDurationInSeconds) {
            this.resyncDurationInSeconds = resyncDurationInSeconds;
            return this;
        }
        public Builder resyncProgressPercentage(@Nullable Integer resyncProgressPercentage) {
            this.resyncProgressPercentage = resyncProgressPercentage;
            return this;
        }
        public Builder resyncRequired(@Nullable String resyncRequired) {
            this.resyncRequired = resyncRequired;
            return this;
        }
        public Builder rpoInSeconds(@Nullable Double rpoInSeconds) {
            this.rpoInSeconds = rpoInSeconds;
            return this;
        }
        public Builder sourceDataInMegaBytes(@Nullable Double sourceDataInMegaBytes) {
            this.sourceDataInMegaBytes = sourceDataInMegaBytes;
            return this;
        }
        public Builder targetDataInMegaBytes(@Nullable Double targetDataInMegaBytes) {
            this.targetDataInMegaBytes = targetDataInMegaBytes;
            return this;
        }        public InMageAzureV2ProtectedDiskDetailsResponse build() {
            return new InMageAzureV2ProtectedDiskDetailsResponse(diskCapacityInBytes, diskId, diskName, diskResized, fileSystemCapacityInBytes, healthErrorCode, lastRpoCalculatedTime, protectionStage, psDataInMegaBytes, resyncDurationInSeconds, resyncProgressPercentage, resyncRequired, rpoInSeconds, sourceDataInMegaBytes, targetDataInMegaBytes);
        }
    }
}
