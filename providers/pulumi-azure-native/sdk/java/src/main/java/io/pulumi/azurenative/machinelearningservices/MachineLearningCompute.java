// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.machinelearningservices.MachineLearningComputeArgs;
import io.pulumi.azurenative.machinelearningservices.outputs.AKSResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.AmlComputeResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.ComputeInstanceResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.DataFactoryResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.DataLakeAnalyticsResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.DatabricksResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.HDInsightResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.IdentityResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.SkuResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.SystemDataResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.VirtualMachineResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Machine Learning compute object wrapped into ARM resource envelope.
API Version: 2021-01-01.

{{% examples %}}
## Example Usage
{{% example %}}
### Create AKS Compute
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var machineLearningCompute = new AzureNative.MachineLearningServices.MachineLearningCompute("machineLearningCompute", new AzureNative.MachineLearningServices.MachineLearningComputeArgs
        {
            ComputeName = "compute123",
            Location = "eastus",
            Properties = new AzureNative.MachineLearningServices.Inputs.AKSArgs
            {
                ComputeType = "AKS",
            },
            ResourceGroupName = "testrg123",
            WorkspaceName = "workspaces123",
        });
    }

}

```

```go
package main

import (
	machinelearningservices "github.com/pulumi/pulumi-azure-native/sdk/go/azure/machinelearningservices"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := machinelearningservices.NewMachineLearningCompute(ctx, "machineLearningCompute", &machinelearningservices.MachineLearningComputeArgs{
			ComputeName: pulumi.String("compute123"),
			Location:    pulumi.String("eastus"),
			Properties: machinelearningservices.AKS{
				ComputeType: "AKS",
			},
			ResourceGroupName: pulumi.String("testrg123"),
			WorkspaceName:     pulumi.String("workspaces123"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const machineLearningCompute = new azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute", {
    computeName: "compute123",
    location: "eastus",
    properties: {
        computeType: "AKS",
    },
    resourceGroupName: "testrg123",
    workspaceName: "workspaces123",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

machine_learning_compute = azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute",
    compute_name="compute123",
    location="eastus",
    properties=azure_native.machinelearningservices.AKSArgs(
        compute_type="AKS",
    ),
    resource_group_name="testrg123",
    workspace_name="workspaces123")

```

{{% /example %}}
{{% example %}}
### Create a AML Compute
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var machineLearningCompute = new AzureNative.MachineLearningServices.MachineLearningCompute("machineLearningCompute", new AzureNative.MachineLearningServices.MachineLearningComputeArgs
        {
            ComputeName = "compute123",
            Location = "eastus",
            Properties = new AzureNative.MachineLearningServices.Inputs.AmlComputeArgs
            {
                ComputeType = "AmlCompute",
                Properties = new AzureNative.MachineLearningServices.Inputs.AmlComputePropertiesArgs
                {
                    EnableNodePublicIp = true,
                    IsolatedNetwork = false,
                    OsType = "Windows",
                    RemoteLoginPortPublicAccess = "NotSpecified",
                    ScaleSettings = new AzureNative.MachineLearningServices.Inputs.ScaleSettingsArgs
                    {
                        MaxNodeCount = 1,
                        MinNodeCount = 0,
                        NodeIdleTimeBeforeScaleDown = "PT5M",
                    },
                    VirtualMachineImage = new AzureNative.MachineLearningServices.Inputs.VirtualMachineImageArgs
                    {
                        Id = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myImageGallery/images/myImageDefinition/versions/0.0.1",
                    },
                    VmPriority = "Dedicated",
                    VmSize = "STANDARD_NC6",
                },
            },
            ResourceGroupName = "testrg123",
            WorkspaceName = "workspaces123",
        });
    }

}

```

```go
package main

import (
	machinelearningservices "github.com/pulumi/pulumi-azure-native/sdk/go/azure/machinelearningservices"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := machinelearningservices.NewMachineLearningCompute(ctx, "machineLearningCompute", &machinelearningservices.MachineLearningComputeArgs{
			ComputeName: pulumi.String("compute123"),
			Location:    pulumi.String("eastus"),
			Properties: machinelearningservices.AmlCompute{
				ComputeType: "AmlCompute",
				Properties: machinelearningservices.AmlComputeProperties{
					EnableNodePublicIp:          true,
					IsolatedNetwork:             false,
					OsType:                      "Windows",
					RemoteLoginPortPublicAccess: "NotSpecified",
					ScaleSettings: machinelearningservices.ScaleSettings{
						MaxNodeCount:                1,
						MinNodeCount:                0,
						NodeIdleTimeBeforeScaleDown: "PT5M",
					},
					VirtualMachineImage: machinelearningservices.VirtualMachineImage{
						Id: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myImageGallery/images/myImageDefinition/versions/0.0.1",
					},
					VmPriority: "Dedicated",
					VmSize:     "STANDARD_NC6",
				},
			},
			ResourceGroupName: pulumi.String("testrg123"),
			WorkspaceName:     pulumi.String("workspaces123"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const machineLearningCompute = new azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute", {
    computeName: "compute123",
    location: "eastus",
    properties: {
        computeType: "AmlCompute",
        properties: {
            enableNodePublicIp: true,
            isolatedNetwork: false,
            osType: "Windows",
            remoteLoginPortPublicAccess: "NotSpecified",
            scaleSettings: {
                maxNodeCount: 1,
                minNodeCount: 0,
                nodeIdleTimeBeforeScaleDown: "PT5M",
            },
            virtualMachineImage: {
                id: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myImageGallery/images/myImageDefinition/versions/0.0.1",
            },
            vmPriority: "Dedicated",
            vmSize: "STANDARD_NC6",
        },
    },
    resourceGroupName: "testrg123",
    workspaceName: "workspaces123",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

machine_learning_compute = azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute",
    compute_name="compute123",
    location="eastus",
    properties=azure_native.machinelearningservices.AmlComputeArgs(
        compute_type="AmlCompute",
        properties=azure_native.machinelearningservices.AmlComputePropertiesArgs(
            enable_node_public_ip=True,
            isolated_network=False,
            os_type="Windows",
            remote_login_port_public_access="NotSpecified",
            scale_settings=azure_native.machinelearningservices.ScaleSettingsArgs(
                max_node_count=1,
                min_node_count=0,
                node_idle_time_before_scale_down="PT5M",
            ),
            virtual_machine_image=azure_native.machinelearningservices.VirtualMachineImageArgs(
                id="/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myImageGallery/images/myImageDefinition/versions/0.0.1",
            ),
            vm_priority="Dedicated",
            vm_size="STANDARD_NC6",
        ),
    ),
    resource_group_name="testrg123",
    workspace_name="workspaces123")

```

{{% /example %}}
{{% example %}}
### Create a DataFactory Compute
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var machineLearningCompute = new AzureNative.MachineLearningServices.MachineLearningCompute("machineLearningCompute", new AzureNative.MachineLearningServices.MachineLearningComputeArgs
        {
            ComputeName = "compute123",
            Location = "eastus",
            Properties = new AzureNative.MachineLearningServices.Inputs.DataFactoryArgs
            {
                ComputeType = "DataFactory",
            },
            ResourceGroupName = "testrg123",
            WorkspaceName = "workspaces123",
        });
    }

}

```

```go
package main

import (
	machinelearningservices "github.com/pulumi/pulumi-azure-native/sdk/go/azure/machinelearningservices"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := machinelearningservices.NewMachineLearningCompute(ctx, "machineLearningCompute", &machinelearningservices.MachineLearningComputeArgs{
			ComputeName: pulumi.String("compute123"),
			Location:    pulumi.String("eastus"),
			Properties: machinelearningservices.DataFactory{
				ComputeType: "DataFactory",
			},
			ResourceGroupName: pulumi.String("testrg123"),
			WorkspaceName:     pulumi.String("workspaces123"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const machineLearningCompute = new azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute", {
    computeName: "compute123",
    location: "eastus",
    properties: {
        computeType: "DataFactory",
    },
    resourceGroupName: "testrg123",
    workspaceName: "workspaces123",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

machine_learning_compute = azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute",
    compute_name="compute123",
    location="eastus",
    properties=azure_native.machinelearningservices.DataFactoryArgs(
        compute_type="DataFactory",
    ),
    resource_group_name="testrg123",
    workspace_name="workspaces123")

```

{{% /example %}}
{{% example %}}
### Create an ComputeInstance Compute
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var machineLearningCompute = new AzureNative.MachineLearningServices.MachineLearningCompute("machineLearningCompute", new AzureNative.MachineLearningServices.MachineLearningComputeArgs
        {
            ComputeName = "compute123",
            Location = "eastus",
            Properties = new AzureNative.MachineLearningServices.Inputs.ComputeInstanceArgs
            {
                ComputeType = "ComputeInstance",
                Properties = new AzureNative.MachineLearningServices.Inputs.ComputeInstancePropertiesArgs
                {
                    ApplicationSharingPolicy = "Personal",
                    ComputeInstanceAuthorizationType = "personal",
                    PersonalComputeInstanceSettings = new AzureNative.MachineLearningServices.Inputs.PersonalComputeInstanceSettingsArgs
                    {
                        AssignedUser = new AzureNative.MachineLearningServices.Inputs.AssignedUserArgs
                        {
                            ObjectId = "00000000-0000-0000-0000-000000000000",
                            TenantId = "00000000-0000-0000-0000-000000000000",
                        },
                    },
                    SshSettings = new AzureNative.MachineLearningServices.Inputs.ComputeInstanceSshSettingsArgs
                    {
                        SshPublicAccess = "Disabled",
                    },
                    Subnet = "test-subnet-resource-id",
                    VmSize = "STANDARD_NC6",
                },
            },
            ResourceGroupName = "testrg123",
            WorkspaceName = "workspaces123",
        });
    }

}

```

```go
package main

import (
	machinelearningservices "github.com/pulumi/pulumi-azure-native/sdk/go/azure/machinelearningservices"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := machinelearningservices.NewMachineLearningCompute(ctx, "machineLearningCompute", &machinelearningservices.MachineLearningComputeArgs{
			ComputeName: pulumi.String("compute123"),
			Location:    pulumi.String("eastus"),
			Properties: machinelearningservices.ComputeInstance{
				ComputeType: "ComputeInstance",
				Properties: machinelearningservices.ComputeInstanceProperties{
					ApplicationSharingPolicy:         "Personal",
					ComputeInstanceAuthorizationType: "personal",
					PersonalComputeInstanceSettings: machinelearningservices.PersonalComputeInstanceSettings{
						AssignedUser: machinelearningservices.AssignedUser{
							ObjectId: "00000000-0000-0000-0000-000000000000",
							TenantId: "00000000-0000-0000-0000-000000000000",
						},
					},
					SshSettings: machinelearningservices.ComputeInstanceSshSettings{
						SshPublicAccess: "Disabled",
					},
					Subnet: "test-subnet-resource-id",
					VmSize: "STANDARD_NC6",
				},
			},
			ResourceGroupName: pulumi.String("testrg123"),
			WorkspaceName:     pulumi.String("workspaces123"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const machineLearningCompute = new azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute", {
    computeName: "compute123",
    location: "eastus",
    properties: {
        computeType: "ComputeInstance",
        properties: {
            applicationSharingPolicy: "Personal",
            computeInstanceAuthorizationType: "personal",
            personalComputeInstanceSettings: {
                assignedUser: {
                    objectId: "00000000-0000-0000-0000-000000000000",
                    tenantId: "00000000-0000-0000-0000-000000000000",
                },
            },
            sshSettings: {
                sshPublicAccess: "Disabled",
            },
            subnet: "test-subnet-resource-id",
            vmSize: "STANDARD_NC6",
        },
    },
    resourceGroupName: "testrg123",
    workspaceName: "workspaces123",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

machine_learning_compute = azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute",
    compute_name="compute123",
    location="eastus",
    properties=azure_native.machinelearningservices.ComputeInstanceArgs(
        compute_type="ComputeInstance",
        properties=azure_native.machinelearningservices.ComputeInstancePropertiesArgs(
            application_sharing_policy="Personal",
            compute_instance_authorization_type="personal",
            personal_compute_instance_settings=azure_native.machinelearningservices.PersonalComputeInstanceSettingsArgs(
                assigned_user=azure_native.machinelearningservices.AssignedUserArgs(
                    object_id="00000000-0000-0000-0000-000000000000",
                    tenant_id="00000000-0000-0000-0000-000000000000",
                ),
            ),
            ssh_settings=azure_native.machinelearningservices.ComputeInstanceSshSettingsArgs(
                ssh_public_access="Disabled",
            ),
            subnet="test-subnet-resource-id",
            vm_size="STANDARD_NC6",
        ),
    ),
    resource_group_name="testrg123",
    workspace_name="workspaces123")

```

{{% /example %}}
{{% example %}}
### Create an ComputeInstance Compute with minimal inputs
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var machineLearningCompute = new AzureNative.MachineLearningServices.MachineLearningCompute("machineLearningCompute", new AzureNative.MachineLearningServices.MachineLearningComputeArgs
        {
            ComputeName = "compute123",
            Location = "eastus",
            Properties = new AzureNative.MachineLearningServices.Inputs.ComputeInstanceArgs
            {
                ComputeType = "ComputeInstance",
                Properties = new AzureNative.MachineLearningServices.Inputs.ComputeInstancePropertiesArgs
                {
                    VmSize = "STANDARD_NC6",
                },
            },
            ResourceGroupName = "testrg123",
            WorkspaceName = "workspaces123",
        });
    }

}

```

```go
package main

import (
	machinelearningservices "github.com/pulumi/pulumi-azure-native/sdk/go/azure/machinelearningservices"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := machinelearningservices.NewMachineLearningCompute(ctx, "machineLearningCompute", &machinelearningservices.MachineLearningComputeArgs{
			ComputeName: pulumi.String("compute123"),
			Location:    pulumi.String("eastus"),
			Properties: machinelearningservices.ComputeInstance{
				ComputeType: "ComputeInstance",
				Properties: machinelearningservices.ComputeInstanceProperties{
					VmSize: "STANDARD_NC6",
				},
			},
			ResourceGroupName: pulumi.String("testrg123"),
			WorkspaceName:     pulumi.String("workspaces123"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const machineLearningCompute = new azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute", {
    computeName: "compute123",
    location: "eastus",
    properties: {
        computeType: "ComputeInstance",
        properties: {
            vmSize: "STANDARD_NC6",
        },
    },
    resourceGroupName: "testrg123",
    workspaceName: "workspaces123",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

machine_learning_compute = azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute",
    compute_name="compute123",
    location="eastus",
    properties=azure_native.machinelearningservices.ComputeInstanceArgs(
        compute_type="ComputeInstance",
        properties=azure_native.machinelearningservices.ComputeInstancePropertiesArgs(
            vm_size="STANDARD_NC6",
        ),
    ),
    resource_group_name="testrg123",
    workspace_name="workspaces123")

```

{{% /example %}}
{{% example %}}
### Update a AKS Compute
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var machineLearningCompute = new AzureNative.MachineLearningServices.MachineLearningCompute("machineLearningCompute", new AzureNative.MachineLearningServices.MachineLearningComputeArgs
        {
            ComputeName = "compute123",
            Location = "eastus",
            Properties = new AzureNative.MachineLearningServices.Inputs.AKSArgs
            {
                ComputeType = "AKS",
                Description = "some compute",
                Properties = new AzureNative.MachineLearningServices.Inputs.AKSPropertiesArgs
                {
                    AgentCount = 4,
                },
                ResourceId = "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2",
            },
            ResourceGroupName = "testrg123",
            WorkspaceName = "workspaces123",
        });
    }

}

```

```go
package main

import (
	machinelearningservices "github.com/pulumi/pulumi-azure-native/sdk/go/azure/machinelearningservices"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := machinelearningservices.NewMachineLearningCompute(ctx, "machineLearningCompute", &machinelearningservices.MachineLearningComputeArgs{
			ComputeName: pulumi.String("compute123"),
			Location:    pulumi.String("eastus"),
			Properties: machinelearningservices.AKS{
				ComputeType: "AKS",
				Description: "some compute",
				Properties: machinelearningservices.AKSProperties{
					AgentCount: 4,
				},
				ResourceId: "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2",
			},
			ResourceGroupName: pulumi.String("testrg123"),
			WorkspaceName:     pulumi.String("workspaces123"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const machineLearningCompute = new azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute", {
    computeName: "compute123",
    location: "eastus",
    properties: {
        computeType: "AKS",
        description: "some compute",
        properties: {
            agentCount: 4,
        },
        resourceId: "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2",
    },
    resourceGroupName: "testrg123",
    workspaceName: "workspaces123",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

machine_learning_compute = azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute",
    compute_name="compute123",
    location="eastus",
    properties=azure_native.machinelearningservices.AKSArgs(
        compute_type="AKS",
        description="some compute",
        properties=azure_native.machinelearningservices.AKSPropertiesArgs(
            agent_count=4,
        ),
        resource_id="/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2",
    ),
    resource_group_name="testrg123",
    workspace_name="workspaces123")

```

{{% /example %}}
{{% example %}}
### Update a AML Compute
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var machineLearningCompute = new AzureNative.MachineLearningServices.MachineLearningCompute("machineLearningCompute", new AzureNative.MachineLearningServices.MachineLearningComputeArgs
        {
            ComputeName = "compute123",
            Location = "eastus",
            Properties = new AzureNative.MachineLearningServices.Inputs.AmlComputeArgs
            {
                ComputeType = "AmlCompute",
                Description = "some compute",
                Properties = new AzureNative.MachineLearningServices.Inputs.AmlComputePropertiesArgs
                {
                    ScaleSettings = new AzureNative.MachineLearningServices.Inputs.ScaleSettingsArgs
                    {
                        MaxNodeCount = 4,
                        MinNodeCount = 4,
                        NodeIdleTimeBeforeScaleDown = "PT5M",
                    },
                },
            },
            ResourceGroupName = "testrg123",
            WorkspaceName = "workspaces123",
        });
    }

}

```

```go
package main

import (
	machinelearningservices "github.com/pulumi/pulumi-azure-native/sdk/go/azure/machinelearningservices"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := machinelearningservices.NewMachineLearningCompute(ctx, "machineLearningCompute", &machinelearningservices.MachineLearningComputeArgs{
			ComputeName: pulumi.String("compute123"),
			Location:    pulumi.String("eastus"),
			Properties: machinelearningservices.AmlCompute{
				ComputeType: "AmlCompute",
				Description: "some compute",
				Properties: machinelearningservices.AmlComputeProperties{
					ScaleSettings: machinelearningservices.ScaleSettings{
						MaxNodeCount:                4,
						MinNodeCount:                4,
						NodeIdleTimeBeforeScaleDown: "PT5M",
					},
				},
			},
			ResourceGroupName: pulumi.String("testrg123"),
			WorkspaceName:     pulumi.String("workspaces123"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const machineLearningCompute = new azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute", {
    computeName: "compute123",
    location: "eastus",
    properties: {
        computeType: "AmlCompute",
        description: "some compute",
        properties: {
            scaleSettings: {
                maxNodeCount: 4,
                minNodeCount: 4,
                nodeIdleTimeBeforeScaleDown: "PT5M",
            },
        },
    },
    resourceGroupName: "testrg123",
    workspaceName: "workspaces123",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

machine_learning_compute = azure_native.machinelearningservices.MachineLearningCompute("machineLearningCompute",
    compute_name="compute123",
    location="eastus",
    properties=azure_native.machinelearningservices.AmlComputeArgs(
        compute_type="AmlCompute",
        description="some compute",
        properties=azure_native.machinelearningservices.AmlComputePropertiesArgs(
            scale_settings=azure_native.machinelearningservices.ScaleSettingsArgs(
                max_node_count=4,
                min_node_count=4,
                node_idle_time_before_scale_down="PT5M",
            ),
        ),
    ),
    resource_group_name="testrg123",
    workspace_name="workspaces123")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:machinelearningservices:MachineLearningCompute compute123 /subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123 
```

 */
@ResourceType(type="azure-native:machinelearningservices:MachineLearningCompute")
public class MachineLearningCompute extends io.pulumi.resources.CustomResource {
    /**
     * The identity of the resource.
     */
    @OutputExport(name="identity", type=IdentityResponse.class, parameters={})
    private Output</* @Nullable */ IdentityResponse> identity;

    /**
     * @return The identity of the resource.
     */
    public Output</* @Nullable */ IdentityResponse> getIdentity() {
        return this.identity;
    }
    /**
     * Specifies the location of the resource.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return Specifies the location of the resource.
     */
    public Output</* @Nullable */ String> getLocation() {
        return this.location;
    }
    /**
     * Specifies the name of the resource.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of the resource.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Compute properties
     */
    @OutputExport(name="properties", type=Object.class, parameters={})
    private Output<Object> properties;

    /**
     * @return Compute properties
     */
    public Output<Object> getProperties() {
        return this.properties;
    }
    /**
     * The sku of the workspace.
     */
    @OutputExport(name="sku", type=SkuResponse.class, parameters={})
    private Output</* @Nullable */ SkuResponse> sku;

    /**
     * @return The sku of the workspace.
     */
    public Output</* @Nullable */ SkuResponse> getSku() {
        return this.sku;
    }
    /**
     * Read only system data
     */
    @OutputExport(name="systemData", type=SystemDataResponse.class, parameters={})
    private Output<SystemDataResponse> systemData;

    /**
     * @return Read only system data
     */
    public Output<SystemDataResponse> getSystemData() {
        return this.systemData;
    }
    /**
     * Contains resource tags defined as key/value pairs.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Contains resource tags defined as key/value pairs.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Specifies the type of the resource.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Specifies the type of the resource.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MachineLearningCompute(String name, MachineLearningComputeArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:machinelearningservices:MachineLearningCompute", name, args == null ? MachineLearningComputeArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private MachineLearningCompute(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:machinelearningservices:MachineLearningCompute", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20180301preview:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20181119:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20190501:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20190601:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20191101:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20200101:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20200218preview:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20200301:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20200401:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20200501preview:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20200515preview:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20200601:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20200801:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20200901preview:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20210101:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20210301preview:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20210401:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20210701:MachineLearningCompute").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearningservices/v20220101preview:MachineLearningCompute").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MachineLearningCompute get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new MachineLearningCompute(name, id, options);
    }
}
