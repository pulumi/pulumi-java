// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.healthcareapis;

import io.pulumi.azurenative.healthcareapis.enums.FhirServiceKind;
import io.pulumi.azurenative.healthcareapis.inputs.FhirServiceAccessPolicyEntryArgs;
import io.pulumi.azurenative.healthcareapis.inputs.FhirServiceAcrConfigurationArgs;
import io.pulumi.azurenative.healthcareapis.inputs.FhirServiceAuthenticationConfigurationArgs;
import io.pulumi.azurenative.healthcareapis.inputs.FhirServiceCorsConfigurationArgs;
import io.pulumi.azurenative.healthcareapis.inputs.FhirServiceExportConfigurationArgs;
import io.pulumi.azurenative.healthcareapis.inputs.ServiceManagedIdentityIdentityArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FhirServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final FhirServiceArgs Empty = new FhirServiceArgs();

    /**
     * Fhir Service access policies.
     * 
     */
    @Import(name="accessPolicies")
      private final @Nullable Output<List<FhirServiceAccessPolicyEntryArgs>> accessPolicies;

    public Output<List<FhirServiceAccessPolicyEntryArgs>> getAccessPolicies() {
        return this.accessPolicies == null ? Output.empty() : this.accessPolicies;
    }

    /**
     * Fhir Service Azure container registry configuration.
     * 
     */
    @Import(name="acrConfiguration")
      private final @Nullable Output<FhirServiceAcrConfigurationArgs> acrConfiguration;

    public Output<FhirServiceAcrConfigurationArgs> getAcrConfiguration() {
        return this.acrConfiguration == null ? Output.empty() : this.acrConfiguration;
    }

    /**
     * Fhir Service authentication configuration.
     * 
     */
    @Import(name="authenticationConfiguration")
      private final @Nullable Output<FhirServiceAuthenticationConfigurationArgs> authenticationConfiguration;

    public Output<FhirServiceAuthenticationConfigurationArgs> getAuthenticationConfiguration() {
        return this.authenticationConfiguration == null ? Output.empty() : this.authenticationConfiguration;
    }

    /**
     * Fhir Service Cors configuration.
     * 
     */
    @Import(name="corsConfiguration")
      private final @Nullable Output<FhirServiceCorsConfigurationArgs> corsConfiguration;

    public Output<FhirServiceCorsConfigurationArgs> getCorsConfiguration() {
        return this.corsConfiguration == null ? Output.empty() : this.corsConfiguration;
    }

    /**
     * Fhir Service export configuration.
     * 
     */
    @Import(name="exportConfiguration")
      private final @Nullable Output<FhirServiceExportConfigurationArgs> exportConfiguration;

    public Output<FhirServiceExportConfigurationArgs> getExportConfiguration() {
        return this.exportConfiguration == null ? Output.empty() : this.exportConfiguration;
    }

    /**
     * The name of FHIR Service resource.
     * 
     */
    @Import(name="fhirServiceName")
      private final @Nullable Output<String> fhirServiceName;

    public Output<String> getFhirServiceName() {
        return this.fhirServiceName == null ? Output.empty() : this.fhirServiceName;
    }

    /**
     * Setting indicating whether the service has a managed identity associated with it.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<ServiceManagedIdentityIdentityArgs> identity;

    public Output<ServiceManagedIdentityIdentityArgs> getIdentity() {
        return this.identity == null ? Output.empty() : this.identity;
    }

    /**
     * The kind of the service.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<Either<String,FhirServiceKind>> kind;

    public Output<Either<String,FhirServiceKind>> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * The resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name of the resource group that contains the service instance.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The name of workspace resource.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public FhirServiceArgs(
        @Nullable Output<List<FhirServiceAccessPolicyEntryArgs>> accessPolicies,
        @Nullable Output<FhirServiceAcrConfigurationArgs> acrConfiguration,
        @Nullable Output<FhirServiceAuthenticationConfigurationArgs> authenticationConfiguration,
        @Nullable Output<FhirServiceCorsConfigurationArgs> corsConfiguration,
        @Nullable Output<FhirServiceExportConfigurationArgs> exportConfiguration,
        @Nullable Output<String> fhirServiceName,
        @Nullable Output<ServiceManagedIdentityIdentityArgs> identity,
        @Nullable Output<Either<String,FhirServiceKind>> kind,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags,
        Output<String> workspaceName) {
        this.accessPolicies = accessPolicies;
        this.acrConfiguration = acrConfiguration;
        this.authenticationConfiguration = authenticationConfiguration;
        this.corsConfiguration = corsConfiguration;
        this.exportConfiguration = exportConfiguration;
        this.fhirServiceName = fhirServiceName;
        this.identity = identity;
        this.kind = kind;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private FhirServiceArgs() {
        this.accessPolicies = Output.empty();
        this.acrConfiguration = Output.empty();
        this.authenticationConfiguration = Output.empty();
        this.corsConfiguration = Output.empty();
        this.exportConfiguration = Output.empty();
        this.fhirServiceName = Output.empty();
        this.identity = Output.empty();
        this.kind = Output.empty();
        this.location = Output.empty();
        this.resourceGroupName = Output.empty();
        this.tags = Output.empty();
        this.workspaceName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FhirServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<FhirServiceAccessPolicyEntryArgs>> accessPolicies;
        private @Nullable Output<FhirServiceAcrConfigurationArgs> acrConfiguration;
        private @Nullable Output<FhirServiceAuthenticationConfigurationArgs> authenticationConfiguration;
        private @Nullable Output<FhirServiceCorsConfigurationArgs> corsConfiguration;
        private @Nullable Output<FhirServiceExportConfigurationArgs> exportConfiguration;
        private @Nullable Output<String> fhirServiceName;
        private @Nullable Output<ServiceManagedIdentityIdentityArgs> identity;
        private @Nullable Output<Either<String,FhirServiceKind>> kind;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(FhirServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicies = defaults.accessPolicies;
    	      this.acrConfiguration = defaults.acrConfiguration;
    	      this.authenticationConfiguration = defaults.authenticationConfiguration;
    	      this.corsConfiguration = defaults.corsConfiguration;
    	      this.exportConfiguration = defaults.exportConfiguration;
    	      this.fhirServiceName = defaults.fhirServiceName;
    	      this.identity = defaults.identity;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder accessPolicies(@Nullable Output<List<FhirServiceAccessPolicyEntryArgs>> accessPolicies) {
            this.accessPolicies = accessPolicies;
            return this;
        }

        public Builder accessPolicies(@Nullable List<FhirServiceAccessPolicyEntryArgs> accessPolicies) {
            this.accessPolicies = Output.ofNullable(accessPolicies);
            return this;
        }

        public Builder acrConfiguration(@Nullable Output<FhirServiceAcrConfigurationArgs> acrConfiguration) {
            this.acrConfiguration = acrConfiguration;
            return this;
        }

        public Builder acrConfiguration(@Nullable FhirServiceAcrConfigurationArgs acrConfiguration) {
            this.acrConfiguration = Output.ofNullable(acrConfiguration);
            return this;
        }

        public Builder authenticationConfiguration(@Nullable Output<FhirServiceAuthenticationConfigurationArgs> authenticationConfiguration) {
            this.authenticationConfiguration = authenticationConfiguration;
            return this;
        }

        public Builder authenticationConfiguration(@Nullable FhirServiceAuthenticationConfigurationArgs authenticationConfiguration) {
            this.authenticationConfiguration = Output.ofNullable(authenticationConfiguration);
            return this;
        }

        public Builder corsConfiguration(@Nullable Output<FhirServiceCorsConfigurationArgs> corsConfiguration) {
            this.corsConfiguration = corsConfiguration;
            return this;
        }

        public Builder corsConfiguration(@Nullable FhirServiceCorsConfigurationArgs corsConfiguration) {
            this.corsConfiguration = Output.ofNullable(corsConfiguration);
            return this;
        }

        public Builder exportConfiguration(@Nullable Output<FhirServiceExportConfigurationArgs> exportConfiguration) {
            this.exportConfiguration = exportConfiguration;
            return this;
        }

        public Builder exportConfiguration(@Nullable FhirServiceExportConfigurationArgs exportConfiguration) {
            this.exportConfiguration = Output.ofNullable(exportConfiguration);
            return this;
        }

        public Builder fhirServiceName(@Nullable Output<String> fhirServiceName) {
            this.fhirServiceName = fhirServiceName;
            return this;
        }

        public Builder fhirServiceName(@Nullable String fhirServiceName) {
            this.fhirServiceName = Output.ofNullable(fhirServiceName);
            return this;
        }

        public Builder identity(@Nullable Output<ServiceManagedIdentityIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder identity(@Nullable ServiceManagedIdentityIdentityArgs identity) {
            this.identity = Output.ofNullable(identity);
            return this;
        }

        public Builder kind(@Nullable Output<Either<String,FhirServiceKind>> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable Either<String,FhirServiceKind> kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public FhirServiceArgs build() {
            return new FhirServiceArgs(accessPolicies, acrConfiguration, authenticationConfiguration, corsConfiguration, exportConfiguration, fhirServiceName, identity, kind, location, resourceGroupName, tags, workspaceName);
        }
    }
}
