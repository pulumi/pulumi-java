// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.authorization;

import io.pulumi.azurenative.authorization.enums.PolicyType;
import io.pulumi.azurenative.authorization.inputs.ParameterDefinitionsValueArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PolicyDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final PolicyDefinitionArgs Empty = new PolicyDefinitionArgs();

    /**
     * The policy definition description.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The display name of the policy definition.
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
     * 
     */
    @InputImport(name="metadata")
      private final @Nullable Input<Object> metadata;

    public Input<Object> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    /**
     * The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
     * 
     */
    @InputImport(name="mode")
      private final @Nullable Input<String> mode;

    public Input<String> getMode() {
        return this.mode == null ? Input.empty() : this.mode;
    }

    /**
     * The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Input<Map<String,ParameterDefinitionsValueArgs>> parameters;

    public Input<Map<String,ParameterDefinitionsValueArgs>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * The name of the policy definition to create.
     * 
     */
    @InputImport(name="policyDefinitionName")
      private final @Nullable Input<String> policyDefinitionName;

    public Input<String> getPolicyDefinitionName() {
        return this.policyDefinitionName == null ? Input.empty() : this.policyDefinitionName;
    }

    /**
     * The policy rule.
     * 
     */
    @InputImport(name="policyRule")
      private final @Nullable Input<Object> policyRule;

    public Input<Object> getPolicyRule() {
        return this.policyRule == null ? Input.empty() : this.policyRule;
    }

    /**
     * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
     * 
     */
    @InputImport(name="policyType")
      private final @Nullable Input<Either<String,PolicyType>> policyType;

    public Input<Either<String,PolicyType>> getPolicyType() {
        return this.policyType == null ? Input.empty() : this.policyType;
    }

    public PolicyDefinitionArgs(
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        @Nullable Input<Object> metadata,
        @Nullable Input<String> mode,
        @Nullable Input<Map<String,ParameterDefinitionsValueArgs>> parameters,
        @Nullable Input<String> policyDefinitionName,
        @Nullable Input<Object> policyRule,
        @Nullable Input<Either<String,PolicyType>> policyType) {
        this.description = description;
        this.displayName = displayName;
        this.metadata = metadata;
        this.mode = mode == null ? Input.ofNullable("Indexed") : mode;
        this.parameters = parameters;
        this.policyDefinitionName = policyDefinitionName;
        this.policyRule = policyRule;
        this.policyType = policyType;
    }

    private PolicyDefinitionArgs() {
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.metadata = Input.empty();
        this.mode = Input.empty();
        this.parameters = Input.empty();
        this.policyDefinitionName = Input.empty();
        this.policyRule = Input.empty();
        this.policyType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private @Nullable Input<Object> metadata;
        private @Nullable Input<String> mode;
        private @Nullable Input<Map<String,ParameterDefinitionsValueArgs>> parameters;
        private @Nullable Input<String> policyDefinitionName;
        private @Nullable Input<Object> policyRule;
        private @Nullable Input<Either<String,PolicyType>> policyType;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.metadata = defaults.metadata;
    	      this.mode = defaults.mode;
    	      this.parameters = defaults.parameters;
    	      this.policyDefinitionName = defaults.policyDefinitionName;
    	      this.policyRule = defaults.policyRule;
    	      this.policyType = defaults.policyType;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder displayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder metadata(@Nullable Input<Object> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(@Nullable Object metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public Builder mode(@Nullable Input<String> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(@Nullable String mode) {
            this.mode = Input.ofNullable(mode);
            return this;
        }

        public Builder parameters(@Nullable Input<Map<String,ParameterDefinitionsValueArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Map<String,ParameterDefinitionsValueArgs> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder policyDefinitionName(@Nullable Input<String> policyDefinitionName) {
            this.policyDefinitionName = policyDefinitionName;
            return this;
        }

        public Builder policyDefinitionName(@Nullable String policyDefinitionName) {
            this.policyDefinitionName = Input.ofNullable(policyDefinitionName);
            return this;
        }

        public Builder policyRule(@Nullable Input<Object> policyRule) {
            this.policyRule = policyRule;
            return this;
        }

        public Builder policyRule(@Nullable Object policyRule) {
            this.policyRule = Input.ofNullable(policyRule);
            return this;
        }

        public Builder policyType(@Nullable Input<Either<String,PolicyType>> policyType) {
            this.policyType = policyType;
            return this;
        }

        public Builder policyType(@Nullable Either<String,PolicyType> policyType) {
            this.policyType = Input.ofNullable(policyType);
            return this;
        }
        public PolicyDefinitionArgs build() {
            return new PolicyDefinitionArgs(description, displayName, metadata, mode, parameters, policyDefinitionName, policyRule, policyType);
        }
    }
}
