// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.chaos.inputs;

import io.pulumi.azurenative.chaos.inputs.BranchArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Model that represents a step in the Experiment resource.
 * 
 */
public final class StepArgs extends io.pulumi.resources.ResourceArgs {

    public static final StepArgs Empty = new StepArgs();

    /**
     * List of branches.
     * 
     */
    @InputImport(name="branches", required=true)
    private final Input<List<BranchArgs>> branches;

    public Input<List<BranchArgs>> getBranches() {
        return this.branches;
    }

    /**
     * String of the step name.
     * 
     */
    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    public StepArgs(
        Input<List<BranchArgs>> branches,
        Input<String> name) {
        this.branches = Objects.requireNonNull(branches, "expected parameter 'branches' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
    }

    private StepArgs() {
        this.branches = Input.empty();
        this.name = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<BranchArgs>> branches;
        private Input<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(StepArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branches = defaults.branches;
    	      this.name = defaults.name;
        }

        public Builder setBranches(Input<List<BranchArgs>> branches) {
            this.branches = Objects.requireNonNull(branches);
            return this;
        }

        public Builder setBranches(List<BranchArgs> branches) {
            this.branches = Input.of(Objects.requireNonNull(branches));
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public StepArgs build() {
            return new StepArgs(branches, name);
        }
    }
}
