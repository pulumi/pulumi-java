// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A2A protected managed disk details.
 * 
 */
public final class A2AProtectedManagedDiskDetailsResponse extends io.pulumi.resources.InvokeArgs {

    public static final A2AProtectedManagedDiskDetailsResponse Empty = new A2AProtectedManagedDiskDetailsResponse();

    /**
     * The disk level operations list.
     * 
     */
    @InputImport(name="allowedDiskLevelOperation")
      private final @Nullable List<String> allowedDiskLevelOperation;

    public List<String> getAllowedDiskLevelOperation() {
        return this.allowedDiskLevelOperation == null ? List.of() : this.allowedDiskLevelOperation;
    }

    /**
     * The data pending at source virtual machine in MB.
     * 
     */
    @InputImport(name="dataPendingAtSourceAgentInMB")
      private final @Nullable Double dataPendingAtSourceAgentInMB;

    public Optional<Double> getDataPendingAtSourceAgentInMB() {
        return this.dataPendingAtSourceAgentInMB == null ? Optional.empty() : Optional.ofNullable(this.dataPendingAtSourceAgentInMB);
    }

    /**
     * The data pending for replication in MB at staging account.
     * 
     */
    @InputImport(name="dataPendingInStagingStorageAccountInMB")
      private final @Nullable Double dataPendingInStagingStorageAccountInMB;

    public Optional<Double> getDataPendingInStagingStorageAccountInMB() {
        return this.dataPendingInStagingStorageAccountInMB == null ? Optional.empty() : Optional.ofNullable(this.dataPendingInStagingStorageAccountInMB);
    }

    /**
     * The KeyVault resource id for secret (BEK).
     * 
     */
    @InputImport(name="dekKeyVaultArmId")
      private final @Nullable String dekKeyVaultArmId;

    public Optional<String> getDekKeyVaultArmId() {
        return this.dekKeyVaultArmId == null ? Optional.empty() : Optional.ofNullable(this.dekKeyVaultArmId);
    }

    /**
     * The disk capacity in bytes.
     * 
     */
    @InputImport(name="diskCapacityInBytes")
      private final @Nullable Double diskCapacityInBytes;

    public Optional<Double> getDiskCapacityInBytes() {
        return this.diskCapacityInBytes == null ? Optional.empty() : Optional.ofNullable(this.diskCapacityInBytes);
    }

    /**
     * The managed disk Arm id.
     * 
     */
    @InputImport(name="diskId")
      private final @Nullable String diskId;

    public Optional<String> getDiskId() {
        return this.diskId == null ? Optional.empty() : Optional.ofNullable(this.diskId);
    }

    /**
     * The disk name.
     * 
     */
    @InputImport(name="diskName")
      private final @Nullable String diskName;

    public Optional<String> getDiskName() {
        return this.diskName == null ? Optional.empty() : Optional.ofNullable(this.diskName);
    }

    /**
     * The disk state.
     * 
     */
    @InputImport(name="diskState")
      private final @Nullable String diskState;

    public Optional<String> getDiskState() {
        return this.diskState == null ? Optional.empty() : Optional.ofNullable(this.diskState);
    }

    /**
     * The type of disk.
     * 
     */
    @InputImport(name="diskType")
      private final @Nullable String diskType;

    public Optional<String> getDiskType() {
        return this.diskType == null ? Optional.empty() : Optional.ofNullable(this.diskType);
    }

    /**
     * The failover name for the managed disk.
     * 
     */
    @InputImport(name="failoverDiskName")
      private final @Nullable String failoverDiskName;

    public Optional<String> getFailoverDiskName() {
        return this.failoverDiskName == null ? Optional.empty() : Optional.ofNullable(this.failoverDiskName);
    }

    /**
     * A value indicating whether vm has encrypted os disk or not.
     * 
     */
    @InputImport(name="isDiskEncrypted")
      private final @Nullable Boolean isDiskEncrypted;

    public Optional<Boolean> getIsDiskEncrypted() {
        return this.isDiskEncrypted == null ? Optional.empty() : Optional.ofNullable(this.isDiskEncrypted);
    }

    /**
     * A value indicating whether disk key got encrypted or not.
     * 
     */
    @InputImport(name="isDiskKeyEncrypted")
      private final @Nullable Boolean isDiskKeyEncrypted;

    public Optional<Boolean> getIsDiskKeyEncrypted() {
        return this.isDiskKeyEncrypted == null ? Optional.empty() : Optional.ofNullable(this.isDiskKeyEncrypted);
    }

    /**
     * The KeyVault resource id for key (KEK).
     * 
     */
    @InputImport(name="kekKeyVaultArmId")
      private final @Nullable String kekKeyVaultArmId;

    public Optional<String> getKekKeyVaultArmId() {
        return this.kekKeyVaultArmId == null ? Optional.empty() : Optional.ofNullable(this.kekKeyVaultArmId);
    }

    /**
     * The key URL / identifier (KEK).
     * 
     */
    @InputImport(name="keyIdentifier")
      private final @Nullable String keyIdentifier;

    public Optional<String> getKeyIdentifier() {
        return this.keyIdentifier == null ? Optional.empty() : Optional.ofNullable(this.keyIdentifier);
    }

    /**
     * The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
     * 
     */
    @InputImport(name="monitoringJobType")
      private final @Nullable String monitoringJobType;

    public Optional<String> getMonitoringJobType() {
        return this.monitoringJobType == null ? Optional.empty() : Optional.ofNullable(this.monitoringJobType);
    }

    /**
     * The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
     * 
     */
    @InputImport(name="monitoringPercentageCompletion")
      private final @Nullable Integer monitoringPercentageCompletion;

    public Optional<Integer> getMonitoringPercentageCompletion() {
        return this.monitoringPercentageCompletion == null ? Optional.empty() : Optional.ofNullable(this.monitoringPercentageCompletion);
    }

    /**
     * The primary staging storage account.
     * 
     */
    @InputImport(name="primaryStagingAzureStorageAccountId")
      private final @Nullable String primaryStagingAzureStorageAccountId;

    public Optional<String> getPrimaryStagingAzureStorageAccountId() {
        return this.primaryStagingAzureStorageAccountId == null ? Optional.empty() : Optional.ofNullable(this.primaryStagingAzureStorageAccountId);
    }

    /**
     * The recovery disk encryption set Id.
     * 
     */
    @InputImport(name="recoveryDiskEncryptionSetId")
      private final @Nullable String recoveryDiskEncryptionSetId;

    public Optional<String> getRecoveryDiskEncryptionSetId() {
        return this.recoveryDiskEncryptionSetId == null ? Optional.empty() : Optional.ofNullable(this.recoveryDiskEncryptionSetId);
    }

    /**
     * The replica disk type. Its an optional value and will be same as source disk type if not user provided.
     * 
     */
    @InputImport(name="recoveryReplicaDiskAccountType")
      private final @Nullable String recoveryReplicaDiskAccountType;

    public Optional<String> getRecoveryReplicaDiskAccountType() {
        return this.recoveryReplicaDiskAccountType == null ? Optional.empty() : Optional.ofNullable(this.recoveryReplicaDiskAccountType);
    }

    /**
     * Recovery replica disk Arm Id.
     * 
     */
    @InputImport(name="recoveryReplicaDiskId")
      private final @Nullable String recoveryReplicaDiskId;

    public Optional<String> getRecoveryReplicaDiskId() {
        return this.recoveryReplicaDiskId == null ? Optional.empty() : Optional.ofNullable(this.recoveryReplicaDiskId);
    }

    /**
     * The recovery disk resource group Arm Id.
     * 
     */
    @InputImport(name="recoveryResourceGroupId")
      private final @Nullable String recoveryResourceGroupId;

    public Optional<String> getRecoveryResourceGroupId() {
        return this.recoveryResourceGroupId == null ? Optional.empty() : Optional.ofNullable(this.recoveryResourceGroupId);
    }

    /**
     * The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
     * 
     */
    @InputImport(name="recoveryTargetDiskAccountType")
      private final @Nullable String recoveryTargetDiskAccountType;

    public Optional<String> getRecoveryTargetDiskAccountType() {
        return this.recoveryTargetDiskAccountType == null ? Optional.empty() : Optional.ofNullable(this.recoveryTargetDiskAccountType);
    }

    /**
     * Recovery target disk Arm Id.
     * 
     */
    @InputImport(name="recoveryTargetDiskId")
      private final @Nullable String recoveryTargetDiskId;

    public Optional<String> getRecoveryTargetDiskId() {
        return this.recoveryTargetDiskId == null ? Optional.empty() : Optional.ofNullable(this.recoveryTargetDiskId);
    }

    /**
     * A value indicating whether resync is required for this disk.
     * 
     */
    @InputImport(name="resyncRequired")
      private final @Nullable Boolean resyncRequired;

    public Optional<Boolean> getResyncRequired() {
        return this.resyncRequired == null ? Optional.empty() : Optional.ofNullable(this.resyncRequired);
    }

    /**
     * The secret URL / identifier (BEK).
     * 
     */
    @InputImport(name="secretIdentifier")
      private final @Nullable String secretIdentifier;

    public Optional<String> getSecretIdentifier() {
        return this.secretIdentifier == null ? Optional.empty() : Optional.ofNullable(this.secretIdentifier);
    }

    /**
     * The test failover name for the managed disk.
     * 
     */
    @InputImport(name="tfoDiskName")
      private final @Nullable String tfoDiskName;

    public Optional<String> getTfoDiskName() {
        return this.tfoDiskName == null ? Optional.empty() : Optional.ofNullable(this.tfoDiskName);
    }

    public A2AProtectedManagedDiskDetailsResponse(
        @Nullable List<String> allowedDiskLevelOperation,
        @Nullable Double dataPendingAtSourceAgentInMB,
        @Nullable Double dataPendingInStagingStorageAccountInMB,
        @Nullable String dekKeyVaultArmId,
        @Nullable Double diskCapacityInBytes,
        @Nullable String diskId,
        @Nullable String diskName,
        @Nullable String diskState,
        @Nullable String diskType,
        @Nullable String failoverDiskName,
        @Nullable Boolean isDiskEncrypted,
        @Nullable Boolean isDiskKeyEncrypted,
        @Nullable String kekKeyVaultArmId,
        @Nullable String keyIdentifier,
        @Nullable String monitoringJobType,
        @Nullable Integer monitoringPercentageCompletion,
        @Nullable String primaryStagingAzureStorageAccountId,
        @Nullable String recoveryDiskEncryptionSetId,
        @Nullable String recoveryReplicaDiskAccountType,
        @Nullable String recoveryReplicaDiskId,
        @Nullable String recoveryResourceGroupId,
        @Nullable String recoveryTargetDiskAccountType,
        @Nullable String recoveryTargetDiskId,
        @Nullable Boolean resyncRequired,
        @Nullable String secretIdentifier,
        @Nullable String tfoDiskName) {
        this.allowedDiskLevelOperation = allowedDiskLevelOperation;
        this.dataPendingAtSourceAgentInMB = dataPendingAtSourceAgentInMB;
        this.dataPendingInStagingStorageAccountInMB = dataPendingInStagingStorageAccountInMB;
        this.dekKeyVaultArmId = dekKeyVaultArmId;
        this.diskCapacityInBytes = diskCapacityInBytes;
        this.diskId = diskId;
        this.diskName = diskName;
        this.diskState = diskState;
        this.diskType = diskType;
        this.failoverDiskName = failoverDiskName;
        this.isDiskEncrypted = isDiskEncrypted;
        this.isDiskKeyEncrypted = isDiskKeyEncrypted;
        this.kekKeyVaultArmId = kekKeyVaultArmId;
        this.keyIdentifier = keyIdentifier;
        this.monitoringJobType = monitoringJobType;
        this.monitoringPercentageCompletion = monitoringPercentageCompletion;
        this.primaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
        this.recoveryDiskEncryptionSetId = recoveryDiskEncryptionSetId;
        this.recoveryReplicaDiskAccountType = recoveryReplicaDiskAccountType;
        this.recoveryReplicaDiskId = recoveryReplicaDiskId;
        this.recoveryResourceGroupId = recoveryResourceGroupId;
        this.recoveryTargetDiskAccountType = recoveryTargetDiskAccountType;
        this.recoveryTargetDiskId = recoveryTargetDiskId;
        this.resyncRequired = resyncRequired;
        this.secretIdentifier = secretIdentifier;
        this.tfoDiskName = tfoDiskName;
    }

    private A2AProtectedManagedDiskDetailsResponse() {
        this.allowedDiskLevelOperation = List.of();
        this.dataPendingAtSourceAgentInMB = null;
        this.dataPendingInStagingStorageAccountInMB = null;
        this.dekKeyVaultArmId = null;
        this.diskCapacityInBytes = null;
        this.diskId = null;
        this.diskName = null;
        this.diskState = null;
        this.diskType = null;
        this.failoverDiskName = null;
        this.isDiskEncrypted = null;
        this.isDiskKeyEncrypted = null;
        this.kekKeyVaultArmId = null;
        this.keyIdentifier = null;
        this.monitoringJobType = null;
        this.monitoringPercentageCompletion = null;
        this.primaryStagingAzureStorageAccountId = null;
        this.recoveryDiskEncryptionSetId = null;
        this.recoveryReplicaDiskAccountType = null;
        this.recoveryReplicaDiskId = null;
        this.recoveryResourceGroupId = null;
        this.recoveryTargetDiskAccountType = null;
        this.recoveryTargetDiskId = null;
        this.resyncRequired = null;
        this.secretIdentifier = null;
        this.tfoDiskName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(A2AProtectedManagedDiskDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> allowedDiskLevelOperation;
        private @Nullable Double dataPendingAtSourceAgentInMB;
        private @Nullable Double dataPendingInStagingStorageAccountInMB;
        private @Nullable String dekKeyVaultArmId;
        private @Nullable Double diskCapacityInBytes;
        private @Nullable String diskId;
        private @Nullable String diskName;
        private @Nullable String diskState;
        private @Nullable String diskType;
        private @Nullable String failoverDiskName;
        private @Nullable Boolean isDiskEncrypted;
        private @Nullable Boolean isDiskKeyEncrypted;
        private @Nullable String kekKeyVaultArmId;
        private @Nullable String keyIdentifier;
        private @Nullable String monitoringJobType;
        private @Nullable Integer monitoringPercentageCompletion;
        private @Nullable String primaryStagingAzureStorageAccountId;
        private @Nullable String recoveryDiskEncryptionSetId;
        private @Nullable String recoveryReplicaDiskAccountType;
        private @Nullable String recoveryReplicaDiskId;
        private @Nullable String recoveryResourceGroupId;
        private @Nullable String recoveryTargetDiskAccountType;
        private @Nullable String recoveryTargetDiskId;
        private @Nullable Boolean resyncRequired;
        private @Nullable String secretIdentifier;
        private @Nullable String tfoDiskName;

        public Builder() {
    	      // Empty
        }

        public Builder(A2AProtectedManagedDiskDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedDiskLevelOperation = defaults.allowedDiskLevelOperation;
    	      this.dataPendingAtSourceAgentInMB = defaults.dataPendingAtSourceAgentInMB;
    	      this.dataPendingInStagingStorageAccountInMB = defaults.dataPendingInStagingStorageAccountInMB;
    	      this.dekKeyVaultArmId = defaults.dekKeyVaultArmId;
    	      this.diskCapacityInBytes = defaults.diskCapacityInBytes;
    	      this.diskId = defaults.diskId;
    	      this.diskName = defaults.diskName;
    	      this.diskState = defaults.diskState;
    	      this.diskType = defaults.diskType;
    	      this.failoverDiskName = defaults.failoverDiskName;
    	      this.isDiskEncrypted = defaults.isDiskEncrypted;
    	      this.isDiskKeyEncrypted = defaults.isDiskKeyEncrypted;
    	      this.kekKeyVaultArmId = defaults.kekKeyVaultArmId;
    	      this.keyIdentifier = defaults.keyIdentifier;
    	      this.monitoringJobType = defaults.monitoringJobType;
    	      this.monitoringPercentageCompletion = defaults.monitoringPercentageCompletion;
    	      this.primaryStagingAzureStorageAccountId = defaults.primaryStagingAzureStorageAccountId;
    	      this.recoveryDiskEncryptionSetId = defaults.recoveryDiskEncryptionSetId;
    	      this.recoveryReplicaDiskAccountType = defaults.recoveryReplicaDiskAccountType;
    	      this.recoveryReplicaDiskId = defaults.recoveryReplicaDiskId;
    	      this.recoveryResourceGroupId = defaults.recoveryResourceGroupId;
    	      this.recoveryTargetDiskAccountType = defaults.recoveryTargetDiskAccountType;
    	      this.recoveryTargetDiskId = defaults.recoveryTargetDiskId;
    	      this.resyncRequired = defaults.resyncRequired;
    	      this.secretIdentifier = defaults.secretIdentifier;
    	      this.tfoDiskName = defaults.tfoDiskName;
        }

        public Builder setAllowedDiskLevelOperation(@Nullable List<String> allowedDiskLevelOperation) {
            this.allowedDiskLevelOperation = allowedDiskLevelOperation;
            return this;
        }

        public Builder setDataPendingAtSourceAgentInMB(@Nullable Double dataPendingAtSourceAgentInMB) {
            this.dataPendingAtSourceAgentInMB = dataPendingAtSourceAgentInMB;
            return this;
        }

        public Builder setDataPendingInStagingStorageAccountInMB(@Nullable Double dataPendingInStagingStorageAccountInMB) {
            this.dataPendingInStagingStorageAccountInMB = dataPendingInStagingStorageAccountInMB;
            return this;
        }

        public Builder setDekKeyVaultArmId(@Nullable String dekKeyVaultArmId) {
            this.dekKeyVaultArmId = dekKeyVaultArmId;
            return this;
        }

        public Builder setDiskCapacityInBytes(@Nullable Double diskCapacityInBytes) {
            this.diskCapacityInBytes = diskCapacityInBytes;
            return this;
        }

        public Builder setDiskId(@Nullable String diskId) {
            this.diskId = diskId;
            return this;
        }

        public Builder setDiskName(@Nullable String diskName) {
            this.diskName = diskName;
            return this;
        }

        public Builder setDiskState(@Nullable String diskState) {
            this.diskState = diskState;
            return this;
        }

        public Builder setDiskType(@Nullable String diskType) {
            this.diskType = diskType;
            return this;
        }

        public Builder setFailoverDiskName(@Nullable String failoverDiskName) {
            this.failoverDiskName = failoverDiskName;
            return this;
        }

        public Builder setIsDiskEncrypted(@Nullable Boolean isDiskEncrypted) {
            this.isDiskEncrypted = isDiskEncrypted;
            return this;
        }

        public Builder setIsDiskKeyEncrypted(@Nullable Boolean isDiskKeyEncrypted) {
            this.isDiskKeyEncrypted = isDiskKeyEncrypted;
            return this;
        }

        public Builder setKekKeyVaultArmId(@Nullable String kekKeyVaultArmId) {
            this.kekKeyVaultArmId = kekKeyVaultArmId;
            return this;
        }

        public Builder setKeyIdentifier(@Nullable String keyIdentifier) {
            this.keyIdentifier = keyIdentifier;
            return this;
        }

        public Builder setMonitoringJobType(@Nullable String monitoringJobType) {
            this.monitoringJobType = monitoringJobType;
            return this;
        }

        public Builder setMonitoringPercentageCompletion(@Nullable Integer monitoringPercentageCompletion) {
            this.monitoringPercentageCompletion = monitoringPercentageCompletion;
            return this;
        }

        public Builder setPrimaryStagingAzureStorageAccountId(@Nullable String primaryStagingAzureStorageAccountId) {
            this.primaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
            return this;
        }

        public Builder setRecoveryDiskEncryptionSetId(@Nullable String recoveryDiskEncryptionSetId) {
            this.recoveryDiskEncryptionSetId = recoveryDiskEncryptionSetId;
            return this;
        }

        public Builder setRecoveryReplicaDiskAccountType(@Nullable String recoveryReplicaDiskAccountType) {
            this.recoveryReplicaDiskAccountType = recoveryReplicaDiskAccountType;
            return this;
        }

        public Builder setRecoveryReplicaDiskId(@Nullable String recoveryReplicaDiskId) {
            this.recoveryReplicaDiskId = recoveryReplicaDiskId;
            return this;
        }

        public Builder setRecoveryResourceGroupId(@Nullable String recoveryResourceGroupId) {
            this.recoveryResourceGroupId = recoveryResourceGroupId;
            return this;
        }

        public Builder setRecoveryTargetDiskAccountType(@Nullable String recoveryTargetDiskAccountType) {
            this.recoveryTargetDiskAccountType = recoveryTargetDiskAccountType;
            return this;
        }

        public Builder setRecoveryTargetDiskId(@Nullable String recoveryTargetDiskId) {
            this.recoveryTargetDiskId = recoveryTargetDiskId;
            return this;
        }

        public Builder setResyncRequired(@Nullable Boolean resyncRequired) {
            this.resyncRequired = resyncRequired;
            return this;
        }

        public Builder setSecretIdentifier(@Nullable String secretIdentifier) {
            this.secretIdentifier = secretIdentifier;
            return this;
        }

        public Builder setTfoDiskName(@Nullable String tfoDiskName) {
            this.tfoDiskName = tfoDiskName;
            return this;
        }
        public A2AProtectedManagedDiskDetailsResponse build() {
            return new A2AProtectedManagedDiskDetailsResponse(allowedDiskLevelOperation, dataPendingAtSourceAgentInMB, dataPendingInStagingStorageAccountInMB, dekKeyVaultArmId, diskCapacityInBytes, diskId, diskName, diskState, diskType, failoverDiskName, isDiskEncrypted, isDiskKeyEncrypted, kekKeyVaultArmId, keyIdentifier, monitoringJobType, monitoringPercentageCompletion, primaryStagingAzureStorageAccountId, recoveryDiskEncryptionSetId, recoveryReplicaDiskAccountType, recoveryReplicaDiskId, recoveryResourceGroupId, recoveryTargetDiskAccountType, recoveryTargetDiskId, resyncRequired, secretIdentifier, tfoDiskName);
        }
    }
}
