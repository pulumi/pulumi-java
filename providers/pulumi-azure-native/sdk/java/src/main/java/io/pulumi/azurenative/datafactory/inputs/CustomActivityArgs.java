// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import io.pulumi.azurenative.datafactory.inputs.ActivityPolicyArgs;
import io.pulumi.azurenative.datafactory.inputs.CustomActivityReferenceObjectArgs;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Custom activity type.
 * 
 */
public final class CustomActivityArgs extends io.pulumi.resources.ResourceArgs {

    public static final CustomActivityArgs Empty = new CustomActivityArgs();

    /**
     * Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
     * 
     */
    @Import(name="autoUserSpecification")
      private final @Nullable Output<Object> autoUserSpecification;

    public Output<Object> getAutoUserSpecification() {
        return this.autoUserSpecification == null ? Output.empty() : this.autoUserSpecification;
    }

    /**
     * Command for custom activity Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="command", required=true)
      private final Output<Object> command;

    public Output<Object> getCommand() {
        return this.command;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    public Output<List<ActivityDependencyArgs>> getDependsOn() {
        return this.dependsOn == null ? Output.empty() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
     * 
     */
    @Import(name="extendedProperties")
      private final @Nullable Output<Map<String,Object>> extendedProperties;

    public Output<Map<String,Object>> getExtendedProperties() {
        return this.extendedProperties == null ? Output.empty() : this.extendedProperties;
    }

    /**
     * Folder path for resource files Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="folderPath")
      private final @Nullable Output<Object> folderPath;

    public Output<Object> getFolderPath() {
        return this.folderPath == null ? Output.empty() : this.folderPath;
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
      private final @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Output<LinkedServiceReferenceArgs> getLinkedServiceName() {
        return this.linkedServiceName == null ? Output.empty() : this.linkedServiceName;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
      private final @Nullable Output<ActivityPolicyArgs> policy;

    public Output<ActivityPolicyArgs> getPolicy() {
        return this.policy == null ? Output.empty() : this.policy;
    }

    /**
     * Reference objects
     * 
     */
    @Import(name="referenceObjects")
      private final @Nullable Output<CustomActivityReferenceObjectArgs> referenceObjects;

    public Output<CustomActivityReferenceObjectArgs> getReferenceObjects() {
        return this.referenceObjects == null ? Output.empty() : this.referenceObjects;
    }

    /**
     * Resource linked service reference.
     * 
     */
    @Import(name="resourceLinkedService")
      private final @Nullable Output<LinkedServiceReferenceArgs> resourceLinkedService;

    public Output<LinkedServiceReferenceArgs> getResourceLinkedService() {
        return this.resourceLinkedService == null ? Output.empty() : this.resourceLinkedService;
    }

    /**
     * The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
     * 
     */
    @Import(name="retentionTimeInDays")
      private final @Nullable Output<Object> retentionTimeInDays;

    public Output<Object> getRetentionTimeInDays() {
        return this.retentionTimeInDays == null ? Output.empty() : this.retentionTimeInDays;
    }

    /**
     * Type of activity.
     * Expected value is 'Custom'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
      private final @Nullable Output<List<UserPropertyArgs>> userProperties;

    public Output<List<UserPropertyArgs>> getUserProperties() {
        return this.userProperties == null ? Output.empty() : this.userProperties;
    }

    public CustomActivityArgs(
        @Nullable Output<Object> autoUserSpecification,
        Output<Object> command,
        @Nullable Output<List<ActivityDependencyArgs>> dependsOn,
        @Nullable Output<String> description,
        @Nullable Output<Map<String,Object>> extendedProperties,
        @Nullable Output<Object> folderPath,
        @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName,
        Output<String> name,
        @Nullable Output<ActivityPolicyArgs> policy,
        @Nullable Output<CustomActivityReferenceObjectArgs> referenceObjects,
        @Nullable Output<LinkedServiceReferenceArgs> resourceLinkedService,
        @Nullable Output<Object> retentionTimeInDays,
        Output<String> type,
        @Nullable Output<List<UserPropertyArgs>> userProperties) {
        this.autoUserSpecification = autoUserSpecification;
        this.command = Objects.requireNonNull(command, "expected parameter 'command' to be non-null");
        this.dependsOn = dependsOn;
        this.description = description;
        this.extendedProperties = extendedProperties;
        this.folderPath = folderPath;
        this.linkedServiceName = linkedServiceName;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.policy = policy;
        this.referenceObjects = referenceObjects;
        this.resourceLinkedService = resourceLinkedService;
        this.retentionTimeInDays = retentionTimeInDays;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userProperties = userProperties;
    }

    private CustomActivityArgs() {
        this.autoUserSpecification = Output.empty();
        this.command = Output.empty();
        this.dependsOn = Output.empty();
        this.description = Output.empty();
        this.extendedProperties = Output.empty();
        this.folderPath = Output.empty();
        this.linkedServiceName = Output.empty();
        this.name = Output.empty();
        this.policy = Output.empty();
        this.referenceObjects = Output.empty();
        this.resourceLinkedService = Output.empty();
        this.retentionTimeInDays = Output.empty();
        this.type = Output.empty();
        this.userProperties = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Object> autoUserSpecification;
        private Output<Object> command;
        private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;
        private @Nullable Output<String> description;
        private @Nullable Output<Map<String,Object>> extendedProperties;
        private @Nullable Output<Object> folderPath;
        private @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;
        private Output<String> name;
        private @Nullable Output<ActivityPolicyArgs> policy;
        private @Nullable Output<CustomActivityReferenceObjectArgs> referenceObjects;
        private @Nullable Output<LinkedServiceReferenceArgs> resourceLinkedService;
        private @Nullable Output<Object> retentionTimeInDays;
        private Output<String> type;
        private @Nullable Output<List<UserPropertyArgs>> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomActivityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoUserSpecification = defaults.autoUserSpecification;
    	      this.command = defaults.command;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.extendedProperties = defaults.extendedProperties;
    	      this.folderPath = defaults.folderPath;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.referenceObjects = defaults.referenceObjects;
    	      this.resourceLinkedService = defaults.resourceLinkedService;
    	      this.retentionTimeInDays = defaults.retentionTimeInDays;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder autoUserSpecification(@Nullable Output<Object> autoUserSpecification) {
            this.autoUserSpecification = autoUserSpecification;
            return this;
        }
        public Builder autoUserSpecification(@Nullable Object autoUserSpecification) {
            this.autoUserSpecification = Output.ofNullable(autoUserSpecification);
            return this;
        }
        public Builder command(Output<Object> command) {
            this.command = Objects.requireNonNull(command);
            return this;
        }
        public Builder command(Object command) {
            this.command = Output.of(Objects.requireNonNull(command));
            return this;
        }
        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(@Nullable List<ActivityDependencyArgs> dependsOn) {
            this.dependsOn = Output.ofNullable(dependsOn);
            return this;
        }
        public Builder dependsOn(ActivityDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder extendedProperties(@Nullable Output<Map<String,Object>> extendedProperties) {
            this.extendedProperties = extendedProperties;
            return this;
        }
        public Builder extendedProperties(@Nullable Map<String,Object> extendedProperties) {
            this.extendedProperties = Output.ofNullable(extendedProperties);
            return this;
        }
        public Builder folderPath(@Nullable Output<Object> folderPath) {
            this.folderPath = folderPath;
            return this;
        }
        public Builder folderPath(@Nullable Object folderPath) {
            this.folderPath = Output.ofNullable(folderPath);
            return this;
        }
        public Builder linkedServiceName(@Nullable Output<LinkedServiceReferenceArgs> linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceArgs linkedServiceName) {
            this.linkedServiceName = Output.ofNullable(linkedServiceName);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder policy(@Nullable Output<ActivityPolicyArgs> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable ActivityPolicyArgs policy) {
            this.policy = Output.ofNullable(policy);
            return this;
        }
        public Builder referenceObjects(@Nullable Output<CustomActivityReferenceObjectArgs> referenceObjects) {
            this.referenceObjects = referenceObjects;
            return this;
        }
        public Builder referenceObjects(@Nullable CustomActivityReferenceObjectArgs referenceObjects) {
            this.referenceObjects = Output.ofNullable(referenceObjects);
            return this;
        }
        public Builder resourceLinkedService(@Nullable Output<LinkedServiceReferenceArgs> resourceLinkedService) {
            this.resourceLinkedService = resourceLinkedService;
            return this;
        }
        public Builder resourceLinkedService(@Nullable LinkedServiceReferenceArgs resourceLinkedService) {
            this.resourceLinkedService = Output.ofNullable(resourceLinkedService);
            return this;
        }
        public Builder retentionTimeInDays(@Nullable Output<Object> retentionTimeInDays) {
            this.retentionTimeInDays = retentionTimeInDays;
            return this;
        }
        public Builder retentionTimeInDays(@Nullable Object retentionTimeInDays) {
            this.retentionTimeInDays = Output.ofNullable(retentionTimeInDays);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyArgs> userProperties) {
            this.userProperties = Output.ofNullable(userProperties);
            return this;
        }
        public Builder userProperties(UserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }        public CustomActivityArgs build() {
            return new CustomActivityArgs(autoUserSpecification, command, dependsOn, description, extendedProperties, folderPath, linkedServiceName, name, policy, referenceObjects, resourceLinkedService, retentionTimeInDays, type, userProperties);
        }
    }
}
