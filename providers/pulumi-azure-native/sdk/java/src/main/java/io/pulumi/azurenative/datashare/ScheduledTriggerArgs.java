// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datashare;

import io.pulumi.azurenative.datashare.enums.RecurrenceInterval;
import io.pulumi.azurenative.datashare.enums.SynchronizationMode;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScheduledTriggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScheduledTriggerArgs Empty = new ScheduledTriggerArgs();

    /**
     * The name of the share account.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> getAccountName() {
        return this.accountName;
    }

    /**
     * Kind of synchronization on trigger.
     * Expected value is 'ScheduleBased'.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<String> kind;

    public Output<String> getKind() {
        return this.kind;
    }

    /**
     * Recurrence Interval
     * 
     */
    @Import(name="recurrenceInterval", required=true)
      private final Output<Either<String,RecurrenceInterval>> recurrenceInterval;

    public Output<Either<String,RecurrenceInterval>> getRecurrenceInterval() {
        return this.recurrenceInterval;
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the share subscription which will hold the data set sink.
     * 
     */
    @Import(name="shareSubscriptionName", required=true)
      private final Output<String> shareSubscriptionName;

    public Output<String> getShareSubscriptionName() {
        return this.shareSubscriptionName;
    }

    /**
     * Synchronization mode
     * 
     */
    @Import(name="synchronizationMode")
      private final @Nullable Output<Either<String,SynchronizationMode>> synchronizationMode;

    public Output<Either<String,SynchronizationMode>> getSynchronizationMode() {
        return this.synchronizationMode == null ? Output.empty() : this.synchronizationMode;
    }

    /**
     * Synchronization time
     * 
     */
    @Import(name="synchronizationTime", required=true)
      private final Output<String> synchronizationTime;

    public Output<String> getSynchronizationTime() {
        return this.synchronizationTime;
    }

    /**
     * The name of the trigger.
     * 
     */
    @Import(name="triggerName")
      private final @Nullable Output<String> triggerName;

    public Output<String> getTriggerName() {
        return this.triggerName == null ? Output.empty() : this.triggerName;
    }

    public ScheduledTriggerArgs(
        Output<String> accountName,
        Output<String> kind,
        Output<Either<String,RecurrenceInterval>> recurrenceInterval,
        Output<String> resourceGroupName,
        Output<String> shareSubscriptionName,
        @Nullable Output<Either<String,SynchronizationMode>> synchronizationMode,
        Output<String> synchronizationTime,
        @Nullable Output<String> triggerName) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.recurrenceInterval = Objects.requireNonNull(recurrenceInterval, "expected parameter 'recurrenceInterval' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.shareSubscriptionName = Objects.requireNonNull(shareSubscriptionName, "expected parameter 'shareSubscriptionName' to be non-null");
        this.synchronizationMode = synchronizationMode;
        this.synchronizationTime = Objects.requireNonNull(synchronizationTime, "expected parameter 'synchronizationTime' to be non-null");
        this.triggerName = triggerName;
    }

    private ScheduledTriggerArgs() {
        this.accountName = Output.empty();
        this.kind = Output.empty();
        this.recurrenceInterval = Output.empty();
        this.resourceGroupName = Output.empty();
        this.shareSubscriptionName = Output.empty();
        this.synchronizationMode = Output.empty();
        this.synchronizationTime = Output.empty();
        this.triggerName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduledTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private Output<String> kind;
        private Output<Either<String,RecurrenceInterval>> recurrenceInterval;
        private Output<String> resourceGroupName;
        private Output<String> shareSubscriptionName;
        private @Nullable Output<Either<String,SynchronizationMode>> synchronizationMode;
        private Output<String> synchronizationTime;
        private @Nullable Output<String> triggerName;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduledTriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.kind = defaults.kind;
    	      this.recurrenceInterval = defaults.recurrenceInterval;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.shareSubscriptionName = defaults.shareSubscriptionName;
    	      this.synchronizationMode = defaults.synchronizationMode;
    	      this.synchronizationTime = defaults.synchronizationTime;
    	      this.triggerName = defaults.triggerName;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }

        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }

        public Builder kind(Output<String> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder kind(String kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }

        public Builder recurrenceInterval(Output<Either<String,RecurrenceInterval>> recurrenceInterval) {
            this.recurrenceInterval = Objects.requireNonNull(recurrenceInterval);
            return this;
        }

        public Builder recurrenceInterval(Either<String,RecurrenceInterval> recurrenceInterval) {
            this.recurrenceInterval = Output.of(Objects.requireNonNull(recurrenceInterval));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder shareSubscriptionName(Output<String> shareSubscriptionName) {
            this.shareSubscriptionName = Objects.requireNonNull(shareSubscriptionName);
            return this;
        }

        public Builder shareSubscriptionName(String shareSubscriptionName) {
            this.shareSubscriptionName = Output.of(Objects.requireNonNull(shareSubscriptionName));
            return this;
        }

        public Builder synchronizationMode(@Nullable Output<Either<String,SynchronizationMode>> synchronizationMode) {
            this.synchronizationMode = synchronizationMode;
            return this;
        }

        public Builder synchronizationMode(@Nullable Either<String,SynchronizationMode> synchronizationMode) {
            this.synchronizationMode = Output.ofNullable(synchronizationMode);
            return this;
        }

        public Builder synchronizationTime(Output<String> synchronizationTime) {
            this.synchronizationTime = Objects.requireNonNull(synchronizationTime);
            return this;
        }

        public Builder synchronizationTime(String synchronizationTime) {
            this.synchronizationTime = Output.of(Objects.requireNonNull(synchronizationTime));
            return this;
        }

        public Builder triggerName(@Nullable Output<String> triggerName) {
            this.triggerName = triggerName;
            return this;
        }

        public Builder triggerName(@Nullable String triggerName) {
            this.triggerName = Output.ofNullable(triggerName);
            return this;
        }
        public ScheduledTriggerArgs build() {
            return new ScheduledTriggerArgs(accountName, kind, recurrenceInterval, resourceGroupName, shareSubscriptionName, synchronizationMode, synchronizationTime, triggerName);
        }
    }
}
