// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.enums.FrequencyUnit;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
 * 
 */
public final class BackupScheduleArgs extends io.pulumi.resources.ResourceArgs {

    public static final BackupScheduleArgs Empty = new BackupScheduleArgs();

    /**
     * How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
     * 
     */
    @InputImport(name="frequencyInterval", required=true)
        private final Input<Integer> frequencyInterval;

    public Input<Integer> getFrequencyInterval() {
        return this.frequencyInterval;
    }

    /**
     * The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
     * 
     */
    @InputImport(name="frequencyUnit", required=true)
        private final Input<FrequencyUnit> frequencyUnit;

    public Input<FrequencyUnit> getFrequencyUnit() {
        return this.frequencyUnit;
    }

    /**
     * True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
     * 
     */
    @InputImport(name="keepAtLeastOneBackup", required=true)
        private final Input<Boolean> keepAtLeastOneBackup;

    public Input<Boolean> getKeepAtLeastOneBackup() {
        return this.keepAtLeastOneBackup;
    }

    /**
     * After how many days backups should be deleted.
     * 
     */
    @InputImport(name="retentionPeriodInDays", required=true)
        private final Input<Integer> retentionPeriodInDays;

    public Input<Integer> getRetentionPeriodInDays() {
        return this.retentionPeriodInDays;
    }

    /**
     * When the schedule should start working.
     * 
     */
    @InputImport(name="startTime")
        private final @Nullable Input<String> startTime;

    public Input<String> getStartTime() {
        return this.startTime == null ? Input.empty() : this.startTime;
    }

    public BackupScheduleArgs(
        Input<Integer> frequencyInterval,
        Input<FrequencyUnit> frequencyUnit,
        Input<Boolean> keepAtLeastOneBackup,
        Input<Integer> retentionPeriodInDays,
        @Nullable Input<String> startTime) {
        this.frequencyInterval = frequencyInterval == null ? Input.ofNullable(7) : Objects.requireNonNull(frequencyInterval, "expected parameter 'frequencyInterval' to be non-null");
        this.frequencyUnit = frequencyUnit == null ? Input.ofNullable(io.pulumi.azurenative.web.enums.FrequencyUnit.Day) : Objects.requireNonNull(frequencyUnit, "expected parameter 'frequencyUnit' to be non-null");
        this.keepAtLeastOneBackup = keepAtLeastOneBackup == null ? Input.ofNullable(true) : Objects.requireNonNull(keepAtLeastOneBackup, "expected parameter 'keepAtLeastOneBackup' to be non-null");
        this.retentionPeriodInDays = retentionPeriodInDays == null ? Input.ofNullable(30) : Objects.requireNonNull(retentionPeriodInDays, "expected parameter 'retentionPeriodInDays' to be non-null");
        this.startTime = startTime;
    }

    private BackupScheduleArgs() {
        this.frequencyInterval = Input.empty();
        this.frequencyUnit = Input.empty();
        this.keepAtLeastOneBackup = Input.empty();
        this.retentionPeriodInDays = Input.empty();
        this.startTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Integer> frequencyInterval;
        private Input<FrequencyUnit> frequencyUnit;
        private Input<Boolean> keepAtLeastOneBackup;
        private Input<Integer> retentionPeriodInDays;
        private @Nullable Input<String> startTime;

        public Builder() {
    	      // Empty
        }

        public Builder(BackupScheduleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.frequencyInterval = defaults.frequencyInterval;
    	      this.frequencyUnit = defaults.frequencyUnit;
    	      this.keepAtLeastOneBackup = defaults.keepAtLeastOneBackup;
    	      this.retentionPeriodInDays = defaults.retentionPeriodInDays;
    	      this.startTime = defaults.startTime;
        }

        public Builder setFrequencyInterval(Input<Integer> frequencyInterval) {
            this.frequencyInterval = Objects.requireNonNull(frequencyInterval);
            return this;
        }

        public Builder setFrequencyInterval(Integer frequencyInterval) {
            this.frequencyInterval = Input.of(Objects.requireNonNull(frequencyInterval));
            return this;
        }

        public Builder setFrequencyUnit(Input<FrequencyUnit> frequencyUnit) {
            this.frequencyUnit = Objects.requireNonNull(frequencyUnit);
            return this;
        }

        public Builder setFrequencyUnit(FrequencyUnit frequencyUnit) {
            this.frequencyUnit = Input.of(Objects.requireNonNull(frequencyUnit));
            return this;
        }

        public Builder setKeepAtLeastOneBackup(Input<Boolean> keepAtLeastOneBackup) {
            this.keepAtLeastOneBackup = Objects.requireNonNull(keepAtLeastOneBackup);
            return this;
        }

        public Builder setKeepAtLeastOneBackup(Boolean keepAtLeastOneBackup) {
            this.keepAtLeastOneBackup = Input.of(Objects.requireNonNull(keepAtLeastOneBackup));
            return this;
        }

        public Builder setRetentionPeriodInDays(Input<Integer> retentionPeriodInDays) {
            this.retentionPeriodInDays = Objects.requireNonNull(retentionPeriodInDays);
            return this;
        }

        public Builder setRetentionPeriodInDays(Integer retentionPeriodInDays) {
            this.retentionPeriodInDays = Input.of(Objects.requireNonNull(retentionPeriodInDays));
            return this;
        }

        public Builder setStartTime(@Nullable Input<String> startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder setStartTime(@Nullable String startTime) {
            this.startTime = Input.ofNullable(startTime);
            return this;
        }
        public BackupScheduleArgs build() {
            return new BackupScheduleArgs(frequencyInterval, frequencyUnit, keepAtLeastOneBackup, retentionPeriodInDays, startTime);
        }
    }
}
