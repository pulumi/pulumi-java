// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.sql.inputs.SkuArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobAgentArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobAgentArgs Empty = new JobAgentArgs();

    /**
     * Resource ID of the database to store job metadata in.
     * 
     */
    @Import(name="databaseId", required=true)
      private final Output<String> databaseId;

    public Output<String> getDatabaseId() {
        return this.databaseId;
    }

    /**
     * The name of the job agent to be created or updated.
     * 
     */
    @Import(name="jobAgentName")
      private final @Nullable Output<String> jobAgentName;

    public Output<String> getJobAgentName() {
        return this.jobAgentName == null ? Codegen.empty() : this.jobAgentName;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
      private final Output<String> serverName;

    public Output<String> getServerName() {
        return this.serverName;
    }

    /**
     * The name and tier of the SKU.
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<SkuArgs> sku;

    public Output<SkuArgs> getSku() {
        return this.sku == null ? Codegen.empty() : this.sku;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public JobAgentArgs(
        Output<String> databaseId,
        @Nullable Output<String> jobAgentName,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        Output<String> serverName,
        @Nullable Output<SkuArgs> sku,
        @Nullable Output<Map<String,String>> tags) {
        this.databaseId = Objects.requireNonNull(databaseId, "expected parameter 'databaseId' to be non-null");
        this.jobAgentName = jobAgentName;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
        this.sku = sku;
        this.tags = tags;
    }

    private JobAgentArgs() {
        this.databaseId = Codegen.empty();
        this.jobAgentName = Codegen.empty();
        this.location = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.serverName = Codegen.empty();
        this.sku = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobAgentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> databaseId;
        private @Nullable Output<String> jobAgentName;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private Output<String> serverName;
        private @Nullable Output<SkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(JobAgentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseId = defaults.databaseId;
    	      this.jobAgentName = defaults.jobAgentName;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder databaseId(Output<String> databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        public Builder databaseId(String databaseId) {
            this.databaseId = Output.of(Objects.requireNonNull(databaseId));
            return this;
        }
        public Builder jobAgentName(@Nullable Output<String> jobAgentName) {
            this.jobAgentName = jobAgentName;
            return this;
        }
        public Builder jobAgentName(@Nullable String jobAgentName) {
            this.jobAgentName = Codegen.ofNullable(jobAgentName);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serverName(Output<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }
        public Builder serverName(String serverName) {
            this.serverName = Output.of(Objects.requireNonNull(serverName));
            return this;
        }
        public Builder sku(@Nullable Output<SkuArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable SkuArgs sku) {
            this.sku = Codegen.ofNullable(sku);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public JobAgentArgs build() {
            return new JobAgentArgs(databaseId, jobAgentName, location, resourceGroupName, serverName, sku, tags);
        }
    }
}
