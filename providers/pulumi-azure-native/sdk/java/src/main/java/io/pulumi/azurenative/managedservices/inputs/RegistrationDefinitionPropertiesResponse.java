// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.managedservices.inputs;

import io.pulumi.azurenative.managedservices.inputs.AuthorizationResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of a registration definition.
 * 
 */
public final class RegistrationDefinitionPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final RegistrationDefinitionPropertiesResponse Empty = new RegistrationDefinitionPropertiesResponse();

    /**
     * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
     * 
     */
    @InputImport(name="authorizations", required=true)
    private final List<AuthorizationResponse> authorizations;

    public List<AuthorizationResponse> getAuthorizations() {
        return this.authorizations;
    }

    /**
     * Description of the registration definition.
     * 
     */
    @InputImport(name="description")
    private final @Nullable String description;

    public Optional<String> getDescription() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * Id of the managedBy tenant.
     * 
     */
    @InputImport(name="managedByTenantId", required=true)
    private final String managedByTenantId;

    public String getManagedByTenantId() {
        return this.managedByTenantId;
    }

    /**
     * Name of the managedBy tenant.
     * 
     */
    @InputImport(name="managedByTenantName", required=true)
    private final String managedByTenantName;

    public String getManagedByTenantName() {
        return this.managedByTenantName;
    }

    /**
     * Current state of the registration definition.
     * 
     */
    @InputImport(name="provisioningState", required=true)
    private final String provisioningState;

    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Name of the registration definition.
     * 
     */
    @InputImport(name="registrationDefinitionName")
    private final @Nullable String registrationDefinitionName;

    public Optional<String> getRegistrationDefinitionName() {
        return this.registrationDefinitionName == null ? Optional.empty() : Optional.ofNullable(this.registrationDefinitionName);
    }

    public RegistrationDefinitionPropertiesResponse(
        List<AuthorizationResponse> authorizations,
        @Nullable String description,
        String managedByTenantId,
        String managedByTenantName,
        String provisioningState,
        @Nullable String registrationDefinitionName) {
        this.authorizations = Objects.requireNonNull(authorizations, "expected parameter 'authorizations' to be non-null");
        this.description = description;
        this.managedByTenantId = Objects.requireNonNull(managedByTenantId, "expected parameter 'managedByTenantId' to be non-null");
        this.managedByTenantName = Objects.requireNonNull(managedByTenantName, "expected parameter 'managedByTenantName' to be non-null");
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.registrationDefinitionName = registrationDefinitionName;
    }

    private RegistrationDefinitionPropertiesResponse() {
        this.authorizations = List.of();
        this.description = null;
        this.managedByTenantId = null;
        this.managedByTenantName = null;
        this.provisioningState = null;
        this.registrationDefinitionName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistrationDefinitionPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<AuthorizationResponse> authorizations;
        private @Nullable String description;
        private String managedByTenantId;
        private String managedByTenantName;
        private String provisioningState;
        private @Nullable String registrationDefinitionName;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistrationDefinitionPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizations = defaults.authorizations;
    	      this.description = defaults.description;
    	      this.managedByTenantId = defaults.managedByTenantId;
    	      this.managedByTenantName = defaults.managedByTenantName;
    	      this.provisioningState = defaults.provisioningState;
    	      this.registrationDefinitionName = defaults.registrationDefinitionName;
        }

        public Builder setAuthorizations(List<AuthorizationResponse> authorizations) {
            this.authorizations = Objects.requireNonNull(authorizations);
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setManagedByTenantId(String managedByTenantId) {
            this.managedByTenantId = Objects.requireNonNull(managedByTenantId);
            return this;
        }

        public Builder setManagedByTenantName(String managedByTenantName) {
            this.managedByTenantName = Objects.requireNonNull(managedByTenantName);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setRegistrationDefinitionName(@Nullable String registrationDefinitionName) {
            this.registrationDefinitionName = registrationDefinitionName;
            return this;
        }

        public RegistrationDefinitionPropertiesResponse build() {
            return new RegistrationDefinitionPropertiesResponse(authorizations, description, managedByTenantId, managedByTenantName, provisioningState, registrationDefinitionName);
        }
    }
}
