// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.solutions.inputs;

import io.pulumi.azurenative.solutions.enums.DeploymentMode;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Managed application deployment policy.
 * 
 */
public final class ApplicationDeploymentPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationDeploymentPolicyArgs Empty = new ApplicationDeploymentPolicyArgs();

    /**
     * The managed application deployment mode.
     * 
     */
    @Import(name="deploymentMode", required=true)
      private final Output<Either<String,DeploymentMode>> deploymentMode;

    public Output<Either<String,DeploymentMode>> deploymentMode() {
        return this.deploymentMode;
    }

    public ApplicationDeploymentPolicyArgs(Output<Either<String,DeploymentMode>> deploymentMode) {
        this.deploymentMode = Objects.requireNonNull(deploymentMode, "expected parameter 'deploymentMode' to be non-null");
    }

    private ApplicationDeploymentPolicyArgs() {
        this.deploymentMode = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationDeploymentPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,DeploymentMode>> deploymentMode;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationDeploymentPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deploymentMode = defaults.deploymentMode;
        }

        public Builder deploymentMode(Output<Either<String,DeploymentMode>> deploymentMode) {
            this.deploymentMode = Objects.requireNonNull(deploymentMode);
            return this;
        }
        public Builder deploymentMode(Either<String,DeploymentMode> deploymentMode) {
            this.deploymentMode = Output.of(Objects.requireNonNull(deploymentMode));
            return this;
        }        public ApplicationDeploymentPolicyArgs build() {
            return new ApplicationDeploymentPolicyArgs(deploymentMode);
        }
    }
}
