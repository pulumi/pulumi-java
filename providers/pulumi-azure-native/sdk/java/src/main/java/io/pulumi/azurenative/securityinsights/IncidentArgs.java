// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.securityinsights;

import io.pulumi.azurenative.securityinsights.enums.IncidentClassification;
import io.pulumi.azurenative.securityinsights.enums.IncidentClassificationReason;
import io.pulumi.azurenative.securityinsights.enums.IncidentSeverity;
import io.pulumi.azurenative.securityinsights.enums.IncidentStatus;
import io.pulumi.azurenative.securityinsights.inputs.IncidentLabelArgs;
import io.pulumi.azurenative.securityinsights.inputs.IncidentOwnerInfoArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IncidentArgs extends io.pulumi.resources.ResourceArgs {

    public static final IncidentArgs Empty = new IncidentArgs();

    /**
     * The reason the incident was closed
     * 
     */
    @InputImport(name="classification")
      private final @Nullable Input<Either<String,IncidentClassification>> classification;

    public Input<Either<String,IncidentClassification>> getClassification() {
        return this.classification == null ? Input.empty() : this.classification;
    }

    /**
     * Describes the reason the incident was closed
     * 
     */
    @InputImport(name="classificationComment")
      private final @Nullable Input<String> classificationComment;

    public Input<String> getClassificationComment() {
        return this.classificationComment == null ? Input.empty() : this.classificationComment;
    }

    /**
     * The classification reason the incident was closed with
     * 
     */
    @InputImport(name="classificationReason")
      private final @Nullable Input<Either<String,IncidentClassificationReason>> classificationReason;

    public Input<Either<String,IncidentClassificationReason>> getClassificationReason() {
        return this.classificationReason == null ? Input.empty() : this.classificationReason;
    }

    /**
     * The description of the incident
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The time of the first activity in the incident
     * 
     */
    @InputImport(name="firstActivityTimeUtc")
      private final @Nullable Input<String> firstActivityTimeUtc;

    public Input<String> getFirstActivityTimeUtc() {
        return this.firstActivityTimeUtc == null ? Input.empty() : this.firstActivityTimeUtc;
    }

    /**
     * Incident ID
     * 
     */
    @InputImport(name="incidentId")
      private final @Nullable Input<String> incidentId;

    public Input<String> getIncidentId() {
        return this.incidentId == null ? Input.empty() : this.incidentId;
    }

    /**
     * List of labels relevant to this incident
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<List<IncidentLabelArgs>> labels;

    public Input<List<IncidentLabelArgs>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * The time of the last activity in the incident
     * 
     */
    @InputImport(name="lastActivityTimeUtc")
      private final @Nullable Input<String> lastActivityTimeUtc;

    public Input<String> getLastActivityTimeUtc() {
        return this.lastActivityTimeUtc == null ? Input.empty() : this.lastActivityTimeUtc;
    }

    /**
     * Describes a user that the incident is assigned to
     * 
     */
    @InputImport(name="owner")
      private final @Nullable Input<IncidentOwnerInfoArgs> owner;

    public Input<IncidentOwnerInfoArgs> getOwner() {
        return this.owner == null ? Input.empty() : this.owner;
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The severity of the incident
     * 
     */
    @InputImport(name="severity", required=true)
      private final Input<Either<String,IncidentSeverity>> severity;

    public Input<Either<String,IncidentSeverity>> getSeverity() {
        return this.severity;
    }

    /**
     * The status of the incident
     * 
     */
    @InputImport(name="status", required=true)
      private final Input<Either<String,IncidentStatus>> status;

    public Input<Either<String,IncidentStatus>> getStatus() {
        return this.status;
    }

    /**
     * The title of the incident
     * 
     */
    @InputImport(name="title", required=true)
      private final Input<String> title;

    public Input<String> getTitle() {
        return this.title;
    }

    /**
     * The name of the workspace.
     * 
     */
    @InputImport(name="workspaceName", required=true)
      private final Input<String> workspaceName;

    public Input<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public IncidentArgs(
        @Nullable Input<Either<String,IncidentClassification>> classification,
        @Nullable Input<String> classificationComment,
        @Nullable Input<Either<String,IncidentClassificationReason>> classificationReason,
        @Nullable Input<String> description,
        @Nullable Input<String> firstActivityTimeUtc,
        @Nullable Input<String> incidentId,
        @Nullable Input<List<IncidentLabelArgs>> labels,
        @Nullable Input<String> lastActivityTimeUtc,
        @Nullable Input<IncidentOwnerInfoArgs> owner,
        Input<String> resourceGroupName,
        Input<Either<String,IncidentSeverity>> severity,
        Input<Either<String,IncidentStatus>> status,
        Input<String> title,
        Input<String> workspaceName) {
        this.classification = classification;
        this.classificationComment = classificationComment;
        this.classificationReason = classificationReason;
        this.description = description;
        this.firstActivityTimeUtc = firstActivityTimeUtc;
        this.incidentId = incidentId;
        this.labels = labels;
        this.lastActivityTimeUtc = lastActivityTimeUtc;
        this.owner = owner;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.severity = Objects.requireNonNull(severity, "expected parameter 'severity' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.title = Objects.requireNonNull(title, "expected parameter 'title' to be non-null");
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private IncidentArgs() {
        this.classification = Input.empty();
        this.classificationComment = Input.empty();
        this.classificationReason = Input.empty();
        this.description = Input.empty();
        this.firstActivityTimeUtc = Input.empty();
        this.incidentId = Input.empty();
        this.labels = Input.empty();
        this.lastActivityTimeUtc = Input.empty();
        this.owner = Input.empty();
        this.resourceGroupName = Input.empty();
        this.severity = Input.empty();
        this.status = Input.empty();
        this.title = Input.empty();
        this.workspaceName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IncidentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,IncidentClassification>> classification;
        private @Nullable Input<String> classificationComment;
        private @Nullable Input<Either<String,IncidentClassificationReason>> classificationReason;
        private @Nullable Input<String> description;
        private @Nullable Input<String> firstActivityTimeUtc;
        private @Nullable Input<String> incidentId;
        private @Nullable Input<List<IncidentLabelArgs>> labels;
        private @Nullable Input<String> lastActivityTimeUtc;
        private @Nullable Input<IncidentOwnerInfoArgs> owner;
        private Input<String> resourceGroupName;
        private Input<Either<String,IncidentSeverity>> severity;
        private Input<Either<String,IncidentStatus>> status;
        private Input<String> title;
        private Input<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(IncidentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.classification = defaults.classification;
    	      this.classificationComment = defaults.classificationComment;
    	      this.classificationReason = defaults.classificationReason;
    	      this.description = defaults.description;
    	      this.firstActivityTimeUtc = defaults.firstActivityTimeUtc;
    	      this.incidentId = defaults.incidentId;
    	      this.labels = defaults.labels;
    	      this.lastActivityTimeUtc = defaults.lastActivityTimeUtc;
    	      this.owner = defaults.owner;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.severity = defaults.severity;
    	      this.status = defaults.status;
    	      this.title = defaults.title;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder classification(@Nullable Input<Either<String,IncidentClassification>> classification) {
            this.classification = classification;
            return this;
        }

        public Builder classification(@Nullable Either<String,IncidentClassification> classification) {
            this.classification = Input.ofNullable(classification);
            return this;
        }

        public Builder classificationComment(@Nullable Input<String> classificationComment) {
            this.classificationComment = classificationComment;
            return this;
        }

        public Builder classificationComment(@Nullable String classificationComment) {
            this.classificationComment = Input.ofNullable(classificationComment);
            return this;
        }

        public Builder classificationReason(@Nullable Input<Either<String,IncidentClassificationReason>> classificationReason) {
            this.classificationReason = classificationReason;
            return this;
        }

        public Builder classificationReason(@Nullable Either<String,IncidentClassificationReason> classificationReason) {
            this.classificationReason = Input.ofNullable(classificationReason);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder firstActivityTimeUtc(@Nullable Input<String> firstActivityTimeUtc) {
            this.firstActivityTimeUtc = firstActivityTimeUtc;
            return this;
        }

        public Builder firstActivityTimeUtc(@Nullable String firstActivityTimeUtc) {
            this.firstActivityTimeUtc = Input.ofNullable(firstActivityTimeUtc);
            return this;
        }

        public Builder incidentId(@Nullable Input<String> incidentId) {
            this.incidentId = incidentId;
            return this;
        }

        public Builder incidentId(@Nullable String incidentId) {
            this.incidentId = Input.ofNullable(incidentId);
            return this;
        }

        public Builder labels(@Nullable Input<List<IncidentLabelArgs>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable List<IncidentLabelArgs> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder lastActivityTimeUtc(@Nullable Input<String> lastActivityTimeUtc) {
            this.lastActivityTimeUtc = lastActivityTimeUtc;
            return this;
        }

        public Builder lastActivityTimeUtc(@Nullable String lastActivityTimeUtc) {
            this.lastActivityTimeUtc = Input.ofNullable(lastActivityTimeUtc);
            return this;
        }

        public Builder owner(@Nullable Input<IncidentOwnerInfoArgs> owner) {
            this.owner = owner;
            return this;
        }

        public Builder owner(@Nullable IncidentOwnerInfoArgs owner) {
            this.owner = Input.ofNullable(owner);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder severity(Input<Either<String,IncidentSeverity>> severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }

        public Builder severity(Either<String,IncidentSeverity> severity) {
            this.severity = Input.of(Objects.requireNonNull(severity));
            return this;
        }

        public Builder status(Input<Either<String,IncidentStatus>> status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder status(Either<String,IncidentStatus> status) {
            this.status = Input.of(Objects.requireNonNull(status));
            return this;
        }

        public Builder title(Input<String> title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }

        public Builder title(String title) {
            this.title = Input.of(Objects.requireNonNull(title));
            return this;
        }

        public Builder workspaceName(Input<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Input.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public IncidentArgs build() {
            return new IncidentArgs(classification, classificationComment, classificationReason, description, firstActivityTimeUtc, incidentId, labels, lastActivityTimeUtc, owner, resourceGroupName, severity, status, title, workspaceName);
        }
    }
}
