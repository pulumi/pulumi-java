// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Online deployment scoring requests configuration.
 * 
 */
public final class OnlineRequestSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final OnlineRequestSettingsArgs Empty = new OnlineRequestSettingsArgs();

    /**
     * The number of requests allowed to queue at once for this deployment.
     * 
     */
    @InputImport(name="maxConcurrentRequestsPerInstance")
        private final @Nullable Input<Integer> maxConcurrentRequestsPerInstance;

    public Input<Integer> getMaxConcurrentRequestsPerInstance() {
        return this.maxConcurrentRequestsPerInstance == null ? Input.empty() : this.maxConcurrentRequestsPerInstance;
    }

    /**
     * The maximum queue wait time in ISO 8601 format. Supports millisecond precision.
     * 
     */
    @InputImport(name="maxQueueWait")
        private final @Nullable Input<String> maxQueueWait;

    public Input<String> getMaxQueueWait() {
        return this.maxQueueWait == null ? Input.empty() : this.maxQueueWait;
    }

    /**
     * The request timeout in ISO 8601 format. Supports millisecond precision.
     * 
     */
    @InputImport(name="requestTimeout")
        private final @Nullable Input<String> requestTimeout;

    public Input<String> getRequestTimeout() {
        return this.requestTimeout == null ? Input.empty() : this.requestTimeout;
    }

    public OnlineRequestSettingsArgs(
        @Nullable Input<Integer> maxConcurrentRequestsPerInstance,
        @Nullable Input<String> maxQueueWait,
        @Nullable Input<String> requestTimeout) {
        this.maxConcurrentRequestsPerInstance = maxConcurrentRequestsPerInstance;
        this.maxQueueWait = maxQueueWait;
        this.requestTimeout = requestTimeout;
    }

    private OnlineRequestSettingsArgs() {
        this.maxConcurrentRequestsPerInstance = Input.empty();
        this.maxQueueWait = Input.empty();
        this.requestTimeout = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OnlineRequestSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> maxConcurrentRequestsPerInstance;
        private @Nullable Input<String> maxQueueWait;
        private @Nullable Input<String> requestTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(OnlineRequestSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxConcurrentRequestsPerInstance = defaults.maxConcurrentRequestsPerInstance;
    	      this.maxQueueWait = defaults.maxQueueWait;
    	      this.requestTimeout = defaults.requestTimeout;
        }

        public Builder setMaxConcurrentRequestsPerInstance(@Nullable Input<Integer> maxConcurrentRequestsPerInstance) {
            this.maxConcurrentRequestsPerInstance = maxConcurrentRequestsPerInstance;
            return this;
        }

        public Builder setMaxConcurrentRequestsPerInstance(@Nullable Integer maxConcurrentRequestsPerInstance) {
            this.maxConcurrentRequestsPerInstance = Input.ofNullable(maxConcurrentRequestsPerInstance);
            return this;
        }

        public Builder setMaxQueueWait(@Nullable Input<String> maxQueueWait) {
            this.maxQueueWait = maxQueueWait;
            return this;
        }

        public Builder setMaxQueueWait(@Nullable String maxQueueWait) {
            this.maxQueueWait = Input.ofNullable(maxQueueWait);
            return this;
        }

        public Builder setRequestTimeout(@Nullable Input<String> requestTimeout) {
            this.requestTimeout = requestTimeout;
            return this;
        }

        public Builder setRequestTimeout(@Nullable String requestTimeout) {
            this.requestTimeout = Input.ofNullable(requestTimeout);
            return this;
        }
        public OnlineRequestSettingsArgs build() {
            return new OnlineRequestSettingsArgs(maxConcurrentRequestsPerInstance, maxQueueWait, requestTimeout);
        }
    }
}
