// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import io.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import io.pulumi.azurenative.datafactory.inputs.DataFlowReferenceResponse;
import io.pulumi.azurenative.datafactory.inputs.DataFlowStagingInfoResponse;
import io.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityTypePropertiesResponseCompute;
import io.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import io.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Execute data flow activity.
 * 
 */
public final class ExecuteDataFlowActivityResponse extends io.pulumi.resources.InvokeArgs {

    public static final ExecuteDataFlowActivityResponse Empty = new ExecuteDataFlowActivityResponse();

    /**
     * Compute properties for data flow activity.
     * 
     */
    @Import(name="compute")
      private final @Nullable ExecuteDataFlowActivityTypePropertiesResponseCompute compute;

    public Optional<ExecuteDataFlowActivityTypePropertiesResponseCompute> getCompute() {
        return this.compute == null ? Optional.empty() : Optional.ofNullable(this.compute);
    }

    /**
     * Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
     * 
     */
    @Import(name="continueOnError")
      private final @Nullable Object continueOnError;

    public Optional<Object> getContinueOnError() {
        return this.continueOnError == null ? Optional.empty() : Optional.ofNullable(this.continueOnError);
    }

    /**
     * Data flow reference.
     * 
     */
    @Import(name="dataFlow", required=true)
      private final DataFlowReferenceResponse dataFlow;

    public DataFlowReferenceResponse getDataFlow() {
        return this.dataFlow;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable List<ActivityDependencyResponse> dependsOn;

    public List<ActivityDependencyResponse> getDependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> getDescription() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="integrationRuntime")
      private final @Nullable IntegrationRuntimeReferenceResponse integrationRuntime;

    public Optional<IntegrationRuntimeReferenceResponse> getIntegrationRuntime() {
        return this.integrationRuntime == null ? Optional.empty() : Optional.ofNullable(this.integrationRuntime);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
      private final @Nullable LinkedServiceReferenceResponse linkedServiceName;

    public Optional<LinkedServiceReferenceResponse> getLinkedServiceName() {
        return this.linkedServiceName == null ? Optional.empty() : Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
      private final @Nullable ActivityPolicyResponse policy;

    public Optional<ActivityPolicyResponse> getPolicy() {
        return this.policy == null ? Optional.empty() : Optional.ofNullable(this.policy);
    }

    /**
     * Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
     * 
     */
    @Import(name="runConcurrently")
      private final @Nullable Object runConcurrently;

    public Optional<Object> getRunConcurrently() {
        return this.runConcurrently == null ? Optional.empty() : Optional.ofNullable(this.runConcurrently);
    }

    /**
     * Staging info for execute data flow activity.
     * 
     */
    @Import(name="staging")
      private final @Nullable DataFlowStagingInfoResponse staging;

    public Optional<DataFlowStagingInfoResponse> getStaging() {
        return this.staging == null ? Optional.empty() : Optional.ofNullable(this.staging);
    }

    /**
     * Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
     * 
     */
    @Import(name="traceLevel")
      private final @Nullable Object traceLevel;

    public Optional<Object> getTraceLevel() {
        return this.traceLevel == null ? Optional.empty() : Optional.ofNullable(this.traceLevel);
    }

    /**
     * Type of activity.
     * Expected value is 'ExecuteDataFlow'.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
      private final @Nullable List<UserPropertyResponse> userProperties;

    public List<UserPropertyResponse> getUserProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }

    public ExecuteDataFlowActivityResponse(
        @Nullable ExecuteDataFlowActivityTypePropertiesResponseCompute compute,
        @Nullable Object continueOnError,
        DataFlowReferenceResponse dataFlow,
        @Nullable List<ActivityDependencyResponse> dependsOn,
        @Nullable String description,
        @Nullable IntegrationRuntimeReferenceResponse integrationRuntime,
        @Nullable LinkedServiceReferenceResponse linkedServiceName,
        String name,
        @Nullable ActivityPolicyResponse policy,
        @Nullable Object runConcurrently,
        @Nullable DataFlowStagingInfoResponse staging,
        @Nullable Object traceLevel,
        String type,
        @Nullable List<UserPropertyResponse> userProperties) {
        this.compute = compute;
        this.continueOnError = continueOnError;
        this.dataFlow = Objects.requireNonNull(dataFlow, "expected parameter 'dataFlow' to be non-null");
        this.dependsOn = dependsOn;
        this.description = description;
        this.integrationRuntime = integrationRuntime;
        this.linkedServiceName = linkedServiceName;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.policy = policy;
        this.runConcurrently = runConcurrently;
        this.staging = staging;
        this.traceLevel = traceLevel;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userProperties = userProperties;
    }

    private ExecuteDataFlowActivityResponse() {
        this.compute = null;
        this.continueOnError = null;
        this.dataFlow = null;
        this.dependsOn = List.of();
        this.description = null;
        this.integrationRuntime = null;
        this.linkedServiceName = null;
        this.name = null;
        this.policy = null;
        this.runConcurrently = null;
        this.staging = null;
        this.traceLevel = null;
        this.type = null;
        this.userProperties = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecuteDataFlowActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable ExecuteDataFlowActivityTypePropertiesResponseCompute compute;
        private @Nullable Object continueOnError;
        private DataFlowReferenceResponse dataFlow;
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private @Nullable IntegrationRuntimeReferenceResponse integrationRuntime;
        private @Nullable LinkedServiceReferenceResponse linkedServiceName;
        private String name;
        private @Nullable ActivityPolicyResponse policy;
        private @Nullable Object runConcurrently;
        private @Nullable DataFlowStagingInfoResponse staging;
        private @Nullable Object traceLevel;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(ExecuteDataFlowActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compute = defaults.compute;
    	      this.continueOnError = defaults.continueOnError;
    	      this.dataFlow = defaults.dataFlow;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.integrationRuntime = defaults.integrationRuntime;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.runConcurrently = defaults.runConcurrently;
    	      this.staging = defaults.staging;
    	      this.traceLevel = defaults.traceLevel;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder compute(@Nullable ExecuteDataFlowActivityTypePropertiesResponseCompute compute) {
            this.compute = compute;
            return this;
        }
        public Builder continueOnError(@Nullable Object continueOnError) {
            this.continueOnError = continueOnError;
            return this;
        }
        public Builder dataFlow(DataFlowReferenceResponse dataFlow) {
            this.dataFlow = Objects.requireNonNull(dataFlow);
            return this;
        }
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder integrationRuntime(@Nullable IntegrationRuntimeReferenceResponse integrationRuntime) {
            this.integrationRuntime = integrationRuntime;
            return this;
        }
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            this.policy = policy;
            return this;
        }
        public Builder runConcurrently(@Nullable Object runConcurrently) {
            this.runConcurrently = runConcurrently;
            return this;
        }
        public Builder staging(@Nullable DataFlowStagingInfoResponse staging) {
            this.staging = staging;
            return this;
        }
        public Builder traceLevel(@Nullable Object traceLevel) {
            this.traceLevel = traceLevel;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }        public ExecuteDataFlowActivityResponse build() {
            return new ExecuteDataFlowActivityResponse(compute, continueOnError, dataFlow, dependsOn, description, integrationRuntime, linkedServiceName, name, policy, runConcurrently, staging, traceLevel, type, userProperties);
        }
    }
}
