// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.solutions;

import io.pulumi.azurenative.solutions.inputs.ApplicationJitAccessPolicyArgs;
import io.pulumi.azurenative.solutions.inputs.IdentityArgs;
import io.pulumi.azurenative.solutions.inputs.PlanArgs;
import io.pulumi.azurenative.solutions.inputs.SkuArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    /**
     * The fully qualified path of managed application definition Id.
     * 
     */
    @Import(name="applicationDefinitionId")
      private final @Nullable Output<String> applicationDefinitionId;

    public Output<String> getApplicationDefinitionId() {
        return this.applicationDefinitionId == null ? Output.empty() : this.applicationDefinitionId;
    }

    /**
     * The name of the managed application.
     * 
     */
    @Import(name="applicationName")
      private final @Nullable Output<String> applicationName;

    public Output<String> getApplicationName() {
        return this.applicationName == null ? Output.empty() : this.applicationName;
    }

    /**
     * The identity of the resource.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<IdentityArgs> identity;

    public Output<IdentityArgs> getIdentity() {
        return this.identity == null ? Output.empty() : this.identity;
    }

    /**
     * The managed application Jit access policy.
     * 
     */
    @Import(name="jitAccessPolicy")
      private final @Nullable Output<ApplicationJitAccessPolicyArgs> jitAccessPolicy;

    public Output<ApplicationJitAccessPolicyArgs> getJitAccessPolicy() {
        return this.jitAccessPolicy == null ? Output.empty() : this.jitAccessPolicy;
    }

    /**
     * The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<String> kind;

    public Output<String> getKind() {
        return this.kind;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * ID of the resource that manages this resource.
     * 
     */
    @Import(name="managedBy")
      private final @Nullable Output<String> managedBy;

    public Output<String> getManagedBy() {
        return this.managedBy == null ? Output.empty() : this.managedBy;
    }

    /**
     * The managed resource group Id.
     * 
     */
    @Import(name="managedResourceGroupId")
      private final @Nullable Output<String> managedResourceGroupId;

    public Output<String> getManagedResourceGroupId() {
        return this.managedResourceGroupId == null ? Output.empty() : this.managedResourceGroupId;
    }

    /**
     * Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Object> parameters;

    public Output<Object> getParameters() {
        return this.parameters == null ? Output.empty() : this.parameters;
    }

    /**
     * The plan information.
     * 
     */
    @Import(name="plan")
      private final @Nullable Output<PlanArgs> plan;

    public Output<PlanArgs> getPlan() {
        return this.plan == null ? Output.empty() : this.plan;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SKU of the resource.
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<SkuArgs> sku;

    public Output<SkuArgs> getSku() {
        return this.sku == null ? Output.empty() : this.sku;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public ApplicationArgs(
        @Nullable Output<String> applicationDefinitionId,
        @Nullable Output<String> applicationName,
        @Nullable Output<IdentityArgs> identity,
        @Nullable Output<ApplicationJitAccessPolicyArgs> jitAccessPolicy,
        Output<String> kind,
        @Nullable Output<String> location,
        @Nullable Output<String> managedBy,
        @Nullable Output<String> managedResourceGroupId,
        @Nullable Output<Object> parameters,
        @Nullable Output<PlanArgs> plan,
        Output<String> resourceGroupName,
        @Nullable Output<SkuArgs> sku,
        @Nullable Output<Map<String,String>> tags) {
        this.applicationDefinitionId = applicationDefinitionId;
        this.applicationName = applicationName;
        this.identity = identity;
        this.jitAccessPolicy = jitAccessPolicy;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.location = location;
        this.managedBy = managedBy;
        this.managedResourceGroupId = managedResourceGroupId;
        this.parameters = parameters;
        this.plan = plan;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.tags = tags;
    }

    private ApplicationArgs() {
        this.applicationDefinitionId = Output.empty();
        this.applicationName = Output.empty();
        this.identity = Output.empty();
        this.jitAccessPolicy = Output.empty();
        this.kind = Output.empty();
        this.location = Output.empty();
        this.managedBy = Output.empty();
        this.managedResourceGroupId = Output.empty();
        this.parameters = Output.empty();
        this.plan = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sku = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> applicationDefinitionId;
        private @Nullable Output<String> applicationName;
        private @Nullable Output<IdentityArgs> identity;
        private @Nullable Output<ApplicationJitAccessPolicyArgs> jitAccessPolicy;
        private Output<String> kind;
        private @Nullable Output<String> location;
        private @Nullable Output<String> managedBy;
        private @Nullable Output<String> managedResourceGroupId;
        private @Nullable Output<Object> parameters;
        private @Nullable Output<PlanArgs> plan;
        private Output<String> resourceGroupName;
        private @Nullable Output<SkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationDefinitionId = defaults.applicationDefinitionId;
    	      this.applicationName = defaults.applicationName;
    	      this.identity = defaults.identity;
    	      this.jitAccessPolicy = defaults.jitAccessPolicy;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.managedBy = defaults.managedBy;
    	      this.managedResourceGroupId = defaults.managedResourceGroupId;
    	      this.parameters = defaults.parameters;
    	      this.plan = defaults.plan;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder applicationDefinitionId(@Nullable Output<String> applicationDefinitionId) {
            this.applicationDefinitionId = applicationDefinitionId;
            return this;
        }

        public Builder applicationDefinitionId(@Nullable String applicationDefinitionId) {
            this.applicationDefinitionId = Output.ofNullable(applicationDefinitionId);
            return this;
        }

        public Builder applicationName(@Nullable Output<String> applicationName) {
            this.applicationName = applicationName;
            return this;
        }

        public Builder applicationName(@Nullable String applicationName) {
            this.applicationName = Output.ofNullable(applicationName);
            return this;
        }

        public Builder identity(@Nullable Output<IdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder identity(@Nullable IdentityArgs identity) {
            this.identity = Output.ofNullable(identity);
            return this;
        }

        public Builder jitAccessPolicy(@Nullable Output<ApplicationJitAccessPolicyArgs> jitAccessPolicy) {
            this.jitAccessPolicy = jitAccessPolicy;
            return this;
        }

        public Builder jitAccessPolicy(@Nullable ApplicationJitAccessPolicyArgs jitAccessPolicy) {
            this.jitAccessPolicy = Output.ofNullable(jitAccessPolicy);
            return this;
        }

        public Builder kind(Output<String> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder kind(String kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder managedBy(@Nullable Output<String> managedBy) {
            this.managedBy = managedBy;
            return this;
        }

        public Builder managedBy(@Nullable String managedBy) {
            this.managedBy = Output.ofNullable(managedBy);
            return this;
        }

        public Builder managedResourceGroupId(@Nullable Output<String> managedResourceGroupId) {
            this.managedResourceGroupId = managedResourceGroupId;
            return this;
        }

        public Builder managedResourceGroupId(@Nullable String managedResourceGroupId) {
            this.managedResourceGroupId = Output.ofNullable(managedResourceGroupId);
            return this;
        }

        public Builder parameters(@Nullable Output<Object> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Object parameters) {
            this.parameters = Output.ofNullable(parameters);
            return this;
        }

        public Builder plan(@Nullable Output<PlanArgs> plan) {
            this.plan = plan;
            return this;
        }

        public Builder plan(@Nullable PlanArgs plan) {
            this.plan = Output.ofNullable(plan);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder sku(@Nullable Output<SkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder sku(@Nullable SkuArgs sku) {
            this.sku = Output.ofNullable(sku);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public ApplicationArgs build() {
            return new ApplicationArgs(applicationDefinitionId, applicationName, identity, jitAccessPolicy, kind, location, managedBy, managedResourceGroupId, parameters, plan, resourceGroupName, sku, tags);
        }
    }
}
