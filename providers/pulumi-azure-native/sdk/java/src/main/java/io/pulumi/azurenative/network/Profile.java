// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.network.ProfileArgs;
import io.pulumi.azurenative.network.outputs.DnsConfigResponse;
import io.pulumi.azurenative.network.outputs.EndpointResponse;
import io.pulumi.azurenative.network.outputs.MonitorConfigResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Class representing a Traffic Manager profile.
 * API Version: 2018-08-01.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Profile-PUT-MultiValue
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var profile = new AzureNative.Network.Profile("profile", new AzureNative.Network.ProfileArgs
 *         {
 *             DnsConfig = new AzureNative.Network.Inputs.DnsConfigArgs
 *             {
 *                 RelativeName = "azsmnet6386",
 *                 Ttl = 35,
 *             },
 *             Location = "global",
 *             MaxReturn = 2,
 *             MonitorConfig = new AzureNative.Network.Inputs.MonitorConfigArgs
 *             {
 *                 Path = "/testpath.aspx",
 *                 Port = 80,
 *                 Protocol = "HTTP",
 *             },
 *             ProfileName = "azsmnet6386",
 *             ProfileStatus = "Enabled",
 *             ResourceGroupName = "azuresdkfornetautoresttrafficmanager1421",
 *             TrafficRoutingMethod = "MultiValue",
 *             TrafficViewEnrollmentStatus = "Disabled",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := network.NewProfile(ctx, "profile", &network.ProfileArgs{
 * 			DnsConfig: &network.DnsConfigArgs{
 * 				RelativeName: pulumi.String("azsmnet6386"),
 * 				Ttl:          pulumi.Float64(35),
 * 			},
 * 			Location:  pulumi.String("global"),
 * 			MaxReturn: pulumi.Float64(2),
 * 			MonitorConfig: &network.MonitorConfigArgs{
 * 				Path:     pulumi.String("/testpath.aspx"),
 * 				Port:     pulumi.Float64(80),
 * 				Protocol: pulumi.String("HTTP"),
 * 			},
 * 			ProfileName:                 pulumi.String("azsmnet6386"),
 * 			ProfileStatus:               pulumi.String("Enabled"),
 * 			ResourceGroupName:           pulumi.String("azuresdkfornetautoresttrafficmanager1421"),
 * 			TrafficRoutingMethod:        pulumi.String("MultiValue"),
 * 			TrafficViewEnrollmentStatus: pulumi.String("Disabled"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const profile = new azure_native.network.Profile("profile", {
 *     dnsConfig: {
 *         relativeName: "azsmnet6386",
 *         ttl: 35,
 *     },
 *     location: "global",
 *     maxReturn: 2,
 *     monitorConfig: {
 *         path: "/testpath.aspx",
 *         port: 80,
 *         protocol: "HTTP",
 *     },
 *     profileName: "azsmnet6386",
 *     profileStatus: "Enabled",
 *     resourceGroupName: "azuresdkfornetautoresttrafficmanager1421",
 *     trafficRoutingMethod: "MultiValue",
 *     trafficViewEnrollmentStatus: "Disabled",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * profile = azure_native.network.Profile("profile",
 *     dns_config=azure_native.network.DnsConfigArgs(
 *         relative_name="azsmnet6386",
 *         ttl=35,
 *     ),
 *     location="global",
 *     max_return=2,
 *     monitor_config=azure_native.network.MonitorConfigArgs(
 *         path="/testpath.aspx",
 *         port=80,
 *         protocol="HTTP",
 *     ),
 *     profile_name="azsmnet6386",
 *     profile_status="Enabled",
 *     resource_group_name="azuresdkfornetautoresttrafficmanager1421",
 *     traffic_routing_method="MultiValue",
 *     traffic_view_enrollment_status="Disabled")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Profile-PUT-NoEndpoints
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var profile = new AzureNative.Network.Profile("profile", new AzureNative.Network.ProfileArgs
 *         {
 *             DnsConfig = new AzureNative.Network.Inputs.DnsConfigArgs
 *             {
 *                 RelativeName = "azsmnet6386",
 *                 Ttl = 35,
 *             },
 *             Location = "global",
 *             MonitorConfig = new AzureNative.Network.Inputs.MonitorConfigArgs
 *             {
 *                 Path = "/testpath.aspx",
 *                 Port = 80,
 *                 Protocol = "HTTP",
 *             },
 *             ProfileName = "azsmnet6386",
 *             ProfileStatus = "Enabled",
 *             ResourceGroupName = "azuresdkfornetautoresttrafficmanager1421",
 *             TrafficRoutingMethod = "Performance",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := network.NewProfile(ctx, "profile", &network.ProfileArgs{
 * 			DnsConfig: &network.DnsConfigArgs{
 * 				RelativeName: pulumi.String("azsmnet6386"),
 * 				Ttl:          pulumi.Float64(35),
 * 			},
 * 			Location: pulumi.String("global"),
 * 			MonitorConfig: &network.MonitorConfigArgs{
 * 				Path:     pulumi.String("/testpath.aspx"),
 * 				Port:     pulumi.Float64(80),
 * 				Protocol: pulumi.String("HTTP"),
 * 			},
 * 			ProfileName:          pulumi.String("azsmnet6386"),
 * 			ProfileStatus:        pulumi.String("Enabled"),
 * 			ResourceGroupName:    pulumi.String("azuresdkfornetautoresttrafficmanager1421"),
 * 			TrafficRoutingMethod: pulumi.String("Performance"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const profile = new azure_native.network.Profile("profile", {
 *     dnsConfig: {
 *         relativeName: "azsmnet6386",
 *         ttl: 35,
 *     },
 *     location: "global",
 *     monitorConfig: {
 *         path: "/testpath.aspx",
 *         port: 80,
 *         protocol: "HTTP",
 *     },
 *     profileName: "azsmnet6386",
 *     profileStatus: "Enabled",
 *     resourceGroupName: "azuresdkfornetautoresttrafficmanager1421",
 *     trafficRoutingMethod: "Performance",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * profile = azure_native.network.Profile("profile",
 *     dns_config=azure_native.network.DnsConfigArgs(
 *         relative_name="azsmnet6386",
 *         ttl=35,
 *     ),
 *     location="global",
 *     monitor_config=azure_native.network.MonitorConfigArgs(
 *         path="/testpath.aspx",
 *         port=80,
 *         protocol="HTTP",
 *     ),
 *     profile_name="azsmnet6386",
 *     profile_status="Enabled",
 *     resource_group_name="azuresdkfornetautoresttrafficmanager1421",
 *     traffic_routing_method="Performance")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Profile-PUT-WithAliasing
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var profile = new AzureNative.Network.Profile("profile", new AzureNative.Network.ProfileArgs
 *         {
 *             AllowedEndpointRecordTypes = 
 *             {
 *                 "DomainName",
 *             },
 *             DnsConfig = new AzureNative.Network.Inputs.DnsConfigArgs
 *             {
 *                 RelativeName = "azuresdkfornetautoresttrafficmanager6192",
 *                 Ttl = 35,
 *             },
 *             Endpoints = 
 *             {
 *                 new AzureNative.Network.Inputs.EndpointArgs
 *                 {
 *                     EndpointLocation = "North Europe",
 *                     EndpointStatus = "Enabled",
 *                     Name = "My external endpoint",
 *                     Target = "foobar.contoso.com",
 *                     Type = "Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
 *                 },
 *             },
 *             Location = "global",
 *             MonitorConfig = new AzureNative.Network.Inputs.MonitorConfigArgs
 *             {
 *                 IntervalInSeconds = 10,
 *                 Path = "/testpath.aspx",
 *                 Port = 80,
 *                 Protocol = "HTTP",
 *                 TimeoutInSeconds = 5,
 *                 ToleratedNumberOfFailures = 2,
 *             },
 *             ProfileName = "azuresdkfornetautoresttrafficmanager6192",
 *             ProfileStatus = "Enabled",
 *             ResourceGroupName = "azuresdkfornetautoresttrafficmanager2583",
 *             TrafficRoutingMethod = "Performance",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := network.NewProfile(ctx, "profile", &network.ProfileArgs{
 * 			AllowedEndpointRecordTypes: pulumi.StringArray{
 * 				pulumi.String("DomainName"),
 * 			},
 * 			DnsConfig: &network.DnsConfigArgs{
 * 				RelativeName: pulumi.String("azuresdkfornetautoresttrafficmanager6192"),
 * 				Ttl:          pulumi.Float64(35),
 * 			},
 * 			Endpoints: []network.EndpointArgs{
 * 				&network.EndpointArgs{
 * 					EndpointLocation: pulumi.String("North Europe"),
 * 					EndpointStatus:   pulumi.String("Enabled"),
 * 					Name:             pulumi.String("My external endpoint"),
 * 					Target:           pulumi.String("foobar.contoso.com"),
 * 					Type:             pulumi.String("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
 * 				},
 * 			},
 * 			Location: pulumi.String("global"),
 * 			MonitorConfig: &network.MonitorConfigArgs{
 * 				IntervalInSeconds:         pulumi.Float64(10),
 * 				Path:                      pulumi.String("/testpath.aspx"),
 * 				Port:                      pulumi.Float64(80),
 * 				Protocol:                  pulumi.String("HTTP"),
 * 				TimeoutInSeconds:          pulumi.Float64(5),
 * 				ToleratedNumberOfFailures: pulumi.Float64(2),
 * 			},
 * 			ProfileName:          pulumi.String("azuresdkfornetautoresttrafficmanager6192"),
 * 			ProfileStatus:        pulumi.String("Enabled"),
 * 			ResourceGroupName:    pulumi.String("azuresdkfornetautoresttrafficmanager2583"),
 * 			TrafficRoutingMethod: pulumi.String("Performance"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const profile = new azure_native.network.Profile("profile", {
 *     allowedEndpointRecordTypes: ["DomainName"],
 *     dnsConfig: {
 *         relativeName: "azuresdkfornetautoresttrafficmanager6192",
 *         ttl: 35,
 *     },
 *     endpoints: [{
 *         endpointLocation: "North Europe",
 *         endpointStatus: "Enabled",
 *         name: "My external endpoint",
 *         target: "foobar.contoso.com",
 *         type: "Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
 *     }],
 *     location: "global",
 *     monitorConfig: {
 *         intervalInSeconds: 10,
 *         path: "/testpath.aspx",
 *         port: 80,
 *         protocol: "HTTP",
 *         timeoutInSeconds: 5,
 *         toleratedNumberOfFailures: 2,
 *     },
 *     profileName: "azuresdkfornetautoresttrafficmanager6192",
 *     profileStatus: "Enabled",
 *     resourceGroupName: "azuresdkfornetautoresttrafficmanager2583",
 *     trafficRoutingMethod: "Performance",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * profile = azure_native.network.Profile("profile",
 *     allowed_endpoint_record_types=["DomainName"],
 *     dns_config=azure_native.network.DnsConfigArgs(
 *         relative_name="azuresdkfornetautoresttrafficmanager6192",
 *         ttl=35,
 *     ),
 *     endpoints=[azure_native.network.EndpointArgs(
 *         endpoint_location="North Europe",
 *         endpoint_status="Enabled",
 *         name="My external endpoint",
 *         target="foobar.contoso.com",
 *         type="Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
 *     )],
 *     location="global",
 *     monitor_config=azure_native.network.MonitorConfigArgs(
 *         interval_in_seconds=10,
 *         path="/testpath.aspx",
 *         port=80,
 *         protocol="HTTP",
 *         timeout_in_seconds=5,
 *         tolerated_number_of_failures=2,
 *     ),
 *     profile_name="azuresdkfornetautoresttrafficmanager6192",
 *     profile_status="Enabled",
 *     resource_group_name="azuresdkfornetautoresttrafficmanager2583",
 *     traffic_routing_method="Performance")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Profile-PUT-WithCustomHeaders
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var profile = new AzureNative.Network.Profile("profile", new AzureNative.Network.ProfileArgs
 *         {
 *             DnsConfig = new AzureNative.Network.Inputs.DnsConfigArgs
 *             {
 *                 RelativeName = "azuresdkfornetautoresttrafficmanager6192",
 *                 Ttl = 35,
 *             },
 *             Endpoints = 
 *             {
 *                 new AzureNative.Network.Inputs.EndpointArgs
 *                 {
 *                     CustomHeaders = 
 *                     {
 *                         new AzureNative.Network.Inputs.EndpointPropertiesCustomHeadersArgs
 *                         {
 *                             Name = "header-2",
 *                             Value = "value-2-overridden",
 *                         },
 *                     },
 *                     EndpointLocation = "North Europe",
 *                     EndpointStatus = "Enabled",
 *                     Name = "My external endpoint",
 *                     Target = "foobar.contoso.com",
 *                     Type = "Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
 *                 },
 *             },
 *             Location = "global",
 *             MonitorConfig = new AzureNative.Network.Inputs.MonitorConfigArgs
 *             {
 *                 CustomHeaders = 
 *                 {
 *                     new AzureNative.Network.Inputs.MonitorConfigCustomHeadersArgs
 *                     {
 *                         Name = "header-1",
 *                         Value = "value-1",
 *                     },
 *                     new AzureNative.Network.Inputs.MonitorConfigCustomHeadersArgs
 *                     {
 *                         Name = "header-2",
 *                         Value = "value-2",
 *                     },
 *                 },
 *                 ExpectedStatusCodeRanges = 
 *                 {
 *                     new AzureNative.Network.Inputs.MonitorConfigExpectedStatusCodeRangesArgs
 *                     {
 *                         Max = 205,
 *                         Min = 200,
 *                     },
 *                     new AzureNative.Network.Inputs.MonitorConfigExpectedStatusCodeRangesArgs
 *                     {
 *                         Max = 410,
 *                         Min = 400,
 *                     },
 *                 },
 *                 IntervalInSeconds = 10,
 *                 Path = "/testpath.aspx",
 *                 Port = 80,
 *                 Protocol = "HTTP",
 *                 TimeoutInSeconds = 5,
 *                 ToleratedNumberOfFailures = 2,
 *             },
 *             ProfileName = "azuresdkfornetautoresttrafficmanager6192",
 *             ProfileStatus = "Enabled",
 *             ResourceGroupName = "azuresdkfornetautoresttrafficmanager2583",
 *             TrafficRoutingMethod = "Performance",
 *             TrafficViewEnrollmentStatus = "Disabled",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := network.NewProfile(ctx, "profile", &network.ProfileArgs{
 * 			DnsConfig: &network.DnsConfigArgs{
 * 				RelativeName: pulumi.String("azuresdkfornetautoresttrafficmanager6192"),
 * 				Ttl:          pulumi.Float64(35),
 * 			},
 * 			Endpoints: []network.EndpointArgs{
 * 				&network.EndpointArgs{
 * 					CustomHeaders: network.EndpointPropertiesCustomHeadersArray{
 * 						&network.EndpointPropertiesCustomHeadersArgs{
 * 							Name:  pulumi.String("header-2"),
 * 							Value: pulumi.String("value-2-overridden"),
 * 						},
 * 					},
 * 					EndpointLocation: pulumi.String("North Europe"),
 * 					EndpointStatus:   pulumi.String("Enabled"),
 * 					Name:             pulumi.String("My external endpoint"),
 * 					Target:           pulumi.String("foobar.contoso.com"),
 * 					Type:             pulumi.String("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
 * 				},
 * 			},
 * 			Location: pulumi.String("global"),
 * 			MonitorConfig: &network.MonitorConfigArgs{
 * 				CustomHeaders: network.MonitorConfigCustomHeadersArray{
 * 					&network.MonitorConfigCustomHeadersArgs{
 * 						Name:  pulumi.String("header-1"),
 * 						Value: pulumi.String("value-1"),
 * 					},
 * 					&network.MonitorConfigCustomHeadersArgs{
 * 						Name:  pulumi.String("header-2"),
 * 						Value: pulumi.String("value-2"),
 * 					},
 * 				},
 * 				ExpectedStatusCodeRanges: network.MonitorConfigExpectedStatusCodeRangesArray{
 * 					&network.MonitorConfigExpectedStatusCodeRangesArgs{
 * 						Max: pulumi.Int(205),
 * 						Min: pulumi.Int(200),
 * 					},
 * 					&network.MonitorConfigExpectedStatusCodeRangesArgs{
 * 						Max: pulumi.Int(410),
 * 						Min: pulumi.Int(400),
 * 					},
 * 				},
 * 				IntervalInSeconds:         pulumi.Float64(10),
 * 				Path:                      pulumi.String("/testpath.aspx"),
 * 				Port:                      pulumi.Float64(80),
 * 				Protocol:                  pulumi.String("HTTP"),
 * 				TimeoutInSeconds:          pulumi.Float64(5),
 * 				ToleratedNumberOfFailures: pulumi.Float64(2),
 * 			},
 * 			ProfileName:                 pulumi.String("azuresdkfornetautoresttrafficmanager6192"),
 * 			ProfileStatus:               pulumi.String("Enabled"),
 * 			ResourceGroupName:           pulumi.String("azuresdkfornetautoresttrafficmanager2583"),
 * 			TrafficRoutingMethod:        pulumi.String("Performance"),
 * 			TrafficViewEnrollmentStatus: pulumi.String("Disabled"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const profile = new azure_native.network.Profile("profile", {
 *     dnsConfig: {
 *         relativeName: "azuresdkfornetautoresttrafficmanager6192",
 *         ttl: 35,
 *     },
 *     endpoints: [{
 *         customHeaders: [{
 *             name: "header-2",
 *             value: "value-2-overridden",
 *         }],
 *         endpointLocation: "North Europe",
 *         endpointStatus: "Enabled",
 *         name: "My external endpoint",
 *         target: "foobar.contoso.com",
 *         type: "Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
 *     }],
 *     location: "global",
 *     monitorConfig: {
 *         customHeaders: [
 *             {
 *                 name: "header-1",
 *                 value: "value-1",
 *             },
 *             {
 *                 name: "header-2",
 *                 value: "value-2",
 *             },
 *         ],
 *         expectedStatusCodeRanges: [
 *             {
 *                 max: 205,
 *                 min: 200,
 *             },
 *             {
 *                 max: 410,
 *                 min: 400,
 *             },
 *         ],
 *         intervalInSeconds: 10,
 *         path: "/testpath.aspx",
 *         port: 80,
 *         protocol: "HTTP",
 *         timeoutInSeconds: 5,
 *         toleratedNumberOfFailures: 2,
 *     },
 *     profileName: "azuresdkfornetautoresttrafficmanager6192",
 *     profileStatus: "Enabled",
 *     resourceGroupName: "azuresdkfornetautoresttrafficmanager2583",
 *     trafficRoutingMethod: "Performance",
 *     trafficViewEnrollmentStatus: "Disabled",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * profile = azure_native.network.Profile("profile",
 *     dns_config=azure_native.network.DnsConfigArgs(
 *         relative_name="azuresdkfornetautoresttrafficmanager6192",
 *         ttl=35,
 *     ),
 *     endpoints=[azure_native.network.EndpointArgs(
 *         custom_headers=[azure_native.network.EndpointPropertiesCustomHeadersArgs(
 *             name="header-2",
 *             value="value-2-overridden",
 *         )],
 *         endpoint_location="North Europe",
 *         endpoint_status="Enabled",
 *         name="My external endpoint",
 *         target="foobar.contoso.com",
 *         type="Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
 *     )],
 *     location="global",
 *     monitor_config=azure_native.network.MonitorConfigArgs(
 *         custom_headers=[
 *             azure_native.network.MonitorConfigCustomHeadersArgs(
 *                 name="header-1",
 *                 value="value-1",
 *             ),
 *             azure_native.network.MonitorConfigCustomHeadersArgs(
 *                 name="header-2",
 *                 value="value-2",
 *             ),
 *         ],
 *         expected_status_code_ranges=[
 *             azure_native.network.MonitorConfigExpectedStatusCodeRangesArgs(
 *                 max=205,
 *                 min=200,
 *             ),
 *             azure_native.network.MonitorConfigExpectedStatusCodeRangesArgs(
 *                 max=410,
 *                 min=400,
 *             ),
 *         ],
 *         interval_in_seconds=10,
 *         path="/testpath.aspx",
 *         port=80,
 *         protocol="HTTP",
 *         timeout_in_seconds=5,
 *         tolerated_number_of_failures=2,
 *     ),
 *     profile_name="azuresdkfornetautoresttrafficmanager6192",
 *     profile_status="Enabled",
 *     resource_group_name="azuresdkfornetautoresttrafficmanager2583",
 *     traffic_routing_method="Performance",
 *     traffic_view_enrollment_status="Disabled")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Profile-PUT-WithEndpoints
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var profile = new AzureNative.Network.Profile("profile", new AzureNative.Network.ProfileArgs
 *         {
 *             DnsConfig = new AzureNative.Network.Inputs.DnsConfigArgs
 *             {
 *                 RelativeName = "azuresdkfornetautoresttrafficmanager6192",
 *                 Ttl = 35,
 *             },
 *             Endpoints = 
 *             {
 *                 new AzureNative.Network.Inputs.EndpointArgs
 *                 {
 *                     EndpointLocation = "North Europe",
 *                     EndpointStatus = "Enabled",
 *                     Name = "My external endpoint",
 *                     Target = "foobar.contoso.com",
 *                     Type = "Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
 *                 },
 *             },
 *             Location = "global",
 *             MonitorConfig = new AzureNative.Network.Inputs.MonitorConfigArgs
 *             {
 *                 IntervalInSeconds = 10,
 *                 Path = "/testpath.aspx",
 *                 Port = 80,
 *                 Protocol = "HTTP",
 *                 TimeoutInSeconds = 5,
 *                 ToleratedNumberOfFailures = 2,
 *             },
 *             ProfileName = "azuresdkfornetautoresttrafficmanager6192",
 *             ProfileStatus = "Enabled",
 *             ResourceGroupName = "azuresdkfornetautoresttrafficmanager2583",
 *             TrafficRoutingMethod = "Performance",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := network.NewProfile(ctx, "profile", &network.ProfileArgs{
 * 			DnsConfig: &network.DnsConfigArgs{
 * 				RelativeName: pulumi.String("azuresdkfornetautoresttrafficmanager6192"),
 * 				Ttl:          pulumi.Float64(35),
 * 			},
 * 			Endpoints: []network.EndpointArgs{
 * 				&network.EndpointArgs{
 * 					EndpointLocation: pulumi.String("North Europe"),
 * 					EndpointStatus:   pulumi.String("Enabled"),
 * 					Name:             pulumi.String("My external endpoint"),
 * 					Target:           pulumi.String("foobar.contoso.com"),
 * 					Type:             pulumi.String("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
 * 				},
 * 			},
 * 			Location: pulumi.String("global"),
 * 			MonitorConfig: &network.MonitorConfigArgs{
 * 				IntervalInSeconds:         pulumi.Float64(10),
 * 				Path:                      pulumi.String("/testpath.aspx"),
 * 				Port:                      pulumi.Float64(80),
 * 				Protocol:                  pulumi.String("HTTP"),
 * 				TimeoutInSeconds:          pulumi.Float64(5),
 * 				ToleratedNumberOfFailures: pulumi.Float64(2),
 * 			},
 * 			ProfileName:          pulumi.String("azuresdkfornetautoresttrafficmanager6192"),
 * 			ProfileStatus:        pulumi.String("Enabled"),
 * 			ResourceGroupName:    pulumi.String("azuresdkfornetautoresttrafficmanager2583"),
 * 			TrafficRoutingMethod: pulumi.String("Performance"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const profile = new azure_native.network.Profile("profile", {
 *     dnsConfig: {
 *         relativeName: "azuresdkfornetautoresttrafficmanager6192",
 *         ttl: 35,
 *     },
 *     endpoints: [{
 *         endpointLocation: "North Europe",
 *         endpointStatus: "Enabled",
 *         name: "My external endpoint",
 *         target: "foobar.contoso.com",
 *         type: "Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
 *     }],
 *     location: "global",
 *     monitorConfig: {
 *         intervalInSeconds: 10,
 *         path: "/testpath.aspx",
 *         port: 80,
 *         protocol: "HTTP",
 *         timeoutInSeconds: 5,
 *         toleratedNumberOfFailures: 2,
 *     },
 *     profileName: "azuresdkfornetautoresttrafficmanager6192",
 *     profileStatus: "Enabled",
 *     resourceGroupName: "azuresdkfornetautoresttrafficmanager2583",
 *     trafficRoutingMethod: "Performance",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * profile = azure_native.network.Profile("profile",
 *     dns_config=azure_native.network.DnsConfigArgs(
 *         relative_name="azuresdkfornetautoresttrafficmanager6192",
 *         ttl=35,
 *     ),
 *     endpoints=[azure_native.network.EndpointArgs(
 *         endpoint_location="North Europe",
 *         endpoint_status="Enabled",
 *         name="My external endpoint",
 *         target="foobar.contoso.com",
 *         type="Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
 *     )],
 *     location="global",
 *     monitor_config=azure_native.network.MonitorConfigArgs(
 *         interval_in_seconds=10,
 *         path="/testpath.aspx",
 *         port=80,
 *         protocol="HTTP",
 *         timeout_in_seconds=5,
 *         tolerated_number_of_failures=2,
 *     ),
 *     profile_name="azuresdkfornetautoresttrafficmanager6192",
 *     profile_status="Enabled",
 *     resource_group_name="azuresdkfornetautoresttrafficmanager2583",
 *     traffic_routing_method="Performance")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Profile-PUT-WithNestedEndpoints
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var profile = new AzureNative.Network.Profile("profile", new AzureNative.Network.ProfileArgs
 *         {
 *             DnsConfig = new AzureNative.Network.Inputs.DnsConfigArgs
 *             {
 *                 RelativeName = "parentprofile",
 *                 Ttl = 35,
 *             },
 *             Endpoints = 
 *             {
 *                 new AzureNative.Network.Inputs.EndpointArgs
 *                 {
 *                     EndpointStatus = "Enabled",
 *                     MinChildEndpoints = 2,
 *                     MinChildEndpointsIPv4 = 1,
 *                     MinChildEndpointsIPv6 = 2,
 *                     Name = "MyFirstNestedEndpoint",
 *                     Priority = 1,
 *                     Target = "firstnestedprofile.tmpreview.watmtest.azure-test.net",
 *                     Type = "Microsoft.Network/trafficManagerProfiles/nestedEndpoints",
 *                     Weight = 1,
 *                 },
 *                 new AzureNative.Network.Inputs.EndpointArgs
 *                 {
 *                     EndpointStatus = "Enabled",
 *                     MinChildEndpoints = 2,
 *                     MinChildEndpointsIPv4 = 2,
 *                     MinChildEndpointsIPv6 = 1,
 *                     Name = "MySecondNestedEndpoint",
 *                     Priority = 2,
 *                     Target = "secondnestedprofile.tmpreview.watmtest.azure-test.net",
 *                     Type = "Microsoft.Network/trafficManagerProfiles/nestedEndpoints",
 *                     Weight = 1,
 *                 },
 *             },
 *             Location = "global",
 *             MonitorConfig = new AzureNative.Network.Inputs.MonitorConfigArgs
 *             {
 *                 IntervalInSeconds = 10,
 *                 Path = "/testpath.aspx",
 *                 Port = 80,
 *                 Protocol = "HTTP",
 *                 TimeoutInSeconds = 5,
 *                 ToleratedNumberOfFailures = 2,
 *             },
 *             ProfileName = "parentprofile",
 *             ProfileStatus = "Enabled",
 *             ResourceGroupName = "myresourcegroup",
 *             TrafficRoutingMethod = "Priority",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	network "github.com/pulumi/pulumi-azure-native/sdk/go/azure/network"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := network.NewProfile(ctx, "profile", &network.ProfileArgs{
 * 			DnsConfig: &network.DnsConfigArgs{
 * 				RelativeName: pulumi.String("parentprofile"),
 * 				Ttl:          pulumi.Float64(35),
 * 			},
 * 			Endpoints: []network.EndpointArgs{
 * 				&network.EndpointArgs{
 * 					EndpointStatus:        pulumi.String("Enabled"),
 * 					MinChildEndpoints:     pulumi.Float64(2),
 * 					MinChildEndpointsIPv4: pulumi.Float64(1),
 * 					MinChildEndpointsIPv6: pulumi.Float64(2),
 * 					Name:                  pulumi.String("MyFirstNestedEndpoint"),
 * 					Priority:              pulumi.Float64(1),
 * 					Target:                pulumi.String("firstnestedprofile.tmpreview.watmtest.azure-test.net"),
 * 					Type:                  pulumi.String("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
 * 					Weight:                pulumi.Float64(1),
 * 				},
 * 				&network.EndpointArgs{
 * 					EndpointStatus:        pulumi.String("Enabled"),
 * 					MinChildEndpoints:     pulumi.Float64(2),
 * 					MinChildEndpointsIPv4: pulumi.Float64(2),
 * 					MinChildEndpointsIPv6: pulumi.Float64(1),
 * 					Name:                  pulumi.String("MySecondNestedEndpoint"),
 * 					Priority:              pulumi.Float64(2),
 * 					Target:                pulumi.String("secondnestedprofile.tmpreview.watmtest.azure-test.net"),
 * 					Type:                  pulumi.String("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
 * 					Weight:                pulumi.Float64(1),
 * 				},
 * 			},
 * 			Location: pulumi.String("global"),
 * 			MonitorConfig: &network.MonitorConfigArgs{
 * 				IntervalInSeconds:         pulumi.Float64(10),
 * 				Path:                      pulumi.String("/testpath.aspx"),
 * 				Port:                      pulumi.Float64(80),
 * 				Protocol:                  pulumi.String("HTTP"),
 * 				TimeoutInSeconds:          pulumi.Float64(5),
 * 				ToleratedNumberOfFailures: pulumi.Float64(2),
 * 			},
 * 			ProfileName:          pulumi.String("parentprofile"),
 * 			ProfileStatus:        pulumi.String("Enabled"),
 * 			ResourceGroupName:    pulumi.String("myresourcegroup"),
 * 			TrafficRoutingMethod: pulumi.String("Priority"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const profile = new azure_native.network.Profile("profile", {
 *     dnsConfig: {
 *         relativeName: "parentprofile",
 *         ttl: 35,
 *     },
 *     endpoints: [
 *         {
 *             endpointStatus: "Enabled",
 *             minChildEndpoints: 2,
 *             minChildEndpointsIPv4: 1,
 *             minChildEndpointsIPv6: 2,
 *             name: "MyFirstNestedEndpoint",
 *             priority: 1,
 *             target: "firstnestedprofile.tmpreview.watmtest.azure-test.net",
 *             type: "Microsoft.Network/trafficManagerProfiles/nestedEndpoints",
 *             weight: 1,
 *         },
 *         {
 *             endpointStatus: "Enabled",
 *             minChildEndpoints: 2,
 *             minChildEndpointsIPv4: 2,
 *             minChildEndpointsIPv6: 1,
 *             name: "MySecondNestedEndpoint",
 *             priority: 2,
 *             target: "secondnestedprofile.tmpreview.watmtest.azure-test.net",
 *             type: "Microsoft.Network/trafficManagerProfiles/nestedEndpoints",
 *             weight: 1,
 *         },
 *     ],
 *     location: "global",
 *     monitorConfig: {
 *         intervalInSeconds: 10,
 *         path: "/testpath.aspx",
 *         port: 80,
 *         protocol: "HTTP",
 *         timeoutInSeconds: 5,
 *         toleratedNumberOfFailures: 2,
 *     },
 *     profileName: "parentprofile",
 *     profileStatus: "Enabled",
 *     resourceGroupName: "myresourcegroup",
 *     trafficRoutingMethod: "Priority",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * profile = azure_native.network.Profile("profile",
 *     dns_config=azure_native.network.DnsConfigArgs(
 *         relative_name="parentprofile",
 *         ttl=35,
 *     ),
 *     endpoints=[
 *         azure_native.network.EndpointArgs(
 *             endpoint_status="Enabled",
 *             min_child_endpoints=2,
 *             min_child_endpoints_i_pv4=1,
 *             min_child_endpoints_i_pv6=2,
 *             name="MyFirstNestedEndpoint",
 *             priority=1,
 *             target="firstnestedprofile.tmpreview.watmtest.azure-test.net",
 *             type="Microsoft.Network/trafficManagerProfiles/nestedEndpoints",
 *             weight=1,
 *         ),
 *         azure_native.network.EndpointArgs(
 *             endpoint_status="Enabled",
 *             min_child_endpoints=2,
 *             min_child_endpoints_i_pv4=2,
 *             min_child_endpoints_i_pv6=1,
 *             name="MySecondNestedEndpoint",
 *             priority=2,
 *             target="secondnestedprofile.tmpreview.watmtest.azure-test.net",
 *             type="Microsoft.Network/trafficManagerProfiles/nestedEndpoints",
 *             weight=1,
 *         ),
 *     ],
 *     location="global",
 *     monitor_config=azure_native.network.MonitorConfigArgs(
 *         interval_in_seconds=10,
 *         path="/testpath.aspx",
 *         port=80,
 *         protocol="HTTP",
 *         timeout_in_seconds=5,
 *         tolerated_number_of_failures=2,
 *     ),
 *     profile_name="parentprofile",
 *     profile_status="Enabled",
 *     resource_group_name="myresourcegroup",
 *     traffic_routing_method="Priority")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:network:Profile parentprofile /subscriptions/{subscription-id}/resourceGroups/myresourcegroup/providers/Microsoft.Network/trafficManagerProfiles/parentprofile 
 * ```
 * 
 */
@ResourceType(type="azure-native:network:Profile")
public class Profile extends io.pulumi.resources.CustomResource {
    /**
     * The list of allowed endpoint record types.
     */
    @Export(name="allowedEndpointRecordTypes", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> allowedEndpointRecordTypes;

    /**
     * @return The list of allowed endpoint record types.
     */
    public Output</* @Nullable */ List<String>> getAllowedEndpointRecordTypes() {
        return this.allowedEndpointRecordTypes;
    }
    /**
     * The DNS settings of the Traffic Manager profile.
     */
    @Export(name="dnsConfig", type=DnsConfigResponse.class, parameters={})
    private Output</* @Nullable */ DnsConfigResponse> dnsConfig;

    /**
     * @return The DNS settings of the Traffic Manager profile.
     */
    public Output</* @Nullable */ DnsConfigResponse> getDnsConfig() {
        return this.dnsConfig;
    }
    /**
     * The list of endpoints in the Traffic Manager profile.
     */
    @Export(name="endpoints", type=List.class, parameters={EndpointResponse.class})
    private Output</* @Nullable */ List<EndpointResponse>> endpoints;

    /**
     * @return The list of endpoints in the Traffic Manager profile.
     */
    public Output</* @Nullable */ List<EndpointResponse>> getEndpoints() {
        return this.endpoints;
    }
    /**
     * The Azure Region where the resource lives
     */
    @Export(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return The Azure Region where the resource lives
     */
    public Output</* @Nullable */ String> getLocation() {
        return this.location;
    }
    /**
     * Maximum number of endpoints to be returned for MultiValue routing type.
     */
    @Export(name="maxReturn", type=Double.class, parameters={})
    private Output</* @Nullable */ Double> maxReturn;

    /**
     * @return Maximum number of endpoints to be returned for MultiValue routing type.
     */
    public Output</* @Nullable */ Double> getMaxReturn() {
        return this.maxReturn;
    }
    /**
     * The endpoint monitoring settings of the Traffic Manager profile.
     */
    @Export(name="monitorConfig", type=MonitorConfigResponse.class, parameters={})
    private Output</* @Nullable */ MonitorConfigResponse> monitorConfig;

    /**
     * @return The endpoint monitoring settings of the Traffic Manager profile.
     */
    public Output</* @Nullable */ MonitorConfigResponse> getMonitorConfig() {
        return this.monitorConfig;
    }
    /**
     * The name of the resource
     */
    @Export(name="name", type=String.class, parameters={})
    private Output</* @Nullable */ String> name;

    /**
     * @return The name of the resource
     */
    public Output</* @Nullable */ String> getName() {
        return this.name;
    }
    /**
     * The status of the Traffic Manager profile.
     */
    @Export(name="profileStatus", type=String.class, parameters={})
    private Output</* @Nullable */ String> profileStatus;

    /**
     * @return The status of the Traffic Manager profile.
     */
    public Output</* @Nullable */ String> getProfileStatus() {
        return this.profileStatus;
    }
    /**
     * Resource tags.
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * The traffic routing method of the Traffic Manager profile.
     */
    @Export(name="trafficRoutingMethod", type=String.class, parameters={})
    private Output</* @Nullable */ String> trafficRoutingMethod;

    /**
     * @return The traffic routing method of the Traffic Manager profile.
     */
    public Output</* @Nullable */ String> getTrafficRoutingMethod() {
        return this.trafficRoutingMethod;
    }
    /**
     * Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
     */
    @Export(name="trafficViewEnrollmentStatus", type=String.class, parameters={})
    private Output</* @Nullable */ String> trafficViewEnrollmentStatus;

    /**
     * @return Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
     */
    public Output</* @Nullable */ String> getTrafficViewEnrollmentStatus() {
        return this.trafficViewEnrollmentStatus;
    }
    /**
     * The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
     */
    @Export(name="type", type=String.class, parameters={})
    private Output</* @Nullable */ String> type;

    /**
     * @return The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
     */
    public Output</* @Nullable */ String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Profile(String name) {
        this(name, ProfileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Profile(String name, ProfileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Profile(String name, ProfileArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:network:Profile", name, args == null ? ProfileArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Profile(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:network:Profile", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:network/v20151101:Profile").build()),
                Output.of(Alias.builder().type("azure-native:network/v20170301:Profile").build()),
                Output.of(Alias.builder().type("azure-native:network/v20170501:Profile").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180201:Profile").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180301:Profile").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180401:Profile").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180801:Profile").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Profile get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Profile(name, id, options);
    }
}
