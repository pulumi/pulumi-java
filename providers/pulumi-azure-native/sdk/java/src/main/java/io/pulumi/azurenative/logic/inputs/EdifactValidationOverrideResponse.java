// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The Edifact validation override settings.
 * 
 */
public final class EdifactValidationOverrideResponse extends io.pulumi.resources.InvokeArgs {

    public static final EdifactValidationOverrideResponse Empty = new EdifactValidationOverrideResponse();

    /**
     * The value indicating whether to allow leading and trailing spaces and zeroes.
     * 
     */
    @Import(name="allowLeadingAndTrailingSpacesAndZeroes", required=true)
      private final Boolean allowLeadingAndTrailingSpacesAndZeroes;

    public Boolean getAllowLeadingAndTrailingSpacesAndZeroes() {
        return this.allowLeadingAndTrailingSpacesAndZeroes;
    }

    /**
     * The value indicating whether to validate character Set.
     * 
     */
    @Import(name="enforceCharacterSet", required=true)
      private final Boolean enforceCharacterSet;

    public Boolean getEnforceCharacterSet() {
        return this.enforceCharacterSet;
    }

    /**
     * The message id on which the validation settings has to be applied.
     * 
     */
    @Import(name="messageId", required=true)
      private final String messageId;

    public String getMessageId() {
        return this.messageId;
    }

    /**
     * The trailing separator policy.
     * 
     */
    @Import(name="trailingSeparatorPolicy", required=true)
      private final String trailingSeparatorPolicy;

    public String getTrailingSeparatorPolicy() {
        return this.trailingSeparatorPolicy;
    }

    /**
     * The value indicating whether to trim leading and trailing spaces and zeroes.
     * 
     */
    @Import(name="trimLeadingAndTrailingSpacesAndZeroes", required=true)
      private final Boolean trimLeadingAndTrailingSpacesAndZeroes;

    public Boolean getTrimLeadingAndTrailingSpacesAndZeroes() {
        return this.trimLeadingAndTrailingSpacesAndZeroes;
    }

    /**
     * The value indicating whether to validate EDI types.
     * 
     */
    @Import(name="validateEDITypes", required=true)
      private final Boolean validateEDITypes;

    public Boolean getValidateEDITypes() {
        return this.validateEDITypes;
    }

    /**
     * The value indicating whether to validate XSD types.
     * 
     */
    @Import(name="validateXSDTypes", required=true)
      private final Boolean validateXSDTypes;

    public Boolean getValidateXSDTypes() {
        return this.validateXSDTypes;
    }

    public EdifactValidationOverrideResponse(
        Boolean allowLeadingAndTrailingSpacesAndZeroes,
        Boolean enforceCharacterSet,
        String messageId,
        String trailingSeparatorPolicy,
        Boolean trimLeadingAndTrailingSpacesAndZeroes,
        Boolean validateEDITypes,
        Boolean validateXSDTypes) {
        this.allowLeadingAndTrailingSpacesAndZeroes = Objects.requireNonNull(allowLeadingAndTrailingSpacesAndZeroes, "expected parameter 'allowLeadingAndTrailingSpacesAndZeroes' to be non-null");
        this.enforceCharacterSet = Objects.requireNonNull(enforceCharacterSet, "expected parameter 'enforceCharacterSet' to be non-null");
        this.messageId = Objects.requireNonNull(messageId, "expected parameter 'messageId' to be non-null");
        this.trailingSeparatorPolicy = Objects.requireNonNull(trailingSeparatorPolicy, "expected parameter 'trailingSeparatorPolicy' to be non-null");
        this.trimLeadingAndTrailingSpacesAndZeroes = Objects.requireNonNull(trimLeadingAndTrailingSpacesAndZeroes, "expected parameter 'trimLeadingAndTrailingSpacesAndZeroes' to be non-null");
        this.validateEDITypes = Objects.requireNonNull(validateEDITypes, "expected parameter 'validateEDITypes' to be non-null");
        this.validateXSDTypes = Objects.requireNonNull(validateXSDTypes, "expected parameter 'validateXSDTypes' to be non-null");
    }

    private EdifactValidationOverrideResponse() {
        this.allowLeadingAndTrailingSpacesAndZeroes = null;
        this.enforceCharacterSet = null;
        this.messageId = null;
        this.trailingSeparatorPolicy = null;
        this.trimLeadingAndTrailingSpacesAndZeroes = null;
        this.validateEDITypes = null;
        this.validateXSDTypes = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdifactValidationOverrideResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowLeadingAndTrailingSpacesAndZeroes;
        private Boolean enforceCharacterSet;
        private String messageId;
        private String trailingSeparatorPolicy;
        private Boolean trimLeadingAndTrailingSpacesAndZeroes;
        private Boolean validateEDITypes;
        private Boolean validateXSDTypes;

        public Builder() {
    	      // Empty
        }

        public Builder(EdifactValidationOverrideResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowLeadingAndTrailingSpacesAndZeroes = defaults.allowLeadingAndTrailingSpacesAndZeroes;
    	      this.enforceCharacterSet = defaults.enforceCharacterSet;
    	      this.messageId = defaults.messageId;
    	      this.trailingSeparatorPolicy = defaults.trailingSeparatorPolicy;
    	      this.trimLeadingAndTrailingSpacesAndZeroes = defaults.trimLeadingAndTrailingSpacesAndZeroes;
    	      this.validateEDITypes = defaults.validateEDITypes;
    	      this.validateXSDTypes = defaults.validateXSDTypes;
        }

        public Builder allowLeadingAndTrailingSpacesAndZeroes(Boolean allowLeadingAndTrailingSpacesAndZeroes) {
            this.allowLeadingAndTrailingSpacesAndZeroes = Objects.requireNonNull(allowLeadingAndTrailingSpacesAndZeroes);
            return this;
        }
        public Builder enforceCharacterSet(Boolean enforceCharacterSet) {
            this.enforceCharacterSet = Objects.requireNonNull(enforceCharacterSet);
            return this;
        }
        public Builder messageId(String messageId) {
            this.messageId = Objects.requireNonNull(messageId);
            return this;
        }
        public Builder trailingSeparatorPolicy(String trailingSeparatorPolicy) {
            this.trailingSeparatorPolicy = Objects.requireNonNull(trailingSeparatorPolicy);
            return this;
        }
        public Builder trimLeadingAndTrailingSpacesAndZeroes(Boolean trimLeadingAndTrailingSpacesAndZeroes) {
            this.trimLeadingAndTrailingSpacesAndZeroes = Objects.requireNonNull(trimLeadingAndTrailingSpacesAndZeroes);
            return this;
        }
        public Builder validateEDITypes(Boolean validateEDITypes) {
            this.validateEDITypes = Objects.requireNonNull(validateEDITypes);
            return this;
        }
        public Builder validateXSDTypes(Boolean validateXSDTypes) {
            this.validateXSDTypes = Objects.requireNonNull(validateXSDTypes);
            return this;
        }        public EdifactValidationOverrideResponse build() {
            return new EdifactValidationOverrideResponse(allowLeadingAndTrailingSpacesAndZeroes, enforceCharacterSet, messageId, trailingSeparatorPolicy, trimLeadingAndTrailingSpacesAndZeroes, validateEDITypes, validateXSDTypes);
        }
    }
}
