// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.azurenative.machinelearningservices.enums.Header;
import io.pulumi.azurenative.machinelearningservices.enums.SourceType;
import io.pulumi.azurenative.machinelearningservices.inputs.DatasetCreateRequestPathArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.DatasetCreateRequestQueryArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatasetCreateRequestParametersArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatasetCreateRequestParametersArgs Empty = new DatasetCreateRequestParametersArgs();

    /**
     * Header type.
     * 
     */
    @InputImport(name="header")
      private final @Nullable Input<Either<String,Header>> header;

    public Input<Either<String,Header>> getHeader() {
        return this.header == null ? Input.empty() : this.header;
    }

    /**
     * Boolean to keep path information as column in the dataset. Defaults to False. This is useful when reading multiple files, and want to know which file a particular record originated from, or to keep useful information in file path.
     * 
     */
    @InputImport(name="includePath")
      private final @Nullable Input<Boolean> includePath;

    public Input<Boolean> getIncludePath() {
        return this.includePath == null ? Input.empty() : this.includePath;
    }

    /**
     * The partition information of each path will be extracted into columns based on the specified format. Format part '{column_name}' creates string column, and '{column_name:yyyy/MM/dd/HH/mm/ss}' creates datetime column, where 'yyyy', 'MM', 'dd', 'HH', 'mm' and 'ss' are used to extract year, month, day, hour, minute and second for the datetime type. The format should start from the position of first partition key until the end of file path. For example, given the path '../USA/2019/01/01/data.parquet' where the partition is by country/region and time, partition_format='/{CountryOrRegion}/{PartitionDate:yyyy/MM/dd}/data.csv' creates a string column 'CountryOrRegion' with the value 'USA' and a datetime column 'PartitionDate' with the value '2019-01-01
     * 
     */
    @InputImport(name="partitionFormat")
      private final @Nullable Input<String> partitionFormat;

    public Input<String> getPartitionFormat() {
        return this.partitionFormat == null ? Input.empty() : this.partitionFormat;
    }

    @InputImport(name="path")
      private final @Nullable Input<DatasetCreateRequestPathArgs> path;

    public Input<DatasetCreateRequestPathArgs> getPath() {
        return this.path == null ? Input.empty() : this.path;
    }

    @InputImport(name="query")
      private final @Nullable Input<DatasetCreateRequestQueryArgs> query;

    public Input<DatasetCreateRequestQueryArgs> getQuery() {
        return this.query == null ? Input.empty() : this.query;
    }

    /**
     * The separator used to split columns for 'delimited_files' sourceType.
     * 
     */
    @InputImport(name="separator")
      private final @Nullable Input<String> separator;

    public Input<String> getSeparator() {
        return this.separator == null ? Input.empty() : this.separator;
    }

    /**
     * Data source type.
     * 
     */
    @InputImport(name="sourceType")
      private final @Nullable Input<Either<String,SourceType>> sourceType;

    public Input<Either<String,SourceType>> getSourceType() {
        return this.sourceType == null ? Input.empty() : this.sourceType;
    }

    public DatasetCreateRequestParametersArgs(
        @Nullable Input<Either<String,Header>> header,
        @Nullable Input<Boolean> includePath,
        @Nullable Input<String> partitionFormat,
        @Nullable Input<DatasetCreateRequestPathArgs> path,
        @Nullable Input<DatasetCreateRequestQueryArgs> query,
        @Nullable Input<String> separator,
        @Nullable Input<Either<String,SourceType>> sourceType) {
        this.header = header;
        this.includePath = includePath == null ? Input.ofNullable(false) : includePath;
        this.partitionFormat = partitionFormat;
        this.path = path;
        this.query = query;
        this.separator = separator;
        this.sourceType = sourceType;
    }

    private DatasetCreateRequestParametersArgs() {
        this.header = Input.empty();
        this.includePath = Input.empty();
        this.partitionFormat = Input.empty();
        this.path = Input.empty();
        this.query = Input.empty();
        this.separator = Input.empty();
        this.sourceType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetCreateRequestParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,Header>> header;
        private @Nullable Input<Boolean> includePath;
        private @Nullable Input<String> partitionFormat;
        private @Nullable Input<DatasetCreateRequestPathArgs> path;
        private @Nullable Input<DatasetCreateRequestQueryArgs> query;
        private @Nullable Input<String> separator;
        private @Nullable Input<Either<String,SourceType>> sourceType;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetCreateRequestParametersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.header = defaults.header;
    	      this.includePath = defaults.includePath;
    	      this.partitionFormat = defaults.partitionFormat;
    	      this.path = defaults.path;
    	      this.query = defaults.query;
    	      this.separator = defaults.separator;
    	      this.sourceType = defaults.sourceType;
        }

        public Builder setHeader(@Nullable Input<Either<String,Header>> header) {
            this.header = header;
            return this;
        }

        public Builder setHeader(@Nullable Either<String,Header> header) {
            this.header = Input.ofNullable(header);
            return this;
        }

        public Builder setIncludePath(@Nullable Input<Boolean> includePath) {
            this.includePath = includePath;
            return this;
        }

        public Builder setIncludePath(@Nullable Boolean includePath) {
            this.includePath = Input.ofNullable(includePath);
            return this;
        }

        public Builder setPartitionFormat(@Nullable Input<String> partitionFormat) {
            this.partitionFormat = partitionFormat;
            return this;
        }

        public Builder setPartitionFormat(@Nullable String partitionFormat) {
            this.partitionFormat = Input.ofNullable(partitionFormat);
            return this;
        }

        public Builder setPath(@Nullable Input<DatasetCreateRequestPathArgs> path) {
            this.path = path;
            return this;
        }

        public Builder setPath(@Nullable DatasetCreateRequestPathArgs path) {
            this.path = Input.ofNullable(path);
            return this;
        }

        public Builder setQuery(@Nullable Input<DatasetCreateRequestQueryArgs> query) {
            this.query = query;
            return this;
        }

        public Builder setQuery(@Nullable DatasetCreateRequestQueryArgs query) {
            this.query = Input.ofNullable(query);
            return this;
        }

        public Builder setSeparator(@Nullable Input<String> separator) {
            this.separator = separator;
            return this;
        }

        public Builder setSeparator(@Nullable String separator) {
            this.separator = Input.ofNullable(separator);
            return this;
        }

        public Builder setSourceType(@Nullable Input<Either<String,SourceType>> sourceType) {
            this.sourceType = sourceType;
            return this;
        }

        public Builder setSourceType(@Nullable Either<String,SourceType> sourceType) {
            this.sourceType = Input.ofNullable(sourceType);
            return this;
        }
        public DatasetCreateRequestParametersArgs build() {
            return new DatasetCreateRequestParametersArgs(header, includePath, partitionFormat, path, query, separator, sourceType);
        }
    }
}
