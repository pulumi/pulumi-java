// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry.inputs;

import io.pulumi.azurenative.containerregistry.enums.BaseImageTriggerType;
import io.pulumi.azurenative.containerregistry.enums.TriggerStatus;
import io.pulumi.azurenative.containerregistry.enums.UpdateTriggerPayloadType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The trigger based on base image dependency.
 * 
 */
public final class BaseImageTriggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final BaseImageTriggerArgs Empty = new BaseImageTriggerArgs();

    /**
     * The type of the auto trigger for base image dependency updates.
     * 
     */
    @Import(name="baseImageTriggerType", required=true)
      private final Output<Either<String,BaseImageTriggerType>> baseImageTriggerType;

    public Output<Either<String,BaseImageTriggerType>> baseImageTriggerType() {
        return this.baseImageTriggerType;
    }

    /**
     * The name of the trigger.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The current status of trigger.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<Either<String,TriggerStatus>> status;

    public Output<Either<String,TriggerStatus>> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * The endpoint URL for receiving update triggers.
     * 
     */
    @Import(name="updateTriggerEndpoint")
      private final @Nullable Output<String> updateTriggerEndpoint;

    public Output<String> updateTriggerEndpoint() {
        return this.updateTriggerEndpoint == null ? Codegen.empty() : this.updateTriggerEndpoint;
    }

    /**
     * Type of Payload body for Base image update triggers.
     * 
     */
    @Import(name="updateTriggerPayloadType")
      private final @Nullable Output<Either<String,UpdateTriggerPayloadType>> updateTriggerPayloadType;

    public Output<Either<String,UpdateTriggerPayloadType>> updateTriggerPayloadType() {
        return this.updateTriggerPayloadType == null ? Codegen.empty() : this.updateTriggerPayloadType;
    }

    public BaseImageTriggerArgs(
        Output<Either<String,BaseImageTriggerType>> baseImageTriggerType,
        Output<String> name,
        @Nullable Output<Either<String,TriggerStatus>> status,
        @Nullable Output<String> updateTriggerEndpoint,
        @Nullable Output<Either<String,UpdateTriggerPayloadType>> updateTriggerPayloadType) {
        this.baseImageTriggerType = Objects.requireNonNull(baseImageTriggerType, "expected parameter 'baseImageTriggerType' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.status = status == null ? Output.ofLeft("Enabled") : status;
        this.updateTriggerEndpoint = updateTriggerEndpoint;
        this.updateTriggerPayloadType = updateTriggerPayloadType;
    }

    private BaseImageTriggerArgs() {
        this.baseImageTriggerType = Codegen.empty();
        this.name = Codegen.empty();
        this.status = Codegen.empty();
        this.updateTriggerEndpoint = Codegen.empty();
        this.updateTriggerPayloadType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BaseImageTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,BaseImageTriggerType>> baseImageTriggerType;
        private Output<String> name;
        private @Nullable Output<Either<String,TriggerStatus>> status;
        private @Nullable Output<String> updateTriggerEndpoint;
        private @Nullable Output<Either<String,UpdateTriggerPayloadType>> updateTriggerPayloadType;

        public Builder() {
    	      // Empty
        }

        public Builder(BaseImageTriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseImageTriggerType = defaults.baseImageTriggerType;
    	      this.name = defaults.name;
    	      this.status = defaults.status;
    	      this.updateTriggerEndpoint = defaults.updateTriggerEndpoint;
    	      this.updateTriggerPayloadType = defaults.updateTriggerPayloadType;
        }

        public Builder baseImageTriggerType(Output<Either<String,BaseImageTriggerType>> baseImageTriggerType) {
            this.baseImageTriggerType = Objects.requireNonNull(baseImageTriggerType);
            return this;
        }
        public Builder baseImageTriggerType(Either<String,BaseImageTriggerType> baseImageTriggerType) {
            this.baseImageTriggerType = Output.of(Objects.requireNonNull(baseImageTriggerType));
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder status(@Nullable Output<Either<String,TriggerStatus>> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable Either<String,TriggerStatus> status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder updateTriggerEndpoint(@Nullable Output<String> updateTriggerEndpoint) {
            this.updateTriggerEndpoint = updateTriggerEndpoint;
            return this;
        }
        public Builder updateTriggerEndpoint(@Nullable String updateTriggerEndpoint) {
            this.updateTriggerEndpoint = Codegen.ofNullable(updateTriggerEndpoint);
            return this;
        }
        public Builder updateTriggerPayloadType(@Nullable Output<Either<String,UpdateTriggerPayloadType>> updateTriggerPayloadType) {
            this.updateTriggerPayloadType = updateTriggerPayloadType;
            return this;
        }
        public Builder updateTriggerPayloadType(@Nullable Either<String,UpdateTriggerPayloadType> updateTriggerPayloadType) {
            this.updateTriggerPayloadType = Codegen.ofNullable(updateTriggerPayloadType);
            return this;
        }        public BaseImageTriggerArgs build() {
            return new BaseImageTriggerArgs(baseImageTriggerType, name, status, updateTriggerEndpoint, updateTriggerPayloadType);
        }
    }
}
