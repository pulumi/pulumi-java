// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databox;

import io.pulumi.azurenative.databox.enums.JobDeliveryType;
import io.pulumi.azurenative.databox.enums.TransferType;
import io.pulumi.azurenative.databox.inputs.DataBoxDiskJobDetailsArgs;
import io.pulumi.azurenative.databox.inputs.DataBoxHeavyJobDetailsArgs;
import io.pulumi.azurenative.databox.inputs.DataBoxJobDetailsArgs;
import io.pulumi.azurenative.databox.inputs.JobDeliveryInfoArgs;
import io.pulumi.azurenative.databox.inputs.ResourceIdentityArgs;
import io.pulumi.azurenative.databox.inputs.SkuArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobArgs Empty = new JobArgs();

    /**
     * Delivery Info of Job.
     * 
     */
    @Import(name="deliveryInfo")
      private final @Nullable Output<JobDeliveryInfoArgs> deliveryInfo;

    public Output<JobDeliveryInfoArgs> getDeliveryInfo() {
        return this.deliveryInfo == null ? Output.empty() : this.deliveryInfo;
    }

    /**
     * Delivery type of Job.
     * 
     */
    @Import(name="deliveryType")
      private final @Nullable Output<Either<String,JobDeliveryType>> deliveryType;

    public Output<Either<String,JobDeliveryType>> getDeliveryType() {
        return this.deliveryType == null ? Output.empty() : this.deliveryType;
    }

    /**
     * Details of a job run. This field will only be sent for expand details filter.
     * 
     */
    @Import(name="details")
      private final @Nullable Output<Object> details;

    public Output<Object> getDetails() {
        return this.details == null ? Output.empty() : this.details;
    }

    /**
     * Msi identity of the resource
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<ResourceIdentityArgs> identity;

    public Output<ResourceIdentityArgs> getIdentity() {
        return this.identity == null ? Output.empty() : this.identity;
    }

    /**
     * The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * 
     */
    @Import(name="jobName")
      private final @Nullable Output<String> jobName;

    public Output<String> getJobName() {
        return this.jobName == null ? Output.empty() : this.jobName;
    }

    /**
     * The location of the resource. This will be one of the supported and registered Azure Regions (e.g. West US, East US, Southeast Asia, etc.). The region of a resource cannot be changed once it is created, but if an identical region is specified on update the request will succeed.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The Resource Group Name
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The sku type.
     * 
     */
    @Import(name="sku", required=true)
      private final Output<SkuArgs> sku;

    public Output<SkuArgs> getSku() {
        return this.sku;
    }

    /**
     * The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups).
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Type of the data transfer.
     * 
     */
    @Import(name="transferType", required=true)
      private final Output<Either<String,TransferType>> transferType;

    public Output<Either<String,TransferType>> getTransferType() {
        return this.transferType;
    }

    public JobArgs(
        @Nullable Output<JobDeliveryInfoArgs> deliveryInfo,
        @Nullable Output<Either<String,JobDeliveryType>> deliveryType,
        @Nullable Output<Object> details,
        @Nullable Output<ResourceIdentityArgs> identity,
        @Nullable Output<String> jobName,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        Output<SkuArgs> sku,
        @Nullable Output<Map<String,String>> tags,
        Output<Either<String,TransferType>> transferType) {
        this.deliveryInfo = deliveryInfo;
        this.deliveryType = deliveryType == null ? Output.ofLeft("NonScheduled") : deliveryType;
        this.details = details;
        this.identity = identity;
        this.jobName = jobName;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = Objects.requireNonNull(sku, "expected parameter 'sku' to be non-null");
        this.tags = tags;
        this.transferType = Objects.requireNonNull(transferType, "expected parameter 'transferType' to be non-null");
    }

    private JobArgs() {
        this.deliveryInfo = Output.empty();
        this.deliveryType = Output.empty();
        this.details = Output.empty();
        this.identity = Output.empty();
        this.jobName = Output.empty();
        this.location = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sku = Output.empty();
        this.tags = Output.empty();
        this.transferType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<JobDeliveryInfoArgs> deliveryInfo;
        private @Nullable Output<Either<String,JobDeliveryType>> deliveryType;
        private @Nullable Output<Object> details;
        private @Nullable Output<ResourceIdentityArgs> identity;
        private @Nullable Output<String> jobName;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private Output<SkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;
        private Output<Either<String,TransferType>> transferType;

        public Builder() {
    	      // Empty
        }

        public Builder(JobArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deliveryInfo = defaults.deliveryInfo;
    	      this.deliveryType = defaults.deliveryType;
    	      this.details = defaults.details;
    	      this.identity = defaults.identity;
    	      this.jobName = defaults.jobName;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.transferType = defaults.transferType;
        }

        public Builder deliveryInfo(@Nullable Output<JobDeliveryInfoArgs> deliveryInfo) {
            this.deliveryInfo = deliveryInfo;
            return this;
        }
        public Builder deliveryInfo(@Nullable JobDeliveryInfoArgs deliveryInfo) {
            this.deliveryInfo = Output.ofNullable(deliveryInfo);
            return this;
        }
        public Builder deliveryType(@Nullable Output<Either<String,JobDeliveryType>> deliveryType) {
            this.deliveryType = deliveryType;
            return this;
        }
        public Builder deliveryType(@Nullable Either<String,JobDeliveryType> deliveryType) {
            this.deliveryType = Output.ofNullable(deliveryType);
            return this;
        }
        public Builder details(@Nullable Output<Object> details) {
            this.details = details;
            return this;
        }
        public Builder details(@Nullable Object details) {
            this.details = Output.ofNullable(details);
            return this;
        }
        public Builder identity(@Nullable Output<ResourceIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable ResourceIdentityArgs identity) {
            this.identity = Output.ofNullable(identity);
            return this;
        }
        public Builder jobName(@Nullable Output<String> jobName) {
            this.jobName = jobName;
            return this;
        }
        public Builder jobName(@Nullable String jobName) {
            this.jobName = Output.ofNullable(jobName);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sku(Output<SkuArgs> sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        public Builder sku(SkuArgs sku) {
            this.sku = Output.of(Objects.requireNonNull(sku));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder transferType(Output<Either<String,TransferType>> transferType) {
            this.transferType = Objects.requireNonNull(transferType);
            return this;
        }
        public Builder transferType(Either<String,TransferType> transferType) {
            this.transferType = Output.of(Objects.requireNonNull(transferType));
            return this;
        }        public JobArgs build() {
            return new JobArgs(deliveryInfo, deliveryType, details, identity, jobName, location, resourceGroupName, sku, tags, transferType);
        }
    }
}
