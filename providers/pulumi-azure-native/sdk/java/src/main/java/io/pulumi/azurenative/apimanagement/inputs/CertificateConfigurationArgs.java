// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement.inputs;

import io.pulumi.azurenative.apimanagement.inputs.CertificateInformationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Certificate configuration which consist of non-trusted intermediates and root certificates.
 * 
 */
public final class CertificateConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateConfigurationArgs Empty = new CertificateConfigurationArgs();

    /**
     * Certificate information.
     * 
     */
    @Import(name="certificate")
      private final @Nullable Output<CertificateInformationArgs> certificate;

    public Output<CertificateInformationArgs> certificate() {
        return this.certificate == null ? Codegen.empty() : this.certificate;
    }

    /**
     * Certificate Password.
     * 
     */
    @Import(name="certificatePassword")
      private final @Nullable Output<String> certificatePassword;

    public Output<String> certificatePassword() {
        return this.certificatePassword == null ? Codegen.empty() : this.certificatePassword;
    }

    /**
     * Base64 Encoded certificate.
     * 
     */
    @Import(name="encodedCertificate")
      private final @Nullable Output<String> encodedCertificate;

    public Output<String> encodedCertificate() {
        return this.encodedCertificate == null ? Codegen.empty() : this.encodedCertificate;
    }

    /**
     * The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.
     * 
     */
    @Import(name="storeName", required=true)
      private final Output<String> storeName;

    public Output<String> storeName() {
        return this.storeName;
    }

    public CertificateConfigurationArgs(
        @Nullable Output<CertificateInformationArgs> certificate,
        @Nullable Output<String> certificatePassword,
        @Nullable Output<String> encodedCertificate,
        Output<String> storeName) {
        this.certificate = certificate;
        this.certificatePassword = certificatePassword;
        this.encodedCertificate = encodedCertificate;
        this.storeName = Objects.requireNonNull(storeName, "expected parameter 'storeName' to be non-null");
    }

    private CertificateConfigurationArgs() {
        this.certificate = Codegen.empty();
        this.certificatePassword = Codegen.empty();
        this.encodedCertificate = Codegen.empty();
        this.storeName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<CertificateInformationArgs> certificate;
        private @Nullable Output<String> certificatePassword;
        private @Nullable Output<String> encodedCertificate;
        private Output<String> storeName;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificate = defaults.certificate;
    	      this.certificatePassword = defaults.certificatePassword;
    	      this.encodedCertificate = defaults.encodedCertificate;
    	      this.storeName = defaults.storeName;
        }

        public Builder certificate(@Nullable Output<CertificateInformationArgs> certificate) {
            this.certificate = certificate;
            return this;
        }
        public Builder certificate(@Nullable CertificateInformationArgs certificate) {
            this.certificate = Codegen.ofNullable(certificate);
            return this;
        }
        public Builder certificatePassword(@Nullable Output<String> certificatePassword) {
            this.certificatePassword = certificatePassword;
            return this;
        }
        public Builder certificatePassword(@Nullable String certificatePassword) {
            this.certificatePassword = Codegen.ofNullable(certificatePassword);
            return this;
        }
        public Builder encodedCertificate(@Nullable Output<String> encodedCertificate) {
            this.encodedCertificate = encodedCertificate;
            return this;
        }
        public Builder encodedCertificate(@Nullable String encodedCertificate) {
            this.encodedCertificate = Codegen.ofNullable(encodedCertificate);
            return this;
        }
        public Builder storeName(Output<String> storeName) {
            this.storeName = Objects.requireNonNull(storeName);
            return this;
        }
        public Builder storeName(String storeName) {
            this.storeName = Output.of(Objects.requireNonNull(storeName));
            return this;
        }        public CertificateConfigurationArgs build() {
            return new CertificateConfigurationArgs(certificate, certificatePassword, encodedCertificate, storeName);
        }
    }
}
