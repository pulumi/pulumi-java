// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab.inputs;

import io.pulumi.azurenative.devtestlab.enums.StorageType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Properties to attach new disk to the Virtual Machine.
 * 
 */
public final class AttachNewDataDiskOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AttachNewDataDiskOptionsArgs Empty = new AttachNewDataDiskOptionsArgs();

    /**
     * The name of the disk to be attached.
     * 
     */
    @Import(name="diskName")
      private final @Nullable Output<String> diskName;

    public Output<String> diskName() {
        return this.diskName == null ? Codegen.empty() : this.diskName;
    }

    /**
     * Size of the disk to be attached in Gibibytes.
     * 
     */
    @Import(name="diskSizeGiB")
      private final @Nullable Output<Integer> diskSizeGiB;

    public Output<Integer> diskSizeGiB() {
        return this.diskSizeGiB == null ? Codegen.empty() : this.diskSizeGiB;
    }

    /**
     * The storage type for the disk (i.e. Standard, Premium).
     * 
     */
    @Import(name="diskType")
      private final @Nullable Output<Either<String,StorageType>> diskType;

    public Output<Either<String,StorageType>> diskType() {
        return this.diskType == null ? Codegen.empty() : this.diskType;
    }

    public AttachNewDataDiskOptionsArgs(
        @Nullable Output<String> diskName,
        @Nullable Output<Integer> diskSizeGiB,
        @Nullable Output<Either<String,StorageType>> diskType) {
        this.diskName = diskName;
        this.diskSizeGiB = diskSizeGiB;
        this.diskType = diskType;
    }

    private AttachNewDataDiskOptionsArgs() {
        this.diskName = Codegen.empty();
        this.diskSizeGiB = Codegen.empty();
        this.diskType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AttachNewDataDiskOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> diskName;
        private @Nullable Output<Integer> diskSizeGiB;
        private @Nullable Output<Either<String,StorageType>> diskType;

        public Builder() {
    	      // Empty
        }

        public Builder(AttachNewDataDiskOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskName = defaults.diskName;
    	      this.diskSizeGiB = defaults.diskSizeGiB;
    	      this.diskType = defaults.diskType;
        }

        public Builder diskName(@Nullable Output<String> diskName) {
            this.diskName = diskName;
            return this;
        }
        public Builder diskName(@Nullable String diskName) {
            this.diskName = Codegen.ofNullable(diskName);
            return this;
        }
        public Builder diskSizeGiB(@Nullable Output<Integer> diskSizeGiB) {
            this.diskSizeGiB = diskSizeGiB;
            return this;
        }
        public Builder diskSizeGiB(@Nullable Integer diskSizeGiB) {
            this.diskSizeGiB = Codegen.ofNullable(diskSizeGiB);
            return this;
        }
        public Builder diskType(@Nullable Output<Either<String,StorageType>> diskType) {
            this.diskType = diskType;
            return this;
        }
        public Builder diskType(@Nullable Either<String,StorageType> diskType) {
            this.diskType = Codegen.ofNullable(diskType);
            return this;
        }        public AttachNewDataDiskOptionsArgs build() {
            return new AttachNewDataDiskOptionsArgs(diskName, diskSizeGiB, diskType);
        }
    }
}
