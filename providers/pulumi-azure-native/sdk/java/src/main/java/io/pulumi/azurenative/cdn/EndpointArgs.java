// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn;

import io.pulumi.azurenative.cdn.enums.OptimizationType;
import io.pulumi.azurenative.cdn.enums.QueryStringCachingBehavior;
import io.pulumi.azurenative.cdn.inputs.DeepCreatedOriginArgs;
import io.pulumi.azurenative.cdn.inputs.DeepCreatedOriginGroupArgs;
import io.pulumi.azurenative.cdn.inputs.EndpointPropertiesUpdateParametersDeliveryPolicyArgs;
import io.pulumi.azurenative.cdn.inputs.EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs;
import io.pulumi.azurenative.cdn.inputs.GeoFilterArgs;
import io.pulumi.azurenative.cdn.inputs.ResourceReferenceArgs;
import io.pulumi.azurenative.cdn.inputs.UrlSigningKeyArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * List of content types on which compression applies. The value should be a valid MIME type.
     * 
     */
    @InputImport(name="contentTypesToCompress")
    private final @Nullable Input<List<String>> contentTypesToCompress;

    public Input<List<String>> getContentTypesToCompress() {
        return this.contentTypesToCompress == null ? Input.empty() : this.contentTypesToCompress;
    }

    /**
     * A reference to the origin group.
     * 
     */
    @InputImport(name="defaultOriginGroup")
    private final @Nullable Input<ResourceReferenceArgs> defaultOriginGroup;

    public Input<ResourceReferenceArgs> getDefaultOriginGroup() {
        return this.defaultOriginGroup == null ? Input.empty() : this.defaultOriginGroup;
    }

    /**
     * A policy that specifies the delivery rules to be used for an endpoint.
     * 
     */
    @InputImport(name="deliveryPolicy")
    private final @Nullable Input<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy;

    public Input<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> getDeliveryPolicy() {
        return this.deliveryPolicy == null ? Input.empty() : this.deliveryPolicy;
    }

    /**
     * Name of the endpoint under the profile which is unique globally.
     * 
     */
    @InputImport(name="endpointName")
    private final @Nullable Input<String> endpointName;

    public Input<String> getEndpointName() {
        return this.endpointName == null ? Input.empty() : this.endpointName;
    }

    /**
     * List of rules defining the user's geo access within a CDN endpoint. Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path /pictures/
     * 
     */
    @InputImport(name="geoFilters")
    private final @Nullable Input<List<GeoFilterArgs>> geoFilters;

    public Input<List<GeoFilterArgs>> getGeoFilters() {
        return this.geoFilters == null ? Input.empty() : this.geoFilters;
    }

    /**
     * Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on CDN when requested content is smaller than 1 byte or larger than 1 MB.
     * 
     */
    @InputImport(name="isCompressionEnabled")
    private final @Nullable Input<Boolean> isCompressionEnabled;

    public Input<Boolean> getIsCompressionEnabled() {
        return this.isCompressionEnabled == null ? Input.empty() : this.isCompressionEnabled;
    }

    /**
     * Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.
     * 
     */
    @InputImport(name="isHttpAllowed")
    private final @Nullable Input<Boolean> isHttpAllowed;

    public Input<Boolean> getIsHttpAllowed() {
        return this.isHttpAllowed == null ? Input.empty() : this.isHttpAllowed;
    }

    /**
     * Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.
     * 
     */
    @InputImport(name="isHttpsAllowed")
    private final @Nullable Input<Boolean> isHttpsAllowed;

    public Input<Boolean> getIsHttpsAllowed() {
        return this.isHttpsAllowed == null ? Input.empty() : this.isHttpsAllowed;
    }

    /**
     * Resource location.
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.
     * 
     */
    @InputImport(name="optimizationType")
    private final @Nullable Input<Either<String,OptimizationType>> optimizationType;

    public Input<Either<String,OptimizationType>> getOptimizationType() {
        return this.optimizationType == null ? Input.empty() : this.optimizationType;
    }

    /**
     * The origin groups comprising of origins that are used for load balancing the traffic based on availability.
     * 
     */
    @InputImport(name="originGroups")
    private final @Nullable Input<List<DeepCreatedOriginGroupArgs>> originGroups;

    public Input<List<DeepCreatedOriginGroupArgs>> getOriginGroups() {
        return this.originGroups == null ? Input.empty() : this.originGroups;
    }

    /**
     * The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
     * 
     */
    @InputImport(name="originHostHeader")
    private final @Nullable Input<String> originHostHeader;

    public Input<String> getOriginHostHeader() {
        return this.originHostHeader == null ? Input.empty() : this.originHostHeader;
    }

    /**
     * A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
     * 
     */
    @InputImport(name="originPath")
    private final @Nullable Input<String> originPath;

    public Input<String> getOriginPath() {
        return this.originPath == null ? Input.empty() : this.originPath;
    }

    /**
     * The source of the content being delivered via CDN.
     * 
     */
    @InputImport(name="origins", required=true)
    private final Input<List<DeepCreatedOriginArgs>> origins;

    public Input<List<DeepCreatedOriginArgs>> getOrigins() {
        return this.origins;
    }

    /**
     * Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin.
     * 
     */
    @InputImport(name="probePath")
    private final @Nullable Input<String> probePath;

    public Input<String> getProbePath() {
        return this.probePath == null ? Input.empty() : this.probePath;
    }

    /**
     * Name of the CDN profile which is unique within the resource group.
     * 
     */
    @InputImport(name="profileName", required=true)
    private final Input<String> profileName;

    public Input<String> getProfileName() {
        return this.profileName;
    }

    /**
     * Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
     * 
     */
    @InputImport(name="queryStringCachingBehavior")
    private final @Nullable Input<QueryStringCachingBehavior> queryStringCachingBehavior;

    public Input<QueryStringCachingBehavior> getQueryStringCachingBehavior() {
        return this.queryStringCachingBehavior == null ? Input.empty() : this.queryStringCachingBehavior;
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * List of keys used to validate the signed URL hashes.
     * 
     */
    @InputImport(name="urlSigningKeys")
    private final @Nullable Input<List<UrlSigningKeyArgs>> urlSigningKeys;

    public Input<List<UrlSigningKeyArgs>> getUrlSigningKeys() {
        return this.urlSigningKeys == null ? Input.empty() : this.urlSigningKeys;
    }

    /**
     * Defines the Web Application Firewall policy for the endpoint (if applicable)
     * 
     */
    @InputImport(name="webApplicationFirewallPolicyLink")
    private final @Nullable Input<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink;

    public Input<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> getWebApplicationFirewallPolicyLink() {
        return this.webApplicationFirewallPolicyLink == null ? Input.empty() : this.webApplicationFirewallPolicyLink;
    }

    public EndpointArgs(
        @Nullable Input<List<String>> contentTypesToCompress,
        @Nullable Input<ResourceReferenceArgs> defaultOriginGroup,
        @Nullable Input<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy,
        @Nullable Input<String> endpointName,
        @Nullable Input<List<GeoFilterArgs>> geoFilters,
        @Nullable Input<Boolean> isCompressionEnabled,
        @Nullable Input<Boolean> isHttpAllowed,
        @Nullable Input<Boolean> isHttpsAllowed,
        @Nullable Input<String> location,
        @Nullable Input<Either<String,OptimizationType>> optimizationType,
        @Nullable Input<List<DeepCreatedOriginGroupArgs>> originGroups,
        @Nullable Input<String> originHostHeader,
        @Nullable Input<String> originPath,
        Input<List<DeepCreatedOriginArgs>> origins,
        @Nullable Input<String> probePath,
        Input<String> profileName,
        @Nullable Input<QueryStringCachingBehavior> queryStringCachingBehavior,
        Input<String> resourceGroupName,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<List<UrlSigningKeyArgs>> urlSigningKeys,
        @Nullable Input<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink) {
        this.contentTypesToCompress = contentTypesToCompress;
        this.defaultOriginGroup = defaultOriginGroup;
        this.deliveryPolicy = deliveryPolicy;
        this.endpointName = endpointName;
        this.geoFilters = geoFilters;
        this.isCompressionEnabled = isCompressionEnabled;
        this.isHttpAllowed = isHttpAllowed;
        this.isHttpsAllowed = isHttpsAllowed;
        this.location = location;
        this.optimizationType = optimizationType;
        this.originGroups = originGroups;
        this.originHostHeader = originHostHeader;
        this.originPath = originPath;
        this.origins = Objects.requireNonNull(origins, "expected parameter 'origins' to be non-null");
        this.probePath = probePath;
        this.profileName = Objects.requireNonNull(profileName, "expected parameter 'profileName' to be non-null");
        this.queryStringCachingBehavior = queryStringCachingBehavior;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.urlSigningKeys = urlSigningKeys;
        this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
    }

    private EndpointArgs() {
        this.contentTypesToCompress = Input.empty();
        this.defaultOriginGroup = Input.empty();
        this.deliveryPolicy = Input.empty();
        this.endpointName = Input.empty();
        this.geoFilters = Input.empty();
        this.isCompressionEnabled = Input.empty();
        this.isHttpAllowed = Input.empty();
        this.isHttpsAllowed = Input.empty();
        this.location = Input.empty();
        this.optimizationType = Input.empty();
        this.originGroups = Input.empty();
        this.originHostHeader = Input.empty();
        this.originPath = Input.empty();
        this.origins = Input.empty();
        this.probePath = Input.empty();
        this.profileName = Input.empty();
        this.queryStringCachingBehavior = Input.empty();
        this.resourceGroupName = Input.empty();
        this.tags = Input.empty();
        this.urlSigningKeys = Input.empty();
        this.webApplicationFirewallPolicyLink = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> contentTypesToCompress;
        private @Nullable Input<ResourceReferenceArgs> defaultOriginGroup;
        private @Nullable Input<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy;
        private @Nullable Input<String> endpointName;
        private @Nullable Input<List<GeoFilterArgs>> geoFilters;
        private @Nullable Input<Boolean> isCompressionEnabled;
        private @Nullable Input<Boolean> isHttpAllowed;
        private @Nullable Input<Boolean> isHttpsAllowed;
        private @Nullable Input<String> location;
        private @Nullable Input<Either<String,OptimizationType>> optimizationType;
        private @Nullable Input<List<DeepCreatedOriginGroupArgs>> originGroups;
        private @Nullable Input<String> originHostHeader;
        private @Nullable Input<String> originPath;
        private Input<List<DeepCreatedOriginArgs>> origins;
        private @Nullable Input<String> probePath;
        private Input<String> profileName;
        private @Nullable Input<QueryStringCachingBehavior> queryStringCachingBehavior;
        private Input<String> resourceGroupName;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<List<UrlSigningKeyArgs>> urlSigningKeys;
        private @Nullable Input<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentTypesToCompress = defaults.contentTypesToCompress;
    	      this.defaultOriginGroup = defaults.defaultOriginGroup;
    	      this.deliveryPolicy = defaults.deliveryPolicy;
    	      this.endpointName = defaults.endpointName;
    	      this.geoFilters = defaults.geoFilters;
    	      this.isCompressionEnabled = defaults.isCompressionEnabled;
    	      this.isHttpAllowed = defaults.isHttpAllowed;
    	      this.isHttpsAllowed = defaults.isHttpsAllowed;
    	      this.location = defaults.location;
    	      this.optimizationType = defaults.optimizationType;
    	      this.originGroups = defaults.originGroups;
    	      this.originHostHeader = defaults.originHostHeader;
    	      this.originPath = defaults.originPath;
    	      this.origins = defaults.origins;
    	      this.probePath = defaults.probePath;
    	      this.profileName = defaults.profileName;
    	      this.queryStringCachingBehavior = defaults.queryStringCachingBehavior;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.urlSigningKeys = defaults.urlSigningKeys;
    	      this.webApplicationFirewallPolicyLink = defaults.webApplicationFirewallPolicyLink;
        }

        public Builder setContentTypesToCompress(@Nullable Input<List<String>> contentTypesToCompress) {
            this.contentTypesToCompress = contentTypesToCompress;
            return this;
        }

        public Builder setContentTypesToCompress(@Nullable List<String> contentTypesToCompress) {
            this.contentTypesToCompress = Input.ofNullable(contentTypesToCompress);
            return this;
        }

        public Builder setDefaultOriginGroup(@Nullable Input<ResourceReferenceArgs> defaultOriginGroup) {
            this.defaultOriginGroup = defaultOriginGroup;
            return this;
        }

        public Builder setDefaultOriginGroup(@Nullable ResourceReferenceArgs defaultOriginGroup) {
            this.defaultOriginGroup = Input.ofNullable(defaultOriginGroup);
            return this;
        }

        public Builder setDeliveryPolicy(@Nullable Input<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy) {
            this.deliveryPolicy = deliveryPolicy;
            return this;
        }

        public Builder setDeliveryPolicy(@Nullable EndpointPropertiesUpdateParametersDeliveryPolicyArgs deliveryPolicy) {
            this.deliveryPolicy = Input.ofNullable(deliveryPolicy);
            return this;
        }

        public Builder setEndpointName(@Nullable Input<String> endpointName) {
            this.endpointName = endpointName;
            return this;
        }

        public Builder setEndpointName(@Nullable String endpointName) {
            this.endpointName = Input.ofNullable(endpointName);
            return this;
        }

        public Builder setGeoFilters(@Nullable Input<List<GeoFilterArgs>> geoFilters) {
            this.geoFilters = geoFilters;
            return this;
        }

        public Builder setGeoFilters(@Nullable List<GeoFilterArgs> geoFilters) {
            this.geoFilters = Input.ofNullable(geoFilters);
            return this;
        }

        public Builder setIsCompressionEnabled(@Nullable Input<Boolean> isCompressionEnabled) {
            this.isCompressionEnabled = isCompressionEnabled;
            return this;
        }

        public Builder setIsCompressionEnabled(@Nullable Boolean isCompressionEnabled) {
            this.isCompressionEnabled = Input.ofNullable(isCompressionEnabled);
            return this;
        }

        public Builder setIsHttpAllowed(@Nullable Input<Boolean> isHttpAllowed) {
            this.isHttpAllowed = isHttpAllowed;
            return this;
        }

        public Builder setIsHttpAllowed(@Nullable Boolean isHttpAllowed) {
            this.isHttpAllowed = Input.ofNullable(isHttpAllowed);
            return this;
        }

        public Builder setIsHttpsAllowed(@Nullable Input<Boolean> isHttpsAllowed) {
            this.isHttpsAllowed = isHttpsAllowed;
            return this;
        }

        public Builder setIsHttpsAllowed(@Nullable Boolean isHttpsAllowed) {
            this.isHttpsAllowed = Input.ofNullable(isHttpsAllowed);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setOptimizationType(@Nullable Input<Either<String,OptimizationType>> optimizationType) {
            this.optimizationType = optimizationType;
            return this;
        }

        public Builder setOptimizationType(@Nullable Either<String,OptimizationType> optimizationType) {
            this.optimizationType = Input.ofNullable(optimizationType);
            return this;
        }

        public Builder setOriginGroups(@Nullable Input<List<DeepCreatedOriginGroupArgs>> originGroups) {
            this.originGroups = originGroups;
            return this;
        }

        public Builder setOriginGroups(@Nullable List<DeepCreatedOriginGroupArgs> originGroups) {
            this.originGroups = Input.ofNullable(originGroups);
            return this;
        }

        public Builder setOriginHostHeader(@Nullable Input<String> originHostHeader) {
            this.originHostHeader = originHostHeader;
            return this;
        }

        public Builder setOriginHostHeader(@Nullable String originHostHeader) {
            this.originHostHeader = Input.ofNullable(originHostHeader);
            return this;
        }

        public Builder setOriginPath(@Nullable Input<String> originPath) {
            this.originPath = originPath;
            return this;
        }

        public Builder setOriginPath(@Nullable String originPath) {
            this.originPath = Input.ofNullable(originPath);
            return this;
        }

        public Builder setOrigins(Input<List<DeepCreatedOriginArgs>> origins) {
            this.origins = Objects.requireNonNull(origins);
            return this;
        }

        public Builder setOrigins(List<DeepCreatedOriginArgs> origins) {
            this.origins = Input.of(Objects.requireNonNull(origins));
            return this;
        }

        public Builder setProbePath(@Nullable Input<String> probePath) {
            this.probePath = probePath;
            return this;
        }

        public Builder setProbePath(@Nullable String probePath) {
            this.probePath = Input.ofNullable(probePath);
            return this;
        }

        public Builder setProfileName(Input<String> profileName) {
            this.profileName = Objects.requireNonNull(profileName);
            return this;
        }

        public Builder setProfileName(String profileName) {
            this.profileName = Input.of(Objects.requireNonNull(profileName));
            return this;
        }

        public Builder setQueryStringCachingBehavior(@Nullable Input<QueryStringCachingBehavior> queryStringCachingBehavior) {
            this.queryStringCachingBehavior = queryStringCachingBehavior;
            return this;
        }

        public Builder setQueryStringCachingBehavior(@Nullable QueryStringCachingBehavior queryStringCachingBehavior) {
            this.queryStringCachingBehavior = Input.ofNullable(queryStringCachingBehavior);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setUrlSigningKeys(@Nullable Input<List<UrlSigningKeyArgs>> urlSigningKeys) {
            this.urlSigningKeys = urlSigningKeys;
            return this;
        }

        public Builder setUrlSigningKeys(@Nullable List<UrlSigningKeyArgs> urlSigningKeys) {
            this.urlSigningKeys = Input.ofNullable(urlSigningKeys);
            return this;
        }

        public Builder setWebApplicationFirewallPolicyLink(@Nullable Input<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink) {
            this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
            return this;
        }

        public Builder setWebApplicationFirewallPolicyLink(@Nullable EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs webApplicationFirewallPolicyLink) {
            this.webApplicationFirewallPolicyLink = Input.ofNullable(webApplicationFirewallPolicyLink);
            return this;
        }

        public EndpointArgs build() {
            return new EndpointArgs(contentTypesToCompress, defaultOriginGroup, deliveryPolicy, endpointName, geoFilters, isCompressionEnabled, isHttpAllowed, isHttpsAllowed, location, optimizationType, originGroups, originHostHeader, originPath, origins, probePath, profileName, queryStringCachingBehavior, resourceGroupName, tags, urlSigningKeys, webApplicationFirewallPolicyLink);
        }
    }
}
