// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
 * 
 */
public final class EncryptionScopeKeyVaultPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final EncryptionScopeKeyVaultPropertiesResponse Empty = new EncryptionScopeKeyVaultPropertiesResponse();

    /**
     * The object identifier of the current versioned Key Vault Key in use.
     * 
     */
    @InputImport(name="currentVersionedKeyIdentifier", required=true)
    private final String currentVersionedKeyIdentifier;

    public String getCurrentVersionedKeyIdentifier() {
        return this.currentVersionedKeyIdentifier;
    }

    /**
     * The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the identifier to enable customer-managed key support on this encryption scope.
     * 
     */
    @InputImport(name="keyUri")
    private final @Nullable String keyUri;

    public Optional<String> getKeyUri() {
        return this.keyUri == null ? Optional.empty() : Optional.ofNullable(this.keyUri);
    }

    /**
     * Timestamp of last rotation of the Key Vault Key.
     * 
     */
    @InputImport(name="lastKeyRotationTimestamp", required=true)
    private final String lastKeyRotationTimestamp;

    public String getLastKeyRotationTimestamp() {
        return this.lastKeyRotationTimestamp;
    }

    public EncryptionScopeKeyVaultPropertiesResponse(
        String currentVersionedKeyIdentifier,
        @Nullable String keyUri,
        String lastKeyRotationTimestamp) {
        this.currentVersionedKeyIdentifier = Objects.requireNonNull(currentVersionedKeyIdentifier, "expected parameter 'currentVersionedKeyIdentifier' to be non-null");
        this.keyUri = keyUri;
        this.lastKeyRotationTimestamp = Objects.requireNonNull(lastKeyRotationTimestamp, "expected parameter 'lastKeyRotationTimestamp' to be non-null");
    }

    private EncryptionScopeKeyVaultPropertiesResponse() {
        this.currentVersionedKeyIdentifier = null;
        this.keyUri = null;
        this.lastKeyRotationTimestamp = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EncryptionScopeKeyVaultPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String currentVersionedKeyIdentifier;
        private @Nullable String keyUri;
        private String lastKeyRotationTimestamp;

        public Builder() {
    	      // Empty
        }

        public Builder(EncryptionScopeKeyVaultPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currentVersionedKeyIdentifier = defaults.currentVersionedKeyIdentifier;
    	      this.keyUri = defaults.keyUri;
    	      this.lastKeyRotationTimestamp = defaults.lastKeyRotationTimestamp;
        }

        public Builder setCurrentVersionedKeyIdentifier(String currentVersionedKeyIdentifier) {
            this.currentVersionedKeyIdentifier = Objects.requireNonNull(currentVersionedKeyIdentifier);
            return this;
        }

        public Builder setKeyUri(@Nullable String keyUri) {
            this.keyUri = keyUri;
            return this;
        }

        public Builder setLastKeyRotationTimestamp(String lastKeyRotationTimestamp) {
            this.lastKeyRotationTimestamp = Objects.requireNonNull(lastKeyRotationTimestamp);
            return this;
        }

        public EncryptionScopeKeyVaultPropertiesResponse build() {
            return new EncryptionScopeKeyVaultPropertiesResponse(currentVersionedKeyIdentifier, keyUri, lastKeyRotationTimestamp);
        }
    }
}
