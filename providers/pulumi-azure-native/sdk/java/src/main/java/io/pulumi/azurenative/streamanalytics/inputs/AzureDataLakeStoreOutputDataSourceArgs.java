// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes an Azure Data Lake Store output data source.
 * 
 */
public final class AzureDataLakeStoreOutputDataSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final AzureDataLakeStoreOutputDataSourceArgs Empty = new AzureDataLakeStoreOutputDataSourceArgs();

    /**
     * The name of the Azure Data Lake Store account. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="accountName")
      private final @Nullable Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName == null ? Codegen.empty() : this.accountName;
    }

    /**
     * The date format. Wherever {date} appears in filePathPrefix, the value of this property is used as the date format instead.
     * 
     */
    @Import(name="dateFormat")
      private final @Nullable Output<String> dateFormat;

    public Output<String> dateFormat() {
        return this.dateFormat == null ? Codegen.empty() : this.dateFormat;
    }

    /**
     * The location of the file to which the output should be written to. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="filePathPrefix")
      private final @Nullable Output<String> filePathPrefix;

    public Output<String> filePathPrefix() {
        return this.filePathPrefix == null ? Codegen.empty() : this.filePathPrefix;
    }

    /**
     * A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="refreshToken")
      private final @Nullable Output<String> refreshToken;

    public Output<String> refreshToken() {
        return this.refreshToken == null ? Codegen.empty() : this.refreshToken;
    }

    /**
     * The tenant id of the user used to obtain the refresh token. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="tenantId")
      private final @Nullable Output<String> tenantId;

    public Output<String> tenantId() {
        return this.tenantId == null ? Codegen.empty() : this.tenantId;
    }

    /**
     * The time format. Wherever {time} appears in filePathPrefix, the value of this property is used as the time format instead.
     * 
     */
    @Import(name="timeFormat")
      private final @Nullable Output<String> timeFormat;

    public Output<String> timeFormat() {
        return this.timeFormat == null ? Codegen.empty() : this.timeFormat;
    }

    /**
     * The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
     * 
     */
    @Import(name="tokenUserDisplayName")
      private final @Nullable Output<String> tokenUserDisplayName;

    public Output<String> tokenUserDisplayName() {
        return this.tokenUserDisplayName == null ? Codegen.empty() : this.tokenUserDisplayName;
    }

    /**
     * The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
     * 
     */
    @Import(name="tokenUserPrincipalName")
      private final @Nullable Output<String> tokenUserPrincipalName;

    public Output<String> tokenUserPrincipalName() {
        return this.tokenUserPrincipalName == null ? Codegen.empty() : this.tokenUserPrincipalName;
    }

    /**
     * Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
     * Expected value is 'Microsoft.DataLake/Accounts'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public AzureDataLakeStoreOutputDataSourceArgs(
        @Nullable Output<String> accountName,
        @Nullable Output<String> dateFormat,
        @Nullable Output<String> filePathPrefix,
        @Nullable Output<String> refreshToken,
        @Nullable Output<String> tenantId,
        @Nullable Output<String> timeFormat,
        @Nullable Output<String> tokenUserDisplayName,
        @Nullable Output<String> tokenUserPrincipalName,
        Output<String> type) {
        this.accountName = accountName;
        this.dateFormat = dateFormat;
        this.filePathPrefix = filePathPrefix;
        this.refreshToken = refreshToken;
        this.tenantId = tenantId;
        this.timeFormat = timeFormat;
        this.tokenUserDisplayName = tokenUserDisplayName;
        this.tokenUserPrincipalName = tokenUserPrincipalName;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private AzureDataLakeStoreOutputDataSourceArgs() {
        this.accountName = Codegen.empty();
        this.dateFormat = Codegen.empty();
        this.filePathPrefix = Codegen.empty();
        this.refreshToken = Codegen.empty();
        this.tenantId = Codegen.empty();
        this.timeFormat = Codegen.empty();
        this.tokenUserDisplayName = Codegen.empty();
        this.tokenUserPrincipalName = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureDataLakeStoreOutputDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> accountName;
        private @Nullable Output<String> dateFormat;
        private @Nullable Output<String> filePathPrefix;
        private @Nullable Output<String> refreshToken;
        private @Nullable Output<String> tenantId;
        private @Nullable Output<String> timeFormat;
        private @Nullable Output<String> tokenUserDisplayName;
        private @Nullable Output<String> tokenUserPrincipalName;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureDataLakeStoreOutputDataSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.dateFormat = defaults.dateFormat;
    	      this.filePathPrefix = defaults.filePathPrefix;
    	      this.refreshToken = defaults.refreshToken;
    	      this.tenantId = defaults.tenantId;
    	      this.timeFormat = defaults.timeFormat;
    	      this.tokenUserDisplayName = defaults.tokenUserDisplayName;
    	      this.tokenUserPrincipalName = defaults.tokenUserPrincipalName;
    	      this.type = defaults.type;
        }

        public Builder accountName(@Nullable Output<String> accountName) {
            this.accountName = accountName;
            return this;
        }
        public Builder accountName(@Nullable String accountName) {
            this.accountName = Codegen.ofNullable(accountName);
            return this;
        }
        public Builder dateFormat(@Nullable Output<String> dateFormat) {
            this.dateFormat = dateFormat;
            return this;
        }
        public Builder dateFormat(@Nullable String dateFormat) {
            this.dateFormat = Codegen.ofNullable(dateFormat);
            return this;
        }
        public Builder filePathPrefix(@Nullable Output<String> filePathPrefix) {
            this.filePathPrefix = filePathPrefix;
            return this;
        }
        public Builder filePathPrefix(@Nullable String filePathPrefix) {
            this.filePathPrefix = Codegen.ofNullable(filePathPrefix);
            return this;
        }
        public Builder refreshToken(@Nullable Output<String> refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }
        public Builder refreshToken(@Nullable String refreshToken) {
            this.refreshToken = Codegen.ofNullable(refreshToken);
            return this;
        }
        public Builder tenantId(@Nullable Output<String> tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = Codegen.ofNullable(tenantId);
            return this;
        }
        public Builder timeFormat(@Nullable Output<String> timeFormat) {
            this.timeFormat = timeFormat;
            return this;
        }
        public Builder timeFormat(@Nullable String timeFormat) {
            this.timeFormat = Codegen.ofNullable(timeFormat);
            return this;
        }
        public Builder tokenUserDisplayName(@Nullable Output<String> tokenUserDisplayName) {
            this.tokenUserDisplayName = tokenUserDisplayName;
            return this;
        }
        public Builder tokenUserDisplayName(@Nullable String tokenUserDisplayName) {
            this.tokenUserDisplayName = Codegen.ofNullable(tokenUserDisplayName);
            return this;
        }
        public Builder tokenUserPrincipalName(@Nullable Output<String> tokenUserPrincipalName) {
            this.tokenUserPrincipalName = tokenUserPrincipalName;
            return this;
        }
        public Builder tokenUserPrincipalName(@Nullable String tokenUserPrincipalName) {
            this.tokenUserPrincipalName = Codegen.ofNullable(tokenUserPrincipalName);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public AzureDataLakeStoreOutputDataSourceArgs build() {
            return new AzureDataLakeStoreOutputDataSourceArgs(accountName, dateFormat, filePathPrefix, refreshToken, tenantId, timeFormat, tokenUserDisplayName, tokenUserPrincipalName, type);
        }
    }
}
