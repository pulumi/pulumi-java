// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media;

import io.pulumi.azurenative.media.enums.StreamOptionsFlag;
import io.pulumi.azurenative.media.inputs.CrossSiteAccessPoliciesArgs;
import io.pulumi.azurenative.media.inputs.LiveEventEncodingArgs;
import io.pulumi.azurenative.media.inputs.LiveEventInputArgs;
import io.pulumi.azurenative.media.inputs.LiveEventPreviewArgs;
import io.pulumi.azurenative.media.inputs.LiveEventTranscriptionArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LiveEventArgs extends io.pulumi.resources.ResourceArgs {

    public static final LiveEventArgs Empty = new LiveEventArgs();

    /**
     * The Media Services account name.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> getAccountName() {
        return this.accountName;
    }

    /**
     * The flag indicates if the resource should be automatically started on creation.
     * 
     */
    @Import(name="autoStart")
      private final @Nullable Output<Boolean> autoStart;

    public Output<Boolean> getAutoStart() {
        return this.autoStart == null ? Codegen.empty() : this.autoStart;
    }

    /**
     * Live event cross site access policies.
     * 
     */
    @Import(name="crossSiteAccessPolicies")
      private final @Nullable Output<CrossSiteAccessPoliciesArgs> crossSiteAccessPolicies;

    public Output<CrossSiteAccessPoliciesArgs> getCrossSiteAccessPolicies() {
        return this.crossSiteAccessPolicies == null ? Codegen.empty() : this.crossSiteAccessPolicies;
    }

    /**
     * A description for the live event.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Encoding settings for the live event. It configures whether a live encoder is used for the live event and settings for the live encoder if it is used.
     * 
     */
    @Import(name="encoding")
      private final @Nullable Output<LiveEventEncodingArgs> encoding;

    public Output<LiveEventEncodingArgs> getEncoding() {
        return this.encoding == null ? Codegen.empty() : this.encoding;
    }

    /**
     * When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
     * 
     */
    @Import(name="hostnamePrefix")
      private final @Nullable Output<String> hostnamePrefix;

    public Output<String> getHostnamePrefix() {
        return this.hostnamePrefix == null ? Codegen.empty() : this.hostnamePrefix;
    }

    /**
     * Live event input settings. It defines how the live event receives input from a contribution encoder.
     * 
     */
    @Import(name="input", required=true)
      private final Output<LiveEventInputArgs> input;

    public Output<LiveEventInputArgs> getInput() {
        return this.input;
    }

    /**
     * The name of the live event, maximum length is 32.
     * 
     */
    @Import(name="liveEventName")
      private final @Nullable Output<String> liveEventName;

    public Output<String> getLiveEventName() {
        return this.liveEventName == null ? Codegen.empty() : this.liveEventName;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Live event preview settings. Preview allows live event producers to preview the live streaming content without creating any live output.
     * 
     */
    @Import(name="preview")
      private final @Nullable Output<LiveEventPreviewArgs> preview;

    public Output<LiveEventPreviewArgs> getPreview() {
        return this.preview == null ? Codegen.empty() : this.preview;
    }

    /**
     * The name of the resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'.
     * 
     */
    @Import(name="streamOptions")
      private final @Nullable Output<List<Either<String,StreamOptionsFlag>>> streamOptions;

    public Output<List<Either<String,StreamOptionsFlag>>> getStreamOptions() {
        return this.streamOptions == null ? Codegen.empty() : this.streamOptions;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature.
     * 
     */
    @Import(name="transcriptions")
      private final @Nullable Output<List<LiveEventTranscriptionArgs>> transcriptions;

    public Output<List<LiveEventTranscriptionArgs>> getTranscriptions() {
        return this.transcriptions == null ? Codegen.empty() : this.transcriptions;
    }

    /**
     * Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only be updated if the live event is in Standby state
     * 
     */
    @Import(name="useStaticHostname")
      private final @Nullable Output<Boolean> useStaticHostname;

    public Output<Boolean> getUseStaticHostname() {
        return this.useStaticHostname == null ? Codegen.empty() : this.useStaticHostname;
    }

    public LiveEventArgs(
        Output<String> accountName,
        @Nullable Output<Boolean> autoStart,
        @Nullable Output<CrossSiteAccessPoliciesArgs> crossSiteAccessPolicies,
        @Nullable Output<String> description,
        @Nullable Output<LiveEventEncodingArgs> encoding,
        @Nullable Output<String> hostnamePrefix,
        Output<LiveEventInputArgs> input,
        @Nullable Output<String> liveEventName,
        @Nullable Output<String> location,
        @Nullable Output<LiveEventPreviewArgs> preview,
        Output<String> resourceGroupName,
        @Nullable Output<List<Either<String,StreamOptionsFlag>>> streamOptions,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<List<LiveEventTranscriptionArgs>> transcriptions,
        @Nullable Output<Boolean> useStaticHostname) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.autoStart = autoStart;
        this.crossSiteAccessPolicies = crossSiteAccessPolicies;
        this.description = description;
        this.encoding = encoding;
        this.hostnamePrefix = hostnamePrefix;
        this.input = Objects.requireNonNull(input, "expected parameter 'input' to be non-null");
        this.liveEventName = liveEventName;
        this.location = location;
        this.preview = preview;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.streamOptions = streamOptions;
        this.tags = tags;
        this.transcriptions = transcriptions;
        this.useStaticHostname = useStaticHostname;
    }

    private LiveEventArgs() {
        this.accountName = Codegen.empty();
        this.autoStart = Codegen.empty();
        this.crossSiteAccessPolicies = Codegen.empty();
        this.description = Codegen.empty();
        this.encoding = Codegen.empty();
        this.hostnamePrefix = Codegen.empty();
        this.input = Codegen.empty();
        this.liveEventName = Codegen.empty();
        this.location = Codegen.empty();
        this.preview = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.streamOptions = Codegen.empty();
        this.tags = Codegen.empty();
        this.transcriptions = Codegen.empty();
        this.useStaticHostname = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private @Nullable Output<Boolean> autoStart;
        private @Nullable Output<CrossSiteAccessPoliciesArgs> crossSiteAccessPolicies;
        private @Nullable Output<String> description;
        private @Nullable Output<LiveEventEncodingArgs> encoding;
        private @Nullable Output<String> hostnamePrefix;
        private Output<LiveEventInputArgs> input;
        private @Nullable Output<String> liveEventName;
        private @Nullable Output<String> location;
        private @Nullable Output<LiveEventPreviewArgs> preview;
        private Output<String> resourceGroupName;
        private @Nullable Output<List<Either<String,StreamOptionsFlag>>> streamOptions;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<List<LiveEventTranscriptionArgs>> transcriptions;
        private @Nullable Output<Boolean> useStaticHostname;

        public Builder() {
    	      // Empty
        }

        public Builder(LiveEventArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.autoStart = defaults.autoStart;
    	      this.crossSiteAccessPolicies = defaults.crossSiteAccessPolicies;
    	      this.description = defaults.description;
    	      this.encoding = defaults.encoding;
    	      this.hostnamePrefix = defaults.hostnamePrefix;
    	      this.input = defaults.input;
    	      this.liveEventName = defaults.liveEventName;
    	      this.location = defaults.location;
    	      this.preview = defaults.preview;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.streamOptions = defaults.streamOptions;
    	      this.tags = defaults.tags;
    	      this.transcriptions = defaults.transcriptions;
    	      this.useStaticHostname = defaults.useStaticHostname;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }
        public Builder autoStart(@Nullable Output<Boolean> autoStart) {
            this.autoStart = autoStart;
            return this;
        }
        public Builder autoStart(@Nullable Boolean autoStart) {
            this.autoStart = Codegen.ofNullable(autoStart);
            return this;
        }
        public Builder crossSiteAccessPolicies(@Nullable Output<CrossSiteAccessPoliciesArgs> crossSiteAccessPolicies) {
            this.crossSiteAccessPolicies = crossSiteAccessPolicies;
            return this;
        }
        public Builder crossSiteAccessPolicies(@Nullable CrossSiteAccessPoliciesArgs crossSiteAccessPolicies) {
            this.crossSiteAccessPolicies = Codegen.ofNullable(crossSiteAccessPolicies);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder encoding(@Nullable Output<LiveEventEncodingArgs> encoding) {
            this.encoding = encoding;
            return this;
        }
        public Builder encoding(@Nullable LiveEventEncodingArgs encoding) {
            this.encoding = Codegen.ofNullable(encoding);
            return this;
        }
        public Builder hostnamePrefix(@Nullable Output<String> hostnamePrefix) {
            this.hostnamePrefix = hostnamePrefix;
            return this;
        }
        public Builder hostnamePrefix(@Nullable String hostnamePrefix) {
            this.hostnamePrefix = Codegen.ofNullable(hostnamePrefix);
            return this;
        }
        public Builder input(Output<LiveEventInputArgs> input) {
            this.input = Objects.requireNonNull(input);
            return this;
        }
        public Builder input(LiveEventInputArgs input) {
            this.input = Output.of(Objects.requireNonNull(input));
            return this;
        }
        public Builder liveEventName(@Nullable Output<String> liveEventName) {
            this.liveEventName = liveEventName;
            return this;
        }
        public Builder liveEventName(@Nullable String liveEventName) {
            this.liveEventName = Codegen.ofNullable(liveEventName);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder preview(@Nullable Output<LiveEventPreviewArgs> preview) {
            this.preview = preview;
            return this;
        }
        public Builder preview(@Nullable LiveEventPreviewArgs preview) {
            this.preview = Codegen.ofNullable(preview);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder streamOptions(@Nullable Output<List<Either<String,StreamOptionsFlag>>> streamOptions) {
            this.streamOptions = streamOptions;
            return this;
        }
        public Builder streamOptions(@Nullable List<Either<String,StreamOptionsFlag>> streamOptions) {
            this.streamOptions = Codegen.ofNullable(streamOptions);
            return this;
        }
        public Builder streamOptions(Either<String,StreamOptionsFlag>... streamOptions) {
            return streamOptions(List.of(streamOptions));
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder transcriptions(@Nullable Output<List<LiveEventTranscriptionArgs>> transcriptions) {
            this.transcriptions = transcriptions;
            return this;
        }
        public Builder transcriptions(@Nullable List<LiveEventTranscriptionArgs> transcriptions) {
            this.transcriptions = Codegen.ofNullable(transcriptions);
            return this;
        }
        public Builder transcriptions(LiveEventTranscriptionArgs... transcriptions) {
            return transcriptions(List.of(transcriptions));
        }
        public Builder useStaticHostname(@Nullable Output<Boolean> useStaticHostname) {
            this.useStaticHostname = useStaticHostname;
            return this;
        }
        public Builder useStaticHostname(@Nullable Boolean useStaticHostname) {
            this.useStaticHostname = Codegen.ofNullable(useStaticHostname);
            return this;
        }        public LiveEventArgs build() {
            return new LiveEventArgs(accountName, autoStart, crossSiteAccessPolicies, description, encoding, hostnamePrefix, input, liveEventName, location, preview, resourceGroupName, streamOptions, tags, transcriptions, useStaticHostname);
        }
    }
}
