// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry;

import io.pulumi.azurenative.containerregistry.enums.TokenStatus;
import io.pulumi.azurenative.containerregistry.inputs.TokenCredentialsPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TokenArgs extends io.pulumi.resources.ResourceArgs {

    public static final TokenArgs Empty = new TokenArgs();

    /**
     * The credentials that can be used for authenticating the token.
     * 
     */
    @Import(name="credentials")
      private final @Nullable Output<TokenCredentialsPropertiesArgs> credentials;

    public Output<TokenCredentialsPropertiesArgs> getCredentials() {
        return this.credentials == null ? Output.empty() : this.credentials;
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName", required=true)
      private final Output<String> registryName;

    public Output<String> getRegistryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource ID of the scope map to which the token will be associated with.
     * 
     */
    @Import(name="scopeMapId")
      private final @Nullable Output<String> scopeMapId;

    public Output<String> getScopeMapId() {
        return this.scopeMapId == null ? Output.empty() : this.scopeMapId;
    }

    /**
     * The status of the token example enabled or disabled.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<Either<String,TokenStatus>> status;

    public Output<Either<String,TokenStatus>> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * The name of the token.
     * 
     */
    @Import(name="tokenName")
      private final @Nullable Output<String> tokenName;

    public Output<String> getTokenName() {
        return this.tokenName == null ? Output.empty() : this.tokenName;
    }

    public TokenArgs(
        @Nullable Output<TokenCredentialsPropertiesArgs> credentials,
        Output<String> registryName,
        Output<String> resourceGroupName,
        @Nullable Output<String> scopeMapId,
        @Nullable Output<Either<String,TokenStatus>> status,
        @Nullable Output<String> tokenName) {
        this.credentials = credentials;
        this.registryName = Objects.requireNonNull(registryName, "expected parameter 'registryName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scopeMapId = scopeMapId;
        this.status = status;
        this.tokenName = tokenName;
    }

    private TokenArgs() {
        this.credentials = Output.empty();
        this.registryName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.scopeMapId = Output.empty();
        this.status = Output.empty();
        this.tokenName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<TokenCredentialsPropertiesArgs> credentials;
        private Output<String> registryName;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> scopeMapId;
        private @Nullable Output<Either<String,TokenStatus>> status;
        private @Nullable Output<String> tokenName;

        public Builder() {
    	      // Empty
        }

        public Builder(TokenArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentials = defaults.credentials;
    	      this.registryName = defaults.registryName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scopeMapId = defaults.scopeMapId;
    	      this.status = defaults.status;
    	      this.tokenName = defaults.tokenName;
        }

        public Builder credentials(@Nullable Output<TokenCredentialsPropertiesArgs> credentials) {
            this.credentials = credentials;
            return this;
        }

        public Builder credentials(@Nullable TokenCredentialsPropertiesArgs credentials) {
            this.credentials = Output.ofNullable(credentials);
            return this;
        }

        public Builder registryName(Output<String> registryName) {
            this.registryName = Objects.requireNonNull(registryName);
            return this;
        }

        public Builder registryName(String registryName) {
            this.registryName = Output.of(Objects.requireNonNull(registryName));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder scopeMapId(@Nullable Output<String> scopeMapId) {
            this.scopeMapId = scopeMapId;
            return this;
        }

        public Builder scopeMapId(@Nullable String scopeMapId) {
            this.scopeMapId = Output.ofNullable(scopeMapId);
            return this;
        }

        public Builder status(@Nullable Output<Either<String,TokenStatus>> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable Either<String,TokenStatus> status) {
            this.status = Output.ofNullable(status);
            return this;
        }

        public Builder tokenName(@Nullable Output<String> tokenName) {
            this.tokenName = tokenName;
            return this;
        }

        public Builder tokenName(@Nullable String tokenName) {
            this.tokenName = Output.ofNullable(tokenName);
            return this;
        }
        public TokenArgs build() {
            return new TokenArgs(credentials, registryName, resourceGroupName, scopeMapId, status, tokenName);
        }
    }
}
