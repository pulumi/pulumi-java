// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databox.inputs;

import io.pulumi.azurenative.databox.enums.DataAccountType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Details to transfer all data.
 * 
 */
public final class TransferAllDetailsArgs extends io.pulumi.resources.ResourceArgs {

    public static final TransferAllDetailsArgs Empty = new TransferAllDetailsArgs();

    /**
     * Type of the account of data
     * 
     */
    @Import(name="dataAccountType", required=true)
      private final Output<Either<String,DataAccountType>> dataAccountType;

    public Output<Either<String,DataAccountType>> getDataAccountType() {
        return this.dataAccountType;
    }

    /**
     * To indicate if all Azure blobs have to be transferred
     * 
     */
    @Import(name="transferAllBlobs")
      private final @Nullable Output<Boolean> transferAllBlobs;

    public Output<Boolean> getTransferAllBlobs() {
        return this.transferAllBlobs == null ? Output.empty() : this.transferAllBlobs;
    }

    /**
     * To indicate if all Azure Files have to be transferred
     * 
     */
    @Import(name="transferAllFiles")
      private final @Nullable Output<Boolean> transferAllFiles;

    public Output<Boolean> getTransferAllFiles() {
        return this.transferAllFiles == null ? Output.empty() : this.transferAllFiles;
    }

    public TransferAllDetailsArgs(
        Output<Either<String,DataAccountType>> dataAccountType,
        @Nullable Output<Boolean> transferAllBlobs,
        @Nullable Output<Boolean> transferAllFiles) {
        this.dataAccountType = dataAccountType == null ? Output.ofLeft("StorageAccount") : Objects.requireNonNull(dataAccountType, "expected parameter 'dataAccountType' to be non-null");
        this.transferAllBlobs = transferAllBlobs;
        this.transferAllFiles = transferAllFiles;
    }

    private TransferAllDetailsArgs() {
        this.dataAccountType = Output.empty();
        this.transferAllBlobs = Output.empty();
        this.transferAllFiles = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransferAllDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,DataAccountType>> dataAccountType;
        private @Nullable Output<Boolean> transferAllBlobs;
        private @Nullable Output<Boolean> transferAllFiles;

        public Builder() {
    	      // Empty
        }

        public Builder(TransferAllDetailsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataAccountType = defaults.dataAccountType;
    	      this.transferAllBlobs = defaults.transferAllBlobs;
    	      this.transferAllFiles = defaults.transferAllFiles;
        }

        public Builder dataAccountType(Output<Either<String,DataAccountType>> dataAccountType) {
            this.dataAccountType = Objects.requireNonNull(dataAccountType);
            return this;
        }

        public Builder dataAccountType(Either<String,DataAccountType> dataAccountType) {
            this.dataAccountType = Output.of(Objects.requireNonNull(dataAccountType));
            return this;
        }

        public Builder transferAllBlobs(@Nullable Output<Boolean> transferAllBlobs) {
            this.transferAllBlobs = transferAllBlobs;
            return this;
        }

        public Builder transferAllBlobs(@Nullable Boolean transferAllBlobs) {
            this.transferAllBlobs = Output.ofNullable(transferAllBlobs);
            return this;
        }

        public Builder transferAllFiles(@Nullable Output<Boolean> transferAllFiles) {
            this.transferAllFiles = transferAllFiles;
            return this;
        }

        public Builder transferAllFiles(@Nullable Boolean transferAllFiles) {
            this.transferAllFiles = Output.ofNullable(transferAllFiles);
            return this;
        }
        public TransferAllDetailsArgs build() {
            return new TransferAllDetailsArgs(dataAccountType, transferAllBlobs, transferAllFiles);
        }
    }
}
