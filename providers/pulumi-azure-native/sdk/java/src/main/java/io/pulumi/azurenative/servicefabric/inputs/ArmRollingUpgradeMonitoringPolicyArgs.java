// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabric.inputs;

import io.pulumi.azurenative.servicefabric.enums.ArmUpgradeFailureAction;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The policy used for monitoring the application upgrade
 * 
 */
public final class ArmRollingUpgradeMonitoringPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ArmRollingUpgradeMonitoringPolicyArgs Empty = new ArmRollingUpgradeMonitoringPolicyArgs();

    /**
     * The activation Mode of the service package
     * 
     */
    @InputImport(name="failureAction")
    private final @Nullable Input<Either<String,ArmUpgradeFailureAction>> failureAction;

    public Input<Either<String,ArmUpgradeFailureAction>> getFailureAction() {
        return this.failureAction == null ? Input.empty() : this.failureAction;
    }

    /**
     * The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    @InputImport(name="healthCheckRetryTimeout")
    private final @Nullable Input<String> healthCheckRetryTimeout;

    public Input<String> getHealthCheckRetryTimeout() {
        return this.healthCheckRetryTimeout == null ? Input.empty() : this.healthCheckRetryTimeout;
    }

    /**
     * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    @InputImport(name="healthCheckStableDuration")
    private final @Nullable Input<String> healthCheckStableDuration;

    public Input<String> getHealthCheckStableDuration() {
        return this.healthCheckStableDuration == null ? Input.empty() : this.healthCheckStableDuration;
    }

    /**
     * The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    @InputImport(name="healthCheckWaitDuration")
    private final @Nullable Input<String> healthCheckWaitDuration;

    public Input<String> getHealthCheckWaitDuration() {
        return this.healthCheckWaitDuration == null ? Input.empty() : this.healthCheckWaitDuration;
    }

    /**
     * The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    @InputImport(name="upgradeDomainTimeout")
    private final @Nullable Input<String> upgradeDomainTimeout;

    public Input<String> getUpgradeDomainTimeout() {
        return this.upgradeDomainTimeout == null ? Input.empty() : this.upgradeDomainTimeout;
    }

    /**
     * The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    @InputImport(name="upgradeTimeout")
    private final @Nullable Input<String> upgradeTimeout;

    public Input<String> getUpgradeTimeout() {
        return this.upgradeTimeout == null ? Input.empty() : this.upgradeTimeout;
    }

    public ArmRollingUpgradeMonitoringPolicyArgs(
        @Nullable Input<Either<String,ArmUpgradeFailureAction>> failureAction,
        @Nullable Input<String> healthCheckRetryTimeout,
        @Nullable Input<String> healthCheckStableDuration,
        @Nullable Input<String> healthCheckWaitDuration,
        @Nullable Input<String> upgradeDomainTimeout,
        @Nullable Input<String> upgradeTimeout) {
        this.failureAction = failureAction;
        this.healthCheckRetryTimeout = healthCheckRetryTimeout;
        this.healthCheckStableDuration = healthCheckStableDuration;
        this.healthCheckWaitDuration = healthCheckWaitDuration;
        this.upgradeDomainTimeout = upgradeDomainTimeout;
        this.upgradeTimeout = upgradeTimeout;
    }

    private ArmRollingUpgradeMonitoringPolicyArgs() {
        this.failureAction = Input.empty();
        this.healthCheckRetryTimeout = Input.empty();
        this.healthCheckStableDuration = Input.empty();
        this.healthCheckWaitDuration = Input.empty();
        this.upgradeDomainTimeout = Input.empty();
        this.upgradeTimeout = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ArmRollingUpgradeMonitoringPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,ArmUpgradeFailureAction>> failureAction;
        private @Nullable Input<String> healthCheckRetryTimeout;
        private @Nullable Input<String> healthCheckStableDuration;
        private @Nullable Input<String> healthCheckWaitDuration;
        private @Nullable Input<String> upgradeDomainTimeout;
        private @Nullable Input<String> upgradeTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(ArmRollingUpgradeMonitoringPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failureAction = defaults.failureAction;
    	      this.healthCheckRetryTimeout = defaults.healthCheckRetryTimeout;
    	      this.healthCheckStableDuration = defaults.healthCheckStableDuration;
    	      this.healthCheckWaitDuration = defaults.healthCheckWaitDuration;
    	      this.upgradeDomainTimeout = defaults.upgradeDomainTimeout;
    	      this.upgradeTimeout = defaults.upgradeTimeout;
        }

        public Builder setFailureAction(@Nullable Input<Either<String,ArmUpgradeFailureAction>> failureAction) {
            this.failureAction = failureAction;
            return this;
        }

        public Builder setFailureAction(@Nullable Either<String,ArmUpgradeFailureAction> failureAction) {
            this.failureAction = Input.ofNullable(failureAction);
            return this;
        }

        public Builder setHealthCheckRetryTimeout(@Nullable Input<String> healthCheckRetryTimeout) {
            this.healthCheckRetryTimeout = healthCheckRetryTimeout;
            return this;
        }

        public Builder setHealthCheckRetryTimeout(@Nullable String healthCheckRetryTimeout) {
            this.healthCheckRetryTimeout = Input.ofNullable(healthCheckRetryTimeout);
            return this;
        }

        public Builder setHealthCheckStableDuration(@Nullable Input<String> healthCheckStableDuration) {
            this.healthCheckStableDuration = healthCheckStableDuration;
            return this;
        }

        public Builder setHealthCheckStableDuration(@Nullable String healthCheckStableDuration) {
            this.healthCheckStableDuration = Input.ofNullable(healthCheckStableDuration);
            return this;
        }

        public Builder setHealthCheckWaitDuration(@Nullable Input<String> healthCheckWaitDuration) {
            this.healthCheckWaitDuration = healthCheckWaitDuration;
            return this;
        }

        public Builder setHealthCheckWaitDuration(@Nullable String healthCheckWaitDuration) {
            this.healthCheckWaitDuration = Input.ofNullable(healthCheckWaitDuration);
            return this;
        }

        public Builder setUpgradeDomainTimeout(@Nullable Input<String> upgradeDomainTimeout) {
            this.upgradeDomainTimeout = upgradeDomainTimeout;
            return this;
        }

        public Builder setUpgradeDomainTimeout(@Nullable String upgradeDomainTimeout) {
            this.upgradeDomainTimeout = Input.ofNullable(upgradeDomainTimeout);
            return this;
        }

        public Builder setUpgradeTimeout(@Nullable Input<String> upgradeTimeout) {
            this.upgradeTimeout = upgradeTimeout;
            return this;
        }

        public Builder setUpgradeTimeout(@Nullable String upgradeTimeout) {
            this.upgradeTimeout = Input.ofNullable(upgradeTimeout);
            return this;
        }

        public ArmRollingUpgradeMonitoringPolicyArgs build() {
            return new ArmRollingUpgradeMonitoringPolicyArgs(failureAction, healthCheckRetryTimeout, healthCheckStableDuration, healthCheckWaitDuration, upgradeDomainTimeout, upgradeTimeout);
        }
    }
}
