// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WorkloadGroupArgs extends io.pulumi.resources.ResourceArgs {

    public static final WorkloadGroupArgs Empty = new WorkloadGroupArgs();

    /**
     * The name of the database.
     * 
     */
    @InputImport(name="databaseName", required=true)
    private final Input<String> databaseName;

    public Input<String> getDatabaseName() {
        return this.databaseName;
    }

    /**
     * The workload group importance level.
     * 
     */
    @InputImport(name="importance")
    private final @Nullable Input<String> importance;

    public Input<String> getImportance() {
        return this.importance == null ? Input.empty() : this.importance;
    }

    /**
     * The workload group cap percentage resource.
     * 
     */
    @InputImport(name="maxResourcePercent", required=true)
    private final Input<Integer> maxResourcePercent;

    public Input<Integer> getMaxResourcePercent() {
        return this.maxResourcePercent;
    }

    /**
     * The workload group request maximum grant percentage.
     * 
     */
    @InputImport(name="maxResourcePercentPerRequest")
    private final @Nullable Input<Double> maxResourcePercentPerRequest;

    public Input<Double> getMaxResourcePercentPerRequest() {
        return this.maxResourcePercentPerRequest == null ? Input.empty() : this.maxResourcePercentPerRequest;
    }

    /**
     * The workload group minimum percentage resource.
     * 
     */
    @InputImport(name="minResourcePercent", required=true)
    private final Input<Integer> minResourcePercent;

    public Input<Integer> getMinResourcePercent() {
        return this.minResourcePercent;
    }

    /**
     * The workload group request minimum grant percentage.
     * 
     */
    @InputImport(name="minResourcePercentPerRequest", required=true)
    private final Input<Double> minResourcePercentPerRequest;

    public Input<Double> getMinResourcePercentPerRequest() {
        return this.minResourcePercentPerRequest;
    }

    /**
     * The workload group query execution timeout.
     * 
     */
    @InputImport(name="queryExecutionTimeout")
    private final @Nullable Input<Integer> queryExecutionTimeout;

    public Input<Integer> getQueryExecutionTimeout() {
        return this.queryExecutionTimeout == null ? Input.empty() : this.queryExecutionTimeout;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @InputImport(name="serverName", required=true)
    private final Input<String> serverName;

    public Input<String> getServerName() {
        return this.serverName;
    }

    /**
     * The name of the workload group.
     * 
     */
    @InputImport(name="workloadGroupName")
    private final @Nullable Input<String> workloadGroupName;

    public Input<String> getWorkloadGroupName() {
        return this.workloadGroupName == null ? Input.empty() : this.workloadGroupName;
    }

    public WorkloadGroupArgs(
        Input<String> databaseName,
        @Nullable Input<String> importance,
        Input<Integer> maxResourcePercent,
        @Nullable Input<Double> maxResourcePercentPerRequest,
        Input<Integer> minResourcePercent,
        Input<Double> minResourcePercentPerRequest,
        @Nullable Input<Integer> queryExecutionTimeout,
        Input<String> resourceGroupName,
        Input<String> serverName,
        @Nullable Input<String> workloadGroupName) {
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.importance = importance;
        this.maxResourcePercent = Objects.requireNonNull(maxResourcePercent, "expected parameter 'maxResourcePercent' to be non-null");
        this.maxResourcePercentPerRequest = maxResourcePercentPerRequest;
        this.minResourcePercent = Objects.requireNonNull(minResourcePercent, "expected parameter 'minResourcePercent' to be non-null");
        this.minResourcePercentPerRequest = Objects.requireNonNull(minResourcePercentPerRequest, "expected parameter 'minResourcePercentPerRequest' to be non-null");
        this.queryExecutionTimeout = queryExecutionTimeout;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
        this.workloadGroupName = workloadGroupName;
    }

    private WorkloadGroupArgs() {
        this.databaseName = Input.empty();
        this.importance = Input.empty();
        this.maxResourcePercent = Input.empty();
        this.maxResourcePercentPerRequest = Input.empty();
        this.minResourcePercent = Input.empty();
        this.minResourcePercentPerRequest = Input.empty();
        this.queryExecutionTimeout = Input.empty();
        this.resourceGroupName = Input.empty();
        this.serverName = Input.empty();
        this.workloadGroupName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkloadGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> databaseName;
        private @Nullable Input<String> importance;
        private Input<Integer> maxResourcePercent;
        private @Nullable Input<Double> maxResourcePercentPerRequest;
        private Input<Integer> minResourcePercent;
        private Input<Double> minResourcePercentPerRequest;
        private @Nullable Input<Integer> queryExecutionTimeout;
        private Input<String> resourceGroupName;
        private Input<String> serverName;
        private @Nullable Input<String> workloadGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkloadGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.importance = defaults.importance;
    	      this.maxResourcePercent = defaults.maxResourcePercent;
    	      this.maxResourcePercentPerRequest = defaults.maxResourcePercentPerRequest;
    	      this.minResourcePercent = defaults.minResourcePercent;
    	      this.minResourcePercentPerRequest = defaults.minResourcePercentPerRequest;
    	      this.queryExecutionTimeout = defaults.queryExecutionTimeout;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.workloadGroupName = defaults.workloadGroupName;
        }

        public Builder setDatabaseName(Input<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder setDatabaseName(String databaseName) {
            this.databaseName = Input.of(Objects.requireNonNull(databaseName));
            return this;
        }

        public Builder setImportance(@Nullable Input<String> importance) {
            this.importance = importance;
            return this;
        }

        public Builder setImportance(@Nullable String importance) {
            this.importance = Input.ofNullable(importance);
            return this;
        }

        public Builder setMaxResourcePercent(Input<Integer> maxResourcePercent) {
            this.maxResourcePercent = Objects.requireNonNull(maxResourcePercent);
            return this;
        }

        public Builder setMaxResourcePercent(Integer maxResourcePercent) {
            this.maxResourcePercent = Input.of(Objects.requireNonNull(maxResourcePercent));
            return this;
        }

        public Builder setMaxResourcePercentPerRequest(@Nullable Input<Double> maxResourcePercentPerRequest) {
            this.maxResourcePercentPerRequest = maxResourcePercentPerRequest;
            return this;
        }

        public Builder setMaxResourcePercentPerRequest(@Nullable Double maxResourcePercentPerRequest) {
            this.maxResourcePercentPerRequest = Input.ofNullable(maxResourcePercentPerRequest);
            return this;
        }

        public Builder setMinResourcePercent(Input<Integer> minResourcePercent) {
            this.minResourcePercent = Objects.requireNonNull(minResourcePercent);
            return this;
        }

        public Builder setMinResourcePercent(Integer minResourcePercent) {
            this.minResourcePercent = Input.of(Objects.requireNonNull(minResourcePercent));
            return this;
        }

        public Builder setMinResourcePercentPerRequest(Input<Double> minResourcePercentPerRequest) {
            this.minResourcePercentPerRequest = Objects.requireNonNull(minResourcePercentPerRequest);
            return this;
        }

        public Builder setMinResourcePercentPerRequest(Double minResourcePercentPerRequest) {
            this.minResourcePercentPerRequest = Input.of(Objects.requireNonNull(minResourcePercentPerRequest));
            return this;
        }

        public Builder setQueryExecutionTimeout(@Nullable Input<Integer> queryExecutionTimeout) {
            this.queryExecutionTimeout = queryExecutionTimeout;
            return this;
        }

        public Builder setQueryExecutionTimeout(@Nullable Integer queryExecutionTimeout) {
            this.queryExecutionTimeout = Input.ofNullable(queryExecutionTimeout);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setServerName(Input<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }

        public Builder setServerName(String serverName) {
            this.serverName = Input.of(Objects.requireNonNull(serverName));
            return this;
        }

        public Builder setWorkloadGroupName(@Nullable Input<String> workloadGroupName) {
            this.workloadGroupName = workloadGroupName;
            return this;
        }

        public Builder setWorkloadGroupName(@Nullable String workloadGroupName) {
            this.workloadGroupName = Input.ofNullable(workloadGroupName);
            return this;
        }

        public WorkloadGroupArgs build() {
            return new WorkloadGroupArgs(databaseName, importance, maxResourcePercent, maxResourcePercentPerRequest, minResourcePercent, minResourcePercentPerRequest, queryExecutionTimeout, resourceGroupName, serverName, workloadGroupName);
        }
    }
}
