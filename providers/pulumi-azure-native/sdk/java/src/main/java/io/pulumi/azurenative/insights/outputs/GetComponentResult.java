// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.outputs;

import io.pulumi.azurenative.insights.outputs.PrivateLinkScopedResourceResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetComponentResult {
    private final String appId;
    private final String applicationId;
    private final String applicationType;
    private final String connectionString;
    private final String creationDate;
    private final @Nullable Boolean disableIpMasking;
    private final @Nullable String flowType;
    private final @Nullable String hockeyAppId;
    private final String hockeyAppToken;
    private final String id;
    private final @Nullable Boolean immediatePurgeDataOn30Days;
    private final @Nullable String ingestionMode;
    private final String instrumentationKey;
    private final String kind;
    private final String location;
    private final String name;
    private final List<PrivateLinkScopedResourceResponse> privateLinkScopedResources;
    private final String provisioningState;
    private final @Nullable String requestSource;
    private final @Nullable Integer retentionInDays;
    private final @Nullable Double samplingPercentage;
    private final @Nullable Map<String,String> tags;
    private final String tenantId;
    private final String type;

    @OutputCustomType.Constructor({"appId","applicationId","applicationType","connectionString","creationDate","disableIpMasking","flowType","hockeyAppId","hockeyAppToken","id","immediatePurgeDataOn30Days","ingestionMode","instrumentationKey","kind","location","name","privateLinkScopedResources","provisioningState","requestSource","retentionInDays","samplingPercentage","tags","tenantId","type"})
    private GetComponentResult(
        String appId,
        String applicationId,
        String applicationType,
        String connectionString,
        String creationDate,
        @Nullable Boolean disableIpMasking,
        @Nullable String flowType,
        @Nullable String hockeyAppId,
        String hockeyAppToken,
        String id,
        @Nullable Boolean immediatePurgeDataOn30Days,
        @Nullable String ingestionMode,
        String instrumentationKey,
        String kind,
        String location,
        String name,
        List<PrivateLinkScopedResourceResponse> privateLinkScopedResources,
        String provisioningState,
        @Nullable String requestSource,
        @Nullable Integer retentionInDays,
        @Nullable Double samplingPercentage,
        @Nullable Map<String,String> tags,
        String tenantId,
        String type) {
        this.appId = Objects.requireNonNull(appId);
        this.applicationId = Objects.requireNonNull(applicationId);
        this.applicationType = Objects.requireNonNull(applicationType);
        this.connectionString = Objects.requireNonNull(connectionString);
        this.creationDate = Objects.requireNonNull(creationDate);
        this.disableIpMasking = disableIpMasking;
        this.flowType = flowType;
        this.hockeyAppId = hockeyAppId;
        this.hockeyAppToken = Objects.requireNonNull(hockeyAppToken);
        this.id = Objects.requireNonNull(id);
        this.immediatePurgeDataOn30Days = immediatePurgeDataOn30Days;
        this.ingestionMode = ingestionMode;
        this.instrumentationKey = Objects.requireNonNull(instrumentationKey);
        this.kind = Objects.requireNonNull(kind);
        this.location = Objects.requireNonNull(location);
        this.name = Objects.requireNonNull(name);
        this.privateLinkScopedResources = Objects.requireNonNull(privateLinkScopedResources);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.requestSource = requestSource;
        this.retentionInDays = retentionInDays;
        this.samplingPercentage = samplingPercentage;
        this.tags = tags;
        this.tenantId = Objects.requireNonNull(tenantId);
        this.type = Objects.requireNonNull(type);
    }

    public String getAppId() {
        return this.appId;
    }
    public String getApplicationId() {
        return this.applicationId;
    }
    public String getApplicationType() {
        return this.applicationType;
    }
    public String getConnectionString() {
        return this.connectionString;
    }
    public String getCreationDate() {
        return this.creationDate;
    }
    public Optional<Boolean> getDisableIpMasking() {
        return Optional.ofNullable(this.disableIpMasking);
    }
    public Optional<String> getFlowType() {
        return Optional.ofNullable(this.flowType);
    }
    public Optional<String> getHockeyAppId() {
        return Optional.ofNullable(this.hockeyAppId);
    }
    public String getHockeyAppToken() {
        return this.hockeyAppToken;
    }
    public String getId() {
        return this.id;
    }
    public Optional<Boolean> getImmediatePurgeDataOn30Days() {
        return Optional.ofNullable(this.immediatePurgeDataOn30Days);
    }
    public Optional<String> getIngestionMode() {
        return Optional.ofNullable(this.ingestionMode);
    }
    public String getInstrumentationKey() {
        return this.instrumentationKey;
    }
    public String getKind() {
        return this.kind;
    }
    public String getLocation() {
        return this.location;
    }
    public String getName() {
        return this.name;
    }
    public List<PrivateLinkScopedResourceResponse> getPrivateLinkScopedResources() {
        return this.privateLinkScopedResources;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public Optional<String> getRequestSource() {
        return Optional.ofNullable(this.requestSource);
    }
    public Optional<Integer> getRetentionInDays() {
        return Optional.ofNullable(this.retentionInDays);
    }
    public Optional<Double> getSamplingPercentage() {
        return Optional.ofNullable(this.samplingPercentage);
    }
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String getTenantId() {
        return this.tenantId;
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetComponentResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String appId;
        private String applicationId;
        private String applicationType;
        private String connectionString;
        private String creationDate;
        private @Nullable Boolean disableIpMasking;
        private @Nullable String flowType;
        private @Nullable String hockeyAppId;
        private String hockeyAppToken;
        private String id;
        private @Nullable Boolean immediatePurgeDataOn30Days;
        private @Nullable String ingestionMode;
        private String instrumentationKey;
        private String kind;
        private String location;
        private String name;
        private List<PrivateLinkScopedResourceResponse> privateLinkScopedResources;
        private String provisioningState;
        private @Nullable String requestSource;
        private @Nullable Integer retentionInDays;
        private @Nullable Double samplingPercentage;
        private @Nullable Map<String,String> tags;
        private String tenantId;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetComponentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.applicationId = defaults.applicationId;
    	      this.applicationType = defaults.applicationType;
    	      this.connectionString = defaults.connectionString;
    	      this.creationDate = defaults.creationDate;
    	      this.disableIpMasking = defaults.disableIpMasking;
    	      this.flowType = defaults.flowType;
    	      this.hockeyAppId = defaults.hockeyAppId;
    	      this.hockeyAppToken = defaults.hockeyAppToken;
    	      this.id = defaults.id;
    	      this.immediatePurgeDataOn30Days = defaults.immediatePurgeDataOn30Days;
    	      this.ingestionMode = defaults.ingestionMode;
    	      this.instrumentationKey = defaults.instrumentationKey;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.privateLinkScopedResources = defaults.privateLinkScopedResources;
    	      this.provisioningState = defaults.provisioningState;
    	      this.requestSource = defaults.requestSource;
    	      this.retentionInDays = defaults.retentionInDays;
    	      this.samplingPercentage = defaults.samplingPercentage;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.type = defaults.type;
        }

        public Builder setAppId(String appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }

        public Builder setApplicationId(String applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }

        public Builder setApplicationType(String applicationType) {
            this.applicationType = Objects.requireNonNull(applicationType);
            return this;
        }

        public Builder setConnectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }

        public Builder setCreationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }

        public Builder setDisableIpMasking(@Nullable Boolean disableIpMasking) {
            this.disableIpMasking = disableIpMasking;
            return this;
        }

        public Builder setFlowType(@Nullable String flowType) {
            this.flowType = flowType;
            return this;
        }

        public Builder setHockeyAppId(@Nullable String hockeyAppId) {
            this.hockeyAppId = hockeyAppId;
            return this;
        }

        public Builder setHockeyAppToken(String hockeyAppToken) {
            this.hockeyAppToken = Objects.requireNonNull(hockeyAppToken);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setImmediatePurgeDataOn30Days(@Nullable Boolean immediatePurgeDataOn30Days) {
            this.immediatePurgeDataOn30Days = immediatePurgeDataOn30Days;
            return this;
        }

        public Builder setIngestionMode(@Nullable String ingestionMode) {
            this.ingestionMode = ingestionMode;
            return this;
        }

        public Builder setInstrumentationKey(String instrumentationKey) {
            this.instrumentationKey = Objects.requireNonNull(instrumentationKey);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPrivateLinkScopedResources(List<PrivateLinkScopedResourceResponse> privateLinkScopedResources) {
            this.privateLinkScopedResources = Objects.requireNonNull(privateLinkScopedResources);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setRequestSource(@Nullable String requestSource) {
            this.requestSource = requestSource;
            return this;
        }

        public Builder setRetentionInDays(@Nullable Integer retentionInDays) {
            this.retentionInDays = retentionInDays;
            return this;
        }

        public Builder setSamplingPercentage(@Nullable Double samplingPercentage) {
            this.samplingPercentage = samplingPercentage;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetComponentResult build() {
            return new GetComponentResult(appId, applicationId, applicationType, connectionString, creationDate, disableIpMasking, flowType, hockeyAppId, hockeyAppToken, id, immediatePurgeDataOn30Days, ingestionMode, instrumentationKey, kind, location, name, privateLinkScopedResources, provisioningState, requestSource, retentionInDays, samplingPercentage, tags, tenantId, type);
        }
    }
}
