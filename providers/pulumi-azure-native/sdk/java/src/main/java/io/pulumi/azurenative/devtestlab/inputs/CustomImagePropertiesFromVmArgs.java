// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab.inputs;

import io.pulumi.azurenative.devtestlab.inputs.LinuxOsInfoArgs;
import io.pulumi.azurenative.devtestlab.inputs.WindowsOsInfoArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Properties for creating a custom image from a virtual machine.
 * 
 */
public final class CustomImagePropertiesFromVmArgs extends io.pulumi.resources.ResourceArgs {

    public static final CustomImagePropertiesFromVmArgs Empty = new CustomImagePropertiesFromVmArgs();

    /**
     * The Linux OS information of the VM.
     * 
     */
    @Import(name="linuxOsInfo")
      private final @Nullable Output<LinuxOsInfoArgs> linuxOsInfo;

    public Output<LinuxOsInfoArgs> getLinuxOsInfo() {
        return this.linuxOsInfo == null ? Codegen.empty() : this.linuxOsInfo;
    }

    /**
     * The source vm identifier.
     * 
     */
    @Import(name="sourceVmId")
      private final @Nullable Output<String> sourceVmId;

    public Output<String> getSourceVmId() {
        return this.sourceVmId == null ? Codegen.empty() : this.sourceVmId;
    }

    /**
     * The Windows OS information of the VM.
     * 
     */
    @Import(name="windowsOsInfo")
      private final @Nullable Output<WindowsOsInfoArgs> windowsOsInfo;

    public Output<WindowsOsInfoArgs> getWindowsOsInfo() {
        return this.windowsOsInfo == null ? Codegen.empty() : this.windowsOsInfo;
    }

    public CustomImagePropertiesFromVmArgs(
        @Nullable Output<LinuxOsInfoArgs> linuxOsInfo,
        @Nullable Output<String> sourceVmId,
        @Nullable Output<WindowsOsInfoArgs> windowsOsInfo) {
        this.linuxOsInfo = linuxOsInfo;
        this.sourceVmId = sourceVmId;
        this.windowsOsInfo = windowsOsInfo;
    }

    private CustomImagePropertiesFromVmArgs() {
        this.linuxOsInfo = Codegen.empty();
        this.sourceVmId = Codegen.empty();
        this.windowsOsInfo = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomImagePropertiesFromVmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<LinuxOsInfoArgs> linuxOsInfo;
        private @Nullable Output<String> sourceVmId;
        private @Nullable Output<WindowsOsInfoArgs> windowsOsInfo;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomImagePropertiesFromVmArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.linuxOsInfo = defaults.linuxOsInfo;
    	      this.sourceVmId = defaults.sourceVmId;
    	      this.windowsOsInfo = defaults.windowsOsInfo;
        }

        public Builder linuxOsInfo(@Nullable Output<LinuxOsInfoArgs> linuxOsInfo) {
            this.linuxOsInfo = linuxOsInfo;
            return this;
        }
        public Builder linuxOsInfo(@Nullable LinuxOsInfoArgs linuxOsInfo) {
            this.linuxOsInfo = Codegen.ofNullable(linuxOsInfo);
            return this;
        }
        public Builder sourceVmId(@Nullable Output<String> sourceVmId) {
            this.sourceVmId = sourceVmId;
            return this;
        }
        public Builder sourceVmId(@Nullable String sourceVmId) {
            this.sourceVmId = Codegen.ofNullable(sourceVmId);
            return this;
        }
        public Builder windowsOsInfo(@Nullable Output<WindowsOsInfoArgs> windowsOsInfo) {
            this.windowsOsInfo = windowsOsInfo;
            return this;
        }
        public Builder windowsOsInfo(@Nullable WindowsOsInfoArgs windowsOsInfo) {
            this.windowsOsInfo = Codegen.ofNullable(windowsOsInfo);
            return this;
        }        public CustomImagePropertiesFromVmArgs build() {
            return new CustomImagePropertiesFromVmArgs(linuxOsInfo, sourceVmId, windowsOsInfo);
        }
    }
}
