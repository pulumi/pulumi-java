// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory;

import io.pulumi.azurenative.datafactory.inputs.AppendVariableActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureDataExplorerCommandActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureFunctionActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureMLBatchExecutionActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureMLExecutePipelineActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureMLUpdateResourceActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.ControlActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.CopyActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.CustomActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.DataLakeAnalyticsUSQLActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.DatabricksNotebookActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.DatabricksSparkJarActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.DatabricksSparkPythonActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.DeleteActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.ExecutePipelineActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.ExecuteSSISPackageActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.ExecuteWranglingDataflowActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.ExecutionActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.FailActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.FilterActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.ForEachActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.GetMetadataActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.HDInsightHiveActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.HDInsightMapReduceActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.HDInsightPigActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.HDInsightSparkActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.HDInsightStreamingActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.IfConditionActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.LookupActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import io.pulumi.azurenative.datafactory.inputs.PipelineFolderArgs;
import io.pulumi.azurenative.datafactory.inputs.PipelinePolicyArgs;
import io.pulumi.azurenative.datafactory.inputs.SetVariableActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.SqlServerStoredProcedureActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.SwitchActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.UntilActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.ValidationActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.VariableSpecificationArgs;
import io.pulumi.azurenative.datafactory.inputs.WaitActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.WebActivityArgs;
import io.pulumi.azurenative.datafactory.inputs.WebHookActivityArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PipelineArgs extends io.pulumi.resources.ResourceArgs {

    public static final PipelineArgs Empty = new PipelineArgs();

    /**
     * List of activities in pipeline.
     * 
     */
    @Import(name="activities")
      private final @Nullable Output<List<Object>> activities;

    public Output<List<Object>> getActivities() {
        return this.activities == null ? Output.empty() : this.activities;
    }

    /**
     * List of tags that can be used for describing the Pipeline.
     * 
     */
    @Import(name="annotations")
      private final @Nullable Output<List<Object>> annotations;

    public Output<List<Object>> getAnnotations() {
        return this.annotations == null ? Output.empty() : this.annotations;
    }

    /**
     * The max number of concurrent runs for the pipeline.
     * 
     */
    @Import(name="concurrency")
      private final @Nullable Output<Integer> concurrency;

    public Output<Integer> getConcurrency() {
        return this.concurrency == null ? Output.empty() : this.concurrency;
    }

    /**
     * The description of the pipeline.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The factory name.
     * 
     */
    @Import(name="factoryName", required=true)
      private final Output<String> factoryName;

    public Output<String> getFactoryName() {
        return this.factoryName;
    }

    /**
     * The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
     * 
     */
    @Import(name="folder")
      private final @Nullable Output<PipelineFolderArgs> folder;

    public Output<PipelineFolderArgs> getFolder() {
        return this.folder == null ? Output.empty() : this.folder;
    }

    /**
     * List of parameters for pipeline.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;

    public Output<Map<String,ParameterSpecificationArgs>> getParameters() {
        return this.parameters == null ? Output.empty() : this.parameters;
    }

    /**
     * The pipeline name.
     * 
     */
    @Import(name="pipelineName")
      private final @Nullable Output<String> pipelineName;

    public Output<String> getPipelineName() {
        return this.pipelineName == null ? Output.empty() : this.pipelineName;
    }

    /**
     * Pipeline Policy.
     * 
     */
    @Import(name="policy")
      private final @Nullable Output<PipelinePolicyArgs> policy;

    public Output<PipelinePolicyArgs> getPolicy() {
        return this.policy == null ? Output.empty() : this.policy;
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Dimensions emitted by Pipeline.
     * 
     */
    @Import(name="runDimensions")
      private final @Nullable Output<Map<String,Object>> runDimensions;

    public Output<Map<String,Object>> getRunDimensions() {
        return this.runDimensions == null ? Output.empty() : this.runDimensions;
    }

    /**
     * List of variables for pipeline.
     * 
     */
    @Import(name="variables")
      private final @Nullable Output<Map<String,VariableSpecificationArgs>> variables;

    public Output<Map<String,VariableSpecificationArgs>> getVariables() {
        return this.variables == null ? Output.empty() : this.variables;
    }

    public PipelineArgs(
        @Nullable Output<List<Object>> activities,
        @Nullable Output<List<Object>> annotations,
        @Nullable Output<Integer> concurrency,
        @Nullable Output<String> description,
        Output<String> factoryName,
        @Nullable Output<PipelineFolderArgs> folder,
        @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters,
        @Nullable Output<String> pipelineName,
        @Nullable Output<PipelinePolicyArgs> policy,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,Object>> runDimensions,
        @Nullable Output<Map<String,VariableSpecificationArgs>> variables) {
        this.activities = activities;
        this.annotations = annotations;
        this.concurrency = concurrency;
        this.description = description;
        this.factoryName = Objects.requireNonNull(factoryName, "expected parameter 'factoryName' to be non-null");
        this.folder = folder;
        this.parameters = parameters;
        this.pipelineName = pipelineName;
        this.policy = policy;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.runDimensions = runDimensions;
        this.variables = variables;
    }

    private PipelineArgs() {
        this.activities = Output.empty();
        this.annotations = Output.empty();
        this.concurrency = Output.empty();
        this.description = Output.empty();
        this.factoryName = Output.empty();
        this.folder = Output.empty();
        this.parameters = Output.empty();
        this.pipelineName = Output.empty();
        this.policy = Output.empty();
        this.resourceGroupName = Output.empty();
        this.runDimensions = Output.empty();
        this.variables = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Object>> activities;
        private @Nullable Output<List<Object>> annotations;
        private @Nullable Output<Integer> concurrency;
        private @Nullable Output<String> description;
        private Output<String> factoryName;
        private @Nullable Output<PipelineFolderArgs> folder;
        private @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;
        private @Nullable Output<String> pipelineName;
        private @Nullable Output<PipelinePolicyArgs> policy;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,Object>> runDimensions;
        private @Nullable Output<Map<String,VariableSpecificationArgs>> variables;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activities = defaults.activities;
    	      this.annotations = defaults.annotations;
    	      this.concurrency = defaults.concurrency;
    	      this.description = defaults.description;
    	      this.factoryName = defaults.factoryName;
    	      this.folder = defaults.folder;
    	      this.parameters = defaults.parameters;
    	      this.pipelineName = defaults.pipelineName;
    	      this.policy = defaults.policy;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.runDimensions = defaults.runDimensions;
    	      this.variables = defaults.variables;
        }

        public Builder activities(@Nullable Output<List<Object>> activities) {
            this.activities = activities;
            return this;
        }
        public Builder activities(@Nullable List<Object> activities) {
            this.activities = Output.ofNullable(activities);
            return this;
        }
        public Builder activities(Object... activities) {
            return activities(List.of(activities));
        }
        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = Output.ofNullable(annotations);
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        public Builder concurrency(@Nullable Output<Integer> concurrency) {
            this.concurrency = concurrency;
            return this;
        }
        public Builder concurrency(@Nullable Integer concurrency) {
            this.concurrency = Output.ofNullable(concurrency);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder factoryName(Output<String> factoryName) {
            this.factoryName = Objects.requireNonNull(factoryName);
            return this;
        }
        public Builder factoryName(String factoryName) {
            this.factoryName = Output.of(Objects.requireNonNull(factoryName));
            return this;
        }
        public Builder folder(@Nullable Output<PipelineFolderArgs> folder) {
            this.folder = folder;
            return this;
        }
        public Builder folder(@Nullable PipelineFolderArgs folder) {
            this.folder = Output.ofNullable(folder);
            return this;
        }
        public Builder parameters(@Nullable Output<Map<String,ParameterSpecificationArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable Map<String,ParameterSpecificationArgs> parameters) {
            this.parameters = Output.ofNullable(parameters);
            return this;
        }
        public Builder pipelineName(@Nullable Output<String> pipelineName) {
            this.pipelineName = pipelineName;
            return this;
        }
        public Builder pipelineName(@Nullable String pipelineName) {
            this.pipelineName = Output.ofNullable(pipelineName);
            return this;
        }
        public Builder policy(@Nullable Output<PipelinePolicyArgs> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable PipelinePolicyArgs policy) {
            this.policy = Output.ofNullable(policy);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder runDimensions(@Nullable Output<Map<String,Object>> runDimensions) {
            this.runDimensions = runDimensions;
            return this;
        }
        public Builder runDimensions(@Nullable Map<String,Object> runDimensions) {
            this.runDimensions = Output.ofNullable(runDimensions);
            return this;
        }
        public Builder variables(@Nullable Output<Map<String,VariableSpecificationArgs>> variables) {
            this.variables = variables;
            return this;
        }
        public Builder variables(@Nullable Map<String,VariableSpecificationArgs> variables) {
            this.variables = Output.ofNullable(variables);
            return this;
        }        public PipelineArgs build() {
            return new PipelineArgs(activities, annotations, concurrency, description, factoryName, folder, parameters, pipelineName, policy, resourceGroupName, runDimensions, variables);
        }
    }
}
