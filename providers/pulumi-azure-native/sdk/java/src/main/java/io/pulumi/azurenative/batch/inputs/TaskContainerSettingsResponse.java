// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.batch.inputs;

import io.pulumi.azurenative.batch.inputs.ContainerRegistryResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskContainerSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final TaskContainerSettingsResponse Empty = new TaskContainerSettingsResponse();

    @InputImport(name="containerRunOptions")
    private final @Nullable String containerRunOptions;

    public Optional<String> getContainerRunOptions() {
        return this.containerRunOptions == null ? Optional.empty() : Optional.ofNullable(this.containerRunOptions);
    }

    @InputImport(name="imageName", required=true)
    private final String imageName;

    public String getImageName() {
        return this.imageName;
    }

    @InputImport(name="registry")
    private final @Nullable ContainerRegistryResponse registry;

    public Optional<ContainerRegistryResponse> getRegistry() {
        return this.registry == null ? Optional.empty() : Optional.ofNullable(this.registry);
    }

    @InputImport(name="workingDirectory")
    private final @Nullable String workingDirectory;

    public Optional<String> getWorkingDirectory() {
        return this.workingDirectory == null ? Optional.empty() : Optional.ofNullable(this.workingDirectory);
    }

    public TaskContainerSettingsResponse(
        @Nullable String containerRunOptions,
        String imageName,
        @Nullable ContainerRegistryResponse registry,
        @Nullable String workingDirectory) {
        this.containerRunOptions = containerRunOptions;
        this.imageName = Objects.requireNonNull(imageName, "expected parameter 'imageName' to be non-null");
        this.registry = registry;
        this.workingDirectory = workingDirectory;
    }

    private TaskContainerSettingsResponse() {
        this.containerRunOptions = null;
        this.imageName = null;
        this.registry = null;
        this.workingDirectory = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskContainerSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String containerRunOptions;
        private String imageName;
        private @Nullable ContainerRegistryResponse registry;
        private @Nullable String workingDirectory;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskContainerSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerRunOptions = defaults.containerRunOptions;
    	      this.imageName = defaults.imageName;
    	      this.registry = defaults.registry;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        public Builder setContainerRunOptions(@Nullable String containerRunOptions) {
            this.containerRunOptions = containerRunOptions;
            return this;
        }

        public Builder setImageName(String imageName) {
            this.imageName = Objects.requireNonNull(imageName);
            return this;
        }

        public Builder setRegistry(@Nullable ContainerRegistryResponse registry) {
            this.registry = registry;
            return this;
        }

        public Builder setWorkingDirectory(@Nullable String workingDirectory) {
            this.workingDirectory = workingDirectory;
            return this;
        }

        public TaskContainerSettingsResponse build() {
            return new TaskContainerSettingsResponse(containerRunOptions, imageName, registry, workingDirectory);
        }
    }
}
