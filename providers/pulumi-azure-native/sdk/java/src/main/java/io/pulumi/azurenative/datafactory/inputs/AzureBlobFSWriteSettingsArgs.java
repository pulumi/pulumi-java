// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Azure blobFS write settings.
 * 
 */
public final class AzureBlobFSWriteSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AzureBlobFSWriteSettingsArgs Empty = new AzureBlobFSWriteSettingsArgs();

    /**
     * Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
     * 
     */
    @InputImport(name="blockSizeInMB")
        private final @Nullable Input<Object> blockSizeInMB;

    public Input<Object> getBlockSizeInMB() {
        return this.blockSizeInMB == null ? Input.empty() : this.blockSizeInMB;
    }

    /**
     * The type of copy behavior for copy sink.
     * 
     */
    @InputImport(name="copyBehavior")
        private final @Nullable Input<Object> copyBehavior;

    public Input<Object> getCopyBehavior() {
        return this.copyBehavior == null ? Input.empty() : this.copyBehavior;
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @InputImport(name="disableMetricsCollection")
        private final @Nullable Input<Object> disableMetricsCollection;

    public Input<Object> getDisableMetricsCollection() {
        return this.disableMetricsCollection == null ? Input.empty() : this.disableMetricsCollection;
    }

    /**
     * The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @InputImport(name="maxConcurrentConnections")
        private final @Nullable Input<Object> maxConcurrentConnections;

    public Input<Object> getMaxConcurrentConnections() {
        return this.maxConcurrentConnections == null ? Input.empty() : this.maxConcurrentConnections;
    }

    /**
     * The write setting type.
     * Expected value is 'AzureBlobFSWriteSettings'.
     * 
     */
    @InputImport(name="type", required=true)
        private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public AzureBlobFSWriteSettingsArgs(
        @Nullable Input<Object> blockSizeInMB,
        @Nullable Input<Object> copyBehavior,
        @Nullable Input<Object> disableMetricsCollection,
        @Nullable Input<Object> maxConcurrentConnections,
        Input<String> type) {
        this.blockSizeInMB = blockSizeInMB;
        this.copyBehavior = copyBehavior;
        this.disableMetricsCollection = disableMetricsCollection;
        this.maxConcurrentConnections = maxConcurrentConnections;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private AzureBlobFSWriteSettingsArgs() {
        this.blockSizeInMB = Input.empty();
        this.copyBehavior = Input.empty();
        this.disableMetricsCollection = Input.empty();
        this.maxConcurrentConnections = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureBlobFSWriteSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Object> blockSizeInMB;
        private @Nullable Input<Object> copyBehavior;
        private @Nullable Input<Object> disableMetricsCollection;
        private @Nullable Input<Object> maxConcurrentConnections;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureBlobFSWriteSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockSizeInMB = defaults.blockSizeInMB;
    	      this.copyBehavior = defaults.copyBehavior;
    	      this.disableMetricsCollection = defaults.disableMetricsCollection;
    	      this.maxConcurrentConnections = defaults.maxConcurrentConnections;
    	      this.type = defaults.type;
        }

        public Builder setBlockSizeInMB(@Nullable Input<Object> blockSizeInMB) {
            this.blockSizeInMB = blockSizeInMB;
            return this;
        }

        public Builder setBlockSizeInMB(@Nullable Object blockSizeInMB) {
            this.blockSizeInMB = Input.ofNullable(blockSizeInMB);
            return this;
        }

        public Builder setCopyBehavior(@Nullable Input<Object> copyBehavior) {
            this.copyBehavior = copyBehavior;
            return this;
        }

        public Builder setCopyBehavior(@Nullable Object copyBehavior) {
            this.copyBehavior = Input.ofNullable(copyBehavior);
            return this;
        }

        public Builder setDisableMetricsCollection(@Nullable Input<Object> disableMetricsCollection) {
            this.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder setDisableMetricsCollection(@Nullable Object disableMetricsCollection) {
            this.disableMetricsCollection = Input.ofNullable(disableMetricsCollection);
            return this;
        }

        public Builder setMaxConcurrentConnections(@Nullable Input<Object> maxConcurrentConnections) {
            this.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder setMaxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            this.maxConcurrentConnections = Input.ofNullable(maxConcurrentConnections);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }
        public AzureBlobFSWriteSettingsArgs build() {
            return new AzureBlobFSWriteSettingsArgs(blockSizeInMB, copyBehavior, disableMetricsCollection, maxConcurrentConnections, type);
        }
    }
}
