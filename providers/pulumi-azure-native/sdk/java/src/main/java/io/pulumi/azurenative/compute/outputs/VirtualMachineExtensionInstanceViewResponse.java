// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.outputs;

import io.pulumi.azurenative.compute.outputs.InstanceViewStatusResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class VirtualMachineExtensionInstanceViewResponse {
    private final @Nullable String name;
    private final @Nullable List<InstanceViewStatusResponse> statuses;
    private final @Nullable List<InstanceViewStatusResponse> substatuses;
    private final @Nullable String type;
    private final @Nullable String typeHandlerVersion;

    @OutputCustomType.Constructor({"name","statuses","substatuses","type","typeHandlerVersion"})
    private VirtualMachineExtensionInstanceViewResponse(
        @Nullable String name,
        @Nullable List<InstanceViewStatusResponse> statuses,
        @Nullable List<InstanceViewStatusResponse> substatuses,
        @Nullable String type,
        @Nullable String typeHandlerVersion) {
        this.name = name;
        this.statuses = statuses;
        this.substatuses = substatuses;
        this.type = type;
        this.typeHandlerVersion = typeHandlerVersion;
    }

    public Optional<String> getName() {
        return Optional.ofNullable(this.name);
    }
    public List<InstanceViewStatusResponse> getStatuses() {
        return this.statuses == null ? List.of() : this.statuses;
    }
    public List<InstanceViewStatusResponse> getSubstatuses() {
        return this.substatuses == null ? List.of() : this.substatuses;
    }
    public Optional<String> getType() {
        return Optional.ofNullable(this.type);
    }
    public Optional<String> getTypeHandlerVersion() {
        return Optional.ofNullable(this.typeHandlerVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineExtensionInstanceViewResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String name;
        private @Nullable List<InstanceViewStatusResponse> statuses;
        private @Nullable List<InstanceViewStatusResponse> substatuses;
        private @Nullable String type;
        private @Nullable String typeHandlerVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineExtensionInstanceViewResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.statuses = defaults.statuses;
    	      this.substatuses = defaults.substatuses;
    	      this.type = defaults.type;
    	      this.typeHandlerVersion = defaults.typeHandlerVersion;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setStatuses(@Nullable List<InstanceViewStatusResponse> statuses) {
            this.statuses = statuses;
            return this;
        }

        public Builder setSubstatuses(@Nullable List<InstanceViewStatusResponse> substatuses) {
            this.substatuses = substatuses;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = type;
            return this;
        }

        public Builder setTypeHandlerVersion(@Nullable String typeHandlerVersion) {
            this.typeHandlerVersion = typeHandlerVersion;
            return this;
        }

        public VirtualMachineExtensionInstanceViewResponse build() {
            return new VirtualMachineExtensionInstanceViewResponse(name, statuses, substatuses, type, typeHandlerVersion);
        }
    }
}
