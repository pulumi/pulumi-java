// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.testbase.inputs;

import io.pulumi.azurenative.testbase.enums.Action;
import io.pulumi.azurenative.testbase.enums.ContentType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The command used in the test
 * 
 */
public final class CommandArgs extends io.pulumi.resources.ResourceArgs {

    public static final CommandArgs Empty = new CommandArgs();

    /**
     * The action of the command.
     * 
     */
    @Import(name="action", required=true)
      private final Output<Either<String,Action>> action;

    public Output<Either<String,Action>> getAction() {
        return this.action;
    }

    /**
     * Specifies whether to run the command even if a previous command is failed.
     * 
     */
    @Import(name="alwaysRun")
      private final @Nullable Output<Boolean> alwaysRun;

    public Output<Boolean> getAlwaysRun() {
        return this.alwaysRun == null ? Codegen.empty() : this.alwaysRun;
    }

    /**
     * Specifies whether to apply update before the command.
     * 
     */
    @Import(name="applyUpdateBefore")
      private final @Nullable Output<Boolean> applyUpdateBefore;

    public Output<Boolean> getApplyUpdateBefore() {
        return this.applyUpdateBefore == null ? Codegen.empty() : this.applyUpdateBefore;
    }

    /**
     * The content of the command. The content depends on source type.
     * 
     */
    @Import(name="content", required=true)
      private final Output<String> content;

    public Output<String> getContent() {
        return this.content;
    }

    /**
     * The type of command content.
     * 
     */
    @Import(name="contentType", required=true)
      private final Output<Either<String,ContentType>> contentType;

    public Output<Either<String,ContentType>> getContentType() {
        return this.contentType;
    }

    /**
     * Specifies the max run time of the command.
     * 
     */
    @Import(name="maxRunTime")
      private final @Nullable Output<Integer> maxRunTime;

    public Output<Integer> getMaxRunTime() {
        return this.maxRunTime == null ? Codegen.empty() : this.maxRunTime;
    }

    /**
     * The name of the command.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * Specifies whether to restart the VM after the command executed.
     * 
     */
    @Import(name="restartAfter")
      private final @Nullable Output<Boolean> restartAfter;

    public Output<Boolean> getRestartAfter() {
        return this.restartAfter == null ? Codegen.empty() : this.restartAfter;
    }

    /**
     * Specifies whether to run the command in interactive mode.
     * 
     */
    @Import(name="runAsInteractive")
      private final @Nullable Output<Boolean> runAsInteractive;

    public Output<Boolean> getRunAsInteractive() {
        return this.runAsInteractive == null ? Codegen.empty() : this.runAsInteractive;
    }

    /**
     * Specifies whether to run the command as administrator.
     * 
     */
    @Import(name="runElevated")
      private final @Nullable Output<Boolean> runElevated;

    public Output<Boolean> getRunElevated() {
        return this.runElevated == null ? Codegen.empty() : this.runElevated;
    }

    public CommandArgs(
        Output<Either<String,Action>> action,
        @Nullable Output<Boolean> alwaysRun,
        @Nullable Output<Boolean> applyUpdateBefore,
        Output<String> content,
        Output<Either<String,ContentType>> contentType,
        @Nullable Output<Integer> maxRunTime,
        Output<String> name,
        @Nullable Output<Boolean> restartAfter,
        @Nullable Output<Boolean> runAsInteractive,
        @Nullable Output<Boolean> runElevated) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.alwaysRun = alwaysRun;
        this.applyUpdateBefore = applyUpdateBefore;
        this.content = Objects.requireNonNull(content, "expected parameter 'content' to be non-null");
        this.contentType = Objects.requireNonNull(contentType, "expected parameter 'contentType' to be non-null");
        this.maxRunTime = maxRunTime;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.restartAfter = restartAfter;
        this.runAsInteractive = runAsInteractive;
        this.runElevated = runElevated;
    }

    private CommandArgs() {
        this.action = Codegen.empty();
        this.alwaysRun = Codegen.empty();
        this.applyUpdateBefore = Codegen.empty();
        this.content = Codegen.empty();
        this.contentType = Codegen.empty();
        this.maxRunTime = Codegen.empty();
        this.name = Codegen.empty();
        this.restartAfter = Codegen.empty();
        this.runAsInteractive = Codegen.empty();
        this.runElevated = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CommandArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,Action>> action;
        private @Nullable Output<Boolean> alwaysRun;
        private @Nullable Output<Boolean> applyUpdateBefore;
        private Output<String> content;
        private Output<Either<String,ContentType>> contentType;
        private @Nullable Output<Integer> maxRunTime;
        private Output<String> name;
        private @Nullable Output<Boolean> restartAfter;
        private @Nullable Output<Boolean> runAsInteractive;
        private @Nullable Output<Boolean> runElevated;

        public Builder() {
    	      // Empty
        }

        public Builder(CommandArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.alwaysRun = defaults.alwaysRun;
    	      this.applyUpdateBefore = defaults.applyUpdateBefore;
    	      this.content = defaults.content;
    	      this.contentType = defaults.contentType;
    	      this.maxRunTime = defaults.maxRunTime;
    	      this.name = defaults.name;
    	      this.restartAfter = defaults.restartAfter;
    	      this.runAsInteractive = defaults.runAsInteractive;
    	      this.runElevated = defaults.runElevated;
        }

        public Builder action(Output<Either<String,Action>> action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder action(Either<String,Action> action) {
            this.action = Output.of(Objects.requireNonNull(action));
            return this;
        }
        public Builder alwaysRun(@Nullable Output<Boolean> alwaysRun) {
            this.alwaysRun = alwaysRun;
            return this;
        }
        public Builder alwaysRun(@Nullable Boolean alwaysRun) {
            this.alwaysRun = Codegen.ofNullable(alwaysRun);
            return this;
        }
        public Builder applyUpdateBefore(@Nullable Output<Boolean> applyUpdateBefore) {
            this.applyUpdateBefore = applyUpdateBefore;
            return this;
        }
        public Builder applyUpdateBefore(@Nullable Boolean applyUpdateBefore) {
            this.applyUpdateBefore = Codegen.ofNullable(applyUpdateBefore);
            return this;
        }
        public Builder content(Output<String> content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }
        public Builder content(String content) {
            this.content = Output.of(Objects.requireNonNull(content));
            return this;
        }
        public Builder contentType(Output<Either<String,ContentType>> contentType) {
            this.contentType = Objects.requireNonNull(contentType);
            return this;
        }
        public Builder contentType(Either<String,ContentType> contentType) {
            this.contentType = Output.of(Objects.requireNonNull(contentType));
            return this;
        }
        public Builder maxRunTime(@Nullable Output<Integer> maxRunTime) {
            this.maxRunTime = maxRunTime;
            return this;
        }
        public Builder maxRunTime(@Nullable Integer maxRunTime) {
            this.maxRunTime = Codegen.ofNullable(maxRunTime);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder restartAfter(@Nullable Output<Boolean> restartAfter) {
            this.restartAfter = restartAfter;
            return this;
        }
        public Builder restartAfter(@Nullable Boolean restartAfter) {
            this.restartAfter = Codegen.ofNullable(restartAfter);
            return this;
        }
        public Builder runAsInteractive(@Nullable Output<Boolean> runAsInteractive) {
            this.runAsInteractive = runAsInteractive;
            return this;
        }
        public Builder runAsInteractive(@Nullable Boolean runAsInteractive) {
            this.runAsInteractive = Codegen.ofNullable(runAsInteractive);
            return this;
        }
        public Builder runElevated(@Nullable Output<Boolean> runElevated) {
            this.runElevated = runElevated;
            return this;
        }
        public Builder runElevated(@Nullable Boolean runElevated) {
            this.runElevated = Codegen.ofNullable(runElevated);
            return this;
        }        public CommandArgs build() {
            return new CommandArgs(action, alwaysRun, applyUpdateBefore, content, contentType, maxRunTime, name, restartAfter, runAsInteractive, runElevated);
        }
    }
}
