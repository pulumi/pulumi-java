// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserArtifactManageArgs extends io.pulumi.resources.ResourceArgs {

    public static final UserArtifactManageArgs Empty = new UserArtifactManageArgs();

    /**
     * Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
     * 
     */
    @InputImport(name="install", required=true)
    private final Input<String> install;

    public Input<String> getInstall() {
        return this.install;
    }

    /**
     * Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
     * 
     */
    @InputImport(name="remove", required=true)
    private final Input<String> remove;

    public Input<String> getRemove() {
        return this.remove;
    }

    /**
     * Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
     * 
     */
    @InputImport(name="update")
    private final @Nullable Input<String> update;

    public Input<String> getUpdate() {
        return this.update == null ? Input.empty() : this.update;
    }

    public UserArtifactManageArgs(
        Input<String> install,
        Input<String> remove,
        @Nullable Input<String> update) {
        this.install = Objects.requireNonNull(install, "expected parameter 'install' to be non-null");
        this.remove = Objects.requireNonNull(remove, "expected parameter 'remove' to be non-null");
        this.update = update;
    }

    private UserArtifactManageArgs() {
        this.install = Input.empty();
        this.remove = Input.empty();
        this.update = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserArtifactManageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> install;
        private Input<String> remove;
        private @Nullable Input<String> update;

        public Builder() {
    	      // Empty
        }

        public Builder(UserArtifactManageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.install = defaults.install;
    	      this.remove = defaults.remove;
    	      this.update = defaults.update;
        }

        public Builder setInstall(Input<String> install) {
            this.install = Objects.requireNonNull(install);
            return this;
        }

        public Builder setInstall(String install) {
            this.install = Input.of(Objects.requireNonNull(install));
            return this;
        }

        public Builder setRemove(Input<String> remove) {
            this.remove = Objects.requireNonNull(remove);
            return this;
        }

        public Builder setRemove(String remove) {
            this.remove = Input.of(Objects.requireNonNull(remove));
            return this;
        }

        public Builder setUpdate(@Nullable Input<String> update) {
            this.update = update;
            return this;
        }

        public Builder setUpdate(@Nullable String update) {
            this.update = Input.ofNullable(update);
            return this;
        }

        public UserArtifactManageArgs build() {
            return new UserArtifactManageArgs(install, remove, update);
        }
    }
}
