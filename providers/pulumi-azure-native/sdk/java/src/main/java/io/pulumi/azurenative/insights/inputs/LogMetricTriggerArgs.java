// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.azurenative.insights.enums.ConditionalOperator;
import io.pulumi.azurenative.insights.enums.MetricTriggerType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A log metrics trigger descriptor.
 * 
 */
public final class LogMetricTriggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final LogMetricTriggerArgs Empty = new LogMetricTriggerArgs();

    /**
     * Evaluation of metric on a particular column
     * 
     */
    @InputImport(name="metricColumn")
      private final @Nullable Output<String> metricColumn;

    public Output<String> getMetricColumn() {
        return this.metricColumn == null ? Output.empty() : this.metricColumn;
    }

    /**
     * Metric Trigger Type - 'Consecutive' or 'Total'
     * 
     */
    @InputImport(name="metricTriggerType")
      private final @Nullable Output<Either<String,MetricTriggerType>> metricTriggerType;

    public Output<Either<String,MetricTriggerType>> getMetricTriggerType() {
        return this.metricTriggerType == null ? Output.empty() : this.metricTriggerType;
    }

    /**
     * The threshold of the metric trigger.
     * 
     */
    @InputImport(name="threshold")
      private final @Nullable Output<Double> threshold;

    public Output<Double> getThreshold() {
        return this.threshold == null ? Output.empty() : this.threshold;
    }

    /**
     * Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
     * 
     */
    @InputImport(name="thresholdOperator")
      private final @Nullable Output<Either<String,ConditionalOperator>> thresholdOperator;

    public Output<Either<String,ConditionalOperator>> getThresholdOperator() {
        return this.thresholdOperator == null ? Output.empty() : this.thresholdOperator;
    }

    public LogMetricTriggerArgs(
        @Nullable Output<String> metricColumn,
        @Nullable Output<Either<String,MetricTriggerType>> metricTriggerType,
        @Nullable Output<Double> threshold,
        @Nullable Output<Either<String,ConditionalOperator>> thresholdOperator) {
        this.metricColumn = metricColumn;
        this.metricTriggerType = metricTriggerType;
        this.threshold = threshold;
        this.thresholdOperator = thresholdOperator;
    }

    private LogMetricTriggerArgs() {
        this.metricColumn = Output.empty();
        this.metricTriggerType = Output.empty();
        this.threshold = Output.empty();
        this.thresholdOperator = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogMetricTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> metricColumn;
        private @Nullable Output<Either<String,MetricTriggerType>> metricTriggerType;
        private @Nullable Output<Double> threshold;
        private @Nullable Output<Either<String,ConditionalOperator>> thresholdOperator;

        public Builder() {
    	      // Empty
        }

        public Builder(LogMetricTriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricColumn = defaults.metricColumn;
    	      this.metricTriggerType = defaults.metricTriggerType;
    	      this.threshold = defaults.threshold;
    	      this.thresholdOperator = defaults.thresholdOperator;
        }

        public Builder metricColumn(@Nullable Output<String> metricColumn) {
            this.metricColumn = metricColumn;
            return this;
        }

        public Builder metricColumn(@Nullable String metricColumn) {
            this.metricColumn = Output.ofNullable(metricColumn);
            return this;
        }

        public Builder metricTriggerType(@Nullable Output<Either<String,MetricTriggerType>> metricTriggerType) {
            this.metricTriggerType = metricTriggerType;
            return this;
        }

        public Builder metricTriggerType(@Nullable Either<String,MetricTriggerType> metricTriggerType) {
            this.metricTriggerType = Output.ofNullable(metricTriggerType);
            return this;
        }

        public Builder threshold(@Nullable Output<Double> threshold) {
            this.threshold = threshold;
            return this;
        }

        public Builder threshold(@Nullable Double threshold) {
            this.threshold = Output.ofNullable(threshold);
            return this;
        }

        public Builder thresholdOperator(@Nullable Output<Either<String,ConditionalOperator>> thresholdOperator) {
            this.thresholdOperator = thresholdOperator;
            return this;
        }

        public Builder thresholdOperator(@Nullable Either<String,ConditionalOperator> thresholdOperator) {
            this.thresholdOperator = Output.ofNullable(thresholdOperator);
            return this;
        }
        public LogMetricTriggerArgs build() {
            return new LogMetricTriggerArgs(metricColumn, metricTriggerType, threshold, thresholdOperator);
        }
    }
}
