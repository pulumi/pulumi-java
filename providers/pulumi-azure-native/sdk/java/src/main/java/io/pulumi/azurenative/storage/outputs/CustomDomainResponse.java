// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class CustomDomainResponse {
    /**
     * Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
     * 
     */
    private final String name;
    /**
     * Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
     * 
     */
    private final @Nullable Boolean useSubDomainName;

    @OutputCustomType.Constructor({"name","useSubDomainName"})
    private CustomDomainResponse(
        String name,
        @Nullable Boolean useSubDomainName) {
        this.name = Objects.requireNonNull(name);
        this.useSubDomainName = useSubDomainName;
    }

    /**
     * Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
     * 
    */
    public Optional<Boolean> getUseSubDomainName() {
        return Optional.ofNullable(this.useSubDomainName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomDomainResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String name;
        private @Nullable Boolean useSubDomainName;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomDomainResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.useSubDomainName = defaults.useSubDomainName;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setUseSubDomainName(@Nullable Boolean useSubDomainName) {
            this.useSubDomainName = useSubDomainName;
            return this;
        }
        public CustomDomainResponse build() {
            return new CustomDomainResponse(name, useSubDomainName);
        }
    }
}
