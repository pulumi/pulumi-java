// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DocumentDbOutputDataSourceResponse extends io.pulumi.resources.InvokeArgs {

    public static final DocumentDbOutputDataSourceResponse Empty = new DocumentDbOutputDataSourceResponse();

    @InputImport(name="accountId")
    private final @Nullable String accountId;

    public Optional<String> getAccountId() {
        return this.accountId == null ? Optional.empty() : Optional.ofNullable(this.accountId);
    }

    @InputImport(name="accountKey")
    private final @Nullable String accountKey;

    public Optional<String> getAccountKey() {
        return this.accountKey == null ? Optional.empty() : Optional.ofNullable(this.accountKey);
    }

    @InputImport(name="collectionNamePattern")
    private final @Nullable String collectionNamePattern;

    public Optional<String> getCollectionNamePattern() {
        return this.collectionNamePattern == null ? Optional.empty() : Optional.ofNullable(this.collectionNamePattern);
    }

    @InputImport(name="database")
    private final @Nullable String database;

    public Optional<String> getDatabase() {
        return this.database == null ? Optional.empty() : Optional.ofNullable(this.database);
    }

    @InputImport(name="documentId")
    private final @Nullable String documentId;

    public Optional<String> getDocumentId() {
        return this.documentId == null ? Optional.empty() : Optional.ofNullable(this.documentId);
    }

    @InputImport(name="partitionKey")
    private final @Nullable String partitionKey;

    public Optional<String> getPartitionKey() {
        return this.partitionKey == null ? Optional.empty() : Optional.ofNullable(this.partitionKey);
    }

    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    public DocumentDbOutputDataSourceResponse(
        @Nullable String accountId,
        @Nullable String accountKey,
        @Nullable String collectionNamePattern,
        @Nullable String database,
        @Nullable String documentId,
        @Nullable String partitionKey,
        String type) {
        this.accountId = accountId;
        this.accountKey = accountKey;
        this.collectionNamePattern = collectionNamePattern;
        this.database = database;
        this.documentId = documentId;
        this.partitionKey = partitionKey;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private DocumentDbOutputDataSourceResponse() {
        this.accountId = null;
        this.accountKey = null;
        this.collectionNamePattern = null;
        this.database = null;
        this.documentId = null;
        this.partitionKey = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentDbOutputDataSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accountId;
        private @Nullable String accountKey;
        private @Nullable String collectionNamePattern;
        private @Nullable String database;
        private @Nullable String documentId;
        private @Nullable String partitionKey;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(DocumentDbOutputDataSourceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.accountKey = defaults.accountKey;
    	      this.collectionNamePattern = defaults.collectionNamePattern;
    	      this.database = defaults.database;
    	      this.documentId = defaults.documentId;
    	      this.partitionKey = defaults.partitionKey;
    	      this.type = defaults.type;
        }

        public Builder setAccountId(@Nullable String accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder setAccountKey(@Nullable String accountKey) {
            this.accountKey = accountKey;
            return this;
        }

        public Builder setCollectionNamePattern(@Nullable String collectionNamePattern) {
            this.collectionNamePattern = collectionNamePattern;
            return this;
        }

        public Builder setDatabase(@Nullable String database) {
            this.database = database;
            return this;
        }

        public Builder setDocumentId(@Nullable String documentId) {
            this.documentId = documentId;
            return this;
        }

        public Builder setPartitionKey(@Nullable String partitionKey) {
            this.partitionKey = partitionKey;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public DocumentDbOutputDataSourceResponse build() {
            return new DocumentDbOutputDataSourceResponse(accountId, accountKey, collectionNamePattern, database, documentId, partitionKey, type);
        }
    }
}
