// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.consumption.outputs;

import io.pulumi.azurenative.consumption.outputs.BudgetComparisonExpressionResponse;
import io.pulumi.azurenative.consumption.outputs.BudgetFilterPropertiesResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class BudgetFilterResponse {
    /**
     * The logical "AND" expression. Must have at least 2 items.
     * 
     */
    private final @Nullable List<BudgetFilterPropertiesResponse> and;
    /**
     * Has comparison expression for a dimension
     * 
     */
    private final @Nullable BudgetComparisonExpressionResponse dimensions;
    /**
     * The logical "NOT" expression.
     * 
     */
    private final @Nullable BudgetFilterPropertiesResponse not;
    /**
     * Has comparison expression for a tag
     * 
     */
    private final @Nullable BudgetComparisonExpressionResponse tags;

    @OutputCustomType.Constructor({"and","dimensions","not","tags"})
    private BudgetFilterResponse(
        @Nullable List<BudgetFilterPropertiesResponse> and,
        @Nullable BudgetComparisonExpressionResponse dimensions,
        @Nullable BudgetFilterPropertiesResponse not,
        @Nullable BudgetComparisonExpressionResponse tags) {
        this.and = and;
        this.dimensions = dimensions;
        this.not = not;
        this.tags = tags;
    }

    /**
     * The logical "AND" expression. Must have at least 2 items.
     * 
     */
    public List<BudgetFilterPropertiesResponse> getAnd() {
        return this.and == null ? List.of() : this.and;
    }
    /**
     * Has comparison expression for a dimension
     * 
     */
    public Optional<BudgetComparisonExpressionResponse> getDimensions() {
        return Optional.ofNullable(this.dimensions);
    }
    /**
     * The logical "NOT" expression.
     * 
     */
    public Optional<BudgetFilterPropertiesResponse> getNot() {
        return Optional.ofNullable(this.not);
    }
    /**
     * Has comparison expression for a tag
     * 
     */
    public Optional<BudgetComparisonExpressionResponse> getTags() {
        return Optional.ofNullable(this.tags);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<BudgetFilterPropertiesResponse> and;
        private @Nullable BudgetComparisonExpressionResponse dimensions;
        private @Nullable BudgetFilterPropertiesResponse not;
        private @Nullable BudgetComparisonExpressionResponse tags;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetFilterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.and = defaults.and;
    	      this.dimensions = defaults.dimensions;
    	      this.not = defaults.not;
    	      this.tags = defaults.tags;
        }

        public Builder setAnd(@Nullable List<BudgetFilterPropertiesResponse> and) {
            this.and = and;
            return this;
        }

        public Builder setDimensions(@Nullable BudgetComparisonExpressionResponse dimensions) {
            this.dimensions = dimensions;
            return this;
        }

        public Builder setNot(@Nullable BudgetFilterPropertiesResponse not) {
            this.not = not;
            return this;
        }

        public Builder setTags(@Nullable BudgetComparisonExpressionResponse tags) {
            this.tags = tags;
            return this;
        }

        public BudgetFilterResponse build() {
            return new BudgetFilterResponse(and, dimensions, not, tags);
        }
    }
}
