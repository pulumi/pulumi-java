// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.securityinsights.inputs;

import io.pulumi.azurenative.securityinsights.enums.Kind;
import io.pulumi.azurenative.securityinsights.enums.Operator;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
 * 
 */
public final class MetadataDependenciesArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetadataDependenciesArgs Empty = new MetadataDependenciesArgs();

    /**
     * Id of the content item we depend on
     * 
     */
    @InputImport(name="contentId")
      private final @Nullable Output<String> contentId;

    public Output<String> getContentId() {
        return this.contentId == null ? Output.empty() : this.contentId;
    }

    /**
     * This is the list of dependencies we must fulfill, according to the AND/OR operator
     * 
     */
    @InputImport(name="criteria")
      private final @Nullable Output<List<MetadataDependenciesArgs>> criteria;

    public Output<List<MetadataDependenciesArgs>> getCriteria() {
        return this.criteria == null ? Output.empty() : this.criteria;
    }

    /**
     * Type of the content item we depend on
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Output<Either<String,Kind>> kind;

    public Output<Either<String,Kind>> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * Name of the content item
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Operator used for list of dependencies in criteria array.
     * 
     */
    @InputImport(name="operator")
      private final @Nullable Output<Either<String,Operator>> operator;

    public Output<Either<String,Operator>> getOperator() {
        return this.operator == null ? Output.empty() : this.operator;
    }

    /**
     * Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
     * 
     */
    @InputImport(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Output.empty() : this.version;
    }

    public MetadataDependenciesArgs(
        @Nullable Output<String> contentId,
        @Nullable Output<List<MetadataDependenciesArgs>> criteria,
        @Nullable Output<Either<String,Kind>> kind,
        @Nullable Output<String> name,
        @Nullable Output<Either<String,Operator>> operator,
        @Nullable Output<String> version) {
        this.contentId = contentId;
        this.criteria = criteria;
        this.kind = kind;
        this.name = name;
        this.operator = operator;
        this.version = version;
    }

    private MetadataDependenciesArgs() {
        this.contentId = Output.empty();
        this.criteria = Output.empty();
        this.kind = Output.empty();
        this.name = Output.empty();
        this.operator = Output.empty();
        this.version = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetadataDependenciesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> contentId;
        private @Nullable Output<List<MetadataDependenciesArgs>> criteria;
        private @Nullable Output<Either<String,Kind>> kind;
        private @Nullable Output<String> name;
        private @Nullable Output<Either<String,Operator>> operator;
        private @Nullable Output<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(MetadataDependenciesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentId = defaults.contentId;
    	      this.criteria = defaults.criteria;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.operator = defaults.operator;
    	      this.version = defaults.version;
        }

        public Builder contentId(@Nullable Output<String> contentId) {
            this.contentId = contentId;
            return this;
        }

        public Builder contentId(@Nullable String contentId) {
            this.contentId = Output.ofNullable(contentId);
            return this;
        }

        public Builder criteria(@Nullable Output<List<MetadataDependenciesArgs>> criteria) {
            this.criteria = criteria;
            return this;
        }

        public Builder criteria(@Nullable List<MetadataDependenciesArgs> criteria) {
            this.criteria = Output.ofNullable(criteria);
            return this;
        }

        public Builder kind(@Nullable Output<Either<String,Kind>> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable Either<String,Kind> kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder operator(@Nullable Output<Either<String,Operator>> operator) {
            this.operator = operator;
            return this;
        }

        public Builder operator(@Nullable Either<String,Operator> operator) {
            this.operator = Output.ofNullable(operator);
            return this;
        }

        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }

        public Builder version(@Nullable String version) {
            this.version = Output.ofNullable(version);
            return this;
        }
        public MetadataDependenciesArgs build() {
            return new MetadataDependenciesArgs(contentId, criteria, kind, name, operator, version);
        }
    }
}
