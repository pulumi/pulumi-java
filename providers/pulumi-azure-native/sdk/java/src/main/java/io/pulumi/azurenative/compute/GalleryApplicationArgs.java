// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.compute.enums.OperatingSystemTypes;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GalleryApplicationArgs extends io.pulumi.resources.ResourceArgs {

    public static final GalleryApplicationArgs Empty = new GalleryApplicationArgs();

    /**
     * The description of this gallery Application Definition resource. This property is updatable.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable.
     * 
     */
    @Import(name="endOfLifeDate")
      private final @Nullable Output<String> endOfLifeDate;

    public Output<String> getEndOfLifeDate() {
        return this.endOfLifeDate == null ? Codegen.empty() : this.endOfLifeDate;
    }

    /**
     * The Eula agreement for the gallery Application Definition.
     * 
     */
    @Import(name="eula")
      private final @Nullable Output<String> eula;

    public Output<String> getEula() {
        return this.eula == null ? Codegen.empty() : this.eula;
    }

    /**
     * The name of the gallery Application Definition to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.
     * 
     */
    @Import(name="galleryApplicationName")
      private final @Nullable Output<String> galleryApplicationName;

    public Output<String> getGalleryApplicationName() {
        return this.galleryApplicationName == null ? Codegen.empty() : this.galleryApplicationName;
    }

    /**
     * The name of the Shared Application Gallery in which the Application Definition is to be created.
     * 
     */
    @Import(name="galleryName", required=true)
      private final Output<String> galleryName;

    public Output<String> getGalleryName() {
        return this.galleryName;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The privacy statement uri.
     * 
     */
    @Import(name="privacyStatementUri")
      private final @Nullable Output<String> privacyStatementUri;

    public Output<String> getPrivacyStatementUri() {
        return this.privacyStatementUri == null ? Codegen.empty() : this.privacyStatementUri;
    }

    /**
     * The release note uri.
     * 
     */
    @Import(name="releaseNoteUri")
      private final @Nullable Output<String> releaseNoteUri;

    public Output<String> getReleaseNoteUri() {
        return this.releaseNoteUri == null ? Codegen.empty() : this.releaseNoteUri;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * This property allows you to specify the supported type of the OS that application is built for. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
     * 
     */
    @Import(name="supportedOSType", required=true)
      private final Output<OperatingSystemTypes> supportedOSType;

    public Output<OperatingSystemTypes> getSupportedOSType() {
        return this.supportedOSType;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public GalleryApplicationArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> endOfLifeDate,
        @Nullable Output<String> eula,
        @Nullable Output<String> galleryApplicationName,
        Output<String> galleryName,
        @Nullable Output<String> location,
        @Nullable Output<String> privacyStatementUri,
        @Nullable Output<String> releaseNoteUri,
        Output<String> resourceGroupName,
        Output<OperatingSystemTypes> supportedOSType,
        @Nullable Output<Map<String,String>> tags) {
        this.description = description;
        this.endOfLifeDate = endOfLifeDate;
        this.eula = eula;
        this.galleryApplicationName = galleryApplicationName;
        this.galleryName = Objects.requireNonNull(galleryName, "expected parameter 'galleryName' to be non-null");
        this.location = location;
        this.privacyStatementUri = privacyStatementUri;
        this.releaseNoteUri = releaseNoteUri;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.supportedOSType = Objects.requireNonNull(supportedOSType, "expected parameter 'supportedOSType' to be non-null");
        this.tags = tags;
    }

    private GalleryApplicationArgs() {
        this.description = Codegen.empty();
        this.endOfLifeDate = Codegen.empty();
        this.eula = Codegen.empty();
        this.galleryApplicationName = Codegen.empty();
        this.galleryName = Codegen.empty();
        this.location = Codegen.empty();
        this.privacyStatementUri = Codegen.empty();
        this.releaseNoteUri = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.supportedOSType = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GalleryApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> endOfLifeDate;
        private @Nullable Output<String> eula;
        private @Nullable Output<String> galleryApplicationName;
        private Output<String> galleryName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> privacyStatementUri;
        private @Nullable Output<String> releaseNoteUri;
        private Output<String> resourceGroupName;
        private Output<OperatingSystemTypes> supportedOSType;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GalleryApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.endOfLifeDate = defaults.endOfLifeDate;
    	      this.eula = defaults.eula;
    	      this.galleryApplicationName = defaults.galleryApplicationName;
    	      this.galleryName = defaults.galleryName;
    	      this.location = defaults.location;
    	      this.privacyStatementUri = defaults.privacyStatementUri;
    	      this.releaseNoteUri = defaults.releaseNoteUri;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.supportedOSType = defaults.supportedOSType;
    	      this.tags = defaults.tags;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder endOfLifeDate(@Nullable Output<String> endOfLifeDate) {
            this.endOfLifeDate = endOfLifeDate;
            return this;
        }
        public Builder endOfLifeDate(@Nullable String endOfLifeDate) {
            this.endOfLifeDate = Codegen.ofNullable(endOfLifeDate);
            return this;
        }
        public Builder eula(@Nullable Output<String> eula) {
            this.eula = eula;
            return this;
        }
        public Builder eula(@Nullable String eula) {
            this.eula = Codegen.ofNullable(eula);
            return this;
        }
        public Builder galleryApplicationName(@Nullable Output<String> galleryApplicationName) {
            this.galleryApplicationName = galleryApplicationName;
            return this;
        }
        public Builder galleryApplicationName(@Nullable String galleryApplicationName) {
            this.galleryApplicationName = Codegen.ofNullable(galleryApplicationName);
            return this;
        }
        public Builder galleryName(Output<String> galleryName) {
            this.galleryName = Objects.requireNonNull(galleryName);
            return this;
        }
        public Builder galleryName(String galleryName) {
            this.galleryName = Output.of(Objects.requireNonNull(galleryName));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder privacyStatementUri(@Nullable Output<String> privacyStatementUri) {
            this.privacyStatementUri = privacyStatementUri;
            return this;
        }
        public Builder privacyStatementUri(@Nullable String privacyStatementUri) {
            this.privacyStatementUri = Codegen.ofNullable(privacyStatementUri);
            return this;
        }
        public Builder releaseNoteUri(@Nullable Output<String> releaseNoteUri) {
            this.releaseNoteUri = releaseNoteUri;
            return this;
        }
        public Builder releaseNoteUri(@Nullable String releaseNoteUri) {
            this.releaseNoteUri = Codegen.ofNullable(releaseNoteUri);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder supportedOSType(Output<OperatingSystemTypes> supportedOSType) {
            this.supportedOSType = Objects.requireNonNull(supportedOSType);
            return this;
        }
        public Builder supportedOSType(OperatingSystemTypes supportedOSType) {
            this.supportedOSType = Output.of(Objects.requireNonNull(supportedOSType));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public GalleryApplicationArgs build() {
            return new GalleryApplicationArgs(description, endOfLifeDate, eula, galleryApplicationName, galleryName, location, privacyStatementUri, releaseNoteUri, resourceGroupName, supportedOSType, tags);
        }
    }
}
