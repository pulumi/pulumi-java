// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabric;

import io.pulumi.azurenative.servicefabric.inputs.ApplicationMetricDescriptionArgs;
import io.pulumi.azurenative.servicefabric.inputs.ApplicationUpgradePolicyArgs;
import io.pulumi.azurenative.servicefabric.inputs.ApplicationUserAssignedIdentityArgs;
import io.pulumi.azurenative.servicefabric.inputs.ManagedIdentityArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    /**
     * The name of the application resource.
     * 
     */
    @InputImport(name="applicationName")
      private final @Nullable Input<String> applicationName;

    public Input<String> getApplicationName() {
        return this.applicationName == null ? Input.empty() : this.applicationName;
    }

    /**
     * The name of the cluster resource.
     * 
     */
    @InputImport(name="clusterName", required=true)
      private final Input<String> clusterName;

    public Input<String> getClusterName() {
        return this.clusterName;
    }

    /**
     * Describes the managed identities for an Azure resource.
     * 
     */
    @InputImport(name="identity")
      private final @Nullable Input<ManagedIdentityArgs> identity;

    public Input<ManagedIdentityArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    /**
     * It will be deprecated in New API, resource location depends on the parent resource.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * List of user assigned identities for the application, each mapped to a friendly name.
     * 
     */
    @InputImport(name="managedIdentities")
      private final @Nullable Input<List<ApplicationUserAssignedIdentityArgs>> managedIdentities;

    public Input<List<ApplicationUserAssignedIdentityArgs>> getManagedIdentities() {
        return this.managedIdentities == null ? Input.empty() : this.managedIdentities;
    }

    /**
     * The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
     * 
     */
    @InputImport(name="maximumNodes")
      private final @Nullable Input<Double> maximumNodes;

    public Input<Double> getMaximumNodes() {
        return this.maximumNodes == null ? Input.empty() : this.maximumNodes;
    }

    /**
     * List of application capacity metric description.
     * 
     */
    @InputImport(name="metrics")
      private final @Nullable Input<List<ApplicationMetricDescriptionArgs>> metrics;

    public Input<List<ApplicationMetricDescriptionArgs>> getMetrics() {
        return this.metrics == null ? Input.empty() : this.metrics;
    }

    /**
     * The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
     * 
     */
    @InputImport(name="minimumNodes")
      private final @Nullable Input<Double> minimumNodes;

    public Input<Double> getMinimumNodes() {
        return this.minimumNodes == null ? Input.empty() : this.minimumNodes;
    }

    /**
     * List of application parameters with overridden values from their default values specified in the application manifest.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Input<Map<String,String>> parameters;

    public Input<Map<String,String>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * Remove the current application capacity settings.
     * 
     */
    @InputImport(name="removeApplicationCapacity")
      private final @Nullable Input<Boolean> removeApplicationCapacity;

    public Input<Boolean> getRemoveApplicationCapacity() {
        return this.removeApplicationCapacity == null ? Input.empty() : this.removeApplicationCapacity;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Azure resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The application type name as defined in the application manifest.
     * 
     */
    @InputImport(name="typeName")
      private final @Nullable Input<String> typeName;

    public Input<String> getTypeName() {
        return this.typeName == null ? Input.empty() : this.typeName;
    }

    /**
     * The version of the application type as defined in the application manifest.
     * 
     */
    @InputImport(name="typeVersion")
      private final @Nullable Input<String> typeVersion;

    public Input<String> getTypeVersion() {
        return this.typeVersion == null ? Input.empty() : this.typeVersion;
    }

    /**
     * Describes the policy for a monitored application upgrade.
     * 
     */
    @InputImport(name="upgradePolicy")
      private final @Nullable Input<ApplicationUpgradePolicyArgs> upgradePolicy;

    public Input<ApplicationUpgradePolicyArgs> getUpgradePolicy() {
        return this.upgradePolicy == null ? Input.empty() : this.upgradePolicy;
    }

    public ApplicationArgs(
        @Nullable Input<String> applicationName,
        Input<String> clusterName,
        @Nullable Input<ManagedIdentityArgs> identity,
        @Nullable Input<String> location,
        @Nullable Input<List<ApplicationUserAssignedIdentityArgs>> managedIdentities,
        @Nullable Input<Double> maximumNodes,
        @Nullable Input<List<ApplicationMetricDescriptionArgs>> metrics,
        @Nullable Input<Double> minimumNodes,
        @Nullable Input<Map<String,String>> parameters,
        @Nullable Input<Boolean> removeApplicationCapacity,
        Input<String> resourceGroupName,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> typeName,
        @Nullable Input<String> typeVersion,
        @Nullable Input<ApplicationUpgradePolicyArgs> upgradePolicy) {
        this.applicationName = applicationName;
        this.clusterName = Objects.requireNonNull(clusterName, "expected parameter 'clusterName' to be non-null");
        this.identity = identity;
        this.location = location;
        this.managedIdentities = managedIdentities;
        this.maximumNodes = maximumNodes == null ? Input.ofNullable(0e+00) : maximumNodes;
        this.metrics = metrics;
        this.minimumNodes = minimumNodes;
        this.parameters = parameters;
        this.removeApplicationCapacity = removeApplicationCapacity;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.typeName = typeName;
        this.typeVersion = typeVersion;
        this.upgradePolicy = upgradePolicy;
    }

    private ApplicationArgs() {
        this.applicationName = Input.empty();
        this.clusterName = Input.empty();
        this.identity = Input.empty();
        this.location = Input.empty();
        this.managedIdentities = Input.empty();
        this.maximumNodes = Input.empty();
        this.metrics = Input.empty();
        this.minimumNodes = Input.empty();
        this.parameters = Input.empty();
        this.removeApplicationCapacity = Input.empty();
        this.resourceGroupName = Input.empty();
        this.tags = Input.empty();
        this.typeName = Input.empty();
        this.typeVersion = Input.empty();
        this.upgradePolicy = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> applicationName;
        private Input<String> clusterName;
        private @Nullable Input<ManagedIdentityArgs> identity;
        private @Nullable Input<String> location;
        private @Nullable Input<List<ApplicationUserAssignedIdentityArgs>> managedIdentities;
        private @Nullable Input<Double> maximumNodes;
        private @Nullable Input<List<ApplicationMetricDescriptionArgs>> metrics;
        private @Nullable Input<Double> minimumNodes;
        private @Nullable Input<Map<String,String>> parameters;
        private @Nullable Input<Boolean> removeApplicationCapacity;
        private Input<String> resourceGroupName;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> typeName;
        private @Nullable Input<String> typeVersion;
        private @Nullable Input<ApplicationUpgradePolicyArgs> upgradePolicy;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationName = defaults.applicationName;
    	      this.clusterName = defaults.clusterName;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.managedIdentities = defaults.managedIdentities;
    	      this.maximumNodes = defaults.maximumNodes;
    	      this.metrics = defaults.metrics;
    	      this.minimumNodes = defaults.minimumNodes;
    	      this.parameters = defaults.parameters;
    	      this.removeApplicationCapacity = defaults.removeApplicationCapacity;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.typeName = defaults.typeName;
    	      this.typeVersion = defaults.typeVersion;
    	      this.upgradePolicy = defaults.upgradePolicy;
        }

        public Builder applicationName(@Nullable Input<String> applicationName) {
            this.applicationName = applicationName;
            return this;
        }

        public Builder applicationName(@Nullable String applicationName) {
            this.applicationName = Input.ofNullable(applicationName);
            return this;
        }

        public Builder clusterName(Input<String> clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }

        public Builder clusterName(String clusterName) {
            this.clusterName = Input.of(Objects.requireNonNull(clusterName));
            return this;
        }

        public Builder identity(@Nullable Input<ManagedIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder identity(@Nullable ManagedIdentityArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder managedIdentities(@Nullable Input<List<ApplicationUserAssignedIdentityArgs>> managedIdentities) {
            this.managedIdentities = managedIdentities;
            return this;
        }

        public Builder managedIdentities(@Nullable List<ApplicationUserAssignedIdentityArgs> managedIdentities) {
            this.managedIdentities = Input.ofNullable(managedIdentities);
            return this;
        }

        public Builder maximumNodes(@Nullable Input<Double> maximumNodes) {
            this.maximumNodes = maximumNodes;
            return this;
        }

        public Builder maximumNodes(@Nullable Double maximumNodes) {
            this.maximumNodes = Input.ofNullable(maximumNodes);
            return this;
        }

        public Builder metrics(@Nullable Input<List<ApplicationMetricDescriptionArgs>> metrics) {
            this.metrics = metrics;
            return this;
        }

        public Builder metrics(@Nullable List<ApplicationMetricDescriptionArgs> metrics) {
            this.metrics = Input.ofNullable(metrics);
            return this;
        }

        public Builder minimumNodes(@Nullable Input<Double> minimumNodes) {
            this.minimumNodes = minimumNodes;
            return this;
        }

        public Builder minimumNodes(@Nullable Double minimumNodes) {
            this.minimumNodes = Input.ofNullable(minimumNodes);
            return this;
        }

        public Builder parameters(@Nullable Input<Map<String,String>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder removeApplicationCapacity(@Nullable Input<Boolean> removeApplicationCapacity) {
            this.removeApplicationCapacity = removeApplicationCapacity;
            return this;
        }

        public Builder removeApplicationCapacity(@Nullable Boolean removeApplicationCapacity) {
            this.removeApplicationCapacity = Input.ofNullable(removeApplicationCapacity);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder typeName(@Nullable Input<String> typeName) {
            this.typeName = typeName;
            return this;
        }

        public Builder typeName(@Nullable String typeName) {
            this.typeName = Input.ofNullable(typeName);
            return this;
        }

        public Builder typeVersion(@Nullable Input<String> typeVersion) {
            this.typeVersion = typeVersion;
            return this;
        }

        public Builder typeVersion(@Nullable String typeVersion) {
            this.typeVersion = Input.ofNullable(typeVersion);
            return this;
        }

        public Builder upgradePolicy(@Nullable Input<ApplicationUpgradePolicyArgs> upgradePolicy) {
            this.upgradePolicy = upgradePolicy;
            return this;
        }

        public Builder upgradePolicy(@Nullable ApplicationUpgradePolicyArgs upgradePolicy) {
            this.upgradePolicy = Input.ofNullable(upgradePolicy);
            return this;
        }
        public ApplicationArgs build() {
            return new ApplicationArgs(applicationName, clusterName, identity, location, managedIdentities, maximumNodes, metrics, minimumNodes, parameters, removeApplicationCapacity, resourceGroupName, tags, typeName, typeVersion, upgradePolicy);
        }
    }
}
