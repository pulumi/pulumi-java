// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.azurenative.logic.enums.UsageIndicator;
import io.pulumi.azurenative.logic.enums.X12DateFormat;
import io.pulumi.azurenative.logic.enums.X12TimeFormat;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The X12 agreement envelope settings.
 * 
 */
public final class X12EnvelopeSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final X12EnvelopeSettingsArgs Empty = new X12EnvelopeSettingsArgs();

    /**
     * The controls standards id.
     * 
     */
    @Import(name="controlStandardsId", required=true)
      private final Output<Integer> controlStandardsId;

    public Output<Integer> controlStandardsId() {
        return this.controlStandardsId;
    }

    /**
     * The control version number.
     * 
     */
    @Import(name="controlVersionNumber", required=true)
      private final Output<String> controlVersionNumber;

    public Output<String> controlVersionNumber() {
        return this.controlVersionNumber;
    }

    /**
     * The value indicating whether to enable default group headers.
     * 
     */
    @Import(name="enableDefaultGroupHeaders", required=true)
      private final Output<Boolean> enableDefaultGroupHeaders;

    public Output<Boolean> enableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }

    /**
     * The functional group id.
     * 
     */
    @Import(name="functionalGroupId")
      private final @Nullable Output<String> functionalGroupId;

    public Output<String> functionalGroupId() {
        return this.functionalGroupId == null ? Codegen.empty() : this.functionalGroupId;
    }

    /**
     * The group control number lower bound.
     * 
     */
    @Import(name="groupControlNumberLowerBound", required=true)
      private final Output<Integer> groupControlNumberLowerBound;

    public Output<Integer> groupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }

    /**
     * The group control number upper bound.
     * 
     */
    @Import(name="groupControlNumberUpperBound", required=true)
      private final Output<Integer> groupControlNumberUpperBound;

    public Output<Integer> groupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }

    /**
     * The group header agency code.
     * 
     */
    @Import(name="groupHeaderAgencyCode", required=true)
      private final Output<String> groupHeaderAgencyCode;

    public Output<String> groupHeaderAgencyCode() {
        return this.groupHeaderAgencyCode;
    }

    /**
     * The group header date format.
     * 
     */
    @Import(name="groupHeaderDateFormat", required=true)
      private final Output<Either<String,X12DateFormat>> groupHeaderDateFormat;

    public Output<Either<String,X12DateFormat>> groupHeaderDateFormat() {
        return this.groupHeaderDateFormat;
    }

    /**
     * The group header time format.
     * 
     */
    @Import(name="groupHeaderTimeFormat", required=true)
      private final Output<Either<String,X12TimeFormat>> groupHeaderTimeFormat;

    public Output<Either<String,X12TimeFormat>> groupHeaderTimeFormat() {
        return this.groupHeaderTimeFormat;
    }

    /**
     * The group header version.
     * 
     */
    @Import(name="groupHeaderVersion", required=true)
      private final Output<String> groupHeaderVersion;

    public Output<String> groupHeaderVersion() {
        return this.groupHeaderVersion;
    }

    /**
     * The interchange  control number lower bound.
     * 
     */
    @Import(name="interchangeControlNumberLowerBound", required=true)
      private final Output<Integer> interchangeControlNumberLowerBound;

    public Output<Integer> interchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }

    /**
     * The interchange  control number upper bound.
     * 
     */
    @Import(name="interchangeControlNumberUpperBound", required=true)
      private final Output<Integer> interchangeControlNumberUpperBound;

    public Output<Integer> interchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }

    /**
     * The value indicating whether to overwrite existing transaction set control number.
     * 
     */
    @Import(name="overwriteExistingTransactionSetControlNumber", required=true)
      private final Output<Boolean> overwriteExistingTransactionSetControlNumber;

    public Output<Boolean> overwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }

    /**
     * The receiver application id.
     * 
     */
    @Import(name="receiverApplicationId", required=true)
      private final Output<String> receiverApplicationId;

    public Output<String> receiverApplicationId() {
        return this.receiverApplicationId;
    }

    /**
     * The value indicating whether to rollover group control number.
     * 
     */
    @Import(name="rolloverGroupControlNumber", required=true)
      private final Output<Boolean> rolloverGroupControlNumber;

    public Output<Boolean> rolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }

    /**
     * The value indicating whether to rollover interchange control number.
     * 
     */
    @Import(name="rolloverInterchangeControlNumber", required=true)
      private final Output<Boolean> rolloverInterchangeControlNumber;

    public Output<Boolean> rolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }

    /**
     * The value indicating whether to rollover transaction set control number.
     * 
     */
    @Import(name="rolloverTransactionSetControlNumber", required=true)
      private final Output<Boolean> rolloverTransactionSetControlNumber;

    public Output<Boolean> rolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }

    /**
     * The sender application id.
     * 
     */
    @Import(name="senderApplicationId", required=true)
      private final Output<String> senderApplicationId;

    public Output<String> senderApplicationId() {
        return this.senderApplicationId;
    }

    /**
     * The transaction set control number lower bound.
     * 
     */
    @Import(name="transactionSetControlNumberLowerBound", required=true)
      private final Output<Integer> transactionSetControlNumberLowerBound;

    public Output<Integer> transactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }

    /**
     * The transaction set control number prefix.
     * 
     */
    @Import(name="transactionSetControlNumberPrefix")
      private final @Nullable Output<String> transactionSetControlNumberPrefix;

    public Output<String> transactionSetControlNumberPrefix() {
        return this.transactionSetControlNumberPrefix == null ? Codegen.empty() : this.transactionSetControlNumberPrefix;
    }

    /**
     * The transaction set control number suffix.
     * 
     */
    @Import(name="transactionSetControlNumberSuffix")
      private final @Nullable Output<String> transactionSetControlNumberSuffix;

    public Output<String> transactionSetControlNumberSuffix() {
        return this.transactionSetControlNumberSuffix == null ? Codegen.empty() : this.transactionSetControlNumberSuffix;
    }

    /**
     * The transaction set control number upper bound.
     * 
     */
    @Import(name="transactionSetControlNumberUpperBound", required=true)
      private final Output<Integer> transactionSetControlNumberUpperBound;

    public Output<Integer> transactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }

    /**
     * The usage indicator.
     * 
     */
    @Import(name="usageIndicator", required=true)
      private final Output<Either<String,UsageIndicator>> usageIndicator;

    public Output<Either<String,UsageIndicator>> usageIndicator() {
        return this.usageIndicator;
    }

    /**
     * The value indicating whether to use control standards id as repetition character.
     * 
     */
    @Import(name="useControlStandardsIdAsRepetitionCharacter", required=true)
      private final Output<Boolean> useControlStandardsIdAsRepetitionCharacter;

    public Output<Boolean> useControlStandardsIdAsRepetitionCharacter() {
        return this.useControlStandardsIdAsRepetitionCharacter;
    }

    public X12EnvelopeSettingsArgs(
        Output<Integer> controlStandardsId,
        Output<String> controlVersionNumber,
        Output<Boolean> enableDefaultGroupHeaders,
        @Nullable Output<String> functionalGroupId,
        Output<Integer> groupControlNumberLowerBound,
        Output<Integer> groupControlNumberUpperBound,
        Output<String> groupHeaderAgencyCode,
        Output<Either<String,X12DateFormat>> groupHeaderDateFormat,
        Output<Either<String,X12TimeFormat>> groupHeaderTimeFormat,
        Output<String> groupHeaderVersion,
        Output<Integer> interchangeControlNumberLowerBound,
        Output<Integer> interchangeControlNumberUpperBound,
        Output<Boolean> overwriteExistingTransactionSetControlNumber,
        Output<String> receiverApplicationId,
        Output<Boolean> rolloverGroupControlNumber,
        Output<Boolean> rolloverInterchangeControlNumber,
        Output<Boolean> rolloverTransactionSetControlNumber,
        Output<String> senderApplicationId,
        Output<Integer> transactionSetControlNumberLowerBound,
        @Nullable Output<String> transactionSetControlNumberPrefix,
        @Nullable Output<String> transactionSetControlNumberSuffix,
        Output<Integer> transactionSetControlNumberUpperBound,
        Output<Either<String,UsageIndicator>> usageIndicator,
        Output<Boolean> useControlStandardsIdAsRepetitionCharacter) {
        this.controlStandardsId = Objects.requireNonNull(controlStandardsId, "expected parameter 'controlStandardsId' to be non-null");
        this.controlVersionNumber = Objects.requireNonNull(controlVersionNumber, "expected parameter 'controlVersionNumber' to be non-null");
        this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders, "expected parameter 'enableDefaultGroupHeaders' to be non-null");
        this.functionalGroupId = functionalGroupId;
        this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound, "expected parameter 'groupControlNumberLowerBound' to be non-null");
        this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound, "expected parameter 'groupControlNumberUpperBound' to be non-null");
        this.groupHeaderAgencyCode = Objects.requireNonNull(groupHeaderAgencyCode, "expected parameter 'groupHeaderAgencyCode' to be non-null");
        this.groupHeaderDateFormat = Objects.requireNonNull(groupHeaderDateFormat, "expected parameter 'groupHeaderDateFormat' to be non-null");
        this.groupHeaderTimeFormat = Objects.requireNonNull(groupHeaderTimeFormat, "expected parameter 'groupHeaderTimeFormat' to be non-null");
        this.groupHeaderVersion = Objects.requireNonNull(groupHeaderVersion, "expected parameter 'groupHeaderVersion' to be non-null");
        this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound, "expected parameter 'interchangeControlNumberLowerBound' to be non-null");
        this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound, "expected parameter 'interchangeControlNumberUpperBound' to be non-null");
        this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber, "expected parameter 'overwriteExistingTransactionSetControlNumber' to be non-null");
        this.receiverApplicationId = Objects.requireNonNull(receiverApplicationId, "expected parameter 'receiverApplicationId' to be non-null");
        this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber, "expected parameter 'rolloverGroupControlNumber' to be non-null");
        this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber, "expected parameter 'rolloverInterchangeControlNumber' to be non-null");
        this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber, "expected parameter 'rolloverTransactionSetControlNumber' to be non-null");
        this.senderApplicationId = Objects.requireNonNull(senderApplicationId, "expected parameter 'senderApplicationId' to be non-null");
        this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound, "expected parameter 'transactionSetControlNumberLowerBound' to be non-null");
        this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
        this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
        this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound, "expected parameter 'transactionSetControlNumberUpperBound' to be non-null");
        this.usageIndicator = Objects.requireNonNull(usageIndicator, "expected parameter 'usageIndicator' to be non-null");
        this.useControlStandardsIdAsRepetitionCharacter = Objects.requireNonNull(useControlStandardsIdAsRepetitionCharacter, "expected parameter 'useControlStandardsIdAsRepetitionCharacter' to be non-null");
    }

    private X12EnvelopeSettingsArgs() {
        this.controlStandardsId = Codegen.empty();
        this.controlVersionNumber = Codegen.empty();
        this.enableDefaultGroupHeaders = Codegen.empty();
        this.functionalGroupId = Codegen.empty();
        this.groupControlNumberLowerBound = Codegen.empty();
        this.groupControlNumberUpperBound = Codegen.empty();
        this.groupHeaderAgencyCode = Codegen.empty();
        this.groupHeaderDateFormat = Codegen.empty();
        this.groupHeaderTimeFormat = Codegen.empty();
        this.groupHeaderVersion = Codegen.empty();
        this.interchangeControlNumberLowerBound = Codegen.empty();
        this.interchangeControlNumberUpperBound = Codegen.empty();
        this.overwriteExistingTransactionSetControlNumber = Codegen.empty();
        this.receiverApplicationId = Codegen.empty();
        this.rolloverGroupControlNumber = Codegen.empty();
        this.rolloverInterchangeControlNumber = Codegen.empty();
        this.rolloverTransactionSetControlNumber = Codegen.empty();
        this.senderApplicationId = Codegen.empty();
        this.transactionSetControlNumberLowerBound = Codegen.empty();
        this.transactionSetControlNumberPrefix = Codegen.empty();
        this.transactionSetControlNumberSuffix = Codegen.empty();
        this.transactionSetControlNumberUpperBound = Codegen.empty();
        this.usageIndicator = Codegen.empty();
        this.useControlStandardsIdAsRepetitionCharacter = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12EnvelopeSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> controlStandardsId;
        private Output<String> controlVersionNumber;
        private Output<Boolean> enableDefaultGroupHeaders;
        private @Nullable Output<String> functionalGroupId;
        private Output<Integer> groupControlNumberLowerBound;
        private Output<Integer> groupControlNumberUpperBound;
        private Output<String> groupHeaderAgencyCode;
        private Output<Either<String,X12DateFormat>> groupHeaderDateFormat;
        private Output<Either<String,X12TimeFormat>> groupHeaderTimeFormat;
        private Output<String> groupHeaderVersion;
        private Output<Integer> interchangeControlNumberLowerBound;
        private Output<Integer> interchangeControlNumberUpperBound;
        private Output<Boolean> overwriteExistingTransactionSetControlNumber;
        private Output<String> receiverApplicationId;
        private Output<Boolean> rolloverGroupControlNumber;
        private Output<Boolean> rolloverInterchangeControlNumber;
        private Output<Boolean> rolloverTransactionSetControlNumber;
        private Output<String> senderApplicationId;
        private Output<Integer> transactionSetControlNumberLowerBound;
        private @Nullable Output<String> transactionSetControlNumberPrefix;
        private @Nullable Output<String> transactionSetControlNumberSuffix;
        private Output<Integer> transactionSetControlNumberUpperBound;
        private Output<Either<String,UsageIndicator>> usageIndicator;
        private Output<Boolean> useControlStandardsIdAsRepetitionCharacter;

        public Builder() {
    	      // Empty
        }

        public Builder(X12EnvelopeSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controlStandardsId = defaults.controlStandardsId;
    	      this.controlVersionNumber = defaults.controlVersionNumber;
    	      this.enableDefaultGroupHeaders = defaults.enableDefaultGroupHeaders;
    	      this.functionalGroupId = defaults.functionalGroupId;
    	      this.groupControlNumberLowerBound = defaults.groupControlNumberLowerBound;
    	      this.groupControlNumberUpperBound = defaults.groupControlNumberUpperBound;
    	      this.groupHeaderAgencyCode = defaults.groupHeaderAgencyCode;
    	      this.groupHeaderDateFormat = defaults.groupHeaderDateFormat;
    	      this.groupHeaderTimeFormat = defaults.groupHeaderTimeFormat;
    	      this.groupHeaderVersion = defaults.groupHeaderVersion;
    	      this.interchangeControlNumberLowerBound = defaults.interchangeControlNumberLowerBound;
    	      this.interchangeControlNumberUpperBound = defaults.interchangeControlNumberUpperBound;
    	      this.overwriteExistingTransactionSetControlNumber = defaults.overwriteExistingTransactionSetControlNumber;
    	      this.receiverApplicationId = defaults.receiverApplicationId;
    	      this.rolloverGroupControlNumber = defaults.rolloverGroupControlNumber;
    	      this.rolloverInterchangeControlNumber = defaults.rolloverInterchangeControlNumber;
    	      this.rolloverTransactionSetControlNumber = defaults.rolloverTransactionSetControlNumber;
    	      this.senderApplicationId = defaults.senderApplicationId;
    	      this.transactionSetControlNumberLowerBound = defaults.transactionSetControlNumberLowerBound;
    	      this.transactionSetControlNumberPrefix = defaults.transactionSetControlNumberPrefix;
    	      this.transactionSetControlNumberSuffix = defaults.transactionSetControlNumberSuffix;
    	      this.transactionSetControlNumberUpperBound = defaults.transactionSetControlNumberUpperBound;
    	      this.usageIndicator = defaults.usageIndicator;
    	      this.useControlStandardsIdAsRepetitionCharacter = defaults.useControlStandardsIdAsRepetitionCharacter;
        }

        public Builder controlStandardsId(Output<Integer> controlStandardsId) {
            this.controlStandardsId = Objects.requireNonNull(controlStandardsId);
            return this;
        }
        public Builder controlStandardsId(Integer controlStandardsId) {
            this.controlStandardsId = Output.of(Objects.requireNonNull(controlStandardsId));
            return this;
        }
        public Builder controlVersionNumber(Output<String> controlVersionNumber) {
            this.controlVersionNumber = Objects.requireNonNull(controlVersionNumber);
            return this;
        }
        public Builder controlVersionNumber(String controlVersionNumber) {
            this.controlVersionNumber = Output.of(Objects.requireNonNull(controlVersionNumber));
            return this;
        }
        public Builder enableDefaultGroupHeaders(Output<Boolean> enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
            return this;
        }
        public Builder enableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Output.of(Objects.requireNonNull(enableDefaultGroupHeaders));
            return this;
        }
        public Builder functionalGroupId(@Nullable Output<String> functionalGroupId) {
            this.functionalGroupId = functionalGroupId;
            return this;
        }
        public Builder functionalGroupId(@Nullable String functionalGroupId) {
            this.functionalGroupId = Codegen.ofNullable(functionalGroupId);
            return this;
        }
        public Builder groupControlNumberLowerBound(Output<Integer> groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
            return this;
        }
        public Builder groupControlNumberLowerBound(Integer groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Output.of(Objects.requireNonNull(groupControlNumberLowerBound));
            return this;
        }
        public Builder groupControlNumberUpperBound(Output<Integer> groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
            return this;
        }
        public Builder groupControlNumberUpperBound(Integer groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Output.of(Objects.requireNonNull(groupControlNumberUpperBound));
            return this;
        }
        public Builder groupHeaderAgencyCode(Output<String> groupHeaderAgencyCode) {
            this.groupHeaderAgencyCode = Objects.requireNonNull(groupHeaderAgencyCode);
            return this;
        }
        public Builder groupHeaderAgencyCode(String groupHeaderAgencyCode) {
            this.groupHeaderAgencyCode = Output.of(Objects.requireNonNull(groupHeaderAgencyCode));
            return this;
        }
        public Builder groupHeaderDateFormat(Output<Either<String,X12DateFormat>> groupHeaderDateFormat) {
            this.groupHeaderDateFormat = Objects.requireNonNull(groupHeaderDateFormat);
            return this;
        }
        public Builder groupHeaderDateFormat(Either<String,X12DateFormat> groupHeaderDateFormat) {
            this.groupHeaderDateFormat = Output.of(Objects.requireNonNull(groupHeaderDateFormat));
            return this;
        }
        public Builder groupHeaderTimeFormat(Output<Either<String,X12TimeFormat>> groupHeaderTimeFormat) {
            this.groupHeaderTimeFormat = Objects.requireNonNull(groupHeaderTimeFormat);
            return this;
        }
        public Builder groupHeaderTimeFormat(Either<String,X12TimeFormat> groupHeaderTimeFormat) {
            this.groupHeaderTimeFormat = Output.of(Objects.requireNonNull(groupHeaderTimeFormat));
            return this;
        }
        public Builder groupHeaderVersion(Output<String> groupHeaderVersion) {
            this.groupHeaderVersion = Objects.requireNonNull(groupHeaderVersion);
            return this;
        }
        public Builder groupHeaderVersion(String groupHeaderVersion) {
            this.groupHeaderVersion = Output.of(Objects.requireNonNull(groupHeaderVersion));
            return this;
        }
        public Builder interchangeControlNumberLowerBound(Output<Integer> interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
            return this;
        }
        public Builder interchangeControlNumberLowerBound(Integer interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Output.of(Objects.requireNonNull(interchangeControlNumberLowerBound));
            return this;
        }
        public Builder interchangeControlNumberUpperBound(Output<Integer> interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
            return this;
        }
        public Builder interchangeControlNumberUpperBound(Integer interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Output.of(Objects.requireNonNull(interchangeControlNumberUpperBound));
            return this;
        }
        public Builder overwriteExistingTransactionSetControlNumber(Output<Boolean> overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
            return this;
        }
        public Builder overwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Output.of(Objects.requireNonNull(overwriteExistingTransactionSetControlNumber));
            return this;
        }
        public Builder receiverApplicationId(Output<String> receiverApplicationId) {
            this.receiverApplicationId = Objects.requireNonNull(receiverApplicationId);
            return this;
        }
        public Builder receiverApplicationId(String receiverApplicationId) {
            this.receiverApplicationId = Output.of(Objects.requireNonNull(receiverApplicationId));
            return this;
        }
        public Builder rolloverGroupControlNumber(Output<Boolean> rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
            return this;
        }
        public Builder rolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Output.of(Objects.requireNonNull(rolloverGroupControlNumber));
            return this;
        }
        public Builder rolloverInterchangeControlNumber(Output<Boolean> rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
            return this;
        }
        public Builder rolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Output.of(Objects.requireNonNull(rolloverInterchangeControlNumber));
            return this;
        }
        public Builder rolloverTransactionSetControlNumber(Output<Boolean> rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
            return this;
        }
        public Builder rolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Output.of(Objects.requireNonNull(rolloverTransactionSetControlNumber));
            return this;
        }
        public Builder senderApplicationId(Output<String> senderApplicationId) {
            this.senderApplicationId = Objects.requireNonNull(senderApplicationId);
            return this;
        }
        public Builder senderApplicationId(String senderApplicationId) {
            this.senderApplicationId = Output.of(Objects.requireNonNull(senderApplicationId));
            return this;
        }
        public Builder transactionSetControlNumberLowerBound(Output<Integer> transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
            return this;
        }
        public Builder transactionSetControlNumberLowerBound(Integer transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Output.of(Objects.requireNonNull(transactionSetControlNumberLowerBound));
            return this;
        }
        public Builder transactionSetControlNumberPrefix(@Nullable Output<String> transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            return this;
        }
        public Builder transactionSetControlNumberPrefix(@Nullable String transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = Codegen.ofNullable(transactionSetControlNumberPrefix);
            return this;
        }
        public Builder transactionSetControlNumberSuffix(@Nullable Output<String> transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            return this;
        }
        public Builder transactionSetControlNumberSuffix(@Nullable String transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = Codegen.ofNullable(transactionSetControlNumberSuffix);
            return this;
        }
        public Builder transactionSetControlNumberUpperBound(Output<Integer> transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
            return this;
        }
        public Builder transactionSetControlNumberUpperBound(Integer transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Output.of(Objects.requireNonNull(transactionSetControlNumberUpperBound));
            return this;
        }
        public Builder usageIndicator(Output<Either<String,UsageIndicator>> usageIndicator) {
            this.usageIndicator = Objects.requireNonNull(usageIndicator);
            return this;
        }
        public Builder usageIndicator(Either<String,UsageIndicator> usageIndicator) {
            this.usageIndicator = Output.of(Objects.requireNonNull(usageIndicator));
            return this;
        }
        public Builder useControlStandardsIdAsRepetitionCharacter(Output<Boolean> useControlStandardsIdAsRepetitionCharacter) {
            this.useControlStandardsIdAsRepetitionCharacter = Objects.requireNonNull(useControlStandardsIdAsRepetitionCharacter);
            return this;
        }
        public Builder useControlStandardsIdAsRepetitionCharacter(Boolean useControlStandardsIdAsRepetitionCharacter) {
            this.useControlStandardsIdAsRepetitionCharacter = Output.of(Objects.requireNonNull(useControlStandardsIdAsRepetitionCharacter));
            return this;
        }        public X12EnvelopeSettingsArgs build() {
            return new X12EnvelopeSettingsArgs(controlStandardsId, controlVersionNumber, enableDefaultGroupHeaders, functionalGroupId, groupControlNumberLowerBound, groupControlNumberUpperBound, groupHeaderAgencyCode, groupHeaderDateFormat, groupHeaderTimeFormat, groupHeaderVersion, interchangeControlNumberLowerBound, interchangeControlNumberUpperBound, overwriteExistingTransactionSetControlNumber, receiverApplicationId, rolloverGroupControlNumber, rolloverInterchangeControlNumber, rolloverTransactionSetControlNumber, senderApplicationId, transactionSetControlNumberLowerBound, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberUpperBound, usageIndicator, useControlStandardsIdAsRepetitionCharacter);
        }
    }
}
