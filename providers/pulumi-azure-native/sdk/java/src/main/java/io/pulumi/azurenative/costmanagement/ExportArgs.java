// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement;

import io.pulumi.azurenative.costmanagement.enums.FormatType;
import io.pulumi.azurenative.costmanagement.inputs.ExportDefinitionArgs;
import io.pulumi.azurenative.costmanagement.inputs.ExportDeliveryInfoArgs;
import io.pulumi.azurenative.costmanagement.inputs.ExportScheduleArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExportArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExportArgs Empty = new ExportArgs();

    /**
     * Has the definition for the export.
     * 
     */
    @InputImport(name="definition", required=true)
    private final Input<ExportDefinitionArgs> definition;

    public Input<ExportDefinitionArgs> getDefinition() {
        return this.definition;
    }

    /**
     * Has delivery information for the export.
     * 
     */
    @InputImport(name="deliveryInfo", required=true)
    private final Input<ExportDeliveryInfoArgs> deliveryInfo;

    public Input<ExportDeliveryInfoArgs> getDeliveryInfo() {
        return this.deliveryInfo;
    }

    /**
     * eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     * 
     */
    @InputImport(name="eTag")
    private final @Nullable Input<String> eTag;

    public Input<String> getETag() {
        return this.eTag == null ? Input.empty() : this.eTag;
    }

    /**
     * Export Name.
     * 
     */
    @InputImport(name="exportName")
    private final @Nullable Input<String> exportName;

    public Input<String> getExportName() {
        return this.exportName == null ? Input.empty() : this.exportName;
    }

    /**
     * The format of the export being delivered. Currently only 'Csv' is supported.
     * 
     */
    @InputImport(name="format")
    private final @Nullable Input<Either<String,FormatType>> format;

    public Input<Either<String,FormatType>> getFormat() {
        return this.format == null ? Input.empty() : this.format;
    }

    /**
     * Has schedule information for the export.
     * 
     */
    @InputImport(name="schedule")
    private final @Nullable Input<ExportScheduleArgs> schedule;

    public Input<ExportScheduleArgs> getSchedule() {
        return this.schedule == null ? Input.empty() : this.schedule;
    }

    /**
     * The scope associated with export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.
     * 
     */
    @InputImport(name="scope", required=true)
    private final Input<String> scope;

    public Input<String> getScope() {
        return this.scope;
    }

    public ExportArgs(
        Input<ExportDefinitionArgs> definition,
        Input<ExportDeliveryInfoArgs> deliveryInfo,
        @Nullable Input<String> eTag,
        @Nullable Input<String> exportName,
        @Nullable Input<Either<String,FormatType>> format,
        @Nullable Input<ExportScheduleArgs> schedule,
        Input<String> scope) {
        this.definition = Objects.requireNonNull(definition, "expected parameter 'definition' to be non-null");
        this.deliveryInfo = Objects.requireNonNull(deliveryInfo, "expected parameter 'deliveryInfo' to be non-null");
        this.eTag = eTag;
        this.exportName = exportName;
        this.format = format;
        this.schedule = schedule;
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
    }

    private ExportArgs() {
        this.definition = Input.empty();
        this.deliveryInfo = Input.empty();
        this.eTag = Input.empty();
        this.exportName = Input.empty();
        this.format = Input.empty();
        this.schedule = Input.empty();
        this.scope = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<ExportDefinitionArgs> definition;
        private Input<ExportDeliveryInfoArgs> deliveryInfo;
        private @Nullable Input<String> eTag;
        private @Nullable Input<String> exportName;
        private @Nullable Input<Either<String,FormatType>> format;
        private @Nullable Input<ExportScheduleArgs> schedule;
        private Input<String> scope;

        public Builder() {
    	      // Empty
        }

        public Builder(ExportArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.definition = defaults.definition;
    	      this.deliveryInfo = defaults.deliveryInfo;
    	      this.eTag = defaults.eTag;
    	      this.exportName = defaults.exportName;
    	      this.format = defaults.format;
    	      this.schedule = defaults.schedule;
    	      this.scope = defaults.scope;
        }

        public Builder setDefinition(Input<ExportDefinitionArgs> definition) {
            this.definition = Objects.requireNonNull(definition);
            return this;
        }

        public Builder setDefinition(ExportDefinitionArgs definition) {
            this.definition = Input.of(Objects.requireNonNull(definition));
            return this;
        }

        public Builder setDeliveryInfo(Input<ExportDeliveryInfoArgs> deliveryInfo) {
            this.deliveryInfo = Objects.requireNonNull(deliveryInfo);
            return this;
        }

        public Builder setDeliveryInfo(ExportDeliveryInfoArgs deliveryInfo) {
            this.deliveryInfo = Input.of(Objects.requireNonNull(deliveryInfo));
            return this;
        }

        public Builder setETag(@Nullable Input<String> eTag) {
            this.eTag = eTag;
            return this;
        }

        public Builder setETag(@Nullable String eTag) {
            this.eTag = Input.ofNullable(eTag);
            return this;
        }

        public Builder setExportName(@Nullable Input<String> exportName) {
            this.exportName = exportName;
            return this;
        }

        public Builder setExportName(@Nullable String exportName) {
            this.exportName = Input.ofNullable(exportName);
            return this;
        }

        public Builder setFormat(@Nullable Input<Either<String,FormatType>> format) {
            this.format = format;
            return this;
        }

        public Builder setFormat(@Nullable Either<String,FormatType> format) {
            this.format = Input.ofNullable(format);
            return this;
        }

        public Builder setSchedule(@Nullable Input<ExportScheduleArgs> schedule) {
            this.schedule = schedule;
            return this;
        }

        public Builder setSchedule(@Nullable ExportScheduleArgs schedule) {
            this.schedule = Input.ofNullable(schedule);
            return this;
        }

        public Builder setScope(Input<String> scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }

        public Builder setScope(String scope) {
            this.scope = Input.of(Objects.requireNonNull(scope));
            return this;
        }

        public ExportArgs build() {
            return new ExportArgs(definition, deliveryInfo, eTag, exportName, format, schedule, scope);
        }
    }
}
