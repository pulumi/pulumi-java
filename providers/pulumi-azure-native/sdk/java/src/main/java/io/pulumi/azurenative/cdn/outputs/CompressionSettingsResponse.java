// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class CompressionSettingsResponse {
    private final @Nullable List<String> contentTypesToCompress;
    private final @Nullable Boolean isCompressionEnabled;

    @OutputCustomType.Constructor({"contentTypesToCompress","isCompressionEnabled"})
    private CompressionSettingsResponse(
        @Nullable List<String> contentTypesToCompress,
        @Nullable Boolean isCompressionEnabled) {
        this.contentTypesToCompress = contentTypesToCompress;
        this.isCompressionEnabled = isCompressionEnabled;
    }

    public List<String> getContentTypesToCompress() {
        return this.contentTypesToCompress == null ? List.of() : this.contentTypesToCompress;
    }
    public Optional<Boolean> getIsCompressionEnabled() {
        return Optional.ofNullable(this.isCompressionEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CompressionSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> contentTypesToCompress;
        private @Nullable Boolean isCompressionEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(CompressionSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentTypesToCompress = defaults.contentTypesToCompress;
    	      this.isCompressionEnabled = defaults.isCompressionEnabled;
        }

        public Builder setContentTypesToCompress(@Nullable List<String> contentTypesToCompress) {
            this.contentTypesToCompress = contentTypesToCompress;
            return this;
        }

        public Builder setIsCompressionEnabled(@Nullable Boolean isCompressionEnabled) {
            this.isCompressionEnabled = isCompressionEnabled;
            return this;
        }

        public CompressionSettingsResponse build() {
            return new CompressionSettingsResponse(contentTypesToCompress, isCompressionEnabled);
        }
    }
}
