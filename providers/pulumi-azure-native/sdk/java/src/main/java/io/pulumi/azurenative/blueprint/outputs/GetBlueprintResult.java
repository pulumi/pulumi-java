// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.blueprint.outputs;

import io.pulumi.azurenative.blueprint.outputs.BlueprintStatusResponse;
import io.pulumi.azurenative.blueprint.outputs.ParameterDefinitionResponse;
import io.pulumi.azurenative.blueprint.outputs.ResourceGroupDefinitionResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetBlueprintResult {
    /**
     * Multi-line explain this resource.
     * 
     */
    private final @Nullable String description;
    /**
     * One-liner string explain this resource.
     * 
     */
    private final @Nullable String displayName;
    /**
     * String Id used to locate any resource on Azure.
     * 
     */
    private final String id;
    /**
     * Layout view of the blueprint definition for UI reference.
     * 
     */
    private final Object layout;
    /**
     * Name of this resource.
     * 
     */
    private final String name;
    /**
     * Parameters required by this blueprint definition.
     * 
     */
    private final @Nullable Map<String,ParameterDefinitionResponse> parameters;
    /**
     * Resource group placeholders defined by this blueprint definition.
     * 
     */
    private final @Nullable Map<String,ResourceGroupDefinitionResponse> resourceGroups;
    /**
     * Status of the blueprint. This field is readonly.
     * 
     */
    private final BlueprintStatusResponse status;
    /**
     * The scope where this blueprint definition can be assigned.
     * 
     */
    private final String targetScope;
    /**
     * Type of this resource.
     * 
     */
    private final String type;
    /**
     * Published versions of this blueprint definition.
     * 
     */
    private final @Nullable Object versions;

    @OutputCustomType.Constructor({"description","displayName","id","layout","name","parameters","resourceGroups","status","targetScope","type","versions"})
    private GetBlueprintResult(
        @Nullable String description,
        @Nullable String displayName,
        String id,
        Object layout,
        String name,
        @Nullable Map<String,ParameterDefinitionResponse> parameters,
        @Nullable Map<String,ResourceGroupDefinitionResponse> resourceGroups,
        BlueprintStatusResponse status,
        String targetScope,
        String type,
        @Nullable Object versions) {
        this.description = description;
        this.displayName = displayName;
        this.id = Objects.requireNonNull(id);
        this.layout = Objects.requireNonNull(layout);
        this.name = Objects.requireNonNull(name);
        this.parameters = parameters;
        this.resourceGroups = resourceGroups;
        this.status = Objects.requireNonNull(status);
        this.targetScope = Objects.requireNonNull(targetScope);
        this.type = Objects.requireNonNull(type);
        this.versions = versions;
    }

    /**
     * Multi-line explain this resource.
     * 
     */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * One-liner string explain this resource.
     * 
     */
    public Optional<String> getDisplayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * String Id used to locate any resource on Azure.
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * Layout view of the blueprint definition for UI reference.
     * 
     */
    public Object getLayout() {
        return this.layout;
    }
    /**
     * Name of this resource.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * Parameters required by this blueprint definition.
     * 
     */
    public Map<String,ParameterDefinitionResponse> getParameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * Resource group placeholders defined by this blueprint definition.
     * 
     */
    public Map<String,ResourceGroupDefinitionResponse> getResourceGroups() {
        return this.resourceGroups == null ? Map.of() : this.resourceGroups;
    }
    /**
     * Status of the blueprint. This field is readonly.
     * 
     */
    public BlueprintStatusResponse getStatus() {
        return this.status;
    }
    /**
     * The scope where this blueprint definition can be assigned.
     * 
     */
    public String getTargetScope() {
        return this.targetScope;
    }
    /**
     * Type of this resource.
     * 
     */
    public String getType() {
        return this.type;
    }
    /**
     * Published versions of this blueprint definition.
     * 
     */
    public Optional<Object> getVersions() {
        return Optional.ofNullable(this.versions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBlueprintResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private @Nullable String displayName;
        private String id;
        private Object layout;
        private String name;
        private @Nullable Map<String,ParameterDefinitionResponse> parameters;
        private @Nullable Map<String,ResourceGroupDefinitionResponse> resourceGroups;
        private BlueprintStatusResponse status;
        private String targetScope;
        private String type;
        private @Nullable Object versions;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBlueprintResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.layout = defaults.layout;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.resourceGroups = defaults.resourceGroups;
    	      this.status = defaults.status;
    	      this.targetScope = defaults.targetScope;
    	      this.type = defaults.type;
    	      this.versions = defaults.versions;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLayout(Object layout) {
            this.layout = Objects.requireNonNull(layout);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setParameters(@Nullable Map<String,ParameterDefinitionResponse> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setResourceGroups(@Nullable Map<String,ResourceGroupDefinitionResponse> resourceGroups) {
            this.resourceGroups = resourceGroups;
            return this;
        }

        public Builder setStatus(BlueprintStatusResponse status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setTargetScope(String targetScope) {
            this.targetScope = Objects.requireNonNull(targetScope);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setVersions(@Nullable Object versions) {
            this.versions = versions;
            return this;
        }

        public GetBlueprintResult build() {
            return new GetBlueprintResult(description, displayName, id, layout, name, parameters, resourceGroups, status, targetScope, type, versions);
        }
    }
}
