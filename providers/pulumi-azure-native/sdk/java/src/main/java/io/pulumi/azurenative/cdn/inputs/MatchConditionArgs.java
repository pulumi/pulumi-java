// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.inputs;

import io.pulumi.azurenative.cdn.enums.MatchVariable;
import io.pulumi.azurenative.cdn.enums.Operator;
import io.pulumi.azurenative.cdn.enums.TransformType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MatchConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final MatchConditionArgs Empty = new MatchConditionArgs();

    @InputImport(name="matchValue", required=true)
    private final Input<List<String>> matchValue;

    public Input<List<String>> getMatchValue() {
        return this.matchValue;
    }

    @InputImport(name="matchVariable", required=true)
    private final Input<Either<String,MatchVariable>> matchVariable;

    public Input<Either<String,MatchVariable>> getMatchVariable() {
        return this.matchVariable;
    }

    @InputImport(name="negateCondition")
    private final @Nullable Input<Boolean> negateCondition;

    public Input<Boolean> getNegateCondition() {
        return this.negateCondition == null ? Input.empty() : this.negateCondition;
    }

    @InputImport(name="operator", required=true)
    private final Input<Either<String,Operator>> operator;

    public Input<Either<String,Operator>> getOperator() {
        return this.operator;
    }

    @InputImport(name="selector")
    private final @Nullable Input<String> selector;

    public Input<String> getSelector() {
        return this.selector == null ? Input.empty() : this.selector;
    }

    @InputImport(name="transforms")
    private final @Nullable Input<List<Either<String,TransformType>>> transforms;

    public Input<List<Either<String,TransformType>>> getTransforms() {
        return this.transforms == null ? Input.empty() : this.transforms;
    }

    public MatchConditionArgs(
        Input<List<String>> matchValue,
        Input<Either<String,MatchVariable>> matchVariable,
        @Nullable Input<Boolean> negateCondition,
        Input<Either<String,Operator>> operator,
        @Nullable Input<String> selector,
        @Nullable Input<List<Either<String,TransformType>>> transforms) {
        this.matchValue = Objects.requireNonNull(matchValue, "expected parameter 'matchValue' to be non-null");
        this.matchVariable = Objects.requireNonNull(matchVariable, "expected parameter 'matchVariable' to be non-null");
        this.negateCondition = negateCondition;
        this.operator = Objects.requireNonNull(operator, "expected parameter 'operator' to be non-null");
        this.selector = selector;
        this.transforms = transforms;
    }

    private MatchConditionArgs() {
        this.matchValue = Input.empty();
        this.matchVariable = Input.empty();
        this.negateCondition = Input.empty();
        this.operator = Input.empty();
        this.selector = Input.empty();
        this.transforms = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MatchConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> matchValue;
        private Input<Either<String,MatchVariable>> matchVariable;
        private @Nullable Input<Boolean> negateCondition;
        private Input<Either<String,Operator>> operator;
        private @Nullable Input<String> selector;
        private @Nullable Input<List<Either<String,TransformType>>> transforms;

        public Builder() {
    	      // Empty
        }

        public Builder(MatchConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchValue = defaults.matchValue;
    	      this.matchVariable = defaults.matchVariable;
    	      this.negateCondition = defaults.negateCondition;
    	      this.operator = defaults.operator;
    	      this.selector = defaults.selector;
    	      this.transforms = defaults.transforms;
        }

        public Builder setMatchValue(Input<List<String>> matchValue) {
            this.matchValue = Objects.requireNonNull(matchValue);
            return this;
        }

        public Builder setMatchValue(List<String> matchValue) {
            this.matchValue = Input.of(Objects.requireNonNull(matchValue));
            return this;
        }

        public Builder setMatchVariable(Input<Either<String,MatchVariable>> matchVariable) {
            this.matchVariable = Objects.requireNonNull(matchVariable);
            return this;
        }

        public Builder setMatchVariable(Either<String,MatchVariable> matchVariable) {
            this.matchVariable = Input.of(Objects.requireNonNull(matchVariable));
            return this;
        }

        public Builder setNegateCondition(@Nullable Input<Boolean> negateCondition) {
            this.negateCondition = negateCondition;
            return this;
        }

        public Builder setNegateCondition(@Nullable Boolean negateCondition) {
            this.negateCondition = Input.ofNullable(negateCondition);
            return this;
        }

        public Builder setOperator(Input<Either<String,Operator>> operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }

        public Builder setOperator(Either<String,Operator> operator) {
            this.operator = Input.of(Objects.requireNonNull(operator));
            return this;
        }

        public Builder setSelector(@Nullable Input<String> selector) {
            this.selector = selector;
            return this;
        }

        public Builder setSelector(@Nullable String selector) {
            this.selector = Input.ofNullable(selector);
            return this;
        }

        public Builder setTransforms(@Nullable Input<List<Either<String,TransformType>>> transforms) {
            this.transforms = transforms;
            return this;
        }

        public Builder setTransforms(@Nullable List<Either<String,TransformType>> transforms) {
            this.transforms = Input.ofNullable(transforms);
            return this;
        }

        public MatchConditionArgs build() {
            return new MatchConditionArgs(matchValue, matchVariable, negateCondition, operator, selector, transforms);
        }
    }
}
