// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Parameters that define the configuration of traffic analytics.
 * 
 */
public final class TrafficAnalyticsConfigurationPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final TrafficAnalyticsConfigurationPropertiesArgs Empty = new TrafficAnalyticsConfigurationPropertiesArgs();

    /**
     * Flag to enable/disable traffic analytics.
     * 
     */
    @InputImport(name="enabled")
      private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * The interval in minutes which would decide how frequently TA service should do flow analytics.
     * 
     */
    @InputImport(name="trafficAnalyticsInterval")
      private final @Nullable Input<Integer> trafficAnalyticsInterval;

    public Input<Integer> getTrafficAnalyticsInterval() {
        return this.trafficAnalyticsInterval == null ? Input.empty() : this.trafficAnalyticsInterval;
    }

    /**
     * The resource guid of the attached workspace.
     * 
     */
    @InputImport(name="workspaceId")
      private final @Nullable Input<String> workspaceId;

    public Input<String> getWorkspaceId() {
        return this.workspaceId == null ? Input.empty() : this.workspaceId;
    }

    /**
     * The location of the attached workspace.
     * 
     */
    @InputImport(name="workspaceRegion")
      private final @Nullable Input<String> workspaceRegion;

    public Input<String> getWorkspaceRegion() {
        return this.workspaceRegion == null ? Input.empty() : this.workspaceRegion;
    }

    /**
     * Resource Id of the attached workspace.
     * 
     */
    @InputImport(name="workspaceResourceId")
      private final @Nullable Input<String> workspaceResourceId;

    public Input<String> getWorkspaceResourceId() {
        return this.workspaceResourceId == null ? Input.empty() : this.workspaceResourceId;
    }

    public TrafficAnalyticsConfigurationPropertiesArgs(
        @Nullable Input<Boolean> enabled,
        @Nullable Input<Integer> trafficAnalyticsInterval,
        @Nullable Input<String> workspaceId,
        @Nullable Input<String> workspaceRegion,
        @Nullable Input<String> workspaceResourceId) {
        this.enabled = enabled;
        this.trafficAnalyticsInterval = trafficAnalyticsInterval;
        this.workspaceId = workspaceId;
        this.workspaceRegion = workspaceRegion;
        this.workspaceResourceId = workspaceResourceId;
    }

    private TrafficAnalyticsConfigurationPropertiesArgs() {
        this.enabled = Input.empty();
        this.trafficAnalyticsInterval = Input.empty();
        this.workspaceId = Input.empty();
        this.workspaceRegion = Input.empty();
        this.workspaceResourceId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrafficAnalyticsConfigurationPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> enabled;
        private @Nullable Input<Integer> trafficAnalyticsInterval;
        private @Nullable Input<String> workspaceId;
        private @Nullable Input<String> workspaceRegion;
        private @Nullable Input<String> workspaceResourceId;

        public Builder() {
    	      // Empty
        }

        public Builder(TrafficAnalyticsConfigurationPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.trafficAnalyticsInterval = defaults.trafficAnalyticsInterval;
    	      this.workspaceId = defaults.workspaceId;
    	      this.workspaceRegion = defaults.workspaceRegion;
    	      this.workspaceResourceId = defaults.workspaceResourceId;
        }

        public Builder setEnabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder setEnabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder setTrafficAnalyticsInterval(@Nullable Input<Integer> trafficAnalyticsInterval) {
            this.trafficAnalyticsInterval = trafficAnalyticsInterval;
            return this;
        }

        public Builder setTrafficAnalyticsInterval(@Nullable Integer trafficAnalyticsInterval) {
            this.trafficAnalyticsInterval = Input.ofNullable(trafficAnalyticsInterval);
            return this;
        }

        public Builder setWorkspaceId(@Nullable Input<String> workspaceId) {
            this.workspaceId = workspaceId;
            return this;
        }

        public Builder setWorkspaceId(@Nullable String workspaceId) {
            this.workspaceId = Input.ofNullable(workspaceId);
            return this;
        }

        public Builder setWorkspaceRegion(@Nullable Input<String> workspaceRegion) {
            this.workspaceRegion = workspaceRegion;
            return this;
        }

        public Builder setWorkspaceRegion(@Nullable String workspaceRegion) {
            this.workspaceRegion = Input.ofNullable(workspaceRegion);
            return this;
        }

        public Builder setWorkspaceResourceId(@Nullable Input<String> workspaceResourceId) {
            this.workspaceResourceId = workspaceResourceId;
            return this;
        }

        public Builder setWorkspaceResourceId(@Nullable String workspaceResourceId) {
            this.workspaceResourceId = Input.ofNullable(workspaceResourceId);
            return this;
        }
        public TrafficAnalyticsConfigurationPropertiesArgs build() {
            return new TrafficAnalyticsConfigurationPropertiesArgs(enabled, trafficAnalyticsInterval, workspaceId, workspaceRegion, workspaceResourceId);
        }
    }
}
