// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.operationalinsights;

import io.pulumi.azurenative.operationalinsights.inputs.TagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SavedSearchArgs extends io.pulumi.resources.ResourceArgs {

    public static final SavedSearchArgs Empty = new SavedSearchArgs();

    /**
     * The category of the saved search. This helps the user to find a saved search faster.
     * 
     */
    @Import(name="category", required=true)
      private final Output<String> category;

    public Output<String> getCategory() {
        return this.category;
    }

    /**
     * Saved search display name.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * The function alias if query serves as a function.
     * 
     */
    @Import(name="functionAlias")
      private final @Nullable Output<String> functionAlias;

    public Output<String> getFunctionAlias() {
        return this.functionAlias == null ? Output.empty() : this.functionAlias;
    }

    /**
     * The optional function parameters if query serves as a function. Value should be in the following format: 'param-name1:type1 = default_value1, param-name2:type2 = default_value2'. For more examples and proper syntax please refer to https://docs.microsoft.com/en-us/azure/kusto/query/functions/user-defined-functions.
     * 
     */
    @Import(name="functionParameters")
      private final @Nullable Output<String> functionParameters;

    public Output<String> getFunctionParameters() {
        return this.functionParameters == null ? Output.empty() : this.functionParameters;
    }

    /**
     * The query expression for the saved search.
     * 
     */
    @Import(name="query", required=true)
      private final Output<String> query;

    public Output<String> getQuery() {
        return this.query;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The id of the saved search.
     * 
     */
    @Import(name="savedSearchId")
      private final @Nullable Output<String> savedSearchId;

    public Output<String> getSavedSearchId() {
        return this.savedSearchId == null ? Output.empty() : this.savedSearchId;
    }

    /**
     * The tags attached to the saved search.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<TagArgs>> tags;

    public Output<List<TagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The version number of the query language. The current version is 2 and is the default.
     * 
     */
    @Import(name="version")
      private final @Nullable Output<Double> version;

    public Output<Double> getVersion() {
        return this.version == null ? Output.empty() : this.version;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public SavedSearchArgs(
        Output<String> category,
        Output<String> displayName,
        @Nullable Output<String> functionAlias,
        @Nullable Output<String> functionParameters,
        Output<String> query,
        Output<String> resourceGroupName,
        @Nullable Output<String> savedSearchId,
        @Nullable Output<List<TagArgs>> tags,
        @Nullable Output<Double> version,
        Output<String> workspaceName) {
        this.category = Objects.requireNonNull(category, "expected parameter 'category' to be non-null");
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.functionAlias = functionAlias;
        this.functionParameters = functionParameters;
        this.query = Objects.requireNonNull(query, "expected parameter 'query' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.savedSearchId = savedSearchId;
        this.tags = tags;
        this.version = version;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private SavedSearchArgs() {
        this.category = Output.empty();
        this.displayName = Output.empty();
        this.functionAlias = Output.empty();
        this.functionParameters = Output.empty();
        this.query = Output.empty();
        this.resourceGroupName = Output.empty();
        this.savedSearchId = Output.empty();
        this.tags = Output.empty();
        this.version = Output.empty();
        this.workspaceName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SavedSearchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> category;
        private Output<String> displayName;
        private @Nullable Output<String> functionAlias;
        private @Nullable Output<String> functionParameters;
        private Output<String> query;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> savedSearchId;
        private @Nullable Output<List<TagArgs>> tags;
        private @Nullable Output<Double> version;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(SavedSearchArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.displayName = defaults.displayName;
    	      this.functionAlias = defaults.functionAlias;
    	      this.functionParameters = defaults.functionParameters;
    	      this.query = defaults.query;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.savedSearchId = defaults.savedSearchId;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder category(Output<String> category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }

        public Builder category(String category) {
            this.category = Output.of(Objects.requireNonNull(category));
            return this;
        }

        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder functionAlias(@Nullable Output<String> functionAlias) {
            this.functionAlias = functionAlias;
            return this;
        }

        public Builder functionAlias(@Nullable String functionAlias) {
            this.functionAlias = Output.ofNullable(functionAlias);
            return this;
        }

        public Builder functionParameters(@Nullable Output<String> functionParameters) {
            this.functionParameters = functionParameters;
            return this;
        }

        public Builder functionParameters(@Nullable String functionParameters) {
            this.functionParameters = Output.ofNullable(functionParameters);
            return this;
        }

        public Builder query(Output<String> query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }

        public Builder query(String query) {
            this.query = Output.of(Objects.requireNonNull(query));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder savedSearchId(@Nullable Output<String> savedSearchId) {
            this.savedSearchId = savedSearchId;
            return this;
        }

        public Builder savedSearchId(@Nullable String savedSearchId) {
            this.savedSearchId = Output.ofNullable(savedSearchId);
            return this;
        }

        public Builder tags(@Nullable Output<List<TagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<TagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder version(@Nullable Output<Double> version) {
            this.version = version;
            return this;
        }

        public Builder version(@Nullable Double version) {
            this.version = Output.ofNullable(version);
            return this;
        }

        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public SavedSearchArgs build() {
            return new SavedSearchArgs(category, displayName, functionAlias, functionParameters, query, resourceGroupName, savedSearchId, tags, version, workspaceName);
        }
    }
}
