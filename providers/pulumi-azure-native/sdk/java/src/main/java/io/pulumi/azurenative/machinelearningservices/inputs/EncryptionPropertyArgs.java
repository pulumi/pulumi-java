// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.azurenative.machinelearningservices.enums.EncryptionStatus;
import io.pulumi.azurenative.machinelearningservices.inputs.IdentityForCmkArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.KeyVaultPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EncryptionPropertyArgs extends io.pulumi.resources.ResourceArgs {

    public static final EncryptionPropertyArgs Empty = new EncryptionPropertyArgs();

    /**
     * The identity that will be used to access the key vault for encryption at rest.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<IdentityForCmkArgs> identity;

    public Output<IdentityForCmkArgs> getIdentity() {
        return this.identity == null ? Output.empty() : this.identity;
    }

    /**
     * Customer Key vault properties.
     * 
     */
    @Import(name="keyVaultProperties", required=true)
      private final Output<KeyVaultPropertiesArgs> keyVaultProperties;

    public Output<KeyVaultPropertiesArgs> getKeyVaultProperties() {
        return this.keyVaultProperties;
    }

    /**
     * Indicates whether or not the encryption is enabled for the workspace.
     * 
     */
    @Import(name="status", required=true)
      private final Output<Either<String,EncryptionStatus>> status;

    public Output<Either<String,EncryptionStatus>> getStatus() {
        return this.status;
    }

    public EncryptionPropertyArgs(
        @Nullable Output<IdentityForCmkArgs> identity,
        Output<KeyVaultPropertiesArgs> keyVaultProperties,
        Output<Either<String,EncryptionStatus>> status) {
        this.identity = identity;
        this.keyVaultProperties = Objects.requireNonNull(keyVaultProperties, "expected parameter 'keyVaultProperties' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
    }

    private EncryptionPropertyArgs() {
        this.identity = Output.empty();
        this.keyVaultProperties = Output.empty();
        this.status = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EncryptionPropertyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<IdentityForCmkArgs> identity;
        private Output<KeyVaultPropertiesArgs> keyVaultProperties;
        private Output<Either<String,EncryptionStatus>> status;

        public Builder() {
    	      // Empty
        }

        public Builder(EncryptionPropertyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.identity = defaults.identity;
    	      this.keyVaultProperties = defaults.keyVaultProperties;
    	      this.status = defaults.status;
        }

        public Builder identity(@Nullable Output<IdentityForCmkArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder identity(@Nullable IdentityForCmkArgs identity) {
            this.identity = Output.ofNullable(identity);
            return this;
        }

        public Builder keyVaultProperties(Output<KeyVaultPropertiesArgs> keyVaultProperties) {
            this.keyVaultProperties = Objects.requireNonNull(keyVaultProperties);
            return this;
        }

        public Builder keyVaultProperties(KeyVaultPropertiesArgs keyVaultProperties) {
            this.keyVaultProperties = Output.of(Objects.requireNonNull(keyVaultProperties));
            return this;
        }

        public Builder status(Output<Either<String,EncryptionStatus>> status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder status(Either<String,EncryptionStatus> status) {
            this.status = Output.of(Objects.requireNonNull(status));
            return this;
        }
        public EncryptionPropertyArgs build() {
            return new EncryptionPropertyArgs(identity, keyVaultProperties, status);
        }
    }
}
