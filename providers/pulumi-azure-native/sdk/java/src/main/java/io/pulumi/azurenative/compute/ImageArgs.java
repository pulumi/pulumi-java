// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.compute.enums.HyperVGenerationTypes;
import io.pulumi.azurenative.compute.inputs.ExtendedLocationArgs;
import io.pulumi.azurenative.compute.inputs.ImageStorageProfileArgs;
import io.pulumi.azurenative.compute.inputs.SubResourceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ImageArgs extends io.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    /**
     * The extended location of the Image.
     * 
     */
    @InputImport(name="extendedLocation")
      private final @Nullable Input<ExtendedLocationArgs> extendedLocation;

    public Input<ExtendedLocationArgs> getExtendedLocation() {
        return this.extendedLocation == null ? Input.empty() : this.extendedLocation;
    }

    /**
     * Specifies the HyperVGenerationType of the VirtualMachine created from the image. From API Version 2019-03-01 if the image source is a blob, then we need the user to specify the value, if the source is managed resource like disk or snapshot, we may require the user to specify the property if we cannot deduce it from the source managed resource.
     * 
     */
    @InputImport(name="hyperVGeneration")
      private final @Nullable Input<Either<String,HyperVGenerationTypes>> hyperVGeneration;

    public Input<Either<String,HyperVGenerationTypes>> getHyperVGeneration() {
        return this.hyperVGeneration == null ? Input.empty() : this.hyperVGeneration;
    }

    /**
     * The name of the image.
     * 
     */
    @InputImport(name="imageName")
      private final @Nullable Input<String> imageName;

    public Input<String> getImageName() {
        return this.imageName == null ? Input.empty() : this.imageName;
    }

    /**
     * Resource location
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The source virtual machine from which Image is created.
     * 
     */
    @InputImport(name="sourceVirtualMachine")
      private final @Nullable Input<SubResourceArgs> sourceVirtualMachine;

    public Input<SubResourceArgs> getSourceVirtualMachine() {
        return this.sourceVirtualMachine == null ? Input.empty() : this.sourceVirtualMachine;
    }

    /**
     * Specifies the storage settings for the virtual machine disks.
     * 
     */
    @InputImport(name="storageProfile")
      private final @Nullable Input<ImageStorageProfileArgs> storageProfile;

    public Input<ImageStorageProfileArgs> getStorageProfile() {
        return this.storageProfile == null ? Input.empty() : this.storageProfile;
    }

    /**
     * Resource tags
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ImageArgs(
        @Nullable Input<ExtendedLocationArgs> extendedLocation,
        @Nullable Input<Either<String,HyperVGenerationTypes>> hyperVGeneration,
        @Nullable Input<String> imageName,
        @Nullable Input<String> location,
        Input<String> resourceGroupName,
        @Nullable Input<SubResourceArgs> sourceVirtualMachine,
        @Nullable Input<ImageStorageProfileArgs> storageProfile,
        @Nullable Input<Map<String,String>> tags) {
        this.extendedLocation = extendedLocation;
        this.hyperVGeneration = hyperVGeneration;
        this.imageName = imageName;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sourceVirtualMachine = sourceVirtualMachine;
        this.storageProfile = storageProfile;
        this.tags = tags;
    }

    private ImageArgs() {
        this.extendedLocation = Input.empty();
        this.hyperVGeneration = Input.empty();
        this.imageName = Input.empty();
        this.location = Input.empty();
        this.resourceGroupName = Input.empty();
        this.sourceVirtualMachine = Input.empty();
        this.storageProfile = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ExtendedLocationArgs> extendedLocation;
        private @Nullable Input<Either<String,HyperVGenerationTypes>> hyperVGeneration;
        private @Nullable Input<String> imageName;
        private @Nullable Input<String> location;
        private Input<String> resourceGroupName;
        private @Nullable Input<SubResourceArgs> sourceVirtualMachine;
        private @Nullable Input<ImageStorageProfileArgs> storageProfile;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.imageName = defaults.imageName;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sourceVirtualMachine = defaults.sourceVirtualMachine;
    	      this.storageProfile = defaults.storageProfile;
    	      this.tags = defaults.tags;
        }

        public Builder setExtendedLocation(@Nullable Input<ExtendedLocationArgs> extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }

        public Builder setExtendedLocation(@Nullable ExtendedLocationArgs extendedLocation) {
            this.extendedLocation = Input.ofNullable(extendedLocation);
            return this;
        }

        public Builder setHyperVGeneration(@Nullable Input<Either<String,HyperVGenerationTypes>> hyperVGeneration) {
            this.hyperVGeneration = hyperVGeneration;
            return this;
        }

        public Builder setHyperVGeneration(@Nullable Either<String,HyperVGenerationTypes> hyperVGeneration) {
            this.hyperVGeneration = Input.ofNullable(hyperVGeneration);
            return this;
        }

        public Builder setImageName(@Nullable Input<String> imageName) {
            this.imageName = imageName;
            return this;
        }

        public Builder setImageName(@Nullable String imageName) {
            this.imageName = Input.ofNullable(imageName);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSourceVirtualMachine(@Nullable Input<SubResourceArgs> sourceVirtualMachine) {
            this.sourceVirtualMachine = sourceVirtualMachine;
            return this;
        }

        public Builder setSourceVirtualMachine(@Nullable SubResourceArgs sourceVirtualMachine) {
            this.sourceVirtualMachine = Input.ofNullable(sourceVirtualMachine);
            return this;
        }

        public Builder setStorageProfile(@Nullable Input<ImageStorageProfileArgs> storageProfile) {
            this.storageProfile = storageProfile;
            return this;
        }

        public Builder setStorageProfile(@Nullable ImageStorageProfileArgs storageProfile) {
            this.storageProfile = Input.ofNullable(storageProfile);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public ImageArgs build() {
            return new ImageArgs(extendedLocation, hyperVGeneration, imageName, location, resourceGroupName, sourceVirtualMachine, storageProfile, tags);
        }
    }
}
