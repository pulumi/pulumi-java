// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.enums.Rotation;
import io.pulumi.azurenative.media.inputs.AudioOverlayArgs;
import io.pulumi.azurenative.media.inputs.DeinterlaceArgs;
import io.pulumi.azurenative.media.inputs.RectangleArgs;
import io.pulumi.azurenative.media.inputs.VideoOverlayArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding.
 * 
 */
public final class FiltersArgs extends io.pulumi.resources.ResourceArgs {

    public static final FiltersArgs Empty = new FiltersArgs();

    /**
     * The parameters for the rectangular window with which to crop the input video.
     * 
     */
    @Import(name="crop")
      private final @Nullable Output<RectangleArgs> crop;

    public Output<RectangleArgs> crop() {
        return this.crop == null ? Codegen.empty() : this.crop;
    }

    /**
     * The de-interlacing settings.
     * 
     */
    @Import(name="deinterlace")
      private final @Nullable Output<DeinterlaceArgs> deinterlace;

    public Output<DeinterlaceArgs> deinterlace() {
        return this.deinterlace == null ? Codegen.empty() : this.deinterlace;
    }

    /**
     * The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
     * 
     */
    @Import(name="overlays")
      private final @Nullable Output<List<Either<AudioOverlayArgs,VideoOverlayArgs>>> overlays;

    public Output<List<Either<AudioOverlayArgs,VideoOverlayArgs>>> overlays() {
        return this.overlays == null ? Codegen.empty() : this.overlays;
    }

    /**
     * The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
     * 
     */
    @Import(name="rotation")
      private final @Nullable Output<Either<String,Rotation>> rotation;

    public Output<Either<String,Rotation>> rotation() {
        return this.rotation == null ? Codegen.empty() : this.rotation;
    }

    public FiltersArgs(
        @Nullable Output<RectangleArgs> crop,
        @Nullable Output<DeinterlaceArgs> deinterlace,
        @Nullable Output<List<Either<AudioOverlayArgs,VideoOverlayArgs>>> overlays,
        @Nullable Output<Either<String,Rotation>> rotation) {
        this.crop = crop;
        this.deinterlace = deinterlace;
        this.overlays = overlays;
        this.rotation = rotation;
    }

    private FiltersArgs() {
        this.crop = Codegen.empty();
        this.deinterlace = Codegen.empty();
        this.overlays = Codegen.empty();
        this.rotation = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FiltersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<RectangleArgs> crop;
        private @Nullable Output<DeinterlaceArgs> deinterlace;
        private @Nullable Output<List<Either<AudioOverlayArgs,VideoOverlayArgs>>> overlays;
        private @Nullable Output<Either<String,Rotation>> rotation;

        public Builder() {
    	      // Empty
        }

        public Builder(FiltersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crop = defaults.crop;
    	      this.deinterlace = defaults.deinterlace;
    	      this.overlays = defaults.overlays;
    	      this.rotation = defaults.rotation;
        }

        public Builder crop(@Nullable Output<RectangleArgs> crop) {
            this.crop = crop;
            return this;
        }
        public Builder crop(@Nullable RectangleArgs crop) {
            this.crop = Codegen.ofNullable(crop);
            return this;
        }
        public Builder deinterlace(@Nullable Output<DeinterlaceArgs> deinterlace) {
            this.deinterlace = deinterlace;
            return this;
        }
        public Builder deinterlace(@Nullable DeinterlaceArgs deinterlace) {
            this.deinterlace = Codegen.ofNullable(deinterlace);
            return this;
        }
        public Builder overlays(@Nullable Output<List<Either<AudioOverlayArgs,VideoOverlayArgs>>> overlays) {
            this.overlays = overlays;
            return this;
        }
        public Builder overlays(@Nullable List<Either<AudioOverlayArgs,VideoOverlayArgs>> overlays) {
            this.overlays = Codegen.ofNullable(overlays);
            return this;
        }
        public Builder overlays(Either<AudioOverlayArgs,VideoOverlayArgs>... overlays) {
            return overlays(List.of(overlays));
        }
        public Builder rotation(@Nullable Output<Either<String,Rotation>> rotation) {
            this.rotation = rotation;
            return this;
        }
        public Builder rotation(@Nullable Either<String,Rotation> rotation) {
            this.rotation = Codegen.ofNullable(rotation);
            return this;
        }        public FiltersArgs build() {
            return new FiltersArgs(crop, deinterlace, overlays, rotation);
        }
    }
}
