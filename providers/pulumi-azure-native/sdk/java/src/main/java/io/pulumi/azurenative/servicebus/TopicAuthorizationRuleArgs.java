// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicebus;

import io.pulumi.azurenative.servicebus.enums.AccessRights;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TopicAuthorizationRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final TopicAuthorizationRuleArgs Empty = new TopicAuthorizationRuleArgs();

    /**
     * The authorization rule name.
     * 
     */
    @InputImport(name="authorizationRuleName")
      private final @Nullable Output<String> authorizationRuleName;

    public Output<String> getAuthorizationRuleName() {
        return this.authorizationRuleName == null ? Output.empty() : this.authorizationRuleName;
    }

    /**
     * The namespace name
     * 
     */
    @InputImport(name="namespaceName", required=true)
      private final Output<String> namespaceName;

    public Output<String> getNamespaceName() {
        return this.namespaceName;
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The rights associated with the rule.
     * 
     */
    @InputImport(name="rights", required=true)
      private final Output<List<AccessRights>> rights;

    public Output<List<AccessRights>> getRights() {
        return this.rights;
    }

    /**
     * The topic name.
     * 
     */
    @InputImport(name="topicName", required=true)
      private final Output<String> topicName;

    public Output<String> getTopicName() {
        return this.topicName;
    }

    public TopicAuthorizationRuleArgs(
        @Nullable Output<String> authorizationRuleName,
        Output<String> namespaceName,
        Output<String> resourceGroupName,
        Output<List<AccessRights>> rights,
        Output<String> topicName) {
        this.authorizationRuleName = authorizationRuleName;
        this.namespaceName = Objects.requireNonNull(namespaceName, "expected parameter 'namespaceName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.rights = Objects.requireNonNull(rights, "expected parameter 'rights' to be non-null");
        this.topicName = Objects.requireNonNull(topicName, "expected parameter 'topicName' to be non-null");
    }

    private TopicAuthorizationRuleArgs() {
        this.authorizationRuleName = Output.empty();
        this.namespaceName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.rights = Output.empty();
        this.topicName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TopicAuthorizationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> authorizationRuleName;
        private Output<String> namespaceName;
        private Output<String> resourceGroupName;
        private Output<List<AccessRights>> rights;
        private Output<String> topicName;

        public Builder() {
    	      // Empty
        }

        public Builder(TopicAuthorizationRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationRuleName = defaults.authorizationRuleName;
    	      this.namespaceName = defaults.namespaceName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.rights = defaults.rights;
    	      this.topicName = defaults.topicName;
        }

        public Builder authorizationRuleName(@Nullable Output<String> authorizationRuleName) {
            this.authorizationRuleName = authorizationRuleName;
            return this;
        }

        public Builder authorizationRuleName(@Nullable String authorizationRuleName) {
            this.authorizationRuleName = Output.ofNullable(authorizationRuleName);
            return this;
        }

        public Builder namespaceName(Output<String> namespaceName) {
            this.namespaceName = Objects.requireNonNull(namespaceName);
            return this;
        }

        public Builder namespaceName(String namespaceName) {
            this.namespaceName = Output.of(Objects.requireNonNull(namespaceName));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder rights(Output<List<AccessRights>> rights) {
            this.rights = Objects.requireNonNull(rights);
            return this;
        }

        public Builder rights(List<AccessRights> rights) {
            this.rights = Output.of(Objects.requireNonNull(rights));
            return this;
        }

        public Builder topicName(Output<String> topicName) {
            this.topicName = Objects.requireNonNull(topicName);
            return this;
        }

        public Builder topicName(String topicName) {
            this.topicName = Output.of(Objects.requireNonNull(topicName));
            return this;
        }
        public TopicAuthorizationRuleArgs build() {
            return new TopicAuthorizationRuleArgs(authorizationRuleName, namespaceName, resourceGroupName, rights, topicName);
        }
    }
}
