// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storagepool;

import io.pulumi.azurenative.storagepool.enums.DiskPoolTier;
import io.pulumi.azurenative.storagepool.inputs.DiskArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DiskPoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final DiskPoolArgs Empty = new DiskPoolArgs();

    /**
     * List of additional capabilities for a Disk pool.
     * 
     */
    @InputImport(name="additionalCapabilities")
    private final @Nullable Input<List<String>> additionalCapabilities;

    public Input<List<String>> getAdditionalCapabilities() {
        return this.additionalCapabilities == null ? Input.empty() : this.additionalCapabilities;
    }

    /**
     * Logical zone for Disk pool resource; example: ["1"].
     * 
     */
    @InputImport(name="availabilityZones", required=true)
    private final Input<List<String>> availabilityZones;

    public Input<List<String>> getAvailabilityZones() {
        return this.availabilityZones;
    }

    /**
     * The name of the Disk pool.
     * 
     */
    @InputImport(name="diskPoolName")
    private final @Nullable Input<String> diskPoolName;

    public Input<String> getDiskPoolName() {
        return this.diskPoolName == null ? Input.empty() : this.diskPoolName;
    }

    /**
     * List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
     * 
     */
    @InputImport(name="disks")
    private final @Nullable Input<List<DiskArgs>> disks;

    public Input<List<DiskArgs>> getDisks() {
        return this.disks == null ? Input.empty() : this.disks;
    }

    /**
     * The geo-location where the resource lives.
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Azure Resource ID of a Subnet for the Disk pool.
     * 
     */
    @InputImport(name="subnetId", required=true)
    private final Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Determines the SKU of VM deployed for Disk pool
     * 
     */
    @InputImport(name="tier", required=true)
    private final Input<Either<String,DiskPoolTier>> tier;

    public Input<Either<String,DiskPoolTier>> getTier() {
        return this.tier;
    }

    public DiskPoolArgs(
        @Nullable Input<List<String>> additionalCapabilities,
        Input<List<String>> availabilityZones,
        @Nullable Input<String> diskPoolName,
        @Nullable Input<List<DiskArgs>> disks,
        @Nullable Input<String> location,
        Input<String> resourceGroupName,
        Input<String> subnetId,
        @Nullable Input<Map<String,String>> tags,
        Input<Either<String,DiskPoolTier>> tier) {
        this.additionalCapabilities = additionalCapabilities;
        this.availabilityZones = Objects.requireNonNull(availabilityZones, "expected parameter 'availabilityZones' to be non-null");
        this.diskPoolName = diskPoolName;
        this.disks = disks;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
        this.tags = tags;
        this.tier = Objects.requireNonNull(tier, "expected parameter 'tier' to be non-null");
    }

    private DiskPoolArgs() {
        this.additionalCapabilities = Input.empty();
        this.availabilityZones = Input.empty();
        this.diskPoolName = Input.empty();
        this.disks = Input.empty();
        this.location = Input.empty();
        this.resourceGroupName = Input.empty();
        this.subnetId = Input.empty();
        this.tags = Input.empty();
        this.tier = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiskPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> additionalCapabilities;
        private Input<List<String>> availabilityZones;
        private @Nullable Input<String> diskPoolName;
        private @Nullable Input<List<DiskArgs>> disks;
        private @Nullable Input<String> location;
        private Input<String> resourceGroupName;
        private Input<String> subnetId;
        private @Nullable Input<Map<String,String>> tags;
        private Input<Either<String,DiskPoolTier>> tier;

        public Builder() {
    	      // Empty
        }

        public Builder(DiskPoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalCapabilities = defaults.additionalCapabilities;
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.diskPoolName = defaults.diskPoolName;
    	      this.disks = defaults.disks;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.tier = defaults.tier;
        }

        public Builder setAdditionalCapabilities(@Nullable Input<List<String>> additionalCapabilities) {
            this.additionalCapabilities = additionalCapabilities;
            return this;
        }

        public Builder setAdditionalCapabilities(@Nullable List<String> additionalCapabilities) {
            this.additionalCapabilities = Input.ofNullable(additionalCapabilities);
            return this;
        }

        public Builder setAvailabilityZones(Input<List<String>> availabilityZones) {
            this.availabilityZones = Objects.requireNonNull(availabilityZones);
            return this;
        }

        public Builder setAvailabilityZones(List<String> availabilityZones) {
            this.availabilityZones = Input.of(Objects.requireNonNull(availabilityZones));
            return this;
        }

        public Builder setDiskPoolName(@Nullable Input<String> diskPoolName) {
            this.diskPoolName = diskPoolName;
            return this;
        }

        public Builder setDiskPoolName(@Nullable String diskPoolName) {
            this.diskPoolName = Input.ofNullable(diskPoolName);
            return this;
        }

        public Builder setDisks(@Nullable Input<List<DiskArgs>> disks) {
            this.disks = disks;
            return this;
        }

        public Builder setDisks(@Nullable List<DiskArgs> disks) {
            this.disks = Input.ofNullable(disks);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSubnetId(Input<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }

        public Builder setSubnetId(String subnetId) {
            this.subnetId = Input.of(Objects.requireNonNull(subnetId));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTier(Input<Either<String,DiskPoolTier>> tier) {
            this.tier = Objects.requireNonNull(tier);
            return this;
        }

        public Builder setTier(Either<String,DiskPoolTier> tier) {
            this.tier = Input.of(Objects.requireNonNull(tier));
            return this;
        }

        public DiskPoolArgs build() {
            return new DiskPoolArgs(additionalCapabilities, availabilityZones, diskPoolName, disks, location, resourceGroupName, subnetId, tags, tier);
        }
    }
}
