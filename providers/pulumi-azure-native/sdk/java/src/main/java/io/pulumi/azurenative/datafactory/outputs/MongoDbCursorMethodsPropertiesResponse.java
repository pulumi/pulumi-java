// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MongoDbCursorMethodsPropertiesResponse {
    /**
     * Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
     * 
     */
    private final @Nullable Object limit;
    /**
     * Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object project;
    /**
     * Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
     * 
     */
    private final @Nullable Object skip;
    /**
     * Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object sort;

    @CustomType.Constructor
    private MongoDbCursorMethodsPropertiesResponse(
        @CustomType.Parameter("limit") @Nullable Object limit,
        @CustomType.Parameter("project") @Nullable Object project,
        @CustomType.Parameter("skip") @Nullable Object skip,
        @CustomType.Parameter("sort") @Nullable Object sort) {
        this.limit = limit;
        this.project = project;
        this.skip = skip;
        this.sort = sort;
    }

    /**
     * Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
     * 
    */
    public Optional<Object> getLimit() {
        return Optional.ofNullable(this.limit);
    }
    /**
     * Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> getProject() {
        return Optional.ofNullable(this.project);
    }
    /**
     * Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
     * 
    */
    public Optional<Object> getSkip() {
        return Optional.ofNullable(this.skip);
    }
    /**
     * Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> getSort() {
        return Optional.ofNullable(this.sort);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MongoDbCursorMethodsPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Object limit;
        private @Nullable Object project;
        private @Nullable Object skip;
        private @Nullable Object sort;

        public Builder() {
    	      // Empty
        }

        public Builder(MongoDbCursorMethodsPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.limit = defaults.limit;
    	      this.project = defaults.project;
    	      this.skip = defaults.skip;
    	      this.sort = defaults.sort;
        }

        public Builder limit(@Nullable Object limit) {
            this.limit = limit;
            return this;
        }
        public Builder project(@Nullable Object project) {
            this.project = project;
            return this;
        }
        public Builder skip(@Nullable Object skip) {
            this.skip = skip;
            return this;
        }
        public Builder sort(@Nullable Object sort) {
            this.sort = sort;
            return this;
        }        public MongoDbCursorMethodsPropertiesResponse build() {
            return new MongoDbCursorMethodsPropertiesResponse(limit, project, skip, sort);
        }
    }
}
