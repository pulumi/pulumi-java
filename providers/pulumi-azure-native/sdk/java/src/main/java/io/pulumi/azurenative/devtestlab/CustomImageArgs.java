// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab;

import io.pulumi.azurenative.devtestlab.inputs.CustomImagePropertiesCustomArgs;
import io.pulumi.azurenative.devtestlab.inputs.CustomImagePropertiesFromPlanArgs;
import io.pulumi.azurenative.devtestlab.inputs.CustomImagePropertiesFromVmArgs;
import io.pulumi.azurenative.devtestlab.inputs.DataDiskStorageTypeInfoArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CustomImageArgs extends io.pulumi.resources.ResourceArgs {

    public static final CustomImageArgs Empty = new CustomImageArgs();

    /**
     * The author of the custom image.
     * 
     */
    @InputImport(name="author")
      private final @Nullable Output<String> author;

    public Output<String> getAuthor() {
        return this.author == null ? Output.empty() : this.author;
    }

    /**
     * Storage information about the plan related to this custom image
     * 
     */
    @InputImport(name="customImagePlan")
      private final @Nullable Output<CustomImagePropertiesFromPlanArgs> customImagePlan;

    public Output<CustomImagePropertiesFromPlanArgs> getCustomImagePlan() {
        return this.customImagePlan == null ? Output.empty() : this.customImagePlan;
    }

    /**
     * Storage information about the data disks present in the custom image
     * 
     */
    @InputImport(name="dataDiskStorageInfo")
      private final @Nullable Output<List<DataDiskStorageTypeInfoArgs>> dataDiskStorageInfo;

    public Output<List<DataDiskStorageTypeInfoArgs>> getDataDiskStorageInfo() {
        return this.dataDiskStorageInfo == null ? Output.empty() : this.dataDiskStorageInfo;
    }

    /**
     * The description of the custom image.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
     * 
     */
    @InputImport(name="isPlanAuthorized")
      private final @Nullable Output<Boolean> isPlanAuthorized;

    public Output<Boolean> getIsPlanAuthorized() {
        return this.isPlanAuthorized == null ? Output.empty() : this.isPlanAuthorized;
    }

    /**
     * The name of the lab.
     * 
     */
    @InputImport(name="labName", required=true)
      private final Output<String> labName;

    public Output<String> getLabName() {
        return this.labName;
    }

    /**
     * The location of the resource.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The Managed Image Id backing the custom image.
     * 
     */
    @InputImport(name="managedImageId")
      private final @Nullable Output<String> managedImageId;

    public Output<String> getManagedImageId() {
        return this.managedImageId == null ? Output.empty() : this.managedImageId;
    }

    /**
     * The Managed Snapshot Id backing the custom image.
     * 
     */
    @InputImport(name="managedSnapshotId")
      private final @Nullable Output<String> managedSnapshotId;

    public Output<String> getManagedSnapshotId() {
        return this.managedSnapshotId == null ? Output.empty() : this.managedSnapshotId;
    }

    /**
     * The name of the custom image.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The tags of the resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The VHD from which the image is to be created.
     * 
     */
    @InputImport(name="vhd")
      private final @Nullable Output<CustomImagePropertiesCustomArgs> vhd;

    public Output<CustomImagePropertiesCustomArgs> getVhd() {
        return this.vhd == null ? Output.empty() : this.vhd;
    }

    /**
     * The virtual machine from which the image is to be created.
     * 
     */
    @InputImport(name="vm")
      private final @Nullable Output<CustomImagePropertiesFromVmArgs> vm;

    public Output<CustomImagePropertiesFromVmArgs> getVm() {
        return this.vm == null ? Output.empty() : this.vm;
    }

    public CustomImageArgs(
        @Nullable Output<String> author,
        @Nullable Output<CustomImagePropertiesFromPlanArgs> customImagePlan,
        @Nullable Output<List<DataDiskStorageTypeInfoArgs>> dataDiskStorageInfo,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> isPlanAuthorized,
        Output<String> labName,
        @Nullable Output<String> location,
        @Nullable Output<String> managedImageId,
        @Nullable Output<String> managedSnapshotId,
        @Nullable Output<String> name,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<CustomImagePropertiesCustomArgs> vhd,
        @Nullable Output<CustomImagePropertiesFromVmArgs> vm) {
        this.author = author;
        this.customImagePlan = customImagePlan;
        this.dataDiskStorageInfo = dataDiskStorageInfo;
        this.description = description;
        this.isPlanAuthorized = isPlanAuthorized;
        this.labName = Objects.requireNonNull(labName, "expected parameter 'labName' to be non-null");
        this.location = location;
        this.managedImageId = managedImageId;
        this.managedSnapshotId = managedSnapshotId;
        this.name = name;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.vhd = vhd;
        this.vm = vm;
    }

    private CustomImageArgs() {
        this.author = Output.empty();
        this.customImagePlan = Output.empty();
        this.dataDiskStorageInfo = Output.empty();
        this.description = Output.empty();
        this.isPlanAuthorized = Output.empty();
        this.labName = Output.empty();
        this.location = Output.empty();
        this.managedImageId = Output.empty();
        this.managedSnapshotId = Output.empty();
        this.name = Output.empty();
        this.resourceGroupName = Output.empty();
        this.tags = Output.empty();
        this.vhd = Output.empty();
        this.vm = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> author;
        private @Nullable Output<CustomImagePropertiesFromPlanArgs> customImagePlan;
        private @Nullable Output<List<DataDiskStorageTypeInfoArgs>> dataDiskStorageInfo;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> isPlanAuthorized;
        private Output<String> labName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> managedImageId;
        private @Nullable Output<String> managedSnapshotId;
        private @Nullable Output<String> name;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<CustomImagePropertiesCustomArgs> vhd;
        private @Nullable Output<CustomImagePropertiesFromVmArgs> vm;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.author = defaults.author;
    	      this.customImagePlan = defaults.customImagePlan;
    	      this.dataDiskStorageInfo = defaults.dataDiskStorageInfo;
    	      this.description = defaults.description;
    	      this.isPlanAuthorized = defaults.isPlanAuthorized;
    	      this.labName = defaults.labName;
    	      this.location = defaults.location;
    	      this.managedImageId = defaults.managedImageId;
    	      this.managedSnapshotId = defaults.managedSnapshotId;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.vhd = defaults.vhd;
    	      this.vm = defaults.vm;
        }

        public Builder author(@Nullable Output<String> author) {
            this.author = author;
            return this;
        }

        public Builder author(@Nullable String author) {
            this.author = Output.ofNullable(author);
            return this;
        }

        public Builder customImagePlan(@Nullable Output<CustomImagePropertiesFromPlanArgs> customImagePlan) {
            this.customImagePlan = customImagePlan;
            return this;
        }

        public Builder customImagePlan(@Nullable CustomImagePropertiesFromPlanArgs customImagePlan) {
            this.customImagePlan = Output.ofNullable(customImagePlan);
            return this;
        }

        public Builder dataDiskStorageInfo(@Nullable Output<List<DataDiskStorageTypeInfoArgs>> dataDiskStorageInfo) {
            this.dataDiskStorageInfo = dataDiskStorageInfo;
            return this;
        }

        public Builder dataDiskStorageInfo(@Nullable List<DataDiskStorageTypeInfoArgs> dataDiskStorageInfo) {
            this.dataDiskStorageInfo = Output.ofNullable(dataDiskStorageInfo);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder isPlanAuthorized(@Nullable Output<Boolean> isPlanAuthorized) {
            this.isPlanAuthorized = isPlanAuthorized;
            return this;
        }

        public Builder isPlanAuthorized(@Nullable Boolean isPlanAuthorized) {
            this.isPlanAuthorized = Output.ofNullable(isPlanAuthorized);
            return this;
        }

        public Builder labName(Output<String> labName) {
            this.labName = Objects.requireNonNull(labName);
            return this;
        }

        public Builder labName(String labName) {
            this.labName = Output.of(Objects.requireNonNull(labName));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder managedImageId(@Nullable Output<String> managedImageId) {
            this.managedImageId = managedImageId;
            return this;
        }

        public Builder managedImageId(@Nullable String managedImageId) {
            this.managedImageId = Output.ofNullable(managedImageId);
            return this;
        }

        public Builder managedSnapshotId(@Nullable Output<String> managedSnapshotId) {
            this.managedSnapshotId = managedSnapshotId;
            return this;
        }

        public Builder managedSnapshotId(@Nullable String managedSnapshotId) {
            this.managedSnapshotId = Output.ofNullable(managedSnapshotId);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder vhd(@Nullable Output<CustomImagePropertiesCustomArgs> vhd) {
            this.vhd = vhd;
            return this;
        }

        public Builder vhd(@Nullable CustomImagePropertiesCustomArgs vhd) {
            this.vhd = Output.ofNullable(vhd);
            return this;
        }

        public Builder vm(@Nullable Output<CustomImagePropertiesFromVmArgs> vm) {
            this.vm = vm;
            return this;
        }

        public Builder vm(@Nullable CustomImagePropertiesFromVmArgs vm) {
            this.vm = Output.ofNullable(vm);
            return this;
        }
        public CustomImageArgs build() {
            return new CustomImageArgs(author, customImagePlan, dataDiskStorageInfo, description, isPlanAuthorized, labName, location, managedImageId, managedSnapshotId, name, resourceGroupName, tags, vhd, vm);
        }
    }
}
