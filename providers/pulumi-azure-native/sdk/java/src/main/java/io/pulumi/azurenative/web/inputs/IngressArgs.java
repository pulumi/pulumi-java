// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.enums.IngressTransportMethod;
import io.pulumi.azurenative.web.inputs.TrafficWeightArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Container App Ingress configuration.
 * 
 */
public final class IngressArgs extends io.pulumi.resources.ResourceArgs {

    public static final IngressArgs Empty = new IngressArgs();

    /**
     * Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
     * 
     */
    @Import(name="allowInsecure")
      private final @Nullable Output<Boolean> allowInsecure;

    public Output<Boolean> allowInsecure() {
        return this.allowInsecure == null ? Codegen.empty() : this.allowInsecure;
    }

    /**
     * Bool indicating if app exposes an external http endpoint
     * 
     */
    @Import(name="external")
      private final @Nullable Output<Boolean> external;

    public Output<Boolean> external() {
        return this.external == null ? Codegen.empty() : this.external;
    }

    /**
     * Target Port in containers for traffic from ingress
     * 
     */
    @Import(name="targetPort")
      private final @Nullable Output<Integer> targetPort;

    public Output<Integer> targetPort() {
        return this.targetPort == null ? Codegen.empty() : this.targetPort;
    }

    @Import(name="traffic")
      private final @Nullable Output<List<TrafficWeightArgs>> traffic;

    public Output<List<TrafficWeightArgs>> traffic() {
        return this.traffic == null ? Codegen.empty() : this.traffic;
    }

    /**
     * Ingress transport protocol
     * 
     */
    @Import(name="transport")
      private final @Nullable Output<Either<String,IngressTransportMethod>> transport;

    public Output<Either<String,IngressTransportMethod>> transport() {
        return this.transport == null ? Codegen.empty() : this.transport;
    }

    public IngressArgs(
        @Nullable Output<Boolean> allowInsecure,
        @Nullable Output<Boolean> external,
        @Nullable Output<Integer> targetPort,
        @Nullable Output<List<TrafficWeightArgs>> traffic,
        @Nullable Output<Either<String,IngressTransportMethod>> transport) {
        this.allowInsecure = allowInsecure;
        this.external = external == null ? Codegen.ofNullable(false) : external;
        this.targetPort = targetPort;
        this.traffic = traffic;
        this.transport = transport;
    }

    private IngressArgs() {
        this.allowInsecure = Codegen.empty();
        this.external = Codegen.empty();
        this.targetPort = Codegen.empty();
        this.traffic = Codegen.empty();
        this.transport = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IngressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowInsecure;
        private @Nullable Output<Boolean> external;
        private @Nullable Output<Integer> targetPort;
        private @Nullable Output<List<TrafficWeightArgs>> traffic;
        private @Nullable Output<Either<String,IngressTransportMethod>> transport;

        public Builder() {
    	      // Empty
        }

        public Builder(IngressArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowInsecure = defaults.allowInsecure;
    	      this.external = defaults.external;
    	      this.targetPort = defaults.targetPort;
    	      this.traffic = defaults.traffic;
    	      this.transport = defaults.transport;
        }

        public Builder allowInsecure(@Nullable Output<Boolean> allowInsecure) {
            this.allowInsecure = allowInsecure;
            return this;
        }
        public Builder allowInsecure(@Nullable Boolean allowInsecure) {
            this.allowInsecure = Codegen.ofNullable(allowInsecure);
            return this;
        }
        public Builder external(@Nullable Output<Boolean> external) {
            this.external = external;
            return this;
        }
        public Builder external(@Nullable Boolean external) {
            this.external = Codegen.ofNullable(external);
            return this;
        }
        public Builder targetPort(@Nullable Output<Integer> targetPort) {
            this.targetPort = targetPort;
            return this;
        }
        public Builder targetPort(@Nullable Integer targetPort) {
            this.targetPort = Codegen.ofNullable(targetPort);
            return this;
        }
        public Builder traffic(@Nullable Output<List<TrafficWeightArgs>> traffic) {
            this.traffic = traffic;
            return this;
        }
        public Builder traffic(@Nullable List<TrafficWeightArgs> traffic) {
            this.traffic = Codegen.ofNullable(traffic);
            return this;
        }
        public Builder traffic(TrafficWeightArgs... traffic) {
            return traffic(List.of(traffic));
        }
        public Builder transport(@Nullable Output<Either<String,IngressTransportMethod>> transport) {
            this.transport = transport;
            return this;
        }
        public Builder transport(@Nullable Either<String,IngressTransportMethod> transport) {
            this.transport = Codegen.ofNullable(transport);
            return this;
        }        public IngressArgs build() {
            return new IngressArgs(allowInsecure, external, targetPort, traffic, transport);
        }
    }
}
