// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.enums.IngressTransportMethod;
import io.pulumi.azurenative.web.inputs.TrafficWeightArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Container App Ingress configuration.
 * 
 */
public final class IngressArgs extends io.pulumi.resources.ResourceArgs {

    public static final IngressArgs Empty = new IngressArgs();

    /**
     * Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
     * 
     */
    @InputImport(name="allowInsecure")
    private final @Nullable Input<Boolean> allowInsecure;

    public Input<Boolean> getAllowInsecure() {
        return this.allowInsecure == null ? Input.empty() : this.allowInsecure;
    }

    /**
     * Bool indicating if app exposes an external http endpoint
     * 
     */
    @InputImport(name="external")
    private final @Nullable Input<Boolean> external;

    public Input<Boolean> getExternal() {
        return this.external == null ? Input.empty() : this.external;
    }

    /**
     * Target Port in containers for traffic from ingress
     * 
     */
    @InputImport(name="targetPort")
    private final @Nullable Input<Integer> targetPort;

    public Input<Integer> getTargetPort() {
        return this.targetPort == null ? Input.empty() : this.targetPort;
    }

    @InputImport(name="traffic")
    private final @Nullable Input<List<TrafficWeightArgs>> traffic;

    public Input<List<TrafficWeightArgs>> getTraffic() {
        return this.traffic == null ? Input.empty() : this.traffic;
    }

    /**
     * Ingress transport protocol
     * 
     */
    @InputImport(name="transport")
    private final @Nullable Input<Either<String,IngressTransportMethod>> transport;

    public Input<Either<String,IngressTransportMethod>> getTransport() {
        return this.transport == null ? Input.empty() : this.transport;
    }

    public IngressArgs(
        @Nullable Input<Boolean> allowInsecure,
        @Nullable Input<Boolean> external,
        @Nullable Input<Integer> targetPort,
        @Nullable Input<List<TrafficWeightArgs>> traffic,
        @Nullable Input<Either<String,IngressTransportMethod>> transport) {
        this.allowInsecure = allowInsecure;
        this.external = external == null ? Input.ofNullable(false) : external;
        this.targetPort = targetPort;
        this.traffic = traffic;
        this.transport = transport;
    }

    private IngressArgs() {
        this.allowInsecure = Input.empty();
        this.external = Input.empty();
        this.targetPort = Input.empty();
        this.traffic = Input.empty();
        this.transport = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IngressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> allowInsecure;
        private @Nullable Input<Boolean> external;
        private @Nullable Input<Integer> targetPort;
        private @Nullable Input<List<TrafficWeightArgs>> traffic;
        private @Nullable Input<Either<String,IngressTransportMethod>> transport;

        public Builder() {
    	      // Empty
        }

        public Builder(IngressArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowInsecure = defaults.allowInsecure;
    	      this.external = defaults.external;
    	      this.targetPort = defaults.targetPort;
    	      this.traffic = defaults.traffic;
    	      this.transport = defaults.transport;
        }

        public Builder setAllowInsecure(@Nullable Input<Boolean> allowInsecure) {
            this.allowInsecure = allowInsecure;
            return this;
        }

        public Builder setAllowInsecure(@Nullable Boolean allowInsecure) {
            this.allowInsecure = Input.ofNullable(allowInsecure);
            return this;
        }

        public Builder setExternal(@Nullable Input<Boolean> external) {
            this.external = external;
            return this;
        }

        public Builder setExternal(@Nullable Boolean external) {
            this.external = Input.ofNullable(external);
            return this;
        }

        public Builder setTargetPort(@Nullable Input<Integer> targetPort) {
            this.targetPort = targetPort;
            return this;
        }

        public Builder setTargetPort(@Nullable Integer targetPort) {
            this.targetPort = Input.ofNullable(targetPort);
            return this;
        }

        public Builder setTraffic(@Nullable Input<List<TrafficWeightArgs>> traffic) {
            this.traffic = traffic;
            return this;
        }

        public Builder setTraffic(@Nullable List<TrafficWeightArgs> traffic) {
            this.traffic = Input.ofNullable(traffic);
            return this;
        }

        public Builder setTransport(@Nullable Input<Either<String,IngressTransportMethod>> transport) {
            this.transport = transport;
            return this;
        }

        public Builder setTransport(@Nullable Either<String,IngressTransportMethod> transport) {
            this.transport = Input.ofNullable(transport);
            return this;
        }

        public IngressArgs build() {
            return new IngressArgs(allowInsecure, external, targetPort, traffic, transport);
        }
    }
}
