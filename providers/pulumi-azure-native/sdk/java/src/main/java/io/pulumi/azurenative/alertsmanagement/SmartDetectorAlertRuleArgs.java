// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.alertsmanagement;

import io.pulumi.azurenative.alertsmanagement.enums.AlertRuleState;
import io.pulumi.azurenative.alertsmanagement.enums.Severity;
import io.pulumi.azurenative.alertsmanagement.inputs.ActionGroupsInformationArgs;
import io.pulumi.azurenative.alertsmanagement.inputs.DetectorArgs;
import io.pulumi.azurenative.alertsmanagement.inputs.ThrottlingInformationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SmartDetectorAlertRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final SmartDetectorAlertRuleArgs Empty = new SmartDetectorAlertRuleArgs();

    /**
     * The alert rule actions.
     * 
     */
    @Import(name="actionGroups", required=true)
      private final Output<ActionGroupsInformationArgs> actionGroups;

    public Output<ActionGroupsInformationArgs> actionGroups() {
        return this.actionGroups;
    }

    /**
     * The name of the alert rule.
     * 
     */
    @Import(name="alertRuleName")
      private final @Nullable Output<String> alertRuleName;

    public Output<String> alertRuleName() {
        return this.alertRuleName == null ? Codegen.empty() : this.alertRuleName;
    }

    /**
     * The alert rule description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The alert rule's detector.
     * 
     */
    @Import(name="detector", required=true)
      private final Output<DetectorArgs> detector;

    public Output<DetectorArgs> detector() {
        return this.detector;
    }

    /**
     * The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
     * 
     */
    @Import(name="frequency", required=true)
      private final Output<String> frequency;

    public Output<String> frequency() {
        return this.frequency;
    }

    /**
     * The resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The alert rule resources scope.
     * 
     */
    @Import(name="scope", required=true)
      private final Output<List<String>> scope;

    public Output<List<String>> scope() {
        return this.scope;
    }

    /**
     * The alert rule severity.
     * 
     */
    @Import(name="severity", required=true)
      private final Output<Either<String,Severity>> severity;

    public Output<Either<String,Severity>> severity() {
        return this.severity;
    }

    /**
     * The alert rule state.
     * 
     */
    @Import(name="state", required=true)
      private final Output<Either<String,AlertRuleState>> state;

    public Output<Either<String,AlertRuleState>> state() {
        return this.state;
    }

    /**
     * The resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The alert rule throttling information.
     * 
     */
    @Import(name="throttling")
      private final @Nullable Output<ThrottlingInformationArgs> throttling;

    public Output<ThrottlingInformationArgs> throttling() {
        return this.throttling == null ? Codegen.empty() : this.throttling;
    }

    public SmartDetectorAlertRuleArgs(
        Output<ActionGroupsInformationArgs> actionGroups,
        @Nullable Output<String> alertRuleName,
        @Nullable Output<String> description,
        Output<DetectorArgs> detector,
        Output<String> frequency,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        Output<List<String>> scope,
        Output<Either<String,Severity>> severity,
        Output<Either<String,AlertRuleState>> state,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<ThrottlingInformationArgs> throttling) {
        this.actionGroups = Objects.requireNonNull(actionGroups, "expected parameter 'actionGroups' to be non-null");
        this.alertRuleName = alertRuleName;
        this.description = description;
        this.detector = Objects.requireNonNull(detector, "expected parameter 'detector' to be non-null");
        this.frequency = Objects.requireNonNull(frequency, "expected parameter 'frequency' to be non-null");
        this.location = location == null ? Codegen.ofNullable("global") : location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
        this.severity = Objects.requireNonNull(severity, "expected parameter 'severity' to be non-null");
        this.state = Objects.requireNonNull(state, "expected parameter 'state' to be non-null");
        this.tags = tags;
        this.throttling = throttling;
    }

    private SmartDetectorAlertRuleArgs() {
        this.actionGroups = Codegen.empty();
        this.alertRuleName = Codegen.empty();
        this.description = Codegen.empty();
        this.detector = Codegen.empty();
        this.frequency = Codegen.empty();
        this.location = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.scope = Codegen.empty();
        this.severity = Codegen.empty();
        this.state = Codegen.empty();
        this.tags = Codegen.empty();
        this.throttling = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SmartDetectorAlertRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ActionGroupsInformationArgs> actionGroups;
        private @Nullable Output<String> alertRuleName;
        private @Nullable Output<String> description;
        private Output<DetectorArgs> detector;
        private Output<String> frequency;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private Output<List<String>> scope;
        private Output<Either<String,Severity>> severity;
        private Output<Either<String,AlertRuleState>> state;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<ThrottlingInformationArgs> throttling;

        public Builder() {
    	      // Empty
        }

        public Builder(SmartDetectorAlertRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionGroups = defaults.actionGroups;
    	      this.alertRuleName = defaults.alertRuleName;
    	      this.description = defaults.description;
    	      this.detector = defaults.detector;
    	      this.frequency = defaults.frequency;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scope = defaults.scope;
    	      this.severity = defaults.severity;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.throttling = defaults.throttling;
        }

        public Builder actionGroups(Output<ActionGroupsInformationArgs> actionGroups) {
            this.actionGroups = Objects.requireNonNull(actionGroups);
            return this;
        }
        public Builder actionGroups(ActionGroupsInformationArgs actionGroups) {
            this.actionGroups = Output.of(Objects.requireNonNull(actionGroups));
            return this;
        }
        public Builder alertRuleName(@Nullable Output<String> alertRuleName) {
            this.alertRuleName = alertRuleName;
            return this;
        }
        public Builder alertRuleName(@Nullable String alertRuleName) {
            this.alertRuleName = Codegen.ofNullable(alertRuleName);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder detector(Output<DetectorArgs> detector) {
            this.detector = Objects.requireNonNull(detector);
            return this;
        }
        public Builder detector(DetectorArgs detector) {
            this.detector = Output.of(Objects.requireNonNull(detector));
            return this;
        }
        public Builder frequency(Output<String> frequency) {
            this.frequency = Objects.requireNonNull(frequency);
            return this;
        }
        public Builder frequency(String frequency) {
            this.frequency = Output.of(Objects.requireNonNull(frequency));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder scope(Output<List<String>> scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        public Builder scope(List<String> scope) {
            this.scope = Output.of(Objects.requireNonNull(scope));
            return this;
        }
        public Builder scope(String... scope) {
            return scope(List.of(scope));
        }
        public Builder severity(Output<Either<String,Severity>> severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }
        public Builder severity(Either<String,Severity> severity) {
            this.severity = Output.of(Objects.requireNonNull(severity));
            return this;
        }
        public Builder state(Output<Either<String,AlertRuleState>> state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder state(Either<String,AlertRuleState> state) {
            this.state = Output.of(Objects.requireNonNull(state));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder throttling(@Nullable Output<ThrottlingInformationArgs> throttling) {
            this.throttling = throttling;
            return this;
        }
        public Builder throttling(@Nullable ThrottlingInformationArgs throttling) {
            this.throttling = Codegen.ofNullable(throttling);
            return this;
        }        public SmartDetectorAlertRuleArgs build() {
            return new SmartDetectorAlertRuleArgs(actionGroups, alertRuleName, description, detector, frequency, location, resourceGroupName, scope, severity, state, tags, throttling);
        }
    }
}
