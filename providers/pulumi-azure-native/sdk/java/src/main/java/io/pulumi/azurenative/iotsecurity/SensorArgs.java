// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.iotsecurity;

import io.pulumi.azurenative.iotsecurity.enums.SensorType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SensorArgs extends io.pulumi.resources.ResourceArgs {

    public static final SensorArgs Empty = new SensorArgs();

    /**
     * Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
     * 
     */
    @Import(name="scope", required=true)
      private final Output<String> scope;

    public Output<String> getScope() {
        return this.scope;
    }

    /**
     * Name of the IoT sensor
     * 
     */
    @Import(name="sensorName")
      private final @Nullable Output<String> sensorName;

    public Output<String> getSensorName() {
        return this.sensorName == null ? Codegen.empty() : this.sensorName;
    }

    /**
     * Type of sensor
     * 
     */
    @Import(name="sensorType")
      private final @Nullable Output<Either<String,SensorType>> sensorType;

    public Output<Either<String,SensorType>> getSensorType() {
        return this.sensorType == null ? Codegen.empty() : this.sensorType;
    }

    /**
     * TI Automatic mode status of the IoT sensor
     * 
     */
    @Import(name="tiAutomaticUpdates")
      private final @Nullable Output<Boolean> tiAutomaticUpdates;

    public Output<Boolean> getTiAutomaticUpdates() {
        return this.tiAutomaticUpdates == null ? Codegen.empty() : this.tiAutomaticUpdates;
    }

    /**
     * Zone of the IoT sensor
     * 
     */
    @Import(name="zone")
      private final @Nullable Output<String> zone;

    public Output<String> getZone() {
        return this.zone == null ? Codegen.empty() : this.zone;
    }

    public SensorArgs(
        Output<String> scope,
        @Nullable Output<String> sensorName,
        @Nullable Output<Either<String,SensorType>> sensorType,
        @Nullable Output<Boolean> tiAutomaticUpdates,
        @Nullable Output<String> zone) {
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
        this.sensorName = sensorName;
        this.sensorType = sensorType;
        this.tiAutomaticUpdates = tiAutomaticUpdates;
        this.zone = zone;
    }

    private SensorArgs() {
        this.scope = Codegen.empty();
        this.sensorName = Codegen.empty();
        this.sensorType = Codegen.empty();
        this.tiAutomaticUpdates = Codegen.empty();
        this.zone = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SensorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> scope;
        private @Nullable Output<String> sensorName;
        private @Nullable Output<Either<String,SensorType>> sensorType;
        private @Nullable Output<Boolean> tiAutomaticUpdates;
        private @Nullable Output<String> zone;

        public Builder() {
    	      // Empty
        }

        public Builder(SensorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.scope = defaults.scope;
    	      this.sensorName = defaults.sensorName;
    	      this.sensorType = defaults.sensorType;
    	      this.tiAutomaticUpdates = defaults.tiAutomaticUpdates;
    	      this.zone = defaults.zone;
        }

        public Builder scope(Output<String> scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        public Builder scope(String scope) {
            this.scope = Output.of(Objects.requireNonNull(scope));
            return this;
        }
        public Builder sensorName(@Nullable Output<String> sensorName) {
            this.sensorName = sensorName;
            return this;
        }
        public Builder sensorName(@Nullable String sensorName) {
            this.sensorName = Codegen.ofNullable(sensorName);
            return this;
        }
        public Builder sensorType(@Nullable Output<Either<String,SensorType>> sensorType) {
            this.sensorType = sensorType;
            return this;
        }
        public Builder sensorType(@Nullable Either<String,SensorType> sensorType) {
            this.sensorType = Codegen.ofNullable(sensorType);
            return this;
        }
        public Builder tiAutomaticUpdates(@Nullable Output<Boolean> tiAutomaticUpdates) {
            this.tiAutomaticUpdates = tiAutomaticUpdates;
            return this;
        }
        public Builder tiAutomaticUpdates(@Nullable Boolean tiAutomaticUpdates) {
            this.tiAutomaticUpdates = Codegen.ofNullable(tiAutomaticUpdates);
            return this;
        }
        public Builder zone(@Nullable Output<String> zone) {
            this.zone = zone;
            return this;
        }
        public Builder zone(@Nullable String zone) {
            this.zone = Codegen.ofNullable(zone);
            return this;
        }        public SensorArgs build() {
            return new SensorArgs(scope, sensorName, sensorType, tiAutomaticUpdates, zone);
        }
    }
}
