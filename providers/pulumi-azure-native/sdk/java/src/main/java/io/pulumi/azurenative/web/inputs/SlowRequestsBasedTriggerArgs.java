// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Trigger based on request execution time.
 * 
 */
public final class SlowRequestsBasedTriggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final SlowRequestsBasedTriggerArgs Empty = new SlowRequestsBasedTriggerArgs();

    /**
     * Request Count.
     * 
     */
    @Import(name="count")
      private final @Nullable Output<Integer> count;

    public Output<Integer> getCount() {
        return this.count == null ? Output.empty() : this.count;
    }

    /**
     * Request Path.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> getPath() {
        return this.path == null ? Output.empty() : this.path;
    }

    /**
     * Time interval.
     * 
     */
    @Import(name="timeInterval")
      private final @Nullable Output<String> timeInterval;

    public Output<String> getTimeInterval() {
        return this.timeInterval == null ? Output.empty() : this.timeInterval;
    }

    /**
     * Time taken.
     * 
     */
    @Import(name="timeTaken")
      private final @Nullable Output<String> timeTaken;

    public Output<String> getTimeTaken() {
        return this.timeTaken == null ? Output.empty() : this.timeTaken;
    }

    public SlowRequestsBasedTriggerArgs(
        @Nullable Output<Integer> count,
        @Nullable Output<String> path,
        @Nullable Output<String> timeInterval,
        @Nullable Output<String> timeTaken) {
        this.count = count;
        this.path = path;
        this.timeInterval = timeInterval;
        this.timeTaken = timeTaken;
    }

    private SlowRequestsBasedTriggerArgs() {
        this.count = Output.empty();
        this.path = Output.empty();
        this.timeInterval = Output.empty();
        this.timeTaken = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SlowRequestsBasedTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> count;
        private @Nullable Output<String> path;
        private @Nullable Output<String> timeInterval;
        private @Nullable Output<String> timeTaken;

        public Builder() {
    	      // Empty
        }

        public Builder(SlowRequestsBasedTriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.path = defaults.path;
    	      this.timeInterval = defaults.timeInterval;
    	      this.timeTaken = defaults.timeTaken;
        }

        public Builder count(@Nullable Output<Integer> count) {
            this.count = count;
            return this;
        }

        public Builder count(@Nullable Integer count) {
            this.count = Output.ofNullable(count);
            return this;
        }

        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }

        public Builder path(@Nullable String path) {
            this.path = Output.ofNullable(path);
            return this;
        }

        public Builder timeInterval(@Nullable Output<String> timeInterval) {
            this.timeInterval = timeInterval;
            return this;
        }

        public Builder timeInterval(@Nullable String timeInterval) {
            this.timeInterval = Output.ofNullable(timeInterval);
            return this;
        }

        public Builder timeTaken(@Nullable Output<String> timeTaken) {
            this.timeTaken = timeTaken;
            return this;
        }

        public Builder timeTaken(@Nullable String timeTaken) {
            this.timeTaken = Output.ofNullable(timeTaken);
            return this;
        }
        public SlowRequestsBasedTriggerArgs build() {
            return new SlowRequestsBasedTriggerArgs(count, path, timeInterval, timeTaken);
        }
    }
}
