// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.security.inputs;

import io.pulumi.azurenative.security.enums.Operator;
import io.pulumi.azurenative.security.enums.PropertyType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A rule which is evaluated upon event interception. The rule is configured by comparing a specific value from the event model to an expected value. This comparison is done by using one of the supported operators set.
 * 
 */
public final class AutomationTriggeringRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutomationTriggeringRuleArgs Empty = new AutomationTriggeringRuleArgs();

    /**
     * The expected value.
     * 
     */
    @InputImport(name="expectedValue")
      private final @Nullable Output<String> expectedValue;

    public Output<String> getExpectedValue() {
        return this.expectedValue == null ? Output.empty() : this.expectedValue;
    }

    /**
     * A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
     * 
     */
    @InputImport(name="operator")
      private final @Nullable Output<Either<String,Operator>> operator;

    public Output<Either<String,Operator>> getOperator() {
        return this.operator == null ? Output.empty() : this.operator;
    }

    /**
     * The JPath of the entity model property that should be checked.
     * 
     */
    @InputImport(name="propertyJPath")
      private final @Nullable Output<String> propertyJPath;

    public Output<String> getPropertyJPath() {
        return this.propertyJPath == null ? Output.empty() : this.propertyJPath;
    }

    /**
     * The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
     * 
     */
    @InputImport(name="propertyType")
      private final @Nullable Output<Either<String,PropertyType>> propertyType;

    public Output<Either<String,PropertyType>> getPropertyType() {
        return this.propertyType == null ? Output.empty() : this.propertyType;
    }

    public AutomationTriggeringRuleArgs(
        @Nullable Output<String> expectedValue,
        @Nullable Output<Either<String,Operator>> operator,
        @Nullable Output<String> propertyJPath,
        @Nullable Output<Either<String,PropertyType>> propertyType) {
        this.expectedValue = expectedValue;
        this.operator = operator;
        this.propertyJPath = propertyJPath;
        this.propertyType = propertyType;
    }

    private AutomationTriggeringRuleArgs() {
        this.expectedValue = Output.empty();
        this.operator = Output.empty();
        this.propertyJPath = Output.empty();
        this.propertyType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutomationTriggeringRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> expectedValue;
        private @Nullable Output<Either<String,Operator>> operator;
        private @Nullable Output<String> propertyJPath;
        private @Nullable Output<Either<String,PropertyType>> propertyType;

        public Builder() {
    	      // Empty
        }

        public Builder(AutomationTriggeringRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expectedValue = defaults.expectedValue;
    	      this.operator = defaults.operator;
    	      this.propertyJPath = defaults.propertyJPath;
    	      this.propertyType = defaults.propertyType;
        }

        public Builder expectedValue(@Nullable Output<String> expectedValue) {
            this.expectedValue = expectedValue;
            return this;
        }

        public Builder expectedValue(@Nullable String expectedValue) {
            this.expectedValue = Output.ofNullable(expectedValue);
            return this;
        }

        public Builder operator(@Nullable Output<Either<String,Operator>> operator) {
            this.operator = operator;
            return this;
        }

        public Builder operator(@Nullable Either<String,Operator> operator) {
            this.operator = Output.ofNullable(operator);
            return this;
        }

        public Builder propertyJPath(@Nullable Output<String> propertyJPath) {
            this.propertyJPath = propertyJPath;
            return this;
        }

        public Builder propertyJPath(@Nullable String propertyJPath) {
            this.propertyJPath = Output.ofNullable(propertyJPath);
            return this;
        }

        public Builder propertyType(@Nullable Output<Either<String,PropertyType>> propertyType) {
            this.propertyType = propertyType;
            return this;
        }

        public Builder propertyType(@Nullable Either<String,PropertyType> propertyType) {
            this.propertyType = Output.ofNullable(propertyType);
            return this;
        }
        public AutomationTriggeringRuleArgs build() {
            return new AutomationTriggeringRuleArgs(expectedValue, operator, propertyJPath, propertyType);
        }
    }
}
