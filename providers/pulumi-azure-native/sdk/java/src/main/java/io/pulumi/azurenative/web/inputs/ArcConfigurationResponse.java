// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.inputs.FrontEndConfigurationResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ArcConfigurationResponse extends io.pulumi.resources.InvokeArgs {

    public static final ArcConfigurationResponse Empty = new ArcConfigurationResponse();

    @InputImport(name="artifactStorageAccessMode")
    private final @Nullable String artifactStorageAccessMode;

    public Optional<String> getArtifactStorageAccessMode() {
        return this.artifactStorageAccessMode == null ? Optional.empty() : Optional.ofNullable(this.artifactStorageAccessMode);
    }

    @InputImport(name="artifactStorageClassName")
    private final @Nullable String artifactStorageClassName;

    public Optional<String> getArtifactStorageClassName() {
        return this.artifactStorageClassName == null ? Optional.empty() : Optional.ofNullable(this.artifactStorageClassName);
    }

    @InputImport(name="artifactStorageMountPath")
    private final @Nullable String artifactStorageMountPath;

    public Optional<String> getArtifactStorageMountPath() {
        return this.artifactStorageMountPath == null ? Optional.empty() : Optional.ofNullable(this.artifactStorageMountPath);
    }

    @InputImport(name="artifactStorageNodeName")
    private final @Nullable String artifactStorageNodeName;

    public Optional<String> getArtifactStorageNodeName() {
        return this.artifactStorageNodeName == null ? Optional.empty() : Optional.ofNullable(this.artifactStorageNodeName);
    }

    @InputImport(name="artifactsStorageType")
    private final @Nullable String artifactsStorageType;

    public Optional<String> getArtifactsStorageType() {
        return this.artifactsStorageType == null ? Optional.empty() : Optional.ofNullable(this.artifactsStorageType);
    }

    @InputImport(name="frontEndServiceConfiguration")
    private final @Nullable FrontEndConfigurationResponse frontEndServiceConfiguration;

    public Optional<FrontEndConfigurationResponse> getFrontEndServiceConfiguration() {
        return this.frontEndServiceConfiguration == null ? Optional.empty() : Optional.ofNullable(this.frontEndServiceConfiguration);
    }

    public ArcConfigurationResponse(
        @Nullable String artifactStorageAccessMode,
        @Nullable String artifactStorageClassName,
        @Nullable String artifactStorageMountPath,
        @Nullable String artifactStorageNodeName,
        @Nullable String artifactsStorageType,
        @Nullable FrontEndConfigurationResponse frontEndServiceConfiguration) {
        this.artifactStorageAccessMode = artifactStorageAccessMode;
        this.artifactStorageClassName = artifactStorageClassName;
        this.artifactStorageMountPath = artifactStorageMountPath;
        this.artifactStorageNodeName = artifactStorageNodeName;
        this.artifactsStorageType = artifactsStorageType;
        this.frontEndServiceConfiguration = frontEndServiceConfiguration;
    }

    private ArcConfigurationResponse() {
        this.artifactStorageAccessMode = null;
        this.artifactStorageClassName = null;
        this.artifactStorageMountPath = null;
        this.artifactStorageNodeName = null;
        this.artifactsStorageType = null;
        this.frontEndServiceConfiguration = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ArcConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String artifactStorageAccessMode;
        private @Nullable String artifactStorageClassName;
        private @Nullable String artifactStorageMountPath;
        private @Nullable String artifactStorageNodeName;
        private @Nullable String artifactsStorageType;
        private @Nullable FrontEndConfigurationResponse frontEndServiceConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(ArcConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactStorageAccessMode = defaults.artifactStorageAccessMode;
    	      this.artifactStorageClassName = defaults.artifactStorageClassName;
    	      this.artifactStorageMountPath = defaults.artifactStorageMountPath;
    	      this.artifactStorageNodeName = defaults.artifactStorageNodeName;
    	      this.artifactsStorageType = defaults.artifactsStorageType;
    	      this.frontEndServiceConfiguration = defaults.frontEndServiceConfiguration;
        }

        public Builder setArtifactStorageAccessMode(@Nullable String artifactStorageAccessMode) {
            this.artifactStorageAccessMode = artifactStorageAccessMode;
            return this;
        }

        public Builder setArtifactStorageClassName(@Nullable String artifactStorageClassName) {
            this.artifactStorageClassName = artifactStorageClassName;
            return this;
        }

        public Builder setArtifactStorageMountPath(@Nullable String artifactStorageMountPath) {
            this.artifactStorageMountPath = artifactStorageMountPath;
            return this;
        }

        public Builder setArtifactStorageNodeName(@Nullable String artifactStorageNodeName) {
            this.artifactStorageNodeName = artifactStorageNodeName;
            return this;
        }

        public Builder setArtifactsStorageType(@Nullable String artifactsStorageType) {
            this.artifactsStorageType = artifactsStorageType;
            return this;
        }

        public Builder setFrontEndServiceConfiguration(@Nullable FrontEndConfigurationResponse frontEndServiceConfiguration) {
            this.frontEndServiceConfiguration = frontEndServiceConfiguration;
            return this;
        }

        public ArcConfigurationResponse build() {
            return new ArcConfigurationResponse(artifactStorageAccessMode, artifactStorageClassName, artifactStorageMountPath, artifactStorageNodeName, artifactsStorageType, frontEndServiceConfiguration);
        }
    }
}
