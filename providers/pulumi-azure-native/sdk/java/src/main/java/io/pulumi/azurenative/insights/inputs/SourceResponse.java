// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the log search query.
 * 
 */
public final class SourceResponse extends io.pulumi.resources.InvokeArgs {

    public static final SourceResponse Empty = new SourceResponse();

    /**
     * List of  Resource referred into query
     * 
     */
    @Import(name="authorizedResources")
      private final @Nullable List<String> authorizedResources;

    public List<String> getAuthorizedResources() {
        return this.authorizedResources == null ? List.of() : this.authorizedResources;
    }

    /**
     * The resource uri over which log search query is to be run.
     * 
     */
    @Import(name="dataSourceId", required=true)
      private final String dataSourceId;

    public String getDataSourceId() {
        return this.dataSourceId;
    }

    /**
     * Log search query. Required for action type - AlertingAction
     * 
     */
    @Import(name="query")
      private final @Nullable String query;

    public Optional<String> getQuery() {
        return this.query == null ? Optional.empty() : Optional.ofNullable(this.query);
    }

    /**
     * Set value to 'ResultCount' .
     * 
     */
    @Import(name="queryType")
      private final @Nullable String queryType;

    public Optional<String> getQueryType() {
        return this.queryType == null ? Optional.empty() : Optional.ofNullable(this.queryType);
    }

    public SourceResponse(
        @Nullable List<String> authorizedResources,
        String dataSourceId,
        @Nullable String query,
        @Nullable String queryType) {
        this.authorizedResources = authorizedResources;
        this.dataSourceId = Objects.requireNonNull(dataSourceId, "expected parameter 'dataSourceId' to be non-null");
        this.query = query;
        this.queryType = queryType;
    }

    private SourceResponse() {
        this.authorizedResources = List.of();
        this.dataSourceId = null;
        this.query = null;
        this.queryType = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> authorizedResources;
        private String dataSourceId;
        private @Nullable String query;
        private @Nullable String queryType;

        public Builder() {
    	      // Empty
        }

        public Builder(SourceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizedResources = defaults.authorizedResources;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.query = defaults.query;
    	      this.queryType = defaults.queryType;
        }

        public Builder authorizedResources(@Nullable List<String> authorizedResources) {
            this.authorizedResources = authorizedResources;
            return this;
        }
        public Builder authorizedResources(String... authorizedResources) {
            return authorizedResources(List.of(authorizedResources));
        }
        public Builder dataSourceId(String dataSourceId) {
            this.dataSourceId = Objects.requireNonNull(dataSourceId);
            return this;
        }
        public Builder query(@Nullable String query) {
            this.query = query;
            return this;
        }
        public Builder queryType(@Nullable String queryType) {
            this.queryType = queryType;
            return this;
        }        public SourceResponse build() {
            return new SourceResponse(authorizedResources, dataSourceId, query, queryType);
        }
    }
}
