// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.securityinsights.inputs;

import io.pulumi.azurenative.securityinsights.inputs.AutomationRulePropertyValuesConditionConditionPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Describes an automation rule condition that evaluates a property's value
 * 
 */
public final class AutomationRulePropertyValuesConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutomationRulePropertyValuesConditionArgs Empty = new AutomationRulePropertyValuesConditionArgs();

    /**
     * The configuration of the automation rule condition
     * 
     */
    @Import(name="conditionProperties", required=true)
      private final Output<AutomationRulePropertyValuesConditionConditionPropertiesArgs> conditionProperties;

    public Output<AutomationRulePropertyValuesConditionConditionPropertiesArgs> getConditionProperties() {
        return this.conditionProperties;
    }

    /**
     * The type of the automation rule condition
     * Expected value is 'Property'.
     * 
     */
    @Import(name="conditionType", required=true)
      private final Output<String> conditionType;

    public Output<String> getConditionType() {
        return this.conditionType;
    }

    public AutomationRulePropertyValuesConditionArgs(
        Output<AutomationRulePropertyValuesConditionConditionPropertiesArgs> conditionProperties,
        Output<String> conditionType) {
        this.conditionProperties = Objects.requireNonNull(conditionProperties, "expected parameter 'conditionProperties' to be non-null");
        this.conditionType = Objects.requireNonNull(conditionType, "expected parameter 'conditionType' to be non-null");
    }

    private AutomationRulePropertyValuesConditionArgs() {
        this.conditionProperties = Output.empty();
        this.conditionType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutomationRulePropertyValuesConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<AutomationRulePropertyValuesConditionConditionPropertiesArgs> conditionProperties;
        private Output<String> conditionType;

        public Builder() {
    	      // Empty
        }

        public Builder(AutomationRulePropertyValuesConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionProperties = defaults.conditionProperties;
    	      this.conditionType = defaults.conditionType;
        }

        public Builder conditionProperties(Output<AutomationRulePropertyValuesConditionConditionPropertiesArgs> conditionProperties) {
            this.conditionProperties = Objects.requireNonNull(conditionProperties);
            return this;
        }

        public Builder conditionProperties(AutomationRulePropertyValuesConditionConditionPropertiesArgs conditionProperties) {
            this.conditionProperties = Output.of(Objects.requireNonNull(conditionProperties));
            return this;
        }

        public Builder conditionType(Output<String> conditionType) {
            this.conditionType = Objects.requireNonNull(conditionType);
            return this;
        }

        public Builder conditionType(String conditionType) {
            this.conditionType = Output.of(Objects.requireNonNull(conditionType));
            return this;
        }
        public AutomationRulePropertyValuesConditionArgs build() {
            return new AutomationRulePropertyValuesConditionArgs(conditionProperties, conditionType);
        }
    }
}
