// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab.inputs;

import io.pulumi.azurenative.devtestlab.inputs.AttachNewDataDiskOptionsResponse;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Request body for adding a new or existing data disk to a virtual machine.
 * 
 */
public final class DataDiskPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final DataDiskPropertiesResponse Empty = new DataDiskPropertiesResponse();

    /**
     * Specifies options to attach a new disk to the virtual machine.
     * 
     */
    @Import(name="attachNewDataDiskOptions")
      private final @Nullable AttachNewDataDiskOptionsResponse attachNewDataDiskOptions;

    public Optional<AttachNewDataDiskOptionsResponse> getAttachNewDataDiskOptions() {
        return this.attachNewDataDiskOptions == null ? Optional.empty() : Optional.ofNullable(this.attachNewDataDiskOptions);
    }

    /**
     * Specifies the existing lab disk id to attach to virtual machine.
     * 
     */
    @Import(name="existingLabDiskId")
      private final @Nullable String existingLabDiskId;

    public Optional<String> getExistingLabDiskId() {
        return this.existingLabDiskId == null ? Optional.empty() : Optional.ofNullable(this.existingLabDiskId);
    }

    /**
     * Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
     * 
     */
    @Import(name="hostCaching")
      private final @Nullable String hostCaching;

    public Optional<String> getHostCaching() {
        return this.hostCaching == null ? Optional.empty() : Optional.ofNullable(this.hostCaching);
    }

    public DataDiskPropertiesResponse(
        @Nullable AttachNewDataDiskOptionsResponse attachNewDataDiskOptions,
        @Nullable String existingLabDiskId,
        @Nullable String hostCaching) {
        this.attachNewDataDiskOptions = attachNewDataDiskOptions;
        this.existingLabDiskId = existingLabDiskId;
        this.hostCaching = hostCaching;
    }

    private DataDiskPropertiesResponse() {
        this.attachNewDataDiskOptions = null;
        this.existingLabDiskId = null;
        this.hostCaching = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataDiskPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable AttachNewDataDiskOptionsResponse attachNewDataDiskOptions;
        private @Nullable String existingLabDiskId;
        private @Nullable String hostCaching;

        public Builder() {
    	      // Empty
        }

        public Builder(DataDiskPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachNewDataDiskOptions = defaults.attachNewDataDiskOptions;
    	      this.existingLabDiskId = defaults.existingLabDiskId;
    	      this.hostCaching = defaults.hostCaching;
        }

        public Builder attachNewDataDiskOptions(@Nullable AttachNewDataDiskOptionsResponse attachNewDataDiskOptions) {
            this.attachNewDataDiskOptions = attachNewDataDiskOptions;
            return this;
        }

        public Builder existingLabDiskId(@Nullable String existingLabDiskId) {
            this.existingLabDiskId = existingLabDiskId;
            return this;
        }

        public Builder hostCaching(@Nullable String hostCaching) {
            this.hostCaching = hostCaching;
            return this;
        }
        public DataDiskPropertiesResponse build() {
            return new DataDiskPropertiesResponse(attachNewDataDiskOptions, existingLabDiskId, hostCaching);
        }
    }
}
