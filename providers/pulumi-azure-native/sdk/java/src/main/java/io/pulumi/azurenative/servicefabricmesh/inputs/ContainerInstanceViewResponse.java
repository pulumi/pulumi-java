// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabricmesh.inputs;

import io.pulumi.azurenative.servicefabricmesh.inputs.ContainerEventResponse;
import io.pulumi.azurenative.servicefabricmesh.inputs.ContainerStateResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Runtime information of a container instance.
 * 
 */
public final class ContainerInstanceViewResponse extends io.pulumi.resources.InvokeArgs {

    public static final ContainerInstanceViewResponse Empty = new ContainerInstanceViewResponse();

    /**
     * Current container instance state.
     * 
     */
    @InputImport(name="currentState")
        private final @Nullable ContainerStateResponse currentState;

    public Optional<ContainerStateResponse> getCurrentState() {
        return this.currentState == null ? Optional.empty() : Optional.ofNullable(this.currentState);
    }

    /**
     * The events of this container instance.
     * 
     */
    @InputImport(name="events")
        private final @Nullable List<ContainerEventResponse> events;

    public List<ContainerEventResponse> getEvents() {
        return this.events == null ? List.of() : this.events;
    }

    /**
     * Previous container instance state.
     * 
     */
    @InputImport(name="previousState")
        private final @Nullable ContainerStateResponse previousState;

    public Optional<ContainerStateResponse> getPreviousState() {
        return this.previousState == null ? Optional.empty() : Optional.ofNullable(this.previousState);
    }

    /**
     * The number of times the container has been restarted.
     * 
     */
    @InputImport(name="restartCount")
        private final @Nullable Integer restartCount;

    public Optional<Integer> getRestartCount() {
        return this.restartCount == null ? Optional.empty() : Optional.ofNullable(this.restartCount);
    }

    public ContainerInstanceViewResponse(
        @Nullable ContainerStateResponse currentState,
        @Nullable List<ContainerEventResponse> events,
        @Nullable ContainerStateResponse previousState,
        @Nullable Integer restartCount) {
        this.currentState = currentState;
        this.events = events;
        this.previousState = previousState;
        this.restartCount = restartCount;
    }

    private ContainerInstanceViewResponse() {
        this.currentState = null;
        this.events = List.of();
        this.previousState = null;
        this.restartCount = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerInstanceViewResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable ContainerStateResponse currentState;
        private @Nullable List<ContainerEventResponse> events;
        private @Nullable ContainerStateResponse previousState;
        private @Nullable Integer restartCount;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerInstanceViewResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currentState = defaults.currentState;
    	      this.events = defaults.events;
    	      this.previousState = defaults.previousState;
    	      this.restartCount = defaults.restartCount;
        }

        public Builder setCurrentState(@Nullable ContainerStateResponse currentState) {
            this.currentState = currentState;
            return this;
        }

        public Builder setEvents(@Nullable List<ContainerEventResponse> events) {
            this.events = events;
            return this;
        }

        public Builder setPreviousState(@Nullable ContainerStateResponse previousState) {
            this.previousState = previousState;
            return this;
        }

        public Builder setRestartCount(@Nullable Integer restartCount) {
            this.restartCount = restartCount;
            return this;
        }
        public ContainerInstanceViewResponse build() {
            return new ContainerInstanceViewResponse(currentState, events, previousState, restartCount);
        }
    }
}
