// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.enums.IpFilterTag;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * IP security restriction on an app.
 * 
 */
public final class IpSecurityRestrictionArgs extends io.pulumi.resources.ResourceArgs {

    public static final IpSecurityRestrictionArgs Empty = new IpSecurityRestrictionArgs();

    /**
     * Allow or Deny access for this IP range.
     * 
     */
    @Import(name="action")
      private final @Nullable Output<String> action;

    public Output<String> action() {
        return this.action == null ? Codegen.empty() : this.action;
    }

    /**
     * IP restriction rule description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * IP restriction rule headers.
     * X-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).
     * The matching logic is ..
     * - If the property is null or empty (default), all hosts(or lack of) are allowed.
     * - A value is compared using ordinal-ignore-case (excluding port number).
     * - Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com
     *    but not the root domain contoso.com or multi-level foo.bar.contoso.com
     * - Unicode host names are allowed but are converted to Punycode for matching.
     * 
     * X-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).
     * The matching logic is ..
     * - If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.
     * - If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.
     * 
     * X-Azure-FDID and X-FD-HealthProbe.
     * The matching logic is exact match.
     * 
     */
    @Import(name="headers")
      private final @Nullable Output<Map<String,List<String>>> headers;

    public Output<Map<String,List<String>>> headers() {
        return this.headers == null ? Codegen.empty() : this.headers;
    }

    /**
     * IP address the security restriction is valid for.
     * It can be in form of pure ipv4 address (required SubnetMask property) or
     * CIDR notation such as ipv4/mask (leading bit match). For CIDR,
     * SubnetMask property must not be specified.
     * 
     */
    @Import(name="ipAddress")
      private final @Nullable Output<String> ipAddress;

    public Output<String> ipAddress() {
        return this.ipAddress == null ? Codegen.empty() : this.ipAddress;
    }

    /**
     * IP restriction rule name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Priority of IP restriction rule.
     * 
     */
    @Import(name="priority")
      private final @Nullable Output<Integer> priority;

    public Output<Integer> priority() {
        return this.priority == null ? Codegen.empty() : this.priority;
    }

    /**
     * Subnet mask for the range of IP addresses the restriction is valid for.
     * 
     */
    @Import(name="subnetMask")
      private final @Nullable Output<String> subnetMask;

    public Output<String> subnetMask() {
        return this.subnetMask == null ? Codegen.empty() : this.subnetMask;
    }

    /**
     * (internal) Subnet traffic tag
     * 
     */
    @Import(name="subnetTrafficTag")
      private final @Nullable Output<Integer> subnetTrafficTag;

    public Output<Integer> subnetTrafficTag() {
        return this.subnetTrafficTag == null ? Codegen.empty() : this.subnetTrafficTag;
    }

    /**
     * Defines what this IP filter will be used for. This is to support IP filtering on proxies.
     * 
     */
    @Import(name="tag")
      private final @Nullable Output<Either<String,IpFilterTag>> tag;

    public Output<Either<String,IpFilterTag>> tag() {
        return this.tag == null ? Codegen.empty() : this.tag;
    }

    /**
     * Virtual network resource id
     * 
     */
    @Import(name="vnetSubnetResourceId")
      private final @Nullable Output<String> vnetSubnetResourceId;

    public Output<String> vnetSubnetResourceId() {
        return this.vnetSubnetResourceId == null ? Codegen.empty() : this.vnetSubnetResourceId;
    }

    /**
     * (internal) Vnet traffic tag
     * 
     */
    @Import(name="vnetTrafficTag")
      private final @Nullable Output<Integer> vnetTrafficTag;

    public Output<Integer> vnetTrafficTag() {
        return this.vnetTrafficTag == null ? Codegen.empty() : this.vnetTrafficTag;
    }

    public IpSecurityRestrictionArgs(
        @Nullable Output<String> action,
        @Nullable Output<String> description,
        @Nullable Output<Map<String,List<String>>> headers,
        @Nullable Output<String> ipAddress,
        @Nullable Output<String> name,
        @Nullable Output<Integer> priority,
        @Nullable Output<String> subnetMask,
        @Nullable Output<Integer> subnetTrafficTag,
        @Nullable Output<Either<String,IpFilterTag>> tag,
        @Nullable Output<String> vnetSubnetResourceId,
        @Nullable Output<Integer> vnetTrafficTag) {
        this.action = action;
        this.description = description;
        this.headers = headers;
        this.ipAddress = ipAddress;
        this.name = name;
        this.priority = priority;
        this.subnetMask = subnetMask;
        this.subnetTrafficTag = subnetTrafficTag;
        this.tag = tag;
        this.vnetSubnetResourceId = vnetSubnetResourceId;
        this.vnetTrafficTag = vnetTrafficTag;
    }

    private IpSecurityRestrictionArgs() {
        this.action = Codegen.empty();
        this.description = Codegen.empty();
        this.headers = Codegen.empty();
        this.ipAddress = Codegen.empty();
        this.name = Codegen.empty();
        this.priority = Codegen.empty();
        this.subnetMask = Codegen.empty();
        this.subnetTrafficTag = Codegen.empty();
        this.tag = Codegen.empty();
        this.vnetSubnetResourceId = Codegen.empty();
        this.vnetTrafficTag = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IpSecurityRestrictionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> action;
        private @Nullable Output<String> description;
        private @Nullable Output<Map<String,List<String>>> headers;
        private @Nullable Output<String> ipAddress;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> priority;
        private @Nullable Output<String> subnetMask;
        private @Nullable Output<Integer> subnetTrafficTag;
        private @Nullable Output<Either<String,IpFilterTag>> tag;
        private @Nullable Output<String> vnetSubnetResourceId;
        private @Nullable Output<Integer> vnetTrafficTag;

        public Builder() {
    	      // Empty
        }

        public Builder(IpSecurityRestrictionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.headers = defaults.headers;
    	      this.ipAddress = defaults.ipAddress;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.subnetMask = defaults.subnetMask;
    	      this.subnetTrafficTag = defaults.subnetTrafficTag;
    	      this.tag = defaults.tag;
    	      this.vnetSubnetResourceId = defaults.vnetSubnetResourceId;
    	      this.vnetTrafficTag = defaults.vnetTrafficTag;
        }

        public Builder action(@Nullable Output<String> action) {
            this.action = action;
            return this;
        }
        public Builder action(@Nullable String action) {
            this.action = Codegen.ofNullable(action);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder headers(@Nullable Output<Map<String,List<String>>> headers) {
            this.headers = headers;
            return this;
        }
        public Builder headers(@Nullable Map<String,List<String>> headers) {
            this.headers = Codegen.ofNullable(headers);
            return this;
        }
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = Codegen.ofNullable(ipAddress);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder priority(@Nullable Output<Integer> priority) {
            this.priority = priority;
            return this;
        }
        public Builder priority(@Nullable Integer priority) {
            this.priority = Codegen.ofNullable(priority);
            return this;
        }
        public Builder subnetMask(@Nullable Output<String> subnetMask) {
            this.subnetMask = subnetMask;
            return this;
        }
        public Builder subnetMask(@Nullable String subnetMask) {
            this.subnetMask = Codegen.ofNullable(subnetMask);
            return this;
        }
        public Builder subnetTrafficTag(@Nullable Output<Integer> subnetTrafficTag) {
            this.subnetTrafficTag = subnetTrafficTag;
            return this;
        }
        public Builder subnetTrafficTag(@Nullable Integer subnetTrafficTag) {
            this.subnetTrafficTag = Codegen.ofNullable(subnetTrafficTag);
            return this;
        }
        public Builder tag(@Nullable Output<Either<String,IpFilterTag>> tag) {
            this.tag = tag;
            return this;
        }
        public Builder tag(@Nullable Either<String,IpFilterTag> tag) {
            this.tag = Codegen.ofNullable(tag);
            return this;
        }
        public Builder vnetSubnetResourceId(@Nullable Output<String> vnetSubnetResourceId) {
            this.vnetSubnetResourceId = vnetSubnetResourceId;
            return this;
        }
        public Builder vnetSubnetResourceId(@Nullable String vnetSubnetResourceId) {
            this.vnetSubnetResourceId = Codegen.ofNullable(vnetSubnetResourceId);
            return this;
        }
        public Builder vnetTrafficTag(@Nullable Output<Integer> vnetTrafficTag) {
            this.vnetTrafficTag = vnetTrafficTag;
            return this;
        }
        public Builder vnetTrafficTag(@Nullable Integer vnetTrafficTag) {
            this.vnetTrafficTag = Codegen.ofNullable(vnetTrafficTag);
            return this;
        }        public IpSecurityRestrictionArgs build() {
            return new IpSecurityRestrictionArgs(action, description, headers, ipAddress, name, priority, subnetMask, subnetTrafficTag, tag, vnetSubnetResourceId, vnetTrafficTag);
        }
    }
}
