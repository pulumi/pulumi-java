// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.PipelineReferenceResponse;
import io.pulumi.azurenative.datafactory.inputs.TriggerPipelineReferenceResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
 * 
 */
public final class ChainingTriggerResponse extends io.pulumi.resources.InvokeArgs {

    public static final ChainingTriggerResponse Empty = new ChainingTriggerResponse();

    /**
     * List of tags that can be used for describing the trigger.
     * 
     */
    @Import(name="annotations")
      private final @Nullable List<Object> annotations;

    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }

    /**
     * Upstream Pipelines.
     * 
     */
    @Import(name="dependsOn", required=true)
      private final List<PipelineReferenceResponse> dependsOn;

    public List<PipelineReferenceResponse> dependsOn() {
        return this.dependsOn;
    }

    /**
     * Trigger description.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> description() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * Pipeline for which runs are created when all upstream pipelines complete successfully.
     * 
     */
    @Import(name="pipeline", required=true)
      private final TriggerPipelineReferenceResponse pipeline;

    public TriggerPipelineReferenceResponse pipeline() {
        return this.pipeline;
    }

    /**
     * Run Dimension property that needs to be emitted by upstream pipelines.
     * 
     */
    @Import(name="runDimension", required=true)
      private final String runDimension;

    public String runDimension() {
        return this.runDimension;
    }

    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    @Import(name="runtimeState", required=true)
      private final String runtimeState;

    public String runtimeState() {
        return this.runtimeState;
    }

    /**
     * Trigger type.
     * Expected value is 'ChainingTrigger'.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public ChainingTriggerResponse(
        @Nullable List<Object> annotations,
        List<PipelineReferenceResponse> dependsOn,
        @Nullable String description,
        TriggerPipelineReferenceResponse pipeline,
        String runDimension,
        String runtimeState,
        String type) {
        this.annotations = annotations;
        this.dependsOn = Objects.requireNonNull(dependsOn, "expected parameter 'dependsOn' to be non-null");
        this.description = description;
        this.pipeline = Objects.requireNonNull(pipeline, "expected parameter 'pipeline' to be non-null");
        this.runDimension = Objects.requireNonNull(runDimension, "expected parameter 'runDimension' to be non-null");
        this.runtimeState = Objects.requireNonNull(runtimeState, "expected parameter 'runtimeState' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ChainingTriggerResponse() {
        this.annotations = List.of();
        this.dependsOn = List.of();
        this.description = null;
        this.pipeline = null;
        this.runDimension = null;
        this.runtimeState = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChainingTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<Object> annotations;
        private List<PipelineReferenceResponse> dependsOn;
        private @Nullable String description;
        private TriggerPipelineReferenceResponse pipeline;
        private String runDimension;
        private String runtimeState;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(ChainingTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.pipeline = defaults.pipeline;
    	      this.runDimension = defaults.runDimension;
    	      this.runtimeState = defaults.runtimeState;
    	      this.type = defaults.type;
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        public Builder dependsOn(List<PipelineReferenceResponse> dependsOn) {
            this.dependsOn = Objects.requireNonNull(dependsOn);
            return this;
        }
        public Builder dependsOn(PipelineReferenceResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder pipeline(TriggerPipelineReferenceResponse pipeline) {
            this.pipeline = Objects.requireNonNull(pipeline);
            return this;
        }
        public Builder runDimension(String runDimension) {
            this.runDimension = Objects.requireNonNull(runDimension);
            return this;
        }
        public Builder runtimeState(String runtimeState) {
            this.runtimeState = Objects.requireNonNull(runtimeState);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public ChainingTriggerResponse build() {
            return new ChainingTriggerResponse(annotations, dependsOn, description, pipeline, runDimension, runtimeState, type);
        }
    }
}
