// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.peering;

import io.pulumi.azurenative.peering.inputs.PeeringServiceSkuArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PeeringServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final PeeringServiceArgs Empty = new PeeringServiceArgs();

    /**
     * The location of the resource.
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The location (state/province) of the customer.
     * 
     */
    @InputImport(name="peeringServiceLocation")
    private final @Nullable Input<String> peeringServiceLocation;

    public Input<String> getPeeringServiceLocation() {
        return this.peeringServiceLocation == null ? Input.empty() : this.peeringServiceLocation;
    }

    /**
     * The name of the peering service.
     * 
     */
    @InputImport(name="peeringServiceName")
    private final @Nullable Input<String> peeringServiceName;

    public Input<String> getPeeringServiceName() {
        return this.peeringServiceName == null ? Input.empty() : this.peeringServiceName;
    }

    /**
     * The name of the service provider.
     * 
     */
    @InputImport(name="peeringServiceProvider")
    private final @Nullable Input<String> peeringServiceProvider;

    public Input<String> getPeeringServiceProvider() {
        return this.peeringServiceProvider == null ? Input.empty() : this.peeringServiceProvider;
    }

    /**
     * The backup peering (Microsoft/service provider) location to be used for customer traffic.
     * 
     */
    @InputImport(name="providerBackupPeeringLocation")
    private final @Nullable Input<String> providerBackupPeeringLocation;

    public Input<String> getProviderBackupPeeringLocation() {
        return this.providerBackupPeeringLocation == null ? Input.empty() : this.providerBackupPeeringLocation;
    }

    /**
     * The primary peering (Microsoft/service provider) location to be used for customer traffic.
     * 
     */
    @InputImport(name="providerPrimaryPeeringLocation")
    private final @Nullable Input<String> providerPrimaryPeeringLocation;

    public Input<String> getProviderPrimaryPeeringLocation() {
        return this.providerPrimaryPeeringLocation == null ? Input.empty() : this.providerPrimaryPeeringLocation;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SKU that defines the type of the peering service.
     * 
     */
    @InputImport(name="sku")
    private final @Nullable Input<PeeringServiceSkuArgs> sku;

    public Input<PeeringServiceSkuArgs> getSku() {
        return this.sku == null ? Input.empty() : this.sku;
    }

    /**
     * The resource tags.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public PeeringServiceArgs(
        @Nullable Input<String> location,
        @Nullable Input<String> peeringServiceLocation,
        @Nullable Input<String> peeringServiceName,
        @Nullable Input<String> peeringServiceProvider,
        @Nullable Input<String> providerBackupPeeringLocation,
        @Nullable Input<String> providerPrimaryPeeringLocation,
        Input<String> resourceGroupName,
        @Nullable Input<PeeringServiceSkuArgs> sku,
        @Nullable Input<Map<String,String>> tags) {
        this.location = location;
        this.peeringServiceLocation = peeringServiceLocation;
        this.peeringServiceName = peeringServiceName;
        this.peeringServiceProvider = peeringServiceProvider;
        this.providerBackupPeeringLocation = providerBackupPeeringLocation;
        this.providerPrimaryPeeringLocation = providerPrimaryPeeringLocation;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.tags = tags;
    }

    private PeeringServiceArgs() {
        this.location = Input.empty();
        this.peeringServiceLocation = Input.empty();
        this.peeringServiceName = Input.empty();
        this.peeringServiceProvider = Input.empty();
        this.providerBackupPeeringLocation = Input.empty();
        this.providerPrimaryPeeringLocation = Input.empty();
        this.resourceGroupName = Input.empty();
        this.sku = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PeeringServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> location;
        private @Nullable Input<String> peeringServiceLocation;
        private @Nullable Input<String> peeringServiceName;
        private @Nullable Input<String> peeringServiceProvider;
        private @Nullable Input<String> providerBackupPeeringLocation;
        private @Nullable Input<String> providerPrimaryPeeringLocation;
        private Input<String> resourceGroupName;
        private @Nullable Input<PeeringServiceSkuArgs> sku;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(PeeringServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.location = defaults.location;
    	      this.peeringServiceLocation = defaults.peeringServiceLocation;
    	      this.peeringServiceName = defaults.peeringServiceName;
    	      this.peeringServiceProvider = defaults.peeringServiceProvider;
    	      this.providerBackupPeeringLocation = defaults.providerBackupPeeringLocation;
    	      this.providerPrimaryPeeringLocation = defaults.providerPrimaryPeeringLocation;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setPeeringServiceLocation(@Nullable Input<String> peeringServiceLocation) {
            this.peeringServiceLocation = peeringServiceLocation;
            return this;
        }

        public Builder setPeeringServiceLocation(@Nullable String peeringServiceLocation) {
            this.peeringServiceLocation = Input.ofNullable(peeringServiceLocation);
            return this;
        }

        public Builder setPeeringServiceName(@Nullable Input<String> peeringServiceName) {
            this.peeringServiceName = peeringServiceName;
            return this;
        }

        public Builder setPeeringServiceName(@Nullable String peeringServiceName) {
            this.peeringServiceName = Input.ofNullable(peeringServiceName);
            return this;
        }

        public Builder setPeeringServiceProvider(@Nullable Input<String> peeringServiceProvider) {
            this.peeringServiceProvider = peeringServiceProvider;
            return this;
        }

        public Builder setPeeringServiceProvider(@Nullable String peeringServiceProvider) {
            this.peeringServiceProvider = Input.ofNullable(peeringServiceProvider);
            return this;
        }

        public Builder setProviderBackupPeeringLocation(@Nullable Input<String> providerBackupPeeringLocation) {
            this.providerBackupPeeringLocation = providerBackupPeeringLocation;
            return this;
        }

        public Builder setProviderBackupPeeringLocation(@Nullable String providerBackupPeeringLocation) {
            this.providerBackupPeeringLocation = Input.ofNullable(providerBackupPeeringLocation);
            return this;
        }

        public Builder setProviderPrimaryPeeringLocation(@Nullable Input<String> providerPrimaryPeeringLocation) {
            this.providerPrimaryPeeringLocation = providerPrimaryPeeringLocation;
            return this;
        }

        public Builder setProviderPrimaryPeeringLocation(@Nullable String providerPrimaryPeeringLocation) {
            this.providerPrimaryPeeringLocation = Input.ofNullable(providerPrimaryPeeringLocation);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSku(@Nullable Input<PeeringServiceSkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder setSku(@Nullable PeeringServiceSkuArgs sku) {
            this.sku = Input.ofNullable(sku);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public PeeringServiceArgs build() {
            return new PeeringServiceArgs(location, peeringServiceLocation, peeringServiceName, peeringServiceProvider, providerBackupPeeringLocation, providerPrimaryPeeringLocation, resourceGroupName, sku, tags);
        }
    }
}
