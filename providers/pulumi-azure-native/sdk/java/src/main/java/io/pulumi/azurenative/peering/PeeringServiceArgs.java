// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.peering;

import io.pulumi.azurenative.peering.inputs.PeeringServiceSkuArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PeeringServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final PeeringServiceArgs Empty = new PeeringServiceArgs();

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The location (state/province) of the customer.
     * 
     */
    @Import(name="peeringServiceLocation")
      private final @Nullable Output<String> peeringServiceLocation;

    public Output<String> getPeeringServiceLocation() {
        return this.peeringServiceLocation == null ? Output.empty() : this.peeringServiceLocation;
    }

    /**
     * The name of the peering service.
     * 
     */
    @Import(name="peeringServiceName")
      private final @Nullable Output<String> peeringServiceName;

    public Output<String> getPeeringServiceName() {
        return this.peeringServiceName == null ? Output.empty() : this.peeringServiceName;
    }

    /**
     * The name of the service provider.
     * 
     */
    @Import(name="peeringServiceProvider")
      private final @Nullable Output<String> peeringServiceProvider;

    public Output<String> getPeeringServiceProvider() {
        return this.peeringServiceProvider == null ? Output.empty() : this.peeringServiceProvider;
    }

    /**
     * The backup peering (Microsoft/service provider) location to be used for customer traffic.
     * 
     */
    @Import(name="providerBackupPeeringLocation")
      private final @Nullable Output<String> providerBackupPeeringLocation;

    public Output<String> getProviderBackupPeeringLocation() {
        return this.providerBackupPeeringLocation == null ? Output.empty() : this.providerBackupPeeringLocation;
    }

    /**
     * The primary peering (Microsoft/service provider) location to be used for customer traffic.
     * 
     */
    @Import(name="providerPrimaryPeeringLocation")
      private final @Nullable Output<String> providerPrimaryPeeringLocation;

    public Output<String> getProviderPrimaryPeeringLocation() {
        return this.providerPrimaryPeeringLocation == null ? Output.empty() : this.providerPrimaryPeeringLocation;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SKU that defines the type of the peering service.
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<PeeringServiceSkuArgs> sku;

    public Output<PeeringServiceSkuArgs> getSku() {
        return this.sku == null ? Output.empty() : this.sku;
    }

    /**
     * The resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public PeeringServiceArgs(
        @Nullable Output<String> location,
        @Nullable Output<String> peeringServiceLocation,
        @Nullable Output<String> peeringServiceName,
        @Nullable Output<String> peeringServiceProvider,
        @Nullable Output<String> providerBackupPeeringLocation,
        @Nullable Output<String> providerPrimaryPeeringLocation,
        Output<String> resourceGroupName,
        @Nullable Output<PeeringServiceSkuArgs> sku,
        @Nullable Output<Map<String,String>> tags) {
        this.location = location;
        this.peeringServiceLocation = peeringServiceLocation;
        this.peeringServiceName = peeringServiceName;
        this.peeringServiceProvider = peeringServiceProvider;
        this.providerBackupPeeringLocation = providerBackupPeeringLocation;
        this.providerPrimaryPeeringLocation = providerPrimaryPeeringLocation;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.tags = tags;
    }

    private PeeringServiceArgs() {
        this.location = Output.empty();
        this.peeringServiceLocation = Output.empty();
        this.peeringServiceName = Output.empty();
        this.peeringServiceProvider = Output.empty();
        this.providerBackupPeeringLocation = Output.empty();
        this.providerPrimaryPeeringLocation = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sku = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PeeringServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> location;
        private @Nullable Output<String> peeringServiceLocation;
        private @Nullable Output<String> peeringServiceName;
        private @Nullable Output<String> peeringServiceProvider;
        private @Nullable Output<String> providerBackupPeeringLocation;
        private @Nullable Output<String> providerPrimaryPeeringLocation;
        private Output<String> resourceGroupName;
        private @Nullable Output<PeeringServiceSkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(PeeringServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.location = defaults.location;
    	      this.peeringServiceLocation = defaults.peeringServiceLocation;
    	      this.peeringServiceName = defaults.peeringServiceName;
    	      this.peeringServiceProvider = defaults.peeringServiceProvider;
    	      this.providerBackupPeeringLocation = defaults.providerBackupPeeringLocation;
    	      this.providerPrimaryPeeringLocation = defaults.providerPrimaryPeeringLocation;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder peeringServiceLocation(@Nullable Output<String> peeringServiceLocation) {
            this.peeringServiceLocation = peeringServiceLocation;
            return this;
        }

        public Builder peeringServiceLocation(@Nullable String peeringServiceLocation) {
            this.peeringServiceLocation = Output.ofNullable(peeringServiceLocation);
            return this;
        }

        public Builder peeringServiceName(@Nullable Output<String> peeringServiceName) {
            this.peeringServiceName = peeringServiceName;
            return this;
        }

        public Builder peeringServiceName(@Nullable String peeringServiceName) {
            this.peeringServiceName = Output.ofNullable(peeringServiceName);
            return this;
        }

        public Builder peeringServiceProvider(@Nullable Output<String> peeringServiceProvider) {
            this.peeringServiceProvider = peeringServiceProvider;
            return this;
        }

        public Builder peeringServiceProvider(@Nullable String peeringServiceProvider) {
            this.peeringServiceProvider = Output.ofNullable(peeringServiceProvider);
            return this;
        }

        public Builder providerBackupPeeringLocation(@Nullable Output<String> providerBackupPeeringLocation) {
            this.providerBackupPeeringLocation = providerBackupPeeringLocation;
            return this;
        }

        public Builder providerBackupPeeringLocation(@Nullable String providerBackupPeeringLocation) {
            this.providerBackupPeeringLocation = Output.ofNullable(providerBackupPeeringLocation);
            return this;
        }

        public Builder providerPrimaryPeeringLocation(@Nullable Output<String> providerPrimaryPeeringLocation) {
            this.providerPrimaryPeeringLocation = providerPrimaryPeeringLocation;
            return this;
        }

        public Builder providerPrimaryPeeringLocation(@Nullable String providerPrimaryPeeringLocation) {
            this.providerPrimaryPeeringLocation = Output.ofNullable(providerPrimaryPeeringLocation);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder sku(@Nullable Output<PeeringServiceSkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder sku(@Nullable PeeringServiceSkuArgs sku) {
            this.sku = Output.ofNullable(sku);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public PeeringServiceArgs build() {
            return new PeeringServiceArgs(location, peeringServiceLocation, peeringServiceName, peeringServiceProvider, providerBackupPeeringLocation, providerPrimaryPeeringLocation, resourceGroupName, sku, tags);
        }
    }
}
