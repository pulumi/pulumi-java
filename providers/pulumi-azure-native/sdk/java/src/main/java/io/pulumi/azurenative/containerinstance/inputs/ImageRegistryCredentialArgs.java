// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerinstance.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Image registry credential.
 * 
 */
public final class ImageRegistryCredentialArgs extends io.pulumi.resources.ResourceArgs {

    public static final ImageRegistryCredentialArgs Empty = new ImageRegistryCredentialArgs();

    /**
     * The password for the private registry.
     * 
     */
    @Import(name="password")
      private final @Nullable Output<String> password;

    public Output<String> getPassword() {
        return this.password == null ? Output.empty() : this.password;
    }

    /**
     * The Docker image registry server without a protocol such as "http" and "https".
     * 
     */
    @Import(name="server", required=true)
      private final Output<String> server;

    public Output<String> getServer() {
        return this.server;
    }

    /**
     * The username for the private registry.
     * 
     */
    @Import(name="username", required=true)
      private final Output<String> username;

    public Output<String> getUsername() {
        return this.username;
    }

    public ImageRegistryCredentialArgs(
        @Nullable Output<String> password,
        Output<String> server,
        Output<String> username) {
        this.password = password;
        this.server = Objects.requireNonNull(server, "expected parameter 'server' to be non-null");
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
    }

    private ImageRegistryCredentialArgs() {
        this.password = Output.empty();
        this.server = Output.empty();
        this.username = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageRegistryCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> password;
        private Output<String> server;
        private Output<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageRegistryCredentialArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.password = defaults.password;
    	      this.server = defaults.server;
    	      this.username = defaults.username;
        }

        public Builder password(@Nullable Output<String> password) {
            this.password = password;
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = Output.ofNullable(password);
            return this;
        }
        public Builder server(Output<String> server) {
            this.server = Objects.requireNonNull(server);
            return this;
        }
        public Builder server(String server) {
            this.server = Output.of(Objects.requireNonNull(server));
            return this;
        }
        public Builder username(Output<String> username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public Builder username(String username) {
            this.username = Output.of(Objects.requireNonNull(username));
            return this;
        }        public ImageRegistryCredentialArgs build() {
            return new ImageRegistryCredentialArgs(password, server, username);
        }
    }
}
