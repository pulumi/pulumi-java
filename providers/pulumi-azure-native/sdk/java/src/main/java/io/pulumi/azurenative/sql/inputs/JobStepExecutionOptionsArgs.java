// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The execution options of a job step.
 * 
 */
public final class JobStepExecutionOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobStepExecutionOptionsArgs Empty = new JobStepExecutionOptionsArgs();

    /**
     * Initial delay between retries for job step execution.
     * 
     */
    @Import(name="initialRetryIntervalSeconds")
      private final @Nullable Output<Integer> initialRetryIntervalSeconds;

    public Output<Integer> getInitialRetryIntervalSeconds() {
        return this.initialRetryIntervalSeconds == null ? Codegen.empty() : this.initialRetryIntervalSeconds;
    }

    /**
     * The maximum amount of time to wait between retries for job step execution.
     * 
     */
    @Import(name="maximumRetryIntervalSeconds")
      private final @Nullable Output<Integer> maximumRetryIntervalSeconds;

    public Output<Integer> getMaximumRetryIntervalSeconds() {
        return this.maximumRetryIntervalSeconds == null ? Codegen.empty() : this.maximumRetryIntervalSeconds;
    }

    /**
     * Maximum number of times the job step will be reattempted if the first attempt fails.
     * 
     */
    @Import(name="retryAttempts")
      private final @Nullable Output<Integer> retryAttempts;

    public Output<Integer> getRetryAttempts() {
        return this.retryAttempts == null ? Codegen.empty() : this.retryAttempts;
    }

    /**
     * The backoff multiplier for the time between retries.
     * 
     */
    @Import(name="retryIntervalBackoffMultiplier")
      private final @Nullable Output<Double> retryIntervalBackoffMultiplier;

    public Output<Double> getRetryIntervalBackoffMultiplier() {
        return this.retryIntervalBackoffMultiplier == null ? Codegen.empty() : this.retryIntervalBackoffMultiplier;
    }

    /**
     * Execution timeout for the job step.
     * 
     */
    @Import(name="timeoutSeconds")
      private final @Nullable Output<Integer> timeoutSeconds;

    public Output<Integer> getTimeoutSeconds() {
        return this.timeoutSeconds == null ? Codegen.empty() : this.timeoutSeconds;
    }

    public JobStepExecutionOptionsArgs(
        @Nullable Output<Integer> initialRetryIntervalSeconds,
        @Nullable Output<Integer> maximumRetryIntervalSeconds,
        @Nullable Output<Integer> retryAttempts,
        @Nullable Output<Double> retryIntervalBackoffMultiplier,
        @Nullable Output<Integer> timeoutSeconds) {
        this.initialRetryIntervalSeconds = initialRetryIntervalSeconds == null ? Codegen.ofNullable(1) : initialRetryIntervalSeconds;
        this.maximumRetryIntervalSeconds = maximumRetryIntervalSeconds == null ? Codegen.ofNullable(120) : maximumRetryIntervalSeconds;
        this.retryAttempts = retryAttempts == null ? Codegen.ofNullable(10) : retryAttempts;
        this.retryIntervalBackoffMultiplier = retryIntervalBackoffMultiplier == null ? Codegen.ofNullable(2e+00) : retryIntervalBackoffMultiplier;
        this.timeoutSeconds = timeoutSeconds == null ? Codegen.ofNullable(43200) : timeoutSeconds;
    }

    private JobStepExecutionOptionsArgs() {
        this.initialRetryIntervalSeconds = Codegen.empty();
        this.maximumRetryIntervalSeconds = Codegen.empty();
        this.retryAttempts = Codegen.empty();
        this.retryIntervalBackoffMultiplier = Codegen.empty();
        this.timeoutSeconds = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobStepExecutionOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> initialRetryIntervalSeconds;
        private @Nullable Output<Integer> maximumRetryIntervalSeconds;
        private @Nullable Output<Integer> retryAttempts;
        private @Nullable Output<Double> retryIntervalBackoffMultiplier;
        private @Nullable Output<Integer> timeoutSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(JobStepExecutionOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.initialRetryIntervalSeconds = defaults.initialRetryIntervalSeconds;
    	      this.maximumRetryIntervalSeconds = defaults.maximumRetryIntervalSeconds;
    	      this.retryAttempts = defaults.retryAttempts;
    	      this.retryIntervalBackoffMultiplier = defaults.retryIntervalBackoffMultiplier;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        public Builder initialRetryIntervalSeconds(@Nullable Output<Integer> initialRetryIntervalSeconds) {
            this.initialRetryIntervalSeconds = initialRetryIntervalSeconds;
            return this;
        }
        public Builder initialRetryIntervalSeconds(@Nullable Integer initialRetryIntervalSeconds) {
            this.initialRetryIntervalSeconds = Codegen.ofNullable(initialRetryIntervalSeconds);
            return this;
        }
        public Builder maximumRetryIntervalSeconds(@Nullable Output<Integer> maximumRetryIntervalSeconds) {
            this.maximumRetryIntervalSeconds = maximumRetryIntervalSeconds;
            return this;
        }
        public Builder maximumRetryIntervalSeconds(@Nullable Integer maximumRetryIntervalSeconds) {
            this.maximumRetryIntervalSeconds = Codegen.ofNullable(maximumRetryIntervalSeconds);
            return this;
        }
        public Builder retryAttempts(@Nullable Output<Integer> retryAttempts) {
            this.retryAttempts = retryAttempts;
            return this;
        }
        public Builder retryAttempts(@Nullable Integer retryAttempts) {
            this.retryAttempts = Codegen.ofNullable(retryAttempts);
            return this;
        }
        public Builder retryIntervalBackoffMultiplier(@Nullable Output<Double> retryIntervalBackoffMultiplier) {
            this.retryIntervalBackoffMultiplier = retryIntervalBackoffMultiplier;
            return this;
        }
        public Builder retryIntervalBackoffMultiplier(@Nullable Double retryIntervalBackoffMultiplier) {
            this.retryIntervalBackoffMultiplier = Codegen.ofNullable(retryIntervalBackoffMultiplier);
            return this;
        }
        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = Codegen.ofNullable(timeoutSeconds);
            return this;
        }        public JobStepExecutionOptionsArgs build() {
            return new JobStepExecutionOptionsArgs(initialRetryIntervalSeconds, maximumRetryIntervalSeconds, retryAttempts, retryIntervalBackoffMultiplier, timeoutSeconds);
        }
    }
}
