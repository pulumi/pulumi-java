// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.batch.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CIFSMountConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final CIFSMountConfigurationArgs Empty = new CIFSMountConfigurationArgs();

    @InputImport(name="mountOptions")
    private final @Nullable Input<String> mountOptions;

    public Input<String> getMountOptions() {
        return this.mountOptions == null ? Input.empty() : this.mountOptions;
    }

    @InputImport(name="password", required=true)
    private final Input<String> password;

    public Input<String> getPassword() {
        return this.password;
    }

    @InputImport(name="relativeMountPath", required=true)
    private final Input<String> relativeMountPath;

    public Input<String> getRelativeMountPath() {
        return this.relativeMountPath;
    }

    @InputImport(name="source", required=true)
    private final Input<String> source;

    public Input<String> getSource() {
        return this.source;
    }

    @InputImport(name="username", required=true)
    private final Input<String> username;

    public Input<String> getUsername() {
        return this.username;
    }

    public CIFSMountConfigurationArgs(
        @Nullable Input<String> mountOptions,
        Input<String> password,
        Input<String> relativeMountPath,
        Input<String> source,
        Input<String> username) {
        this.mountOptions = mountOptions;
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.relativeMountPath = Objects.requireNonNull(relativeMountPath, "expected parameter 'relativeMountPath' to be non-null");
        this.source = Objects.requireNonNull(source, "expected parameter 'source' to be non-null");
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
    }

    private CIFSMountConfigurationArgs() {
        this.mountOptions = Input.empty();
        this.password = Input.empty();
        this.relativeMountPath = Input.empty();
        this.source = Input.empty();
        this.username = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CIFSMountConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> mountOptions;
        private Input<String> password;
        private Input<String> relativeMountPath;
        private Input<String> source;
        private Input<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(CIFSMountConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mountOptions = defaults.mountOptions;
    	      this.password = defaults.password;
    	      this.relativeMountPath = defaults.relativeMountPath;
    	      this.source = defaults.source;
    	      this.username = defaults.username;
        }

        public Builder setMountOptions(@Nullable Input<String> mountOptions) {
            this.mountOptions = mountOptions;
            return this;
        }

        public Builder setMountOptions(@Nullable String mountOptions) {
            this.mountOptions = Input.ofNullable(mountOptions);
            return this;
        }

        public Builder setPassword(Input<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder setPassword(String password) {
            this.password = Input.of(Objects.requireNonNull(password));
            return this;
        }

        public Builder setRelativeMountPath(Input<String> relativeMountPath) {
            this.relativeMountPath = Objects.requireNonNull(relativeMountPath);
            return this;
        }

        public Builder setRelativeMountPath(String relativeMountPath) {
            this.relativeMountPath = Input.of(Objects.requireNonNull(relativeMountPath));
            return this;
        }

        public Builder setSource(Input<String> source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }

        public Builder setSource(String source) {
            this.source = Input.of(Objects.requireNonNull(source));
            return this;
        }

        public Builder setUsername(Input<String> username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }

        public Builder setUsername(String username) {
            this.username = Input.of(Objects.requireNonNull(username));
            return this;
        }

        public CIFSMountConfigurationArgs build() {
            return new CIFSMountConfigurationArgs(mountOptions, password, relativeMountPath, source, username);
        }
    }
}
