// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.compute.VirtualMachineArgs;
import io.pulumi.azurenative.compute.outputs.AdditionalCapabilitiesResponse;
import io.pulumi.azurenative.compute.outputs.BillingProfileResponse;
import io.pulumi.azurenative.compute.outputs.DiagnosticsProfileResponse;
import io.pulumi.azurenative.compute.outputs.ExtendedLocationResponse;
import io.pulumi.azurenative.compute.outputs.HardwareProfileResponse;
import io.pulumi.azurenative.compute.outputs.NetworkProfileResponse;
import io.pulumi.azurenative.compute.outputs.OSProfileResponse;
import io.pulumi.azurenative.compute.outputs.PlanResponse;
import io.pulumi.azurenative.compute.outputs.ScheduledEventsProfileResponse;
import io.pulumi.azurenative.compute.outputs.SecurityProfileResponse;
import io.pulumi.azurenative.compute.outputs.StorageProfileResponse;
import io.pulumi.azurenative.compute.outputs.SubResourceResponse;
import io.pulumi.azurenative.compute.outputs.VirtualMachineExtensionResponse;
import io.pulumi.azurenative.compute.outputs.VirtualMachineIdentityResponse;
import io.pulumi.azurenative.compute.outputs.VirtualMachineInstanceViewResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Describes a Virtual Machine.
 * API Version: 2021-03-01.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Create a Linux vm with a patch setting assessmentMode of ImageDefault.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D2s_v3",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *                 LinuxConfiguration = new AzureNative.Compute.Inputs.LinuxConfigurationArgs
 *                 {
 *                     PatchSettings = new AzureNative.Compute.Inputs.LinuxPatchSettingsArgs
 *                     {
 *                         AssessmentMode = "ImageDefault",
 *                     },
 *                     ProvisionVMAgent = true,
 *                 },
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "UbuntuServer",
 *                     Publisher = "Canonical",
 *                     Sku = "16.04-LTS",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Premium_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D2s_v3"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 				LinuxConfiguration: &compute.LinuxConfigurationArgs{
 * 					PatchSettings: &compute.LinuxPatchSettingsArgs{
 * 						AssessmentMode: pulumi.String("ImageDefault"),
 * 					},
 * 					ProvisionVMAgent: pulumi.Bool(true),
 * 				},
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("UbuntuServer"),
 * 					Publisher: pulumi.String("Canonical"),
 * 					Sku:       pulumi.String("16.04-LTS"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Premium_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D2s_v3",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *         linuxConfiguration: {
 *             patchSettings: {
 *                 assessmentMode: "ImageDefault",
 *             },
 *             provisionVMAgent: true,
 *         },
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "UbuntuServer",
 *             publisher: "Canonical",
 *             sku: "16.04-LTS",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Premium_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D2s_v3",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *         linux_configuration=azure_native.compute.LinuxConfigurationArgs(
 *             patch_settings=azure_native.compute.LinuxPatchSettingsArgs(
 *                 assessment_mode="ImageDefault",
 *             ),
 *             provision_vm_agent=True,
 *         ),
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="UbuntuServer",
 *             publisher="Canonical",
 *             sku="16.04-LTS",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Premium_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a Linux vm with a patch setting patchMode of ImageDefault.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D2s_v3",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *                 LinuxConfiguration = new AzureNative.Compute.Inputs.LinuxConfigurationArgs
 *                 {
 *                     PatchSettings = new AzureNative.Compute.Inputs.LinuxPatchSettingsArgs
 *                     {
 *                         PatchMode = "ImageDefault",
 *                     },
 *                     ProvisionVMAgent = true,
 *                 },
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "UbuntuServer",
 *                     Publisher = "Canonical",
 *                     Sku = "16.04-LTS",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Premium_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D2s_v3"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 				LinuxConfiguration: &compute.LinuxConfigurationArgs{
 * 					PatchSettings: &compute.LinuxPatchSettingsArgs{
 * 						PatchMode: pulumi.String("ImageDefault"),
 * 					},
 * 					ProvisionVMAgent: pulumi.Bool(true),
 * 				},
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("UbuntuServer"),
 * 					Publisher: pulumi.String("Canonical"),
 * 					Sku:       pulumi.String("16.04-LTS"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Premium_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D2s_v3",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *         linuxConfiguration: {
 *             patchSettings: {
 *                 patchMode: "ImageDefault",
 *             },
 *             provisionVMAgent: true,
 *         },
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "UbuntuServer",
 *             publisher: "Canonical",
 *             sku: "16.04-LTS",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Premium_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D2s_v3",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *         linux_configuration=azure_native.compute.LinuxConfigurationArgs(
 *             patch_settings=azure_native.compute.LinuxPatchSettingsArgs(
 *                 patch_mode="ImageDefault",
 *             ),
 *             provision_vm_agent=True,
 *         ),
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="UbuntuServer",
 *             publisher="Canonical",
 *             sku="16.04-LTS",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Premium_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a Linux vm with a patch settings patchMode and assessmentMode set to AutomaticByPlatform.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D2s_v3",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *                 LinuxConfiguration = new AzureNative.Compute.Inputs.LinuxConfigurationArgs
 *                 {
 *                     PatchSettings = new AzureNative.Compute.Inputs.LinuxPatchSettingsArgs
 *                     {
 *                         AssessmentMode = "AutomaticByPlatform",
 *                         PatchMode = "AutomaticByPlatform",
 *                     },
 *                     ProvisionVMAgent = true,
 *                 },
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "UbuntuServer",
 *                     Publisher = "Canonical",
 *                     Sku = "16.04-LTS",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Premium_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D2s_v3"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 				LinuxConfiguration: &compute.LinuxConfigurationArgs{
 * 					PatchSettings: &compute.LinuxPatchSettingsArgs{
 * 						AssessmentMode: pulumi.String("AutomaticByPlatform"),
 * 						PatchMode:      pulumi.String("AutomaticByPlatform"),
 * 					},
 * 					ProvisionVMAgent: pulumi.Bool(true),
 * 				},
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("UbuntuServer"),
 * 					Publisher: pulumi.String("Canonical"),
 * 					Sku:       pulumi.String("16.04-LTS"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Premium_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D2s_v3",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *         linuxConfiguration: {
 *             patchSettings: {
 *                 assessmentMode: "AutomaticByPlatform",
 *                 patchMode: "AutomaticByPlatform",
 *             },
 *             provisionVMAgent: true,
 *         },
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "UbuntuServer",
 *             publisher: "Canonical",
 *             sku: "16.04-LTS",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Premium_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D2s_v3",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *         linux_configuration=azure_native.compute.LinuxConfigurationArgs(
 *             patch_settings=azure_native.compute.LinuxPatchSettingsArgs(
 *                 assessment_mode="AutomaticByPlatform",
 *                 patch_mode="AutomaticByPlatform",
 *             ),
 *             provision_vm_agent=True,
 *         ),
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="UbuntuServer",
 *             publisher="Canonical",
 *             sku="16.04-LTS",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Premium_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a VM with Uefi Settings of secureBoot and vTPM.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D2s_v3",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             SecurityProfile = new AzureNative.Compute.Inputs.SecurityProfileArgs
 *             {
 *                 SecurityType = "TrustedLaunch",
 *                 UefiSettings = new AzureNative.Compute.Inputs.UefiSettingsArgs
 *                 {
 *                     SecureBootEnabled = true,
 *                     VTpmEnabled = true,
 *                 },
 *             },
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "windowsserver-gen2preview-preview",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "windows10-tvm",
 *                     Version = "18363.592.2001092016",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadOnly",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "StandardSSD_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D2s_v3"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			SecurityProfile: &compute.SecurityProfileArgs{
 * 				SecurityType: pulumi.String("TrustedLaunch"),
 * 				UefiSettings: &compute.UefiSettingsArgs{
 * 					SecureBootEnabled: pulumi.Bool(true),
 * 					VTpmEnabled:       pulumi.Bool(true),
 * 				},
 * 			},
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("windowsserver-gen2preview-preview"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("windows10-tvm"),
 * 					Version:   pulumi.String("18363.592.2001092016"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadOnly",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("StandardSSD_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D2s_v3",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     securityProfile: {
 *         securityType: "TrustedLaunch",
 *         uefiSettings: {
 *             secureBootEnabled: true,
 *             vTpmEnabled: true,
 *         },
 *     },
 *     storageProfile: {
 *         imageReference: {
 *             offer: "windowsserver-gen2preview-preview",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "windows10-tvm",
 *             version: "18363.592.2001092016",
 *         },
 *         osDisk: {
 *             caching: "ReadOnly",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "StandardSSD_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D2s_v3",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     security_profile=azure_native.compute.SecurityProfileArgs(
 *         security_type="TrustedLaunch",
 *         uefi_settings=azure_native.compute.UefiSettingsArgs(
 *             secure_boot_enabled=True,
 *             v_tpm_enabled=True,
 *         ),
 *     ),
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="windowsserver-gen2preview-preview",
 *             publisher="MicrosoftWindowsServer",
 *             sku="windows10-tvm",
 *             version="18363.592.2001092016",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadOnly",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="StandardSSD_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a VM with UserData
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             DiagnosticsProfile = new AzureNative.Compute.Inputs.DiagnosticsProfileArgs
 *             {
 *                 BootDiagnostics = new AzureNative.Compute.Inputs.BootDiagnosticsArgs
 *                 {
 *                     Enabled = true,
 *                     StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
 *                 },
 *             },
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "{vm-name}",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "vmOSdisk",
 *                 },
 *             },
 *             UserData = "RXhhbXBsZSBVc2VyRGF0YQ==",
 *             VmName = "{vm-name}",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			DiagnosticsProfile: &compute.DiagnosticsProfileArgs{
 * 				BootDiagnostics: &compute.BootDiagnosticsArgs{
 * 					Enabled:    pulumi.Bool(true),
 * 					StorageUri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net"),
 * 				},
 * 			},
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("{vm-name}"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("vmOSdisk"),
 * 				},
 * 			},
 * 			UserData: pulumi.String("RXhhbXBsZSBVc2VyRGF0YQ=="),
 * 			VmName:   pulumi.String("{vm-name}"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     diagnosticsProfile: {
 *         bootDiagnostics: {
 *             enabled: true,
 *             storageUri: "http://{existing-storage-account-name}.blob.core.windows.net",
 *         },
 *     },
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "{vm-name}",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "vmOSdisk",
 *         },
 *     },
 *     userData: "RXhhbXBsZSBVc2VyRGF0YQ==",
 *     vmName: "{vm-name}",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     diagnostics_profile=azure_native.compute.DiagnosticsProfileArgs(
 *         boot_diagnostics=azure_native.compute.BootDiagnosticsArgs(
 *             enabled=True,
 *             storage_uri="http://{existing-storage-account-name}.blob.core.windows.net",
 *         ),
 *     ),
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="{vm-name}",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="vmOSdisk",
 *         ),
 *     ),
 *     user_data="RXhhbXBsZSBVc2VyRGF0YQ==",
 *     vm_name="{vm-name}")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a VM with network interface configuration
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkApiVersion = "2020-11-01",
 *                 NetworkInterfaceConfigurations = 
 *                 {
 *                     new AzureNative.Compute.Inputs.VirtualMachineNetworkInterfaceConfigurationArgs
 *                     {
 *                         DeleteOption = "Delete",
 *                         IpConfigurations = 
 *                         {
 *                             new AzureNative.Compute.Inputs.VirtualMachineNetworkInterfaceIPConfigurationArgs
 *                             {
 *                                 Name = "{ip-config-name}",
 *                                 Primary = true,
 *                                 PublicIPAddressConfiguration = new AzureNative.Compute.Inputs.VirtualMachinePublicIPAddressConfigurationArgs
 *                                 {
 *                                     DeleteOption = "Detach",
 *                                     Name = "{publicIP-config-name}",
 *                                     PublicIPAllocationMethod = "Static",
 *                                     Sku = new AzureNative.Compute.Inputs.PublicIPAddressSkuArgs
 *                                     {
 *                                         Name = "Basic",
 *                                         Tier = "Global",
 *                                     },
 *                                 },
 *                             },
 *                         },
 *                         Name = "{nic-config-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkApiVersion: pulumi.String("2020-11-01"),
 * 				NetworkInterfaceConfigurations: compute.VirtualMachineNetworkInterfaceConfigurationArray{
 * 					&compute.VirtualMachineNetworkInterfaceConfigurationArgs{
 * 						DeleteOption: pulumi.String("Delete"),
 * 						IpConfigurations: compute.VirtualMachineNetworkInterfaceIPConfigurationArray{
 * 							&compute.VirtualMachineNetworkInterfaceIPConfigurationArgs{
 * 								Name:    pulumi.String("{ip-config-name}"),
 * 								Primary: pulumi.Bool(true),
 * 								PublicIPAddressConfiguration: &compute.VirtualMachinePublicIPAddressConfigurationArgs{
 * 									DeleteOption:             pulumi.String("Detach"),
 * 									Name:                     pulumi.String("{publicIP-config-name}"),
 * 									PublicIPAllocationMethod: pulumi.String("Static"),
 * 									Sku: &compute.PublicIPAddressSkuArgs{
 * 										Name: pulumi.String("Basic"),
 * 										Tier: pulumi.String("Global"),
 * 									},
 * 								},
 * 							},
 * 						},
 * 						Name:    pulumi.String("{nic-config-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkApiVersion: "2020-11-01",
 *         networkInterfaceConfigurations: [{
 *             deleteOption: "Delete",
 *             ipConfigurations: [{
 *                 name: "{ip-config-name}",
 *                 primary: true,
 *                 publicIPAddressConfiguration: {
 *                     deleteOption: "Detach",
 *                     name: "{publicIP-config-name}",
 *                     publicIPAllocationMethod: "Static",
 *                     sku: {
 *                         name: "Basic",
 *                         tier: "Global",
 *                     },
 *                 },
 *             }],
 *             name: "{nic-config-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_api_version="2020-11-01",
 *         network_interface_configurations=[azure_native.compute.VirtualMachineNetworkInterfaceConfigurationArgs(
 *             delete_option="Delete",
 *             ip_configurations=[azure_native.compute.VirtualMachineNetworkInterfaceIPConfigurationArgs(
 *                 name="{ip-config-name}",
 *                 primary=True,
 *                 public_ip_address_configuration=azure_native.compute.VirtualMachinePublicIPAddressConfigurationArgs(
 *                     delete_option="Detach",
 *                     name="{publicIP-config-name}",
 *                     public_ip_allocation_method="Static",
 *                     sku=azure_native.compute.PublicIPAddressSkuArgs(
 *                         name="Basic",
 *                         tier="Global",
 *                     ),
 *                 ),
 *             )],
 *             name="{nic-config-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a Windows vm with a patch setting assessmentMode of ImageDefault.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *                 WindowsConfiguration = new AzureNative.Compute.Inputs.WindowsConfigurationArgs
 *                 {
 *                     EnableAutomaticUpdates = true,
 *                     PatchSettings = new AzureNative.Compute.Inputs.PatchSettingsArgs
 *                     {
 *                         AssessmentMode = "ImageDefault",
 *                     },
 *                     ProvisionVMAgent = true,
 *                 },
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Premium_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 				WindowsConfiguration: &compute.WindowsConfigurationArgs{
 * 					EnableAutomaticUpdates: pulumi.Bool(true),
 * 					PatchSettings: &compute.PatchSettingsArgs{
 * 						AssessmentMode: pulumi.String("ImageDefault"),
 * 					},
 * 					ProvisionVMAgent: pulumi.Bool(true),
 * 				},
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Premium_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *         windowsConfiguration: {
 *             enableAutomaticUpdates: true,
 *             patchSettings: {
 *                 assessmentMode: "ImageDefault",
 *             },
 *             provisionVMAgent: true,
 *         },
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Premium_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *         windows_configuration=azure_native.compute.WindowsConfigurationArgs(
 *             enable_automatic_updates=True,
 *             patch_settings=azure_native.compute.PatchSettingsArgs(
 *                 assessment_mode="ImageDefault",
 *             ),
 *             provision_vm_agent=True,
 *         ),
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Premium_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a Windows vm with a patch setting patchMode of AutomaticByOS.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *                 WindowsConfiguration = new AzureNative.Compute.Inputs.WindowsConfigurationArgs
 *                 {
 *                     EnableAutomaticUpdates = true,
 *                     PatchSettings = new AzureNative.Compute.Inputs.PatchSettingsArgs
 *                     {
 *                         PatchMode = "AutomaticByOS",
 *                     },
 *                     ProvisionVMAgent = true,
 *                 },
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Premium_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 				WindowsConfiguration: &compute.WindowsConfigurationArgs{
 * 					EnableAutomaticUpdates: pulumi.Bool(true),
 * 					PatchSettings: &compute.PatchSettingsArgs{
 * 						PatchMode: pulumi.String("AutomaticByOS"),
 * 					},
 * 					ProvisionVMAgent: pulumi.Bool(true),
 * 				},
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Premium_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *         windowsConfiguration: {
 *             enableAutomaticUpdates: true,
 *             patchSettings: {
 *                 patchMode: "AutomaticByOS",
 *             },
 *             provisionVMAgent: true,
 *         },
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Premium_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *         windows_configuration=azure_native.compute.WindowsConfigurationArgs(
 *             enable_automatic_updates=True,
 *             patch_settings=azure_native.compute.PatchSettingsArgs(
 *                 patch_mode="AutomaticByOS",
 *             ),
 *             provision_vm_agent=True,
 *         ),
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Premium_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a Windows vm with a patch setting patchMode of AutomaticByPlatform and enableHotpatching set to true.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *                 WindowsConfiguration = new AzureNative.Compute.Inputs.WindowsConfigurationArgs
 *                 {
 *                     EnableAutomaticUpdates = true,
 *                     PatchSettings = new AzureNative.Compute.Inputs.PatchSettingsArgs
 *                     {
 *                         EnableHotpatching = true,
 *                         PatchMode = "AutomaticByPlatform",
 *                     },
 *                     ProvisionVMAgent = true,
 *                 },
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Premium_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 				WindowsConfiguration: &compute.WindowsConfigurationArgs{
 * 					EnableAutomaticUpdates: pulumi.Bool(true),
 * 					PatchSettings: &compute.PatchSettingsArgs{
 * 						EnableHotpatching: pulumi.Bool(true),
 * 						PatchMode:         pulumi.String("AutomaticByPlatform"),
 * 					},
 * 					ProvisionVMAgent: pulumi.Bool(true),
 * 				},
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Premium_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *         windowsConfiguration: {
 *             enableAutomaticUpdates: true,
 *             patchSettings: {
 *                 enableHotpatching: true,
 *                 patchMode: "AutomaticByPlatform",
 *             },
 *             provisionVMAgent: true,
 *         },
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Premium_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *         windows_configuration=azure_native.compute.WindowsConfigurationArgs(
 *             enable_automatic_updates=True,
 *             patch_settings=azure_native.compute.PatchSettingsArgs(
 *                 enable_hotpatching=True,
 *                 patch_mode="AutomaticByPlatform",
 *             ),
 *             provision_vm_agent=True,
 *         ),
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Premium_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a Windows vm with a patch setting patchMode of Manual.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *                 WindowsConfiguration = new AzureNative.Compute.Inputs.WindowsConfigurationArgs
 *                 {
 *                     EnableAutomaticUpdates = true,
 *                     PatchSettings = new AzureNative.Compute.Inputs.PatchSettingsArgs
 *                     {
 *                         PatchMode = "Manual",
 *                     },
 *                     ProvisionVMAgent = true,
 *                 },
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Premium_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 				WindowsConfiguration: &compute.WindowsConfigurationArgs{
 * 					EnableAutomaticUpdates: pulumi.Bool(true),
 * 					PatchSettings: &compute.PatchSettingsArgs{
 * 						PatchMode: pulumi.String("Manual"),
 * 					},
 * 					ProvisionVMAgent: pulumi.Bool(true),
 * 				},
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Premium_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *         windowsConfiguration: {
 *             enableAutomaticUpdates: true,
 *             patchSettings: {
 *                 patchMode: "Manual",
 *             },
 *             provisionVMAgent: true,
 *         },
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Premium_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *         windows_configuration=azure_native.compute.WindowsConfigurationArgs(
 *             enable_automatic_updates=True,
 *             patch_settings=azure_native.compute.PatchSettingsArgs(
 *                 patch_mode="Manual",
 *             ),
 *             provision_vm_agent=True,
 *         ),
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Premium_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a Windows vm with patch settings patchMode and assessmentMode set to AutomaticByPlatform.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *                 WindowsConfiguration = new AzureNative.Compute.Inputs.WindowsConfigurationArgs
 *                 {
 *                     EnableAutomaticUpdates = true,
 *                     PatchSettings = new AzureNative.Compute.Inputs.PatchSettingsArgs
 *                     {
 *                         AssessmentMode = "AutomaticByPlatform",
 *                         PatchMode = "AutomaticByPlatform",
 *                     },
 *                     ProvisionVMAgent = true,
 *                 },
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Premium_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 				WindowsConfiguration: &compute.WindowsConfigurationArgs{
 * 					EnableAutomaticUpdates: pulumi.Bool(true),
 * 					PatchSettings: &compute.PatchSettingsArgs{
 * 						AssessmentMode: pulumi.String("AutomaticByPlatform"),
 * 						PatchMode:      pulumi.String("AutomaticByPlatform"),
 * 					},
 * 					ProvisionVMAgent: pulumi.Bool(true),
 * 				},
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Premium_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *         windowsConfiguration: {
 *             enableAutomaticUpdates: true,
 *             patchSettings: {
 *                 assessmentMode: "AutomaticByPlatform",
 *                 patchMode: "AutomaticByPlatform",
 *             },
 *             provisionVMAgent: true,
 *         },
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Premium_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *         windows_configuration=azure_native.compute.WindowsConfigurationArgs(
 *             enable_automatic_updates=True,
 *             patch_settings=azure_native.compute.PatchSettingsArgs(
 *                 assessment_mode="AutomaticByPlatform",
 *                 patch_mode="AutomaticByPlatform",
 *             ),
 *             provision_vm_agent=True,
 *         ),
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Premium_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a custom-image vm from an unmanaged generalized os image.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     Image = new AzureNative.Compute.Inputs.VirtualHardDiskArgs
 *                     {
 *                         Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd",
 *                     },
 *                     Name = "myVMosdisk",
 *                     OsType = "Windows",
 *                     Vhd = new AzureNative.Compute.Inputs.VirtualHardDiskArgs
 *                     {
 *                         Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd",
 *                     },
 *                 },
 *             },
 *             VmName = "{vm-name}",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					Image: &compute.VirtualHardDiskArgs{
 * 						Uri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
 * 					},
 * 					Name:   pulumi.String("myVMosdisk"),
 * 					OsType: "Windows",
 * 					Vhd: &compute.VirtualHardDiskArgs{
 * 						Uri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
 * 					},
 * 				},
 * 			},
 * 			VmName: pulumi.String("{vm-name}"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             image: {
 *                 uri: "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd",
 *             },
 *             name: "myVMosdisk",
 *             osType: "Windows",
 *             vhd: {
 *                 uri: "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd",
 *             },
 *         },
 *     },
 *     vmName: "{vm-name}",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             image=azure_native.compute.VirtualHardDiskArgs(
 *                 uri="http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd",
 *             ),
 *             name="myVMosdisk",
 *             os_type="Windows",
 *             vhd=azure_native.compute.VirtualHardDiskArgs(
 *                 uri="http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd",
 *             ),
 *         ),
 *     ),
 *     vm_name="{vm-name}")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a platform-image vm with unmanaged os and data disks.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D2_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 DataDisks = 
 *                 {
 *                     new AzureNative.Compute.Inputs.DataDiskArgs
 *                     {
 *                         CreateOption = "Empty",
 *                         DiskSizeGB = 1023,
 *                         Lun = 0,
 *                         Vhd = new AzureNative.Compute.Inputs.VirtualHardDiskArgs
 *                         {
 *                             Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk0.vhd",
 *                         },
 *                     },
 *                     new AzureNative.Compute.Inputs.DataDiskArgs
 *                     {
 *                         CreateOption = "Empty",
 *                         DiskSizeGB = 1023,
 *                         Lun = 1,
 *                         Vhd = new AzureNative.Compute.Inputs.VirtualHardDiskArgs
 *                         {
 *                             Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk1.vhd",
 *                         },
 *                     },
 *                 },
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     Name = "myVMosdisk",
 *                     Vhd = new AzureNative.Compute.Inputs.VirtualHardDiskArgs
 *                     {
 *                         Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd",
 *                     },
 *                 },
 *             },
 *             VmName = "{vm-name}",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D2_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				DataDisks: compute.DataDiskArray{
 * 					&compute.DataDiskArgs{
 * 						CreateOption: pulumi.String("Empty"),
 * 						DiskSizeGB:   pulumi.Int(1023),
 * 						Lun:          pulumi.Int(0),
 * 						Vhd: &compute.VirtualHardDiskArgs{
 * 							Uri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk0.vhd"),
 * 						},
 * 					},
 * 					&compute.DataDiskArgs{
 * 						CreateOption: pulumi.String("Empty"),
 * 						DiskSizeGB:   pulumi.Int(1023),
 * 						Lun:          pulumi.Int(1),
 * 						Vhd: &compute.VirtualHardDiskArgs{
 * 							Uri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk1.vhd"),
 * 						},
 * 					},
 * 				},
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					Name:         pulumi.String("myVMosdisk"),
 * 					Vhd: &compute.VirtualHardDiskArgs{
 * 						Uri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
 * 					},
 * 				},
 * 			},
 * 			VmName: pulumi.String("{vm-name}"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D2_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         dataDisks: [
 *             {
 *                 createOption: "Empty",
 *                 diskSizeGB: 1023,
 *                 lun: 0,
 *                 vhd: {
 *                     uri: "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk0.vhd",
 *                 },
 *             },
 *             {
 *                 createOption: "Empty",
 *                 diskSizeGB: 1023,
 *                 lun: 1,
 *                 vhd: {
 *                     uri: "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk1.vhd",
 *                 },
 *             },
 *         ],
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             name: "myVMosdisk",
 *             vhd: {
 *                 uri: "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd",
 *             },
 *         },
 *     },
 *     vmName: "{vm-name}",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D2_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         data_disks=[
 *             azure_native.compute.DataDiskArgs(
 *                 create_option="Empty",
 *                 disk_size_gb=1023,
 *                 lun=0,
 *                 vhd=azure_native.compute.VirtualHardDiskArgs(
 *                     uri="http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk0.vhd",
 *                 ),
 *             ),
 *             azure_native.compute.DataDiskArgs(
 *                 create_option="Empty",
 *                 disk_size_gb=1023,
 *                 lun=1,
 *                 vhd=azure_native.compute.VirtualHardDiskArgs(
 *                     uri="http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk1.vhd",
 *                 ),
 *             ),
 *         ],
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             name="myVMosdisk",
 *             vhd=azure_native.compute.VirtualHardDiskArgs(
 *                 uri="http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd",
 *             ),
 *         ),
 *     ),
 *     vm_name="{vm-name}")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm from a custom image.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm from a generalized shared image.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm from a specialized shared image.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm in a Virtual Machine Scale Set with customer assigned platformFaultDomain.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             PlatformFaultDomain = 1,
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VirtualMachineScaleSet = new AzureNative.Compute.Inputs.SubResourceArgs
 *             {
 *                 Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{existing-flex-vmss-name-with-platformFaultDomainCount-greater-than-1}",
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			PlatformFaultDomain: pulumi.Int(1),
 * 			ResourceGroupName:   pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VirtualMachineScaleSet: &compute.SubResourceArgs{
 * 				Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{existing-flex-vmss-name-with-platformFaultDomainCount-greater-than-1}"),
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     platformFaultDomain: 1,
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     virtualMachineScaleSet: {
 *         id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{existing-flex-vmss-name-with-platformFaultDomainCount-greater-than-1}",
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     platform_fault_domain=1,
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     virtual_machine_scale_set=azure_native.compute.SubResourceArgs(
 *         id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{existing-flex-vmss-name-with-platformFaultDomainCount-greater-than-1}",
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm in an availability set.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             AvailabilitySet = new AzureNative.Compute.Inputs.SubResourceArgs
 *             {
 *                 Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{existing-availability-set-name}",
 *             },
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			AvailabilitySet: &compute.SubResourceArgs{
 * 				Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{existing-availability-set-name}"),
 * 			},
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     availabilitySet: {
 *         id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{existing-availability-set-name}",
 *     },
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     availability_set=azure_native.compute.SubResourceArgs(
 *         id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{existing-availability-set-name}",
 *     ),
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with DiskEncryptionSet resource id in the os disk and data disk.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 DataDisks = 
 *                 {
 *                     new AzureNative.Compute.Inputs.DataDiskArgs
 *                     {
 *                         Caching = "ReadWrite",
 *                         CreateOption = "Empty",
 *                         DiskSizeGB = 1023,
 *                         Lun = 0,
 *                         ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                         {
 *                             DiskEncryptionSet = new AzureNative.Compute.Inputs.DiskEncryptionSetParametersArgs
 *                             {
 *                                 Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
 *                             },
 *                             StorageAccountType = "Standard_LRS",
 *                         },
 *                     },
 *                     new AzureNative.Compute.Inputs.DataDiskArgs
 *                     {
 *                         Caching = "ReadWrite",
 *                         CreateOption = "Attach",
 *                         DiskSizeGB = 1023,
 *                         Lun = 1,
 *                         ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                         {
 *                             DiskEncryptionSet = new AzureNative.Compute.Inputs.DiskEncryptionSetParametersArgs
 *                             {
 *                                 Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
 *                             },
 *                             Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}",
 *                             StorageAccountType = "Standard_LRS",
 *                         },
 *                     },
 *                 },
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         DiskEncryptionSet = new AzureNative.Compute.Inputs.DiskEncryptionSetParametersArgs
 *                         {
 *                             Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
 *                         },
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				DataDisks: compute.DataDiskArray{
 * 					&compute.DataDiskArgs{
 * 						Caching:      "ReadWrite",
 * 						CreateOption: pulumi.String("Empty"),
 * 						DiskSizeGB:   pulumi.Int(1023),
 * 						Lun:          pulumi.Int(0),
 * 						ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 							DiskEncryptionSet: &compute.DiskEncryptionSetParametersArgs{
 * 								Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
 * 							},
 * 							StorageAccountType: pulumi.String("Standard_LRS"),
 * 						},
 * 					},
 * 					&compute.DataDiskArgs{
 * 						Caching:      "ReadWrite",
 * 						CreateOption: pulumi.String("Attach"),
 * 						DiskSizeGB:   pulumi.Int(1023),
 * 						Lun:          pulumi.Int(1),
 * 						ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 							DiskEncryptionSet: &compute.DiskEncryptionSetParametersArgs{
 * 								Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
 * 							},
 * 							Id:                 pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
 * 							StorageAccountType: pulumi.String("Standard_LRS"),
 * 						},
 * 					},
 * 				},
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						DiskEncryptionSet: &compute.DiskEncryptionSetParametersArgs{
 * 							Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
 * 						},
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         dataDisks: [
 *             {
 *                 caching: "ReadWrite",
 *                 createOption: "Empty",
 *                 diskSizeGB: 1023,
 *                 lun: 0,
 *                 managedDisk: {
 *                     diskEncryptionSet: {
 *                         id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
 *                     },
 *                     storageAccountType: "Standard_LRS",
 *                 },
 *             },
 *             {
 *                 caching: "ReadWrite",
 *                 createOption: "Attach",
 *                 diskSizeGB: 1023,
 *                 lun: 1,
 *                 managedDisk: {
 *                     diskEncryptionSet: {
 *                         id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
 *                     },
 *                     id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}",
 *                     storageAccountType: "Standard_LRS",
 *                 },
 *             },
 *         ],
 *         imageReference: {
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 diskEncryptionSet: {
 *                     id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
 *                 },
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         data_disks=[
 *             azure_native.compute.DataDiskArgs(
 *                 caching="ReadWrite",
 *                 create_option="Empty",
 *                 disk_size_gb=1023,
 *                 lun=0,
 *                 managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                     disk_encryption_set=azure_native.compute.DiskEncryptionSetParametersArgs(
 *                         id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
 *                     ),
 *                     storage_account_type="Standard_LRS",
 *                 ),
 *             ),
 *             azure_native.compute.DataDiskArgs(
 *                 caching="ReadWrite",
 *                 create_option="Attach",
 *                 disk_size_gb=1023,
 *                 lun=1,
 *                 managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                     disk_encryption_set=azure_native.compute.DiskEncryptionSetParametersArgs(
 *                         id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
 *                     ),
 *                     id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}",
 *                     storage_account_type="Standard_LRS",
 *                 ),
 *             ),
 *         ],
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 disk_encryption_set=azure_native.compute.DiskEncryptionSetParametersArgs(
 *                     id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
 *                 ),
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with Host Encryption using encryptionAtHost property.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_DS1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             Plan = new AzureNative.Compute.Inputs.PlanArgs
 *             {
 *                 Name = "windows2016",
 *                 Product = "windows-data-science-vm",
 *                 Publisher = "microsoft-ads",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             SecurityProfile = new AzureNative.Compute.Inputs.SecurityProfileArgs
 *             {
 *                 EncryptionAtHost = true,
 *             },
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "windows-data-science-vm",
 *                     Publisher = "microsoft-ads",
 *                     Sku = "windows2016",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadOnly",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_DS1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			Plan: &compute.PlanArgs{
 * 				Name:      pulumi.String("windows2016"),
 * 				Product:   pulumi.String("windows-data-science-vm"),
 * 				Publisher: pulumi.String("microsoft-ads"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			SecurityProfile: &compute.SecurityProfileArgs{
 * 				EncryptionAtHost: pulumi.Bool(true),
 * 			},
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("windows-data-science-vm"),
 * 					Publisher: pulumi.String("microsoft-ads"),
 * 					Sku:       pulumi.String("windows2016"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadOnly",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_DS1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     plan: {
 *         name: "windows2016",
 *         product: "windows-data-science-vm",
 *         publisher: "microsoft-ads",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     securityProfile: {
 *         encryptionAtHost: true,
 *     },
 *     storageProfile: {
 *         imageReference: {
 *             offer: "windows-data-science-vm",
 *             publisher: "microsoft-ads",
 *             sku: "windows2016",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadOnly",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_DS1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     plan=azure_native.compute.PlanArgs(
 *         name="windows2016",
 *         product="windows-data-science-vm",
 *         publisher="microsoft-ads",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     security_profile=azure_native.compute.SecurityProfileArgs(
 *         encryption_at_host=True,
 *     ),
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="windows-data-science-vm",
 *             publisher="microsoft-ads",
 *             sku="windows2016",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadOnly",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with Scheduled Events Profile
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             DiagnosticsProfile = new AzureNative.Compute.Inputs.DiagnosticsProfileArgs
 *             {
 *                 BootDiagnostics = new AzureNative.Compute.Inputs.BootDiagnosticsArgs
 *                 {
 *                     Enabled = true,
 *                     StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
 *                 },
 *             },
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             ScheduledEventsProfile = new AzureNative.Compute.Inputs.ScheduledEventsProfileArgs
 *             {
 *                 TerminateNotificationProfile = new AzureNative.Compute.Inputs.TerminateNotificationProfileArgs
 *                 {
 *                     Enable = true,
 *                     NotBeforeTimeout = "PT10M",
 *                 },
 *             },
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			DiagnosticsProfile: &compute.DiagnosticsProfileArgs{
 * 				BootDiagnostics: &compute.BootDiagnosticsArgs{
 * 					Enabled:    pulumi.Bool(true),
 * 					StorageUri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net"),
 * 				},
 * 			},
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			ScheduledEventsProfile: &compute.ScheduledEventsProfileArgs{
 * 				TerminateNotificationProfile: &compute.TerminateNotificationProfileArgs{
 * 					Enable:           pulumi.Bool(true),
 * 					NotBeforeTimeout: pulumi.String("PT10M"),
 * 				},
 * 			},
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     diagnosticsProfile: {
 *         bootDiagnostics: {
 *             enabled: true,
 *             storageUri: "http://{existing-storage-account-name}.blob.core.windows.net",
 *         },
 *     },
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     scheduledEventsProfile: {
 *         terminateNotificationProfile: {
 *             enable: true,
 *             notBeforeTimeout: "PT10M",
 *         },
 *     },
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     diagnostics_profile=azure_native.compute.DiagnosticsProfileArgs(
 *         boot_diagnostics=azure_native.compute.BootDiagnosticsArgs(
 *             enabled=True,
 *             storage_uri="http://{existing-storage-account-name}.blob.core.windows.net",
 *         ),
 *     ),
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     scheduled_events_profile=azure_native.compute.ScheduledEventsProfileArgs(
 *         terminate_notification_profile=azure_native.compute.TerminateNotificationProfileArgs(
 *             enable=True,
 *             not_before_timeout="PT10M",
 *         ),
 *     ),
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with a marketplace image plan.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             Plan = new AzureNative.Compute.Inputs.PlanArgs
 *             {
 *                 Name = "windows2016",
 *                 Product = "windows-data-science-vm",
 *                 Publisher = "microsoft-ads",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "windows-data-science-vm",
 *                     Publisher = "microsoft-ads",
 *                     Sku = "windows2016",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			Plan: &compute.PlanArgs{
 * 				Name:      pulumi.String("windows2016"),
 * 				Product:   pulumi.String("windows-data-science-vm"),
 * 				Publisher: pulumi.String("microsoft-ads"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("windows-data-science-vm"),
 * 					Publisher: pulumi.String("microsoft-ads"),
 * 					Sku:       pulumi.String("windows2016"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     plan: {
 *         name: "windows2016",
 *         product: "windows-data-science-vm",
 *         publisher: "microsoft-ads",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "windows-data-science-vm",
 *             publisher: "microsoft-ads",
 *             sku: "windows2016",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     plan=azure_native.compute.PlanArgs(
 *         name="windows2016",
 *         product="windows-data-science-vm",
 *         publisher="microsoft-ads",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="windows-data-science-vm",
 *             publisher="microsoft-ads",
 *             sku="windows2016",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with an extensions time budget.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             DiagnosticsProfile = new AzureNative.Compute.Inputs.DiagnosticsProfileArgs
 *             {
 *                 BootDiagnostics = new AzureNative.Compute.Inputs.BootDiagnosticsArgs
 *                 {
 *                     Enabled = true,
 *                     StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
 *                 },
 *             },
 *             ExtensionsTimeBudget = "PT30M",
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			DiagnosticsProfile: &compute.DiagnosticsProfileArgs{
 * 				BootDiagnostics: &compute.BootDiagnosticsArgs{
 * 					Enabled:    pulumi.Bool(true),
 * 					StorageUri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net"),
 * 				},
 * 			},
 * 			ExtensionsTimeBudget: pulumi.String("PT30M"),
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     diagnosticsProfile: {
 *         bootDiagnostics: {
 *             enabled: true,
 *             storageUri: "http://{existing-storage-account-name}.blob.core.windows.net",
 *         },
 *     },
 *     extensionsTimeBudget: "PT30M",
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     diagnostics_profile=azure_native.compute.DiagnosticsProfileArgs(
 *         boot_diagnostics=azure_native.compute.BootDiagnosticsArgs(
 *             enabled=True,
 *             storage_uri="http://{existing-storage-account-name}.blob.core.windows.net",
 *         ),
 *     ),
 *     extensions_time_budget="PT30M",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with boot diagnostics.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             DiagnosticsProfile = new AzureNative.Compute.Inputs.DiagnosticsProfileArgs
 *             {
 *                 BootDiagnostics = new AzureNative.Compute.Inputs.BootDiagnosticsArgs
 *                 {
 *                     Enabled = true,
 *                     StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
 *                 },
 *             },
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			DiagnosticsProfile: &compute.DiagnosticsProfileArgs{
 * 				BootDiagnostics: &compute.BootDiagnosticsArgs{
 * 					Enabled:    pulumi.Bool(true),
 * 					StorageUri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net"),
 * 				},
 * 			},
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     diagnosticsProfile: {
 *         bootDiagnostics: {
 *             enabled: true,
 *             storageUri: "http://{existing-storage-account-name}.blob.core.windows.net",
 *         },
 *     },
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     diagnostics_profile=azure_native.compute.DiagnosticsProfileArgs(
 *         boot_diagnostics=azure_native.compute.BootDiagnosticsArgs(
 *             enabled=True,
 *             storage_uri="http://{existing-storage-account-name}.blob.core.windows.net",
 *         ),
 *     ),
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with empty data disks.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D2_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 DataDisks = 
 *                 {
 *                     new AzureNative.Compute.Inputs.DataDiskArgs
 *                     {
 *                         CreateOption = "Empty",
 *                         DiskSizeGB = 1023,
 *                         Lun = 0,
 *                     },
 *                     new AzureNative.Compute.Inputs.DataDiskArgs
 *                     {
 *                         CreateOption = "Empty",
 *                         DiskSizeGB = 1023,
 *                         Lun = 1,
 *                     },
 *                 },
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D2_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				DataDisks: compute.DataDiskArray{
 * 					&compute.DataDiskArgs{
 * 						CreateOption: pulumi.String("Empty"),
 * 						DiskSizeGB:   pulumi.Int(1023),
 * 						Lun:          pulumi.Int(0),
 * 					},
 * 					&compute.DataDiskArgs{
 * 						CreateOption: pulumi.String("Empty"),
 * 						DiskSizeGB:   pulumi.Int(1023),
 * 						Lun:          pulumi.Int(1),
 * 					},
 * 				},
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D2_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         dataDisks: [
 *             {
 *                 createOption: "Empty",
 *                 diskSizeGB: 1023,
 *                 lun: 0,
 *             },
 *             {
 *                 createOption: "Empty",
 *                 diskSizeGB: 1023,
 *                 lun: 1,
 *             },
 *         ],
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D2_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         data_disks=[
 *             azure_native.compute.DataDiskArgs(
 *                 create_option="Empty",
 *                 disk_size_gb=1023,
 *                 lun=0,
 *             ),
 *             azure_native.compute.DataDiskArgs(
 *                 create_option="Empty",
 *                 disk_size_gb=1023,
 *                 lun=1,
 *             ),
 *         ],
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with ephemeral os disk provisioning in Cache disk using placement property.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_DS1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             Plan = new AzureNative.Compute.Inputs.PlanArgs
 *             {
 *                 Name = "windows2016",
 *                 Product = "windows-data-science-vm",
 *                 Publisher = "microsoft-ads",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "windows-data-science-vm",
 *                     Publisher = "microsoft-ads",
 *                     Sku = "windows2016",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadOnly",
 *                     CreateOption = "FromImage",
 *                     DiffDiskSettings = new AzureNative.Compute.Inputs.DiffDiskSettingsArgs
 *                     {
 *                         Option = "Local",
 *                         Placement = "CacheDisk",
 *                     },
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_DS1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			Plan: &compute.PlanArgs{
 * 				Name:      pulumi.String("windows2016"),
 * 				Product:   pulumi.String("windows-data-science-vm"),
 * 				Publisher: pulumi.String("microsoft-ads"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("windows-data-science-vm"),
 * 					Publisher: pulumi.String("microsoft-ads"),
 * 					Sku:       pulumi.String("windows2016"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadOnly",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					DiffDiskSettings: &compute.DiffDiskSettingsArgs{
 * 						Option:    pulumi.String("Local"),
 * 						Placement: pulumi.String("CacheDisk"),
 * 					},
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_DS1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     plan: {
 *         name: "windows2016",
 *         product: "windows-data-science-vm",
 *         publisher: "microsoft-ads",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "windows-data-science-vm",
 *             publisher: "microsoft-ads",
 *             sku: "windows2016",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadOnly",
 *             createOption: "FromImage",
 *             diffDiskSettings: {
 *                 option: "Local",
 *                 placement: "CacheDisk",
 *             },
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_DS1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     plan=azure_native.compute.PlanArgs(
 *         name="windows2016",
 *         product="windows-data-science-vm",
 *         publisher="microsoft-ads",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="windows-data-science-vm",
 *             publisher="microsoft-ads",
 *             sku="windows2016",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadOnly",
 *             create_option="FromImage",
 *             diff_disk_settings=azure_native.compute.DiffDiskSettingsArgs(
 *                 option="Local",
 *                 placement="CacheDisk",
 *             ),
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with ephemeral os disk provisioning in Resource disk using placement property.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_DS1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             Plan = new AzureNative.Compute.Inputs.PlanArgs
 *             {
 *                 Name = "windows2016",
 *                 Product = "windows-data-science-vm",
 *                 Publisher = "microsoft-ads",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "windows-data-science-vm",
 *                     Publisher = "microsoft-ads",
 *                     Sku = "windows2016",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadOnly",
 *                     CreateOption = "FromImage",
 *                     DiffDiskSettings = new AzureNative.Compute.Inputs.DiffDiskSettingsArgs
 *                     {
 *                         Option = "Local",
 *                         Placement = "ResourceDisk",
 *                     },
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_DS1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			Plan: &compute.PlanArgs{
 * 				Name:      pulumi.String("windows2016"),
 * 				Product:   pulumi.String("windows-data-science-vm"),
 * 				Publisher: pulumi.String("microsoft-ads"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("windows-data-science-vm"),
 * 					Publisher: pulumi.String("microsoft-ads"),
 * 					Sku:       pulumi.String("windows2016"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadOnly",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					DiffDiskSettings: &compute.DiffDiskSettingsArgs{
 * 						Option:    pulumi.String("Local"),
 * 						Placement: pulumi.String("ResourceDisk"),
 * 					},
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_DS1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     plan: {
 *         name: "windows2016",
 *         product: "windows-data-science-vm",
 *         publisher: "microsoft-ads",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "windows-data-science-vm",
 *             publisher: "microsoft-ads",
 *             sku: "windows2016",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadOnly",
 *             createOption: "FromImage",
 *             diffDiskSettings: {
 *                 option: "Local",
 *                 placement: "ResourceDisk",
 *             },
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_DS1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     plan=azure_native.compute.PlanArgs(
 *         name="windows2016",
 *         product="windows-data-science-vm",
 *         publisher="microsoft-ads",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="windows-data-science-vm",
 *             publisher="microsoft-ads",
 *             sku="windows2016",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadOnly",
 *             create_option="FromImage",
 *             diff_disk_settings=azure_native.compute.DiffDiskSettingsArgs(
 *                 option="Local",
 *                 placement="ResourceDisk",
 *             ),
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with ephemeral os disk.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_DS1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             Plan = new AzureNative.Compute.Inputs.PlanArgs
 *             {
 *                 Name = "windows2016",
 *                 Product = "windows-data-science-vm",
 *                 Publisher = "microsoft-ads",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "windows-data-science-vm",
 *                     Publisher = "microsoft-ads",
 *                     Sku = "windows2016",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadOnly",
 *                     CreateOption = "FromImage",
 *                     DiffDiskSettings = new AzureNative.Compute.Inputs.DiffDiskSettingsArgs
 *                     {
 *                         Option = "Local",
 *                     },
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_DS1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			Plan: &compute.PlanArgs{
 * 				Name:      pulumi.String("windows2016"),
 * 				Product:   pulumi.String("windows-data-science-vm"),
 * 				Publisher: pulumi.String("microsoft-ads"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("windows-data-science-vm"),
 * 					Publisher: pulumi.String("microsoft-ads"),
 * 					Sku:       pulumi.String("windows2016"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadOnly",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					DiffDiskSettings: &compute.DiffDiskSettingsArgs{
 * 						Option: pulumi.String("Local"),
 * 					},
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_DS1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     plan: {
 *         name: "windows2016",
 *         product: "windows-data-science-vm",
 *         publisher: "microsoft-ads",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "windows-data-science-vm",
 *             publisher: "microsoft-ads",
 *             sku: "windows2016",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadOnly",
 *             createOption: "FromImage",
 *             diffDiskSettings: {
 *                 option: "Local",
 *             },
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_DS1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     plan=azure_native.compute.PlanArgs(
 *         name="windows2016",
 *         product="windows-data-science-vm",
 *         publisher="microsoft-ads",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="windows-data-science-vm",
 *             publisher="microsoft-ads",
 *             sku="windows2016",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadOnly",
 *             create_option="FromImage",
 *             diff_disk_settings=azure_native.compute.DiffDiskSettingsArgs(
 *                 option="Local",
 *             ),
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with managed boot diagnostics.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             DiagnosticsProfile = new AzureNative.Compute.Inputs.DiagnosticsProfileArgs
 *             {
 *                 BootDiagnostics = new AzureNative.Compute.Inputs.BootDiagnosticsArgs
 *                 {
 *                     Enabled = true,
 *                 },
 *             },
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			DiagnosticsProfile: &compute.DiagnosticsProfileArgs{
 * 				BootDiagnostics: &compute.BootDiagnosticsArgs{
 * 					Enabled: pulumi.Bool(true),
 * 				},
 * 			},
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     diagnosticsProfile: {
 *         bootDiagnostics: {
 *             enabled: true,
 *         },
 *     },
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     diagnostics_profile=azure_native.compute.DiagnosticsProfileArgs(
 *         boot_diagnostics=azure_native.compute.BootDiagnosticsArgs(
 *             enabled=True,
 *         ),
 *     ),
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with password authentication.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with premium storage.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminPassword = "{your-password}",
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "WindowsServer",
 *                     Publisher = "MicrosoftWindowsServer",
 *                     Sku = "2016-Datacenter",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Premium_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminPassword: pulumi.String("{your-password}"),
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("WindowsServer"),
 * 					Publisher: pulumi.String("MicrosoftWindowsServer"),
 * 					Sku:       pulumi.String("2016-Datacenter"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Premium_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminPassword: "{your-password}",
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "WindowsServer",
 *             publisher: "MicrosoftWindowsServer",
 *             sku: "2016-Datacenter",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Premium_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_password="{your-password}",
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="WindowsServer",
 *             publisher="MicrosoftWindowsServer",
 *             sku="2016-Datacenter",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Premium_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create a vm with ssh authentication.
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var virtualMachine = new AzureNative.Compute.VirtualMachine("virtualMachine", new AzureNative.Compute.VirtualMachineArgs
 *         {
 *             HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
 *             {
 *                 VmSize = "Standard_D1_v2",
 *             },
 *             Location = "westus",
 *             NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
 *             {
 *                 NetworkInterfaces = 
 *                 {
 *                     new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
 *                     {
 *                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *                         Primary = true,
 *                     },
 *                 },
 *             },
 *             OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
 *             {
 *                 AdminUsername = "{your-username}",
 *                 ComputerName = "myVM",
 *                 LinuxConfiguration = new AzureNative.Compute.Inputs.LinuxConfigurationArgs
 *                 {
 *                     DisablePasswordAuthentication = true,
 *                     Ssh = new AzureNative.Compute.Inputs.SshConfigurationArgs
 *                     {
 *                         PublicKeys = 
 *                         {
 *                             new AzureNative.Compute.Inputs.SshPublicKeyArgs
 *                             {
 *                                 KeyData = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1",
 *                                 Path = "/home/{your-username}/.ssh/authorized_keys",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *             ResourceGroupName = "myResourceGroup",
 *             StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
 *             {
 *                 ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
 *                 {
 *                     Offer = "{image_offer}",
 *                     Publisher = "{image_publisher}",
 *                     Sku = "{image_sku}",
 *                     Version = "latest",
 *                 },
 *                 OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
 *                 {
 *                     Caching = "ReadWrite",
 *                     CreateOption = "FromImage",
 *                     ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
 *                     {
 *                         StorageAccountType = "Standard_LRS",
 *                     },
 *                     Name = "myVMosdisk",
 *                 },
 *             },
 *             VmName = "myVM",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewVirtualMachine(ctx, "virtualMachine", &compute.VirtualMachineArgs{
 * 			HardwareProfile: &compute.HardwareProfileArgs{
 * 				VmSize: pulumi.String("Standard_D1_v2"),
 * 			},
 * 			Location: pulumi.String("westus"),
 * 			NetworkProfile: &compute.NetworkProfileArgs{
 * 				NetworkInterfaces: compute.NetworkInterfaceReferenceArray{
 * 					&compute.NetworkInterfaceReferenceArgs{
 * 						Id:      pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
 * 						Primary: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			OsProfile: &compute.OSProfileArgs{
 * 				AdminUsername: pulumi.String("{your-username}"),
 * 				ComputerName:  pulumi.String("myVM"),
 * 				LinuxConfiguration: &compute.LinuxConfigurationArgs{
 * 					DisablePasswordAuthentication: pulumi.Bool(true),
 * 					Ssh: &compute.SshConfigurationArgs{
 * 						PublicKeys: compute.SshPublicKeyArray{
 * 							&compute.SshPublicKeyArgs{
 * 								KeyData: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
 * 								Path:    pulumi.String("/home/{your-username}/.ssh/authorized_keys"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 			ResourceGroupName: pulumi.String("myResourceGroup"),
 * 			StorageProfile: &compute.StorageProfileArgs{
 * 				ImageReference: &compute.ImageReferenceArgs{
 * 					Offer:     pulumi.String("{image_offer}"),
 * 					Publisher: pulumi.String("{image_publisher}"),
 * 					Sku:       pulumi.String("{image_sku}"),
 * 					Version:   pulumi.String("latest"),
 * 				},
 * 				OsDisk: &compute.OSDiskArgs{
 * 					Caching:      "ReadWrite",
 * 					CreateOption: pulumi.String("FromImage"),
 * 					ManagedDisk: &compute.ManagedDiskParametersArgs{
 * 						StorageAccountType: pulumi.String("Standard_LRS"),
 * 					},
 * 					Name: pulumi.String("myVMosdisk"),
 * 				},
 * 			},
 * 			VmName: pulumi.String("myVM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const virtualMachine = new azure_native.compute.VirtualMachine("virtualMachine", {
 *     hardwareProfile: {
 *         vmSize: "Standard_D1_v2",
 *     },
 *     location: "westus",
 *     networkProfile: {
 *         networkInterfaces: [{
 *             id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary: true,
 *         }],
 *     },
 *     osProfile: {
 *         adminUsername: "{your-username}",
 *         computerName: "myVM",
 *         linuxConfiguration: {
 *             disablePasswordAuthentication: true,
 *             ssh: {
 *                 publicKeys: [{
 *                     keyData: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1",
 *                     path: "/home/{your-username}/.ssh/authorized_keys",
 *                 }],
 *             },
 *         },
 *     },
 *     resourceGroupName: "myResourceGroup",
 *     storageProfile: {
 *         imageReference: {
 *             offer: "{image_offer}",
 *             publisher: "{image_publisher}",
 *             sku: "{image_sku}",
 *             version: "latest",
 *         },
 *         osDisk: {
 *             caching: "ReadWrite",
 *             createOption: "FromImage",
 *             managedDisk: {
 *                 storageAccountType: "Standard_LRS",
 *             },
 *             name: "myVMosdisk",
 *         },
 *     },
 *     vmName: "myVM",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * virtual_machine = azure_native.compute.VirtualMachine("virtualMachine",
 *     hardware_profile=azure_native.compute.HardwareProfileArgs(
 *         vm_size="Standard_D1_v2",
 *     ),
 *     location="westus",
 *     network_profile=azure_native.compute.NetworkProfileArgs(
 *         network_interfaces=[azure_native.compute.NetworkInterfaceReferenceArgs(
 *             id="/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
 *             primary=True,
 *         )],
 *     ),
 *     os_profile=azure_native.compute.OSProfileArgs(
 *         admin_username="{your-username}",
 *         computer_name="myVM",
 *         linux_configuration=azure_native.compute.LinuxConfigurationArgs(
 *             disable_password_authentication=True,
 *             ssh=azure_native.compute.SshConfigurationArgs(
 *                 public_keys=[azure_native.compute.SshPublicKeyArgs(
 *                     key_data="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1",
 *                     path="/home/{your-username}/.ssh/authorized_keys",
 *                 )],
 *             ),
 *         ),
 *     ),
 *     resource_group_name="myResourceGroup",
 *     storage_profile=azure_native.compute.StorageProfileArgs(
 *         image_reference=azure_native.compute.ImageReferenceArgs(
 *             offer="{image_offer}",
 *             publisher="{image_publisher}",
 *             sku="{image_sku}",
 *             version="latest",
 *         ),
 *         os_disk=azure_native.compute.OSDiskArgs(
 *             caching="ReadWrite",
 *             create_option="FromImage",
 *             managed_disk=azure_native.compute.ManagedDiskParametersArgs(
 *                 storage_account_type="Standard_LRS",
 *             ),
 *             name="myVMosdisk",
 *         ),
 *     ),
 *     vm_name="myVM")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:compute:VirtualMachine myVM /subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM 
 * ```
 * 
 */
@ResourceType(type="azure-native:compute:VirtualMachine")
public class VirtualMachine extends io.pulumi.resources.CustomResource {
    /**
     * Specifies additional capabilities enabled or disabled on the virtual machine.
     */
    @Export(name="additionalCapabilities", type=AdditionalCapabilitiesResponse.class, parameters={})
    private Output</* @Nullable */ AdditionalCapabilitiesResponse> additionalCapabilities;

    /**
     * @return Specifies additional capabilities enabled or disabled on the virtual machine.
     */
    public Output</* @Nullable */ AdditionalCapabilitiesResponse> getAdditionalCapabilities() {
        return this.additionalCapabilities;
    }
    /**
     * Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). <br><br> For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) <br><br> Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added should be under the same resource group as the availability set resource. An existing VM cannot be added to an availability set. <br><br>This property cannot exist along with a non-null properties.virtualMachineScaleSet reference.
     */
    @Export(name="availabilitySet", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> availabilitySet;

    /**
     * @return Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). <br><br> For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) <br><br> Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added should be under the same resource group as the availability set resource. An existing VM cannot be added to an availability set. <br><br>This property cannot exist along with a non-null properties.virtualMachineScaleSet reference.
     */
    public Output</* @Nullable */ SubResourceResponse> getAvailabilitySet() {
        return this.availabilitySet;
    }
    /**
     * Specifies the billing related details of a Azure Spot virtual machine. <br><br>Minimum api-version: 2019-03-01.
     */
    @Export(name="billingProfile", type=BillingProfileResponse.class, parameters={})
    private Output</* @Nullable */ BillingProfileResponse> billingProfile;

    /**
     * @return Specifies the billing related details of a Azure Spot virtual machine. <br><br>Minimum api-version: 2019-03-01.
     */
    public Output</* @Nullable */ BillingProfileResponse> getBillingProfile() {
        return this.billingProfile;
    }
    /**
     * Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
     */
    @Export(name="diagnosticsProfile", type=DiagnosticsProfileResponse.class, parameters={})
    private Output</* @Nullable */ DiagnosticsProfileResponse> diagnosticsProfile;

    /**
     * @return Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
     */
    public Output</* @Nullable */ DiagnosticsProfileResponse> getDiagnosticsProfile() {
        return this.diagnosticsProfile;
    }
    /**
     * Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
     */
    @Export(name="evictionPolicy", type=String.class, parameters={})
    private Output</* @Nullable */ String> evictionPolicy;

    /**
     * @return Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
     */
    public Output</* @Nullable */ String> getEvictionPolicy() {
        return this.evictionPolicy;
    }
    /**
     * The extended location of the Virtual Machine.
     */
    @Export(name="extendedLocation", type=ExtendedLocationResponse.class, parameters={})
    private Output</* @Nullable */ ExtendedLocationResponse> extendedLocation;

    /**
     * @return The extended location of the Virtual Machine.
     */
    public Output</* @Nullable */ ExtendedLocationResponse> getExtendedLocation() {
        return this.extendedLocation;
    }
    /**
     * Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01
     */
    @Export(name="extensionsTimeBudget", type=String.class, parameters={})
    private Output</* @Nullable */ String> extensionsTimeBudget;

    /**
     * @return Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01
     */
    public Output</* @Nullable */ String> getExtensionsTimeBudget() {
        return this.extensionsTimeBudget;
    }
    /**
     * Specifies the hardware settings for the virtual machine.
     */
    @Export(name="hardwareProfile", type=HardwareProfileResponse.class, parameters={})
    private Output</* @Nullable */ HardwareProfileResponse> hardwareProfile;

    /**
     * @return Specifies the hardware settings for the virtual machine.
     */
    public Output</* @Nullable */ HardwareProfileResponse> getHardwareProfile() {
        return this.hardwareProfile;
    }
    /**
     * Specifies information about the dedicated host that the virtual machine resides in. <br><br>Minimum api-version: 2018-10-01.
     */
    @Export(name="host", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> host;

    /**
     * @return Specifies information about the dedicated host that the virtual machine resides in. <br><br>Minimum api-version: 2018-10-01.
     */
    public Output</* @Nullable */ SubResourceResponse> getHost() {
        return this.host;
    }
    /**
     * Specifies information about the dedicated host group that the virtual machine resides in. <br><br>Minimum api-version: 2020-06-01. <br><br>NOTE: User cannot specify both host and hostGroup properties.
     */
    @Export(name="hostGroup", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> hostGroup;

    /**
     * @return Specifies information about the dedicated host group that the virtual machine resides in. <br><br>Minimum api-version: 2020-06-01. <br><br>NOTE: User cannot specify both host and hostGroup properties.
     */
    public Output</* @Nullable */ SubResourceResponse> getHostGroup() {
        return this.hostGroup;
    }
    /**
     * The identity of the virtual machine, if configured.
     */
    @Export(name="identity", type=VirtualMachineIdentityResponse.class, parameters={})
    private Output</* @Nullable */ VirtualMachineIdentityResponse> identity;

    /**
     * @return The identity of the virtual machine, if configured.
     */
    public Output</* @Nullable */ VirtualMachineIdentityResponse> getIdentity() {
        return this.identity;
    }
    /**
     * The virtual machine instance view.
     */
    @Export(name="instanceView", type=VirtualMachineInstanceViewResponse.class, parameters={})
    private Output<VirtualMachineInstanceViewResponse> instanceView;

    /**
     * @return The virtual machine instance view.
     */
    public Output<VirtualMachineInstanceViewResponse> getInstanceView() {
        return this.instanceView;
    }
    /**
     * Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15
     */
    @Export(name="licenseType", type=String.class, parameters={})
    private Output</* @Nullable */ String> licenseType;

    /**
     * @return Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15
     */
    public Output</* @Nullable */ String> getLicenseType() {
        return this.licenseType;
    }
    /**
     * Resource location
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource location
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Resource name
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Specifies the network interfaces of the virtual machine.
     */
    @Export(name="networkProfile", type=NetworkProfileResponse.class, parameters={})
    private Output</* @Nullable */ NetworkProfileResponse> networkProfile;

    /**
     * @return Specifies the network interfaces of the virtual machine.
     */
    public Output</* @Nullable */ NetworkProfileResponse> getNetworkProfile() {
        return this.networkProfile;
    }
    /**
     * Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed once VM is provisioned.
     */
    @Export(name="osProfile", type=OSProfileResponse.class, parameters={})
    private Output</* @Nullable */ OSProfileResponse> osProfile;

    /**
     * @return Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed once VM is provisioned.
     */
    public Output</* @Nullable */ OSProfileResponse> getOsProfile() {
        return this.osProfile;
    }
    /**
     * Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
     */
    @Export(name="plan", type=PlanResponse.class, parameters={})
    private Output</* @Nullable */ PlanResponse> plan;

    /**
     * @return Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
     */
    public Output</* @Nullable */ PlanResponse> getPlan() {
        return this.plan;
    }
    /**
     * Specifies the scale set logical fault domain into which the Virtual Machine will be created. By default, the Virtual Machine will by automatically assigned to a fault domain that best maintains balance across available fault domains.<br><li>This is applicable only if the 'virtualMachineScaleSet' property of this Virtual Machine is set.<li>The Virtual Machine Scale Set that is referenced, must have 'platformFaultDomainCount' &gt; 1.<li>This property cannot be updated once the Virtual Machine is created.<li>Fault domain assignment can be viewed in the Virtual Machine Instance View.<br><br>Minimum api‐version: 2020‐12‐01
     */
    @Export(name="platformFaultDomain", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> platformFaultDomain;

    /**
     * @return Specifies the scale set logical fault domain into which the Virtual Machine will be created. By default, the Virtual Machine will by automatically assigned to a fault domain that best maintains balance across available fault domains.<br><li>This is applicable only if the 'virtualMachineScaleSet' property of this Virtual Machine is set.<li>The Virtual Machine Scale Set that is referenced, must have 'platformFaultDomainCount' &gt; 1.<li>This property cannot be updated once the Virtual Machine is created.<li>Fault domain assignment can be viewed in the Virtual Machine Instance View.<br><br>Minimum api‐version: 2020‐12‐01
     */
    public Output</* @Nullable */ Integer> getPlatformFaultDomain() {
        return this.platformFaultDomain;
    }
    /**
     * Specifies the priority for the virtual machine. <br><br>Minimum api-version: 2019-03-01
     */
    @Export(name="priority", type=String.class, parameters={})
    private Output</* @Nullable */ String> priority;

    /**
     * @return Specifies the priority for the virtual machine. <br><br>Minimum api-version: 2019-03-01
     */
    public Output</* @Nullable */ String> getPriority() {
        return this.priority;
    }
    /**
     * The provisioning state, which only appears in the response.
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning state, which only appears in the response.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * Specifies information about the proximity placement group that the virtual machine should be assigned to. <br><br>Minimum api-version: 2018-04-01.
     */
    @Export(name="proximityPlacementGroup", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> proximityPlacementGroup;

    /**
     * @return Specifies information about the proximity placement group that the virtual machine should be assigned to. <br><br>Minimum api-version: 2018-04-01.
     */
    public Output</* @Nullable */ SubResourceResponse> getProximityPlacementGroup() {
        return this.proximityPlacementGroup;
    }
    /**
     * The virtual machine child extension resources.
     */
    @Export(name="resources", type=List.class, parameters={VirtualMachineExtensionResponse.class})
    private Output<List<VirtualMachineExtensionResponse>> resources;

    /**
     * @return The virtual machine child extension resources.
     */
    public Output<List<VirtualMachineExtensionResponse>> getResources() {
        return this.resources;
    }
    /**
     * Specifies Scheduled Event related configurations.
     */
    @Export(name="scheduledEventsProfile", type=ScheduledEventsProfileResponse.class, parameters={})
    private Output</* @Nullable */ ScheduledEventsProfileResponse> scheduledEventsProfile;

    /**
     * @return Specifies Scheduled Event related configurations.
     */
    public Output</* @Nullable */ ScheduledEventsProfileResponse> getScheduledEventsProfile() {
        return this.scheduledEventsProfile;
    }
    /**
     * Specifies the Security related profile settings for the virtual machine.
     */
    @Export(name="securityProfile", type=SecurityProfileResponse.class, parameters={})
    private Output</* @Nullable */ SecurityProfileResponse> securityProfile;

    /**
     * @return Specifies the Security related profile settings for the virtual machine.
     */
    public Output</* @Nullable */ SecurityProfileResponse> getSecurityProfile() {
        return this.securityProfile;
    }
    /**
     * Specifies the storage settings for the virtual machine disks.
     */
    @Export(name="storageProfile", type=StorageProfileResponse.class, parameters={})
    private Output</* @Nullable */ StorageProfileResponse> storageProfile;

    /**
     * @return Specifies the storage settings for the virtual machine disks.
     */
    public Output</* @Nullable */ StorageProfileResponse> getStorageProfile() {
        return this.storageProfile;
    }
    /**
     * Resource tags
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Resource type
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. <br><br>Minimum api-version: 2021-03-01
     */
    @Export(name="userData", type=String.class, parameters={})
    private Output</* @Nullable */ String> userData;

    /**
     * @return UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. <br><br>Minimum api-version: 2021-03-01
     */
    public Output</* @Nullable */ String> getUserData() {
        return this.userData;
    }
    /**
     * Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set. <br><br>This property cannot exist along with a non-null properties.availabilitySet reference. <br><br>Minimum api‐version: 2019‐03‐01
     */
    @Export(name="virtualMachineScaleSet", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> virtualMachineScaleSet;

    /**
     * @return Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set. <br><br>This property cannot exist along with a non-null properties.availabilitySet reference. <br><br>Minimum api‐version: 2019‐03‐01
     */
    public Output</* @Nullable */ SubResourceResponse> getVirtualMachineScaleSet() {
        return this.virtualMachineScaleSet;
    }
    /**
     * Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
     */
    @Export(name="vmId", type=String.class, parameters={})
    private Output<String> vmId;

    /**
     * @return Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
     */
    public Output<String> getVmId() {
        return this.vmId;
    }
    /**
     * The virtual machine zones.
     */
    @Export(name="zones", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> zones;

    /**
     * @return The virtual machine zones.
     */
    public Output</* @Nullable */ List<String>> getZones() {
        return this.zones;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VirtualMachine(String name) {
        this(name, VirtualMachineArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VirtualMachine(String name, VirtualMachineArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualMachine(String name, VirtualMachineArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:compute:VirtualMachine", name, args == null ? VirtualMachineArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private VirtualMachine(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:compute:VirtualMachine", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:compute/v20150615:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20160330:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20160430preview:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20170330:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20171201:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20180401:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20180601:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20181001:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20190301:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20190701:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20191201:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20200601:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20201201:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20210301:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20210401:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20210701:VirtualMachine").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20211101:VirtualMachine").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualMachine get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new VirtualMachine(name, id, options);
    }
}
