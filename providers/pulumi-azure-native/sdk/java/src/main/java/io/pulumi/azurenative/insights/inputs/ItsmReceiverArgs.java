// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * An Itsm receiver.
 * 
 */
public final class ItsmReceiverArgs extends io.pulumi.resources.ResourceArgs {

    public static final ItsmReceiverArgs Empty = new ItsmReceiverArgs();

    /**
     * Unique identification of ITSM connection among multiple defined in above workspace.
     * 
     */
    @InputImport(name="connectionId", required=true)
      private final Output<String> connectionId;

    public Output<String> getConnectionId() {
        return this.connectionId;
    }

    /**
     * The name of the Itsm receiver. Names must be unique across all receivers within an action group.
     * 
     */
    @InputImport(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
     * 
     */
    @InputImport(name="region", required=true)
      private final Output<String> region;

    public Output<String> getRegion() {
        return this.region;
    }

    /**
     * JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
     * 
     */
    @InputImport(name="ticketConfiguration", required=true)
      private final Output<String> ticketConfiguration;

    public Output<String> getTicketConfiguration() {
        return this.ticketConfiguration;
    }

    /**
     * OMS LA instance identifier.
     * 
     */
    @InputImport(name="workspaceId", required=true)
      private final Output<String> workspaceId;

    public Output<String> getWorkspaceId() {
        return this.workspaceId;
    }

    public ItsmReceiverArgs(
        Output<String> connectionId,
        Output<String> name,
        Output<String> region,
        Output<String> ticketConfiguration,
        Output<String> workspaceId) {
        this.connectionId = Objects.requireNonNull(connectionId, "expected parameter 'connectionId' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.region = Objects.requireNonNull(region, "expected parameter 'region' to be non-null");
        this.ticketConfiguration = Objects.requireNonNull(ticketConfiguration, "expected parameter 'ticketConfiguration' to be non-null");
        this.workspaceId = Objects.requireNonNull(workspaceId, "expected parameter 'workspaceId' to be non-null");
    }

    private ItsmReceiverArgs() {
        this.connectionId = Output.empty();
        this.name = Output.empty();
        this.region = Output.empty();
        this.ticketConfiguration = Output.empty();
        this.workspaceId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ItsmReceiverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> connectionId;
        private Output<String> name;
        private Output<String> region;
        private Output<String> ticketConfiguration;
        private Output<String> workspaceId;

        public Builder() {
    	      // Empty
        }

        public Builder(ItsmReceiverArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.name = defaults.name;
    	      this.region = defaults.region;
    	      this.ticketConfiguration = defaults.ticketConfiguration;
    	      this.workspaceId = defaults.workspaceId;
        }

        public Builder connectionId(Output<String> connectionId) {
            this.connectionId = Objects.requireNonNull(connectionId);
            return this;
        }

        public Builder connectionId(String connectionId) {
            this.connectionId = Output.of(Objects.requireNonNull(connectionId));
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder region(Output<String> region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }

        public Builder region(String region) {
            this.region = Output.of(Objects.requireNonNull(region));
            return this;
        }

        public Builder ticketConfiguration(Output<String> ticketConfiguration) {
            this.ticketConfiguration = Objects.requireNonNull(ticketConfiguration);
            return this;
        }

        public Builder ticketConfiguration(String ticketConfiguration) {
            this.ticketConfiguration = Output.of(Objects.requireNonNull(ticketConfiguration));
            return this;
        }

        public Builder workspaceId(Output<String> workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Output.of(Objects.requireNonNull(workspaceId));
            return this;
        }
        public ItsmReceiverArgs build() {
            return new ItsmReceiverArgs(connectionId, name, region, ticketConfiguration, workspaceId);
        }
    }
}
