// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.aad.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Secure LDAP Settings
 * 
 */
public final class LdapsSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final LdapsSettingsResponse Empty = new LdapsSettingsResponse();

    /**
     * NotAfter DateTime of configure ldaps certificate.
     * 
     */
    @InputImport(name="certificateNotAfter", required=true)
        private final String certificateNotAfter;

    public String getCertificateNotAfter() {
        return this.certificateNotAfter;
    }

    /**
     * Thumbprint of configure ldaps certificate.
     * 
     */
    @InputImport(name="certificateThumbprint", required=true)
        private final String certificateThumbprint;

    public String getCertificateThumbprint() {
        return this.certificateThumbprint;
    }

    /**
     * A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
     * 
     */
    @InputImport(name="externalAccess")
        private final @Nullable String externalAccess;

    public Optional<String> getExternalAccess() {
        return this.externalAccess == null ? Optional.empty() : Optional.ofNullable(this.externalAccess);
    }

    /**
     * A flag to determine whether or not Secure LDAP is enabled or disabled.
     * 
     */
    @InputImport(name="ldaps")
        private final @Nullable String ldaps;

    public Optional<String> getLdaps() {
        return this.ldaps == null ? Optional.empty() : Optional.ofNullable(this.ldaps);
    }

    /**
     * The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
     * 
     */
    @InputImport(name="pfxCertificate")
        private final @Nullable String pfxCertificate;

    public Optional<String> getPfxCertificate() {
        return this.pfxCertificate == null ? Optional.empty() : Optional.ofNullable(this.pfxCertificate);
    }

    /**
     * The password to decrypt the provided Secure LDAP certificate pfx file.
     * 
     */
    @InputImport(name="pfxCertificatePassword")
        private final @Nullable String pfxCertificatePassword;

    public Optional<String> getPfxCertificatePassword() {
        return this.pfxCertificatePassword == null ? Optional.empty() : Optional.ofNullable(this.pfxCertificatePassword);
    }

    /**
     * Public certificate used to configure secure ldap.
     * 
     */
    @InputImport(name="publicCertificate", required=true)
        private final String publicCertificate;

    public String getPublicCertificate() {
        return this.publicCertificate;
    }

    public LdapsSettingsResponse(
        String certificateNotAfter,
        String certificateThumbprint,
        @Nullable String externalAccess,
        @Nullable String ldaps,
        @Nullable String pfxCertificate,
        @Nullable String pfxCertificatePassword,
        String publicCertificate) {
        this.certificateNotAfter = Objects.requireNonNull(certificateNotAfter, "expected parameter 'certificateNotAfter' to be non-null");
        this.certificateThumbprint = Objects.requireNonNull(certificateThumbprint, "expected parameter 'certificateThumbprint' to be non-null");
        this.externalAccess = externalAccess == null ? "Disabled" : externalAccess;
        this.ldaps = ldaps == null ? "Disabled" : ldaps;
        this.pfxCertificate = pfxCertificate;
        this.pfxCertificatePassword = pfxCertificatePassword;
        this.publicCertificate = Objects.requireNonNull(publicCertificate, "expected parameter 'publicCertificate' to be non-null");
    }

    private LdapsSettingsResponse() {
        this.certificateNotAfter = null;
        this.certificateThumbprint = null;
        this.externalAccess = null;
        this.ldaps = null;
        this.pfxCertificate = null;
        this.pfxCertificatePassword = null;
        this.publicCertificate = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LdapsSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String certificateNotAfter;
        private String certificateThumbprint;
        private @Nullable String externalAccess;
        private @Nullable String ldaps;
        private @Nullable String pfxCertificate;
        private @Nullable String pfxCertificatePassword;
        private String publicCertificate;

        public Builder() {
    	      // Empty
        }

        public Builder(LdapsSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateNotAfter = defaults.certificateNotAfter;
    	      this.certificateThumbprint = defaults.certificateThumbprint;
    	      this.externalAccess = defaults.externalAccess;
    	      this.ldaps = defaults.ldaps;
    	      this.pfxCertificate = defaults.pfxCertificate;
    	      this.pfxCertificatePassword = defaults.pfxCertificatePassword;
    	      this.publicCertificate = defaults.publicCertificate;
        }

        public Builder setCertificateNotAfter(String certificateNotAfter) {
            this.certificateNotAfter = Objects.requireNonNull(certificateNotAfter);
            return this;
        }

        public Builder setCertificateThumbprint(String certificateThumbprint) {
            this.certificateThumbprint = Objects.requireNonNull(certificateThumbprint);
            return this;
        }

        public Builder setExternalAccess(@Nullable String externalAccess) {
            this.externalAccess = externalAccess;
            return this;
        }

        public Builder setLdaps(@Nullable String ldaps) {
            this.ldaps = ldaps;
            return this;
        }

        public Builder setPfxCertificate(@Nullable String pfxCertificate) {
            this.pfxCertificate = pfxCertificate;
            return this;
        }

        public Builder setPfxCertificatePassword(@Nullable String pfxCertificatePassword) {
            this.pfxCertificatePassword = pfxCertificatePassword;
            return this;
        }

        public Builder setPublicCertificate(String publicCertificate) {
            this.publicCertificate = Objects.requireNonNull(publicCertificate);
            return this;
        }
        public LdapsSettingsResponse build() {
            return new LdapsSettingsResponse(certificateNotAfter, certificateThumbprint, externalAccess, ldaps, pfxCertificate, pfxCertificatePassword, publicCertificate);
        }
    }
}
