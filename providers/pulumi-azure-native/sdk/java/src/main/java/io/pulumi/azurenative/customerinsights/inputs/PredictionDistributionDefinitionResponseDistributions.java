// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The definition of a prediction distribution.
 * 
 */
public final class PredictionDistributionDefinitionResponseDistributions extends io.pulumi.resources.InvokeArgs {

    public static final PredictionDistributionDefinitionResponseDistributions Empty = new PredictionDistributionDefinitionResponseDistributions();

    /**
     * Number of negatives.
     * 
     */
    @Import(name="negatives")
      private final @Nullable Double negatives;

    public Optional<Double> getNegatives() {
        return this.negatives == null ? Optional.empty() : Optional.ofNullable(this.negatives);
    }

    /**
     * Number of negatives above threshold.
     * 
     */
    @Import(name="negativesAboveThreshold")
      private final @Nullable Double negativesAboveThreshold;

    public Optional<Double> getNegativesAboveThreshold() {
        return this.negativesAboveThreshold == null ? Optional.empty() : Optional.ofNullable(this.negativesAboveThreshold);
    }

    /**
     * Number of positives.
     * 
     */
    @Import(name="positives")
      private final @Nullable Double positives;

    public Optional<Double> getPositives() {
        return this.positives == null ? Optional.empty() : Optional.ofNullable(this.positives);
    }

    /**
     * Number of positives above threshold.
     * 
     */
    @Import(name="positivesAboveThreshold")
      private final @Nullable Double positivesAboveThreshold;

    public Optional<Double> getPositivesAboveThreshold() {
        return this.positivesAboveThreshold == null ? Optional.empty() : Optional.ofNullable(this.positivesAboveThreshold);
    }

    /**
     * Score threshold.
     * 
     */
    @Import(name="scoreThreshold")
      private final @Nullable Integer scoreThreshold;

    public Optional<Integer> getScoreThreshold() {
        return this.scoreThreshold == null ? Optional.empty() : Optional.ofNullable(this.scoreThreshold);
    }

    public PredictionDistributionDefinitionResponseDistributions(
        @Nullable Double negatives,
        @Nullable Double negativesAboveThreshold,
        @Nullable Double positives,
        @Nullable Double positivesAboveThreshold,
        @Nullable Integer scoreThreshold) {
        this.negatives = negatives;
        this.negativesAboveThreshold = negativesAboveThreshold;
        this.positives = positives;
        this.positivesAboveThreshold = positivesAboveThreshold;
        this.scoreThreshold = scoreThreshold;
    }

    private PredictionDistributionDefinitionResponseDistributions() {
        this.negatives = null;
        this.negativesAboveThreshold = null;
        this.positives = null;
        this.positivesAboveThreshold = null;
        this.scoreThreshold = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PredictionDistributionDefinitionResponseDistributions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Double negatives;
        private @Nullable Double negativesAboveThreshold;
        private @Nullable Double positives;
        private @Nullable Double positivesAboveThreshold;
        private @Nullable Integer scoreThreshold;

        public Builder() {
    	      // Empty
        }

        public Builder(PredictionDistributionDefinitionResponseDistributions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.negatives = defaults.negatives;
    	      this.negativesAboveThreshold = defaults.negativesAboveThreshold;
    	      this.positives = defaults.positives;
    	      this.positivesAboveThreshold = defaults.positivesAboveThreshold;
    	      this.scoreThreshold = defaults.scoreThreshold;
        }

        public Builder negatives(@Nullable Double negatives) {
            this.negatives = negatives;
            return this;
        }

        public Builder negativesAboveThreshold(@Nullable Double negativesAboveThreshold) {
            this.negativesAboveThreshold = negativesAboveThreshold;
            return this;
        }

        public Builder positives(@Nullable Double positives) {
            this.positives = positives;
            return this;
        }

        public Builder positivesAboveThreshold(@Nullable Double positivesAboveThreshold) {
            this.positivesAboveThreshold = positivesAboveThreshold;
            return this;
        }

        public Builder scoreThreshold(@Nullable Integer scoreThreshold) {
            this.scoreThreshold = scoreThreshold;
            return this;
        }
        public PredictionDistributionDefinitionResponseDistributions build() {
            return new PredictionDistributionDefinitionResponseDistributions(negatives, negativesAboveThreshold, positives, positivesAboveThreshold, scoreThreshold);
        }
    }
}
