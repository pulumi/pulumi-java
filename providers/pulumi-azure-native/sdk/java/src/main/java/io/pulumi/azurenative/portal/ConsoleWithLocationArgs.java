// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.portal;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConsoleWithLocationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConsoleWithLocationArgs Empty = new ConsoleWithLocationArgs();

    /**
     * The name of the console
     * 
     */
    @InputImport(name="consoleName")
      private final @Nullable Output<String> consoleName;

    public Output<String> getConsoleName() {
        return this.consoleName == null ? Output.empty() : this.consoleName;
    }

    /**
     * The provider location
     * 
     */
    @InputImport(name="location", required=true)
      private final Output<String> location;

    public Output<String> getLocation() {
        return this.location;
    }

    public ConsoleWithLocationArgs(
        @Nullable Output<String> consoleName,
        Output<String> location) {
        this.consoleName = consoleName;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
    }

    private ConsoleWithLocationArgs() {
        this.consoleName = Output.empty();
        this.location = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConsoleWithLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> consoleName;
        private Output<String> location;

        public Builder() {
    	      // Empty
        }

        public Builder(ConsoleWithLocationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consoleName = defaults.consoleName;
    	      this.location = defaults.location;
        }

        public Builder consoleName(@Nullable Output<String> consoleName) {
            this.consoleName = consoleName;
            return this;
        }

        public Builder consoleName(@Nullable String consoleName) {
            this.consoleName = Output.ofNullable(consoleName);
            return this;
        }

        public Builder location(Output<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder location(String location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }
        public ConsoleWithLocationArgs build() {
            return new ConsoleWithLocationArgs(consoleName, location);
        }
    }
}
