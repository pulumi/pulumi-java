// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storagecache.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NfsAccessRuleResponse extends io.pulumi.resources.InvokeArgs {

    public static final NfsAccessRuleResponse Empty = new NfsAccessRuleResponse();

    @InputImport(name="access", required=true)
    private final String access;

    public String getAccess() {
        return this.access;
    }

    @InputImport(name="anonymousGID")
    private final @Nullable String anonymousGID;

    public Optional<String> getAnonymousGID() {
        return this.anonymousGID == null ? Optional.empty() : Optional.ofNullable(this.anonymousGID);
    }

    @InputImport(name="anonymousUID")
    private final @Nullable String anonymousUID;

    public Optional<String> getAnonymousUID() {
        return this.anonymousUID == null ? Optional.empty() : Optional.ofNullable(this.anonymousUID);
    }

    @InputImport(name="filter")
    private final @Nullable String filter;

    public Optional<String> getFilter() {
        return this.filter == null ? Optional.empty() : Optional.ofNullable(this.filter);
    }

    @InputImport(name="rootSquash")
    private final @Nullable Boolean rootSquash;

    public Optional<Boolean> getRootSquash() {
        return this.rootSquash == null ? Optional.empty() : Optional.ofNullable(this.rootSquash);
    }

    @InputImport(name="scope", required=true)
    private final String scope;

    public String getScope() {
        return this.scope;
    }

    @InputImport(name="submountAccess")
    private final @Nullable Boolean submountAccess;

    public Optional<Boolean> getSubmountAccess() {
        return this.submountAccess == null ? Optional.empty() : Optional.ofNullable(this.submountAccess);
    }

    @InputImport(name="suid")
    private final @Nullable Boolean suid;

    public Optional<Boolean> getSuid() {
        return this.suid == null ? Optional.empty() : Optional.ofNullable(this.suid);
    }

    public NfsAccessRuleResponse(
        String access,
        @Nullable String anonymousGID,
        @Nullable String anonymousUID,
        @Nullable String filter,
        @Nullable Boolean rootSquash,
        String scope,
        @Nullable Boolean submountAccess,
        @Nullable Boolean suid) {
        this.access = Objects.requireNonNull(access, "expected parameter 'access' to be non-null");
        this.anonymousGID = anonymousGID;
        this.anonymousUID = anonymousUID;
        this.filter = filter;
        this.rootSquash = rootSquash;
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
        this.submountAccess = submountAccess;
        this.suid = suid;
    }

    private NfsAccessRuleResponse() {
        this.access = null;
        this.anonymousGID = null;
        this.anonymousUID = null;
        this.filter = null;
        this.rootSquash = null;
        this.scope = null;
        this.submountAccess = null;
        this.suid = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NfsAccessRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String access;
        private @Nullable String anonymousGID;
        private @Nullable String anonymousUID;
        private @Nullable String filter;
        private @Nullable Boolean rootSquash;
        private String scope;
        private @Nullable Boolean submountAccess;
        private @Nullable Boolean suid;

        public Builder() {
    	      // Empty
        }

        public Builder(NfsAccessRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.anonymousGID = defaults.anonymousGID;
    	      this.anonymousUID = defaults.anonymousUID;
    	      this.filter = defaults.filter;
    	      this.rootSquash = defaults.rootSquash;
    	      this.scope = defaults.scope;
    	      this.submountAccess = defaults.submountAccess;
    	      this.suid = defaults.suid;
        }

        public Builder setAccess(String access) {
            this.access = Objects.requireNonNull(access);
            return this;
        }

        public Builder setAnonymousGID(@Nullable String anonymousGID) {
            this.anonymousGID = anonymousGID;
            return this;
        }

        public Builder setAnonymousUID(@Nullable String anonymousUID) {
            this.anonymousUID = anonymousUID;
            return this;
        }

        public Builder setFilter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }

        public Builder setRootSquash(@Nullable Boolean rootSquash) {
            this.rootSquash = rootSquash;
            return this;
        }

        public Builder setScope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }

        public Builder setSubmountAccess(@Nullable Boolean submountAccess) {
            this.submountAccess = submountAccess;
            return this;
        }

        public Builder setSuid(@Nullable Boolean suid) {
            this.suid = suid;
            return this;
        }

        public NfsAccessRuleResponse build() {
            return new NfsAccessRuleResponse(access, anonymousGID, anonymousUID, filter, rootSquash, scope, submountAccess, suid);
        }
    }
}
