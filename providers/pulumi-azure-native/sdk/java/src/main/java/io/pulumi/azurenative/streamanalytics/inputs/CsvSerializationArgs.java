// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.azurenative.streamanalytics.enums.Encoding;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes how data from an input is serialized or how data is serialized when written to an output in CSV format.
 * 
 */
public final class CsvSerializationArgs extends io.pulumi.resources.ResourceArgs {

    public static final CsvSerializationArgs Empty = new CsvSerializationArgs();

    /**
     * Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="encoding")
      private final @Nullable Output<Either<String,Encoding>> encoding;

    public Output<Either<String,Encoding>> getEncoding() {
        return this.encoding == null ? Output.empty() : this.encoding;
    }

    /**
     * Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="fieldDelimiter")
      private final @Nullable Output<String> fieldDelimiter;

    public Output<String> getFieldDelimiter() {
        return this.fieldDelimiter == null ? Output.empty() : this.fieldDelimiter;
    }

    /**
     * Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
     * Expected value is 'Csv'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public CsvSerializationArgs(
        @Nullable Output<Either<String,Encoding>> encoding,
        @Nullable Output<String> fieldDelimiter,
        Output<String> type) {
        this.encoding = encoding;
        this.fieldDelimiter = fieldDelimiter;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private CsvSerializationArgs() {
        this.encoding = Output.empty();
        this.fieldDelimiter = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CsvSerializationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,Encoding>> encoding;
        private @Nullable Output<String> fieldDelimiter;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(CsvSerializationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encoding = defaults.encoding;
    	      this.fieldDelimiter = defaults.fieldDelimiter;
    	      this.type = defaults.type;
        }

        public Builder encoding(@Nullable Output<Either<String,Encoding>> encoding) {
            this.encoding = encoding;
            return this;
        }

        public Builder encoding(@Nullable Either<String,Encoding> encoding) {
            this.encoding = Output.ofNullable(encoding);
            return this;
        }

        public Builder fieldDelimiter(@Nullable Output<String> fieldDelimiter) {
            this.fieldDelimiter = fieldDelimiter;
            return this;
        }

        public Builder fieldDelimiter(@Nullable String fieldDelimiter) {
            this.fieldDelimiter = Output.ofNullable(fieldDelimiter);
            return this;
        }

        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public CsvSerializationArgs build() {
            return new CsvSerializationArgs(encoding, fieldDelimiter, type);
        }
    }
}
