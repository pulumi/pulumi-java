// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The configuration settings of the endpoints used for the custom Open ID Connect provider.
 * 
 */
public final class OpenIdConnectConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final OpenIdConnectConfigArgs Empty = new OpenIdConnectConfigArgs();

    /**
     * The endpoint to be used to make an authorization request.
     * 
     */
    @InputImport(name="authorizationEndpoint")
      private final @Nullable Input<String> authorizationEndpoint;

    public Input<String> getAuthorizationEndpoint() {
        return this.authorizationEndpoint == null ? Input.empty() : this.authorizationEndpoint;
    }

    /**
     * The endpoint that provides the keys necessary to validate the token.
     * 
     */
    @InputImport(name="certificationUri")
      private final @Nullable Input<String> certificationUri;

    public Input<String> getCertificationUri() {
        return this.certificationUri == null ? Input.empty() : this.certificationUri;
    }

    /**
     * The endpoint that issues the token.
     * 
     */
    @InputImport(name="issuer")
      private final @Nullable Input<String> issuer;

    public Input<String> getIssuer() {
        return this.issuer == null ? Input.empty() : this.issuer;
    }

    /**
     * The endpoint to be used to request a token.
     * 
     */
    @InputImport(name="tokenEndpoint")
      private final @Nullable Input<String> tokenEndpoint;

    public Input<String> getTokenEndpoint() {
        return this.tokenEndpoint == null ? Input.empty() : this.tokenEndpoint;
    }

    /**
     * The endpoint that contains all the configuration endpoints for the provider.
     * 
     */
    @InputImport(name="wellKnownOpenIdConfiguration")
      private final @Nullable Input<String> wellKnownOpenIdConfiguration;

    public Input<String> getWellKnownOpenIdConfiguration() {
        return this.wellKnownOpenIdConfiguration == null ? Input.empty() : this.wellKnownOpenIdConfiguration;
    }

    public OpenIdConnectConfigArgs(
        @Nullable Input<String> authorizationEndpoint,
        @Nullable Input<String> certificationUri,
        @Nullable Input<String> issuer,
        @Nullable Input<String> tokenEndpoint,
        @Nullable Input<String> wellKnownOpenIdConfiguration) {
        this.authorizationEndpoint = authorizationEndpoint;
        this.certificationUri = certificationUri;
        this.issuer = issuer;
        this.tokenEndpoint = tokenEndpoint;
        this.wellKnownOpenIdConfiguration = wellKnownOpenIdConfiguration;
    }

    private OpenIdConnectConfigArgs() {
        this.authorizationEndpoint = Input.empty();
        this.certificationUri = Input.empty();
        this.issuer = Input.empty();
        this.tokenEndpoint = Input.empty();
        this.wellKnownOpenIdConfiguration = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenIdConnectConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> authorizationEndpoint;
        private @Nullable Input<String> certificationUri;
        private @Nullable Input<String> issuer;
        private @Nullable Input<String> tokenEndpoint;
        private @Nullable Input<String> wellKnownOpenIdConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(OpenIdConnectConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationEndpoint = defaults.authorizationEndpoint;
    	      this.certificationUri = defaults.certificationUri;
    	      this.issuer = defaults.issuer;
    	      this.tokenEndpoint = defaults.tokenEndpoint;
    	      this.wellKnownOpenIdConfiguration = defaults.wellKnownOpenIdConfiguration;
        }

        public Builder setAuthorizationEndpoint(@Nullable Input<String> authorizationEndpoint) {
            this.authorizationEndpoint = authorizationEndpoint;
            return this;
        }

        public Builder setAuthorizationEndpoint(@Nullable String authorizationEndpoint) {
            this.authorizationEndpoint = Input.ofNullable(authorizationEndpoint);
            return this;
        }

        public Builder setCertificationUri(@Nullable Input<String> certificationUri) {
            this.certificationUri = certificationUri;
            return this;
        }

        public Builder setCertificationUri(@Nullable String certificationUri) {
            this.certificationUri = Input.ofNullable(certificationUri);
            return this;
        }

        public Builder setIssuer(@Nullable Input<String> issuer) {
            this.issuer = issuer;
            return this;
        }

        public Builder setIssuer(@Nullable String issuer) {
            this.issuer = Input.ofNullable(issuer);
            return this;
        }

        public Builder setTokenEndpoint(@Nullable Input<String> tokenEndpoint) {
            this.tokenEndpoint = tokenEndpoint;
            return this;
        }

        public Builder setTokenEndpoint(@Nullable String tokenEndpoint) {
            this.tokenEndpoint = Input.ofNullable(tokenEndpoint);
            return this;
        }

        public Builder setWellKnownOpenIdConfiguration(@Nullable Input<String> wellKnownOpenIdConfiguration) {
            this.wellKnownOpenIdConfiguration = wellKnownOpenIdConfiguration;
            return this;
        }

        public Builder setWellKnownOpenIdConfiguration(@Nullable String wellKnownOpenIdConfiguration) {
            this.wellKnownOpenIdConfiguration = Input.ofNullable(wellKnownOpenIdConfiguration);
            return this;
        }
        public OpenIdConnectConfigArgs build() {
            return new OpenIdConnectConfigArgs(authorizationEndpoint, certificationUri, issuer, tokenEndpoint, wellKnownOpenIdConfiguration);
        }
    }
}
