// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.netapp;

import io.pulumi.azurenative.netapp.enums.SecurityStyle;
import io.pulumi.azurenative.netapp.enums.ServiceLevel;
import io.pulumi.azurenative.netapp.inputs.VolumePropertiesDataProtectionArgs;
import io.pulumi.azurenative.netapp.inputs.VolumePropertiesExportPolicyArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VolumeArgs extends io.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * The name of the NetApp account
     * 
     */
    @InputImport(name="accountName", required=true)
        private final Input<String> accountName;

    public Input<String> getAccountName() {
        return this.accountName;
    }

    /**
     * UUID v4 or resource identifier used to identify the Backup.
     * 
     */
    @InputImport(name="backupId")
        private final @Nullable Input<String> backupId;

    public Input<String> getBackupId() {
        return this.backupId == null ? Input.empty() : this.backupId;
    }

    /**
     * A unique file path for the volume. Used when creating mount targets
     * 
     */
    @InputImport(name="creationToken", required=true)
        private final Input<String> creationToken;

    public Input<String> getCreationToken() {
        return this.creationToken;
    }

    /**
     * DataProtection type volumes include an object containing details of the replication
     * 
     */
    @InputImport(name="dataProtection")
        private final @Nullable Input<VolumePropertiesDataProtectionArgs> dataProtection;

    public Input<VolumePropertiesDataProtectionArgs> getDataProtection() {
        return this.dataProtection == null ? Input.empty() : this.dataProtection;
    }

    /**
     * Encryption Key Source. Possible values are: 'Microsoft.NetApp'
     * 
     */
    @InputImport(name="encryptionKeySource")
        private final @Nullable Input<String> encryptionKeySource;

    public Input<String> getEncryptionKeySource() {
        return this.encryptionKeySource == null ? Input.empty() : this.encryptionKeySource;
    }

    /**
     * Set of export policy rules
     * 
     */
    @InputImport(name="exportPolicy")
        private final @Nullable Input<VolumePropertiesExportPolicyArgs> exportPolicy;

    public Input<VolumePropertiesExportPolicyArgs> getExportPolicy() {
        return this.exportPolicy == null ? Input.empty() : this.exportPolicy;
    }

    /**
     * Restoring
     * 
     */
    @InputImport(name="isRestoring")
        private final @Nullable Input<Boolean> isRestoring;

    public Input<Boolean> getIsRestoring() {
        return this.isRestoring == null ? Input.empty() : this.isRestoring;
    }

    /**
     * Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     * 
     */
    @InputImport(name="kerberosEnabled")
        private final @Nullable Input<Boolean> kerberosEnabled;

    public Input<Boolean> getKerberosEnabled() {
        return this.kerberosEnabled == null ? Input.empty() : this.kerberosEnabled;
    }

    /**
     * Specifies whether LDAP is enabled or not for a given NFS volume.
     * 
     */
    @InputImport(name="ldapEnabled")
        private final @Nullable Input<Boolean> ldapEnabled;

    public Input<Boolean> getLdapEnabled() {
        return this.ldapEnabled == null ? Input.empty() : this.ldapEnabled;
    }

    /**
     * Resource location
     * 
     */
    @InputImport(name="location")
        private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the capacity pool
     * 
     */
    @InputImport(name="poolName", required=true)
        private final Input<String> poolName;

    public Input<String> getPoolName() {
        return this.poolName;
    }

    /**
     * Set of protocol types, default NFSv3, CIFS for SMB protocol
     * 
     */
    @InputImport(name="protocolTypes")
        private final @Nullable Input<List<String>> protocolTypes;

    public Input<List<String>> getProtocolTypes() {
        return this.protocolTypes == null ? Input.empty() : this.protocolTypes;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     * 
     */
    @InputImport(name="securityStyle")
        private final @Nullable Input<Either<String,SecurityStyle>> securityStyle;

    public Input<Either<String,SecurityStyle>> getSecurityStyle() {
        return this.securityStyle == null ? Input.empty() : this.securityStyle;
    }

    /**
     * The service level of the file system
     * 
     */
    @InputImport(name="serviceLevel")
        private final @Nullable Input<Either<String,ServiceLevel>> serviceLevel;

    public Input<Either<String,ServiceLevel>> getServiceLevel() {
        return this.serviceLevel == null ? Input.empty() : this.serviceLevel;
    }

    /**
     * Enables continuously available share property for smb volume. Only applicable for SMB volume
     * 
     */
    @InputImport(name="smbContinuouslyAvailable")
        private final @Nullable Input<Boolean> smbContinuouslyAvailable;

    public Input<Boolean> getSmbContinuouslyAvailable() {
        return this.smbContinuouslyAvailable == null ? Input.empty() : this.smbContinuouslyAvailable;
    }

    /**
     * Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
     * 
     */
    @InputImport(name="smbEncryption")
        private final @Nullable Input<Boolean> smbEncryption;

    public Input<Boolean> getSmbEncryption() {
        return this.smbEncryption == null ? Input.empty() : this.smbEncryption;
    }

    /**
     * If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).
     * 
     */
    @InputImport(name="snapshotDirectoryVisible")
        private final @Nullable Input<Boolean> snapshotDirectoryVisible;

    public Input<Boolean> getSnapshotDirectoryVisible() {
        return this.snapshotDirectoryVisible == null ? Input.empty() : this.snapshotDirectoryVisible;
    }

    /**
     * UUID v4 or resource identifier used to identify the Snapshot.
     * 
     */
    @InputImport(name="snapshotId")
        private final @Nullable Input<String> snapshotId;

    public Input<String> getSnapshotId() {
        return this.snapshotId == null ? Input.empty() : this.snapshotId;
    }

    /**
     * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     * 
     */
    @InputImport(name="subnetId", required=true)
        private final Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId;
    }

    /**
     * Resource tags
     * 
     */
    @InputImport(name="tags")
        private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="throughputMibps")
        private final @Nullable Input<Double> throughputMibps;

    public Input<Double> getThroughputMibps() {
        return this.throughputMibps == null ? Input.empty() : this.throughputMibps;
    }

    /**
     * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
     * 
     */
    @InputImport(name="usageThreshold", required=true)
        private final Input<Double> usageThreshold;

    public Input<Double> getUsageThreshold() {
        return this.usageThreshold;
    }

    /**
     * The name of the volume
     * 
     */
    @InputImport(name="volumeName")
        private final @Nullable Input<String> volumeName;

    public Input<String> getVolumeName() {
        return this.volumeName == null ? Input.empty() : this.volumeName;
    }

    /**
     * What type of volume is this
     * 
     */
    @InputImport(name="volumeType")
        private final @Nullable Input<String> volumeType;

    public Input<String> getVolumeType() {
        return this.volumeType == null ? Input.empty() : this.volumeType;
    }

    public VolumeArgs(
        Input<String> accountName,
        @Nullable Input<String> backupId,
        Input<String> creationToken,
        @Nullable Input<VolumePropertiesDataProtectionArgs> dataProtection,
        @Nullable Input<String> encryptionKeySource,
        @Nullable Input<VolumePropertiesExportPolicyArgs> exportPolicy,
        @Nullable Input<Boolean> isRestoring,
        @Nullable Input<Boolean> kerberosEnabled,
        @Nullable Input<Boolean> ldapEnabled,
        @Nullable Input<String> location,
        Input<String> poolName,
        @Nullable Input<List<String>> protocolTypes,
        Input<String> resourceGroupName,
        @Nullable Input<Either<String,SecurityStyle>> securityStyle,
        @Nullable Input<Either<String,ServiceLevel>> serviceLevel,
        @Nullable Input<Boolean> smbContinuouslyAvailable,
        @Nullable Input<Boolean> smbEncryption,
        @Nullable Input<Boolean> snapshotDirectoryVisible,
        @Nullable Input<String> snapshotId,
        Input<String> subnetId,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Double> throughputMibps,
        Input<Double> usageThreshold,
        @Nullable Input<String> volumeName,
        @Nullable Input<String> volumeType) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.backupId = backupId;
        this.creationToken = Objects.requireNonNull(creationToken, "expected parameter 'creationToken' to be non-null");
        this.dataProtection = dataProtection;
        this.encryptionKeySource = encryptionKeySource;
        this.exportPolicy = exportPolicy;
        this.isRestoring = isRestoring;
        this.kerberosEnabled = kerberosEnabled == null ? Input.ofNullable(false) : kerberosEnabled;
        this.ldapEnabled = ldapEnabled == null ? Input.ofNullable(false) : ldapEnabled;
        this.location = location;
        this.poolName = Objects.requireNonNull(poolName, "expected parameter 'poolName' to be non-null");
        this.protocolTypes = protocolTypes;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.securityStyle = securityStyle == null ? Input.ofLeft("unix") : securityStyle;
        this.serviceLevel = serviceLevel == null ? Input.ofLeft("Premium") : serviceLevel;
        this.smbContinuouslyAvailable = smbContinuouslyAvailable == null ? Input.ofNullable(false) : smbContinuouslyAvailable;
        this.smbEncryption = smbEncryption == null ? Input.ofNullable(false) : smbEncryption;
        this.snapshotDirectoryVisible = snapshotDirectoryVisible == null ? Input.ofNullable(true) : snapshotDirectoryVisible;
        this.snapshotId = snapshotId;
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
        this.tags = tags;
        this.throughputMibps = throughputMibps == null ? Input.ofNullable(0e+00) : throughputMibps;
        this.usageThreshold = usageThreshold == null ? Input.ofNullable(1.073741824e+11) : Objects.requireNonNull(usageThreshold, "expected parameter 'usageThreshold' to be non-null");
        this.volumeName = volumeName;
        this.volumeType = volumeType;
    }

    private VolumeArgs() {
        this.accountName = Input.empty();
        this.backupId = Input.empty();
        this.creationToken = Input.empty();
        this.dataProtection = Input.empty();
        this.encryptionKeySource = Input.empty();
        this.exportPolicy = Input.empty();
        this.isRestoring = Input.empty();
        this.kerberosEnabled = Input.empty();
        this.ldapEnabled = Input.empty();
        this.location = Input.empty();
        this.poolName = Input.empty();
        this.protocolTypes = Input.empty();
        this.resourceGroupName = Input.empty();
        this.securityStyle = Input.empty();
        this.serviceLevel = Input.empty();
        this.smbContinuouslyAvailable = Input.empty();
        this.smbEncryption = Input.empty();
        this.snapshotDirectoryVisible = Input.empty();
        this.snapshotId = Input.empty();
        this.subnetId = Input.empty();
        this.tags = Input.empty();
        this.throughputMibps = Input.empty();
        this.usageThreshold = Input.empty();
        this.volumeName = Input.empty();
        this.volumeType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> accountName;
        private @Nullable Input<String> backupId;
        private Input<String> creationToken;
        private @Nullable Input<VolumePropertiesDataProtectionArgs> dataProtection;
        private @Nullable Input<String> encryptionKeySource;
        private @Nullable Input<VolumePropertiesExportPolicyArgs> exportPolicy;
        private @Nullable Input<Boolean> isRestoring;
        private @Nullable Input<Boolean> kerberosEnabled;
        private @Nullable Input<Boolean> ldapEnabled;
        private @Nullable Input<String> location;
        private Input<String> poolName;
        private @Nullable Input<List<String>> protocolTypes;
        private Input<String> resourceGroupName;
        private @Nullable Input<Either<String,SecurityStyle>> securityStyle;
        private @Nullable Input<Either<String,ServiceLevel>> serviceLevel;
        private @Nullable Input<Boolean> smbContinuouslyAvailable;
        private @Nullable Input<Boolean> smbEncryption;
        private @Nullable Input<Boolean> snapshotDirectoryVisible;
        private @Nullable Input<String> snapshotId;
        private Input<String> subnetId;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Double> throughputMibps;
        private Input<Double> usageThreshold;
        private @Nullable Input<String> volumeName;
        private @Nullable Input<String> volumeType;

        public Builder() {
    	      // Empty
        }

        public Builder(VolumeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.backupId = defaults.backupId;
    	      this.creationToken = defaults.creationToken;
    	      this.dataProtection = defaults.dataProtection;
    	      this.encryptionKeySource = defaults.encryptionKeySource;
    	      this.exportPolicy = defaults.exportPolicy;
    	      this.isRestoring = defaults.isRestoring;
    	      this.kerberosEnabled = defaults.kerberosEnabled;
    	      this.ldapEnabled = defaults.ldapEnabled;
    	      this.location = defaults.location;
    	      this.poolName = defaults.poolName;
    	      this.protocolTypes = defaults.protocolTypes;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.securityStyle = defaults.securityStyle;
    	      this.serviceLevel = defaults.serviceLevel;
    	      this.smbContinuouslyAvailable = defaults.smbContinuouslyAvailable;
    	      this.smbEncryption = defaults.smbEncryption;
    	      this.snapshotDirectoryVisible = defaults.snapshotDirectoryVisible;
    	      this.snapshotId = defaults.snapshotId;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.throughputMibps = defaults.throughputMibps;
    	      this.usageThreshold = defaults.usageThreshold;
    	      this.volumeName = defaults.volumeName;
    	      this.volumeType = defaults.volumeType;
        }

        public Builder setAccountName(Input<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }

        public Builder setAccountName(String accountName) {
            this.accountName = Input.of(Objects.requireNonNull(accountName));
            return this;
        }

        public Builder setBackupId(@Nullable Input<String> backupId) {
            this.backupId = backupId;
            return this;
        }

        public Builder setBackupId(@Nullable String backupId) {
            this.backupId = Input.ofNullable(backupId);
            return this;
        }

        public Builder setCreationToken(Input<String> creationToken) {
            this.creationToken = Objects.requireNonNull(creationToken);
            return this;
        }

        public Builder setCreationToken(String creationToken) {
            this.creationToken = Input.of(Objects.requireNonNull(creationToken));
            return this;
        }

        public Builder setDataProtection(@Nullable Input<VolumePropertiesDataProtectionArgs> dataProtection) {
            this.dataProtection = dataProtection;
            return this;
        }

        public Builder setDataProtection(@Nullable VolumePropertiesDataProtectionArgs dataProtection) {
            this.dataProtection = Input.ofNullable(dataProtection);
            return this;
        }

        public Builder setEncryptionKeySource(@Nullable Input<String> encryptionKeySource) {
            this.encryptionKeySource = encryptionKeySource;
            return this;
        }

        public Builder setEncryptionKeySource(@Nullable String encryptionKeySource) {
            this.encryptionKeySource = Input.ofNullable(encryptionKeySource);
            return this;
        }

        public Builder setExportPolicy(@Nullable Input<VolumePropertiesExportPolicyArgs> exportPolicy) {
            this.exportPolicy = exportPolicy;
            return this;
        }

        public Builder setExportPolicy(@Nullable VolumePropertiesExportPolicyArgs exportPolicy) {
            this.exportPolicy = Input.ofNullable(exportPolicy);
            return this;
        }

        public Builder setIsRestoring(@Nullable Input<Boolean> isRestoring) {
            this.isRestoring = isRestoring;
            return this;
        }

        public Builder setIsRestoring(@Nullable Boolean isRestoring) {
            this.isRestoring = Input.ofNullable(isRestoring);
            return this;
        }

        public Builder setKerberosEnabled(@Nullable Input<Boolean> kerberosEnabled) {
            this.kerberosEnabled = kerberosEnabled;
            return this;
        }

        public Builder setKerberosEnabled(@Nullable Boolean kerberosEnabled) {
            this.kerberosEnabled = Input.ofNullable(kerberosEnabled);
            return this;
        }

        public Builder setLdapEnabled(@Nullable Input<Boolean> ldapEnabled) {
            this.ldapEnabled = ldapEnabled;
            return this;
        }

        public Builder setLdapEnabled(@Nullable Boolean ldapEnabled) {
            this.ldapEnabled = Input.ofNullable(ldapEnabled);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setPoolName(Input<String> poolName) {
            this.poolName = Objects.requireNonNull(poolName);
            return this;
        }

        public Builder setPoolName(String poolName) {
            this.poolName = Input.of(Objects.requireNonNull(poolName));
            return this;
        }

        public Builder setProtocolTypes(@Nullable Input<List<String>> protocolTypes) {
            this.protocolTypes = protocolTypes;
            return this;
        }

        public Builder setProtocolTypes(@Nullable List<String> protocolTypes) {
            this.protocolTypes = Input.ofNullable(protocolTypes);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSecurityStyle(@Nullable Input<Either<String,SecurityStyle>> securityStyle) {
            this.securityStyle = securityStyle;
            return this;
        }

        public Builder setSecurityStyle(@Nullable Either<String,SecurityStyle> securityStyle) {
            this.securityStyle = Input.ofNullable(securityStyle);
            return this;
        }

        public Builder setServiceLevel(@Nullable Input<Either<String,ServiceLevel>> serviceLevel) {
            this.serviceLevel = serviceLevel;
            return this;
        }

        public Builder setServiceLevel(@Nullable Either<String,ServiceLevel> serviceLevel) {
            this.serviceLevel = Input.ofNullable(serviceLevel);
            return this;
        }

        public Builder setSmbContinuouslyAvailable(@Nullable Input<Boolean> smbContinuouslyAvailable) {
            this.smbContinuouslyAvailable = smbContinuouslyAvailable;
            return this;
        }

        public Builder setSmbContinuouslyAvailable(@Nullable Boolean smbContinuouslyAvailable) {
            this.smbContinuouslyAvailable = Input.ofNullable(smbContinuouslyAvailable);
            return this;
        }

        public Builder setSmbEncryption(@Nullable Input<Boolean> smbEncryption) {
            this.smbEncryption = smbEncryption;
            return this;
        }

        public Builder setSmbEncryption(@Nullable Boolean smbEncryption) {
            this.smbEncryption = Input.ofNullable(smbEncryption);
            return this;
        }

        public Builder setSnapshotDirectoryVisible(@Nullable Input<Boolean> snapshotDirectoryVisible) {
            this.snapshotDirectoryVisible = snapshotDirectoryVisible;
            return this;
        }

        public Builder setSnapshotDirectoryVisible(@Nullable Boolean snapshotDirectoryVisible) {
            this.snapshotDirectoryVisible = Input.ofNullable(snapshotDirectoryVisible);
            return this;
        }

        public Builder setSnapshotId(@Nullable Input<String> snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }

        public Builder setSnapshotId(@Nullable String snapshotId) {
            this.snapshotId = Input.ofNullable(snapshotId);
            return this;
        }

        public Builder setSubnetId(Input<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }

        public Builder setSubnetId(String subnetId) {
            this.subnetId = Input.of(Objects.requireNonNull(subnetId));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setThroughputMibps(@Nullable Input<Double> throughputMibps) {
            this.throughputMibps = throughputMibps;
            return this;
        }

        public Builder setThroughputMibps(@Nullable Double throughputMibps) {
            this.throughputMibps = Input.ofNullable(throughputMibps);
            return this;
        }

        public Builder setUsageThreshold(Input<Double> usageThreshold) {
            this.usageThreshold = Objects.requireNonNull(usageThreshold);
            return this;
        }

        public Builder setUsageThreshold(Double usageThreshold) {
            this.usageThreshold = Input.of(Objects.requireNonNull(usageThreshold));
            return this;
        }

        public Builder setVolumeName(@Nullable Input<String> volumeName) {
            this.volumeName = volumeName;
            return this;
        }

        public Builder setVolumeName(@Nullable String volumeName) {
            this.volumeName = Input.ofNullable(volumeName);
            return this;
        }

        public Builder setVolumeType(@Nullable Input<String> volumeType) {
            this.volumeType = volumeType;
            return this;
        }

        public Builder setVolumeType(@Nullable String volumeType) {
            this.volumeType = Input.ofNullable(volumeType);
            return this;
        }
        public VolumeArgs build() {
            return new VolumeArgs(accountName, backupId, creationToken, dataProtection, encryptionKeySource, exportPolicy, isRestoring, kerberosEnabled, ldapEnabled, location, poolName, protocolTypes, resourceGroupName, securityStyle, serviceLevel, smbContinuouslyAvailable, smbEncryption, snapshotDirectoryVisible, snapshotId, subnetId, tags, throughputMibps, usageThreshold, volumeName, volumeType);
        }
    }
}
