// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Specifies a CORS rule for the Blob service.
 * 
 */
public final class CorsRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final CorsRuleArgs Empty = new CorsRuleArgs();

    /**
     * Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin request.
     * 
     */
    @InputImport(name="allowedHeaders", required=true)
      private final Output<List<String>> allowedHeaders;

    public Output<List<String>> getAllowedHeaders() {
        return this.allowedHeaders;
    }

    /**
     * Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the origin.
     * 
     */
    @InputImport(name="allowedMethods", required=true)
      private final Output<List<String>> allowedMethods;

    public Output<List<String>> getAllowedMethods() {
        return this.allowedMethods;
    }

    /**
     * Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains
     * 
     */
    @InputImport(name="allowedOrigins", required=true)
      private final Output<List<String>> allowedOrigins;

    public Output<List<String>> getAllowedOrigins() {
        return this.allowedOrigins;
    }

    /**
     * Required if CorsRule element is present. A list of response headers to expose to CORS clients.
     * 
     */
    @InputImport(name="exposedHeaders", required=true)
      private final Output<List<String>> exposedHeaders;

    public Output<List<String>> getExposedHeaders() {
        return this.exposedHeaders;
    }

    /**
     * Required if CorsRule element is present. The number of seconds that the client/browser should cache a preflight response.
     * 
     */
    @InputImport(name="maxAgeInSeconds", required=true)
      private final Output<Integer> maxAgeInSeconds;

    public Output<Integer> getMaxAgeInSeconds() {
        return this.maxAgeInSeconds;
    }

    public CorsRuleArgs(
        Output<List<String>> allowedHeaders,
        Output<List<String>> allowedMethods,
        Output<List<String>> allowedOrigins,
        Output<List<String>> exposedHeaders,
        Output<Integer> maxAgeInSeconds) {
        this.allowedHeaders = Objects.requireNonNull(allowedHeaders, "expected parameter 'allowedHeaders' to be non-null");
        this.allowedMethods = Objects.requireNonNull(allowedMethods, "expected parameter 'allowedMethods' to be non-null");
        this.allowedOrigins = Objects.requireNonNull(allowedOrigins, "expected parameter 'allowedOrigins' to be non-null");
        this.exposedHeaders = Objects.requireNonNull(exposedHeaders, "expected parameter 'exposedHeaders' to be non-null");
        this.maxAgeInSeconds = Objects.requireNonNull(maxAgeInSeconds, "expected parameter 'maxAgeInSeconds' to be non-null");
    }

    private CorsRuleArgs() {
        this.allowedHeaders = Output.empty();
        this.allowedMethods = Output.empty();
        this.allowedOrigins = Output.empty();
        this.exposedHeaders = Output.empty();
        this.maxAgeInSeconds = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CorsRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> allowedHeaders;
        private Output<List<String>> allowedMethods;
        private Output<List<String>> allowedOrigins;
        private Output<List<String>> exposedHeaders;
        private Output<Integer> maxAgeInSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(CorsRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedHeaders = defaults.allowedHeaders;
    	      this.allowedMethods = defaults.allowedMethods;
    	      this.allowedOrigins = defaults.allowedOrigins;
    	      this.exposedHeaders = defaults.exposedHeaders;
    	      this.maxAgeInSeconds = defaults.maxAgeInSeconds;
        }

        public Builder allowedHeaders(Output<List<String>> allowedHeaders) {
            this.allowedHeaders = Objects.requireNonNull(allowedHeaders);
            return this;
        }

        public Builder allowedHeaders(List<String> allowedHeaders) {
            this.allowedHeaders = Output.of(Objects.requireNonNull(allowedHeaders));
            return this;
        }

        public Builder allowedMethods(Output<List<String>> allowedMethods) {
            this.allowedMethods = Objects.requireNonNull(allowedMethods);
            return this;
        }

        public Builder allowedMethods(List<String> allowedMethods) {
            this.allowedMethods = Output.of(Objects.requireNonNull(allowedMethods));
            return this;
        }

        public Builder allowedOrigins(Output<List<String>> allowedOrigins) {
            this.allowedOrigins = Objects.requireNonNull(allowedOrigins);
            return this;
        }

        public Builder allowedOrigins(List<String> allowedOrigins) {
            this.allowedOrigins = Output.of(Objects.requireNonNull(allowedOrigins));
            return this;
        }

        public Builder exposedHeaders(Output<List<String>> exposedHeaders) {
            this.exposedHeaders = Objects.requireNonNull(exposedHeaders);
            return this;
        }

        public Builder exposedHeaders(List<String> exposedHeaders) {
            this.exposedHeaders = Output.of(Objects.requireNonNull(exposedHeaders));
            return this;
        }

        public Builder maxAgeInSeconds(Output<Integer> maxAgeInSeconds) {
            this.maxAgeInSeconds = Objects.requireNonNull(maxAgeInSeconds);
            return this;
        }

        public Builder maxAgeInSeconds(Integer maxAgeInSeconds) {
            this.maxAgeInSeconds = Output.of(Objects.requireNonNull(maxAgeInSeconds));
            return this;
        }
        public CorsRuleArgs build() {
            return new CorsRuleArgs(allowedHeaders, allowedMethods, allowedOrigins, exposedHeaders, maxAgeInSeconds);
        }
    }
}
