// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.inputs;

import io.pulumi.azurenative.recoveryservices.inputs.AzureVmDiskDetailsResponse;
import io.pulumi.azurenative.recoveryservices.inputs.InitialReplicationDetailsResponse;
import io.pulumi.azurenative.recoveryservices.inputs.OSDetailsResponse;
import io.pulumi.azurenative.recoveryservices.inputs.VMNicDetailsResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Hyper V Replica Azure provider specific settings.
 * 
 */
public final class HyperVReplicaAzureReplicationDetailsResponse extends io.pulumi.resources.InvokeArgs {

    public static final HyperVReplicaAzureReplicationDetailsResponse Empty = new HyperVReplicaAzureReplicationDetailsResponse();

    /**
     * Azure VM Disk details.
     * 
     */
    @InputImport(name="azureVmDiskDetails")
    private final @Nullable List<AzureVmDiskDetailsResponse> azureVmDiskDetails;

    public List<AzureVmDiskDetailsResponse> getAzureVmDiskDetails() {
        return this.azureVmDiskDetails == null ? List.of() : this.azureVmDiskDetails;
    }

    /**
     * The selected option to enable RDP\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.
     * 
     */
    @InputImport(name="enableRdpOnTargetOption")
    private final @Nullable String enableRdpOnTargetOption;

    public Optional<String> getEnableRdpOnTargetOption() {
        return this.enableRdpOnTargetOption == null ? Optional.empty() : Optional.ofNullable(this.enableRdpOnTargetOption);
    }

    /**
     * The encryption info.
     * 
     */
    @InputImport(name="encryption")
    private final @Nullable String encryption;

    public Optional<String> getEncryption() {
        return this.encryption == null ? Optional.empty() : Optional.ofNullable(this.encryption);
    }

    /**
     * Initial replication details.
     * 
     */
    @InputImport(name="initialReplicationDetails")
    private final @Nullable InitialReplicationDetailsResponse initialReplicationDetails;

    public Optional<InitialReplicationDetailsResponse> getInitialReplicationDetails() {
        return this.initialReplicationDetails == null ? Optional.empty() : Optional.ofNullable(this.initialReplicationDetails);
    }

    /**
     * Gets the Instance type.
     * Expected value is 'HyperVReplicaAzure'.
     * 
     */
    @InputImport(name="instanceType", required=true)
    private final String instanceType;

    public String getInstanceType() {
        return this.instanceType;
    }

    /**
     * The Last replication time.
     * 
     */
    @InputImport(name="lastReplicatedTime")
    private final @Nullable String lastReplicatedTime;

    public Optional<String> getLastReplicatedTime() {
        return this.lastReplicatedTime == null ? Optional.empty() : Optional.ofNullable(this.lastReplicatedTime);
    }

    /**
     * The last RPO calculated time.
     * 
     */
    @InputImport(name="lastRpoCalculatedTime")
    private final @Nullable String lastRpoCalculatedTime;

    public Optional<String> getLastRpoCalculatedTime() {
        return this.lastRpoCalculatedTime == null ? Optional.empty() : Optional.ofNullable(this.lastRpoCalculatedTime);
    }

    /**
     * License Type of the VM to be used.
     * 
     */
    @InputImport(name="licenseType")
    private final @Nullable String licenseType;

    public Optional<String> getLicenseType() {
        return this.licenseType == null ? Optional.empty() : Optional.ofNullable(this.licenseType);
    }

    /**
     * The operating system info.
     * 
     */
    @InputImport(name="oSDetails")
    private final @Nullable OSDetailsResponse oSDetails;

    public Optional<OSDetailsResponse> getOSDetails() {
        return this.oSDetails == null ? Optional.empty() : Optional.ofNullable(this.oSDetails);
    }

    /**
     * The recovery availability set Id.
     * 
     */
    @InputImport(name="recoveryAvailabilitySetId")
    private final @Nullable String recoveryAvailabilitySetId;

    public Optional<String> getRecoveryAvailabilitySetId() {
        return this.recoveryAvailabilitySetId == null ? Optional.empty() : Optional.ofNullable(this.recoveryAvailabilitySetId);
    }

    /**
     * The ARM id of the log storage account used for replication. This will be set to null if no log storage account was provided during enable protection.
     * 
     */
    @InputImport(name="recoveryAzureLogStorageAccountId")
    private final @Nullable String recoveryAzureLogStorageAccountId;

    public Optional<String> getRecoveryAzureLogStorageAccountId() {
        return this.recoveryAzureLogStorageAccountId == null ? Optional.empty() : Optional.ofNullable(this.recoveryAzureLogStorageAccountId);
    }

    /**
     * The target resource group Id.
     * 
     */
    @InputImport(name="recoveryAzureResourceGroupId")
    private final @Nullable String recoveryAzureResourceGroupId;

    public Optional<String> getRecoveryAzureResourceGroupId() {
        return this.recoveryAzureResourceGroupId == null ? Optional.empty() : Optional.ofNullable(this.recoveryAzureResourceGroupId);
    }

    /**
     * The recovery Azure storage account.
     * 
     */
    @InputImport(name="recoveryAzureStorageAccount")
    private final @Nullable String recoveryAzureStorageAccount;

    public Optional<String> getRecoveryAzureStorageAccount() {
        return this.recoveryAzureStorageAccount == null ? Optional.empty() : Optional.ofNullable(this.recoveryAzureStorageAccount);
    }

    /**
     * The Recovery Azure VM size.
     * 
     */
    @InputImport(name="recoveryAzureVMSize")
    private final @Nullable String recoveryAzureVMSize;

    public Optional<String> getRecoveryAzureVMSize() {
        return this.recoveryAzureVMSize == null ? Optional.empty() : Optional.ofNullable(this.recoveryAzureVMSize);
    }

    /**
     * Recovery Azure given name.
     * 
     */
    @InputImport(name="recoveryAzureVmName")
    private final @Nullable String recoveryAzureVmName;

    public Optional<String> getRecoveryAzureVmName() {
        return this.recoveryAzureVmName == null ? Optional.empty() : Optional.ofNullable(this.recoveryAzureVmName);
    }

    /**
     * Last RPO value.
     * 
     */
    @InputImport(name="rpoInSeconds")
    private final @Nullable Double rpoInSeconds;

    public Optional<Double> getRpoInSeconds() {
        return this.rpoInSeconds == null ? Optional.empty() : Optional.ofNullable(this.rpoInSeconds);
    }

    /**
     * The selected recovery azure network Id.
     * 
     */
    @InputImport(name="selectedRecoveryAzureNetworkId")
    private final @Nullable String selectedRecoveryAzureNetworkId;

    public Optional<String> getSelectedRecoveryAzureNetworkId() {
        return this.selectedRecoveryAzureNetworkId == null ? Optional.empty() : Optional.ofNullable(this.selectedRecoveryAzureNetworkId);
    }

    /**
     * The selected source nic Id which will be used as the primary nic during failover.
     * 
     */
    @InputImport(name="selectedSourceNicId")
    private final @Nullable String selectedSourceNicId;

    public Optional<String> getSelectedSourceNicId() {
        return this.selectedSourceNicId == null ? Optional.empty() : Optional.ofNullable(this.selectedSourceNicId);
    }

    /**
     * The CPU count of the VM on the primary side.
     * 
     */
    @InputImport(name="sourceVmCpuCount")
    private final @Nullable Integer sourceVmCpuCount;

    public Optional<Integer> getSourceVmCpuCount() {
        return this.sourceVmCpuCount == null ? Optional.empty() : Optional.ofNullable(this.sourceVmCpuCount);
    }

    /**
     * The RAM size of the VM on the primary side.
     * 
     */
    @InputImport(name="sourceVmRamSizeInMB")
    private final @Nullable Integer sourceVmRamSizeInMB;

    public Optional<Integer> getSourceVmRamSizeInMB() {
        return this.sourceVmRamSizeInMB == null ? Optional.empty() : Optional.ofNullable(this.sourceVmRamSizeInMB);
    }

    /**
     * The target availability zone.
     * 
     */
    @InputImport(name="targetAvailabilityZone")
    private final @Nullable String targetAvailabilityZone;

    public Optional<String> getTargetAvailabilityZone() {
        return this.targetAvailabilityZone == null ? Optional.empty() : Optional.ofNullable(this.targetAvailabilityZone);
    }

    /**
     * The target proximity placement group Id.
     * 
     */
    @InputImport(name="targetProximityPlacementGroupId")
    private final @Nullable String targetProximityPlacementGroupId;

    public Optional<String> getTargetProximityPlacementGroupId() {
        return this.targetProximityPlacementGroupId == null ? Optional.empty() : Optional.ofNullable(this.targetProximityPlacementGroupId);
    }

    /**
     * A value indicating whether managed disks should be used during failover.
     * 
     */
    @InputImport(name="useManagedDisks")
    private final @Nullable String useManagedDisks;

    public Optional<String> getUseManagedDisks() {
        return this.useManagedDisks == null ? Optional.empty() : Optional.ofNullable(this.useManagedDisks);
    }

    /**
     * The virtual machine Id.
     * 
     */
    @InputImport(name="vmId")
    private final @Nullable String vmId;

    public Optional<String> getVmId() {
        return this.vmId == null ? Optional.empty() : Optional.ofNullable(this.vmId);
    }

    /**
     * The PE Network details.
     * 
     */
    @InputImport(name="vmNics")
    private final @Nullable List<VMNicDetailsResponse> vmNics;

    public List<VMNicDetailsResponse> getVmNics() {
        return this.vmNics == null ? List.of() : this.vmNics;
    }

    /**
     * The protection state for the vm.
     * 
     */
    @InputImport(name="vmProtectionState")
    private final @Nullable String vmProtectionState;

    public Optional<String> getVmProtectionState() {
        return this.vmProtectionState == null ? Optional.empty() : Optional.ofNullable(this.vmProtectionState);
    }

    /**
     * The protection state description for the vm.
     * 
     */
    @InputImport(name="vmProtectionStateDescription")
    private final @Nullable String vmProtectionStateDescription;

    public Optional<String> getVmProtectionStateDescription() {
        return this.vmProtectionStateDescription == null ? Optional.empty() : Optional.ofNullable(this.vmProtectionStateDescription);
    }

    public HyperVReplicaAzureReplicationDetailsResponse(
        @Nullable List<AzureVmDiskDetailsResponse> azureVmDiskDetails,
        @Nullable String enableRdpOnTargetOption,
        @Nullable String encryption,
        @Nullable InitialReplicationDetailsResponse initialReplicationDetails,
        String instanceType,
        @Nullable String lastReplicatedTime,
        @Nullable String lastRpoCalculatedTime,
        @Nullable String licenseType,
        @Nullable OSDetailsResponse oSDetails,
        @Nullable String recoveryAvailabilitySetId,
        @Nullable String recoveryAzureLogStorageAccountId,
        @Nullable String recoveryAzureResourceGroupId,
        @Nullable String recoveryAzureStorageAccount,
        @Nullable String recoveryAzureVMSize,
        @Nullable String recoveryAzureVmName,
        @Nullable Double rpoInSeconds,
        @Nullable String selectedRecoveryAzureNetworkId,
        @Nullable String selectedSourceNicId,
        @Nullable Integer sourceVmCpuCount,
        @Nullable Integer sourceVmRamSizeInMB,
        @Nullable String targetAvailabilityZone,
        @Nullable String targetProximityPlacementGroupId,
        @Nullable String useManagedDisks,
        @Nullable String vmId,
        @Nullable List<VMNicDetailsResponse> vmNics,
        @Nullable String vmProtectionState,
        @Nullable String vmProtectionStateDescription) {
        this.azureVmDiskDetails = azureVmDiskDetails;
        this.enableRdpOnTargetOption = enableRdpOnTargetOption;
        this.encryption = encryption;
        this.initialReplicationDetails = initialReplicationDetails;
        this.instanceType = Objects.requireNonNull(instanceType, "expected parameter 'instanceType' to be non-null");
        this.lastReplicatedTime = lastReplicatedTime;
        this.lastRpoCalculatedTime = lastRpoCalculatedTime;
        this.licenseType = licenseType;
        this.oSDetails = oSDetails;
        this.recoveryAvailabilitySetId = recoveryAvailabilitySetId;
        this.recoveryAzureLogStorageAccountId = recoveryAzureLogStorageAccountId;
        this.recoveryAzureResourceGroupId = recoveryAzureResourceGroupId;
        this.recoveryAzureStorageAccount = recoveryAzureStorageAccount;
        this.recoveryAzureVMSize = recoveryAzureVMSize;
        this.recoveryAzureVmName = recoveryAzureVmName;
        this.rpoInSeconds = rpoInSeconds;
        this.selectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkId;
        this.selectedSourceNicId = selectedSourceNicId;
        this.sourceVmCpuCount = sourceVmCpuCount;
        this.sourceVmRamSizeInMB = sourceVmRamSizeInMB;
        this.targetAvailabilityZone = targetAvailabilityZone;
        this.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
        this.useManagedDisks = useManagedDisks;
        this.vmId = vmId;
        this.vmNics = vmNics;
        this.vmProtectionState = vmProtectionState;
        this.vmProtectionStateDescription = vmProtectionStateDescription;
    }

    private HyperVReplicaAzureReplicationDetailsResponse() {
        this.azureVmDiskDetails = List.of();
        this.enableRdpOnTargetOption = null;
        this.encryption = null;
        this.initialReplicationDetails = null;
        this.instanceType = null;
        this.lastReplicatedTime = null;
        this.lastRpoCalculatedTime = null;
        this.licenseType = null;
        this.oSDetails = null;
        this.recoveryAvailabilitySetId = null;
        this.recoveryAzureLogStorageAccountId = null;
        this.recoveryAzureResourceGroupId = null;
        this.recoveryAzureStorageAccount = null;
        this.recoveryAzureVMSize = null;
        this.recoveryAzureVmName = null;
        this.rpoInSeconds = null;
        this.selectedRecoveryAzureNetworkId = null;
        this.selectedSourceNicId = null;
        this.sourceVmCpuCount = null;
        this.sourceVmRamSizeInMB = null;
        this.targetAvailabilityZone = null;
        this.targetProximityPlacementGroupId = null;
        this.useManagedDisks = null;
        this.vmId = null;
        this.vmNics = List.of();
        this.vmProtectionState = null;
        this.vmProtectionStateDescription = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HyperVReplicaAzureReplicationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<AzureVmDiskDetailsResponse> azureVmDiskDetails;
        private @Nullable String enableRdpOnTargetOption;
        private @Nullable String encryption;
        private @Nullable InitialReplicationDetailsResponse initialReplicationDetails;
        private String instanceType;
        private @Nullable String lastReplicatedTime;
        private @Nullable String lastRpoCalculatedTime;
        private @Nullable String licenseType;
        private @Nullable OSDetailsResponse oSDetails;
        private @Nullable String recoveryAvailabilitySetId;
        private @Nullable String recoveryAzureLogStorageAccountId;
        private @Nullable String recoveryAzureResourceGroupId;
        private @Nullable String recoveryAzureStorageAccount;
        private @Nullable String recoveryAzureVMSize;
        private @Nullable String recoveryAzureVmName;
        private @Nullable Double rpoInSeconds;
        private @Nullable String selectedRecoveryAzureNetworkId;
        private @Nullable String selectedSourceNicId;
        private @Nullable Integer sourceVmCpuCount;
        private @Nullable Integer sourceVmRamSizeInMB;
        private @Nullable String targetAvailabilityZone;
        private @Nullable String targetProximityPlacementGroupId;
        private @Nullable String useManagedDisks;
        private @Nullable String vmId;
        private @Nullable List<VMNicDetailsResponse> vmNics;
        private @Nullable String vmProtectionState;
        private @Nullable String vmProtectionStateDescription;

        public Builder() {
    	      // Empty
        }

        public Builder(HyperVReplicaAzureReplicationDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureVmDiskDetails = defaults.azureVmDiskDetails;
    	      this.enableRdpOnTargetOption = defaults.enableRdpOnTargetOption;
    	      this.encryption = defaults.encryption;
    	      this.initialReplicationDetails = defaults.initialReplicationDetails;
    	      this.instanceType = defaults.instanceType;
    	      this.lastReplicatedTime = defaults.lastReplicatedTime;
    	      this.lastRpoCalculatedTime = defaults.lastRpoCalculatedTime;
    	      this.licenseType = defaults.licenseType;
    	      this.oSDetails = defaults.oSDetails;
    	      this.recoveryAvailabilitySetId = defaults.recoveryAvailabilitySetId;
    	      this.recoveryAzureLogStorageAccountId = defaults.recoveryAzureLogStorageAccountId;
    	      this.recoveryAzureResourceGroupId = defaults.recoveryAzureResourceGroupId;
    	      this.recoveryAzureStorageAccount = defaults.recoveryAzureStorageAccount;
    	      this.recoveryAzureVMSize = defaults.recoveryAzureVMSize;
    	      this.recoveryAzureVmName = defaults.recoveryAzureVmName;
    	      this.rpoInSeconds = defaults.rpoInSeconds;
    	      this.selectedRecoveryAzureNetworkId = defaults.selectedRecoveryAzureNetworkId;
    	      this.selectedSourceNicId = defaults.selectedSourceNicId;
    	      this.sourceVmCpuCount = defaults.sourceVmCpuCount;
    	      this.sourceVmRamSizeInMB = defaults.sourceVmRamSizeInMB;
    	      this.targetAvailabilityZone = defaults.targetAvailabilityZone;
    	      this.targetProximityPlacementGroupId = defaults.targetProximityPlacementGroupId;
    	      this.useManagedDisks = defaults.useManagedDisks;
    	      this.vmId = defaults.vmId;
    	      this.vmNics = defaults.vmNics;
    	      this.vmProtectionState = defaults.vmProtectionState;
    	      this.vmProtectionStateDescription = defaults.vmProtectionStateDescription;
        }

        public Builder setAzureVmDiskDetails(@Nullable List<AzureVmDiskDetailsResponse> azureVmDiskDetails) {
            this.azureVmDiskDetails = azureVmDiskDetails;
            return this;
        }

        public Builder setEnableRdpOnTargetOption(@Nullable String enableRdpOnTargetOption) {
            this.enableRdpOnTargetOption = enableRdpOnTargetOption;
            return this;
        }

        public Builder setEncryption(@Nullable String encryption) {
            this.encryption = encryption;
            return this;
        }

        public Builder setInitialReplicationDetails(@Nullable InitialReplicationDetailsResponse initialReplicationDetails) {
            this.initialReplicationDetails = initialReplicationDetails;
            return this;
        }

        public Builder setInstanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }

        public Builder setLastReplicatedTime(@Nullable String lastReplicatedTime) {
            this.lastReplicatedTime = lastReplicatedTime;
            return this;
        }

        public Builder setLastRpoCalculatedTime(@Nullable String lastRpoCalculatedTime) {
            this.lastRpoCalculatedTime = lastRpoCalculatedTime;
            return this;
        }

        public Builder setLicenseType(@Nullable String licenseType) {
            this.licenseType = licenseType;
            return this;
        }

        public Builder setOSDetails(@Nullable OSDetailsResponse oSDetails) {
            this.oSDetails = oSDetails;
            return this;
        }

        public Builder setRecoveryAvailabilitySetId(@Nullable String recoveryAvailabilitySetId) {
            this.recoveryAvailabilitySetId = recoveryAvailabilitySetId;
            return this;
        }

        public Builder setRecoveryAzureLogStorageAccountId(@Nullable String recoveryAzureLogStorageAccountId) {
            this.recoveryAzureLogStorageAccountId = recoveryAzureLogStorageAccountId;
            return this;
        }

        public Builder setRecoveryAzureResourceGroupId(@Nullable String recoveryAzureResourceGroupId) {
            this.recoveryAzureResourceGroupId = recoveryAzureResourceGroupId;
            return this;
        }

        public Builder setRecoveryAzureStorageAccount(@Nullable String recoveryAzureStorageAccount) {
            this.recoveryAzureStorageAccount = recoveryAzureStorageAccount;
            return this;
        }

        public Builder setRecoveryAzureVMSize(@Nullable String recoveryAzureVMSize) {
            this.recoveryAzureVMSize = recoveryAzureVMSize;
            return this;
        }

        public Builder setRecoveryAzureVmName(@Nullable String recoveryAzureVmName) {
            this.recoveryAzureVmName = recoveryAzureVmName;
            return this;
        }

        public Builder setRpoInSeconds(@Nullable Double rpoInSeconds) {
            this.rpoInSeconds = rpoInSeconds;
            return this;
        }

        public Builder setSelectedRecoveryAzureNetworkId(@Nullable String selectedRecoveryAzureNetworkId) {
            this.selectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkId;
            return this;
        }

        public Builder setSelectedSourceNicId(@Nullable String selectedSourceNicId) {
            this.selectedSourceNicId = selectedSourceNicId;
            return this;
        }

        public Builder setSourceVmCpuCount(@Nullable Integer sourceVmCpuCount) {
            this.sourceVmCpuCount = sourceVmCpuCount;
            return this;
        }

        public Builder setSourceVmRamSizeInMB(@Nullable Integer sourceVmRamSizeInMB) {
            this.sourceVmRamSizeInMB = sourceVmRamSizeInMB;
            return this;
        }

        public Builder setTargetAvailabilityZone(@Nullable String targetAvailabilityZone) {
            this.targetAvailabilityZone = targetAvailabilityZone;
            return this;
        }

        public Builder setTargetProximityPlacementGroupId(@Nullable String targetProximityPlacementGroupId) {
            this.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
            return this;
        }

        public Builder setUseManagedDisks(@Nullable String useManagedDisks) {
            this.useManagedDisks = useManagedDisks;
            return this;
        }

        public Builder setVmId(@Nullable String vmId) {
            this.vmId = vmId;
            return this;
        }

        public Builder setVmNics(@Nullable List<VMNicDetailsResponse> vmNics) {
            this.vmNics = vmNics;
            return this;
        }

        public Builder setVmProtectionState(@Nullable String vmProtectionState) {
            this.vmProtectionState = vmProtectionState;
            return this;
        }

        public Builder setVmProtectionStateDescription(@Nullable String vmProtectionStateDescription) {
            this.vmProtectionStateDescription = vmProtectionStateDescription;
            return this;
        }

        public HyperVReplicaAzureReplicationDetailsResponse build() {
            return new HyperVReplicaAzureReplicationDetailsResponse(azureVmDiskDetails, enableRdpOnTargetOption, encryption, initialReplicationDetails, instanceType, lastReplicatedTime, lastRpoCalculatedTime, licenseType, oSDetails, recoveryAvailabilitySetId, recoveryAzureLogStorageAccountId, recoveryAzureResourceGroupId, recoveryAzureStorageAccount, recoveryAzureVMSize, recoveryAzureVmName, rpoInSeconds, selectedRecoveryAzureNetworkId, selectedSourceNicId, sourceVmCpuCount, sourceVmRamSizeInMB, targetAvailabilityZone, targetProximityPlacementGroupId, useManagedDisks, vmId, vmNics, vmProtectionState, vmProtectionStateDescription);
        }
    }
}
