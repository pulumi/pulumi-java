// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RerunTumblingWindowTriggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final RerunTumblingWindowTriggerArgs Empty = new RerunTumblingWindowTriggerArgs();

    @InputImport(name="annotations")
    private final @Nullable Input<List<Object>> annotations;

    public Input<List<Object>> getAnnotations() {
        return this.annotations == null ? Input.empty() : this.annotations;
    }

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="parentTrigger", required=true)
    private final Input<Object> parentTrigger;

    public Input<Object> getParentTrigger() {
        return this.parentTrigger;
    }

    @InputImport(name="requestedEndTime", required=true)
    private final Input<String> requestedEndTime;

    public Input<String> getRequestedEndTime() {
        return this.requestedEndTime;
    }

    @InputImport(name="requestedStartTime", required=true)
    private final Input<String> requestedStartTime;

    public Input<String> getRequestedStartTime() {
        return this.requestedStartTime;
    }

    @InputImport(name="rerunConcurrency", required=true)
    private final Input<Integer> rerunConcurrency;

    public Input<Integer> getRerunConcurrency() {
        return this.rerunConcurrency;
    }

    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public RerunTumblingWindowTriggerArgs(
        @Nullable Input<List<Object>> annotations,
        @Nullable Input<String> description,
        Input<Object> parentTrigger,
        Input<String> requestedEndTime,
        Input<String> requestedStartTime,
        Input<Integer> rerunConcurrency,
        Input<String> type) {
        this.annotations = annotations;
        this.description = description;
        this.parentTrigger = Objects.requireNonNull(parentTrigger, "expected parameter 'parentTrigger' to be non-null");
        this.requestedEndTime = Objects.requireNonNull(requestedEndTime, "expected parameter 'requestedEndTime' to be non-null");
        this.requestedStartTime = Objects.requireNonNull(requestedStartTime, "expected parameter 'requestedStartTime' to be non-null");
        this.rerunConcurrency = Objects.requireNonNull(rerunConcurrency, "expected parameter 'rerunConcurrency' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private RerunTumblingWindowTriggerArgs() {
        this.annotations = Input.empty();
        this.description = Input.empty();
        this.parentTrigger = Input.empty();
        this.requestedEndTime = Input.empty();
        this.requestedStartTime = Input.empty();
        this.rerunConcurrency = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RerunTumblingWindowTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<Object>> annotations;
        private @Nullable Input<String> description;
        private Input<Object> parentTrigger;
        private Input<String> requestedEndTime;
        private Input<String> requestedStartTime;
        private Input<Integer> rerunConcurrency;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(RerunTumblingWindowTriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.description = defaults.description;
    	      this.parentTrigger = defaults.parentTrigger;
    	      this.requestedEndTime = defaults.requestedEndTime;
    	      this.requestedStartTime = defaults.requestedStartTime;
    	      this.rerunConcurrency = defaults.rerunConcurrency;
    	      this.type = defaults.type;
        }

        public Builder setAnnotations(@Nullable Input<List<Object>> annotations) {
            this.annotations = annotations;
            return this;
        }

        public Builder setAnnotations(@Nullable List<Object> annotations) {
            this.annotations = Input.ofNullable(annotations);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setParentTrigger(Input<Object> parentTrigger) {
            this.parentTrigger = Objects.requireNonNull(parentTrigger);
            return this;
        }

        public Builder setParentTrigger(Object parentTrigger) {
            this.parentTrigger = Input.of(Objects.requireNonNull(parentTrigger));
            return this;
        }

        public Builder setRequestedEndTime(Input<String> requestedEndTime) {
            this.requestedEndTime = Objects.requireNonNull(requestedEndTime);
            return this;
        }

        public Builder setRequestedEndTime(String requestedEndTime) {
            this.requestedEndTime = Input.of(Objects.requireNonNull(requestedEndTime));
            return this;
        }

        public Builder setRequestedStartTime(Input<String> requestedStartTime) {
            this.requestedStartTime = Objects.requireNonNull(requestedStartTime);
            return this;
        }

        public Builder setRequestedStartTime(String requestedStartTime) {
            this.requestedStartTime = Input.of(Objects.requireNonNull(requestedStartTime));
            return this;
        }

        public Builder setRerunConcurrency(Input<Integer> rerunConcurrency) {
            this.rerunConcurrency = Objects.requireNonNull(rerunConcurrency);
            return this;
        }

        public Builder setRerunConcurrency(Integer rerunConcurrency) {
            this.rerunConcurrency = Input.of(Objects.requireNonNull(rerunConcurrency));
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public RerunTumblingWindowTriggerArgs build() {
            return new RerunTumblingWindowTriggerArgs(annotations, description, parentTrigger, requestedEndTime, requestedStartTime, rerunConcurrency, type);
        }
    }
}
