// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.labservices.inputs;

import io.pulumi.azurenative.labservices.inputs.ReferenceVmResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents resource specific settings
 * 
 */
public final class ResourceSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final ResourceSettingsResponse Empty = new ResourceSettingsResponse();

    /**
     * The translated compute cores of the virtual machine
     * 
     */
    @Import(name="cores", required=true)
      private final Integer cores;

    public Integer getCores() {
        return this.cores;
    }

    /**
     * The resource id of the gallery image used for creating the virtual machine
     * 
     */
    @Import(name="galleryImageResourceId")
      private final @Nullable String galleryImageResourceId;

    public Optional<String> getGalleryImageResourceId() {
        return this.galleryImageResourceId == null ? Optional.empty() : Optional.ofNullable(this.galleryImageResourceId);
    }

    /**
     * The unique id of the resource setting
     * 
     */
    @Import(name="id", required=true)
      private final String id;

    public String getId() {
        return this.id;
    }

    /**
     * The name of the image used to created the environment setting
     * 
     */
    @Import(name="imageName", required=true)
      private final String imageName;

    public String getImageName() {
        return this.imageName;
    }

    /**
     * Details specific to Reference Vm
     * 
     */
    @Import(name="referenceVm", required=true)
      private final ReferenceVmResponse referenceVm;

    public ReferenceVmResponse getReferenceVm() {
        return this.referenceVm;
    }

    /**
     * The size of the virtual machine
     * 
     */
    @Import(name="size")
      private final @Nullable String size;

    public Optional<String> getSize() {
        return this.size == null ? Optional.empty() : Optional.ofNullable(this.size);
    }

    public ResourceSettingsResponse(
        Integer cores,
        @Nullable String galleryImageResourceId,
        String id,
        String imageName,
        ReferenceVmResponse referenceVm,
        @Nullable String size) {
        this.cores = Objects.requireNonNull(cores, "expected parameter 'cores' to be non-null");
        this.galleryImageResourceId = galleryImageResourceId;
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.imageName = Objects.requireNonNull(imageName, "expected parameter 'imageName' to be non-null");
        this.referenceVm = Objects.requireNonNull(referenceVm, "expected parameter 'referenceVm' to be non-null");
        this.size = size;
    }

    private ResourceSettingsResponse() {
        this.cores = null;
        this.galleryImageResourceId = null;
        this.id = null;
        this.imageName = null;
        this.referenceVm = null;
        this.size = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResourceSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer cores;
        private @Nullable String galleryImageResourceId;
        private String id;
        private String imageName;
        private ReferenceVmResponse referenceVm;
        private @Nullable String size;

        public Builder() {
    	      // Empty
        }

        public Builder(ResourceSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cores = defaults.cores;
    	      this.galleryImageResourceId = defaults.galleryImageResourceId;
    	      this.id = defaults.id;
    	      this.imageName = defaults.imageName;
    	      this.referenceVm = defaults.referenceVm;
    	      this.size = defaults.size;
        }

        public Builder cores(Integer cores) {
            this.cores = Objects.requireNonNull(cores);
            return this;
        }
        public Builder galleryImageResourceId(@Nullable String galleryImageResourceId) {
            this.galleryImageResourceId = galleryImageResourceId;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imageName(String imageName) {
            this.imageName = Objects.requireNonNull(imageName);
            return this;
        }
        public Builder referenceVm(ReferenceVmResponse referenceVm) {
            this.referenceVm = Objects.requireNonNull(referenceVm);
            return this;
        }
        public Builder size(@Nullable String size) {
            this.size = size;
            return this;
        }        public ResourceSettingsResponse build() {
            return new ResourceSettingsResponse(cores, galleryImageResourceId, id, imageName, referenceVm, size);
        }
    }
}
