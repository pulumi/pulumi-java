// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.kubernetesconfiguration.inputs;

import io.pulumi.azurenative.kubernetesconfiguration.inputs.RepositoryRefDefinitionArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Parameters to reconcile to the GitRepository source kind type.
 * 
 */
public final class GitRepositoryDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final GitRepositoryDefinitionArgs Empty = new GitRepositoryDefinitionArgs();

    /**
     * Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
     * 
     */
    @InputImport(name="httpsCAFile")
      private final @Nullable Output<String> httpsCAFile;

    public Output<String> getHttpsCAFile() {
        return this.httpsCAFile == null ? Output.empty() : this.httpsCAFile;
    }

    /**
     * Base64-encoded HTTPS username used to access private git repositories over HTTPS
     * 
     */
    @InputImport(name="httpsUser")
      private final @Nullable Output<String> httpsUser;

    public Output<String> getHttpsUser() {
        return this.httpsUser == null ? Output.empty() : this.httpsUser;
    }

    /**
     * Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     * 
     */
    @InputImport(name="localAuthRef")
      private final @Nullable Output<String> localAuthRef;

    public Output<String> getLocalAuthRef() {
        return this.localAuthRef == null ? Output.empty() : this.localAuthRef;
    }

    /**
     * The source reference for the GitRepository object.
     * 
     */
    @InputImport(name="repositoryRef")
      private final @Nullable Output<RepositoryRefDefinitionArgs> repositoryRef;

    public Output<RepositoryRefDefinitionArgs> getRepositoryRef() {
        return this.repositoryRef == null ? Output.empty() : this.repositoryRef;
    }

    /**
     * Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
     * 
     */
    @InputImport(name="sshKnownHosts")
      private final @Nullable Output<String> sshKnownHosts;

    public Output<String> getSshKnownHosts() {
        return this.sshKnownHosts == null ? Output.empty() : this.sshKnownHosts;
    }

    /**
     * The interval at which to re-reconcile the cluster git repository source with the remote.
     * 
     */
    @InputImport(name="syncIntervalInSeconds")
      private final @Nullable Output<Double> syncIntervalInSeconds;

    public Output<Double> getSyncIntervalInSeconds() {
        return this.syncIntervalInSeconds == null ? Output.empty() : this.syncIntervalInSeconds;
    }

    /**
     * The maximum time to attempt to reconcile the cluster git repository source with the remote.
     * 
     */
    @InputImport(name="timeoutInSeconds")
      private final @Nullable Output<Double> timeoutInSeconds;

    public Output<Double> getTimeoutInSeconds() {
        return this.timeoutInSeconds == null ? Output.empty() : this.timeoutInSeconds;
    }

    /**
     * The URL to sync for the flux configuration git repository.
     * 
     */
    @InputImport(name="url")
      private final @Nullable Output<String> url;

    public Output<String> getUrl() {
        return this.url == null ? Output.empty() : this.url;
    }

    public GitRepositoryDefinitionArgs(
        @Nullable Output<String> httpsCAFile,
        @Nullable Output<String> httpsUser,
        @Nullable Output<String> localAuthRef,
        @Nullable Output<RepositoryRefDefinitionArgs> repositoryRef,
        @Nullable Output<String> sshKnownHosts,
        @Nullable Output<Double> syncIntervalInSeconds,
        @Nullable Output<Double> timeoutInSeconds,
        @Nullable Output<String> url) {
        this.httpsCAFile = httpsCAFile;
        this.httpsUser = httpsUser;
        this.localAuthRef = localAuthRef;
        this.repositoryRef = repositoryRef;
        this.sshKnownHosts = sshKnownHosts;
        this.syncIntervalInSeconds = syncIntervalInSeconds == null ? Output.ofNullable(6e+02) : syncIntervalInSeconds;
        this.timeoutInSeconds = timeoutInSeconds == null ? Output.ofNullable(6e+02) : timeoutInSeconds;
        this.url = url;
    }

    private GitRepositoryDefinitionArgs() {
        this.httpsCAFile = Output.empty();
        this.httpsUser = Output.empty();
        this.localAuthRef = Output.empty();
        this.repositoryRef = Output.empty();
        this.sshKnownHosts = Output.empty();
        this.syncIntervalInSeconds = Output.empty();
        this.timeoutInSeconds = Output.empty();
        this.url = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitRepositoryDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> httpsCAFile;
        private @Nullable Output<String> httpsUser;
        private @Nullable Output<String> localAuthRef;
        private @Nullable Output<RepositoryRefDefinitionArgs> repositoryRef;
        private @Nullable Output<String> sshKnownHosts;
        private @Nullable Output<Double> syncIntervalInSeconds;
        private @Nullable Output<Double> timeoutInSeconds;
        private @Nullable Output<String> url;

        public Builder() {
    	      // Empty
        }

        public Builder(GitRepositoryDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpsCAFile = defaults.httpsCAFile;
    	      this.httpsUser = defaults.httpsUser;
    	      this.localAuthRef = defaults.localAuthRef;
    	      this.repositoryRef = defaults.repositoryRef;
    	      this.sshKnownHosts = defaults.sshKnownHosts;
    	      this.syncIntervalInSeconds = defaults.syncIntervalInSeconds;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.url = defaults.url;
        }

        public Builder httpsCAFile(@Nullable Output<String> httpsCAFile) {
            this.httpsCAFile = httpsCAFile;
            return this;
        }

        public Builder httpsCAFile(@Nullable String httpsCAFile) {
            this.httpsCAFile = Output.ofNullable(httpsCAFile);
            return this;
        }

        public Builder httpsUser(@Nullable Output<String> httpsUser) {
            this.httpsUser = httpsUser;
            return this;
        }

        public Builder httpsUser(@Nullable String httpsUser) {
            this.httpsUser = Output.ofNullable(httpsUser);
            return this;
        }

        public Builder localAuthRef(@Nullable Output<String> localAuthRef) {
            this.localAuthRef = localAuthRef;
            return this;
        }

        public Builder localAuthRef(@Nullable String localAuthRef) {
            this.localAuthRef = Output.ofNullable(localAuthRef);
            return this;
        }

        public Builder repositoryRef(@Nullable Output<RepositoryRefDefinitionArgs> repositoryRef) {
            this.repositoryRef = repositoryRef;
            return this;
        }

        public Builder repositoryRef(@Nullable RepositoryRefDefinitionArgs repositoryRef) {
            this.repositoryRef = Output.ofNullable(repositoryRef);
            return this;
        }

        public Builder sshKnownHosts(@Nullable Output<String> sshKnownHosts) {
            this.sshKnownHosts = sshKnownHosts;
            return this;
        }

        public Builder sshKnownHosts(@Nullable String sshKnownHosts) {
            this.sshKnownHosts = Output.ofNullable(sshKnownHosts);
            return this;
        }

        public Builder syncIntervalInSeconds(@Nullable Output<Double> syncIntervalInSeconds) {
            this.syncIntervalInSeconds = syncIntervalInSeconds;
            return this;
        }

        public Builder syncIntervalInSeconds(@Nullable Double syncIntervalInSeconds) {
            this.syncIntervalInSeconds = Output.ofNullable(syncIntervalInSeconds);
            return this;
        }

        public Builder timeoutInSeconds(@Nullable Output<Double> timeoutInSeconds) {
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        public Builder timeoutInSeconds(@Nullable Double timeoutInSeconds) {
            this.timeoutInSeconds = Output.ofNullable(timeoutInSeconds);
            return this;
        }

        public Builder url(@Nullable Output<String> url) {
            this.url = url;
            return this;
        }

        public Builder url(@Nullable String url) {
            this.url = Output.ofNullable(url);
            return this;
        }
        public GitRepositoryDefinitionArgs build() {
            return new GitRepositoryDefinitionArgs(httpsCAFile, httpsUser, localAuthRef, repositoryRef, sshKnownHosts, syncIntervalInSeconds, timeoutInSeconds, url);
        }
    }
}
