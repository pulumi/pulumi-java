// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights;

import io.pulumi.azurenative.insights.inputs.RetentionPolicyArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LogProfileArgs extends io.pulumi.resources.ResourceArgs {

    public static final LogProfileArgs Empty = new LogProfileArgs();

    /**
     * the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
     * 
     */
    @Import(name="categories", required=true)
      private final Output<List<String>> categories;

    public Output<List<String>> getCategories() {
        return this.categories;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
     * 
     */
    @Import(name="locations", required=true)
      private final Output<List<String>> locations;

    public Output<List<String>> getLocations() {
        return this.locations;
    }

    /**
     * The name of the log profile.
     * 
     */
    @Import(name="logProfileName")
      private final @Nullable Output<String> logProfileName;

    public Output<String> getLogProfileName() {
        return this.logProfileName == null ? Output.empty() : this.logProfileName;
    }

    /**
     * the retention policy for the events in the log.
     * 
     */
    @Import(name="retentionPolicy", required=true)
      private final Output<RetentionPolicyArgs> retentionPolicy;

    public Output<RetentionPolicyArgs> getRetentionPolicy() {
        return this.retentionPolicy;
    }

    /**
     * The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
     * 
     */
    @Import(name="serviceBusRuleId")
      private final @Nullable Output<String> serviceBusRuleId;

    public Output<String> getServiceBusRuleId() {
        return this.serviceBusRuleId == null ? Output.empty() : this.serviceBusRuleId;
    }

    /**
     * the resource id of the storage account to which you would like to send the Activity Log.
     * 
     */
    @Import(name="storageAccountId")
      private final @Nullable Output<String> storageAccountId;

    public Output<String> getStorageAccountId() {
        return this.storageAccountId == null ? Output.empty() : this.storageAccountId;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public LogProfileArgs(
        Output<List<String>> categories,
        @Nullable Output<String> location,
        Output<List<String>> locations,
        @Nullable Output<String> logProfileName,
        Output<RetentionPolicyArgs> retentionPolicy,
        @Nullable Output<String> serviceBusRuleId,
        @Nullable Output<String> storageAccountId,
        @Nullable Output<Map<String,String>> tags) {
        this.categories = Objects.requireNonNull(categories, "expected parameter 'categories' to be non-null");
        this.location = location;
        this.locations = Objects.requireNonNull(locations, "expected parameter 'locations' to be non-null");
        this.logProfileName = logProfileName;
        this.retentionPolicy = Objects.requireNonNull(retentionPolicy, "expected parameter 'retentionPolicy' to be non-null");
        this.serviceBusRuleId = serviceBusRuleId;
        this.storageAccountId = storageAccountId;
        this.tags = tags;
    }

    private LogProfileArgs() {
        this.categories = Output.empty();
        this.location = Output.empty();
        this.locations = Output.empty();
        this.logProfileName = Output.empty();
        this.retentionPolicy = Output.empty();
        this.serviceBusRuleId = Output.empty();
        this.storageAccountId = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> categories;
        private @Nullable Output<String> location;
        private Output<List<String>> locations;
        private @Nullable Output<String> logProfileName;
        private Output<RetentionPolicyArgs> retentionPolicy;
        private @Nullable Output<String> serviceBusRuleId;
        private @Nullable Output<String> storageAccountId;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(LogProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categories = defaults.categories;
    	      this.location = defaults.location;
    	      this.locations = defaults.locations;
    	      this.logProfileName = defaults.logProfileName;
    	      this.retentionPolicy = defaults.retentionPolicy;
    	      this.serviceBusRuleId = defaults.serviceBusRuleId;
    	      this.storageAccountId = defaults.storageAccountId;
    	      this.tags = defaults.tags;
        }

        public Builder categories(Output<List<String>> categories) {
            this.categories = Objects.requireNonNull(categories);
            return this;
        }

        public Builder categories(List<String> categories) {
            this.categories = Output.of(Objects.requireNonNull(categories));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder locations(Output<List<String>> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }

        public Builder locations(List<String> locations) {
            this.locations = Output.of(Objects.requireNonNull(locations));
            return this;
        }

        public Builder logProfileName(@Nullable Output<String> logProfileName) {
            this.logProfileName = logProfileName;
            return this;
        }

        public Builder logProfileName(@Nullable String logProfileName) {
            this.logProfileName = Output.ofNullable(logProfileName);
            return this;
        }

        public Builder retentionPolicy(Output<RetentionPolicyArgs> retentionPolicy) {
            this.retentionPolicy = Objects.requireNonNull(retentionPolicy);
            return this;
        }

        public Builder retentionPolicy(RetentionPolicyArgs retentionPolicy) {
            this.retentionPolicy = Output.of(Objects.requireNonNull(retentionPolicy));
            return this;
        }

        public Builder serviceBusRuleId(@Nullable Output<String> serviceBusRuleId) {
            this.serviceBusRuleId = serviceBusRuleId;
            return this;
        }

        public Builder serviceBusRuleId(@Nullable String serviceBusRuleId) {
            this.serviceBusRuleId = Output.ofNullable(serviceBusRuleId);
            return this;
        }

        public Builder storageAccountId(@Nullable Output<String> storageAccountId) {
            this.storageAccountId = storageAccountId;
            return this;
        }

        public Builder storageAccountId(@Nullable String storageAccountId) {
            this.storageAccountId = Output.ofNullable(storageAccountId);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public LogProfileArgs build() {
            return new LogProfileArgs(categories, location, locations, logProfileName, retentionPolicy, serviceBusRuleId, storageAccountId, tags);
        }
    }
}
