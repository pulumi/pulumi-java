// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.securityinsights;

import io.pulumi.azurenative.securityinsights.enums.ContentType;
import io.pulumi.azurenative.securityinsights.enums.CreatedByType;
import io.pulumi.azurenative.securityinsights.enums.RepoType;
import io.pulumi.azurenative.securityinsights.inputs.RepositoryArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SourceControlArgs extends io.pulumi.resources.ResourceArgs {

    public static final SourceControlArgs Empty = new SourceControlArgs();

    /**
     * Array of source control content types.
     * 
     */
    @Import(name="contentTypes", required=true)
      private final Output<List<Either<String,ContentType>>> contentTypes;

    public Output<List<Either<String,ContentType>>> getContentTypes() {
        return this.contentTypes;
    }

    /**
     * The timestamp of resource creation (UTC).
     * 
     */
    @Import(name="createdAt")
      private final @Nullable Output<String> createdAt;

    public Output<String> getCreatedAt() {
        return this.createdAt == null ? Output.empty() : this.createdAt;
    }

    /**
     * The identity that created the resource.
     * 
     */
    @Import(name="createdBy")
      private final @Nullable Output<String> createdBy;

    public Output<String> getCreatedBy() {
        return this.createdBy == null ? Output.empty() : this.createdBy;
    }

    /**
     * The type of identity that created the resource.
     * 
     */
    @Import(name="createdByType")
      private final @Nullable Output<Either<String,CreatedByType>> createdByType;

    public Output<Either<String,CreatedByType>> getCreatedByType() {
        return this.createdByType == null ? Output.empty() : this.createdByType;
    }

    /**
     * A description of the source control
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The display name of the source control
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * The id (a Guid) of the source control
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * The timestamp of resource last modification (UTC)
     * 
     */
    @Import(name="lastModifiedAt")
      private final @Nullable Output<String> lastModifiedAt;

    public Output<String> getLastModifiedAt() {
        return this.lastModifiedAt == null ? Output.empty() : this.lastModifiedAt;
    }

    /**
     * The identity that last modified the resource.
     * 
     */
    @Import(name="lastModifiedBy")
      private final @Nullable Output<String> lastModifiedBy;

    public Output<String> getLastModifiedBy() {
        return this.lastModifiedBy == null ? Output.empty() : this.lastModifiedBy;
    }

    /**
     * The type of identity that last modified the resource.
     * 
     */
    @Import(name="lastModifiedByType")
      private final @Nullable Output<Either<String,CreatedByType>> lastModifiedByType;

    public Output<Either<String,CreatedByType>> getLastModifiedByType() {
        return this.lastModifiedByType == null ? Output.empty() : this.lastModifiedByType;
    }

    /**
     * The namespace of workspaces resource provider- Microsoft.OperationalInsights.
     * 
     */
    @Import(name="operationalInsightsResourceProvider", required=true)
      private final Output<String> operationalInsightsResourceProvider;

    public Output<String> getOperationalInsightsResourceProvider() {
        return this.operationalInsightsResourceProvider;
    }

    /**
     * The repository type of the source control
     * 
     */
    @Import(name="repoType", required=true)
      private final Output<Either<String,RepoType>> repoType;

    public Output<Either<String,RepoType>> getRepoType() {
        return this.repoType;
    }

    /**
     * Repository metadata.
     * 
     */
    @Import(name="repository", required=true)
      private final Output<RepositoryArgs> repository;

    public Output<RepositoryArgs> getRepository() {
        return this.repository;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Source control Id
     * 
     */
    @Import(name="sourceControlId")
      private final @Nullable Output<String> sourceControlId;

    public Output<String> getSourceControlId() {
        return this.sourceControlId == null ? Output.empty() : this.sourceControlId;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public SourceControlArgs(
        Output<List<Either<String,ContentType>>> contentTypes,
        @Nullable Output<String> createdAt,
        @Nullable Output<String> createdBy,
        @Nullable Output<Either<String,CreatedByType>> createdByType,
        @Nullable Output<String> description,
        Output<String> displayName,
        @Nullable Output<String> id,
        @Nullable Output<String> lastModifiedAt,
        @Nullable Output<String> lastModifiedBy,
        @Nullable Output<Either<String,CreatedByType>> lastModifiedByType,
        Output<String> operationalInsightsResourceProvider,
        Output<Either<String,RepoType>> repoType,
        Output<RepositoryArgs> repository,
        Output<String> resourceGroupName,
        @Nullable Output<String> sourceControlId,
        Output<String> workspaceName) {
        this.contentTypes = Objects.requireNonNull(contentTypes, "expected parameter 'contentTypes' to be non-null");
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.createdByType = createdByType;
        this.description = description;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.id = id;
        this.lastModifiedAt = lastModifiedAt;
        this.lastModifiedBy = lastModifiedBy;
        this.lastModifiedByType = lastModifiedByType;
        this.operationalInsightsResourceProvider = Objects.requireNonNull(operationalInsightsResourceProvider, "expected parameter 'operationalInsightsResourceProvider' to be non-null");
        this.repoType = Objects.requireNonNull(repoType, "expected parameter 'repoType' to be non-null");
        this.repository = Objects.requireNonNull(repository, "expected parameter 'repository' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sourceControlId = sourceControlId;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private SourceControlArgs() {
        this.contentTypes = Output.empty();
        this.createdAt = Output.empty();
        this.createdBy = Output.empty();
        this.createdByType = Output.empty();
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.id = Output.empty();
        this.lastModifiedAt = Output.empty();
        this.lastModifiedBy = Output.empty();
        this.lastModifiedByType = Output.empty();
        this.operationalInsightsResourceProvider = Output.empty();
        this.repoType = Output.empty();
        this.repository = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sourceControlId = Output.empty();
        this.workspaceName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourceControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<Either<String,ContentType>>> contentTypes;
        private @Nullable Output<String> createdAt;
        private @Nullable Output<String> createdBy;
        private @Nullable Output<Either<String,CreatedByType>> createdByType;
        private @Nullable Output<String> description;
        private Output<String> displayName;
        private @Nullable Output<String> id;
        private @Nullable Output<String> lastModifiedAt;
        private @Nullable Output<String> lastModifiedBy;
        private @Nullable Output<Either<String,CreatedByType>> lastModifiedByType;
        private Output<String> operationalInsightsResourceProvider;
        private Output<Either<String,RepoType>> repoType;
        private Output<RepositoryArgs> repository;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> sourceControlId;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(SourceControlArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentTypes = defaults.contentTypes;
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.createdByType = defaults.createdByType;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.lastModifiedAt = defaults.lastModifiedAt;
    	      this.lastModifiedBy = defaults.lastModifiedBy;
    	      this.lastModifiedByType = defaults.lastModifiedByType;
    	      this.operationalInsightsResourceProvider = defaults.operationalInsightsResourceProvider;
    	      this.repoType = defaults.repoType;
    	      this.repository = defaults.repository;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sourceControlId = defaults.sourceControlId;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder contentTypes(Output<List<Either<String,ContentType>>> contentTypes) {
            this.contentTypes = Objects.requireNonNull(contentTypes);
            return this;
        }

        public Builder contentTypes(List<Either<String,ContentType>> contentTypes) {
            this.contentTypes = Output.of(Objects.requireNonNull(contentTypes));
            return this;
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(@Nullable String createdAt) {
            this.createdAt = Output.ofNullable(createdAt);
            return this;
        }

        public Builder createdBy(@Nullable Output<String> createdBy) {
            this.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = Output.ofNullable(createdBy);
            return this;
        }

        public Builder createdByType(@Nullable Output<Either<String,CreatedByType>> createdByType) {
            this.createdByType = createdByType;
            return this;
        }

        public Builder createdByType(@Nullable Either<String,CreatedByType> createdByType) {
            this.createdByType = Output.ofNullable(createdByType);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }

        public Builder lastModifiedAt(@Nullable Output<String> lastModifiedAt) {
            this.lastModifiedAt = lastModifiedAt;
            return this;
        }

        public Builder lastModifiedAt(@Nullable String lastModifiedAt) {
            this.lastModifiedAt = Output.ofNullable(lastModifiedAt);
            return this;
        }

        public Builder lastModifiedBy(@Nullable Output<String> lastModifiedBy) {
            this.lastModifiedBy = lastModifiedBy;
            return this;
        }

        public Builder lastModifiedBy(@Nullable String lastModifiedBy) {
            this.lastModifiedBy = Output.ofNullable(lastModifiedBy);
            return this;
        }

        public Builder lastModifiedByType(@Nullable Output<Either<String,CreatedByType>> lastModifiedByType) {
            this.lastModifiedByType = lastModifiedByType;
            return this;
        }

        public Builder lastModifiedByType(@Nullable Either<String,CreatedByType> lastModifiedByType) {
            this.lastModifiedByType = Output.ofNullable(lastModifiedByType);
            return this;
        }

        public Builder operationalInsightsResourceProvider(Output<String> operationalInsightsResourceProvider) {
            this.operationalInsightsResourceProvider = Objects.requireNonNull(operationalInsightsResourceProvider);
            return this;
        }

        public Builder operationalInsightsResourceProvider(String operationalInsightsResourceProvider) {
            this.operationalInsightsResourceProvider = Output.of(Objects.requireNonNull(operationalInsightsResourceProvider));
            return this;
        }

        public Builder repoType(Output<Either<String,RepoType>> repoType) {
            this.repoType = Objects.requireNonNull(repoType);
            return this;
        }

        public Builder repoType(Either<String,RepoType> repoType) {
            this.repoType = Output.of(Objects.requireNonNull(repoType));
            return this;
        }

        public Builder repository(Output<RepositoryArgs> repository) {
            this.repository = Objects.requireNonNull(repository);
            return this;
        }

        public Builder repository(RepositoryArgs repository) {
            this.repository = Output.of(Objects.requireNonNull(repository));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder sourceControlId(@Nullable Output<String> sourceControlId) {
            this.sourceControlId = sourceControlId;
            return this;
        }

        public Builder sourceControlId(@Nullable String sourceControlId) {
            this.sourceControlId = Output.ofNullable(sourceControlId);
            return this;
        }

        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public SourceControlArgs build() {
            return new SourceControlArgs(contentTypes, createdAt, createdBy, createdByType, description, displayName, id, lastModifiedAt, lastModifiedBy, lastModifiedByType, operationalInsightsResourceProvider, repoType, repository, resourceGroupName, sourceControlId, workspaceName);
        }
    }
}
