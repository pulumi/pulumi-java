// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventLogConfigurationResponse extends io.pulumi.resources.InvokeArgs {

    public static final EventLogConfigurationResponse Empty = new EventLogConfigurationResponse();

    @InputImport(name="filter")
      private final @Nullable String filter;

    public Optional<String> getFilter() {
        return this.filter == null ? Optional.empty() : Optional.ofNullable(this.filter);
    }

    @InputImport(name="logName", required=true)
      private final String logName;

    public String getLogName() {
        return this.logName;
    }

    public EventLogConfigurationResponse(
        @Nullable String filter,
        String logName) {
        this.filter = filter;
        this.logName = Objects.requireNonNull(logName, "expected parameter 'logName' to be non-null");
    }

    private EventLogConfigurationResponse() {
        this.filter = null;
        this.logName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventLogConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String filter;
        private String logName;

        public Builder() {
    	      // Empty
        }

        public Builder(EventLogConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.logName = defaults.logName;
        }

        public Builder filter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }

        public Builder logName(String logName) {
            this.logName = Objects.requireNonNull(logName);
            return this;
        }
        public EventLogConfigurationResponse build() {
            return new EventLogConfigurationResponse(filter, logName);
        }
    }
}
