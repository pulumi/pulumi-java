// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.peering;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConnectionMonitorTestArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectionMonitorTestArgs Empty = new ConnectionMonitorTestArgs();

    /**
     * The name of the connection monitor test
     * 
     */
    @Import(name="connectionMonitorTestName")
      private final @Nullable Output<String> connectionMonitorTestName;

    public Output<String> connectionMonitorTestName() {
        return this.connectionMonitorTestName == null ? Codegen.empty() : this.connectionMonitorTestName;
    }

    /**
     * The Connection Monitor test destination
     * 
     */
    @Import(name="destination")
      private final @Nullable Output<String> destination;

    public Output<String> destination() {
        return this.destination == null ? Codegen.empty() : this.destination;
    }

    /**
     * The Connection Monitor test destination port
     * 
     */
    @Import(name="destinationPort")
      private final @Nullable Output<Integer> destinationPort;

    public Output<Integer> destinationPort() {
        return this.destinationPort == null ? Codegen.empty() : this.destinationPort;
    }

    /**
     * The name of the peering service.
     * 
     */
    @Import(name="peeringServiceName", required=true)
      private final Output<String> peeringServiceName;

    public Output<String> peeringServiceName() {
        return this.peeringServiceName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Connection Monitor test source agent
     * 
     */
    @Import(name="sourceAgent")
      private final @Nullable Output<String> sourceAgent;

    public Output<String> sourceAgent() {
        return this.sourceAgent == null ? Codegen.empty() : this.sourceAgent;
    }

    /**
     * The Connection Monitor test frequency in seconds
     * 
     */
    @Import(name="testFrequencyInSec")
      private final @Nullable Output<Integer> testFrequencyInSec;

    public Output<Integer> testFrequencyInSec() {
        return this.testFrequencyInSec == null ? Codegen.empty() : this.testFrequencyInSec;
    }

    public ConnectionMonitorTestArgs(
        @Nullable Output<String> connectionMonitorTestName,
        @Nullable Output<String> destination,
        @Nullable Output<Integer> destinationPort,
        Output<String> peeringServiceName,
        Output<String> resourceGroupName,
        @Nullable Output<String> sourceAgent,
        @Nullable Output<Integer> testFrequencyInSec) {
        this.connectionMonitorTestName = connectionMonitorTestName;
        this.destination = destination;
        this.destinationPort = destinationPort;
        this.peeringServiceName = Objects.requireNonNull(peeringServiceName, "expected parameter 'peeringServiceName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sourceAgent = sourceAgent;
        this.testFrequencyInSec = testFrequencyInSec;
    }

    private ConnectionMonitorTestArgs() {
        this.connectionMonitorTestName = Codegen.empty();
        this.destination = Codegen.empty();
        this.destinationPort = Codegen.empty();
        this.peeringServiceName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sourceAgent = Codegen.empty();
        this.testFrequencyInSec = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionMonitorTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> connectionMonitorTestName;
        private @Nullable Output<String> destination;
        private @Nullable Output<Integer> destinationPort;
        private Output<String> peeringServiceName;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> sourceAgent;
        private @Nullable Output<Integer> testFrequencyInSec;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectionMonitorTestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionMonitorTestName = defaults.connectionMonitorTestName;
    	      this.destination = defaults.destination;
    	      this.destinationPort = defaults.destinationPort;
    	      this.peeringServiceName = defaults.peeringServiceName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sourceAgent = defaults.sourceAgent;
    	      this.testFrequencyInSec = defaults.testFrequencyInSec;
        }

        public Builder connectionMonitorTestName(@Nullable Output<String> connectionMonitorTestName) {
            this.connectionMonitorTestName = connectionMonitorTestName;
            return this;
        }
        public Builder connectionMonitorTestName(@Nullable String connectionMonitorTestName) {
            this.connectionMonitorTestName = Codegen.ofNullable(connectionMonitorTestName);
            return this;
        }
        public Builder destination(@Nullable Output<String> destination) {
            this.destination = destination;
            return this;
        }
        public Builder destination(@Nullable String destination) {
            this.destination = Codegen.ofNullable(destination);
            return this;
        }
        public Builder destinationPort(@Nullable Output<Integer> destinationPort) {
            this.destinationPort = destinationPort;
            return this;
        }
        public Builder destinationPort(@Nullable Integer destinationPort) {
            this.destinationPort = Codegen.ofNullable(destinationPort);
            return this;
        }
        public Builder peeringServiceName(Output<String> peeringServiceName) {
            this.peeringServiceName = Objects.requireNonNull(peeringServiceName);
            return this;
        }
        public Builder peeringServiceName(String peeringServiceName) {
            this.peeringServiceName = Output.of(Objects.requireNonNull(peeringServiceName));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sourceAgent(@Nullable Output<String> sourceAgent) {
            this.sourceAgent = sourceAgent;
            return this;
        }
        public Builder sourceAgent(@Nullable String sourceAgent) {
            this.sourceAgent = Codegen.ofNullable(sourceAgent);
            return this;
        }
        public Builder testFrequencyInSec(@Nullable Output<Integer> testFrequencyInSec) {
            this.testFrequencyInSec = testFrequencyInSec;
            return this;
        }
        public Builder testFrequencyInSec(@Nullable Integer testFrequencyInSec) {
            this.testFrequencyInSec = Codegen.ofNullable(testFrequencyInSec);
            return this;
        }        public ConnectionMonitorTestArgs build() {
            return new ConnectionMonitorTestArgs(connectionMonitorTestName, destination, destinationPort, peeringServiceName, resourceGroupName, sourceAgent, testFrequencyInSec);
        }
    }
}
