// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetViewByScopeArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetViewByScopeArgs Empty = new GetViewByScopeArgs();

    /**
     * The scope associated with view operations. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for External Billing Account scope and 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External Subscription scope.
     * 
     */
    @Import(name="scope", required=true)
      private final String scope;

    public String getScope() {
        return this.scope;
    }

    /**
     * View name
     * 
     */
    @Import(name="viewName", required=true)
      private final String viewName;

    public String getViewName() {
        return this.viewName;
    }

    public GetViewByScopeArgs(
        String scope,
        String viewName) {
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
        this.viewName = Objects.requireNonNull(viewName, "expected parameter 'viewName' to be non-null");
    }

    private GetViewByScopeArgs() {
        this.scope = null;
        this.viewName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetViewByScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String scope;
        private String viewName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetViewByScopeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.scope = defaults.scope;
    	      this.viewName = defaults.viewName;
        }

        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }

        public Builder viewName(String viewName) {
            this.viewName = Objects.requireNonNull(viewName);
            return this;
        }
        public GetViewByScopeArgs build() {
            return new GetViewByScopeArgs(scope, viewName);
        }
    }
}
