// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearning;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.machinelearning.outputs.WebServicePropertiesForGraphResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Instance of an Azure ML web service resource.
API Version: 2017-01-01.

{{% examples %}}
## Example Usage
{{% example %}}
### PUT WebService
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var webService = new AzureNative.MachineLearning.WebService("webService", new AzureNative.MachineLearning.WebServiceArgs
        {
            Location = "West US",
            Properties = new AzureNative.MachineLearning.Inputs.WebServicePropertiesForGraphArgs
            {
                Assets = 
                {
                    { "asset1", new AzureNative.MachineLearning.Inputs.AssetItemArgs
                    {
                        LocationInfo = new AzureNative.MachineLearning.Inputs.BlobLocationArgs
                        {
                            Credentials = "",
                            Uri = "aml://module/moduleId-1",
                        },
                        Name = "Execute R Script",
                        Type = "Module",
                    } },
                    { "asset2", new AzureNative.MachineLearning.Inputs.AssetItemArgs
                    {
                        LocationInfo = new AzureNative.MachineLearning.Inputs.BlobLocationArgs
                        {
                            Credentials = "",
                            Uri = "aml://module/moduleId-2",
                        },
                        Name = "Import Data",
                        Type = "Module",
                    } },
                },
                CommitmentPlan = new AzureNative.MachineLearning.Inputs.CommitmentPlanArgs
                {
                    Id = "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.MachineLearning/commitmentPlans/commitmentPlanName",
                },
                Description = "Web Service Description",
                Diagnostics = new AzureNative.MachineLearning.Inputs.DiagnosticsConfigurationArgs
                {
                    Level = "None",
                },
                ExampleRequest = new AzureNative.MachineLearning.Inputs.ExampleRequestArgs
                {
                    Inputs = 
                    {
                        { "input1", 
                        {
                            
                            {
                                "age",
                            },
                            
                            {
                                "workclass",
                            },
                            
                            {
                                "fnlwgt",
                            },
                            
                            {
                                "education",
                            },
                            
                            {
                                "education-num",
                            },
                        } },
                    },
                },
                ExposeSampleData = true,
                Input = new AzureNative.MachineLearning.Inputs.ServiceInputOutputSpecificationArgs
                {
                    Description = "",
                    Properties = 
                    {
                        { "input1", new AzureNative.MachineLearning.Inputs.TableSpecificationArgs
                        {
                            Description = "",
                            Properties = 
                            {
                                { "column_name", new AzureNative.MachineLearning.Inputs.ColumnSpecificationArgs
                                {
                                    Type = "String",
                                    XMsIsnullable = false,
                                } },
                            },
                            Title = "",
                            Type = "object",
                        } },
                    },
                    Title = "",
                    Type = "object",
                },
                MachineLearningWorkspace = new AzureNative.MachineLearning.Inputs.MachineLearningWorkspaceArgs
                {
                    Id = "workspaceId",
                },
                Output = new AzureNative.MachineLearning.Inputs.ServiceInputOutputSpecificationArgs
                {
                    Description = "",
                    Properties = 
                    {
                        { "output1", new AzureNative.MachineLearning.Inputs.TableSpecificationArgs
                        {
                            Description = "",
                            Properties = 
                            {
                                { "age", new AzureNative.MachineLearning.Inputs.ColumnSpecificationArgs
                                {
                                    Format = "Int32",
                                    Type = "Integer",
                                    XMsIsnullable = true,
                                } },
                                { "workclass", new AzureNative.MachineLearning.Inputs.ColumnSpecificationArgs
                                {
                                    Type = "String",
                                    XMsIsnullable = false,
                                } },
                            },
                            Title = "",
                            Type = "object",
                        } },
                    },
                    Title = "",
                    Type = "object",
                },
                Package = new AzureNative.MachineLearning.Inputs.GraphPackageArgs
                {
                    Edges = 
                    {
                        new AzureNative.MachineLearning.Inputs.GraphEdgeArgs
                        {
                            SourceNodeId = "node2",
                            SourcePortId = "Results dataset",
                            TargetNodeId = "node1",
                            TargetPortId = "Dataset2",
                        },
                        new AzureNative.MachineLearning.Inputs.GraphEdgeArgs
                        {
                            SourceNodeId = "node3",
                            TargetNodeId = "node1",
                            TargetPortId = "Dataset1",
                        },
                        new AzureNative.MachineLearning.Inputs.GraphEdgeArgs
                        {
                            SourceNodeId = "node1",
                            SourcePortId = "Result Dataset",
                            TargetNodeId = "node4",
                        },
                    },
                    GraphParameters = ,
                    Nodes = 
                    {
                        { "node1", new AzureNative.MachineLearning.Inputs.GraphNodeArgs
                        {
                            AssetId = "asset1",
                            Parameters = 
                            {
                                { "R Script", new AzureNative.MachineLearning.Inputs.WebServiceParameterArgs
                                {
                                    CertificateThumbprint = "",
                                    Value = "The R Script",
                                } },
                                { "R Version", new AzureNative.MachineLearning.Inputs.WebServiceParameterArgs
                                {
                                    CertificateThumbprint = "",
                                    Value = "CRAN R 3.1.0",
                                } },
                            },
                        } },
                        { "node2", new AzureNative.MachineLearning.Inputs.GraphNodeArgs
                        {
                            AssetId = "asset2",
                            Parameters = 
                            {
                                { "Account Key", new AzureNative.MachineLearning.Inputs.WebServiceParameterArgs
                                {
                                    CertificateThumbprint = "TheThumbprint",
                                    Value = "Encrypted Key",
                                } },
                                { "Account Name", new AzureNative.MachineLearning.Inputs.WebServiceParameterArgs
                                {
                                    CertificateThumbprint = "",
                                    Value = "accountName",
                                } },
                                { "Please Specify Authentication Type", new AzureNative.MachineLearning.Inputs.WebServiceParameterArgs
                                {
                                    CertificateThumbprint = "",
                                    Value = "Account",
                                } },
                                { "Please Specify Data Source", new AzureNative.MachineLearning.Inputs.WebServiceParameterArgs
                                {
                                    CertificateThumbprint = "",
                                    Value = "AzureBlobStorage",
                                } },
                            },
                        } },
                        { "node3", new AzureNative.MachineLearning.Inputs.GraphNodeArgs
                        {
                            InputId = "input1",
                        } },
                        { "node4", new AzureNative.MachineLearning.Inputs.GraphNodeArgs
                        {
                            OutputId = "output1",
                        } },
                    },
                },
                PackageType = "Graph",
                Parameters = ,
                PayloadsInBlobStorage = false,
                ReadOnly = false,
                RealtimeConfiguration = new AzureNative.MachineLearning.Inputs.RealtimeConfigurationArgs
                {
                    MaxConcurrentCalls = 4,
                },
                StorageAccount = new AzureNative.MachineLearning.Inputs.StorageAccountArgs
                {
                    Key = "Storage_Key",
                    Name = "Storage_Name",
                },
                Title = "Web Service Title",
            },
            ResourceGroupName = "OneResourceGroupName",
            Tags = 
            {
                { "tag1", "value1" },
                { "tag2", "value2" },
            },
            WebServiceName = "TargetWebServiceName",
        });
    }

}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const webService = new azure_native.machinelearning.WebService("webService", {
    location: "West US",
    properties: {
        assets: {
            asset1: {
                locationInfo: {
                    credentials: "",
                    uri: "aml://module/moduleId-1",
                },
                name: "Execute R Script",
                type: "Module",
            },
            asset2: {
                locationInfo: {
                    credentials: "",
                    uri: "aml://module/moduleId-2",
                },
                name: "Import Data",
                type: "Module",
            },
        },
        commitmentPlan: {
            id: "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.MachineLearning/commitmentPlans/commitmentPlanName",
        },
        description: "Web Service Description",
        diagnostics: {
            level: "None",
        },
        exampleRequest: {
            inputs: {
                input1: [
                    ["age"],
                    ["workclass"],
                    ["fnlwgt"],
                    ["education"],
                    ["education-num"],
                ],
            },
        },
        exposeSampleData: true,
        input: {
            description: "",
            properties: {
                input1: {
                    description: "",
                    properties: {
                        column_name: {
                            type: "String",
                            xMsIsnullable: false,
                        },
                    },
                    title: "",
                    type: "object",
                },
            },
            title: "",
            type: "object",
        },
        machineLearningWorkspace: {
            id: "workspaceId",
        },
        output: {
            description: "",
            properties: {
                output1: {
                    description: "",
                    properties: {
                        age: {
                            format: "Int32",
                            type: "Integer",
                            xMsIsnullable: true,
                        },
                        workclass: {
                            type: "String",
                            xMsIsnullable: false,
                        },
                    },
                    title: "",
                    type: "object",
                },
            },
            title: "",
            type: "object",
        },
        "package": {
            edges: [
                {
                    sourceNodeId: "node2",
                    sourcePortId: "Results dataset",
                    targetNodeId: "node1",
                    targetPortId: "Dataset2",
                },
                {
                    sourceNodeId: "node3",
                    targetNodeId: "node1",
                    targetPortId: "Dataset1",
                },
                {
                    sourceNodeId: "node1",
                    sourcePortId: "Result Dataset",
                    targetNodeId: "node4",
                },
            ],
            graphParameters: {},
            nodes: {
                node1: {
                    assetId: "asset1",
                    parameters: {
                        "R Script": {
                            certificateThumbprint: "",
                            value: "The R Script",
                        },
                        "R Version": {
                            certificateThumbprint: "",
                            value: "CRAN R 3.1.0",
                        },
                    },
                },
                node2: {
                    assetId: "asset2",
                    parameters: {
                        "Account Key": {
                            certificateThumbprint: "TheThumbprint",
                            value: "Encrypted Key",
                        },
                        "Account Name": {
                            certificateThumbprint: "",
                            value: "accountName",
                        },
                        "Please Specify Authentication Type": {
                            certificateThumbprint: "",
                            value: "Account",
                        },
                        "Please Specify Data Source": {
                            certificateThumbprint: "",
                            value: "AzureBlobStorage",
                        },
                    },
                },
                node3: {
                    inputId: "input1",
                },
                node4: {
                    outputId: "output1",
                },
            },
        },
        packageType: "Graph",
        parameters: {},
        payloadsInBlobStorage: false,
        readOnly: false,
        realtimeConfiguration: {
            maxConcurrentCalls: 4,
        },
        storageAccount: {
            key: "Storage_Key",
            name: "Storage_Name",
        },
        title: "Web Service Title",
    },
    resourceGroupName: "OneResourceGroupName",
    tags: {
        tag1: "value1",
        tag2: "value2",
    },
    webServiceName: "TargetWebServiceName",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

web_service = azure_native.machinelearning.WebService("webService",
    location="West US",
    properties={
        "assets": {
            "asset1": azure_native.machinelearning.AssetItemArgs(
                location_info=azure_native.machinelearning.BlobLocationArgs(
                    credentials="",
                    uri="aml://module/moduleId-1",
                ),
                name="Execute R Script",
                type="Module",
            ),
            "asset2": azure_native.machinelearning.AssetItemArgs(
                location_info=azure_native.machinelearning.BlobLocationArgs(
                    credentials="",
                    uri="aml://module/moduleId-2",
                ),
                name="Import Data",
                type="Module",
            ),
        },
        "commitmentPlan": azure_native.machinelearning.CommitmentPlanArgs(
            id="/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.MachineLearning/commitmentPlans/commitmentPlanName",
        ),
        "description": "Web Service Description",
        "diagnostics": azure_native.machinelearning.DiagnosticsConfigurationArgs(
            level="None",
        ),
        "exampleRequest": azure_native.machinelearning.ExampleRequestArgs(
            inputs={
                "input1": [
                    ["age"],
                    ["workclass"],
                    ["fnlwgt"],
                    ["education"],
                    ["education-num"],
                ],
            },
        ),
        "exposeSampleData": True,
        "input": azure_native.machinelearning.ServiceInputOutputSpecificationArgs(
            description="",
            properties={
                "input1": azure_native.machinelearning.TableSpecificationArgs(
                    description="",
                    properties={
                        "column_name": azure_native.machinelearning.ColumnSpecificationArgs(
                            type="String",
                            x_ms_isnullable=False,
                        ),
                    },
                    title="",
                    type="object",
                ),
            },
            title="",
            type="object",
        ),
        "machineLearningWorkspace": azure_native.machinelearning.MachineLearningWorkspaceArgs(
            id="workspaceId",
        ),
        "output": azure_native.machinelearning.ServiceInputOutputSpecificationArgs(
            description="",
            properties={
                "output1": azure_native.machinelearning.TableSpecificationArgs(
                    description="",
                    properties={
                        "age": azure_native.machinelearning.ColumnSpecificationArgs(
                            format="Int32",
                            type="Integer",
                            x_ms_isnullable=True,
                        ),
                        "workclass": azure_native.machinelearning.ColumnSpecificationArgs(
                            type="String",
                            x_ms_isnullable=False,
                        ),
                    },
                    title="",
                    type="object",
                ),
            },
            title="",
            type="object",
        ),
        "package": azure_native.machinelearning.GraphPackageArgs(
            edges=[
                azure_native.machinelearning.GraphEdgeArgs(
                    source_node_id="node2",
                    source_port_id="Results dataset",
                    target_node_id="node1",
                    target_port_id="Dataset2",
                ),
                azure_native.machinelearning.GraphEdgeArgs(
                    source_node_id="node3",
                    target_node_id="node1",
                    target_port_id="Dataset1",
                ),
                azure_native.machinelearning.GraphEdgeArgs(
                    source_node_id="node1",
                    source_port_id="Result Dataset",
                    target_node_id="node4",
                ),
            ],
            graph_parameters={},
            nodes={
                "node1": azure_native.machinelearning.GraphNodeArgs(
                    asset_id="asset1",
                    parameters={
                        "R Script": azure_native.machinelearning.WebServiceParameterArgs(
                            certificate_thumbprint="",
                            value="The R Script",
                        ),
                        "R Version": azure_native.machinelearning.WebServiceParameterArgs(
                            certificate_thumbprint="",
                            value="CRAN R 3.1.0",
                        ),
                    },
                ),
                "node2": azure_native.machinelearning.GraphNodeArgs(
                    asset_id="asset2",
                    parameters={
                        "Account Key": azure_native.machinelearning.WebServiceParameterArgs(
                            certificate_thumbprint="TheThumbprint",
                            value="Encrypted Key",
                        ),
                        "Account Name": azure_native.machinelearning.WebServiceParameterArgs(
                            certificate_thumbprint="",
                            value="accountName",
                        ),
                        "Please Specify Authentication Type": azure_native.machinelearning.WebServiceParameterArgs(
                            certificate_thumbprint="",
                            value="Account",
                        ),
                        "Please Specify Data Source": azure_native.machinelearning.WebServiceParameterArgs(
                            certificate_thumbprint="",
                            value="AzureBlobStorage",
                        ),
                    },
                ),
                "node3": azure_native.machinelearning.GraphNodeArgs(
                    input_id="input1",
                ),
                "node4": azure_native.machinelearning.GraphNodeArgs(
                    output_id="output1",
                ),
            },
        ),
        "packageType": "Graph",
        "parameters": {},
        "payloadsInBlobStorage": False,
        "readOnly": False,
        "realtimeConfiguration": azure_native.machinelearning.RealtimeConfigurationArgs(
            max_concurrent_calls=4,
        ),
        "storageAccount": azure_native.machinelearning.StorageAccountArgs(
            key="Storage_Key",
            name="Storage_Name",
        ),
        "title": "Web Service Title",
    },
    resource_group_name="OneResourceGroupName",
    tags={
        "tag1": "value1",
        "tag2": "value2",
    },
    web_service_name="TargetWebServiceName")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:machinelearning:WebService myresource1 TheWebServiceId 
```

 */
@ResourceType(type="azure-native:machinelearning:WebService")
public class WebService extends io.pulumi.resources.CustomResource {
    /**
     * Specifies the location of the resource.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Specifies the location of the resource.
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Specifies the name of the resource.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of the resource.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Contains the property payload that describes the web service.
     */
    @OutputExport(name="properties", type=WebServicePropertiesForGraphResponse.class, parameters={})
    private Output<WebServicePropertiesForGraphResponse> properties;

    /**
     * @return Contains the property payload that describes the web service.
     */
    public Output<WebServicePropertiesForGraphResponse> getProperties() {
        return this.properties;
    }
    /**
     * Contains resource tags defined as key/value pairs.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Contains resource tags defined as key/value pairs.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Specifies the type of the resource.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Specifies the type of the resource.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WebService(String name, WebServiceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:machinelearning:WebService", name, args == null ? WebServiceArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private WebService(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:machinelearning:WebService", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:machinelearning/v20160501preview:WebService").build()),
                Input.of(Alias.builder().setType("azure-native:machinelearning/v20170101:WebService").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WebService get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new WebService(name, id, options);
    }
}
