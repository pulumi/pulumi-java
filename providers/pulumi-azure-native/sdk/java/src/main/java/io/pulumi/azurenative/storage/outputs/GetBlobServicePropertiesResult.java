// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.outputs;

import io.pulumi.azurenative.storage.outputs.ChangeFeedResponse;
import io.pulumi.azurenative.storage.outputs.CorsRulesResponse;
import io.pulumi.azurenative.storage.outputs.DeleteRetentionPolicyResponse;
import io.pulumi.azurenative.storage.outputs.LastAccessTimeTrackingPolicyResponse;
import io.pulumi.azurenative.storage.outputs.RestorePolicyPropertiesResponse;
import io.pulumi.azurenative.storage.outputs.SkuResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetBlobServicePropertiesResult {
    private final @Nullable Boolean automaticSnapshotPolicyEnabled;
    private final @Nullable ChangeFeedResponse changeFeed;
    private final @Nullable DeleteRetentionPolicyResponse containerDeleteRetentionPolicy;
    private final @Nullable CorsRulesResponse cors;
    private final @Nullable String defaultServiceVersion;
    private final @Nullable DeleteRetentionPolicyResponse deleteRetentionPolicy;
    private final String id;
    private final @Nullable Boolean isVersioningEnabled;
    private final @Nullable LastAccessTimeTrackingPolicyResponse lastAccessTimeTrackingPolicy;
    private final String name;
    private final @Nullable RestorePolicyPropertiesResponse restorePolicy;
    private final SkuResponse sku;
    private final String type;

    @OutputCustomType.Constructor({"automaticSnapshotPolicyEnabled","changeFeed","containerDeleteRetentionPolicy","cors","defaultServiceVersion","deleteRetentionPolicy","id","isVersioningEnabled","lastAccessTimeTrackingPolicy","name","restorePolicy","sku","type"})
    private GetBlobServicePropertiesResult(
        @Nullable Boolean automaticSnapshotPolicyEnabled,
        @Nullable ChangeFeedResponse changeFeed,
        @Nullable DeleteRetentionPolicyResponse containerDeleteRetentionPolicy,
        @Nullable CorsRulesResponse cors,
        @Nullable String defaultServiceVersion,
        @Nullable DeleteRetentionPolicyResponse deleteRetentionPolicy,
        String id,
        @Nullable Boolean isVersioningEnabled,
        @Nullable LastAccessTimeTrackingPolicyResponse lastAccessTimeTrackingPolicy,
        String name,
        @Nullable RestorePolicyPropertiesResponse restorePolicy,
        SkuResponse sku,
        String type) {
        this.automaticSnapshotPolicyEnabled = automaticSnapshotPolicyEnabled;
        this.changeFeed = changeFeed;
        this.containerDeleteRetentionPolicy = containerDeleteRetentionPolicy;
        this.cors = cors;
        this.defaultServiceVersion = defaultServiceVersion;
        this.deleteRetentionPolicy = deleteRetentionPolicy;
        this.id = Objects.requireNonNull(id);
        this.isVersioningEnabled = isVersioningEnabled;
        this.lastAccessTimeTrackingPolicy = lastAccessTimeTrackingPolicy;
        this.name = Objects.requireNonNull(name);
        this.restorePolicy = restorePolicy;
        this.sku = Objects.requireNonNull(sku);
        this.type = Objects.requireNonNull(type);
    }

    public Optional<Boolean> getAutomaticSnapshotPolicyEnabled() {
        return Optional.ofNullable(this.automaticSnapshotPolicyEnabled);
    }
    public Optional<ChangeFeedResponse> getChangeFeed() {
        return Optional.ofNullable(this.changeFeed);
    }
    public Optional<DeleteRetentionPolicyResponse> getContainerDeleteRetentionPolicy() {
        return Optional.ofNullable(this.containerDeleteRetentionPolicy);
    }
    public Optional<CorsRulesResponse> getCors() {
        return Optional.ofNullable(this.cors);
    }
    public Optional<String> getDefaultServiceVersion() {
        return Optional.ofNullable(this.defaultServiceVersion);
    }
    public Optional<DeleteRetentionPolicyResponse> getDeleteRetentionPolicy() {
        return Optional.ofNullable(this.deleteRetentionPolicy);
    }
    public String getId() {
        return this.id;
    }
    public Optional<Boolean> getIsVersioningEnabled() {
        return Optional.ofNullable(this.isVersioningEnabled);
    }
    public Optional<LastAccessTimeTrackingPolicyResponse> getLastAccessTimeTrackingPolicy() {
        return Optional.ofNullable(this.lastAccessTimeTrackingPolicy);
    }
    public String getName() {
        return this.name;
    }
    public Optional<RestorePolicyPropertiesResponse> getRestorePolicy() {
        return Optional.ofNullable(this.restorePolicy);
    }
    public SkuResponse getSku() {
        return this.sku;
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBlobServicePropertiesResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean automaticSnapshotPolicyEnabled;
        private @Nullable ChangeFeedResponse changeFeed;
        private @Nullable DeleteRetentionPolicyResponse containerDeleteRetentionPolicy;
        private @Nullable CorsRulesResponse cors;
        private @Nullable String defaultServiceVersion;
        private @Nullable DeleteRetentionPolicyResponse deleteRetentionPolicy;
        private String id;
        private @Nullable Boolean isVersioningEnabled;
        private @Nullable LastAccessTimeTrackingPolicyResponse lastAccessTimeTrackingPolicy;
        private String name;
        private @Nullable RestorePolicyPropertiesResponse restorePolicy;
        private SkuResponse sku;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBlobServicePropertiesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticSnapshotPolicyEnabled = defaults.automaticSnapshotPolicyEnabled;
    	      this.changeFeed = defaults.changeFeed;
    	      this.containerDeleteRetentionPolicy = defaults.containerDeleteRetentionPolicy;
    	      this.cors = defaults.cors;
    	      this.defaultServiceVersion = defaults.defaultServiceVersion;
    	      this.deleteRetentionPolicy = defaults.deleteRetentionPolicy;
    	      this.id = defaults.id;
    	      this.isVersioningEnabled = defaults.isVersioningEnabled;
    	      this.lastAccessTimeTrackingPolicy = defaults.lastAccessTimeTrackingPolicy;
    	      this.name = defaults.name;
    	      this.restorePolicy = defaults.restorePolicy;
    	      this.sku = defaults.sku;
    	      this.type = defaults.type;
        }

        public Builder setAutomaticSnapshotPolicyEnabled(@Nullable Boolean automaticSnapshotPolicyEnabled) {
            this.automaticSnapshotPolicyEnabled = automaticSnapshotPolicyEnabled;
            return this;
        }

        public Builder setChangeFeed(@Nullable ChangeFeedResponse changeFeed) {
            this.changeFeed = changeFeed;
            return this;
        }

        public Builder setContainerDeleteRetentionPolicy(@Nullable DeleteRetentionPolicyResponse containerDeleteRetentionPolicy) {
            this.containerDeleteRetentionPolicy = containerDeleteRetentionPolicy;
            return this;
        }

        public Builder setCors(@Nullable CorsRulesResponse cors) {
            this.cors = cors;
            return this;
        }

        public Builder setDefaultServiceVersion(@Nullable String defaultServiceVersion) {
            this.defaultServiceVersion = defaultServiceVersion;
            return this;
        }

        public Builder setDeleteRetentionPolicy(@Nullable DeleteRetentionPolicyResponse deleteRetentionPolicy) {
            this.deleteRetentionPolicy = deleteRetentionPolicy;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIsVersioningEnabled(@Nullable Boolean isVersioningEnabled) {
            this.isVersioningEnabled = isVersioningEnabled;
            return this;
        }

        public Builder setLastAccessTimeTrackingPolicy(@Nullable LastAccessTimeTrackingPolicyResponse lastAccessTimeTrackingPolicy) {
            this.lastAccessTimeTrackingPolicy = lastAccessTimeTrackingPolicy;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setRestorePolicy(@Nullable RestorePolicyPropertiesResponse restorePolicy) {
            this.restorePolicy = restorePolicy;
            return this;
        }

        public Builder setSku(SkuResponse sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetBlobServicePropertiesResult build() {
            return new GetBlobServicePropertiesResult(automaticSnapshotPolicyEnabled, changeFeed, containerDeleteRetentionPolicy, cors, defaultServiceVersion, deleteRetentionPolicy, id, isVersioningEnabled, lastAccessTimeTrackingPolicy, name, restorePolicy, sku, type);
        }
    }
}
