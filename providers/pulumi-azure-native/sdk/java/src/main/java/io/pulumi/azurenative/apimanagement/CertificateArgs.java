// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.azurenative.apimanagement.inputs.KeyVaultContractCreatePropertiesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    /**
     * Identifier of the certificate entity. Must be unique in the current API Management service instance.
     * 
     */
    @InputImport(name="certificateId")
        private final @Nullable Input<String> certificateId;

    public Input<String> getCertificateId() {
        return this.certificateId == null ? Input.empty() : this.certificateId;
    }

    /**
     * Base 64 encoded certificate using the application/x-pkcs12 representation.
     * 
     */
    @InputImport(name="data")
        private final @Nullable Input<String> data;

    public Input<String> getData() {
        return this.data == null ? Input.empty() : this.data;
    }

    /**
     * KeyVault location details of the certificate.
     * 
     */
    @InputImport(name="keyVault")
        private final @Nullable Input<KeyVaultContractCreatePropertiesArgs> keyVault;

    public Input<KeyVaultContractCreatePropertiesArgs> getKeyVault() {
        return this.keyVault == null ? Input.empty() : this.keyVault;
    }

    /**
     * Password for the Certificate
     * 
     */
    @InputImport(name="password")
        private final @Nullable Input<String> password;

    public Input<String> getPassword() {
        return this.password == null ? Input.empty() : this.password;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @InputImport(name="serviceName", required=true)
        private final Input<String> serviceName;

    public Input<String> getServiceName() {
        return this.serviceName;
    }

    public CertificateArgs(
        @Nullable Input<String> certificateId,
        @Nullable Input<String> data,
        @Nullable Input<KeyVaultContractCreatePropertiesArgs> keyVault,
        @Nullable Input<String> password,
        Input<String> resourceGroupName,
        Input<String> serviceName) {
        this.certificateId = certificateId;
        this.data = data;
        this.keyVault = keyVault;
        this.password = password;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
    }

    private CertificateArgs() {
        this.certificateId = Input.empty();
        this.data = Input.empty();
        this.keyVault = Input.empty();
        this.password = Input.empty();
        this.resourceGroupName = Input.empty();
        this.serviceName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> certificateId;
        private @Nullable Input<String> data;
        private @Nullable Input<KeyVaultContractCreatePropertiesArgs> keyVault;
        private @Nullable Input<String> password;
        private Input<String> resourceGroupName;
        private Input<String> serviceName;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.data = defaults.data;
    	      this.keyVault = defaults.keyVault;
    	      this.password = defaults.password;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceName = defaults.serviceName;
        }

        public Builder setCertificateId(@Nullable Input<String> certificateId) {
            this.certificateId = certificateId;
            return this;
        }

        public Builder setCertificateId(@Nullable String certificateId) {
            this.certificateId = Input.ofNullable(certificateId);
            return this;
        }

        public Builder setData(@Nullable Input<String> data) {
            this.data = data;
            return this;
        }

        public Builder setData(@Nullable String data) {
            this.data = Input.ofNullable(data);
            return this;
        }

        public Builder setKeyVault(@Nullable Input<KeyVaultContractCreatePropertiesArgs> keyVault) {
            this.keyVault = keyVault;
            return this;
        }

        public Builder setKeyVault(@Nullable KeyVaultContractCreatePropertiesArgs keyVault) {
            this.keyVault = Input.ofNullable(keyVault);
            return this;
        }

        public Builder setPassword(@Nullable Input<String> password) {
            this.password = password;
            return this;
        }

        public Builder setPassword(@Nullable String password) {
            this.password = Input.ofNullable(password);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setServiceName(Input<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }

        public Builder setServiceName(String serviceName) {
            this.serviceName = Input.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public CertificateArgs build() {
            return new CertificateArgs(certificateId, data, keyVault, password, resourceGroupName, serviceName);
        }
    }
}
