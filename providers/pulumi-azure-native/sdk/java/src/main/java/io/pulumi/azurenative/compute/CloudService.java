// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.compute.CloudServiceArgs;
import io.pulumi.azurenative.compute.outputs.CloudServicePropertiesResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Describes the cloud service.
API Version: 2021-03-01.

{{% examples %}}
## Example Usage
{{% example %}}
### Create New Cloud Service with Multiple Roles
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cloudService = new AzureNative.Compute.CloudService("cloudService", new AzureNative.Compute.CloudServiceArgs
        {
            CloudServiceName = "{cs-name}",
            Location = "westus",
            Properties = new AzureNative.Compute.Inputs.CloudServicePropertiesArgs
            {
                Configuration = "{ServiceConfiguration}",
                NetworkProfile = new AzureNative.Compute.Inputs.CloudServiceNetworkProfileArgs
                {
                    LoadBalancerConfigurations = 
                    {
                        new AzureNative.Compute.Inputs.LoadBalancerConfigurationArgs
                        {
                            Name = "contosolb",
                            Properties = new AzureNative.Compute.Inputs.LoadBalancerConfigurationPropertiesArgs
                            {
                                FrontendIPConfigurations = 
                                {
                                    new AzureNative.Compute.Inputs.LoadBalancerFrontendIPConfigurationArgs
                                    {
                                        Name = "contosofe",
                                        Properties = new AzureNative.Compute.Inputs.LoadBalancerFrontendIPConfigurationPropertiesArgs
                                        {
                                            PublicIPAddress = new AzureNative.Compute.Inputs.SubResourceArgs
                                            {
                                                Id = "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
                PackageUrl = "{PackageUrl}",
                RoleProfile = new AzureNative.Compute.Inputs.CloudServiceRoleProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.Compute.Inputs.CloudServiceRoleProfilePropertiesArgs
                        {
                            Name = "ContosoFrontend",
                            Sku = new AzureNative.Compute.Inputs.CloudServiceRoleSkuArgs
                            {
                                Capacity = 1,
                                Name = "Standard_D1_v2",
                                Tier = "Standard",
                            },
                        },
                        new AzureNative.Compute.Inputs.CloudServiceRoleProfilePropertiesArgs
                        {
                            Name = "ContosoBackend",
                            Sku = new AzureNative.Compute.Inputs.CloudServiceRoleSkuArgs
                            {
                                Capacity = 1,
                                Name = "Standard_D1_v2",
                                Tier = "Standard",
                            },
                        },
                    },
                },
                UpgradeMode = "Auto",
            },
            ResourceGroupName = "ConstosoRG",
        });
    }

}

```

```go
package main

import (
	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := compute.NewCloudService(ctx, "cloudService", &compute.CloudServiceArgs{
			CloudServiceName: pulumi.String("{cs-name}"),
			Location:         pulumi.String("westus"),
			Properties: &compute.CloudServicePropertiesArgs{
				Configuration: pulumi.String("{ServiceConfiguration}"),
				NetworkProfile: &compute.CloudServiceNetworkProfileArgs{
					LoadBalancerConfigurations: compute.LoadBalancerConfigurationArray{
						&compute.LoadBalancerConfigurationArgs{
							Name: pulumi.String("contosolb"),
							Properties: &compute.LoadBalancerConfigurationPropertiesArgs{
								FrontendIPConfigurations: compute.LoadBalancerFrontendIPConfigurationArray{
									&compute.LoadBalancerFrontendIPConfigurationArgs{
										Name: pulumi.String("contosofe"),
										Properties: &compute.LoadBalancerFrontendIPConfigurationPropertiesArgs{
											PublicIPAddress: &compute.SubResourceArgs{
												Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									},
								},
							},
						},
					},
				},
				PackageUrl: pulumi.String("{PackageUrl}"),
				RoleProfile: &compute.CloudServiceRoleProfileArgs{
					Roles: compute.CloudServiceRoleProfilePropertiesArray{
						&compute.CloudServiceRoleProfilePropertiesArgs{
							Name: pulumi.String("ContosoFrontend"),
							Sku: &compute.CloudServiceRoleSkuArgs{
								Capacity: pulumi.Float64(1),
								Name:     pulumi.String("Standard_D1_v2"),
								Tier:     pulumi.String("Standard"),
							},
						},
						&compute.CloudServiceRoleProfilePropertiesArgs{
							Name: pulumi.String("ContosoBackend"),
							Sku: &compute.CloudServiceRoleSkuArgs{
								Capacity: pulumi.Float64(1),
								Name:     pulumi.String("Standard_D1_v2"),
								Tier:     pulumi.String("Standard"),
							},
						},
					},
				},
				UpgradeMode: pulumi.String("Auto"),
			},
			ResourceGroupName: pulumi.String("ConstosoRG"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cloudService = new azure_native.compute.CloudService("cloudService", {
    cloudServiceName: "{cs-name}",
    location: "westus",
    properties: {
        configuration: "{ServiceConfiguration}",
        networkProfile: {
            loadBalancerConfigurations: [{
                name: "contosolb",
                properties: {
                    frontendIPConfigurations: [{
                        name: "contosofe",
                        properties: {
                            publicIPAddress: {
                                id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                            },
                        },
                    }],
                },
            }],
        },
        packageUrl: "{PackageUrl}",
        roleProfile: {
            roles: [
                {
                    name: "ContosoFrontend",
                    sku: {
                        capacity: 1,
                        name: "Standard_D1_v2",
                        tier: "Standard",
                    },
                },
                {
                    name: "ContosoBackend",
                    sku: {
                        capacity: 1,
                        name: "Standard_D1_v2",
                        tier: "Standard",
                    },
                },
            ],
        },
        upgradeMode: "Auto",
    },
    resourceGroupName: "ConstosoRG",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cloud_service = azure_native.compute.CloudService("cloudService",
    cloud_service_name="{cs-name}",
    location="westus",
    properties=azure_native.compute.CloudServicePropertiesArgs(
        configuration="{ServiceConfiguration}",
        network_profile=azure_native.compute.CloudServiceNetworkProfileArgs(
            load_balancer_configurations=[azure_native.compute.LoadBalancerConfigurationArgs(
                name="contosolb",
                properties=azure_native.compute.LoadBalancerConfigurationPropertiesArgs(
                    frontend_ip_configurations=[azure_native.compute.LoadBalancerFrontendIPConfigurationArgs(
                        name="contosofe",
                        properties=azure_native.compute.LoadBalancerFrontendIPConfigurationPropertiesArgs(
                            public_ip_address=azure_native.compute.SubResourceArgs(
                                id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                            ),
                        ),
                    )],
                ),
            )],
        ),
        package_url="{PackageUrl}",
        role_profile=azure_native.compute.CloudServiceRoleProfileArgs(
            roles=[
                azure_native.compute.CloudServiceRoleProfilePropertiesArgs(
                    name="ContosoFrontend",
                    sku=azure_native.compute.CloudServiceRoleSkuArgs(
                        capacity=1,
                        name="Standard_D1_v2",
                        tier="Standard",
                    ),
                ),
                azure_native.compute.CloudServiceRoleProfilePropertiesArgs(
                    name="ContosoBackend",
                    sku=azure_native.compute.CloudServiceRoleSkuArgs(
                        capacity=1,
                        name="Standard_D1_v2",
                        tier="Standard",
                    ),
                ),
            ],
        ),
        upgrade_mode="Auto",
    ),
    resource_group_name="ConstosoRG")

```

{{% /example %}}
{{% example %}}
### Create New Cloud Service with Single Role
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cloudService = new AzureNative.Compute.CloudService("cloudService", new AzureNative.Compute.CloudServiceArgs
        {
            CloudServiceName = "{cs-name}",
            Location = "westus",
            Properties = new AzureNative.Compute.Inputs.CloudServicePropertiesArgs
            {
                Configuration = "{ServiceConfiguration}",
                NetworkProfile = new AzureNative.Compute.Inputs.CloudServiceNetworkProfileArgs
                {
                    LoadBalancerConfigurations = 
                    {
                        new AzureNative.Compute.Inputs.LoadBalancerConfigurationArgs
                        {
                            Name = "myLoadBalancer",
                            Properties = new AzureNative.Compute.Inputs.LoadBalancerConfigurationPropertiesArgs
                            {
                                FrontendIPConfigurations = 
                                {
                                    new AzureNative.Compute.Inputs.LoadBalancerFrontendIPConfigurationArgs
                                    {
                                        Name = "myfe",
                                        Properties = new AzureNative.Compute.Inputs.LoadBalancerFrontendIPConfigurationPropertiesArgs
                                        {
                                            PublicIPAddress = new AzureNative.Compute.Inputs.SubResourceArgs
                                            {
                                                Id = "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP",
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
                PackageUrl = "{PackageUrl}",
                RoleProfile = new AzureNative.Compute.Inputs.CloudServiceRoleProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.Compute.Inputs.CloudServiceRoleProfilePropertiesArgs
                        {
                            Name = "ContosoFrontend",
                            Sku = new AzureNative.Compute.Inputs.CloudServiceRoleSkuArgs
                            {
                                Capacity = 1,
                                Name = "Standard_D1_v2",
                                Tier = "Standard",
                            },
                        },
                    },
                },
                UpgradeMode = "Auto",
            },
            ResourceGroupName = "ConstosoRG",
        });
    }

}

```

```go
package main

import (
	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := compute.NewCloudService(ctx, "cloudService", &compute.CloudServiceArgs{
			CloudServiceName: pulumi.String("{cs-name}"),
			Location:         pulumi.String("westus"),
			Properties: &compute.CloudServicePropertiesArgs{
				Configuration: pulumi.String("{ServiceConfiguration}"),
				NetworkProfile: &compute.CloudServiceNetworkProfileArgs{
					LoadBalancerConfigurations: compute.LoadBalancerConfigurationArray{
						&compute.LoadBalancerConfigurationArgs{
							Name: pulumi.String("myLoadBalancer"),
							Properties: &compute.LoadBalancerConfigurationPropertiesArgs{
								FrontendIPConfigurations: compute.LoadBalancerFrontendIPConfigurationArray{
									&compute.LoadBalancerFrontendIPConfigurationArgs{
										Name: pulumi.String("myfe"),
										Properties: &compute.LoadBalancerFrontendIPConfigurationPropertiesArgs{
											PublicIPAddress: &compute.SubResourceArgs{
												Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
											},
										},
									},
								},
							},
						},
					},
				},
				PackageUrl: pulumi.String("{PackageUrl}"),
				RoleProfile: &compute.CloudServiceRoleProfileArgs{
					Roles: compute.CloudServiceRoleProfilePropertiesArray{
						&compute.CloudServiceRoleProfilePropertiesArgs{
							Name: pulumi.String("ContosoFrontend"),
							Sku: &compute.CloudServiceRoleSkuArgs{
								Capacity: pulumi.Float64(1),
								Name:     pulumi.String("Standard_D1_v2"),
								Tier:     pulumi.String("Standard"),
							},
						},
					},
				},
				UpgradeMode: pulumi.String("Auto"),
			},
			ResourceGroupName: pulumi.String("ConstosoRG"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cloudService = new azure_native.compute.CloudService("cloudService", {
    cloudServiceName: "{cs-name}",
    location: "westus",
    properties: {
        configuration: "{ServiceConfiguration}",
        networkProfile: {
            loadBalancerConfigurations: [{
                name: "myLoadBalancer",
                properties: {
                    frontendIPConfigurations: [{
                        name: "myfe",
                        properties: {
                            publicIPAddress: {
                                id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP",
                            },
                        },
                    }],
                },
            }],
        },
        packageUrl: "{PackageUrl}",
        roleProfile: {
            roles: [{
                name: "ContosoFrontend",
                sku: {
                    capacity: 1,
                    name: "Standard_D1_v2",
                    tier: "Standard",
                },
            }],
        },
        upgradeMode: "Auto",
    },
    resourceGroupName: "ConstosoRG",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cloud_service = azure_native.compute.CloudService("cloudService",
    cloud_service_name="{cs-name}",
    location="westus",
    properties=azure_native.compute.CloudServicePropertiesArgs(
        configuration="{ServiceConfiguration}",
        network_profile=azure_native.compute.CloudServiceNetworkProfileArgs(
            load_balancer_configurations=[azure_native.compute.LoadBalancerConfigurationArgs(
                name="myLoadBalancer",
                properties=azure_native.compute.LoadBalancerConfigurationPropertiesArgs(
                    frontend_ip_configurations=[azure_native.compute.LoadBalancerFrontendIPConfigurationArgs(
                        name="myfe",
                        properties=azure_native.compute.LoadBalancerFrontendIPConfigurationPropertiesArgs(
                            public_ip_address=azure_native.compute.SubResourceArgs(
                                id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP",
                            ),
                        ),
                    )],
                ),
            )],
        ),
        package_url="{PackageUrl}",
        role_profile=azure_native.compute.CloudServiceRoleProfileArgs(
            roles=[azure_native.compute.CloudServiceRoleProfilePropertiesArgs(
                name="ContosoFrontend",
                sku=azure_native.compute.CloudServiceRoleSkuArgs(
                    capacity=1,
                    name="Standard_D1_v2",
                    tier="Standard",
                ),
            )],
        ),
        upgrade_mode="Auto",
    ),
    resource_group_name="ConstosoRG")

```

{{% /example %}}
{{% example %}}
### Create New Cloud Service with Single Role and Certificate from Key Vault
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cloudService = new AzureNative.Compute.CloudService("cloudService", new AzureNative.Compute.CloudServiceArgs
        {
            CloudServiceName = "{cs-name}",
            Location = "westus",
            Properties = new AzureNative.Compute.Inputs.CloudServicePropertiesArgs
            {
                Configuration = "{ServiceConfiguration}",
                NetworkProfile = new AzureNative.Compute.Inputs.CloudServiceNetworkProfileArgs
                {
                    LoadBalancerConfigurations = 
                    {
                        new AzureNative.Compute.Inputs.LoadBalancerConfigurationArgs
                        {
                            Name = "contosolb",
                            Properties = new AzureNative.Compute.Inputs.LoadBalancerConfigurationPropertiesArgs
                            {
                                FrontendIPConfigurations = 
                                {
                                    new AzureNative.Compute.Inputs.LoadBalancerFrontendIPConfigurationArgs
                                    {
                                        Name = "contosofe",
                                        Properties = new AzureNative.Compute.Inputs.LoadBalancerFrontendIPConfigurationPropertiesArgs
                                        {
                                            PublicIPAddress = new AzureNative.Compute.Inputs.SubResourceArgs
                                            {
                                                Id = "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
                OsProfile = new AzureNative.Compute.Inputs.CloudServiceOsProfileArgs
                {
                    Secrets = 
                    {
                        new AzureNative.Compute.Inputs.CloudServiceVaultSecretGroupArgs
                        {
                            SourceVault = new AzureNative.Compute.Inputs.SubResourceArgs
                            {
                                Id = "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}",
                            },
                            VaultCertificates = 
                            {
                                new AzureNative.Compute.Inputs.CloudServiceVaultCertificateArgs
                                {
                                    CertificateUrl = "https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}",
                                },
                            },
                        },
                    },
                },
                PackageUrl = "{PackageUrl}",
                RoleProfile = new AzureNative.Compute.Inputs.CloudServiceRoleProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.Compute.Inputs.CloudServiceRoleProfilePropertiesArgs
                        {
                            Name = "ContosoFrontend",
                            Sku = new AzureNative.Compute.Inputs.CloudServiceRoleSkuArgs
                            {
                                Capacity = 1,
                                Name = "Standard_D1_v2",
                                Tier = "Standard",
                            },
                        },
                    },
                },
                UpgradeMode = "Auto",
            },
            ResourceGroupName = "ConstosoRG",
        });
    }

}

```

```go
package main

import (
	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := compute.NewCloudService(ctx, "cloudService", &compute.CloudServiceArgs{
			CloudServiceName: pulumi.String("{cs-name}"),
			Location:         pulumi.String("westus"),
			Properties: &compute.CloudServicePropertiesArgs{
				Configuration: pulumi.String("{ServiceConfiguration}"),
				NetworkProfile: &compute.CloudServiceNetworkProfileArgs{
					LoadBalancerConfigurations: compute.LoadBalancerConfigurationArray{
						&compute.LoadBalancerConfigurationArgs{
							Name: pulumi.String("contosolb"),
							Properties: &compute.LoadBalancerConfigurationPropertiesArgs{
								FrontendIPConfigurations: compute.LoadBalancerFrontendIPConfigurationArray{
									&compute.LoadBalancerFrontendIPConfigurationArgs{
										Name: pulumi.String("contosofe"),
										Properties: &compute.LoadBalancerFrontendIPConfigurationPropertiesArgs{
											PublicIPAddress: &compute.SubResourceArgs{
												Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									},
								},
							},
						},
					},
				},
				OsProfile: &compute.CloudServiceOsProfileArgs{
					Secrets: compute.CloudServiceVaultSecretGroupArray{
						&compute.CloudServiceVaultSecretGroupArgs{
							SourceVault: &compute.SubResourceArgs{
								Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
							},
							VaultCertificates: compute.CloudServiceVaultCertificateArray{
								&compute.CloudServiceVaultCertificateArgs{
									CertificateUrl: pulumi.String("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
								},
							},
						},
					},
				},
				PackageUrl: pulumi.String("{PackageUrl}"),
				RoleProfile: &compute.CloudServiceRoleProfileArgs{
					Roles: compute.CloudServiceRoleProfilePropertiesArray{
						&compute.CloudServiceRoleProfilePropertiesArgs{
							Name: pulumi.String("ContosoFrontend"),
							Sku: &compute.CloudServiceRoleSkuArgs{
								Capacity: pulumi.Float64(1),
								Name:     pulumi.String("Standard_D1_v2"),
								Tier:     pulumi.String("Standard"),
							},
						},
					},
				},
				UpgradeMode: pulumi.String("Auto"),
			},
			ResourceGroupName: pulumi.String("ConstosoRG"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cloudService = new azure_native.compute.CloudService("cloudService", {
    cloudServiceName: "{cs-name}",
    location: "westus",
    properties: {
        configuration: "{ServiceConfiguration}",
        networkProfile: {
            loadBalancerConfigurations: [{
                name: "contosolb",
                properties: {
                    frontendIPConfigurations: [{
                        name: "contosofe",
                        properties: {
                            publicIPAddress: {
                                id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                            },
                        },
                    }],
                },
            }],
        },
        osProfile: {
            secrets: [{
                sourceVault: {
                    id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}",
                },
                vaultCertificates: [{
                    certificateUrl: "https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}",
                }],
            }],
        },
        packageUrl: "{PackageUrl}",
        roleProfile: {
            roles: [{
                name: "ContosoFrontend",
                sku: {
                    capacity: 1,
                    name: "Standard_D1_v2",
                    tier: "Standard",
                },
            }],
        },
        upgradeMode: "Auto",
    },
    resourceGroupName: "ConstosoRG",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cloud_service = azure_native.compute.CloudService("cloudService",
    cloud_service_name="{cs-name}",
    location="westus",
    properties=azure_native.compute.CloudServicePropertiesArgs(
        configuration="{ServiceConfiguration}",
        network_profile=azure_native.compute.CloudServiceNetworkProfileArgs(
            load_balancer_configurations=[azure_native.compute.LoadBalancerConfigurationArgs(
                name="contosolb",
                properties=azure_native.compute.LoadBalancerConfigurationPropertiesArgs(
                    frontend_ip_configurations=[azure_native.compute.LoadBalancerFrontendIPConfigurationArgs(
                        name="contosofe",
                        properties=azure_native.compute.LoadBalancerFrontendIPConfigurationPropertiesArgs(
                            public_ip_address=azure_native.compute.SubResourceArgs(
                                id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                            ),
                        ),
                    )],
                ),
            )],
        ),
        os_profile=azure_native.compute.CloudServiceOsProfileArgs(
            secrets=[azure_native.compute.CloudServiceVaultSecretGroupArgs(
                source_vault=azure_native.compute.SubResourceArgs(
                    id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}",
                ),
                vault_certificates=[azure_native.compute.CloudServiceVaultCertificateArgs(
                    certificate_url="https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}",
                )],
            )],
        ),
        package_url="{PackageUrl}",
        role_profile=azure_native.compute.CloudServiceRoleProfileArgs(
            roles=[azure_native.compute.CloudServiceRoleProfilePropertiesArgs(
                name="ContosoFrontend",
                sku=azure_native.compute.CloudServiceRoleSkuArgs(
                    capacity=1,
                    name="Standard_D1_v2",
                    tier="Standard",
                ),
            )],
        ),
        upgrade_mode="Auto",
    ),
    resource_group_name="ConstosoRG")

```

{{% /example %}}
{{% example %}}
### Create New Cloud Service with Single Role and RDP Extension
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cloudService = new AzureNative.Compute.CloudService("cloudService", new AzureNative.Compute.CloudServiceArgs
        {
            CloudServiceName = "{cs-name}",
            Location = "westus",
            Properties = new AzureNative.Compute.Inputs.CloudServicePropertiesArgs
            {
                Configuration = "{ServiceConfiguration}",
                ExtensionProfile = new AzureNative.Compute.Inputs.CloudServiceExtensionProfileArgs
                {
                    Extensions = 
                    {
                        new AzureNative.Compute.Inputs.ExtensionArgs
                        {
                            Name = "RDPExtension",
                            Properties = new AzureNative.Compute.Inputs.CloudServiceExtensionPropertiesArgs
                            {
                                AutoUpgradeMinorVersion = false,
                                ProtectedSettings = "<PrivateConfig><Password>{password}</Password></PrivateConfig>",
                                Publisher = "Microsoft.Windows.Azure.Extensions",
                                Settings = "<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>",
                                Type = "RDP",
                                TypeHandlerVersion = "1.2.1",
                            },
                        },
                    },
                },
                NetworkProfile = new AzureNative.Compute.Inputs.CloudServiceNetworkProfileArgs
                {
                    LoadBalancerConfigurations = 
                    {
                        new AzureNative.Compute.Inputs.LoadBalancerConfigurationArgs
                        {
                            Name = "contosolb",
                            Properties = new AzureNative.Compute.Inputs.LoadBalancerConfigurationPropertiesArgs
                            {
                                FrontendIPConfigurations = 
                                {
                                    new AzureNative.Compute.Inputs.LoadBalancerFrontendIPConfigurationArgs
                                    {
                                        Name = "contosofe",
                                        Properties = new AzureNative.Compute.Inputs.LoadBalancerFrontendIPConfigurationPropertiesArgs
                                        {
                                            PublicIPAddress = new AzureNative.Compute.Inputs.SubResourceArgs
                                            {
                                                Id = "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
                PackageUrl = "{PackageUrl}",
                RoleProfile = new AzureNative.Compute.Inputs.CloudServiceRoleProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.Compute.Inputs.CloudServiceRoleProfilePropertiesArgs
                        {
                            Name = "ContosoFrontend",
                            Sku = new AzureNative.Compute.Inputs.CloudServiceRoleSkuArgs
                            {
                                Capacity = 1,
                                Name = "Standard_D1_v2",
                                Tier = "Standard",
                            },
                        },
                    },
                },
                UpgradeMode = "Auto",
            },
            ResourceGroupName = "ConstosoRG",
        });
    }

}

```

```go
package main

import (
	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := compute.NewCloudService(ctx, "cloudService", &compute.CloudServiceArgs{
			CloudServiceName: pulumi.String("{cs-name}"),
			Location:         pulumi.String("westus"),
			Properties: &compute.CloudServicePropertiesArgs{
				Configuration: pulumi.String("{ServiceConfiguration}"),
				ExtensionProfile: &compute.CloudServiceExtensionProfileArgs{
					Extensions: compute.ExtensionArray{
						&compute.ExtensionArgs{
							Name: pulumi.String("RDPExtension"),
							Properties: &compute.CloudServiceExtensionPropertiesArgs{
								AutoUpgradeMinorVersion: pulumi.Bool(false),
								ProtectedSettings:       pulumi.String("<PrivateConfig><Password>{password}</Password></PrivateConfig>"),
								Publisher:               pulumi.String("Microsoft.Windows.Azure.Extensions"),
								Settings:                pulumi.String("<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>"),
								Type:                    pulumi.String("RDP"),
								TypeHandlerVersion:      pulumi.String("1.2.1"),
							},
						},
					},
				},
				NetworkProfile: &compute.CloudServiceNetworkProfileArgs{
					LoadBalancerConfigurations: compute.LoadBalancerConfigurationArray{
						&compute.LoadBalancerConfigurationArgs{
							Name: pulumi.String("contosolb"),
							Properties: &compute.LoadBalancerConfigurationPropertiesArgs{
								FrontendIPConfigurations: compute.LoadBalancerFrontendIPConfigurationArray{
									&compute.LoadBalancerFrontendIPConfigurationArgs{
										Name: pulumi.String("contosofe"),
										Properties: &compute.LoadBalancerFrontendIPConfigurationPropertiesArgs{
											PublicIPAddress: &compute.SubResourceArgs{
												Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									},
								},
							},
						},
					},
				},
				PackageUrl: pulumi.String("{PackageUrl}"),
				RoleProfile: &compute.CloudServiceRoleProfileArgs{
					Roles: compute.CloudServiceRoleProfilePropertiesArray{
						&compute.CloudServiceRoleProfilePropertiesArgs{
							Name: pulumi.String("ContosoFrontend"),
							Sku: &compute.CloudServiceRoleSkuArgs{
								Capacity: pulumi.Float64(1),
								Name:     pulumi.String("Standard_D1_v2"),
								Tier:     pulumi.String("Standard"),
							},
						},
					},
				},
				UpgradeMode: pulumi.String("Auto"),
			},
			ResourceGroupName: pulumi.String("ConstosoRG"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cloudService = new azure_native.compute.CloudService("cloudService", {
    cloudServiceName: "{cs-name}",
    location: "westus",
    properties: {
        configuration: "{ServiceConfiguration}",
        extensionProfile: {
            extensions: [{
                name: "RDPExtension",
                properties: {
                    autoUpgradeMinorVersion: false,
                    protectedSettings: "<PrivateConfig><Password>{password}</Password></PrivateConfig>",
                    publisher: "Microsoft.Windows.Azure.Extensions",
                    settings: "<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>",
                    type: "RDP",
                    typeHandlerVersion: "1.2.1",
                },
            }],
        },
        networkProfile: {
            loadBalancerConfigurations: [{
                name: "contosolb",
                properties: {
                    frontendIPConfigurations: [{
                        name: "contosofe",
                        properties: {
                            publicIPAddress: {
                                id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                            },
                        },
                    }],
                },
            }],
        },
        packageUrl: "{PackageUrl}",
        roleProfile: {
            roles: [{
                name: "ContosoFrontend",
                sku: {
                    capacity: 1,
                    name: "Standard_D1_v2",
                    tier: "Standard",
                },
            }],
        },
        upgradeMode: "Auto",
    },
    resourceGroupName: "ConstosoRG",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cloud_service = azure_native.compute.CloudService("cloudService",
    cloud_service_name="{cs-name}",
    location="westus",
    properties=azure_native.compute.CloudServicePropertiesArgs(
        configuration="{ServiceConfiguration}",
        extension_profile=azure_native.compute.CloudServiceExtensionProfileArgs(
            extensions=[azure_native.compute.ExtensionArgs(
                name="RDPExtension",
                properties=azure_native.compute.CloudServiceExtensionPropertiesArgs(
                    auto_upgrade_minor_version=False,
                    protected_settings="<PrivateConfig><Password>{password}</Password></PrivateConfig>",
                    publisher="Microsoft.Windows.Azure.Extensions",
                    settings="<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>",
                    type="RDP",
                    type_handler_version="1.2.1",
                ),
            )],
        ),
        network_profile=azure_native.compute.CloudServiceNetworkProfileArgs(
            load_balancer_configurations=[azure_native.compute.LoadBalancerConfigurationArgs(
                name="contosolb",
                properties=azure_native.compute.LoadBalancerConfigurationPropertiesArgs(
                    frontend_ip_configurations=[azure_native.compute.LoadBalancerFrontendIPConfigurationArgs(
                        name="contosofe",
                        properties=azure_native.compute.LoadBalancerFrontendIPConfigurationPropertiesArgs(
                            public_ip_address=azure_native.compute.SubResourceArgs(
                                id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                            ),
                        ),
                    )],
                ),
            )],
        ),
        package_url="{PackageUrl}",
        role_profile=azure_native.compute.CloudServiceRoleProfileArgs(
            roles=[azure_native.compute.CloudServiceRoleProfilePropertiesArgs(
                name="ContosoFrontend",
                sku=azure_native.compute.CloudServiceRoleSkuArgs(
                    capacity=1,
                    name="Standard_D1_v2",
                    tier="Standard",
                ),
            )],
        ),
        upgrade_mode="Auto",
    ),
    resource_group_name="ConstosoRG")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:compute:CloudService {cs-name} /subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name} 
```

 */
@ResourceType(type="azure-native:compute:CloudService")
public class CloudService extends io.pulumi.resources.CustomResource {
    /**
     * Resource location.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource location.
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Resource name.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Cloud service properties
     */
    @OutputExport(name="properties", type=CloudServicePropertiesResponse.class, parameters={})
    private Output<CloudServicePropertiesResponse> properties;

    /**
     * @return Cloud service properties
     */
    public Output<CloudServicePropertiesResponse> getProperties() {
        return this.properties;
    }
    /**
     * Resource tags.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Resource type.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CloudService(String name, CloudServiceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:compute:CloudService", name, args == null ? CloudServiceArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private CloudService(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:compute:CloudService", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:compute/v20201001preview:CloudService").build()),
                Input.of(Alias.builder().setType("azure-native:compute/v20210301:CloudService").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CloudService get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new CloudService(name, id, options);
    }
}
