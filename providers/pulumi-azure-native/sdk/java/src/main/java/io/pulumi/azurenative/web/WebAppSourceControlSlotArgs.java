// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web;

import io.pulumi.azurenative.web.inputs.GitHubActionConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WebAppSourceControlSlotArgs extends io.pulumi.resources.ResourceArgs {

    public static final WebAppSourceControlSlotArgs Empty = new WebAppSourceControlSlotArgs();

    /**
     * Name of branch to use for deployment.
     * 
     */
    @Import(name="branch")
      private final @Nullable Output<String> branch;

    public Output<String> getBranch() {
        return this.branch == null ? Output.empty() : this.branch;
    }

    /**
     * <code>true</code> to enable deployment rollback; otherwise, <code>false</code>.
     * 
     */
    @Import(name="deploymentRollbackEnabled")
      private final @Nullable Output<Boolean> deploymentRollbackEnabled;

    public Output<Boolean> getDeploymentRollbackEnabled() {
        return this.deploymentRollbackEnabled == null ? Output.empty() : this.deploymentRollbackEnabled;
    }

    /**
     * If GitHub Action is selected, than the associated configuration.
     * 
     */
    @Import(name="gitHubActionConfiguration")
      private final @Nullable Output<GitHubActionConfigurationArgs> gitHubActionConfiguration;

    public Output<GitHubActionConfigurationArgs> getGitHubActionConfiguration() {
        return this.gitHubActionConfiguration == null ? Output.empty() : this.gitHubActionConfiguration;
    }

    /**
     * <code>true</code> if this is deployed via GitHub action.
     * 
     */
    @Import(name="isGitHubAction")
      private final @Nullable Output<Boolean> isGitHubAction;

    public Output<Boolean> getIsGitHubAction() {
        return this.isGitHubAction == null ? Output.empty() : this.isGitHubAction;
    }

    /**
     * <code>true</code> to limit to manual integration; <code>false</code> to enable continuous integration (which configures webhooks into online repos like GitHub).
     * 
     */
    @Import(name="isManualIntegration")
      private final @Nullable Output<Boolean> isManualIntegration;

    public Output<Boolean> getIsManualIntegration() {
        return this.isManualIntegration == null ? Output.empty() : this.isManualIntegration;
    }

    /**
     * <code>true</code> for a Mercurial repository; <code>false</code> for a Git repository.
     * 
     */
    @Import(name="isMercurial")
      private final @Nullable Output<Boolean> isMercurial;

    public Output<Boolean> getIsMercurial() {
        return this.isMercurial == null ? Output.empty() : this.isMercurial;
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * Name of the app.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * Repository or source control URL.
     * 
     */
    @Import(name="repoUrl")
      private final @Nullable Output<String> repoUrl;

    public Output<String> getRepoUrl() {
        return this.repoUrl == null ? Output.empty() : this.repoUrl;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
     * 
     */
    @Import(name="slot", required=true)
      private final Output<String> slot;

    public Output<String> getSlot() {
        return this.slot;
    }

    public WebAppSourceControlSlotArgs(
        @Nullable Output<String> branch,
        @Nullable Output<Boolean> deploymentRollbackEnabled,
        @Nullable Output<GitHubActionConfigurationArgs> gitHubActionConfiguration,
        @Nullable Output<Boolean> isGitHubAction,
        @Nullable Output<Boolean> isManualIntegration,
        @Nullable Output<Boolean> isMercurial,
        @Nullable Output<String> kind,
        Output<String> name,
        @Nullable Output<String> repoUrl,
        Output<String> resourceGroupName,
        Output<String> slot) {
        this.branch = branch;
        this.deploymentRollbackEnabled = deploymentRollbackEnabled;
        this.gitHubActionConfiguration = gitHubActionConfiguration;
        this.isGitHubAction = isGitHubAction;
        this.isManualIntegration = isManualIntegration;
        this.isMercurial = isMercurial;
        this.kind = kind;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.repoUrl = repoUrl;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.slot = Objects.requireNonNull(slot, "expected parameter 'slot' to be non-null");
    }

    private WebAppSourceControlSlotArgs() {
        this.branch = Output.empty();
        this.deploymentRollbackEnabled = Output.empty();
        this.gitHubActionConfiguration = Output.empty();
        this.isGitHubAction = Output.empty();
        this.isManualIntegration = Output.empty();
        this.isMercurial = Output.empty();
        this.kind = Output.empty();
        this.name = Output.empty();
        this.repoUrl = Output.empty();
        this.resourceGroupName = Output.empty();
        this.slot = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAppSourceControlSlotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> branch;
        private @Nullable Output<Boolean> deploymentRollbackEnabled;
        private @Nullable Output<GitHubActionConfigurationArgs> gitHubActionConfiguration;
        private @Nullable Output<Boolean> isGitHubAction;
        private @Nullable Output<Boolean> isManualIntegration;
        private @Nullable Output<Boolean> isMercurial;
        private @Nullable Output<String> kind;
        private Output<String> name;
        private @Nullable Output<String> repoUrl;
        private Output<String> resourceGroupName;
        private Output<String> slot;

        public Builder() {
    	      // Empty
        }

        public Builder(WebAppSourceControlSlotArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.deploymentRollbackEnabled = defaults.deploymentRollbackEnabled;
    	      this.gitHubActionConfiguration = defaults.gitHubActionConfiguration;
    	      this.isGitHubAction = defaults.isGitHubAction;
    	      this.isManualIntegration = defaults.isManualIntegration;
    	      this.isMercurial = defaults.isMercurial;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.repoUrl = defaults.repoUrl;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.slot = defaults.slot;
        }

        public Builder branch(@Nullable Output<String> branch) {
            this.branch = branch;
            return this;
        }

        public Builder branch(@Nullable String branch) {
            this.branch = Output.ofNullable(branch);
            return this;
        }

        public Builder deploymentRollbackEnabled(@Nullable Output<Boolean> deploymentRollbackEnabled) {
            this.deploymentRollbackEnabled = deploymentRollbackEnabled;
            return this;
        }

        public Builder deploymentRollbackEnabled(@Nullable Boolean deploymentRollbackEnabled) {
            this.deploymentRollbackEnabled = Output.ofNullable(deploymentRollbackEnabled);
            return this;
        }

        public Builder gitHubActionConfiguration(@Nullable Output<GitHubActionConfigurationArgs> gitHubActionConfiguration) {
            this.gitHubActionConfiguration = gitHubActionConfiguration;
            return this;
        }

        public Builder gitHubActionConfiguration(@Nullable GitHubActionConfigurationArgs gitHubActionConfiguration) {
            this.gitHubActionConfiguration = Output.ofNullable(gitHubActionConfiguration);
            return this;
        }

        public Builder isGitHubAction(@Nullable Output<Boolean> isGitHubAction) {
            this.isGitHubAction = isGitHubAction;
            return this;
        }

        public Builder isGitHubAction(@Nullable Boolean isGitHubAction) {
            this.isGitHubAction = Output.ofNullable(isGitHubAction);
            return this;
        }

        public Builder isManualIntegration(@Nullable Output<Boolean> isManualIntegration) {
            this.isManualIntegration = isManualIntegration;
            return this;
        }

        public Builder isManualIntegration(@Nullable Boolean isManualIntegration) {
            this.isManualIntegration = Output.ofNullable(isManualIntegration);
            return this;
        }

        public Builder isMercurial(@Nullable Output<Boolean> isMercurial) {
            this.isMercurial = isMercurial;
            return this;
        }

        public Builder isMercurial(@Nullable Boolean isMercurial) {
            this.isMercurial = Output.ofNullable(isMercurial);
            return this;
        }

        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder repoUrl(@Nullable Output<String> repoUrl) {
            this.repoUrl = repoUrl;
            return this;
        }

        public Builder repoUrl(@Nullable String repoUrl) {
            this.repoUrl = Output.ofNullable(repoUrl);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder slot(Output<String> slot) {
            this.slot = Objects.requireNonNull(slot);
            return this;
        }

        public Builder slot(String slot) {
            this.slot = Output.of(Objects.requireNonNull(slot));
            return this;
        }
        public WebAppSourceControlSlotArgs build() {
            return new WebAppSourceControlSlotArgs(branch, deploymentRollbackEnabled, gitHubActionConfiguration, isGitHubAction, isManualIntegration, isMercurial, kind, name, repoUrl, resourceGroupName, slot);
        }
    }
}
