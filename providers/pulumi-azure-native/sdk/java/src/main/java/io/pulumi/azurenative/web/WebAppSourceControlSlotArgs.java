// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web;

import io.pulumi.azurenative.web.inputs.GitHubActionConfigurationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WebAppSourceControlSlotArgs extends io.pulumi.resources.ResourceArgs {

    public static final WebAppSourceControlSlotArgs Empty = new WebAppSourceControlSlotArgs();

    @InputImport(name="branch")
    private final @Nullable Input<String> branch;

    public Input<String> getBranch() {
        return this.branch == null ? Input.empty() : this.branch;
    }

    @InputImport(name="deploymentRollbackEnabled")
    private final @Nullable Input<Boolean> deploymentRollbackEnabled;

    public Input<Boolean> getDeploymentRollbackEnabled() {
        return this.deploymentRollbackEnabled == null ? Input.empty() : this.deploymentRollbackEnabled;
    }

    @InputImport(name="gitHubActionConfiguration")
    private final @Nullable Input<GitHubActionConfigurationArgs> gitHubActionConfiguration;

    public Input<GitHubActionConfigurationArgs> getGitHubActionConfiguration() {
        return this.gitHubActionConfiguration == null ? Input.empty() : this.gitHubActionConfiguration;
    }

    @InputImport(name="isGitHubAction")
    private final @Nullable Input<Boolean> isGitHubAction;

    public Input<Boolean> getIsGitHubAction() {
        return this.isGitHubAction == null ? Input.empty() : this.isGitHubAction;
    }

    @InputImport(name="isManualIntegration")
    private final @Nullable Input<Boolean> isManualIntegration;

    public Input<Boolean> getIsManualIntegration() {
        return this.isManualIntegration == null ? Input.empty() : this.isManualIntegration;
    }

    @InputImport(name="isMercurial")
    private final @Nullable Input<Boolean> isMercurial;

    public Input<Boolean> getIsMercurial() {
        return this.isMercurial == null ? Input.empty() : this.isMercurial;
    }

    @InputImport(name="kind")
    private final @Nullable Input<String> kind;

    public Input<String> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    @InputImport(name="repoUrl")
    private final @Nullable Input<String> repoUrl;

    public Input<String> getRepoUrl() {
        return this.repoUrl == null ? Input.empty() : this.repoUrl;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="slot", required=true)
    private final Input<String> slot;

    public Input<String> getSlot() {
        return this.slot;
    }

    public WebAppSourceControlSlotArgs(
        @Nullable Input<String> branch,
        @Nullable Input<Boolean> deploymentRollbackEnabled,
        @Nullable Input<GitHubActionConfigurationArgs> gitHubActionConfiguration,
        @Nullable Input<Boolean> isGitHubAction,
        @Nullable Input<Boolean> isManualIntegration,
        @Nullable Input<Boolean> isMercurial,
        @Nullable Input<String> kind,
        Input<String> name,
        @Nullable Input<String> repoUrl,
        Input<String> resourceGroupName,
        Input<String> slot) {
        this.branch = branch;
        this.deploymentRollbackEnabled = deploymentRollbackEnabled;
        this.gitHubActionConfiguration = gitHubActionConfiguration;
        this.isGitHubAction = isGitHubAction;
        this.isManualIntegration = isManualIntegration;
        this.isMercurial = isMercurial;
        this.kind = kind;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.repoUrl = repoUrl;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.slot = Objects.requireNonNull(slot, "expected parameter 'slot' to be non-null");
    }

    private WebAppSourceControlSlotArgs() {
        this.branch = Input.empty();
        this.deploymentRollbackEnabled = Input.empty();
        this.gitHubActionConfiguration = Input.empty();
        this.isGitHubAction = Input.empty();
        this.isManualIntegration = Input.empty();
        this.isMercurial = Input.empty();
        this.kind = Input.empty();
        this.name = Input.empty();
        this.repoUrl = Input.empty();
        this.resourceGroupName = Input.empty();
        this.slot = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAppSourceControlSlotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> branch;
        private @Nullable Input<Boolean> deploymentRollbackEnabled;
        private @Nullable Input<GitHubActionConfigurationArgs> gitHubActionConfiguration;
        private @Nullable Input<Boolean> isGitHubAction;
        private @Nullable Input<Boolean> isManualIntegration;
        private @Nullable Input<Boolean> isMercurial;
        private @Nullable Input<String> kind;
        private Input<String> name;
        private @Nullable Input<String> repoUrl;
        private Input<String> resourceGroupName;
        private Input<String> slot;

        public Builder() {
    	      // Empty
        }

        public Builder(WebAppSourceControlSlotArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.deploymentRollbackEnabled = defaults.deploymentRollbackEnabled;
    	      this.gitHubActionConfiguration = defaults.gitHubActionConfiguration;
    	      this.isGitHubAction = defaults.isGitHubAction;
    	      this.isManualIntegration = defaults.isManualIntegration;
    	      this.isMercurial = defaults.isMercurial;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.repoUrl = defaults.repoUrl;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.slot = defaults.slot;
        }

        public Builder setBranch(@Nullable Input<String> branch) {
            this.branch = branch;
            return this;
        }

        public Builder setBranch(@Nullable String branch) {
            this.branch = Input.ofNullable(branch);
            return this;
        }

        public Builder setDeploymentRollbackEnabled(@Nullable Input<Boolean> deploymentRollbackEnabled) {
            this.deploymentRollbackEnabled = deploymentRollbackEnabled;
            return this;
        }

        public Builder setDeploymentRollbackEnabled(@Nullable Boolean deploymentRollbackEnabled) {
            this.deploymentRollbackEnabled = Input.ofNullable(deploymentRollbackEnabled);
            return this;
        }

        public Builder setGitHubActionConfiguration(@Nullable Input<GitHubActionConfigurationArgs> gitHubActionConfiguration) {
            this.gitHubActionConfiguration = gitHubActionConfiguration;
            return this;
        }

        public Builder setGitHubActionConfiguration(@Nullable GitHubActionConfigurationArgs gitHubActionConfiguration) {
            this.gitHubActionConfiguration = Input.ofNullable(gitHubActionConfiguration);
            return this;
        }

        public Builder setIsGitHubAction(@Nullable Input<Boolean> isGitHubAction) {
            this.isGitHubAction = isGitHubAction;
            return this;
        }

        public Builder setIsGitHubAction(@Nullable Boolean isGitHubAction) {
            this.isGitHubAction = Input.ofNullable(isGitHubAction);
            return this;
        }

        public Builder setIsManualIntegration(@Nullable Input<Boolean> isManualIntegration) {
            this.isManualIntegration = isManualIntegration;
            return this;
        }

        public Builder setIsManualIntegration(@Nullable Boolean isManualIntegration) {
            this.isManualIntegration = Input.ofNullable(isManualIntegration);
            return this;
        }

        public Builder setIsMercurial(@Nullable Input<Boolean> isMercurial) {
            this.isMercurial = isMercurial;
            return this;
        }

        public Builder setIsMercurial(@Nullable Boolean isMercurial) {
            this.isMercurial = Input.ofNullable(isMercurial);
            return this;
        }

        public Builder setKind(@Nullable Input<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder setKind(@Nullable String kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setRepoUrl(@Nullable Input<String> repoUrl) {
            this.repoUrl = repoUrl;
            return this;
        }

        public Builder setRepoUrl(@Nullable String repoUrl) {
            this.repoUrl = Input.ofNullable(repoUrl);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSlot(Input<String> slot) {
            this.slot = Objects.requireNonNull(slot);
            return this;
        }

        public Builder setSlot(String slot) {
            this.slot = Input.of(Objects.requireNonNull(slot));
            return this;
        }

        public WebAppSourceControlSlotArgs build() {
            return new WebAppSourceControlSlotArgs(branch, deploymentRollbackEnabled, gitHubActionConfiguration, isGitHubAction, isManualIntegration, isMercurial, kind, name, repoUrl, resourceGroupName, slot);
        }
    }
}
