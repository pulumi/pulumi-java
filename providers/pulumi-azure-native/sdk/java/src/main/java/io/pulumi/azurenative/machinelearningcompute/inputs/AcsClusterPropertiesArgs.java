// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningcompute.inputs;

import io.pulumi.azurenative.machinelearningcompute.enums.AgentVMSizeTypes;
import io.pulumi.azurenative.machinelearningcompute.enums.OrchestratorType;
import io.pulumi.azurenative.machinelearningcompute.inputs.KubernetesClusterPropertiesArgs;
import io.pulumi.azurenative.machinelearningcompute.inputs.SystemServiceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Information about the container service backing the cluster
 * 
 */
public final class AcsClusterPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final AcsClusterPropertiesArgs Empty = new AcsClusterPropertiesArgs();

    /**
     * The number of agent nodes in the Container Service. This can be changed to scale the cluster.
     * 
     */
    @InputImport(name="agentCount")
        private final @Nullable Input<Integer> agentCount;

    public Input<Integer> getAgentCount() {
        return this.agentCount == null ? Input.empty() : this.agentCount;
    }

    /**
     * The Azure VM size of the agent VM nodes. This cannot be changed once the cluster is created. This list is non exhaustive; refer to https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes for the possible VM sizes.
     * 
     */
    @InputImport(name="agentVmSize")
        private final @Nullable Input<Either<String,AgentVMSizeTypes>> agentVmSize;

    public Input<Either<String,AgentVMSizeTypes>> getAgentVmSize() {
        return this.agentVmSize == null ? Input.empty() : this.agentVmSize;
    }

    /**
     * The number of master nodes in the container service.
     * 
     */
    @InputImport(name="masterCount")
        private final @Nullable Input<Integer> masterCount;

    public Input<Integer> getMasterCount() {
        return this.masterCount == null ? Input.empty() : this.masterCount;
    }

    /**
     * Orchestrator specific properties
     * 
     */
    @InputImport(name="orchestratorProperties")
        private final @Nullable Input<KubernetesClusterPropertiesArgs> orchestratorProperties;

    public Input<KubernetesClusterPropertiesArgs> getOrchestratorProperties() {
        return this.orchestratorProperties == null ? Input.empty() : this.orchestratorProperties;
    }

    /**
     * Type of orchestrator. It cannot be changed once the cluster is created.
     * 
     */
    @InputImport(name="orchestratorType", required=true)
        private final Input<Either<String,OrchestratorType>> orchestratorType;

    public Input<Either<String,OrchestratorType>> getOrchestratorType() {
        return this.orchestratorType;
    }

    /**
     * The system services deployed to the cluster
     * 
     */
    @InputImport(name="systemServices")
        private final @Nullable Input<List<SystemServiceArgs>> systemServices;

    public Input<List<SystemServiceArgs>> getSystemServices() {
        return this.systemServices == null ? Input.empty() : this.systemServices;
    }

    public AcsClusterPropertiesArgs(
        @Nullable Input<Integer> agentCount,
        @Nullable Input<Either<String,AgentVMSizeTypes>> agentVmSize,
        @Nullable Input<Integer> masterCount,
        @Nullable Input<KubernetesClusterPropertiesArgs> orchestratorProperties,
        Input<Either<String,OrchestratorType>> orchestratorType,
        @Nullable Input<List<SystemServiceArgs>> systemServices) {
        this.agentCount = agentCount == null ? Input.ofNullable(2) : agentCount;
        this.agentVmSize = agentVmSize == null ? Input.ofLeft("Standard_D3_v2") : agentVmSize;
        this.masterCount = masterCount == null ? Input.ofNullable(1) : masterCount;
        this.orchestratorProperties = orchestratorProperties;
        this.orchestratorType = Objects.requireNonNull(orchestratorType, "expected parameter 'orchestratorType' to be non-null");
        this.systemServices = systemServices;
    }

    private AcsClusterPropertiesArgs() {
        this.agentCount = Input.empty();
        this.agentVmSize = Input.empty();
        this.masterCount = Input.empty();
        this.orchestratorProperties = Input.empty();
        this.orchestratorType = Input.empty();
        this.systemServices = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AcsClusterPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> agentCount;
        private @Nullable Input<Either<String,AgentVMSizeTypes>> agentVmSize;
        private @Nullable Input<Integer> masterCount;
        private @Nullable Input<KubernetesClusterPropertiesArgs> orchestratorProperties;
        private Input<Either<String,OrchestratorType>> orchestratorType;
        private @Nullable Input<List<SystemServiceArgs>> systemServices;

        public Builder() {
    	      // Empty
        }

        public Builder(AcsClusterPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentCount = defaults.agentCount;
    	      this.agentVmSize = defaults.agentVmSize;
    	      this.masterCount = defaults.masterCount;
    	      this.orchestratorProperties = defaults.orchestratorProperties;
    	      this.orchestratorType = defaults.orchestratorType;
    	      this.systemServices = defaults.systemServices;
        }

        public Builder setAgentCount(@Nullable Input<Integer> agentCount) {
            this.agentCount = agentCount;
            return this;
        }

        public Builder setAgentCount(@Nullable Integer agentCount) {
            this.agentCount = Input.ofNullable(agentCount);
            return this;
        }

        public Builder setAgentVmSize(@Nullable Input<Either<String,AgentVMSizeTypes>> agentVmSize) {
            this.agentVmSize = agentVmSize;
            return this;
        }

        public Builder setAgentVmSize(@Nullable Either<String,AgentVMSizeTypes> agentVmSize) {
            this.agentVmSize = Input.ofNullable(agentVmSize);
            return this;
        }

        public Builder setMasterCount(@Nullable Input<Integer> masterCount) {
            this.masterCount = masterCount;
            return this;
        }

        public Builder setMasterCount(@Nullable Integer masterCount) {
            this.masterCount = Input.ofNullable(masterCount);
            return this;
        }

        public Builder setOrchestratorProperties(@Nullable Input<KubernetesClusterPropertiesArgs> orchestratorProperties) {
            this.orchestratorProperties = orchestratorProperties;
            return this;
        }

        public Builder setOrchestratorProperties(@Nullable KubernetesClusterPropertiesArgs orchestratorProperties) {
            this.orchestratorProperties = Input.ofNullable(orchestratorProperties);
            return this;
        }

        public Builder setOrchestratorType(Input<Either<String,OrchestratorType>> orchestratorType) {
            this.orchestratorType = Objects.requireNonNull(orchestratorType);
            return this;
        }

        public Builder setOrchestratorType(Either<String,OrchestratorType> orchestratorType) {
            this.orchestratorType = Input.of(Objects.requireNonNull(orchestratorType));
            return this;
        }

        public Builder setSystemServices(@Nullable Input<List<SystemServiceArgs>> systemServices) {
            this.systemServices = systemServices;
            return this;
        }

        public Builder setSystemServices(@Nullable List<SystemServiceArgs> systemServices) {
            this.systemServices = Input.ofNullable(systemServices);
            return this;
        }
        public AcsClusterPropertiesArgs build() {
            return new AcsClusterPropertiesArgs(agentCount, agentVmSize, masterCount, orchestratorProperties, orchestratorType, systemServices);
        }
    }
}
