// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.dataprotection.inputs;

import io.pulumi.azurenative.dataprotection.inputs.InnerErrorResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Error object used by layers that have access to localized content, and propagate that to user
 * 
 */
public final class UserFacingErrorResponse extends io.pulumi.resources.InvokeArgs {

    public static final UserFacingErrorResponse Empty = new UserFacingErrorResponse();

    /**
     * Unique code for this error
     * 
     */
    @InputImport(name="code")
    private final @Nullable String code;

    public Optional<String> getCode() {
        return this.code == null ? Optional.empty() : Optional.ofNullable(this.code);
    }

    /**
     * Additional related Errors
     * 
     */
    @InputImport(name="details")
    private final @Nullable List<UserFacingErrorResponse> details;

    public List<UserFacingErrorResponse> getDetails() {
        return this.details == null ? List.of() : this.details;
    }

    /**
     * Inner Error
     * 
     */
    @InputImport(name="innerError")
    private final @Nullable InnerErrorResponse innerError;

    public Optional<InnerErrorResponse> getInnerError() {
        return this.innerError == null ? Optional.empty() : Optional.ofNullable(this.innerError);
    }

    /**
     * Whether the operation will be retryable or not
     * 
     */
    @InputImport(name="isRetryable")
    private final @Nullable Boolean isRetryable;

    public Optional<Boolean> getIsRetryable() {
        return this.isRetryable == null ? Optional.empty() : Optional.ofNullable(this.isRetryable);
    }

    /**
     * Whether the operation is due to a user error or service error
     * 
     */
    @InputImport(name="isUserError")
    private final @Nullable Boolean isUserError;

    public Optional<Boolean> getIsUserError() {
        return this.isUserError == null ? Optional.empty() : Optional.ofNullable(this.isUserError);
    }

    @InputImport(name="message")
    private final @Nullable String message;

    public Optional<String> getMessage() {
        return this.message == null ? Optional.empty() : Optional.ofNullable(this.message);
    }

    /**
     * Any key value pairs that can be injected inside error object
     * 
     */
    @InputImport(name="properties")
    private final @Nullable Map<String,String> properties;

    public Map<String,String> getProperties() {
        return this.properties == null ? Map.of() : this.properties;
    }

    /**
     * RecommendedAction ï¿½ localized.
     * 
     */
    @InputImport(name="recommendedAction")
    private final @Nullable List<String> recommendedAction;

    public List<String> getRecommendedAction() {
        return this.recommendedAction == null ? List.of() : this.recommendedAction;
    }

    /**
     * Target of the error.
     * 
     */
    @InputImport(name="target")
    private final @Nullable String target;

    public Optional<String> getTarget() {
        return this.target == null ? Optional.empty() : Optional.ofNullable(this.target);
    }

    public UserFacingErrorResponse(
        @Nullable String code,
        @Nullable List<UserFacingErrorResponse> details,
        @Nullable InnerErrorResponse innerError,
        @Nullable Boolean isRetryable,
        @Nullable Boolean isUserError,
        @Nullable String message,
        @Nullable Map<String,String> properties,
        @Nullable List<String> recommendedAction,
        @Nullable String target) {
        this.code = code;
        this.details = details;
        this.innerError = innerError;
        this.isRetryable = isRetryable;
        this.isUserError = isUserError;
        this.message = message;
        this.properties = properties;
        this.recommendedAction = recommendedAction;
        this.target = target;
    }

    private UserFacingErrorResponse() {
        this.code = null;
        this.details = List.of();
        this.innerError = null;
        this.isRetryable = null;
        this.isUserError = null;
        this.message = null;
        this.properties = Map.of();
        this.recommendedAction = List.of();
        this.target = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserFacingErrorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String code;
        private @Nullable List<UserFacingErrorResponse> details;
        private @Nullable InnerErrorResponse innerError;
        private @Nullable Boolean isRetryable;
        private @Nullable Boolean isUserError;
        private @Nullable String message;
        private @Nullable Map<String,String> properties;
        private @Nullable List<String> recommendedAction;
        private @Nullable String target;

        public Builder() {
    	      // Empty
        }

        public Builder(UserFacingErrorResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.code = defaults.code;
    	      this.details = defaults.details;
    	      this.innerError = defaults.innerError;
    	      this.isRetryable = defaults.isRetryable;
    	      this.isUserError = defaults.isUserError;
    	      this.message = defaults.message;
    	      this.properties = defaults.properties;
    	      this.recommendedAction = defaults.recommendedAction;
    	      this.target = defaults.target;
        }

        public Builder setCode(@Nullable String code) {
            this.code = code;
            return this;
        }

        public Builder setDetails(@Nullable List<UserFacingErrorResponse> details) {
            this.details = details;
            return this;
        }

        public Builder setInnerError(@Nullable InnerErrorResponse innerError) {
            this.innerError = innerError;
            return this;
        }

        public Builder setIsRetryable(@Nullable Boolean isRetryable) {
            this.isRetryable = isRetryable;
            return this;
        }

        public Builder setIsUserError(@Nullable Boolean isUserError) {
            this.isUserError = isUserError;
            return this;
        }

        public Builder setMessage(@Nullable String message) {
            this.message = message;
            return this;
        }

        public Builder setProperties(@Nullable Map<String,String> properties) {
            this.properties = properties;
            return this;
        }

        public Builder setRecommendedAction(@Nullable List<String> recommendedAction) {
            this.recommendedAction = recommendedAction;
            return this;
        }

        public Builder setTarget(@Nullable String target) {
            this.target = target;
            return this;
        }

        public UserFacingErrorResponse build() {
            return new UserFacingErrorResponse(code, details, innerError, isRetryable, isUserError, message, properties, recommendedAction, target);
        }
    }
}
