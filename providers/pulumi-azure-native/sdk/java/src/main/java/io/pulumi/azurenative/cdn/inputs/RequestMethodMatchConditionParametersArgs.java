// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.inputs;

import io.pulumi.azurenative.cdn.enums.RequestMethodOperator;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Defines the parameters for RequestMethod match conditions
 * 
 */
public final class RequestMethodMatchConditionParametersArgs extends io.pulumi.resources.ResourceArgs {

    public static final RequestMethodMatchConditionParametersArgs Empty = new RequestMethodMatchConditionParametersArgs();

    /**
     * The match value for the condition of the delivery rule
     * 
     */
    @InputImport(name="matchValues")
      private final @Nullable Output<List<String>> matchValues;

    public Output<List<String>> getMatchValues() {
        return this.matchValues == null ? Output.empty() : this.matchValues;
    }

    /**
     * Describes if this is negate condition or not
     * 
     */
    @InputImport(name="negateCondition")
      private final @Nullable Output<Boolean> negateCondition;

    public Output<Boolean> getNegateCondition() {
        return this.negateCondition == null ? Output.empty() : this.negateCondition;
    }

    @InputImport(name="odataType", required=true)
      private final Output<String> odataType;

    public Output<String> getOdataType() {
        return this.odataType;
    }

    /**
     * Describes operator to be matched
     * 
     */
    @InputImport(name="operator", required=true)
      private final Output<Either<String,RequestMethodOperator>> operator;

    public Output<Either<String,RequestMethodOperator>> getOperator() {
        return this.operator;
    }

    public RequestMethodMatchConditionParametersArgs(
        @Nullable Output<List<String>> matchValues,
        @Nullable Output<Boolean> negateCondition,
        Output<String> odataType,
        Output<Either<String,RequestMethodOperator>> operator) {
        this.matchValues = matchValues;
        this.negateCondition = negateCondition;
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.operator = Objects.requireNonNull(operator, "expected parameter 'operator' to be non-null");
    }

    private RequestMethodMatchConditionParametersArgs() {
        this.matchValues = Output.empty();
        this.negateCondition = Output.empty();
        this.odataType = Output.empty();
        this.operator = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RequestMethodMatchConditionParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> matchValues;
        private @Nullable Output<Boolean> negateCondition;
        private Output<String> odataType;
        private Output<Either<String,RequestMethodOperator>> operator;

        public Builder() {
    	      // Empty
        }

        public Builder(RequestMethodMatchConditionParametersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchValues = defaults.matchValues;
    	      this.negateCondition = defaults.negateCondition;
    	      this.odataType = defaults.odataType;
    	      this.operator = defaults.operator;
        }

        public Builder matchValues(@Nullable Output<List<String>> matchValues) {
            this.matchValues = matchValues;
            return this;
        }

        public Builder matchValues(@Nullable List<String> matchValues) {
            this.matchValues = Output.ofNullable(matchValues);
            return this;
        }

        public Builder negateCondition(@Nullable Output<Boolean> negateCondition) {
            this.negateCondition = negateCondition;
            return this;
        }

        public Builder negateCondition(@Nullable Boolean negateCondition) {
            this.negateCondition = Output.ofNullable(negateCondition);
            return this;
        }

        public Builder odataType(Output<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }

        public Builder odataType(String odataType) {
            this.odataType = Output.of(Objects.requireNonNull(odataType));
            return this;
        }

        public Builder operator(Output<Either<String,RequestMethodOperator>> operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }

        public Builder operator(Either<String,RequestMethodOperator> operator) {
            this.operator = Output.of(Objects.requireNonNull(operator));
            return this;
        }
        public RequestMethodMatchConditionParametersArgs build() {
            return new RequestMethodMatchConditionParametersArgs(matchValues, negateCondition, odataType, operator);
        }
    }
}
