// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerservice.inputs;

import io.pulumi.azurenative.containerservice.enums.LicenseType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Profile for Windows VMs in the container service cluster.
 * 
 */
public final class ManagedClusterWindowsProfileArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagedClusterWindowsProfileArgs Empty = new ManagedClusterWindowsProfileArgs();

    /**
     * Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
     * 
     */
    @InputImport(name="adminPassword")
      private final @Nullable Output<String> adminPassword;

    public Output<String> getAdminPassword() {
        return this.adminPassword == null ? Output.empty() : this.adminPassword;
    }

    /**
     * Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
     * 
     */
    @InputImport(name="adminUsername", required=true)
      private final Output<String> adminUsername;

    public Output<String> getAdminUsername() {
        return this.adminUsername;
    }

    /**
     * Whether to enable CSI proxy.
     * 
     */
    @InputImport(name="enableCSIProxy")
      private final @Nullable Output<Boolean> enableCSIProxy;

    public Output<Boolean> getEnableCSIProxy() {
        return this.enableCSIProxy == null ? Output.empty() : this.enableCSIProxy;
    }

    /**
     * The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs.
     * 
     */
    @InputImport(name="licenseType")
      private final @Nullable Output<Either<String,LicenseType>> licenseType;

    public Output<Either<String,LicenseType>> getLicenseType() {
        return this.licenseType == null ? Output.empty() : this.licenseType;
    }

    public ManagedClusterWindowsProfileArgs(
        @Nullable Output<String> adminPassword,
        Output<String> adminUsername,
        @Nullable Output<Boolean> enableCSIProxy,
        @Nullable Output<Either<String,LicenseType>> licenseType) {
        this.adminPassword = adminPassword;
        this.adminUsername = Objects.requireNonNull(adminUsername, "expected parameter 'adminUsername' to be non-null");
        this.enableCSIProxy = enableCSIProxy;
        this.licenseType = licenseType;
    }

    private ManagedClusterWindowsProfileArgs() {
        this.adminPassword = Output.empty();
        this.adminUsername = Output.empty();
        this.enableCSIProxy = Output.empty();
        this.licenseType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedClusterWindowsProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> adminPassword;
        private Output<String> adminUsername;
        private @Nullable Output<Boolean> enableCSIProxy;
        private @Nullable Output<Either<String,LicenseType>> licenseType;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedClusterWindowsProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.enableCSIProxy = defaults.enableCSIProxy;
    	      this.licenseType = defaults.licenseType;
        }

        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            this.adminPassword = adminPassword;
            return this;
        }

        public Builder adminPassword(@Nullable String adminPassword) {
            this.adminPassword = Output.ofNullable(adminPassword);
            return this;
        }

        public Builder adminUsername(Output<String> adminUsername) {
            this.adminUsername = Objects.requireNonNull(adminUsername);
            return this;
        }

        public Builder adminUsername(String adminUsername) {
            this.adminUsername = Output.of(Objects.requireNonNull(adminUsername));
            return this;
        }

        public Builder enableCSIProxy(@Nullable Output<Boolean> enableCSIProxy) {
            this.enableCSIProxy = enableCSIProxy;
            return this;
        }

        public Builder enableCSIProxy(@Nullable Boolean enableCSIProxy) {
            this.enableCSIProxy = Output.ofNullable(enableCSIProxy);
            return this;
        }

        public Builder licenseType(@Nullable Output<Either<String,LicenseType>> licenseType) {
            this.licenseType = licenseType;
            return this;
        }

        public Builder licenseType(@Nullable Either<String,LicenseType> licenseType) {
            this.licenseType = Output.ofNullable(licenseType);
            return this;
        }
        public ManagedClusterWindowsProfileArgs build() {
            return new ManagedClusterWindowsProfileArgs(adminPassword, adminUsername, enableCSIProxy, licenseType);
        }
    }
}
