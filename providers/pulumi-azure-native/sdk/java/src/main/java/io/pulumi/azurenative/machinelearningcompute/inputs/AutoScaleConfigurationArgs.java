// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningcompute.inputs;

import io.pulumi.azurenative.machinelearningcompute.enums.Status;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * AutoScale configuration properties.
 * 
 */
public final class AutoScaleConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutoScaleConfigurationArgs Empty = new AutoScaleConfigurationArgs();

    /**
     * The maximum number of replicas for each service.
     * 
     */
    @InputImport(name="maxReplicas")
      private final @Nullable Input<Integer> maxReplicas;

    public Input<Integer> getMaxReplicas() {
        return this.maxReplicas == null ? Input.empty() : this.maxReplicas;
    }

    /**
     * The minimum number of replicas for each service.
     * 
     */
    @InputImport(name="minReplicas")
      private final @Nullable Input<Integer> minReplicas;

    public Input<Integer> getMinReplicas() {
        return this.minReplicas == null ? Input.empty() : this.minReplicas;
    }

    /**
     * Refresh period in seconds.
     * 
     */
    @InputImport(name="refreshPeriodInSeconds")
      private final @Nullable Input<Integer> refreshPeriodInSeconds;

    public Input<Integer> getRefreshPeriodInSeconds() {
        return this.refreshPeriodInSeconds == null ? Input.empty() : this.refreshPeriodInSeconds;
    }

    /**
     * If auto-scale is enabled for all services. Each service can turn it off individually.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Input<Either<String,Status>> status;

    public Input<Either<String,Status>> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * The target utilization.
     * 
     */
    @InputImport(name="targetUtilization")
      private final @Nullable Input<Double> targetUtilization;

    public Input<Double> getTargetUtilization() {
        return this.targetUtilization == null ? Input.empty() : this.targetUtilization;
    }

    public AutoScaleConfigurationArgs(
        @Nullable Input<Integer> maxReplicas,
        @Nullable Input<Integer> minReplicas,
        @Nullable Input<Integer> refreshPeriodInSeconds,
        @Nullable Input<Either<String,Status>> status,
        @Nullable Input<Double> targetUtilization) {
        this.maxReplicas = maxReplicas == null ? Input.ofNullable(100) : maxReplicas;
        this.minReplicas = minReplicas == null ? Input.ofNullable(1) : minReplicas;
        this.refreshPeriodInSeconds = refreshPeriodInSeconds;
        this.status = status == null ? Input.ofLeft("Disabled") : status;
        this.targetUtilization = targetUtilization;
    }

    private AutoScaleConfigurationArgs() {
        this.maxReplicas = Input.empty();
        this.minReplicas = Input.empty();
        this.refreshPeriodInSeconds = Input.empty();
        this.status = Input.empty();
        this.targetUtilization = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoScaleConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> maxReplicas;
        private @Nullable Input<Integer> minReplicas;
        private @Nullable Input<Integer> refreshPeriodInSeconds;
        private @Nullable Input<Either<String,Status>> status;
        private @Nullable Input<Double> targetUtilization;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoScaleConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxReplicas = defaults.maxReplicas;
    	      this.minReplicas = defaults.minReplicas;
    	      this.refreshPeriodInSeconds = defaults.refreshPeriodInSeconds;
    	      this.status = defaults.status;
    	      this.targetUtilization = defaults.targetUtilization;
        }

        public Builder setMaxReplicas(@Nullable Input<Integer> maxReplicas) {
            this.maxReplicas = maxReplicas;
            return this;
        }

        public Builder setMaxReplicas(@Nullable Integer maxReplicas) {
            this.maxReplicas = Input.ofNullable(maxReplicas);
            return this;
        }

        public Builder setMinReplicas(@Nullable Input<Integer> minReplicas) {
            this.minReplicas = minReplicas;
            return this;
        }

        public Builder setMinReplicas(@Nullable Integer minReplicas) {
            this.minReplicas = Input.ofNullable(minReplicas);
            return this;
        }

        public Builder setRefreshPeriodInSeconds(@Nullable Input<Integer> refreshPeriodInSeconds) {
            this.refreshPeriodInSeconds = refreshPeriodInSeconds;
            return this;
        }

        public Builder setRefreshPeriodInSeconds(@Nullable Integer refreshPeriodInSeconds) {
            this.refreshPeriodInSeconds = Input.ofNullable(refreshPeriodInSeconds);
            return this;
        }

        public Builder setStatus(@Nullable Input<Either<String,Status>> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable Either<String,Status> status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder setTargetUtilization(@Nullable Input<Double> targetUtilization) {
            this.targetUtilization = targetUtilization;
            return this;
        }

        public Builder setTargetUtilization(@Nullable Double targetUtilization) {
            this.targetUtilization = Input.ofNullable(targetUtilization);
            return this;
        }
        public AutoScaleConfigurationArgs build() {
            return new AutoScaleConfigurationArgs(maxReplicas, minReplicas, refreshPeriodInSeconds, status, targetUtilization);
        }
    }
}
