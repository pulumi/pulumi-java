// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cache;

import io.pulumi.azurenative.cache.enums.TlsVersion;
import io.pulumi.azurenative.cache.inputs.EnterpriseSkuArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RedisEnterpriseArgs extends io.pulumi.resources.ResourceArgs {

    public static final RedisEnterpriseArgs Empty = new RedisEnterpriseArgs();

    /**
     * The name of the RedisEnterprise cluster.
     * 
     */
    @InputImport(name="clusterName")
    private final @Nullable Input<String> clusterName;

    public Input<String> getClusterName() {
        return this.clusterName == null ? Input.empty() : this.clusterName;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The minimum TLS version for the cluster to support, e.g. '1.2'
     * 
     */
    @InputImport(name="minimumTlsVersion")
    private final @Nullable Input<Either<String,TlsVersion>> minimumTlsVersion;

    public Input<Either<String,TlsVersion>> getMinimumTlsVersion() {
        return this.minimumTlsVersion == null ? Input.empty() : this.minimumTlsVersion;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SKU to create, which affects price, performance, and features.
     * 
     */
    @InputImport(name="sku", required=true)
    private final Input<EnterpriseSkuArgs> sku;

    public Input<EnterpriseSkuArgs> getSku() {
        return this.sku;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The Availability Zones where this cluster will be deployed.
     * 
     */
    @InputImport(name="zones")
    private final @Nullable Input<List<String>> zones;

    public Input<List<String>> getZones() {
        return this.zones == null ? Input.empty() : this.zones;
    }

    public RedisEnterpriseArgs(
        @Nullable Input<String> clusterName,
        @Nullable Input<String> location,
        @Nullable Input<Either<String,TlsVersion>> minimumTlsVersion,
        Input<String> resourceGroupName,
        Input<EnterpriseSkuArgs> sku,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<List<String>> zones) {
        this.clusterName = clusterName;
        this.location = location;
        this.minimumTlsVersion = minimumTlsVersion;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = Objects.requireNonNull(sku, "expected parameter 'sku' to be non-null");
        this.tags = tags;
        this.zones = zones;
    }

    private RedisEnterpriseArgs() {
        this.clusterName = Input.empty();
        this.location = Input.empty();
        this.minimumTlsVersion = Input.empty();
        this.resourceGroupName = Input.empty();
        this.sku = Input.empty();
        this.tags = Input.empty();
        this.zones = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RedisEnterpriseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> clusterName;
        private @Nullable Input<String> location;
        private @Nullable Input<Either<String,TlsVersion>> minimumTlsVersion;
        private Input<String> resourceGroupName;
        private Input<EnterpriseSkuArgs> sku;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<List<String>> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(RedisEnterpriseArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterName = defaults.clusterName;
    	      this.location = defaults.location;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.zones = defaults.zones;
        }

        public Builder setClusterName(@Nullable Input<String> clusterName) {
            this.clusterName = clusterName;
            return this;
        }

        public Builder setClusterName(@Nullable String clusterName) {
            this.clusterName = Input.ofNullable(clusterName);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMinimumTlsVersion(@Nullable Input<Either<String,TlsVersion>> minimumTlsVersion) {
            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }

        public Builder setMinimumTlsVersion(@Nullable Either<String,TlsVersion> minimumTlsVersion) {
            this.minimumTlsVersion = Input.ofNullable(minimumTlsVersion);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSku(Input<EnterpriseSkuArgs> sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }

        public Builder setSku(EnterpriseSkuArgs sku) {
            this.sku = Input.of(Objects.requireNonNull(sku));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setZones(@Nullable Input<List<String>> zones) {
            this.zones = zones;
            return this;
        }

        public Builder setZones(@Nullable List<String> zones) {
            this.zones = Input.ofNullable(zones);
            return this;
        }

        public RedisEnterpriseArgs build() {
            return new RedisEnterpriseArgs(clusterName, location, minimumTlsVersion, resourceGroupName, sku, tags, zones);
        }
    }
}
