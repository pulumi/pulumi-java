// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.azurenative.insights.inputs.AzNsActionGroupResponse;
import io.pulumi.azurenative.insights.inputs.TriggerConditionResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specify action need to be taken when rule type is Alert
 * 
 */
public final class AlertingActionResponse extends io.pulumi.resources.InvokeArgs {

    public static final AlertingActionResponse Empty = new AlertingActionResponse();

    /**
     * Azure action group reference.
     * 
     */
    @Import(name="aznsAction")
      private final @Nullable AzNsActionGroupResponse aznsAction;

    public Optional<AzNsActionGroupResponse> getAznsAction() {
        return this.aznsAction == null ? Optional.empty() : Optional.ofNullable(this.aznsAction);
    }

    /**
     * Specifies the action. Supported values - AlertingAction, LogToMetricAction
     * Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
     * 
     */
    @Import(name="odataType", required=true)
      private final String odataType;

    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Severity of the alert
     * 
     */
    @Import(name="severity", required=true)
      private final String severity;

    public String getSeverity() {
        return this.severity;
    }

    /**
     * time (in minutes) for which Alerts should be throttled or suppressed.
     * 
     */
    @Import(name="throttlingInMin")
      private final @Nullable Integer throttlingInMin;

    public Optional<Integer> getThrottlingInMin() {
        return this.throttlingInMin == null ? Optional.empty() : Optional.ofNullable(this.throttlingInMin);
    }

    /**
     * The trigger condition that results in the alert rule being.
     * 
     */
    @Import(name="trigger", required=true)
      private final TriggerConditionResponse trigger;

    public TriggerConditionResponse getTrigger() {
        return this.trigger;
    }

    public AlertingActionResponse(
        @Nullable AzNsActionGroupResponse aznsAction,
        String odataType,
        String severity,
        @Nullable Integer throttlingInMin,
        TriggerConditionResponse trigger) {
        this.aznsAction = aznsAction;
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.severity = Objects.requireNonNull(severity, "expected parameter 'severity' to be non-null");
        this.throttlingInMin = throttlingInMin;
        this.trigger = Objects.requireNonNull(trigger, "expected parameter 'trigger' to be non-null");
    }

    private AlertingActionResponse() {
        this.aznsAction = null;
        this.odataType = null;
        this.severity = null;
        this.throttlingInMin = null;
        this.trigger = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertingActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable AzNsActionGroupResponse aznsAction;
        private String odataType;
        private String severity;
        private @Nullable Integer throttlingInMin;
        private TriggerConditionResponse trigger;

        public Builder() {
    	      // Empty
        }

        public Builder(AlertingActionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aznsAction = defaults.aznsAction;
    	      this.odataType = defaults.odataType;
    	      this.severity = defaults.severity;
    	      this.throttlingInMin = defaults.throttlingInMin;
    	      this.trigger = defaults.trigger;
        }

        public Builder aznsAction(@Nullable AzNsActionGroupResponse aznsAction) {
            this.aznsAction = aznsAction;
            return this;
        }
        public Builder odataType(String odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }
        public Builder severity(String severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }
        public Builder throttlingInMin(@Nullable Integer throttlingInMin) {
            this.throttlingInMin = throttlingInMin;
            return this;
        }
        public Builder trigger(TriggerConditionResponse trigger) {
            this.trigger = Objects.requireNonNull(trigger);
            return this;
        }        public AlertingActionResponse build() {
            return new AlertingActionResponse(aznsAction, odataType, severity, throttlingInMin, trigger);
        }
    }
}
