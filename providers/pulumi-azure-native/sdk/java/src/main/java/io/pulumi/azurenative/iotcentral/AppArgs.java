// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.iotcentral;

import io.pulumi.azurenative.iotcentral.inputs.AppSkuInfoArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppArgs extends io.pulumi.resources.ResourceArgs {

    public static final AppArgs Empty = new AppArgs();

    /**
     * The display name of the application.
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * The resource location.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name of the resource group that contains the IoT Central application.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The ARM resource name of the IoT Central application.
     * 
     */
    @InputImport(name="resourceName")
      private final @Nullable Output<String> resourceName;

    public Output<String> getPropResourceName() {
        return this.resourceName == null ? Output.empty() : this.resourceName;
    }

    /**
     * A valid instance SKU.
     * 
     */
    @InputImport(name="sku", required=true)
      private final Output<AppSkuInfoArgs> sku;

    public Output<AppSkuInfoArgs> getSku() {
        return this.sku;
    }

    /**
     * The subdomain of the application.
     * 
     */
    @InputImport(name="subdomain")
      private final @Nullable Output<String> subdomain;

    public Output<String> getSubdomain() {
        return this.subdomain == null ? Output.empty() : this.subdomain;
    }

    /**
     * The resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The ID of the application template, which is a blueprint that defines the characteristics and behaviors of an application. Optional; if not specified, defaults to a blank blueprint and allows the application to be defined from scratch.
     * 
     */
    @InputImport(name="template")
      private final @Nullable Output<String> template;

    public Output<String> getTemplate() {
        return this.template == null ? Output.empty() : this.template;
    }

    public AppArgs(
        @Nullable Output<String> displayName,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<String> resourceName,
        Output<AppSkuInfoArgs> sku,
        @Nullable Output<String> subdomain,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> template) {
        this.displayName = displayName;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceName = resourceName;
        this.sku = Objects.requireNonNull(sku, "expected parameter 'sku' to be non-null");
        this.subdomain = subdomain;
        this.tags = tags;
        this.template = template;
    }

    private AppArgs() {
        this.displayName = Output.empty();
        this.location = Output.empty();
        this.resourceGroupName = Output.empty();
        this.resourceName = Output.empty();
        this.sku = Output.empty();
        this.subdomain = Output.empty();
        this.tags = Output.empty();
        this.template = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> resourceName;
        private Output<AppSkuInfoArgs> sku;
        private @Nullable Output<String> subdomain;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> template;

        public Builder() {
    	      // Empty
        }

        public Builder(AppArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceName = defaults.resourceName;
    	      this.sku = defaults.sku;
    	      this.subdomain = defaults.subdomain;
    	      this.tags = defaults.tags;
    	      this.template = defaults.template;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder resourceName(@Nullable Output<String> resourceName) {
            this.resourceName = resourceName;
            return this;
        }

        public Builder resourceName(@Nullable String resourceName) {
            this.resourceName = Output.ofNullable(resourceName);
            return this;
        }

        public Builder sku(Output<AppSkuInfoArgs> sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }

        public Builder sku(AppSkuInfoArgs sku) {
            this.sku = Output.of(Objects.requireNonNull(sku));
            return this;
        }

        public Builder subdomain(@Nullable Output<String> subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        public Builder subdomain(@Nullable String subdomain) {
            this.subdomain = Output.ofNullable(subdomain);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder template(@Nullable Output<String> template) {
            this.template = template;
            return this;
        }

        public Builder template(@Nullable String template) {
            this.template = Output.ofNullable(template);
            return this;
        }
        public AppArgs build() {
            return new AppArgs(displayName, location, resourceGroupName, resourceName, sku, subdomain, tags, template);
        }
    }
}
