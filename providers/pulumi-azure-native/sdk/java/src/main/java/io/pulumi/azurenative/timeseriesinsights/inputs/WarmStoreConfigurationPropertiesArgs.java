// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.timeseriesinsights.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
 * 
 */
public final class WarmStoreConfigurationPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final WarmStoreConfigurationPropertiesArgs Empty = new WarmStoreConfigurationPropertiesArgs();

    /**
     * ISO8601 timespan specifying the number of days the environment's events will be available for query from the warm store.
     * 
     */
    @InputImport(name="dataRetention", required=true)
    private final Input<String> dataRetention;

    public Input<String> getDataRetention() {
        return this.dataRetention;
    }

    public WarmStoreConfigurationPropertiesArgs(Input<String> dataRetention) {
        this.dataRetention = Objects.requireNonNull(dataRetention, "expected parameter 'dataRetention' to be non-null");
    }

    private WarmStoreConfigurationPropertiesArgs() {
        this.dataRetention = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WarmStoreConfigurationPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> dataRetention;

        public Builder() {
    	      // Empty
        }

        public Builder(WarmStoreConfigurationPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataRetention = defaults.dataRetention;
        }

        public Builder setDataRetention(Input<String> dataRetention) {
            this.dataRetention = Objects.requireNonNull(dataRetention);
            return this;
        }

        public Builder setDataRetention(String dataRetention) {
            this.dataRetention = Input.of(Objects.requireNonNull(dataRetention));
            return this;
        }

        public WarmStoreConfigurationPropertiesArgs build() {
            return new WarmStoreConfigurationPropertiesArgs(dataRetention);
        }
    }
}
