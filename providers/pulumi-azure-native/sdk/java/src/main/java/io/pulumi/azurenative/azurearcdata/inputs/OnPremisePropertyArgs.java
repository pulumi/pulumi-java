// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.azurearcdata.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Properties from the Kubernetes data controller
 * 
 */
public final class OnPremisePropertyArgs extends io.pulumi.resources.ResourceArgs {

    public static final OnPremisePropertyArgs Empty = new OnPremisePropertyArgs();

    /**
     * A globally unique ID identifying the associated Kubernetes cluster
     * 
     */
    @Import(name="id", required=true)
      private final Output<String> id;

    public Output<String> getId() {
        return this.id;
    }

    /**
     * Certificate that contains the Kubernetes cluster public key used to verify signing
     * 
     */
    @Import(name="publicSigningKey", required=true)
      private final Output<String> publicSigningKey;

    public Output<String> getPublicSigningKey() {
        return this.publicSigningKey;
    }

    /**
     * Unique thumbprint returned to customer to verify the certificate being uploaded
     * 
     */
    @Import(name="signingCertificateThumbprint")
      private final @Nullable Output<String> signingCertificateThumbprint;

    public Output<String> getSigningCertificateThumbprint() {
        return this.signingCertificateThumbprint == null ? Output.empty() : this.signingCertificateThumbprint;
    }

    public OnPremisePropertyArgs(
        Output<String> id,
        Output<String> publicSigningKey,
        @Nullable Output<String> signingCertificateThumbprint) {
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.publicSigningKey = Objects.requireNonNull(publicSigningKey, "expected parameter 'publicSigningKey' to be non-null");
        this.signingCertificateThumbprint = signingCertificateThumbprint;
    }

    private OnPremisePropertyArgs() {
        this.id = Output.empty();
        this.publicSigningKey = Output.empty();
        this.signingCertificateThumbprint = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OnPremisePropertyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> id;
        private Output<String> publicSigningKey;
        private @Nullable Output<String> signingCertificateThumbprint;

        public Builder() {
    	      // Empty
        }

        public Builder(OnPremisePropertyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.publicSigningKey = defaults.publicSigningKey;
    	      this.signingCertificateThumbprint = defaults.signingCertificateThumbprint;
        }

        public Builder id(Output<String> id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder id(String id) {
            this.id = Output.of(Objects.requireNonNull(id));
            return this;
        }

        public Builder publicSigningKey(Output<String> publicSigningKey) {
            this.publicSigningKey = Objects.requireNonNull(publicSigningKey);
            return this;
        }

        public Builder publicSigningKey(String publicSigningKey) {
            this.publicSigningKey = Output.of(Objects.requireNonNull(publicSigningKey));
            return this;
        }

        public Builder signingCertificateThumbprint(@Nullable Output<String> signingCertificateThumbprint) {
            this.signingCertificateThumbprint = signingCertificateThumbprint;
            return this;
        }

        public Builder signingCertificateThumbprint(@Nullable String signingCertificateThumbprint) {
            this.signingCertificateThumbprint = Output.ofNullable(signingCertificateThumbprint);
            return this;
        }
        public OnPremisePropertyArgs build() {
            return new OnPremisePropertyArgs(id, publicSigningKey, signingCertificateThumbprint);
        }
    }
}
