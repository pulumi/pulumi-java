// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.operationalinsights;

import io.pulumi.azurenative.operationalinsights.inputs.StorageAccountArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StorageInsightConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final StorageInsightConfigArgs Empty = new StorageInsightConfigArgs();

    /**
     * The names of the blob containers that the workspace should read
     * 
     */
    @Import(name="containers")
      private final @Nullable Output<List<String>> containers;

    public Output<List<String>> getContainers() {
        return this.containers == null ? Output.empty() : this.containers;
    }

    /**
     * The ETag of the storage insight.
     * 
     */
    @Import(name="eTag")
      private final @Nullable Output<String> eTag;

    public Output<String> getETag() {
        return this.eTag == null ? Output.empty() : this.eTag;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The storage account connection details
     * 
     */
    @Import(name="storageAccount", required=true)
      private final Output<StorageAccountArgs> storageAccount;

    public Output<StorageAccountArgs> getStorageAccount() {
        return this.storageAccount;
    }

    /**
     * Name of the storageInsightsConfigs resource
     * 
     */
    @Import(name="storageInsightName")
      private final @Nullable Output<String> storageInsightName;

    public Output<String> getStorageInsightName() {
        return this.storageInsightName == null ? Output.empty() : this.storageInsightName;
    }

    /**
     * The names of the Azure tables that the workspace should read
     * 
     */
    @Import(name="tables")
      private final @Nullable Output<List<String>> tables;

    public Output<List<String>> getTables() {
        return this.tables == null ? Output.empty() : this.tables;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public StorageInsightConfigArgs(
        @Nullable Output<List<String>> containers,
        @Nullable Output<String> eTag,
        Output<String> resourceGroupName,
        Output<StorageAccountArgs> storageAccount,
        @Nullable Output<String> storageInsightName,
        @Nullable Output<List<String>> tables,
        @Nullable Output<Map<String,String>> tags,
        Output<String> workspaceName) {
        this.containers = containers;
        this.eTag = eTag;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.storageAccount = Objects.requireNonNull(storageAccount, "expected parameter 'storageAccount' to be non-null");
        this.storageInsightName = storageInsightName;
        this.tables = tables;
        this.tags = tags;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private StorageInsightConfigArgs() {
        this.containers = Output.empty();
        this.eTag = Output.empty();
        this.resourceGroupName = Output.empty();
        this.storageAccount = Output.empty();
        this.storageInsightName = Output.empty();
        this.tables = Output.empty();
        this.tags = Output.empty();
        this.workspaceName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StorageInsightConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> containers;
        private @Nullable Output<String> eTag;
        private Output<String> resourceGroupName;
        private Output<StorageAccountArgs> storageAccount;
        private @Nullable Output<String> storageInsightName;
        private @Nullable Output<List<String>> tables;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(StorageInsightConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containers = defaults.containers;
    	      this.eTag = defaults.eTag;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.storageAccount = defaults.storageAccount;
    	      this.storageInsightName = defaults.storageInsightName;
    	      this.tables = defaults.tables;
    	      this.tags = defaults.tags;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder containers(@Nullable Output<List<String>> containers) {
            this.containers = containers;
            return this;
        }

        public Builder containers(@Nullable List<String> containers) {
            this.containers = Output.ofNullable(containers);
            return this;
        }

        public Builder eTag(@Nullable Output<String> eTag) {
            this.eTag = eTag;
            return this;
        }

        public Builder eTag(@Nullable String eTag) {
            this.eTag = Output.ofNullable(eTag);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder storageAccount(Output<StorageAccountArgs> storageAccount) {
            this.storageAccount = Objects.requireNonNull(storageAccount);
            return this;
        }

        public Builder storageAccount(StorageAccountArgs storageAccount) {
            this.storageAccount = Output.of(Objects.requireNonNull(storageAccount));
            return this;
        }

        public Builder storageInsightName(@Nullable Output<String> storageInsightName) {
            this.storageInsightName = storageInsightName;
            return this;
        }

        public Builder storageInsightName(@Nullable String storageInsightName) {
            this.storageInsightName = Output.ofNullable(storageInsightName);
            return this;
        }

        public Builder tables(@Nullable Output<List<String>> tables) {
            this.tables = tables;
            return this;
        }

        public Builder tables(@Nullable List<String> tables) {
            this.tables = Output.ofNullable(tables);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public StorageInsightConfigArgs build() {
            return new StorageInsightConfigArgs(containers, eTag, resourceGroupName, storageAccount, storageInsightName, tables, tags, workspaceName);
        }
    }
}
