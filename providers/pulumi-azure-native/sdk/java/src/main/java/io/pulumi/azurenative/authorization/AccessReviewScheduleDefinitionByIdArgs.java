// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.authorization;

import io.pulumi.azurenative.authorization.enums.AccessReviewRecurrenceRangeType;
import io.pulumi.azurenative.authorization.enums.DefaultDecisionType;
import io.pulumi.azurenative.authorization.inputs.AccessReviewInstanceArgs;
import io.pulumi.azurenative.authorization.inputs.AccessReviewReviewerArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccessReviewScheduleDefinitionByIdArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccessReviewScheduleDefinitionByIdArgs Empty = new AccessReviewScheduleDefinitionByIdArgs();

    /**
     * Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.
     * 
     */
    @Import(name="autoApplyDecisionsEnabled")
      private final @Nullable Output<Boolean> autoApplyDecisionsEnabled;

    public Output<Boolean> getAutoApplyDecisionsEnabled() {
        return this.autoApplyDecisionsEnabled == null ? Output.empty() : this.autoApplyDecisionsEnabled;
    }

    /**
     * This is the collection of backup reviewers.
     * 
     */
    @Import(name="backupReviewers")
      private final @Nullable Output<List<AccessReviewReviewerArgs>> backupReviewers;

    public Output<List<AccessReviewReviewerArgs>> getBackupReviewers() {
        return this.backupReviewers == null ? Output.empty() : this.backupReviewers;
    }

    /**
     * This specifies the behavior for the autoReview feature when an access review completes.
     * 
     */
    @Import(name="defaultDecision")
      private final @Nullable Output<Either<String,DefaultDecisionType>> defaultDecision;

    public Output<Either<String,DefaultDecisionType>> getDefaultDecision() {
        return this.defaultDecision == null ? Output.empty() : this.defaultDecision;
    }

    /**
     * Flag to indicate whether reviewers are required to provide a justification when reviewing access.
     * 
     */
    @Import(name="defaultDecisionEnabled")
      private final @Nullable Output<Boolean> defaultDecisionEnabled;

    public Output<Boolean> getDefaultDecisionEnabled() {
        return this.defaultDecisionEnabled == null ? Output.empty() : this.defaultDecisionEnabled;
    }

    /**
     * The description provided by the access review creator and visible to admins.
     * 
     */
    @Import(name="descriptionForAdmins")
      private final @Nullable Output<String> descriptionForAdmins;

    public Output<String> getDescriptionForAdmins() {
        return this.descriptionForAdmins == null ? Output.empty() : this.descriptionForAdmins;
    }

    /**
     * The description provided by the access review creator to be shown to reviewers.
     * 
     */
    @Import(name="descriptionForReviewers")
      private final @Nullable Output<String> descriptionForReviewers;

    public Output<String> getDescriptionForReviewers() {
        return this.descriptionForReviewers == null ? Output.empty() : this.descriptionForReviewers;
    }

    /**
     * The display name for the schedule definition.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * The DateTime when the review is scheduled to end. Required if type is endDate
     * 
     */
    @Import(name="endDate")
      private final @Nullable Output<String> endDate;

    public Output<String> getEndDate() {
        return this.endDate == null ? Output.empty() : this.endDate;
    }

    /**
     * Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
     * 
     */
    @Import(name="inactiveDuration")
      private final @Nullable Output<String> inactiveDuration;

    public Output<String> getInactiveDuration() {
        return this.inactiveDuration == null ? Output.empty() : this.inactiveDuration;
    }

    /**
     * The duration in days for an instance.
     * 
     */
    @Import(name="instanceDurationInDays")
      private final @Nullable Output<Integer> instanceDurationInDays;

    public Output<Integer> getInstanceDurationInDays() {
        return this.instanceDurationInDays == null ? Output.empty() : this.instanceDurationInDays;
    }

    /**
     * This is the collection of instances returned when one does an expand on it.
     * 
     */
    @Import(name="instances")
      private final @Nullable Output<List<AccessReviewInstanceArgs>> instances;

    public Output<List<AccessReviewInstanceArgs>> getInstances() {
        return this.instances == null ? Output.empty() : this.instances;
    }

    /**
     * The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
     * 
     */
    @Import(name="interval")
      private final @Nullable Output<Integer> interval;

    public Output<Integer> getInterval() {
        return this.interval == null ? Output.empty() : this.interval;
    }

    /**
     * Flag to indicate whether the reviewer is required to pass justification when recording a decision.
     * 
     */
    @Import(name="justificationRequiredOnApproval")
      private final @Nullable Output<Boolean> justificationRequiredOnApproval;

    public Output<Boolean> getJustificationRequiredOnApproval() {
        return this.justificationRequiredOnApproval == null ? Output.empty() : this.justificationRequiredOnApproval;
    }

    /**
     * Flag to indicate whether sending mails to reviewers and the review creator is enabled.
     * 
     */
    @Import(name="mailNotificationsEnabled")
      private final @Nullable Output<Boolean> mailNotificationsEnabled;

    public Output<Boolean> getMailNotificationsEnabled() {
        return this.mailNotificationsEnabled == null ? Output.empty() : this.mailNotificationsEnabled;
    }

    /**
     * The number of times to repeat the access review. Required and must be positive if type is numbered.
     * 
     */
    @Import(name="numberOfOccurrences")
      private final @Nullable Output<Integer> numberOfOccurrences;

    public Output<Integer> getNumberOfOccurrences() {
        return this.numberOfOccurrences == null ? Output.empty() : this.numberOfOccurrences;
    }

    /**
     * Flag to indicate whether showing recommendations to reviewers is enabled.
     * 
     */
    @Import(name="recommendationsEnabled")
      private final @Nullable Output<Boolean> recommendationsEnabled;

    public Output<Boolean> getRecommendationsEnabled() {
        return this.recommendationsEnabled == null ? Output.empty() : this.recommendationsEnabled;
    }

    /**
     * Flag to indicate whether sending reminder emails to reviewers are enabled.
     * 
     */
    @Import(name="reminderNotificationsEnabled")
      private final @Nullable Output<Boolean> reminderNotificationsEnabled;

    public Output<Boolean> getReminderNotificationsEnabled() {
        return this.reminderNotificationsEnabled == null ? Output.empty() : this.reminderNotificationsEnabled;
    }

    /**
     * This is the collection of reviewers.
     * 
     */
    @Import(name="reviewers")
      private final @Nullable Output<List<AccessReviewReviewerArgs>> reviewers;

    public Output<List<AccessReviewReviewerArgs>> getReviewers() {
        return this.reviewers == null ? Output.empty() : this.reviewers;
    }

    /**
     * The id of the access review schedule definition.
     * 
     */
    @Import(name="scheduleDefinitionId")
      private final @Nullable Output<String> scheduleDefinitionId;

    public Output<String> getScheduleDefinitionId() {
        return this.scheduleDefinitionId == null ? Output.empty() : this.scheduleDefinitionId;
    }

    /**
     * The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
     * 
     */
    @Import(name="startDate")
      private final @Nullable Output<String> startDate;

    public Output<String> getStartDate() {
        return this.startDate == null ? Output.empty() : this.startDate;
    }

    /**
     * The recurrence range type. The possible values are: endDate, noEnd, numbered.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<Either<String,AccessReviewRecurrenceRangeType>> type;

    public Output<Either<String,AccessReviewRecurrenceRangeType>> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public AccessReviewScheduleDefinitionByIdArgs(
        @Nullable Output<Boolean> autoApplyDecisionsEnabled,
        @Nullable Output<List<AccessReviewReviewerArgs>> backupReviewers,
        @Nullable Output<Either<String,DefaultDecisionType>> defaultDecision,
        @Nullable Output<Boolean> defaultDecisionEnabled,
        @Nullable Output<String> descriptionForAdmins,
        @Nullable Output<String> descriptionForReviewers,
        @Nullable Output<String> displayName,
        @Nullable Output<String> endDate,
        @Nullable Output<String> inactiveDuration,
        @Nullable Output<Integer> instanceDurationInDays,
        @Nullable Output<List<AccessReviewInstanceArgs>> instances,
        @Nullable Output<Integer> interval,
        @Nullable Output<Boolean> justificationRequiredOnApproval,
        @Nullable Output<Boolean> mailNotificationsEnabled,
        @Nullable Output<Integer> numberOfOccurrences,
        @Nullable Output<Boolean> recommendationsEnabled,
        @Nullable Output<Boolean> reminderNotificationsEnabled,
        @Nullable Output<List<AccessReviewReviewerArgs>> reviewers,
        @Nullable Output<String> scheduleDefinitionId,
        @Nullable Output<String> startDate,
        @Nullable Output<Either<String,AccessReviewRecurrenceRangeType>> type) {
        this.autoApplyDecisionsEnabled = autoApplyDecisionsEnabled;
        this.backupReviewers = backupReviewers;
        this.defaultDecision = defaultDecision;
        this.defaultDecisionEnabled = defaultDecisionEnabled;
        this.descriptionForAdmins = descriptionForAdmins;
        this.descriptionForReviewers = descriptionForReviewers;
        this.displayName = displayName;
        this.endDate = endDate;
        this.inactiveDuration = inactiveDuration;
        this.instanceDurationInDays = instanceDurationInDays;
        this.instances = instances;
        this.interval = interval;
        this.justificationRequiredOnApproval = justificationRequiredOnApproval;
        this.mailNotificationsEnabled = mailNotificationsEnabled;
        this.numberOfOccurrences = numberOfOccurrences;
        this.recommendationsEnabled = recommendationsEnabled;
        this.reminderNotificationsEnabled = reminderNotificationsEnabled;
        this.reviewers = reviewers;
        this.scheduleDefinitionId = scheduleDefinitionId;
        this.startDate = startDate;
        this.type = type;
    }

    private AccessReviewScheduleDefinitionByIdArgs() {
        this.autoApplyDecisionsEnabled = Output.empty();
        this.backupReviewers = Output.empty();
        this.defaultDecision = Output.empty();
        this.defaultDecisionEnabled = Output.empty();
        this.descriptionForAdmins = Output.empty();
        this.descriptionForReviewers = Output.empty();
        this.displayName = Output.empty();
        this.endDate = Output.empty();
        this.inactiveDuration = Output.empty();
        this.instanceDurationInDays = Output.empty();
        this.instances = Output.empty();
        this.interval = Output.empty();
        this.justificationRequiredOnApproval = Output.empty();
        this.mailNotificationsEnabled = Output.empty();
        this.numberOfOccurrences = Output.empty();
        this.recommendationsEnabled = Output.empty();
        this.reminderNotificationsEnabled = Output.empty();
        this.reviewers = Output.empty();
        this.scheduleDefinitionId = Output.empty();
        this.startDate = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessReviewScheduleDefinitionByIdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> autoApplyDecisionsEnabled;
        private @Nullable Output<List<AccessReviewReviewerArgs>> backupReviewers;
        private @Nullable Output<Either<String,DefaultDecisionType>> defaultDecision;
        private @Nullable Output<Boolean> defaultDecisionEnabled;
        private @Nullable Output<String> descriptionForAdmins;
        private @Nullable Output<String> descriptionForReviewers;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> endDate;
        private @Nullable Output<String> inactiveDuration;
        private @Nullable Output<Integer> instanceDurationInDays;
        private @Nullable Output<List<AccessReviewInstanceArgs>> instances;
        private @Nullable Output<Integer> interval;
        private @Nullable Output<Boolean> justificationRequiredOnApproval;
        private @Nullable Output<Boolean> mailNotificationsEnabled;
        private @Nullable Output<Integer> numberOfOccurrences;
        private @Nullable Output<Boolean> recommendationsEnabled;
        private @Nullable Output<Boolean> reminderNotificationsEnabled;
        private @Nullable Output<List<AccessReviewReviewerArgs>> reviewers;
        private @Nullable Output<String> scheduleDefinitionId;
        private @Nullable Output<String> startDate;
        private @Nullable Output<Either<String,AccessReviewRecurrenceRangeType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessReviewScheduleDefinitionByIdArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoApplyDecisionsEnabled = defaults.autoApplyDecisionsEnabled;
    	      this.backupReviewers = defaults.backupReviewers;
    	      this.defaultDecision = defaults.defaultDecision;
    	      this.defaultDecisionEnabled = defaults.defaultDecisionEnabled;
    	      this.descriptionForAdmins = defaults.descriptionForAdmins;
    	      this.descriptionForReviewers = defaults.descriptionForReviewers;
    	      this.displayName = defaults.displayName;
    	      this.endDate = defaults.endDate;
    	      this.inactiveDuration = defaults.inactiveDuration;
    	      this.instanceDurationInDays = defaults.instanceDurationInDays;
    	      this.instances = defaults.instances;
    	      this.interval = defaults.interval;
    	      this.justificationRequiredOnApproval = defaults.justificationRequiredOnApproval;
    	      this.mailNotificationsEnabled = defaults.mailNotificationsEnabled;
    	      this.numberOfOccurrences = defaults.numberOfOccurrences;
    	      this.recommendationsEnabled = defaults.recommendationsEnabled;
    	      this.reminderNotificationsEnabled = defaults.reminderNotificationsEnabled;
    	      this.reviewers = defaults.reviewers;
    	      this.scheduleDefinitionId = defaults.scheduleDefinitionId;
    	      this.startDate = defaults.startDate;
    	      this.type = defaults.type;
        }

        public Builder autoApplyDecisionsEnabled(@Nullable Output<Boolean> autoApplyDecisionsEnabled) {
            this.autoApplyDecisionsEnabled = autoApplyDecisionsEnabled;
            return this;
        }

        public Builder autoApplyDecisionsEnabled(@Nullable Boolean autoApplyDecisionsEnabled) {
            this.autoApplyDecisionsEnabled = Output.ofNullable(autoApplyDecisionsEnabled);
            return this;
        }

        public Builder backupReviewers(@Nullable Output<List<AccessReviewReviewerArgs>> backupReviewers) {
            this.backupReviewers = backupReviewers;
            return this;
        }

        public Builder backupReviewers(@Nullable List<AccessReviewReviewerArgs> backupReviewers) {
            this.backupReviewers = Output.ofNullable(backupReviewers);
            return this;
        }

        public Builder defaultDecision(@Nullable Output<Either<String,DefaultDecisionType>> defaultDecision) {
            this.defaultDecision = defaultDecision;
            return this;
        }

        public Builder defaultDecision(@Nullable Either<String,DefaultDecisionType> defaultDecision) {
            this.defaultDecision = Output.ofNullable(defaultDecision);
            return this;
        }

        public Builder defaultDecisionEnabled(@Nullable Output<Boolean> defaultDecisionEnabled) {
            this.defaultDecisionEnabled = defaultDecisionEnabled;
            return this;
        }

        public Builder defaultDecisionEnabled(@Nullable Boolean defaultDecisionEnabled) {
            this.defaultDecisionEnabled = Output.ofNullable(defaultDecisionEnabled);
            return this;
        }

        public Builder descriptionForAdmins(@Nullable Output<String> descriptionForAdmins) {
            this.descriptionForAdmins = descriptionForAdmins;
            return this;
        }

        public Builder descriptionForAdmins(@Nullable String descriptionForAdmins) {
            this.descriptionForAdmins = Output.ofNullable(descriptionForAdmins);
            return this;
        }

        public Builder descriptionForReviewers(@Nullable Output<String> descriptionForReviewers) {
            this.descriptionForReviewers = descriptionForReviewers;
            return this;
        }

        public Builder descriptionForReviewers(@Nullable String descriptionForReviewers) {
            this.descriptionForReviewers = Output.ofNullable(descriptionForReviewers);
            return this;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder endDate(@Nullable Output<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(@Nullable String endDate) {
            this.endDate = Output.ofNullable(endDate);
            return this;
        }

        public Builder inactiveDuration(@Nullable Output<String> inactiveDuration) {
            this.inactiveDuration = inactiveDuration;
            return this;
        }

        public Builder inactiveDuration(@Nullable String inactiveDuration) {
            this.inactiveDuration = Output.ofNullable(inactiveDuration);
            return this;
        }

        public Builder instanceDurationInDays(@Nullable Output<Integer> instanceDurationInDays) {
            this.instanceDurationInDays = instanceDurationInDays;
            return this;
        }

        public Builder instanceDurationInDays(@Nullable Integer instanceDurationInDays) {
            this.instanceDurationInDays = Output.ofNullable(instanceDurationInDays);
            return this;
        }

        public Builder instances(@Nullable Output<List<AccessReviewInstanceArgs>> instances) {
            this.instances = instances;
            return this;
        }

        public Builder instances(@Nullable List<AccessReviewInstanceArgs> instances) {
            this.instances = Output.ofNullable(instances);
            return this;
        }

        public Builder interval(@Nullable Output<Integer> interval) {
            this.interval = interval;
            return this;
        }

        public Builder interval(@Nullable Integer interval) {
            this.interval = Output.ofNullable(interval);
            return this;
        }

        public Builder justificationRequiredOnApproval(@Nullable Output<Boolean> justificationRequiredOnApproval) {
            this.justificationRequiredOnApproval = justificationRequiredOnApproval;
            return this;
        }

        public Builder justificationRequiredOnApproval(@Nullable Boolean justificationRequiredOnApproval) {
            this.justificationRequiredOnApproval = Output.ofNullable(justificationRequiredOnApproval);
            return this;
        }

        public Builder mailNotificationsEnabled(@Nullable Output<Boolean> mailNotificationsEnabled) {
            this.mailNotificationsEnabled = mailNotificationsEnabled;
            return this;
        }

        public Builder mailNotificationsEnabled(@Nullable Boolean mailNotificationsEnabled) {
            this.mailNotificationsEnabled = Output.ofNullable(mailNotificationsEnabled);
            return this;
        }

        public Builder numberOfOccurrences(@Nullable Output<Integer> numberOfOccurrences) {
            this.numberOfOccurrences = numberOfOccurrences;
            return this;
        }

        public Builder numberOfOccurrences(@Nullable Integer numberOfOccurrences) {
            this.numberOfOccurrences = Output.ofNullable(numberOfOccurrences);
            return this;
        }

        public Builder recommendationsEnabled(@Nullable Output<Boolean> recommendationsEnabled) {
            this.recommendationsEnabled = recommendationsEnabled;
            return this;
        }

        public Builder recommendationsEnabled(@Nullable Boolean recommendationsEnabled) {
            this.recommendationsEnabled = Output.ofNullable(recommendationsEnabled);
            return this;
        }

        public Builder reminderNotificationsEnabled(@Nullable Output<Boolean> reminderNotificationsEnabled) {
            this.reminderNotificationsEnabled = reminderNotificationsEnabled;
            return this;
        }

        public Builder reminderNotificationsEnabled(@Nullable Boolean reminderNotificationsEnabled) {
            this.reminderNotificationsEnabled = Output.ofNullable(reminderNotificationsEnabled);
            return this;
        }

        public Builder reviewers(@Nullable Output<List<AccessReviewReviewerArgs>> reviewers) {
            this.reviewers = reviewers;
            return this;
        }

        public Builder reviewers(@Nullable List<AccessReviewReviewerArgs> reviewers) {
            this.reviewers = Output.ofNullable(reviewers);
            return this;
        }

        public Builder scheduleDefinitionId(@Nullable Output<String> scheduleDefinitionId) {
            this.scheduleDefinitionId = scheduleDefinitionId;
            return this;
        }

        public Builder scheduleDefinitionId(@Nullable String scheduleDefinitionId) {
            this.scheduleDefinitionId = Output.ofNullable(scheduleDefinitionId);
            return this;
        }

        public Builder startDate(@Nullable Output<String> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(@Nullable String startDate) {
            this.startDate = Output.ofNullable(startDate);
            return this;
        }

        public Builder type(@Nullable Output<Either<String,AccessReviewRecurrenceRangeType>> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable Either<String,AccessReviewRecurrenceRangeType> type) {
            this.type = Output.ofNullable(type);
            return this;
        }
        public AccessReviewScheduleDefinitionByIdArgs build() {
            return new AccessReviewScheduleDefinitionByIdArgs(autoApplyDecisionsEnabled, backupReviewers, defaultDecision, defaultDecisionEnabled, descriptionForAdmins, descriptionForReviewers, displayName, endDate, inactiveDuration, instanceDurationInDays, instances, interval, justificationRequiredOnApproval, mailNotificationsEnabled, numberOfOccurrences, recommendationsEnabled, reminderNotificationsEnabled, reviewers, scheduleDefinitionId, startDate, type);
        }
    }
}
