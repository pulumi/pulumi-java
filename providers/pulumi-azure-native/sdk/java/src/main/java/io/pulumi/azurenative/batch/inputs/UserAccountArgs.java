// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.batch.inputs;

import io.pulumi.azurenative.batch.enums.ElevationLevel;
import io.pulumi.azurenative.batch.inputs.LinuxUserConfigurationArgs;
import io.pulumi.azurenative.batch.inputs.WindowsUserConfigurationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserAccountArgs extends io.pulumi.resources.ResourceArgs {

    public static final UserAccountArgs Empty = new UserAccountArgs();

    /**
     * nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
     * 
     */
    @InputImport(name="elevationLevel")
    private final @Nullable Input<ElevationLevel> elevationLevel;

    public Input<ElevationLevel> getElevationLevel() {
        return this.elevationLevel == null ? Input.empty() : this.elevationLevel;
    }

    /**
     * This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
     * 
     */
    @InputImport(name="linuxUserConfiguration")
    private final @Nullable Input<LinuxUserConfigurationArgs> linuxUserConfiguration;

    public Input<LinuxUserConfigurationArgs> getLinuxUserConfiguration() {
        return this.linuxUserConfiguration == null ? Input.empty() : this.linuxUserConfiguration;
    }

    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    @InputImport(name="password", required=true)
    private final Input<String> password;

    public Input<String> getPassword() {
        return this.password;
    }

    /**
     * This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options.
     * 
     */
    @InputImport(name="windowsUserConfiguration")
    private final @Nullable Input<WindowsUserConfigurationArgs> windowsUserConfiguration;

    public Input<WindowsUserConfigurationArgs> getWindowsUserConfiguration() {
        return this.windowsUserConfiguration == null ? Input.empty() : this.windowsUserConfiguration;
    }

    public UserAccountArgs(
        @Nullable Input<ElevationLevel> elevationLevel,
        @Nullable Input<LinuxUserConfigurationArgs> linuxUserConfiguration,
        Input<String> name,
        Input<String> password,
        @Nullable Input<WindowsUserConfigurationArgs> windowsUserConfiguration) {
        this.elevationLevel = elevationLevel;
        this.linuxUserConfiguration = linuxUserConfiguration;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.windowsUserConfiguration = windowsUserConfiguration;
    }

    private UserAccountArgs() {
        this.elevationLevel = Input.empty();
        this.linuxUserConfiguration = Input.empty();
        this.name = Input.empty();
        this.password = Input.empty();
        this.windowsUserConfiguration = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ElevationLevel> elevationLevel;
        private @Nullable Input<LinuxUserConfigurationArgs> linuxUserConfiguration;
        private Input<String> name;
        private Input<String> password;
        private @Nullable Input<WindowsUserConfigurationArgs> windowsUserConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(UserAccountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.elevationLevel = defaults.elevationLevel;
    	      this.linuxUserConfiguration = defaults.linuxUserConfiguration;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.windowsUserConfiguration = defaults.windowsUserConfiguration;
        }

        public Builder setElevationLevel(@Nullable Input<ElevationLevel> elevationLevel) {
            this.elevationLevel = elevationLevel;
            return this;
        }

        public Builder setElevationLevel(@Nullable ElevationLevel elevationLevel) {
            this.elevationLevel = Input.ofNullable(elevationLevel);
            return this;
        }

        public Builder setLinuxUserConfiguration(@Nullable Input<LinuxUserConfigurationArgs> linuxUserConfiguration) {
            this.linuxUserConfiguration = linuxUserConfiguration;
            return this;
        }

        public Builder setLinuxUserConfiguration(@Nullable LinuxUserConfigurationArgs linuxUserConfiguration) {
            this.linuxUserConfiguration = Input.ofNullable(linuxUserConfiguration);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setPassword(Input<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder setPassword(String password) {
            this.password = Input.of(Objects.requireNonNull(password));
            return this;
        }

        public Builder setWindowsUserConfiguration(@Nullable Input<WindowsUserConfigurationArgs> windowsUserConfiguration) {
            this.windowsUserConfiguration = windowsUserConfiguration;
            return this;
        }

        public Builder setWindowsUserConfiguration(@Nullable WindowsUserConfigurationArgs windowsUserConfiguration) {
            this.windowsUserConfiguration = Input.ofNullable(windowsUserConfiguration);
            return this;
        }

        public UserAccountArgs build() {
            return new UserAccountArgs(elevationLevel, linuxUserConfiguration, name, password, windowsUserConfiguration);
        }
    }
}
