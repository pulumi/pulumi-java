// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.eventgrid;

import io.pulumi.azurenative.eventgrid.inputs.EventChannelDestinationArgs;
import io.pulumi.azurenative.eventgrid.inputs.EventChannelFilterArgs;
import io.pulumi.azurenative.eventgrid.inputs.EventChannelSourceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventChannelArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventChannelArgs Empty = new EventChannelArgs();

    /**
     * Represents the destination of an event channel.
     * 
     */
    @Import(name="destination")
      private final @Nullable Output<EventChannelDestinationArgs> destination;

    public Output<EventChannelDestinationArgs> getDestination() {
        return this.destination == null ? Codegen.empty() : this.destination;
    }

    /**
     * Name of the event channel.
     * 
     */
    @Import(name="eventChannelName")
      private final @Nullable Output<String> eventChannelName;

    public Output<String> getEventChannelName() {
        return this.eventChannelName == null ? Codegen.empty() : this.eventChannelName;
    }

    /**
     * Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
     * the event channel and corresponding partner topic are deleted.
     * 
     */
    @Import(name="expirationTimeIfNotActivatedUtc")
      private final @Nullable Output<String> expirationTimeIfNotActivatedUtc;

    public Output<String> getExpirationTimeIfNotActivatedUtc() {
        return this.expirationTimeIfNotActivatedUtc == null ? Codegen.empty() : this.expirationTimeIfNotActivatedUtc;
    }

    /**
     * Information about the filter for the event channel.
     * 
     */
    @Import(name="filter")
      private final @Nullable Output<EventChannelFilterArgs> filter;

    public Output<EventChannelFilterArgs> getFilter() {
        return this.filter == null ? Codegen.empty() : this.filter;
    }

    /**
     * Name of the partner namespace.
     * 
     */
    @Import(name="partnerNamespaceName", required=true)
      private final Output<String> partnerNamespaceName;

    public Output<String> getPartnerNamespaceName() {
        return this.partnerNamespaceName;
    }

    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     * 
     */
    @Import(name="partnerTopicFriendlyDescription")
      private final @Nullable Output<String> partnerTopicFriendlyDescription;

    public Output<String> getPartnerTopicFriendlyDescription() {
        return this.partnerTopicFriendlyDescription == null ? Codegen.empty() : this.partnerTopicFriendlyDescription;
    }

    /**
     * The name of the resource group within the user's subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Source of the event channel. This represents a unique resource in the partner's resource model.
     * 
     */
    @Import(name="source")
      private final @Nullable Output<EventChannelSourceArgs> source;

    public Output<EventChannelSourceArgs> getSource() {
        return this.source == null ? Codegen.empty() : this.source;
    }

    public EventChannelArgs(
        @Nullable Output<EventChannelDestinationArgs> destination,
        @Nullable Output<String> eventChannelName,
        @Nullable Output<String> expirationTimeIfNotActivatedUtc,
        @Nullable Output<EventChannelFilterArgs> filter,
        Output<String> partnerNamespaceName,
        @Nullable Output<String> partnerTopicFriendlyDescription,
        Output<String> resourceGroupName,
        @Nullable Output<EventChannelSourceArgs> source) {
        this.destination = destination;
        this.eventChannelName = eventChannelName;
        this.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
        this.filter = filter;
        this.partnerNamespaceName = Objects.requireNonNull(partnerNamespaceName, "expected parameter 'partnerNamespaceName' to be non-null");
        this.partnerTopicFriendlyDescription = partnerTopicFriendlyDescription;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.source = source;
    }

    private EventChannelArgs() {
        this.destination = Codegen.empty();
        this.eventChannelName = Codegen.empty();
        this.expirationTimeIfNotActivatedUtc = Codegen.empty();
        this.filter = Codegen.empty();
        this.partnerNamespaceName = Codegen.empty();
        this.partnerTopicFriendlyDescription = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.source = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventChannelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<EventChannelDestinationArgs> destination;
        private @Nullable Output<String> eventChannelName;
        private @Nullable Output<String> expirationTimeIfNotActivatedUtc;
        private @Nullable Output<EventChannelFilterArgs> filter;
        private Output<String> partnerNamespaceName;
        private @Nullable Output<String> partnerTopicFriendlyDescription;
        private Output<String> resourceGroupName;
        private @Nullable Output<EventChannelSourceArgs> source;

        public Builder() {
    	      // Empty
        }

        public Builder(EventChannelArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destination = defaults.destination;
    	      this.eventChannelName = defaults.eventChannelName;
    	      this.expirationTimeIfNotActivatedUtc = defaults.expirationTimeIfNotActivatedUtc;
    	      this.filter = defaults.filter;
    	      this.partnerNamespaceName = defaults.partnerNamespaceName;
    	      this.partnerTopicFriendlyDescription = defaults.partnerTopicFriendlyDescription;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.source = defaults.source;
        }

        public Builder destination(@Nullable Output<EventChannelDestinationArgs> destination) {
            this.destination = destination;
            return this;
        }
        public Builder destination(@Nullable EventChannelDestinationArgs destination) {
            this.destination = Codegen.ofNullable(destination);
            return this;
        }
        public Builder eventChannelName(@Nullable Output<String> eventChannelName) {
            this.eventChannelName = eventChannelName;
            return this;
        }
        public Builder eventChannelName(@Nullable String eventChannelName) {
            this.eventChannelName = Codegen.ofNullable(eventChannelName);
            return this;
        }
        public Builder expirationTimeIfNotActivatedUtc(@Nullable Output<String> expirationTimeIfNotActivatedUtc) {
            this.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
            return this;
        }
        public Builder expirationTimeIfNotActivatedUtc(@Nullable String expirationTimeIfNotActivatedUtc) {
            this.expirationTimeIfNotActivatedUtc = Codegen.ofNullable(expirationTimeIfNotActivatedUtc);
            return this;
        }
        public Builder filter(@Nullable Output<EventChannelFilterArgs> filter) {
            this.filter = filter;
            return this;
        }
        public Builder filter(@Nullable EventChannelFilterArgs filter) {
            this.filter = Codegen.ofNullable(filter);
            return this;
        }
        public Builder partnerNamespaceName(Output<String> partnerNamespaceName) {
            this.partnerNamespaceName = Objects.requireNonNull(partnerNamespaceName);
            return this;
        }
        public Builder partnerNamespaceName(String partnerNamespaceName) {
            this.partnerNamespaceName = Output.of(Objects.requireNonNull(partnerNamespaceName));
            return this;
        }
        public Builder partnerTopicFriendlyDescription(@Nullable Output<String> partnerTopicFriendlyDescription) {
            this.partnerTopicFriendlyDescription = partnerTopicFriendlyDescription;
            return this;
        }
        public Builder partnerTopicFriendlyDescription(@Nullable String partnerTopicFriendlyDescription) {
            this.partnerTopicFriendlyDescription = Codegen.ofNullable(partnerTopicFriendlyDescription);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder source(@Nullable Output<EventChannelSourceArgs> source) {
            this.source = source;
            return this;
        }
        public Builder source(@Nullable EventChannelSourceArgs source) {
            this.source = Codegen.ofNullable(source);
            return this;
        }        public EventChannelArgs build() {
            return new EventChannelArgs(destination, eventChannelName, expirationTimeIfNotActivatedUtc, filter, partnerNamespaceName, partnerTopicFriendlyDescription, resourceGroupName, source);
        }
    }
}
