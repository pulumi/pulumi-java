// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.consumption;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.consumption.BudgetArgs;
import io.pulumi.azurenative.consumption.outputs.BudgetFilterResponse;
import io.pulumi.azurenative.consumption.outputs.BudgetTimePeriodResponse;
import io.pulumi.azurenative.consumption.outputs.CurrentSpendResponse;
import io.pulumi.azurenative.consumption.outputs.ForecastSpendResponse;
import io.pulumi.azurenative.consumption.outputs.NotificationResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * A budget resource.
 * API Version: 2019-10-01.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:consumption:Budget TestBudget subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/budgets/TestBudget 
 * ```
 * 
 */
@ResourceType(type="azure-native:consumption:Budget")
public class Budget extends io.pulumi.resources.CustomResource {
    /**
     * The total amount of cost to track with the budget
     * 
     */
    @OutputExport(name="amount", type=Double.class, parameters={})
    private Output<Double> amount;

    /**
     * @return The total amount of cost to track with the budget
     * 
     */
    public Output<Double> getAmount() {
        return this.amount;
    }
    /**
     * The category of the budget, whether the budget tracks cost or usage.
     * 
     */
    @OutputExport(name="category", type=String.class, parameters={})
    private Output<String> category;

    /**
     * @return The category of the budget, whether the budget tracks cost or usage.
     * 
     */
    public Output<String> getCategory() {
        return this.category;
    }
    /**
     * The current amount of cost which is being tracked for a budget.
     * 
     */
    @OutputExport(name="currentSpend", type=CurrentSpendResponse.class, parameters={})
    private Output<CurrentSpendResponse> currentSpend;

    /**
     * @return The current amount of cost which is being tracked for a budget.
     * 
     */
    public Output<CurrentSpendResponse> getCurrentSpend() {
        return this.currentSpend;
    }
    /**
     * eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     * 
     */
    @OutputExport(name="eTag", type=String.class, parameters={})
    private Output</* @Nullable */ String> eTag;

    /**
     * @return eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     * 
     */
    public Output</* @Nullable */ String> getETag() {
        return this.eTag;
    }
    /**
     * May be used to filter budgets by user-specified dimensions and/or tags.
     * 
     */
    @OutputExport(name="filter", type=BudgetFilterResponse.class, parameters={})
    private Output</* @Nullable */ BudgetFilterResponse> filter;

    /**
     * @return May be used to filter budgets by user-specified dimensions and/or tags.
     * 
     */
    public Output</* @Nullable */ BudgetFilterResponse> getFilter() {
        return this.filter;
    }
    /**
     * The forecasted cost which is being tracked for a budget.
     * 
     */
    @OutputExport(name="forecastSpend", type=ForecastSpendResponse.class, parameters={})
    private Output<ForecastSpendResponse> forecastSpend;

    /**
     * @return The forecasted cost which is being tracked for a budget.
     * 
     */
    public Output<ForecastSpendResponse> getForecastSpend() {
        return this.forecastSpend;
    }
    /**
     * Resource name.
     * 
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Dictionary of notifications associated with the budget. Budget can have up to five notifications.
     * 
     */
    @OutputExport(name="notifications", type=Map.class, parameters={String.class, NotificationResponse.class})
    private Output</* @Nullable */ Map<String,NotificationResponse>> notifications;

    /**
     * @return Dictionary of notifications associated with the budget. Budget can have up to five notifications.
     * 
     */
    public Output</* @Nullable */ Map<String,NotificationResponse>> getNotifications() {
        return this.notifications;
    }
    /**
     * The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
     * 
     */
    @OutputExport(name="timeGrain", type=String.class, parameters={})
    private Output<String> timeGrain;

    /**
     * @return The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
     * 
     */
    public Output<String> getTimeGrain() {
        return this.timeGrain;
    }
    /**
     * Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
     * 
     */
    @OutputExport(name="timePeriod", type=BudgetTimePeriodResponse.class, parameters={})
    private Output<BudgetTimePeriodResponse> timePeriod;

    /**
     * @return Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
     * 
     */
    public Output<BudgetTimePeriodResponse> getTimePeriod() {
        return this.timePeriod;
    }
    /**
     * Resource type.
     * 
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Budget(String name, BudgetArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:consumption:Budget", name, args == null ? BudgetArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Budget(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:consumption:Budget", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:consumption/v20190101:Budget").build()),
                Input.of(Alias.builder().setType("azure-native:consumption/v20190401preview:Budget").build()),
                Input.of(Alias.builder().setType("azure-native:consumption/v20190501:Budget").build()),
                Input.of(Alias.builder().setType("azure-native:consumption/v20190501preview:Budget").build()),
                Input.of(Alias.builder().setType("azure-native:consumption/v20190601:Budget").build()),
                Input.of(Alias.builder().setType("azure-native:consumption/v20191001:Budget").build()),
                Input.of(Alias.builder().setType("azure-native:consumption/v20191101:Budget").build()),
                Input.of(Alias.builder().setType("azure-native:consumption/v20210501:Budget").build()),
                Input.of(Alias.builder().setType("azure-native:consumption/v20211001:Budget").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Budget get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Budget(name, id, options);
    }
}
