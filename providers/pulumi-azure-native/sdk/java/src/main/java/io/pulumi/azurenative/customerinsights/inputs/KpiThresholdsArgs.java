// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;


/**
 * Defines the KPI Threshold limits.
 * 
 */
public final class KpiThresholdsArgs extends io.pulumi.resources.ResourceArgs {

    public static final KpiThresholdsArgs Empty = new KpiThresholdsArgs();

    /**
     * Whether or not the KPI is an increasing KPI.
     * 
     */
    @InputImport(name="increasingKpi", required=true)
    private final Input<Boolean> increasingKpi;

    public Input<Boolean> getIncreasingKpi() {
        return this.increasingKpi;
    }

    /**
     * The lower threshold limit.
     * 
     */
    @InputImport(name="lowerLimit", required=true)
    private final Input<Double> lowerLimit;

    public Input<Double> getLowerLimit() {
        return this.lowerLimit;
    }

    /**
     * The upper threshold limit.
     * 
     */
    @InputImport(name="upperLimit", required=true)
    private final Input<Double> upperLimit;

    public Input<Double> getUpperLimit() {
        return this.upperLimit;
    }

    public KpiThresholdsArgs(
        Input<Boolean> increasingKpi,
        Input<Double> lowerLimit,
        Input<Double> upperLimit) {
        this.increasingKpi = Objects.requireNonNull(increasingKpi, "expected parameter 'increasingKpi' to be non-null");
        this.lowerLimit = Objects.requireNonNull(lowerLimit, "expected parameter 'lowerLimit' to be non-null");
        this.upperLimit = Objects.requireNonNull(upperLimit, "expected parameter 'upperLimit' to be non-null");
    }

    private KpiThresholdsArgs() {
        this.increasingKpi = Input.empty();
        this.lowerLimit = Input.empty();
        this.upperLimit = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KpiThresholdsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Boolean> increasingKpi;
        private Input<Double> lowerLimit;
        private Input<Double> upperLimit;

        public Builder() {
    	      // Empty
        }

        public Builder(KpiThresholdsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.increasingKpi = defaults.increasingKpi;
    	      this.lowerLimit = defaults.lowerLimit;
    	      this.upperLimit = defaults.upperLimit;
        }

        public Builder setIncreasingKpi(Input<Boolean> increasingKpi) {
            this.increasingKpi = Objects.requireNonNull(increasingKpi);
            return this;
        }

        public Builder setIncreasingKpi(Boolean increasingKpi) {
            this.increasingKpi = Input.of(Objects.requireNonNull(increasingKpi));
            return this;
        }

        public Builder setLowerLimit(Input<Double> lowerLimit) {
            this.lowerLimit = Objects.requireNonNull(lowerLimit);
            return this;
        }

        public Builder setLowerLimit(Double lowerLimit) {
            this.lowerLimit = Input.of(Objects.requireNonNull(lowerLimit));
            return this;
        }

        public Builder setUpperLimit(Input<Double> upperLimit) {
            this.upperLimit = Objects.requireNonNull(upperLimit);
            return this;
        }

        public Builder setUpperLimit(Double upperLimit) {
            this.upperLimit = Input.of(Objects.requireNonNull(upperLimit));
            return this;
        }

        public KpiThresholdsArgs build() {
            return new KpiThresholdsArgs(increasingKpi, lowerLimit, upperLimit);
        }
    }
}
