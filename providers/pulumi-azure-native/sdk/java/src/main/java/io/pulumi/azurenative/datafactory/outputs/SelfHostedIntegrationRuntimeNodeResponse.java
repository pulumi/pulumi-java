// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class SelfHostedIntegrationRuntimeNodeResponse {
    /**
     * The integration runtime capabilities dictionary
     * 
     */
    private final Map<String,String> capabilities;
    /**
     * Maximum concurrent jobs on the integration runtime node.
     * 
     */
    private final Integer concurrentJobsLimit;
    /**
     * The time at which the integration runtime will expire in ISO8601 format.
     * 
     */
    private final String expiryTime;
    /**
     * URI for the host machine of the integration runtime.
     * 
     */
    private final String hostServiceUri;
    /**
     * Indicates whether this node is the active dispatcher for integration runtime requests.
     * 
     */
    private final Boolean isActiveDispatcher;
    /**
     * The most recent time at which the integration runtime was connected in ISO8601 format.
     * 
     */
    private final String lastConnectTime;
    /**
     * The last time for the integration runtime node update end.
     * 
     */
    private final String lastEndUpdateTime;
    /**
     * The time the node last started up.
     * 
     */
    private final String lastStartTime;
    /**
     * The last time for the integration runtime node update start.
     * 
     */
    private final String lastStartUpdateTime;
    /**
     * The integration runtime node last stop time.
     * 
     */
    private final String lastStopTime;
    /**
     * The result of the last integration runtime node update.
     * 
     */
    private final String lastUpdateResult;
    /**
     * Machine name of the integration runtime node.
     * 
     */
    private final String machineName;
    /**
     * The maximum concurrent jobs in this integration runtime.
     * 
     */
    private final Integer maxConcurrentJobs;
    /**
     * Name of the integration runtime node.
     * 
     */
    private final String nodeName;
    /**
     * The time at which the integration runtime node was registered in ISO8601 format.
     * 
     */
    private final String registerTime;
    /**
     * Status of the integration runtime node.
     * 
     */
    private final String status;
    /**
     * Version of the integration runtime node.
     * 
     */
    private final String version;
    /**
     * Status of the integration runtime node version.
     * 
     */
    private final String versionStatus;

    @CustomType.Constructor
    private SelfHostedIntegrationRuntimeNodeResponse(
        @CustomType.Parameter("capabilities") Map<String,String> capabilities,
        @CustomType.Parameter("concurrentJobsLimit") Integer concurrentJobsLimit,
        @CustomType.Parameter("expiryTime") String expiryTime,
        @CustomType.Parameter("hostServiceUri") String hostServiceUri,
        @CustomType.Parameter("isActiveDispatcher") Boolean isActiveDispatcher,
        @CustomType.Parameter("lastConnectTime") String lastConnectTime,
        @CustomType.Parameter("lastEndUpdateTime") String lastEndUpdateTime,
        @CustomType.Parameter("lastStartTime") String lastStartTime,
        @CustomType.Parameter("lastStartUpdateTime") String lastStartUpdateTime,
        @CustomType.Parameter("lastStopTime") String lastStopTime,
        @CustomType.Parameter("lastUpdateResult") String lastUpdateResult,
        @CustomType.Parameter("machineName") String machineName,
        @CustomType.Parameter("maxConcurrentJobs") Integer maxConcurrentJobs,
        @CustomType.Parameter("nodeName") String nodeName,
        @CustomType.Parameter("registerTime") String registerTime,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("version") String version,
        @CustomType.Parameter("versionStatus") String versionStatus) {
        this.capabilities = capabilities;
        this.concurrentJobsLimit = concurrentJobsLimit;
        this.expiryTime = expiryTime;
        this.hostServiceUri = hostServiceUri;
        this.isActiveDispatcher = isActiveDispatcher;
        this.lastConnectTime = lastConnectTime;
        this.lastEndUpdateTime = lastEndUpdateTime;
        this.lastStartTime = lastStartTime;
        this.lastStartUpdateTime = lastStartUpdateTime;
        this.lastStopTime = lastStopTime;
        this.lastUpdateResult = lastUpdateResult;
        this.machineName = machineName;
        this.maxConcurrentJobs = maxConcurrentJobs;
        this.nodeName = nodeName;
        this.registerTime = registerTime;
        this.status = status;
        this.version = version;
        this.versionStatus = versionStatus;
    }

    /**
     * The integration runtime capabilities dictionary
     * 
    */
    public Map<String,String> capabilities() {
        return this.capabilities;
    }
    /**
     * Maximum concurrent jobs on the integration runtime node.
     * 
    */
    public Integer concurrentJobsLimit() {
        return this.concurrentJobsLimit;
    }
    /**
     * The time at which the integration runtime will expire in ISO8601 format.
     * 
    */
    public String expiryTime() {
        return this.expiryTime;
    }
    /**
     * URI for the host machine of the integration runtime.
     * 
    */
    public String hostServiceUri() {
        return this.hostServiceUri;
    }
    /**
     * Indicates whether this node is the active dispatcher for integration runtime requests.
     * 
    */
    public Boolean isActiveDispatcher() {
        return this.isActiveDispatcher;
    }
    /**
     * The most recent time at which the integration runtime was connected in ISO8601 format.
     * 
    */
    public String lastConnectTime() {
        return this.lastConnectTime;
    }
    /**
     * The last time for the integration runtime node update end.
     * 
    */
    public String lastEndUpdateTime() {
        return this.lastEndUpdateTime;
    }
    /**
     * The time the node last started up.
     * 
    */
    public String lastStartTime() {
        return this.lastStartTime;
    }
    /**
     * The last time for the integration runtime node update start.
     * 
    */
    public String lastStartUpdateTime() {
        return this.lastStartUpdateTime;
    }
    /**
     * The integration runtime node last stop time.
     * 
    */
    public String lastStopTime() {
        return this.lastStopTime;
    }
    /**
     * The result of the last integration runtime node update.
     * 
    */
    public String lastUpdateResult() {
        return this.lastUpdateResult;
    }
    /**
     * Machine name of the integration runtime node.
     * 
    */
    public String machineName() {
        return this.machineName;
    }
    /**
     * The maximum concurrent jobs in this integration runtime.
     * 
    */
    public Integer maxConcurrentJobs() {
        return this.maxConcurrentJobs;
    }
    /**
     * Name of the integration runtime node.
     * 
    */
    public String nodeName() {
        return this.nodeName;
    }
    /**
     * The time at which the integration runtime node was registered in ISO8601 format.
     * 
    */
    public String registerTime() {
        return this.registerTime;
    }
    /**
     * Status of the integration runtime node.
     * 
    */
    public String status() {
        return this.status;
    }
    /**
     * Version of the integration runtime node.
     * 
    */
    public String version() {
        return this.version;
    }
    /**
     * Status of the integration runtime node version.
     * 
    */
    public String versionStatus() {
        return this.versionStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SelfHostedIntegrationRuntimeNodeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> capabilities;
        private Integer concurrentJobsLimit;
        private String expiryTime;
        private String hostServiceUri;
        private Boolean isActiveDispatcher;
        private String lastConnectTime;
        private String lastEndUpdateTime;
        private String lastStartTime;
        private String lastStartUpdateTime;
        private String lastStopTime;
        private String lastUpdateResult;
        private String machineName;
        private Integer maxConcurrentJobs;
        private String nodeName;
        private String registerTime;
        private String status;
        private String version;
        private String versionStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(SelfHostedIntegrationRuntimeNodeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capabilities = defaults.capabilities;
    	      this.concurrentJobsLimit = defaults.concurrentJobsLimit;
    	      this.expiryTime = defaults.expiryTime;
    	      this.hostServiceUri = defaults.hostServiceUri;
    	      this.isActiveDispatcher = defaults.isActiveDispatcher;
    	      this.lastConnectTime = defaults.lastConnectTime;
    	      this.lastEndUpdateTime = defaults.lastEndUpdateTime;
    	      this.lastStartTime = defaults.lastStartTime;
    	      this.lastStartUpdateTime = defaults.lastStartUpdateTime;
    	      this.lastStopTime = defaults.lastStopTime;
    	      this.lastUpdateResult = defaults.lastUpdateResult;
    	      this.machineName = defaults.machineName;
    	      this.maxConcurrentJobs = defaults.maxConcurrentJobs;
    	      this.nodeName = defaults.nodeName;
    	      this.registerTime = defaults.registerTime;
    	      this.status = defaults.status;
    	      this.version = defaults.version;
    	      this.versionStatus = defaults.versionStatus;
        }

        public Builder capabilities(Map<String,String> capabilities) {
            this.capabilities = Objects.requireNonNull(capabilities);
            return this;
        }
        public Builder concurrentJobsLimit(Integer concurrentJobsLimit) {
            this.concurrentJobsLimit = Objects.requireNonNull(concurrentJobsLimit);
            return this;
        }
        public Builder expiryTime(String expiryTime) {
            this.expiryTime = Objects.requireNonNull(expiryTime);
            return this;
        }
        public Builder hostServiceUri(String hostServiceUri) {
            this.hostServiceUri = Objects.requireNonNull(hostServiceUri);
            return this;
        }
        public Builder isActiveDispatcher(Boolean isActiveDispatcher) {
            this.isActiveDispatcher = Objects.requireNonNull(isActiveDispatcher);
            return this;
        }
        public Builder lastConnectTime(String lastConnectTime) {
            this.lastConnectTime = Objects.requireNonNull(lastConnectTime);
            return this;
        }
        public Builder lastEndUpdateTime(String lastEndUpdateTime) {
            this.lastEndUpdateTime = Objects.requireNonNull(lastEndUpdateTime);
            return this;
        }
        public Builder lastStartTime(String lastStartTime) {
            this.lastStartTime = Objects.requireNonNull(lastStartTime);
            return this;
        }
        public Builder lastStartUpdateTime(String lastStartUpdateTime) {
            this.lastStartUpdateTime = Objects.requireNonNull(lastStartUpdateTime);
            return this;
        }
        public Builder lastStopTime(String lastStopTime) {
            this.lastStopTime = Objects.requireNonNull(lastStopTime);
            return this;
        }
        public Builder lastUpdateResult(String lastUpdateResult) {
            this.lastUpdateResult = Objects.requireNonNull(lastUpdateResult);
            return this;
        }
        public Builder machineName(String machineName) {
            this.machineName = Objects.requireNonNull(machineName);
            return this;
        }
        public Builder maxConcurrentJobs(Integer maxConcurrentJobs) {
            this.maxConcurrentJobs = Objects.requireNonNull(maxConcurrentJobs);
            return this;
        }
        public Builder nodeName(String nodeName) {
            this.nodeName = Objects.requireNonNull(nodeName);
            return this;
        }
        public Builder registerTime(String registerTime) {
            this.registerTime = Objects.requireNonNull(registerTime);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder versionStatus(String versionStatus) {
            this.versionStatus = Objects.requireNonNull(versionStatus);
            return this;
        }        public SelfHostedIntegrationRuntimeNodeResponse build() {
            return new SelfHostedIntegrationRuntimeNodeResponse(capabilities, concurrentJobsLimit, expiryTime, hostServiceUri, isActiveDispatcher, lastConnectTime, lastEndUpdateTime, lastStartTime, lastStartUpdateTime, lastStopTime, lastUpdateResult, machineName, maxConcurrentJobs, nodeName, registerTime, status, version, versionStatus);
        }
    }
}
