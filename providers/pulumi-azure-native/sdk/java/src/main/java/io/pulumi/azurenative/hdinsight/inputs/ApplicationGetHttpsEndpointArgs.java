// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.hdinsight.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Gets the application HTTP endpoints.
 * 
 */
public final class ApplicationGetHttpsEndpointArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationGetHttpsEndpointArgs Empty = new ApplicationGetHttpsEndpointArgs();

    /**
     * The list of access modes for the application.
     * 
     */
    @Import(name="accessModes")
      private final @Nullable Output<List<String>> accessModes;

    public Output<List<String>> getAccessModes() {
        return this.accessModes == null ? Output.empty() : this.accessModes;
    }

    /**
     * The destination port to connect to.
     * 
     */
    @Import(name="destinationPort")
      private final @Nullable Output<Integer> destinationPort;

    public Output<Integer> getDestinationPort() {
        return this.destinationPort == null ? Output.empty() : this.destinationPort;
    }

    /**
     * The value indicates whether to disable GatewayAuth.
     * 
     */
    @Import(name="disableGatewayAuth")
      private final @Nullable Output<Boolean> disableGatewayAuth;

    public Output<Boolean> getDisableGatewayAuth() {
        return this.disableGatewayAuth == null ? Output.empty() : this.disableGatewayAuth;
    }

    /**
     * The private ip address of the endpoint.
     * 
     */
    @Import(name="privateIPAddress")
      private final @Nullable Output<String> privateIPAddress;

    public Output<String> getPrivateIPAddress() {
        return this.privateIPAddress == null ? Output.empty() : this.privateIPAddress;
    }

    /**
     * The subdomain suffix of the application.
     * 
     */
    @Import(name="subDomainSuffix")
      private final @Nullable Output<String> subDomainSuffix;

    public Output<String> getSubDomainSuffix() {
        return this.subDomainSuffix == null ? Output.empty() : this.subDomainSuffix;
    }

    public ApplicationGetHttpsEndpointArgs(
        @Nullable Output<List<String>> accessModes,
        @Nullable Output<Integer> destinationPort,
        @Nullable Output<Boolean> disableGatewayAuth,
        @Nullable Output<String> privateIPAddress,
        @Nullable Output<String> subDomainSuffix) {
        this.accessModes = accessModes;
        this.destinationPort = destinationPort;
        this.disableGatewayAuth = disableGatewayAuth;
        this.privateIPAddress = privateIPAddress;
        this.subDomainSuffix = subDomainSuffix;
    }

    private ApplicationGetHttpsEndpointArgs() {
        this.accessModes = Output.empty();
        this.destinationPort = Output.empty();
        this.disableGatewayAuth = Output.empty();
        this.privateIPAddress = Output.empty();
        this.subDomainSuffix = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGetHttpsEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> accessModes;
        private @Nullable Output<Integer> destinationPort;
        private @Nullable Output<Boolean> disableGatewayAuth;
        private @Nullable Output<String> privateIPAddress;
        private @Nullable Output<String> subDomainSuffix;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGetHttpsEndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessModes = defaults.accessModes;
    	      this.destinationPort = defaults.destinationPort;
    	      this.disableGatewayAuth = defaults.disableGatewayAuth;
    	      this.privateIPAddress = defaults.privateIPAddress;
    	      this.subDomainSuffix = defaults.subDomainSuffix;
        }

        public Builder accessModes(@Nullable Output<List<String>> accessModes) {
            this.accessModes = accessModes;
            return this;
        }
        public Builder accessModes(@Nullable List<String> accessModes) {
            this.accessModes = Output.ofNullable(accessModes);
            return this;
        }
        public Builder accessModes(String... accessModes) {
            return accessModes(List.of(accessModes));
        }
        public Builder destinationPort(@Nullable Output<Integer> destinationPort) {
            this.destinationPort = destinationPort;
            return this;
        }
        public Builder destinationPort(@Nullable Integer destinationPort) {
            this.destinationPort = Output.ofNullable(destinationPort);
            return this;
        }
        public Builder disableGatewayAuth(@Nullable Output<Boolean> disableGatewayAuth) {
            this.disableGatewayAuth = disableGatewayAuth;
            return this;
        }
        public Builder disableGatewayAuth(@Nullable Boolean disableGatewayAuth) {
            this.disableGatewayAuth = Output.ofNullable(disableGatewayAuth);
            return this;
        }
        public Builder privateIPAddress(@Nullable Output<String> privateIPAddress) {
            this.privateIPAddress = privateIPAddress;
            return this;
        }
        public Builder privateIPAddress(@Nullable String privateIPAddress) {
            this.privateIPAddress = Output.ofNullable(privateIPAddress);
            return this;
        }
        public Builder subDomainSuffix(@Nullable Output<String> subDomainSuffix) {
            this.subDomainSuffix = subDomainSuffix;
            return this;
        }
        public Builder subDomainSuffix(@Nullable String subDomainSuffix) {
            this.subDomainSuffix = Output.ofNullable(subDomainSuffix);
            return this;
        }        public ApplicationGetHttpsEndpointArgs build() {
            return new ApplicationGetHttpsEndpointArgs(accessModes, destinationPort, disableGatewayAuth, privateIPAddress, subDomainSuffix);
        }
    }
}
