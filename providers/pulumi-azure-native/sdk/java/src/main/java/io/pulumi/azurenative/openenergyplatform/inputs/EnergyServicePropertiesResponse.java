// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.openenergyplatform.inputs;

import io.pulumi.azurenative.openenergyplatform.inputs.DataPartitionNamesResponse;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnergyServicePropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final EnergyServicePropertiesResponse Empty = new EnergyServicePropertiesResponse();

    @Import(name="authAppId")
      private final @Nullable String authAppId;

    public Optional<String> getAuthAppId() {
        return this.authAppId == null ? Optional.empty() : Optional.ofNullable(this.authAppId);
    }

    @Import(name="dataPartitionNames")
      private final @Nullable List<DataPartitionNamesResponse> dataPartitionNames;

    public List<DataPartitionNamesResponse> getDataPartitionNames() {
        return this.dataPartitionNames == null ? List.of() : this.dataPartitionNames;
    }

    @Import(name="dnsName", required=true)
      private final String dnsName;

    public String getDnsName() {
        return this.dnsName;
    }

    @Import(name="provisioningState", required=true)
      private final String provisioningState;

    public String getProvisioningState() {
        return this.provisioningState;
    }

    public EnergyServicePropertiesResponse(
        @Nullable String authAppId,
        @Nullable List<DataPartitionNamesResponse> dataPartitionNames,
        String dnsName,
        String provisioningState) {
        this.authAppId = authAppId;
        this.dataPartitionNames = dataPartitionNames;
        this.dnsName = Objects.requireNonNull(dnsName, "expected parameter 'dnsName' to be non-null");
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
    }

    private EnergyServicePropertiesResponse() {
        this.authAppId = null;
        this.dataPartitionNames = List.of();
        this.dnsName = null;
        this.provisioningState = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnergyServicePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String authAppId;
        private @Nullable List<DataPartitionNamesResponse> dataPartitionNames;
        private String dnsName;
        private String provisioningState;

        public Builder() {
    	      // Empty
        }

        public Builder(EnergyServicePropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authAppId = defaults.authAppId;
    	      this.dataPartitionNames = defaults.dataPartitionNames;
    	      this.dnsName = defaults.dnsName;
    	      this.provisioningState = defaults.provisioningState;
        }

        public Builder authAppId(@Nullable String authAppId) {
            this.authAppId = authAppId;
            return this;
        }
        public Builder dataPartitionNames(@Nullable List<DataPartitionNamesResponse> dataPartitionNames) {
            this.dataPartitionNames = dataPartitionNames;
            return this;
        }
        public Builder dataPartitionNames(DataPartitionNamesResponse... dataPartitionNames) {
            return dataPartitionNames(List.of(dataPartitionNames));
        }
        public Builder dnsName(String dnsName) {
            this.dnsName = Objects.requireNonNull(dnsName);
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }        public EnergyServicePropertiesResponse build() {
            return new EnergyServicePropertiesResponse(authAppId, dataPartitionNames, dnsName, provisioningState);
        }
    }
}
