// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.inputs.BackendAddressPoolArgs;
import io.pulumi.azurenative.network.inputs.ExtendedLocationArgs;
import io.pulumi.azurenative.network.inputs.FrontendIPConfigurationArgs;
import io.pulumi.azurenative.network.inputs.InboundNatPoolArgs;
import io.pulumi.azurenative.network.inputs.InboundNatRuleArgs;
import io.pulumi.azurenative.network.inputs.LoadBalancerSkuArgs;
import io.pulumi.azurenative.network.inputs.LoadBalancingRuleArgs;
import io.pulumi.azurenative.network.inputs.OutboundRuleArgs;
import io.pulumi.azurenative.network.inputs.ProbeArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LoadBalancerArgs extends io.pulumi.resources.ResourceArgs {

    public static final LoadBalancerArgs Empty = new LoadBalancerArgs();

    /**
     * Collection of backend address pools used by a load balancer.
     * 
     */
    @Import(name="backendAddressPools")
      private final @Nullable Output<List<BackendAddressPoolArgs>> backendAddressPools;

    public Output<List<BackendAddressPoolArgs>> getBackendAddressPools() {
        return this.backendAddressPools == null ? Output.empty() : this.backendAddressPools;
    }

    /**
     * The extended location of the load balancer.
     * 
     */
    @Import(name="extendedLocation")
      private final @Nullable Output<ExtendedLocationArgs> extendedLocation;

    public Output<ExtendedLocationArgs> getExtendedLocation() {
        return this.extendedLocation == null ? Output.empty() : this.extendedLocation;
    }

    /**
     * Object representing the frontend IPs to be used for the load balancer.
     * 
     */
    @Import(name="frontendIPConfigurations")
      private final @Nullable Output<List<FrontendIPConfigurationArgs>> frontendIPConfigurations;

    public Output<List<FrontendIPConfigurationArgs>> getFrontendIPConfigurations() {
        return this.frontendIPConfigurations == null ? Output.empty() : this.frontendIPConfigurations;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically for each NIC associated with the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT rules.
     * 
     */
    @Import(name="inboundNatPools")
      private final @Nullable Output<List<InboundNatPoolArgs>> inboundNatPools;

    public Output<List<InboundNatPoolArgs>> getInboundNatPools() {
        return this.inboundNatPools == null ? Output.empty() : this.inboundNatPools;
    }

    /**
     * Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules.
     * 
     */
    @Import(name="inboundNatRules")
      private final @Nullable Output<List<InboundNatRuleArgs>> inboundNatRules;

    public Output<List<InboundNatRuleArgs>> getInboundNatRules() {
        return this.inboundNatRules == null ? Output.empty() : this.inboundNatRules;
    }

    /**
     * The name of the load balancer.
     * 
     */
    @Import(name="loadBalancerName")
      private final @Nullable Output<String> loadBalancerName;

    public Output<String> getLoadBalancerName() {
        return this.loadBalancerName == null ? Output.empty() : this.loadBalancerName;
    }

    /**
     * Object collection representing the load balancing rules Gets the provisioning.
     * 
     */
    @Import(name="loadBalancingRules")
      private final @Nullable Output<List<LoadBalancingRuleArgs>> loadBalancingRules;

    public Output<List<LoadBalancingRuleArgs>> getLoadBalancingRules() {
        return this.loadBalancingRules == null ? Output.empty() : this.loadBalancingRules;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The outbound rules.
     * 
     */
    @Import(name="outboundRules")
      private final @Nullable Output<List<OutboundRuleArgs>> outboundRules;

    public Output<List<OutboundRuleArgs>> getOutboundRules() {
        return this.outboundRules == null ? Output.empty() : this.outboundRules;
    }

    /**
     * Collection of probe objects used in the load balancer.
     * 
     */
    @Import(name="probes")
      private final @Nullable Output<List<ProbeArgs>> probes;

    public Output<List<ProbeArgs>> getProbes() {
        return this.probes == null ? Output.empty() : this.probes;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The load balancer SKU.
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<LoadBalancerSkuArgs> sku;

    public Output<LoadBalancerSkuArgs> getSku() {
        return this.sku == null ? Output.empty() : this.sku;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public LoadBalancerArgs(
        @Nullable Output<List<BackendAddressPoolArgs>> backendAddressPools,
        @Nullable Output<ExtendedLocationArgs> extendedLocation,
        @Nullable Output<List<FrontendIPConfigurationArgs>> frontendIPConfigurations,
        @Nullable Output<String> id,
        @Nullable Output<List<InboundNatPoolArgs>> inboundNatPools,
        @Nullable Output<List<InboundNatRuleArgs>> inboundNatRules,
        @Nullable Output<String> loadBalancerName,
        @Nullable Output<List<LoadBalancingRuleArgs>> loadBalancingRules,
        @Nullable Output<String> location,
        @Nullable Output<List<OutboundRuleArgs>> outboundRules,
        @Nullable Output<List<ProbeArgs>> probes,
        Output<String> resourceGroupName,
        @Nullable Output<LoadBalancerSkuArgs> sku,
        @Nullable Output<Map<String,String>> tags) {
        this.backendAddressPools = backendAddressPools;
        this.extendedLocation = extendedLocation;
        this.frontendIPConfigurations = frontendIPConfigurations;
        this.id = id;
        this.inboundNatPools = inboundNatPools;
        this.inboundNatRules = inboundNatRules;
        this.loadBalancerName = loadBalancerName;
        this.loadBalancingRules = loadBalancingRules;
        this.location = location;
        this.outboundRules = outboundRules;
        this.probes = probes;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.tags = tags;
    }

    private LoadBalancerArgs() {
        this.backendAddressPools = Output.empty();
        this.extendedLocation = Output.empty();
        this.frontendIPConfigurations = Output.empty();
        this.id = Output.empty();
        this.inboundNatPools = Output.empty();
        this.inboundNatRules = Output.empty();
        this.loadBalancerName = Output.empty();
        this.loadBalancingRules = Output.empty();
        this.location = Output.empty();
        this.outboundRules = Output.empty();
        this.probes = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sku = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<BackendAddressPoolArgs>> backendAddressPools;
        private @Nullable Output<ExtendedLocationArgs> extendedLocation;
        private @Nullable Output<List<FrontendIPConfigurationArgs>> frontendIPConfigurations;
        private @Nullable Output<String> id;
        private @Nullable Output<List<InboundNatPoolArgs>> inboundNatPools;
        private @Nullable Output<List<InboundNatRuleArgs>> inboundNatRules;
        private @Nullable Output<String> loadBalancerName;
        private @Nullable Output<List<LoadBalancingRuleArgs>> loadBalancingRules;
        private @Nullable Output<String> location;
        private @Nullable Output<List<OutboundRuleArgs>> outboundRules;
        private @Nullable Output<List<ProbeArgs>> probes;
        private Output<String> resourceGroupName;
        private @Nullable Output<LoadBalancerSkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPools = defaults.backendAddressPools;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.frontendIPConfigurations = defaults.frontendIPConfigurations;
    	      this.id = defaults.id;
    	      this.inboundNatPools = defaults.inboundNatPools;
    	      this.inboundNatRules = defaults.inboundNatRules;
    	      this.loadBalancerName = defaults.loadBalancerName;
    	      this.loadBalancingRules = defaults.loadBalancingRules;
    	      this.location = defaults.location;
    	      this.outboundRules = defaults.outboundRules;
    	      this.probes = defaults.probes;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder backendAddressPools(@Nullable Output<List<BackendAddressPoolArgs>> backendAddressPools) {
            this.backendAddressPools = backendAddressPools;
            return this;
        }
        public Builder backendAddressPools(@Nullable List<BackendAddressPoolArgs> backendAddressPools) {
            this.backendAddressPools = Output.ofNullable(backendAddressPools);
            return this;
        }
        public Builder backendAddressPools(BackendAddressPoolArgs... backendAddressPools) {
            return backendAddressPools(List.of(backendAddressPools));
        }
        public Builder extendedLocation(@Nullable Output<ExtendedLocationArgs> extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }
        public Builder extendedLocation(@Nullable ExtendedLocationArgs extendedLocation) {
            this.extendedLocation = Output.ofNullable(extendedLocation);
            return this;
        }
        public Builder frontendIPConfigurations(@Nullable Output<List<FrontendIPConfigurationArgs>> frontendIPConfigurations) {
            this.frontendIPConfigurations = frontendIPConfigurations;
            return this;
        }
        public Builder frontendIPConfigurations(@Nullable List<FrontendIPConfigurationArgs> frontendIPConfigurations) {
            this.frontendIPConfigurations = Output.ofNullable(frontendIPConfigurations);
            return this;
        }
        public Builder frontendIPConfigurations(FrontendIPConfigurationArgs... frontendIPConfigurations) {
            return frontendIPConfigurations(List.of(frontendIPConfigurations));
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }
        public Builder inboundNatPools(@Nullable Output<List<InboundNatPoolArgs>> inboundNatPools) {
            this.inboundNatPools = inboundNatPools;
            return this;
        }
        public Builder inboundNatPools(@Nullable List<InboundNatPoolArgs> inboundNatPools) {
            this.inboundNatPools = Output.ofNullable(inboundNatPools);
            return this;
        }
        public Builder inboundNatPools(InboundNatPoolArgs... inboundNatPools) {
            return inboundNatPools(List.of(inboundNatPools));
        }
        public Builder inboundNatRules(@Nullable Output<List<InboundNatRuleArgs>> inboundNatRules) {
            this.inboundNatRules = inboundNatRules;
            return this;
        }
        public Builder inboundNatRules(@Nullable List<InboundNatRuleArgs> inboundNatRules) {
            this.inboundNatRules = Output.ofNullable(inboundNatRules);
            return this;
        }
        public Builder inboundNatRules(InboundNatRuleArgs... inboundNatRules) {
            return inboundNatRules(List.of(inboundNatRules));
        }
        public Builder loadBalancerName(@Nullable Output<String> loadBalancerName) {
            this.loadBalancerName = loadBalancerName;
            return this;
        }
        public Builder loadBalancerName(@Nullable String loadBalancerName) {
            this.loadBalancerName = Output.ofNullable(loadBalancerName);
            return this;
        }
        public Builder loadBalancingRules(@Nullable Output<List<LoadBalancingRuleArgs>> loadBalancingRules) {
            this.loadBalancingRules = loadBalancingRules;
            return this;
        }
        public Builder loadBalancingRules(@Nullable List<LoadBalancingRuleArgs> loadBalancingRules) {
            this.loadBalancingRules = Output.ofNullable(loadBalancingRules);
            return this;
        }
        public Builder loadBalancingRules(LoadBalancingRuleArgs... loadBalancingRules) {
            return loadBalancingRules(List.of(loadBalancingRules));
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder outboundRules(@Nullable Output<List<OutboundRuleArgs>> outboundRules) {
            this.outboundRules = outboundRules;
            return this;
        }
        public Builder outboundRules(@Nullable List<OutboundRuleArgs> outboundRules) {
            this.outboundRules = Output.ofNullable(outboundRules);
            return this;
        }
        public Builder outboundRules(OutboundRuleArgs... outboundRules) {
            return outboundRules(List.of(outboundRules));
        }
        public Builder probes(@Nullable Output<List<ProbeArgs>> probes) {
            this.probes = probes;
            return this;
        }
        public Builder probes(@Nullable List<ProbeArgs> probes) {
            this.probes = Output.ofNullable(probes);
            return this;
        }
        public Builder probes(ProbeArgs... probes) {
            return probes(List.of(probes));
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sku(@Nullable Output<LoadBalancerSkuArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable LoadBalancerSkuArgs sku) {
            this.sku = Output.ofNullable(sku);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }        public LoadBalancerArgs build() {
            return new LoadBalancerArgs(backendAddressPools, extendedLocation, frontendIPConfigurations, id, inboundNatPools, inboundNatRules, loadBalancerName, loadBalancingRules, location, outboundRules, probes, resourceGroupName, sku, tags);
        }
    }
}
