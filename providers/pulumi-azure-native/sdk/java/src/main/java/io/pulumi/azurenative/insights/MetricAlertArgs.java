// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights;

import io.pulumi.azurenative.insights.inputs.MetricAlertActionArgs;
import io.pulumi.azurenative.insights.inputs.MetricAlertMultipleResourceMultipleMetricCriteriaArgs;
import io.pulumi.azurenative.insights.inputs.MetricAlertSingleResourceMultipleMetricCriteriaArgs;
import io.pulumi.azurenative.insights.inputs.WebtestLocationAvailabilityCriteriaArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MetricAlertArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricAlertArgs Empty = new MetricAlertArgs();

    /**
     * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
     * 
     */
    @InputImport(name="actions")
        private final @Nullable Input<List<MetricAlertActionArgs>> actions;

    public Input<List<MetricAlertActionArgs>> getActions() {
        return this.actions == null ? Input.empty() : this.actions;
    }

    /**
     * the flag that indicates whether the alert should be auto resolved or not. The default is true.
     * 
     */
    @InputImport(name="autoMitigate")
        private final @Nullable Input<Boolean> autoMitigate;

    public Input<Boolean> getAutoMitigate() {
        return this.autoMitigate == null ? Input.empty() : this.autoMitigate;
    }

    /**
     * defines the specific alert criteria information.
     * 
     */
    @InputImport(name="criteria", required=true)
        private final Input<Object> criteria;

    public Input<Object> getCriteria() {
        return this.criteria;
    }

    /**
     * the description of the metric alert that will be included in the alert email.
     * 
     */
    @InputImport(name="description")
        private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * the flag that indicates whether the metric alert is enabled.
     * 
     */
    @InputImport(name="enabled", required=true)
        private final Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled;
    }

    /**
     * how often the metric alert is evaluated represented in ISO 8601 duration format.
     * 
     */
    @InputImport(name="evaluationFrequency", required=true)
        private final Input<String> evaluationFrequency;

    public Input<String> getEvaluationFrequency() {
        return this.evaluationFrequency;
    }

    /**
     * Resource location
     * 
     */
    @InputImport(name="location")
        private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the rule.
     * 
     */
    @InputImport(name="ruleName")
        private final @Nullable Input<String> ruleName;

    public Input<String> getRuleName() {
        return this.ruleName == null ? Input.empty() : this.ruleName;
    }

    /**
     * the list of resource id's that this metric alert is scoped to.
     * 
     */
    @InputImport(name="scopes", required=true)
        private final Input<List<String>> scopes;

    public Input<List<String>> getScopes() {
        return this.scopes;
    }

    /**
     * Alert severity {0, 1, 2, 3, 4}
     * 
     */
    @InputImport(name="severity", required=true)
        private final Input<Integer> severity;

    public Input<Integer> getSeverity() {
        return this.severity;
    }

    /**
     * Resource tags
     * 
     */
    @InputImport(name="tags")
        private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * the region of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     * 
     */
    @InputImport(name="targetResourceRegion")
        private final @Nullable Input<String> targetResourceRegion;

    public Input<String> getTargetResourceRegion() {
        return this.targetResourceRegion == null ? Input.empty() : this.targetResourceRegion;
    }

    /**
     * the resource type of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     * 
     */
    @InputImport(name="targetResourceType")
        private final @Nullable Input<String> targetResourceType;

    public Input<String> getTargetResourceType() {
        return this.targetResourceType == null ? Input.empty() : this.targetResourceType;
    }

    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
     * 
     */
    @InputImport(name="windowSize", required=true)
        private final Input<String> windowSize;

    public Input<String> getWindowSize() {
        return this.windowSize;
    }

    public MetricAlertArgs(
        @Nullable Input<List<MetricAlertActionArgs>> actions,
        @Nullable Input<Boolean> autoMitigate,
        Input<Object> criteria,
        @Nullable Input<String> description,
        Input<Boolean> enabled,
        Input<String> evaluationFrequency,
        @Nullable Input<String> location,
        Input<String> resourceGroupName,
        @Nullable Input<String> ruleName,
        Input<List<String>> scopes,
        Input<Integer> severity,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> targetResourceRegion,
        @Nullable Input<String> targetResourceType,
        Input<String> windowSize) {
        this.actions = actions;
        this.autoMitigate = autoMitigate;
        this.criteria = Objects.requireNonNull(criteria, "expected parameter 'criteria' to be non-null");
        this.description = description;
        this.enabled = Objects.requireNonNull(enabled, "expected parameter 'enabled' to be non-null");
        this.evaluationFrequency = Objects.requireNonNull(evaluationFrequency, "expected parameter 'evaluationFrequency' to be non-null");
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.ruleName = ruleName;
        this.scopes = Objects.requireNonNull(scopes, "expected parameter 'scopes' to be non-null");
        this.severity = Objects.requireNonNull(severity, "expected parameter 'severity' to be non-null");
        this.tags = tags;
        this.targetResourceRegion = targetResourceRegion;
        this.targetResourceType = targetResourceType;
        this.windowSize = Objects.requireNonNull(windowSize, "expected parameter 'windowSize' to be non-null");
    }

    private MetricAlertArgs() {
        this.actions = Input.empty();
        this.autoMitigate = Input.empty();
        this.criteria = Input.empty();
        this.description = Input.empty();
        this.enabled = Input.empty();
        this.evaluationFrequency = Input.empty();
        this.location = Input.empty();
        this.resourceGroupName = Input.empty();
        this.ruleName = Input.empty();
        this.scopes = Input.empty();
        this.severity = Input.empty();
        this.tags = Input.empty();
        this.targetResourceRegion = Input.empty();
        this.targetResourceType = Input.empty();
        this.windowSize = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricAlertArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<MetricAlertActionArgs>> actions;
        private @Nullable Input<Boolean> autoMitigate;
        private Input<Object> criteria;
        private @Nullable Input<String> description;
        private Input<Boolean> enabled;
        private Input<String> evaluationFrequency;
        private @Nullable Input<String> location;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> ruleName;
        private Input<List<String>> scopes;
        private Input<Integer> severity;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> targetResourceRegion;
        private @Nullable Input<String> targetResourceType;
        private Input<String> windowSize;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricAlertArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.autoMitigate = defaults.autoMitigate;
    	      this.criteria = defaults.criteria;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.evaluationFrequency = defaults.evaluationFrequency;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.ruleName = defaults.ruleName;
    	      this.scopes = defaults.scopes;
    	      this.severity = defaults.severity;
    	      this.tags = defaults.tags;
    	      this.targetResourceRegion = defaults.targetResourceRegion;
    	      this.targetResourceType = defaults.targetResourceType;
    	      this.windowSize = defaults.windowSize;
        }

        public Builder setActions(@Nullable Input<List<MetricAlertActionArgs>> actions) {
            this.actions = actions;
            return this;
        }

        public Builder setActions(@Nullable List<MetricAlertActionArgs> actions) {
            this.actions = Input.ofNullable(actions);
            return this;
        }

        public Builder setAutoMitigate(@Nullable Input<Boolean> autoMitigate) {
            this.autoMitigate = autoMitigate;
            return this;
        }

        public Builder setAutoMitigate(@Nullable Boolean autoMitigate) {
            this.autoMitigate = Input.ofNullable(autoMitigate);
            return this;
        }

        public Builder setCriteria(Input<Object> criteria) {
            this.criteria = Objects.requireNonNull(criteria);
            return this;
        }

        public Builder setCriteria(Object criteria) {
            this.criteria = Input.of(Objects.requireNonNull(criteria));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEnabled(Input<Boolean> enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }

        public Builder setEnabled(Boolean enabled) {
            this.enabled = Input.of(Objects.requireNonNull(enabled));
            return this;
        }

        public Builder setEvaluationFrequency(Input<String> evaluationFrequency) {
            this.evaluationFrequency = Objects.requireNonNull(evaluationFrequency);
            return this;
        }

        public Builder setEvaluationFrequency(String evaluationFrequency) {
            this.evaluationFrequency = Input.of(Objects.requireNonNull(evaluationFrequency));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setRuleName(@Nullable Input<String> ruleName) {
            this.ruleName = ruleName;
            return this;
        }

        public Builder setRuleName(@Nullable String ruleName) {
            this.ruleName = Input.ofNullable(ruleName);
            return this;
        }

        public Builder setScopes(Input<List<String>> scopes) {
            this.scopes = Objects.requireNonNull(scopes);
            return this;
        }

        public Builder setScopes(List<String> scopes) {
            this.scopes = Input.of(Objects.requireNonNull(scopes));
            return this;
        }

        public Builder setSeverity(Input<Integer> severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }

        public Builder setSeverity(Integer severity) {
            this.severity = Input.of(Objects.requireNonNull(severity));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTargetResourceRegion(@Nullable Input<String> targetResourceRegion) {
            this.targetResourceRegion = targetResourceRegion;
            return this;
        }

        public Builder setTargetResourceRegion(@Nullable String targetResourceRegion) {
            this.targetResourceRegion = Input.ofNullable(targetResourceRegion);
            return this;
        }

        public Builder setTargetResourceType(@Nullable Input<String> targetResourceType) {
            this.targetResourceType = targetResourceType;
            return this;
        }

        public Builder setTargetResourceType(@Nullable String targetResourceType) {
            this.targetResourceType = Input.ofNullable(targetResourceType);
            return this;
        }

        public Builder setWindowSize(Input<String> windowSize) {
            this.windowSize = Objects.requireNonNull(windowSize);
            return this;
        }

        public Builder setWindowSize(String windowSize) {
            this.windowSize = Input.of(Objects.requireNonNull(windowSize));
            return this;
        }
        public MetricAlertArgs build() {
            return new MetricAlertArgs(actions, autoMitigate, criteria, description, enabled, evaluationFrequency, location, resourceGroupName, ruleName, scopes, severity, tags, targetResourceRegion, targetResourceType, windowSize);
        }
    }
}
