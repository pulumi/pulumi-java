// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the properties of a rectangular window applied to the input media before processing it.
 * 
 */
public final class RectangleArgs extends io.pulumi.resources.ResourceArgs {

    public static final RectangleArgs Empty = new RectangleArgs();

    /**
     * The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
     * 
     */
    @Import(name="height")
      private final @Nullable Output<String> height;

    public Output<String> height() {
        return this.height == null ? Codegen.empty() : this.height;
    }

    /**
     * The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
     * 
     */
    @Import(name="left")
      private final @Nullable Output<String> left;

    public Output<String> left() {
        return this.left == null ? Codegen.empty() : this.left;
    }

    /**
     * The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
     * 
     */
    @Import(name="top")
      private final @Nullable Output<String> top;

    public Output<String> top() {
        return this.top == null ? Codegen.empty() : this.top;
    }

    /**
     * The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
     * 
     */
    @Import(name="width")
      private final @Nullable Output<String> width;

    public Output<String> width() {
        return this.width == null ? Codegen.empty() : this.width;
    }

    public RectangleArgs(
        @Nullable Output<String> height,
        @Nullable Output<String> left,
        @Nullable Output<String> top,
        @Nullable Output<String> width) {
        this.height = height;
        this.left = left;
        this.top = top;
        this.width = width;
    }

    private RectangleArgs() {
        this.height = Codegen.empty();
        this.left = Codegen.empty();
        this.top = Codegen.empty();
        this.width = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RectangleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> height;
        private @Nullable Output<String> left;
        private @Nullable Output<String> top;
        private @Nullable Output<String> width;

        public Builder() {
    	      // Empty
        }

        public Builder(RectangleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.height = defaults.height;
    	      this.left = defaults.left;
    	      this.top = defaults.top;
    	      this.width = defaults.width;
        }

        public Builder height(@Nullable Output<String> height) {
            this.height = height;
            return this;
        }
        public Builder height(@Nullable String height) {
            this.height = Codegen.ofNullable(height);
            return this;
        }
        public Builder left(@Nullable Output<String> left) {
            this.left = left;
            return this;
        }
        public Builder left(@Nullable String left) {
            this.left = Codegen.ofNullable(left);
            return this;
        }
        public Builder top(@Nullable Output<String> top) {
            this.top = top;
            return this;
        }
        public Builder top(@Nullable String top) {
            this.top = Codegen.ofNullable(top);
            return this;
        }
        public Builder width(@Nullable Output<String> width) {
            this.width = width;
            return this;
        }
        public Builder width(@Nullable String width) {
            this.width = Codegen.ofNullable(width);
            return this;
        }        public RectangleArgs build() {
            return new RectangleArgs(height, left, top, width);
        }
    }
}
