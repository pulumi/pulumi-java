// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.costmanagement.ViewArgs;
import io.pulumi.azurenative.costmanagement.outputs.KpiPropertiesResponse;
import io.pulumi.azurenative.costmanagement.outputs.PivotPropertiesResponse;
import io.pulumi.azurenative.costmanagement.outputs.ReportConfigDatasetResponse;
import io.pulumi.azurenative.costmanagement.outputs.ReportConfigTimePeriodResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * States and configurations of Cost Analysis.
API Version: 2019-11-01.

{{% examples %}}
## Example Usage
{{% example %}}
### CreateOrUpdatePrivateView
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var view = new AzureNative.CostManagement.View("view", new AzureNative.CostManagement.ViewArgs
        {
            Accumulated = "true",
            Chart = "Table",
            DataSet = new AzureNative.CostManagement.Inputs.ReportConfigDatasetArgs
            {
                Aggregation = 
                {
                    { "totalCost", new AzureNative.CostManagement.Inputs.ReportConfigAggregationArgs
                    {
                        Function = "Sum",
                        Name = "PreTaxCost",
                    } },
                },
                Granularity = "Daily",
                Grouping = {},
                Sorting = 
                {
                    new AzureNative.CostManagement.Inputs.ReportConfigSortingArgs
                    {
                        Direction = "Ascending",
                        Name = "UsageDate",
                    },
                },
            },
            DisplayName = "swagger Example",
            ETag = "\"1d4ff9fe66f1d10\"",
            Kpis = 
            {
                new AzureNative.CostManagement.Inputs.KpiPropertiesArgs
                {
                    Enabled = true,
                    Type = "Forecast",
                },
                new AzureNative.CostManagement.Inputs.KpiPropertiesArgs
                {
                    Enabled = true,
                    Id = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo",
                    Type = "Budget",
                },
            },
            Metric = "ActualCost",
            Pivots = 
            {
                new AzureNative.CostManagement.Inputs.PivotPropertiesArgs
                {
                    Name = "ServiceName",
                    Type = "Dimension",
                },
                new AzureNative.CostManagement.Inputs.PivotPropertiesArgs
                {
                    Name = "MeterCategory",
                    Type = "Dimension",
                },
                new AzureNative.CostManagement.Inputs.PivotPropertiesArgs
                {
                    Name = "swaggerTagKey",
                    Type = "TagKey",
                },
            },
            Timeframe = "MonthToDate",
            Type = "Usage",
            ViewName = "swaggerExample",
        });
    }

}

```

```go
package main

import (
	costmanagement "github.com/pulumi/pulumi-azure-native/sdk/go/azure/costmanagement"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := costmanagement.NewView(ctx, "view", &costmanagement.ViewArgs{
			Accumulated: pulumi.String("true"),
			Chart:       pulumi.String("Table"),
			DataSet: &costmanagement.ReportConfigDatasetArgs{
				Aggregation: costmanagement.ReportConfigAggregationMap{
					"totalCost": &costmanagement.ReportConfigAggregationArgs{
						Function: pulumi.String("Sum"),
						Name:     pulumi.String("PreTaxCost"),
					},
				},
				Granularity: pulumi.String("Daily"),
				Grouping:    costmanagement.ReportConfigGroupingArray{},
				Sorting: costmanagement.ReportConfigSortingArray{
					&costmanagement.ReportConfigSortingArgs{
						Direction: pulumi.String("Ascending"),
						Name:      pulumi.String("UsageDate"),
					},
				},
			},
			DisplayName: pulumi.String("swagger Example"),
			ETag:        pulumi.String("\"1d4ff9fe66f1d10\""),
			Kpis: []costmanagement.KpiPropertiesArgs{
				&costmanagement.KpiPropertiesArgs{
					Enabled: pulumi.Bool(true),
					Type:    pulumi.String("Forecast"),
				},
				&costmanagement.KpiPropertiesArgs{
					Enabled: pulumi.Bool(true),
					Id:      pulumi.String("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
					Type:    pulumi.String("Budget"),
				},
			},
			Metric: pulumi.String("ActualCost"),
			Pivots: []costmanagement.PivotPropertiesArgs{
				&costmanagement.PivotPropertiesArgs{
					Name: pulumi.String("ServiceName"),
					Type: pulumi.String("Dimension"),
				},
				&costmanagement.PivotPropertiesArgs{
					Name: pulumi.String("MeterCategory"),
					Type: pulumi.String("Dimension"),
				},
				&costmanagement.PivotPropertiesArgs{
					Name: pulumi.String("swaggerTagKey"),
					Type: pulumi.String("TagKey"),
				},
			},
			Timeframe: pulumi.String("MonthToDate"),
			Type:      pulumi.String("Usage"),
			ViewName:  pulumi.String("swaggerExample"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const view = new azure_native.costmanagement.View("view", {
    accumulated: "true",
    chart: "Table",
    dataSet: {
        aggregation: {
            totalCost: {
                "function": "Sum",
                name: "PreTaxCost",
            },
        },
        granularity: "Daily",
        grouping: [],
        sorting: [{
            direction: "Ascending",
            name: "UsageDate",
        }],
    },
    displayName: "swagger Example",
    eTag: "\"1d4ff9fe66f1d10\"",
    kpis: [
        {
            enabled: true,
            type: "Forecast",
        },
        {
            enabled: true,
            id: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo",
            type: "Budget",
        },
    ],
    metric: "ActualCost",
    pivots: [
        {
            name: "ServiceName",
            type: "Dimension",
        },
        {
            name: "MeterCategory",
            type: "Dimension",
        },
        {
            name: "swaggerTagKey",
            type: "TagKey",
        },
    ],
    timeframe: "MonthToDate",
    type: "Usage",
    viewName: "swaggerExample",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

view = azure_native.costmanagement.View("view",
    accumulated="true",
    chart="Table",
    data_set=azure_native.costmanagement.ReportConfigDatasetArgs(
        aggregation={
            "totalCost": azure_native.costmanagement.ReportConfigAggregationArgs(
                function="Sum",
                name="PreTaxCost",
            ),
        },
        granularity="Daily",
        grouping=[],
        sorting=[azure_native.costmanagement.ReportConfigSortingArgs(
            direction="Ascending",
            name="UsageDate",
        )],
    ),
    display_name="swagger Example",
    e_tag="\"1d4ff9fe66f1d10\"",
    kpis=[
        azure_native.costmanagement.KpiPropertiesArgs(
            enabled=True,
            type="Forecast",
        ),
        azure_native.costmanagement.KpiPropertiesArgs(
            enabled=True,
            id="/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo",
            type="Budget",
        ),
    ],
    metric="ActualCost",
    pivots=[
        azure_native.costmanagement.PivotPropertiesArgs(
            name="ServiceName",
            type="Dimension",
        ),
        azure_native.costmanagement.PivotPropertiesArgs(
            name="MeterCategory",
            type="Dimension",
        ),
        azure_native.costmanagement.PivotPropertiesArgs(
            name="swaggerTagKey",
            type="TagKey",
        ),
    ],
    timeframe="MonthToDate",
    type="Usage",
    view_name="swaggerExample")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:costmanagement:View swaggerExample /providers/Microsoft.CostManagement/views/swaggerExample 
```

 */
@ResourceType(type="azure-native:costmanagement:View")
public class View extends io.pulumi.resources.CustomResource {
    /**
     * Show costs accumulated over time.
     */
    @OutputExport(name="accumulated", type=String.class, parameters={})
    private Output</* @Nullable */ String> accumulated;

    /**
     * @return Show costs accumulated over time.
     */
    public Output</* @Nullable */ String> getAccumulated() {
        return this.accumulated;
    }
    /**
     * Chart type of the main view in Cost Analysis. Required.
     */
    @OutputExport(name="chart", type=String.class, parameters={})
    private Output</* @Nullable */ String> chart;

    /**
     * @return Chart type of the main view in Cost Analysis. Required.
     */
    public Output</* @Nullable */ String> getChart() {
        return this.chart;
    }
    /**
     * Date the user created this view.
     */
    @OutputExport(name="createdOn", type=String.class, parameters={})
    private Output<String> createdOn;

    /**
     * @return Date the user created this view.
     */
    public Output<String> getCreatedOn() {
        return this.createdOn;
    }
    /**
     * Selected currency.
     */
    @OutputExport(name="currency", type=String.class, parameters={})
    private Output<String> currency;

    /**
     * @return Selected currency.
     */
    public Output<String> getCurrency() {
        return this.currency;
    }
    /**
     * Has definition for data in this report config.
     */
    @OutputExport(name="dataSet", type=ReportConfigDatasetResponse.class, parameters={})
    private Output</* @Nullable */ ReportConfigDatasetResponse> dataSet;

    /**
     * @return Has definition for data in this report config.
     */
    public Output</* @Nullable */ ReportConfigDatasetResponse> getDataSet() {
        return this.dataSet;
    }
    /**
     * Selected date range for viewing cost in.
     */
    @OutputExport(name="dateRange", type=String.class, parameters={})
    private Output<String> dateRange;

    /**
     * @return Selected date range for viewing cost in.
     */
    public Output<String> getDateRange() {
        return this.dateRange;
    }
    /**
     * User input name of the view. Required.
     */
    @OutputExport(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return User input name of the view. Required.
     */
    public Output</* @Nullable */ String> getDisplayName() {
        return this.displayName;
    }
    /**
     * eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     */
    @OutputExport(name="eTag", type=String.class, parameters={})
    private Output</* @Nullable */ String> eTag;

    /**
     * @return eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     */
    public Output</* @Nullable */ String> getETag() {
        return this.eTag;
    }
    /**
     * Include monetary commitment
     */
    @OutputExport(name="includeMonetaryCommitment", type=Boolean.class, parameters={})
    private Output<Boolean> includeMonetaryCommitment;

    /**
     * @return Include monetary commitment
     */
    public Output<Boolean> getIncludeMonetaryCommitment() {
        return this.includeMonetaryCommitment;
    }
    /**
     * List of KPIs to show in Cost Analysis UI.
     */
    @OutputExport(name="kpis", type=List.class, parameters={KpiPropertiesResponse.class})
    private Output</* @Nullable */ List<KpiPropertiesResponse>> kpis;

    /**
     * @return List of KPIs to show in Cost Analysis UI.
     */
    public Output</* @Nullable */ List<KpiPropertiesResponse>> getKpis() {
        return this.kpis;
    }
    /**
     * Metric to use when displaying costs.
     */
    @OutputExport(name="metric", type=String.class, parameters={})
    private Output</* @Nullable */ String> metric;

    /**
     * @return Metric to use when displaying costs.
     */
    public Output</* @Nullable */ String> getMetric() {
        return this.metric;
    }
    /**
     * Date when the user last modified this view.
     */
    @OutputExport(name="modifiedOn", type=String.class, parameters={})
    private Output<String> modifiedOn;

    /**
     * @return Date when the user last modified this view.
     */
    public Output<String> getModifiedOn() {
        return this.modifiedOn;
    }
    /**
     * Resource name.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Configuration of 3 sub-views in the Cost Analysis UI.
     */
    @OutputExport(name="pivots", type=List.class, parameters={PivotPropertiesResponse.class})
    private Output</* @Nullable */ List<PivotPropertiesResponse>> pivots;

    /**
     * @return Configuration of 3 sub-views in the Cost Analysis UI.
     */
    public Output</* @Nullable */ List<PivotPropertiesResponse>> getPivots() {
        return this.pivots;
    }
    /**
     * Cost Management scope to save the view on. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope.
     */
    @OutputExport(name="scope", type=String.class, parameters={})
    private Output</* @Nullable */ String> scope;

    /**
     * @return Cost Management scope to save the view on. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope.
     */
    public Output</* @Nullable */ String> getScope() {
        return this.scope;
    }
    /**
     * Has time period for pulling data for the report.
     */
    @OutputExport(name="timePeriod", type=ReportConfigTimePeriodResponse.class, parameters={})
    private Output</* @Nullable */ ReportConfigTimePeriodResponse> timePeriod;

    /**
     * @return Has time period for pulling data for the report.
     */
    public Output</* @Nullable */ ReportConfigTimePeriodResponse> getTimePeriod() {
        return this.timePeriod;
    }
    /**
     * The time frame for pulling data for the report. If custom, then a specific time period must be provided.
     */
    @OutputExport(name="timeframe", type=String.class, parameters={})
    private Output<String> timeframe;

    /**
     * @return The time frame for pulling data for the report. If custom, then a specific time period must be provided.
     */
    public Output<String> getTimeframe() {
        return this.timeframe;
    }
    /**
     * Resource type.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public View(String name, ViewArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:costmanagement:View", name, args == null ? ViewArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private View(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:costmanagement:View", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:costmanagement/v20190401preview:View").build()),
                Input.of(Alias.builder().setType("azure-native:costmanagement/v20191101:View").build()),
                Input.of(Alias.builder().setType("azure-native:costmanagement/v20200601:View").build()),
                Input.of(Alias.builder().setType("azure-native:costmanagement/v20211001:View").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static View get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new View(name, id, options);
    }
}
