// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Identity provider input.
 * 
 */
public final class IdentityProviderInputArgs extends io.pulumi.resources.ResourceArgs {

    public static final IdentityProviderInputArgs Empty = new IdentityProviderInputArgs();

    /**
     * The base authority for Azure Active Directory authentication.
     * 
     */
    @Import(name="aadAuthority", required=true)
      private final Output<String> aadAuthority;

    public Output<String> getAadAuthority() {
        return this.aadAuthority;
    }

    /**
     * The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="applicationId", required=true)
      private final Output<String> applicationId;

    public Output<String> getApplicationId() {
        return this.applicationId;
    }

    /**
     * The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="audience", required=true)
      private final Output<String> audience;

    public Output<String> getAudience() {
        return this.audience;
    }

    /**
     * The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="objectId", required=true)
      private final Output<String> objectId;

    public Output<String> getObjectId() {
        return this.objectId;
    }

    /**
     * The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="tenantId", required=true)
      private final Output<String> tenantId;

    public Output<String> getTenantId() {
        return this.tenantId;
    }

    public IdentityProviderInputArgs(
        Output<String> aadAuthority,
        Output<String> applicationId,
        Output<String> audience,
        Output<String> objectId,
        Output<String> tenantId) {
        this.aadAuthority = Objects.requireNonNull(aadAuthority, "expected parameter 'aadAuthority' to be non-null");
        this.applicationId = Objects.requireNonNull(applicationId, "expected parameter 'applicationId' to be non-null");
        this.audience = Objects.requireNonNull(audience, "expected parameter 'audience' to be non-null");
        this.objectId = Objects.requireNonNull(objectId, "expected parameter 'objectId' to be non-null");
        this.tenantId = Objects.requireNonNull(tenantId, "expected parameter 'tenantId' to be non-null");
    }

    private IdentityProviderInputArgs() {
        this.aadAuthority = Output.empty();
        this.applicationId = Output.empty();
        this.audience = Output.empty();
        this.objectId = Output.empty();
        this.tenantId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IdentityProviderInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> aadAuthority;
        private Output<String> applicationId;
        private Output<String> audience;
        private Output<String> objectId;
        private Output<String> tenantId;

        public Builder() {
    	      // Empty
        }

        public Builder(IdentityProviderInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aadAuthority = defaults.aadAuthority;
    	      this.applicationId = defaults.applicationId;
    	      this.audience = defaults.audience;
    	      this.objectId = defaults.objectId;
    	      this.tenantId = defaults.tenantId;
        }

        public Builder aadAuthority(Output<String> aadAuthority) {
            this.aadAuthority = Objects.requireNonNull(aadAuthority);
            return this;
        }

        public Builder aadAuthority(String aadAuthority) {
            this.aadAuthority = Output.of(Objects.requireNonNull(aadAuthority));
            return this;
        }

        public Builder applicationId(Output<String> applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }

        public Builder applicationId(String applicationId) {
            this.applicationId = Output.of(Objects.requireNonNull(applicationId));
            return this;
        }

        public Builder audience(Output<String> audience) {
            this.audience = Objects.requireNonNull(audience);
            return this;
        }

        public Builder audience(String audience) {
            this.audience = Output.of(Objects.requireNonNull(audience));
            return this;
        }

        public Builder objectId(Output<String> objectId) {
            this.objectId = Objects.requireNonNull(objectId);
            return this;
        }

        public Builder objectId(String objectId) {
            this.objectId = Output.of(Objects.requireNonNull(objectId));
            return this;
        }

        public Builder tenantId(Output<String> tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }

        public Builder tenantId(String tenantId) {
            this.tenantId = Output.of(Objects.requireNonNull(tenantId));
            return this;
        }
        public IdentityProviderInputArgs build() {
            return new IdentityProviderInputArgs(aadAuthority, applicationId, audience, objectId, tenantId);
        }
    }
}
