// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.enums.AudioAnalysisMode;
import io.pulumi.azurenative.media.enums.InsightsType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VideoAnalyzerPresetArgs extends io.pulumi.resources.ResourceArgs {

    public static final VideoAnalyzerPresetArgs Empty = new VideoAnalyzerPresetArgs();

    @InputImport(name="audioLanguage")
    private final @Nullable Input<String> audioLanguage;

    public Input<String> getAudioLanguage() {
        return this.audioLanguage == null ? Input.empty() : this.audioLanguage;
    }

    @InputImport(name="experimentalOptions")
    private final @Nullable Input<Map<String,String>> experimentalOptions;

    public Input<Map<String,String>> getExperimentalOptions() {
        return this.experimentalOptions == null ? Input.empty() : this.experimentalOptions;
    }

    @InputImport(name="insightsToExtract")
    private final @Nullable Input<Either<String,InsightsType>> insightsToExtract;

    public Input<Either<String,InsightsType>> getInsightsToExtract() {
        return this.insightsToExtract == null ? Input.empty() : this.insightsToExtract;
    }

    @InputImport(name="mode")
    private final @Nullable Input<Either<String,AudioAnalysisMode>> mode;

    public Input<Either<String,AudioAnalysisMode>> getMode() {
        return this.mode == null ? Input.empty() : this.mode;
    }

    @InputImport(name="odataType", required=true)
    private final Input<String> odataType;

    public Input<String> getOdataType() {
        return this.odataType;
    }

    public VideoAnalyzerPresetArgs(
        @Nullable Input<String> audioLanguage,
        @Nullable Input<Map<String,String>> experimentalOptions,
        @Nullable Input<Either<String,InsightsType>> insightsToExtract,
        @Nullable Input<Either<String,AudioAnalysisMode>> mode,
        Input<String> odataType) {
        this.audioLanguage = audioLanguage;
        this.experimentalOptions = experimentalOptions;
        this.insightsToExtract = insightsToExtract;
        this.mode = mode;
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
    }

    private VideoAnalyzerPresetArgs() {
        this.audioLanguage = Input.empty();
        this.experimentalOptions = Input.empty();
        this.insightsToExtract = Input.empty();
        this.mode = Input.empty();
        this.odataType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VideoAnalyzerPresetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> audioLanguage;
        private @Nullable Input<Map<String,String>> experimentalOptions;
        private @Nullable Input<Either<String,InsightsType>> insightsToExtract;
        private @Nullable Input<Either<String,AudioAnalysisMode>> mode;
        private Input<String> odataType;

        public Builder() {
    	      // Empty
        }

        public Builder(VideoAnalyzerPresetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audioLanguage = defaults.audioLanguage;
    	      this.experimentalOptions = defaults.experimentalOptions;
    	      this.insightsToExtract = defaults.insightsToExtract;
    	      this.mode = defaults.mode;
    	      this.odataType = defaults.odataType;
        }

        public Builder setAudioLanguage(@Nullable Input<String> audioLanguage) {
            this.audioLanguage = audioLanguage;
            return this;
        }

        public Builder setAudioLanguage(@Nullable String audioLanguage) {
            this.audioLanguage = Input.ofNullable(audioLanguage);
            return this;
        }

        public Builder setExperimentalOptions(@Nullable Input<Map<String,String>> experimentalOptions) {
            this.experimentalOptions = experimentalOptions;
            return this;
        }

        public Builder setExperimentalOptions(@Nullable Map<String,String> experimentalOptions) {
            this.experimentalOptions = Input.ofNullable(experimentalOptions);
            return this;
        }

        public Builder setInsightsToExtract(@Nullable Input<Either<String,InsightsType>> insightsToExtract) {
            this.insightsToExtract = insightsToExtract;
            return this;
        }

        public Builder setInsightsToExtract(@Nullable Either<String,InsightsType> insightsToExtract) {
            this.insightsToExtract = Input.ofNullable(insightsToExtract);
            return this;
        }

        public Builder setMode(@Nullable Input<Either<String,AudioAnalysisMode>> mode) {
            this.mode = mode;
            return this;
        }

        public Builder setMode(@Nullable Either<String,AudioAnalysisMode> mode) {
            this.mode = Input.ofNullable(mode);
            return this;
        }

        public Builder setOdataType(Input<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }

        public Builder setOdataType(String odataType) {
            this.odataType = Input.of(Objects.requireNonNull(odataType));
            return this;
        }

        public VideoAnalyzerPresetArgs build() {
            return new VideoAnalyzerPresetArgs(audioLanguage, experimentalOptions, insightsToExtract, mode, odataType);
        }
    }
}
