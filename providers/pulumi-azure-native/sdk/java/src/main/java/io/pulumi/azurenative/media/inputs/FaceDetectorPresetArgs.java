// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.enums.AnalysisResolution;
import io.pulumi.azurenative.media.enums.BlurType;
import io.pulumi.azurenative.media.enums.FaceRedactorMode;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FaceDetectorPresetArgs extends io.pulumi.resources.ResourceArgs {

    public static final FaceDetectorPresetArgs Empty = new FaceDetectorPresetArgs();

    @InputImport(name="blurType")
    private final @Nullable Input<Either<String,BlurType>> blurType;

    public Input<Either<String,BlurType>> getBlurType() {
        return this.blurType == null ? Input.empty() : this.blurType;
    }

    @InputImport(name="experimentalOptions")
    private final @Nullable Input<Map<String,String>> experimentalOptions;

    public Input<Map<String,String>> getExperimentalOptions() {
        return this.experimentalOptions == null ? Input.empty() : this.experimentalOptions;
    }

    @InputImport(name="mode")
    private final @Nullable Input<Either<String,FaceRedactorMode>> mode;

    public Input<Either<String,FaceRedactorMode>> getMode() {
        return this.mode == null ? Input.empty() : this.mode;
    }

    @InputImport(name="odataType", required=true)
    private final Input<String> odataType;

    public Input<String> getOdataType() {
        return this.odataType;
    }

    @InputImport(name="resolution")
    private final @Nullable Input<Either<String,AnalysisResolution>> resolution;

    public Input<Either<String,AnalysisResolution>> getResolution() {
        return this.resolution == null ? Input.empty() : this.resolution;
    }

    public FaceDetectorPresetArgs(
        @Nullable Input<Either<String,BlurType>> blurType,
        @Nullable Input<Map<String,String>> experimentalOptions,
        @Nullable Input<Either<String,FaceRedactorMode>> mode,
        Input<String> odataType,
        @Nullable Input<Either<String,AnalysisResolution>> resolution) {
        this.blurType = blurType;
        this.experimentalOptions = experimentalOptions;
        this.mode = mode;
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.resolution = resolution;
    }

    private FaceDetectorPresetArgs() {
        this.blurType = Input.empty();
        this.experimentalOptions = Input.empty();
        this.mode = Input.empty();
        this.odataType = Input.empty();
        this.resolution = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FaceDetectorPresetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,BlurType>> blurType;
        private @Nullable Input<Map<String,String>> experimentalOptions;
        private @Nullable Input<Either<String,FaceRedactorMode>> mode;
        private Input<String> odataType;
        private @Nullable Input<Either<String,AnalysisResolution>> resolution;

        public Builder() {
    	      // Empty
        }

        public Builder(FaceDetectorPresetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blurType = defaults.blurType;
    	      this.experimentalOptions = defaults.experimentalOptions;
    	      this.mode = defaults.mode;
    	      this.odataType = defaults.odataType;
    	      this.resolution = defaults.resolution;
        }

        public Builder setBlurType(@Nullable Input<Either<String,BlurType>> blurType) {
            this.blurType = blurType;
            return this;
        }

        public Builder setBlurType(@Nullable Either<String,BlurType> blurType) {
            this.blurType = Input.ofNullable(blurType);
            return this;
        }

        public Builder setExperimentalOptions(@Nullable Input<Map<String,String>> experimentalOptions) {
            this.experimentalOptions = experimentalOptions;
            return this;
        }

        public Builder setExperimentalOptions(@Nullable Map<String,String> experimentalOptions) {
            this.experimentalOptions = Input.ofNullable(experimentalOptions);
            return this;
        }

        public Builder setMode(@Nullable Input<Either<String,FaceRedactorMode>> mode) {
            this.mode = mode;
            return this;
        }

        public Builder setMode(@Nullable Either<String,FaceRedactorMode> mode) {
            this.mode = Input.ofNullable(mode);
            return this;
        }

        public Builder setOdataType(Input<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }

        public Builder setOdataType(String odataType) {
            this.odataType = Input.of(Objects.requireNonNull(odataType));
            return this;
        }

        public Builder setResolution(@Nullable Input<Either<String,AnalysisResolution>> resolution) {
            this.resolution = resolution;
            return this;
        }

        public Builder setResolution(@Nullable Either<String,AnalysisResolution> resolution) {
            this.resolution = Input.ofNullable(resolution);
            return this;
        }

        public FaceDetectorPresetArgs build() {
            return new FaceDetectorPresetArgs(blurType, experimentalOptions, mode, odataType, resolution);
        }
    }
}
