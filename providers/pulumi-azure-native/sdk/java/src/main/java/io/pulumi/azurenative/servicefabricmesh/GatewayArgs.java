// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabricmesh;

import io.pulumi.azurenative.servicefabricmesh.inputs.HttpConfigArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.NetworkRefArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.TcpConfigArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GatewayArgs extends io.pulumi.resources.ResourceArgs {

    public static final GatewayArgs Empty = new GatewayArgs();

    /**
     * User readable description of the gateway.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Network that the Application is using.
     * 
     */
    @Import(name="destinationNetwork", required=true)
      private final Output<NetworkRefArgs> destinationNetwork;

    public Output<NetworkRefArgs> getDestinationNetwork() {
        return this.destinationNetwork;
    }

    /**
     * The identity of the gateway.
     * 
     */
    @Import(name="gatewayResourceName")
      private final @Nullable Output<String> gatewayResourceName;

    public Output<String> getGatewayResourceName() {
        return this.gatewayResourceName == null ? Output.empty() : this.gatewayResourceName;
    }

    /**
     * Configuration for http connectivity for this gateway.
     * 
     */
    @Import(name="http")
      private final @Nullable Output<List<HttpConfigArgs>> http;

    public Output<List<HttpConfigArgs>> getHttp() {
        return this.http == null ? Output.empty() : this.http;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Azure resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Network the gateway should listen on for requests.
     * 
     */
    @Import(name="sourceNetwork", required=true)
      private final Output<NetworkRefArgs> sourceNetwork;

    public Output<NetworkRefArgs> getSourceNetwork() {
        return this.sourceNetwork;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Configuration for tcp connectivity for this gateway.
     * 
     */
    @Import(name="tcp")
      private final @Nullable Output<List<TcpConfigArgs>> tcp;

    public Output<List<TcpConfigArgs>> getTcp() {
        return this.tcp == null ? Output.empty() : this.tcp;
    }

    public GatewayArgs(
        @Nullable Output<String> description,
        Output<NetworkRefArgs> destinationNetwork,
        @Nullable Output<String> gatewayResourceName,
        @Nullable Output<List<HttpConfigArgs>> http,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        Output<NetworkRefArgs> sourceNetwork,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<List<TcpConfigArgs>> tcp) {
        this.description = description;
        this.destinationNetwork = Objects.requireNonNull(destinationNetwork, "expected parameter 'destinationNetwork' to be non-null");
        this.gatewayResourceName = gatewayResourceName;
        this.http = http;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sourceNetwork = Objects.requireNonNull(sourceNetwork, "expected parameter 'sourceNetwork' to be non-null");
        this.tags = tags;
        this.tcp = tcp;
    }

    private GatewayArgs() {
        this.description = Output.empty();
        this.destinationNetwork = Output.empty();
        this.gatewayResourceName = Output.empty();
        this.http = Output.empty();
        this.location = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sourceNetwork = Output.empty();
        this.tags = Output.empty();
        this.tcp = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<NetworkRefArgs> destinationNetwork;
        private @Nullable Output<String> gatewayResourceName;
        private @Nullable Output<List<HttpConfigArgs>> http;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private Output<NetworkRefArgs> sourceNetwork;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<List<TcpConfigArgs>> tcp;

        public Builder() {
    	      // Empty
        }

        public Builder(GatewayArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destinationNetwork = defaults.destinationNetwork;
    	      this.gatewayResourceName = defaults.gatewayResourceName;
    	      this.http = defaults.http;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sourceNetwork = defaults.sourceNetwork;
    	      this.tags = defaults.tags;
    	      this.tcp = defaults.tcp;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder destinationNetwork(Output<NetworkRefArgs> destinationNetwork) {
            this.destinationNetwork = Objects.requireNonNull(destinationNetwork);
            return this;
        }
        public Builder destinationNetwork(NetworkRefArgs destinationNetwork) {
            this.destinationNetwork = Output.of(Objects.requireNonNull(destinationNetwork));
            return this;
        }
        public Builder gatewayResourceName(@Nullable Output<String> gatewayResourceName) {
            this.gatewayResourceName = gatewayResourceName;
            return this;
        }
        public Builder gatewayResourceName(@Nullable String gatewayResourceName) {
            this.gatewayResourceName = Output.ofNullable(gatewayResourceName);
            return this;
        }
        public Builder http(@Nullable Output<List<HttpConfigArgs>> http) {
            this.http = http;
            return this;
        }
        public Builder http(@Nullable List<HttpConfigArgs> http) {
            this.http = Output.ofNullable(http);
            return this;
        }
        public Builder http(HttpConfigArgs... http) {
            return http(List.of(http));
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sourceNetwork(Output<NetworkRefArgs> sourceNetwork) {
            this.sourceNetwork = Objects.requireNonNull(sourceNetwork);
            return this;
        }
        public Builder sourceNetwork(NetworkRefArgs sourceNetwork) {
            this.sourceNetwork = Output.of(Objects.requireNonNull(sourceNetwork));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tcp(@Nullable Output<List<TcpConfigArgs>> tcp) {
            this.tcp = tcp;
            return this;
        }
        public Builder tcp(@Nullable List<TcpConfigArgs> tcp) {
            this.tcp = Output.ofNullable(tcp);
            return this;
        }
        public Builder tcp(TcpConfigArgs... tcp) {
            return tcp(List.of(tcp));
        }        public GatewayArgs build() {
            return new GatewayArgs(description, destinationNetwork, gatewayResourceName, http, location, resourceGroupName, sourceNetwork, tags, tcp);
        }
    }
}
