// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cache;

import io.pulumi.azurenative.cache.enums.ClusteringPolicy;
import io.pulumi.azurenative.cache.enums.EvictionPolicy;
import io.pulumi.azurenative.cache.enums.Protocol;
import io.pulumi.azurenative.cache.inputs.ModuleArgs;
import io.pulumi.azurenative.cache.inputs.PersistenceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseArgs Empty = new DatabaseArgs();

    @InputImport(name="clientProtocol")
    private final @Nullable Input<Either<String,Protocol>> clientProtocol;

    public Input<Either<String,Protocol>> getClientProtocol() {
        return this.clientProtocol == null ? Input.empty() : this.clientProtocol;
    }

    @InputImport(name="clusterName", required=true)
    private final Input<String> clusterName;

    public Input<String> getClusterName() {
        return this.clusterName;
    }

    @InputImport(name="clusteringPolicy")
    private final @Nullable Input<Either<String,ClusteringPolicy>> clusteringPolicy;

    public Input<Either<String,ClusteringPolicy>> getClusteringPolicy() {
        return this.clusteringPolicy == null ? Input.empty() : this.clusteringPolicy;
    }

    @InputImport(name="databaseName")
    private final @Nullable Input<String> databaseName;

    public Input<String> getDatabaseName() {
        return this.databaseName == null ? Input.empty() : this.databaseName;
    }

    @InputImport(name="evictionPolicy")
    private final @Nullable Input<Either<String,EvictionPolicy>> evictionPolicy;

    public Input<Either<String,EvictionPolicy>> getEvictionPolicy() {
        return this.evictionPolicy == null ? Input.empty() : this.evictionPolicy;
    }

    @InputImport(name="modules")
    private final @Nullable Input<List<ModuleArgs>> modules;

    public Input<List<ModuleArgs>> getModules() {
        return this.modules == null ? Input.empty() : this.modules;
    }

    @InputImport(name="persistence")
    private final @Nullable Input<PersistenceArgs> persistence;

    public Input<PersistenceArgs> getPersistence() {
        return this.persistence == null ? Input.empty() : this.persistence;
    }

    @InputImport(name="port")
    private final @Nullable Input<Integer> port;

    public Input<Integer> getPort() {
        return this.port == null ? Input.empty() : this.port;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    public DatabaseArgs(
        @Nullable Input<Either<String,Protocol>> clientProtocol,
        Input<String> clusterName,
        @Nullable Input<Either<String,ClusteringPolicy>> clusteringPolicy,
        @Nullable Input<String> databaseName,
        @Nullable Input<Either<String,EvictionPolicy>> evictionPolicy,
        @Nullable Input<List<ModuleArgs>> modules,
        @Nullable Input<PersistenceArgs> persistence,
        @Nullable Input<Integer> port,
        Input<String> resourceGroupName) {
        this.clientProtocol = clientProtocol;
        this.clusterName = Objects.requireNonNull(clusterName, "expected parameter 'clusterName' to be non-null");
        this.clusteringPolicy = clusteringPolicy;
        this.databaseName = databaseName;
        this.evictionPolicy = evictionPolicy;
        this.modules = modules;
        this.persistence = persistence;
        this.port = port;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private DatabaseArgs() {
        this.clientProtocol = Input.empty();
        this.clusterName = Input.empty();
        this.clusteringPolicy = Input.empty();
        this.databaseName = Input.empty();
        this.evictionPolicy = Input.empty();
        this.modules = Input.empty();
        this.persistence = Input.empty();
        this.port = Input.empty();
        this.resourceGroupName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,Protocol>> clientProtocol;
        private Input<String> clusterName;
        private @Nullable Input<Either<String,ClusteringPolicy>> clusteringPolicy;
        private @Nullable Input<String> databaseName;
        private @Nullable Input<Either<String,EvictionPolicy>> evictionPolicy;
        private @Nullable Input<List<ModuleArgs>> modules;
        private @Nullable Input<PersistenceArgs> persistence;
        private @Nullable Input<Integer> port;
        private Input<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientProtocol = defaults.clientProtocol;
    	      this.clusterName = defaults.clusterName;
    	      this.clusteringPolicy = defaults.clusteringPolicy;
    	      this.databaseName = defaults.databaseName;
    	      this.evictionPolicy = defaults.evictionPolicy;
    	      this.modules = defaults.modules;
    	      this.persistence = defaults.persistence;
    	      this.port = defaults.port;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder setClientProtocol(@Nullable Input<Either<String,Protocol>> clientProtocol) {
            this.clientProtocol = clientProtocol;
            return this;
        }

        public Builder setClientProtocol(@Nullable Either<String,Protocol> clientProtocol) {
            this.clientProtocol = Input.ofNullable(clientProtocol);
            return this;
        }

        public Builder setClusterName(Input<String> clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }

        public Builder setClusterName(String clusterName) {
            this.clusterName = Input.of(Objects.requireNonNull(clusterName));
            return this;
        }

        public Builder setClusteringPolicy(@Nullable Input<Either<String,ClusteringPolicy>> clusteringPolicy) {
            this.clusteringPolicy = clusteringPolicy;
            return this;
        }

        public Builder setClusteringPolicy(@Nullable Either<String,ClusteringPolicy> clusteringPolicy) {
            this.clusteringPolicy = Input.ofNullable(clusteringPolicy);
            return this;
        }

        public Builder setDatabaseName(@Nullable Input<String> databaseName) {
            this.databaseName = databaseName;
            return this;
        }

        public Builder setDatabaseName(@Nullable String databaseName) {
            this.databaseName = Input.ofNullable(databaseName);
            return this;
        }

        public Builder setEvictionPolicy(@Nullable Input<Either<String,EvictionPolicy>> evictionPolicy) {
            this.evictionPolicy = evictionPolicy;
            return this;
        }

        public Builder setEvictionPolicy(@Nullable Either<String,EvictionPolicy> evictionPolicy) {
            this.evictionPolicy = Input.ofNullable(evictionPolicy);
            return this;
        }

        public Builder setModules(@Nullable Input<List<ModuleArgs>> modules) {
            this.modules = modules;
            return this;
        }

        public Builder setModules(@Nullable List<ModuleArgs> modules) {
            this.modules = Input.ofNullable(modules);
            return this;
        }

        public Builder setPersistence(@Nullable Input<PersistenceArgs> persistence) {
            this.persistence = persistence;
            return this;
        }

        public Builder setPersistence(@Nullable PersistenceArgs persistence) {
            this.persistence = Input.ofNullable(persistence);
            return this;
        }

        public Builder setPort(@Nullable Input<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder setPort(@Nullable Integer port) {
            this.port = Input.ofNullable(port);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public DatabaseArgs build() {
            return new DatabaseArgs(clientProtocol, clusterName, clusteringPolicy, databaseName, evictionPolicy, modules, persistence, port, resourceGroupName);
        }
    }
}
