// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.inputs.FlowLogFormatParametersArgs;
import io.pulumi.azurenative.network.inputs.RetentionPolicyParametersArgs;
import io.pulumi.azurenative.network.inputs.TrafficAnalyticsPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FlowLogArgs extends io.pulumi.resources.ResourceArgs {

    public static final FlowLogArgs Empty = new FlowLogArgs();

    /**
     * Flag to enable/disable flow logging.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * Parameters that define the configuration of traffic analytics.
     * 
     */
    @Import(name="flowAnalyticsConfiguration")
      private final @Nullable Output<TrafficAnalyticsPropertiesArgs> flowAnalyticsConfiguration;

    public Output<TrafficAnalyticsPropertiesArgs> getFlowAnalyticsConfiguration() {
        return this.flowAnalyticsConfiguration == null ? Output.empty() : this.flowAnalyticsConfiguration;
    }

    /**
     * The name of the flow log.
     * 
     */
    @Import(name="flowLogName")
      private final @Nullable Output<String> flowLogName;

    public Output<String> getFlowLogName() {
        return this.flowLogName == null ? Output.empty() : this.flowLogName;
    }

    /**
     * Parameters that define the flow log format.
     * 
     */
    @Import(name="format")
      private final @Nullable Output<FlowLogFormatParametersArgs> format;

    public Output<FlowLogFormatParametersArgs> getFormat() {
        return this.format == null ? Output.empty() : this.format;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name of the network watcher.
     * 
     */
    @Import(name="networkWatcherName", required=true)
      private final Output<String> networkWatcherName;

    public Output<String> getNetworkWatcherName() {
        return this.networkWatcherName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Parameters that define the retention policy for flow log.
     * 
     */
    @Import(name="retentionPolicy")
      private final @Nullable Output<RetentionPolicyParametersArgs> retentionPolicy;

    public Output<RetentionPolicyParametersArgs> getRetentionPolicy() {
        return this.retentionPolicy == null ? Output.empty() : this.retentionPolicy;
    }

    /**
     * ID of the storage account which is used to store the flow log.
     * 
     */
    @Import(name="storageId", required=true)
      private final Output<String> storageId;

    public Output<String> getStorageId() {
        return this.storageId;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * ID of network security group to which flow log will be applied.
     * 
     */
    @Import(name="targetResourceId", required=true)
      private final Output<String> targetResourceId;

    public Output<String> getTargetResourceId() {
        return this.targetResourceId;
    }

    public FlowLogArgs(
        @Nullable Output<Boolean> enabled,
        @Nullable Output<TrafficAnalyticsPropertiesArgs> flowAnalyticsConfiguration,
        @Nullable Output<String> flowLogName,
        @Nullable Output<FlowLogFormatParametersArgs> format,
        @Nullable Output<String> id,
        @Nullable Output<String> location,
        Output<String> networkWatcherName,
        Output<String> resourceGroupName,
        @Nullable Output<RetentionPolicyParametersArgs> retentionPolicy,
        Output<String> storageId,
        @Nullable Output<Map<String,String>> tags,
        Output<String> targetResourceId) {
        this.enabled = enabled;
        this.flowAnalyticsConfiguration = flowAnalyticsConfiguration;
        this.flowLogName = flowLogName;
        this.format = format;
        this.id = id;
        this.location = location;
        this.networkWatcherName = Objects.requireNonNull(networkWatcherName, "expected parameter 'networkWatcherName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.retentionPolicy = retentionPolicy;
        this.storageId = Objects.requireNonNull(storageId, "expected parameter 'storageId' to be non-null");
        this.tags = tags;
        this.targetResourceId = Objects.requireNonNull(targetResourceId, "expected parameter 'targetResourceId' to be non-null");
    }

    private FlowLogArgs() {
        this.enabled = Output.empty();
        this.flowAnalyticsConfiguration = Output.empty();
        this.flowLogName = Output.empty();
        this.format = Output.empty();
        this.id = Output.empty();
        this.location = Output.empty();
        this.networkWatcherName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.retentionPolicy = Output.empty();
        this.storageId = Output.empty();
        this.tags = Output.empty();
        this.targetResourceId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowLogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<TrafficAnalyticsPropertiesArgs> flowAnalyticsConfiguration;
        private @Nullable Output<String> flowLogName;
        private @Nullable Output<FlowLogFormatParametersArgs> format;
        private @Nullable Output<String> id;
        private @Nullable Output<String> location;
        private Output<String> networkWatcherName;
        private Output<String> resourceGroupName;
        private @Nullable Output<RetentionPolicyParametersArgs> retentionPolicy;
        private Output<String> storageId;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> targetResourceId;

        public Builder() {
    	      // Empty
        }

        public Builder(FlowLogArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.flowAnalyticsConfiguration = defaults.flowAnalyticsConfiguration;
    	      this.flowLogName = defaults.flowLogName;
    	      this.format = defaults.format;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.networkWatcherName = defaults.networkWatcherName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.retentionPolicy = defaults.retentionPolicy;
    	      this.storageId = defaults.storageId;
    	      this.tags = defaults.tags;
    	      this.targetResourceId = defaults.targetResourceId;
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }

        public Builder flowAnalyticsConfiguration(@Nullable Output<TrafficAnalyticsPropertiesArgs> flowAnalyticsConfiguration) {
            this.flowAnalyticsConfiguration = flowAnalyticsConfiguration;
            return this;
        }

        public Builder flowAnalyticsConfiguration(@Nullable TrafficAnalyticsPropertiesArgs flowAnalyticsConfiguration) {
            this.flowAnalyticsConfiguration = Output.ofNullable(flowAnalyticsConfiguration);
            return this;
        }

        public Builder flowLogName(@Nullable Output<String> flowLogName) {
            this.flowLogName = flowLogName;
            return this;
        }

        public Builder flowLogName(@Nullable String flowLogName) {
            this.flowLogName = Output.ofNullable(flowLogName);
            return this;
        }

        public Builder format(@Nullable Output<FlowLogFormatParametersArgs> format) {
            this.format = format;
            return this;
        }

        public Builder format(@Nullable FlowLogFormatParametersArgs format) {
            this.format = Output.ofNullable(format);
            return this;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder networkWatcherName(Output<String> networkWatcherName) {
            this.networkWatcherName = Objects.requireNonNull(networkWatcherName);
            return this;
        }

        public Builder networkWatcherName(String networkWatcherName) {
            this.networkWatcherName = Output.of(Objects.requireNonNull(networkWatcherName));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder retentionPolicy(@Nullable Output<RetentionPolicyParametersArgs> retentionPolicy) {
            this.retentionPolicy = retentionPolicy;
            return this;
        }

        public Builder retentionPolicy(@Nullable RetentionPolicyParametersArgs retentionPolicy) {
            this.retentionPolicy = Output.ofNullable(retentionPolicy);
            return this;
        }

        public Builder storageId(Output<String> storageId) {
            this.storageId = Objects.requireNonNull(storageId);
            return this;
        }

        public Builder storageId(String storageId) {
            this.storageId = Output.of(Objects.requireNonNull(storageId));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder targetResourceId(Output<String> targetResourceId) {
            this.targetResourceId = Objects.requireNonNull(targetResourceId);
            return this;
        }

        public Builder targetResourceId(String targetResourceId) {
            this.targetResourceId = Output.of(Objects.requireNonNull(targetResourceId));
            return this;
        }
        public FlowLogArgs build() {
            return new FlowLogArgs(enabled, flowAnalyticsConfiguration, flowLogName, format, id, location, networkWatcherName, resourceGroupName, retentionPolicy, storageId, tags, targetResourceId);
        }
    }
}
