// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.synapse.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Git integration settings
 * 
 */
public final class WorkspaceRepositoryConfigurationResponse extends io.pulumi.resources.InvokeArgs {

    public static final WorkspaceRepositoryConfigurationResponse Empty = new WorkspaceRepositoryConfigurationResponse();

    /**
     * Account name
     * 
     */
    @InputImport(name="accountName")
    private final @Nullable String accountName;

    public Optional<String> getAccountName() {
        return this.accountName == null ? Optional.empty() : Optional.ofNullable(this.accountName);
    }

    /**
     * Collaboration branch
     * 
     */
    @InputImport(name="collaborationBranch")
    private final @Nullable String collaborationBranch;

    public Optional<String> getCollaborationBranch() {
        return this.collaborationBranch == null ? Optional.empty() : Optional.ofNullable(this.collaborationBranch);
    }

    /**
     * GitHub Enterprise host name. For example: https://github.mydomain.com
     * 
     */
    @InputImport(name="hostName")
    private final @Nullable String hostName;

    public Optional<String> getHostName() {
        return this.hostName == null ? Optional.empty() : Optional.ofNullable(this.hostName);
    }

    /**
     * The last commit ID
     * 
     */
    @InputImport(name="lastCommitId")
    private final @Nullable String lastCommitId;

    public Optional<String> getLastCommitId() {
        return this.lastCommitId == null ? Optional.empty() : Optional.ofNullable(this.lastCommitId);
    }

    /**
     * VSTS project name
     * 
     */
    @InputImport(name="projectName")
    private final @Nullable String projectName;

    public Optional<String> getProjectName() {
        return this.projectName == null ? Optional.empty() : Optional.ofNullable(this.projectName);
    }

    /**
     * Repository name
     * 
     */
    @InputImport(name="repositoryName")
    private final @Nullable String repositoryName;

    public Optional<String> getRepositoryName() {
        return this.repositoryName == null ? Optional.empty() : Optional.ofNullable(this.repositoryName);
    }

    /**
     * Root folder to use in the repository
     * 
     */
    @InputImport(name="rootFolder")
    private final @Nullable String rootFolder;

    public Optional<String> getRootFolder() {
        return this.rootFolder == null ? Optional.empty() : Optional.ofNullable(this.rootFolder);
    }

    /**
     * The VSTS tenant ID
     * 
     */
    @InputImport(name="tenantId")
    private final @Nullable String tenantId;

    public Optional<String> getTenantId() {
        return this.tenantId == null ? Optional.empty() : Optional.ofNullable(this.tenantId);
    }

    /**
     * Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration, WorkspaceGitHubConfiguration
     * 
     */
    @InputImport(name="type")
    private final @Nullable String type;

    public Optional<String> getType() {
        return this.type == null ? Optional.empty() : Optional.ofNullable(this.type);
    }

    public WorkspaceRepositoryConfigurationResponse(
        @Nullable String accountName,
        @Nullable String collaborationBranch,
        @Nullable String hostName,
        @Nullable String lastCommitId,
        @Nullable String projectName,
        @Nullable String repositoryName,
        @Nullable String rootFolder,
        @Nullable String tenantId,
        @Nullable String type) {
        this.accountName = accountName;
        this.collaborationBranch = collaborationBranch;
        this.hostName = hostName;
        this.lastCommitId = lastCommitId;
        this.projectName = projectName;
        this.repositoryName = repositoryName;
        this.rootFolder = rootFolder;
        this.tenantId = tenantId;
        this.type = type;
    }

    private WorkspaceRepositoryConfigurationResponse() {
        this.accountName = null;
        this.collaborationBranch = null;
        this.hostName = null;
        this.lastCommitId = null;
        this.projectName = null;
        this.repositoryName = null;
        this.rootFolder = null;
        this.tenantId = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkspaceRepositoryConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accountName;
        private @Nullable String collaborationBranch;
        private @Nullable String hostName;
        private @Nullable String lastCommitId;
        private @Nullable String projectName;
        private @Nullable String repositoryName;
        private @Nullable String rootFolder;
        private @Nullable String tenantId;
        private @Nullable String type;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkspaceRepositoryConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.collaborationBranch = defaults.collaborationBranch;
    	      this.hostName = defaults.hostName;
    	      this.lastCommitId = defaults.lastCommitId;
    	      this.projectName = defaults.projectName;
    	      this.repositoryName = defaults.repositoryName;
    	      this.rootFolder = defaults.rootFolder;
    	      this.tenantId = defaults.tenantId;
    	      this.type = defaults.type;
        }

        public Builder setAccountName(@Nullable String accountName) {
            this.accountName = accountName;
            return this;
        }

        public Builder setCollaborationBranch(@Nullable String collaborationBranch) {
            this.collaborationBranch = collaborationBranch;
            return this;
        }

        public Builder setHostName(@Nullable String hostName) {
            this.hostName = hostName;
            return this;
        }

        public Builder setLastCommitId(@Nullable String lastCommitId) {
            this.lastCommitId = lastCommitId;
            return this;
        }

        public Builder setProjectName(@Nullable String projectName) {
            this.projectName = projectName;
            return this;
        }

        public Builder setRepositoryName(@Nullable String repositoryName) {
            this.repositoryName = repositoryName;
            return this;
        }

        public Builder setRootFolder(@Nullable String rootFolder) {
            this.rootFolder = rootFolder;
            return this;
        }

        public Builder setTenantId(@Nullable String tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = type;
            return this;
        }

        public WorkspaceRepositoryConfigurationResponse build() {
            return new WorkspaceRepositoryConfigurationResponse(accountName, collaborationBranch, hostName, lastCommitId, projectName, repositoryName, rootFolder, tenantId, type);
        }
    }
}
