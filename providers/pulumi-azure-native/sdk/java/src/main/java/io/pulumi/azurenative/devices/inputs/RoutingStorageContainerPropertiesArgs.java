// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devices.inputs;

import io.pulumi.azurenative.devices.enums.AuthenticationType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RoutingStorageContainerPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final RoutingStorageContainerPropertiesArgs Empty = new RoutingStorageContainerPropertiesArgs();

    @InputImport(name="authenticationType")
    private final @Nullable Input<Either<String,AuthenticationType>> authenticationType;

    public Input<Either<String,AuthenticationType>> getAuthenticationType() {
        return this.authenticationType == null ? Input.empty() : this.authenticationType;
    }

    @InputImport(name="batchFrequencyInSeconds")
    private final @Nullable Input<Integer> batchFrequencyInSeconds;

    public Input<Integer> getBatchFrequencyInSeconds() {
        return this.batchFrequencyInSeconds == null ? Input.empty() : this.batchFrequencyInSeconds;
    }

    @InputImport(name="connectionString")
    private final @Nullable Input<String> connectionString;

    public Input<String> getConnectionString() {
        return this.connectionString == null ? Input.empty() : this.connectionString;
    }

    @InputImport(name="containerName", required=true)
    private final Input<String> containerName;

    public Input<String> getContainerName() {
        return this.containerName;
    }

    @InputImport(name="encoding")
    private final @Nullable Input<String> encoding;

    public Input<String> getEncoding() {
        return this.encoding == null ? Input.empty() : this.encoding;
    }

    @InputImport(name="endpointUri")
    private final @Nullable Input<String> endpointUri;

    public Input<String> getEndpointUri() {
        return this.endpointUri == null ? Input.empty() : this.endpointUri;
    }

    @InputImport(name="fileNameFormat")
    private final @Nullable Input<String> fileNameFormat;

    public Input<String> getFileNameFormat() {
        return this.fileNameFormat == null ? Input.empty() : this.fileNameFormat;
    }

    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="maxChunkSizeInBytes")
    private final @Nullable Input<Integer> maxChunkSizeInBytes;

    public Input<Integer> getMaxChunkSizeInBytes() {
        return this.maxChunkSizeInBytes == null ? Input.empty() : this.maxChunkSizeInBytes;
    }

    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    @InputImport(name="resourceGroup")
    private final @Nullable Input<String> resourceGroup;

    public Input<String> getResourceGroup() {
        return this.resourceGroup == null ? Input.empty() : this.resourceGroup;
    }

    @InputImport(name="subscriptionId")
    private final @Nullable Input<String> subscriptionId;

    public Input<String> getSubscriptionId() {
        return this.subscriptionId == null ? Input.empty() : this.subscriptionId;
    }

    public RoutingStorageContainerPropertiesArgs(
        @Nullable Input<Either<String,AuthenticationType>> authenticationType,
        @Nullable Input<Integer> batchFrequencyInSeconds,
        @Nullable Input<String> connectionString,
        Input<String> containerName,
        @Nullable Input<String> encoding,
        @Nullable Input<String> endpointUri,
        @Nullable Input<String> fileNameFormat,
        @Nullable Input<String> id,
        @Nullable Input<Integer> maxChunkSizeInBytes,
        Input<String> name,
        @Nullable Input<String> resourceGroup,
        @Nullable Input<String> subscriptionId) {
        this.authenticationType = authenticationType;
        this.batchFrequencyInSeconds = batchFrequencyInSeconds;
        this.connectionString = connectionString;
        this.containerName = Objects.requireNonNull(containerName, "expected parameter 'containerName' to be non-null");
        this.encoding = encoding;
        this.endpointUri = endpointUri;
        this.fileNameFormat = fileNameFormat;
        this.id = id;
        this.maxChunkSizeInBytes = maxChunkSizeInBytes;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.resourceGroup = resourceGroup;
        this.subscriptionId = subscriptionId;
    }

    private RoutingStorageContainerPropertiesArgs() {
        this.authenticationType = Input.empty();
        this.batchFrequencyInSeconds = Input.empty();
        this.connectionString = Input.empty();
        this.containerName = Input.empty();
        this.encoding = Input.empty();
        this.endpointUri = Input.empty();
        this.fileNameFormat = Input.empty();
        this.id = Input.empty();
        this.maxChunkSizeInBytes = Input.empty();
        this.name = Input.empty();
        this.resourceGroup = Input.empty();
        this.subscriptionId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoutingStorageContainerPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,AuthenticationType>> authenticationType;
        private @Nullable Input<Integer> batchFrequencyInSeconds;
        private @Nullable Input<String> connectionString;
        private Input<String> containerName;
        private @Nullable Input<String> encoding;
        private @Nullable Input<String> endpointUri;
        private @Nullable Input<String> fileNameFormat;
        private @Nullable Input<String> id;
        private @Nullable Input<Integer> maxChunkSizeInBytes;
        private Input<String> name;
        private @Nullable Input<String> resourceGroup;
        private @Nullable Input<String> subscriptionId;

        public Builder() {
    	      // Empty
        }

        public Builder(RoutingStorageContainerPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationType = defaults.authenticationType;
    	      this.batchFrequencyInSeconds = defaults.batchFrequencyInSeconds;
    	      this.connectionString = defaults.connectionString;
    	      this.containerName = defaults.containerName;
    	      this.encoding = defaults.encoding;
    	      this.endpointUri = defaults.endpointUri;
    	      this.fileNameFormat = defaults.fileNameFormat;
    	      this.id = defaults.id;
    	      this.maxChunkSizeInBytes = defaults.maxChunkSizeInBytes;
    	      this.name = defaults.name;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.subscriptionId = defaults.subscriptionId;
        }

        public Builder setAuthenticationType(@Nullable Input<Either<String,AuthenticationType>> authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }

        public Builder setAuthenticationType(@Nullable Either<String,AuthenticationType> authenticationType) {
            this.authenticationType = Input.ofNullable(authenticationType);
            return this;
        }

        public Builder setBatchFrequencyInSeconds(@Nullable Input<Integer> batchFrequencyInSeconds) {
            this.batchFrequencyInSeconds = batchFrequencyInSeconds;
            return this;
        }

        public Builder setBatchFrequencyInSeconds(@Nullable Integer batchFrequencyInSeconds) {
            this.batchFrequencyInSeconds = Input.ofNullable(batchFrequencyInSeconds);
            return this;
        }

        public Builder setConnectionString(@Nullable Input<String> connectionString) {
            this.connectionString = connectionString;
            return this;
        }

        public Builder setConnectionString(@Nullable String connectionString) {
            this.connectionString = Input.ofNullable(connectionString);
            return this;
        }

        public Builder setContainerName(Input<String> containerName) {
            this.containerName = Objects.requireNonNull(containerName);
            return this;
        }

        public Builder setContainerName(String containerName) {
            this.containerName = Input.of(Objects.requireNonNull(containerName));
            return this;
        }

        public Builder setEncoding(@Nullable Input<String> encoding) {
            this.encoding = encoding;
            return this;
        }

        public Builder setEncoding(@Nullable String encoding) {
            this.encoding = Input.ofNullable(encoding);
            return this;
        }

        public Builder setEndpointUri(@Nullable Input<String> endpointUri) {
            this.endpointUri = endpointUri;
            return this;
        }

        public Builder setEndpointUri(@Nullable String endpointUri) {
            this.endpointUri = Input.ofNullable(endpointUri);
            return this;
        }

        public Builder setFileNameFormat(@Nullable Input<String> fileNameFormat) {
            this.fileNameFormat = fileNameFormat;
            return this;
        }

        public Builder setFileNameFormat(@Nullable String fileNameFormat) {
            this.fileNameFormat = Input.ofNullable(fileNameFormat);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setMaxChunkSizeInBytes(@Nullable Input<Integer> maxChunkSizeInBytes) {
            this.maxChunkSizeInBytes = maxChunkSizeInBytes;
            return this;
        }

        public Builder setMaxChunkSizeInBytes(@Nullable Integer maxChunkSizeInBytes) {
            this.maxChunkSizeInBytes = Input.ofNullable(maxChunkSizeInBytes);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setResourceGroup(@Nullable Input<String> resourceGroup) {
            this.resourceGroup = resourceGroup;
            return this;
        }

        public Builder setResourceGroup(@Nullable String resourceGroup) {
            this.resourceGroup = Input.ofNullable(resourceGroup);
            return this;
        }

        public Builder setSubscriptionId(@Nullable Input<String> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }

        public Builder setSubscriptionId(@Nullable String subscriptionId) {
            this.subscriptionId = Input.ofNullable(subscriptionId);
            return this;
        }

        public RoutingStorageContainerPropertiesArgs build() {
            return new RoutingStorageContainerPropertiesArgs(authenticationType, batchFrequencyInSeconds, connectionString, containerName, encoding, endpointUri, fileNameFormat, id, maxChunkSizeInBytes, name, resourceGroup, subscriptionId);
        }
    }
}
