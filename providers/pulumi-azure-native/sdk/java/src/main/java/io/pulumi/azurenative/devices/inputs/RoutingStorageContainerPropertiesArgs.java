// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devices.inputs;

import io.pulumi.azurenative.devices.enums.AuthenticationType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The properties related to a storage container endpoint.
 * 
 */
public final class RoutingStorageContainerPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final RoutingStorageContainerPropertiesArgs Empty = new RoutingStorageContainerPropertiesArgs();

    /**
     * Method used to authenticate against the storage endpoint
     * 
     */
    @Import(name="authenticationType")
      private final @Nullable Output<Either<String,AuthenticationType>> authenticationType;

    public Output<Either<String,AuthenticationType>> getAuthenticationType() {
        return this.authenticationType == null ? Output.empty() : this.authenticationType;
    }

    /**
     * Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.
     * 
     */
    @Import(name="batchFrequencyInSeconds")
      private final @Nullable Output<Integer> batchFrequencyInSeconds;

    public Output<Integer> getBatchFrequencyInSeconds() {
        return this.batchFrequencyInSeconds == null ? Output.empty() : this.batchFrequencyInSeconds;
    }

    /**
     * The connection string of the storage account.
     * 
     */
    @Import(name="connectionString")
      private final @Nullable Output<String> connectionString;

    public Output<String> getConnectionString() {
        return this.connectionString == null ? Output.empty() : this.connectionString;
    }

    /**
     * The name of storage container in the storage account.
     * 
     */
    @Import(name="containerName", required=true)
      private final Output<String> containerName;

    public Output<String> getContainerName() {
        return this.containerName;
    }

    /**
     * Encoding that is used to serialize messages to blobs. Supported values are 'avro', 'avrodeflate', and 'JSON'. Default value is 'avro'.
     * 
     */
    @Import(name="encoding")
      private final @Nullable Output<String> encoding;

    public Output<String> getEncoding() {
        return this.encoding == null ? Output.empty() : this.encoding;
    }

    /**
     * The url of the storage endpoint. It must include the protocol https://
     * 
     */
    @Import(name="endpointUri")
      private final @Nullable Output<String> endpointUri;

    public Output<String> getEndpointUri() {
        return this.endpointUri == null ? Output.empty() : this.endpointUri;
    }

    /**
     * File name format for the blob. Default format is {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are mandatory but can be reordered.
     * 
     */
    @Import(name="fileNameFormat")
      private final @Nullable Output<String> fileNameFormat;

    public Output<String> getFileNameFormat() {
        return this.fileNameFormat == null ? Output.empty() : this.fileNameFormat;
    }

    /**
     * Id of the storage container endpoint
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
     * 
     */
    @Import(name="maxChunkSizeInBytes")
      private final @Nullable Output<Integer> maxChunkSizeInBytes;

    public Output<Integer> getMaxChunkSizeInBytes() {
        return this.maxChunkSizeInBytes == null ? Output.empty() : this.maxChunkSizeInBytes;
    }

    /**
     * The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * The name of the resource group of the storage account.
     * 
     */
    @Import(name="resourceGroup")
      private final @Nullable Output<String> resourceGroup;

    public Output<String> getResourceGroup() {
        return this.resourceGroup == null ? Output.empty() : this.resourceGroup;
    }

    /**
     * The subscription identifier of the storage account.
     * 
     */
    @Import(name="subscriptionId")
      private final @Nullable Output<String> subscriptionId;

    public Output<String> getSubscriptionId() {
        return this.subscriptionId == null ? Output.empty() : this.subscriptionId;
    }

    public RoutingStorageContainerPropertiesArgs(
        @Nullable Output<Either<String,AuthenticationType>> authenticationType,
        @Nullable Output<Integer> batchFrequencyInSeconds,
        @Nullable Output<String> connectionString,
        Output<String> containerName,
        @Nullable Output<String> encoding,
        @Nullable Output<String> endpointUri,
        @Nullable Output<String> fileNameFormat,
        @Nullable Output<String> id,
        @Nullable Output<Integer> maxChunkSizeInBytes,
        Output<String> name,
        @Nullable Output<String> resourceGroup,
        @Nullable Output<String> subscriptionId) {
        this.authenticationType = authenticationType;
        this.batchFrequencyInSeconds = batchFrequencyInSeconds;
        this.connectionString = connectionString;
        this.containerName = Objects.requireNonNull(containerName, "expected parameter 'containerName' to be non-null");
        this.encoding = encoding;
        this.endpointUri = endpointUri;
        this.fileNameFormat = fileNameFormat;
        this.id = id;
        this.maxChunkSizeInBytes = maxChunkSizeInBytes;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.resourceGroup = resourceGroup;
        this.subscriptionId = subscriptionId;
    }

    private RoutingStorageContainerPropertiesArgs() {
        this.authenticationType = Output.empty();
        this.batchFrequencyInSeconds = Output.empty();
        this.connectionString = Output.empty();
        this.containerName = Output.empty();
        this.encoding = Output.empty();
        this.endpointUri = Output.empty();
        this.fileNameFormat = Output.empty();
        this.id = Output.empty();
        this.maxChunkSizeInBytes = Output.empty();
        this.name = Output.empty();
        this.resourceGroup = Output.empty();
        this.subscriptionId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoutingStorageContainerPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,AuthenticationType>> authenticationType;
        private @Nullable Output<Integer> batchFrequencyInSeconds;
        private @Nullable Output<String> connectionString;
        private Output<String> containerName;
        private @Nullable Output<String> encoding;
        private @Nullable Output<String> endpointUri;
        private @Nullable Output<String> fileNameFormat;
        private @Nullable Output<String> id;
        private @Nullable Output<Integer> maxChunkSizeInBytes;
        private Output<String> name;
        private @Nullable Output<String> resourceGroup;
        private @Nullable Output<String> subscriptionId;

        public Builder() {
    	      // Empty
        }

        public Builder(RoutingStorageContainerPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationType = defaults.authenticationType;
    	      this.batchFrequencyInSeconds = defaults.batchFrequencyInSeconds;
    	      this.connectionString = defaults.connectionString;
    	      this.containerName = defaults.containerName;
    	      this.encoding = defaults.encoding;
    	      this.endpointUri = defaults.endpointUri;
    	      this.fileNameFormat = defaults.fileNameFormat;
    	      this.id = defaults.id;
    	      this.maxChunkSizeInBytes = defaults.maxChunkSizeInBytes;
    	      this.name = defaults.name;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.subscriptionId = defaults.subscriptionId;
        }

        public Builder authenticationType(@Nullable Output<Either<String,AuthenticationType>> authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }

        public Builder authenticationType(@Nullable Either<String,AuthenticationType> authenticationType) {
            this.authenticationType = Output.ofNullable(authenticationType);
            return this;
        }

        public Builder batchFrequencyInSeconds(@Nullable Output<Integer> batchFrequencyInSeconds) {
            this.batchFrequencyInSeconds = batchFrequencyInSeconds;
            return this;
        }

        public Builder batchFrequencyInSeconds(@Nullable Integer batchFrequencyInSeconds) {
            this.batchFrequencyInSeconds = Output.ofNullable(batchFrequencyInSeconds);
            return this;
        }

        public Builder connectionString(@Nullable Output<String> connectionString) {
            this.connectionString = connectionString;
            return this;
        }

        public Builder connectionString(@Nullable String connectionString) {
            this.connectionString = Output.ofNullable(connectionString);
            return this;
        }

        public Builder containerName(Output<String> containerName) {
            this.containerName = Objects.requireNonNull(containerName);
            return this;
        }

        public Builder containerName(String containerName) {
            this.containerName = Output.of(Objects.requireNonNull(containerName));
            return this;
        }

        public Builder encoding(@Nullable Output<String> encoding) {
            this.encoding = encoding;
            return this;
        }

        public Builder encoding(@Nullable String encoding) {
            this.encoding = Output.ofNullable(encoding);
            return this;
        }

        public Builder endpointUri(@Nullable Output<String> endpointUri) {
            this.endpointUri = endpointUri;
            return this;
        }

        public Builder endpointUri(@Nullable String endpointUri) {
            this.endpointUri = Output.ofNullable(endpointUri);
            return this;
        }

        public Builder fileNameFormat(@Nullable Output<String> fileNameFormat) {
            this.fileNameFormat = fileNameFormat;
            return this;
        }

        public Builder fileNameFormat(@Nullable String fileNameFormat) {
            this.fileNameFormat = Output.ofNullable(fileNameFormat);
            return this;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }

        public Builder maxChunkSizeInBytes(@Nullable Output<Integer> maxChunkSizeInBytes) {
            this.maxChunkSizeInBytes = maxChunkSizeInBytes;
            return this;
        }

        public Builder maxChunkSizeInBytes(@Nullable Integer maxChunkSizeInBytes) {
            this.maxChunkSizeInBytes = Output.ofNullable(maxChunkSizeInBytes);
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder resourceGroup(@Nullable Output<String> resourceGroup) {
            this.resourceGroup = resourceGroup;
            return this;
        }

        public Builder resourceGroup(@Nullable String resourceGroup) {
            this.resourceGroup = Output.ofNullable(resourceGroup);
            return this;
        }

        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }

        public Builder subscriptionId(@Nullable String subscriptionId) {
            this.subscriptionId = Output.ofNullable(subscriptionId);
            return this;
        }
        public RoutingStorageContainerPropertiesArgs build() {
            return new RoutingStorageContainerPropertiesArgs(authenticationType, batchFrequencyInSeconds, connectionString, containerName, encoding, endpointUri, fileNameFormat, id, maxChunkSizeInBytes, name, resourceGroup, subscriptionId);
        }
    }
}
