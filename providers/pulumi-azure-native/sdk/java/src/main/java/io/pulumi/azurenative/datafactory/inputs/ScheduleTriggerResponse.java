// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.ScheduleTriggerRecurrenceResponse;
import io.pulumi.azurenative.datafactory.inputs.TriggerPipelineReferenceResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Trigger that creates pipeline runs periodically, on schedule.
 * 
 */
public final class ScheduleTriggerResponse extends io.pulumi.resources.InvokeArgs {

    public static final ScheduleTriggerResponse Empty = new ScheduleTriggerResponse();

    /**
     * List of tags that can be used for describing the trigger.
     * 
     */
    @Import(name="annotations")
      private final @Nullable List<Object> annotations;

    public List<Object> getAnnotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }

    /**
     * Trigger description.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> getDescription() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * Pipelines that need to be started.
     * 
     */
    @Import(name="pipelines")
      private final @Nullable List<TriggerPipelineReferenceResponse> pipelines;

    public List<TriggerPipelineReferenceResponse> getPipelines() {
        return this.pipelines == null ? List.of() : this.pipelines;
    }

    /**
     * Recurrence schedule configuration.
     * 
     */
    @Import(name="recurrence", required=true)
      private final ScheduleTriggerRecurrenceResponse recurrence;

    public ScheduleTriggerRecurrenceResponse getRecurrence() {
        return this.recurrence;
    }

    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    @Import(name="runtimeState", required=true)
      private final String runtimeState;

    public String getRuntimeState() {
        return this.runtimeState;
    }

    /**
     * Trigger type.
     * Expected value is 'ScheduleTrigger'.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    public ScheduleTriggerResponse(
        @Nullable List<Object> annotations,
        @Nullable String description,
        @Nullable List<TriggerPipelineReferenceResponse> pipelines,
        ScheduleTriggerRecurrenceResponse recurrence,
        String runtimeState,
        String type) {
        this.annotations = annotations;
        this.description = description;
        this.pipelines = pipelines;
        this.recurrence = Objects.requireNonNull(recurrence, "expected parameter 'recurrence' to be non-null");
        this.runtimeState = Objects.requireNonNull(runtimeState, "expected parameter 'runtimeState' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ScheduleTriggerResponse() {
        this.annotations = List.of();
        this.description = null;
        this.pipelines = List.of();
        this.recurrence = null;
        this.runtimeState = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<Object> annotations;
        private @Nullable String description;
        private @Nullable List<TriggerPipelineReferenceResponse> pipelines;
        private ScheduleTriggerRecurrenceResponse recurrence;
        private String runtimeState;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduleTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.description = defaults.description;
    	      this.pipelines = defaults.pipelines;
    	      this.recurrence = defaults.recurrence;
    	      this.runtimeState = defaults.runtimeState;
    	      this.type = defaults.type;
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder pipelines(@Nullable List<TriggerPipelineReferenceResponse> pipelines) {
            this.pipelines = pipelines;
            return this;
        }

        public Builder recurrence(ScheduleTriggerRecurrenceResponse recurrence) {
            this.recurrence = Objects.requireNonNull(recurrence);
            return this;
        }

        public Builder runtimeState(String runtimeState) {
            this.runtimeState = Objects.requireNonNull(runtimeState);
            return this;
        }

        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ScheduleTriggerResponse build() {
            return new ScheduleTriggerResponse(annotations, description, pipelines, recurrence, runtimeState, type);
        }
    }
}
