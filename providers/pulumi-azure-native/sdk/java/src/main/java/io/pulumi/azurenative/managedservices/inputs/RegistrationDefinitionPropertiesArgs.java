// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.managedservices.inputs;

import io.pulumi.azurenative.managedservices.inputs.AuthorizationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Properties of a registration definition.
 * 
 */
public final class RegistrationDefinitionPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final RegistrationDefinitionPropertiesArgs Empty = new RegistrationDefinitionPropertiesArgs();

    /**
     * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
     * 
     */
    @InputImport(name="authorizations", required=true)
      private final Output<List<AuthorizationArgs>> authorizations;

    public Output<List<AuthorizationArgs>> getAuthorizations() {
        return this.authorizations;
    }

    /**
     * Description of the registration definition.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Id of the managedBy tenant.
     * 
     */
    @InputImport(name="managedByTenantId", required=true)
      private final Output<String> managedByTenantId;

    public Output<String> getManagedByTenantId() {
        return this.managedByTenantId;
    }

    /**
     * Name of the registration definition.
     * 
     */
    @InputImport(name="registrationDefinitionName")
      private final @Nullable Output<String> registrationDefinitionName;

    public Output<String> getRegistrationDefinitionName() {
        return this.registrationDefinitionName == null ? Output.empty() : this.registrationDefinitionName;
    }

    public RegistrationDefinitionPropertiesArgs(
        Output<List<AuthorizationArgs>> authorizations,
        @Nullable Output<String> description,
        Output<String> managedByTenantId,
        @Nullable Output<String> registrationDefinitionName) {
        this.authorizations = Objects.requireNonNull(authorizations, "expected parameter 'authorizations' to be non-null");
        this.description = description;
        this.managedByTenantId = Objects.requireNonNull(managedByTenantId, "expected parameter 'managedByTenantId' to be non-null");
        this.registrationDefinitionName = registrationDefinitionName;
    }

    private RegistrationDefinitionPropertiesArgs() {
        this.authorizations = Output.empty();
        this.description = Output.empty();
        this.managedByTenantId = Output.empty();
        this.registrationDefinitionName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistrationDefinitionPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<AuthorizationArgs>> authorizations;
        private @Nullable Output<String> description;
        private Output<String> managedByTenantId;
        private @Nullable Output<String> registrationDefinitionName;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistrationDefinitionPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizations = defaults.authorizations;
    	      this.description = defaults.description;
    	      this.managedByTenantId = defaults.managedByTenantId;
    	      this.registrationDefinitionName = defaults.registrationDefinitionName;
        }

        public Builder authorizations(Output<List<AuthorizationArgs>> authorizations) {
            this.authorizations = Objects.requireNonNull(authorizations);
            return this;
        }

        public Builder authorizations(List<AuthorizationArgs> authorizations) {
            this.authorizations = Output.of(Objects.requireNonNull(authorizations));
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder managedByTenantId(Output<String> managedByTenantId) {
            this.managedByTenantId = Objects.requireNonNull(managedByTenantId);
            return this;
        }

        public Builder managedByTenantId(String managedByTenantId) {
            this.managedByTenantId = Output.of(Objects.requireNonNull(managedByTenantId));
            return this;
        }

        public Builder registrationDefinitionName(@Nullable Output<String> registrationDefinitionName) {
            this.registrationDefinitionName = registrationDefinitionName;
            return this;
        }

        public Builder registrationDefinitionName(@Nullable String registrationDefinitionName) {
            this.registrationDefinitionName = Output.ofNullable(registrationDefinitionName);
            return this;
        }
        public RegistrationDefinitionPropertiesArgs build() {
            return new RegistrationDefinitionPropertiesArgs(authorizations, description, managedByTenantId, registrationDefinitionName);
        }
    }
}
