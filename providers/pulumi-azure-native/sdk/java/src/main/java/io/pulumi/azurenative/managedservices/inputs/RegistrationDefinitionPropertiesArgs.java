// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.managedservices.inputs;

import io.pulumi.azurenative.managedservices.inputs.AuthorizationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegistrationDefinitionPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final RegistrationDefinitionPropertiesArgs Empty = new RegistrationDefinitionPropertiesArgs();

    @InputImport(name="authorizations", required=true)
    private final Input<List<AuthorizationArgs>> authorizations;

    public Input<List<AuthorizationArgs>> getAuthorizations() {
        return this.authorizations;
    }

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="managedByTenantId", required=true)
    private final Input<String> managedByTenantId;

    public Input<String> getManagedByTenantId() {
        return this.managedByTenantId;
    }

    @InputImport(name="registrationDefinitionName")
    private final @Nullable Input<String> registrationDefinitionName;

    public Input<String> getRegistrationDefinitionName() {
        return this.registrationDefinitionName == null ? Input.empty() : this.registrationDefinitionName;
    }

    public RegistrationDefinitionPropertiesArgs(
        Input<List<AuthorizationArgs>> authorizations,
        @Nullable Input<String> description,
        Input<String> managedByTenantId,
        @Nullable Input<String> registrationDefinitionName) {
        this.authorizations = Objects.requireNonNull(authorizations, "expected parameter 'authorizations' to be non-null");
        this.description = description;
        this.managedByTenantId = Objects.requireNonNull(managedByTenantId, "expected parameter 'managedByTenantId' to be non-null");
        this.registrationDefinitionName = registrationDefinitionName;
    }

    private RegistrationDefinitionPropertiesArgs() {
        this.authorizations = Input.empty();
        this.description = Input.empty();
        this.managedByTenantId = Input.empty();
        this.registrationDefinitionName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistrationDefinitionPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<AuthorizationArgs>> authorizations;
        private @Nullable Input<String> description;
        private Input<String> managedByTenantId;
        private @Nullable Input<String> registrationDefinitionName;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistrationDefinitionPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizations = defaults.authorizations;
    	      this.description = defaults.description;
    	      this.managedByTenantId = defaults.managedByTenantId;
    	      this.registrationDefinitionName = defaults.registrationDefinitionName;
        }

        public Builder setAuthorizations(Input<List<AuthorizationArgs>> authorizations) {
            this.authorizations = Objects.requireNonNull(authorizations);
            return this;
        }

        public Builder setAuthorizations(List<AuthorizationArgs> authorizations) {
            this.authorizations = Input.of(Objects.requireNonNull(authorizations));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setManagedByTenantId(Input<String> managedByTenantId) {
            this.managedByTenantId = Objects.requireNonNull(managedByTenantId);
            return this;
        }

        public Builder setManagedByTenantId(String managedByTenantId) {
            this.managedByTenantId = Input.of(Objects.requireNonNull(managedByTenantId));
            return this;
        }

        public Builder setRegistrationDefinitionName(@Nullable Input<String> registrationDefinitionName) {
            this.registrationDefinitionName = registrationDefinitionName;
            return this;
        }

        public Builder setRegistrationDefinitionName(@Nullable String registrationDefinitionName) {
            this.registrationDefinitionName = Input.ofNullable(registrationDefinitionName);
            return this;
        }

        public RegistrationDefinitionPropertiesArgs build() {
            return new RegistrationDefinitionPropertiesArgs(authorizations, description, managedByTenantId, registrationDefinitionName);
        }
    }
}
