// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.sql.inputs.VulnerabilityAssessmentRecurringScansPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseVulnerabilityAssessmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseVulnerabilityAssessmentArgs Empty = new DatabaseVulnerabilityAssessmentArgs();

    /**
     * The name of the database for which the vulnerability assessment is defined.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName;
    }

    /**
     * The recurring scans settings
     * 
     */
    @Import(name="recurringScans")
      private final @Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans;

    public Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> getRecurringScans() {
        return this.recurringScans == null ? Codegen.empty() : this.recurringScans;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
      private final Output<String> serverName;

    public Output<String> getServerName() {
        return this.serverName;
    }

    /**
     * Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
     * 
     */
    @Import(name="storageAccountAccessKey")
      private final @Nullable Output<String> storageAccountAccessKey;

    public Output<String> getStorageAccountAccessKey() {
        return this.storageAccountAccessKey == null ? Codegen.empty() : this.storageAccountAccessKey;
    }

    /**
     * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
     * 
     */
    @Import(name="storageContainerPath")
      private final @Nullable Output<String> storageContainerPath;

    public Output<String> getStorageContainerPath() {
        return this.storageContainerPath == null ? Codegen.empty() : this.storageContainerPath;
    }

    /**
     * A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
     * 
     */
    @Import(name="storageContainerSasKey")
      private final @Nullable Output<String> storageContainerSasKey;

    public Output<String> getStorageContainerSasKey() {
        return this.storageContainerSasKey == null ? Codegen.empty() : this.storageContainerSasKey;
    }

    /**
     * The name of the vulnerability assessment.
     * 
     */
    @Import(name="vulnerabilityAssessmentName")
      private final @Nullable Output<String> vulnerabilityAssessmentName;

    public Output<String> getVulnerabilityAssessmentName() {
        return this.vulnerabilityAssessmentName == null ? Codegen.empty() : this.vulnerabilityAssessmentName;
    }

    public DatabaseVulnerabilityAssessmentArgs(
        Output<String> databaseName,
        @Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans,
        Output<String> resourceGroupName,
        Output<String> serverName,
        @Nullable Output<String> storageAccountAccessKey,
        @Nullable Output<String> storageContainerPath,
        @Nullable Output<String> storageContainerSasKey,
        @Nullable Output<String> vulnerabilityAssessmentName) {
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.recurringScans = recurringScans;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
        this.storageAccountAccessKey = storageAccountAccessKey;
        this.storageContainerPath = storageContainerPath;
        this.storageContainerSasKey = storageContainerSasKey;
        this.vulnerabilityAssessmentName = vulnerabilityAssessmentName;
    }

    private DatabaseVulnerabilityAssessmentArgs() {
        this.databaseName = Codegen.empty();
        this.recurringScans = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.serverName = Codegen.empty();
        this.storageAccountAccessKey = Codegen.empty();
        this.storageContainerPath = Codegen.empty();
        this.storageContainerSasKey = Codegen.empty();
        this.vulnerabilityAssessmentName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseVulnerabilityAssessmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> databaseName;
        private @Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans;
        private Output<String> resourceGroupName;
        private Output<String> serverName;
        private @Nullable Output<String> storageAccountAccessKey;
        private @Nullable Output<String> storageContainerPath;
        private @Nullable Output<String> storageContainerSasKey;
        private @Nullable Output<String> vulnerabilityAssessmentName;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseVulnerabilityAssessmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.recurringScans = defaults.recurringScans;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.storageAccountAccessKey = defaults.storageAccountAccessKey;
    	      this.storageContainerPath = defaults.storageContainerPath;
    	      this.storageContainerSasKey = defaults.storageContainerSasKey;
    	      this.vulnerabilityAssessmentName = defaults.vulnerabilityAssessmentName;
        }

        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder recurringScans(@Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans) {
            this.recurringScans = recurringScans;
            return this;
        }
        public Builder recurringScans(@Nullable VulnerabilityAssessmentRecurringScansPropertiesArgs recurringScans) {
            this.recurringScans = Codegen.ofNullable(recurringScans);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serverName(Output<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }
        public Builder serverName(String serverName) {
            this.serverName = Output.of(Objects.requireNonNull(serverName));
            return this;
        }
        public Builder storageAccountAccessKey(@Nullable Output<String> storageAccountAccessKey) {
            this.storageAccountAccessKey = storageAccountAccessKey;
            return this;
        }
        public Builder storageAccountAccessKey(@Nullable String storageAccountAccessKey) {
            this.storageAccountAccessKey = Codegen.ofNullable(storageAccountAccessKey);
            return this;
        }
        public Builder storageContainerPath(@Nullable Output<String> storageContainerPath) {
            this.storageContainerPath = storageContainerPath;
            return this;
        }
        public Builder storageContainerPath(@Nullable String storageContainerPath) {
            this.storageContainerPath = Codegen.ofNullable(storageContainerPath);
            return this;
        }
        public Builder storageContainerSasKey(@Nullable Output<String> storageContainerSasKey) {
            this.storageContainerSasKey = storageContainerSasKey;
            return this;
        }
        public Builder storageContainerSasKey(@Nullable String storageContainerSasKey) {
            this.storageContainerSasKey = Codegen.ofNullable(storageContainerSasKey);
            return this;
        }
        public Builder vulnerabilityAssessmentName(@Nullable Output<String> vulnerabilityAssessmentName) {
            this.vulnerabilityAssessmentName = vulnerabilityAssessmentName;
            return this;
        }
        public Builder vulnerabilityAssessmentName(@Nullable String vulnerabilityAssessmentName) {
            this.vulnerabilityAssessmentName = Codegen.ofNullable(vulnerabilityAssessmentName);
            return this;
        }        public DatabaseVulnerabilityAssessmentArgs build() {
            return new DatabaseVulnerabilityAssessmentArgs(databaseName, recurringScans, resourceGroupName, serverName, storageAccountAccessKey, storageContainerPath, storageContainerSasKey, vulnerabilityAssessmentName);
        }
    }
}
