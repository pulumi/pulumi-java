// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab;

import io.pulumi.azurenative.devtestlab.enums.PolicyEvaluatorType;
import io.pulumi.azurenative.devtestlab.enums.PolicyFactName;
import io.pulumi.azurenative.devtestlab.enums.PolicyStatus;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final PolicyArgs Empty = new PolicyArgs();

    /**
     * The description of the policy.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
     * 
     */
    @Import(name="evaluatorType")
      private final @Nullable Output<Either<String,PolicyEvaluatorType>> evaluatorType;

    public Output<Either<String,PolicyEvaluatorType>> getEvaluatorType() {
        return this.evaluatorType == null ? Output.empty() : this.evaluatorType;
    }

    /**
     * The fact data of the policy.
     * 
     */
    @Import(name="factData")
      private final @Nullable Output<String> factData;

    public Output<String> getFactData() {
        return this.factData == null ? Output.empty() : this.factData;
    }

    /**
     * The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
     * 
     */
    @Import(name="factName")
      private final @Nullable Output<Either<String,PolicyFactName>> factName;

    public Output<Either<String,PolicyFactName>> getFactName() {
        return this.factName == null ? Output.empty() : this.factName;
    }

    /**
     * The name of the lab.
     * 
     */
    @Import(name="labName", required=true)
      private final Output<String> labName;

    public Output<String> getLabName() {
        return this.labName;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name of the policy.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The name of the policy set.
     * 
     */
    @Import(name="policySetName", required=true)
      private final Output<String> policySetName;

    public Output<String> getPolicySetName() {
        return this.policySetName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The status of the policy.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<Either<String,PolicyStatus>> status;

    public Output<Either<String,PolicyStatus>> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).
     * 
     */
    @Import(name="threshold")
      private final @Nullable Output<String> threshold;

    public Output<String> getThreshold() {
        return this.threshold == null ? Output.empty() : this.threshold;
    }

    public PolicyArgs(
        @Nullable Output<String> description,
        @Nullable Output<Either<String,PolicyEvaluatorType>> evaluatorType,
        @Nullable Output<String> factData,
        @Nullable Output<Either<String,PolicyFactName>> factName,
        Output<String> labName,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        Output<String> policySetName,
        Output<String> resourceGroupName,
        @Nullable Output<Either<String,PolicyStatus>> status,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> threshold) {
        this.description = description;
        this.evaluatorType = evaluatorType;
        this.factData = factData;
        this.factName = factName;
        this.labName = Objects.requireNonNull(labName, "expected parameter 'labName' to be non-null");
        this.location = location;
        this.name = name;
        this.policySetName = Objects.requireNonNull(policySetName, "expected parameter 'policySetName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.status = status;
        this.tags = tags;
        this.threshold = threshold;
    }

    private PolicyArgs() {
        this.description = Output.empty();
        this.evaluatorType = Output.empty();
        this.factData = Output.empty();
        this.factName = Output.empty();
        this.labName = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.policySetName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.status = Output.empty();
        this.tags = Output.empty();
        this.threshold = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<Either<String,PolicyEvaluatorType>> evaluatorType;
        private @Nullable Output<String> factData;
        private @Nullable Output<Either<String,PolicyFactName>> factName;
        private Output<String> labName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private Output<String> policySetName;
        private Output<String> resourceGroupName;
        private @Nullable Output<Either<String,PolicyStatus>> status;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> threshold;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.evaluatorType = defaults.evaluatorType;
    	      this.factData = defaults.factData;
    	      this.factName = defaults.factName;
    	      this.labName = defaults.labName;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.policySetName = defaults.policySetName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.threshold = defaults.threshold;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder evaluatorType(@Nullable Output<Either<String,PolicyEvaluatorType>> evaluatorType) {
            this.evaluatorType = evaluatorType;
            return this;
        }
        public Builder evaluatorType(@Nullable Either<String,PolicyEvaluatorType> evaluatorType) {
            this.evaluatorType = Output.ofNullable(evaluatorType);
            return this;
        }
        public Builder factData(@Nullable Output<String> factData) {
            this.factData = factData;
            return this;
        }
        public Builder factData(@Nullable String factData) {
            this.factData = Output.ofNullable(factData);
            return this;
        }
        public Builder factName(@Nullable Output<Either<String,PolicyFactName>> factName) {
            this.factName = factName;
            return this;
        }
        public Builder factName(@Nullable Either<String,PolicyFactName> factName) {
            this.factName = Output.ofNullable(factName);
            return this;
        }
        public Builder labName(Output<String> labName) {
            this.labName = Objects.requireNonNull(labName);
            return this;
        }
        public Builder labName(String labName) {
            this.labName = Output.of(Objects.requireNonNull(labName));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder policySetName(Output<String> policySetName) {
            this.policySetName = Objects.requireNonNull(policySetName);
            return this;
        }
        public Builder policySetName(String policySetName) {
            this.policySetName = Output.of(Objects.requireNonNull(policySetName));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder status(@Nullable Output<Either<String,PolicyStatus>> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable Either<String,PolicyStatus> status) {
            this.status = Output.ofNullable(status);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder threshold(@Nullable Output<String> threshold) {
            this.threshold = threshold;
            return this;
        }
        public Builder threshold(@Nullable String threshold) {
            this.threshold = Output.ofNullable(threshold);
            return this;
        }        public PolicyArgs build() {
            return new PolicyArgs(description, evaluatorType, factData, factName, labName, location, name, policySetName, resourceGroupName, status, tags, threshold);
        }
    }
}
