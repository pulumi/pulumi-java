// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.kusto;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScriptArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScriptArgs Empty = new ScriptArgs();

    /**
     * The name of the Kusto cluster.
     * 
     */
    @InputImport(name="clusterName", required=true)
      private final Input<String> clusterName;

    public Input<String> getClusterName() {
        return this.clusterName;
    }

    /**
     * Flag that indicates whether to continue if one of the command fails.
     * 
     */
    @InputImport(name="continueOnErrors")
      private final @Nullable Input<Boolean> continueOnErrors;

    public Input<Boolean> getContinueOnErrors() {
        return this.continueOnErrors == null ? Input.empty() : this.continueOnErrors;
    }

    /**
     * The name of the database in the Kusto cluster.
     * 
     */
    @InputImport(name="databaseName", required=true)
      private final Input<String> databaseName;

    public Input<String> getDatabaseName() {
        return this.databaseName;
    }

    /**
     * A unique string. If changed the script will be applied again.
     * 
     */
    @InputImport(name="forceUpdateTag")
      private final @Nullable Input<String> forceUpdateTag;

    public Input<String> getForceUpdateTag() {
        return this.forceUpdateTag == null ? Input.empty() : this.forceUpdateTag;
    }

    /**
     * The name of the resource group containing the Kusto cluster.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the Kusto database script.
     * 
     */
    @InputImport(name="scriptName")
      private final @Nullable Input<String> scriptName;

    public Input<String> getScriptName() {
        return this.scriptName == null ? Input.empty() : this.scriptName;
    }

    /**
     * The url to the KQL script blob file.
     * 
     */
    @InputImport(name="scriptUrl", required=true)
      private final Input<String> scriptUrl;

    public Input<String> getScriptUrl() {
        return this.scriptUrl;
    }

    /**
     * The SaS token.
     * 
     */
    @InputImport(name="scriptUrlSasToken", required=true)
      private final Input<String> scriptUrlSasToken;

    public Input<String> getScriptUrlSasToken() {
        return this.scriptUrlSasToken;
    }

    public ScriptArgs(
        Input<String> clusterName,
        @Nullable Input<Boolean> continueOnErrors,
        Input<String> databaseName,
        @Nullable Input<String> forceUpdateTag,
        Input<String> resourceGroupName,
        @Nullable Input<String> scriptName,
        Input<String> scriptUrl,
        Input<String> scriptUrlSasToken) {
        this.clusterName = Objects.requireNonNull(clusterName, "expected parameter 'clusterName' to be non-null");
        this.continueOnErrors = continueOnErrors == null ? Input.ofNullable(false) : continueOnErrors;
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.forceUpdateTag = forceUpdateTag;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scriptName = scriptName;
        this.scriptUrl = Objects.requireNonNull(scriptUrl, "expected parameter 'scriptUrl' to be non-null");
        this.scriptUrlSasToken = Objects.requireNonNull(scriptUrlSasToken, "expected parameter 'scriptUrlSasToken' to be non-null");
    }

    private ScriptArgs() {
        this.clusterName = Input.empty();
        this.continueOnErrors = Input.empty();
        this.databaseName = Input.empty();
        this.forceUpdateTag = Input.empty();
        this.resourceGroupName = Input.empty();
        this.scriptName = Input.empty();
        this.scriptUrl = Input.empty();
        this.scriptUrlSasToken = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScriptArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> clusterName;
        private @Nullable Input<Boolean> continueOnErrors;
        private Input<String> databaseName;
        private @Nullable Input<String> forceUpdateTag;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> scriptName;
        private Input<String> scriptUrl;
        private Input<String> scriptUrlSasToken;

        public Builder() {
    	      // Empty
        }

        public Builder(ScriptArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterName = defaults.clusterName;
    	      this.continueOnErrors = defaults.continueOnErrors;
    	      this.databaseName = defaults.databaseName;
    	      this.forceUpdateTag = defaults.forceUpdateTag;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scriptName = defaults.scriptName;
    	      this.scriptUrl = defaults.scriptUrl;
    	      this.scriptUrlSasToken = defaults.scriptUrlSasToken;
        }

        public Builder clusterName(Input<String> clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }

        public Builder clusterName(String clusterName) {
            this.clusterName = Input.of(Objects.requireNonNull(clusterName));
            return this;
        }

        public Builder continueOnErrors(@Nullable Input<Boolean> continueOnErrors) {
            this.continueOnErrors = continueOnErrors;
            return this;
        }

        public Builder continueOnErrors(@Nullable Boolean continueOnErrors) {
            this.continueOnErrors = Input.ofNullable(continueOnErrors);
            return this;
        }

        public Builder databaseName(Input<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder databaseName(String databaseName) {
            this.databaseName = Input.of(Objects.requireNonNull(databaseName));
            return this;
        }

        public Builder forceUpdateTag(@Nullable Input<String> forceUpdateTag) {
            this.forceUpdateTag = forceUpdateTag;
            return this;
        }

        public Builder forceUpdateTag(@Nullable String forceUpdateTag) {
            this.forceUpdateTag = Input.ofNullable(forceUpdateTag);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder scriptName(@Nullable Input<String> scriptName) {
            this.scriptName = scriptName;
            return this;
        }

        public Builder scriptName(@Nullable String scriptName) {
            this.scriptName = Input.ofNullable(scriptName);
            return this;
        }

        public Builder scriptUrl(Input<String> scriptUrl) {
            this.scriptUrl = Objects.requireNonNull(scriptUrl);
            return this;
        }

        public Builder scriptUrl(String scriptUrl) {
            this.scriptUrl = Input.of(Objects.requireNonNull(scriptUrl));
            return this;
        }

        public Builder scriptUrlSasToken(Input<String> scriptUrlSasToken) {
            this.scriptUrlSasToken = Objects.requireNonNull(scriptUrlSasToken);
            return this;
        }

        public Builder scriptUrlSasToken(String scriptUrlSasToken) {
            this.scriptUrlSasToken = Input.of(Objects.requireNonNull(scriptUrlSasToken));
            return this;
        }
        public ScriptArgs build() {
            return new ScriptArgs(clusterName, continueOnErrors, databaseName, forceUpdateTag, resourceGroupName, scriptName, scriptUrl, scriptUrlSasToken);
        }
    }
}
