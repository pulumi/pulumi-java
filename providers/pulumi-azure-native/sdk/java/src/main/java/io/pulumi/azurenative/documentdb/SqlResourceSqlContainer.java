// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.documentdb.SqlResourceSqlContainerArgs;
import io.pulumi.azurenative.documentdb.outputs.SqlContainerGetPropertiesResponseOptions;
import io.pulumi.azurenative.documentdb.outputs.SqlContainerGetPropertiesResponseResource;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * An Azure Cosmos DB container.
API Version: 2021-03-15.

{{% examples %}}
## Example Usage
{{% example %}}
### CosmosDBSqlContainerCreateUpdate
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var sqlResourceSqlContainer = new AzureNative.DocumentDB.SqlResourceSqlContainer("sqlResourceSqlContainer", new AzureNative.DocumentDB.SqlResourceSqlContainerArgs
        {
            AccountName = "ddb1",
            ContainerName = "containerName",
            DatabaseName = "databaseName",
            Location = "West US",
            Options = ,
            Resource = new AzureNative.DocumentDB.Inputs.SqlContainerResourceArgs
            {
                ConflictResolutionPolicy = new AzureNative.DocumentDB.Inputs.ConflictResolutionPolicyArgs
                {
                    ConflictResolutionPath = "/path",
                    Mode = "LastWriterWins",
                },
                DefaultTtl = 100,
                Id = "containerName",
                IndexingPolicy = new AzureNative.DocumentDB.Inputs.IndexingPolicyArgs
                {
                    Automatic = true,
                    ExcludedPaths = {},
                    IncludedPaths = 
                    {
                        new AzureNative.DocumentDB.Inputs.IncludedPathArgs
                        {
                            Indexes = 
                            {
                                new AzureNative.DocumentDB.Inputs.IndexesArgs
                                {
                                    DataType = "String",
                                    Kind = "Range",
                                    Precision = -1,
                                },
                                new AzureNative.DocumentDB.Inputs.IndexesArgs
                                {
                                    DataType = "Number",
                                    Kind = "Range",
                                    Precision = -1,
                                },
                            },
                            Path = "/*",
                        },
                    },
                    IndexingMode = "consistent",
                },
                PartitionKey = new AzureNative.DocumentDB.Inputs.ContainerPartitionKeyArgs
                {
                    Kind = "Hash",
                    Paths = 
                    {
                        "/AccountNumber",
                    },
                },
                UniqueKeyPolicy = new AzureNative.DocumentDB.Inputs.UniqueKeyPolicyArgs
                {
                    UniqueKeys = 
                    {
                        new AzureNative.DocumentDB.Inputs.UniqueKeyArgs
                        {
                            Paths = 
                            {
                                "/testPath",
                            },
                        },
                    },
                },
            },
            ResourceGroupName = "rg1",
            Tags = ,
        });
    }

}

```

```go
package main

import (
	documentdb "github.com/pulumi/pulumi-azure-native/sdk/go/azure/documentdb"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := documentdb.NewSqlResourceSqlContainer(ctx, "sqlResourceSqlContainer", &documentdb.SqlResourceSqlContainerArgs{
			AccountName:   pulumi.String("ddb1"),
			ContainerName: pulumi.String("containerName"),
			DatabaseName:  pulumi.String("databaseName"),
			Location:      pulumi.String("West US"),
			Options:       nil,
			Resource: &documentdb.SqlContainerResourceArgs{
				ConflictResolutionPolicy: &documentdb.ConflictResolutionPolicyArgs{
					ConflictResolutionPath: pulumi.String("/path"),
					Mode:                   pulumi.String("LastWriterWins"),
				},
				DefaultTtl: pulumi.Int(100),
				Id:         pulumi.String("containerName"),
				IndexingPolicy: &documentdb.IndexingPolicyArgs{
					Automatic:     pulumi.Bool(true),
					ExcludedPaths: documentdb.ExcludedPathArray{},
					IncludedPaths: documentdb.IncludedPathArray{
						&documentdb.IncludedPathArgs{
							Indexes: documentdb.IndexesArray{
								&documentdb.IndexesArgs{
									DataType:  pulumi.String("String"),
									Kind:      pulumi.String("Range"),
									Precision: -1,
								},
								&documentdb.IndexesArgs{
									DataType:  pulumi.String("Number"),
									Kind:      pulumi.String("Range"),
									Precision: -1,
								},
							},
							Path: pulumi.String("/*"),
						},
					},
					IndexingMode: pulumi.String("consistent"),
				},
				PartitionKey: &documentdb.ContainerPartitionKeyArgs{
					Kind: pulumi.String("Hash"),
					Paths: pulumi.StringArray{
						pulumi.String("/AccountNumber"),
					},
				},
				UniqueKeyPolicy: &documentdb.UniqueKeyPolicyArgs{
					UniqueKeys: documentdb.UniqueKeyArray{
						&documentdb.UniqueKeyArgs{
							Paths: pulumi.StringArray{
								pulumi.String("/testPath"),
							},
						},
					},
				},
			},
			ResourceGroupName: pulumi.String("rg1"),
			Tags:              nil,
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const sqlResourceSqlContainer = new azure_native.documentdb.SqlResourceSqlContainer("sqlResourceSqlContainer", {
    accountName: "ddb1",
    containerName: "containerName",
    databaseName: "databaseName",
    location: "West US",
    options: {},
    resource: {
        conflictResolutionPolicy: {
            conflictResolutionPath: "/path",
            mode: "LastWriterWins",
        },
        defaultTtl: 100,
        id: "containerName",
        indexingPolicy: {
            automatic: true,
            excludedPaths: [],
            includedPaths: [{
                indexes: [
                    {
                        dataType: "String",
                        kind: "Range",
                        precision: -1,
                    },
                    {
                        dataType: "Number",
                        kind: "Range",
                        precision: -1,
                    },
                ],
                path: "/*",
            }],
            indexingMode: "consistent",
        },
        partitionKey: {
            kind: "Hash",
            paths: ["/AccountNumber"],
        },
        uniqueKeyPolicy: {
            uniqueKeys: [{
                paths: ["/testPath"],
            }],
        },
    },
    resourceGroupName: "rg1",
    tags: {},
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer("sqlResourceSqlContainer",
    account_name="ddb1",
    container_name="containerName",
    database_name="databaseName",
    location="West US",
    options=azure_native.documentdb.CreateUpdateOptionsArgs(),
    resource=azure_native.documentdb.SqlContainerResourceArgs(
        conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(
            conflict_resolution_path="/path",
            mode="LastWriterWins",
        ),
        default_ttl=100,
        id="containerName",
        indexing_policy=azure_native.documentdb.IndexingPolicyArgs(
            automatic=True,
            excluded_paths=[],
            included_paths=[azure_native.documentdb.IncludedPathArgs(
                indexes=[
                    azure_native.documentdb.IndexesArgs(
                        data_type="String",
                        kind="Range",
                        precision=-1,
                    ),
                    azure_native.documentdb.IndexesArgs(
                        data_type="Number",
                        kind="Range",
                        precision=-1,
                    ),
                ],
                path="/*",
            )],
            indexing_mode="consistent",
        ),
        partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(
            kind="Hash",
            paths=["/AccountNumber"],
        ),
        unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(
            unique_keys=[azure_native.documentdb.UniqueKeyArgs(
                paths=["/testPath"],
            )],
        ),
    ),
    resource_group_name="rg1",
    tags={})

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/containers/containerName 
```

 */
@ResourceType(type="azure-native:documentdb:SqlResourceSqlContainer")
public class SqlResourceSqlContainer extends io.pulumi.resources.CustomResource {
    /**
     * The location of the resource group to which the resource belongs.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return The location of the resource group to which the resource belongs.
     */
    public Output</* @Nullable */ String> getLocation() {
        return this.location;
    }
    /**
     * The name of the ARM resource.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the ARM resource.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * 
     */
    @OutputExport(name="options", type=SqlContainerGetPropertiesResponseOptions.class, parameters={})
    private Output</* @Nullable */ SqlContainerGetPropertiesResponseOptions> options;

    public Output</* @Nullable */ SqlContainerGetPropertiesResponseOptions> getOptions() {
        return this.options;
    }
    /**
     * 
     */
    @OutputExport(name="resource", type=SqlContainerGetPropertiesResponseResource.class, parameters={})
    private Output</* @Nullable */ SqlContainerGetPropertiesResponseResource> resource;

    public Output</* @Nullable */ SqlContainerGetPropertiesResponseResource> getResource() {
        return this.resource;
    }
    /**
     * Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * The type of Azure resource.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of Azure resource.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SqlResourceSqlContainer(String name, SqlResourceSqlContainerArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:documentdb:SqlResourceSqlContainer", name, args == null ? SqlResourceSqlContainerArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private SqlResourceSqlContainer(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:documentdb:SqlResourceSqlContainer", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:documentdb/v20150401:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20150408:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20151106:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20160319:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20160331:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20190801:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20191212:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20200301:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20200401:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20200601preview:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20200901:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20210115:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20210301preview:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20210315:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20210401preview:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20210415:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20210515:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20210615:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20210701preview:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20211015:SqlResourceSqlContainer").build()),
                Input.of(Alias.builder().setType("azure-native:documentdb/v20211015preview:SqlResourceSqlContainer").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SqlResourceSqlContainer get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new SqlResourceSqlContainer(name, id, options);
    }
}
