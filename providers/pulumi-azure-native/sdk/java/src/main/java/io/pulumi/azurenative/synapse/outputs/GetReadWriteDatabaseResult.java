// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.synapse.outputs;

import io.pulumi.azurenative.synapse.outputs.DatabaseStatisticsResponse;
import io.pulumi.azurenative.synapse.outputs.SystemDataResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetReadWriteDatabaseResult {
    /**
     * The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     */
    private final @Nullable String hotCachePeriod;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * Indicates whether the database is followed.
     * 
     */
    private final Boolean isFollowed;
    /**
     * Kind of the database
     * Expected value is 'ReadWrite'.
     * 
     */
    private final String kind;
    /**
     * Resource location.
     * 
     */
    private final @Nullable String location;
    /**
     * The name of the resource
     * 
     */
    private final String name;
    /**
     * The provisioned state of the resource.
     * 
     */
    private final String provisioningState;
    /**
     * The time the data should be kept before it stops being accessible to queries in TimeSpan.
     * 
     */
    private final @Nullable String softDeletePeriod;
    /**
     * The statistics of the database.
     * 
     */
    private final DatabaseStatisticsResponse statistics;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    private final SystemDataResponse systemData;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"hotCachePeriod","id","isFollowed","kind","location","name","provisioningState","softDeletePeriod","statistics","systemData","type"})
    private GetReadWriteDatabaseResult(
        @Nullable String hotCachePeriod,
        String id,
        Boolean isFollowed,
        String kind,
        @Nullable String location,
        String name,
        String provisioningState,
        @Nullable String softDeletePeriod,
        DatabaseStatisticsResponse statistics,
        SystemDataResponse systemData,
        String type) {
        this.hotCachePeriod = hotCachePeriod;
        this.id = Objects.requireNonNull(id);
        this.isFollowed = Objects.requireNonNull(isFollowed);
        this.kind = Objects.requireNonNull(kind);
        this.location = location;
        this.name = Objects.requireNonNull(name);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.softDeletePeriod = softDeletePeriod;
        this.statistics = Objects.requireNonNull(statistics);
        this.systemData = Objects.requireNonNull(systemData);
        this.type = Objects.requireNonNull(type);
    }

    /**
     * The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     */
    public Optional<String> getHotCachePeriod() {
        return Optional.ofNullable(this.hotCachePeriod);
    }
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * Indicates whether the database is followed.
     * 
     */
    public Boolean getIsFollowed() {
        return this.isFollowed;
    }
    /**
     * Kind of the database
     * Expected value is 'ReadWrite'.
     * 
     */
    public String getKind() {
        return this.kind;
    }
    /**
     * Resource location.
     * 
     */
    public Optional<String> getLocation() {
        return Optional.ofNullable(this.location);
    }
    /**
     * The name of the resource
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * The provisioned state of the resource.
     * 
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The time the data should be kept before it stops being accessible to queries in TimeSpan.
     * 
     */
    public Optional<String> getSoftDeletePeriod() {
        return Optional.ofNullable(this.softDeletePeriod);
    }
    /**
     * The statistics of the database.
     * 
     */
    public DatabaseStatisticsResponse getStatistics() {
        return this.statistics;
    }
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    public SystemDataResponse getSystemData() {
        return this.systemData;
    }
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReadWriteDatabaseResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String hotCachePeriod;
        private String id;
        private Boolean isFollowed;
        private String kind;
        private @Nullable String location;
        private String name;
        private String provisioningState;
        private @Nullable String softDeletePeriod;
        private DatabaseStatisticsResponse statistics;
        private SystemDataResponse systemData;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetReadWriteDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hotCachePeriod = defaults.hotCachePeriod;
    	      this.id = defaults.id;
    	      this.isFollowed = defaults.isFollowed;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.softDeletePeriod = defaults.softDeletePeriod;
    	      this.statistics = defaults.statistics;
    	      this.systemData = defaults.systemData;
    	      this.type = defaults.type;
        }

        public Builder setHotCachePeriod(@Nullable String hotCachePeriod) {
            this.hotCachePeriod = hotCachePeriod;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIsFollowed(Boolean isFollowed) {
            this.isFollowed = Objects.requireNonNull(isFollowed);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = location;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setSoftDeletePeriod(@Nullable String softDeletePeriod) {
            this.softDeletePeriod = softDeletePeriod;
            return this;
        }

        public Builder setStatistics(DatabaseStatisticsResponse statistics) {
            this.statistics = Objects.requireNonNull(statistics);
            return this;
        }

        public Builder setSystemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetReadWriteDatabaseResult build() {
            return new GetReadWriteDatabaseResult(hotCachePeriod, id, isFollowed, kind, location, name, provisioningState, softDeletePeriod, statistics, systemData, type);
        }
    }
}
