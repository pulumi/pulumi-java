// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datashare.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Synchronization details at data set level
 * 
 */
public final class SynchronizationDetailsResponse extends io.pulumi.resources.InvokeArgs {

    public static final SynchronizationDetailsResponse Empty = new SynchronizationDetailsResponse();

    /**
     * Id of data set
     * 
     */
    @InputImport(name="dataSetId", required=true)
        private final String dataSetId;

    public String getDataSetId() {
        return this.dataSetId;
    }

    /**
     * Type of the data set
     * 
     */
    @InputImport(name="dataSetType", required=true)
        private final String dataSetType;

    public String getDataSetType() {
        return this.dataSetType;
    }

    /**
     * Duration of data set level copy
     * 
     */
    @InputImport(name="durationMs", required=true)
        private final Integer durationMs;

    public Integer getDurationMs() {
        return this.durationMs;
    }

    /**
     * End time of data set level copy
     * 
     */
    @InputImport(name="endTime", required=true)
        private final String endTime;

    public String getEndTime() {
        return this.endTime;
    }

    /**
     * The number of files read from the source data set
     * 
     */
    @InputImport(name="filesRead", required=true)
        private final Double filesRead;

    public Double getFilesRead() {
        return this.filesRead;
    }

    /**
     * The number of files written into the sink data set
     * 
     */
    @InputImport(name="filesWritten", required=true)
        private final Double filesWritten;

    public Double getFilesWritten() {
        return this.filesWritten;
    }

    /**
     * Error message if any
     * 
     */
    @InputImport(name="message", required=true)
        private final String message;

    public String getMessage() {
        return this.message;
    }

    /**
     * Name of the data set
     * 
     */
    @InputImport(name="name", required=true)
        private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * The number of files copied into the sink data set
     * 
     */
    @InputImport(name="rowsCopied", required=true)
        private final Double rowsCopied;

    public Double getRowsCopied() {
        return this.rowsCopied;
    }

    /**
     * The number of rows read from the source data set.
     * 
     */
    @InputImport(name="rowsRead", required=true)
        private final Double rowsRead;

    public Double getRowsRead() {
        return this.rowsRead;
    }

    /**
     * The size of the data read from the source data set in bytes
     * 
     */
    @InputImport(name="sizeRead", required=true)
        private final Double sizeRead;

    public Double getSizeRead() {
        return this.sizeRead;
    }

    /**
     * The size of the data written into the sink data set in bytes
     * 
     */
    @InputImport(name="sizeWritten", required=true)
        private final Double sizeWritten;

    public Double getSizeWritten() {
        return this.sizeWritten;
    }

    /**
     * Start time of data set level copy
     * 
     */
    @InputImport(name="startTime", required=true)
        private final String startTime;

    public String getStartTime() {
        return this.startTime;
    }

    /**
     * Raw Status
     * 
     */
    @InputImport(name="status", required=true)
        private final String status;

    public String getStatus() {
        return this.status;
    }

    /**
     * The vCore units consumed for the data set synchronization
     * 
     */
    @InputImport(name="vCore", required=true)
        private final Double vCore;

    public Double getVCore() {
        return this.vCore;
    }

    public SynchronizationDetailsResponse(
        String dataSetId,
        String dataSetType,
        Integer durationMs,
        String endTime,
        Double filesRead,
        Double filesWritten,
        String message,
        String name,
        Double rowsCopied,
        Double rowsRead,
        Double sizeRead,
        Double sizeWritten,
        String startTime,
        String status,
        Double vCore) {
        this.dataSetId = Objects.requireNonNull(dataSetId, "expected parameter 'dataSetId' to be non-null");
        this.dataSetType = Objects.requireNonNull(dataSetType, "expected parameter 'dataSetType' to be non-null");
        this.durationMs = Objects.requireNonNull(durationMs, "expected parameter 'durationMs' to be non-null");
        this.endTime = Objects.requireNonNull(endTime, "expected parameter 'endTime' to be non-null");
        this.filesRead = Objects.requireNonNull(filesRead, "expected parameter 'filesRead' to be non-null");
        this.filesWritten = Objects.requireNonNull(filesWritten, "expected parameter 'filesWritten' to be non-null");
        this.message = Objects.requireNonNull(message, "expected parameter 'message' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.rowsCopied = Objects.requireNonNull(rowsCopied, "expected parameter 'rowsCopied' to be non-null");
        this.rowsRead = Objects.requireNonNull(rowsRead, "expected parameter 'rowsRead' to be non-null");
        this.sizeRead = Objects.requireNonNull(sizeRead, "expected parameter 'sizeRead' to be non-null");
        this.sizeWritten = Objects.requireNonNull(sizeWritten, "expected parameter 'sizeWritten' to be non-null");
        this.startTime = Objects.requireNonNull(startTime, "expected parameter 'startTime' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.vCore = Objects.requireNonNull(vCore, "expected parameter 'vCore' to be non-null");
    }

    private SynchronizationDetailsResponse() {
        this.dataSetId = null;
        this.dataSetType = null;
        this.durationMs = null;
        this.endTime = null;
        this.filesRead = null;
        this.filesWritten = null;
        this.message = null;
        this.name = null;
        this.rowsCopied = null;
        this.rowsRead = null;
        this.sizeRead = null;
        this.sizeWritten = null;
        this.startTime = null;
        this.status = null;
        this.vCore = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SynchronizationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String dataSetId;
        private String dataSetType;
        private Integer durationMs;
        private String endTime;
        private Double filesRead;
        private Double filesWritten;
        private String message;
        private String name;
        private Double rowsCopied;
        private Double rowsRead;
        private Double sizeRead;
        private Double sizeWritten;
        private String startTime;
        private String status;
        private Double vCore;

        public Builder() {
    	      // Empty
        }

        public Builder(SynchronizationDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSetId = defaults.dataSetId;
    	      this.dataSetType = defaults.dataSetType;
    	      this.durationMs = defaults.durationMs;
    	      this.endTime = defaults.endTime;
    	      this.filesRead = defaults.filesRead;
    	      this.filesWritten = defaults.filesWritten;
    	      this.message = defaults.message;
    	      this.name = defaults.name;
    	      this.rowsCopied = defaults.rowsCopied;
    	      this.rowsRead = defaults.rowsRead;
    	      this.sizeRead = defaults.sizeRead;
    	      this.sizeWritten = defaults.sizeWritten;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
    	      this.vCore = defaults.vCore;
        }

        public Builder setDataSetId(String dataSetId) {
            this.dataSetId = Objects.requireNonNull(dataSetId);
            return this;
        }

        public Builder setDataSetType(String dataSetType) {
            this.dataSetType = Objects.requireNonNull(dataSetType);
            return this;
        }

        public Builder setDurationMs(Integer durationMs) {
            this.durationMs = Objects.requireNonNull(durationMs);
            return this;
        }

        public Builder setEndTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }

        public Builder setFilesRead(Double filesRead) {
            this.filesRead = Objects.requireNonNull(filesRead);
            return this;
        }

        public Builder setFilesWritten(Double filesWritten) {
            this.filesWritten = Objects.requireNonNull(filesWritten);
            return this;
        }

        public Builder setMessage(String message) {
            this.message = Objects.requireNonNull(message);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setRowsCopied(Double rowsCopied) {
            this.rowsCopied = Objects.requireNonNull(rowsCopied);
            return this;
        }

        public Builder setRowsRead(Double rowsRead) {
            this.rowsRead = Objects.requireNonNull(rowsRead);
            return this;
        }

        public Builder setSizeRead(Double sizeRead) {
            this.sizeRead = Objects.requireNonNull(sizeRead);
            return this;
        }

        public Builder setSizeWritten(Double sizeWritten) {
            this.sizeWritten = Objects.requireNonNull(sizeWritten);
            return this;
        }

        public Builder setStartTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setVCore(Double vCore) {
            this.vCore = Objects.requireNonNull(vCore);
            return this;
        }
        public SynchronizationDetailsResponse build() {
            return new SynchronizationDetailsResponse(dataSetId, dataSetType, durationMs, endTime, filesRead, filesWritten, message, name, rowsCopied, rowsRead, sizeRead, sizeWritten, startTime, status, vCore);
        }
    }
}
