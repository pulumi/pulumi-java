// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.enums.ConnectivityTopology;
import io.pulumi.azurenative.network.enums.DeleteExistingPeering;
import io.pulumi.azurenative.network.enums.IsGlobal;
import io.pulumi.azurenative.network.inputs.ConnectivityGroupItemArgs;
import io.pulumi.azurenative.network.inputs.HubArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConnectivityConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectivityConfigurationArgs Empty = new ConnectivityConfigurationArgs();

    /**
     * Groups for configuration
     * 
     */
    @InputImport(name="appliesToGroups")
      private final @Nullable Output<List<ConnectivityGroupItemArgs>> appliesToGroups;

    public Output<List<ConnectivityGroupItemArgs>> getAppliesToGroups() {
        return this.appliesToGroups == null ? Output.empty() : this.appliesToGroups;
    }

    /**
     * The name of the network manager connectivity configuration.
     * 
     */
    @InputImport(name="configurationName")
      private final @Nullable Output<String> configurationName;

    public Output<String> getConfigurationName() {
        return this.configurationName == null ? Output.empty() : this.configurationName;
    }

    /**
     * Connectivity topology type.
     * 
     */
    @InputImport(name="connectivityTopology", required=true)
      private final Output<Either<String,ConnectivityTopology>> connectivityTopology;

    public Output<Either<String,ConnectivityTopology>> getConnectivityTopology() {
        return this.connectivityTopology;
    }

    /**
     * Flag if need to remove current existing peerings.
     * 
     */
    @InputImport(name="deleteExistingPeering")
      private final @Nullable Output<Either<String,DeleteExistingPeering>> deleteExistingPeering;

    public Output<Either<String,DeleteExistingPeering>> getDeleteExistingPeering() {
        return this.deleteExistingPeering == null ? Output.empty() : this.deleteExistingPeering;
    }

    /**
     * A description of the connectivity configuration.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * A friendly name for the resource.
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * List of hubItems
     * 
     */
    @InputImport(name="hubs")
      private final @Nullable Output<List<HubArgs>> hubs;

    public Output<List<HubArgs>> getHubs() {
        return this.hubs == null ? Output.empty() : this.hubs;
    }

    /**
     * Flag if global mesh is supported.
     * 
     */
    @InputImport(name="isGlobal")
      private final @Nullable Output<Either<String,IsGlobal>> isGlobal;

    public Output<Either<String,IsGlobal>> getIsGlobal() {
        return this.isGlobal == null ? Output.empty() : this.isGlobal;
    }

    /**
     * The name of the network manager.
     * 
     */
    @InputImport(name="networkManagerName", required=true)
      private final Output<String> networkManagerName;

    public Output<String> getNetworkManagerName() {
        return this.networkManagerName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    public ConnectivityConfigurationArgs(
        @Nullable Output<List<ConnectivityGroupItemArgs>> appliesToGroups,
        @Nullable Output<String> configurationName,
        Output<Either<String,ConnectivityTopology>> connectivityTopology,
        @Nullable Output<Either<String,DeleteExistingPeering>> deleteExistingPeering,
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        @Nullable Output<List<HubArgs>> hubs,
        @Nullable Output<Either<String,IsGlobal>> isGlobal,
        Output<String> networkManagerName,
        Output<String> resourceGroupName) {
        this.appliesToGroups = appliesToGroups;
        this.configurationName = configurationName;
        this.connectivityTopology = Objects.requireNonNull(connectivityTopology, "expected parameter 'connectivityTopology' to be non-null");
        this.deleteExistingPeering = deleteExistingPeering;
        this.description = description;
        this.displayName = displayName;
        this.hubs = hubs;
        this.isGlobal = isGlobal;
        this.networkManagerName = Objects.requireNonNull(networkManagerName, "expected parameter 'networkManagerName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private ConnectivityConfigurationArgs() {
        this.appliesToGroups = Output.empty();
        this.configurationName = Output.empty();
        this.connectivityTopology = Output.empty();
        this.deleteExistingPeering = Output.empty();
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.hubs = Output.empty();
        this.isGlobal = Output.empty();
        this.networkManagerName = Output.empty();
        this.resourceGroupName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectivityConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<ConnectivityGroupItemArgs>> appliesToGroups;
        private @Nullable Output<String> configurationName;
        private Output<Either<String,ConnectivityTopology>> connectivityTopology;
        private @Nullable Output<Either<String,DeleteExistingPeering>> deleteExistingPeering;
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private @Nullable Output<List<HubArgs>> hubs;
        private @Nullable Output<Either<String,IsGlobal>> isGlobal;
        private Output<String> networkManagerName;
        private Output<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectivityConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appliesToGroups = defaults.appliesToGroups;
    	      this.configurationName = defaults.configurationName;
    	      this.connectivityTopology = defaults.connectivityTopology;
    	      this.deleteExistingPeering = defaults.deleteExistingPeering;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.hubs = defaults.hubs;
    	      this.isGlobal = defaults.isGlobal;
    	      this.networkManagerName = defaults.networkManagerName;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder appliesToGroups(@Nullable Output<List<ConnectivityGroupItemArgs>> appliesToGroups) {
            this.appliesToGroups = appliesToGroups;
            return this;
        }

        public Builder appliesToGroups(@Nullable List<ConnectivityGroupItemArgs> appliesToGroups) {
            this.appliesToGroups = Output.ofNullable(appliesToGroups);
            return this;
        }

        public Builder configurationName(@Nullable Output<String> configurationName) {
            this.configurationName = configurationName;
            return this;
        }

        public Builder configurationName(@Nullable String configurationName) {
            this.configurationName = Output.ofNullable(configurationName);
            return this;
        }

        public Builder connectivityTopology(Output<Either<String,ConnectivityTopology>> connectivityTopology) {
            this.connectivityTopology = Objects.requireNonNull(connectivityTopology);
            return this;
        }

        public Builder connectivityTopology(Either<String,ConnectivityTopology> connectivityTopology) {
            this.connectivityTopology = Output.of(Objects.requireNonNull(connectivityTopology));
            return this;
        }

        public Builder deleteExistingPeering(@Nullable Output<Either<String,DeleteExistingPeering>> deleteExistingPeering) {
            this.deleteExistingPeering = deleteExistingPeering;
            return this;
        }

        public Builder deleteExistingPeering(@Nullable Either<String,DeleteExistingPeering> deleteExistingPeering) {
            this.deleteExistingPeering = Output.ofNullable(deleteExistingPeering);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder hubs(@Nullable Output<List<HubArgs>> hubs) {
            this.hubs = hubs;
            return this;
        }

        public Builder hubs(@Nullable List<HubArgs> hubs) {
            this.hubs = Output.ofNullable(hubs);
            return this;
        }

        public Builder isGlobal(@Nullable Output<Either<String,IsGlobal>> isGlobal) {
            this.isGlobal = isGlobal;
            return this;
        }

        public Builder isGlobal(@Nullable Either<String,IsGlobal> isGlobal) {
            this.isGlobal = Output.ofNullable(isGlobal);
            return this;
        }

        public Builder networkManagerName(Output<String> networkManagerName) {
            this.networkManagerName = Objects.requireNonNull(networkManagerName);
            return this;
        }

        public Builder networkManagerName(String networkManagerName) {
            this.networkManagerName = Output.of(Objects.requireNonNull(networkManagerName));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public ConnectivityConfigurationArgs build() {
            return new ConnectivityConfigurationArgs(appliesToGroups, configurationName, connectivityTopology, deleteExistingPeering, description, displayName, hubs, isGlobal, networkManagerName, resourceGroupName);
        }
    }
}
