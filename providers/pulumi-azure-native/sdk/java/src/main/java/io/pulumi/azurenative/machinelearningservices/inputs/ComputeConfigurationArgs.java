// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration for compute binding.
 * 
 */
public final class ComputeConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ComputeConfigurationArgs Empty = new ComputeConfigurationArgs();

    /**
     * Number of instances or nodes.
     * 
     */
    @InputImport(name="instanceCount")
        private final @Nullable Input<Integer> instanceCount;

    public Input<Integer> getInstanceCount() {
        return this.instanceCount == null ? Input.empty() : this.instanceCount;
    }

    /**
     * SKU type to run on.
     * 
     */
    @InputImport(name="instanceType")
        private final @Nullable Input<String> instanceType;

    public Input<String> getInstanceType() {
        return this.instanceType == null ? Input.empty() : this.instanceType;
    }

    /**
     * Set to true for jobs running on local compute.
     * 
     */
    @InputImport(name="isLocal")
        private final @Nullable Input<Boolean> isLocal;

    public Input<Boolean> getIsLocal() {
        return this.isLocal == null ? Input.empty() : this.isLocal;
    }

    /**
     * Location for virtual cluster run.
     * 
     */
    @InputImport(name="location")
        private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Additional properties.
     * 
     */
    @InputImport(name="properties")
        private final @Nullable Input<Map<String,String>> properties;

    public Input<Map<String,String>> getProperties() {
        return this.properties == null ? Input.empty() : this.properties;
    }

    /**
     * ARM resource ID of the compute resource.
     * 
     */
    @InputImport(name="target")
        private final @Nullable Input<String> target;

    public Input<String> getTarget() {
        return this.target == null ? Input.empty() : this.target;
    }

    public ComputeConfigurationArgs(
        @Nullable Input<Integer> instanceCount,
        @Nullable Input<String> instanceType,
        @Nullable Input<Boolean> isLocal,
        @Nullable Input<String> location,
        @Nullable Input<Map<String,String>> properties,
        @Nullable Input<String> target) {
        this.instanceCount = instanceCount;
        this.instanceType = instanceType;
        this.isLocal = isLocal;
        this.location = location;
        this.properties = properties;
        this.target = target;
    }

    private ComputeConfigurationArgs() {
        this.instanceCount = Input.empty();
        this.instanceType = Input.empty();
        this.isLocal = Input.empty();
        this.location = Input.empty();
        this.properties = Input.empty();
        this.target = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ComputeConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> instanceCount;
        private @Nullable Input<String> instanceType;
        private @Nullable Input<Boolean> isLocal;
        private @Nullable Input<String> location;
        private @Nullable Input<Map<String,String>> properties;
        private @Nullable Input<String> target;

        public Builder() {
    	      // Empty
        }

        public Builder(ComputeConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instanceCount = defaults.instanceCount;
    	      this.instanceType = defaults.instanceType;
    	      this.isLocal = defaults.isLocal;
    	      this.location = defaults.location;
    	      this.properties = defaults.properties;
    	      this.target = defaults.target;
        }

        public Builder setInstanceCount(@Nullable Input<Integer> instanceCount) {
            this.instanceCount = instanceCount;
            return this;
        }

        public Builder setInstanceCount(@Nullable Integer instanceCount) {
            this.instanceCount = Input.ofNullable(instanceCount);
            return this;
        }

        public Builder setInstanceType(@Nullable Input<String> instanceType) {
            this.instanceType = instanceType;
            return this;
        }

        public Builder setInstanceType(@Nullable String instanceType) {
            this.instanceType = Input.ofNullable(instanceType);
            return this;
        }

        public Builder setIsLocal(@Nullable Input<Boolean> isLocal) {
            this.isLocal = isLocal;
            return this;
        }

        public Builder setIsLocal(@Nullable Boolean isLocal) {
            this.isLocal = Input.ofNullable(isLocal);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setProperties(@Nullable Input<Map<String,String>> properties) {
            this.properties = properties;
            return this;
        }

        public Builder setProperties(@Nullable Map<String,String> properties) {
            this.properties = Input.ofNullable(properties);
            return this;
        }

        public Builder setTarget(@Nullable Input<String> target) {
            this.target = target;
            return this;
        }

        public Builder setTarget(@Nullable String target) {
            this.target = Input.ofNullable(target);
            return this;
        }
        public ComputeConfigurationArgs build() {
            return new ComputeConfigurationArgs(instanceCount, instanceType, isLocal, location, properties, target);
        }
    }
}
