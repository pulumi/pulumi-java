// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RollingUpgradePolicyResponse extends io.pulumi.resources.InvokeArgs {

    public static final RollingUpgradePolicyResponse Empty = new RollingUpgradePolicyResponse();

    @InputImport(name="enableCrossZoneUpgrade")
    private final @Nullable Boolean enableCrossZoneUpgrade;

    public Optional<Boolean> getEnableCrossZoneUpgrade() {
        return this.enableCrossZoneUpgrade == null ? Optional.empty() : Optional.ofNullable(this.enableCrossZoneUpgrade);
    }

    @InputImport(name="maxBatchInstancePercent")
    private final @Nullable Integer maxBatchInstancePercent;

    public Optional<Integer> getMaxBatchInstancePercent() {
        return this.maxBatchInstancePercent == null ? Optional.empty() : Optional.ofNullable(this.maxBatchInstancePercent);
    }

    @InputImport(name="maxUnhealthyInstancePercent")
    private final @Nullable Integer maxUnhealthyInstancePercent;

    public Optional<Integer> getMaxUnhealthyInstancePercent() {
        return this.maxUnhealthyInstancePercent == null ? Optional.empty() : Optional.ofNullable(this.maxUnhealthyInstancePercent);
    }

    @InputImport(name="maxUnhealthyUpgradedInstancePercent")
    private final @Nullable Integer maxUnhealthyUpgradedInstancePercent;

    public Optional<Integer> getMaxUnhealthyUpgradedInstancePercent() {
        return this.maxUnhealthyUpgradedInstancePercent == null ? Optional.empty() : Optional.ofNullable(this.maxUnhealthyUpgradedInstancePercent);
    }

    @InputImport(name="pauseTimeBetweenBatches")
    private final @Nullable String pauseTimeBetweenBatches;

    public Optional<String> getPauseTimeBetweenBatches() {
        return this.pauseTimeBetweenBatches == null ? Optional.empty() : Optional.ofNullable(this.pauseTimeBetweenBatches);
    }

    @InputImport(name="prioritizeUnhealthyInstances")
    private final @Nullable Boolean prioritizeUnhealthyInstances;

    public Optional<Boolean> getPrioritizeUnhealthyInstances() {
        return this.prioritizeUnhealthyInstances == null ? Optional.empty() : Optional.ofNullable(this.prioritizeUnhealthyInstances);
    }

    public RollingUpgradePolicyResponse(
        @Nullable Boolean enableCrossZoneUpgrade,
        @Nullable Integer maxBatchInstancePercent,
        @Nullable Integer maxUnhealthyInstancePercent,
        @Nullable Integer maxUnhealthyUpgradedInstancePercent,
        @Nullable String pauseTimeBetweenBatches,
        @Nullable Boolean prioritizeUnhealthyInstances) {
        this.enableCrossZoneUpgrade = enableCrossZoneUpgrade;
        this.maxBatchInstancePercent = maxBatchInstancePercent;
        this.maxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
        this.maxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
        this.pauseTimeBetweenBatches = pauseTimeBetweenBatches;
        this.prioritizeUnhealthyInstances = prioritizeUnhealthyInstances;
    }

    private RollingUpgradePolicyResponse() {
        this.enableCrossZoneUpgrade = null;
        this.maxBatchInstancePercent = null;
        this.maxUnhealthyInstancePercent = null;
        this.maxUnhealthyUpgradedInstancePercent = null;
        this.pauseTimeBetweenBatches = null;
        this.prioritizeUnhealthyInstances = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RollingUpgradePolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean enableCrossZoneUpgrade;
        private @Nullable Integer maxBatchInstancePercent;
        private @Nullable Integer maxUnhealthyInstancePercent;
        private @Nullable Integer maxUnhealthyUpgradedInstancePercent;
        private @Nullable String pauseTimeBetweenBatches;
        private @Nullable Boolean prioritizeUnhealthyInstances;

        public Builder() {
    	      // Empty
        }

        public Builder(RollingUpgradePolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableCrossZoneUpgrade = defaults.enableCrossZoneUpgrade;
    	      this.maxBatchInstancePercent = defaults.maxBatchInstancePercent;
    	      this.maxUnhealthyInstancePercent = defaults.maxUnhealthyInstancePercent;
    	      this.maxUnhealthyUpgradedInstancePercent = defaults.maxUnhealthyUpgradedInstancePercent;
    	      this.pauseTimeBetweenBatches = defaults.pauseTimeBetweenBatches;
    	      this.prioritizeUnhealthyInstances = defaults.prioritizeUnhealthyInstances;
        }

        public Builder setEnableCrossZoneUpgrade(@Nullable Boolean enableCrossZoneUpgrade) {
            this.enableCrossZoneUpgrade = enableCrossZoneUpgrade;
            return this;
        }

        public Builder setMaxBatchInstancePercent(@Nullable Integer maxBatchInstancePercent) {
            this.maxBatchInstancePercent = maxBatchInstancePercent;
            return this;
        }

        public Builder setMaxUnhealthyInstancePercent(@Nullable Integer maxUnhealthyInstancePercent) {
            this.maxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
            return this;
        }

        public Builder setMaxUnhealthyUpgradedInstancePercent(@Nullable Integer maxUnhealthyUpgradedInstancePercent) {
            this.maxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
            return this;
        }

        public Builder setPauseTimeBetweenBatches(@Nullable String pauseTimeBetweenBatches) {
            this.pauseTimeBetweenBatches = pauseTimeBetweenBatches;
            return this;
        }

        public Builder setPrioritizeUnhealthyInstances(@Nullable Boolean prioritizeUnhealthyInstances) {
            this.prioritizeUnhealthyInstances = prioritizeUnhealthyInstances;
            return this;
        }

        public RollingUpgradePolicyResponse build() {
            return new RollingUpgradePolicyResponse(enableCrossZoneUpgrade, maxBatchInstancePercent, maxUnhealthyInstancePercent, maxUnhealthyUpgradedInstancePercent, pauseTimeBetweenBatches, prioritizeUnhealthyInstances);
        }
    }
}
