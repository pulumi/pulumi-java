// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.BackendResponse;
import io.pulumi.azurenative.network.inputs.SubResourceResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A backend pool is a collection of backends that can be routed to.
 * 
 */
public final class BackendPoolResponse extends io.pulumi.resources.InvokeArgs {

    public static final BackendPoolResponse Empty = new BackendPoolResponse();

    /**
     * The set of backends for this pool
     * 
     */
    @InputImport(name="backends")
    private final @Nullable List<BackendResponse> backends;

    public List<BackendResponse> getBackends() {
        return this.backends == null ? List.of() : this.backends;
    }

    /**
     * L7 health probe settings for a backend pool
     * 
     */
    @InputImport(name="healthProbeSettings")
    private final @Nullable SubResourceResponse healthProbeSettings;

    public Optional<SubResourceResponse> getHealthProbeSettings() {
        return this.healthProbeSettings == null ? Optional.empty() : Optional.ofNullable(this.healthProbeSettings);
    }

    /**
     * Resource ID.
     * 
     */
    @InputImport(name="id")
    private final @Nullable String id;

    public Optional<String> getId() {
        return this.id == null ? Optional.empty() : Optional.ofNullable(this.id);
    }

    /**
     * Load balancing settings for a backend pool
     * 
     */
    @InputImport(name="loadBalancingSettings")
    private final @Nullable SubResourceResponse loadBalancingSettings;

    public Optional<SubResourceResponse> getLoadBalancingSettings() {
        return this.loadBalancingSettings == null ? Optional.empty() : Optional.ofNullable(this.loadBalancingSettings);
    }

    /**
     * Resource name.
     * 
     */
    @InputImport(name="name")
    private final @Nullable String name;

    public Optional<String> getName() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * Resource status.
     * 
     */
    @InputImport(name="resourceState", required=true)
    private final String resourceState;

    public String getResourceState() {
        return this.resourceState;
    }

    /**
     * Resource type.
     * 
     */
    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    public BackendPoolResponse(
        @Nullable List<BackendResponse> backends,
        @Nullable SubResourceResponse healthProbeSettings,
        @Nullable String id,
        @Nullable SubResourceResponse loadBalancingSettings,
        @Nullable String name,
        String resourceState,
        String type) {
        this.backends = backends;
        this.healthProbeSettings = healthProbeSettings;
        this.id = id;
        this.loadBalancingSettings = loadBalancingSettings;
        this.name = name;
        this.resourceState = Objects.requireNonNull(resourceState, "expected parameter 'resourceState' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private BackendPoolResponse() {
        this.backends = List.of();
        this.healthProbeSettings = null;
        this.id = null;
        this.loadBalancingSettings = null;
        this.name = null;
        this.resourceState = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendPoolResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<BackendResponse> backends;
        private @Nullable SubResourceResponse healthProbeSettings;
        private @Nullable String id;
        private @Nullable SubResourceResponse loadBalancingSettings;
        private @Nullable String name;
        private String resourceState;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendPoolResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backends = defaults.backends;
    	      this.healthProbeSettings = defaults.healthProbeSettings;
    	      this.id = defaults.id;
    	      this.loadBalancingSettings = defaults.loadBalancingSettings;
    	      this.name = defaults.name;
    	      this.resourceState = defaults.resourceState;
    	      this.type = defaults.type;
        }

        public Builder setBackends(@Nullable List<BackendResponse> backends) {
            this.backends = backends;
            return this;
        }

        public Builder setHealthProbeSettings(@Nullable SubResourceResponse healthProbeSettings) {
            this.healthProbeSettings = healthProbeSettings;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setLoadBalancingSettings(@Nullable SubResourceResponse loadBalancingSettings) {
            this.loadBalancingSettings = loadBalancingSettings;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setResourceState(String resourceState) {
            this.resourceState = Objects.requireNonNull(resourceState);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public BackendPoolResponse build() {
            return new BackendPoolResponse(backends, healthProbeSettings, id, loadBalancingSettings, name, resourceState, type);
        }
    }
}
