// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights.inputs;

import io.pulumi.azurenative.customerinsights.enums.FormatTypes;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Connector mapping property format.
 * 
 */
public final class ConnectorMappingFormatArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectorMappingFormatArgs Empty = new ConnectorMappingFormatArgs();

    /**
     * The oData language.
     * 
     */
    @Import(name="acceptLanguage")
      private final @Nullable Output<String> acceptLanguage;

    public Output<String> getAcceptLanguage() {
        return this.acceptLanguage == null ? Output.empty() : this.acceptLanguage;
    }

    /**
     * Character separating array elements.
     * 
     */
    @Import(name="arraySeparator")
      private final @Nullable Output<String> arraySeparator;

    public Output<String> getArraySeparator() {
        return this.arraySeparator == null ? Output.empty() : this.arraySeparator;
    }

    /**
     * The character that signifies a break between columns.
     * 
     */
    @Import(name="columnDelimiter")
      private final @Nullable Output<String> columnDelimiter;

    public Output<String> getColumnDelimiter() {
        return this.columnDelimiter == null ? Output.empty() : this.columnDelimiter;
    }

    /**
     * The type mapping format.
     * 
     */
    @Import(name="formatType", required=true)
      private final Output<FormatTypes> formatType;

    public Output<FormatTypes> getFormatType() {
        return this.formatType;
    }

    /**
     * Quote character, used to indicate enquoted fields.
     * 
     */
    @Import(name="quoteCharacter")
      private final @Nullable Output<String> quoteCharacter;

    public Output<String> getQuoteCharacter() {
        return this.quoteCharacter == null ? Output.empty() : this.quoteCharacter;
    }

    /**
     * Escape character for quotes, can be the same as the quoteCharacter.
     * 
     */
    @Import(name="quoteEscapeCharacter")
      private final @Nullable Output<String> quoteEscapeCharacter;

    public Output<String> getQuoteEscapeCharacter() {
        return this.quoteEscapeCharacter == null ? Output.empty() : this.quoteEscapeCharacter;
    }

    public ConnectorMappingFormatArgs(
        @Nullable Output<String> acceptLanguage,
        @Nullable Output<String> arraySeparator,
        @Nullable Output<String> columnDelimiter,
        Output<FormatTypes> formatType,
        @Nullable Output<String> quoteCharacter,
        @Nullable Output<String> quoteEscapeCharacter) {
        this.acceptLanguage = acceptLanguage;
        this.arraySeparator = arraySeparator;
        this.columnDelimiter = columnDelimiter;
        this.formatType = Objects.requireNonNull(formatType, "expected parameter 'formatType' to be non-null");
        this.quoteCharacter = quoteCharacter;
        this.quoteEscapeCharacter = quoteEscapeCharacter;
    }

    private ConnectorMappingFormatArgs() {
        this.acceptLanguage = Output.empty();
        this.arraySeparator = Output.empty();
        this.columnDelimiter = Output.empty();
        this.formatType = Output.empty();
        this.quoteCharacter = Output.empty();
        this.quoteEscapeCharacter = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorMappingFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> acceptLanguage;
        private @Nullable Output<String> arraySeparator;
        private @Nullable Output<String> columnDelimiter;
        private Output<FormatTypes> formatType;
        private @Nullable Output<String> quoteCharacter;
        private @Nullable Output<String> quoteEscapeCharacter;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectorMappingFormatArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptLanguage = defaults.acceptLanguage;
    	      this.arraySeparator = defaults.arraySeparator;
    	      this.columnDelimiter = defaults.columnDelimiter;
    	      this.formatType = defaults.formatType;
    	      this.quoteCharacter = defaults.quoteCharacter;
    	      this.quoteEscapeCharacter = defaults.quoteEscapeCharacter;
        }

        public Builder acceptLanguage(@Nullable Output<String> acceptLanguage) {
            this.acceptLanguage = acceptLanguage;
            return this;
        }

        public Builder acceptLanguage(@Nullable String acceptLanguage) {
            this.acceptLanguage = Output.ofNullable(acceptLanguage);
            return this;
        }

        public Builder arraySeparator(@Nullable Output<String> arraySeparator) {
            this.arraySeparator = arraySeparator;
            return this;
        }

        public Builder arraySeparator(@Nullable String arraySeparator) {
            this.arraySeparator = Output.ofNullable(arraySeparator);
            return this;
        }

        public Builder columnDelimiter(@Nullable Output<String> columnDelimiter) {
            this.columnDelimiter = columnDelimiter;
            return this;
        }

        public Builder columnDelimiter(@Nullable String columnDelimiter) {
            this.columnDelimiter = Output.ofNullable(columnDelimiter);
            return this;
        }

        public Builder formatType(Output<FormatTypes> formatType) {
            this.formatType = Objects.requireNonNull(formatType);
            return this;
        }

        public Builder formatType(FormatTypes formatType) {
            this.formatType = Output.of(Objects.requireNonNull(formatType));
            return this;
        }

        public Builder quoteCharacter(@Nullable Output<String> quoteCharacter) {
            this.quoteCharacter = quoteCharacter;
            return this;
        }

        public Builder quoteCharacter(@Nullable String quoteCharacter) {
            this.quoteCharacter = Output.ofNullable(quoteCharacter);
            return this;
        }

        public Builder quoteEscapeCharacter(@Nullable Output<String> quoteEscapeCharacter) {
            this.quoteEscapeCharacter = quoteEscapeCharacter;
            return this;
        }

        public Builder quoteEscapeCharacter(@Nullable String quoteEscapeCharacter) {
            this.quoteEscapeCharacter = Output.ofNullable(quoteEscapeCharacter);
            return this;
        }
        public ConnectorMappingFormatArgs build() {
            return new ConnectorMappingFormatArgs(acceptLanguage, arraySeparator, columnDelimiter, formatType, quoteCharacter, quoteEscapeCharacter);
        }
    }
}
