// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.enums.PolybaseSettingsRejectType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PolybaseSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final PolybaseSettingsArgs Empty = new PolybaseSettingsArgs();

    @InputImport(name="rejectSampleValue")
    private final @Nullable Input<Object> rejectSampleValue;

    public Input<Object> getRejectSampleValue() {
        return this.rejectSampleValue == null ? Input.empty() : this.rejectSampleValue;
    }

    @InputImport(name="rejectType")
    private final @Nullable Input<Either<String,PolybaseSettingsRejectType>> rejectType;

    public Input<Either<String,PolybaseSettingsRejectType>> getRejectType() {
        return this.rejectType == null ? Input.empty() : this.rejectType;
    }

    @InputImport(name="rejectValue")
    private final @Nullable Input<Object> rejectValue;

    public Input<Object> getRejectValue() {
        return this.rejectValue == null ? Input.empty() : this.rejectValue;
    }

    @InputImport(name="useTypeDefault")
    private final @Nullable Input<Object> useTypeDefault;

    public Input<Object> getUseTypeDefault() {
        return this.useTypeDefault == null ? Input.empty() : this.useTypeDefault;
    }

    public PolybaseSettingsArgs(
        @Nullable Input<Object> rejectSampleValue,
        @Nullable Input<Either<String,PolybaseSettingsRejectType>> rejectType,
        @Nullable Input<Object> rejectValue,
        @Nullable Input<Object> useTypeDefault) {
        this.rejectSampleValue = rejectSampleValue;
        this.rejectType = rejectType;
        this.rejectValue = rejectValue;
        this.useTypeDefault = useTypeDefault;
    }

    private PolybaseSettingsArgs() {
        this.rejectSampleValue = Input.empty();
        this.rejectType = Input.empty();
        this.rejectValue = Input.empty();
        this.useTypeDefault = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolybaseSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Object> rejectSampleValue;
        private @Nullable Input<Either<String,PolybaseSettingsRejectType>> rejectType;
        private @Nullable Input<Object> rejectValue;
        private @Nullable Input<Object> useTypeDefault;

        public Builder() {
    	      // Empty
        }

        public Builder(PolybaseSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.rejectSampleValue = defaults.rejectSampleValue;
    	      this.rejectType = defaults.rejectType;
    	      this.rejectValue = defaults.rejectValue;
    	      this.useTypeDefault = defaults.useTypeDefault;
        }

        public Builder setRejectSampleValue(@Nullable Input<Object> rejectSampleValue) {
            this.rejectSampleValue = rejectSampleValue;
            return this;
        }

        public Builder setRejectSampleValue(@Nullable Object rejectSampleValue) {
            this.rejectSampleValue = Input.ofNullable(rejectSampleValue);
            return this;
        }

        public Builder setRejectType(@Nullable Input<Either<String,PolybaseSettingsRejectType>> rejectType) {
            this.rejectType = rejectType;
            return this;
        }

        public Builder setRejectType(@Nullable Either<String,PolybaseSettingsRejectType> rejectType) {
            this.rejectType = Input.ofNullable(rejectType);
            return this;
        }

        public Builder setRejectValue(@Nullable Input<Object> rejectValue) {
            this.rejectValue = rejectValue;
            return this;
        }

        public Builder setRejectValue(@Nullable Object rejectValue) {
            this.rejectValue = Input.ofNullable(rejectValue);
            return this;
        }

        public Builder setUseTypeDefault(@Nullable Input<Object> useTypeDefault) {
            this.useTypeDefault = useTypeDefault;
            return this;
        }

        public Builder setUseTypeDefault(@Nullable Object useTypeDefault) {
            this.useTypeDefault = Input.ofNullable(useTypeDefault);
            return this;
        }

        public PolybaseSettingsArgs build() {
            return new PolybaseSettingsArgs(rejectSampleValue, rejectType, rejectValue, useTypeDefault);
        }
    }
}
