// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices;

import io.pulumi.azurenative.machinelearningservices.inputs.ACIServiceCreateRequestDataCollectionArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.ACIServiceCreateRequestEncryptionPropertiesArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.ACIServiceCreateRequestVnetConfigurationArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.ContainerResourceRequirementsArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.CreateServiceRequestEnvironmentImageRequestArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.CreateServiceRequestKeysArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ACIServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ACIServiceArgs Empty = new ACIServiceArgs();

    @InputImport(name="appInsightsEnabled")
    private final @Nullable Input<Boolean> appInsightsEnabled;

    public Input<Boolean> getAppInsightsEnabled() {
        return this.appInsightsEnabled == null ? Input.empty() : this.appInsightsEnabled;
    }

    @InputImport(name="authEnabled")
    private final @Nullable Input<Boolean> authEnabled;

    public Input<Boolean> getAuthEnabled() {
        return this.authEnabled == null ? Input.empty() : this.authEnabled;
    }

    @InputImport(name="cname")
    private final @Nullable Input<String> cname;

    public Input<String> getCname() {
        return this.cname == null ? Input.empty() : this.cname;
    }

    @InputImport(name="computeType", required=true)
    private final Input<String> computeType;

    public Input<String> getComputeType() {
        return this.computeType;
    }

    @InputImport(name="containerResourceRequirements")
    private final @Nullable Input<ContainerResourceRequirementsArgs> containerResourceRequirements;

    public Input<ContainerResourceRequirementsArgs> getContainerResourceRequirements() {
        return this.containerResourceRequirements == null ? Input.empty() : this.containerResourceRequirements;
    }

    @InputImport(name="dataCollection")
    private final @Nullable Input<ACIServiceCreateRequestDataCollectionArgs> dataCollection;

    public Input<ACIServiceCreateRequestDataCollectionArgs> getDataCollection() {
        return this.dataCollection == null ? Input.empty() : this.dataCollection;
    }

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="dnsNameLabel")
    private final @Nullable Input<String> dnsNameLabel;

    public Input<String> getDnsNameLabel() {
        return this.dnsNameLabel == null ? Input.empty() : this.dnsNameLabel;
    }

    @InputImport(name="encryptionProperties")
    private final @Nullable Input<ACIServiceCreateRequestEncryptionPropertiesArgs> encryptionProperties;

    public Input<ACIServiceCreateRequestEncryptionPropertiesArgs> getEncryptionProperties() {
        return this.encryptionProperties == null ? Input.empty() : this.encryptionProperties;
    }

    @InputImport(name="environmentImageRequest")
    private final @Nullable Input<CreateServiceRequestEnvironmentImageRequestArgs> environmentImageRequest;

    public Input<CreateServiceRequestEnvironmentImageRequestArgs> getEnvironmentImageRequest() {
        return this.environmentImageRequest == null ? Input.empty() : this.environmentImageRequest;
    }

    @InputImport(name="keys")
    private final @Nullable Input<CreateServiceRequestKeysArgs> keys;

    public Input<CreateServiceRequestKeysArgs> getKeys() {
        return this.keys == null ? Input.empty() : this.keys;
    }

    @InputImport(name="kvTags")
    private final @Nullable Input<Map<String,String>> kvTags;

    public Input<Map<String,String>> getKvTags() {
        return this.kvTags == null ? Input.empty() : this.kvTags;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="properties")
    private final @Nullable Input<Map<String,String>> properties;

    public Input<Map<String,String>> getProperties() {
        return this.properties == null ? Input.empty() : this.properties;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="serviceName")
    private final @Nullable Input<String> serviceName;

    public Input<String> getServiceName() {
        return this.serviceName == null ? Input.empty() : this.serviceName;
    }

    @InputImport(name="sslCertificate")
    private final @Nullable Input<String> sslCertificate;

    public Input<String> getSslCertificate() {
        return this.sslCertificate == null ? Input.empty() : this.sslCertificate;
    }

    @InputImport(name="sslEnabled")
    private final @Nullable Input<Boolean> sslEnabled;

    public Input<Boolean> getSslEnabled() {
        return this.sslEnabled == null ? Input.empty() : this.sslEnabled;
    }

    @InputImport(name="sslKey")
    private final @Nullable Input<String> sslKey;

    public Input<String> getSslKey() {
        return this.sslKey == null ? Input.empty() : this.sslKey;
    }

    @InputImport(name="vnetConfiguration")
    private final @Nullable Input<ACIServiceCreateRequestVnetConfigurationArgs> vnetConfiguration;

    public Input<ACIServiceCreateRequestVnetConfigurationArgs> getVnetConfiguration() {
        return this.vnetConfiguration == null ? Input.empty() : this.vnetConfiguration;
    }

    @InputImport(name="workspaceName", required=true)
    private final Input<String> workspaceName;

    public Input<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public ACIServiceArgs(
        @Nullable Input<Boolean> appInsightsEnabled,
        @Nullable Input<Boolean> authEnabled,
        @Nullable Input<String> cname,
        Input<String> computeType,
        @Nullable Input<ContainerResourceRequirementsArgs> containerResourceRequirements,
        @Nullable Input<ACIServiceCreateRequestDataCollectionArgs> dataCollection,
        @Nullable Input<String> description,
        @Nullable Input<String> dnsNameLabel,
        @Nullable Input<ACIServiceCreateRequestEncryptionPropertiesArgs> encryptionProperties,
        @Nullable Input<CreateServiceRequestEnvironmentImageRequestArgs> environmentImageRequest,
        @Nullable Input<CreateServiceRequestKeysArgs> keys,
        @Nullable Input<Map<String,String>> kvTags,
        @Nullable Input<String> location,
        @Nullable Input<Map<String,String>> properties,
        Input<String> resourceGroupName,
        @Nullable Input<String> serviceName,
        @Nullable Input<String> sslCertificate,
        @Nullable Input<Boolean> sslEnabled,
        @Nullable Input<String> sslKey,
        @Nullable Input<ACIServiceCreateRequestVnetConfigurationArgs> vnetConfiguration,
        Input<String> workspaceName) {
        this.appInsightsEnabled = appInsightsEnabled == null ? Input.ofNullable(false) : appInsightsEnabled;
        this.authEnabled = authEnabled == null ? Input.ofNullable(false) : authEnabled;
        this.cname = cname;
        this.computeType = Objects.requireNonNull(computeType, "expected parameter 'computeType' to be non-null");
        this.containerResourceRequirements = containerResourceRequirements;
        this.dataCollection = dataCollection;
        this.description = description;
        this.dnsNameLabel = dnsNameLabel;
        this.encryptionProperties = encryptionProperties;
        this.environmentImageRequest = environmentImageRequest;
        this.keys = keys;
        this.kvTags = kvTags;
        this.location = location;
        this.properties = properties;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceName = serviceName;
        this.sslCertificate = sslCertificate;
        this.sslEnabled = sslEnabled == null ? Input.ofNullable(false) : sslEnabled;
        this.sslKey = sslKey;
        this.vnetConfiguration = vnetConfiguration;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private ACIServiceArgs() {
        this.appInsightsEnabled = Input.empty();
        this.authEnabled = Input.empty();
        this.cname = Input.empty();
        this.computeType = Input.empty();
        this.containerResourceRequirements = Input.empty();
        this.dataCollection = Input.empty();
        this.description = Input.empty();
        this.dnsNameLabel = Input.empty();
        this.encryptionProperties = Input.empty();
        this.environmentImageRequest = Input.empty();
        this.keys = Input.empty();
        this.kvTags = Input.empty();
        this.location = Input.empty();
        this.properties = Input.empty();
        this.resourceGroupName = Input.empty();
        this.serviceName = Input.empty();
        this.sslCertificate = Input.empty();
        this.sslEnabled = Input.empty();
        this.sslKey = Input.empty();
        this.vnetConfiguration = Input.empty();
        this.workspaceName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ACIServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> appInsightsEnabled;
        private @Nullable Input<Boolean> authEnabled;
        private @Nullable Input<String> cname;
        private Input<String> computeType;
        private @Nullable Input<ContainerResourceRequirementsArgs> containerResourceRequirements;
        private @Nullable Input<ACIServiceCreateRequestDataCollectionArgs> dataCollection;
        private @Nullable Input<String> description;
        private @Nullable Input<String> dnsNameLabel;
        private @Nullable Input<ACIServiceCreateRequestEncryptionPropertiesArgs> encryptionProperties;
        private @Nullable Input<CreateServiceRequestEnvironmentImageRequestArgs> environmentImageRequest;
        private @Nullable Input<CreateServiceRequestKeysArgs> keys;
        private @Nullable Input<Map<String,String>> kvTags;
        private @Nullable Input<String> location;
        private @Nullable Input<Map<String,String>> properties;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> serviceName;
        private @Nullable Input<String> sslCertificate;
        private @Nullable Input<Boolean> sslEnabled;
        private @Nullable Input<String> sslKey;
        private @Nullable Input<ACIServiceCreateRequestVnetConfigurationArgs> vnetConfiguration;
        private Input<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(ACIServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appInsightsEnabled = defaults.appInsightsEnabled;
    	      this.authEnabled = defaults.authEnabled;
    	      this.cname = defaults.cname;
    	      this.computeType = defaults.computeType;
    	      this.containerResourceRequirements = defaults.containerResourceRequirements;
    	      this.dataCollection = defaults.dataCollection;
    	      this.description = defaults.description;
    	      this.dnsNameLabel = defaults.dnsNameLabel;
    	      this.encryptionProperties = defaults.encryptionProperties;
    	      this.environmentImageRequest = defaults.environmentImageRequest;
    	      this.keys = defaults.keys;
    	      this.kvTags = defaults.kvTags;
    	      this.location = defaults.location;
    	      this.properties = defaults.properties;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceName = defaults.serviceName;
    	      this.sslCertificate = defaults.sslCertificate;
    	      this.sslEnabled = defaults.sslEnabled;
    	      this.sslKey = defaults.sslKey;
    	      this.vnetConfiguration = defaults.vnetConfiguration;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder setAppInsightsEnabled(@Nullable Input<Boolean> appInsightsEnabled) {
            this.appInsightsEnabled = appInsightsEnabled;
            return this;
        }

        public Builder setAppInsightsEnabled(@Nullable Boolean appInsightsEnabled) {
            this.appInsightsEnabled = Input.ofNullable(appInsightsEnabled);
            return this;
        }

        public Builder setAuthEnabled(@Nullable Input<Boolean> authEnabled) {
            this.authEnabled = authEnabled;
            return this;
        }

        public Builder setAuthEnabled(@Nullable Boolean authEnabled) {
            this.authEnabled = Input.ofNullable(authEnabled);
            return this;
        }

        public Builder setCname(@Nullable Input<String> cname) {
            this.cname = cname;
            return this;
        }

        public Builder setCname(@Nullable String cname) {
            this.cname = Input.ofNullable(cname);
            return this;
        }

        public Builder setComputeType(Input<String> computeType) {
            this.computeType = Objects.requireNonNull(computeType);
            return this;
        }

        public Builder setComputeType(String computeType) {
            this.computeType = Input.of(Objects.requireNonNull(computeType));
            return this;
        }

        public Builder setContainerResourceRequirements(@Nullable Input<ContainerResourceRequirementsArgs> containerResourceRequirements) {
            this.containerResourceRequirements = containerResourceRequirements;
            return this;
        }

        public Builder setContainerResourceRequirements(@Nullable ContainerResourceRequirementsArgs containerResourceRequirements) {
            this.containerResourceRequirements = Input.ofNullable(containerResourceRequirements);
            return this;
        }

        public Builder setDataCollection(@Nullable Input<ACIServiceCreateRequestDataCollectionArgs> dataCollection) {
            this.dataCollection = dataCollection;
            return this;
        }

        public Builder setDataCollection(@Nullable ACIServiceCreateRequestDataCollectionArgs dataCollection) {
            this.dataCollection = Input.ofNullable(dataCollection);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDnsNameLabel(@Nullable Input<String> dnsNameLabel) {
            this.dnsNameLabel = dnsNameLabel;
            return this;
        }

        public Builder setDnsNameLabel(@Nullable String dnsNameLabel) {
            this.dnsNameLabel = Input.ofNullable(dnsNameLabel);
            return this;
        }

        public Builder setEncryptionProperties(@Nullable Input<ACIServiceCreateRequestEncryptionPropertiesArgs> encryptionProperties) {
            this.encryptionProperties = encryptionProperties;
            return this;
        }

        public Builder setEncryptionProperties(@Nullable ACIServiceCreateRequestEncryptionPropertiesArgs encryptionProperties) {
            this.encryptionProperties = Input.ofNullable(encryptionProperties);
            return this;
        }

        public Builder setEnvironmentImageRequest(@Nullable Input<CreateServiceRequestEnvironmentImageRequestArgs> environmentImageRequest) {
            this.environmentImageRequest = environmentImageRequest;
            return this;
        }

        public Builder setEnvironmentImageRequest(@Nullable CreateServiceRequestEnvironmentImageRequestArgs environmentImageRequest) {
            this.environmentImageRequest = Input.ofNullable(environmentImageRequest);
            return this;
        }

        public Builder setKeys(@Nullable Input<CreateServiceRequestKeysArgs> keys) {
            this.keys = keys;
            return this;
        }

        public Builder setKeys(@Nullable CreateServiceRequestKeysArgs keys) {
            this.keys = Input.ofNullable(keys);
            return this;
        }

        public Builder setKvTags(@Nullable Input<Map<String,String>> kvTags) {
            this.kvTags = kvTags;
            return this;
        }

        public Builder setKvTags(@Nullable Map<String,String> kvTags) {
            this.kvTags = Input.ofNullable(kvTags);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setProperties(@Nullable Input<Map<String,String>> properties) {
            this.properties = properties;
            return this;
        }

        public Builder setProperties(@Nullable Map<String,String> properties) {
            this.properties = Input.ofNullable(properties);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setServiceName(@Nullable Input<String> serviceName) {
            this.serviceName = serviceName;
            return this;
        }

        public Builder setServiceName(@Nullable String serviceName) {
            this.serviceName = Input.ofNullable(serviceName);
            return this;
        }

        public Builder setSslCertificate(@Nullable Input<String> sslCertificate) {
            this.sslCertificate = sslCertificate;
            return this;
        }

        public Builder setSslCertificate(@Nullable String sslCertificate) {
            this.sslCertificate = Input.ofNullable(sslCertificate);
            return this;
        }

        public Builder setSslEnabled(@Nullable Input<Boolean> sslEnabled) {
            this.sslEnabled = sslEnabled;
            return this;
        }

        public Builder setSslEnabled(@Nullable Boolean sslEnabled) {
            this.sslEnabled = Input.ofNullable(sslEnabled);
            return this;
        }

        public Builder setSslKey(@Nullable Input<String> sslKey) {
            this.sslKey = sslKey;
            return this;
        }

        public Builder setSslKey(@Nullable String sslKey) {
            this.sslKey = Input.ofNullable(sslKey);
            return this;
        }

        public Builder setVnetConfiguration(@Nullable Input<ACIServiceCreateRequestVnetConfigurationArgs> vnetConfiguration) {
            this.vnetConfiguration = vnetConfiguration;
            return this;
        }

        public Builder setVnetConfiguration(@Nullable ACIServiceCreateRequestVnetConfigurationArgs vnetConfiguration) {
            this.vnetConfiguration = Input.ofNullable(vnetConfiguration);
            return this;
        }

        public Builder setWorkspaceName(Input<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder setWorkspaceName(String workspaceName) {
            this.workspaceName = Input.of(Objects.requireNonNull(workspaceName));
            return this;
        }

        public ACIServiceArgs build() {
            return new ACIServiceArgs(appInsightsEnabled, authEnabled, cname, computeType, containerResourceRequirements, dataCollection, description, dnsNameLabel, encryptionProperties, environmentImageRequest, keys, kvTags, location, properties, resourceGroupName, serviceName, sslCertificate, sslEnabled, sslKey, vnetConfiguration, workspaceName);
        }
    }
}
