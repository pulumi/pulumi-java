// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.sql.enums.ReplicationMode;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DistributedAvailabilityGroupArgs extends io.pulumi.resources.ResourceArgs {

    public static final DistributedAvailabilityGroupArgs Empty = new DistributedAvailabilityGroupArgs();

    /**
     * The distributed availability group name.
     * 
     */
    @Import(name="distributedAvailabilityGroupName")
      private final @Nullable Output<String> distributedAvailabilityGroupName;

    public Output<String> distributedAvailabilityGroupName() {
        return this.distributedAvailabilityGroupName == null ? Codegen.empty() : this.distributedAvailabilityGroupName;
    }

    /**
     * The name of the managed instance.
     * 
     */
    @Import(name="managedInstanceName", required=true)
      private final Output<String> managedInstanceName;

    public Output<String> managedInstanceName() {
        return this.managedInstanceName;
    }

    /**
     * The primary availability group name
     * 
     */
    @Import(name="primaryAvailabilityGroupName")
      private final @Nullable Output<String> primaryAvailabilityGroupName;

    public Output<String> primaryAvailabilityGroupName() {
        return this.primaryAvailabilityGroupName == null ? Codegen.empty() : this.primaryAvailabilityGroupName;
    }

    /**
     * The replication mode of a distributed availability group. Parameter will be ignored during link creation.
     * 
     */
    @Import(name="replicationMode")
      private final @Nullable Output<Either<String,ReplicationMode>> replicationMode;

    public Output<Either<String,ReplicationMode>> replicationMode() {
        return this.replicationMode == null ? Codegen.empty() : this.replicationMode;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The secondary availability group name
     * 
     */
    @Import(name="secondaryAvailabilityGroupName")
      private final @Nullable Output<String> secondaryAvailabilityGroupName;

    public Output<String> secondaryAvailabilityGroupName() {
        return this.secondaryAvailabilityGroupName == null ? Codegen.empty() : this.secondaryAvailabilityGroupName;
    }

    /**
     * The source endpoint
     * 
     */
    @Import(name="sourceEndpoint")
      private final @Nullable Output<String> sourceEndpoint;

    public Output<String> sourceEndpoint() {
        return this.sourceEndpoint == null ? Codegen.empty() : this.sourceEndpoint;
    }

    /**
     * The name of the target database
     * 
     */
    @Import(name="targetDatabase")
      private final @Nullable Output<String> targetDatabase;

    public Output<String> targetDatabase() {
        return this.targetDatabase == null ? Codegen.empty() : this.targetDatabase;
    }

    public DistributedAvailabilityGroupArgs(
        @Nullable Output<String> distributedAvailabilityGroupName,
        Output<String> managedInstanceName,
        @Nullable Output<String> primaryAvailabilityGroupName,
        @Nullable Output<Either<String,ReplicationMode>> replicationMode,
        Output<String> resourceGroupName,
        @Nullable Output<String> secondaryAvailabilityGroupName,
        @Nullable Output<String> sourceEndpoint,
        @Nullable Output<String> targetDatabase) {
        this.distributedAvailabilityGroupName = distributedAvailabilityGroupName;
        this.managedInstanceName = Objects.requireNonNull(managedInstanceName, "expected parameter 'managedInstanceName' to be non-null");
        this.primaryAvailabilityGroupName = primaryAvailabilityGroupName;
        this.replicationMode = replicationMode;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.secondaryAvailabilityGroupName = secondaryAvailabilityGroupName;
        this.sourceEndpoint = sourceEndpoint;
        this.targetDatabase = targetDatabase;
    }

    private DistributedAvailabilityGroupArgs() {
        this.distributedAvailabilityGroupName = Codegen.empty();
        this.managedInstanceName = Codegen.empty();
        this.primaryAvailabilityGroupName = Codegen.empty();
        this.replicationMode = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.secondaryAvailabilityGroupName = Codegen.empty();
        this.sourceEndpoint = Codegen.empty();
        this.targetDatabase = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DistributedAvailabilityGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> distributedAvailabilityGroupName;
        private Output<String> managedInstanceName;
        private @Nullable Output<String> primaryAvailabilityGroupName;
        private @Nullable Output<Either<String,ReplicationMode>> replicationMode;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> secondaryAvailabilityGroupName;
        private @Nullable Output<String> sourceEndpoint;
        private @Nullable Output<String> targetDatabase;

        public Builder() {
    	      // Empty
        }

        public Builder(DistributedAvailabilityGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distributedAvailabilityGroupName = defaults.distributedAvailabilityGroupName;
    	      this.managedInstanceName = defaults.managedInstanceName;
    	      this.primaryAvailabilityGroupName = defaults.primaryAvailabilityGroupName;
    	      this.replicationMode = defaults.replicationMode;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secondaryAvailabilityGroupName = defaults.secondaryAvailabilityGroupName;
    	      this.sourceEndpoint = defaults.sourceEndpoint;
    	      this.targetDatabase = defaults.targetDatabase;
        }

        public Builder distributedAvailabilityGroupName(@Nullable Output<String> distributedAvailabilityGroupName) {
            this.distributedAvailabilityGroupName = distributedAvailabilityGroupName;
            return this;
        }
        public Builder distributedAvailabilityGroupName(@Nullable String distributedAvailabilityGroupName) {
            this.distributedAvailabilityGroupName = Codegen.ofNullable(distributedAvailabilityGroupName);
            return this;
        }
        public Builder managedInstanceName(Output<String> managedInstanceName) {
            this.managedInstanceName = Objects.requireNonNull(managedInstanceName);
            return this;
        }
        public Builder managedInstanceName(String managedInstanceName) {
            this.managedInstanceName = Output.of(Objects.requireNonNull(managedInstanceName));
            return this;
        }
        public Builder primaryAvailabilityGroupName(@Nullable Output<String> primaryAvailabilityGroupName) {
            this.primaryAvailabilityGroupName = primaryAvailabilityGroupName;
            return this;
        }
        public Builder primaryAvailabilityGroupName(@Nullable String primaryAvailabilityGroupName) {
            this.primaryAvailabilityGroupName = Codegen.ofNullable(primaryAvailabilityGroupName);
            return this;
        }
        public Builder replicationMode(@Nullable Output<Either<String,ReplicationMode>> replicationMode) {
            this.replicationMode = replicationMode;
            return this;
        }
        public Builder replicationMode(@Nullable Either<String,ReplicationMode> replicationMode) {
            this.replicationMode = Codegen.ofNullable(replicationMode);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder secondaryAvailabilityGroupName(@Nullable Output<String> secondaryAvailabilityGroupName) {
            this.secondaryAvailabilityGroupName = secondaryAvailabilityGroupName;
            return this;
        }
        public Builder secondaryAvailabilityGroupName(@Nullable String secondaryAvailabilityGroupName) {
            this.secondaryAvailabilityGroupName = Codegen.ofNullable(secondaryAvailabilityGroupName);
            return this;
        }
        public Builder sourceEndpoint(@Nullable Output<String> sourceEndpoint) {
            this.sourceEndpoint = sourceEndpoint;
            return this;
        }
        public Builder sourceEndpoint(@Nullable String sourceEndpoint) {
            this.sourceEndpoint = Codegen.ofNullable(sourceEndpoint);
            return this;
        }
        public Builder targetDatabase(@Nullable Output<String> targetDatabase) {
            this.targetDatabase = targetDatabase;
            return this;
        }
        public Builder targetDatabase(@Nullable String targetDatabase) {
            this.targetDatabase = Codegen.ofNullable(targetDatabase);
            return this;
        }        public DistributedAvailabilityGroupArgs build() {
            return new DistributedAvailabilityGroupArgs(distributedAvailabilityGroupName, managedInstanceName, primaryAvailabilityGroupName, replicationMode, resourceGroupName, secondaryAvailabilityGroupName, sourceEndpoint, targetDatabase);
        }
    }
}
