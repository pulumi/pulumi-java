// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DiagnosticLoggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final DiagnosticLoggerArgs Empty = new DiagnosticLoggerArgs();

    /**
     * Diagnostic identifier. Must be unique in the current API Management service instance.
     * 
     */
    @Import(name="diagnosticId", required=true)
      private final Output<String> diagnosticId;

    public Output<String> getDiagnosticId() {
        return this.diagnosticId;
    }

    /**
     * Logger identifier. Must be unique in the API Management service instance.
     * 
     */
    @Import(name="loggerid")
      private final @Nullable Output<String> loggerid;

    public Output<String> getLoggerid() {
        return this.loggerid == null ? Output.empty() : this.loggerid;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName;
    }

    public DiagnosticLoggerArgs(
        Output<String> diagnosticId,
        @Nullable Output<String> loggerid,
        Output<String> resourceGroupName,
        Output<String> serviceName) {
        this.diagnosticId = Objects.requireNonNull(diagnosticId, "expected parameter 'diagnosticId' to be non-null");
        this.loggerid = loggerid;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
    }

    private DiagnosticLoggerArgs() {
        this.diagnosticId = Output.empty();
        this.loggerid = Output.empty();
        this.resourceGroupName = Output.empty();
        this.serviceName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiagnosticLoggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> diagnosticId;
        private @Nullable Output<String> loggerid;
        private Output<String> resourceGroupName;
        private Output<String> serviceName;

        public Builder() {
    	      // Empty
        }

        public Builder(DiagnosticLoggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diagnosticId = defaults.diagnosticId;
    	      this.loggerid = defaults.loggerid;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceName = defaults.serviceName;
        }

        public Builder diagnosticId(Output<String> diagnosticId) {
            this.diagnosticId = Objects.requireNonNull(diagnosticId);
            return this;
        }
        public Builder diagnosticId(String diagnosticId) {
            this.diagnosticId = Output.of(Objects.requireNonNull(diagnosticId));
            return this;
        }
        public Builder loggerid(@Nullable Output<String> loggerid) {
            this.loggerid = loggerid;
            return this;
        }
        public Builder loggerid(@Nullable String loggerid) {
            this.loggerid = Output.ofNullable(loggerid);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }        public DiagnosticLoggerArgs build() {
            return new DiagnosticLoggerArgs(diagnosticId, loggerid, resourceGroupName, serviceName);
        }
    }
}
