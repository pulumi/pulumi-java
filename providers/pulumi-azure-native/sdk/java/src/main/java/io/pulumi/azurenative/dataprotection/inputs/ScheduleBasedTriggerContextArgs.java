// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.dataprotection.inputs;

import io.pulumi.azurenative.dataprotection.inputs.BackupScheduleArgs;
import io.pulumi.azurenative.dataprotection.inputs.TaggingCriteriaArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Schedule based trigger context
 * 
 */
public final class ScheduleBasedTriggerContextArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScheduleBasedTriggerContextArgs Empty = new ScheduleBasedTriggerContextArgs();

    /**
     * Type of the specific object - used for deserializing
     * Expected value is 'ScheduleBasedTriggerContext'.
     * 
     */
    @Import(name="objectType", required=true)
      private final Output<String> objectType;

    public Output<String> getObjectType() {
        return this.objectType;
    }

    /**
     * Schedule for this backup
     * 
     */
    @Import(name="schedule", required=true)
      private final Output<BackupScheduleArgs> schedule;

    public Output<BackupScheduleArgs> getSchedule() {
        return this.schedule;
    }

    /**
     * List of tags that can be applicable for given schedule.
     * 
     */
    @Import(name="taggingCriteria", required=true)
      private final Output<List<TaggingCriteriaArgs>> taggingCriteria;

    public Output<List<TaggingCriteriaArgs>> getTaggingCriteria() {
        return this.taggingCriteria;
    }

    public ScheduleBasedTriggerContextArgs(
        Output<String> objectType,
        Output<BackupScheduleArgs> schedule,
        Output<List<TaggingCriteriaArgs>> taggingCriteria) {
        this.objectType = Objects.requireNonNull(objectType, "expected parameter 'objectType' to be non-null");
        this.schedule = Objects.requireNonNull(schedule, "expected parameter 'schedule' to be non-null");
        this.taggingCriteria = Objects.requireNonNull(taggingCriteria, "expected parameter 'taggingCriteria' to be non-null");
    }

    private ScheduleBasedTriggerContextArgs() {
        this.objectType = Output.empty();
        this.schedule = Output.empty();
        this.taggingCriteria = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleBasedTriggerContextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> objectType;
        private Output<BackupScheduleArgs> schedule;
        private Output<List<TaggingCriteriaArgs>> taggingCriteria;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduleBasedTriggerContextArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.objectType = defaults.objectType;
    	      this.schedule = defaults.schedule;
    	      this.taggingCriteria = defaults.taggingCriteria;
        }

        public Builder objectType(Output<String> objectType) {
            this.objectType = Objects.requireNonNull(objectType);
            return this;
        }
        public Builder objectType(String objectType) {
            this.objectType = Output.of(Objects.requireNonNull(objectType));
            return this;
        }
        public Builder schedule(Output<BackupScheduleArgs> schedule) {
            this.schedule = Objects.requireNonNull(schedule);
            return this;
        }
        public Builder schedule(BackupScheduleArgs schedule) {
            this.schedule = Output.of(Objects.requireNonNull(schedule));
            return this;
        }
        public Builder taggingCriteria(Output<List<TaggingCriteriaArgs>> taggingCriteria) {
            this.taggingCriteria = Objects.requireNonNull(taggingCriteria);
            return this;
        }
        public Builder taggingCriteria(List<TaggingCriteriaArgs> taggingCriteria) {
            this.taggingCriteria = Output.of(Objects.requireNonNull(taggingCriteria));
            return this;
        }
        public Builder taggingCriteria(TaggingCriteriaArgs... taggingCriteria) {
            return taggingCriteria(List.of(taggingCriteria));
        }        public ScheduleBasedTriggerContextArgs build() {
            return new ScheduleBasedTriggerContextArgs(objectType, schedule, taggingCriteria);
        }
    }
}
