// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.peering;

import io.pulumi.azurenative.Utilities;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * The Connection Monitor Test class.
API Version: 2021-06-01.

{{% examples %}}
## Example Usage
{{% example %}}
### Create or Update Connection Monitor Test
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var connectionMonitorTest = new AzureNative.Peering.ConnectionMonitorTest("connectionMonitorTest", new AzureNative.Peering.ConnectionMonitorTestArgs
        {
            ConnectionMonitorTestName = "connectionMonitorTestName",
            Destination = "Example Destination",
            DestinationPort = 443,
            PeeringServiceName = "peeringServiceName",
            ResourceGroupName = "rgName",
            SourceAgent = "Example Source Agent",
            TestFrequencyInSec = 30,
        });
    }

}

```

```go
package main

import (
	peering "github.com/pulumi/pulumi-azure-native/sdk/go/azure/peering"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := peering.NewConnectionMonitorTest(ctx, "connectionMonitorTest", &peering.ConnectionMonitorTestArgs{
			ConnectionMonitorTestName: pulumi.String("connectionMonitorTestName"),
			Destination:               pulumi.String("Example Destination"),
			DestinationPort:           pulumi.Int(443),
			PeeringServiceName:        pulumi.String("peeringServiceName"),
			ResourceGroupName:         pulumi.String("rgName"),
			SourceAgent:               pulumi.String("Example Source Agent"),
			TestFrequencyInSec:        pulumi.Int(30),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const connectionMonitorTest = new azure_native.peering.ConnectionMonitorTest("connectionMonitorTest", {
    connectionMonitorTestName: "connectionMonitorTestName",
    destination: "Example Destination",
    destinationPort: 443,
    peeringServiceName: "peeringServiceName",
    resourceGroupName: "rgName",
    sourceAgent: "Example Source Agent",
    testFrequencyInSec: 30,
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

connection_monitor_test = azure_native.peering.ConnectionMonitorTest("connectionMonitorTest",
    connection_monitor_test_name="connectionMonitorTestName",
    destination="Example Destination",
    destination_port=443,
    peering_service_name="peeringServiceName",
    resource_group_name="rgName",
    source_agent="Example Source Agent",
    test_frequency_in_sec=30)

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:peering:ConnectionMonitorTest connectionMonitorTestName /subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName/connectionMonitorTests/connectionMonitorTestName 
```

 */
@ResourceType(type="azure-native:peering:ConnectionMonitorTest")
public class ConnectionMonitorTest extends io.pulumi.resources.CustomResource {
    /**
     * The Connection Monitor test destination
     */
    @OutputExport(name="destination", type=String.class, parameters={})
    private Output</* @Nullable */ String> destination;

    /**
     * @return The Connection Monitor test destination
     */
    public Output</* @Nullable */ String> getDestination() {
        return this.destination;
    }
    /**
     * The Connection Monitor test destination port
     */
    @OutputExport(name="destinationPort", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> destinationPort;

    /**
     * @return The Connection Monitor test destination port
     */
    public Output</* @Nullable */ Integer> getDestinationPort() {
        return this.destinationPort;
    }
    /**
     * The flag that indicates if the Connection Monitor test is successful or not.
     */
    @OutputExport(name="isTestSuccessful", type=Boolean.class, parameters={})
    private Output<Boolean> isTestSuccessful;

    /**
     * @return The flag that indicates if the Connection Monitor test is successful or not.
     */
    public Output<Boolean> getIsTestSuccessful() {
        return this.isTestSuccessful;
    }
    /**
     * The name of the resource.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The path representing the Connection Monitor test.
     */
    @OutputExport(name="path", type=List.class, parameters={String.class})
    private Output<List<String>> path;

    /**
     * @return The path representing the Connection Monitor test.
     */
    public Output<List<String>> getPath() {
        return this.path;
    }
    /**
     * The provisioning state of the resource.
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning state of the resource.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The Connection Monitor test source agent
     */
    @OutputExport(name="sourceAgent", type=String.class, parameters={})
    private Output</* @Nullable */ String> sourceAgent;

    /**
     * @return The Connection Monitor test source agent
     */
    public Output</* @Nullable */ String> getSourceAgent() {
        return this.sourceAgent;
    }
    /**
     * The Connection Monitor test frequency in seconds
     */
    @OutputExport(name="testFrequencyInSec", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> testFrequencyInSec;

    /**
     * @return The Connection Monitor test frequency in seconds
     */
    public Output</* @Nullable */ Integer> getTestFrequencyInSec() {
        return this.testFrequencyInSec;
    }
    /**
     * The type of the resource.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConnectionMonitorTest(String name, ConnectionMonitorTestArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:peering:ConnectionMonitorTest", name, args == null ? ConnectionMonitorTestArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private ConnectionMonitorTest(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:peering:ConnectionMonitorTest", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:peering/v20210601:ConnectionMonitorTest").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConnectionMonitorTest get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ConnectionMonitorTest(name, id, options);
    }
}
