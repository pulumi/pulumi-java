// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.peering.inputs;

import io.pulumi.azurenative.peering.inputs.DirectConnectionResponse;
import io.pulumi.azurenative.peering.inputs.SubResourceResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PeeringPropertiesDirectResponse extends io.pulumi.resources.InvokeArgs {

    public static final PeeringPropertiesDirectResponse Empty = new PeeringPropertiesDirectResponse();

    @InputImport(name="connections")
    private final @Nullable List<DirectConnectionResponse> connections;

    public List<DirectConnectionResponse> getConnections() {
        return this.connections == null ? List.of() : this.connections;
    }

    @InputImport(name="directPeeringType")
    private final @Nullable String directPeeringType;

    public Optional<String> getDirectPeeringType() {
        return this.directPeeringType == null ? Optional.empty() : Optional.ofNullable(this.directPeeringType);
    }

    @InputImport(name="peerAsn")
    private final @Nullable SubResourceResponse peerAsn;

    public Optional<SubResourceResponse> getPeerAsn() {
        return this.peerAsn == null ? Optional.empty() : Optional.ofNullable(this.peerAsn);
    }

    @InputImport(name="useForPeeringService", required=true)
    private final Boolean useForPeeringService;

    public Boolean getUseForPeeringService() {
        return this.useForPeeringService;
    }

    public PeeringPropertiesDirectResponse(
        @Nullable List<DirectConnectionResponse> connections,
        @Nullable String directPeeringType,
        @Nullable SubResourceResponse peerAsn,
        Boolean useForPeeringService) {
        this.connections = connections;
        this.directPeeringType = directPeeringType;
        this.peerAsn = peerAsn;
        this.useForPeeringService = Objects.requireNonNull(useForPeeringService, "expected parameter 'useForPeeringService' to be non-null");
    }

    private PeeringPropertiesDirectResponse() {
        this.connections = List.of();
        this.directPeeringType = null;
        this.peerAsn = null;
        this.useForPeeringService = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PeeringPropertiesDirectResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<DirectConnectionResponse> connections;
        private @Nullable String directPeeringType;
        private @Nullable SubResourceResponse peerAsn;
        private Boolean useForPeeringService;

        public Builder() {
    	      // Empty
        }

        public Builder(PeeringPropertiesDirectResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connections = defaults.connections;
    	      this.directPeeringType = defaults.directPeeringType;
    	      this.peerAsn = defaults.peerAsn;
    	      this.useForPeeringService = defaults.useForPeeringService;
        }

        public Builder setConnections(@Nullable List<DirectConnectionResponse> connections) {
            this.connections = connections;
            return this;
        }

        public Builder setDirectPeeringType(@Nullable String directPeeringType) {
            this.directPeeringType = directPeeringType;
            return this;
        }

        public Builder setPeerAsn(@Nullable SubResourceResponse peerAsn) {
            this.peerAsn = peerAsn;
            return this;
        }

        public Builder setUseForPeeringService(Boolean useForPeeringService) {
            this.useForPeeringService = Objects.requireNonNull(useForPeeringService);
            return this;
        }

        public PeeringPropertiesDirectResponse build() {
            return new PeeringPropertiesDirectResponse(connections, directPeeringType, peerAsn, useForPeeringService);
        }
    }
}
