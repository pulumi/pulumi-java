// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory;

import io.pulumi.azurenative.datafactory.enums.PublicNetworkAccess;
import io.pulumi.azurenative.datafactory.inputs.EncryptionConfigurationArgs;
import io.pulumi.azurenative.datafactory.inputs.FactoryGitHubConfigurationArgs;
import io.pulumi.azurenative.datafactory.inputs.FactoryIdentityArgs;
import io.pulumi.azurenative.datafactory.inputs.FactoryVSTSConfigurationArgs;
import io.pulumi.azurenative.datafactory.inputs.GlobalParameterSpecificationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FactoryArgs extends io.pulumi.resources.ResourceArgs {

    public static final FactoryArgs Empty = new FactoryArgs();

    /**
     * Properties to enable Customer Managed Key for the factory.
     * 
     */
    @InputImport(name="encryption")
      private final @Nullable Output<EncryptionConfigurationArgs> encryption;

    public Output<EncryptionConfigurationArgs> getEncryption() {
        return this.encryption == null ? Output.empty() : this.encryption;
    }

    /**
     * The factory name.
     * 
     */
    @InputImport(name="factoryName")
      private final @Nullable Output<String> factoryName;

    public Output<String> getFactoryName() {
        return this.factoryName == null ? Output.empty() : this.factoryName;
    }

    /**
     * List of parameters for factory.
     * 
     */
    @InputImport(name="globalParameters")
      private final @Nullable Output<Map<String,GlobalParameterSpecificationArgs>> globalParameters;

    public Output<Map<String,GlobalParameterSpecificationArgs>> getGlobalParameters() {
        return this.globalParameters == null ? Output.empty() : this.globalParameters;
    }

    /**
     * Managed service identity of the factory.
     * 
     */
    @InputImport(name="identity")
      private final @Nullable Output<FactoryIdentityArgs> identity;

    public Output<FactoryIdentityArgs> getIdentity() {
        return this.identity == null ? Output.empty() : this.identity;
    }

    /**
     * The resource location.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Whether or not public network access is allowed for the data factory.
     * 
     */
    @InputImport(name="publicNetworkAccess")
      private final @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;

    public Output<Either<String,PublicNetworkAccess>> getPublicNetworkAccess() {
        return this.publicNetworkAccess == null ? Output.empty() : this.publicNetworkAccess;
    }

    /**
     * Git repo information of the factory.
     * 
     */
    @InputImport(name="repoConfiguration")
      private final @Nullable Output<Either<FactoryGitHubConfigurationArgs,FactoryVSTSConfigurationArgs>> repoConfiguration;

    public Output<Either<FactoryGitHubConfigurationArgs,FactoryVSTSConfigurationArgs>> getRepoConfiguration() {
        return this.repoConfiguration == null ? Output.empty() : this.repoConfiguration;
    }

    /**
     * The resource group name.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public FactoryArgs(
        @Nullable Output<EncryptionConfigurationArgs> encryption,
        @Nullable Output<String> factoryName,
        @Nullable Output<Map<String,GlobalParameterSpecificationArgs>> globalParameters,
        @Nullable Output<FactoryIdentityArgs> identity,
        @Nullable Output<String> location,
        @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess,
        @Nullable Output<Either<FactoryGitHubConfigurationArgs,FactoryVSTSConfigurationArgs>> repoConfiguration,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags) {
        this.encryption = encryption;
        this.factoryName = factoryName;
        this.globalParameters = globalParameters;
        this.identity = identity;
        this.location = location;
        this.publicNetworkAccess = publicNetworkAccess;
        this.repoConfiguration = repoConfiguration;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private FactoryArgs() {
        this.encryption = Output.empty();
        this.factoryName = Output.empty();
        this.globalParameters = Output.empty();
        this.identity = Output.empty();
        this.location = Output.empty();
        this.publicNetworkAccess = Output.empty();
        this.repoConfiguration = Output.empty();
        this.resourceGroupName = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FactoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<EncryptionConfigurationArgs> encryption;
        private @Nullable Output<String> factoryName;
        private @Nullable Output<Map<String,GlobalParameterSpecificationArgs>> globalParameters;
        private @Nullable Output<FactoryIdentityArgs> identity;
        private @Nullable Output<String> location;
        private @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;
        private @Nullable Output<Either<FactoryGitHubConfigurationArgs,FactoryVSTSConfigurationArgs>> repoConfiguration;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(FactoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encryption = defaults.encryption;
    	      this.factoryName = defaults.factoryName;
    	      this.globalParameters = defaults.globalParameters;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.repoConfiguration = defaults.repoConfiguration;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder encryption(@Nullable Output<EncryptionConfigurationArgs> encryption) {
            this.encryption = encryption;
            return this;
        }

        public Builder encryption(@Nullable EncryptionConfigurationArgs encryption) {
            this.encryption = Output.ofNullable(encryption);
            return this;
        }

        public Builder factoryName(@Nullable Output<String> factoryName) {
            this.factoryName = factoryName;
            return this;
        }

        public Builder factoryName(@Nullable String factoryName) {
            this.factoryName = Output.ofNullable(factoryName);
            return this;
        }

        public Builder globalParameters(@Nullable Output<Map<String,GlobalParameterSpecificationArgs>> globalParameters) {
            this.globalParameters = globalParameters;
            return this;
        }

        public Builder globalParameters(@Nullable Map<String,GlobalParameterSpecificationArgs> globalParameters) {
            this.globalParameters = Output.ofNullable(globalParameters);
            return this;
        }

        public Builder identity(@Nullable Output<FactoryIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder identity(@Nullable FactoryIdentityArgs identity) {
            this.identity = Output.ofNullable(identity);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder publicNetworkAccess(@Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publicNetworkAccess(@Nullable Either<String,PublicNetworkAccess> publicNetworkAccess) {
            this.publicNetworkAccess = Output.ofNullable(publicNetworkAccess);
            return this;
        }

        public Builder repoConfiguration(@Nullable Output<Either<FactoryGitHubConfigurationArgs,FactoryVSTSConfigurationArgs>> repoConfiguration) {
            this.repoConfiguration = repoConfiguration;
            return this;
        }

        public Builder repoConfiguration(@Nullable Either<FactoryGitHubConfigurationArgs,FactoryVSTSConfigurationArgs> repoConfiguration) {
            this.repoConfiguration = Output.ofNullable(repoConfiguration);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public FactoryArgs build() {
            return new FactoryArgs(encryption, factoryName, globalParameters, identity, location, publicNetworkAccess, repoConfiguration, resourceGroupName, tags);
        }
    }
}
