// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Contains time series of various impacted metrics for an Azure SQL Database, Server or Elastic Pool Recommended Action.
 * 
 */
public final class RecommendedActionMetricInfoResponse extends io.pulumi.resources.InvokeArgs {

    public static final RecommendedActionMetricInfoResponse Empty = new RecommendedActionMetricInfoResponse();

    /**
     * Gets the name of the metric. e.g., CPU, Number of Queries.
     * 
     */
    @Import(name="metricName", required=true)
      private final String metricName;

    public String metricName() {
        return this.metricName;
    }

    /**
     * Gets the start time of time interval given by this MetricInfo.
     * 
     */
    @Import(name="startTime", required=true)
      private final String startTime;

    public String startTime() {
        return this.startTime;
    }

    /**
     * Gets the duration of time interval for the value given by this MetricInfo. e.g., PT1H (1 hour)
     * 
     */
    @Import(name="timeGrain", required=true)
      private final String timeGrain;

    public String timeGrain() {
        return this.timeGrain;
    }

    /**
     * Gets the unit in which metric is measured. e.g., DTU, Frequency
     * 
     */
    @Import(name="unit", required=true)
      private final String unit;

    public String unit() {
        return this.unit;
    }

    /**
     * Gets the value of the metric in the time interval given by this MetricInfo.
     * 
     */
    @Import(name="value", required=true)
      private final Double value;

    public Double value() {
        return this.value;
    }

    public RecommendedActionMetricInfoResponse(
        String metricName,
        String startTime,
        String timeGrain,
        String unit,
        Double value) {
        this.metricName = Objects.requireNonNull(metricName, "expected parameter 'metricName' to be non-null");
        this.startTime = Objects.requireNonNull(startTime, "expected parameter 'startTime' to be non-null");
        this.timeGrain = Objects.requireNonNull(timeGrain, "expected parameter 'timeGrain' to be non-null");
        this.unit = Objects.requireNonNull(unit, "expected parameter 'unit' to be non-null");
        this.value = Objects.requireNonNull(value, "expected parameter 'value' to be non-null");
    }

    private RecommendedActionMetricInfoResponse() {
        this.metricName = null;
        this.startTime = null;
        this.timeGrain = null;
        this.unit = null;
        this.value = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecommendedActionMetricInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String metricName;
        private String startTime;
        private String timeGrain;
        private String unit;
        private Double value;

        public Builder() {
    	      // Empty
        }

        public Builder(RecommendedActionMetricInfoResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricName = defaults.metricName;
    	      this.startTime = defaults.startTime;
    	      this.timeGrain = defaults.timeGrain;
    	      this.unit = defaults.unit;
    	      this.value = defaults.value;
        }

        public Builder metricName(String metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        public Builder timeGrain(String timeGrain) {
            this.timeGrain = Objects.requireNonNull(timeGrain);
            return this;
        }
        public Builder unit(String unit) {
            this.unit = Objects.requireNonNull(unit);
            return this;
        }
        public Builder value(Double value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }        public RecommendedActionMetricInfoResponse build() {
            return new RecommendedActionMetricInfoResponse(metricName, startTime, timeGrain, unit, value);
        }
    }
}
