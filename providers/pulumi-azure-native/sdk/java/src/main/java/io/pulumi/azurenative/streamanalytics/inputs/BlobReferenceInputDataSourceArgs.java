// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.azurenative.streamanalytics.inputs.StorageAccountArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes a blob input data source that contains reference data.
 * 
 */
public final class BlobReferenceInputDataSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final BlobReferenceInputDataSourceArgs Empty = new BlobReferenceInputDataSourceArgs();

    /**
     * The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="container")
      private final @Nullable Output<String> container;

    public Output<String> getContainer() {
        return this.container == null ? Output.empty() : this.container;
    }

    /**
     * The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
     * 
     */
    @Import(name="dateFormat")
      private final @Nullable Output<String> dateFormat;

    public Output<String> getDateFormat() {
        return this.dateFormat == null ? Output.empty() : this.dateFormat;
    }

    /**
     * The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
     * 
     */
    @Import(name="pathPattern")
      private final @Nullable Output<String> pathPattern;

    public Output<String> getPathPattern() {
        return this.pathPattern == null ? Output.empty() : this.pathPattern;
    }

    /**
     * A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="storageAccounts")
      private final @Nullable Output<List<StorageAccountArgs>> storageAccounts;

    public Output<List<StorageAccountArgs>> getStorageAccounts() {
        return this.storageAccounts == null ? Output.empty() : this.storageAccounts;
    }

    /**
     * The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
     * 
     */
    @Import(name="timeFormat")
      private final @Nullable Output<String> timeFormat;

    public Output<String> getTimeFormat() {
        return this.timeFormat == null ? Output.empty() : this.timeFormat;
    }

    /**
     * Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
     * Expected value is 'Microsoft.Storage/Blob'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public BlobReferenceInputDataSourceArgs(
        @Nullable Output<String> container,
        @Nullable Output<String> dateFormat,
        @Nullable Output<String> pathPattern,
        @Nullable Output<List<StorageAccountArgs>> storageAccounts,
        @Nullable Output<String> timeFormat,
        Output<String> type) {
        this.container = container;
        this.dateFormat = dateFormat;
        this.pathPattern = pathPattern;
        this.storageAccounts = storageAccounts;
        this.timeFormat = timeFormat;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private BlobReferenceInputDataSourceArgs() {
        this.container = Output.empty();
        this.dateFormat = Output.empty();
        this.pathPattern = Output.empty();
        this.storageAccounts = Output.empty();
        this.timeFormat = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlobReferenceInputDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> container;
        private @Nullable Output<String> dateFormat;
        private @Nullable Output<String> pathPattern;
        private @Nullable Output<List<StorageAccountArgs>> storageAccounts;
        private @Nullable Output<String> timeFormat;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(BlobReferenceInputDataSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.container = defaults.container;
    	      this.dateFormat = defaults.dateFormat;
    	      this.pathPattern = defaults.pathPattern;
    	      this.storageAccounts = defaults.storageAccounts;
    	      this.timeFormat = defaults.timeFormat;
    	      this.type = defaults.type;
        }

        public Builder container(@Nullable Output<String> container) {
            this.container = container;
            return this;
        }
        public Builder container(@Nullable String container) {
            this.container = Output.ofNullable(container);
            return this;
        }
        public Builder dateFormat(@Nullable Output<String> dateFormat) {
            this.dateFormat = dateFormat;
            return this;
        }
        public Builder dateFormat(@Nullable String dateFormat) {
            this.dateFormat = Output.ofNullable(dateFormat);
            return this;
        }
        public Builder pathPattern(@Nullable Output<String> pathPattern) {
            this.pathPattern = pathPattern;
            return this;
        }
        public Builder pathPattern(@Nullable String pathPattern) {
            this.pathPattern = Output.ofNullable(pathPattern);
            return this;
        }
        public Builder storageAccounts(@Nullable Output<List<StorageAccountArgs>> storageAccounts) {
            this.storageAccounts = storageAccounts;
            return this;
        }
        public Builder storageAccounts(@Nullable List<StorageAccountArgs> storageAccounts) {
            this.storageAccounts = Output.ofNullable(storageAccounts);
            return this;
        }
        public Builder storageAccounts(StorageAccountArgs... storageAccounts) {
            return storageAccounts(List.of(storageAccounts));
        }
        public Builder timeFormat(@Nullable Output<String> timeFormat) {
            this.timeFormat = timeFormat;
            return this;
        }
        public Builder timeFormat(@Nullable String timeFormat) {
            this.timeFormat = Output.ofNullable(timeFormat);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public BlobReferenceInputDataSourceArgs build() {
            return new BlobReferenceInputDataSourceArgs(container, dateFormat, pathPattern, storageAccounts, timeFormat, type);
        }
    }
}
