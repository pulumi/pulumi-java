// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The X12 schema reference.
 * 
 */
public final class X12SchemaReferenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final X12SchemaReferenceArgs Empty = new X12SchemaReferenceArgs();

    /**
     * The message id.
     * 
     */
    @Import(name="messageId", required=true)
      private final Output<String> messageId;

    public Output<String> getMessageId() {
        return this.messageId;
    }

    /**
     * The schema name.
     * 
     */
    @Import(name="schemaName", required=true)
      private final Output<String> schemaName;

    public Output<String> getSchemaName() {
        return this.schemaName;
    }

    /**
     * The schema version.
     * 
     */
    @Import(name="schemaVersion", required=true)
      private final Output<String> schemaVersion;

    public Output<String> getSchemaVersion() {
        return this.schemaVersion;
    }

    /**
     * The sender application id.
     * 
     */
    @Import(name="senderApplicationId")
      private final @Nullable Output<String> senderApplicationId;

    public Output<String> getSenderApplicationId() {
        return this.senderApplicationId == null ? Output.empty() : this.senderApplicationId;
    }

    public X12SchemaReferenceArgs(
        Output<String> messageId,
        Output<String> schemaName,
        Output<String> schemaVersion,
        @Nullable Output<String> senderApplicationId) {
        this.messageId = Objects.requireNonNull(messageId, "expected parameter 'messageId' to be non-null");
        this.schemaName = Objects.requireNonNull(schemaName, "expected parameter 'schemaName' to be non-null");
        this.schemaVersion = Objects.requireNonNull(schemaVersion, "expected parameter 'schemaVersion' to be non-null");
        this.senderApplicationId = senderApplicationId;
    }

    private X12SchemaReferenceArgs() {
        this.messageId = Output.empty();
        this.schemaName = Output.empty();
        this.schemaVersion = Output.empty();
        this.senderApplicationId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12SchemaReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> messageId;
        private Output<String> schemaName;
        private Output<String> schemaVersion;
        private @Nullable Output<String> senderApplicationId;

        public Builder() {
    	      // Empty
        }

        public Builder(X12SchemaReferenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.messageId = defaults.messageId;
    	      this.schemaName = defaults.schemaName;
    	      this.schemaVersion = defaults.schemaVersion;
    	      this.senderApplicationId = defaults.senderApplicationId;
        }

        public Builder messageId(Output<String> messageId) {
            this.messageId = Objects.requireNonNull(messageId);
            return this;
        }
        public Builder messageId(String messageId) {
            this.messageId = Output.of(Objects.requireNonNull(messageId));
            return this;
        }
        public Builder schemaName(Output<String> schemaName) {
            this.schemaName = Objects.requireNonNull(schemaName);
            return this;
        }
        public Builder schemaName(String schemaName) {
            this.schemaName = Output.of(Objects.requireNonNull(schemaName));
            return this;
        }
        public Builder schemaVersion(Output<String> schemaVersion) {
            this.schemaVersion = Objects.requireNonNull(schemaVersion);
            return this;
        }
        public Builder schemaVersion(String schemaVersion) {
            this.schemaVersion = Output.of(Objects.requireNonNull(schemaVersion));
            return this;
        }
        public Builder senderApplicationId(@Nullable Output<String> senderApplicationId) {
            this.senderApplicationId = senderApplicationId;
            return this;
        }
        public Builder senderApplicationId(@Nullable String senderApplicationId) {
            this.senderApplicationId = Output.ofNullable(senderApplicationId);
            return this;
        }        public X12SchemaReferenceArgs build() {
            return new X12SchemaReferenceArgs(messageId, schemaName, schemaVersion, senderApplicationId);
        }
    }
}
