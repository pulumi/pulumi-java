// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the properties of an audio overlay.
 * 
 */
public final class AudioOverlayArgs extends io.pulumi.resources.ResourceArgs {

    public static final AudioOverlayArgs Empty = new AudioOverlayArgs();

    /**
     * The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
     * 
     */
    @InputImport(name="audioGainLevel")
    private final @Nullable Input<Double> audioGainLevel;

    public Input<Double> getAudioGainLevel() {
        return this.audioGainLevel == null ? Input.empty() : this.audioGainLevel;
    }

    /**
     * The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
     * 
     */
    @InputImport(name="end")
    private final @Nullable Input<String> end;

    public Input<String> getEnd() {
        return this.end == null ? Input.empty() : this.end;
    }

    /**
     * The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
     * 
     */
    @InputImport(name="fadeInDuration")
    private final @Nullable Input<String> fadeInDuration;

    public Input<String> getFadeInDuration() {
        return this.fadeInDuration == null ? Input.empty() : this.fadeInDuration;
    }

    /**
     * The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
     * 
     */
    @InputImport(name="fadeOutDuration")
    private final @Nullable Input<String> fadeOutDuration;

    public Input<String> getFadeOutDuration() {
        return this.fadeOutDuration == null ? Input.empty() : this.fadeOutDuration;
    }

    /**
     * The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
     * 
     */
    @InputImport(name="inputLabel", required=true)
    private final Input<String> inputLabel;

    public Input<String> getInputLabel() {
        return this.inputLabel;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.Media.AudioOverlay'.
     * 
     */
    @InputImport(name="odataType", required=true)
    private final Input<String> odataType;

    public Input<String> getOdataType() {
        return this.odataType;
    }

    /**
     * The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
     * 
     */
    @InputImport(name="start")
    private final @Nullable Input<String> start;

    public Input<String> getStart() {
        return this.start == null ? Input.empty() : this.start;
    }

    public AudioOverlayArgs(
        @Nullable Input<Double> audioGainLevel,
        @Nullable Input<String> end,
        @Nullable Input<String> fadeInDuration,
        @Nullable Input<String> fadeOutDuration,
        Input<String> inputLabel,
        Input<String> odataType,
        @Nullable Input<String> start) {
        this.audioGainLevel = audioGainLevel;
        this.end = end;
        this.fadeInDuration = fadeInDuration;
        this.fadeOutDuration = fadeOutDuration;
        this.inputLabel = Objects.requireNonNull(inputLabel, "expected parameter 'inputLabel' to be non-null");
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.start = start;
    }

    private AudioOverlayArgs() {
        this.audioGainLevel = Input.empty();
        this.end = Input.empty();
        this.fadeInDuration = Input.empty();
        this.fadeOutDuration = Input.empty();
        this.inputLabel = Input.empty();
        this.odataType = Input.empty();
        this.start = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AudioOverlayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Double> audioGainLevel;
        private @Nullable Input<String> end;
        private @Nullable Input<String> fadeInDuration;
        private @Nullable Input<String> fadeOutDuration;
        private Input<String> inputLabel;
        private Input<String> odataType;
        private @Nullable Input<String> start;

        public Builder() {
    	      // Empty
        }

        public Builder(AudioOverlayArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audioGainLevel = defaults.audioGainLevel;
    	      this.end = defaults.end;
    	      this.fadeInDuration = defaults.fadeInDuration;
    	      this.fadeOutDuration = defaults.fadeOutDuration;
    	      this.inputLabel = defaults.inputLabel;
    	      this.odataType = defaults.odataType;
    	      this.start = defaults.start;
        }

        public Builder setAudioGainLevel(@Nullable Input<Double> audioGainLevel) {
            this.audioGainLevel = audioGainLevel;
            return this;
        }

        public Builder setAudioGainLevel(@Nullable Double audioGainLevel) {
            this.audioGainLevel = Input.ofNullable(audioGainLevel);
            return this;
        }

        public Builder setEnd(@Nullable Input<String> end) {
            this.end = end;
            return this;
        }

        public Builder setEnd(@Nullable String end) {
            this.end = Input.ofNullable(end);
            return this;
        }

        public Builder setFadeInDuration(@Nullable Input<String> fadeInDuration) {
            this.fadeInDuration = fadeInDuration;
            return this;
        }

        public Builder setFadeInDuration(@Nullable String fadeInDuration) {
            this.fadeInDuration = Input.ofNullable(fadeInDuration);
            return this;
        }

        public Builder setFadeOutDuration(@Nullable Input<String> fadeOutDuration) {
            this.fadeOutDuration = fadeOutDuration;
            return this;
        }

        public Builder setFadeOutDuration(@Nullable String fadeOutDuration) {
            this.fadeOutDuration = Input.ofNullable(fadeOutDuration);
            return this;
        }

        public Builder setInputLabel(Input<String> inputLabel) {
            this.inputLabel = Objects.requireNonNull(inputLabel);
            return this;
        }

        public Builder setInputLabel(String inputLabel) {
            this.inputLabel = Input.of(Objects.requireNonNull(inputLabel));
            return this;
        }

        public Builder setOdataType(Input<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }

        public Builder setOdataType(String odataType) {
            this.odataType = Input.of(Objects.requireNonNull(odataType));
            return this;
        }

        public Builder setStart(@Nullable Input<String> start) {
            this.start = start;
            return this;
        }

        public Builder setStart(@Nullable String start) {
            this.start = Input.ofNullable(start);
            return this;
        }

        public AudioOverlayArgs build() {
            return new AudioOverlayArgs(audioGainLevel, end, fadeInDuration, fadeOutDuration, inputLabel, odataType, start);
        }
    }
}
