// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Database specific information for SQL to Azure SQL DB sync migration task inputs
 * 
 */
public final class MigrateSqlServerSqlDbSyncDatabaseInputArgs extends io.pulumi.resources.ResourceArgs {

    public static final MigrateSqlServerSqlDbSyncDatabaseInputArgs Empty = new MigrateSqlServerSqlDbSyncDatabaseInputArgs();

    /**
     * Unique identifier for database
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * Migration settings which tune the migration behavior
     * 
     */
    @Import(name="migrationSetting")
      private final @Nullable Output<Map<String,String>> migrationSetting;

    public Output<Map<String,String>> getMigrationSetting() {
        return this.migrationSetting == null ? Output.empty() : this.migrationSetting;
    }

    /**
     * Name of database
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Schema name to be migrated
     * 
     */
    @Import(name="schemaName")
      private final @Nullable Output<String> schemaName;

    public Output<String> getSchemaName() {
        return this.schemaName == null ? Output.empty() : this.schemaName;
    }

    /**
     * Source settings to tune source endpoint migration behavior
     * 
     */
    @Import(name="sourceSetting")
      private final @Nullable Output<Map<String,String>> sourceSetting;

    public Output<Map<String,String>> getSourceSetting() {
        return this.sourceSetting == null ? Output.empty() : this.sourceSetting;
    }

    /**
     * Mapping of source to target tables
     * 
     */
    @Import(name="tableMap")
      private final @Nullable Output<Map<String,String>> tableMap;

    public Output<Map<String,String>> getTableMap() {
        return this.tableMap == null ? Output.empty() : this.tableMap;
    }

    /**
     * Target database name
     * 
     */
    @Import(name="targetDatabaseName")
      private final @Nullable Output<String> targetDatabaseName;

    public Output<String> getTargetDatabaseName() {
        return this.targetDatabaseName == null ? Output.empty() : this.targetDatabaseName;
    }

    /**
     * Target settings to tune target endpoint migration behavior
     * 
     */
    @Import(name="targetSetting")
      private final @Nullable Output<Map<String,String>> targetSetting;

    public Output<Map<String,String>> getTargetSetting() {
        return this.targetSetting == null ? Output.empty() : this.targetSetting;
    }

    public MigrateSqlServerSqlDbSyncDatabaseInputArgs(
        @Nullable Output<String> id,
        @Nullable Output<Map<String,String>> migrationSetting,
        @Nullable Output<String> name,
        @Nullable Output<String> schemaName,
        @Nullable Output<Map<String,String>> sourceSetting,
        @Nullable Output<Map<String,String>> tableMap,
        @Nullable Output<String> targetDatabaseName,
        @Nullable Output<Map<String,String>> targetSetting) {
        this.id = id;
        this.migrationSetting = migrationSetting;
        this.name = name;
        this.schemaName = schemaName;
        this.sourceSetting = sourceSetting;
        this.tableMap = tableMap;
        this.targetDatabaseName = targetDatabaseName;
        this.targetSetting = targetSetting;
    }

    private MigrateSqlServerSqlDbSyncDatabaseInputArgs() {
        this.id = Output.empty();
        this.migrationSetting = Output.empty();
        this.name = Output.empty();
        this.schemaName = Output.empty();
        this.sourceSetting = Output.empty();
        this.tableMap = Output.empty();
        this.targetDatabaseName = Output.empty();
        this.targetSetting = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlDbSyncDatabaseInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> id;
        private @Nullable Output<Map<String,String>> migrationSetting;
        private @Nullable Output<String> name;
        private @Nullable Output<String> schemaName;
        private @Nullable Output<Map<String,String>> sourceSetting;
        private @Nullable Output<Map<String,String>> tableMap;
        private @Nullable Output<String> targetDatabaseName;
        private @Nullable Output<Map<String,String>> targetSetting;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrateSqlServerSqlDbSyncDatabaseInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.migrationSetting = defaults.migrationSetting;
    	      this.name = defaults.name;
    	      this.schemaName = defaults.schemaName;
    	      this.sourceSetting = defaults.sourceSetting;
    	      this.tableMap = defaults.tableMap;
    	      this.targetDatabaseName = defaults.targetDatabaseName;
    	      this.targetSetting = defaults.targetSetting;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }

        public Builder migrationSetting(@Nullable Output<Map<String,String>> migrationSetting) {
            this.migrationSetting = migrationSetting;
            return this;
        }

        public Builder migrationSetting(@Nullable Map<String,String> migrationSetting) {
            this.migrationSetting = Output.ofNullable(migrationSetting);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            this.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(@Nullable String schemaName) {
            this.schemaName = Output.ofNullable(schemaName);
            return this;
        }

        public Builder sourceSetting(@Nullable Output<Map<String,String>> sourceSetting) {
            this.sourceSetting = sourceSetting;
            return this;
        }

        public Builder sourceSetting(@Nullable Map<String,String> sourceSetting) {
            this.sourceSetting = Output.ofNullable(sourceSetting);
            return this;
        }

        public Builder tableMap(@Nullable Output<Map<String,String>> tableMap) {
            this.tableMap = tableMap;
            return this;
        }

        public Builder tableMap(@Nullable Map<String,String> tableMap) {
            this.tableMap = Output.ofNullable(tableMap);
            return this;
        }

        public Builder targetDatabaseName(@Nullable Output<String> targetDatabaseName) {
            this.targetDatabaseName = targetDatabaseName;
            return this;
        }

        public Builder targetDatabaseName(@Nullable String targetDatabaseName) {
            this.targetDatabaseName = Output.ofNullable(targetDatabaseName);
            return this;
        }

        public Builder targetSetting(@Nullable Output<Map<String,String>> targetSetting) {
            this.targetSetting = targetSetting;
            return this;
        }

        public Builder targetSetting(@Nullable Map<String,String> targetSetting) {
            this.targetSetting = Output.ofNullable(targetSetting);
            return this;
        }
        public MigrateSqlServerSqlDbSyncDatabaseInputArgs build() {
            return new MigrateSqlServerSqlDbSyncDatabaseInputArgs(id, migrationSetting, name, schemaName, sourceSetting, tableMap, targetDatabaseName, targetSetting);
        }
    }
}
