// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.healthcareapis;

import io.pulumi.azurenative.healthcareapis.enums.IotIdentityResolutionType;
import io.pulumi.azurenative.healthcareapis.inputs.IotMappingPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IotConnectorFhirDestinationArgs extends io.pulumi.resources.ResourceArgs {

    public static final IotConnectorFhirDestinationArgs Empty = new IotConnectorFhirDestinationArgs();

    /**
     * The name of IoT Connector FHIR destination resource.
     * 
     */
    @Import(name="fhirDestinationName")
      private final @Nullable Output<String> fhirDestinationName;

    public Output<String> getFhirDestinationName() {
        return this.fhirDestinationName == null ? Codegen.empty() : this.fhirDestinationName;
    }

    /**
     * FHIR Mappings
     * 
     */
    @Import(name="fhirMapping", required=true)
      private final Output<IotMappingPropertiesArgs> fhirMapping;

    public Output<IotMappingPropertiesArgs> getFhirMapping() {
        return this.fhirMapping;
    }

    /**
     * Fully qualified resource id of the FHIR service to connect to.
     * 
     */
    @Import(name="fhirServiceResourceId", required=true)
      private final Output<String> fhirServiceResourceId;

    public Output<String> getFhirServiceResourceId() {
        return this.fhirServiceResourceId;
    }

    /**
     * The name of IoT Connector resource.
     * 
     */
    @Import(name="iotConnectorName", required=true)
      private final Output<String> iotConnectorName;

    public Output<String> getIotConnectorName() {
        return this.iotConnectorName;
    }

    /**
     * The resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the resource group that contains the service instance.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Determines how resource identity is resolved on the destination.
     * 
     */
    @Import(name="resourceIdentityResolutionType", required=true)
      private final Output<Either<String,IotIdentityResolutionType>> resourceIdentityResolutionType;

    public Output<Either<String,IotIdentityResolutionType>> getResourceIdentityResolutionType() {
        return this.resourceIdentityResolutionType;
    }

    /**
     * The name of workspace resource.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public IotConnectorFhirDestinationArgs(
        @Nullable Output<String> fhirDestinationName,
        Output<IotMappingPropertiesArgs> fhirMapping,
        Output<String> fhirServiceResourceId,
        Output<String> iotConnectorName,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        Output<Either<String,IotIdentityResolutionType>> resourceIdentityResolutionType,
        Output<String> workspaceName) {
        this.fhirDestinationName = fhirDestinationName;
        this.fhirMapping = Objects.requireNonNull(fhirMapping, "expected parameter 'fhirMapping' to be non-null");
        this.fhirServiceResourceId = Objects.requireNonNull(fhirServiceResourceId, "expected parameter 'fhirServiceResourceId' to be non-null");
        this.iotConnectorName = Objects.requireNonNull(iotConnectorName, "expected parameter 'iotConnectorName' to be non-null");
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceIdentityResolutionType = Objects.requireNonNull(resourceIdentityResolutionType, "expected parameter 'resourceIdentityResolutionType' to be non-null");
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private IotConnectorFhirDestinationArgs() {
        this.fhirDestinationName = Codegen.empty();
        this.fhirMapping = Codegen.empty();
        this.fhirServiceResourceId = Codegen.empty();
        this.iotConnectorName = Codegen.empty();
        this.location = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.resourceIdentityResolutionType = Codegen.empty();
        this.workspaceName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IotConnectorFhirDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> fhirDestinationName;
        private Output<IotMappingPropertiesArgs> fhirMapping;
        private Output<String> fhirServiceResourceId;
        private Output<String> iotConnectorName;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private Output<Either<String,IotIdentityResolutionType>> resourceIdentityResolutionType;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(IotConnectorFhirDestinationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fhirDestinationName = defaults.fhirDestinationName;
    	      this.fhirMapping = defaults.fhirMapping;
    	      this.fhirServiceResourceId = defaults.fhirServiceResourceId;
    	      this.iotConnectorName = defaults.iotConnectorName;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceIdentityResolutionType = defaults.resourceIdentityResolutionType;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder fhirDestinationName(@Nullable Output<String> fhirDestinationName) {
            this.fhirDestinationName = fhirDestinationName;
            return this;
        }
        public Builder fhirDestinationName(@Nullable String fhirDestinationName) {
            this.fhirDestinationName = Codegen.ofNullable(fhirDestinationName);
            return this;
        }
        public Builder fhirMapping(Output<IotMappingPropertiesArgs> fhirMapping) {
            this.fhirMapping = Objects.requireNonNull(fhirMapping);
            return this;
        }
        public Builder fhirMapping(IotMappingPropertiesArgs fhirMapping) {
            this.fhirMapping = Output.of(Objects.requireNonNull(fhirMapping));
            return this;
        }
        public Builder fhirServiceResourceId(Output<String> fhirServiceResourceId) {
            this.fhirServiceResourceId = Objects.requireNonNull(fhirServiceResourceId);
            return this;
        }
        public Builder fhirServiceResourceId(String fhirServiceResourceId) {
            this.fhirServiceResourceId = Output.of(Objects.requireNonNull(fhirServiceResourceId));
            return this;
        }
        public Builder iotConnectorName(Output<String> iotConnectorName) {
            this.iotConnectorName = Objects.requireNonNull(iotConnectorName);
            return this;
        }
        public Builder iotConnectorName(String iotConnectorName) {
            this.iotConnectorName = Output.of(Objects.requireNonNull(iotConnectorName));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder resourceIdentityResolutionType(Output<Either<String,IotIdentityResolutionType>> resourceIdentityResolutionType) {
            this.resourceIdentityResolutionType = Objects.requireNonNull(resourceIdentityResolutionType);
            return this;
        }
        public Builder resourceIdentityResolutionType(Either<String,IotIdentityResolutionType> resourceIdentityResolutionType) {
            this.resourceIdentityResolutionType = Output.of(Objects.requireNonNull(resourceIdentityResolutionType));
            return this;
        }
        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }
        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }        public IotConnectorFhirDestinationArgs build() {
            return new IotConnectorFhirDestinationArgs(fhirDestinationName, fhirMapping, fhirServiceResourceId, iotConnectorName, location, resourceGroupName, resourceIdentityResolutionType, workspaceName);
        }
    }
}
