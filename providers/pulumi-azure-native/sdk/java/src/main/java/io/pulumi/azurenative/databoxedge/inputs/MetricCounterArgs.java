// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databoxedge.inputs;

import io.pulumi.azurenative.databoxedge.inputs.MetricDimensionArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The metric counter
 * 
 */
public final class MetricCounterArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricCounterArgs Empty = new MetricCounterArgs();

    /**
     * The additional dimensions to be added to metric.
     * 
     */
    @InputImport(name="additionalDimensions")
    private final @Nullable Input<List<MetricDimensionArgs>> additionalDimensions;

    public Input<List<MetricDimensionArgs>> getAdditionalDimensions() {
        return this.additionalDimensions == null ? Input.empty() : this.additionalDimensions;
    }

    /**
     * The dimension filter.
     * 
     */
    @InputImport(name="dimensionFilter")
    private final @Nullable Input<List<MetricDimensionArgs>> dimensionFilter;

    public Input<List<MetricDimensionArgs>> getDimensionFilter() {
        return this.dimensionFilter == null ? Input.empty() : this.dimensionFilter;
    }

    /**
     * The instance from which counter should be collected.
     * 
     */
    @InputImport(name="instance")
    private final @Nullable Input<String> instance;

    public Input<String> getInstance() {
        return this.instance == null ? Input.empty() : this.instance;
    }

    /**
     * The counter name.
     * 
     */
    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    public MetricCounterArgs(
        @Nullable Input<List<MetricDimensionArgs>> additionalDimensions,
        @Nullable Input<List<MetricDimensionArgs>> dimensionFilter,
        @Nullable Input<String> instance,
        Input<String> name) {
        this.additionalDimensions = additionalDimensions;
        this.dimensionFilter = dimensionFilter;
        this.instance = instance;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
    }

    private MetricCounterArgs() {
        this.additionalDimensions = Input.empty();
        this.dimensionFilter = Input.empty();
        this.instance = Input.empty();
        this.name = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricCounterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<MetricDimensionArgs>> additionalDimensions;
        private @Nullable Input<List<MetricDimensionArgs>> dimensionFilter;
        private @Nullable Input<String> instance;
        private Input<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricCounterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDimensions = defaults.additionalDimensions;
    	      this.dimensionFilter = defaults.dimensionFilter;
    	      this.instance = defaults.instance;
    	      this.name = defaults.name;
        }

        public Builder setAdditionalDimensions(@Nullable Input<List<MetricDimensionArgs>> additionalDimensions) {
            this.additionalDimensions = additionalDimensions;
            return this;
        }

        public Builder setAdditionalDimensions(@Nullable List<MetricDimensionArgs> additionalDimensions) {
            this.additionalDimensions = Input.ofNullable(additionalDimensions);
            return this;
        }

        public Builder setDimensionFilter(@Nullable Input<List<MetricDimensionArgs>> dimensionFilter) {
            this.dimensionFilter = dimensionFilter;
            return this;
        }

        public Builder setDimensionFilter(@Nullable List<MetricDimensionArgs> dimensionFilter) {
            this.dimensionFilter = Input.ofNullable(dimensionFilter);
            return this;
        }

        public Builder setInstance(@Nullable Input<String> instance) {
            this.instance = instance;
            return this;
        }

        public Builder setInstance(@Nullable String instance) {
            this.instance = Input.ofNullable(instance);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public MetricCounterArgs build() {
            return new MetricCounterArgs(additionalDimensions, dimensionFilter, instance, name);
        }
    }
}
