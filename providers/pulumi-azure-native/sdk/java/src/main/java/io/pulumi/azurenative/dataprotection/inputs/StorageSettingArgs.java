// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.dataprotection.inputs;

import io.pulumi.azurenative.dataprotection.enums.StorageSettingStoreTypes;
import io.pulumi.azurenative.dataprotection.enums.StorageSettingTypes;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Storage setting
 * 
 */
public final class StorageSettingArgs extends io.pulumi.resources.ResourceArgs {

    public static final StorageSettingArgs Empty = new StorageSettingArgs();

    /**
     * Gets or sets the type of the datastore.
     * 
     */
    @Import(name="datastoreType")
      private final @Nullable Output<Either<String,StorageSettingStoreTypes>> datastoreType;

    public Output<Either<String,StorageSettingStoreTypes>> getDatastoreType() {
        return this.datastoreType == null ? Output.empty() : this.datastoreType;
    }

    /**
     * Gets or sets the type.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<Either<String,StorageSettingTypes>> type;

    public Output<Either<String,StorageSettingTypes>> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public StorageSettingArgs(
        @Nullable Output<Either<String,StorageSettingStoreTypes>> datastoreType,
        @Nullable Output<Either<String,StorageSettingTypes>> type) {
        this.datastoreType = datastoreType;
        this.type = type;
    }

    private StorageSettingArgs() {
        this.datastoreType = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StorageSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,StorageSettingStoreTypes>> datastoreType;
        private @Nullable Output<Either<String,StorageSettingTypes>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(StorageSettingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datastoreType = defaults.datastoreType;
    	      this.type = defaults.type;
        }

        public Builder datastoreType(@Nullable Output<Either<String,StorageSettingStoreTypes>> datastoreType) {
            this.datastoreType = datastoreType;
            return this;
        }

        public Builder datastoreType(@Nullable Either<String,StorageSettingStoreTypes> datastoreType) {
            this.datastoreType = Output.ofNullable(datastoreType);
            return this;
        }

        public Builder type(@Nullable Output<Either<String,StorageSettingTypes>> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable Either<String,StorageSettingTypes> type) {
            this.type = Output.ofNullable(type);
            return this;
        }
        public StorageSettingArgs build() {
            return new StorageSettingArgs(datastoreType, type);
        }
    }
}
