// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.solutions;

import io.pulumi.azurenative.solutions.enums.ApplicationLockLevel;
import io.pulumi.azurenative.solutions.inputs.ApplicationAuthorizationArgs;
import io.pulumi.azurenative.solutions.inputs.ApplicationDefinitionArtifactArgs;
import io.pulumi.azurenative.solutions.inputs.ApplicationDeploymentPolicyArgs;
import io.pulumi.azurenative.solutions.inputs.ApplicationManagementPolicyArgs;
import io.pulumi.azurenative.solutions.inputs.ApplicationNotificationPolicyArgs;
import io.pulumi.azurenative.solutions.inputs.ApplicationPackageLockingPolicyDefinitionArgs;
import io.pulumi.azurenative.solutions.inputs.ApplicationPolicyArgs;
import io.pulumi.azurenative.solutions.inputs.SkuArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationDefinitionArgs Empty = new ApplicationDefinitionArgs();

    /**
     * The name of the managed application definition.
     * 
     */
    @InputImport(name="applicationDefinitionName")
    private final @Nullable Input<String> applicationDefinitionName;

    public Input<String> getApplicationDefinitionName() {
        return this.applicationDefinitionName == null ? Input.empty() : this.applicationDefinitionName;
    }

    /**
     * The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
     * 
     */
    @InputImport(name="artifacts")
    private final @Nullable Input<List<ApplicationDefinitionArtifactArgs>> artifacts;

    public Input<List<ApplicationDefinitionArtifactArgs>> getArtifacts() {
        return this.artifacts == null ? Input.empty() : this.artifacts;
    }

    /**
     * The managed application provider authorizations.
     * 
     */
    @InputImport(name="authorizations")
    private final @Nullable Input<List<ApplicationAuthorizationArgs>> authorizations;

    public Input<List<ApplicationAuthorizationArgs>> getAuthorizations() {
        return this.authorizations == null ? Input.empty() : this.authorizations;
    }

    /**
     * The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
     * 
     */
    @InputImport(name="createUiDefinition")
    private final @Nullable Input<Object> createUiDefinition;

    public Input<Object> getCreateUiDefinition() {
        return this.createUiDefinition == null ? Input.empty() : this.createUiDefinition;
    }

    /**
     * The managed application deployment policy.
     * 
     */
    @InputImport(name="deploymentPolicy")
    private final @Nullable Input<ApplicationDeploymentPolicyArgs> deploymentPolicy;

    public Input<ApplicationDeploymentPolicyArgs> getDeploymentPolicy() {
        return this.deploymentPolicy == null ? Input.empty() : this.deploymentPolicy;
    }

    /**
     * The managed application definition description.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The managed application definition display name.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * A value indicating whether the package is enabled or not.
     * 
     */
    @InputImport(name="isEnabled")
    private final @Nullable Input<Boolean> isEnabled;

    public Input<Boolean> getIsEnabled() {
        return this.isEnabled == null ? Input.empty() : this.isEnabled;
    }

    /**
     * Resource location
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The managed application lock level.
     * 
     */
    @InputImport(name="lockLevel", required=true)
    private final Input<ApplicationLockLevel> lockLevel;

    public Input<ApplicationLockLevel> getLockLevel() {
        return this.lockLevel;
    }

    /**
     * The managed application locking policy.
     * 
     */
    @InputImport(name="lockingPolicy")
    private final @Nullable Input<ApplicationPackageLockingPolicyDefinitionArgs> lockingPolicy;

    public Input<ApplicationPackageLockingPolicyDefinitionArgs> getLockingPolicy() {
        return this.lockingPolicy == null ? Input.empty() : this.lockingPolicy;
    }

    /**
     * The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
     * 
     */
    @InputImport(name="mainTemplate")
    private final @Nullable Input<Object> mainTemplate;

    public Input<Object> getMainTemplate() {
        return this.mainTemplate == null ? Input.empty() : this.mainTemplate;
    }

    /**
     * ID of the resource that manages this resource.
     * 
     */
    @InputImport(name="managedBy")
    private final @Nullable Input<String> managedBy;

    public Input<String> getManagedBy() {
        return this.managedBy == null ? Input.empty() : this.managedBy;
    }

    /**
     * The managed application management policy that determines publisher's access to the managed resource group.
     * 
     */
    @InputImport(name="managementPolicy")
    private final @Nullable Input<ApplicationManagementPolicyArgs> managementPolicy;

    public Input<ApplicationManagementPolicyArgs> getManagementPolicy() {
        return this.managementPolicy == null ? Input.empty() : this.managementPolicy;
    }

    /**
     * The managed application notification policy.
     * 
     */
    @InputImport(name="notificationPolicy")
    private final @Nullable Input<ApplicationNotificationPolicyArgs> notificationPolicy;

    public Input<ApplicationNotificationPolicyArgs> getNotificationPolicy() {
        return this.notificationPolicy == null ? Input.empty() : this.notificationPolicy;
    }

    /**
     * The managed application definition package file Uri. Use this element
     * 
     */
    @InputImport(name="packageFileUri")
    private final @Nullable Input<String> packageFileUri;

    public Input<String> getPackageFileUri() {
        return this.packageFileUri == null ? Input.empty() : this.packageFileUri;
    }

    /**
     * The managed application provider policies.
     * 
     */
    @InputImport(name="policies")
    private final @Nullable Input<List<ApplicationPolicyArgs>> policies;

    public Input<List<ApplicationPolicyArgs>> getPolicies() {
        return this.policies == null ? Input.empty() : this.policies;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SKU of the resource.
     * 
     */
    @InputImport(name="sku")
    private final @Nullable Input<SkuArgs> sku;

    public Input<SkuArgs> getSku() {
        return this.sku == null ? Input.empty() : this.sku;
    }

    /**
     * Resource tags
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ApplicationDefinitionArgs(
        @Nullable Input<String> applicationDefinitionName,
        @Nullable Input<List<ApplicationDefinitionArtifactArgs>> artifacts,
        @Nullable Input<List<ApplicationAuthorizationArgs>> authorizations,
        @Nullable Input<Object> createUiDefinition,
        @Nullable Input<ApplicationDeploymentPolicyArgs> deploymentPolicy,
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        @Nullable Input<Boolean> isEnabled,
        @Nullable Input<String> location,
        Input<ApplicationLockLevel> lockLevel,
        @Nullable Input<ApplicationPackageLockingPolicyDefinitionArgs> lockingPolicy,
        @Nullable Input<Object> mainTemplate,
        @Nullable Input<String> managedBy,
        @Nullable Input<ApplicationManagementPolicyArgs> managementPolicy,
        @Nullable Input<ApplicationNotificationPolicyArgs> notificationPolicy,
        @Nullable Input<String> packageFileUri,
        @Nullable Input<List<ApplicationPolicyArgs>> policies,
        Input<String> resourceGroupName,
        @Nullable Input<SkuArgs> sku,
        @Nullable Input<Map<String,String>> tags) {
        this.applicationDefinitionName = applicationDefinitionName;
        this.artifacts = artifacts;
        this.authorizations = authorizations;
        this.createUiDefinition = createUiDefinition;
        this.deploymentPolicy = deploymentPolicy;
        this.description = description;
        this.displayName = displayName;
        this.isEnabled = isEnabled;
        this.location = location;
        this.lockLevel = Objects.requireNonNull(lockLevel, "expected parameter 'lockLevel' to be non-null");
        this.lockingPolicy = lockingPolicy;
        this.mainTemplate = mainTemplate;
        this.managedBy = managedBy;
        this.managementPolicy = managementPolicy;
        this.notificationPolicy = notificationPolicy;
        this.packageFileUri = packageFileUri;
        this.policies = policies;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.tags = tags;
    }

    private ApplicationDefinitionArgs() {
        this.applicationDefinitionName = Input.empty();
        this.artifacts = Input.empty();
        this.authorizations = Input.empty();
        this.createUiDefinition = Input.empty();
        this.deploymentPolicy = Input.empty();
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.isEnabled = Input.empty();
        this.location = Input.empty();
        this.lockLevel = Input.empty();
        this.lockingPolicy = Input.empty();
        this.mainTemplate = Input.empty();
        this.managedBy = Input.empty();
        this.managementPolicy = Input.empty();
        this.notificationPolicy = Input.empty();
        this.packageFileUri = Input.empty();
        this.policies = Input.empty();
        this.resourceGroupName = Input.empty();
        this.sku = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> applicationDefinitionName;
        private @Nullable Input<List<ApplicationDefinitionArtifactArgs>> artifacts;
        private @Nullable Input<List<ApplicationAuthorizationArgs>> authorizations;
        private @Nullable Input<Object> createUiDefinition;
        private @Nullable Input<ApplicationDeploymentPolicyArgs> deploymentPolicy;
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private @Nullable Input<Boolean> isEnabled;
        private @Nullable Input<String> location;
        private Input<ApplicationLockLevel> lockLevel;
        private @Nullable Input<ApplicationPackageLockingPolicyDefinitionArgs> lockingPolicy;
        private @Nullable Input<Object> mainTemplate;
        private @Nullable Input<String> managedBy;
        private @Nullable Input<ApplicationManagementPolicyArgs> managementPolicy;
        private @Nullable Input<ApplicationNotificationPolicyArgs> notificationPolicy;
        private @Nullable Input<String> packageFileUri;
        private @Nullable Input<List<ApplicationPolicyArgs>> policies;
        private Input<String> resourceGroupName;
        private @Nullable Input<SkuArgs> sku;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationDefinitionName = defaults.applicationDefinitionName;
    	      this.artifacts = defaults.artifacts;
    	      this.authorizations = defaults.authorizations;
    	      this.createUiDefinition = defaults.createUiDefinition;
    	      this.deploymentPolicy = defaults.deploymentPolicy;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.isEnabled = defaults.isEnabled;
    	      this.location = defaults.location;
    	      this.lockLevel = defaults.lockLevel;
    	      this.lockingPolicy = defaults.lockingPolicy;
    	      this.mainTemplate = defaults.mainTemplate;
    	      this.managedBy = defaults.managedBy;
    	      this.managementPolicy = defaults.managementPolicy;
    	      this.notificationPolicy = defaults.notificationPolicy;
    	      this.packageFileUri = defaults.packageFileUri;
    	      this.policies = defaults.policies;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder setApplicationDefinitionName(@Nullable Input<String> applicationDefinitionName) {
            this.applicationDefinitionName = applicationDefinitionName;
            return this;
        }

        public Builder setApplicationDefinitionName(@Nullable String applicationDefinitionName) {
            this.applicationDefinitionName = Input.ofNullable(applicationDefinitionName);
            return this;
        }

        public Builder setArtifacts(@Nullable Input<List<ApplicationDefinitionArtifactArgs>> artifacts) {
            this.artifacts = artifacts;
            return this;
        }

        public Builder setArtifacts(@Nullable List<ApplicationDefinitionArtifactArgs> artifacts) {
            this.artifacts = Input.ofNullable(artifacts);
            return this;
        }

        public Builder setAuthorizations(@Nullable Input<List<ApplicationAuthorizationArgs>> authorizations) {
            this.authorizations = authorizations;
            return this;
        }

        public Builder setAuthorizations(@Nullable List<ApplicationAuthorizationArgs> authorizations) {
            this.authorizations = Input.ofNullable(authorizations);
            return this;
        }

        public Builder setCreateUiDefinition(@Nullable Input<Object> createUiDefinition) {
            this.createUiDefinition = createUiDefinition;
            return this;
        }

        public Builder setCreateUiDefinition(@Nullable Object createUiDefinition) {
            this.createUiDefinition = Input.ofNullable(createUiDefinition);
            return this;
        }

        public Builder setDeploymentPolicy(@Nullable Input<ApplicationDeploymentPolicyArgs> deploymentPolicy) {
            this.deploymentPolicy = deploymentPolicy;
            return this;
        }

        public Builder setDeploymentPolicy(@Nullable ApplicationDeploymentPolicyArgs deploymentPolicy) {
            this.deploymentPolicy = Input.ofNullable(deploymentPolicy);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setIsEnabled(@Nullable Input<Boolean> isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }

        public Builder setIsEnabled(@Nullable Boolean isEnabled) {
            this.isEnabled = Input.ofNullable(isEnabled);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setLockLevel(Input<ApplicationLockLevel> lockLevel) {
            this.lockLevel = Objects.requireNonNull(lockLevel);
            return this;
        }

        public Builder setLockLevel(ApplicationLockLevel lockLevel) {
            this.lockLevel = Input.of(Objects.requireNonNull(lockLevel));
            return this;
        }

        public Builder setLockingPolicy(@Nullable Input<ApplicationPackageLockingPolicyDefinitionArgs> lockingPolicy) {
            this.lockingPolicy = lockingPolicy;
            return this;
        }

        public Builder setLockingPolicy(@Nullable ApplicationPackageLockingPolicyDefinitionArgs lockingPolicy) {
            this.lockingPolicy = Input.ofNullable(lockingPolicy);
            return this;
        }

        public Builder setMainTemplate(@Nullable Input<Object> mainTemplate) {
            this.mainTemplate = mainTemplate;
            return this;
        }

        public Builder setMainTemplate(@Nullable Object mainTemplate) {
            this.mainTemplate = Input.ofNullable(mainTemplate);
            return this;
        }

        public Builder setManagedBy(@Nullable Input<String> managedBy) {
            this.managedBy = managedBy;
            return this;
        }

        public Builder setManagedBy(@Nullable String managedBy) {
            this.managedBy = Input.ofNullable(managedBy);
            return this;
        }

        public Builder setManagementPolicy(@Nullable Input<ApplicationManagementPolicyArgs> managementPolicy) {
            this.managementPolicy = managementPolicy;
            return this;
        }

        public Builder setManagementPolicy(@Nullable ApplicationManagementPolicyArgs managementPolicy) {
            this.managementPolicy = Input.ofNullable(managementPolicy);
            return this;
        }

        public Builder setNotificationPolicy(@Nullable Input<ApplicationNotificationPolicyArgs> notificationPolicy) {
            this.notificationPolicy = notificationPolicy;
            return this;
        }

        public Builder setNotificationPolicy(@Nullable ApplicationNotificationPolicyArgs notificationPolicy) {
            this.notificationPolicy = Input.ofNullable(notificationPolicy);
            return this;
        }

        public Builder setPackageFileUri(@Nullable Input<String> packageFileUri) {
            this.packageFileUri = packageFileUri;
            return this;
        }

        public Builder setPackageFileUri(@Nullable String packageFileUri) {
            this.packageFileUri = Input.ofNullable(packageFileUri);
            return this;
        }

        public Builder setPolicies(@Nullable Input<List<ApplicationPolicyArgs>> policies) {
            this.policies = policies;
            return this;
        }

        public Builder setPolicies(@Nullable List<ApplicationPolicyArgs> policies) {
            this.policies = Input.ofNullable(policies);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSku(@Nullable Input<SkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder setSku(@Nullable SkuArgs sku) {
            this.sku = Input.ofNullable(sku);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public ApplicationDefinitionArgs build() {
            return new ApplicationDefinitionArgs(applicationDefinitionName, artifacts, authorizations, createUiDefinition, deploymentPolicy, description, displayName, isEnabled, location, lockLevel, lockingPolicy, mainTemplate, managedBy, managementPolicy, notificationPolicy, packageFileUri, policies, resourceGroupName, sku, tags);
        }
    }
}
