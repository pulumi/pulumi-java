// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The presentation time range, this is asset related and not recommended for Account Filter.
 * 
 */
public final class PresentationTimeRangeArgs extends io.pulumi.resources.ResourceArgs {

    public static final PresentationTimeRangeArgs Empty = new PresentationTimeRangeArgs();

    /**
     * The absolute end time boundary.
     * 
     */
    @InputImport(name="endTimestamp")
    private final @Nullable Input<Double> endTimestamp;

    public Input<Double> getEndTimestamp() {
        return this.endTimestamp == null ? Input.empty() : this.endTimestamp;
    }

    /**
     * The indicator of forcing existing of end time stamp.
     * 
     */
    @InputImport(name="forceEndTimestamp")
    private final @Nullable Input<Boolean> forceEndTimestamp;

    public Input<Boolean> getForceEndTimestamp() {
        return this.forceEndTimestamp == null ? Input.empty() : this.forceEndTimestamp;
    }

    /**
     * The relative to end right edge.
     * 
     */
    @InputImport(name="liveBackoffDuration")
    private final @Nullable Input<Double> liveBackoffDuration;

    public Input<Double> getLiveBackoffDuration() {
        return this.liveBackoffDuration == null ? Input.empty() : this.liveBackoffDuration;
    }

    /**
     * The relative to end sliding window.
     * 
     */
    @InputImport(name="presentationWindowDuration")
    private final @Nullable Input<Double> presentationWindowDuration;

    public Input<Double> getPresentationWindowDuration() {
        return this.presentationWindowDuration == null ? Input.empty() : this.presentationWindowDuration;
    }

    /**
     * The absolute start time boundary.
     * 
     */
    @InputImport(name="startTimestamp")
    private final @Nullable Input<Double> startTimestamp;

    public Input<Double> getStartTimestamp() {
        return this.startTimestamp == null ? Input.empty() : this.startTimestamp;
    }

    /**
     * The time scale of time stamps.
     * 
     */
    @InputImport(name="timescale")
    private final @Nullable Input<Double> timescale;

    public Input<Double> getTimescale() {
        return this.timescale == null ? Input.empty() : this.timescale;
    }

    public PresentationTimeRangeArgs(
        @Nullable Input<Double> endTimestamp,
        @Nullable Input<Boolean> forceEndTimestamp,
        @Nullable Input<Double> liveBackoffDuration,
        @Nullable Input<Double> presentationWindowDuration,
        @Nullable Input<Double> startTimestamp,
        @Nullable Input<Double> timescale) {
        this.endTimestamp = endTimestamp;
        this.forceEndTimestamp = forceEndTimestamp;
        this.liveBackoffDuration = liveBackoffDuration;
        this.presentationWindowDuration = presentationWindowDuration;
        this.startTimestamp = startTimestamp;
        this.timescale = timescale;
    }

    private PresentationTimeRangeArgs() {
        this.endTimestamp = Input.empty();
        this.forceEndTimestamp = Input.empty();
        this.liveBackoffDuration = Input.empty();
        this.presentationWindowDuration = Input.empty();
        this.startTimestamp = Input.empty();
        this.timescale = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PresentationTimeRangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Double> endTimestamp;
        private @Nullable Input<Boolean> forceEndTimestamp;
        private @Nullable Input<Double> liveBackoffDuration;
        private @Nullable Input<Double> presentationWindowDuration;
        private @Nullable Input<Double> startTimestamp;
        private @Nullable Input<Double> timescale;

        public Builder() {
    	      // Empty
        }

        public Builder(PresentationTimeRangeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTimestamp = defaults.endTimestamp;
    	      this.forceEndTimestamp = defaults.forceEndTimestamp;
    	      this.liveBackoffDuration = defaults.liveBackoffDuration;
    	      this.presentationWindowDuration = defaults.presentationWindowDuration;
    	      this.startTimestamp = defaults.startTimestamp;
    	      this.timescale = defaults.timescale;
        }

        public Builder setEndTimestamp(@Nullable Input<Double> endTimestamp) {
            this.endTimestamp = endTimestamp;
            return this;
        }

        public Builder setEndTimestamp(@Nullable Double endTimestamp) {
            this.endTimestamp = Input.ofNullable(endTimestamp);
            return this;
        }

        public Builder setForceEndTimestamp(@Nullable Input<Boolean> forceEndTimestamp) {
            this.forceEndTimestamp = forceEndTimestamp;
            return this;
        }

        public Builder setForceEndTimestamp(@Nullable Boolean forceEndTimestamp) {
            this.forceEndTimestamp = Input.ofNullable(forceEndTimestamp);
            return this;
        }

        public Builder setLiveBackoffDuration(@Nullable Input<Double> liveBackoffDuration) {
            this.liveBackoffDuration = liveBackoffDuration;
            return this;
        }

        public Builder setLiveBackoffDuration(@Nullable Double liveBackoffDuration) {
            this.liveBackoffDuration = Input.ofNullable(liveBackoffDuration);
            return this;
        }

        public Builder setPresentationWindowDuration(@Nullable Input<Double> presentationWindowDuration) {
            this.presentationWindowDuration = presentationWindowDuration;
            return this;
        }

        public Builder setPresentationWindowDuration(@Nullable Double presentationWindowDuration) {
            this.presentationWindowDuration = Input.ofNullable(presentationWindowDuration);
            return this;
        }

        public Builder setStartTimestamp(@Nullable Input<Double> startTimestamp) {
            this.startTimestamp = startTimestamp;
            return this;
        }

        public Builder setStartTimestamp(@Nullable Double startTimestamp) {
            this.startTimestamp = Input.ofNullable(startTimestamp);
            return this;
        }

        public Builder setTimescale(@Nullable Input<Double> timescale) {
            this.timescale = timescale;
            return this;
        }

        public Builder setTimescale(@Nullable Double timescale) {
            this.timescale = Input.ofNullable(timescale);
            return this;
        }

        public PresentationTimeRangeArgs build() {
            return new PresentationTimeRangeArgs(endTimestamp, forceEndTimestamp, liveBackoffDuration, presentationWindowDuration, startTimestamp, timescale);
        }
    }
}
