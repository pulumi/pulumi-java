// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.EndpointMonitorStatus;
import io.pulumi.azurenative.network.enums.EndpointStatus;
import io.pulumi.azurenative.network.inputs.EndpointPropertiesCustomHeadersArgs;
import io.pulumi.azurenative.network.inputs.EndpointPropertiesSubnetsArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Class representing a Traffic Manager endpoint.
 * 
 */
public final class EndpointArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * List of custom headers.
     * 
     */
    @Import(name="customHeaders")
      private final @Nullable Output<List<EndpointPropertiesCustomHeadersArgs>> customHeaders;

    public Output<List<EndpointPropertiesCustomHeadersArgs>> getCustomHeaders() {
        return this.customHeaders == null ? Codegen.empty() : this.customHeaders;
    }

    /**
     * Specifies the location of the external or nested endpoints when using the 'Performance' traffic routing method.
     * 
     */
    @Import(name="endpointLocation")
      private final @Nullable Output<String> endpointLocation;

    public Output<String> getEndpointLocation() {
        return this.endpointLocation == null ? Codegen.empty() : this.endpointLocation;
    }

    /**
     * The monitoring status of the endpoint.
     * 
     */
    @Import(name="endpointMonitorStatus")
      private final @Nullable Output<Either<String,EndpointMonitorStatus>> endpointMonitorStatus;

    public Output<Either<String,EndpointMonitorStatus>> getEndpointMonitorStatus() {
        return this.endpointMonitorStatus == null ? Codegen.empty() : this.endpointMonitorStatus;
    }

    /**
     * The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
     * 
     */
    @Import(name="endpointStatus")
      private final @Nullable Output<Either<String,EndpointStatus>> endpointStatus;

    public Output<Either<String,EndpointStatus>> getEndpointStatus() {
        return this.endpointStatus == null ? Codegen.empty() : this.endpointStatus;
    }

    /**
     * The list of countries/regions mapped to this endpoint when using the 'Geographic' traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
     * 
     */
    @Import(name="geoMapping")
      private final @Nullable Output<List<String>> geoMapping;

    public Output<List<String>> getGeoMapping() {
        return this.geoMapping == null ? Codegen.empty() : this.geoMapping;
    }

    /**
     * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
     * 
     */
    @Import(name="minChildEndpoints")
      private final @Nullable Output<Double> minChildEndpoints;

    public Output<Double> getMinChildEndpoints() {
        return this.minChildEndpoints == null ? Codegen.empty() : this.minChildEndpoints;
    }

    /**
     * The minimum number of IPv4 (DNS record type A) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
     * 
     */
    @Import(name="minChildEndpointsIPv4")
      private final @Nullable Output<Double> minChildEndpointsIPv4;

    public Output<Double> getMinChildEndpointsIPv4() {
        return this.minChildEndpointsIPv4 == null ? Codegen.empty() : this.minChildEndpointsIPv4;
    }

    /**
     * The minimum number of IPv6 (DNS record type AAAA) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
     * 
     */
    @Import(name="minChildEndpointsIPv6")
      private final @Nullable Output<Double> minChildEndpointsIPv6;

    public Output<Double> getMinChildEndpointsIPv6() {
        return this.minChildEndpointsIPv6 == null ? Codegen.empty() : this.minChildEndpointsIPv6;
    }

    /**
     * The name of the resource
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The priority of this endpoint when using the 'Priority' traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
     * 
     */
    @Import(name="priority")
      private final @Nullable Output<Double> priority;

    public Output<Double> getPriority() {
        return this.priority == null ? Codegen.empty() : this.priority;
    }

    /**
     * The list of subnets, IP addresses, and/or address ranges mapped to this endpoint when using the 'Subnet' traffic routing method. An empty list will match all ranges not covered by other endpoints.
     * 
     */
    @Import(name="subnets")
      private final @Nullable Output<List<EndpointPropertiesSubnetsArgs>> subnets;

    public Output<List<EndpointPropertiesSubnetsArgs>> getSubnets() {
        return this.subnets == null ? Codegen.empty() : this.subnets;
    }

    /**
     * The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
     * 
     */
    @Import(name="target")
      private final @Nullable Output<String> target;

    public Output<String> getTarget() {
        return this.target == null ? Codegen.empty() : this.target;
    }

    /**
     * The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
     * 
     */
    @Import(name="targetResourceId")
      private final @Nullable Output<String> targetResourceId;

    public Output<String> getTargetResourceId() {
        return this.targetResourceId == null ? Codegen.empty() : this.targetResourceId;
    }

    /**
     * The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
     * 
     */
    @Import(name="weight")
      private final @Nullable Output<Double> weight;

    public Output<Double> getWeight() {
        return this.weight == null ? Codegen.empty() : this.weight;
    }

    public EndpointArgs(
        @Nullable Output<List<EndpointPropertiesCustomHeadersArgs>> customHeaders,
        @Nullable Output<String> endpointLocation,
        @Nullable Output<Either<String,EndpointMonitorStatus>> endpointMonitorStatus,
        @Nullable Output<Either<String,EndpointStatus>> endpointStatus,
        @Nullable Output<List<String>> geoMapping,
        @Nullable Output<String> id,
        @Nullable Output<Double> minChildEndpoints,
        @Nullable Output<Double> minChildEndpointsIPv4,
        @Nullable Output<Double> minChildEndpointsIPv6,
        @Nullable Output<String> name,
        @Nullable Output<Double> priority,
        @Nullable Output<List<EndpointPropertiesSubnetsArgs>> subnets,
        @Nullable Output<String> target,
        @Nullable Output<String> targetResourceId,
        @Nullable Output<String> type,
        @Nullable Output<Double> weight) {
        this.customHeaders = customHeaders;
        this.endpointLocation = endpointLocation;
        this.endpointMonitorStatus = endpointMonitorStatus;
        this.endpointStatus = endpointStatus;
        this.geoMapping = geoMapping;
        this.id = id;
        this.minChildEndpoints = minChildEndpoints;
        this.minChildEndpointsIPv4 = minChildEndpointsIPv4;
        this.minChildEndpointsIPv6 = minChildEndpointsIPv6;
        this.name = name;
        this.priority = priority;
        this.subnets = subnets;
        this.target = target;
        this.targetResourceId = targetResourceId;
        this.type = type;
        this.weight = weight;
    }

    private EndpointArgs() {
        this.customHeaders = Codegen.empty();
        this.endpointLocation = Codegen.empty();
        this.endpointMonitorStatus = Codegen.empty();
        this.endpointStatus = Codegen.empty();
        this.geoMapping = Codegen.empty();
        this.id = Codegen.empty();
        this.minChildEndpoints = Codegen.empty();
        this.minChildEndpointsIPv4 = Codegen.empty();
        this.minChildEndpointsIPv6 = Codegen.empty();
        this.name = Codegen.empty();
        this.priority = Codegen.empty();
        this.subnets = Codegen.empty();
        this.target = Codegen.empty();
        this.targetResourceId = Codegen.empty();
        this.type = Codegen.empty();
        this.weight = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<EndpointPropertiesCustomHeadersArgs>> customHeaders;
        private @Nullable Output<String> endpointLocation;
        private @Nullable Output<Either<String,EndpointMonitorStatus>> endpointMonitorStatus;
        private @Nullable Output<Either<String,EndpointStatus>> endpointStatus;
        private @Nullable Output<List<String>> geoMapping;
        private @Nullable Output<String> id;
        private @Nullable Output<Double> minChildEndpoints;
        private @Nullable Output<Double> minChildEndpointsIPv4;
        private @Nullable Output<Double> minChildEndpointsIPv6;
        private @Nullable Output<String> name;
        private @Nullable Output<Double> priority;
        private @Nullable Output<List<EndpointPropertiesSubnetsArgs>> subnets;
        private @Nullable Output<String> target;
        private @Nullable Output<String> targetResourceId;
        private @Nullable Output<String> type;
        private @Nullable Output<Double> weight;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customHeaders = defaults.customHeaders;
    	      this.endpointLocation = defaults.endpointLocation;
    	      this.endpointMonitorStatus = defaults.endpointMonitorStatus;
    	      this.endpointStatus = defaults.endpointStatus;
    	      this.geoMapping = defaults.geoMapping;
    	      this.id = defaults.id;
    	      this.minChildEndpoints = defaults.minChildEndpoints;
    	      this.minChildEndpointsIPv4 = defaults.minChildEndpointsIPv4;
    	      this.minChildEndpointsIPv6 = defaults.minChildEndpointsIPv6;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.subnets = defaults.subnets;
    	      this.target = defaults.target;
    	      this.targetResourceId = defaults.targetResourceId;
    	      this.type = defaults.type;
    	      this.weight = defaults.weight;
        }

        public Builder customHeaders(@Nullable Output<List<EndpointPropertiesCustomHeadersArgs>> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder customHeaders(@Nullable List<EndpointPropertiesCustomHeadersArgs> customHeaders) {
            this.customHeaders = Codegen.ofNullable(customHeaders);
            return this;
        }
        public Builder customHeaders(EndpointPropertiesCustomHeadersArgs... customHeaders) {
            return customHeaders(List.of(customHeaders));
        }
        public Builder endpointLocation(@Nullable Output<String> endpointLocation) {
            this.endpointLocation = endpointLocation;
            return this;
        }
        public Builder endpointLocation(@Nullable String endpointLocation) {
            this.endpointLocation = Codegen.ofNullable(endpointLocation);
            return this;
        }
        public Builder endpointMonitorStatus(@Nullable Output<Either<String,EndpointMonitorStatus>> endpointMonitorStatus) {
            this.endpointMonitorStatus = endpointMonitorStatus;
            return this;
        }
        public Builder endpointMonitorStatus(@Nullable Either<String,EndpointMonitorStatus> endpointMonitorStatus) {
            this.endpointMonitorStatus = Codegen.ofNullable(endpointMonitorStatus);
            return this;
        }
        public Builder endpointStatus(@Nullable Output<Either<String,EndpointStatus>> endpointStatus) {
            this.endpointStatus = endpointStatus;
            return this;
        }
        public Builder endpointStatus(@Nullable Either<String,EndpointStatus> endpointStatus) {
            this.endpointStatus = Codegen.ofNullable(endpointStatus);
            return this;
        }
        public Builder geoMapping(@Nullable Output<List<String>> geoMapping) {
            this.geoMapping = geoMapping;
            return this;
        }
        public Builder geoMapping(@Nullable List<String> geoMapping) {
            this.geoMapping = Codegen.ofNullable(geoMapping);
            return this;
        }
        public Builder geoMapping(String... geoMapping) {
            return geoMapping(List.of(geoMapping));
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder minChildEndpoints(@Nullable Output<Double> minChildEndpoints) {
            this.minChildEndpoints = minChildEndpoints;
            return this;
        }
        public Builder minChildEndpoints(@Nullable Double minChildEndpoints) {
            this.minChildEndpoints = Codegen.ofNullable(minChildEndpoints);
            return this;
        }
        public Builder minChildEndpointsIPv4(@Nullable Output<Double> minChildEndpointsIPv4) {
            this.minChildEndpointsIPv4 = minChildEndpointsIPv4;
            return this;
        }
        public Builder minChildEndpointsIPv4(@Nullable Double minChildEndpointsIPv4) {
            this.minChildEndpointsIPv4 = Codegen.ofNullable(minChildEndpointsIPv4);
            return this;
        }
        public Builder minChildEndpointsIPv6(@Nullable Output<Double> minChildEndpointsIPv6) {
            this.minChildEndpointsIPv6 = minChildEndpointsIPv6;
            return this;
        }
        public Builder minChildEndpointsIPv6(@Nullable Double minChildEndpointsIPv6) {
            this.minChildEndpointsIPv6 = Codegen.ofNullable(minChildEndpointsIPv6);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder priority(@Nullable Output<Double> priority) {
            this.priority = priority;
            return this;
        }
        public Builder priority(@Nullable Double priority) {
            this.priority = Codegen.ofNullable(priority);
            return this;
        }
        public Builder subnets(@Nullable Output<List<EndpointPropertiesSubnetsArgs>> subnets) {
            this.subnets = subnets;
            return this;
        }
        public Builder subnets(@Nullable List<EndpointPropertiesSubnetsArgs> subnets) {
            this.subnets = Codegen.ofNullable(subnets);
            return this;
        }
        public Builder subnets(EndpointPropertiesSubnetsArgs... subnets) {
            return subnets(List.of(subnets));
        }
        public Builder target(@Nullable Output<String> target) {
            this.target = target;
            return this;
        }
        public Builder target(@Nullable String target) {
            this.target = Codegen.ofNullable(target);
            return this;
        }
        public Builder targetResourceId(@Nullable Output<String> targetResourceId) {
            this.targetResourceId = targetResourceId;
            return this;
        }
        public Builder targetResourceId(@Nullable String targetResourceId) {
            this.targetResourceId = Codegen.ofNullable(targetResourceId);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder weight(@Nullable Output<Double> weight) {
            this.weight = weight;
            return this;
        }
        public Builder weight(@Nullable Double weight) {
            this.weight = Codegen.ofNullable(weight);
            return this;
        }        public EndpointArgs build() {
            return new EndpointArgs(customHeaders, endpointLocation, endpointMonitorStatus, endpointStatus, geoMapping, id, minChildEndpoints, minChildEndpointsIPv4, minChildEndpointsIPv6, name, priority, subnets, target, targetResourceId, type, weight);
        }
    }
}
