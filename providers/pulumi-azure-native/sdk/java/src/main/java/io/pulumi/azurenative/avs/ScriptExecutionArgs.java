// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.avs;

import io.pulumi.azurenative.avs.inputs.PSCredentialExecutionParameterArgs;
import io.pulumi.azurenative.avs.inputs.ScriptSecureStringExecutionParameterArgs;
import io.pulumi.azurenative.avs.inputs.ScriptStringExecutionParameterArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScriptExecutionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScriptExecutionArgs Empty = new ScriptExecutionArgs();

    /**
     * Error message if the script was able to run, but if the script itself had errors or powershell threw an exception
     * 
     */
    @InputImport(name="failureReason")
        private final @Nullable Input<String> failureReason;

    public Input<String> getFailureReason() {
        return this.failureReason == null ? Input.empty() : this.failureReason;
    }

    /**
     * Parameters that will be hidden/not visible to ARM, such as passwords and credentials
     * 
     */
    @InputImport(name="hiddenParameters")
        private final @Nullable Input<List<Object>> hiddenParameters;

    public Input<List<Object>> getHiddenParameters() {
        return this.hiddenParameters == null ? Input.empty() : this.hiddenParameters;
    }

    /**
     * User-defined dictionary.
     * 
     */
    @InputImport(name="namedOutputs")
        private final @Nullable Input<Map<String,Object>> namedOutputs;

    public Input<Map<String,Object>> getNamedOutputs() {
        return this.namedOutputs == null ? Input.empty() : this.namedOutputs;
    }

    /**
     * Standard output stream from the powershell execution
     * 
     */
    @InputImport(name="output")
        private final @Nullable Input<List<String>> output;

    public Input<List<String>> getOutput() {
        return this.output == null ? Input.empty() : this.output;
    }

    /**
     * Parameters the script will accept
     * 
     */
    @InputImport(name="parameters")
        private final @Nullable Input<List<Object>> parameters;

    public Input<List<Object>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * The name of the private cloud.
     * 
     */
    @InputImport(name="privateCloudName", required=true)
        private final Input<String> privateCloudName;

    public Input<String> getPrivateCloudName() {
        return this.privateCloudName;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Time to live for the resource. If not provided, will be available for 60 days
     * 
     */
    @InputImport(name="retention")
        private final @Nullable Input<String> retention;

    public Input<String> getRetention() {
        return this.retention == null ? Input.empty() : this.retention;
    }

    /**
     * A reference to the script cmdlet resource if user is running a AVS script
     * 
     */
    @InputImport(name="scriptCmdletId")
        private final @Nullable Input<String> scriptCmdletId;

    public Input<String> getScriptCmdletId() {
        return this.scriptCmdletId == null ? Input.empty() : this.scriptCmdletId;
    }

    /**
     * Name of the user-invoked script execution resource
     * 
     */
    @InputImport(name="scriptExecutionName")
        private final @Nullable Input<String> scriptExecutionName;

    public Input<String> getScriptExecutionName() {
        return this.scriptExecutionName == null ? Input.empty() : this.scriptExecutionName;
    }

    /**
     * Time limit for execution
     * 
     */
    @InputImport(name="timeout", required=true)
        private final Input<String> timeout;

    public Input<String> getTimeout() {
        return this.timeout;
    }

    public ScriptExecutionArgs(
        @Nullable Input<String> failureReason,
        @Nullable Input<List<Object>> hiddenParameters,
        @Nullable Input<Map<String,Object>> namedOutputs,
        @Nullable Input<List<String>> output,
        @Nullable Input<List<Object>> parameters,
        Input<String> privateCloudName,
        Input<String> resourceGroupName,
        @Nullable Input<String> retention,
        @Nullable Input<String> scriptCmdletId,
        @Nullable Input<String> scriptExecutionName,
        Input<String> timeout) {
        this.failureReason = failureReason;
        this.hiddenParameters = hiddenParameters;
        this.namedOutputs = namedOutputs;
        this.output = output;
        this.parameters = parameters;
        this.privateCloudName = Objects.requireNonNull(privateCloudName, "expected parameter 'privateCloudName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.retention = retention;
        this.scriptCmdletId = scriptCmdletId;
        this.scriptExecutionName = scriptExecutionName;
        this.timeout = Objects.requireNonNull(timeout, "expected parameter 'timeout' to be non-null");
    }

    private ScriptExecutionArgs() {
        this.failureReason = Input.empty();
        this.hiddenParameters = Input.empty();
        this.namedOutputs = Input.empty();
        this.output = Input.empty();
        this.parameters = Input.empty();
        this.privateCloudName = Input.empty();
        this.resourceGroupName = Input.empty();
        this.retention = Input.empty();
        this.scriptCmdletId = Input.empty();
        this.scriptExecutionName = Input.empty();
        this.timeout = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScriptExecutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> failureReason;
        private @Nullable Input<List<Object>> hiddenParameters;
        private @Nullable Input<Map<String,Object>> namedOutputs;
        private @Nullable Input<List<String>> output;
        private @Nullable Input<List<Object>> parameters;
        private Input<String> privateCloudName;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> retention;
        private @Nullable Input<String> scriptCmdletId;
        private @Nullable Input<String> scriptExecutionName;
        private Input<String> timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(ScriptExecutionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failureReason = defaults.failureReason;
    	      this.hiddenParameters = defaults.hiddenParameters;
    	      this.namedOutputs = defaults.namedOutputs;
    	      this.output = defaults.output;
    	      this.parameters = defaults.parameters;
    	      this.privateCloudName = defaults.privateCloudName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.retention = defaults.retention;
    	      this.scriptCmdletId = defaults.scriptCmdletId;
    	      this.scriptExecutionName = defaults.scriptExecutionName;
    	      this.timeout = defaults.timeout;
        }

        public Builder setFailureReason(@Nullable Input<String> failureReason) {
            this.failureReason = failureReason;
            return this;
        }

        public Builder setFailureReason(@Nullable String failureReason) {
            this.failureReason = Input.ofNullable(failureReason);
            return this;
        }

        public Builder setHiddenParameters(@Nullable Input<List<Object>> hiddenParameters) {
            this.hiddenParameters = hiddenParameters;
            return this;
        }

        public Builder setHiddenParameters(@Nullable List<Object> hiddenParameters) {
            this.hiddenParameters = Input.ofNullable(hiddenParameters);
            return this;
        }

        public Builder setNamedOutputs(@Nullable Input<Map<String,Object>> namedOutputs) {
            this.namedOutputs = namedOutputs;
            return this;
        }

        public Builder setNamedOutputs(@Nullable Map<String,Object> namedOutputs) {
            this.namedOutputs = Input.ofNullable(namedOutputs);
            return this;
        }

        public Builder setOutput(@Nullable Input<List<String>> output) {
            this.output = output;
            return this;
        }

        public Builder setOutput(@Nullable List<String> output) {
            this.output = Input.ofNullable(output);
            return this;
        }

        public Builder setParameters(@Nullable Input<List<Object>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setParameters(@Nullable List<Object> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder setPrivateCloudName(Input<String> privateCloudName) {
            this.privateCloudName = Objects.requireNonNull(privateCloudName);
            return this;
        }

        public Builder setPrivateCloudName(String privateCloudName) {
            this.privateCloudName = Input.of(Objects.requireNonNull(privateCloudName));
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setRetention(@Nullable Input<String> retention) {
            this.retention = retention;
            return this;
        }

        public Builder setRetention(@Nullable String retention) {
            this.retention = Input.ofNullable(retention);
            return this;
        }

        public Builder setScriptCmdletId(@Nullable Input<String> scriptCmdletId) {
            this.scriptCmdletId = scriptCmdletId;
            return this;
        }

        public Builder setScriptCmdletId(@Nullable String scriptCmdletId) {
            this.scriptCmdletId = Input.ofNullable(scriptCmdletId);
            return this;
        }

        public Builder setScriptExecutionName(@Nullable Input<String> scriptExecutionName) {
            this.scriptExecutionName = scriptExecutionName;
            return this;
        }

        public Builder setScriptExecutionName(@Nullable String scriptExecutionName) {
            this.scriptExecutionName = Input.ofNullable(scriptExecutionName);
            return this;
        }

        public Builder setTimeout(Input<String> timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public Builder setTimeout(String timeout) {
            this.timeout = Input.of(Objects.requireNonNull(timeout));
            return this;
        }
        public ScriptExecutionArgs build() {
            return new ScriptExecutionArgs(failureReason, hiddenParameters, namedOutputs, output, parameters, privateCloudName, resourceGroupName, retention, scriptCmdletId, scriptExecutionName, timeout);
        }
    }
}
