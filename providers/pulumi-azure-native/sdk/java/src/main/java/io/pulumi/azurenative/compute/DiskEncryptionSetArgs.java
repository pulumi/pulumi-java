// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.compute.enums.DiskEncryptionSetType;
import io.pulumi.azurenative.compute.inputs.EncryptionSetIdentityArgs;
import io.pulumi.azurenative.compute.inputs.KeyForDiskEncryptionSetArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DiskEncryptionSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DiskEncryptionSetArgs Empty = new DiskEncryptionSetArgs();

    @InputImport(name="activeKey")
    private final @Nullable Input<KeyForDiskEncryptionSetArgs> activeKey;

    public Input<KeyForDiskEncryptionSetArgs> getActiveKey() {
        return this.activeKey == null ? Input.empty() : this.activeKey;
    }

    @InputImport(name="diskEncryptionSetName")
    private final @Nullable Input<String> diskEncryptionSetName;

    public Input<String> getDiskEncryptionSetName() {
        return this.diskEncryptionSetName == null ? Input.empty() : this.diskEncryptionSetName;
    }

    @InputImport(name="encryptionType")
    private final @Nullable Input<Either<String,DiskEncryptionSetType>> encryptionType;

    public Input<Either<String,DiskEncryptionSetType>> getEncryptionType() {
        return this.encryptionType == null ? Input.empty() : this.encryptionType;
    }

    @InputImport(name="identity")
    private final @Nullable Input<EncryptionSetIdentityArgs> identity;

    public Input<EncryptionSetIdentityArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="rotationToLatestKeyVersionEnabled")
    private final @Nullable Input<Boolean> rotationToLatestKeyVersionEnabled;

    public Input<Boolean> getRotationToLatestKeyVersionEnabled() {
        return this.rotationToLatestKeyVersionEnabled == null ? Input.empty() : this.rotationToLatestKeyVersionEnabled;
    }

    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public DiskEncryptionSetArgs(
        @Nullable Input<KeyForDiskEncryptionSetArgs> activeKey,
        @Nullable Input<String> diskEncryptionSetName,
        @Nullable Input<Either<String,DiskEncryptionSetType>> encryptionType,
        @Nullable Input<EncryptionSetIdentityArgs> identity,
        @Nullable Input<String> location,
        Input<String> resourceGroupName,
        @Nullable Input<Boolean> rotationToLatestKeyVersionEnabled,
        @Nullable Input<Map<String,String>> tags) {
        this.activeKey = activeKey;
        this.diskEncryptionSetName = diskEncryptionSetName;
        this.encryptionType = encryptionType;
        this.identity = identity;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.rotationToLatestKeyVersionEnabled = rotationToLatestKeyVersionEnabled;
        this.tags = tags;
    }

    private DiskEncryptionSetArgs() {
        this.activeKey = Input.empty();
        this.diskEncryptionSetName = Input.empty();
        this.encryptionType = Input.empty();
        this.identity = Input.empty();
        this.location = Input.empty();
        this.resourceGroupName = Input.empty();
        this.rotationToLatestKeyVersionEnabled = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiskEncryptionSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<KeyForDiskEncryptionSetArgs> activeKey;
        private @Nullable Input<String> diskEncryptionSetName;
        private @Nullable Input<Either<String,DiskEncryptionSetType>> encryptionType;
        private @Nullable Input<EncryptionSetIdentityArgs> identity;
        private @Nullable Input<String> location;
        private Input<String> resourceGroupName;
        private @Nullable Input<Boolean> rotationToLatestKeyVersionEnabled;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DiskEncryptionSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeKey = defaults.activeKey;
    	      this.diskEncryptionSetName = defaults.diskEncryptionSetName;
    	      this.encryptionType = defaults.encryptionType;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.rotationToLatestKeyVersionEnabled = defaults.rotationToLatestKeyVersionEnabled;
    	      this.tags = defaults.tags;
        }

        public Builder setActiveKey(@Nullable Input<KeyForDiskEncryptionSetArgs> activeKey) {
            this.activeKey = activeKey;
            return this;
        }

        public Builder setActiveKey(@Nullable KeyForDiskEncryptionSetArgs activeKey) {
            this.activeKey = Input.ofNullable(activeKey);
            return this;
        }

        public Builder setDiskEncryptionSetName(@Nullable Input<String> diskEncryptionSetName) {
            this.diskEncryptionSetName = diskEncryptionSetName;
            return this;
        }

        public Builder setDiskEncryptionSetName(@Nullable String diskEncryptionSetName) {
            this.diskEncryptionSetName = Input.ofNullable(diskEncryptionSetName);
            return this;
        }

        public Builder setEncryptionType(@Nullable Input<Either<String,DiskEncryptionSetType>> encryptionType) {
            this.encryptionType = encryptionType;
            return this;
        }

        public Builder setEncryptionType(@Nullable Either<String,DiskEncryptionSetType> encryptionType) {
            this.encryptionType = Input.ofNullable(encryptionType);
            return this;
        }

        public Builder setIdentity(@Nullable Input<EncryptionSetIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIdentity(@Nullable EncryptionSetIdentityArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setRotationToLatestKeyVersionEnabled(@Nullable Input<Boolean> rotationToLatestKeyVersionEnabled) {
            this.rotationToLatestKeyVersionEnabled = rotationToLatestKeyVersionEnabled;
            return this;
        }

        public Builder setRotationToLatestKeyVersionEnabled(@Nullable Boolean rotationToLatestKeyVersionEnabled) {
            this.rotationToLatestKeyVersionEnabled = Input.ofNullable(rotationToLatestKeyVersionEnabled);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public DiskEncryptionSetArgs build() {
            return new DiskEncryptionSetArgs(activeKey, diskEncryptionSetName, encryptionType, identity, location, resourceGroupName, rotationToLatestKeyVersionEnabled, tags);
        }
    }
}
