// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.sql.enums.ServerPublicNetworkAccess;
import io.pulumi.azurenative.sql.inputs.ResourceIdentityArgs;
import io.pulumi.azurenative.sql.inputs.ServerExternalAdministratorArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServerArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServerArgs Empty = new ServerArgs();

    /**
     * Administrator username for the server. Once created it cannot be changed.
     * 
     */
    @InputImport(name="administratorLogin")
    private final @Nullable Input<String> administratorLogin;

    public Input<String> getAdministratorLogin() {
        return this.administratorLogin == null ? Input.empty() : this.administratorLogin;
    }

    /**
     * The administrator login password (required for server creation).
     * 
     */
    @InputImport(name="administratorLoginPassword")
    private final @Nullable Input<String> administratorLoginPassword;

    public Input<String> getAdministratorLoginPassword() {
        return this.administratorLoginPassword == null ? Input.empty() : this.administratorLoginPassword;
    }

    /**
     * The Azure Active Directory identity of the server.
     * 
     */
    @InputImport(name="administrators")
    private final @Nullable Input<ServerExternalAdministratorArgs> administrators;

    public Input<ServerExternalAdministratorArgs> getAdministrators() {
        return this.administrators == null ? Input.empty() : this.administrators;
    }

    /**
     * The Azure Active Directory identity of the server.
     * 
     */
    @InputImport(name="identity")
    private final @Nullable Input<ResourceIdentityArgs> identity;

    public Input<ResourceIdentityArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    /**
     * A CMK URI of the key to use for encryption.
     * 
     */
    @InputImport(name="keyId")
    private final @Nullable Input<String> keyId;

    public Input<String> getKeyId() {
        return this.keyId == null ? Input.empty() : this.keyId;
    }

    /**
     * Resource location.
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
     * 
     */
    @InputImport(name="minimalTlsVersion")
    private final @Nullable Input<String> minimalTlsVersion;

    public Input<String> getMinimalTlsVersion() {
        return this.minimalTlsVersion == null ? Input.empty() : this.minimalTlsVersion;
    }

    /**
     * The resource id of a user assigned identity to be used by default.
     * 
     */
    @InputImport(name="primaryUserAssignedIdentityId")
    private final @Nullable Input<String> primaryUserAssignedIdentityId;

    public Input<String> getPrimaryUserAssignedIdentityId() {
        return this.primaryUserAssignedIdentityId == null ? Input.empty() : this.primaryUserAssignedIdentityId;
    }

    /**
     * Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
     * 
     */
    @InputImport(name="publicNetworkAccess")
    private final @Nullable Input<Either<String,ServerPublicNetworkAccess>> publicNetworkAccess;

    public Input<Either<String,ServerPublicNetworkAccess>> getPublicNetworkAccess() {
        return this.publicNetworkAccess == null ? Input.empty() : this.publicNetworkAccess;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @InputImport(name="serverName")
    private final @Nullable Input<String> serverName;

    public Input<String> getServerName() {
        return this.serverName == null ? Input.empty() : this.serverName;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The version of the server.
     * 
     */
    @InputImport(name="version")
    private final @Nullable Input<String> version;

    public Input<String> getVersion() {
        return this.version == null ? Input.empty() : this.version;
    }

    public ServerArgs(
        @Nullable Input<String> administratorLogin,
        @Nullable Input<String> administratorLoginPassword,
        @Nullable Input<ServerExternalAdministratorArgs> administrators,
        @Nullable Input<ResourceIdentityArgs> identity,
        @Nullable Input<String> keyId,
        @Nullable Input<String> location,
        @Nullable Input<String> minimalTlsVersion,
        @Nullable Input<String> primaryUserAssignedIdentityId,
        @Nullable Input<Either<String,ServerPublicNetworkAccess>> publicNetworkAccess,
        Input<String> resourceGroupName,
        @Nullable Input<String> serverName,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> version) {
        this.administratorLogin = administratorLogin;
        this.administratorLoginPassword = administratorLoginPassword;
        this.administrators = administrators;
        this.identity = identity;
        this.keyId = keyId;
        this.location = location;
        this.minimalTlsVersion = minimalTlsVersion;
        this.primaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
        this.publicNetworkAccess = publicNetworkAccess;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverName = serverName;
        this.tags = tags;
        this.version = version;
    }

    private ServerArgs() {
        this.administratorLogin = Input.empty();
        this.administratorLoginPassword = Input.empty();
        this.administrators = Input.empty();
        this.identity = Input.empty();
        this.keyId = Input.empty();
        this.location = Input.empty();
        this.minimalTlsVersion = Input.empty();
        this.primaryUserAssignedIdentityId = Input.empty();
        this.publicNetworkAccess = Input.empty();
        this.resourceGroupName = Input.empty();
        this.serverName = Input.empty();
        this.tags = Input.empty();
        this.version = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> administratorLogin;
        private @Nullable Input<String> administratorLoginPassword;
        private @Nullable Input<ServerExternalAdministratorArgs> administrators;
        private @Nullable Input<ResourceIdentityArgs> identity;
        private @Nullable Input<String> keyId;
        private @Nullable Input<String> location;
        private @Nullable Input<String> minimalTlsVersion;
        private @Nullable Input<String> primaryUserAssignedIdentityId;
        private @Nullable Input<Either<String,ServerPublicNetworkAccess>> publicNetworkAccess;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> serverName;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(ServerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administratorLogin = defaults.administratorLogin;
    	      this.administratorLoginPassword = defaults.administratorLoginPassword;
    	      this.administrators = defaults.administrators;
    	      this.identity = defaults.identity;
    	      this.keyId = defaults.keyId;
    	      this.location = defaults.location;
    	      this.minimalTlsVersion = defaults.minimalTlsVersion;
    	      this.primaryUserAssignedIdentityId = defaults.primaryUserAssignedIdentityId;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
        }

        public Builder setAdministratorLogin(@Nullable Input<String> administratorLogin) {
            this.administratorLogin = administratorLogin;
            return this;
        }

        public Builder setAdministratorLogin(@Nullable String administratorLogin) {
            this.administratorLogin = Input.ofNullable(administratorLogin);
            return this;
        }

        public Builder setAdministratorLoginPassword(@Nullable Input<String> administratorLoginPassword) {
            this.administratorLoginPassword = administratorLoginPassword;
            return this;
        }

        public Builder setAdministratorLoginPassword(@Nullable String administratorLoginPassword) {
            this.administratorLoginPassword = Input.ofNullable(administratorLoginPassword);
            return this;
        }

        public Builder setAdministrators(@Nullable Input<ServerExternalAdministratorArgs> administrators) {
            this.administrators = administrators;
            return this;
        }

        public Builder setAdministrators(@Nullable ServerExternalAdministratorArgs administrators) {
            this.administrators = Input.ofNullable(administrators);
            return this;
        }

        public Builder setIdentity(@Nullable Input<ResourceIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIdentity(@Nullable ResourceIdentityArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder setKeyId(@Nullable Input<String> keyId) {
            this.keyId = keyId;
            return this;
        }

        public Builder setKeyId(@Nullable String keyId) {
            this.keyId = Input.ofNullable(keyId);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMinimalTlsVersion(@Nullable Input<String> minimalTlsVersion) {
            this.minimalTlsVersion = minimalTlsVersion;
            return this;
        }

        public Builder setMinimalTlsVersion(@Nullable String minimalTlsVersion) {
            this.minimalTlsVersion = Input.ofNullable(minimalTlsVersion);
            return this;
        }

        public Builder setPrimaryUserAssignedIdentityId(@Nullable Input<String> primaryUserAssignedIdentityId) {
            this.primaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            return this;
        }

        public Builder setPrimaryUserAssignedIdentityId(@Nullable String primaryUserAssignedIdentityId) {
            this.primaryUserAssignedIdentityId = Input.ofNullable(primaryUserAssignedIdentityId);
            return this;
        }

        public Builder setPublicNetworkAccess(@Nullable Input<Either<String,ServerPublicNetworkAccess>> publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder setPublicNetworkAccess(@Nullable Either<String,ServerPublicNetworkAccess> publicNetworkAccess) {
            this.publicNetworkAccess = Input.ofNullable(publicNetworkAccess);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setServerName(@Nullable Input<String> serverName) {
            this.serverName = serverName;
            return this;
        }

        public Builder setServerName(@Nullable String serverName) {
            this.serverName = Input.ofNullable(serverName);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVersion(@Nullable Input<String> version) {
            this.version = version;
            return this;
        }

        public Builder setVersion(@Nullable String version) {
            this.version = Input.ofNullable(version);
            return this;
        }

        public ServerArgs build() {
            return new ServerArgs(administratorLogin, administratorLoginPassword, administrators, identity, keyId, location, minimalTlsVersion, primaryUserAssignedIdentityId, publicNetworkAccess, resourceGroupName, serverName, tags, version);
        }
    }
}
