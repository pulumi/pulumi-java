// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.AmazonS3CompatibleLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.AmazonS3LocationArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureBlobFSLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureBlobStorageLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureDataLakeStoreLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureFileStorageLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.DatasetCompressionArgs;
import io.pulumi.azurenative.datafactory.inputs.DatasetFolderArgs;
import io.pulumi.azurenative.datafactory.inputs.FileServerLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.FtpServerLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.GoogleCloudStorageLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.HdfsLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.HttpServerLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.OracleCloudStorageLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import io.pulumi.azurenative.datafactory.inputs.SftpLocationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Excel dataset.
 * 
 */
public final class ExcelDatasetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExcelDatasetArgs Empty = new ExcelDatasetArgs();

    /**
     * List of tags that can be used for describing the Dataset.
     * 
     */
    @Import(name="annotations")
      private final @Nullable Output<List<Object>> annotations;

    public Output<List<Object>> getAnnotations() {
        return this.annotations == null ? Codegen.empty() : this.annotations;
    }

    /**
     * The data compression method used for the json dataset.
     * 
     */
    @Import(name="compression")
      private final @Nullable Output<DatasetCompressionArgs> compression;

    public Output<DatasetCompressionArgs> getCompression() {
        return this.compression == null ? Codegen.empty() : this.compression;
    }

    /**
     * Dataset description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="firstRowAsHeader")
      private final @Nullable Output<Object> firstRowAsHeader;

    public Output<Object> getFirstRowAsHeader() {
        return this.firstRowAsHeader == null ? Codegen.empty() : this.firstRowAsHeader;
    }

    /**
     * The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
     * 
     */
    @Import(name="folder")
      private final @Nullable Output<DatasetFolderArgs> folder;

    public Output<DatasetFolderArgs> getFolder() {
        return this.folder == null ? Codegen.empty() : this.folder;
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName", required=true)
      private final Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Output<LinkedServiceReferenceArgs> getLinkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * The location of the excel storage.
     * 
     */
    @Import(name="location", required=true)
      private final Output<Object> location;

    public Output<Object> getLocation() {
        return this.location;
    }

    /**
     * The null value string. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="nullValue")
      private final @Nullable Output<Object> nullValue;

    public Output<Object> getNullValue() {
        return this.nullValue == null ? Codegen.empty() : this.nullValue;
    }

    /**
     * Parameters for dataset.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;

    public Output<Map<String,ParameterSpecificationArgs>> getParameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * The partial data of one sheet. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="range")
      private final @Nullable Output<Object> range;

    public Output<Object> getRange() {
        return this.range == null ? Codegen.empty() : this.range;
    }

    /**
     * Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
     * 
     */
    @Import(name="schema")
      private final @Nullable Output<Object> schema;

    public Output<Object> getSchema() {
        return this.schema == null ? Codegen.empty() : this.schema;
    }

    /**
     * The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
     * 
     */
    @Import(name="sheetIndex")
      private final @Nullable Output<Object> sheetIndex;

    public Output<Object> getSheetIndex() {
        return this.sheetIndex == null ? Codegen.empty() : this.sheetIndex;
    }

    /**
     * The sheet name of excel file. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sheetName")
      private final @Nullable Output<Object> sheetName;

    public Output<Object> getSheetName() {
        return this.sheetName == null ? Codegen.empty() : this.sheetName;
    }

    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     * 
     */
    @Import(name="structure")
      private final @Nullable Output<Object> structure;

    public Output<Object> getStructure() {
        return this.structure == null ? Codegen.empty() : this.structure;
    }

    /**
     * Type of dataset.
     * Expected value is 'Excel'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public ExcelDatasetArgs(
        @Nullable Output<List<Object>> annotations,
        @Nullable Output<DatasetCompressionArgs> compression,
        @Nullable Output<String> description,
        @Nullable Output<Object> firstRowAsHeader,
        @Nullable Output<DatasetFolderArgs> folder,
        Output<LinkedServiceReferenceArgs> linkedServiceName,
        Output<Object> location,
        @Nullable Output<Object> nullValue,
        @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters,
        @Nullable Output<Object> range,
        @Nullable Output<Object> schema,
        @Nullable Output<Object> sheetIndex,
        @Nullable Output<Object> sheetName,
        @Nullable Output<Object> structure,
        Output<String> type) {
        this.annotations = annotations;
        this.compression = compression;
        this.description = description;
        this.firstRowAsHeader = firstRowAsHeader;
        this.folder = folder;
        this.linkedServiceName = Objects.requireNonNull(linkedServiceName, "expected parameter 'linkedServiceName' to be non-null");
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.nullValue = nullValue;
        this.parameters = parameters;
        this.range = range;
        this.schema = schema;
        this.sheetIndex = sheetIndex;
        this.sheetName = sheetName;
        this.structure = structure;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ExcelDatasetArgs() {
        this.annotations = Codegen.empty();
        this.compression = Codegen.empty();
        this.description = Codegen.empty();
        this.firstRowAsHeader = Codegen.empty();
        this.folder = Codegen.empty();
        this.linkedServiceName = Codegen.empty();
        this.location = Codegen.empty();
        this.nullValue = Codegen.empty();
        this.parameters = Codegen.empty();
        this.range = Codegen.empty();
        this.schema = Codegen.empty();
        this.sheetIndex = Codegen.empty();
        this.sheetName = Codegen.empty();
        this.structure = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExcelDatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Object>> annotations;
        private @Nullable Output<DatasetCompressionArgs> compression;
        private @Nullable Output<String> description;
        private @Nullable Output<Object> firstRowAsHeader;
        private @Nullable Output<DatasetFolderArgs> folder;
        private Output<LinkedServiceReferenceArgs> linkedServiceName;
        private Output<Object> location;
        private @Nullable Output<Object> nullValue;
        private @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;
        private @Nullable Output<Object> range;
        private @Nullable Output<Object> schema;
        private @Nullable Output<Object> sheetIndex;
        private @Nullable Output<Object> sheetName;
        private @Nullable Output<Object> structure;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ExcelDatasetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.compression = defaults.compression;
    	      this.description = defaults.description;
    	      this.firstRowAsHeader = defaults.firstRowAsHeader;
    	      this.folder = defaults.folder;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.location = defaults.location;
    	      this.nullValue = defaults.nullValue;
    	      this.parameters = defaults.parameters;
    	      this.range = defaults.range;
    	      this.schema = defaults.schema;
    	      this.sheetIndex = defaults.sheetIndex;
    	      this.sheetName = defaults.sheetName;
    	      this.structure = defaults.structure;
    	      this.type = defaults.type;
        }

        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = Codegen.ofNullable(annotations);
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        public Builder compression(@Nullable Output<DatasetCompressionArgs> compression) {
            this.compression = compression;
            return this;
        }
        public Builder compression(@Nullable DatasetCompressionArgs compression) {
            this.compression = Codegen.ofNullable(compression);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder firstRowAsHeader(@Nullable Output<Object> firstRowAsHeader) {
            this.firstRowAsHeader = firstRowAsHeader;
            return this;
        }
        public Builder firstRowAsHeader(@Nullable Object firstRowAsHeader) {
            this.firstRowAsHeader = Codegen.ofNullable(firstRowAsHeader);
            return this;
        }
        public Builder folder(@Nullable Output<DatasetFolderArgs> folder) {
            this.folder = folder;
            return this;
        }
        public Builder folder(@Nullable DatasetFolderArgs folder) {
            this.folder = Codegen.ofNullable(folder);
            return this;
        }
        public Builder linkedServiceName(Output<LinkedServiceReferenceArgs> linkedServiceName) {
            this.linkedServiceName = Objects.requireNonNull(linkedServiceName);
            return this;
        }
        public Builder linkedServiceName(LinkedServiceReferenceArgs linkedServiceName) {
            this.linkedServiceName = Output.of(Objects.requireNonNull(linkedServiceName));
            return this;
        }
        public Builder location(Output<Object> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder location(Object location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }
        public Builder nullValue(@Nullable Output<Object> nullValue) {
            this.nullValue = nullValue;
            return this;
        }
        public Builder nullValue(@Nullable Object nullValue) {
            this.nullValue = Codegen.ofNullable(nullValue);
            return this;
        }
        public Builder parameters(@Nullable Output<Map<String,ParameterSpecificationArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable Map<String,ParameterSpecificationArgs> parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder range(@Nullable Output<Object> range) {
            this.range = range;
            return this;
        }
        public Builder range(@Nullable Object range) {
            this.range = Codegen.ofNullable(range);
            return this;
        }
        public Builder schema(@Nullable Output<Object> schema) {
            this.schema = schema;
            return this;
        }
        public Builder schema(@Nullable Object schema) {
            this.schema = Codegen.ofNullable(schema);
            return this;
        }
        public Builder sheetIndex(@Nullable Output<Object> sheetIndex) {
            this.sheetIndex = sheetIndex;
            return this;
        }
        public Builder sheetIndex(@Nullable Object sheetIndex) {
            this.sheetIndex = Codegen.ofNullable(sheetIndex);
            return this;
        }
        public Builder sheetName(@Nullable Output<Object> sheetName) {
            this.sheetName = sheetName;
            return this;
        }
        public Builder sheetName(@Nullable Object sheetName) {
            this.sheetName = Codegen.ofNullable(sheetName);
            return this;
        }
        public Builder structure(@Nullable Output<Object> structure) {
            this.structure = structure;
            return this;
        }
        public Builder structure(@Nullable Object structure) {
            this.structure = Codegen.ofNullable(structure);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ExcelDatasetArgs build() {
            return new ExcelDatasetArgs(annotations, compression, description, firstRowAsHeader, folder, linkedServiceName, location, nullValue, parameters, range, schema, sheetIndex, sheetName, structure, type);
        }
    }
}
