// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.inputs;

import io.pulumi.azurenative.cdn.inputs.KeyVaultCertificateSourceParametersResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserManagedHttpsParametersResponse extends io.pulumi.resources.InvokeArgs {

    public static final UserManagedHttpsParametersResponse Empty = new UserManagedHttpsParametersResponse();

    @InputImport(name="certificateSource", required=true)
    private final String certificateSource;

    public String getCertificateSource() {
        return this.certificateSource;
    }

    @InputImport(name="certificateSourceParameters", required=true)
    private final KeyVaultCertificateSourceParametersResponse certificateSourceParameters;

    public KeyVaultCertificateSourceParametersResponse getCertificateSourceParameters() {
        return this.certificateSourceParameters;
    }

    @InputImport(name="minimumTlsVersion")
    private final @Nullable String minimumTlsVersion;

    public Optional<String> getMinimumTlsVersion() {
        return this.minimumTlsVersion == null ? Optional.empty() : Optional.ofNullable(this.minimumTlsVersion);
    }

    @InputImport(name="protocolType", required=true)
    private final String protocolType;

    public String getProtocolType() {
        return this.protocolType;
    }

    public UserManagedHttpsParametersResponse(
        String certificateSource,
        KeyVaultCertificateSourceParametersResponse certificateSourceParameters,
        @Nullable String minimumTlsVersion,
        String protocolType) {
        this.certificateSource = Objects.requireNonNull(certificateSource, "expected parameter 'certificateSource' to be non-null");
        this.certificateSourceParameters = Objects.requireNonNull(certificateSourceParameters, "expected parameter 'certificateSourceParameters' to be non-null");
        this.minimumTlsVersion = minimumTlsVersion;
        this.protocolType = Objects.requireNonNull(protocolType, "expected parameter 'protocolType' to be non-null");
    }

    private UserManagedHttpsParametersResponse() {
        this.certificateSource = null;
        this.certificateSourceParameters = null;
        this.minimumTlsVersion = null;
        this.protocolType = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserManagedHttpsParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String certificateSource;
        private KeyVaultCertificateSourceParametersResponse certificateSourceParameters;
        private @Nullable String minimumTlsVersion;
        private String protocolType;

        public Builder() {
    	      // Empty
        }

        public Builder(UserManagedHttpsParametersResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateSource = defaults.certificateSource;
    	      this.certificateSourceParameters = defaults.certificateSourceParameters;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.protocolType = defaults.protocolType;
        }

        public Builder setCertificateSource(String certificateSource) {
            this.certificateSource = Objects.requireNonNull(certificateSource);
            return this;
        }

        public Builder setCertificateSourceParameters(KeyVaultCertificateSourceParametersResponse certificateSourceParameters) {
            this.certificateSourceParameters = Objects.requireNonNull(certificateSourceParameters);
            return this;
        }

        public Builder setMinimumTlsVersion(@Nullable String minimumTlsVersion) {
            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }

        public Builder setProtocolType(String protocolType) {
            this.protocolType = Objects.requireNonNull(protocolType);
            return this;
        }

        public UserManagedHttpsParametersResponse build() {
            return new UserManagedHttpsParametersResponse(certificateSource, certificateSourceParameters, minimumTlsVersion, protocolType);
        }
    }
}
