// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.azurenative.machinelearningservices.enums.BatchLoggingLevel;
import io.pulumi.azurenative.machinelearningservices.inputs.BatchOutputConfigurationArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.BatchRetrySettingsArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.CodeConfigurationArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.ComputeConfigurationArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.DataPathAssetReferenceArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.IdAssetReferenceArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.OutputPathAssetReferenceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Batch inference settings per deployment.
 * 
 */
public final class BatchDeploymentArgs extends io.pulumi.resources.ResourceArgs {

    public static final BatchDeploymentArgs Empty = new BatchDeploymentArgs();

    /**
     * Code configuration for the endpoint deployment.
     * 
     */
    @InputImport(name="codeConfiguration")
      private final @Nullable Output<CodeConfigurationArgs> codeConfiguration;

    public Output<CodeConfigurationArgs> getCodeConfiguration() {
        return this.codeConfiguration == null ? Output.empty() : this.codeConfiguration;
    }

    /**
     * Configuration for compute binding.
     * 
     */
    @InputImport(name="compute")
      private final @Nullable Output<ComputeConfigurationArgs> compute;

    public Output<ComputeConfigurationArgs> getCompute() {
        return this.compute == null ? Output.empty() : this.compute;
    }

    /**
     * Description of the endpoint deployment.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * ARM resource ID of the environment specification for the endpoint deployment.
     * 
     */
    @InputImport(name="environmentId")
      private final @Nullable Output<String> environmentId;

    public Output<String> getEnvironmentId() {
        return this.environmentId == null ? Output.empty() : this.environmentId;
    }

    /**
     * Environment variables configuration for the deployment.
     * 
     */
    @InputImport(name="environmentVariables")
      private final @Nullable Output<Map<String,String>> environmentVariables;

    public Output<Map<String,String>> getEnvironmentVariables() {
        return this.environmentVariables == null ? Output.empty() : this.environmentVariables;
    }

    /**
     * Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue].
     * For FileDataset, this value is the count of file failures.
     * For TabularDataset, this value is the count of record failures.
     * If set to -1 (the lower bound), all failures during batch inference will be ignored.
     * 
     */
    @InputImport(name="errorThreshold")
      private final @Nullable Output<Integer> errorThreshold;

    public Output<Integer> getErrorThreshold() {
        return this.errorThreshold == null ? Output.empty() : this.errorThreshold;
    }

    /**
     * Logging level for batch inference operation.
     * 
     */
    @InputImport(name="loggingLevel")
      private final @Nullable Output<Either<String,BatchLoggingLevel>> loggingLevel;

    public Output<Either<String,BatchLoggingLevel>> getLoggingLevel() {
        return this.loggingLevel == null ? Output.empty() : this.loggingLevel;
    }

    /**
     * Size of the mini-batch passed to each batch invocation.
     * For FileDataset, this is the number of files per mini-batch.
     * For TabularDataset, this is the size of the records in bytes, per mini-batch.
     * 
     */
    @InputImport(name="miniBatchSize")
      private final @Nullable Output<Double> miniBatchSize;

    public Output<Double> getMiniBatchSize() {
        return this.miniBatchSize == null ? Output.empty() : this.miniBatchSize;
    }

    /**
     * Reference to the model asset for the endpoint deployment.
     * 
     */
    @InputImport(name="model")
      private final @Nullable Output<Object> model;

    public Output<Object> getModel() {
        return this.model == null ? Output.empty() : this.model;
    }

    /**
     * Output configuration for the batch inference operation.
     * 
     */
    @InputImport(name="outputConfiguration")
      private final @Nullable Output<BatchOutputConfigurationArgs> outputConfiguration;

    public Output<BatchOutputConfigurationArgs> getOutputConfiguration() {
        return this.outputConfiguration == null ? Output.empty() : this.outputConfiguration;
    }

    /**
     * Partition keys list used for Named partitioning.
     * 
     */
    @InputImport(name="partitionKeys")
      private final @Nullable Output<List<String>> partitionKeys;

    public Output<List<String>> getPartitionKeys() {
        return this.partitionKeys == null ? Output.empty() : this.partitionKeys;
    }

    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     * 
     */
    @InputImport(name="properties")
      private final @Nullable Output<Map<String,String>> properties;

    public Output<Map<String,String>> getProperties() {
        return this.properties == null ? Output.empty() : this.properties;
    }

    /**
     * Retry Settings for the batch inference operation.
     * 
     */
    @InputImport(name="retrySettings")
      private final @Nullable Output<BatchRetrySettingsArgs> retrySettings;

    public Output<BatchRetrySettingsArgs> getRetrySettings() {
        return this.retrySettings == null ? Output.empty() : this.retrySettings;
    }

    public BatchDeploymentArgs(
        @Nullable Output<CodeConfigurationArgs> codeConfiguration,
        @Nullable Output<ComputeConfigurationArgs> compute,
        @Nullable Output<String> description,
        @Nullable Output<String> environmentId,
        @Nullable Output<Map<String,String>> environmentVariables,
        @Nullable Output<Integer> errorThreshold,
        @Nullable Output<Either<String,BatchLoggingLevel>> loggingLevel,
        @Nullable Output<Double> miniBatchSize,
        @Nullable Output<Object> model,
        @Nullable Output<BatchOutputConfigurationArgs> outputConfiguration,
        @Nullable Output<List<String>> partitionKeys,
        @Nullable Output<Map<String,String>> properties,
        @Nullable Output<BatchRetrySettingsArgs> retrySettings) {
        this.codeConfiguration = codeConfiguration;
        this.compute = compute;
        this.description = description;
        this.environmentId = environmentId;
        this.environmentVariables = environmentVariables;
        this.errorThreshold = errorThreshold;
        this.loggingLevel = loggingLevel;
        this.miniBatchSize = miniBatchSize;
        this.model = model;
        this.outputConfiguration = outputConfiguration;
        this.partitionKeys = partitionKeys;
        this.properties = properties;
        this.retrySettings = retrySettings;
    }

    private BatchDeploymentArgs() {
        this.codeConfiguration = Output.empty();
        this.compute = Output.empty();
        this.description = Output.empty();
        this.environmentId = Output.empty();
        this.environmentVariables = Output.empty();
        this.errorThreshold = Output.empty();
        this.loggingLevel = Output.empty();
        this.miniBatchSize = Output.empty();
        this.model = Output.empty();
        this.outputConfiguration = Output.empty();
        this.partitionKeys = Output.empty();
        this.properties = Output.empty();
        this.retrySettings = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BatchDeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<CodeConfigurationArgs> codeConfiguration;
        private @Nullable Output<ComputeConfigurationArgs> compute;
        private @Nullable Output<String> description;
        private @Nullable Output<String> environmentId;
        private @Nullable Output<Map<String,String>> environmentVariables;
        private @Nullable Output<Integer> errorThreshold;
        private @Nullable Output<Either<String,BatchLoggingLevel>> loggingLevel;
        private @Nullable Output<Double> miniBatchSize;
        private @Nullable Output<Object> model;
        private @Nullable Output<BatchOutputConfigurationArgs> outputConfiguration;
        private @Nullable Output<List<String>> partitionKeys;
        private @Nullable Output<Map<String,String>> properties;
        private @Nullable Output<BatchRetrySettingsArgs> retrySettings;

        public Builder() {
    	      // Empty
        }

        public Builder(BatchDeploymentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.codeConfiguration = defaults.codeConfiguration;
    	      this.compute = defaults.compute;
    	      this.description = defaults.description;
    	      this.environmentId = defaults.environmentId;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.errorThreshold = defaults.errorThreshold;
    	      this.loggingLevel = defaults.loggingLevel;
    	      this.miniBatchSize = defaults.miniBatchSize;
    	      this.model = defaults.model;
    	      this.outputConfiguration = defaults.outputConfiguration;
    	      this.partitionKeys = defaults.partitionKeys;
    	      this.properties = defaults.properties;
    	      this.retrySettings = defaults.retrySettings;
        }

        public Builder codeConfiguration(@Nullable Output<CodeConfigurationArgs> codeConfiguration) {
            this.codeConfiguration = codeConfiguration;
            return this;
        }

        public Builder codeConfiguration(@Nullable CodeConfigurationArgs codeConfiguration) {
            this.codeConfiguration = Output.ofNullable(codeConfiguration);
            return this;
        }

        public Builder compute(@Nullable Output<ComputeConfigurationArgs> compute) {
            this.compute = compute;
            return this;
        }

        public Builder compute(@Nullable ComputeConfigurationArgs compute) {
            this.compute = Output.ofNullable(compute);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder environmentId(@Nullable Output<String> environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        public Builder environmentId(@Nullable String environmentId) {
            this.environmentId = Output.ofNullable(environmentId);
            return this;
        }

        public Builder environmentVariables(@Nullable Output<Map<String,String>> environmentVariables) {
            this.environmentVariables = environmentVariables;
            return this;
        }

        public Builder environmentVariables(@Nullable Map<String,String> environmentVariables) {
            this.environmentVariables = Output.ofNullable(environmentVariables);
            return this;
        }

        public Builder errorThreshold(@Nullable Output<Integer> errorThreshold) {
            this.errorThreshold = errorThreshold;
            return this;
        }

        public Builder errorThreshold(@Nullable Integer errorThreshold) {
            this.errorThreshold = Output.ofNullable(errorThreshold);
            return this;
        }

        public Builder loggingLevel(@Nullable Output<Either<String,BatchLoggingLevel>> loggingLevel) {
            this.loggingLevel = loggingLevel;
            return this;
        }

        public Builder loggingLevel(@Nullable Either<String,BatchLoggingLevel> loggingLevel) {
            this.loggingLevel = Output.ofNullable(loggingLevel);
            return this;
        }

        public Builder miniBatchSize(@Nullable Output<Double> miniBatchSize) {
            this.miniBatchSize = miniBatchSize;
            return this;
        }

        public Builder miniBatchSize(@Nullable Double miniBatchSize) {
            this.miniBatchSize = Output.ofNullable(miniBatchSize);
            return this;
        }

        public Builder model(@Nullable Output<Object> model) {
            this.model = model;
            return this;
        }

        public Builder model(@Nullable Object model) {
            this.model = Output.ofNullable(model);
            return this;
        }

        public Builder outputConfiguration(@Nullable Output<BatchOutputConfigurationArgs> outputConfiguration) {
            this.outputConfiguration = outputConfiguration;
            return this;
        }

        public Builder outputConfiguration(@Nullable BatchOutputConfigurationArgs outputConfiguration) {
            this.outputConfiguration = Output.ofNullable(outputConfiguration);
            return this;
        }

        public Builder partitionKeys(@Nullable Output<List<String>> partitionKeys) {
            this.partitionKeys = partitionKeys;
            return this;
        }

        public Builder partitionKeys(@Nullable List<String> partitionKeys) {
            this.partitionKeys = Output.ofNullable(partitionKeys);
            return this;
        }

        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            this.properties = properties;
            return this;
        }

        public Builder properties(@Nullable Map<String,String> properties) {
            this.properties = Output.ofNullable(properties);
            return this;
        }

        public Builder retrySettings(@Nullable Output<BatchRetrySettingsArgs> retrySettings) {
            this.retrySettings = retrySettings;
            return this;
        }

        public Builder retrySettings(@Nullable BatchRetrySettingsArgs retrySettings) {
            this.retrySettings = Output.ofNullable(retrySettings);
            return this;
        }
        public BatchDeploymentArgs build() {
            return new BatchDeploymentArgs(codeConfiguration, compute, description, environmentId, environmentVariables, errorThreshold, loggingLevel, miniBatchSize, model, outputConfiguration, partitionKeys, properties, retrySettings);
        }
    }
}
