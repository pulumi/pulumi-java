// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabricmesh.inputs;

import io.pulumi.azurenative.servicefabricmesh.inputs.ApplicationScopedVolumeArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.ContainerLabelArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.DiagnosticsRefArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.EndpointPropertiesArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.EnvironmentVariableArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.ImageRegistryCredentialArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.ReliableCollectionsRefArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.ResourceRequirementsArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.SettingArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.VolumeReferenceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes a container and its runtime properties.
 * 
 */
public final class ContainerCodePackagePropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContainerCodePackagePropertiesArgs Empty = new ContainerCodePackagePropertiesArgs();

    /**
     * Command array to execute within the container in exec form.
     * 
     */
    @InputImport(name="commands")
      private final @Nullable Input<List<String>> commands;

    public Input<List<String>> getCommands() {
        return this.commands == null ? Input.empty() : this.commands;
    }

    /**
     * Reference to sinks in DiagnosticsDescription.
     * 
     */
    @InputImport(name="diagnostics")
      private final @Nullable Input<DiagnosticsRefArgs> diagnostics;

    public Input<DiagnosticsRefArgs> getDiagnostics() {
        return this.diagnostics == null ? Input.empty() : this.diagnostics;
    }

    /**
     * The endpoints exposed by this container.
     * 
     */
    @InputImport(name="endpoints")
      private final @Nullable Input<List<EndpointPropertiesArgs>> endpoints;

    public Input<List<EndpointPropertiesArgs>> getEndpoints() {
        return this.endpoints == null ? Input.empty() : this.endpoints;
    }

    /**
     * Override for the default entry point in the container.
     * 
     */
    @InputImport(name="entrypoint")
      private final @Nullable Input<String> entrypoint;

    public Input<String> getEntrypoint() {
        return this.entrypoint == null ? Input.empty() : this.entrypoint;
    }

    /**
     * The environment variables to set in this container
     * 
     */
    @InputImport(name="environmentVariables")
      private final @Nullable Input<List<EnvironmentVariableArgs>> environmentVariables;

    public Input<List<EnvironmentVariableArgs>> getEnvironmentVariables() {
        return this.environmentVariables == null ? Input.empty() : this.environmentVariables;
    }

    /**
     * The Container image to use.
     * 
     */
    @InputImport(name="image", required=true)
      private final Input<String> image;

    public Input<String> getImage() {
        return this.image;
    }

    /**
     * Image registry credential.
     * 
     */
    @InputImport(name="imageRegistryCredential")
      private final @Nullable Input<ImageRegistryCredentialArgs> imageRegistryCredential;

    public Input<ImageRegistryCredentialArgs> getImageRegistryCredential() {
        return this.imageRegistryCredential == null ? Input.empty() : this.imageRegistryCredential;
    }

    /**
     * The labels to set in this container.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<List<ContainerLabelArgs>> labels;

    public Input<List<ContainerLabelArgs>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * The name of the code package.
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details.
     * 
     */
    @InputImport(name="reliableCollectionsRefs")
      private final @Nullable Input<List<ReliableCollectionsRefArgs>> reliableCollectionsRefs;

    public Input<List<ReliableCollectionsRefArgs>> getReliableCollectionsRefs() {
        return this.reliableCollectionsRefs == null ? Input.empty() : this.reliableCollectionsRefs;
    }

    /**
     * The resources required by this container.
     * 
     */
    @InputImport(name="resources", required=true)
      private final Input<ResourceRequirementsArgs> resources;

    public Input<ResourceRequirementsArgs> getResources() {
        return this.resources;
    }

    /**
     * The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets".
     * 
     */
    @InputImport(name="settings")
      private final @Nullable Input<List<SettingArgs>> settings;

    public Input<List<SettingArgs>> getSettings() {
        return this.settings == null ? Input.empty() : this.settings;
    }

    /**
     * Volumes to be attached to the container. The lifetime of these volumes is independent of the application's lifetime.
     * 
     */
    @InputImport(name="volumeRefs")
      private final @Nullable Input<List<VolumeReferenceArgs>> volumeRefs;

    public Input<List<VolumeReferenceArgs>> getVolumeRefs() {
        return this.volumeRefs == null ? Input.empty() : this.volumeRefs;
    }

    /**
     * Volumes to be attached to the container. The lifetime of these volumes is scoped to the application's lifetime.
     * 
     */
    @InputImport(name="volumes")
      private final @Nullable Input<List<ApplicationScopedVolumeArgs>> volumes;

    public Input<List<ApplicationScopedVolumeArgs>> getVolumes() {
        return this.volumes == null ? Input.empty() : this.volumes;
    }

    public ContainerCodePackagePropertiesArgs(
        @Nullable Input<List<String>> commands,
        @Nullable Input<DiagnosticsRefArgs> diagnostics,
        @Nullable Input<List<EndpointPropertiesArgs>> endpoints,
        @Nullable Input<String> entrypoint,
        @Nullable Input<List<EnvironmentVariableArgs>> environmentVariables,
        Input<String> image,
        @Nullable Input<ImageRegistryCredentialArgs> imageRegistryCredential,
        @Nullable Input<List<ContainerLabelArgs>> labels,
        Input<String> name,
        @Nullable Input<List<ReliableCollectionsRefArgs>> reliableCollectionsRefs,
        Input<ResourceRequirementsArgs> resources,
        @Nullable Input<List<SettingArgs>> settings,
        @Nullable Input<List<VolumeReferenceArgs>> volumeRefs,
        @Nullable Input<List<ApplicationScopedVolumeArgs>> volumes) {
        this.commands = commands;
        this.diagnostics = diagnostics;
        this.endpoints = endpoints;
        this.entrypoint = entrypoint;
        this.environmentVariables = environmentVariables;
        this.image = Objects.requireNonNull(image, "expected parameter 'image' to be non-null");
        this.imageRegistryCredential = imageRegistryCredential;
        this.labels = labels;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.reliableCollectionsRefs = reliableCollectionsRefs;
        this.resources = Objects.requireNonNull(resources, "expected parameter 'resources' to be non-null");
        this.settings = settings;
        this.volumeRefs = volumeRefs;
        this.volumes = volumes;
    }

    private ContainerCodePackagePropertiesArgs() {
        this.commands = Input.empty();
        this.diagnostics = Input.empty();
        this.endpoints = Input.empty();
        this.entrypoint = Input.empty();
        this.environmentVariables = Input.empty();
        this.image = Input.empty();
        this.imageRegistryCredential = Input.empty();
        this.labels = Input.empty();
        this.name = Input.empty();
        this.reliableCollectionsRefs = Input.empty();
        this.resources = Input.empty();
        this.settings = Input.empty();
        this.volumeRefs = Input.empty();
        this.volumes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerCodePackagePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> commands;
        private @Nullable Input<DiagnosticsRefArgs> diagnostics;
        private @Nullable Input<List<EndpointPropertiesArgs>> endpoints;
        private @Nullable Input<String> entrypoint;
        private @Nullable Input<List<EnvironmentVariableArgs>> environmentVariables;
        private Input<String> image;
        private @Nullable Input<ImageRegistryCredentialArgs> imageRegistryCredential;
        private @Nullable Input<List<ContainerLabelArgs>> labels;
        private Input<String> name;
        private @Nullable Input<List<ReliableCollectionsRefArgs>> reliableCollectionsRefs;
        private Input<ResourceRequirementsArgs> resources;
        private @Nullable Input<List<SettingArgs>> settings;
        private @Nullable Input<List<VolumeReferenceArgs>> volumeRefs;
        private @Nullable Input<List<ApplicationScopedVolumeArgs>> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerCodePackagePropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commands = defaults.commands;
    	      this.diagnostics = defaults.diagnostics;
    	      this.endpoints = defaults.endpoints;
    	      this.entrypoint = defaults.entrypoint;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.image = defaults.image;
    	      this.imageRegistryCredential = defaults.imageRegistryCredential;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.reliableCollectionsRefs = defaults.reliableCollectionsRefs;
    	      this.resources = defaults.resources;
    	      this.settings = defaults.settings;
    	      this.volumeRefs = defaults.volumeRefs;
    	      this.volumes = defaults.volumes;
        }

        public Builder commands(@Nullable Input<List<String>> commands) {
            this.commands = commands;
            return this;
        }

        public Builder commands(@Nullable List<String> commands) {
            this.commands = Input.ofNullable(commands);
            return this;
        }

        public Builder diagnostics(@Nullable Input<DiagnosticsRefArgs> diagnostics) {
            this.diagnostics = diagnostics;
            return this;
        }

        public Builder diagnostics(@Nullable DiagnosticsRefArgs diagnostics) {
            this.diagnostics = Input.ofNullable(diagnostics);
            return this;
        }

        public Builder endpoints(@Nullable Input<List<EndpointPropertiesArgs>> endpoints) {
            this.endpoints = endpoints;
            return this;
        }

        public Builder endpoints(@Nullable List<EndpointPropertiesArgs> endpoints) {
            this.endpoints = Input.ofNullable(endpoints);
            return this;
        }

        public Builder entrypoint(@Nullable Input<String> entrypoint) {
            this.entrypoint = entrypoint;
            return this;
        }

        public Builder entrypoint(@Nullable String entrypoint) {
            this.entrypoint = Input.ofNullable(entrypoint);
            return this;
        }

        public Builder environmentVariables(@Nullable Input<List<EnvironmentVariableArgs>> environmentVariables) {
            this.environmentVariables = environmentVariables;
            return this;
        }

        public Builder environmentVariables(@Nullable List<EnvironmentVariableArgs> environmentVariables) {
            this.environmentVariables = Input.ofNullable(environmentVariables);
            return this;
        }

        public Builder image(Input<String> image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }

        public Builder image(String image) {
            this.image = Input.of(Objects.requireNonNull(image));
            return this;
        }

        public Builder imageRegistryCredential(@Nullable Input<ImageRegistryCredentialArgs> imageRegistryCredential) {
            this.imageRegistryCredential = imageRegistryCredential;
            return this;
        }

        public Builder imageRegistryCredential(@Nullable ImageRegistryCredentialArgs imageRegistryCredential) {
            this.imageRegistryCredential = Input.ofNullable(imageRegistryCredential);
            return this;
        }

        public Builder labels(@Nullable Input<List<ContainerLabelArgs>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable List<ContainerLabelArgs> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder name(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder reliableCollectionsRefs(@Nullable Input<List<ReliableCollectionsRefArgs>> reliableCollectionsRefs) {
            this.reliableCollectionsRefs = reliableCollectionsRefs;
            return this;
        }

        public Builder reliableCollectionsRefs(@Nullable List<ReliableCollectionsRefArgs> reliableCollectionsRefs) {
            this.reliableCollectionsRefs = Input.ofNullable(reliableCollectionsRefs);
            return this;
        }

        public Builder resources(Input<ResourceRequirementsArgs> resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }

        public Builder resources(ResourceRequirementsArgs resources) {
            this.resources = Input.of(Objects.requireNonNull(resources));
            return this;
        }

        public Builder settings(@Nullable Input<List<SettingArgs>> settings) {
            this.settings = settings;
            return this;
        }

        public Builder settings(@Nullable List<SettingArgs> settings) {
            this.settings = Input.ofNullable(settings);
            return this;
        }

        public Builder volumeRefs(@Nullable Input<List<VolumeReferenceArgs>> volumeRefs) {
            this.volumeRefs = volumeRefs;
            return this;
        }

        public Builder volumeRefs(@Nullable List<VolumeReferenceArgs> volumeRefs) {
            this.volumeRefs = Input.ofNullable(volumeRefs);
            return this;
        }

        public Builder volumes(@Nullable Input<List<ApplicationScopedVolumeArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder volumes(@Nullable List<ApplicationScopedVolumeArgs> volumes) {
            this.volumes = Input.ofNullable(volumes);
            return this;
        }
        public ContainerCodePackagePropertiesArgs build() {
            return new ContainerCodePackagePropertiesArgs(commands, diagnostics, endpoints, entrypoint, environmentVariables, image, imageRegistryCredential, labels, name, reliableCollectionsRefs, resources, settings, volumeRefs, volumes);
        }
    }
}
