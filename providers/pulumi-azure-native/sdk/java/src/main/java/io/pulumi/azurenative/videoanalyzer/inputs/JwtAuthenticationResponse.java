// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.videoanalyzer.inputs;

import io.pulumi.azurenative.videoanalyzer.inputs.EccTokenKeyResponse;
import io.pulumi.azurenative.videoanalyzer.inputs.RsaTokenKeyResponse;
import io.pulumi.azurenative.videoanalyzer.inputs.TokenClaimResponse;
import io.pulumi.core.Either;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JwtAuthenticationResponse extends io.pulumi.resources.InvokeArgs {

    public static final JwtAuthenticationResponse Empty = new JwtAuthenticationResponse();

    @InputImport(name="audiences")
    private final @Nullable List<String> audiences;

    public List<String> getAudiences() {
        return this.audiences == null ? List.of() : this.audiences;
    }

    @InputImport(name="claims")
    private final @Nullable List<TokenClaimResponse> claims;

    public List<TokenClaimResponse> getClaims() {
        return this.claims == null ? List.of() : this.claims;
    }

    @InputImport(name="issuers")
    private final @Nullable List<String> issuers;

    public List<String> getIssuers() {
        return this.issuers == null ? List.of() : this.issuers;
    }

    @InputImport(name="keys")
    private final @Nullable List<Either<EccTokenKeyResponse,RsaTokenKeyResponse>> keys;

    public List<Either<EccTokenKeyResponse,RsaTokenKeyResponse>> getKeys() {
        return this.keys == null ? List.of() : this.keys;
    }

    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    public JwtAuthenticationResponse(
        @Nullable List<String> audiences,
        @Nullable List<TokenClaimResponse> claims,
        @Nullable List<String> issuers,
        @Nullable List<Either<EccTokenKeyResponse,RsaTokenKeyResponse>> keys,
        String type) {
        this.audiences = audiences;
        this.claims = claims;
        this.issuers = issuers;
        this.keys = keys;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private JwtAuthenticationResponse() {
        this.audiences = List.of();
        this.claims = List.of();
        this.issuers = List.of();
        this.keys = List.of();
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JwtAuthenticationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> audiences;
        private @Nullable List<TokenClaimResponse> claims;
        private @Nullable List<String> issuers;
        private @Nullable List<Either<EccTokenKeyResponse,RsaTokenKeyResponse>> keys;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(JwtAuthenticationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.claims = defaults.claims;
    	      this.issuers = defaults.issuers;
    	      this.keys = defaults.keys;
    	      this.type = defaults.type;
        }

        public Builder setAudiences(@Nullable List<String> audiences) {
            this.audiences = audiences;
            return this;
        }

        public Builder setClaims(@Nullable List<TokenClaimResponse> claims) {
            this.claims = claims;
            return this;
        }

        public Builder setIssuers(@Nullable List<String> issuers) {
            this.issuers = issuers;
            return this;
        }

        public Builder setKeys(@Nullable List<Either<EccTokenKeyResponse,RsaTokenKeyResponse>> keys) {
            this.keys = keys;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public JwtAuthenticationResponse build() {
            return new JwtAuthenticationResponse(audiences, claims, issuers, keys, type);
        }
    }
}
