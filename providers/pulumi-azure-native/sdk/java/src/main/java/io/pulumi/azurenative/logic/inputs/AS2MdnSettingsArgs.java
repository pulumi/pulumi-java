// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.azurenative.logic.enums.HashingAlgorithm;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The AS2 agreement mdn settings.
 * 
 */
public final class AS2MdnSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AS2MdnSettingsArgs Empty = new AS2MdnSettingsArgs();

    /**
     * The disposition notification to header value.
     * 
     */
    @InputImport(name="dispositionNotificationTo")
      private final @Nullable Output<String> dispositionNotificationTo;

    public Output<String> getDispositionNotificationTo() {
        return this.dispositionNotificationTo == null ? Output.empty() : this.dispositionNotificationTo;
    }

    /**
     * The MDN text.
     * 
     */
    @InputImport(name="mdnText")
      private final @Nullable Output<String> mdnText;

    public Output<String> getMdnText() {
        return this.mdnText == null ? Output.empty() : this.mdnText;
    }

    /**
     * The signing or hashing algorithm.
     * 
     */
    @InputImport(name="micHashingAlgorithm", required=true)
      private final Output<Either<String,HashingAlgorithm>> micHashingAlgorithm;

    public Output<Either<String,HashingAlgorithm>> getMicHashingAlgorithm() {
        return this.micHashingAlgorithm;
    }

    /**
     * The value indicating whether to send or request a MDN.
     * 
     */
    @InputImport(name="needMDN", required=true)
      private final Output<Boolean> needMDN;

    public Output<Boolean> getNeedMDN() {
        return this.needMDN;
    }

    /**
     * The receipt delivery URL.
     * 
     */
    @InputImport(name="receiptDeliveryUrl")
      private final @Nullable Output<String> receiptDeliveryUrl;

    public Output<String> getReceiptDeliveryUrl() {
        return this.receiptDeliveryUrl == null ? Output.empty() : this.receiptDeliveryUrl;
    }

    /**
     * The value indicating whether to send inbound MDN to message box.
     * 
     */
    @InputImport(name="sendInboundMDNToMessageBox", required=true)
      private final Output<Boolean> sendInboundMDNToMessageBox;

    public Output<Boolean> getSendInboundMDNToMessageBox() {
        return this.sendInboundMDNToMessageBox;
    }

    /**
     * The value indicating whether to send the asynchronous MDN.
     * 
     */
    @InputImport(name="sendMDNAsynchronously", required=true)
      private final Output<Boolean> sendMDNAsynchronously;

    public Output<Boolean> getSendMDNAsynchronously() {
        return this.sendMDNAsynchronously;
    }

    /**
     * The value indicating whether the MDN needs to be signed or not.
     * 
     */
    @InputImport(name="signMDN", required=true)
      private final Output<Boolean> signMDN;

    public Output<Boolean> getSignMDN() {
        return this.signMDN;
    }

    /**
     * The value indicating whether to sign the outbound MDN if optional.
     * 
     */
    @InputImport(name="signOutboundMDNIfOptional", required=true)
      private final Output<Boolean> signOutboundMDNIfOptional;

    public Output<Boolean> getSignOutboundMDNIfOptional() {
        return this.signOutboundMDNIfOptional;
    }

    public AS2MdnSettingsArgs(
        @Nullable Output<String> dispositionNotificationTo,
        @Nullable Output<String> mdnText,
        Output<Either<String,HashingAlgorithm>> micHashingAlgorithm,
        Output<Boolean> needMDN,
        @Nullable Output<String> receiptDeliveryUrl,
        Output<Boolean> sendInboundMDNToMessageBox,
        Output<Boolean> sendMDNAsynchronously,
        Output<Boolean> signMDN,
        Output<Boolean> signOutboundMDNIfOptional) {
        this.dispositionNotificationTo = dispositionNotificationTo;
        this.mdnText = mdnText;
        this.micHashingAlgorithm = Objects.requireNonNull(micHashingAlgorithm, "expected parameter 'micHashingAlgorithm' to be non-null");
        this.needMDN = Objects.requireNonNull(needMDN, "expected parameter 'needMDN' to be non-null");
        this.receiptDeliveryUrl = receiptDeliveryUrl;
        this.sendInboundMDNToMessageBox = Objects.requireNonNull(sendInboundMDNToMessageBox, "expected parameter 'sendInboundMDNToMessageBox' to be non-null");
        this.sendMDNAsynchronously = Objects.requireNonNull(sendMDNAsynchronously, "expected parameter 'sendMDNAsynchronously' to be non-null");
        this.signMDN = Objects.requireNonNull(signMDN, "expected parameter 'signMDN' to be non-null");
        this.signOutboundMDNIfOptional = Objects.requireNonNull(signOutboundMDNIfOptional, "expected parameter 'signOutboundMDNIfOptional' to be non-null");
    }

    private AS2MdnSettingsArgs() {
        this.dispositionNotificationTo = Output.empty();
        this.mdnText = Output.empty();
        this.micHashingAlgorithm = Output.empty();
        this.needMDN = Output.empty();
        this.receiptDeliveryUrl = Output.empty();
        this.sendInboundMDNToMessageBox = Output.empty();
        this.sendMDNAsynchronously = Output.empty();
        this.signMDN = Output.empty();
        this.signOutboundMDNIfOptional = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AS2MdnSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> dispositionNotificationTo;
        private @Nullable Output<String> mdnText;
        private Output<Either<String,HashingAlgorithm>> micHashingAlgorithm;
        private Output<Boolean> needMDN;
        private @Nullable Output<String> receiptDeliveryUrl;
        private Output<Boolean> sendInboundMDNToMessageBox;
        private Output<Boolean> sendMDNAsynchronously;
        private Output<Boolean> signMDN;
        private Output<Boolean> signOutboundMDNIfOptional;

        public Builder() {
    	      // Empty
        }

        public Builder(AS2MdnSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dispositionNotificationTo = defaults.dispositionNotificationTo;
    	      this.mdnText = defaults.mdnText;
    	      this.micHashingAlgorithm = defaults.micHashingAlgorithm;
    	      this.needMDN = defaults.needMDN;
    	      this.receiptDeliveryUrl = defaults.receiptDeliveryUrl;
    	      this.sendInboundMDNToMessageBox = defaults.sendInboundMDNToMessageBox;
    	      this.sendMDNAsynchronously = defaults.sendMDNAsynchronously;
    	      this.signMDN = defaults.signMDN;
    	      this.signOutboundMDNIfOptional = defaults.signOutboundMDNIfOptional;
        }

        public Builder dispositionNotificationTo(@Nullable Output<String> dispositionNotificationTo) {
            this.dispositionNotificationTo = dispositionNotificationTo;
            return this;
        }

        public Builder dispositionNotificationTo(@Nullable String dispositionNotificationTo) {
            this.dispositionNotificationTo = Output.ofNullable(dispositionNotificationTo);
            return this;
        }

        public Builder mdnText(@Nullable Output<String> mdnText) {
            this.mdnText = mdnText;
            return this;
        }

        public Builder mdnText(@Nullable String mdnText) {
            this.mdnText = Output.ofNullable(mdnText);
            return this;
        }

        public Builder micHashingAlgorithm(Output<Either<String,HashingAlgorithm>> micHashingAlgorithm) {
            this.micHashingAlgorithm = Objects.requireNonNull(micHashingAlgorithm);
            return this;
        }

        public Builder micHashingAlgorithm(Either<String,HashingAlgorithm> micHashingAlgorithm) {
            this.micHashingAlgorithm = Output.of(Objects.requireNonNull(micHashingAlgorithm));
            return this;
        }

        public Builder needMDN(Output<Boolean> needMDN) {
            this.needMDN = Objects.requireNonNull(needMDN);
            return this;
        }

        public Builder needMDN(Boolean needMDN) {
            this.needMDN = Output.of(Objects.requireNonNull(needMDN));
            return this;
        }

        public Builder receiptDeliveryUrl(@Nullable Output<String> receiptDeliveryUrl) {
            this.receiptDeliveryUrl = receiptDeliveryUrl;
            return this;
        }

        public Builder receiptDeliveryUrl(@Nullable String receiptDeliveryUrl) {
            this.receiptDeliveryUrl = Output.ofNullable(receiptDeliveryUrl);
            return this;
        }

        public Builder sendInboundMDNToMessageBox(Output<Boolean> sendInboundMDNToMessageBox) {
            this.sendInboundMDNToMessageBox = Objects.requireNonNull(sendInboundMDNToMessageBox);
            return this;
        }

        public Builder sendInboundMDNToMessageBox(Boolean sendInboundMDNToMessageBox) {
            this.sendInboundMDNToMessageBox = Output.of(Objects.requireNonNull(sendInboundMDNToMessageBox));
            return this;
        }

        public Builder sendMDNAsynchronously(Output<Boolean> sendMDNAsynchronously) {
            this.sendMDNAsynchronously = Objects.requireNonNull(sendMDNAsynchronously);
            return this;
        }

        public Builder sendMDNAsynchronously(Boolean sendMDNAsynchronously) {
            this.sendMDNAsynchronously = Output.of(Objects.requireNonNull(sendMDNAsynchronously));
            return this;
        }

        public Builder signMDN(Output<Boolean> signMDN) {
            this.signMDN = Objects.requireNonNull(signMDN);
            return this;
        }

        public Builder signMDN(Boolean signMDN) {
            this.signMDN = Output.of(Objects.requireNonNull(signMDN));
            return this;
        }

        public Builder signOutboundMDNIfOptional(Output<Boolean> signOutboundMDNIfOptional) {
            this.signOutboundMDNIfOptional = Objects.requireNonNull(signOutboundMDNIfOptional);
            return this;
        }

        public Builder signOutboundMDNIfOptional(Boolean signOutboundMDNIfOptional) {
            this.signOutboundMDNIfOptional = Output.of(Objects.requireNonNull(signOutboundMDNIfOptional));
            return this;
        }
        public AS2MdnSettingsArgs build() {
            return new AS2MdnSettingsArgs(dispositionNotificationTo, mdnText, micHashingAlgorithm, needMDN, receiptDeliveryUrl, sendInboundMDNToMessageBox, sendMDNAsynchronously, signMDN, signOutboundMDNIfOptional);
        }
    }
}
