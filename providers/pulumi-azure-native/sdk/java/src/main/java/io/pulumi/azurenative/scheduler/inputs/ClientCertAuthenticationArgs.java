// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.scheduler.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClientCertAuthenticationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClientCertAuthenticationArgs Empty = new ClientCertAuthenticationArgs();

    @InputImport(name="certificateExpirationDate")
    private final @Nullable Input<String> certificateExpirationDate;

    public Input<String> getCertificateExpirationDate() {
        return this.certificateExpirationDate == null ? Input.empty() : this.certificateExpirationDate;
    }

    @InputImport(name="certificateSubjectName")
    private final @Nullable Input<String> certificateSubjectName;

    public Input<String> getCertificateSubjectName() {
        return this.certificateSubjectName == null ? Input.empty() : this.certificateSubjectName;
    }

    @InputImport(name="certificateThumbprint")
    private final @Nullable Input<String> certificateThumbprint;

    public Input<String> getCertificateThumbprint() {
        return this.certificateThumbprint == null ? Input.empty() : this.certificateThumbprint;
    }

    @InputImport(name="password")
    private final @Nullable Input<String> password;

    public Input<String> getPassword() {
        return this.password == null ? Input.empty() : this.password;
    }

    @InputImport(name="pfx")
    private final @Nullable Input<String> pfx;

    public Input<String> getPfx() {
        return this.pfx == null ? Input.empty() : this.pfx;
    }

    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public ClientCertAuthenticationArgs(
        @Nullable Input<String> certificateExpirationDate,
        @Nullable Input<String> certificateSubjectName,
        @Nullable Input<String> certificateThumbprint,
        @Nullable Input<String> password,
        @Nullable Input<String> pfx,
        Input<String> type) {
        this.certificateExpirationDate = certificateExpirationDate;
        this.certificateSubjectName = certificateSubjectName;
        this.certificateThumbprint = certificateThumbprint;
        this.password = password;
        this.pfx = pfx;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ClientCertAuthenticationArgs() {
        this.certificateExpirationDate = Input.empty();
        this.certificateSubjectName = Input.empty();
        this.certificateThumbprint = Input.empty();
        this.password = Input.empty();
        this.pfx = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClientCertAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> certificateExpirationDate;
        private @Nullable Input<String> certificateSubjectName;
        private @Nullable Input<String> certificateThumbprint;
        private @Nullable Input<String> password;
        private @Nullable Input<String> pfx;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ClientCertAuthenticationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateExpirationDate = defaults.certificateExpirationDate;
    	      this.certificateSubjectName = defaults.certificateSubjectName;
    	      this.certificateThumbprint = defaults.certificateThumbprint;
    	      this.password = defaults.password;
    	      this.pfx = defaults.pfx;
    	      this.type = defaults.type;
        }

        public Builder setCertificateExpirationDate(@Nullable Input<String> certificateExpirationDate) {
            this.certificateExpirationDate = certificateExpirationDate;
            return this;
        }

        public Builder setCertificateExpirationDate(@Nullable String certificateExpirationDate) {
            this.certificateExpirationDate = Input.ofNullable(certificateExpirationDate);
            return this;
        }

        public Builder setCertificateSubjectName(@Nullable Input<String> certificateSubjectName) {
            this.certificateSubjectName = certificateSubjectName;
            return this;
        }

        public Builder setCertificateSubjectName(@Nullable String certificateSubjectName) {
            this.certificateSubjectName = Input.ofNullable(certificateSubjectName);
            return this;
        }

        public Builder setCertificateThumbprint(@Nullable Input<String> certificateThumbprint) {
            this.certificateThumbprint = certificateThumbprint;
            return this;
        }

        public Builder setCertificateThumbprint(@Nullable String certificateThumbprint) {
            this.certificateThumbprint = Input.ofNullable(certificateThumbprint);
            return this;
        }

        public Builder setPassword(@Nullable Input<String> password) {
            this.password = password;
            return this;
        }

        public Builder setPassword(@Nullable String password) {
            this.password = Input.ofNullable(password);
            return this;
        }

        public Builder setPfx(@Nullable Input<String> pfx) {
            this.pfx = pfx;
            return this;
        }

        public Builder setPfx(@Nullable String pfx) {
            this.pfx = Input.ofNullable(pfx);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public ClientCertAuthenticationArgs build() {
            return new ClientCertAuthenticationArgs(certificateExpirationDate, certificateSubjectName, certificateThumbprint, password, pfx, type);
        }
    }
}
