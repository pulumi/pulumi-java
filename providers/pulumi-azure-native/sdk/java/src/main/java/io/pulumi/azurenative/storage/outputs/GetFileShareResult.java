// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetFileShareResult {
    /**
     * Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
     * 
     */
    private final @Nullable String accessTier;
    /**
     * Indicates the last modification time for share access tier.
     * 
     */
    private final String accessTierChangeTime;
    /**
     * Indicates if there is a pending transition for access tier.
     * 
     */
    private final String accessTierStatus;
    /**
     * Indicates whether the share was deleted.
     * 
     */
    private final Boolean deleted;
    /**
     * The deleted time if the share was deleted.
     * 
     */
    private final String deletedTime;
    /**
     * The authentication protocol that is used for the file share. Can only be specified when creating a share.
     * 
     */
    private final @Nullable String enabledProtocols;
    /**
     * Resource Etag.
     * 
     */
    private final String etag;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * Returns the date and time the share was last modified.
     * 
     */
    private final String lastModifiedTime;
    /**
     * A name-value pair to associate with the share as metadata.
     * 
     */
    private final @Nullable Map<String,String> metadata;
    /**
     * The name of the resource
     * 
     */
    private final String name;
    /**
     * Remaining retention days for share that was soft deleted.
     * 
     */
    private final Integer remainingRetentionDays;
    /**
     * The property is for NFS share only. The default is NoRootSquash.
     * 
     */
    private final @Nullable String rootSquash;
    /**
     * The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
     * 
     */
    private final @Nullable Integer shareQuota;
    /**
     * The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
     * 
     */
    private final Double shareUsageBytes;
    /**
     * Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
     * 
     */
    private final String snapshotTime;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    private final String type;
    /**
     * The version of the share.
     * 
     */
    private final String version;

    @OutputCustomType.Constructor({"accessTier","accessTierChangeTime","accessTierStatus","deleted","deletedTime","enabledProtocols","etag","id","lastModifiedTime","metadata","name","remainingRetentionDays","rootSquash","shareQuota","shareUsageBytes","snapshotTime","type","version"})
    private GetFileShareResult(
        @Nullable String accessTier,
        String accessTierChangeTime,
        String accessTierStatus,
        Boolean deleted,
        String deletedTime,
        @Nullable String enabledProtocols,
        String etag,
        String id,
        String lastModifiedTime,
        @Nullable Map<String,String> metadata,
        String name,
        Integer remainingRetentionDays,
        @Nullable String rootSquash,
        @Nullable Integer shareQuota,
        Double shareUsageBytes,
        String snapshotTime,
        String type,
        String version) {
        this.accessTier = accessTier;
        this.accessTierChangeTime = accessTierChangeTime;
        this.accessTierStatus = accessTierStatus;
        this.deleted = deleted;
        this.deletedTime = deletedTime;
        this.enabledProtocols = enabledProtocols;
        this.etag = etag;
        this.id = id;
        this.lastModifiedTime = lastModifiedTime;
        this.metadata = metadata;
        this.name = name;
        this.remainingRetentionDays = remainingRetentionDays;
        this.rootSquash = rootSquash;
        this.shareQuota = shareQuota;
        this.shareUsageBytes = shareUsageBytes;
        this.snapshotTime = snapshotTime;
        this.type = type;
        this.version = version;
    }

    /**
     * Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
     * 
    */
    public Optional<String> getAccessTier() {
        return Optional.ofNullable(this.accessTier);
    }
    /**
     * Indicates the last modification time for share access tier.
     * 
    */
    public String getAccessTierChangeTime() {
        return this.accessTierChangeTime;
    }
    /**
     * Indicates if there is a pending transition for access tier.
     * 
    */
    public String getAccessTierStatus() {
        return this.accessTierStatus;
    }
    /**
     * Indicates whether the share was deleted.
     * 
    */
    public Boolean getDeleted() {
        return this.deleted;
    }
    /**
     * The deleted time if the share was deleted.
     * 
    */
    public String getDeletedTime() {
        return this.deletedTime;
    }
    /**
     * The authentication protocol that is used for the file share. Can only be specified when creating a share.
     * 
    */
    public Optional<String> getEnabledProtocols() {
        return Optional.ofNullable(this.enabledProtocols);
    }
    /**
     * Resource Etag.
     * 
    */
    public String getEtag() {
        return this.etag;
    }
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * Returns the date and time the share was last modified.
     * 
    */
    public String getLastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * A name-value pair to associate with the share as metadata.
     * 
    */
    public Map<String,String> getMetadata() {
        return this.metadata == null ? Map.of() : this.metadata;
    }
    /**
     * The name of the resource
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Remaining retention days for share that was soft deleted.
     * 
    */
    public Integer getRemainingRetentionDays() {
        return this.remainingRetentionDays;
    }
    /**
     * The property is for NFS share only. The default is NoRootSquash.
     * 
    */
    public Optional<String> getRootSquash() {
        return Optional.ofNullable(this.rootSquash);
    }
    /**
     * The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
     * 
    */
    public Optional<Integer> getShareQuota() {
        return Optional.ofNullable(this.shareQuota);
    }
    /**
     * The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
     * 
    */
    public Double getShareUsageBytes() {
        return this.shareUsageBytes;
    }
    /**
     * Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
     * 
    */
    public String getSnapshotTime() {
        return this.snapshotTime;
    }
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
    */
    public String getType() {
        return this.type;
    }
    /**
     * The version of the share.
     * 
    */
    public String getVersion() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFileShareResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accessTier;
        private String accessTierChangeTime;
        private String accessTierStatus;
        private Boolean deleted;
        private String deletedTime;
        private @Nullable String enabledProtocols;
        private String etag;
        private String id;
        private String lastModifiedTime;
        private @Nullable Map<String,String> metadata;
        private String name;
        private Integer remainingRetentionDays;
        private @Nullable String rootSquash;
        private @Nullable Integer shareQuota;
        private Double shareUsageBytes;
        private String snapshotTime;
        private String type;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFileShareResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTier = defaults.accessTier;
    	      this.accessTierChangeTime = defaults.accessTierChangeTime;
    	      this.accessTierStatus = defaults.accessTierStatus;
    	      this.deleted = defaults.deleted;
    	      this.deletedTime = defaults.deletedTime;
    	      this.enabledProtocols = defaults.enabledProtocols;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.remainingRetentionDays = defaults.remainingRetentionDays;
    	      this.rootSquash = defaults.rootSquash;
    	      this.shareQuota = defaults.shareQuota;
    	      this.shareUsageBytes = defaults.shareUsageBytes;
    	      this.snapshotTime = defaults.snapshotTime;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        public Builder setAccessTier(@Nullable String accessTier) {
            this.accessTier = accessTier;
            return this;
        }

        public Builder setAccessTierChangeTime(String accessTierChangeTime) {
            this.accessTierChangeTime = Objects.requireNonNull(accessTierChangeTime);
            return this;
        }

        public Builder setAccessTierStatus(String accessTierStatus) {
            this.accessTierStatus = Objects.requireNonNull(accessTierStatus);
            return this;
        }

        public Builder setDeleted(Boolean deleted) {
            this.deleted = Objects.requireNonNull(deleted);
            return this;
        }

        public Builder setDeletedTime(String deletedTime) {
            this.deletedTime = Objects.requireNonNull(deletedTime);
            return this;
        }

        public Builder setEnabledProtocols(@Nullable String enabledProtocols) {
            this.enabledProtocols = enabledProtocols;
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLastModifiedTime(String lastModifiedTime) {
            this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
            return this;
        }

        public Builder setMetadata(@Nullable Map<String,String> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setRemainingRetentionDays(Integer remainingRetentionDays) {
            this.remainingRetentionDays = Objects.requireNonNull(remainingRetentionDays);
            return this;
        }

        public Builder setRootSquash(@Nullable String rootSquash) {
            this.rootSquash = rootSquash;
            return this;
        }

        public Builder setShareQuota(@Nullable Integer shareQuota) {
            this.shareQuota = shareQuota;
            return this;
        }

        public Builder setShareUsageBytes(Double shareUsageBytes) {
            this.shareUsageBytes = Objects.requireNonNull(shareUsageBytes);
            return this;
        }

        public Builder setSnapshotTime(String snapshotTime) {
            this.snapshotTime = Objects.requireNonNull(snapshotTime);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setVersion(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetFileShareResult build() {
            return new GetFileShareResult(accessTier, accessTierChangeTime, accessTierStatus, deleted, deletedTime, enabledProtocols, etag, id, lastModifiedTime, metadata, name, remainingRetentionDays, rootSquash, shareQuota, shareUsageBytes, snapshotTime, type, version);
        }
    }
}
