// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The binding to a JavaScript function.
 * 
 */
public final class JavaScriptFunctionBindingArgs extends io.pulumi.resources.ResourceArgs {

    public static final JavaScriptFunctionBindingArgs Empty = new JavaScriptFunctionBindingArgs();

    /**
     * The JavaScript code containing a single function definition. For example: 'function (x, y) { return x + y; }'
     * 
     */
    @InputImport(name="script")
    private final @Nullable Input<String> script;

    public Input<String> getScript() {
        return this.script == null ? Input.empty() : this.script;
    }

    /**
     * Indicates the function binding type.
     * Expected value is 'Microsoft.StreamAnalytics/JavascriptUdf'.
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public JavaScriptFunctionBindingArgs(
        @Nullable Input<String> script,
        Input<String> type) {
        this.script = script;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private JavaScriptFunctionBindingArgs() {
        this.script = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JavaScriptFunctionBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> script;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(JavaScriptFunctionBindingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.script = defaults.script;
    	      this.type = defaults.type;
        }

        public Builder setScript(@Nullable Input<String> script) {
            this.script = script;
            return this;
        }

        public Builder setScript(@Nullable String script) {
            this.script = Input.ofNullable(script);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public JavaScriptFunctionBindingArgs build() {
            return new JavaScriptFunctionBindingArgs(script, type);
        }
    }
}
