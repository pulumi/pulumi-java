// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.blueprint;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RoleAssignmentArtifactArgs extends io.pulumi.resources.ResourceArgs {

    public static final RoleAssignmentArtifactArgs Empty = new RoleAssignmentArtifactArgs();

    /**
     * Name of the blueprint artifact.
     * 
     */
    @Import(name="artifactName")
      private final @Nullable Output<String> artifactName;

    public Output<String> getArtifactName() {
        return this.artifactName == null ? Codegen.empty() : this.artifactName;
    }

    /**
     * Name of the blueprint definition.
     * 
     */
    @Import(name="blueprintName", required=true)
      private final Output<String> blueprintName;

    public Output<String> getBlueprintName() {
        return this.blueprintName;
    }

    /**
     * Artifacts which need to be deployed before the specified artifact.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable Output<List<String>> dependsOn;

    public Output<List<String>> getDependsOn() {
        return this.dependsOn == null ? Codegen.empty() : this.dependsOn;
    }

    /**
     * Multi-line explain this resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * One-liner string explain this resource.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * Specifies the kind of blueprint artifact.
     * Expected value is 'roleAssignment'.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<String> kind;

    public Output<String> getKind() {
        return this.kind;
    }

    /**
     * Array of user or group identities in Azure Active Directory. The roleDefinition will apply to each identity.
     * 
     */
    @Import(name="principalIds", required=true)
      private final Output<Object> principalIds;

    public Output<Object> getPrincipalIds() {
        return this.principalIds;
    }

    /**
     * RoleAssignment will be scope to this resourceGroup. If empty, it scopes to the subscription.
     * 
     */
    @Import(name="resourceGroup")
      private final @Nullable Output<String> resourceGroup;

    public Output<String> getResourceGroup() {
        return this.resourceGroup == null ? Codegen.empty() : this.resourceGroup;
    }

    /**
     * The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}').
     * 
     */
    @Import(name="resourceScope", required=true)
      private final Output<String> resourceScope;

    public Output<String> getResourceScope() {
        return this.resourceScope;
    }

    /**
     * Azure resource ID of the RoleDefinition.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
      private final Output<String> roleDefinitionId;

    public Output<String> getRoleDefinitionId() {
        return this.roleDefinitionId;
    }

    public RoleAssignmentArtifactArgs(
        @Nullable Output<String> artifactName,
        Output<String> blueprintName,
        @Nullable Output<List<String>> dependsOn,
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        Output<String> kind,
        Output<Object> principalIds,
        @Nullable Output<String> resourceGroup,
        Output<String> resourceScope,
        Output<String> roleDefinitionId) {
        this.artifactName = artifactName;
        this.blueprintName = Objects.requireNonNull(blueprintName, "expected parameter 'blueprintName' to be non-null");
        this.dependsOn = dependsOn;
        this.description = description;
        this.displayName = displayName;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.principalIds = Objects.requireNonNull(principalIds, "expected parameter 'principalIds' to be non-null");
        this.resourceGroup = resourceGroup;
        this.resourceScope = Objects.requireNonNull(resourceScope, "expected parameter 'resourceScope' to be non-null");
        this.roleDefinitionId = Objects.requireNonNull(roleDefinitionId, "expected parameter 'roleDefinitionId' to be non-null");
    }

    private RoleAssignmentArtifactArgs() {
        this.artifactName = Codegen.empty();
        this.blueprintName = Codegen.empty();
        this.dependsOn = Codegen.empty();
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.kind = Codegen.empty();
        this.principalIds = Codegen.empty();
        this.resourceGroup = Codegen.empty();
        this.resourceScope = Codegen.empty();
        this.roleDefinitionId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoleAssignmentArtifactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> artifactName;
        private Output<String> blueprintName;
        private @Nullable Output<List<String>> dependsOn;
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private Output<String> kind;
        private Output<Object> principalIds;
        private @Nullable Output<String> resourceGroup;
        private Output<String> resourceScope;
        private Output<String> roleDefinitionId;

        public Builder() {
    	      // Empty
        }

        public Builder(RoleAssignmentArtifactArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactName = defaults.artifactName;
    	      this.blueprintName = defaults.blueprintName;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.kind = defaults.kind;
    	      this.principalIds = defaults.principalIds;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.resourceScope = defaults.resourceScope;
    	      this.roleDefinitionId = defaults.roleDefinitionId;
        }

        public Builder artifactName(@Nullable Output<String> artifactName) {
            this.artifactName = artifactName;
            return this;
        }
        public Builder artifactName(@Nullable String artifactName) {
            this.artifactName = Codegen.ofNullable(artifactName);
            return this;
        }
        public Builder blueprintName(Output<String> blueprintName) {
            this.blueprintName = Objects.requireNonNull(blueprintName);
            return this;
        }
        public Builder blueprintName(String blueprintName) {
            this.blueprintName = Output.of(Objects.requireNonNull(blueprintName));
            return this;
        }
        public Builder dependsOn(@Nullable Output<List<String>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(@Nullable List<String> dependsOn) {
            this.dependsOn = Codegen.ofNullable(dependsOn);
            return this;
        }
        public Builder dependsOn(String... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder kind(Output<String> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }
        public Builder principalIds(Output<Object> principalIds) {
            this.principalIds = Objects.requireNonNull(principalIds);
            return this;
        }
        public Builder principalIds(Object principalIds) {
            this.principalIds = Output.of(Objects.requireNonNull(principalIds));
            return this;
        }
        public Builder resourceGroup(@Nullable Output<String> resourceGroup) {
            this.resourceGroup = resourceGroup;
            return this;
        }
        public Builder resourceGroup(@Nullable String resourceGroup) {
            this.resourceGroup = Codegen.ofNullable(resourceGroup);
            return this;
        }
        public Builder resourceScope(Output<String> resourceScope) {
            this.resourceScope = Objects.requireNonNull(resourceScope);
            return this;
        }
        public Builder resourceScope(String resourceScope) {
            this.resourceScope = Output.of(Objects.requireNonNull(resourceScope));
            return this;
        }
        public Builder roleDefinitionId(Output<String> roleDefinitionId) {
            this.roleDefinitionId = Objects.requireNonNull(roleDefinitionId);
            return this;
        }
        public Builder roleDefinitionId(String roleDefinitionId) {
            this.roleDefinitionId = Output.of(Objects.requireNonNull(roleDefinitionId));
            return this;
        }        public RoleAssignmentArtifactArgs build() {
            return new RoleAssignmentArtifactArgs(artifactName, blueprintName, dependsOn, description, displayName, kind, principalIds, resourceGroup, resourceScope, roleDefinitionId);
        }
    }
}
