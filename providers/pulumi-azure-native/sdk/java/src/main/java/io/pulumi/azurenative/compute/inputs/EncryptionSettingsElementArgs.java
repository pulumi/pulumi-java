// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.azurenative.compute.inputs.KeyVaultAndKeyReferenceArgs;
import io.pulumi.azurenative.compute.inputs.KeyVaultAndSecretReferenceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Encryption settings for one disk volume.
 * 
 */
public final class EncryptionSettingsElementArgs extends io.pulumi.resources.ResourceArgs {

    public static final EncryptionSettingsElementArgs Empty = new EncryptionSettingsElementArgs();

    /**
     * Key Vault Secret Url and vault id of the disk encryption key
     * 
     */
    @InputImport(name="diskEncryptionKey")
      private final @Nullable Output<KeyVaultAndSecretReferenceArgs> diskEncryptionKey;

    public Output<KeyVaultAndSecretReferenceArgs> getDiskEncryptionKey() {
        return this.diskEncryptionKey == null ? Output.empty() : this.diskEncryptionKey;
    }

    /**
     * Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
     * 
     */
    @InputImport(name="keyEncryptionKey")
      private final @Nullable Output<KeyVaultAndKeyReferenceArgs> keyEncryptionKey;

    public Output<KeyVaultAndKeyReferenceArgs> getKeyEncryptionKey() {
        return this.keyEncryptionKey == null ? Output.empty() : this.keyEncryptionKey;
    }

    public EncryptionSettingsElementArgs(
        @Nullable Output<KeyVaultAndSecretReferenceArgs> diskEncryptionKey,
        @Nullable Output<KeyVaultAndKeyReferenceArgs> keyEncryptionKey) {
        this.diskEncryptionKey = diskEncryptionKey;
        this.keyEncryptionKey = keyEncryptionKey;
    }

    private EncryptionSettingsElementArgs() {
        this.diskEncryptionKey = Output.empty();
        this.keyEncryptionKey = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EncryptionSettingsElementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<KeyVaultAndSecretReferenceArgs> diskEncryptionKey;
        private @Nullable Output<KeyVaultAndKeyReferenceArgs> keyEncryptionKey;

        public Builder() {
    	      // Empty
        }

        public Builder(EncryptionSettingsElementArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskEncryptionKey = defaults.diskEncryptionKey;
    	      this.keyEncryptionKey = defaults.keyEncryptionKey;
        }

        public Builder diskEncryptionKey(@Nullable Output<KeyVaultAndSecretReferenceArgs> diskEncryptionKey) {
            this.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        public Builder diskEncryptionKey(@Nullable KeyVaultAndSecretReferenceArgs diskEncryptionKey) {
            this.diskEncryptionKey = Output.ofNullable(diskEncryptionKey);
            return this;
        }

        public Builder keyEncryptionKey(@Nullable Output<KeyVaultAndKeyReferenceArgs> keyEncryptionKey) {
            this.keyEncryptionKey = keyEncryptionKey;
            return this;
        }

        public Builder keyEncryptionKey(@Nullable KeyVaultAndKeyReferenceArgs keyEncryptionKey) {
            this.keyEncryptionKey = Output.ofNullable(keyEncryptionKey);
            return this;
        }
        public EncryptionSettingsElementArgs build() {
            return new EncryptionSettingsElementArgs(diskEncryptionKey, keyEncryptionKey);
        }
    }
}
