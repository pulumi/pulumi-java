// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import io.pulumi.azurenative.datafactory.inputs.ActivityPolicyArgs;
import io.pulumi.azurenative.datafactory.inputs.AmazonS3CompatibleReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.AmazonS3ReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureBlobFSReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureBlobStorageReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureDataLakeStoreReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureFileStorageReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.DatasetReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.FileServerReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.FtpReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.GoogleCloudStorageReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.HdfsReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.HttpReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.LogStorageSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.OracleCloudStorageReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.SftpReadSettingsArgs;
import io.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Delete activity.
 * 
 */
public final class DeleteActivityArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeleteActivityArgs Empty = new DeleteActivityArgs();

    /**
     * Delete activity dataset reference.
     * 
     */
    @Import(name="dataset", required=true)
      private final Output<DatasetReferenceArgs> dataset;

    public Output<DatasetReferenceArgs> dataset() {
        return this.dataset;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    public Output<List<ActivityDependencyArgs>> dependsOn() {
        return this.dependsOn == null ? Codegen.empty() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="enableLogging")
      private final @Nullable Output<Object> enableLogging;

    public Output<Object> enableLogging() {
        return this.enableLogging == null ? Codegen.empty() : this.enableLogging;
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
      private final @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Output<LinkedServiceReferenceArgs> linkedServiceName() {
        return this.linkedServiceName == null ? Codegen.empty() : this.linkedServiceName;
    }

    /**
     * Log storage settings customer need to provide when enableLogging is true.
     * 
     */
    @Import(name="logStorageSettings")
      private final @Nullable Output<LogStorageSettingsArgs> logStorageSettings;

    public Output<LogStorageSettingsArgs> logStorageSettings() {
        return this.logStorageSettings == null ? Codegen.empty() : this.logStorageSettings;
    }

    /**
     * The max concurrent connections to connect data source at the same time.
     * 
     */
    @Import(name="maxConcurrentConnections")
      private final @Nullable Output<Integer> maxConcurrentConnections;

    public Output<Integer> maxConcurrentConnections() {
        return this.maxConcurrentConnections == null ? Codegen.empty() : this.maxConcurrentConnections;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
      private final @Nullable Output<ActivityPolicyArgs> policy;

    public Output<ActivityPolicyArgs> policy() {
        return this.policy == null ? Codegen.empty() : this.policy;
    }

    /**
     * If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="recursive")
      private final @Nullable Output<Object> recursive;

    public Output<Object> recursive() {
        return this.recursive == null ? Codegen.empty() : this.recursive;
    }

    /**
     * Delete activity store settings.
     * 
     */
    @Import(name="storeSettings")
      private final @Nullable Output<Object> storeSettings;

    public Output<Object> storeSettings() {
        return this.storeSettings == null ? Codegen.empty() : this.storeSettings;
    }

    /**
     * Type of activity.
     * Expected value is 'Delete'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
      private final @Nullable Output<List<UserPropertyArgs>> userProperties;

    public Output<List<UserPropertyArgs>> userProperties() {
        return this.userProperties == null ? Codegen.empty() : this.userProperties;
    }

    public DeleteActivityArgs(
        Output<DatasetReferenceArgs> dataset,
        @Nullable Output<List<ActivityDependencyArgs>> dependsOn,
        @Nullable Output<String> description,
        @Nullable Output<Object> enableLogging,
        @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName,
        @Nullable Output<LogStorageSettingsArgs> logStorageSettings,
        @Nullable Output<Integer> maxConcurrentConnections,
        Output<String> name,
        @Nullable Output<ActivityPolicyArgs> policy,
        @Nullable Output<Object> recursive,
        @Nullable Output<Object> storeSettings,
        Output<String> type,
        @Nullable Output<List<UserPropertyArgs>> userProperties) {
        this.dataset = Objects.requireNonNull(dataset, "expected parameter 'dataset' to be non-null");
        this.dependsOn = dependsOn;
        this.description = description;
        this.enableLogging = enableLogging;
        this.linkedServiceName = linkedServiceName;
        this.logStorageSettings = logStorageSettings;
        this.maxConcurrentConnections = maxConcurrentConnections;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.policy = policy;
        this.recursive = recursive;
        this.storeSettings = storeSettings;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userProperties = userProperties;
    }

    private DeleteActivityArgs() {
        this.dataset = Codegen.empty();
        this.dependsOn = Codegen.empty();
        this.description = Codegen.empty();
        this.enableLogging = Codegen.empty();
        this.linkedServiceName = Codegen.empty();
        this.logStorageSettings = Codegen.empty();
        this.maxConcurrentConnections = Codegen.empty();
        this.name = Codegen.empty();
        this.policy = Codegen.empty();
        this.recursive = Codegen.empty();
        this.storeSettings = Codegen.empty();
        this.type = Codegen.empty();
        this.userProperties = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeleteActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<DatasetReferenceArgs> dataset;
        private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;
        private @Nullable Output<String> description;
        private @Nullable Output<Object> enableLogging;
        private @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;
        private @Nullable Output<LogStorageSettingsArgs> logStorageSettings;
        private @Nullable Output<Integer> maxConcurrentConnections;
        private Output<String> name;
        private @Nullable Output<ActivityPolicyArgs> policy;
        private @Nullable Output<Object> recursive;
        private @Nullable Output<Object> storeSettings;
        private Output<String> type;
        private @Nullable Output<List<UserPropertyArgs>> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(DeleteActivityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.enableLogging = defaults.enableLogging;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.logStorageSettings = defaults.logStorageSettings;
    	      this.maxConcurrentConnections = defaults.maxConcurrentConnections;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.recursive = defaults.recursive;
    	      this.storeSettings = defaults.storeSettings;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder dataset(Output<DatasetReferenceArgs> dataset) {
            this.dataset = Objects.requireNonNull(dataset);
            return this;
        }
        public Builder dataset(DatasetReferenceArgs dataset) {
            this.dataset = Output.of(Objects.requireNonNull(dataset));
            return this;
        }
        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(@Nullable List<ActivityDependencyArgs> dependsOn) {
            this.dependsOn = Codegen.ofNullable(dependsOn);
            return this;
        }
        public Builder dependsOn(ActivityDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder enableLogging(@Nullable Output<Object> enableLogging) {
            this.enableLogging = enableLogging;
            return this;
        }
        public Builder enableLogging(@Nullable Object enableLogging) {
            this.enableLogging = Codegen.ofNullable(enableLogging);
            return this;
        }
        public Builder linkedServiceName(@Nullable Output<LinkedServiceReferenceArgs> linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceArgs linkedServiceName) {
            this.linkedServiceName = Codegen.ofNullable(linkedServiceName);
            return this;
        }
        public Builder logStorageSettings(@Nullable Output<LogStorageSettingsArgs> logStorageSettings) {
            this.logStorageSettings = logStorageSettings;
            return this;
        }
        public Builder logStorageSettings(@Nullable LogStorageSettingsArgs logStorageSettings) {
            this.logStorageSettings = Codegen.ofNullable(logStorageSettings);
            return this;
        }
        public Builder maxConcurrentConnections(@Nullable Output<Integer> maxConcurrentConnections) {
            this.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }
        public Builder maxConcurrentConnections(@Nullable Integer maxConcurrentConnections) {
            this.maxConcurrentConnections = Codegen.ofNullable(maxConcurrentConnections);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder policy(@Nullable Output<ActivityPolicyArgs> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable ActivityPolicyArgs policy) {
            this.policy = Codegen.ofNullable(policy);
            return this;
        }
        public Builder recursive(@Nullable Output<Object> recursive) {
            this.recursive = recursive;
            return this;
        }
        public Builder recursive(@Nullable Object recursive) {
            this.recursive = Codegen.ofNullable(recursive);
            return this;
        }
        public Builder storeSettings(@Nullable Output<Object> storeSettings) {
            this.storeSettings = storeSettings;
            return this;
        }
        public Builder storeSettings(@Nullable Object storeSettings) {
            this.storeSettings = Codegen.ofNullable(storeSettings);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyArgs> userProperties) {
            this.userProperties = Codegen.ofNullable(userProperties);
            return this;
        }
        public Builder userProperties(UserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }        public DeleteActivityArgs build() {
            return new DeleteActivityArgs(dataset, dependsOn, description, enableLogging, linkedServiceName, logStorageSettings, maxConcurrentConnections, name, policy, recursive, storeSettings, type, userProperties);
        }
    }
}
