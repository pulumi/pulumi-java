// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databoxedge.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The shipping address of the customer.
 * 
 */
public final class AddressArgs extends io.pulumi.resources.ResourceArgs {

    public static final AddressArgs Empty = new AddressArgs();

    /**
     * The address line1.
     * 
     */
    @Import(name="addressLine1")
      private final @Nullable Output<String> addressLine1;

    public Output<String> getAddressLine1() {
        return this.addressLine1 == null ? Output.empty() : this.addressLine1;
    }

    /**
     * The address line2.
     * 
     */
    @Import(name="addressLine2")
      private final @Nullable Output<String> addressLine2;

    public Output<String> getAddressLine2() {
        return this.addressLine2 == null ? Output.empty() : this.addressLine2;
    }

    /**
     * The address line3.
     * 
     */
    @Import(name="addressLine3")
      private final @Nullable Output<String> addressLine3;

    public Output<String> getAddressLine3() {
        return this.addressLine3 == null ? Output.empty() : this.addressLine3;
    }

    /**
     * The city name.
     * 
     */
    @Import(name="city")
      private final @Nullable Output<String> city;

    public Output<String> getCity() {
        return this.city == null ? Output.empty() : this.city;
    }

    /**
     * The country name.
     * 
     */
    @Import(name="country", required=true)
      private final Output<String> country;

    public Output<String> getCountry() {
        return this.country;
    }

    /**
     * The postal code.
     * 
     */
    @Import(name="postalCode")
      private final @Nullable Output<String> postalCode;

    public Output<String> getPostalCode() {
        return this.postalCode == null ? Output.empty() : this.postalCode;
    }

    /**
     * The state name.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> getState() {
        return this.state == null ? Output.empty() : this.state;
    }

    public AddressArgs(
        @Nullable Output<String> addressLine1,
        @Nullable Output<String> addressLine2,
        @Nullable Output<String> addressLine3,
        @Nullable Output<String> city,
        Output<String> country,
        @Nullable Output<String> postalCode,
        @Nullable Output<String> state) {
        this.addressLine1 = addressLine1;
        this.addressLine2 = addressLine2;
        this.addressLine3 = addressLine3;
        this.city = city;
        this.country = Objects.requireNonNull(country, "expected parameter 'country' to be non-null");
        this.postalCode = postalCode;
        this.state = state;
    }

    private AddressArgs() {
        this.addressLine1 = Output.empty();
        this.addressLine2 = Output.empty();
        this.addressLine3 = Output.empty();
        this.city = Output.empty();
        this.country = Output.empty();
        this.postalCode = Output.empty();
        this.state = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> addressLine1;
        private @Nullable Output<String> addressLine2;
        private @Nullable Output<String> addressLine3;
        private @Nullable Output<String> city;
        private Output<String> country;
        private @Nullable Output<String> postalCode;
        private @Nullable Output<String> state;

        public Builder() {
    	      // Empty
        }

        public Builder(AddressArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressLine1 = defaults.addressLine1;
    	      this.addressLine2 = defaults.addressLine2;
    	      this.addressLine3 = defaults.addressLine3;
    	      this.city = defaults.city;
    	      this.country = defaults.country;
    	      this.postalCode = defaults.postalCode;
    	      this.state = defaults.state;
        }

        public Builder addressLine1(@Nullable Output<String> addressLine1) {
            this.addressLine1 = addressLine1;
            return this;
        }
        public Builder addressLine1(@Nullable String addressLine1) {
            this.addressLine1 = Output.ofNullable(addressLine1);
            return this;
        }
        public Builder addressLine2(@Nullable Output<String> addressLine2) {
            this.addressLine2 = addressLine2;
            return this;
        }
        public Builder addressLine2(@Nullable String addressLine2) {
            this.addressLine2 = Output.ofNullable(addressLine2);
            return this;
        }
        public Builder addressLine3(@Nullable Output<String> addressLine3) {
            this.addressLine3 = addressLine3;
            return this;
        }
        public Builder addressLine3(@Nullable String addressLine3) {
            this.addressLine3 = Output.ofNullable(addressLine3);
            return this;
        }
        public Builder city(@Nullable Output<String> city) {
            this.city = city;
            return this;
        }
        public Builder city(@Nullable String city) {
            this.city = Output.ofNullable(city);
            return this;
        }
        public Builder country(Output<String> country) {
            this.country = Objects.requireNonNull(country);
            return this;
        }
        public Builder country(String country) {
            this.country = Output.of(Objects.requireNonNull(country));
            return this;
        }
        public Builder postalCode(@Nullable Output<String> postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        public Builder postalCode(@Nullable String postalCode) {
            this.postalCode = Output.ofNullable(postalCode);
            return this;
        }
        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = Output.ofNullable(state);
            return this;
        }        public AddressArgs build() {
            return new AddressArgs(addressLine1, addressLine2, addressLine3, city, country, postalCode, state);
        }
    }
}
