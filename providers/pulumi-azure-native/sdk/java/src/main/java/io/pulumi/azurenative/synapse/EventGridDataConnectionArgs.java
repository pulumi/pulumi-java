// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.synapse;

import io.pulumi.azurenative.synapse.enums.BlobStorageEventType;
import io.pulumi.azurenative.synapse.enums.EventGridDataFormat;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventGridDataConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventGridDataConnectionArgs Empty = new EventGridDataConnectionArgs();

    /**
     * The name of blob storage event type to process.
     * 
     */
    @Import(name="blobStorageEventType")
      private final @Nullable Output<Either<String,BlobStorageEventType>> blobStorageEventType;

    public Output<Either<String,BlobStorageEventType>> getBlobStorageEventType() {
        return this.blobStorageEventType == null ? Output.empty() : this.blobStorageEventType;
    }

    /**
     * The event hub consumer group.
     * 
     */
    @Import(name="consumerGroup", required=true)
      private final Output<String> consumerGroup;

    public Output<String> getConsumerGroup() {
        return this.consumerGroup;
    }

    /**
     * The name of the data connection.
     * 
     */
    @Import(name="dataConnectionName")
      private final @Nullable Output<String> dataConnectionName;

    public Output<String> getDataConnectionName() {
        return this.dataConnectionName == null ? Output.empty() : this.dataConnectionName;
    }

    /**
     * The data format of the message. Optionally the data format can be added to each message.
     * 
     */
    @Import(name="dataFormat")
      private final @Nullable Output<Either<String,EventGridDataFormat>> dataFormat;

    public Output<Either<String,EventGridDataFormat>> getDataFormat() {
        return this.dataFormat == null ? Output.empty() : this.dataFormat;
    }

    /**
     * The name of the database in the Kusto pool.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName;
    }

    /**
     * The resource ID where the event grid is configured to send events.
     * 
     */
    @Import(name="eventHubResourceId", required=true)
      private final Output<String> eventHubResourceId;

    public Output<String> getEventHubResourceId() {
        return this.eventHubResourceId;
    }

    /**
     * A Boolean value that, if set to true, indicates that ingestion should ignore the first record of every file
     * 
     */
    @Import(name="ignoreFirstRecord")
      private final @Nullable Output<Boolean> ignoreFirstRecord;

    public Output<Boolean> getIgnoreFirstRecord() {
        return this.ignoreFirstRecord == null ? Output.empty() : this.ignoreFirstRecord;
    }

    /**
     * Kind of the endpoint for the data connection
     * Expected value is 'EventGrid'.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<String> kind;

    public Output<String> getKind() {
        return this.kind;
    }

    /**
     * The name of the Kusto pool.
     * 
     */
    @Import(name="kustoPoolName", required=true)
      private final Output<String> kustoPoolName;

    public Output<String> getKustoPoolName() {
        return this.kustoPoolName;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
     * 
     */
    @Import(name="mappingRuleName")
      private final @Nullable Output<String> mappingRuleName;

    public Output<String> getMappingRuleName() {
        return this.mappingRuleName == null ? Output.empty() : this.mappingRuleName;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource ID of the storage account where the data resides.
     * 
     */
    @Import(name="storageAccountResourceId", required=true)
      private final Output<String> storageAccountResourceId;

    public Output<String> getStorageAccountResourceId() {
        return this.storageAccountResourceId;
    }

    /**
     * The table where the data should be ingested. Optionally the table information can be added to each message.
     * 
     */
    @Import(name="tableName")
      private final @Nullable Output<String> tableName;

    public Output<String> getTableName() {
        return this.tableName == null ? Output.empty() : this.tableName;
    }

    /**
     * The name of the workspace
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    public EventGridDataConnectionArgs(
        @Nullable Output<Either<String,BlobStorageEventType>> blobStorageEventType,
        Output<String> consumerGroup,
        @Nullable Output<String> dataConnectionName,
        @Nullable Output<Either<String,EventGridDataFormat>> dataFormat,
        Output<String> databaseName,
        Output<String> eventHubResourceId,
        @Nullable Output<Boolean> ignoreFirstRecord,
        Output<String> kind,
        Output<String> kustoPoolName,
        @Nullable Output<String> location,
        @Nullable Output<String> mappingRuleName,
        Output<String> resourceGroupName,
        Output<String> storageAccountResourceId,
        @Nullable Output<String> tableName,
        Output<String> workspaceName) {
        this.blobStorageEventType = blobStorageEventType;
        this.consumerGroup = Objects.requireNonNull(consumerGroup, "expected parameter 'consumerGroup' to be non-null");
        this.dataConnectionName = dataConnectionName;
        this.dataFormat = dataFormat;
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.eventHubResourceId = Objects.requireNonNull(eventHubResourceId, "expected parameter 'eventHubResourceId' to be non-null");
        this.ignoreFirstRecord = ignoreFirstRecord;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.kustoPoolName = Objects.requireNonNull(kustoPoolName, "expected parameter 'kustoPoolName' to be non-null");
        this.location = location;
        this.mappingRuleName = mappingRuleName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.storageAccountResourceId = Objects.requireNonNull(storageAccountResourceId, "expected parameter 'storageAccountResourceId' to be non-null");
        this.tableName = tableName;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private EventGridDataConnectionArgs() {
        this.blobStorageEventType = Output.empty();
        this.consumerGroup = Output.empty();
        this.dataConnectionName = Output.empty();
        this.dataFormat = Output.empty();
        this.databaseName = Output.empty();
        this.eventHubResourceId = Output.empty();
        this.ignoreFirstRecord = Output.empty();
        this.kind = Output.empty();
        this.kustoPoolName = Output.empty();
        this.location = Output.empty();
        this.mappingRuleName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.storageAccountResourceId = Output.empty();
        this.tableName = Output.empty();
        this.workspaceName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventGridDataConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,BlobStorageEventType>> blobStorageEventType;
        private Output<String> consumerGroup;
        private @Nullable Output<String> dataConnectionName;
        private @Nullable Output<Either<String,EventGridDataFormat>> dataFormat;
        private Output<String> databaseName;
        private Output<String> eventHubResourceId;
        private @Nullable Output<Boolean> ignoreFirstRecord;
        private Output<String> kind;
        private Output<String> kustoPoolName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> mappingRuleName;
        private Output<String> resourceGroupName;
        private Output<String> storageAccountResourceId;
        private @Nullable Output<String> tableName;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(EventGridDataConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobStorageEventType = defaults.blobStorageEventType;
    	      this.consumerGroup = defaults.consumerGroup;
    	      this.dataConnectionName = defaults.dataConnectionName;
    	      this.dataFormat = defaults.dataFormat;
    	      this.databaseName = defaults.databaseName;
    	      this.eventHubResourceId = defaults.eventHubResourceId;
    	      this.ignoreFirstRecord = defaults.ignoreFirstRecord;
    	      this.kind = defaults.kind;
    	      this.kustoPoolName = defaults.kustoPoolName;
    	      this.location = defaults.location;
    	      this.mappingRuleName = defaults.mappingRuleName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.storageAccountResourceId = defaults.storageAccountResourceId;
    	      this.tableName = defaults.tableName;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder blobStorageEventType(@Nullable Output<Either<String,BlobStorageEventType>> blobStorageEventType) {
            this.blobStorageEventType = blobStorageEventType;
            return this;
        }

        public Builder blobStorageEventType(@Nullable Either<String,BlobStorageEventType> blobStorageEventType) {
            this.blobStorageEventType = Output.ofNullable(blobStorageEventType);
            return this;
        }

        public Builder consumerGroup(Output<String> consumerGroup) {
            this.consumerGroup = Objects.requireNonNull(consumerGroup);
            return this;
        }

        public Builder consumerGroup(String consumerGroup) {
            this.consumerGroup = Output.of(Objects.requireNonNull(consumerGroup));
            return this;
        }

        public Builder dataConnectionName(@Nullable Output<String> dataConnectionName) {
            this.dataConnectionName = dataConnectionName;
            return this;
        }

        public Builder dataConnectionName(@Nullable String dataConnectionName) {
            this.dataConnectionName = Output.ofNullable(dataConnectionName);
            return this;
        }

        public Builder dataFormat(@Nullable Output<Either<String,EventGridDataFormat>> dataFormat) {
            this.dataFormat = dataFormat;
            return this;
        }

        public Builder dataFormat(@Nullable Either<String,EventGridDataFormat> dataFormat) {
            this.dataFormat = Output.ofNullable(dataFormat);
            return this;
        }

        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }

        public Builder eventHubResourceId(Output<String> eventHubResourceId) {
            this.eventHubResourceId = Objects.requireNonNull(eventHubResourceId);
            return this;
        }

        public Builder eventHubResourceId(String eventHubResourceId) {
            this.eventHubResourceId = Output.of(Objects.requireNonNull(eventHubResourceId));
            return this;
        }

        public Builder ignoreFirstRecord(@Nullable Output<Boolean> ignoreFirstRecord) {
            this.ignoreFirstRecord = ignoreFirstRecord;
            return this;
        }

        public Builder ignoreFirstRecord(@Nullable Boolean ignoreFirstRecord) {
            this.ignoreFirstRecord = Output.ofNullable(ignoreFirstRecord);
            return this;
        }

        public Builder kind(Output<String> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder kind(String kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }

        public Builder kustoPoolName(Output<String> kustoPoolName) {
            this.kustoPoolName = Objects.requireNonNull(kustoPoolName);
            return this;
        }

        public Builder kustoPoolName(String kustoPoolName) {
            this.kustoPoolName = Output.of(Objects.requireNonNull(kustoPoolName));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder mappingRuleName(@Nullable Output<String> mappingRuleName) {
            this.mappingRuleName = mappingRuleName;
            return this;
        }

        public Builder mappingRuleName(@Nullable String mappingRuleName) {
            this.mappingRuleName = Output.ofNullable(mappingRuleName);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder storageAccountResourceId(Output<String> storageAccountResourceId) {
            this.storageAccountResourceId = Objects.requireNonNull(storageAccountResourceId);
            return this;
        }

        public Builder storageAccountResourceId(String storageAccountResourceId) {
            this.storageAccountResourceId = Output.of(Objects.requireNonNull(storageAccountResourceId));
            return this;
        }

        public Builder tableName(@Nullable Output<String> tableName) {
            this.tableName = tableName;
            return this;
        }

        public Builder tableName(@Nullable String tableName) {
            this.tableName = Output.ofNullable(tableName);
            return this;
        }

        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public EventGridDataConnectionArgs build() {
            return new EventGridDataConnectionArgs(blobStorageEventType, consumerGroup, dataConnectionName, dataFormat, databaseName, eventHubResourceId, ignoreFirstRecord, kind, kustoPoolName, location, mappingRuleName, resourceGroupName, storageAccountResourceId, tableName, workspaceName);
        }
    }
}
