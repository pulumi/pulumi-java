// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class Office365SourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final Office365SourceArgs Empty = new Office365SourceArgs();

    @InputImport(name="allowedGroups")
    private final @Nullable Input<Object> allowedGroups;

    public Input<Object> getAllowedGroups() {
        return this.allowedGroups == null ? Input.empty() : this.allowedGroups;
    }

    @InputImport(name="dateFilterColumn")
    private final @Nullable Input<Object> dateFilterColumn;

    public Input<Object> getDateFilterColumn() {
        return this.dateFilterColumn == null ? Input.empty() : this.dateFilterColumn;
    }

    @InputImport(name="disableMetricsCollection")
    private final @Nullable Input<Object> disableMetricsCollection;

    public Input<Object> getDisableMetricsCollection() {
        return this.disableMetricsCollection == null ? Input.empty() : this.disableMetricsCollection;
    }

    @InputImport(name="endTime")
    private final @Nullable Input<Object> endTime;

    public Input<Object> getEndTime() {
        return this.endTime == null ? Input.empty() : this.endTime;
    }

    @InputImport(name="maxConcurrentConnections")
    private final @Nullable Input<Object> maxConcurrentConnections;

    public Input<Object> getMaxConcurrentConnections() {
        return this.maxConcurrentConnections == null ? Input.empty() : this.maxConcurrentConnections;
    }

    @InputImport(name="outputColumns")
    private final @Nullable Input<Object> outputColumns;

    public Input<Object> getOutputColumns() {
        return this.outputColumns == null ? Input.empty() : this.outputColumns;
    }

    @InputImport(name="sourceRetryCount")
    private final @Nullable Input<Object> sourceRetryCount;

    public Input<Object> getSourceRetryCount() {
        return this.sourceRetryCount == null ? Input.empty() : this.sourceRetryCount;
    }

    @InputImport(name="sourceRetryWait")
    private final @Nullable Input<Object> sourceRetryWait;

    public Input<Object> getSourceRetryWait() {
        return this.sourceRetryWait == null ? Input.empty() : this.sourceRetryWait;
    }

    @InputImport(name="startTime")
    private final @Nullable Input<Object> startTime;

    public Input<Object> getStartTime() {
        return this.startTime == null ? Input.empty() : this.startTime;
    }

    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    @InputImport(name="userScopeFilterUri")
    private final @Nullable Input<Object> userScopeFilterUri;

    public Input<Object> getUserScopeFilterUri() {
        return this.userScopeFilterUri == null ? Input.empty() : this.userScopeFilterUri;
    }

    public Office365SourceArgs(
        @Nullable Input<Object> allowedGroups,
        @Nullable Input<Object> dateFilterColumn,
        @Nullable Input<Object> disableMetricsCollection,
        @Nullable Input<Object> endTime,
        @Nullable Input<Object> maxConcurrentConnections,
        @Nullable Input<Object> outputColumns,
        @Nullable Input<Object> sourceRetryCount,
        @Nullable Input<Object> sourceRetryWait,
        @Nullable Input<Object> startTime,
        Input<String> type,
        @Nullable Input<Object> userScopeFilterUri) {
        this.allowedGroups = allowedGroups;
        this.dateFilterColumn = dateFilterColumn;
        this.disableMetricsCollection = disableMetricsCollection;
        this.endTime = endTime;
        this.maxConcurrentConnections = maxConcurrentConnections;
        this.outputColumns = outputColumns;
        this.sourceRetryCount = sourceRetryCount;
        this.sourceRetryWait = sourceRetryWait;
        this.startTime = startTime;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userScopeFilterUri = userScopeFilterUri;
    }

    private Office365SourceArgs() {
        this.allowedGroups = Input.empty();
        this.dateFilterColumn = Input.empty();
        this.disableMetricsCollection = Input.empty();
        this.endTime = Input.empty();
        this.maxConcurrentConnections = Input.empty();
        this.outputColumns = Input.empty();
        this.sourceRetryCount = Input.empty();
        this.sourceRetryWait = Input.empty();
        this.startTime = Input.empty();
        this.type = Input.empty();
        this.userScopeFilterUri = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Office365SourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Object> allowedGroups;
        private @Nullable Input<Object> dateFilterColumn;
        private @Nullable Input<Object> disableMetricsCollection;
        private @Nullable Input<Object> endTime;
        private @Nullable Input<Object> maxConcurrentConnections;
        private @Nullable Input<Object> outputColumns;
        private @Nullable Input<Object> sourceRetryCount;
        private @Nullable Input<Object> sourceRetryWait;
        private @Nullable Input<Object> startTime;
        private Input<String> type;
        private @Nullable Input<Object> userScopeFilterUri;

        public Builder() {
    	      // Empty
        }

        public Builder(Office365SourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedGroups = defaults.allowedGroups;
    	      this.dateFilterColumn = defaults.dateFilterColumn;
    	      this.disableMetricsCollection = defaults.disableMetricsCollection;
    	      this.endTime = defaults.endTime;
    	      this.maxConcurrentConnections = defaults.maxConcurrentConnections;
    	      this.outputColumns = defaults.outputColumns;
    	      this.sourceRetryCount = defaults.sourceRetryCount;
    	      this.sourceRetryWait = defaults.sourceRetryWait;
    	      this.startTime = defaults.startTime;
    	      this.type = defaults.type;
    	      this.userScopeFilterUri = defaults.userScopeFilterUri;
        }

        public Builder setAllowedGroups(@Nullable Input<Object> allowedGroups) {
            this.allowedGroups = allowedGroups;
            return this;
        }

        public Builder setAllowedGroups(@Nullable Object allowedGroups) {
            this.allowedGroups = Input.ofNullable(allowedGroups);
            return this;
        }

        public Builder setDateFilterColumn(@Nullable Input<Object> dateFilterColumn) {
            this.dateFilterColumn = dateFilterColumn;
            return this;
        }

        public Builder setDateFilterColumn(@Nullable Object dateFilterColumn) {
            this.dateFilterColumn = Input.ofNullable(dateFilterColumn);
            return this;
        }

        public Builder setDisableMetricsCollection(@Nullable Input<Object> disableMetricsCollection) {
            this.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder setDisableMetricsCollection(@Nullable Object disableMetricsCollection) {
            this.disableMetricsCollection = Input.ofNullable(disableMetricsCollection);
            return this;
        }

        public Builder setEndTime(@Nullable Input<Object> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder setEndTime(@Nullable Object endTime) {
            this.endTime = Input.ofNullable(endTime);
            return this;
        }

        public Builder setMaxConcurrentConnections(@Nullable Input<Object> maxConcurrentConnections) {
            this.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder setMaxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            this.maxConcurrentConnections = Input.ofNullable(maxConcurrentConnections);
            return this;
        }

        public Builder setOutputColumns(@Nullable Input<Object> outputColumns) {
            this.outputColumns = outputColumns;
            return this;
        }

        public Builder setOutputColumns(@Nullable Object outputColumns) {
            this.outputColumns = Input.ofNullable(outputColumns);
            return this;
        }

        public Builder setSourceRetryCount(@Nullable Input<Object> sourceRetryCount) {
            this.sourceRetryCount = sourceRetryCount;
            return this;
        }

        public Builder setSourceRetryCount(@Nullable Object sourceRetryCount) {
            this.sourceRetryCount = Input.ofNullable(sourceRetryCount);
            return this;
        }

        public Builder setSourceRetryWait(@Nullable Input<Object> sourceRetryWait) {
            this.sourceRetryWait = sourceRetryWait;
            return this;
        }

        public Builder setSourceRetryWait(@Nullable Object sourceRetryWait) {
            this.sourceRetryWait = Input.ofNullable(sourceRetryWait);
            return this;
        }

        public Builder setStartTime(@Nullable Input<Object> startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder setStartTime(@Nullable Object startTime) {
            this.startTime = Input.ofNullable(startTime);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder setUserScopeFilterUri(@Nullable Input<Object> userScopeFilterUri) {
            this.userScopeFilterUri = userScopeFilterUri;
            return this;
        }

        public Builder setUserScopeFilterUri(@Nullable Object userScopeFilterUri) {
            this.userScopeFilterUri = Input.ofNullable(userScopeFilterUri);
            return this;
        }

        public Office365SourceArgs build() {
            return new Office365SourceArgs(allowedGroups, dateFilterColumn, disableMetricsCollection, endTime, maxConcurrentConnections, outputColumns, sourceRetryCount, sourceRetryWait, startTime, type, userScopeFilterUri);
        }
    }
}
