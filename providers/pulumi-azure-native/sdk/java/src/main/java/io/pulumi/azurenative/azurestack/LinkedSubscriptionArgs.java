// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.azurestack;

import io.pulumi.azurenative.azurestack.enums.Location;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LinkedSubscriptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final LinkedSubscriptionArgs Empty = new LinkedSubscriptionArgs();

    /**
     * The identifier associated with the device subscription.
     * 
     */
    @InputImport(name="linkedSubscriptionId", required=true)
      private final Input<String> linkedSubscriptionId;

    public Input<String> getLinkedSubscriptionId() {
        return this.linkedSubscriptionId;
    }

    /**
     * Name of the Linked Subscription resource.
     * 
     */
    @InputImport(name="linkedSubscriptionName")
      private final @Nullable Input<String> linkedSubscriptionName;

    public Input<String> getLinkedSubscriptionName() {
        return this.linkedSubscriptionName == null ? Input.empty() : this.linkedSubscriptionName;
    }

    /**
     * Location of the resource.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<Either<String,Location>> location;

    public Input<Either<String,Location>> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The identifier associated with the device registration.
     * 
     */
    @InputImport(name="registrationResourceId", required=true)
      private final Input<String> registrationResourceId;

    public Input<String> getRegistrationResourceId() {
        return this.registrationResourceId;
    }

    /**
     * Name of the resource group.
     * 
     */
    @InputImport(name="resourceGroup", required=true)
      private final Input<String> resourceGroup;

    public Input<String> getResourceGroup() {
        return this.resourceGroup;
    }

    public LinkedSubscriptionArgs(
        Input<String> linkedSubscriptionId,
        @Nullable Input<String> linkedSubscriptionName,
        @Nullable Input<Either<String,Location>> location,
        Input<String> registrationResourceId,
        Input<String> resourceGroup) {
        this.linkedSubscriptionId = Objects.requireNonNull(linkedSubscriptionId, "expected parameter 'linkedSubscriptionId' to be non-null");
        this.linkedSubscriptionName = linkedSubscriptionName;
        this.location = location;
        this.registrationResourceId = Objects.requireNonNull(registrationResourceId, "expected parameter 'registrationResourceId' to be non-null");
        this.resourceGroup = Objects.requireNonNull(resourceGroup, "expected parameter 'resourceGroup' to be non-null");
    }

    private LinkedSubscriptionArgs() {
        this.linkedSubscriptionId = Input.empty();
        this.linkedSubscriptionName = Input.empty();
        this.location = Input.empty();
        this.registrationResourceId = Input.empty();
        this.resourceGroup = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinkedSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> linkedSubscriptionId;
        private @Nullable Input<String> linkedSubscriptionName;
        private @Nullable Input<Either<String,Location>> location;
        private Input<String> registrationResourceId;
        private Input<String> resourceGroup;

        public Builder() {
    	      // Empty
        }

        public Builder(LinkedSubscriptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.linkedSubscriptionId = defaults.linkedSubscriptionId;
    	      this.linkedSubscriptionName = defaults.linkedSubscriptionName;
    	      this.location = defaults.location;
    	      this.registrationResourceId = defaults.registrationResourceId;
    	      this.resourceGroup = defaults.resourceGroup;
        }

        public Builder linkedSubscriptionId(Input<String> linkedSubscriptionId) {
            this.linkedSubscriptionId = Objects.requireNonNull(linkedSubscriptionId);
            return this;
        }

        public Builder linkedSubscriptionId(String linkedSubscriptionId) {
            this.linkedSubscriptionId = Input.of(Objects.requireNonNull(linkedSubscriptionId));
            return this;
        }

        public Builder linkedSubscriptionName(@Nullable Input<String> linkedSubscriptionName) {
            this.linkedSubscriptionName = linkedSubscriptionName;
            return this;
        }

        public Builder linkedSubscriptionName(@Nullable String linkedSubscriptionName) {
            this.linkedSubscriptionName = Input.ofNullable(linkedSubscriptionName);
            return this;
        }

        public Builder location(@Nullable Input<Either<String,Location>> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable Either<String,Location> location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder registrationResourceId(Input<String> registrationResourceId) {
            this.registrationResourceId = Objects.requireNonNull(registrationResourceId);
            return this;
        }

        public Builder registrationResourceId(String registrationResourceId) {
            this.registrationResourceId = Input.of(Objects.requireNonNull(registrationResourceId));
            return this;
        }

        public Builder resourceGroup(Input<String> resourceGroup) {
            this.resourceGroup = Objects.requireNonNull(resourceGroup);
            return this;
        }

        public Builder resourceGroup(String resourceGroup) {
            this.resourceGroup = Input.of(Objects.requireNonNull(resourceGroup));
            return this;
        }
        public LinkedSubscriptionArgs build() {
            return new LinkedSubscriptionArgs(linkedSubscriptionId, linkedSubscriptionName, location, registrationResourceId, resourceGroup);
        }
    }
}
