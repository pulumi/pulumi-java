// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.security.inputs;

import io.pulumi.azurenative.security.inputs.DefenderForContainersAwsOfferingCloudWatchToKinesisArgs;
import io.pulumi.azurenative.security.inputs.DefenderForContainersAwsOfferingKinesisToS3Args;
import io.pulumi.azurenative.security.inputs.DefenderForContainersAwsOfferingKubernetesScubaReaderArgs;
import io.pulumi.azurenative.security.inputs.DefenderForContainersAwsOfferingKubernetesServiceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The Defender for Containers AWS offering configurations
 * 
 */
public final class DefenderForContainersAwsOfferingArgs extends io.pulumi.resources.ResourceArgs {

    public static final DefenderForContainersAwsOfferingArgs Empty = new DefenderForContainersAwsOfferingArgs();

    /**
     * The cloudwatch to kinesis connection configuration
     * 
     */
    @InputImport(name="cloudWatchToKinesis")
      private final @Nullable Input<DefenderForContainersAwsOfferingCloudWatchToKinesisArgs> cloudWatchToKinesis;

    public Input<DefenderForContainersAwsOfferingCloudWatchToKinesisArgs> getCloudWatchToKinesis() {
        return this.cloudWatchToKinesis == null ? Input.empty() : this.cloudWatchToKinesis;
    }

    /**
     * The kinesis to s3 connection configuration
     * 
     */
    @InputImport(name="kinesisToS3")
      private final @Nullable Input<DefenderForContainersAwsOfferingKinesisToS3Args> kinesisToS3;

    public Input<DefenderForContainersAwsOfferingKinesisToS3Args> getKinesisToS3() {
        return this.kinesisToS3 == null ? Input.empty() : this.kinesisToS3;
    }

    /**
     * The kubernetes to scuba connection configuration
     * 
     */
    @InputImport(name="kubernetesScubaReader")
      private final @Nullable Input<DefenderForContainersAwsOfferingKubernetesScubaReaderArgs> kubernetesScubaReader;

    public Input<DefenderForContainersAwsOfferingKubernetesScubaReaderArgs> getKubernetesScubaReader() {
        return this.kubernetesScubaReader == null ? Input.empty() : this.kubernetesScubaReader;
    }

    /**
     * The kubernetes service connection configuration
     * 
     */
    @InputImport(name="kubernetesService")
      private final @Nullable Input<DefenderForContainersAwsOfferingKubernetesServiceArgs> kubernetesService;

    public Input<DefenderForContainersAwsOfferingKubernetesServiceArgs> getKubernetesService() {
        return this.kubernetesService == null ? Input.empty() : this.kubernetesService;
    }

    /**
     * The type of the security offering.
     * Expected value is 'DefenderForContainersAws'.
     * 
     */
    @InputImport(name="offeringType", required=true)
      private final Input<String> offeringType;

    public Input<String> getOfferingType() {
        return this.offeringType;
    }

    public DefenderForContainersAwsOfferingArgs(
        @Nullable Input<DefenderForContainersAwsOfferingCloudWatchToKinesisArgs> cloudWatchToKinesis,
        @Nullable Input<DefenderForContainersAwsOfferingKinesisToS3Args> kinesisToS3,
        @Nullable Input<DefenderForContainersAwsOfferingKubernetesScubaReaderArgs> kubernetesScubaReader,
        @Nullable Input<DefenderForContainersAwsOfferingKubernetesServiceArgs> kubernetesService,
        Input<String> offeringType) {
        this.cloudWatchToKinesis = cloudWatchToKinesis;
        this.kinesisToS3 = kinesisToS3;
        this.kubernetesScubaReader = kubernetesScubaReader;
        this.kubernetesService = kubernetesService;
        this.offeringType = Objects.requireNonNull(offeringType, "expected parameter 'offeringType' to be non-null");
    }

    private DefenderForContainersAwsOfferingArgs() {
        this.cloudWatchToKinesis = Input.empty();
        this.kinesisToS3 = Input.empty();
        this.kubernetesScubaReader = Input.empty();
        this.kubernetesService = Input.empty();
        this.offeringType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DefenderForContainersAwsOfferingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<DefenderForContainersAwsOfferingCloudWatchToKinesisArgs> cloudWatchToKinesis;
        private @Nullable Input<DefenderForContainersAwsOfferingKinesisToS3Args> kinesisToS3;
        private @Nullable Input<DefenderForContainersAwsOfferingKubernetesScubaReaderArgs> kubernetesScubaReader;
        private @Nullable Input<DefenderForContainersAwsOfferingKubernetesServiceArgs> kubernetesService;
        private Input<String> offeringType;

        public Builder() {
    	      // Empty
        }

        public Builder(DefenderForContainersAwsOfferingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudWatchToKinesis = defaults.cloudWatchToKinesis;
    	      this.kinesisToS3 = defaults.kinesisToS3;
    	      this.kubernetesScubaReader = defaults.kubernetesScubaReader;
    	      this.kubernetesService = defaults.kubernetesService;
    	      this.offeringType = defaults.offeringType;
        }

        public Builder setCloudWatchToKinesis(@Nullable Input<DefenderForContainersAwsOfferingCloudWatchToKinesisArgs> cloudWatchToKinesis) {
            this.cloudWatchToKinesis = cloudWatchToKinesis;
            return this;
        }

        public Builder setCloudWatchToKinesis(@Nullable DefenderForContainersAwsOfferingCloudWatchToKinesisArgs cloudWatchToKinesis) {
            this.cloudWatchToKinesis = Input.ofNullable(cloudWatchToKinesis);
            return this;
        }

        public Builder setKinesisToS3(@Nullable Input<DefenderForContainersAwsOfferingKinesisToS3Args> kinesisToS3) {
            this.kinesisToS3 = kinesisToS3;
            return this;
        }

        public Builder setKinesisToS3(@Nullable DefenderForContainersAwsOfferingKinesisToS3Args kinesisToS3) {
            this.kinesisToS3 = Input.ofNullable(kinesisToS3);
            return this;
        }

        public Builder setKubernetesScubaReader(@Nullable Input<DefenderForContainersAwsOfferingKubernetesScubaReaderArgs> kubernetesScubaReader) {
            this.kubernetesScubaReader = kubernetesScubaReader;
            return this;
        }

        public Builder setKubernetesScubaReader(@Nullable DefenderForContainersAwsOfferingKubernetesScubaReaderArgs kubernetesScubaReader) {
            this.kubernetesScubaReader = Input.ofNullable(kubernetesScubaReader);
            return this;
        }

        public Builder setKubernetesService(@Nullable Input<DefenderForContainersAwsOfferingKubernetesServiceArgs> kubernetesService) {
            this.kubernetesService = kubernetesService;
            return this;
        }

        public Builder setKubernetesService(@Nullable DefenderForContainersAwsOfferingKubernetesServiceArgs kubernetesService) {
            this.kubernetesService = Input.ofNullable(kubernetesService);
            return this;
        }

        public Builder setOfferingType(Input<String> offeringType) {
            this.offeringType = Objects.requireNonNull(offeringType);
            return this;
        }

        public Builder setOfferingType(String offeringType) {
            this.offeringType = Input.of(Objects.requireNonNull(offeringType));
            return this;
        }
        public DefenderForContainersAwsOfferingArgs build() {
            return new DefenderForContainersAwsOfferingArgs(cloudWatchToKinesis, kinesisToS3, kubernetesScubaReader, kubernetesService, offeringType);
        }
    }
}
