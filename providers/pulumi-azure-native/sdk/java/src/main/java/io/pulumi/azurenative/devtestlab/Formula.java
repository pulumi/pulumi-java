// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.devtestlab.outputs.FormulaPropertiesFromVmResponse;
import io.pulumi.azurenative.devtestlab.outputs.LabVirtualMachineCreationParameterResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * A formula for creating a VM, specifying an image base and other parameters
API Version: 2018-09-15.

{{% examples %}}
## Example Usage
{{% example %}}
### Formulas_CreateOrUpdate
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var formula = new AzureNative.DevTestLab.Formula("formula", new AzureNative.DevTestLab.FormulaArgs
        {
            Description = "Formula using a Linux base",
            FormulaContent = new AzureNative.DevTestLab.Inputs.LabVirtualMachineCreationParameterArgs
            {
                AllowClaim = false,
                Artifacts = 
                {
                    new AzureNative.DevTestLab.Inputs.ArtifactInstallPropertiesArgs
                    {
                        ArtifactId = "/artifactsources/{artifactSourceName}/artifacts/linux-install-nodejs",
                        Parameters = {},
                    },
                },
                DisallowPublicIpAddress = true,
                GalleryImageReference = new AzureNative.DevTestLab.Inputs.GalleryImageReferenceArgs
                {
                    Offer = "0001-com-ubuntu-server-groovy",
                    OsType = "Linux",
                    Publisher = "canonical",
                    Sku = "20_10",
                    Version = "latest",
                },
                IsAuthenticationWithSshKey = false,
                LabSubnetName = "Dtl{labName}Subnet",
                LabVirtualNetworkId = "/virtualnetworks/dtl{labName}",
                Location = "{location}",
                NetworkInterface = new AzureNative.DevTestLab.Inputs.NetworkInterfacePropertiesArgs
                {
                    SharedPublicIpAddressConfiguration = new AzureNative.DevTestLab.Inputs.SharedPublicIpAddressConfigurationArgs
                    {
                        InboundNatRules = 
                        {
                            new AzureNative.DevTestLab.Inputs.InboundNatRuleArgs
                            {
                                BackendPort = 22,
                                TransportProtocol = "Tcp",
                            },
                        },
                    },
                },
                Notes = "Ubuntu Server 20.10",
                Size = "Standard_B1ms",
                StorageType = "Standard",
                UserName = "user",
            },
            LabName = "{labName}",
            Location = "{location}",
            Name = "{formulaName}",
            ResourceGroupName = "resourceGroupName",
        });
    }

}

```

```go
package main

import (
	devtestlab "github.com/pulumi/pulumi-azure-native/sdk/go/azure/devtestlab"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := devtestlab.NewFormula(ctx, "formula", &devtestlab.FormulaArgs{
			Description: pulumi.String("Formula using a Linux base"),
			FormulaContent: &devtestlab.LabVirtualMachineCreationParameterArgs{
				AllowClaim: pulumi.Bool(false),
				Artifacts: devtestlab.ArtifactInstallPropertiesArray{
					&devtestlab.ArtifactInstallPropertiesArgs{
						ArtifactId: pulumi.String("/artifactsources/{artifactSourceName}/artifacts/linux-install-nodejs"),
						Parameters: devtestlab.ArtifactParameterPropertiesArray{},
					},
				},
				DisallowPublicIpAddress: pulumi.Bool(true),
				GalleryImageReference: &devtestlab.GalleryImageReferenceArgs{
					Offer:     pulumi.String("0001-com-ubuntu-server-groovy"),
					OsType:    pulumi.String("Linux"),
					Publisher: pulumi.String("canonical"),
					Sku:       pulumi.String("20_10"),
					Version:   pulumi.String("latest"),
				},
				IsAuthenticationWithSshKey: pulumi.Bool(false),
				LabSubnetName:              pulumi.String("Dtl{labName}Subnet"),
				LabVirtualNetworkId:        pulumi.String("/virtualnetworks/dtl{labName}"),
				Location:                   pulumi.String("{location}"),
				NetworkInterface: &devtestlab.NetworkInterfacePropertiesArgs{
					SharedPublicIpAddressConfiguration: &devtestlab.SharedPublicIpAddressConfigurationArgs{
						InboundNatRules: devtestlab.InboundNatRuleArray{
							&devtestlab.InboundNatRuleArgs{
								BackendPort:       pulumi.Int(22),
								TransportProtocol: pulumi.String("Tcp"),
							},
						},
					},
				},
				Notes:       pulumi.String("Ubuntu Server 20.10"),
				Size:        pulumi.String("Standard_B1ms"),
				StorageType: pulumi.String("Standard"),
				UserName:    pulumi.String("user"),
			},
			LabName:           pulumi.String("{labName}"),
			Location:          pulumi.String("{location}"),
			Name:              pulumi.String("{formulaName}"),
			ResourceGroupName: pulumi.String("resourceGroupName"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const formula = new azure_native.devtestlab.Formula("formula", {
    description: "Formula using a Linux base",
    formulaContent: {
        allowClaim: false,
        artifacts: [{
            artifactId: "/artifactsources/{artifactSourceName}/artifacts/linux-install-nodejs",
            parameters: [],
        }],
        disallowPublicIpAddress: true,
        galleryImageReference: {
            offer: "0001-com-ubuntu-server-groovy",
            osType: "Linux",
            publisher: "canonical",
            sku: "20_10",
            version: "latest",
        },
        isAuthenticationWithSshKey: false,
        labSubnetName: "Dtl{labName}Subnet",
        labVirtualNetworkId: "/virtualnetworks/dtl{labName}",
        location: "{location}",
        networkInterface: {
            sharedPublicIpAddressConfiguration: {
                inboundNatRules: [{
                    backendPort: 22,
                    transportProtocol: "Tcp",
                }],
            },
        },
        notes: "Ubuntu Server 20.10",
        size: "Standard_B1ms",
        storageType: "Standard",
        userName: "user",
    },
    labName: "{labName}",
    location: "{location}",
    name: "{formulaName}",
    resourceGroupName: "resourceGroupName",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

formula = azure_native.devtestlab.Formula("formula",
    description="Formula using a Linux base",
    formula_content=azure_native.devtestlab.LabVirtualMachineCreationParameterArgs(
        allow_claim=False,
        artifacts=[azure_native.devtestlab.ArtifactInstallPropertiesArgs(
            artifact_id="/artifactsources/{artifactSourceName}/artifacts/linux-install-nodejs",
            parameters=[],
        )],
        disallow_public_ip_address=True,
        gallery_image_reference=azure_native.devtestlab.GalleryImageReferenceArgs(
            offer="0001-com-ubuntu-server-groovy",
            os_type="Linux",
            publisher="canonical",
            sku="20_10",
            version="latest",
        ),
        is_authentication_with_ssh_key=False,
        lab_subnet_name="Dtl{labName}Subnet",
        lab_virtual_network_id="/virtualnetworks/dtl{labName}",
        location="{location}",
        network_interface=azure_native.devtestlab.NetworkInterfacePropertiesArgs(
            shared_public_ip_address_configuration=azure_native.devtestlab.SharedPublicIpAddressConfigurationArgs(
                inbound_nat_rules=[azure_native.devtestlab.InboundNatRuleArgs(
                    backend_port=22,
                    transport_protocol="Tcp",
                )],
            ),
        ),
        notes="Ubuntu Server 20.10",
        size="Standard_B1ms",
        storage_type="Standard",
        user_name="user",
    ),
    lab_name="{labName}",
    location="{location}",
    name="{formulaName}",
    resource_group_name="resourceGroupName")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:devtestlab:Formula {formulaName} /subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/formulas/{formulaName} 
```

 */
@ResourceType(type="azure-native:devtestlab:Formula")
public class Formula extends io.pulumi.resources.CustomResource {
    /**
     * The author of the formula.
     */
    @OutputExport(name="author", type=String.class, parameters={})
    private Output<String> author;

    /**
     * @return The author of the formula.
     */
    public Output<String> getAuthor() {
        return this.author;
    }
    /**
     * The creation date of the formula.
     */
    @OutputExport(name="creationDate", type=String.class, parameters={})
    private Output<String> creationDate;

    /**
     * @return The creation date of the formula.
     */
    public Output<String> getCreationDate() {
        return this.creationDate;
    }
    /**
     * The description of the formula.
     */
    @OutputExport(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the formula.
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The content of the formula.
     */
    @OutputExport(name="formulaContent", type=LabVirtualMachineCreationParameterResponse.class, parameters={})
    private Output</* @Nullable */ LabVirtualMachineCreationParameterResponse> formulaContent;

    /**
     * @return The content of the formula.
     */
    public Output</* @Nullable */ LabVirtualMachineCreationParameterResponse> getFormulaContent() {
        return this.formulaContent;
    }
    /**
     * The location of the resource.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return The location of the resource.
     */
    public Output</* @Nullable */ String> getLocation() {
        return this.location;
    }
    /**
     * The name of the resource.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The OS type of the formula.
     */
    @OutputExport(name="osType", type=String.class, parameters={})
    private Output</* @Nullable */ String> osType;

    /**
     * @return The OS type of the formula.
     */
    public Output</* @Nullable */ String> getOsType() {
        return this.osType;
    }
    /**
     * The provisioning status of the resource.
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning status of the resource.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The tags of the resource.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return The tags of the resource.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * The type of the resource.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource.
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * The unique immutable identifier of a resource (Guid).
     */
    @OutputExport(name="uniqueIdentifier", type=String.class, parameters={})
    private Output<String> uniqueIdentifier;

    /**
     * @return The unique immutable identifier of a resource (Guid).
     */
    public Output<String> getUniqueIdentifier() {
        return this.uniqueIdentifier;
    }
    /**
     * Information about a VM from which a formula is to be created.
     */
    @OutputExport(name="vm", type=FormulaPropertiesFromVmResponse.class, parameters={})
    private Output</* @Nullable */ FormulaPropertiesFromVmResponse> vm;

    /**
     * @return Information about a VM from which a formula is to be created.
     */
    public Output</* @Nullable */ FormulaPropertiesFromVmResponse> getVm() {
        return this.vm;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Formula(String name, FormulaArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:devtestlab:Formula", name, args == null ? FormulaArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Formula(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:devtestlab:Formula", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:devtestlab/v20150521preview:Formula").build()),
                Input.of(Alias.builder().setType("azure-native:devtestlab/v20160515:Formula").build()),
                Input.of(Alias.builder().setType("azure-native:devtestlab/v20180915:Formula").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Formula get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Formula(name, id, options);
    }
}
