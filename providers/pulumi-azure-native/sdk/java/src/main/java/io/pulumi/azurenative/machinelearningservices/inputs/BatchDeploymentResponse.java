// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.azurenative.machinelearningservices.inputs.BatchOutputConfigurationResponse;
import io.pulumi.azurenative.machinelearningservices.inputs.BatchRetrySettingsResponse;
import io.pulumi.azurenative.machinelearningservices.inputs.CodeConfigurationResponse;
import io.pulumi.azurenative.machinelearningservices.inputs.ComputeConfigurationResponse;
import io.pulumi.azurenative.machinelearningservices.inputs.DataPathAssetReferenceResponse;
import io.pulumi.azurenative.machinelearningservices.inputs.IdAssetReferenceResponse;
import io.pulumi.azurenative.machinelearningservices.inputs.OutputPathAssetReferenceResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Batch inference settings per deployment.
 * 
 */
public final class BatchDeploymentResponse extends io.pulumi.resources.InvokeArgs {

    public static final BatchDeploymentResponse Empty = new BatchDeploymentResponse();

    /**
     * Code configuration for the endpoint deployment.
     * 
     */
    @InputImport(name="codeConfiguration")
    private final @Nullable CodeConfigurationResponse codeConfiguration;

    public Optional<CodeConfigurationResponse> getCodeConfiguration() {
        return this.codeConfiguration == null ? Optional.empty() : Optional.ofNullable(this.codeConfiguration);
    }

    /**
     * Configuration for compute binding.
     * 
     */
    @InputImport(name="compute")
    private final @Nullable ComputeConfigurationResponse compute;

    public Optional<ComputeConfigurationResponse> getCompute() {
        return this.compute == null ? Optional.empty() : Optional.ofNullable(this.compute);
    }

    /**
     * Description of the endpoint deployment.
     * 
     */
    @InputImport(name="description")
    private final @Nullable String description;

    public Optional<String> getDescription() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * ARM resource ID of the environment specification for the endpoint deployment.
     * 
     */
    @InputImport(name="environmentId")
    private final @Nullable String environmentId;

    public Optional<String> getEnvironmentId() {
        return this.environmentId == null ? Optional.empty() : Optional.ofNullable(this.environmentId);
    }

    /**
     * Environment variables configuration for the deployment.
     * 
     */
    @InputImport(name="environmentVariables")
    private final @Nullable Map<String,String> environmentVariables;

    public Map<String,String> getEnvironmentVariables() {
        return this.environmentVariables == null ? Map.of() : this.environmentVariables;
    }

    /**
     * Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue].
     * For FileDataset, this value is the count of file failures.
     * For TabularDataset, this value is the count of record failures.
     * If set to -1 (the lower bound), all failures during batch inference will be ignored.
     * 
     */
    @InputImport(name="errorThreshold")
    private final @Nullable Integer errorThreshold;

    public Optional<Integer> getErrorThreshold() {
        return this.errorThreshold == null ? Optional.empty() : Optional.ofNullable(this.errorThreshold);
    }

    /**
     * Logging level for batch inference operation.
     * 
     */
    @InputImport(name="loggingLevel")
    private final @Nullable String loggingLevel;

    public Optional<String> getLoggingLevel() {
        return this.loggingLevel == null ? Optional.empty() : Optional.ofNullable(this.loggingLevel);
    }

    /**
     * Size of the mini-batch passed to each batch invocation.
     * For FileDataset, this is the number of files per mini-batch.
     * For TabularDataset, this is the size of the records in bytes, per mini-batch.
     * 
     */
    @InputImport(name="miniBatchSize")
    private final @Nullable Double miniBatchSize;

    public Optional<Double> getMiniBatchSize() {
        return this.miniBatchSize == null ? Optional.empty() : Optional.ofNullable(this.miniBatchSize);
    }

    /**
     * Reference to the model asset for the endpoint deployment.
     * 
     */
    @InputImport(name="model")
    private final @Nullable Object model;

    public Object getModel() {
        return this.model == null ? null : this.model;
    }

    /**
     * Output configuration for the batch inference operation.
     * 
     */
    @InputImport(name="outputConfiguration")
    private final @Nullable BatchOutputConfigurationResponse outputConfiguration;

    public Optional<BatchOutputConfigurationResponse> getOutputConfiguration() {
        return this.outputConfiguration == null ? Optional.empty() : Optional.ofNullable(this.outputConfiguration);
    }

    /**
     * Partition keys list used for Named partitioning.
     * 
     */
    @InputImport(name="partitionKeys")
    private final @Nullable List<String> partitionKeys;

    public List<String> getPartitionKeys() {
        return this.partitionKeys == null ? List.of() : this.partitionKeys;
    }

    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     * 
     */
    @InputImport(name="properties")
    private final @Nullable Map<String,String> properties;

    public Map<String,String> getProperties() {
        return this.properties == null ? Map.of() : this.properties;
    }

    /**
     * Retry Settings for the batch inference operation.
     * 
     */
    @InputImport(name="retrySettings")
    private final @Nullable BatchRetrySettingsResponse retrySettings;

    public Optional<BatchRetrySettingsResponse> getRetrySettings() {
        return this.retrySettings == null ? Optional.empty() : Optional.ofNullable(this.retrySettings);
    }

    public BatchDeploymentResponse(
        @Nullable CodeConfigurationResponse codeConfiguration,
        @Nullable ComputeConfigurationResponse compute,
        @Nullable String description,
        @Nullable String environmentId,
        @Nullable Map<String,String> environmentVariables,
        @Nullable Integer errorThreshold,
        @Nullable String loggingLevel,
        @Nullable Double miniBatchSize,
        @Nullable Object model,
        @Nullable BatchOutputConfigurationResponse outputConfiguration,
        @Nullable List<String> partitionKeys,
        @Nullable Map<String,String> properties,
        @Nullable BatchRetrySettingsResponse retrySettings) {
        this.codeConfiguration = codeConfiguration;
        this.compute = compute;
        this.description = description;
        this.environmentId = environmentId;
        this.environmentVariables = environmentVariables;
        this.errorThreshold = errorThreshold;
        this.loggingLevel = loggingLevel;
        this.miniBatchSize = miniBatchSize;
        this.model = model;
        this.outputConfiguration = outputConfiguration;
        this.partitionKeys = partitionKeys;
        this.properties = properties;
        this.retrySettings = retrySettings;
    }

    private BatchDeploymentResponse() {
        this.codeConfiguration = null;
        this.compute = null;
        this.description = null;
        this.environmentId = null;
        this.environmentVariables = Map.of();
        this.errorThreshold = null;
        this.loggingLevel = null;
        this.miniBatchSize = null;
        this.model = null;
        this.outputConfiguration = null;
        this.partitionKeys = List.of();
        this.properties = Map.of();
        this.retrySettings = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BatchDeploymentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable CodeConfigurationResponse codeConfiguration;
        private @Nullable ComputeConfigurationResponse compute;
        private @Nullable String description;
        private @Nullable String environmentId;
        private @Nullable Map<String,String> environmentVariables;
        private @Nullable Integer errorThreshold;
        private @Nullable String loggingLevel;
        private @Nullable Double miniBatchSize;
        private @Nullable Object model;
        private @Nullable BatchOutputConfigurationResponse outputConfiguration;
        private @Nullable List<String> partitionKeys;
        private @Nullable Map<String,String> properties;
        private @Nullable BatchRetrySettingsResponse retrySettings;

        public Builder() {
    	      // Empty
        }

        public Builder(BatchDeploymentResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.codeConfiguration = defaults.codeConfiguration;
    	      this.compute = defaults.compute;
    	      this.description = defaults.description;
    	      this.environmentId = defaults.environmentId;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.errorThreshold = defaults.errorThreshold;
    	      this.loggingLevel = defaults.loggingLevel;
    	      this.miniBatchSize = defaults.miniBatchSize;
    	      this.model = defaults.model;
    	      this.outputConfiguration = defaults.outputConfiguration;
    	      this.partitionKeys = defaults.partitionKeys;
    	      this.properties = defaults.properties;
    	      this.retrySettings = defaults.retrySettings;
        }

        public Builder setCodeConfiguration(@Nullable CodeConfigurationResponse codeConfiguration) {
            this.codeConfiguration = codeConfiguration;
            return this;
        }

        public Builder setCompute(@Nullable ComputeConfigurationResponse compute) {
            this.compute = compute;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setEnvironmentId(@Nullable String environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        public Builder setEnvironmentVariables(@Nullable Map<String,String> environmentVariables) {
            this.environmentVariables = environmentVariables;
            return this;
        }

        public Builder setErrorThreshold(@Nullable Integer errorThreshold) {
            this.errorThreshold = errorThreshold;
            return this;
        }

        public Builder setLoggingLevel(@Nullable String loggingLevel) {
            this.loggingLevel = loggingLevel;
            return this;
        }

        public Builder setMiniBatchSize(@Nullable Double miniBatchSize) {
            this.miniBatchSize = miniBatchSize;
            return this;
        }

        public Builder setModel(@Nullable Object model) {
            this.model = model;
            return this;
        }

        public Builder setOutputConfiguration(@Nullable BatchOutputConfigurationResponse outputConfiguration) {
            this.outputConfiguration = outputConfiguration;
            return this;
        }

        public Builder setPartitionKeys(@Nullable List<String> partitionKeys) {
            this.partitionKeys = partitionKeys;
            return this;
        }

        public Builder setProperties(@Nullable Map<String,String> properties) {
            this.properties = properties;
            return this;
        }

        public Builder setRetrySettings(@Nullable BatchRetrySettingsResponse retrySettings) {
            this.retrySettings = retrySettings;
            return this;
        }

        public BatchDeploymentResponse build() {
            return new BatchDeploymentResponse(codeConfiguration, compute, description, environmentId, environmentVariables, errorThreshold, loggingLevel, miniBatchSize, model, outputConfiguration, partitionKeys, properties, retrySettings);
        }
    }
}
