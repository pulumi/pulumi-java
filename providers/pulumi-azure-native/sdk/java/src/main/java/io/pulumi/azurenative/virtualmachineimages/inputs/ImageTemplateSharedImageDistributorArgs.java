// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.virtualmachineimages.inputs;

import io.pulumi.azurenative.virtualmachineimages.enums.SharedImageStorageAccountType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Distribute via Shared Image Gallery.
 * 
 */
public final class ImageTemplateSharedImageDistributorArgs extends io.pulumi.resources.ResourceArgs {

    public static final ImageTemplateSharedImageDistributorArgs Empty = new ImageTemplateSharedImageDistributorArgs();

    /**
     * Tags that will be applied to the artifact once it has been created/updated by the distributor.
     * 
     */
    @InputImport(name="artifactTags")
    private final @Nullable Input<Map<String,String>> artifactTags;

    public Input<Map<String,String>> getArtifactTags() {
        return this.artifactTags == null ? Input.empty() : this.artifactTags;
    }

    /**
     * Flag that indicates whether created image version should be excluded from latest. Omit to use the default (false).
     * 
     */
    @InputImport(name="excludeFromLatest")
    private final @Nullable Input<Boolean> excludeFromLatest;

    public Input<Boolean> getExcludeFromLatest() {
        return this.excludeFromLatest == null ? Input.empty() : this.excludeFromLatest;
    }

    /**
     * Resource Id of the Shared Image Gallery image
     * 
     */
    @InputImport(name="galleryImageId", required=true)
    private final Input<String> galleryImageId;

    public Input<String> getGalleryImageId() {
        return this.galleryImageId;
    }

    /**
     * A list of regions that the image will be replicated to
     * 
     */
    @InputImport(name="replicationRegions", required=true)
    private final Input<List<String>> replicationRegions;

    public Input<List<String>> getReplicationRegions() {
        return this.replicationRegions;
    }

    /**
     * The name to be used for the associated RunOutput.
     * 
     */
    @InputImport(name="runOutputName", required=true)
    private final Input<String> runOutputName;

    public Input<String> getRunOutputName() {
        return this.runOutputName;
    }

    /**
     * Storage account type to be used to store the shared image. Omit to use the default (Standard_LRS).
     * 
     */
    @InputImport(name="storageAccountType")
    private final @Nullable Input<Either<String,SharedImageStorageAccountType>> storageAccountType;

    public Input<Either<String,SharedImageStorageAccountType>> getStorageAccountType() {
        return this.storageAccountType == null ? Input.empty() : this.storageAccountType;
    }

    /**
     * Type of distribution.
     * Expected value is 'SharedImage'.
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public ImageTemplateSharedImageDistributorArgs(
        @Nullable Input<Map<String,String>> artifactTags,
        @Nullable Input<Boolean> excludeFromLatest,
        Input<String> galleryImageId,
        Input<List<String>> replicationRegions,
        Input<String> runOutputName,
        @Nullable Input<Either<String,SharedImageStorageAccountType>> storageAccountType,
        Input<String> type) {
        this.artifactTags = artifactTags;
        this.excludeFromLatest = excludeFromLatest == null ? Input.ofNullable(false) : excludeFromLatest;
        this.galleryImageId = Objects.requireNonNull(galleryImageId, "expected parameter 'galleryImageId' to be non-null");
        this.replicationRegions = Objects.requireNonNull(replicationRegions, "expected parameter 'replicationRegions' to be non-null");
        this.runOutputName = Objects.requireNonNull(runOutputName, "expected parameter 'runOutputName' to be non-null");
        this.storageAccountType = storageAccountType;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ImageTemplateSharedImageDistributorArgs() {
        this.artifactTags = Input.empty();
        this.excludeFromLatest = Input.empty();
        this.galleryImageId = Input.empty();
        this.replicationRegions = Input.empty();
        this.runOutputName = Input.empty();
        this.storageAccountType = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageTemplateSharedImageDistributorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Map<String,String>> artifactTags;
        private @Nullable Input<Boolean> excludeFromLatest;
        private Input<String> galleryImageId;
        private Input<List<String>> replicationRegions;
        private Input<String> runOutputName;
        private @Nullable Input<Either<String,SharedImageStorageAccountType>> storageAccountType;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageTemplateSharedImageDistributorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactTags = defaults.artifactTags;
    	      this.excludeFromLatest = defaults.excludeFromLatest;
    	      this.galleryImageId = defaults.galleryImageId;
    	      this.replicationRegions = defaults.replicationRegions;
    	      this.runOutputName = defaults.runOutputName;
    	      this.storageAccountType = defaults.storageAccountType;
    	      this.type = defaults.type;
        }

        public Builder setArtifactTags(@Nullable Input<Map<String,String>> artifactTags) {
            this.artifactTags = artifactTags;
            return this;
        }

        public Builder setArtifactTags(@Nullable Map<String,String> artifactTags) {
            this.artifactTags = Input.ofNullable(artifactTags);
            return this;
        }

        public Builder setExcludeFromLatest(@Nullable Input<Boolean> excludeFromLatest) {
            this.excludeFromLatest = excludeFromLatest;
            return this;
        }

        public Builder setExcludeFromLatest(@Nullable Boolean excludeFromLatest) {
            this.excludeFromLatest = Input.ofNullable(excludeFromLatest);
            return this;
        }

        public Builder setGalleryImageId(Input<String> galleryImageId) {
            this.galleryImageId = Objects.requireNonNull(galleryImageId);
            return this;
        }

        public Builder setGalleryImageId(String galleryImageId) {
            this.galleryImageId = Input.of(Objects.requireNonNull(galleryImageId));
            return this;
        }

        public Builder setReplicationRegions(Input<List<String>> replicationRegions) {
            this.replicationRegions = Objects.requireNonNull(replicationRegions);
            return this;
        }

        public Builder setReplicationRegions(List<String> replicationRegions) {
            this.replicationRegions = Input.of(Objects.requireNonNull(replicationRegions));
            return this;
        }

        public Builder setRunOutputName(Input<String> runOutputName) {
            this.runOutputName = Objects.requireNonNull(runOutputName);
            return this;
        }

        public Builder setRunOutputName(String runOutputName) {
            this.runOutputName = Input.of(Objects.requireNonNull(runOutputName));
            return this;
        }

        public Builder setStorageAccountType(@Nullable Input<Either<String,SharedImageStorageAccountType>> storageAccountType) {
            this.storageAccountType = storageAccountType;
            return this;
        }

        public Builder setStorageAccountType(@Nullable Either<String,SharedImageStorageAccountType> storageAccountType) {
            this.storageAccountType = Input.ofNullable(storageAccountType);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public ImageTemplateSharedImageDistributorArgs build() {
            return new ImageTemplateSharedImageDistributorArgs(artifactTags, excludeFromLatest, galleryImageId, replicationRegions, runOutputName, storageAccountType, type);
        }
    }
}
