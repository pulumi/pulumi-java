// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.labservices;

import io.pulumi.azurenative.labservices.enums.ConfigurationState;
import io.pulumi.azurenative.labservices.inputs.ResourceSettingsArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EnvironmentSettingArgs extends io.pulumi.resources.ResourceArgs {

    public static final EnvironmentSettingArgs Empty = new EnvironmentSettingArgs();

    /**
     * Describes the user's progress in configuring their environment setting
     * 
     */
    @InputImport(name="configurationState")
      private final @Nullable Input<Either<String,ConfigurationState>> configurationState;

    public Input<Either<String,ConfigurationState>> getConfigurationState() {
        return this.configurationState == null ? Input.empty() : this.configurationState;
    }

    /**
     * Describes the environment and its resource settings
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The name of the environment Setting.
     * 
     */
    @InputImport(name="environmentSettingName")
      private final @Nullable Input<String> environmentSettingName;

    public Input<String> getEnvironmentSettingName() {
        return this.environmentSettingName == null ? Input.empty() : this.environmentSettingName;
    }

    /**
     * The name of the lab Account.
     * 
     */
    @InputImport(name="labAccountName", required=true)
      private final Input<String> labAccountName;

    public Input<String> getLabAccountName() {
        return this.labAccountName;
    }

    /**
     * The name of the lab.
     * 
     */
    @InputImport(name="labName", required=true)
      private final Input<String> labName;

    public Input<String> getLabName() {
        return this.labName;
    }

    /**
     * The location of the resource.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The provisioning status of the resource.
     * 
     */
    @InputImport(name="provisioningState")
      private final @Nullable Input<String> provisioningState;

    public Input<String> getProvisioningState() {
        return this.provisioningState == null ? Input.empty() : this.provisioningState;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource specific settings
     * 
     */
    @InputImport(name="resourceSettings", required=true)
      private final Input<ResourceSettingsArgs> resourceSettings;

    public Input<ResourceSettingsArgs> getResourceSettings() {
        return this.resourceSettings;
    }

    /**
     * The tags of the resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Brief title describing the environment and its resource settings
     * 
     */
    @InputImport(name="title")
      private final @Nullable Input<String> title;

    public Input<String> getTitle() {
        return this.title == null ? Input.empty() : this.title;
    }

    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    @InputImport(name="uniqueIdentifier")
      private final @Nullable Input<String> uniqueIdentifier;

    public Input<String> getUniqueIdentifier() {
        return this.uniqueIdentifier == null ? Input.empty() : this.uniqueIdentifier;
    }

    public EnvironmentSettingArgs(
        @Nullable Input<Either<String,ConfigurationState>> configurationState,
        @Nullable Input<String> description,
        @Nullable Input<String> environmentSettingName,
        Input<String> labAccountName,
        Input<String> labName,
        @Nullable Input<String> location,
        @Nullable Input<String> provisioningState,
        Input<String> resourceGroupName,
        Input<ResourceSettingsArgs> resourceSettings,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> title,
        @Nullable Input<String> uniqueIdentifier) {
        this.configurationState = configurationState;
        this.description = description;
        this.environmentSettingName = environmentSettingName;
        this.labAccountName = Objects.requireNonNull(labAccountName, "expected parameter 'labAccountName' to be non-null");
        this.labName = Objects.requireNonNull(labName, "expected parameter 'labName' to be non-null");
        this.location = location;
        this.provisioningState = provisioningState;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceSettings = Objects.requireNonNull(resourceSettings, "expected parameter 'resourceSettings' to be non-null");
        this.tags = tags;
        this.title = title;
        this.uniqueIdentifier = uniqueIdentifier;
    }

    private EnvironmentSettingArgs() {
        this.configurationState = Input.empty();
        this.description = Input.empty();
        this.environmentSettingName = Input.empty();
        this.labAccountName = Input.empty();
        this.labName = Input.empty();
        this.location = Input.empty();
        this.provisioningState = Input.empty();
        this.resourceGroupName = Input.empty();
        this.resourceSettings = Input.empty();
        this.tags = Input.empty();
        this.title = Input.empty();
        this.uniqueIdentifier = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,ConfigurationState>> configurationState;
        private @Nullable Input<String> description;
        private @Nullable Input<String> environmentSettingName;
        private Input<String> labAccountName;
        private Input<String> labName;
        private @Nullable Input<String> location;
        private @Nullable Input<String> provisioningState;
        private Input<String> resourceGroupName;
        private Input<ResourceSettingsArgs> resourceSettings;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> title;
        private @Nullable Input<String> uniqueIdentifier;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentSettingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configurationState = defaults.configurationState;
    	      this.description = defaults.description;
    	      this.environmentSettingName = defaults.environmentSettingName;
    	      this.labAccountName = defaults.labAccountName;
    	      this.labName = defaults.labName;
    	      this.location = defaults.location;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceSettings = defaults.resourceSettings;
    	      this.tags = defaults.tags;
    	      this.title = defaults.title;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
        }

        public Builder configurationState(@Nullable Input<Either<String,ConfigurationState>> configurationState) {
            this.configurationState = configurationState;
            return this;
        }

        public Builder configurationState(@Nullable Either<String,ConfigurationState> configurationState) {
            this.configurationState = Input.ofNullable(configurationState);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder environmentSettingName(@Nullable Input<String> environmentSettingName) {
            this.environmentSettingName = environmentSettingName;
            return this;
        }

        public Builder environmentSettingName(@Nullable String environmentSettingName) {
            this.environmentSettingName = Input.ofNullable(environmentSettingName);
            return this;
        }

        public Builder labAccountName(Input<String> labAccountName) {
            this.labAccountName = Objects.requireNonNull(labAccountName);
            return this;
        }

        public Builder labAccountName(String labAccountName) {
            this.labAccountName = Input.of(Objects.requireNonNull(labAccountName));
            return this;
        }

        public Builder labName(Input<String> labName) {
            this.labName = Objects.requireNonNull(labName);
            return this;
        }

        public Builder labName(String labName) {
            this.labName = Input.of(Objects.requireNonNull(labName));
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder provisioningState(@Nullable Input<String> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }

        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = Input.ofNullable(provisioningState);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder resourceSettings(Input<ResourceSettingsArgs> resourceSettings) {
            this.resourceSettings = Objects.requireNonNull(resourceSettings);
            return this;
        }

        public Builder resourceSettings(ResourceSettingsArgs resourceSettings) {
            this.resourceSettings = Input.of(Objects.requireNonNull(resourceSettings));
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder title(@Nullable Input<String> title) {
            this.title = title;
            return this;
        }

        public Builder title(@Nullable String title) {
            this.title = Input.ofNullable(title);
            return this;
        }

        public Builder uniqueIdentifier(@Nullable Input<String> uniqueIdentifier) {
            this.uniqueIdentifier = uniqueIdentifier;
            return this;
        }

        public Builder uniqueIdentifier(@Nullable String uniqueIdentifier) {
            this.uniqueIdentifier = Input.ofNullable(uniqueIdentifier);
            return this;
        }
        public EnvironmentSettingArgs build() {
            return new EnvironmentSettingArgs(configurationState, description, environmentSettingName, labAccountName, labName, location, provisioningState, resourceGroupName, resourceSettings, tags, title, uniqueIdentifier);
        }
    }
}
