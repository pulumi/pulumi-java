// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.compute.enums.HyperVGeneration;
import io.pulumi.azurenative.compute.enums.OperatingSystemStateTypes;
import io.pulumi.azurenative.compute.enums.OperatingSystemTypes;
import io.pulumi.azurenative.compute.inputs.DisallowedArgs;
import io.pulumi.azurenative.compute.inputs.GalleryImageFeatureArgs;
import io.pulumi.azurenative.compute.inputs.GalleryImageIdentifierArgs;
import io.pulumi.azurenative.compute.inputs.ImagePurchasePlanArgs;
import io.pulumi.azurenative.compute.inputs.RecommendedMachineConfigurationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GalleryImageArgs extends io.pulumi.resources.ResourceArgs {

    public static final GalleryImageArgs Empty = new GalleryImageArgs();

    /**
     * The description of this gallery image definition resource. This property is updatable.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Describes the disallowed disk types.
     * 
     */
    @InputImport(name="disallowed")
      private final @Nullable Input<DisallowedArgs> disallowed;

    public Input<DisallowedArgs> getDisallowed() {
        return this.disallowed == null ? Input.empty() : this.disallowed;
    }

    /**
     * The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable.
     * 
     */
    @InputImport(name="endOfLifeDate")
      private final @Nullable Input<String> endOfLifeDate;

    public Input<String> getEndOfLifeDate() {
        return this.endOfLifeDate == null ? Input.empty() : this.endOfLifeDate;
    }

    /**
     * The Eula agreement for the gallery image definition.
     * 
     */
    @InputImport(name="eula")
      private final @Nullable Input<String> eula;

    public Input<String> getEula() {
        return this.eula == null ? Input.empty() : this.eula;
    }

    /**
     * A list of gallery image features.
     * 
     */
    @InputImport(name="features")
      private final @Nullable Input<List<GalleryImageFeatureArgs>> features;

    public Input<List<GalleryImageFeatureArgs>> getFeatures() {
        return this.features == null ? Input.empty() : this.features;
    }

    /**
     * The name of the gallery image definition to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.
     * 
     */
    @InputImport(name="galleryImageName")
      private final @Nullable Input<String> galleryImageName;

    public Input<String> getGalleryImageName() {
        return this.galleryImageName == null ? Input.empty() : this.galleryImageName;
    }

    /**
     * The name of the Shared Image Gallery in which the Image Definition is to be created.
     * 
     */
    @InputImport(name="galleryName", required=true)
      private final Input<String> galleryName;

    public Input<String> getGalleryName() {
        return this.galleryName;
    }

    /**
     * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     */
    @InputImport(name="hyperVGeneration")
      private final @Nullable Input<Either<String,HyperVGeneration>> hyperVGeneration;

    public Input<Either<String,HyperVGeneration>> getHyperVGeneration() {
        return this.hyperVGeneration == null ? Input.empty() : this.hyperVGeneration;
    }

    /**
     * This is the gallery image definition identifier.
     * 
     */
    @InputImport(name="identifier", required=true)
      private final Input<GalleryImageIdentifierArgs> identifier;

    public Input<GalleryImageIdentifierArgs> getIdentifier() {
        return this.identifier;
    }

    /**
     * Resource location
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'.
     * 
     */
    @InputImport(name="osState", required=true)
      private final Input<OperatingSystemStateTypes> osState;

    public Input<OperatingSystemStateTypes> getOsState() {
        return this.osState;
    }

    /**
     * This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
     * 
     */
    @InputImport(name="osType", required=true)
      private final Input<OperatingSystemTypes> osType;

    public Input<OperatingSystemTypes> getOsType() {
        return this.osType;
    }

    /**
     * The privacy statement uri.
     * 
     */
    @InputImport(name="privacyStatementUri")
      private final @Nullable Input<String> privacyStatementUri;

    public Input<String> getPrivacyStatementUri() {
        return this.privacyStatementUri == null ? Input.empty() : this.privacyStatementUri;
    }

    /**
     * Describes the gallery image definition purchase plan. This is used by marketplace images.
     * 
     */
    @InputImport(name="purchasePlan")
      private final @Nullable Input<ImagePurchasePlanArgs> purchasePlan;

    public Input<ImagePurchasePlanArgs> getPurchasePlan() {
        return this.purchasePlan == null ? Input.empty() : this.purchasePlan;
    }

    /**
     * The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
     * 
     */
    @InputImport(name="recommended")
      private final @Nullable Input<RecommendedMachineConfigurationArgs> recommended;

    public Input<RecommendedMachineConfigurationArgs> getRecommended() {
        return this.recommended == null ? Input.empty() : this.recommended;
    }

    /**
     * The release note uri.
     * 
     */
    @InputImport(name="releaseNoteUri")
      private final @Nullable Input<String> releaseNoteUri;

    public Input<String> getReleaseNoteUri() {
        return this.releaseNoteUri == null ? Input.empty() : this.releaseNoteUri;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public GalleryImageArgs(
        @Nullable Input<String> description,
        @Nullable Input<DisallowedArgs> disallowed,
        @Nullable Input<String> endOfLifeDate,
        @Nullable Input<String> eula,
        @Nullable Input<List<GalleryImageFeatureArgs>> features,
        @Nullable Input<String> galleryImageName,
        Input<String> galleryName,
        @Nullable Input<Either<String,HyperVGeneration>> hyperVGeneration,
        Input<GalleryImageIdentifierArgs> identifier,
        @Nullable Input<String> location,
        Input<OperatingSystemStateTypes> osState,
        Input<OperatingSystemTypes> osType,
        @Nullable Input<String> privacyStatementUri,
        @Nullable Input<ImagePurchasePlanArgs> purchasePlan,
        @Nullable Input<RecommendedMachineConfigurationArgs> recommended,
        @Nullable Input<String> releaseNoteUri,
        Input<String> resourceGroupName,
        @Nullable Input<Map<String,String>> tags) {
        this.description = description;
        this.disallowed = disallowed;
        this.endOfLifeDate = endOfLifeDate;
        this.eula = eula;
        this.features = features;
        this.galleryImageName = galleryImageName;
        this.galleryName = Objects.requireNonNull(galleryName, "expected parameter 'galleryName' to be non-null");
        this.hyperVGeneration = hyperVGeneration;
        this.identifier = Objects.requireNonNull(identifier, "expected parameter 'identifier' to be non-null");
        this.location = location;
        this.osState = Objects.requireNonNull(osState, "expected parameter 'osState' to be non-null");
        this.osType = Objects.requireNonNull(osType, "expected parameter 'osType' to be non-null");
        this.privacyStatementUri = privacyStatementUri;
        this.purchasePlan = purchasePlan;
        this.recommended = recommended;
        this.releaseNoteUri = releaseNoteUri;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private GalleryImageArgs() {
        this.description = Input.empty();
        this.disallowed = Input.empty();
        this.endOfLifeDate = Input.empty();
        this.eula = Input.empty();
        this.features = Input.empty();
        this.galleryImageName = Input.empty();
        this.galleryName = Input.empty();
        this.hyperVGeneration = Input.empty();
        this.identifier = Input.empty();
        this.location = Input.empty();
        this.osState = Input.empty();
        this.osType = Input.empty();
        this.privacyStatementUri = Input.empty();
        this.purchasePlan = Input.empty();
        this.recommended = Input.empty();
        this.releaseNoteUri = Input.empty();
        this.resourceGroupName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GalleryImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<DisallowedArgs> disallowed;
        private @Nullable Input<String> endOfLifeDate;
        private @Nullable Input<String> eula;
        private @Nullable Input<List<GalleryImageFeatureArgs>> features;
        private @Nullable Input<String> galleryImageName;
        private Input<String> galleryName;
        private @Nullable Input<Either<String,HyperVGeneration>> hyperVGeneration;
        private Input<GalleryImageIdentifierArgs> identifier;
        private @Nullable Input<String> location;
        private Input<OperatingSystemStateTypes> osState;
        private Input<OperatingSystemTypes> osType;
        private @Nullable Input<String> privacyStatementUri;
        private @Nullable Input<ImagePurchasePlanArgs> purchasePlan;
        private @Nullable Input<RecommendedMachineConfigurationArgs> recommended;
        private @Nullable Input<String> releaseNoteUri;
        private Input<String> resourceGroupName;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GalleryImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.disallowed = defaults.disallowed;
    	      this.endOfLifeDate = defaults.endOfLifeDate;
    	      this.eula = defaults.eula;
    	      this.features = defaults.features;
    	      this.galleryImageName = defaults.galleryImageName;
    	      this.galleryName = defaults.galleryName;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.identifier = defaults.identifier;
    	      this.location = defaults.location;
    	      this.osState = defaults.osState;
    	      this.osType = defaults.osType;
    	      this.privacyStatementUri = defaults.privacyStatementUri;
    	      this.purchasePlan = defaults.purchasePlan;
    	      this.recommended = defaults.recommended;
    	      this.releaseNoteUri = defaults.releaseNoteUri;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisallowed(@Nullable Input<DisallowedArgs> disallowed) {
            this.disallowed = disallowed;
            return this;
        }

        public Builder setDisallowed(@Nullable DisallowedArgs disallowed) {
            this.disallowed = Input.ofNullable(disallowed);
            return this;
        }

        public Builder setEndOfLifeDate(@Nullable Input<String> endOfLifeDate) {
            this.endOfLifeDate = endOfLifeDate;
            return this;
        }

        public Builder setEndOfLifeDate(@Nullable String endOfLifeDate) {
            this.endOfLifeDate = Input.ofNullable(endOfLifeDate);
            return this;
        }

        public Builder setEula(@Nullable Input<String> eula) {
            this.eula = eula;
            return this;
        }

        public Builder setEula(@Nullable String eula) {
            this.eula = Input.ofNullable(eula);
            return this;
        }

        public Builder setFeatures(@Nullable Input<List<GalleryImageFeatureArgs>> features) {
            this.features = features;
            return this;
        }

        public Builder setFeatures(@Nullable List<GalleryImageFeatureArgs> features) {
            this.features = Input.ofNullable(features);
            return this;
        }

        public Builder setGalleryImageName(@Nullable Input<String> galleryImageName) {
            this.galleryImageName = galleryImageName;
            return this;
        }

        public Builder setGalleryImageName(@Nullable String galleryImageName) {
            this.galleryImageName = Input.ofNullable(galleryImageName);
            return this;
        }

        public Builder setGalleryName(Input<String> galleryName) {
            this.galleryName = Objects.requireNonNull(galleryName);
            return this;
        }

        public Builder setGalleryName(String galleryName) {
            this.galleryName = Input.of(Objects.requireNonNull(galleryName));
            return this;
        }

        public Builder setHyperVGeneration(@Nullable Input<Either<String,HyperVGeneration>> hyperVGeneration) {
            this.hyperVGeneration = hyperVGeneration;
            return this;
        }

        public Builder setHyperVGeneration(@Nullable Either<String,HyperVGeneration> hyperVGeneration) {
            this.hyperVGeneration = Input.ofNullable(hyperVGeneration);
            return this;
        }

        public Builder setIdentifier(Input<GalleryImageIdentifierArgs> identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }

        public Builder setIdentifier(GalleryImageIdentifierArgs identifier) {
            this.identifier = Input.of(Objects.requireNonNull(identifier));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setOsState(Input<OperatingSystemStateTypes> osState) {
            this.osState = Objects.requireNonNull(osState);
            return this;
        }

        public Builder setOsState(OperatingSystemStateTypes osState) {
            this.osState = Input.of(Objects.requireNonNull(osState));
            return this;
        }

        public Builder setOsType(Input<OperatingSystemTypes> osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }

        public Builder setOsType(OperatingSystemTypes osType) {
            this.osType = Input.of(Objects.requireNonNull(osType));
            return this;
        }

        public Builder setPrivacyStatementUri(@Nullable Input<String> privacyStatementUri) {
            this.privacyStatementUri = privacyStatementUri;
            return this;
        }

        public Builder setPrivacyStatementUri(@Nullable String privacyStatementUri) {
            this.privacyStatementUri = Input.ofNullable(privacyStatementUri);
            return this;
        }

        public Builder setPurchasePlan(@Nullable Input<ImagePurchasePlanArgs> purchasePlan) {
            this.purchasePlan = purchasePlan;
            return this;
        }

        public Builder setPurchasePlan(@Nullable ImagePurchasePlanArgs purchasePlan) {
            this.purchasePlan = Input.ofNullable(purchasePlan);
            return this;
        }

        public Builder setRecommended(@Nullable Input<RecommendedMachineConfigurationArgs> recommended) {
            this.recommended = recommended;
            return this;
        }

        public Builder setRecommended(@Nullable RecommendedMachineConfigurationArgs recommended) {
            this.recommended = Input.ofNullable(recommended);
            return this;
        }

        public Builder setReleaseNoteUri(@Nullable Input<String> releaseNoteUri) {
            this.releaseNoteUri = releaseNoteUri;
            return this;
        }

        public Builder setReleaseNoteUri(@Nullable String releaseNoteUri) {
            this.releaseNoteUri = Input.ofNullable(releaseNoteUri);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public GalleryImageArgs build() {
            return new GalleryImageArgs(description, disallowed, endOfLifeDate, eula, features, galleryImageName, galleryName, hyperVGeneration, identifier, location, osState, osType, privacyStatementUri, purchasePlan, recommended, releaseNoteUri, resourceGroupName, tags);
        }
    }
}
