// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.elastic.inputs;

import io.pulumi.azurenative.elastic.enums.MonitoringStatus;
import io.pulumi.azurenative.elastic.enums.ProvisioningState;
import io.pulumi.azurenative.elastic.inputs.UserInfoArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MonitorPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final MonitorPropertiesArgs Empty = new MonitorPropertiesArgs();

    @InputImport(name="monitoringStatus")
    private final @Nullable Input<Either<String,MonitoringStatus>> monitoringStatus;

    public Input<Either<String,MonitoringStatus>> getMonitoringStatus() {
        return this.monitoringStatus == null ? Input.empty() : this.monitoringStatus;
    }

    @InputImport(name="provisioningState")
    private final @Nullable Input<Either<String,ProvisioningState>> provisioningState;

    public Input<Either<String,ProvisioningState>> getProvisioningState() {
        return this.provisioningState == null ? Input.empty() : this.provisioningState;
    }

    @InputImport(name="userInfo")
    private final @Nullable Input<UserInfoArgs> userInfo;

    public Input<UserInfoArgs> getUserInfo() {
        return this.userInfo == null ? Input.empty() : this.userInfo;
    }

    public MonitorPropertiesArgs(
        @Nullable Input<Either<String,MonitoringStatus>> monitoringStatus,
        @Nullable Input<Either<String,ProvisioningState>> provisioningState,
        @Nullable Input<UserInfoArgs> userInfo) {
        this.monitoringStatus = monitoringStatus;
        this.provisioningState = provisioningState;
        this.userInfo = userInfo;
    }

    private MonitorPropertiesArgs() {
        this.monitoringStatus = Input.empty();
        this.provisioningState = Input.empty();
        this.userInfo = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitorPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,MonitoringStatus>> monitoringStatus;
        private @Nullable Input<Either<String,ProvisioningState>> provisioningState;
        private @Nullable Input<UserInfoArgs> userInfo;

        public Builder() {
    	      // Empty
        }

        public Builder(MonitorPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.monitoringStatus = defaults.monitoringStatus;
    	      this.provisioningState = defaults.provisioningState;
    	      this.userInfo = defaults.userInfo;
        }

        public Builder setMonitoringStatus(@Nullable Input<Either<String,MonitoringStatus>> monitoringStatus) {
            this.monitoringStatus = monitoringStatus;
            return this;
        }

        public Builder setMonitoringStatus(@Nullable Either<String,MonitoringStatus> monitoringStatus) {
            this.monitoringStatus = Input.ofNullable(monitoringStatus);
            return this;
        }

        public Builder setProvisioningState(@Nullable Input<Either<String,ProvisioningState>> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }

        public Builder setProvisioningState(@Nullable Either<String,ProvisioningState> provisioningState) {
            this.provisioningState = Input.ofNullable(provisioningState);
            return this;
        }

        public Builder setUserInfo(@Nullable Input<UserInfoArgs> userInfo) {
            this.userInfo = userInfo;
            return this;
        }

        public Builder setUserInfo(@Nullable UserInfoArgs userInfo) {
            this.userInfo = Input.ofNullable(userInfo);
            return this;
        }

        public MonitorPropertiesArgs build() {
            return new MonitorPropertiesArgs(monitoringStatus, provisioningState, userInfo);
        }
    }
}
