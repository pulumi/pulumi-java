// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.kusto;

import io.pulumi.azurenative.kusto.enums.DatabasePrincipalRole;
import io.pulumi.azurenative.kusto.enums.PrincipalType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabasePrincipalAssignmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatabasePrincipalAssignmentArgs Empty = new DatabasePrincipalAssignmentArgs();

    @InputImport(name="clusterName", required=true)
    private final Input<String> clusterName;

    public Input<String> getClusterName() {
        return this.clusterName;
    }

    @InputImport(name="databaseName", required=true)
    private final Input<String> databaseName;

    public Input<String> getDatabaseName() {
        return this.databaseName;
    }

    @InputImport(name="principalAssignmentName")
    private final @Nullable Input<String> principalAssignmentName;

    public Input<String> getPrincipalAssignmentName() {
        return this.principalAssignmentName == null ? Input.empty() : this.principalAssignmentName;
    }

    @InputImport(name="principalId", required=true)
    private final Input<String> principalId;

    public Input<String> getPrincipalId() {
        return this.principalId;
    }

    @InputImport(name="principalType", required=true)
    private final Input<Either<String,PrincipalType>> principalType;

    public Input<Either<String,PrincipalType>> getPrincipalType() {
        return this.principalType;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="role", required=true)
    private final Input<Either<String,DatabasePrincipalRole>> role;

    public Input<Either<String,DatabasePrincipalRole>> getRole() {
        return this.role;
    }

    @InputImport(name="tenantId")
    private final @Nullable Input<String> tenantId;

    public Input<String> getTenantId() {
        return this.tenantId == null ? Input.empty() : this.tenantId;
    }

    public DatabasePrincipalAssignmentArgs(
        Input<String> clusterName,
        Input<String> databaseName,
        @Nullable Input<String> principalAssignmentName,
        Input<String> principalId,
        Input<Either<String,PrincipalType>> principalType,
        Input<String> resourceGroupName,
        Input<Either<String,DatabasePrincipalRole>> role,
        @Nullable Input<String> tenantId) {
        this.clusterName = Objects.requireNonNull(clusterName, "expected parameter 'clusterName' to be non-null");
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.principalAssignmentName = principalAssignmentName;
        this.principalId = Objects.requireNonNull(principalId, "expected parameter 'principalId' to be non-null");
        this.principalType = Objects.requireNonNull(principalType, "expected parameter 'principalType' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
        this.tenantId = tenantId;
    }

    private DatabasePrincipalAssignmentArgs() {
        this.clusterName = Input.empty();
        this.databaseName = Input.empty();
        this.principalAssignmentName = Input.empty();
        this.principalId = Input.empty();
        this.principalType = Input.empty();
        this.resourceGroupName = Input.empty();
        this.role = Input.empty();
        this.tenantId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabasePrincipalAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> clusterName;
        private Input<String> databaseName;
        private @Nullable Input<String> principalAssignmentName;
        private Input<String> principalId;
        private Input<Either<String,PrincipalType>> principalType;
        private Input<String> resourceGroupName;
        private Input<Either<String,DatabasePrincipalRole>> role;
        private @Nullable Input<String> tenantId;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabasePrincipalAssignmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterName = defaults.clusterName;
    	      this.databaseName = defaults.databaseName;
    	      this.principalAssignmentName = defaults.principalAssignmentName;
    	      this.principalId = defaults.principalId;
    	      this.principalType = defaults.principalType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.role = defaults.role;
    	      this.tenantId = defaults.tenantId;
        }

        public Builder setClusterName(Input<String> clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }

        public Builder setClusterName(String clusterName) {
            this.clusterName = Input.of(Objects.requireNonNull(clusterName));
            return this;
        }

        public Builder setDatabaseName(Input<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder setDatabaseName(String databaseName) {
            this.databaseName = Input.of(Objects.requireNonNull(databaseName));
            return this;
        }

        public Builder setPrincipalAssignmentName(@Nullable Input<String> principalAssignmentName) {
            this.principalAssignmentName = principalAssignmentName;
            return this;
        }

        public Builder setPrincipalAssignmentName(@Nullable String principalAssignmentName) {
            this.principalAssignmentName = Input.ofNullable(principalAssignmentName);
            return this;
        }

        public Builder setPrincipalId(Input<String> principalId) {
            this.principalId = Objects.requireNonNull(principalId);
            return this;
        }

        public Builder setPrincipalId(String principalId) {
            this.principalId = Input.of(Objects.requireNonNull(principalId));
            return this;
        }

        public Builder setPrincipalType(Input<Either<String,PrincipalType>> principalType) {
            this.principalType = Objects.requireNonNull(principalType);
            return this;
        }

        public Builder setPrincipalType(Either<String,PrincipalType> principalType) {
            this.principalType = Input.of(Objects.requireNonNull(principalType));
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setRole(Input<Either<String,DatabasePrincipalRole>> role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }

        public Builder setRole(Either<String,DatabasePrincipalRole> role) {
            this.role = Input.of(Objects.requireNonNull(role));
            return this;
        }

        public Builder setTenantId(@Nullable Input<String> tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        public Builder setTenantId(@Nullable String tenantId) {
            this.tenantId = Input.ofNullable(tenantId);
            return this;
        }

        public DatabasePrincipalAssignmentArgs build() {
            return new DatabasePrincipalAssignmentArgs(clusterName, databaseName, principalAssignmentName, principalId, principalType, resourceGroupName, role, tenantId);
        }
    }
}
