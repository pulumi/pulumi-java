// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.inputs;

import io.pulumi.azurenative.datamigration.inputs.FileShareArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
 * 
 */
public final class MigrateSqlServerSqlMIDatabaseInputArgs extends io.pulumi.resources.ResourceArgs {

    public static final MigrateSqlServerSqlMIDatabaseInputArgs Empty = new MigrateSqlServerSqlMIDatabaseInputArgs();

    /**
     * The list of backup files to be used in case of existing backups.
     * 
     */
    @Import(name="backupFilePaths")
      private final @Nullable Output<List<String>> backupFilePaths;

    public Output<List<String>> getBackupFilePaths() {
        return this.backupFilePaths == null ? Codegen.empty() : this.backupFilePaths;
    }

    /**
     * Backup file share information for backing up this database.
     * 
     */
    @Import(name="backupFileShare")
      private final @Nullable Output<FileShareArgs> backupFileShare;

    public Output<FileShareArgs> getBackupFileShare() {
        return this.backupFileShare == null ? Codegen.empty() : this.backupFileShare;
    }

    /**
     * Name of the database
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * Name of the database at destination
     * 
     */
    @Import(name="restoreDatabaseName", required=true)
      private final Output<String> restoreDatabaseName;

    public Output<String> getRestoreDatabaseName() {
        return this.restoreDatabaseName;
    }

    public MigrateSqlServerSqlMIDatabaseInputArgs(
        @Nullable Output<List<String>> backupFilePaths,
        @Nullable Output<FileShareArgs> backupFileShare,
        Output<String> name,
        Output<String> restoreDatabaseName) {
        this.backupFilePaths = backupFilePaths;
        this.backupFileShare = backupFileShare;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.restoreDatabaseName = Objects.requireNonNull(restoreDatabaseName, "expected parameter 'restoreDatabaseName' to be non-null");
    }

    private MigrateSqlServerSqlMIDatabaseInputArgs() {
        this.backupFilePaths = Codegen.empty();
        this.backupFileShare = Codegen.empty();
        this.name = Codegen.empty();
        this.restoreDatabaseName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlMIDatabaseInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> backupFilePaths;
        private @Nullable Output<FileShareArgs> backupFileShare;
        private Output<String> name;
        private Output<String> restoreDatabaseName;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrateSqlServerSqlMIDatabaseInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupFilePaths = defaults.backupFilePaths;
    	      this.backupFileShare = defaults.backupFileShare;
    	      this.name = defaults.name;
    	      this.restoreDatabaseName = defaults.restoreDatabaseName;
        }

        public Builder backupFilePaths(@Nullable Output<List<String>> backupFilePaths) {
            this.backupFilePaths = backupFilePaths;
            return this;
        }
        public Builder backupFilePaths(@Nullable List<String> backupFilePaths) {
            this.backupFilePaths = Codegen.ofNullable(backupFilePaths);
            return this;
        }
        public Builder backupFilePaths(String... backupFilePaths) {
            return backupFilePaths(List.of(backupFilePaths));
        }
        public Builder backupFileShare(@Nullable Output<FileShareArgs> backupFileShare) {
            this.backupFileShare = backupFileShare;
            return this;
        }
        public Builder backupFileShare(@Nullable FileShareArgs backupFileShare) {
            this.backupFileShare = Codegen.ofNullable(backupFileShare);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder restoreDatabaseName(Output<String> restoreDatabaseName) {
            this.restoreDatabaseName = Objects.requireNonNull(restoreDatabaseName);
            return this;
        }
        public Builder restoreDatabaseName(String restoreDatabaseName) {
            this.restoreDatabaseName = Output.of(Objects.requireNonNull(restoreDatabaseName));
            return this;
        }        public MigrateSqlServerSqlMIDatabaseInputArgs build() {
            return new MigrateSqlServerSqlMIDatabaseInputArgs(backupFilePaths, backupFileShare, name, restoreDatabaseName);
        }
    }
}
