// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.hdinsight;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.hdinsight.ClusterArgs;
import io.pulumi.azurenative.hdinsight.outputs.ClusterGetPropertiesResponse;
import io.pulumi.azurenative.hdinsight.outputs.ClusterIdentityResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * The HDInsight cluster.
API Version: 2018-06-01-preview.

{{% examples %}}
## Example Usage
{{% example %}}
### Create HDInsight cluster with Autoscale configuration
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    ComponentVersion = 
                    {
                        { "Hadoop", "2.7" },
                    },
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", true },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "hadoop",
                },
                ClusterVersion = "3.6",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            AutoscaleConfiguration = new AzureNative.HDInsight.Inputs.AutoscaleArgs
                            {
                                Recurrence = new AzureNative.HDInsight.Inputs.AutoscaleRecurrenceArgs
                                {
                                    Schedule = 
                                    {
                                        new AzureNative.HDInsight.Inputs.AutoscaleScheduleArgs
                                        {
                                            Days = 
                                            {
                                                "Monday",
                                                "Tuesday",
                                                "Wednesday",
                                                "Thursday",
                                                "Friday",
                                            },
                                            TimeAndCapacity = new AzureNative.HDInsight.Inputs.AutoscaleTimeAndCapacityArgs
                                            {
                                                MaxInstanceCount = 3,
                                                MinInstanceCount = 3,
                                                Time = "09:00",
                                            },
                                        },
                                        new AzureNative.HDInsight.Inputs.AutoscaleScheduleArgs
                                        {
                                            Days = 
                                            {
                                                "Monday",
                                                "Tuesday",
                                                "Wednesday",
                                                "Thursday",
                                                "Friday",
                                            },
                                            TimeAndCapacity = new AzureNative.HDInsight.Inputs.AutoscaleTimeAndCapacityArgs
                                            {
                                                MaxInstanceCount = 6,
                                                MinInstanceCount = 6,
                                                Time = "18:00",
                                            },
                                        },
                                        new AzureNative.HDInsight.Inputs.AutoscaleScheduleArgs
                                        {
                                            Days = 
                                            {
                                                "Saturday",
                                                "Sunday",
                                            },
                                            TimeAndCapacity = new AzureNative.HDInsight.Inputs.AutoscaleTimeAndCapacityArgs
                                            {
                                                MaxInstanceCount = 2,
                                                MinInstanceCount = 2,
                                                Time = "09:00",
                                            },
                                        },
                                        new AzureNative.HDInsight.Inputs.AutoscaleScheduleArgs
                                        {
                                            Days = 
                                            {
                                                "Saturday",
                                                "Sunday",
                                            },
                                            TimeAndCapacity = new AzureNative.HDInsight.Inputs.AutoscaleTimeAndCapacityArgs
                                            {
                                                MaxInstanceCount = 4,
                                                MinInstanceCount = 4,
                                                Time = "18:00",
                                            },
                                        },
                                    },
                                    TimeZone = "China Standard Time",
                                },
                            },
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D4_V2",
                            },
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            ScriptActions = {},
                            TargetInstanceCount = 4,
                        },
                    },
                },
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "hdinsight-autoscale-tes-2019-06-18t05-49-16-591z",
                            IsDefault = true,
                            Key = "storagekey",
                            Name = "mystorage.blob.core.windows.net",
                        },
                    },
                },
                Tier = "Standard",
            },
            ResourceGroupName = "rg1",
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					ComponentVersion: pulumi.StringMap{
						"Hadoop": pulumi.String("2.7"),
					},
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("hadoop"),
				},
				ClusterVersion: pulumi.String("3.6"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							AutoscaleConfiguration: &hdinsight.AutoscaleArgs{
								Recurrence: &hdinsight.AutoscaleRecurrenceArgs{
									Schedule: hdinsight.AutoscaleScheduleArray{
										&hdinsight.AutoscaleScheduleArgs{
											Days: hdinsight.DaysOfWeekArray{
												"Monday",
												"Tuesday",
												"Wednesday",
												"Thursday",
												"Friday",
											},
											TimeAndCapacity: &hdinsight.AutoscaleTimeAndCapacityArgs{
												MaxInstanceCount: pulumi.Int(3),
												MinInstanceCount: pulumi.Int(3),
												Time:             pulumi.String("09:00"),
											},
										},
										&hdinsight.AutoscaleScheduleArgs{
											Days: hdinsight.DaysOfWeekArray{
												"Monday",
												"Tuesday",
												"Wednesday",
												"Thursday",
												"Friday",
											},
											TimeAndCapacity: &hdinsight.AutoscaleTimeAndCapacityArgs{
												MaxInstanceCount: pulumi.Int(6),
												MinInstanceCount: pulumi.Int(6),
												Time:             pulumi.String("18:00"),
											},
										},
										&hdinsight.AutoscaleScheduleArgs{
											Days: hdinsight.DaysOfWeekArray{
												"Saturday",
												"Sunday",
											},
											TimeAndCapacity: &hdinsight.AutoscaleTimeAndCapacityArgs{
												MaxInstanceCount: pulumi.Int(2),
												MinInstanceCount: pulumi.Int(2),
												Time:             pulumi.String("09:00"),
											},
										},
										&hdinsight.AutoscaleScheduleArgs{
											Days: hdinsight.DaysOfWeekArray{
												"Saturday",
												"Sunday",
											},
											TimeAndCapacity: &hdinsight.AutoscaleTimeAndCapacityArgs{
												MaxInstanceCount: pulumi.Int(4),
												MinInstanceCount: pulumi.Int(4),
												Time:             pulumi.String("18:00"),
											},
										},
									},
									TimeZone: pulumi.String("China Standard Time"),
								},
							},
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D4_V2"),
							},
							Name: pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							ScriptActions:       hdinsight.ScriptActionArray{},
							TargetInstanceCount: pulumi.Int(4),
						},
					},
				},
				OsType: "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("hdinsight-autoscale-tes-2019-06-18t05-49-16-591z"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storagekey"),
							Name:      pulumi.String("mystorage.blob.core.windows.net"),
						},
					},
				},
				Tier: "Standard",
			},
			ResourceGroupName: pulumi.String("rg1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            componentVersion: {
                Hadoop: "2.7",
            },
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": true,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "hadoop",
        },
        clusterVersion: "3.6",
        computeProfile: {
            roles: [{
                autoscaleConfiguration: {
                    recurrence: {
                        schedule: [
                            {
                                days: [
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                ],
                                timeAndCapacity: {
                                    maxInstanceCount: 3,
                                    minInstanceCount: 3,
                                    time: "09:00",
                                },
                            },
                            {
                                days: [
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                ],
                                timeAndCapacity: {
                                    maxInstanceCount: 6,
                                    minInstanceCount: 6,
                                    time: "18:00",
                                },
                            },
                            {
                                days: [
                                    "Saturday",
                                    "Sunday",
                                ],
                                timeAndCapacity: {
                                    maxInstanceCount: 2,
                                    minInstanceCount: 2,
                                    time: "09:00",
                                },
                            },
                            {
                                days: [
                                    "Saturday",
                                    "Sunday",
                                ],
                                timeAndCapacity: {
                                    maxInstanceCount: 4,
                                    minInstanceCount: 4,
                                    time: "18:00",
                                },
                            },
                        ],
                        timeZone: "China Standard Time",
                    },
                },
                hardwareProfile: {
                    vmSize: "Standard_D4_V2",
                },
                name: "workernode",
                osProfile: {
                    linuxOperatingSystemProfile: {
                        password: "**********",
                        username: "sshuser",
                    },
                },
                scriptActions: [],
                targetInstanceCount: 4,
            }],
        },
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                container: "hdinsight-autoscale-tes-2019-06-18t05-49-16-591z",
                isDefault: true,
                key: "storagekey",
                name: "mystorage.blob.core.windows.net",
            }],
        },
        tier: "Standard",
    },
    resourceGroupName: "rg1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            component_version={
                "Hadoop": "2.7",
            },
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": True,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="hadoop",
        ),
        cluster_version="3.6",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[azure_native.hdinsight.RoleArgs(
                autoscale_configuration=azure_native.hdinsight.AutoscaleArgs(
                    recurrence=azure_native.hdinsight.AutoscaleRecurrenceArgs(
                        schedule=[
                            azure_native.hdinsight.AutoscaleScheduleArgs(
                                days=[
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                ],
                                time_and_capacity=azure_native.hdinsight.AutoscaleTimeAndCapacityArgs(
                                    max_instance_count=3,
                                    min_instance_count=3,
                                    time="09:00",
                                ),
                            ),
                            azure_native.hdinsight.AutoscaleScheduleArgs(
                                days=[
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                ],
                                time_and_capacity=azure_native.hdinsight.AutoscaleTimeAndCapacityArgs(
                                    max_instance_count=6,
                                    min_instance_count=6,
                                    time="18:00",
                                ),
                            ),
                            azure_native.hdinsight.AutoscaleScheduleArgs(
                                days=[
                                    "Saturday",
                                    "Sunday",
                                ],
                                time_and_capacity=azure_native.hdinsight.AutoscaleTimeAndCapacityArgs(
                                    max_instance_count=2,
                                    min_instance_count=2,
                                    time="09:00",
                                ),
                            ),
                            azure_native.hdinsight.AutoscaleScheduleArgs(
                                days=[
                                    "Saturday",
                                    "Sunday",
                                ],
                                time_and_capacity=azure_native.hdinsight.AutoscaleTimeAndCapacityArgs(
                                    max_instance_count=4,
                                    min_instance_count=4,
                                    time="18:00",
                                ),
                            ),
                        ],
                        time_zone="China Standard Time",
                    ),
                ),
                hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                    vm_size="Standard_D4_V2",
                ),
                name="workernode",
                os_profile=azure_native.hdinsight.OsProfileArgs(
                    linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                        password="**********",
                        username="sshuser",
                    ),
                ),
                script_actions=[],
                target_instance_count=4,
            )],
        ),
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="hdinsight-autoscale-tes-2019-06-18t05-49-16-591z",
                is_default=True,
                key="storagekey",
                name="mystorage.blob.core.windows.net",
            )],
        ),
        tier="Standard",
    ),
    resource_group_name="rg1")

```

{{% /example %}}
{{% example %}}
### Create Hadoop cluster with Azure Data Lake Storage Gen 2
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", "true" },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "Hadoop",
                },
                ClusterVersion = "3.6",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D3_V2",
                            },
                            MinInstanceCount = 1,
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D3_V2",
                            },
                            MinInstanceCount = 1,
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 4,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Small",
                            },
                            MinInstanceCount = 1,
                            Name = "zookeepernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                    },
                },
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            FileSystem = "default",
                            IsDefault = true,
                            Key = "storagekey",
                            Name = "mystorage.dfs.core.windows.net",
                        },
                    },
                },
                Tier = "Standard",
            },
            ResourceGroupName = "rg1",
            Tags = 
            {
                { "key1", "val1" },
            },
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": "true",
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("Hadoop"),
				},
				ClusterVersion: pulumi.String("3.6"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D3_V2"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D3_V2"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(4),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Small"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("zookeepernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
					},
				},
				OsType: "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							FileSystem: pulumi.String("default"),
							IsDefault:  pulumi.Bool(true),
							Key:        pulumi.String("storagekey"),
							Name:       pulumi.String("mystorage.dfs.core.windows.net"),
						},
					},
				},
				Tier: "Standard",
			},
			ResourceGroupName: pulumi.String("rg1"),
			Tags: pulumi.StringMap{
				"key1": pulumi.String("val1"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": "true",
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "Hadoop",
        },
        clusterVersion: "3.6",
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "Standard_D3_V2",
                    },
                    minInstanceCount: 1,
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                },
                {
                    hardwareProfile: {
                        vmSize: "Standard_D3_V2",
                    },
                    minInstanceCount: 1,
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 4,
                },
                {
                    hardwareProfile: {
                        vmSize: "Small",
                    },
                    minInstanceCount: 1,
                    name: "zookeepernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
            ],
        },
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                fileSystem: "default",
                isDefault: true,
                key: "storagekey",
                name: "mystorage.dfs.core.windows.net",
            }],
        },
        tier: "Standard",
    },
    resourceGroupName: "rg1",
    tags: {
        key1: "val1",
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": "true",
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="Hadoop",
        ),
        cluster_version="3.6",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D3_V2",
                    ),
                    min_instance_count=1,
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D3_V2",
                    ),
                    min_instance_count=1,
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=4,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Small",
                    ),
                    min_instance_count=1,
                    name="zookeepernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
            ],
        ),
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                file_system="default",
                is_default=True,
                key="storagekey",
                name="mystorage.dfs.core.windows.net",
            )],
        ),
        tier="Standard",
    ),
    resource_group_name="rg1",
    tags={
        "key1": "val1",
    })

```

{{% /example %}}
{{% example %}}
### Create Hadoop on Linux cluster with SSH password
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", "true" },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "Hadoop",
                },
                ClusterVersion = "3.5",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D3_V2",
                            },
                            MinInstanceCount = 1,
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D3_V2",
                            },
                            MinInstanceCount = 1,
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 4,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Small",
                            },
                            MinInstanceCount = 1,
                            Name = "zookeepernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                    },
                },
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "containername",
                            IsDefault = true,
                            Key = "storagekey",
                            Name = "mystorage.blob.core.windows.net",
                        },
                    },
                },
                Tier = "Standard",
            },
            ResourceGroupName = "rg1",
            Tags = 
            {
                { "key1", "val1" },
            },
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": "true",
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("Hadoop"),
				},
				ClusterVersion: pulumi.String("3.5"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D3_V2"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D3_V2"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(4),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Small"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("zookeepernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
					},
				},
				OsType: "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("containername"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storagekey"),
							Name:      pulumi.String("mystorage.blob.core.windows.net"),
						},
					},
				},
				Tier: "Standard",
			},
			ResourceGroupName: pulumi.String("rg1"),
			Tags: pulumi.StringMap{
				"key1": pulumi.String("val1"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": "true",
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "Hadoop",
        },
        clusterVersion: "3.5",
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "Standard_D3_V2",
                    },
                    minInstanceCount: 1,
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                },
                {
                    hardwareProfile: {
                        vmSize: "Standard_D3_V2",
                    },
                    minInstanceCount: 1,
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 4,
                },
                {
                    hardwareProfile: {
                        vmSize: "Small",
                    },
                    minInstanceCount: 1,
                    name: "zookeepernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
            ],
        },
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                container: "containername",
                isDefault: true,
                key: "storagekey",
                name: "mystorage.blob.core.windows.net",
            }],
        },
        tier: "Standard",
    },
    resourceGroupName: "rg1",
    tags: {
        key1: "val1",
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": "true",
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="Hadoop",
        ),
        cluster_version="3.5",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D3_V2",
                    ),
                    min_instance_count=1,
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D3_V2",
                    ),
                    min_instance_count=1,
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=4,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Small",
                    ),
                    min_instance_count=1,
                    name="zookeepernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
            ],
        ),
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="containername",
                is_default=True,
                key="storagekey",
                name="mystorage.blob.core.windows.net",
            )],
        ),
        tier="Standard",
    ),
    resource_group_name="rg1",
    tags={
        "key1": "val1",
    })

```

{{% /example %}}
{{% example %}}
### Create Hadoop on Linux cluster with SSH public key
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", true },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "Hadoop",
                },
                ClusterVersion = "3.5",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D3_V2",
                            },
                            MinInstanceCount = 1,
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    SshProfile = new AzureNative.HDInsight.Inputs.SshProfileArgs
                                    {
                                        PublicKeys = 
                                        {
                                            new AzureNative.HDInsight.Inputs.SshPublicKeyArgs
                                            {
                                                CertificateData = "**********",
                                            },
                                        },
                                    },
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D3_V2",
                            },
                            MinInstanceCount = 1,
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 4,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Small",
                            },
                            MinInstanceCount = 1,
                            Name = "zookeepernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                    },
                },
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "containername",
                            IsDefault = true,
                            Key = "storagekey",
                            Name = "mystorage.blob.core.windows.net",
                        },
                    },
                },
                Tier = "Standard",
            },
            ResourceGroupName = "rg1",
            Tags = 
            {
                { "key1", "val1" },
            },
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("Hadoop"),
				},
				ClusterVersion: pulumi.String("3.5"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D3_V2"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									SshProfile: &hdinsight.SshProfileArgs{
										PublicKeys: hdinsight.SshPublicKeyArray{
											&hdinsight.SshPublicKeyArgs{
												CertificateData: pulumi.String("**********"),
											},
										},
									},
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D3_V2"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(4),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Small"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("zookeepernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
					},
				},
				OsType: "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("containername"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storagekey"),
							Name:      pulumi.String("mystorage.blob.core.windows.net"),
						},
					},
				},
				Tier: "Standard",
			},
			ResourceGroupName: pulumi.String("rg1"),
			Tags: pulumi.StringMap{
				"key1": pulumi.String("val1"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": true,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "Hadoop",
        },
        clusterVersion: "3.5",
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "Standard_D3_V2",
                    },
                    minInstanceCount: 1,
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            sshProfile: {
                                publicKeys: [{
                                    certificateData: "**********",
                                }],
                            },
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                },
                {
                    hardwareProfile: {
                        vmSize: "Standard_D3_V2",
                    },
                    minInstanceCount: 1,
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 4,
                },
                {
                    hardwareProfile: {
                        vmSize: "Small",
                    },
                    minInstanceCount: 1,
                    name: "zookeepernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
            ],
        },
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                container: "containername",
                isDefault: true,
                key: "storagekey",
                name: "mystorage.blob.core.windows.net",
            }],
        },
        tier: "Standard",
    },
    resourceGroupName: "rg1",
    tags: {
        key1: "val1",
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": True,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="Hadoop",
        ),
        cluster_version="3.5",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D3_V2",
                    ),
                    min_instance_count=1,
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            ssh_profile=azure_native.hdinsight.SshProfileArgs(
                                public_keys=[azure_native.hdinsight.SshPublicKeyArgs(
                                    certificate_data="**********",
                                )],
                            ),
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D3_V2",
                    ),
                    min_instance_count=1,
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=4,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Small",
                    ),
                    min_instance_count=1,
                    name="zookeepernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
            ],
        ),
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="containername",
                is_default=True,
                key="storagekey",
                name="mystorage.blob.core.windows.net",
            )],
        ),
        tier="Standard",
    ),
    resource_group_name="rg1",
    tags={
        "key1": "val1",
    })

```

{{% /example %}}
{{% example %}}
### Create Kafka cluster with Kafka Rest Proxy
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    ComponentVersion = 
                    {
                        { "Kafka", "2.1" },
                    },
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", true },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "kafka",
                },
                ClusterVersion = "4.0",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Large",
                            },
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            DataDisksGroups = 
                            {
                                new AzureNative.HDInsight.Inputs.DataDisksGroupsArgs
                                {
                                    DisksPerNode = 8,
                                },
                            },
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Large",
                            },
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Small",
                            },
                            Name = "zookeepernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D4_v2",
                            },
                            Name = "kafkamanagementnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "kafkauser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                    },
                },
                KafkaRestProperties = new AzureNative.HDInsight.Inputs.KafkaRestPropertiesArgs
                {
                    ClientGroupInfo = new AzureNative.HDInsight.Inputs.ClientGroupInfoArgs
                    {
                        GroupId = "00000000-0000-0000-0000-111111111111",
                        GroupName = "Kafka security group name",
                    },
                },
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "containername",
                            IsDefault = true,
                            Key = "storagekey",
                            Name = "mystorage.blob.core.windows.net",
                        },
                    },
                },
                Tier = "Standard",
            },
            ResourceGroupName = "rg1",
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					ComponentVersion: pulumi.StringMap{
						"Kafka": pulumi.String("2.1"),
					},
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("kafka"),
				},
				ClusterVersion: pulumi.String("4.0"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Large"),
							},
							Name: pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
						&hdinsight.RoleArgs{
							DataDisksGroups: hdinsight.DataDisksGroupsArray{
								&hdinsight.DataDisksGroupsArgs{
									DisksPerNode: pulumi.Int(8),
								},
							},
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Large"),
							},
							Name: pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Small"),
							},
							Name: pulumi.String("zookeepernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D4_v2"),
							},
							Name: pulumi.String("kafkamanagementnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("kafkauser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
					},
				},
				KafkaRestProperties: &hdinsight.KafkaRestPropertiesArgs{
					ClientGroupInfo: &hdinsight.ClientGroupInfoArgs{
						GroupId:   pulumi.String("00000000-0000-0000-0000-111111111111"),
						GroupName: pulumi.String("Kafka security group name"),
					},
				},
				OsType: "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("containername"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storagekey"),
							Name:      pulumi.String("mystorage.blob.core.windows.net"),
						},
					},
				},
				Tier: "Standard",
			},
			ResourceGroupName: pulumi.String("rg1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            componentVersion: {
                Kafka: "2.1",
            },
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": true,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "kafka",
        },
        clusterVersion: "4.0",
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "Large",
                    },
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                },
                {
                    dataDisksGroups: [{
                        disksPerNode: 8,
                    }],
                    hardwareProfile: {
                        vmSize: "Large",
                    },
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
                {
                    hardwareProfile: {
                        vmSize: "Small",
                    },
                    name: "zookeepernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
                {
                    hardwareProfile: {
                        vmSize: "Standard_D4_v2",
                    },
                    name: "kafkamanagementnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "kafkauser",
                        },
                    },
                    targetInstanceCount: 2,
                },
            ],
        },
        kafkaRestProperties: {
            clientGroupInfo: {
                groupId: "00000000-0000-0000-0000-111111111111",
                groupName: "Kafka security group name",
            },
        },
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                container: "containername",
                isDefault: true,
                key: "storagekey",
                name: "mystorage.blob.core.windows.net",
            }],
        },
        tier: "Standard",
    },
    resourceGroupName: "rg1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            component_version={
                "Kafka": "2.1",
            },
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": True,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="kafka",
        ),
        cluster_version="4.0",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Large",
                    ),
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                ),
                azure_native.hdinsight.RoleArgs(
                    data_disks_groups=[azure_native.hdinsight.DataDisksGroupsArgs(
                        disks_per_node=8,
                    )],
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Large",
                    ),
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Small",
                    ),
                    name="zookeepernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D4_v2",
                    ),
                    name="kafkamanagementnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="kafkauser",
                        ),
                    ),
                    target_instance_count=2,
                ),
            ],
        ),
        kafka_rest_properties=azure_native.hdinsight.KafkaRestPropertiesArgs(
            client_group_info=azure_native.hdinsight.ClientGroupInfoArgs(
                group_id="00000000-0000-0000-0000-111111111111",
                group_name="Kafka security group name",
            ),
        ),
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="containername",
                is_default=True,
                key="storagekey",
                name="mystorage.blob.core.windows.net",
            )],
        ),
        tier="Standard",
    ),
    resource_group_name="rg1")

```

{{% /example %}}
{{% example %}}
### Create Secure Hadoop cluster
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", true },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "Hadoop",
                },
                ClusterVersion = "3.5",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D3_V2",
                            },
                            MinInstanceCount = 1,
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    SshProfile = new AzureNative.HDInsight.Inputs.SshProfileArgs
                                    {
                                        PublicKeys = 
                                        {
                                            new AzureNative.HDInsight.Inputs.SshPublicKeyArgs
                                            {
                                                CertificateData = "**********",
                                            },
                                        },
                                    },
                                    Username = "sshuser",
                                },
                            },
                            ScriptActions = {},
                            TargetInstanceCount = 2,
                            VirtualNetworkProfile = new AzureNative.HDInsight.Inputs.VirtualNetworkProfileArgs
                            {
                                Id = "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                Subnet = "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                            },
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D3_V2",
                            },
                            MinInstanceCount = 1,
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    SshProfile = new AzureNative.HDInsight.Inputs.SshProfileArgs
                                    {
                                        PublicKeys = 
                                        {
                                            new AzureNative.HDInsight.Inputs.SshPublicKeyArgs
                                            {
                                                CertificateData = "**********",
                                            },
                                        },
                                    },
                                    Username = "sshuser",
                                },
                            },
                            ScriptActions = {},
                            TargetInstanceCount = 4,
                            VirtualNetworkProfile = new AzureNative.HDInsight.Inputs.VirtualNetworkProfileArgs
                            {
                                Id = "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                Subnet = "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                            },
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Small",
                            },
                            MinInstanceCount = 1,
                            Name = "zookeepernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    SshProfile = new AzureNative.HDInsight.Inputs.SshProfileArgs
                                    {
                                        PublicKeys = 
                                        {
                                            new AzureNative.HDInsight.Inputs.SshPublicKeyArgs
                                            {
                                                CertificateData = "**********",
                                            },
                                        },
                                    },
                                    Username = "sshuser",
                                },
                            },
                            ScriptActions = {},
                            TargetInstanceCount = 3,
                            VirtualNetworkProfile = new AzureNative.HDInsight.Inputs.VirtualNetworkProfileArgs
                            {
                                Id = "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                Subnet = "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                            },
                        },
                    },
                },
                OsType = "Linux",
                SecurityProfile = new AzureNative.HDInsight.Inputs.SecurityProfileArgs
                {
                    ClusterUsersGroupDNs = 
                    {
                        "hdiusers",
                    },
                    DirectoryType = "ActiveDirectory",
                    Domain = "DomainName",
                    DomainUserPassword = "**********",
                    DomainUsername = "DomainUsername",
                    LdapsUrls = 
                    {
                        "ldaps://10.10.0.4:636",
                    },
                    OrganizationalUnitDN = "OU=Hadoop,DC=hdinsight,DC=test",
                },
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "containername",
                            IsDefault = true,
                            Key = "storage account key",
                            Name = "mystorage.blob.core.windows.net",
                        },
                    },
                },
                Tier = "Premium",
            },
            ResourceGroupName = "rg1",
            Tags = 
            {
                { "key1", "val1" },
            },
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("Hadoop"),
				},
				ClusterVersion: pulumi.String("3.5"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D3_V2"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									SshProfile: &hdinsight.SshProfileArgs{
										PublicKeys: hdinsight.SshPublicKeyArray{
											&hdinsight.SshPublicKeyArgs{
												CertificateData: pulumi.String("**********"),
											},
										},
									},
									Username: pulumi.String("sshuser"),
								},
							},
							ScriptActions:       hdinsight.ScriptActionArray{},
							TargetInstanceCount: pulumi.Int(2),
							VirtualNetworkProfile: &hdinsight.VirtualNetworkProfileArgs{
								Id:     pulumi.String("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: pulumi.String("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D3_V2"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									SshProfile: &hdinsight.SshProfileArgs{
										PublicKeys: hdinsight.SshPublicKeyArray{
											&hdinsight.SshPublicKeyArgs{
												CertificateData: pulumi.String("**********"),
											},
										},
									},
									Username: pulumi.String("sshuser"),
								},
							},
							ScriptActions:       hdinsight.ScriptActionArray{},
							TargetInstanceCount: pulumi.Int(4),
							VirtualNetworkProfile: &hdinsight.VirtualNetworkProfileArgs{
								Id:     pulumi.String("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: pulumi.String("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Small"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("zookeepernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									SshProfile: &hdinsight.SshProfileArgs{
										PublicKeys: hdinsight.SshPublicKeyArray{
											&hdinsight.SshPublicKeyArgs{
												CertificateData: pulumi.String("**********"),
											},
										},
									},
									Username: pulumi.String("sshuser"),
								},
							},
							ScriptActions:       hdinsight.ScriptActionArray{},
							TargetInstanceCount: pulumi.Int(3),
							VirtualNetworkProfile: &hdinsight.VirtualNetworkProfileArgs{
								Id:     pulumi.String("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: pulumi.String("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
					},
				},
				OsType: "Linux",
				SecurityProfile: &hdinsight.SecurityProfileArgs{
					ClusterUsersGroupDNs: pulumi.StringArray{
						pulumi.String("hdiusers"),
					},
					DirectoryType:      "ActiveDirectory",
					Domain:             pulumi.String("DomainName"),
					DomainUserPassword: pulumi.String("**********"),
					DomainUsername:     pulumi.String("DomainUsername"),
					LdapsUrls: pulumi.StringArray{
						pulumi.String("ldaps://10.10.0.4:636"),
					},
					OrganizationalUnitDN: pulumi.String("OU=Hadoop,DC=hdinsight,DC=test"),
				},
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("containername"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storage account key"),
							Name:      pulumi.String("mystorage.blob.core.windows.net"),
						},
					},
				},
				Tier: "Premium",
			},
			ResourceGroupName: pulumi.String("rg1"),
			Tags: pulumi.StringMap{
				"key1": pulumi.String("val1"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": true,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "Hadoop",
        },
        clusterVersion: "3.5",
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "Standard_D3_V2",
                    },
                    minInstanceCount: 1,
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            sshProfile: {
                                publicKeys: [{
                                    certificateData: "**********",
                                }],
                            },
                            username: "sshuser",
                        },
                    },
                    scriptActions: [],
                    targetInstanceCount: 2,
                    virtualNetworkProfile: {
                        id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                        subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                    },
                },
                {
                    hardwareProfile: {
                        vmSize: "Standard_D3_V2",
                    },
                    minInstanceCount: 1,
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            sshProfile: {
                                publicKeys: [{
                                    certificateData: "**********",
                                }],
                            },
                            username: "sshuser",
                        },
                    },
                    scriptActions: [],
                    targetInstanceCount: 4,
                    virtualNetworkProfile: {
                        id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                        subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                    },
                },
                {
                    hardwareProfile: {
                        vmSize: "Small",
                    },
                    minInstanceCount: 1,
                    name: "zookeepernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            sshProfile: {
                                publicKeys: [{
                                    certificateData: "**********",
                                }],
                            },
                            username: "sshuser",
                        },
                    },
                    scriptActions: [],
                    targetInstanceCount: 3,
                    virtualNetworkProfile: {
                        id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                        subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                    },
                },
            ],
        },
        osType: "Linux",
        securityProfile: {
            clusterUsersGroupDNs: ["hdiusers"],
            directoryType: "ActiveDirectory",
            domain: "DomainName",
            domainUserPassword: "**********",
            domainUsername: "DomainUsername",
            ldapsUrls: ["ldaps://10.10.0.4:636"],
            organizationalUnitDN: "OU=Hadoop,DC=hdinsight,DC=test",
        },
        storageProfile: {
            storageaccounts: [{
                container: "containername",
                isDefault: true,
                key: "storage account key",
                name: "mystorage.blob.core.windows.net",
            }],
        },
        tier: "Premium",
    },
    resourceGroupName: "rg1",
    tags: {
        key1: "val1",
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": True,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="Hadoop",
        ),
        cluster_version="3.5",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D3_V2",
                    ),
                    min_instance_count=1,
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            ssh_profile=azure_native.hdinsight.SshProfileArgs(
                                public_keys=[azure_native.hdinsight.SshPublicKeyArgs(
                                    certificate_data="**********",
                                )],
                            ),
                            username="sshuser",
                        ),
                    ),
                    script_actions=[],
                    target_instance_count=2,
                    virtual_network_profile=azure_native.hdinsight.VirtualNetworkProfileArgs(
                        id="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                        subnet="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                    ),
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D3_V2",
                    ),
                    min_instance_count=1,
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            ssh_profile=azure_native.hdinsight.SshProfileArgs(
                                public_keys=[azure_native.hdinsight.SshPublicKeyArgs(
                                    certificate_data="**********",
                                )],
                            ),
                            username="sshuser",
                        ),
                    ),
                    script_actions=[],
                    target_instance_count=4,
                    virtual_network_profile=azure_native.hdinsight.VirtualNetworkProfileArgs(
                        id="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                        subnet="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                    ),
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Small",
                    ),
                    min_instance_count=1,
                    name="zookeepernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            ssh_profile=azure_native.hdinsight.SshProfileArgs(
                                public_keys=[azure_native.hdinsight.SshPublicKeyArgs(
                                    certificate_data="**********",
                                )],
                            ),
                            username="sshuser",
                        ),
                    ),
                    script_actions=[],
                    target_instance_count=3,
                    virtual_network_profile=azure_native.hdinsight.VirtualNetworkProfileArgs(
                        id="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                        subnet="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                    ),
                ),
            ],
        ),
        os_type="Linux",
        security_profile=azure_native.hdinsight.SecurityProfileArgs(
            cluster_users_group_dns=["hdiusers"],
            directory_type="ActiveDirectory",
            domain="DomainName",
            domain_user_password="**********",
            domain_username="DomainUsername",
            ldaps_urls=["ldaps://10.10.0.4:636"],
            organizational_unit_dn="OU=Hadoop,DC=hdinsight,DC=test",
        ),
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="containername",
                is_default=True,
                key="storage account key",
                name="mystorage.blob.core.windows.net",
            )],
        ),
        tier="Premium",
    ),
    resource_group_name="rg1",
    tags={
        "key1": "val1",
    })

```

{{% /example %}}
{{% example %}}
### Create Spark on Linux Cluster with SSH password
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    ComponentVersion = 
                    {
                        { "Spark", "2.0" },
                    },
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", true },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "Spark",
                },
                ClusterVersion = "3.5",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D12_V2",
                            },
                            MinInstanceCount = 1,
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_D4_V2",
                            },
                            MinInstanceCount = 1,
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 4,
                        },
                    },
                },
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "containername",
                            IsDefault = true,
                            Key = "storageapikey*",
                            Name = "mystorage.blob.core.windows.net",
                        },
                    },
                },
                Tier = "Standard",
            },
            ResourceGroupName = "rg1",
            Tags = 
            {
                { "key1", "val1" },
            },
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					ComponentVersion: pulumi.StringMap{
						"Spark": pulumi.String("2.0"),
					},
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("Spark"),
				},
				ClusterVersion: pulumi.String("3.5"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D12_V2"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_D4_V2"),
							},
							MinInstanceCount: pulumi.Int(1),
							Name:             pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(4),
						},
					},
				},
				OsType: "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("containername"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storageapikey*"),
							Name:      pulumi.String("mystorage.blob.core.windows.net"),
						},
					},
				},
				Tier: "Standard",
			},
			ResourceGroupName: pulumi.String("rg1"),
			Tags: pulumi.StringMap{
				"key1": pulumi.String("val1"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            componentVersion: {
                Spark: "2.0",
            },
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": true,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "Spark",
        },
        clusterVersion: "3.5",
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "Standard_D12_V2",
                    },
                    minInstanceCount: 1,
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                },
                {
                    hardwareProfile: {
                        vmSize: "Standard_D4_V2",
                    },
                    minInstanceCount: 1,
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 4,
                },
            ],
        },
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                container: "containername",
                isDefault: true,
                key: "storageapikey*",
                name: "mystorage.blob.core.windows.net",
            }],
        },
        tier: "Standard",
    },
    resourceGroupName: "rg1",
    tags: {
        key1: "val1",
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            component_version={
                "Spark": "2.0",
            },
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": True,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="Spark",
        ),
        cluster_version="3.5",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D12_V2",
                    ),
                    min_instance_count=1,
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_D4_V2",
                    ),
                    min_instance_count=1,
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=4,
                ),
            ],
        ),
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="containername",
                is_default=True,
                key="storageapikey*",
                name="mystorage.blob.core.windows.net",
            )],
        ),
        tier="Standard",
    ),
    resource_group_name="rg1",
    tags={
        "key1": "val1",
    })

```

{{% /example %}}
{{% example %}}
### Create cluster with TLS 1.2
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", true },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "Hadoop",
                },
                ClusterVersion = "3.6",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Large",
                            },
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Large",
                            },
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Small",
                            },
                            Name = "zookeepernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                    },
                },
                MinSupportedTlsVersion = "1.2",
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "default8525",
                            IsDefault = true,
                            Key = "storagekey",
                            Name = "mystorage.blob.core.windows.net",
                        },
                    },
                },
                Tier = "Standard",
            },
            ResourceGroupName = "rg1",
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("Hadoop"),
				},
				ClusterVersion: pulumi.String("3.6"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Large"),
							},
							Name: pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Large"),
							},
							Name: pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Small"),
							},
							Name: pulumi.String("zookeepernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
					},
				},
				MinSupportedTlsVersion: pulumi.String("1.2"),
				OsType:                 "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("default8525"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storagekey"),
							Name:      pulumi.String("mystorage.blob.core.windows.net"),
						},
					},
				},
				Tier: "Standard",
			},
			ResourceGroupName: pulumi.String("rg1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": true,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "Hadoop",
        },
        clusterVersion: "3.6",
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "Large",
                    },
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                },
                {
                    hardwareProfile: {
                        vmSize: "Large",
                    },
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
                {
                    hardwareProfile: {
                        vmSize: "Small",
                    },
                    name: "zookeepernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
            ],
        },
        minSupportedTlsVersion: "1.2",
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                container: "default8525",
                isDefault: true,
                key: "storagekey",
                name: "mystorage.blob.core.windows.net",
            }],
        },
        tier: "Standard",
    },
    resourceGroupName: "rg1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": True,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="Hadoop",
        ),
        cluster_version="3.6",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Large",
                    ),
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Large",
                    ),
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Small",
                    ),
                    name="zookeepernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
            ],
        ),
        min_supported_tls_version="1.2",
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="default8525",
                is_default=True,
                key="storagekey",
                name="mystorage.blob.core.windows.net",
            )],
        ),
        tier="Standard",
    ),
    resource_group_name="rg1")

```

{{% /example %}}
{{% example %}}
### Create cluster with compute isolation properties
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", true },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "hadoop",
                },
                ClusterVersion = "3.6",
                ComputeIsolationProperties = new AzureNative.HDInsight.Inputs.ComputeIsolationPropertiesArgs
                {
                    EnableComputeIsolation = true,
                },
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "standard_d3",
                            },
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    SshProfile = new AzureNative.HDInsight.Inputs.SshProfileArgs
                                    {
                                        PublicKeys = 
                                        {
                                            new AzureNative.HDInsight.Inputs.SshPublicKeyArgs
                                            {
                                                CertificateData = "**********",
                                            },
                                        },
                                    },
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "standard_d3",
                            },
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    SshProfile = new AzureNative.HDInsight.Inputs.SshProfileArgs
                                    {
                                        PublicKeys = 
                                        {
                                            new AzureNative.HDInsight.Inputs.SshPublicKeyArgs
                                            {
                                                CertificateData = "**********",
                                            },
                                        },
                                    },
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                    },
                },
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "containername",
                            IsDefault = true,
                            Key = "storage account key",
                            Name = "mystorage",
                        },
                    },
                },
            },
            ResourceGroupName = "rg1",
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("hadoop"),
				},
				ClusterVersion: pulumi.String("3.6"),
				ComputeIsolationProperties: &hdinsight.ComputeIsolationPropertiesArgs{
					EnableComputeIsolation: pulumi.Bool(true),
				},
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("standard_d3"),
							},
							Name: pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									SshProfile: &hdinsight.SshProfileArgs{
										PublicKeys: hdinsight.SshPublicKeyArray{
											&hdinsight.SshPublicKeyArgs{
												CertificateData: pulumi.String("**********"),
											},
										},
									},
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("standard_d3"),
							},
							Name: pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									SshProfile: &hdinsight.SshProfileArgs{
										PublicKeys: hdinsight.SshPublicKeyArray{
											&hdinsight.SshPublicKeyArgs{
												CertificateData: pulumi.String("**********"),
											},
										},
									},
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
					},
				},
				OsType: "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("containername"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storage account key"),
							Name:      pulumi.String("mystorage"),
						},
					},
				},
			},
			ResourceGroupName: pulumi.String("rg1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": true,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "hadoop",
        },
        clusterVersion: "3.6",
        computeIsolationProperties: {
            enableComputeIsolation: true,
        },
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "standard_d3",
                    },
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            sshProfile: {
                                publicKeys: [{
                                    certificateData: "**********",
                                }],
                            },
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                },
                {
                    hardwareProfile: {
                        vmSize: "standard_d3",
                    },
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            sshProfile: {
                                publicKeys: [{
                                    certificateData: "**********",
                                }],
                            },
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                },
            ],
        },
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                container: "containername",
                isDefault: true,
                key: "storage account key",
                name: "mystorage",
            }],
        },
    },
    resourceGroupName: "rg1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": True,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="hadoop",
        ),
        cluster_version="3.6",
        compute_isolation_properties=azure_native.hdinsight.ComputeIsolationPropertiesArgs(
            enable_compute_isolation=True,
        ),
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="standard_d3",
                    ),
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            ssh_profile=azure_native.hdinsight.SshProfileArgs(
                                public_keys=[azure_native.hdinsight.SshPublicKeyArgs(
                                    certificate_data="**********",
                                )],
                            ),
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="standard_d3",
                    ),
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            ssh_profile=azure_native.hdinsight.SshProfileArgs(
                                public_keys=[azure_native.hdinsight.SshPublicKeyArgs(
                                    certificate_data="**********",
                                )],
                            ),
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                ),
            ],
        ),
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="containername",
                is_default=True,
                key="storage account key",
                name="mystorage",
            )],
        ),
    ),
    resource_group_name="rg1")

```

{{% /example %}}
{{% example %}}
### Create cluster with encryption at host
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", true },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "Hadoop",
                },
                ClusterVersion = "3.6",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_DS14_v2",
                            },
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_DS14_v2",
                            },
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Standard_DS14_v2",
                            },
                            Name = "zookeepernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                    },
                },
                DiskEncryptionProperties = new AzureNative.HDInsight.Inputs.DiskEncryptionPropertiesArgs
                {
                    EncryptionAtHost = true,
                },
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "default8525",
                            IsDefault = true,
                            Key = "storagekey",
                            Name = "mystorage.blob.core.windows.net",
                        },
                    },
                },
                Tier = "Standard",
            },
            ResourceGroupName = "rg1",
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("Hadoop"),
				},
				ClusterVersion: pulumi.String("3.6"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_DS14_v2"),
							},
							Name: pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_DS14_v2"),
							},
							Name: pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Standard_DS14_v2"),
							},
							Name: pulumi.String("zookeepernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
					},
				},
				DiskEncryptionProperties: &hdinsight.DiskEncryptionPropertiesArgs{
					EncryptionAtHost: pulumi.Bool(true),
				},
				OsType: "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("default8525"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storagekey"),
							Name:      pulumi.String("mystorage.blob.core.windows.net"),
						},
					},
				},
				Tier: "Standard",
			},
			ResourceGroupName: pulumi.String("rg1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": true,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "Hadoop",
        },
        clusterVersion: "3.6",
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "Standard_DS14_v2",
                    },
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                },
                {
                    hardwareProfile: {
                        vmSize: "Standard_DS14_v2",
                    },
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
                {
                    hardwareProfile: {
                        vmSize: "Standard_DS14_v2",
                    },
                    name: "zookeepernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
            ],
        },
        diskEncryptionProperties: {
            encryptionAtHost: true,
        },
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                container: "default8525",
                isDefault: true,
                key: "storagekey",
                name: "mystorage.blob.core.windows.net",
            }],
        },
        tier: "Standard",
    },
    resourceGroupName: "rg1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": True,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="Hadoop",
        ),
        cluster_version="3.6",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_DS14_v2",
                    ),
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_DS14_v2",
                    ),
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Standard_DS14_v2",
                    ),
                    name="zookeepernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
            ],
        ),
        disk_encryption_properties=azure_native.hdinsight.DiskEncryptionPropertiesArgs(
            encryption_at_host=True,
        ),
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="default8525",
                is_default=True,
                key="storagekey",
                name="mystorage.blob.core.windows.net",
            )],
        ),
        tier="Standard",
    ),
    resource_group_name="rg1")

```

{{% /example %}}
{{% example %}}
### Create cluster with encryption in transit
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", true },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "Hadoop",
                },
                ClusterVersion = "3.6",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Large",
                            },
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Large",
                            },
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "Small",
                            },
                            Name = "zookeepernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 3,
                        },
                    },
                },
                EncryptionInTransitProperties = new AzureNative.HDInsight.Inputs.EncryptionInTransitPropertiesArgs
                {
                    IsEncryptionInTransitEnabled = true,
                },
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "default8525",
                            IsDefault = true,
                            Key = "storagekey",
                            Name = "mystorage.blob.core.windows.net",
                        },
                    },
                },
                Tier = "Standard",
            },
            ResourceGroupName = "rg1",
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("Hadoop"),
				},
				ClusterVersion: pulumi.String("3.6"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Large"),
							},
							Name: pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Large"),
							},
							Name: pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("Small"),
							},
							Name: pulumi.String("zookeepernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(3),
						},
					},
				},
				EncryptionInTransitProperties: &hdinsight.EncryptionInTransitPropertiesArgs{
					IsEncryptionInTransitEnabled: pulumi.Bool(true),
				},
				OsType: "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("default8525"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storagekey"),
							Name:      pulumi.String("mystorage.blob.core.windows.net"),
						},
					},
				},
				Tier: "Standard",
			},
			ResourceGroupName: pulumi.String("rg1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": true,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "Hadoop",
        },
        clusterVersion: "3.6",
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "Large",
                    },
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                },
                {
                    hardwareProfile: {
                        vmSize: "Large",
                    },
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
                {
                    hardwareProfile: {
                        vmSize: "Small",
                    },
                    name: "zookeepernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 3,
                },
            ],
        },
        encryptionInTransitProperties: {
            isEncryptionInTransitEnabled: true,
        },
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                container: "default8525",
                isDefault: true,
                key: "storagekey",
                name: "mystorage.blob.core.windows.net",
            }],
        },
        tier: "Standard",
    },
    resourceGroupName: "rg1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": True,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="Hadoop",
        ),
        cluster_version="3.6",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Large",
                    ),
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Large",
                    ),
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="Small",
                    ),
                    name="zookeepernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=3,
                ),
            ],
        ),
        encryption_in_transit_properties=azure_native.hdinsight.EncryptionInTransitPropertiesArgs(
            is_encryption_in_transit_enabled=True,
        ),
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="default8525",
                is_default=True,
                key="storagekey",
                name="mystorage.blob.core.windows.net",
            )],
        ),
        tier="Standard",
    ),
    resource_group_name="rg1")

```

{{% /example %}}
{{% example %}}
### Create cluster with network properties
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var cluster = new AzureNative.HDInsight.Cluster("cluster", new AzureNative.HDInsight.ClusterArgs
        {
            ClusterName = "cluster1",
            Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
            {
                ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
                {
                    Configurations = 
                    {
                        { "gateway", 
                        {
                            { "restAuthCredential.isEnabled", true },
                            { "restAuthCredential.password", "**********" },
                            { "restAuthCredential.username", "admin" },
                        } },
                    },
                    Kind = "hadoop",
                },
                ClusterVersion = "3.6",
                ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
                {
                    Roles = 
                    {
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "standard_d3",
                            },
                            Name = "headnode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    SshProfile = new AzureNative.HDInsight.Inputs.SshProfileArgs
                                    {
                                        PublicKeys = 
                                        {
                                            new AzureNative.HDInsight.Inputs.SshPublicKeyArgs
                                            {
                                                CertificateData = "**********",
                                            },
                                        },
                                    },
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                            VirtualNetworkProfile = new AzureNative.HDInsight.Inputs.VirtualNetworkProfileArgs
                            {
                                Id = "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                Subnet = "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                            },
                        },
                        new AzureNative.HDInsight.Inputs.RoleArgs
                        {
                            HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                            {
                                VmSize = "standard_d3",
                            },
                            Name = "workernode",
                            OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                            {
                                LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                                {
                                    Password = "**********",
                                    SshProfile = new AzureNative.HDInsight.Inputs.SshProfileArgs
                                    {
                                        PublicKeys = 
                                        {
                                            new AzureNative.HDInsight.Inputs.SshPublicKeyArgs
                                            {
                                                CertificateData = "**********",
                                            },
                                        },
                                    },
                                    Username = "sshuser",
                                },
                            },
                            TargetInstanceCount = 2,
                            VirtualNetworkProfile = new AzureNative.HDInsight.Inputs.VirtualNetworkProfileArgs
                            {
                                Id = "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                Subnet = "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                            },
                        },
                    },
                },
                NetworkProperties = new AzureNative.HDInsight.Inputs.NetworkPropertiesArgs
                {
                    PrivateLink = "Enabled",
                    ResourceProviderConnection = "Outbound",
                },
                OsType = "Linux",
                StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
                {
                    Storageaccounts = 
                    {
                        new AzureNative.HDInsight.Inputs.StorageAccountArgs
                        {
                            Container = "containername",
                            IsDefault = true,
                            Key = "storage account key",
                            Name = "mystorage",
                        },
                    },
                },
            },
            ResourceGroupName = "rg1",
        });
    }

}

```

```go
package main

import (
	hdinsight "github.com/pulumi/pulumi-azure-native/sdk/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := hdinsight.NewCluster(ctx, "cluster", &hdinsight.ClusterArgs{
			ClusterName: pulumi.String("cluster1"),
			Properties: &hdinsight.ClusterCreatePropertiesArgs{
				ClusterDefinition: &hdinsight.ClusterDefinitionArgs{
					Configurations: pulumi.Any{
						Gateway: map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: pulumi.String("hadoop"),
				},
				ClusterVersion: pulumi.String("3.6"),
				ComputeProfile: &hdinsight.ComputeProfileArgs{
					Roles: hdinsight.RoleArray{
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("standard_d3"),
							},
							Name: pulumi.String("headnode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									SshProfile: &hdinsight.SshProfileArgs{
										PublicKeys: hdinsight.SshPublicKeyArray{
											&hdinsight.SshPublicKeyArgs{
												CertificateData: pulumi.String("**********"),
											},
										},
									},
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
							VirtualNetworkProfile: &hdinsight.VirtualNetworkProfileArgs{
								Id:     pulumi.String("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: pulumi.String("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
						&hdinsight.RoleArgs{
							HardwareProfile: &hdinsight.HardwareProfileArgs{
								VmSize: pulumi.String("standard_d3"),
							},
							Name: pulumi.String("workernode"),
							OsProfile: &hdinsight.OsProfileArgs{
								LinuxOperatingSystemProfile: &hdinsight.LinuxOperatingSystemProfileArgs{
									Password: pulumi.String("**********"),
									SshProfile: &hdinsight.SshProfileArgs{
										PublicKeys: hdinsight.SshPublicKeyArray{
											&hdinsight.SshPublicKeyArgs{
												CertificateData: pulumi.String("**********"),
											},
										},
									},
									Username: pulumi.String("sshuser"),
								},
							},
							TargetInstanceCount: pulumi.Int(2),
							VirtualNetworkProfile: &hdinsight.VirtualNetworkProfileArgs{
								Id:     pulumi.String("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: pulumi.String("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
					},
				},
				NetworkProperties: &hdinsight.NetworkPropertiesArgs{
					PrivateLink:                pulumi.String("Enabled"),
					ResourceProviderConnection: pulumi.String("Outbound"),
				},
				OsType: "Linux",
				StorageProfile: &hdinsight.StorageProfileArgs{
					Storageaccounts: hdinsight.StorageAccountArray{
						&hdinsight.StorageAccountArgs{
							Container: pulumi.String("containername"),
							IsDefault: pulumi.Bool(true),
							Key:       pulumi.String("storage account key"),
							Name:      pulumi.String("mystorage"),
						},
					},
				},
			},
			ResourceGroupName: pulumi.String("rg1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const cluster = new azure_native.hdinsight.Cluster("cluster", {
    clusterName: "cluster1",
    properties: {
        clusterDefinition: {
            configurations: {
                gateway: {
                    "restAuthCredential.isEnabled": true,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind: "hadoop",
        },
        clusterVersion: "3.6",
        computeProfile: {
            roles: [
                {
                    hardwareProfile: {
                        vmSize: "standard_d3",
                    },
                    name: "headnode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            sshProfile: {
                                publicKeys: [{
                                    certificateData: "**********",
                                }],
                            },
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                    virtualNetworkProfile: {
                        id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                        subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                    },
                },
                {
                    hardwareProfile: {
                        vmSize: "standard_d3",
                    },
                    name: "workernode",
                    osProfile: {
                        linuxOperatingSystemProfile: {
                            password: "**********",
                            sshProfile: {
                                publicKeys: [{
                                    certificateData: "**********",
                                }],
                            },
                            username: "sshuser",
                        },
                    },
                    targetInstanceCount: 2,
                    virtualNetworkProfile: {
                        id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                        subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                    },
                },
            ],
        },
        networkProperties: {
            privateLink: "Enabled",
            resourceProviderConnection: "Outbound",
        },
        osType: "Linux",
        storageProfile: {
            storageaccounts: [{
                container: "containername",
                isDefault: true,
                key: "storage account key",
                name: "mystorage",
            }],
        },
    },
    resourceGroupName: "rg1",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

cluster = azure_native.hdinsight.Cluster("cluster",
    cluster_name="cluster1",
    properties=azure_native.hdinsight.ClusterCreatePropertiesArgs(
        cluster_definition=azure_native.hdinsight.ClusterDefinitionArgs(
            configurations={
                "gateway": {
                    "restAuthCredential.isEnabled": True,
                    "restAuthCredential.password": "**********",
                    "restAuthCredential.username": "admin",
                },
            },
            kind="hadoop",
        ),
        cluster_version="3.6",
        compute_profile=azure_native.hdinsight.ComputeProfileArgs(
            roles=[
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="standard_d3",
                    ),
                    name="headnode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            ssh_profile=azure_native.hdinsight.SshProfileArgs(
                                public_keys=[azure_native.hdinsight.SshPublicKeyArgs(
                                    certificate_data="**********",
                                )],
                            ),
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                    virtual_network_profile=azure_native.hdinsight.VirtualNetworkProfileArgs(
                        id="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                        subnet="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                    ),
                ),
                azure_native.hdinsight.RoleArgs(
                    hardware_profile=azure_native.hdinsight.HardwareProfileArgs(
                        vm_size="standard_d3",
                    ),
                    name="workernode",
                    os_profile=azure_native.hdinsight.OsProfileArgs(
                        linux_operating_system_profile=azure_native.hdinsight.LinuxOperatingSystemProfileArgs(
                            password="**********",
                            ssh_profile=azure_native.hdinsight.SshProfileArgs(
                                public_keys=[azure_native.hdinsight.SshPublicKeyArgs(
                                    certificate_data="**********",
                                )],
                            ),
                            username="sshuser",
                        ),
                    ),
                    target_instance_count=2,
                    virtual_network_profile=azure_native.hdinsight.VirtualNetworkProfileArgs(
                        id="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                        subnet="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet",
                    ),
                ),
            ],
        ),
        network_properties=azure_native.hdinsight.NetworkPropertiesArgs(
            private_link="Enabled",
            resource_provider_connection="Outbound",
        ),
        os_type="Linux",
        storage_profile=azure_native.hdinsight.StorageProfileArgs(
            storageaccounts=[azure_native.hdinsight.StorageAccountArgs(
                container="containername",
                is_default=True,
                key="storage account key",
                name="mystorage",
            )],
        ),
    ),
    resource_group_name="rg1")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:hdinsight:Cluster cluster1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1 
```

 */
@ResourceType(type="azure-native:hdinsight:Cluster")
public class Cluster extends io.pulumi.resources.CustomResource {
    /**
     * The ETag for the resource
     */
    @OutputExport(name="etag", type=String.class, parameters={})
    private Output</* @Nullable */ String> etag;

    /**
     * @return The ETag for the resource
     */
    public Output</* @Nullable */ String> getEtag() {
        return this.etag;
    }
    /**
     * The identity of the cluster, if configured.
     */
    @OutputExport(name="identity", type=ClusterIdentityResponse.class, parameters={})
    private Output</* @Nullable */ ClusterIdentityResponse> identity;

    /**
     * @return The identity of the cluster, if configured.
     */
    public Output</* @Nullable */ ClusterIdentityResponse> getIdentity() {
        return this.identity;
    }
    /**
     * The Azure Region where the resource lives
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return The Azure Region where the resource lives
     */
    public Output</* @Nullable */ String> getLocation() {
        return this.location;
    }
    /**
     * The name of the resource
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The properties of the cluster.
     */
    @OutputExport(name="properties", type=ClusterGetPropertiesResponse.class, parameters={})
    private Output<ClusterGetPropertiesResponse> properties;

    /**
     * @return The properties of the cluster.
     */
    public Output<ClusterGetPropertiesResponse> getProperties() {
        return this.properties;
    }
    /**
     * Resource tags.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * The type of the resource.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Cluster(String name, ClusterArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:hdinsight:Cluster", name, args == null ? ClusterArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Cluster(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:hdinsight:Cluster", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:hdinsight/v20150301preview:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:hdinsight/v20180601preview:Cluster").build()),
                Input.of(Alias.builder().setType("azure-native:hdinsight/v20210601:Cluster").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Cluster get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Cluster(name, id, options);
    }
}
