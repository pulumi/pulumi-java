// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.compute.enums.HyperVGeneration;
import io.pulumi.azurenative.compute.enums.NetworkAccessPolicy;
import io.pulumi.azurenative.compute.enums.OperatingSystemTypes;
import io.pulumi.azurenative.compute.inputs.CreationDataArgs;
import io.pulumi.azurenative.compute.inputs.DiskSecurityProfileArgs;
import io.pulumi.azurenative.compute.inputs.DiskSkuArgs;
import io.pulumi.azurenative.compute.inputs.EncryptionArgs;
import io.pulumi.azurenative.compute.inputs.EncryptionSettingsCollectionArgs;
import io.pulumi.azurenative.compute.inputs.ExtendedLocationArgs;
import io.pulumi.azurenative.compute.inputs.PurchasePlanArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DiskArgs extends io.pulumi.resources.ResourceArgs {

    public static final DiskArgs Empty = new DiskArgs();

    @InputImport(name="burstingEnabled")
    private final @Nullable Input<Boolean> burstingEnabled;

    public Input<Boolean> getBurstingEnabled() {
        return this.burstingEnabled == null ? Input.empty() : this.burstingEnabled;
    }

    @InputImport(name="creationData", required=true)
    private final Input<CreationDataArgs> creationData;

    public Input<CreationDataArgs> getCreationData() {
        return this.creationData;
    }

    @InputImport(name="diskAccessId")
    private final @Nullable Input<String> diskAccessId;

    public Input<String> getDiskAccessId() {
        return this.diskAccessId == null ? Input.empty() : this.diskAccessId;
    }

    @InputImport(name="diskIOPSReadOnly")
    private final @Nullable Input<Double> diskIOPSReadOnly;

    public Input<Double> getDiskIOPSReadOnly() {
        return this.diskIOPSReadOnly == null ? Input.empty() : this.diskIOPSReadOnly;
    }

    @InputImport(name="diskIOPSReadWrite")
    private final @Nullable Input<Double> diskIOPSReadWrite;

    public Input<Double> getDiskIOPSReadWrite() {
        return this.diskIOPSReadWrite == null ? Input.empty() : this.diskIOPSReadWrite;
    }

    @InputImport(name="diskMBpsReadOnly")
    private final @Nullable Input<Double> diskMBpsReadOnly;

    public Input<Double> getDiskMBpsReadOnly() {
        return this.diskMBpsReadOnly == null ? Input.empty() : this.diskMBpsReadOnly;
    }

    @InputImport(name="diskMBpsReadWrite")
    private final @Nullable Input<Double> diskMBpsReadWrite;

    public Input<Double> getDiskMBpsReadWrite() {
        return this.diskMBpsReadWrite == null ? Input.empty() : this.diskMBpsReadWrite;
    }

    @InputImport(name="diskName")
    private final @Nullable Input<String> diskName;

    public Input<String> getDiskName() {
        return this.diskName == null ? Input.empty() : this.diskName;
    }

    @InputImport(name="diskSizeGB")
    private final @Nullable Input<Integer> diskSizeGB;

    public Input<Integer> getDiskSizeGB() {
        return this.diskSizeGB == null ? Input.empty() : this.diskSizeGB;
    }

    @InputImport(name="encryption")
    private final @Nullable Input<EncryptionArgs> encryption;

    public Input<EncryptionArgs> getEncryption() {
        return this.encryption == null ? Input.empty() : this.encryption;
    }

    @InputImport(name="encryptionSettingsCollection")
    private final @Nullable Input<EncryptionSettingsCollectionArgs> encryptionSettingsCollection;

    public Input<EncryptionSettingsCollectionArgs> getEncryptionSettingsCollection() {
        return this.encryptionSettingsCollection == null ? Input.empty() : this.encryptionSettingsCollection;
    }

    @InputImport(name="extendedLocation")
    private final @Nullable Input<ExtendedLocationArgs> extendedLocation;

    public Input<ExtendedLocationArgs> getExtendedLocation() {
        return this.extendedLocation == null ? Input.empty() : this.extendedLocation;
    }

    @InputImport(name="hyperVGeneration")
    private final @Nullable Input<Either<String,HyperVGeneration>> hyperVGeneration;

    public Input<Either<String,HyperVGeneration>> getHyperVGeneration() {
        return this.hyperVGeneration == null ? Input.empty() : this.hyperVGeneration;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="maxShares")
    private final @Nullable Input<Integer> maxShares;

    public Input<Integer> getMaxShares() {
        return this.maxShares == null ? Input.empty() : this.maxShares;
    }

    @InputImport(name="networkAccessPolicy")
    private final @Nullable Input<Either<String,NetworkAccessPolicy>> networkAccessPolicy;

    public Input<Either<String,NetworkAccessPolicy>> getNetworkAccessPolicy() {
        return this.networkAccessPolicy == null ? Input.empty() : this.networkAccessPolicy;
    }

    @InputImport(name="osType")
    private final @Nullable Input<OperatingSystemTypes> osType;

    public Input<OperatingSystemTypes> getOsType() {
        return this.osType == null ? Input.empty() : this.osType;
    }

    @InputImport(name="purchasePlan")
    private final @Nullable Input<PurchasePlanArgs> purchasePlan;

    public Input<PurchasePlanArgs> getPurchasePlan() {
        return this.purchasePlan == null ? Input.empty() : this.purchasePlan;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="securityProfile")
    private final @Nullable Input<DiskSecurityProfileArgs> securityProfile;

    public Input<DiskSecurityProfileArgs> getSecurityProfile() {
        return this.securityProfile == null ? Input.empty() : this.securityProfile;
    }

    @InputImport(name="sku")
    private final @Nullable Input<DiskSkuArgs> sku;

    public Input<DiskSkuArgs> getSku() {
        return this.sku == null ? Input.empty() : this.sku;
    }

    @InputImport(name="supportsHibernation")
    private final @Nullable Input<Boolean> supportsHibernation;

    public Input<Boolean> getSupportsHibernation() {
        return this.supportsHibernation == null ? Input.empty() : this.supportsHibernation;
    }

    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="tier")
    private final @Nullable Input<String> tier;

    public Input<String> getTier() {
        return this.tier == null ? Input.empty() : this.tier;
    }

    @InputImport(name="zones")
    private final @Nullable Input<List<String>> zones;

    public Input<List<String>> getZones() {
        return this.zones == null ? Input.empty() : this.zones;
    }

    public DiskArgs(
        @Nullable Input<Boolean> burstingEnabled,
        Input<CreationDataArgs> creationData,
        @Nullable Input<String> diskAccessId,
        @Nullable Input<Double> diskIOPSReadOnly,
        @Nullable Input<Double> diskIOPSReadWrite,
        @Nullable Input<Double> diskMBpsReadOnly,
        @Nullable Input<Double> diskMBpsReadWrite,
        @Nullable Input<String> diskName,
        @Nullable Input<Integer> diskSizeGB,
        @Nullable Input<EncryptionArgs> encryption,
        @Nullable Input<EncryptionSettingsCollectionArgs> encryptionSettingsCollection,
        @Nullable Input<ExtendedLocationArgs> extendedLocation,
        @Nullable Input<Either<String,HyperVGeneration>> hyperVGeneration,
        @Nullable Input<String> location,
        @Nullable Input<Integer> maxShares,
        @Nullable Input<Either<String,NetworkAccessPolicy>> networkAccessPolicy,
        @Nullable Input<OperatingSystemTypes> osType,
        @Nullable Input<PurchasePlanArgs> purchasePlan,
        Input<String> resourceGroupName,
        @Nullable Input<DiskSecurityProfileArgs> securityProfile,
        @Nullable Input<DiskSkuArgs> sku,
        @Nullable Input<Boolean> supportsHibernation,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> tier,
        @Nullable Input<List<String>> zones) {
        this.burstingEnabled = burstingEnabled;
        this.creationData = Objects.requireNonNull(creationData, "expected parameter 'creationData' to be non-null");
        this.diskAccessId = diskAccessId;
        this.diskIOPSReadOnly = diskIOPSReadOnly;
        this.diskIOPSReadWrite = diskIOPSReadWrite;
        this.diskMBpsReadOnly = diskMBpsReadOnly;
        this.diskMBpsReadWrite = diskMBpsReadWrite;
        this.diskName = diskName;
        this.diskSizeGB = diskSizeGB;
        this.encryption = encryption;
        this.encryptionSettingsCollection = encryptionSettingsCollection;
        this.extendedLocation = extendedLocation;
        this.hyperVGeneration = hyperVGeneration;
        this.location = location;
        this.maxShares = maxShares;
        this.networkAccessPolicy = networkAccessPolicy;
        this.osType = osType;
        this.purchasePlan = purchasePlan;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.securityProfile = securityProfile;
        this.sku = sku;
        this.supportsHibernation = supportsHibernation;
        this.tags = tags;
        this.tier = tier;
        this.zones = zones;
    }

    private DiskArgs() {
        this.burstingEnabled = Input.empty();
        this.creationData = Input.empty();
        this.diskAccessId = Input.empty();
        this.diskIOPSReadOnly = Input.empty();
        this.diskIOPSReadWrite = Input.empty();
        this.diskMBpsReadOnly = Input.empty();
        this.diskMBpsReadWrite = Input.empty();
        this.diskName = Input.empty();
        this.diskSizeGB = Input.empty();
        this.encryption = Input.empty();
        this.encryptionSettingsCollection = Input.empty();
        this.extendedLocation = Input.empty();
        this.hyperVGeneration = Input.empty();
        this.location = Input.empty();
        this.maxShares = Input.empty();
        this.networkAccessPolicy = Input.empty();
        this.osType = Input.empty();
        this.purchasePlan = Input.empty();
        this.resourceGroupName = Input.empty();
        this.securityProfile = Input.empty();
        this.sku = Input.empty();
        this.supportsHibernation = Input.empty();
        this.tags = Input.empty();
        this.tier = Input.empty();
        this.zones = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> burstingEnabled;
        private Input<CreationDataArgs> creationData;
        private @Nullable Input<String> diskAccessId;
        private @Nullable Input<Double> diskIOPSReadOnly;
        private @Nullable Input<Double> diskIOPSReadWrite;
        private @Nullable Input<Double> diskMBpsReadOnly;
        private @Nullable Input<Double> diskMBpsReadWrite;
        private @Nullable Input<String> diskName;
        private @Nullable Input<Integer> diskSizeGB;
        private @Nullable Input<EncryptionArgs> encryption;
        private @Nullable Input<EncryptionSettingsCollectionArgs> encryptionSettingsCollection;
        private @Nullable Input<ExtendedLocationArgs> extendedLocation;
        private @Nullable Input<Either<String,HyperVGeneration>> hyperVGeneration;
        private @Nullable Input<String> location;
        private @Nullable Input<Integer> maxShares;
        private @Nullable Input<Either<String,NetworkAccessPolicy>> networkAccessPolicy;
        private @Nullable Input<OperatingSystemTypes> osType;
        private @Nullable Input<PurchasePlanArgs> purchasePlan;
        private Input<String> resourceGroupName;
        private @Nullable Input<DiskSecurityProfileArgs> securityProfile;
        private @Nullable Input<DiskSkuArgs> sku;
        private @Nullable Input<Boolean> supportsHibernation;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> tier;
        private @Nullable Input<List<String>> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(DiskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.burstingEnabled = defaults.burstingEnabled;
    	      this.creationData = defaults.creationData;
    	      this.diskAccessId = defaults.diskAccessId;
    	      this.diskIOPSReadOnly = defaults.diskIOPSReadOnly;
    	      this.diskIOPSReadWrite = defaults.diskIOPSReadWrite;
    	      this.diskMBpsReadOnly = defaults.diskMBpsReadOnly;
    	      this.diskMBpsReadWrite = defaults.diskMBpsReadWrite;
    	      this.diskName = defaults.diskName;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.encryption = defaults.encryption;
    	      this.encryptionSettingsCollection = defaults.encryptionSettingsCollection;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.location = defaults.location;
    	      this.maxShares = defaults.maxShares;
    	      this.networkAccessPolicy = defaults.networkAccessPolicy;
    	      this.osType = defaults.osType;
    	      this.purchasePlan = defaults.purchasePlan;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.securityProfile = defaults.securityProfile;
    	      this.sku = defaults.sku;
    	      this.supportsHibernation = defaults.supportsHibernation;
    	      this.tags = defaults.tags;
    	      this.tier = defaults.tier;
    	      this.zones = defaults.zones;
        }

        public Builder setBurstingEnabled(@Nullable Input<Boolean> burstingEnabled) {
            this.burstingEnabled = burstingEnabled;
            return this;
        }

        public Builder setBurstingEnabled(@Nullable Boolean burstingEnabled) {
            this.burstingEnabled = Input.ofNullable(burstingEnabled);
            return this;
        }

        public Builder setCreationData(Input<CreationDataArgs> creationData) {
            this.creationData = Objects.requireNonNull(creationData);
            return this;
        }

        public Builder setCreationData(CreationDataArgs creationData) {
            this.creationData = Input.of(Objects.requireNonNull(creationData));
            return this;
        }

        public Builder setDiskAccessId(@Nullable Input<String> diskAccessId) {
            this.diskAccessId = diskAccessId;
            return this;
        }

        public Builder setDiskAccessId(@Nullable String diskAccessId) {
            this.diskAccessId = Input.ofNullable(diskAccessId);
            return this;
        }

        public Builder setDiskIOPSReadOnly(@Nullable Input<Double> diskIOPSReadOnly) {
            this.diskIOPSReadOnly = diskIOPSReadOnly;
            return this;
        }

        public Builder setDiskIOPSReadOnly(@Nullable Double diskIOPSReadOnly) {
            this.diskIOPSReadOnly = Input.ofNullable(diskIOPSReadOnly);
            return this;
        }

        public Builder setDiskIOPSReadWrite(@Nullable Input<Double> diskIOPSReadWrite) {
            this.diskIOPSReadWrite = diskIOPSReadWrite;
            return this;
        }

        public Builder setDiskIOPSReadWrite(@Nullable Double diskIOPSReadWrite) {
            this.diskIOPSReadWrite = Input.ofNullable(diskIOPSReadWrite);
            return this;
        }

        public Builder setDiskMBpsReadOnly(@Nullable Input<Double> diskMBpsReadOnly) {
            this.diskMBpsReadOnly = diskMBpsReadOnly;
            return this;
        }

        public Builder setDiskMBpsReadOnly(@Nullable Double diskMBpsReadOnly) {
            this.diskMBpsReadOnly = Input.ofNullable(diskMBpsReadOnly);
            return this;
        }

        public Builder setDiskMBpsReadWrite(@Nullable Input<Double> diskMBpsReadWrite) {
            this.diskMBpsReadWrite = diskMBpsReadWrite;
            return this;
        }

        public Builder setDiskMBpsReadWrite(@Nullable Double diskMBpsReadWrite) {
            this.diskMBpsReadWrite = Input.ofNullable(diskMBpsReadWrite);
            return this;
        }

        public Builder setDiskName(@Nullable Input<String> diskName) {
            this.diskName = diskName;
            return this;
        }

        public Builder setDiskName(@Nullable String diskName) {
            this.diskName = Input.ofNullable(diskName);
            return this;
        }

        public Builder setDiskSizeGB(@Nullable Input<Integer> diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder setDiskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = Input.ofNullable(diskSizeGB);
            return this;
        }

        public Builder setEncryption(@Nullable Input<EncryptionArgs> encryption) {
            this.encryption = encryption;
            return this;
        }

        public Builder setEncryption(@Nullable EncryptionArgs encryption) {
            this.encryption = Input.ofNullable(encryption);
            return this;
        }

        public Builder setEncryptionSettingsCollection(@Nullable Input<EncryptionSettingsCollectionArgs> encryptionSettingsCollection) {
            this.encryptionSettingsCollection = encryptionSettingsCollection;
            return this;
        }

        public Builder setEncryptionSettingsCollection(@Nullable EncryptionSettingsCollectionArgs encryptionSettingsCollection) {
            this.encryptionSettingsCollection = Input.ofNullable(encryptionSettingsCollection);
            return this;
        }

        public Builder setExtendedLocation(@Nullable Input<ExtendedLocationArgs> extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }

        public Builder setExtendedLocation(@Nullable ExtendedLocationArgs extendedLocation) {
            this.extendedLocation = Input.ofNullable(extendedLocation);
            return this;
        }

        public Builder setHyperVGeneration(@Nullable Input<Either<String,HyperVGeneration>> hyperVGeneration) {
            this.hyperVGeneration = hyperVGeneration;
            return this;
        }

        public Builder setHyperVGeneration(@Nullable Either<String,HyperVGeneration> hyperVGeneration) {
            this.hyperVGeneration = Input.ofNullable(hyperVGeneration);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMaxShares(@Nullable Input<Integer> maxShares) {
            this.maxShares = maxShares;
            return this;
        }

        public Builder setMaxShares(@Nullable Integer maxShares) {
            this.maxShares = Input.ofNullable(maxShares);
            return this;
        }

        public Builder setNetworkAccessPolicy(@Nullable Input<Either<String,NetworkAccessPolicy>> networkAccessPolicy) {
            this.networkAccessPolicy = networkAccessPolicy;
            return this;
        }

        public Builder setNetworkAccessPolicy(@Nullable Either<String,NetworkAccessPolicy> networkAccessPolicy) {
            this.networkAccessPolicy = Input.ofNullable(networkAccessPolicy);
            return this;
        }

        public Builder setOsType(@Nullable Input<OperatingSystemTypes> osType) {
            this.osType = osType;
            return this;
        }

        public Builder setOsType(@Nullable OperatingSystemTypes osType) {
            this.osType = Input.ofNullable(osType);
            return this;
        }

        public Builder setPurchasePlan(@Nullable Input<PurchasePlanArgs> purchasePlan) {
            this.purchasePlan = purchasePlan;
            return this;
        }

        public Builder setPurchasePlan(@Nullable PurchasePlanArgs purchasePlan) {
            this.purchasePlan = Input.ofNullable(purchasePlan);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSecurityProfile(@Nullable Input<DiskSecurityProfileArgs> securityProfile) {
            this.securityProfile = securityProfile;
            return this;
        }

        public Builder setSecurityProfile(@Nullable DiskSecurityProfileArgs securityProfile) {
            this.securityProfile = Input.ofNullable(securityProfile);
            return this;
        }

        public Builder setSku(@Nullable Input<DiskSkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder setSku(@Nullable DiskSkuArgs sku) {
            this.sku = Input.ofNullable(sku);
            return this;
        }

        public Builder setSupportsHibernation(@Nullable Input<Boolean> supportsHibernation) {
            this.supportsHibernation = supportsHibernation;
            return this;
        }

        public Builder setSupportsHibernation(@Nullable Boolean supportsHibernation) {
            this.supportsHibernation = Input.ofNullable(supportsHibernation);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTier(@Nullable Input<String> tier) {
            this.tier = tier;
            return this;
        }

        public Builder setTier(@Nullable String tier) {
            this.tier = Input.ofNullable(tier);
            return this;
        }

        public Builder setZones(@Nullable Input<List<String>> zones) {
            this.zones = zones;
            return this;
        }

        public Builder setZones(@Nullable List<String> zones) {
            this.zones = Input.ofNullable(zones);
            return this;
        }

        public DiskArgs build() {
            return new DiskArgs(burstingEnabled, creationData, diskAccessId, diskIOPSReadOnly, diskIOPSReadWrite, diskMBpsReadOnly, diskMBpsReadWrite, diskName, diskSizeGB, encryption, encryptionSettingsCollection, extendedLocation, hyperVGeneration, location, maxShares, networkAccessPolicy, osType, purchasePlan, resourceGroupName, securityProfile, sku, supportsHibernation, tags, tier, zones);
        }
    }
}
