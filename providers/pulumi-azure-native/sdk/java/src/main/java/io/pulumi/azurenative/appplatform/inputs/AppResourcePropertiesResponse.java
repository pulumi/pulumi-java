// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.appplatform.inputs;

import io.pulumi.azurenative.appplatform.inputs.PersistentDiskResponse;
import io.pulumi.azurenative.appplatform.inputs.TemporaryDiskResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * App resource properties payload
 * 
 */
public final class AppResourcePropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final AppResourcePropertiesResponse Empty = new AppResourcePropertiesResponse();

    /**
     * Name of the active deployment of the App
     * 
     */
    @Import(name="activeDeploymentName")
      private final @Nullable String activeDeploymentName;

    public Optional<String> activeDeploymentName() {
        return this.activeDeploymentName == null ? Optional.empty() : Optional.ofNullable(this.activeDeploymentName);
    }

    /**
     * Date time when the resource is created
     * 
     */
    @Import(name="createdTime", required=true)
      private final String createdTime;

    public String createdTime() {
        return this.createdTime;
    }

    /**
     * Fully qualified dns Name.
     * 
     */
    @Import(name="fqdn")
      private final @Nullable String fqdn;

    public Optional<String> fqdn() {
        return this.fqdn == null ? Optional.empty() : Optional.ofNullable(this.fqdn);
    }

    /**
     * Indicate if only https is allowed.
     * 
     */
    @Import(name="httpsOnly")
      private final @Nullable Boolean httpsOnly;

    public Optional<Boolean> httpsOnly() {
        return this.httpsOnly == null ? Optional.empty() : Optional.ofNullable(this.httpsOnly);
    }

    /**
     * Persistent disk settings
     * 
     */
    @Import(name="persistentDisk")
      private final @Nullable PersistentDiskResponse persistentDisk;

    public Optional<PersistentDiskResponse> persistentDisk() {
        return this.persistentDisk == null ? Optional.empty() : Optional.ofNullable(this.persistentDisk);
    }

    /**
     * Provisioning state of the App
     * 
     */
    @Import(name="provisioningState", required=true)
      private final String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Indicates whether the App exposes public endpoint
     * 
     */
    @Import(name="public")
      private final @Nullable Boolean public_;

    public Optional<Boolean> public_() {
        return this.public_ == null ? Optional.empty() : Optional.ofNullable(this.public_);
    }

    /**
     * Temporary disk settings
     * 
     */
    @Import(name="temporaryDisk")
      private final @Nullable TemporaryDiskResponse temporaryDisk;

    public Optional<TemporaryDiskResponse> temporaryDisk() {
        return this.temporaryDisk == null ? Optional.empty() : Optional.ofNullable(this.temporaryDisk);
    }

    /**
     * URL of the App
     * 
     */
    @Import(name="url", required=true)
      private final String url;

    public String url() {
        return this.url;
    }

    public AppResourcePropertiesResponse(
        @Nullable String activeDeploymentName,
        String createdTime,
        @Nullable String fqdn,
        @Nullable Boolean httpsOnly,
        @Nullable PersistentDiskResponse persistentDisk,
        String provisioningState,
        @Nullable Boolean public_,
        @Nullable TemporaryDiskResponse temporaryDisk,
        String url) {
        this.activeDeploymentName = activeDeploymentName;
        this.createdTime = Objects.requireNonNull(createdTime, "expected parameter 'createdTime' to be non-null");
        this.fqdn = fqdn;
        this.httpsOnly = httpsOnly == null ? false : httpsOnly;
        this.persistentDisk = persistentDisk;
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.public_ = public_;
        this.temporaryDisk = temporaryDisk;
        this.url = Objects.requireNonNull(url, "expected parameter 'url' to be non-null");
    }

    private AppResourcePropertiesResponse() {
        this.activeDeploymentName = null;
        this.createdTime = null;
        this.fqdn = null;
        this.httpsOnly = null;
        this.persistentDisk = null;
        this.provisioningState = null;
        this.public_ = null;
        this.temporaryDisk = null;
        this.url = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppResourcePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String activeDeploymentName;
        private String createdTime;
        private @Nullable String fqdn;
        private @Nullable Boolean httpsOnly;
        private @Nullable PersistentDiskResponse persistentDisk;
        private String provisioningState;
        private @Nullable Boolean public_;
        private @Nullable TemporaryDiskResponse temporaryDisk;
        private String url;

        public Builder() {
    	      // Empty
        }

        public Builder(AppResourcePropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDeploymentName = defaults.activeDeploymentName;
    	      this.createdTime = defaults.createdTime;
    	      this.fqdn = defaults.fqdn;
    	      this.httpsOnly = defaults.httpsOnly;
    	      this.persistentDisk = defaults.persistentDisk;
    	      this.provisioningState = defaults.provisioningState;
    	      this.public_ = defaults.public_;
    	      this.temporaryDisk = defaults.temporaryDisk;
    	      this.url = defaults.url;
        }

        public Builder activeDeploymentName(@Nullable String activeDeploymentName) {
            this.activeDeploymentName = activeDeploymentName;
            return this;
        }
        public Builder createdTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }
        public Builder fqdn(@Nullable String fqdn) {
            this.fqdn = fqdn;
            return this;
        }
        public Builder httpsOnly(@Nullable Boolean httpsOnly) {
            this.httpsOnly = httpsOnly;
            return this;
        }
        public Builder persistentDisk(@Nullable PersistentDiskResponse persistentDisk) {
            this.persistentDisk = persistentDisk;
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder public_(@Nullable Boolean public_) {
            this.public_ = public_;
            return this;
        }
        public Builder temporaryDisk(@Nullable TemporaryDiskResponse temporaryDisk) {
            this.temporaryDisk = temporaryDisk;
            return this;
        }
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }        public AppResourcePropertiesResponse build() {
            return new AppResourcePropertiesResponse(activeDeploymentName, createdTime, fqdn, httpsOnly, persistentDisk, provisioningState, public_, temporaryDisk, url);
        }
    }
}
