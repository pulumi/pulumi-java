// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.outputs;

import io.pulumi.azurenative.machinelearningservices.outputs.AmlTokenResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.BanditPolicyResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.ComputeConfigurationResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.JobEndpointResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.JobOutputResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.ManagedIdentityResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.MedianStoppingPolicyResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.ObjectiveResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.TrialComponentResponse;
import io.pulumi.azurenative.machinelearningservices.outputs.TruncationSelectionPolicyResponse;
import io.pulumi.core.Either;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class SweepJobResponse {
    private final String algorithm;
    private final ComputeConfigurationResponse compute;
    private final @Nullable String description;
    private final @Nullable Object earlyTermination;
    private final @Nullable String experimentName;
    private final @Nullable Either<AmlTokenResponse,ManagedIdentityResponse> identity;
    private final Map<String,JobEndpointResponse> interactionEndpoints;
    private final String jobType;
    private final @Nullable Integer maxConcurrentTrials;
    private final @Nullable Integer maxTotalTrials;
    private final ObjectiveResponse objective;
    private final JobOutputResponse output;
    private final @Nullable Integer priority;
    private final @Nullable Map<String,String> properties;
    private final String provisioningState;
    private final Map<String,Object> searchSpace;
    private final String status;
    private final @Nullable Map<String,String> tags;
    private final @Nullable String timeout;
    private final @Nullable TrialComponentResponse trial;

    @OutputCustomType.Constructor({"algorithm","compute","description","earlyTermination","experimentName","identity","interactionEndpoints","jobType","maxConcurrentTrials","maxTotalTrials","objective","output","priority","properties","provisioningState","searchSpace","status","tags","timeout","trial"})
    private SweepJobResponse(
        String algorithm,
        ComputeConfigurationResponse compute,
        @Nullable String description,
        @Nullable Object earlyTermination,
        @Nullable String experimentName,
        @Nullable Either<AmlTokenResponse,ManagedIdentityResponse> identity,
        Map<String,JobEndpointResponse> interactionEndpoints,
        String jobType,
        @Nullable Integer maxConcurrentTrials,
        @Nullable Integer maxTotalTrials,
        ObjectiveResponse objective,
        JobOutputResponse output,
        @Nullable Integer priority,
        @Nullable Map<String,String> properties,
        String provisioningState,
        Map<String,Object> searchSpace,
        String status,
        @Nullable Map<String,String> tags,
        @Nullable String timeout,
        @Nullable TrialComponentResponse trial) {
        this.algorithm = Objects.requireNonNull(algorithm);
        this.compute = Objects.requireNonNull(compute);
        this.description = description;
        this.earlyTermination = earlyTermination;
        this.experimentName = experimentName;
        this.identity = identity;
        this.interactionEndpoints = Objects.requireNonNull(interactionEndpoints);
        this.jobType = Objects.requireNonNull(jobType);
        this.maxConcurrentTrials = maxConcurrentTrials;
        this.maxTotalTrials = maxTotalTrials;
        this.objective = Objects.requireNonNull(objective);
        this.output = Objects.requireNonNull(output);
        this.priority = priority;
        this.properties = properties;
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.searchSpace = Objects.requireNonNull(searchSpace);
        this.status = Objects.requireNonNull(status);
        this.tags = tags;
        this.timeout = timeout;
        this.trial = trial;
    }

    public String getAlgorithm() {
        return this.algorithm;
    }
    public ComputeConfigurationResponse getCompute() {
        return this.compute;
    }
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    public Optional<Object> getEarlyTermination() {
        return Optional.ofNullable(this.earlyTermination);
    }
    public Optional<String> getExperimentName() {
        return Optional.ofNullable(this.experimentName);
    }
    public Optional<Either<AmlTokenResponse,ManagedIdentityResponse>> getIdentity() {
        return Optional.ofNullable(this.identity);
    }
    public Map<String,JobEndpointResponse> getInteractionEndpoints() {
        return this.interactionEndpoints;
    }
    public String getJobType() {
        return this.jobType;
    }
    public Optional<Integer> getMaxConcurrentTrials() {
        return Optional.ofNullable(this.maxConcurrentTrials);
    }
    public Optional<Integer> getMaxTotalTrials() {
        return Optional.ofNullable(this.maxTotalTrials);
    }
    public ObjectiveResponse getObjective() {
        return this.objective;
    }
    public JobOutputResponse getOutput() {
        return this.output;
    }
    public Optional<Integer> getPriority() {
        return Optional.ofNullable(this.priority);
    }
    public Map<String,String> getProperties() {
        return this.properties == null ? Map.of() : this.properties;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public Map<String,Object> getSearchSpace() {
        return this.searchSpace;
    }
    public String getStatus() {
        return this.status;
    }
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Optional<String> getTimeout() {
        return Optional.ofNullable(this.timeout);
    }
    public Optional<TrialComponentResponse> getTrial() {
        return Optional.ofNullable(this.trial);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SweepJobResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String algorithm;
        private ComputeConfigurationResponse compute;
        private @Nullable String description;
        private @Nullable Object earlyTermination;
        private @Nullable String experimentName;
        private @Nullable Either<AmlTokenResponse,ManagedIdentityResponse> identity;
        private Map<String,JobEndpointResponse> interactionEndpoints;
        private String jobType;
        private @Nullable Integer maxConcurrentTrials;
        private @Nullable Integer maxTotalTrials;
        private ObjectiveResponse objective;
        private JobOutputResponse output;
        private @Nullable Integer priority;
        private @Nullable Map<String,String> properties;
        private String provisioningState;
        private Map<String,Object> searchSpace;
        private String status;
        private @Nullable Map<String,String> tags;
        private @Nullable String timeout;
        private @Nullable TrialComponentResponse trial;

        public Builder() {
    	      // Empty
        }

        public Builder(SweepJobResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.compute = defaults.compute;
    	      this.description = defaults.description;
    	      this.earlyTermination = defaults.earlyTermination;
    	      this.experimentName = defaults.experimentName;
    	      this.identity = defaults.identity;
    	      this.interactionEndpoints = defaults.interactionEndpoints;
    	      this.jobType = defaults.jobType;
    	      this.maxConcurrentTrials = defaults.maxConcurrentTrials;
    	      this.maxTotalTrials = defaults.maxTotalTrials;
    	      this.objective = defaults.objective;
    	      this.output = defaults.output;
    	      this.priority = defaults.priority;
    	      this.properties = defaults.properties;
    	      this.provisioningState = defaults.provisioningState;
    	      this.searchSpace = defaults.searchSpace;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
    	      this.trial = defaults.trial;
        }

        public Builder setAlgorithm(String algorithm) {
            this.algorithm = Objects.requireNonNull(algorithm);
            return this;
        }

        public Builder setCompute(ComputeConfigurationResponse compute) {
            this.compute = Objects.requireNonNull(compute);
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setEarlyTermination(@Nullable Object earlyTermination) {
            this.earlyTermination = earlyTermination;
            return this;
        }

        public Builder setExperimentName(@Nullable String experimentName) {
            this.experimentName = experimentName;
            return this;
        }

        public Builder setIdentity(@Nullable Either<AmlTokenResponse,ManagedIdentityResponse> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setInteractionEndpoints(Map<String,JobEndpointResponse> interactionEndpoints) {
            this.interactionEndpoints = Objects.requireNonNull(interactionEndpoints);
            return this;
        }

        public Builder setJobType(String jobType) {
            this.jobType = Objects.requireNonNull(jobType);
            return this;
        }

        public Builder setMaxConcurrentTrials(@Nullable Integer maxConcurrentTrials) {
            this.maxConcurrentTrials = maxConcurrentTrials;
            return this;
        }

        public Builder setMaxTotalTrials(@Nullable Integer maxTotalTrials) {
            this.maxTotalTrials = maxTotalTrials;
            return this;
        }

        public Builder setObjective(ObjectiveResponse objective) {
            this.objective = Objects.requireNonNull(objective);
            return this;
        }

        public Builder setOutput(JobOutputResponse output) {
            this.output = Objects.requireNonNull(output);
            return this;
        }

        public Builder setPriority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }

        public Builder setProperties(@Nullable Map<String,String> properties) {
            this.properties = properties;
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setSearchSpace(Map<String,Object> searchSpace) {
            this.searchSpace = Objects.requireNonNull(searchSpace);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTimeout(@Nullable String timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder setTrial(@Nullable TrialComponentResponse trial) {
            this.trial = trial;
            return this;
        }

        public SweepJobResponse build() {
            return new SweepJobResponse(algorithm, compute, description, earlyTermination, experimentName, identity, interactionEndpoints, jobType, maxConcurrentTrials, maxTotalTrials, objective, output, priority, properties, provisioningState, searchSpace, status, tags, timeout, trial);
        }
    }
}
