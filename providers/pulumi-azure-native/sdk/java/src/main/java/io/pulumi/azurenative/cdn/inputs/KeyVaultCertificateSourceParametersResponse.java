// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the parameters for using a user's KeyVault certificate for securing custom domain.
 * 
 */
public final class KeyVaultCertificateSourceParametersResponse extends io.pulumi.resources.InvokeArgs {

    public static final KeyVaultCertificateSourceParametersResponse Empty = new KeyVaultCertificateSourceParametersResponse();

    /**
     * Describes the action that shall be taken when the certificate is removed from Key Vault.
     * 
     */
    @Import(name="deleteRule", required=true)
      private final String deleteRule;

    public String getDeleteRule() {
        return this.deleteRule;
    }

    @Import(name="odataType", required=true)
      private final String odataType;

    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Resource group of the user's Key Vault containing the SSL certificate
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final String resourceGroupName;

    public String getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.
     * 
     */
    @Import(name="secretName", required=true)
      private final String secretName;

    public String getSecretName() {
        return this.secretName;
    }

    /**
     * The version(GUID) of Key Vault Secret in Key Vault.
     * 
     */
    @Import(name="secretVersion")
      private final @Nullable String secretVersion;

    public Optional<String> getSecretVersion() {
        return this.secretVersion == null ? Optional.empty() : Optional.ofNullable(this.secretVersion);
    }

    /**
     * Subscription Id of the user's Key Vault containing the SSL certificate
     * 
     */
    @Import(name="subscriptionId", required=true)
      private final String subscriptionId;

    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Describes the action that shall be taken when the certificate is updated in Key Vault.
     * 
     */
    @Import(name="updateRule", required=true)
      private final String updateRule;

    public String getUpdateRule() {
        return this.updateRule;
    }

    /**
     * The name of the user's Key Vault containing the SSL certificate
     * 
     */
    @Import(name="vaultName", required=true)
      private final String vaultName;

    public String getVaultName() {
        return this.vaultName;
    }

    public KeyVaultCertificateSourceParametersResponse(
        String deleteRule,
        String odataType,
        String resourceGroupName,
        String secretName,
        @Nullable String secretVersion,
        String subscriptionId,
        String updateRule,
        String vaultName) {
        this.deleteRule = Objects.requireNonNull(deleteRule, "expected parameter 'deleteRule' to be non-null");
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.secretName = Objects.requireNonNull(secretName, "expected parameter 'secretName' to be non-null");
        this.secretVersion = secretVersion;
        this.subscriptionId = Objects.requireNonNull(subscriptionId, "expected parameter 'subscriptionId' to be non-null");
        this.updateRule = Objects.requireNonNull(updateRule, "expected parameter 'updateRule' to be non-null");
        this.vaultName = Objects.requireNonNull(vaultName, "expected parameter 'vaultName' to be non-null");
    }

    private KeyVaultCertificateSourceParametersResponse() {
        this.deleteRule = null;
        this.odataType = null;
        this.resourceGroupName = null;
        this.secretName = null;
        this.secretVersion = null;
        this.subscriptionId = null;
        this.updateRule = null;
        this.vaultName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyVaultCertificateSourceParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String deleteRule;
        private String odataType;
        private String resourceGroupName;
        private String secretName;
        private @Nullable String secretVersion;
        private String subscriptionId;
        private String updateRule;
        private String vaultName;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyVaultCertificateSourceParametersResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteRule = defaults.deleteRule;
    	      this.odataType = defaults.odataType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secretName = defaults.secretName;
    	      this.secretVersion = defaults.secretVersion;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.updateRule = defaults.updateRule;
    	      this.vaultName = defaults.vaultName;
        }

        public Builder deleteRule(String deleteRule) {
            this.deleteRule = Objects.requireNonNull(deleteRule);
            return this;
        }
        public Builder odataType(String odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder secretName(String secretName) {
            this.secretName = Objects.requireNonNull(secretName);
            return this;
        }
        public Builder secretVersion(@Nullable String secretVersion) {
            this.secretVersion = secretVersion;
            return this;
        }
        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId);
            return this;
        }
        public Builder updateRule(String updateRule) {
            this.updateRule = Objects.requireNonNull(updateRule);
            return this;
        }
        public Builder vaultName(String vaultName) {
            this.vaultName = Objects.requireNonNull(vaultName);
            return this;
        }        public KeyVaultCertificateSourceParametersResponse build() {
            return new KeyVaultCertificateSourceParametersResponse(deleteRule, odataType, resourceGroupName, secretName, secretVersion, subscriptionId, updateRule, vaultName);
        }
    }
}
