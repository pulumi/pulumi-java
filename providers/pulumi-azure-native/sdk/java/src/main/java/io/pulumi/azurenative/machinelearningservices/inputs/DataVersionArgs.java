// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.azurenative.machinelearningservices.enums.DatasetType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Data asset version details.
 * 
 */
public final class DataVersionArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataVersionArgs Empty = new DataVersionArgs();

    /**
     * The Format of dataset.
     * 
     */
    @Import(name="datasetType")
      private final @Nullable Output<Either<String,DatasetType>> datasetType;

    public Output<Either<String,DatasetType>> getDatasetType() {
        return this.datasetType == null ? Output.empty() : this.datasetType;
    }

    /**
     * ARM resource ID of the datastore where the asset is located.
     * 
     */
    @Import(name="datastoreId")
      private final @Nullable Output<String> datastoreId;

    public Output<String> getDatastoreId() {
        return this.datastoreId == null ? Output.empty() : this.datastoreId;
    }

    /**
     * The asset description text.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * If the name version are system generated (anonymous registration).
     * 
     */
    @Import(name="isAnonymous")
      private final @Nullable Output<Boolean> isAnonymous;

    public Output<Boolean> getIsAnonymous() {
        return this.isAnonymous == null ? Output.empty() : this.isAnonymous;
    }

    /**
     * The path of the file/directory in the datastore.
     * 
     */
    @Import(name="path", required=true)
      private final Output<String> path;

    public Output<String> getPath() {
        return this.path;
    }

    /**
     * The asset property dictionary.
     * 
     */
    @Import(name="properties")
      private final @Nullable Output<Map<String,String>> properties;

    public Output<Map<String,String>> getProperties() {
        return this.properties == null ? Output.empty() : this.properties;
    }

    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DataVersionArgs(
        @Nullable Output<Either<String,DatasetType>> datasetType,
        @Nullable Output<String> datastoreId,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> isAnonymous,
        Output<String> path,
        @Nullable Output<Map<String,String>> properties,
        @Nullable Output<Map<String,String>> tags) {
        this.datasetType = datasetType;
        this.datastoreId = datastoreId;
        this.description = description;
        this.isAnonymous = isAnonymous;
        this.path = Objects.requireNonNull(path, "expected parameter 'path' to be non-null");
        this.properties = properties;
        this.tags = tags;
    }

    private DataVersionArgs() {
        this.datasetType = Output.empty();
        this.datastoreId = Output.empty();
        this.description = Output.empty();
        this.isAnonymous = Output.empty();
        this.path = Output.empty();
        this.properties = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,DatasetType>> datasetType;
        private @Nullable Output<String> datastoreId;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> isAnonymous;
        private Output<String> path;
        private @Nullable Output<Map<String,String>> properties;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DataVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasetType = defaults.datasetType;
    	      this.datastoreId = defaults.datastoreId;
    	      this.description = defaults.description;
    	      this.isAnonymous = defaults.isAnonymous;
    	      this.path = defaults.path;
    	      this.properties = defaults.properties;
    	      this.tags = defaults.tags;
        }

        public Builder datasetType(@Nullable Output<Either<String,DatasetType>> datasetType) {
            this.datasetType = datasetType;
            return this;
        }
        public Builder datasetType(@Nullable Either<String,DatasetType> datasetType) {
            this.datasetType = Output.ofNullable(datasetType);
            return this;
        }
        public Builder datastoreId(@Nullable Output<String> datastoreId) {
            this.datastoreId = datastoreId;
            return this;
        }
        public Builder datastoreId(@Nullable String datastoreId) {
            this.datastoreId = Output.ofNullable(datastoreId);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder isAnonymous(@Nullable Output<Boolean> isAnonymous) {
            this.isAnonymous = isAnonymous;
            return this;
        }
        public Builder isAnonymous(@Nullable Boolean isAnonymous) {
            this.isAnonymous = Output.ofNullable(isAnonymous);
            return this;
        }
        public Builder path(Output<String> path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        public Builder path(String path) {
            this.path = Output.of(Objects.requireNonNull(path));
            return this;
        }
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            this.properties = properties;
            return this;
        }
        public Builder properties(@Nullable Map<String,String> properties) {
            this.properties = Output.ofNullable(properties);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }        public DataVersionArgs build() {
            return new DataVersionArgs(datasetType, datastoreId, description, isAnonymous, path, properties, tags);
        }
    }
}
