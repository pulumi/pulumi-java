// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.AmazonS3CompatibleLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.AmazonS3LocationArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureBlobFSLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureBlobStorageLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureDataLakeStoreLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.AzureFileStorageLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.DatasetFolderArgs;
import io.pulumi.azurenative.datafactory.inputs.FileServerLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.FtpServerLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.GoogleCloudStorageLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.HdfsLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.HttpServerLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.OracleCloudStorageLocationArgs;
import io.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import io.pulumi.azurenative.datafactory.inputs.SftpLocationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Delimited text dataset.
 * 
 */
public final class DelimitedTextDatasetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DelimitedTextDatasetArgs Empty = new DelimitedTextDatasetArgs();

    /**
     * List of tags that can be used for describing the Dataset.
     * 
     */
    @Import(name="annotations")
      private final @Nullable Output<List<Object>> annotations;

    public Output<List<Object>> annotations() {
        return this.annotations == null ? Codegen.empty() : this.annotations;
    }

    /**
     * The column delimiter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="columnDelimiter")
      private final @Nullable Output<Object> columnDelimiter;

    public Output<Object> columnDelimiter() {
        return this.columnDelimiter == null ? Codegen.empty() : this.columnDelimiter;
    }

    /**
     * The data compressionCodec. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="compressionCodec")
      private final @Nullable Output<Object> compressionCodec;

    public Output<Object> compressionCodec() {
        return this.compressionCodec == null ? Codegen.empty() : this.compressionCodec;
    }

    /**
     * The data compression method used for DelimitedText.
     * 
     */
    @Import(name="compressionLevel")
      private final @Nullable Output<Object> compressionLevel;

    public Output<Object> compressionLevel() {
        return this.compressionLevel == null ? Codegen.empty() : this.compressionLevel;
    }

    /**
     * Dataset description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encodingName")
      private final @Nullable Output<Object> encodingName;

    public Output<Object> encodingName() {
        return this.encodingName == null ? Codegen.empty() : this.encodingName;
    }

    /**
     * The escape character. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="escapeChar")
      private final @Nullable Output<Object> escapeChar;

    public Output<Object> escapeChar() {
        return this.escapeChar == null ? Codegen.empty() : this.escapeChar;
    }

    /**
     * When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="firstRowAsHeader")
      private final @Nullable Output<Object> firstRowAsHeader;

    public Output<Object> firstRowAsHeader() {
        return this.firstRowAsHeader == null ? Codegen.empty() : this.firstRowAsHeader;
    }

    /**
     * The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
     * 
     */
    @Import(name="folder")
      private final @Nullable Output<DatasetFolderArgs> folder;

    public Output<DatasetFolderArgs> folder() {
        return this.folder == null ? Codegen.empty() : this.folder;
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName", required=true)
      private final Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Output<LinkedServiceReferenceArgs> linkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * The location of the delimited text storage.
     * 
     */
    @Import(name="location", required=true)
      private final Output<Object> location;

    public Output<Object> location() {
        return this.location;
    }

    /**
     * The null value string. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="nullValue")
      private final @Nullable Output<Object> nullValue;

    public Output<Object> nullValue() {
        return this.nullValue == null ? Codegen.empty() : this.nullValue;
    }

    /**
     * Parameters for dataset.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;

    public Output<Map<String,ParameterSpecificationArgs>> parameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * The quote character. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="quoteChar")
      private final @Nullable Output<Object> quoteChar;

    public Output<Object> quoteChar() {
        return this.quoteChar == null ? Codegen.empty() : this.quoteChar;
    }

    /**
     * The row delimiter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="rowDelimiter")
      private final @Nullable Output<Object> rowDelimiter;

    public Output<Object> rowDelimiter() {
        return this.rowDelimiter == null ? Codegen.empty() : this.rowDelimiter;
    }

    /**
     * Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
     * 
     */
    @Import(name="schema")
      private final @Nullable Output<Object> schema;

    public Output<Object> schema() {
        return this.schema == null ? Codegen.empty() : this.schema;
    }

    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     * 
     */
    @Import(name="structure")
      private final @Nullable Output<Object> structure;

    public Output<Object> structure() {
        return this.structure == null ? Codegen.empty() : this.structure;
    }

    /**
     * Type of dataset.
     * Expected value is 'DelimitedText'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public DelimitedTextDatasetArgs(
        @Nullable Output<List<Object>> annotations,
        @Nullable Output<Object> columnDelimiter,
        @Nullable Output<Object> compressionCodec,
        @Nullable Output<Object> compressionLevel,
        @Nullable Output<String> description,
        @Nullable Output<Object> encodingName,
        @Nullable Output<Object> escapeChar,
        @Nullable Output<Object> firstRowAsHeader,
        @Nullable Output<DatasetFolderArgs> folder,
        Output<LinkedServiceReferenceArgs> linkedServiceName,
        Output<Object> location,
        @Nullable Output<Object> nullValue,
        @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters,
        @Nullable Output<Object> quoteChar,
        @Nullable Output<Object> rowDelimiter,
        @Nullable Output<Object> schema,
        @Nullable Output<Object> structure,
        Output<String> type) {
        this.annotations = annotations;
        this.columnDelimiter = columnDelimiter;
        this.compressionCodec = compressionCodec;
        this.compressionLevel = compressionLevel;
        this.description = description;
        this.encodingName = encodingName;
        this.escapeChar = escapeChar;
        this.firstRowAsHeader = firstRowAsHeader;
        this.folder = folder;
        this.linkedServiceName = Objects.requireNonNull(linkedServiceName, "expected parameter 'linkedServiceName' to be non-null");
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.nullValue = nullValue;
        this.parameters = parameters;
        this.quoteChar = quoteChar;
        this.rowDelimiter = rowDelimiter;
        this.schema = schema;
        this.structure = structure;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private DelimitedTextDatasetArgs() {
        this.annotations = Codegen.empty();
        this.columnDelimiter = Codegen.empty();
        this.compressionCodec = Codegen.empty();
        this.compressionLevel = Codegen.empty();
        this.description = Codegen.empty();
        this.encodingName = Codegen.empty();
        this.escapeChar = Codegen.empty();
        this.firstRowAsHeader = Codegen.empty();
        this.folder = Codegen.empty();
        this.linkedServiceName = Codegen.empty();
        this.location = Codegen.empty();
        this.nullValue = Codegen.empty();
        this.parameters = Codegen.empty();
        this.quoteChar = Codegen.empty();
        this.rowDelimiter = Codegen.empty();
        this.schema = Codegen.empty();
        this.structure = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DelimitedTextDatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Object>> annotations;
        private @Nullable Output<Object> columnDelimiter;
        private @Nullable Output<Object> compressionCodec;
        private @Nullable Output<Object> compressionLevel;
        private @Nullable Output<String> description;
        private @Nullable Output<Object> encodingName;
        private @Nullable Output<Object> escapeChar;
        private @Nullable Output<Object> firstRowAsHeader;
        private @Nullable Output<DatasetFolderArgs> folder;
        private Output<LinkedServiceReferenceArgs> linkedServiceName;
        private Output<Object> location;
        private @Nullable Output<Object> nullValue;
        private @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;
        private @Nullable Output<Object> quoteChar;
        private @Nullable Output<Object> rowDelimiter;
        private @Nullable Output<Object> schema;
        private @Nullable Output<Object> structure;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(DelimitedTextDatasetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.columnDelimiter = defaults.columnDelimiter;
    	      this.compressionCodec = defaults.compressionCodec;
    	      this.compressionLevel = defaults.compressionLevel;
    	      this.description = defaults.description;
    	      this.encodingName = defaults.encodingName;
    	      this.escapeChar = defaults.escapeChar;
    	      this.firstRowAsHeader = defaults.firstRowAsHeader;
    	      this.folder = defaults.folder;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.location = defaults.location;
    	      this.nullValue = defaults.nullValue;
    	      this.parameters = defaults.parameters;
    	      this.quoteChar = defaults.quoteChar;
    	      this.rowDelimiter = defaults.rowDelimiter;
    	      this.schema = defaults.schema;
    	      this.structure = defaults.structure;
    	      this.type = defaults.type;
        }

        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = Codegen.ofNullable(annotations);
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        public Builder columnDelimiter(@Nullable Output<Object> columnDelimiter) {
            this.columnDelimiter = columnDelimiter;
            return this;
        }
        public Builder columnDelimiter(@Nullable Object columnDelimiter) {
            this.columnDelimiter = Codegen.ofNullable(columnDelimiter);
            return this;
        }
        public Builder compressionCodec(@Nullable Output<Object> compressionCodec) {
            this.compressionCodec = compressionCodec;
            return this;
        }
        public Builder compressionCodec(@Nullable Object compressionCodec) {
            this.compressionCodec = Codegen.ofNullable(compressionCodec);
            return this;
        }
        public Builder compressionLevel(@Nullable Output<Object> compressionLevel) {
            this.compressionLevel = compressionLevel;
            return this;
        }
        public Builder compressionLevel(@Nullable Object compressionLevel) {
            this.compressionLevel = Codegen.ofNullable(compressionLevel);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder encodingName(@Nullable Output<Object> encodingName) {
            this.encodingName = encodingName;
            return this;
        }
        public Builder encodingName(@Nullable Object encodingName) {
            this.encodingName = Codegen.ofNullable(encodingName);
            return this;
        }
        public Builder escapeChar(@Nullable Output<Object> escapeChar) {
            this.escapeChar = escapeChar;
            return this;
        }
        public Builder escapeChar(@Nullable Object escapeChar) {
            this.escapeChar = Codegen.ofNullable(escapeChar);
            return this;
        }
        public Builder firstRowAsHeader(@Nullable Output<Object> firstRowAsHeader) {
            this.firstRowAsHeader = firstRowAsHeader;
            return this;
        }
        public Builder firstRowAsHeader(@Nullable Object firstRowAsHeader) {
            this.firstRowAsHeader = Codegen.ofNullable(firstRowAsHeader);
            return this;
        }
        public Builder folder(@Nullable Output<DatasetFolderArgs> folder) {
            this.folder = folder;
            return this;
        }
        public Builder folder(@Nullable DatasetFolderArgs folder) {
            this.folder = Codegen.ofNullable(folder);
            return this;
        }
        public Builder linkedServiceName(Output<LinkedServiceReferenceArgs> linkedServiceName) {
            this.linkedServiceName = Objects.requireNonNull(linkedServiceName);
            return this;
        }
        public Builder linkedServiceName(LinkedServiceReferenceArgs linkedServiceName) {
            this.linkedServiceName = Output.of(Objects.requireNonNull(linkedServiceName));
            return this;
        }
        public Builder location(Output<Object> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder location(Object location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }
        public Builder nullValue(@Nullable Output<Object> nullValue) {
            this.nullValue = nullValue;
            return this;
        }
        public Builder nullValue(@Nullable Object nullValue) {
            this.nullValue = Codegen.ofNullable(nullValue);
            return this;
        }
        public Builder parameters(@Nullable Output<Map<String,ParameterSpecificationArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable Map<String,ParameterSpecificationArgs> parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder quoteChar(@Nullable Output<Object> quoteChar) {
            this.quoteChar = quoteChar;
            return this;
        }
        public Builder quoteChar(@Nullable Object quoteChar) {
            this.quoteChar = Codegen.ofNullable(quoteChar);
            return this;
        }
        public Builder rowDelimiter(@Nullable Output<Object> rowDelimiter) {
            this.rowDelimiter = rowDelimiter;
            return this;
        }
        public Builder rowDelimiter(@Nullable Object rowDelimiter) {
            this.rowDelimiter = Codegen.ofNullable(rowDelimiter);
            return this;
        }
        public Builder schema(@Nullable Output<Object> schema) {
            this.schema = schema;
            return this;
        }
        public Builder schema(@Nullable Object schema) {
            this.schema = Codegen.ofNullable(schema);
            return this;
        }
        public Builder structure(@Nullable Output<Object> structure) {
            this.structure = structure;
            return this;
        }
        public Builder structure(@Nullable Object structure) {
            this.structure = Codegen.ofNullable(structure);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public DelimitedTextDatasetArgs build() {
            return new DelimitedTextDatasetArgs(annotations, columnDelimiter, compressionCodec, compressionLevel, description, encodingName, escapeChar, firstRowAsHeader, folder, linkedServiceName, location, nullValue, parameters, quoteChar, rowDelimiter, schema, structure, type);
        }
    }
}
