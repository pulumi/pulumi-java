// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CompressionSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final CompressionSettingsArgs Empty = new CompressionSettingsArgs();

    @InputImport(name="contentTypesToCompress")
    private final @Nullable Input<List<String>> contentTypesToCompress;

    public Input<List<String>> getContentTypesToCompress() {
        return this.contentTypesToCompress == null ? Input.empty() : this.contentTypesToCompress;
    }

    @InputImport(name="isCompressionEnabled")
    private final @Nullable Input<Boolean> isCompressionEnabled;

    public Input<Boolean> getIsCompressionEnabled() {
        return this.isCompressionEnabled == null ? Input.empty() : this.isCompressionEnabled;
    }

    public CompressionSettingsArgs(
        @Nullable Input<List<String>> contentTypesToCompress,
        @Nullable Input<Boolean> isCompressionEnabled) {
        this.contentTypesToCompress = contentTypesToCompress;
        this.isCompressionEnabled = isCompressionEnabled;
    }

    private CompressionSettingsArgs() {
        this.contentTypesToCompress = Input.empty();
        this.isCompressionEnabled = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CompressionSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> contentTypesToCompress;
        private @Nullable Input<Boolean> isCompressionEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(CompressionSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentTypesToCompress = defaults.contentTypesToCompress;
    	      this.isCompressionEnabled = defaults.isCompressionEnabled;
        }

        public Builder setContentTypesToCompress(@Nullable Input<List<String>> contentTypesToCompress) {
            this.contentTypesToCompress = contentTypesToCompress;
            return this;
        }

        public Builder setContentTypesToCompress(@Nullable List<String> contentTypesToCompress) {
            this.contentTypesToCompress = Input.ofNullable(contentTypesToCompress);
            return this;
        }

        public Builder setIsCompressionEnabled(@Nullable Input<Boolean> isCompressionEnabled) {
            this.isCompressionEnabled = isCompressionEnabled;
            return this;
        }

        public Builder setIsCompressionEnabled(@Nullable Boolean isCompressionEnabled) {
            this.isCompressionEnabled = Input.ofNullable(isCompressionEnabled);
            return this;
        }

        public CompressionSettingsArgs build() {
            return new CompressionSettingsArgs(contentTypesToCompress, isCompressionEnabled);
        }
    }
}
