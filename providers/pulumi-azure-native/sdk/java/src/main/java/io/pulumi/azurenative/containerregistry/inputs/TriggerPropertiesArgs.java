// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry.inputs;

import io.pulumi.azurenative.containerregistry.inputs.BaseImageTriggerArgs;
import io.pulumi.azurenative.containerregistry.inputs.SourceTriggerArgs;
import io.pulumi.azurenative.containerregistry.inputs.TimerTriggerArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The properties of a trigger.
 * 
 */
public final class TriggerPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final TriggerPropertiesArgs Empty = new TriggerPropertiesArgs();

    /**
     * The trigger based on base image dependencies.
     * 
     */
    @InputImport(name="baseImageTrigger")
        private final @Nullable Input<BaseImageTriggerArgs> baseImageTrigger;

    public Input<BaseImageTriggerArgs> getBaseImageTrigger() {
        return this.baseImageTrigger == null ? Input.empty() : this.baseImageTrigger;
    }

    /**
     * The collection of triggers based on source code repository.
     * 
     */
    @InputImport(name="sourceTriggers")
        private final @Nullable Input<List<SourceTriggerArgs>> sourceTriggers;

    public Input<List<SourceTriggerArgs>> getSourceTriggers() {
        return this.sourceTriggers == null ? Input.empty() : this.sourceTriggers;
    }

    /**
     * The collection of timer triggers.
     * 
     */
    @InputImport(name="timerTriggers")
        private final @Nullable Input<List<TimerTriggerArgs>> timerTriggers;

    public Input<List<TimerTriggerArgs>> getTimerTriggers() {
        return this.timerTriggers == null ? Input.empty() : this.timerTriggers;
    }

    public TriggerPropertiesArgs(
        @Nullable Input<BaseImageTriggerArgs> baseImageTrigger,
        @Nullable Input<List<SourceTriggerArgs>> sourceTriggers,
        @Nullable Input<List<TimerTriggerArgs>> timerTriggers) {
        this.baseImageTrigger = baseImageTrigger;
        this.sourceTriggers = sourceTriggers;
        this.timerTriggers = timerTriggers;
    }

    private TriggerPropertiesArgs() {
        this.baseImageTrigger = Input.empty();
        this.sourceTriggers = Input.empty();
        this.timerTriggers = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<BaseImageTriggerArgs> baseImageTrigger;
        private @Nullable Input<List<SourceTriggerArgs>> sourceTriggers;
        private @Nullable Input<List<TimerTriggerArgs>> timerTriggers;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseImageTrigger = defaults.baseImageTrigger;
    	      this.sourceTriggers = defaults.sourceTriggers;
    	      this.timerTriggers = defaults.timerTriggers;
        }

        public Builder setBaseImageTrigger(@Nullable Input<BaseImageTriggerArgs> baseImageTrigger) {
            this.baseImageTrigger = baseImageTrigger;
            return this;
        }

        public Builder setBaseImageTrigger(@Nullable BaseImageTriggerArgs baseImageTrigger) {
            this.baseImageTrigger = Input.ofNullable(baseImageTrigger);
            return this;
        }

        public Builder setSourceTriggers(@Nullable Input<List<SourceTriggerArgs>> sourceTriggers) {
            this.sourceTriggers = sourceTriggers;
            return this;
        }

        public Builder setSourceTriggers(@Nullable List<SourceTriggerArgs> sourceTriggers) {
            this.sourceTriggers = Input.ofNullable(sourceTriggers);
            return this;
        }

        public Builder setTimerTriggers(@Nullable Input<List<TimerTriggerArgs>> timerTriggers) {
            this.timerTriggers = timerTriggers;
            return this;
        }

        public Builder setTimerTriggers(@Nullable List<TimerTriggerArgs> timerTriggers) {
            this.timerTriggers = Input.ofNullable(timerTriggers);
            return this;
        }
        public TriggerPropertiesArgs build() {
            return new TriggerPropertiesArgs(baseImageTrigger, sourceTriggers, timerTriggers);
        }
    }
}
