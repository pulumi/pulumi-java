// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry.inputs;

import io.pulumi.azurenative.containerregistry.inputs.AgentPropertiesResponse;
import io.pulumi.azurenative.containerregistry.inputs.ImageDescriptorResponse;
import io.pulumi.azurenative.containerregistry.inputs.ImageUpdateTriggerResponse;
import io.pulumi.azurenative.containerregistry.inputs.PlatformPropertiesResponse;
import io.pulumi.azurenative.containerregistry.inputs.SourceTriggerDescriptorResponse;
import io.pulumi.azurenative.containerregistry.inputs.SystemDataResponse;
import io.pulumi.azurenative.containerregistry.inputs.TimerTriggerDescriptorResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Run resource properties
 * 
 */
public final class RunResponse extends io.pulumi.resources.InvokeArgs {

    public static final RunResponse Empty = new RunResponse();

    /**
     * The machine configuration of the run agent.
     * 
     */
    @InputImport(name="agentConfiguration")
    private final @Nullable AgentPropertiesResponse agentConfiguration;

    public Optional<AgentPropertiesResponse> getAgentConfiguration() {
        return this.agentConfiguration == null ? Optional.empty() : Optional.ofNullable(this.agentConfiguration);
    }

    /**
     * The dedicated agent pool for the run.
     * 
     */
    @InputImport(name="agentPoolName")
    private final @Nullable String agentPoolName;

    public Optional<String> getAgentPoolName() {
        return this.agentPoolName == null ? Optional.empty() : Optional.ofNullable(this.agentPoolName);
    }

    /**
     * The time the run was scheduled.
     * 
     */
    @InputImport(name="createTime")
    private final @Nullable String createTime;

    public Optional<String> getCreateTime() {
        return this.createTime == null ? Optional.empty() : Optional.ofNullable(this.createTime);
    }

    /**
     * The list of custom registries that were logged in during this run.
     * 
     */
    @InputImport(name="customRegistries")
    private final @Nullable List<String> customRegistries;

    public List<String> getCustomRegistries() {
        return this.customRegistries == null ? List.of() : this.customRegistries;
    }

    /**
     * The time the run finished.
     * 
     */
    @InputImport(name="finishTime")
    private final @Nullable String finishTime;

    public Optional<String> getFinishTime() {
        return this.finishTime == null ? Optional.empty() : Optional.ofNullable(this.finishTime);
    }

    /**
     * The resource ID.
     * 
     */
    @InputImport(name="id", required=true)
    private final String id;

    public String getId() {
        return this.id;
    }

    /**
     * The image update trigger that caused the run. This is applicable if the task has base image trigger configured.
     * 
     */
    @InputImport(name="imageUpdateTrigger")
    private final @Nullable ImageUpdateTriggerResponse imageUpdateTrigger;

    public Optional<ImageUpdateTriggerResponse> getImageUpdateTrigger() {
        return this.imageUpdateTrigger == null ? Optional.empty() : Optional.ofNullable(this.imageUpdateTrigger);
    }

    /**
     * The value that indicates whether archiving is enabled or not.
     * 
     */
    @InputImport(name="isArchiveEnabled")
    private final @Nullable Boolean isArchiveEnabled;

    public Optional<Boolean> getIsArchiveEnabled() {
        return this.isArchiveEnabled == null ? Optional.empty() : Optional.ofNullable(this.isArchiveEnabled);
    }

    /**
     * The last updated time for the run.
     * 
     */
    @InputImport(name="lastUpdatedTime")
    private final @Nullable String lastUpdatedTime;

    public Optional<String> getLastUpdatedTime() {
        return this.lastUpdatedTime == null ? Optional.empty() : Optional.ofNullable(this.lastUpdatedTime);
    }

    /**
     * The image description for the log artifact.
     * 
     */
    @InputImport(name="logArtifact", required=true)
    private final ImageDescriptorResponse logArtifact;

    public ImageDescriptorResponse getLogArtifact() {
        return this.logArtifact;
    }

    /**
     * The name of the resource.
     * 
     */
    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
     * 
     */
    @InputImport(name="outputImages")
    private final @Nullable List<ImageDescriptorResponse> outputImages;

    public List<ImageDescriptorResponse> getOutputImages() {
        return this.outputImages == null ? List.of() : this.outputImages;
    }

    /**
     * The platform properties against which the run will happen.
     * 
     */
    @InputImport(name="platform")
    private final @Nullable PlatformPropertiesResponse platform;

    public Optional<PlatformPropertiesResponse> getPlatform() {
        return this.platform == null ? Optional.empty() : Optional.ofNullable(this.platform);
    }

    /**
     * The provisioning state of a run.
     * 
     */
    @InputImport(name="provisioningState")
    private final @Nullable String provisioningState;

    public Optional<String> getProvisioningState() {
        return this.provisioningState == null ? Optional.empty() : Optional.ofNullable(this.provisioningState);
    }

    /**
     * The error message received from backend systems after the run is scheduled.
     * 
     */
    @InputImport(name="runErrorMessage", required=true)
    private final String runErrorMessage;

    public String getRunErrorMessage() {
        return this.runErrorMessage;
    }

    /**
     * The unique identifier for the run.
     * 
     */
    @InputImport(name="runId")
    private final @Nullable String runId;

    public Optional<String> getRunId() {
        return this.runId == null ? Optional.empty() : Optional.ofNullable(this.runId);
    }

    /**
     * The type of run.
     * 
     */
    @InputImport(name="runType")
    private final @Nullable String runType;

    public Optional<String> getRunType() {
        return this.runType == null ? Optional.empty() : Optional.ofNullable(this.runType);
    }

    /**
     * The scope of the credentials that were used to login to the source registry during this run.
     * 
     */
    @InputImport(name="sourceRegistryAuth")
    private final @Nullable String sourceRegistryAuth;

    public Optional<String> getSourceRegistryAuth() {
        return this.sourceRegistryAuth == null ? Optional.empty() : Optional.ofNullable(this.sourceRegistryAuth);
    }

    /**
     * The source trigger that caused the run.
     * 
     */
    @InputImport(name="sourceTrigger")
    private final @Nullable SourceTriggerDescriptorResponse sourceTrigger;

    public Optional<SourceTriggerDescriptorResponse> getSourceTrigger() {
        return this.sourceTrigger == null ? Optional.empty() : Optional.ofNullable(this.sourceTrigger);
    }

    /**
     * The time the run started.
     * 
     */
    @InputImport(name="startTime")
    private final @Nullable String startTime;

    public Optional<String> getStartTime() {
        return this.startTime == null ? Optional.empty() : Optional.ofNullable(this.startTime);
    }

    /**
     * The current status of the run.
     * 
     */
    @InputImport(name="status")
    private final @Nullable String status;

    public Optional<String> getStatus() {
        return this.status == null ? Optional.empty() : Optional.ofNullable(this.status);
    }

    /**
     * Metadata pertaining to creation and last modification of the resource.
     * 
     */
    @InputImport(name="systemData", required=true)
    private final SystemDataResponse systemData;

    public SystemDataResponse getSystemData() {
        return this.systemData;
    }

    /**
     * The task against which run was scheduled.
     * 
     */
    @InputImport(name="task")
    private final @Nullable String task;

    public Optional<String> getTask() {
        return this.task == null ? Optional.empty() : Optional.ofNullable(this.task);
    }

    /**
     * The timer trigger that caused the run.
     * 
     */
    @InputImport(name="timerTrigger")
    private final @Nullable TimerTriggerDescriptorResponse timerTrigger;

    public Optional<TimerTriggerDescriptorResponse> getTimerTrigger() {
        return this.timerTrigger == null ? Optional.empty() : Optional.ofNullable(this.timerTrigger);
    }

    /**
     * The type of the resource.
     * 
     */
    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    /**
     * The update trigger token passed for the Run.
     * 
     */
    @InputImport(name="updateTriggerToken")
    private final @Nullable String updateTriggerToken;

    public Optional<String> getUpdateTriggerToken() {
        return this.updateTriggerToken == null ? Optional.empty() : Optional.ofNullable(this.updateTriggerToken);
    }

    public RunResponse(
        @Nullable AgentPropertiesResponse agentConfiguration,
        @Nullable String agentPoolName,
        @Nullable String createTime,
        @Nullable List<String> customRegistries,
        @Nullable String finishTime,
        String id,
        @Nullable ImageUpdateTriggerResponse imageUpdateTrigger,
        @Nullable Boolean isArchiveEnabled,
        @Nullable String lastUpdatedTime,
        ImageDescriptorResponse logArtifact,
        String name,
        @Nullable List<ImageDescriptorResponse> outputImages,
        @Nullable PlatformPropertiesResponse platform,
        @Nullable String provisioningState,
        String runErrorMessage,
        @Nullable String runId,
        @Nullable String runType,
        @Nullable String sourceRegistryAuth,
        @Nullable SourceTriggerDescriptorResponse sourceTrigger,
        @Nullable String startTime,
        @Nullable String status,
        SystemDataResponse systemData,
        @Nullable String task,
        @Nullable TimerTriggerDescriptorResponse timerTrigger,
        String type,
        @Nullable String updateTriggerToken) {
        this.agentConfiguration = agentConfiguration;
        this.agentPoolName = agentPoolName;
        this.createTime = createTime;
        this.customRegistries = customRegistries;
        this.finishTime = finishTime;
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.imageUpdateTrigger = imageUpdateTrigger;
        this.isArchiveEnabled = isArchiveEnabled == null ? false : isArchiveEnabled;
        this.lastUpdatedTime = lastUpdatedTime;
        this.logArtifact = Objects.requireNonNull(logArtifact, "expected parameter 'logArtifact' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.outputImages = outputImages;
        this.platform = platform;
        this.provisioningState = provisioningState;
        this.runErrorMessage = Objects.requireNonNull(runErrorMessage, "expected parameter 'runErrorMessage' to be non-null");
        this.runId = runId;
        this.runType = runType;
        this.sourceRegistryAuth = sourceRegistryAuth;
        this.sourceTrigger = sourceTrigger;
        this.startTime = startTime;
        this.status = status;
        this.systemData = Objects.requireNonNull(systemData, "expected parameter 'systemData' to be non-null");
        this.task = task;
        this.timerTrigger = timerTrigger;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.updateTriggerToken = updateTriggerToken;
    }

    private RunResponse() {
        this.agentConfiguration = null;
        this.agentPoolName = null;
        this.createTime = null;
        this.customRegistries = List.of();
        this.finishTime = null;
        this.id = null;
        this.imageUpdateTrigger = null;
        this.isArchiveEnabled = null;
        this.lastUpdatedTime = null;
        this.logArtifact = null;
        this.name = null;
        this.outputImages = List.of();
        this.platform = null;
        this.provisioningState = null;
        this.runErrorMessage = null;
        this.runId = null;
        this.runType = null;
        this.sourceRegistryAuth = null;
        this.sourceTrigger = null;
        this.startTime = null;
        this.status = null;
        this.systemData = null;
        this.task = null;
        this.timerTrigger = null;
        this.type = null;
        this.updateTriggerToken = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RunResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable AgentPropertiesResponse agentConfiguration;
        private @Nullable String agentPoolName;
        private @Nullable String createTime;
        private @Nullable List<String> customRegistries;
        private @Nullable String finishTime;
        private String id;
        private @Nullable ImageUpdateTriggerResponse imageUpdateTrigger;
        private @Nullable Boolean isArchiveEnabled;
        private @Nullable String lastUpdatedTime;
        private ImageDescriptorResponse logArtifact;
        private String name;
        private @Nullable List<ImageDescriptorResponse> outputImages;
        private @Nullable PlatformPropertiesResponse platform;
        private @Nullable String provisioningState;
        private String runErrorMessage;
        private @Nullable String runId;
        private @Nullable String runType;
        private @Nullable String sourceRegistryAuth;
        private @Nullable SourceTriggerDescriptorResponse sourceTrigger;
        private @Nullable String startTime;
        private @Nullable String status;
        private SystemDataResponse systemData;
        private @Nullable String task;
        private @Nullable TimerTriggerDescriptorResponse timerTrigger;
        private String type;
        private @Nullable String updateTriggerToken;

        public Builder() {
    	      // Empty
        }

        public Builder(RunResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentConfiguration = defaults.agentConfiguration;
    	      this.agentPoolName = defaults.agentPoolName;
    	      this.createTime = defaults.createTime;
    	      this.customRegistries = defaults.customRegistries;
    	      this.finishTime = defaults.finishTime;
    	      this.id = defaults.id;
    	      this.imageUpdateTrigger = defaults.imageUpdateTrigger;
    	      this.isArchiveEnabled = defaults.isArchiveEnabled;
    	      this.lastUpdatedTime = defaults.lastUpdatedTime;
    	      this.logArtifact = defaults.logArtifact;
    	      this.name = defaults.name;
    	      this.outputImages = defaults.outputImages;
    	      this.platform = defaults.platform;
    	      this.provisioningState = defaults.provisioningState;
    	      this.runErrorMessage = defaults.runErrorMessage;
    	      this.runId = defaults.runId;
    	      this.runType = defaults.runType;
    	      this.sourceRegistryAuth = defaults.sourceRegistryAuth;
    	      this.sourceTrigger = defaults.sourceTrigger;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
    	      this.systemData = defaults.systemData;
    	      this.task = defaults.task;
    	      this.timerTrigger = defaults.timerTrigger;
    	      this.type = defaults.type;
    	      this.updateTriggerToken = defaults.updateTriggerToken;
        }

        public Builder setAgentConfiguration(@Nullable AgentPropertiesResponse agentConfiguration) {
            this.agentConfiguration = agentConfiguration;
            return this;
        }

        public Builder setAgentPoolName(@Nullable String agentPoolName) {
            this.agentPoolName = agentPoolName;
            return this;
        }

        public Builder setCreateTime(@Nullable String createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder setCustomRegistries(@Nullable List<String> customRegistries) {
            this.customRegistries = customRegistries;
            return this;
        }

        public Builder setFinishTime(@Nullable String finishTime) {
            this.finishTime = finishTime;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setImageUpdateTrigger(@Nullable ImageUpdateTriggerResponse imageUpdateTrigger) {
            this.imageUpdateTrigger = imageUpdateTrigger;
            return this;
        }

        public Builder setIsArchiveEnabled(@Nullable Boolean isArchiveEnabled) {
            this.isArchiveEnabled = isArchiveEnabled;
            return this;
        }

        public Builder setLastUpdatedTime(@Nullable String lastUpdatedTime) {
            this.lastUpdatedTime = lastUpdatedTime;
            return this;
        }

        public Builder setLogArtifact(ImageDescriptorResponse logArtifact) {
            this.logArtifact = Objects.requireNonNull(logArtifact);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setOutputImages(@Nullable List<ImageDescriptorResponse> outputImages) {
            this.outputImages = outputImages;
            return this;
        }

        public Builder setPlatform(@Nullable PlatformPropertiesResponse platform) {
            this.platform = platform;
            return this;
        }

        public Builder setProvisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }

        public Builder setRunErrorMessage(String runErrorMessage) {
            this.runErrorMessage = Objects.requireNonNull(runErrorMessage);
            return this;
        }

        public Builder setRunId(@Nullable String runId) {
            this.runId = runId;
            return this;
        }

        public Builder setRunType(@Nullable String runType) {
            this.runType = runType;
            return this;
        }

        public Builder setSourceRegistryAuth(@Nullable String sourceRegistryAuth) {
            this.sourceRegistryAuth = sourceRegistryAuth;
            return this;
        }

        public Builder setSourceTrigger(@Nullable SourceTriggerDescriptorResponse sourceTrigger) {
            this.sourceTrigger = sourceTrigger;
            return this;
        }

        public Builder setStartTime(@Nullable String startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = status;
            return this;
        }

        public Builder setSystemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }

        public Builder setTask(@Nullable String task) {
            this.task = task;
            return this;
        }

        public Builder setTimerTrigger(@Nullable TimerTriggerDescriptorResponse timerTrigger) {
            this.timerTrigger = timerTrigger;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUpdateTriggerToken(@Nullable String updateTriggerToken) {
            this.updateTriggerToken = updateTriggerToken;
            return this;
        }

        public RunResponse build() {
            return new RunResponse(agentConfiguration, agentPoolName, createTime, customRegistries, finishTime, id, imageUpdateTrigger, isArchiveEnabled, lastUpdatedTime, logArtifact, name, outputImages, platform, provisioningState, runErrorMessage, runId, runType, sourceRegistryAuth, sourceTrigger, startTime, status, systemData, task, timerTrigger, type, updateTriggerToken);
        }
    }
}
