// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn;

import io.pulumi.azurenative.cdn.enums.AFDEndpointProtocols;
import io.pulumi.azurenative.cdn.enums.AfdQueryStringCachingBehavior;
import io.pulumi.azurenative.cdn.enums.EnabledState;
import io.pulumi.azurenative.cdn.enums.ForwardingProtocol;
import io.pulumi.azurenative.cdn.enums.HttpsRedirect;
import io.pulumi.azurenative.cdn.enums.LinkToDefaultDomain;
import io.pulumi.azurenative.cdn.inputs.CompressionSettingsArgs;
import io.pulumi.azurenative.cdn.inputs.ResourceReferenceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouteArgs extends io.pulumi.resources.ResourceArgs {

    public static final RouteArgs Empty = new RouteArgs();

    /**
     * compression settings.
     * 
     */
    @Import(name="compressionSettings")
      private final @Nullable Output<CompressionSettingsArgs> compressionSettings;

    public Output<CompressionSettingsArgs> compressionSettings() {
        return this.compressionSettings == null ? Codegen.empty() : this.compressionSettings;
    }

    /**
     * Domains referenced by this endpoint.
     * 
     */
    @Import(name="customDomains")
      private final @Nullable Output<List<ResourceReferenceArgs>> customDomains;

    public Output<List<ResourceReferenceArgs>> customDomains() {
        return this.customDomains == null ? Codegen.empty() : this.customDomains;
    }

    /**
     * Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
     * 
     */
    @Import(name="enabledState")
      private final @Nullable Output<Either<String,EnabledState>> enabledState;

    public Output<Either<String,EnabledState>> enabledState() {
        return this.enabledState == null ? Codegen.empty() : this.enabledState;
    }

    /**
     * Name of the endpoint under the profile which is unique globally.
     * 
     */
    @Import(name="endpointName", required=true)
      private final Output<String> endpointName;

    public Output<String> endpointName() {
        return this.endpointName;
    }

    /**
     * Protocol this rule will use when forwarding traffic to backends.
     * 
     */
    @Import(name="forwardingProtocol")
      private final @Nullable Output<Either<String,ForwardingProtocol>> forwardingProtocol;

    public Output<Either<String,ForwardingProtocol>> forwardingProtocol() {
        return this.forwardingProtocol == null ? Codegen.empty() : this.forwardingProtocol;
    }

    /**
     * Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
     * 
     */
    @Import(name="httpsRedirect")
      private final @Nullable Output<Either<String,HttpsRedirect>> httpsRedirect;

    public Output<Either<String,HttpsRedirect>> httpsRedirect() {
        return this.httpsRedirect == null ? Codegen.empty() : this.httpsRedirect;
    }

    /**
     * whether this route will be linked to the default endpoint domain.
     * 
     */
    @Import(name="linkToDefaultDomain")
      private final @Nullable Output<Either<String,LinkToDefaultDomain>> linkToDefaultDomain;

    public Output<Either<String,LinkToDefaultDomain>> linkToDefaultDomain() {
        return this.linkToDefaultDomain == null ? Codegen.empty() : this.linkToDefaultDomain;
    }

    /**
     * A reference to the origin group.
     * 
     */
    @Import(name="originGroup", required=true)
      private final Output<ResourceReferenceArgs> originGroup;

    public Output<ResourceReferenceArgs> originGroup() {
        return this.originGroup;
    }

    /**
     * A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
     * 
     */
    @Import(name="originPath")
      private final @Nullable Output<String> originPath;

    public Output<String> originPath() {
        return this.originPath == null ? Codegen.empty() : this.originPath;
    }

    /**
     * The route patterns of the rule.
     * 
     */
    @Import(name="patternsToMatch")
      private final @Nullable Output<List<String>> patternsToMatch;

    public Output<List<String>> patternsToMatch() {
        return this.patternsToMatch == null ? Codegen.empty() : this.patternsToMatch;
    }

    /**
     * Name of the CDN profile which is unique within the resource group.
     * 
     */
    @Import(name="profileName", required=true)
      private final Output<String> profileName;

    public Output<String> profileName() {
        return this.profileName;
    }

    /**
     * Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
     * 
     */
    @Import(name="queryStringCachingBehavior")
      private final @Nullable Output<AfdQueryStringCachingBehavior> queryStringCachingBehavior;

    public Output<AfdQueryStringCachingBehavior> queryStringCachingBehavior() {
        return this.queryStringCachingBehavior == null ? Codegen.empty() : this.queryStringCachingBehavior;
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the routing rule.
     * 
     */
    @Import(name="routeName")
      private final @Nullable Output<String> routeName;

    public Output<String> routeName() {
        return this.routeName == null ? Codegen.empty() : this.routeName;
    }

    /**
     * rule sets referenced by this endpoint.
     * 
     */
    @Import(name="ruleSets")
      private final @Nullable Output<List<ResourceReferenceArgs>> ruleSets;

    public Output<List<ResourceReferenceArgs>> ruleSets() {
        return this.ruleSets == null ? Codegen.empty() : this.ruleSets;
    }

    /**
     * List of supported protocols for this route.
     * 
     */
    @Import(name="supportedProtocols")
      private final @Nullable Output<List<Either<String,AFDEndpointProtocols>>> supportedProtocols;

    public Output<List<Either<String,AFDEndpointProtocols>>> supportedProtocols() {
        return this.supportedProtocols == null ? Codegen.empty() : this.supportedProtocols;
    }

    public RouteArgs(
        @Nullable Output<CompressionSettingsArgs> compressionSettings,
        @Nullable Output<List<ResourceReferenceArgs>> customDomains,
        @Nullable Output<Either<String,EnabledState>> enabledState,
        Output<String> endpointName,
        @Nullable Output<Either<String,ForwardingProtocol>> forwardingProtocol,
        @Nullable Output<Either<String,HttpsRedirect>> httpsRedirect,
        @Nullable Output<Either<String,LinkToDefaultDomain>> linkToDefaultDomain,
        Output<ResourceReferenceArgs> originGroup,
        @Nullable Output<String> originPath,
        @Nullable Output<List<String>> patternsToMatch,
        Output<String> profileName,
        @Nullable Output<AfdQueryStringCachingBehavior> queryStringCachingBehavior,
        Output<String> resourceGroupName,
        @Nullable Output<String> routeName,
        @Nullable Output<List<ResourceReferenceArgs>> ruleSets,
        @Nullable Output<List<Either<String,AFDEndpointProtocols>>> supportedProtocols) {
        this.compressionSettings = compressionSettings;
        this.customDomains = customDomains;
        this.enabledState = enabledState;
        this.endpointName = Objects.requireNonNull(endpointName, "expected parameter 'endpointName' to be non-null");
        this.forwardingProtocol = forwardingProtocol;
        this.httpsRedirect = httpsRedirect;
        this.linkToDefaultDomain = linkToDefaultDomain;
        this.originGroup = Objects.requireNonNull(originGroup, "expected parameter 'originGroup' to be non-null");
        this.originPath = originPath;
        this.patternsToMatch = patternsToMatch;
        this.profileName = Objects.requireNonNull(profileName, "expected parameter 'profileName' to be non-null");
        this.queryStringCachingBehavior = queryStringCachingBehavior;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.routeName = routeName;
        this.ruleSets = ruleSets;
        this.supportedProtocols = supportedProtocols;
    }

    private RouteArgs() {
        this.compressionSettings = Codegen.empty();
        this.customDomains = Codegen.empty();
        this.enabledState = Codegen.empty();
        this.endpointName = Codegen.empty();
        this.forwardingProtocol = Codegen.empty();
        this.httpsRedirect = Codegen.empty();
        this.linkToDefaultDomain = Codegen.empty();
        this.originGroup = Codegen.empty();
        this.originPath = Codegen.empty();
        this.patternsToMatch = Codegen.empty();
        this.profileName = Codegen.empty();
        this.queryStringCachingBehavior = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.routeName = Codegen.empty();
        this.ruleSets = Codegen.empty();
        this.supportedProtocols = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<CompressionSettingsArgs> compressionSettings;
        private @Nullable Output<List<ResourceReferenceArgs>> customDomains;
        private @Nullable Output<Either<String,EnabledState>> enabledState;
        private Output<String> endpointName;
        private @Nullable Output<Either<String,ForwardingProtocol>> forwardingProtocol;
        private @Nullable Output<Either<String,HttpsRedirect>> httpsRedirect;
        private @Nullable Output<Either<String,LinkToDefaultDomain>> linkToDefaultDomain;
        private Output<ResourceReferenceArgs> originGroup;
        private @Nullable Output<String> originPath;
        private @Nullable Output<List<String>> patternsToMatch;
        private Output<String> profileName;
        private @Nullable Output<AfdQueryStringCachingBehavior> queryStringCachingBehavior;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> routeName;
        private @Nullable Output<List<ResourceReferenceArgs>> ruleSets;
        private @Nullable Output<List<Either<String,AFDEndpointProtocols>>> supportedProtocols;

        public Builder() {
    	      // Empty
        }

        public Builder(RouteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compressionSettings = defaults.compressionSettings;
    	      this.customDomains = defaults.customDomains;
    	      this.enabledState = defaults.enabledState;
    	      this.endpointName = defaults.endpointName;
    	      this.forwardingProtocol = defaults.forwardingProtocol;
    	      this.httpsRedirect = defaults.httpsRedirect;
    	      this.linkToDefaultDomain = defaults.linkToDefaultDomain;
    	      this.originGroup = defaults.originGroup;
    	      this.originPath = defaults.originPath;
    	      this.patternsToMatch = defaults.patternsToMatch;
    	      this.profileName = defaults.profileName;
    	      this.queryStringCachingBehavior = defaults.queryStringCachingBehavior;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.routeName = defaults.routeName;
    	      this.ruleSets = defaults.ruleSets;
    	      this.supportedProtocols = defaults.supportedProtocols;
        }

        public Builder compressionSettings(@Nullable Output<CompressionSettingsArgs> compressionSettings) {
            this.compressionSettings = compressionSettings;
            return this;
        }
        public Builder compressionSettings(@Nullable CompressionSettingsArgs compressionSettings) {
            this.compressionSettings = Codegen.ofNullable(compressionSettings);
            return this;
        }
        public Builder customDomains(@Nullable Output<List<ResourceReferenceArgs>> customDomains) {
            this.customDomains = customDomains;
            return this;
        }
        public Builder customDomains(@Nullable List<ResourceReferenceArgs> customDomains) {
            this.customDomains = Codegen.ofNullable(customDomains);
            return this;
        }
        public Builder customDomains(ResourceReferenceArgs... customDomains) {
            return customDomains(List.of(customDomains));
        }
        public Builder enabledState(@Nullable Output<Either<String,EnabledState>> enabledState) {
            this.enabledState = enabledState;
            return this;
        }
        public Builder enabledState(@Nullable Either<String,EnabledState> enabledState) {
            this.enabledState = Codegen.ofNullable(enabledState);
            return this;
        }
        public Builder endpointName(Output<String> endpointName) {
            this.endpointName = Objects.requireNonNull(endpointName);
            return this;
        }
        public Builder endpointName(String endpointName) {
            this.endpointName = Output.of(Objects.requireNonNull(endpointName));
            return this;
        }
        public Builder forwardingProtocol(@Nullable Output<Either<String,ForwardingProtocol>> forwardingProtocol) {
            this.forwardingProtocol = forwardingProtocol;
            return this;
        }
        public Builder forwardingProtocol(@Nullable Either<String,ForwardingProtocol> forwardingProtocol) {
            this.forwardingProtocol = Codegen.ofNullable(forwardingProtocol);
            return this;
        }
        public Builder httpsRedirect(@Nullable Output<Either<String,HttpsRedirect>> httpsRedirect) {
            this.httpsRedirect = httpsRedirect;
            return this;
        }
        public Builder httpsRedirect(@Nullable Either<String,HttpsRedirect> httpsRedirect) {
            this.httpsRedirect = Codegen.ofNullable(httpsRedirect);
            return this;
        }
        public Builder linkToDefaultDomain(@Nullable Output<Either<String,LinkToDefaultDomain>> linkToDefaultDomain) {
            this.linkToDefaultDomain = linkToDefaultDomain;
            return this;
        }
        public Builder linkToDefaultDomain(@Nullable Either<String,LinkToDefaultDomain> linkToDefaultDomain) {
            this.linkToDefaultDomain = Codegen.ofNullable(linkToDefaultDomain);
            return this;
        }
        public Builder originGroup(Output<ResourceReferenceArgs> originGroup) {
            this.originGroup = Objects.requireNonNull(originGroup);
            return this;
        }
        public Builder originGroup(ResourceReferenceArgs originGroup) {
            this.originGroup = Output.of(Objects.requireNonNull(originGroup));
            return this;
        }
        public Builder originPath(@Nullable Output<String> originPath) {
            this.originPath = originPath;
            return this;
        }
        public Builder originPath(@Nullable String originPath) {
            this.originPath = Codegen.ofNullable(originPath);
            return this;
        }
        public Builder patternsToMatch(@Nullable Output<List<String>> patternsToMatch) {
            this.patternsToMatch = patternsToMatch;
            return this;
        }
        public Builder patternsToMatch(@Nullable List<String> patternsToMatch) {
            this.patternsToMatch = Codegen.ofNullable(patternsToMatch);
            return this;
        }
        public Builder patternsToMatch(String... patternsToMatch) {
            return patternsToMatch(List.of(patternsToMatch));
        }
        public Builder profileName(Output<String> profileName) {
            this.profileName = Objects.requireNonNull(profileName);
            return this;
        }
        public Builder profileName(String profileName) {
            this.profileName = Output.of(Objects.requireNonNull(profileName));
            return this;
        }
        public Builder queryStringCachingBehavior(@Nullable Output<AfdQueryStringCachingBehavior> queryStringCachingBehavior) {
            this.queryStringCachingBehavior = queryStringCachingBehavior;
            return this;
        }
        public Builder queryStringCachingBehavior(@Nullable AfdQueryStringCachingBehavior queryStringCachingBehavior) {
            this.queryStringCachingBehavior = Codegen.ofNullable(queryStringCachingBehavior);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder routeName(@Nullable Output<String> routeName) {
            this.routeName = routeName;
            return this;
        }
        public Builder routeName(@Nullable String routeName) {
            this.routeName = Codegen.ofNullable(routeName);
            return this;
        }
        public Builder ruleSets(@Nullable Output<List<ResourceReferenceArgs>> ruleSets) {
            this.ruleSets = ruleSets;
            return this;
        }
        public Builder ruleSets(@Nullable List<ResourceReferenceArgs> ruleSets) {
            this.ruleSets = Codegen.ofNullable(ruleSets);
            return this;
        }
        public Builder ruleSets(ResourceReferenceArgs... ruleSets) {
            return ruleSets(List.of(ruleSets));
        }
        public Builder supportedProtocols(@Nullable Output<List<Either<String,AFDEndpointProtocols>>> supportedProtocols) {
            this.supportedProtocols = supportedProtocols;
            return this;
        }
        public Builder supportedProtocols(@Nullable List<Either<String,AFDEndpointProtocols>> supportedProtocols) {
            this.supportedProtocols = Codegen.ofNullable(supportedProtocols);
            return this;
        }
        public Builder supportedProtocols(Either<String,AFDEndpointProtocols>... supportedProtocols) {
            return supportedProtocols(List.of(supportedProtocols));
        }        public RouteArgs build() {
            return new RouteArgs(compressionSettings, customDomains, enabledState, endpointName, forwardingProtocol, httpsRedirect, linkToDefaultDomain, originGroup, originPath, patternsToMatch, profileName, queryStringCachingBehavior, resourceGroupName, routeName, ruleSets, supportedProtocols);
        }
    }
}
