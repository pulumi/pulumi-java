// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningexperimentation;

import io.pulumi.azurenative.machinelearningexperimentation.inputs.StorageAccountPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccountArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccountArgs Empty = new AccountArgs();

    /**
     * The name of the machine learning team account.
     * 
     */
    @Import(name="accountName")
      private final @Nullable Output<String> accountName;

    public Output<String> getAccountName() {
        return this.accountName == null ? Codegen.empty() : this.accountName;
    }

    /**
     * The description of this workspace.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The friendly name for this workspace. This will be the workspace name in the arm id when the workspace object gets created
     * 
     */
    @Import(name="friendlyName")
      private final @Nullable Output<String> friendlyName;

    public Output<String> getFriendlyName() {
        return this.friendlyName == null ? Codegen.empty() : this.friendlyName;
    }

    /**
     * The fully qualified arm id of the user key vault.
     * 
     */
    @Import(name="keyVaultId", required=true)
      private final Output<String> keyVaultId;

    public Output<String> getKeyVaultId() {
        return this.keyVaultId;
    }

    /**
     * The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the resource group to which the machine learning team account belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The no of users/seats who can access this team account. This property defines the charge on the team account.
     * 
     */
    @Import(name="seats")
      private final @Nullable Output<String> seats;

    public Output<String> getSeats() {
        return this.seats == null ? Codegen.empty() : this.seats;
    }

    /**
     * The properties of the storage account for the machine learning team account.
     * 
     */
    @Import(name="storageAccount", required=true)
      private final Output<StorageAccountPropertiesArgs> storageAccount;

    public Output<StorageAccountPropertiesArgs> getStorageAccount() {
        return this.storageAccount;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The fully qualified arm id of the vso account to be used for this team account.
     * 
     */
    @Import(name="vsoAccountId", required=true)
      private final Output<String> vsoAccountId;

    public Output<String> getVsoAccountId() {
        return this.vsoAccountId;
    }

    public AccountArgs(
        @Nullable Output<String> accountName,
        @Nullable Output<String> description,
        @Nullable Output<String> friendlyName,
        Output<String> keyVaultId,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<String> seats,
        Output<StorageAccountPropertiesArgs> storageAccount,
        @Nullable Output<Map<String,String>> tags,
        Output<String> vsoAccountId) {
        this.accountName = accountName;
        this.description = description;
        this.friendlyName = friendlyName;
        this.keyVaultId = Objects.requireNonNull(keyVaultId, "expected parameter 'keyVaultId' to be non-null");
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.seats = seats;
        this.storageAccount = Objects.requireNonNull(storageAccount, "expected parameter 'storageAccount' to be non-null");
        this.tags = tags;
        this.vsoAccountId = Objects.requireNonNull(vsoAccountId, "expected parameter 'vsoAccountId' to be non-null");
    }

    private AccountArgs() {
        this.accountName = Codegen.empty();
        this.description = Codegen.empty();
        this.friendlyName = Codegen.empty();
        this.keyVaultId = Codegen.empty();
        this.location = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.seats = Codegen.empty();
        this.storageAccount = Codegen.empty();
        this.tags = Codegen.empty();
        this.vsoAccountId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> accountName;
        private @Nullable Output<String> description;
        private @Nullable Output<String> friendlyName;
        private Output<String> keyVaultId;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> seats;
        private Output<StorageAccountPropertiesArgs> storageAccount;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> vsoAccountId;

        public Builder() {
    	      // Empty
        }

        public Builder(AccountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.description = defaults.description;
    	      this.friendlyName = defaults.friendlyName;
    	      this.keyVaultId = defaults.keyVaultId;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.seats = defaults.seats;
    	      this.storageAccount = defaults.storageAccount;
    	      this.tags = defaults.tags;
    	      this.vsoAccountId = defaults.vsoAccountId;
        }

        public Builder accountName(@Nullable Output<String> accountName) {
            this.accountName = accountName;
            return this;
        }
        public Builder accountName(@Nullable String accountName) {
            this.accountName = Codegen.ofNullable(accountName);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }
        public Builder friendlyName(@Nullable String friendlyName) {
            this.friendlyName = Codegen.ofNullable(friendlyName);
            return this;
        }
        public Builder keyVaultId(Output<String> keyVaultId) {
            this.keyVaultId = Objects.requireNonNull(keyVaultId);
            return this;
        }
        public Builder keyVaultId(String keyVaultId) {
            this.keyVaultId = Output.of(Objects.requireNonNull(keyVaultId));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder seats(@Nullable Output<String> seats) {
            this.seats = seats;
            return this;
        }
        public Builder seats(@Nullable String seats) {
            this.seats = Codegen.ofNullable(seats);
            return this;
        }
        public Builder storageAccount(Output<StorageAccountPropertiesArgs> storageAccount) {
            this.storageAccount = Objects.requireNonNull(storageAccount);
            return this;
        }
        public Builder storageAccount(StorageAccountPropertiesArgs storageAccount) {
            this.storageAccount = Output.of(Objects.requireNonNull(storageAccount));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder vsoAccountId(Output<String> vsoAccountId) {
            this.vsoAccountId = Objects.requireNonNull(vsoAccountId);
            return this;
        }
        public Builder vsoAccountId(String vsoAccountId) {
            this.vsoAccountId = Output.of(Objects.requireNonNull(vsoAccountId));
            return this;
        }        public AccountArgs build() {
            return new AccountArgs(accountName, description, friendlyName, keyVaultId, location, resourceGroupName, seats, storageAccount, tags, vsoAccountId);
        }
    }
}
