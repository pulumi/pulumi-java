// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningexperimentation;

import io.pulumi.azurenative.machinelearningexperimentation.inputs.StorageAccountPropertiesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccountArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccountArgs Empty = new AccountArgs();

    /**
     * The name of the machine learning team account.
     * 
     */
    @InputImport(name="accountName")
    private final @Nullable Input<String> accountName;

    public Input<String> getAccountName() {
        return this.accountName == null ? Input.empty() : this.accountName;
    }

    /**
     * The description of this workspace.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The friendly name for this workspace. This will be the workspace name in the arm id when the workspace object gets created
     * 
     */
    @InputImport(name="friendlyName")
    private final @Nullable Input<String> friendlyName;

    public Input<String> getFriendlyName() {
        return this.friendlyName == null ? Input.empty() : this.friendlyName;
    }

    /**
     * The fully qualified arm id of the user key vault.
     * 
     */
    @InputImport(name="keyVaultId", required=true)
    private final Input<String> keyVaultId;

    public Input<String> getKeyVaultId() {
        return this.keyVaultId;
    }

    /**
     * The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the resource group to which the machine learning team account belongs.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The no of users/seats who can access this team account. This property defines the charge on the team account.
     * 
     */
    @InputImport(name="seats")
    private final @Nullable Input<String> seats;

    public Input<String> getSeats() {
        return this.seats == null ? Input.empty() : this.seats;
    }

    /**
     * The properties of the storage account for the machine learning team account.
     * 
     */
    @InputImport(name="storageAccount", required=true)
    private final Input<StorageAccountPropertiesArgs> storageAccount;

    public Input<StorageAccountPropertiesArgs> getStorageAccount() {
        return this.storageAccount;
    }

    /**
     * The tags of the resource.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The fully qualified arm id of the vso account to be used for this team account.
     * 
     */
    @InputImport(name="vsoAccountId", required=true)
    private final Input<String> vsoAccountId;

    public Input<String> getVsoAccountId() {
        return this.vsoAccountId;
    }

    public AccountArgs(
        @Nullable Input<String> accountName,
        @Nullable Input<String> description,
        @Nullable Input<String> friendlyName,
        Input<String> keyVaultId,
        @Nullable Input<String> location,
        Input<String> resourceGroupName,
        @Nullable Input<String> seats,
        Input<StorageAccountPropertiesArgs> storageAccount,
        @Nullable Input<Map<String,String>> tags,
        Input<String> vsoAccountId) {
        this.accountName = accountName;
        this.description = description;
        this.friendlyName = friendlyName;
        this.keyVaultId = Objects.requireNonNull(keyVaultId, "expected parameter 'keyVaultId' to be non-null");
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.seats = seats;
        this.storageAccount = Objects.requireNonNull(storageAccount, "expected parameter 'storageAccount' to be non-null");
        this.tags = tags;
        this.vsoAccountId = Objects.requireNonNull(vsoAccountId, "expected parameter 'vsoAccountId' to be non-null");
    }

    private AccountArgs() {
        this.accountName = Input.empty();
        this.description = Input.empty();
        this.friendlyName = Input.empty();
        this.keyVaultId = Input.empty();
        this.location = Input.empty();
        this.resourceGroupName = Input.empty();
        this.seats = Input.empty();
        this.storageAccount = Input.empty();
        this.tags = Input.empty();
        this.vsoAccountId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accountName;
        private @Nullable Input<String> description;
        private @Nullable Input<String> friendlyName;
        private Input<String> keyVaultId;
        private @Nullable Input<String> location;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> seats;
        private Input<StorageAccountPropertiesArgs> storageAccount;
        private @Nullable Input<Map<String,String>> tags;
        private Input<String> vsoAccountId;

        public Builder() {
    	      // Empty
        }

        public Builder(AccountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.description = defaults.description;
    	      this.friendlyName = defaults.friendlyName;
    	      this.keyVaultId = defaults.keyVaultId;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.seats = defaults.seats;
    	      this.storageAccount = defaults.storageAccount;
    	      this.tags = defaults.tags;
    	      this.vsoAccountId = defaults.vsoAccountId;
        }

        public Builder setAccountName(@Nullable Input<String> accountName) {
            this.accountName = accountName;
            return this;
        }

        public Builder setAccountName(@Nullable String accountName) {
            this.accountName = Input.ofNullable(accountName);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setFriendlyName(@Nullable Input<String> friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }

        public Builder setFriendlyName(@Nullable String friendlyName) {
            this.friendlyName = Input.ofNullable(friendlyName);
            return this;
        }

        public Builder setKeyVaultId(Input<String> keyVaultId) {
            this.keyVaultId = Objects.requireNonNull(keyVaultId);
            return this;
        }

        public Builder setKeyVaultId(String keyVaultId) {
            this.keyVaultId = Input.of(Objects.requireNonNull(keyVaultId));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSeats(@Nullable Input<String> seats) {
            this.seats = seats;
            return this;
        }

        public Builder setSeats(@Nullable String seats) {
            this.seats = Input.ofNullable(seats);
            return this;
        }

        public Builder setStorageAccount(Input<StorageAccountPropertiesArgs> storageAccount) {
            this.storageAccount = Objects.requireNonNull(storageAccount);
            return this;
        }

        public Builder setStorageAccount(StorageAccountPropertiesArgs storageAccount) {
            this.storageAccount = Input.of(Objects.requireNonNull(storageAccount));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVsoAccountId(Input<String> vsoAccountId) {
            this.vsoAccountId = Objects.requireNonNull(vsoAccountId);
            return this;
        }

        public Builder setVsoAccountId(String vsoAccountId) {
            this.vsoAccountId = Input.of(Objects.requireNonNull(vsoAccountId));
            return this;
        }

        public AccountArgs build() {
            return new AccountArgs(accountName, description, friendlyName, keyVaultId, location, resourceGroupName, seats, storageAccount, tags, vsoAccountId);
        }
    }
}
