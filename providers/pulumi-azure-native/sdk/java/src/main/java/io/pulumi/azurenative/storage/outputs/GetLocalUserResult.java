// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.outputs;

import io.pulumi.azurenative.storage.outputs.PermissionScopeResponse;
import io.pulumi.azurenative.storage.outputs.SshPublicKeyResponse;
import io.pulumi.azurenative.storage.outputs.SystemDataResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetLocalUserResult {
    /**
     * Indicates whether shared key exists. Set it to false to remove existing shared key.
     * 
     */
    private final @Nullable Boolean hasSharedKey;
    /**
     * Indicates whether ssh key exists. Set it to false to remove existing SSH key.
     * 
     */
    private final @Nullable Boolean hasSshKey;
    /**
     * Indicates whether ssh password exists. Set it to false to remove existing SSH password.
     * 
     */
    private final @Nullable Boolean hasSshPassword;
    /**
     * Optional, local user home directory.
     * 
     */
    private final @Nullable String homeDirectory;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * The name of the resource
     * 
     */
    private final String name;
    /**
     * The permission scopes of the local user.
     * 
     */
    private final @Nullable List<PermissionScopeResponse> permissionScopes;
    /**
     * A unique Security Identifier that is generated by the server.
     * 
     */
    private final String sid;
    /**
     * Optional, local user ssh authorized keys for SFTP.
     * 
     */
    private final @Nullable List<SshPublicKeyResponse> sshAuthorizedKeys;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * 
     */
    private final SystemDataResponse systemData;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"hasSharedKey","hasSshKey","hasSshPassword","homeDirectory","id","name","permissionScopes","sid","sshAuthorizedKeys","systemData","type"})
    private GetLocalUserResult(
        @Nullable Boolean hasSharedKey,
        @Nullable Boolean hasSshKey,
        @Nullable Boolean hasSshPassword,
        @Nullable String homeDirectory,
        String id,
        String name,
        @Nullable List<PermissionScopeResponse> permissionScopes,
        String sid,
        @Nullable List<SshPublicKeyResponse> sshAuthorizedKeys,
        SystemDataResponse systemData,
        String type) {
        this.hasSharedKey = hasSharedKey;
        this.hasSshKey = hasSshKey;
        this.hasSshPassword = hasSshPassword;
        this.homeDirectory = homeDirectory;
        this.id = Objects.requireNonNull(id);
        this.name = Objects.requireNonNull(name);
        this.permissionScopes = permissionScopes;
        this.sid = Objects.requireNonNull(sid);
        this.sshAuthorizedKeys = sshAuthorizedKeys;
        this.systemData = Objects.requireNonNull(systemData);
        this.type = Objects.requireNonNull(type);
    }

    /**
     * Indicates whether shared key exists. Set it to false to remove existing shared key.
     * 
    */
    public Optional<Boolean> getHasSharedKey() {
        return Optional.ofNullable(this.hasSharedKey);
    }
    /**
     * Indicates whether ssh key exists. Set it to false to remove existing SSH key.
     * 
    */
    public Optional<Boolean> getHasSshKey() {
        return Optional.ofNullable(this.hasSshKey);
    }
    /**
     * Indicates whether ssh password exists. Set it to false to remove existing SSH password.
     * 
    */
    public Optional<Boolean> getHasSshPassword() {
        return Optional.ofNullable(this.hasSshPassword);
    }
    /**
     * Optional, local user home directory.
     * 
    */
    public Optional<String> getHomeDirectory() {
        return Optional.ofNullable(this.homeDirectory);
    }
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * The name of the resource
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * The permission scopes of the local user.
     * 
    */
    public List<PermissionScopeResponse> getPermissionScopes() {
        return this.permissionScopes == null ? List.of() : this.permissionScopes;
    }
    /**
     * A unique Security Identifier that is generated by the server.
     * 
    */
    public String getSid() {
        return this.sid;
    }
    /**
     * Optional, local user ssh authorized keys for SFTP.
     * 
    */
    public List<SshPublicKeyResponse> getSshAuthorizedKeys() {
        return this.sshAuthorizedKeys == null ? List.of() : this.sshAuthorizedKeys;
    }
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * 
    */
    public SystemDataResponse getSystemData() {
        return this.systemData;
    }
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
    */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLocalUserResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean hasSharedKey;
        private @Nullable Boolean hasSshKey;
        private @Nullable Boolean hasSshPassword;
        private @Nullable String homeDirectory;
        private String id;
        private String name;
        private @Nullable List<PermissionScopeResponse> permissionScopes;
        private String sid;
        private @Nullable List<SshPublicKeyResponse> sshAuthorizedKeys;
        private SystemDataResponse systemData;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetLocalUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hasSharedKey = defaults.hasSharedKey;
    	      this.hasSshKey = defaults.hasSshKey;
    	      this.hasSshPassword = defaults.hasSshPassword;
    	      this.homeDirectory = defaults.homeDirectory;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.permissionScopes = defaults.permissionScopes;
    	      this.sid = defaults.sid;
    	      this.sshAuthorizedKeys = defaults.sshAuthorizedKeys;
    	      this.systemData = defaults.systemData;
    	      this.type = defaults.type;
        }

        public Builder setHasSharedKey(@Nullable Boolean hasSharedKey) {
            this.hasSharedKey = hasSharedKey;
            return this;
        }

        public Builder setHasSshKey(@Nullable Boolean hasSshKey) {
            this.hasSshKey = hasSshKey;
            return this;
        }

        public Builder setHasSshPassword(@Nullable Boolean hasSshPassword) {
            this.hasSshPassword = hasSshPassword;
            return this;
        }

        public Builder setHomeDirectory(@Nullable String homeDirectory) {
            this.homeDirectory = homeDirectory;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPermissionScopes(@Nullable List<PermissionScopeResponse> permissionScopes) {
            this.permissionScopes = permissionScopes;
            return this;
        }

        public Builder setSid(String sid) {
            this.sid = Objects.requireNonNull(sid);
            return this;
        }

        public Builder setSshAuthorizedKeys(@Nullable List<SshPublicKeyResponse> sshAuthorizedKeys) {
            this.sshAuthorizedKeys = sshAuthorizedKeys;
            return this;
        }

        public Builder setSystemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetLocalUserResult build() {
            return new GetLocalUserResult(hasSharedKey, hasSshKey, hasSshPassword, homeDirectory, id, name, permissionScopes, sid, sshAuthorizedKeys, systemData, type);
        }
    }
}
