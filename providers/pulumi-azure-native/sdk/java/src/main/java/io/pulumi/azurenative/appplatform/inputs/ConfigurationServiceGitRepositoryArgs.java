// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.appplatform.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Git repository property payload for Application Configuration Service
 * 
 */
public final class ConfigurationServiceGitRepositoryArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConfigurationServiceGitRepositoryArgs Empty = new ConfigurationServiceGitRepositoryArgs();

    /**
     * Public sshKey of git repository.
     * 
     */
    @Import(name="hostKey")
      private final @Nullable Output<String> hostKey;

    public Output<String> hostKey() {
        return this.hostKey == null ? Codegen.empty() : this.hostKey;
    }

    /**
     * SshKey algorithm of git repository.
     * 
     */
    @Import(name="hostKeyAlgorithm")
      private final @Nullable Output<String> hostKeyAlgorithm;

    public Output<String> hostKeyAlgorithm() {
        return this.hostKeyAlgorithm == null ? Codegen.empty() : this.hostKeyAlgorithm;
    }

    /**
     * Label of the repository
     * 
     */
    @Import(name="label", required=true)
      private final Output<String> label;

    public Output<String> label() {
        return this.label;
    }

    /**
     * Name of the repository
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Password of git repository basic auth.
     * 
     */
    @Import(name="password")
      private final @Nullable Output<String> password;

    public Output<String> password() {
        return this.password == null ? Codegen.empty() : this.password;
    }

    /**
     * Collection of patterns of the repository
     * 
     */
    @Import(name="patterns", required=true)
      private final Output<List<String>> patterns;

    public Output<List<String>> patterns() {
        return this.patterns;
    }

    /**
     * Private sshKey algorithm of git repository.
     * 
     */
    @Import(name="privateKey")
      private final @Nullable Output<String> privateKey;

    public Output<String> privateKey() {
        return this.privateKey == null ? Codegen.empty() : this.privateKey;
    }

    /**
     * Searching path of the repository
     * 
     */
    @Import(name="searchPaths")
      private final @Nullable Output<List<String>> searchPaths;

    public Output<List<String>> searchPaths() {
        return this.searchPaths == null ? Codegen.empty() : this.searchPaths;
    }

    /**
     * Strict host key checking or not.
     * 
     */
    @Import(name="strictHostKeyChecking")
      private final @Nullable Output<Boolean> strictHostKeyChecking;

    public Output<Boolean> strictHostKeyChecking() {
        return this.strictHostKeyChecking == null ? Codegen.empty() : this.strictHostKeyChecking;
    }

    /**
     * URI of the repository
     * 
     */
    @Import(name="uri", required=true)
      private final Output<String> uri;

    public Output<String> uri() {
        return this.uri;
    }

    /**
     * Username of git repository basic auth.
     * 
     */
    @Import(name="username")
      private final @Nullable Output<String> username;

    public Output<String> username() {
        return this.username == null ? Codegen.empty() : this.username;
    }

    public ConfigurationServiceGitRepositoryArgs(
        @Nullable Output<String> hostKey,
        @Nullable Output<String> hostKeyAlgorithm,
        Output<String> label,
        Output<String> name,
        @Nullable Output<String> password,
        Output<List<String>> patterns,
        @Nullable Output<String> privateKey,
        @Nullable Output<List<String>> searchPaths,
        @Nullable Output<Boolean> strictHostKeyChecking,
        Output<String> uri,
        @Nullable Output<String> username) {
        this.hostKey = hostKey;
        this.hostKeyAlgorithm = hostKeyAlgorithm;
        this.label = Objects.requireNonNull(label, "expected parameter 'label' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.password = password;
        this.patterns = Objects.requireNonNull(patterns, "expected parameter 'patterns' to be non-null");
        this.privateKey = privateKey;
        this.searchPaths = searchPaths;
        this.strictHostKeyChecking = strictHostKeyChecking;
        this.uri = Objects.requireNonNull(uri, "expected parameter 'uri' to be non-null");
        this.username = username;
    }

    private ConfigurationServiceGitRepositoryArgs() {
        this.hostKey = Codegen.empty();
        this.hostKeyAlgorithm = Codegen.empty();
        this.label = Codegen.empty();
        this.name = Codegen.empty();
        this.password = Codegen.empty();
        this.patterns = Codegen.empty();
        this.privateKey = Codegen.empty();
        this.searchPaths = Codegen.empty();
        this.strictHostKeyChecking = Codegen.empty();
        this.uri = Codegen.empty();
        this.username = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationServiceGitRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> hostKey;
        private @Nullable Output<String> hostKeyAlgorithm;
        private Output<String> label;
        private Output<String> name;
        private @Nullable Output<String> password;
        private Output<List<String>> patterns;
        private @Nullable Output<String> privateKey;
        private @Nullable Output<List<String>> searchPaths;
        private @Nullable Output<Boolean> strictHostKeyChecking;
        private Output<String> uri;
        private @Nullable Output<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigurationServiceGitRepositoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostKey = defaults.hostKey;
    	      this.hostKeyAlgorithm = defaults.hostKeyAlgorithm;
    	      this.label = defaults.label;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.patterns = defaults.patterns;
    	      this.privateKey = defaults.privateKey;
    	      this.searchPaths = defaults.searchPaths;
    	      this.strictHostKeyChecking = defaults.strictHostKeyChecking;
    	      this.uri = defaults.uri;
    	      this.username = defaults.username;
        }

        public Builder hostKey(@Nullable Output<String> hostKey) {
            this.hostKey = hostKey;
            return this;
        }
        public Builder hostKey(@Nullable String hostKey) {
            this.hostKey = Codegen.ofNullable(hostKey);
            return this;
        }
        public Builder hostKeyAlgorithm(@Nullable Output<String> hostKeyAlgorithm) {
            this.hostKeyAlgorithm = hostKeyAlgorithm;
            return this;
        }
        public Builder hostKeyAlgorithm(@Nullable String hostKeyAlgorithm) {
            this.hostKeyAlgorithm = Codegen.ofNullable(hostKeyAlgorithm);
            return this;
        }
        public Builder label(Output<String> label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        public Builder label(String label) {
            this.label = Output.of(Objects.requireNonNull(label));
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder password(@Nullable Output<String> password) {
            this.password = password;
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = Codegen.ofNullable(password);
            return this;
        }
        public Builder patterns(Output<List<String>> patterns) {
            this.patterns = Objects.requireNonNull(patterns);
            return this;
        }
        public Builder patterns(List<String> patterns) {
            this.patterns = Output.of(Objects.requireNonNull(patterns));
            return this;
        }
        public Builder patterns(String... patterns) {
            return patterns(List.of(patterns));
        }
        public Builder privateKey(@Nullable Output<String> privateKey) {
            this.privateKey = privateKey;
            return this;
        }
        public Builder privateKey(@Nullable String privateKey) {
            this.privateKey = Codegen.ofNullable(privateKey);
            return this;
        }
        public Builder searchPaths(@Nullable Output<List<String>> searchPaths) {
            this.searchPaths = searchPaths;
            return this;
        }
        public Builder searchPaths(@Nullable List<String> searchPaths) {
            this.searchPaths = Codegen.ofNullable(searchPaths);
            return this;
        }
        public Builder searchPaths(String... searchPaths) {
            return searchPaths(List.of(searchPaths));
        }
        public Builder strictHostKeyChecking(@Nullable Output<Boolean> strictHostKeyChecking) {
            this.strictHostKeyChecking = strictHostKeyChecking;
            return this;
        }
        public Builder strictHostKeyChecking(@Nullable Boolean strictHostKeyChecking) {
            this.strictHostKeyChecking = Codegen.ofNullable(strictHostKeyChecking);
            return this;
        }
        public Builder uri(Output<String> uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        public Builder uri(String uri) {
            this.uri = Output.of(Objects.requireNonNull(uri));
            return this;
        }
        public Builder username(@Nullable Output<String> username) {
            this.username = username;
            return this;
        }
        public Builder username(@Nullable String username) {
            this.username = Codegen.ofNullable(username);
            return this;
        }        public ConfigurationServiceGitRepositoryArgs build() {
            return new ConfigurationServiceGitRepositoryArgs(hostKey, hostKeyAlgorithm, label, name, password, patterns, privateKey, searchPaths, strictHostKeyChecking, uri, username);
        }
    }
}
