// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * An update history of the ImmutabilityPolicy of a blob container.
 * 
 */
public final class UpdateHistoryPropertyResponse extends io.pulumi.resources.InvokeArgs {

    public static final UpdateHistoryPropertyResponse Empty = new UpdateHistoryPropertyResponse();

    /**
     * The immutability period for the blobs in the container since the policy creation, in days.
     * 
     */
    @Import(name="immutabilityPeriodSinceCreationInDays", required=true)
      private final Integer immutabilityPeriodSinceCreationInDays;

    public Integer immutabilityPeriodSinceCreationInDays() {
        return this.immutabilityPeriodSinceCreationInDays;
    }

    /**
     * Returns the Object ID of the user who updated the ImmutabilityPolicy.
     * 
     */
    @Import(name="objectIdentifier", required=true)
      private final String objectIdentifier;

    public String objectIdentifier() {
        return this.objectIdentifier;
    }

    /**
     * Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.
     * 
     */
    @Import(name="tenantId", required=true)
      private final String tenantId;

    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Returns the date and time the ImmutabilityPolicy was updated.
     * 
     */
    @Import(name="timestamp", required=true)
      private final String timestamp;

    public String timestamp() {
        return this.timestamp;
    }

    /**
     * The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.
     * 
     */
    @Import(name="update", required=true)
      private final String update;

    public String update() {
        return this.update;
    }

    /**
     * Returns the User Principal Name of the user who updated the ImmutabilityPolicy.
     * 
     */
    @Import(name="upn", required=true)
      private final String upn;

    public String upn() {
        return this.upn;
    }

    public UpdateHistoryPropertyResponse(
        Integer immutabilityPeriodSinceCreationInDays,
        String objectIdentifier,
        String tenantId,
        String timestamp,
        String update,
        String upn) {
        this.immutabilityPeriodSinceCreationInDays = Objects.requireNonNull(immutabilityPeriodSinceCreationInDays, "expected parameter 'immutabilityPeriodSinceCreationInDays' to be non-null");
        this.objectIdentifier = Objects.requireNonNull(objectIdentifier, "expected parameter 'objectIdentifier' to be non-null");
        this.tenantId = Objects.requireNonNull(tenantId, "expected parameter 'tenantId' to be non-null");
        this.timestamp = Objects.requireNonNull(timestamp, "expected parameter 'timestamp' to be non-null");
        this.update = Objects.requireNonNull(update, "expected parameter 'update' to be non-null");
        this.upn = Objects.requireNonNull(upn, "expected parameter 'upn' to be non-null");
    }

    private UpdateHistoryPropertyResponse() {
        this.immutabilityPeriodSinceCreationInDays = null;
        this.objectIdentifier = null;
        this.tenantId = null;
        this.timestamp = null;
        this.update = null;
        this.upn = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UpdateHistoryPropertyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer immutabilityPeriodSinceCreationInDays;
        private String objectIdentifier;
        private String tenantId;
        private String timestamp;
        private String update;
        private String upn;

        public Builder() {
    	      // Empty
        }

        public Builder(UpdateHistoryPropertyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.immutabilityPeriodSinceCreationInDays = defaults.immutabilityPeriodSinceCreationInDays;
    	      this.objectIdentifier = defaults.objectIdentifier;
    	      this.tenantId = defaults.tenantId;
    	      this.timestamp = defaults.timestamp;
    	      this.update = defaults.update;
    	      this.upn = defaults.upn;
        }

        public Builder immutabilityPeriodSinceCreationInDays(Integer immutabilityPeriodSinceCreationInDays) {
            this.immutabilityPeriodSinceCreationInDays = Objects.requireNonNull(immutabilityPeriodSinceCreationInDays);
            return this;
        }
        public Builder objectIdentifier(String objectIdentifier) {
            this.objectIdentifier = Objects.requireNonNull(objectIdentifier);
            return this;
        }
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        public Builder timestamp(String timestamp) {
            this.timestamp = Objects.requireNonNull(timestamp);
            return this;
        }
        public Builder update(String update) {
            this.update = Objects.requireNonNull(update);
            return this;
        }
        public Builder upn(String upn) {
            this.upn = Objects.requireNonNull(upn);
            return this;
        }        public UpdateHistoryPropertyResponse build() {
            return new UpdateHistoryPropertyResponse(immutabilityPeriodSinceCreationInDays, objectIdentifier, tenantId, timestamp, update, upn);
        }
    }
}
