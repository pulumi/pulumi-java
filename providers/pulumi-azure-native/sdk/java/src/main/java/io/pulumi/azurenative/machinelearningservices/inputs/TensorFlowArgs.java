// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * TensorFlow distribution configuration.
 * 
 */
public final class TensorFlowArgs extends io.pulumi.resources.ResourceArgs {

    public static final TensorFlowArgs Empty = new TensorFlowArgs();

    /**
     * Enum to determine the job distribution type.
     * Expected value is 'TensorFlow'.
     * 
     */
    @Import(name="distributionType", required=true)
      private final Output<String> distributionType;

    public Output<String> getDistributionType() {
        return this.distributionType;
    }

    /**
     * Number of parameter server tasks.
     * 
     */
    @Import(name="parameterServerCount")
      private final @Nullable Output<Integer> parameterServerCount;

    public Output<Integer> getParameterServerCount() {
        return this.parameterServerCount == null ? Output.empty() : this.parameterServerCount;
    }

    /**
     * Number of workers. Overwrites the node count in compute binding.
     * 
     */
    @Import(name="workerCount")
      private final @Nullable Output<Integer> workerCount;

    public Output<Integer> getWorkerCount() {
        return this.workerCount == null ? Output.empty() : this.workerCount;
    }

    public TensorFlowArgs(
        Output<String> distributionType,
        @Nullable Output<Integer> parameterServerCount,
        @Nullable Output<Integer> workerCount) {
        this.distributionType = Objects.requireNonNull(distributionType, "expected parameter 'distributionType' to be non-null");
        this.parameterServerCount = parameterServerCount;
        this.workerCount = workerCount;
    }

    private TensorFlowArgs() {
        this.distributionType = Output.empty();
        this.parameterServerCount = Output.empty();
        this.workerCount = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TensorFlowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> distributionType;
        private @Nullable Output<Integer> parameterServerCount;
        private @Nullable Output<Integer> workerCount;

        public Builder() {
    	      // Empty
        }

        public Builder(TensorFlowArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distributionType = defaults.distributionType;
    	      this.parameterServerCount = defaults.parameterServerCount;
    	      this.workerCount = defaults.workerCount;
        }

        public Builder distributionType(Output<String> distributionType) {
            this.distributionType = Objects.requireNonNull(distributionType);
            return this;
        }

        public Builder distributionType(String distributionType) {
            this.distributionType = Output.of(Objects.requireNonNull(distributionType));
            return this;
        }

        public Builder parameterServerCount(@Nullable Output<Integer> parameterServerCount) {
            this.parameterServerCount = parameterServerCount;
            return this;
        }

        public Builder parameterServerCount(@Nullable Integer parameterServerCount) {
            this.parameterServerCount = Output.ofNullable(parameterServerCount);
            return this;
        }

        public Builder workerCount(@Nullable Output<Integer> workerCount) {
            this.workerCount = workerCount;
            return this;
        }

        public Builder workerCount(@Nullable Integer workerCount) {
            this.workerCount = Output.ofNullable(workerCount);
            return this;
        }
        public TensorFlowArgs build() {
            return new TensorFlowArgs(distributionType, parameterServerCount, workerCount);
        }
    }
}
