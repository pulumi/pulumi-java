// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.operationalinsights;

import io.pulumi.azurenative.operationalinsights.enums.LinkedServiceEntityStatus;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LinkedServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final LinkedServiceArgs Empty = new LinkedServiceArgs();

    /**
     * Name of the linkedServices resource
     * 
     */
    @Import(name="linkedServiceName")
      private final @Nullable Output<String> linkedServiceName;

    public Output<String> getLinkedServiceName() {
        return this.linkedServiceName == null ? Codegen.empty() : this.linkedServiceName;
    }

    /**
     * The provisioning state of the linked service.
     * 
     */
    @Import(name="provisioningState")
      private final @Nullable Output<Either<String,LinkedServiceEntityStatus>> provisioningState;

    public Output<Either<String,LinkedServiceEntityStatus>> getProvisioningState() {
        return this.provisioningState == null ? Codegen.empty() : this.provisioningState;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
     * 
     */
    @Import(name="resourceId")
      private final @Nullable Output<String> resourceId;

    public Output<String> getResourceId() {
        return this.resourceId == null ? Codegen.empty() : this.resourceId;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> getWorkspaceName() {
        return this.workspaceName;
    }

    /**
     * The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
     * 
     */
    @Import(name="writeAccessResourceId")
      private final @Nullable Output<String> writeAccessResourceId;

    public Output<String> getWriteAccessResourceId() {
        return this.writeAccessResourceId == null ? Codegen.empty() : this.writeAccessResourceId;
    }

    public LinkedServiceArgs(
        @Nullable Output<String> linkedServiceName,
        @Nullable Output<Either<String,LinkedServiceEntityStatus>> provisioningState,
        Output<String> resourceGroupName,
        @Nullable Output<String> resourceId,
        @Nullable Output<Map<String,String>> tags,
        Output<String> workspaceName,
        @Nullable Output<String> writeAccessResourceId) {
        this.linkedServiceName = linkedServiceName;
        this.provisioningState = provisioningState;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceId = resourceId;
        this.tags = tags;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
        this.writeAccessResourceId = writeAccessResourceId;
    }

    private LinkedServiceArgs() {
        this.linkedServiceName = Codegen.empty();
        this.provisioningState = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.resourceId = Codegen.empty();
        this.tags = Codegen.empty();
        this.workspaceName = Codegen.empty();
        this.writeAccessResourceId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinkedServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> linkedServiceName;
        private @Nullable Output<Either<String,LinkedServiceEntityStatus>> provisioningState;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> resourceId;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> workspaceName;
        private @Nullable Output<String> writeAccessResourceId;

        public Builder() {
    	      // Empty
        }

        public Builder(LinkedServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceId = defaults.resourceId;
    	      this.tags = defaults.tags;
    	      this.workspaceName = defaults.workspaceName;
    	      this.writeAccessResourceId = defaults.writeAccessResourceId;
        }

        public Builder linkedServiceName(@Nullable Output<String> linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        public Builder linkedServiceName(@Nullable String linkedServiceName) {
            this.linkedServiceName = Codegen.ofNullable(linkedServiceName);
            return this;
        }
        public Builder provisioningState(@Nullable Output<Either<String,LinkedServiceEntityStatus>> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        public Builder provisioningState(@Nullable Either<String,LinkedServiceEntityStatus> provisioningState) {
            this.provisioningState = Codegen.ofNullable(provisioningState);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder resourceId(@Nullable Output<String> resourceId) {
            this.resourceId = resourceId;
            return this;
        }
        public Builder resourceId(@Nullable String resourceId) {
            this.resourceId = Codegen.ofNullable(resourceId);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }
        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }
        public Builder writeAccessResourceId(@Nullable Output<String> writeAccessResourceId) {
            this.writeAccessResourceId = writeAccessResourceId;
            return this;
        }
        public Builder writeAccessResourceId(@Nullable String writeAccessResourceId) {
            this.writeAccessResourceId = Codegen.ofNullable(writeAccessResourceId);
            return this;
        }        public LinkedServiceArgs build() {
            return new LinkedServiceArgs(linkedServiceName, provisioningState, resourceGroupName, resourceId, tags, workspaceName, writeAccessResourceId);
        }
    }
}
