// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The configuration settings of the platform of App Service Authentication/Authorization.
 * 
 */
public final class AuthPlatformArgs extends io.pulumi.resources.ResourceArgs {

    public static final AuthPlatformArgs Empty = new AuthPlatformArgs();

    /**
     * The path of the config file containing auth settings if they come from a file.
     * If the path is relative, base will the site's root directory.
     * 
     */
    @Import(name="configFilePath")
      private final @Nullable Output<String> configFilePath;

    public Output<String> getConfigFilePath() {
        return this.configFilePath == null ? Output.empty() : this.configFilePath;
    }

    /**
     * <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
     * 
     */
    @Import(name="runtimeVersion")
      private final @Nullable Output<String> runtimeVersion;

    public Output<String> getRuntimeVersion() {
        return this.runtimeVersion == null ? Output.empty() : this.runtimeVersion;
    }

    public AuthPlatformArgs(
        @Nullable Output<String> configFilePath,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<String> runtimeVersion) {
        this.configFilePath = configFilePath;
        this.enabled = enabled;
        this.runtimeVersion = runtimeVersion;
    }

    private AuthPlatformArgs() {
        this.configFilePath = Output.empty();
        this.enabled = Output.empty();
        this.runtimeVersion = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthPlatformArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> configFilePath;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<String> runtimeVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthPlatformArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configFilePath = defaults.configFilePath;
    	      this.enabled = defaults.enabled;
    	      this.runtimeVersion = defaults.runtimeVersion;
        }

        public Builder configFilePath(@Nullable Output<String> configFilePath) {
            this.configFilePath = configFilePath;
            return this;
        }
        public Builder configFilePath(@Nullable String configFilePath) {
            this.configFilePath = Output.ofNullable(configFilePath);
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }
        public Builder runtimeVersion(@Nullable Output<String> runtimeVersion) {
            this.runtimeVersion = runtimeVersion;
            return this;
        }
        public Builder runtimeVersion(@Nullable String runtimeVersion) {
            this.runtimeVersion = Output.ofNullable(runtimeVersion);
            return this;
        }        public AuthPlatformArgs build() {
            return new AuthPlatformArgs(configFilePath, enabled, runtimeVersion);
        }
    }
}
