// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.orbital;

import io.pulumi.azurenative.orbital.enums.AutoTrackingConfiguration;
import io.pulumi.azurenative.orbital.inputs.ContactProfileLinkArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ContactProfileArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContactProfileArgs Empty = new ContactProfileArgs();

    @InputImport(name="autoTrackingConfiguration")
    private final @Nullable Input<AutoTrackingConfiguration> autoTrackingConfiguration;

    public Input<AutoTrackingConfiguration> getAutoTrackingConfiguration() {
        return this.autoTrackingConfiguration == null ? Input.empty() : this.autoTrackingConfiguration;
    }

    @InputImport(name="contactProfileName")
    private final @Nullable Input<String> contactProfileName;

    public Input<String> getContactProfileName() {
        return this.contactProfileName == null ? Input.empty() : this.contactProfileName;
    }

    @InputImport(name="eventHubUri")
    private final @Nullable Input<String> eventHubUri;

    public Input<String> getEventHubUri() {
        return this.eventHubUri == null ? Input.empty() : this.eventHubUri;
    }

    @InputImport(name="links", required=true)
    private final Input<List<ContactProfileLinkArgs>> links;

    public Input<List<ContactProfileLinkArgs>> getLinks() {
        return this.links;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="minimumElevationDegrees")
    private final @Nullable Input<Double> minimumElevationDegrees;

    public Input<Double> getMinimumElevationDegrees() {
        return this.minimumElevationDegrees == null ? Input.empty() : this.minimumElevationDegrees;
    }

    @InputImport(name="minimumViableContactDuration")
    private final @Nullable Input<String> minimumViableContactDuration;

    public Input<String> getMinimumViableContactDuration() {
        return this.minimumViableContactDuration == null ? Input.empty() : this.minimumViableContactDuration;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ContactProfileArgs(
        @Nullable Input<AutoTrackingConfiguration> autoTrackingConfiguration,
        @Nullable Input<String> contactProfileName,
        @Nullable Input<String> eventHubUri,
        Input<List<ContactProfileLinkArgs>> links,
        @Nullable Input<String> location,
        @Nullable Input<Double> minimumElevationDegrees,
        @Nullable Input<String> minimumViableContactDuration,
        Input<String> resourceGroupName,
        @Nullable Input<Map<String,String>> tags) {
        this.autoTrackingConfiguration = autoTrackingConfiguration;
        this.contactProfileName = contactProfileName;
        this.eventHubUri = eventHubUri;
        this.links = Objects.requireNonNull(links, "expected parameter 'links' to be non-null");
        this.location = location;
        this.minimumElevationDegrees = minimumElevationDegrees;
        this.minimumViableContactDuration = minimumViableContactDuration;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private ContactProfileArgs() {
        this.autoTrackingConfiguration = Input.empty();
        this.contactProfileName = Input.empty();
        this.eventHubUri = Input.empty();
        this.links = Input.empty();
        this.location = Input.empty();
        this.minimumElevationDegrees = Input.empty();
        this.minimumViableContactDuration = Input.empty();
        this.resourceGroupName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContactProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<AutoTrackingConfiguration> autoTrackingConfiguration;
        private @Nullable Input<String> contactProfileName;
        private @Nullable Input<String> eventHubUri;
        private Input<List<ContactProfileLinkArgs>> links;
        private @Nullable Input<String> location;
        private @Nullable Input<Double> minimumElevationDegrees;
        private @Nullable Input<String> minimumViableContactDuration;
        private Input<String> resourceGroupName;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ContactProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoTrackingConfiguration = defaults.autoTrackingConfiguration;
    	      this.contactProfileName = defaults.contactProfileName;
    	      this.eventHubUri = defaults.eventHubUri;
    	      this.links = defaults.links;
    	      this.location = defaults.location;
    	      this.minimumElevationDegrees = defaults.minimumElevationDegrees;
    	      this.minimumViableContactDuration = defaults.minimumViableContactDuration;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder setAutoTrackingConfiguration(@Nullable Input<AutoTrackingConfiguration> autoTrackingConfiguration) {
            this.autoTrackingConfiguration = autoTrackingConfiguration;
            return this;
        }

        public Builder setAutoTrackingConfiguration(@Nullable AutoTrackingConfiguration autoTrackingConfiguration) {
            this.autoTrackingConfiguration = Input.ofNullable(autoTrackingConfiguration);
            return this;
        }

        public Builder setContactProfileName(@Nullable Input<String> contactProfileName) {
            this.contactProfileName = contactProfileName;
            return this;
        }

        public Builder setContactProfileName(@Nullable String contactProfileName) {
            this.contactProfileName = Input.ofNullable(contactProfileName);
            return this;
        }

        public Builder setEventHubUri(@Nullable Input<String> eventHubUri) {
            this.eventHubUri = eventHubUri;
            return this;
        }

        public Builder setEventHubUri(@Nullable String eventHubUri) {
            this.eventHubUri = Input.ofNullable(eventHubUri);
            return this;
        }

        public Builder setLinks(Input<List<ContactProfileLinkArgs>> links) {
            this.links = Objects.requireNonNull(links);
            return this;
        }

        public Builder setLinks(List<ContactProfileLinkArgs> links) {
            this.links = Input.of(Objects.requireNonNull(links));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMinimumElevationDegrees(@Nullable Input<Double> minimumElevationDegrees) {
            this.minimumElevationDegrees = minimumElevationDegrees;
            return this;
        }

        public Builder setMinimumElevationDegrees(@Nullable Double minimumElevationDegrees) {
            this.minimumElevationDegrees = Input.ofNullable(minimumElevationDegrees);
            return this;
        }

        public Builder setMinimumViableContactDuration(@Nullable Input<String> minimumViableContactDuration) {
            this.minimumViableContactDuration = minimumViableContactDuration;
            return this;
        }

        public Builder setMinimumViableContactDuration(@Nullable String minimumViableContactDuration) {
            this.minimumViableContactDuration = Input.ofNullable(minimumViableContactDuration);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public ContactProfileArgs build() {
            return new ContactProfileArgs(autoTrackingConfiguration, contactProfileName, eventHubUri, links, location, minimumElevationDegrees, minimumViableContactDuration, resourceGroupName, tags);
        }
    }
}
