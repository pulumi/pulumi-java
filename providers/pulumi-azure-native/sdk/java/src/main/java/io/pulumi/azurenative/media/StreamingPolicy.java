// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.media.StreamingPolicyArgs;
import io.pulumi.azurenative.media.outputs.CommonEncryptionCbcsResponse;
import io.pulumi.azurenative.media.outputs.CommonEncryptionCencResponse;
import io.pulumi.azurenative.media.outputs.EnvelopeEncryptionResponse;
import io.pulumi.azurenative.media.outputs.NoEncryptionResponse;
import io.pulumi.azurenative.media.outputs.SystemDataResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A Streaming Policy resource
API Version: 2020-05-01.

{{% examples %}}
## Example Usage
{{% example %}}
### Creates a Streaming Policy with clear streaming
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var streamingPolicy = new AzureNative.Media.StreamingPolicy("streamingPolicy", new AzureNative.Media.StreamingPolicyArgs
        {
            AccountName = "contosomedia",
            NoEncryption = new AzureNative.Media.Inputs.NoEncryptionArgs
            {
                EnabledProtocols = new AzureNative.Media.Inputs.EnabledProtocolsArgs
                {
                    Dash = true,
                    Download = true,
                    Hls = true,
                    SmoothStreaming = true,
                },
            },
            ResourceGroupName = "contoso",
            StreamingPolicyName = "UserCreatedClearStreamingPolicy",
        });
    }

}

```

```go
package main

import (
	media "github.com/pulumi/pulumi-azure-native/sdk/go/azure/media"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := media.NewStreamingPolicy(ctx, "streamingPolicy", &media.StreamingPolicyArgs{
			AccountName: pulumi.String("contosomedia"),
			NoEncryption: &media.NoEncryptionArgs{
				EnabledProtocols: &media.EnabledProtocolsArgs{
					Dash:            pulumi.Bool(true),
					Download:        pulumi.Bool(true),
					Hls:             pulumi.Bool(true),
					SmoothStreaming: pulumi.Bool(true),
				},
			},
			ResourceGroupName:   pulumi.String("contoso"),
			StreamingPolicyName: pulumi.String("UserCreatedClearStreamingPolicy"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const streamingPolicy = new azure_native.media.StreamingPolicy("streamingPolicy", {
    accountName: "contosomedia",
    noEncryption: {
        enabledProtocols: {
            dash: true,
            download: true,
            hls: true,
            smoothStreaming: true,
        },
    },
    resourceGroupName: "contoso",
    streamingPolicyName: "UserCreatedClearStreamingPolicy",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

streaming_policy = azure_native.media.StreamingPolicy("streamingPolicy",
    account_name="contosomedia",
    no_encryption=azure_native.media.NoEncryptionArgs(
        enabled_protocols=azure_native.media.EnabledProtocolsArgs(
            dash=True,
            download=True,
            hls=True,
            smooth_streaming=True,
        ),
    ),
    resource_group_name="contoso",
    streaming_policy_name="UserCreatedClearStreamingPolicy")

```

{{% /example %}}
{{% example %}}
### Creates a Streaming Policy with commonEncryptionCbcs only
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var streamingPolicy = new AzureNative.Media.StreamingPolicy("streamingPolicy", new AzureNative.Media.StreamingPolicyArgs
        {
            AccountName = "contosomedia",
            CommonEncryptionCbcs = new AzureNative.Media.Inputs.CommonEncryptionCbcsArgs
            {
                ContentKeys = new AzureNative.Media.Inputs.StreamingPolicyContentKeysArgs
                {
                    DefaultKey = new AzureNative.Media.Inputs.DefaultKeyArgs
                    {
                        Label = "cbcsDefaultKey",
                    },
                },
                Drm = new AzureNative.Media.Inputs.CbcsDrmConfigurationArgs
                {
                    FairPlay = new AzureNative.Media.Inputs.StreamingPolicyFairPlayConfigurationArgs
                    {
                        AllowPersistentLicense = true,
                        CustomLicenseAcquisitionUrlTemplate = "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
                    },
                },
                EnabledProtocols = new AzureNative.Media.Inputs.EnabledProtocolsArgs
                {
                    Dash = false,
                    Download = false,
                    Hls = true,
                    SmoothStreaming = false,
                },
            },
            DefaultContentKeyPolicyName = "PolicyWithMultipleOptions",
            ResourceGroupName = "contoso",
            StreamingPolicyName = "UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly",
        });
    }

}

```

```go
package main

import (
	media "github.com/pulumi/pulumi-azure-native/sdk/go/azure/media"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := media.NewStreamingPolicy(ctx, "streamingPolicy", &media.StreamingPolicyArgs{
			AccountName: pulumi.String("contosomedia"),
			CommonEncryptionCbcs: &media.CommonEncryptionCbcsArgs{
				ContentKeys: &media.StreamingPolicyContentKeysArgs{
					DefaultKey: &media.DefaultKeyArgs{
						Label: pulumi.String("cbcsDefaultKey"),
					},
				},
				Drm: &media.CbcsDrmConfigurationArgs{
					FairPlay: &media.StreamingPolicyFairPlayConfigurationArgs{
						AllowPersistentLicense:              pulumi.Bool(true),
						CustomLicenseAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
					},
				},
				EnabledProtocols: &media.EnabledProtocolsArgs{
					Dash:            pulumi.Bool(false),
					Download:        pulumi.Bool(false),
					Hls:             pulumi.Bool(true),
					SmoothStreaming: pulumi.Bool(false),
				},
			},
			DefaultContentKeyPolicyName: pulumi.String("PolicyWithMultipleOptions"),
			ResourceGroupName:           pulumi.String("contoso"),
			StreamingPolicyName:         pulumi.String("UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const streamingPolicy = new azure_native.media.StreamingPolicy("streamingPolicy", {
    accountName: "contosomedia",
    commonEncryptionCbcs: {
        contentKeys: {
            defaultKey: {
                label: "cbcsDefaultKey",
            },
        },
        drm: {
            fairPlay: {
                allowPersistentLicense: true,
                customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
            },
        },
        enabledProtocols: {
            dash: false,
            download: false,
            hls: true,
            smoothStreaming: false,
        },
    },
    defaultContentKeyPolicyName: "PolicyWithMultipleOptions",
    resourceGroupName: "contoso",
    streamingPolicyName: "UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

streaming_policy = azure_native.media.StreamingPolicy("streamingPolicy",
    account_name="contosomedia",
    common_encryption_cbcs=azure_native.media.CommonEncryptionCbcsArgs(
        content_keys=azure_native.media.StreamingPolicyContentKeysArgs(
            default_key=azure_native.media.DefaultKeyArgs(
                label="cbcsDefaultKey",
            ),
        ),
        drm=azure_native.media.CbcsDrmConfigurationArgs(
            fair_play=azure_native.media.StreamingPolicyFairPlayConfigurationArgs(
                allow_persistent_license=True,
                custom_license_acquisition_url_template="https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
            ),
        ),
        enabled_protocols=azure_native.media.EnabledProtocolsArgs(
            dash=False,
            download=False,
            hls=True,
            smooth_streaming=False,
        ),
    ),
    default_content_key_policy_name="PolicyWithMultipleOptions",
    resource_group_name="contoso",
    streaming_policy_name="UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly")

```

{{% /example %}}
{{% example %}}
### Creates a Streaming Policy with commonEncryptionCenc only
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var streamingPolicy = new AzureNative.Media.StreamingPolicy("streamingPolicy", new AzureNative.Media.StreamingPolicyArgs
        {
            AccountName = "contosomedia",
            CommonEncryptionCenc = new AzureNative.Media.Inputs.CommonEncryptionCencArgs
            {
                ClearTracks = 
                {
                    new AzureNative.Media.Inputs.TrackSelectionArgs
                    {
                        TrackSelections = 
                        {
                            new AzureNative.Media.Inputs.TrackPropertyConditionArgs
                            {
                                Operation = "Equal",
                                Property = "FourCC",
                                Value = "hev1",
                            },
                        },
                    },
                },
                ContentKeys = new AzureNative.Media.Inputs.StreamingPolicyContentKeysArgs
                {
                    DefaultKey = new AzureNative.Media.Inputs.DefaultKeyArgs
                    {
                        Label = "cencDefaultKey",
                    },
                },
                Drm = new AzureNative.Media.Inputs.CencDrmConfigurationArgs
                {
                    PlayReady = new AzureNative.Media.Inputs.StreamingPolicyPlayReadyConfigurationArgs
                    {
                        CustomLicenseAcquisitionUrlTemplate = "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                        PlayReadyCustomAttributes = "PlayReady CustomAttributes",
                    },
                    Widevine = new AzureNative.Media.Inputs.StreamingPolicyWidevineConfigurationArgs
                    {
                        CustomLicenseAcquisitionUrlTemplate = "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId",
                    },
                },
                EnabledProtocols = new AzureNative.Media.Inputs.EnabledProtocolsArgs
                {
                    Dash = true,
                    Download = false,
                    Hls = false,
                    SmoothStreaming = true,
                },
            },
            DefaultContentKeyPolicyName = "PolicyWithPlayReadyOptionAndOpenRestriction",
            ResourceGroupName = "contoso",
            StreamingPolicyName = "UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly",
        });
    }

}

```

```go
package main

import (
	media "github.com/pulumi/pulumi-azure-native/sdk/go/azure/media"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := media.NewStreamingPolicy(ctx, "streamingPolicy", &media.StreamingPolicyArgs{
			AccountName: pulumi.String("contosomedia"),
			CommonEncryptionCenc: &media.CommonEncryptionCencArgs{
				ClearTracks: media.TrackSelectionArray{
					&media.TrackSelectionArgs{
						TrackSelections: media.TrackPropertyConditionArray{
							&media.TrackPropertyConditionArgs{
								Operation: pulumi.String("Equal"),
								Property:  pulumi.String("FourCC"),
								Value:     pulumi.String("hev1"),
							},
						},
					},
				},
				ContentKeys: &media.StreamingPolicyContentKeysArgs{
					DefaultKey: &media.DefaultKeyArgs{
						Label: pulumi.String("cencDefaultKey"),
					},
				},
				Drm: &media.CencDrmConfigurationArgs{
					PlayReady: &media.StreamingPolicyPlayReadyConfigurationArgs{
						CustomLicenseAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
						PlayReadyCustomAttributes:           pulumi.String("PlayReady CustomAttributes"),
					},
					Widevine: &media.StreamingPolicyWidevineConfigurationArgs{
						CustomLicenseAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"),
					},
				},
				EnabledProtocols: &media.EnabledProtocolsArgs{
					Dash:            pulumi.Bool(true),
					Download:        pulumi.Bool(false),
					Hls:             pulumi.Bool(false),
					SmoothStreaming: pulumi.Bool(true),
				},
			},
			DefaultContentKeyPolicyName: pulumi.String("PolicyWithPlayReadyOptionAndOpenRestriction"),
			ResourceGroupName:           pulumi.String("contoso"),
			StreamingPolicyName:         pulumi.String("UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const streamingPolicy = new azure_native.media.StreamingPolicy("streamingPolicy", {
    accountName: "contosomedia",
    commonEncryptionCenc: {
        clearTracks: [{
            trackSelections: [{
                operation: "Equal",
                property: "FourCC",
                value: "hev1",
            }],
        }],
        contentKeys: {
            defaultKey: {
                label: "cencDefaultKey",
            },
        },
        drm: {
            playReady: {
                customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                playReadyCustomAttributes: "PlayReady CustomAttributes",
            },
            widevine: {
                customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId",
            },
        },
        enabledProtocols: {
            dash: true,
            download: false,
            hls: false,
            smoothStreaming: true,
        },
    },
    defaultContentKeyPolicyName: "PolicyWithPlayReadyOptionAndOpenRestriction",
    resourceGroupName: "contoso",
    streamingPolicyName: "UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

streaming_policy = azure_native.media.StreamingPolicy("streamingPolicy",
    account_name="contosomedia",
    common_encryption_cenc=azure_native.media.CommonEncryptionCencArgs(
        clear_tracks=[azure_native.media.TrackSelectionArgs(
            track_selections=[azure_native.media.TrackPropertyConditionArgs(
                operation="Equal",
                property="FourCC",
                value="hev1",
            )],
        )],
        content_keys=azure_native.media.StreamingPolicyContentKeysArgs(
            default_key=azure_native.media.DefaultKeyArgs(
                label="cencDefaultKey",
            ),
        ),
        drm=azure_native.media.CencDrmConfigurationArgs(
            play_ready=azure_native.media.StreamingPolicyPlayReadyConfigurationArgs(
                custom_license_acquisition_url_template="https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                play_ready_custom_attributes="PlayReady CustomAttributes",
            ),
            widevine=azure_native.media.StreamingPolicyWidevineConfigurationArgs(
                custom_license_acquisition_url_template="https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId",
            ),
        ),
        enabled_protocols=azure_native.media.EnabledProtocolsArgs(
            dash=True,
            download=False,
            hls=False,
            smooth_streaming=True,
        ),
    ),
    default_content_key_policy_name="PolicyWithPlayReadyOptionAndOpenRestriction",
    resource_group_name="contoso",
    streaming_policy_name="UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly")

```

{{% /example %}}
{{% example %}}
### Creates a Streaming Policy with envelopeEncryption only
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var streamingPolicy = new AzureNative.Media.StreamingPolicy("streamingPolicy", new AzureNative.Media.StreamingPolicyArgs
        {
            AccountName = "contosomedia",
            DefaultContentKeyPolicyName = "PolicyWithClearKeyOptionAndTokenRestriction",
            EnvelopeEncryption = new AzureNative.Media.Inputs.EnvelopeEncryptionArgs
            {
                ContentKeys = new AzureNative.Media.Inputs.StreamingPolicyContentKeysArgs
                {
                    DefaultKey = new AzureNative.Media.Inputs.DefaultKeyArgs
                    {
                        Label = "aesDefaultKey",
                    },
                },
                CustomKeyAcquisitionUrlTemplate = "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}",
                EnabledProtocols = new AzureNative.Media.Inputs.EnabledProtocolsArgs
                {
                    Dash = true,
                    Download = false,
                    Hls = true,
                    SmoothStreaming = true,
                },
            },
            ResourceGroupName = "contoso",
            StreamingPolicyName = "UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly",
        });
    }

}

```

```go
package main

import (
	media "github.com/pulumi/pulumi-azure-native/sdk/go/azure/media"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := media.NewStreamingPolicy(ctx, "streamingPolicy", &media.StreamingPolicyArgs{
			AccountName:                 pulumi.String("contosomedia"),
			DefaultContentKeyPolicyName: pulumi.String("PolicyWithClearKeyOptionAndTokenRestriction"),
			EnvelopeEncryption: &media.EnvelopeEncryptionArgs{
				ContentKeys: &media.StreamingPolicyContentKeysArgs{
					DefaultKey: &media.DefaultKeyArgs{
						Label: pulumi.String("aesDefaultKey"),
					},
				},
				CustomKeyAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"),
				EnabledProtocols: &media.EnabledProtocolsArgs{
					Dash:            pulumi.Bool(true),
					Download:        pulumi.Bool(false),
					Hls:             pulumi.Bool(true),
					SmoothStreaming: pulumi.Bool(true),
				},
			},
			ResourceGroupName:   pulumi.String("contoso"),
			StreamingPolicyName: pulumi.String("UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const streamingPolicy = new azure_native.media.StreamingPolicy("streamingPolicy", {
    accountName: "contosomedia",
    defaultContentKeyPolicyName: "PolicyWithClearKeyOptionAndTokenRestriction",
    envelopeEncryption: {
        contentKeys: {
            defaultKey: {
                label: "aesDefaultKey",
            },
        },
        customKeyAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}",
        enabledProtocols: {
            dash: true,
            download: false,
            hls: true,
            smoothStreaming: true,
        },
    },
    resourceGroupName: "contoso",
    streamingPolicyName: "UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

streaming_policy = azure_native.media.StreamingPolicy("streamingPolicy",
    account_name="contosomedia",
    default_content_key_policy_name="PolicyWithClearKeyOptionAndTokenRestriction",
    envelope_encryption=azure_native.media.EnvelopeEncryptionArgs(
        content_keys=azure_native.media.StreamingPolicyContentKeysArgs(
            default_key=azure_native.media.DefaultKeyArgs(
                label="aesDefaultKey",
            ),
        ),
        custom_key_acquisition_url_template="https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}",
        enabled_protocols=azure_native.media.EnabledProtocolsArgs(
            dash=True,
            download=False,
            hls=True,
            smooth_streaming=True,
        ),
    ),
    resource_group_name="contoso",
    streaming_policy_name="UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly")

```

{{% /example %}}
{{% example %}}
### Creates a Streaming Policy with secure streaming
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var streamingPolicy = new AzureNative.Media.StreamingPolicy("streamingPolicy", new AzureNative.Media.StreamingPolicyArgs
        {
            AccountName = "contosomedia",
            CommonEncryptionCbcs = new AzureNative.Media.Inputs.CommonEncryptionCbcsArgs
            {
                ContentKeys = new AzureNative.Media.Inputs.StreamingPolicyContentKeysArgs
                {
                    DefaultKey = new AzureNative.Media.Inputs.DefaultKeyArgs
                    {
                        Label = "cbcsDefaultKey",
                    },
                },
                Drm = new AzureNative.Media.Inputs.CbcsDrmConfigurationArgs
                {
                    FairPlay = new AzureNative.Media.Inputs.StreamingPolicyFairPlayConfigurationArgs
                    {
                        AllowPersistentLicense = true,
                        CustomLicenseAcquisitionUrlTemplate = "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
                    },
                },
                EnabledProtocols = new AzureNative.Media.Inputs.EnabledProtocolsArgs
                {
                    Dash = false,
                    Download = false,
                    Hls = true,
                    SmoothStreaming = false,
                },
            },
            CommonEncryptionCenc = new AzureNative.Media.Inputs.CommonEncryptionCencArgs
            {
                ClearTracks = 
                {
                    new AzureNative.Media.Inputs.TrackSelectionArgs
                    {
                        TrackSelections = 
                        {
                            new AzureNative.Media.Inputs.TrackPropertyConditionArgs
                            {
                                Operation = "Equal",
                                Property = "FourCC",
                                Value = "hev1",
                            },
                        },
                    },
                },
                ContentKeys = new AzureNative.Media.Inputs.StreamingPolicyContentKeysArgs
                {
                    DefaultKey = new AzureNative.Media.Inputs.DefaultKeyArgs
                    {
                        Label = "cencDefaultKey",
                    },
                },
                Drm = new AzureNative.Media.Inputs.CencDrmConfigurationArgs
                {
                    PlayReady = new AzureNative.Media.Inputs.StreamingPolicyPlayReadyConfigurationArgs
                    {
                        CustomLicenseAcquisitionUrlTemplate = "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                        PlayReadyCustomAttributes = "PlayReady CustomAttributes",
                    },
                    Widevine = new AzureNative.Media.Inputs.StreamingPolicyWidevineConfigurationArgs
                    {
                        CustomLicenseAcquisitionUrlTemplate = "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId",
                    },
                },
                EnabledProtocols = new AzureNative.Media.Inputs.EnabledProtocolsArgs
                {
                    Dash = true,
                    Download = false,
                    Hls = false,
                    SmoothStreaming = true,
                },
            },
            DefaultContentKeyPolicyName = "PolicyWithMultipleOptions",
            EnvelopeEncryption = new AzureNative.Media.Inputs.EnvelopeEncryptionArgs
            {
                ContentKeys = new AzureNative.Media.Inputs.StreamingPolicyContentKeysArgs
                {
                    DefaultKey = new AzureNative.Media.Inputs.DefaultKeyArgs
                    {
                        Label = "aesDefaultKey",
                    },
                },
                CustomKeyAcquisitionUrlTemplate = "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}",
                EnabledProtocols = new AzureNative.Media.Inputs.EnabledProtocolsArgs
                {
                    Dash = true,
                    Download = false,
                    Hls = true,
                    SmoothStreaming = true,
                },
            },
            ResourceGroupName = "contoso",
            StreamingPolicyName = "UserCreatedSecureStreamingPolicy",
        });
    }

}

```

```go
package main

import (
	media "github.com/pulumi/pulumi-azure-native/sdk/go/azure/media"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := media.NewStreamingPolicy(ctx, "streamingPolicy", &media.StreamingPolicyArgs{
			AccountName: pulumi.String("contosomedia"),
			CommonEncryptionCbcs: &media.CommonEncryptionCbcsArgs{
				ContentKeys: &media.StreamingPolicyContentKeysArgs{
					DefaultKey: &media.DefaultKeyArgs{
						Label: pulumi.String("cbcsDefaultKey"),
					},
				},
				Drm: &media.CbcsDrmConfigurationArgs{
					FairPlay: &media.StreamingPolicyFairPlayConfigurationArgs{
						AllowPersistentLicense:              pulumi.Bool(true),
						CustomLicenseAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
					},
				},
				EnabledProtocols: &media.EnabledProtocolsArgs{
					Dash:            pulumi.Bool(false),
					Download:        pulumi.Bool(false),
					Hls:             pulumi.Bool(true),
					SmoothStreaming: pulumi.Bool(false),
				},
			},
			CommonEncryptionCenc: &media.CommonEncryptionCencArgs{
				ClearTracks: media.TrackSelectionArray{
					&media.TrackSelectionArgs{
						TrackSelections: media.TrackPropertyConditionArray{
							&media.TrackPropertyConditionArgs{
								Operation: pulumi.String("Equal"),
								Property:  pulumi.String("FourCC"),
								Value:     pulumi.String("hev1"),
							},
						},
					},
				},
				ContentKeys: &media.StreamingPolicyContentKeysArgs{
					DefaultKey: &media.DefaultKeyArgs{
						Label: pulumi.String("cencDefaultKey"),
					},
				},
				Drm: &media.CencDrmConfigurationArgs{
					PlayReady: &media.StreamingPolicyPlayReadyConfigurationArgs{
						CustomLicenseAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
						PlayReadyCustomAttributes:           pulumi.String("PlayReady CustomAttributes"),
					},
					Widevine: &media.StreamingPolicyWidevineConfigurationArgs{
						CustomLicenseAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"),
					},
				},
				EnabledProtocols: &media.EnabledProtocolsArgs{
					Dash:            pulumi.Bool(true),
					Download:        pulumi.Bool(false),
					Hls:             pulumi.Bool(false),
					SmoothStreaming: pulumi.Bool(true),
				},
			},
			DefaultContentKeyPolicyName: pulumi.String("PolicyWithMultipleOptions"),
			EnvelopeEncryption: &media.EnvelopeEncryptionArgs{
				ContentKeys: &media.StreamingPolicyContentKeysArgs{
					DefaultKey: &media.DefaultKeyArgs{
						Label: pulumi.String("aesDefaultKey"),
					},
				},
				CustomKeyAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"),
				EnabledProtocols: &media.EnabledProtocolsArgs{
					Dash:            pulumi.Bool(true),
					Download:        pulumi.Bool(false),
					Hls:             pulumi.Bool(true),
					SmoothStreaming: pulumi.Bool(true),
				},
			},
			ResourceGroupName:   pulumi.String("contoso"),
			StreamingPolicyName: pulumi.String("UserCreatedSecureStreamingPolicy"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const streamingPolicy = new azure_native.media.StreamingPolicy("streamingPolicy", {
    accountName: "contosomedia",
    commonEncryptionCbcs: {
        contentKeys: {
            defaultKey: {
                label: "cbcsDefaultKey",
            },
        },
        drm: {
            fairPlay: {
                allowPersistentLicense: true,
                customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
            },
        },
        enabledProtocols: {
            dash: false,
            download: false,
            hls: true,
            smoothStreaming: false,
        },
    },
    commonEncryptionCenc: {
        clearTracks: [{
            trackSelections: [{
                operation: "Equal",
                property: "FourCC",
                value: "hev1",
            }],
        }],
        contentKeys: {
            defaultKey: {
                label: "cencDefaultKey",
            },
        },
        drm: {
            playReady: {
                customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                playReadyCustomAttributes: "PlayReady CustomAttributes",
            },
            widevine: {
                customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId",
            },
        },
        enabledProtocols: {
            dash: true,
            download: false,
            hls: false,
            smoothStreaming: true,
        },
    },
    defaultContentKeyPolicyName: "PolicyWithMultipleOptions",
    envelopeEncryption: {
        contentKeys: {
            defaultKey: {
                label: "aesDefaultKey",
            },
        },
        customKeyAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}",
        enabledProtocols: {
            dash: true,
            download: false,
            hls: true,
            smoothStreaming: true,
        },
    },
    resourceGroupName: "contoso",
    streamingPolicyName: "UserCreatedSecureStreamingPolicy",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

streaming_policy = azure_native.media.StreamingPolicy("streamingPolicy",
    account_name="contosomedia",
    common_encryption_cbcs=azure_native.media.CommonEncryptionCbcsArgs(
        content_keys=azure_native.media.StreamingPolicyContentKeysArgs(
            default_key=azure_native.media.DefaultKeyArgs(
                label="cbcsDefaultKey",
            ),
        ),
        drm=azure_native.media.CbcsDrmConfigurationArgs(
            fair_play=azure_native.media.StreamingPolicyFairPlayConfigurationArgs(
                allow_persistent_license=True,
                custom_license_acquisition_url_template="https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
            ),
        ),
        enabled_protocols=azure_native.media.EnabledProtocolsArgs(
            dash=False,
            download=False,
            hls=True,
            smooth_streaming=False,
        ),
    ),
    common_encryption_cenc=azure_native.media.CommonEncryptionCencArgs(
        clear_tracks=[azure_native.media.TrackSelectionArgs(
            track_selections=[azure_native.media.TrackPropertyConditionArgs(
                operation="Equal",
                property="FourCC",
                value="hev1",
            )],
        )],
        content_keys=azure_native.media.StreamingPolicyContentKeysArgs(
            default_key=azure_native.media.DefaultKeyArgs(
                label="cencDefaultKey",
            ),
        ),
        drm=azure_native.media.CencDrmConfigurationArgs(
            play_ready=azure_native.media.StreamingPolicyPlayReadyConfigurationArgs(
                custom_license_acquisition_url_template="https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                play_ready_custom_attributes="PlayReady CustomAttributes",
            ),
            widevine=azure_native.media.StreamingPolicyWidevineConfigurationArgs(
                custom_license_acquisition_url_template="https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId",
            ),
        ),
        enabled_protocols=azure_native.media.EnabledProtocolsArgs(
            dash=True,
            download=False,
            hls=False,
            smooth_streaming=True,
        ),
    ),
    default_content_key_policy_name="PolicyWithMultipleOptions",
    envelope_encryption=azure_native.media.EnvelopeEncryptionArgs(
        content_keys=azure_native.media.StreamingPolicyContentKeysArgs(
            default_key=azure_native.media.DefaultKeyArgs(
                label="aesDefaultKey",
            ),
        ),
        custom_key_acquisition_url_template="https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}",
        enabled_protocols=azure_native.media.EnabledProtocolsArgs(
            dash=True,
            download=False,
            hls=True,
            smooth_streaming=True,
        ),
    ),
    resource_group_name="contoso",
    streaming_policy_name="UserCreatedSecureStreamingPolicy")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:media:StreamingPolicy UserCreatedSecureStreamingPolicy /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicy 
```

 */
@ResourceType(type="azure-native:media:StreamingPolicy")
public class StreamingPolicy extends io.pulumi.resources.CustomResource {
    /**
     * Configuration of CommonEncryptionCbcs
     */
    @OutputExport(name="commonEncryptionCbcs", type=CommonEncryptionCbcsResponse.class, parameters={})
    private Output</* @Nullable */ CommonEncryptionCbcsResponse> commonEncryptionCbcs;

    /**
     * @return Configuration of CommonEncryptionCbcs
     */
    public Output</* @Nullable */ CommonEncryptionCbcsResponse> getCommonEncryptionCbcs() {
        return this.commonEncryptionCbcs;
    }
    /**
     * Configuration of CommonEncryptionCenc
     */
    @OutputExport(name="commonEncryptionCenc", type=CommonEncryptionCencResponse.class, parameters={})
    private Output</* @Nullable */ CommonEncryptionCencResponse> commonEncryptionCenc;

    /**
     * @return Configuration of CommonEncryptionCenc
     */
    public Output</* @Nullable */ CommonEncryptionCencResponse> getCommonEncryptionCenc() {
        return this.commonEncryptionCenc;
    }
    /**
     * Creation time of Streaming Policy
     */
    @OutputExport(name="created", type=String.class, parameters={})
    private Output<String> created;

    /**
     * @return Creation time of Streaming Policy
     */
    public Output<String> getCreated() {
        return this.created;
    }
    /**
     * Default ContentKey used by current Streaming Policy
     */
    @OutputExport(name="defaultContentKeyPolicyName", type=String.class, parameters={})
    private Output</* @Nullable */ String> defaultContentKeyPolicyName;

    /**
     * @return Default ContentKey used by current Streaming Policy
     */
    public Output</* @Nullable */ String> getDefaultContentKeyPolicyName() {
        return this.defaultContentKeyPolicyName;
    }
    /**
     * Configuration of EnvelopeEncryption
     */
    @OutputExport(name="envelopeEncryption", type=EnvelopeEncryptionResponse.class, parameters={})
    private Output</* @Nullable */ EnvelopeEncryptionResponse> envelopeEncryption;

    /**
     * @return Configuration of EnvelopeEncryption
     */
    public Output</* @Nullable */ EnvelopeEncryptionResponse> getEnvelopeEncryption() {
        return this.envelopeEncryption;
    }
    /**
     * The name of the resource
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Configurations of NoEncryption
     */
    @OutputExport(name="noEncryption", type=NoEncryptionResponse.class, parameters={})
    private Output</* @Nullable */ NoEncryptionResponse> noEncryption;

    /**
     * @return Configurations of NoEncryption
     */
    public Output</* @Nullable */ NoEncryptionResponse> getNoEncryption() {
        return this.noEncryption;
    }
    /**
     * The system metadata relating to this resource.
     */
    @OutputExport(name="systemData", type=SystemDataResponse.class, parameters={})
    private Output<SystemDataResponse> systemData;

    /**
     * @return The system metadata relating to this resource.
     */
    public Output<SystemDataResponse> getSystemData() {
        return this.systemData;
    }
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public StreamingPolicy(String name, StreamingPolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:media:StreamingPolicy", name, args == null ? StreamingPolicyArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private StreamingPolicy(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:media:StreamingPolicy", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:media/v20180330preview:StreamingPolicy").build()),
                Input.of(Alias.builder().setType("azure-native:media/v20180601preview:StreamingPolicy").build()),
                Input.of(Alias.builder().setType("azure-native:media/v20180701:StreamingPolicy").build()),
                Input.of(Alias.builder().setType("azure-native:media/v20200501:StreamingPolicy").build()),
                Input.of(Alias.builder().setType("azure-native:media/v20210601:StreamingPolicy").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static StreamingPolicy get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new StreamingPolicy(name, id, options);
    }
}
