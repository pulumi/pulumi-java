// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.virtualmachineimages.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class ProvisioningErrorResponse {
    private final @Nullable String message;
    private final @Nullable String provisioningErrorCode;

    @OutputCustomType.Constructor({"message","provisioningErrorCode"})
    private ProvisioningErrorResponse(
        @Nullable String message,
        @Nullable String provisioningErrorCode) {
        this.message = message;
        this.provisioningErrorCode = provisioningErrorCode;
    }

    public Optional<String> getMessage() {
        return Optional.ofNullable(this.message);
    }
    public Optional<String> getProvisioningErrorCode() {
        return Optional.ofNullable(this.provisioningErrorCode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProvisioningErrorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String message;
        private @Nullable String provisioningErrorCode;

        public Builder() {
    	      // Empty
        }

        public Builder(ProvisioningErrorResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.message = defaults.message;
    	      this.provisioningErrorCode = defaults.provisioningErrorCode;
        }

        public Builder setMessage(@Nullable String message) {
            this.message = message;
            return this;
        }

        public Builder setProvisioningErrorCode(@Nullable String provisioningErrorCode) {
            this.provisioningErrorCode = provisioningErrorCode;
            return this;
        }

        public ProvisioningErrorResponse build() {
            return new ProvisioningErrorResponse(message, provisioningErrorCode);
        }
    }
}
