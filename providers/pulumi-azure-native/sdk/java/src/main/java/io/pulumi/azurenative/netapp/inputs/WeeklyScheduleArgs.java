// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.netapp.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Weekly Schedule properties, make a snapshot every week at a specific day or days
 * 
 */
public final class WeeklyScheduleArgs extends io.pulumi.resources.ResourceArgs {

    public static final WeeklyScheduleArgs Empty = new WeeklyScheduleArgs();

    /**
     * Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english
     * 
     */
    @Import(name="day")
      private final @Nullable Output<String> day;

    public Output<String> getDay() {
        return this.day == null ? Output.empty() : this.day;
    }

    /**
     * Indicates which hour in UTC timezone a snapshot should be taken
     * 
     */
    @Import(name="hour")
      private final @Nullable Output<Integer> hour;

    public Output<Integer> getHour() {
        return this.hour == null ? Output.empty() : this.hour;
    }

    /**
     * Indicates which minute snapshot should be taken
     * 
     */
    @Import(name="minute")
      private final @Nullable Output<Integer> minute;

    public Output<Integer> getMinute() {
        return this.minute == null ? Output.empty() : this.minute;
    }

    /**
     * Weekly snapshot count to keep
     * 
     */
    @Import(name="snapshotsToKeep")
      private final @Nullable Output<Integer> snapshotsToKeep;

    public Output<Integer> getSnapshotsToKeep() {
        return this.snapshotsToKeep == null ? Output.empty() : this.snapshotsToKeep;
    }

    /**
     * Resource size in bytes, current storage usage for the volume in bytes
     * 
     */
    @Import(name="usedBytes")
      private final @Nullable Output<Double> usedBytes;

    public Output<Double> getUsedBytes() {
        return this.usedBytes == null ? Output.empty() : this.usedBytes;
    }

    public WeeklyScheduleArgs(
        @Nullable Output<String> day,
        @Nullable Output<Integer> hour,
        @Nullable Output<Integer> minute,
        @Nullable Output<Integer> snapshotsToKeep,
        @Nullable Output<Double> usedBytes) {
        this.day = day;
        this.hour = hour;
        this.minute = minute;
        this.snapshotsToKeep = snapshotsToKeep;
        this.usedBytes = usedBytes;
    }

    private WeeklyScheduleArgs() {
        this.day = Output.empty();
        this.hour = Output.empty();
        this.minute = Output.empty();
        this.snapshotsToKeep = Output.empty();
        this.usedBytes = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WeeklyScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> day;
        private @Nullable Output<Integer> hour;
        private @Nullable Output<Integer> minute;
        private @Nullable Output<Integer> snapshotsToKeep;
        private @Nullable Output<Double> usedBytes;

        public Builder() {
    	      // Empty
        }

        public Builder(WeeklyScheduleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.day = defaults.day;
    	      this.hour = defaults.hour;
    	      this.minute = defaults.minute;
    	      this.snapshotsToKeep = defaults.snapshotsToKeep;
    	      this.usedBytes = defaults.usedBytes;
        }

        public Builder day(@Nullable Output<String> day) {
            this.day = day;
            return this;
        }

        public Builder day(@Nullable String day) {
            this.day = Output.ofNullable(day);
            return this;
        }

        public Builder hour(@Nullable Output<Integer> hour) {
            this.hour = hour;
            return this;
        }

        public Builder hour(@Nullable Integer hour) {
            this.hour = Output.ofNullable(hour);
            return this;
        }

        public Builder minute(@Nullable Output<Integer> minute) {
            this.minute = minute;
            return this;
        }

        public Builder minute(@Nullable Integer minute) {
            this.minute = Output.ofNullable(minute);
            return this;
        }

        public Builder snapshotsToKeep(@Nullable Output<Integer> snapshotsToKeep) {
            this.snapshotsToKeep = snapshotsToKeep;
            return this;
        }

        public Builder snapshotsToKeep(@Nullable Integer snapshotsToKeep) {
            this.snapshotsToKeep = Output.ofNullable(snapshotsToKeep);
            return this;
        }

        public Builder usedBytes(@Nullable Output<Double> usedBytes) {
            this.usedBytes = usedBytes;
            return this;
        }

        public Builder usedBytes(@Nullable Double usedBytes) {
            this.usedBytes = Output.ofNullable(usedBytes);
            return this;
        }
        public WeeklyScheduleArgs build() {
            return new WeeklyScheduleArgs(day, hour, minute, snapshotsToKeep, usedBytes);
        }
    }
}
