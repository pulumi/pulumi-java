// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.outputs;

import io.pulumi.azurenative.compute.outputs.CreationDataResponse;
import io.pulumi.azurenative.compute.outputs.DiskSecurityProfileResponse;
import io.pulumi.azurenative.compute.outputs.DiskSkuResponse;
import io.pulumi.azurenative.compute.outputs.EncryptionResponse;
import io.pulumi.azurenative.compute.outputs.EncryptionSettingsCollectionResponse;
import io.pulumi.azurenative.compute.outputs.ExtendedLocationResponse;
import io.pulumi.azurenative.compute.outputs.PropertyUpdatesInProgressResponse;
import io.pulumi.azurenative.compute.outputs.PurchasePlanResponse;
import io.pulumi.azurenative.compute.outputs.ShareInfoElementResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetDiskResult {
    private final @Nullable Boolean burstingEnabled;
    private final CreationDataResponse creationData;
    private final @Nullable String diskAccessId;
    private final @Nullable Double diskIOPSReadOnly;
    private final @Nullable Double diskIOPSReadWrite;
    private final @Nullable Double diskMBpsReadOnly;
    private final @Nullable Double diskMBpsReadWrite;
    private final Double diskSizeBytes;
    private final @Nullable Integer diskSizeGB;
    private final String diskState;
    private final @Nullable EncryptionResponse encryption;
    private final @Nullable EncryptionSettingsCollectionResponse encryptionSettingsCollection;
    private final @Nullable ExtendedLocationResponse extendedLocation;
    private final @Nullable String hyperVGeneration;
    private final String id;
    private final String location;
    private final String managedBy;
    private final List<String> managedByExtended;
    private final @Nullable Integer maxShares;
    private final String name;
    private final @Nullable String networkAccessPolicy;
    private final @Nullable String osType;
    private final PropertyUpdatesInProgressResponse propertyUpdatesInProgress;
    private final String provisioningState;
    private final @Nullable PurchasePlanResponse purchasePlan;
    private final @Nullable DiskSecurityProfileResponse securityProfile;
    private final List<ShareInfoElementResponse> shareInfo;
    private final @Nullable DiskSkuResponse sku;
    private final @Nullable Boolean supportsHibernation;
    private final @Nullable Map<String,String> tags;
    private final @Nullable String tier;
    private final String timeCreated;
    private final String type;
    private final String uniqueId;
    private final @Nullable List<String> zones;

    @OutputCustomType.Constructor({"burstingEnabled","creationData","diskAccessId","diskIOPSReadOnly","diskIOPSReadWrite","diskMBpsReadOnly","diskMBpsReadWrite","diskSizeBytes","diskSizeGB","diskState","encryption","encryptionSettingsCollection","extendedLocation","hyperVGeneration","id","location","managedBy","managedByExtended","maxShares","name","networkAccessPolicy","osType","propertyUpdatesInProgress","provisioningState","purchasePlan","securityProfile","shareInfo","sku","supportsHibernation","tags","tier","timeCreated","type","uniqueId","zones"})
    private GetDiskResult(
        @Nullable Boolean burstingEnabled,
        CreationDataResponse creationData,
        @Nullable String diskAccessId,
        @Nullable Double diskIOPSReadOnly,
        @Nullable Double diskIOPSReadWrite,
        @Nullable Double diskMBpsReadOnly,
        @Nullable Double diskMBpsReadWrite,
        Double diskSizeBytes,
        @Nullable Integer diskSizeGB,
        String diskState,
        @Nullable EncryptionResponse encryption,
        @Nullable EncryptionSettingsCollectionResponse encryptionSettingsCollection,
        @Nullable ExtendedLocationResponse extendedLocation,
        @Nullable String hyperVGeneration,
        String id,
        String location,
        String managedBy,
        List<String> managedByExtended,
        @Nullable Integer maxShares,
        String name,
        @Nullable String networkAccessPolicy,
        @Nullable String osType,
        PropertyUpdatesInProgressResponse propertyUpdatesInProgress,
        String provisioningState,
        @Nullable PurchasePlanResponse purchasePlan,
        @Nullable DiskSecurityProfileResponse securityProfile,
        List<ShareInfoElementResponse> shareInfo,
        @Nullable DiskSkuResponse sku,
        @Nullable Boolean supportsHibernation,
        @Nullable Map<String,String> tags,
        @Nullable String tier,
        String timeCreated,
        String type,
        String uniqueId,
        @Nullable List<String> zones) {
        this.burstingEnabled = burstingEnabled;
        this.creationData = Objects.requireNonNull(creationData);
        this.diskAccessId = diskAccessId;
        this.diskIOPSReadOnly = diskIOPSReadOnly;
        this.diskIOPSReadWrite = diskIOPSReadWrite;
        this.diskMBpsReadOnly = diskMBpsReadOnly;
        this.diskMBpsReadWrite = diskMBpsReadWrite;
        this.diskSizeBytes = Objects.requireNonNull(diskSizeBytes);
        this.diskSizeGB = diskSizeGB;
        this.diskState = Objects.requireNonNull(diskState);
        this.encryption = encryption;
        this.encryptionSettingsCollection = encryptionSettingsCollection;
        this.extendedLocation = extendedLocation;
        this.hyperVGeneration = hyperVGeneration;
        this.id = Objects.requireNonNull(id);
        this.location = Objects.requireNonNull(location);
        this.managedBy = Objects.requireNonNull(managedBy);
        this.managedByExtended = Objects.requireNonNull(managedByExtended);
        this.maxShares = maxShares;
        this.name = Objects.requireNonNull(name);
        this.networkAccessPolicy = networkAccessPolicy;
        this.osType = osType;
        this.propertyUpdatesInProgress = Objects.requireNonNull(propertyUpdatesInProgress);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.purchasePlan = purchasePlan;
        this.securityProfile = securityProfile;
        this.shareInfo = Objects.requireNonNull(shareInfo);
        this.sku = sku;
        this.supportsHibernation = supportsHibernation;
        this.tags = tags;
        this.tier = tier;
        this.timeCreated = Objects.requireNonNull(timeCreated);
        this.type = Objects.requireNonNull(type);
        this.uniqueId = Objects.requireNonNull(uniqueId);
        this.zones = zones;
    }

    public Optional<Boolean> getBurstingEnabled() {
        return Optional.ofNullable(this.burstingEnabled);
    }
    public CreationDataResponse getCreationData() {
        return this.creationData;
    }
    public Optional<String> getDiskAccessId() {
        return Optional.ofNullable(this.diskAccessId);
    }
    public Optional<Double> getDiskIOPSReadOnly() {
        return Optional.ofNullable(this.diskIOPSReadOnly);
    }
    public Optional<Double> getDiskIOPSReadWrite() {
        return Optional.ofNullable(this.diskIOPSReadWrite);
    }
    public Optional<Double> getDiskMBpsReadOnly() {
        return Optional.ofNullable(this.diskMBpsReadOnly);
    }
    public Optional<Double> getDiskMBpsReadWrite() {
        return Optional.ofNullable(this.diskMBpsReadWrite);
    }
    public Double getDiskSizeBytes() {
        return this.diskSizeBytes;
    }
    public Optional<Integer> getDiskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }
    public String getDiskState() {
        return this.diskState;
    }
    public Optional<EncryptionResponse> getEncryption() {
        return Optional.ofNullable(this.encryption);
    }
    public Optional<EncryptionSettingsCollectionResponse> getEncryptionSettingsCollection() {
        return Optional.ofNullable(this.encryptionSettingsCollection);
    }
    public Optional<ExtendedLocationResponse> getExtendedLocation() {
        return Optional.ofNullable(this.extendedLocation);
    }
    public Optional<String> getHyperVGeneration() {
        return Optional.ofNullable(this.hyperVGeneration);
    }
    public String getId() {
        return this.id;
    }
    public String getLocation() {
        return this.location;
    }
    public String getManagedBy() {
        return this.managedBy;
    }
    public List<String> getManagedByExtended() {
        return this.managedByExtended;
    }
    public Optional<Integer> getMaxShares() {
        return Optional.ofNullable(this.maxShares);
    }
    public String getName() {
        return this.name;
    }
    public Optional<String> getNetworkAccessPolicy() {
        return Optional.ofNullable(this.networkAccessPolicy);
    }
    public Optional<String> getOsType() {
        return Optional.ofNullable(this.osType);
    }
    public PropertyUpdatesInProgressResponse getPropertyUpdatesInProgress() {
        return this.propertyUpdatesInProgress;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public Optional<PurchasePlanResponse> getPurchasePlan() {
        return Optional.ofNullable(this.purchasePlan);
    }
    public Optional<DiskSecurityProfileResponse> getSecurityProfile() {
        return Optional.ofNullable(this.securityProfile);
    }
    public List<ShareInfoElementResponse> getShareInfo() {
        return this.shareInfo;
    }
    public Optional<DiskSkuResponse> getSku() {
        return Optional.ofNullable(this.sku);
    }
    public Optional<Boolean> getSupportsHibernation() {
        return Optional.ofNullable(this.supportsHibernation);
    }
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Optional<String> getTier() {
        return Optional.ofNullable(this.tier);
    }
    public String getTimeCreated() {
        return this.timeCreated;
    }
    public String getType() {
        return this.type;
    }
    public String getUniqueId() {
        return this.uniqueId;
    }
    public List<String> getZones() {
        return this.zones == null ? List.of() : this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiskResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean burstingEnabled;
        private CreationDataResponse creationData;
        private @Nullable String diskAccessId;
        private @Nullable Double diskIOPSReadOnly;
        private @Nullable Double diskIOPSReadWrite;
        private @Nullable Double diskMBpsReadOnly;
        private @Nullable Double diskMBpsReadWrite;
        private Double diskSizeBytes;
        private @Nullable Integer diskSizeGB;
        private String diskState;
        private @Nullable EncryptionResponse encryption;
        private @Nullable EncryptionSettingsCollectionResponse encryptionSettingsCollection;
        private @Nullable ExtendedLocationResponse extendedLocation;
        private @Nullable String hyperVGeneration;
        private String id;
        private String location;
        private String managedBy;
        private List<String> managedByExtended;
        private @Nullable Integer maxShares;
        private String name;
        private @Nullable String networkAccessPolicy;
        private @Nullable String osType;
        private PropertyUpdatesInProgressResponse propertyUpdatesInProgress;
        private String provisioningState;
        private @Nullable PurchasePlanResponse purchasePlan;
        private @Nullable DiskSecurityProfileResponse securityProfile;
        private List<ShareInfoElementResponse> shareInfo;
        private @Nullable DiskSkuResponse sku;
        private @Nullable Boolean supportsHibernation;
        private @Nullable Map<String,String> tags;
        private @Nullable String tier;
        private String timeCreated;
        private String type;
        private String uniqueId;
        private @Nullable List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDiskResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.burstingEnabled = defaults.burstingEnabled;
    	      this.creationData = defaults.creationData;
    	      this.diskAccessId = defaults.diskAccessId;
    	      this.diskIOPSReadOnly = defaults.diskIOPSReadOnly;
    	      this.diskIOPSReadWrite = defaults.diskIOPSReadWrite;
    	      this.diskMBpsReadOnly = defaults.diskMBpsReadOnly;
    	      this.diskMBpsReadWrite = defaults.diskMBpsReadWrite;
    	      this.diskSizeBytes = defaults.diskSizeBytes;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.diskState = defaults.diskState;
    	      this.encryption = defaults.encryption;
    	      this.encryptionSettingsCollection = defaults.encryptionSettingsCollection;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.managedBy = defaults.managedBy;
    	      this.managedByExtended = defaults.managedByExtended;
    	      this.maxShares = defaults.maxShares;
    	      this.name = defaults.name;
    	      this.networkAccessPolicy = defaults.networkAccessPolicy;
    	      this.osType = defaults.osType;
    	      this.propertyUpdatesInProgress = defaults.propertyUpdatesInProgress;
    	      this.provisioningState = defaults.provisioningState;
    	      this.purchasePlan = defaults.purchasePlan;
    	      this.securityProfile = defaults.securityProfile;
    	      this.shareInfo = defaults.shareInfo;
    	      this.sku = defaults.sku;
    	      this.supportsHibernation = defaults.supportsHibernation;
    	      this.tags = defaults.tags;
    	      this.tier = defaults.tier;
    	      this.timeCreated = defaults.timeCreated;
    	      this.type = defaults.type;
    	      this.uniqueId = defaults.uniqueId;
    	      this.zones = defaults.zones;
        }

        public Builder setBurstingEnabled(@Nullable Boolean burstingEnabled) {
            this.burstingEnabled = burstingEnabled;
            return this;
        }

        public Builder setCreationData(CreationDataResponse creationData) {
            this.creationData = Objects.requireNonNull(creationData);
            return this;
        }

        public Builder setDiskAccessId(@Nullable String diskAccessId) {
            this.diskAccessId = diskAccessId;
            return this;
        }

        public Builder setDiskIOPSReadOnly(@Nullable Double diskIOPSReadOnly) {
            this.diskIOPSReadOnly = diskIOPSReadOnly;
            return this;
        }

        public Builder setDiskIOPSReadWrite(@Nullable Double diskIOPSReadWrite) {
            this.diskIOPSReadWrite = diskIOPSReadWrite;
            return this;
        }

        public Builder setDiskMBpsReadOnly(@Nullable Double diskMBpsReadOnly) {
            this.diskMBpsReadOnly = diskMBpsReadOnly;
            return this;
        }

        public Builder setDiskMBpsReadWrite(@Nullable Double diskMBpsReadWrite) {
            this.diskMBpsReadWrite = diskMBpsReadWrite;
            return this;
        }

        public Builder setDiskSizeBytes(Double diskSizeBytes) {
            this.diskSizeBytes = Objects.requireNonNull(diskSizeBytes);
            return this;
        }

        public Builder setDiskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder setDiskState(String diskState) {
            this.diskState = Objects.requireNonNull(diskState);
            return this;
        }

        public Builder setEncryption(@Nullable EncryptionResponse encryption) {
            this.encryption = encryption;
            return this;
        }

        public Builder setEncryptionSettingsCollection(@Nullable EncryptionSettingsCollectionResponse encryptionSettingsCollection) {
            this.encryptionSettingsCollection = encryptionSettingsCollection;
            return this;
        }

        public Builder setExtendedLocation(@Nullable ExtendedLocationResponse extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }

        public Builder setHyperVGeneration(@Nullable String hyperVGeneration) {
            this.hyperVGeneration = hyperVGeneration;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setManagedBy(String managedBy) {
            this.managedBy = Objects.requireNonNull(managedBy);
            return this;
        }

        public Builder setManagedByExtended(List<String> managedByExtended) {
            this.managedByExtended = Objects.requireNonNull(managedByExtended);
            return this;
        }

        public Builder setMaxShares(@Nullable Integer maxShares) {
            this.maxShares = maxShares;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetworkAccessPolicy(@Nullable String networkAccessPolicy) {
            this.networkAccessPolicy = networkAccessPolicy;
            return this;
        }

        public Builder setOsType(@Nullable String osType) {
            this.osType = osType;
            return this;
        }

        public Builder setPropertyUpdatesInProgress(PropertyUpdatesInProgressResponse propertyUpdatesInProgress) {
            this.propertyUpdatesInProgress = Objects.requireNonNull(propertyUpdatesInProgress);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setPurchasePlan(@Nullable PurchasePlanResponse purchasePlan) {
            this.purchasePlan = purchasePlan;
            return this;
        }

        public Builder setSecurityProfile(@Nullable DiskSecurityProfileResponse securityProfile) {
            this.securityProfile = securityProfile;
            return this;
        }

        public Builder setShareInfo(List<ShareInfoElementResponse> shareInfo) {
            this.shareInfo = Objects.requireNonNull(shareInfo);
            return this;
        }

        public Builder setSku(@Nullable DiskSkuResponse sku) {
            this.sku = sku;
            return this;
        }

        public Builder setSupportsHibernation(@Nullable Boolean supportsHibernation) {
            this.supportsHibernation = supportsHibernation;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTier(@Nullable String tier) {
            this.tier = tier;
            return this;
        }

        public Builder setTimeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUniqueId(String uniqueId) {
            this.uniqueId = Objects.requireNonNull(uniqueId);
            return this;
        }

        public Builder setZones(@Nullable List<String> zones) {
            this.zones = zones;
            return this;
        }

        public GetDiskResult build() {
            return new GetDiskResult(burstingEnabled, creationData, diskAccessId, diskIOPSReadOnly, diskIOPSReadWrite, diskMBpsReadOnly, diskMBpsReadWrite, diskSizeBytes, diskSizeGB, diskState, encryption, encryptionSettingsCollection, extendedLocation, hyperVGeneration, id, location, managedBy, managedByExtended, maxShares, name, networkAccessPolicy, osType, propertyUpdatesInProgress, provisioningState, purchasePlan, securityProfile, shareInfo, sku, supportsHibernation, tags, tier, timeCreated, type, uniqueId, zones);
        }
    }
}
