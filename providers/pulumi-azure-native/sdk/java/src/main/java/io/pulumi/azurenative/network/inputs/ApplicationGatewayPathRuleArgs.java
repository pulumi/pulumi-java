// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationGatewayPathRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayPathRuleArgs Empty = new ApplicationGatewayPathRuleArgs();

    @InputImport(name="backendAddressPool")
    private final @Nullable Input<SubResourceArgs> backendAddressPool;

    public Input<SubResourceArgs> getBackendAddressPool() {
        return this.backendAddressPool == null ? Input.empty() : this.backendAddressPool;
    }

    @InputImport(name="backendHttpSettings")
    private final @Nullable Input<SubResourceArgs> backendHttpSettings;

    public Input<SubResourceArgs> getBackendHttpSettings() {
        return this.backendHttpSettings == null ? Input.empty() : this.backendHttpSettings;
    }

    @InputImport(name="firewallPolicy")
    private final @Nullable Input<SubResourceArgs> firewallPolicy;

    public Input<SubResourceArgs> getFirewallPolicy() {
        return this.firewallPolicy == null ? Input.empty() : this.firewallPolicy;
    }

    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="paths")
    private final @Nullable Input<List<String>> paths;

    public Input<List<String>> getPaths() {
        return this.paths == null ? Input.empty() : this.paths;
    }

    @InputImport(name="redirectConfiguration")
    private final @Nullable Input<SubResourceArgs> redirectConfiguration;

    public Input<SubResourceArgs> getRedirectConfiguration() {
        return this.redirectConfiguration == null ? Input.empty() : this.redirectConfiguration;
    }

    @InputImport(name="rewriteRuleSet")
    private final @Nullable Input<SubResourceArgs> rewriteRuleSet;

    public Input<SubResourceArgs> getRewriteRuleSet() {
        return this.rewriteRuleSet == null ? Input.empty() : this.rewriteRuleSet;
    }

    public ApplicationGatewayPathRuleArgs(
        @Nullable Input<SubResourceArgs> backendAddressPool,
        @Nullable Input<SubResourceArgs> backendHttpSettings,
        @Nullable Input<SubResourceArgs> firewallPolicy,
        @Nullable Input<String> id,
        @Nullable Input<String> name,
        @Nullable Input<List<String>> paths,
        @Nullable Input<SubResourceArgs> redirectConfiguration,
        @Nullable Input<SubResourceArgs> rewriteRuleSet) {
        this.backendAddressPool = backendAddressPool;
        this.backendHttpSettings = backendHttpSettings;
        this.firewallPolicy = firewallPolicy;
        this.id = id;
        this.name = name;
        this.paths = paths;
        this.redirectConfiguration = redirectConfiguration;
        this.rewriteRuleSet = rewriteRuleSet;
    }

    private ApplicationGatewayPathRuleArgs() {
        this.backendAddressPool = Input.empty();
        this.backendHttpSettings = Input.empty();
        this.firewallPolicy = Input.empty();
        this.id = Input.empty();
        this.name = Input.empty();
        this.paths = Input.empty();
        this.redirectConfiguration = Input.empty();
        this.rewriteRuleSet = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayPathRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<SubResourceArgs> backendAddressPool;
        private @Nullable Input<SubResourceArgs> backendHttpSettings;
        private @Nullable Input<SubResourceArgs> firewallPolicy;
        private @Nullable Input<String> id;
        private @Nullable Input<String> name;
        private @Nullable Input<List<String>> paths;
        private @Nullable Input<SubResourceArgs> redirectConfiguration;
        private @Nullable Input<SubResourceArgs> rewriteRuleSet;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGatewayPathRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPool = defaults.backendAddressPool;
    	      this.backendHttpSettings = defaults.backendHttpSettings;
    	      this.firewallPolicy = defaults.firewallPolicy;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.paths = defaults.paths;
    	      this.redirectConfiguration = defaults.redirectConfiguration;
    	      this.rewriteRuleSet = defaults.rewriteRuleSet;
        }

        public Builder setBackendAddressPool(@Nullable Input<SubResourceArgs> backendAddressPool) {
            this.backendAddressPool = backendAddressPool;
            return this;
        }

        public Builder setBackendAddressPool(@Nullable SubResourceArgs backendAddressPool) {
            this.backendAddressPool = Input.ofNullable(backendAddressPool);
            return this;
        }

        public Builder setBackendHttpSettings(@Nullable Input<SubResourceArgs> backendHttpSettings) {
            this.backendHttpSettings = backendHttpSettings;
            return this;
        }

        public Builder setBackendHttpSettings(@Nullable SubResourceArgs backendHttpSettings) {
            this.backendHttpSettings = Input.ofNullable(backendHttpSettings);
            return this;
        }

        public Builder setFirewallPolicy(@Nullable Input<SubResourceArgs> firewallPolicy) {
            this.firewallPolicy = firewallPolicy;
            return this;
        }

        public Builder setFirewallPolicy(@Nullable SubResourceArgs firewallPolicy) {
            this.firewallPolicy = Input.ofNullable(firewallPolicy);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPaths(@Nullable Input<List<String>> paths) {
            this.paths = paths;
            return this;
        }

        public Builder setPaths(@Nullable List<String> paths) {
            this.paths = Input.ofNullable(paths);
            return this;
        }

        public Builder setRedirectConfiguration(@Nullable Input<SubResourceArgs> redirectConfiguration) {
            this.redirectConfiguration = redirectConfiguration;
            return this;
        }

        public Builder setRedirectConfiguration(@Nullable SubResourceArgs redirectConfiguration) {
            this.redirectConfiguration = Input.ofNullable(redirectConfiguration);
            return this;
        }

        public Builder setRewriteRuleSet(@Nullable Input<SubResourceArgs> rewriteRuleSet) {
            this.rewriteRuleSet = rewriteRuleSet;
            return this;
        }

        public Builder setRewriteRuleSet(@Nullable SubResourceArgs rewriteRuleSet) {
            this.rewriteRuleSet = Input.ofNullable(rewriteRuleSet);
            return this;
        }

        public ApplicationGatewayPathRuleArgs build() {
            return new ApplicationGatewayPathRuleArgs(backendAddressPool, backendHttpSettings, firewallPolicy, id, name, paths, redirectConfiguration, rewriteRuleSet);
        }
    }
}
