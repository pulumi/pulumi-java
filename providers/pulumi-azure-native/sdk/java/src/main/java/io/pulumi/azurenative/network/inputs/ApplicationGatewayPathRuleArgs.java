// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Path rule of URL path map of an application gateway.
 * 
 */
public final class ApplicationGatewayPathRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayPathRuleArgs Empty = new ApplicationGatewayPathRuleArgs();

    /**
     * Backend address pool resource of URL path map path rule.
     * 
     */
    @Import(name="backendAddressPool")
      private final @Nullable Output<SubResourceArgs> backendAddressPool;

    public Output<SubResourceArgs> backendAddressPool() {
        return this.backendAddressPool == null ? Codegen.empty() : this.backendAddressPool;
    }

    /**
     * Backend http settings resource of URL path map path rule.
     * 
     */
    @Import(name="backendHttpSettings")
      private final @Nullable Output<SubResourceArgs> backendHttpSettings;

    public Output<SubResourceArgs> backendHttpSettings() {
        return this.backendHttpSettings == null ? Codegen.empty() : this.backendHttpSettings;
    }

    /**
     * Reference to the FirewallPolicy resource.
     * 
     */
    @Import(name="firewallPolicy")
      private final @Nullable Output<SubResourceArgs> firewallPolicy;

    public Output<SubResourceArgs> firewallPolicy() {
        return this.firewallPolicy == null ? Codegen.empty() : this.firewallPolicy;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * Name of the path rule that is unique within an Application Gateway.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Path rules of URL path map.
     * 
     */
    @Import(name="paths")
      private final @Nullable Output<List<String>> paths;

    public Output<List<String>> paths() {
        return this.paths == null ? Codegen.empty() : this.paths;
    }

    /**
     * Redirect configuration resource of URL path map path rule.
     * 
     */
    @Import(name="redirectConfiguration")
      private final @Nullable Output<SubResourceArgs> redirectConfiguration;

    public Output<SubResourceArgs> redirectConfiguration() {
        return this.redirectConfiguration == null ? Codegen.empty() : this.redirectConfiguration;
    }

    /**
     * Rewrite rule set resource of URL path map path rule.
     * 
     */
    @Import(name="rewriteRuleSet")
      private final @Nullable Output<SubResourceArgs> rewriteRuleSet;

    public Output<SubResourceArgs> rewriteRuleSet() {
        return this.rewriteRuleSet == null ? Codegen.empty() : this.rewriteRuleSet;
    }

    public ApplicationGatewayPathRuleArgs(
        @Nullable Output<SubResourceArgs> backendAddressPool,
        @Nullable Output<SubResourceArgs> backendHttpSettings,
        @Nullable Output<SubResourceArgs> firewallPolicy,
        @Nullable Output<String> id,
        @Nullable Output<String> name,
        @Nullable Output<List<String>> paths,
        @Nullable Output<SubResourceArgs> redirectConfiguration,
        @Nullable Output<SubResourceArgs> rewriteRuleSet) {
        this.backendAddressPool = backendAddressPool;
        this.backendHttpSettings = backendHttpSettings;
        this.firewallPolicy = firewallPolicy;
        this.id = id;
        this.name = name;
        this.paths = paths;
        this.redirectConfiguration = redirectConfiguration;
        this.rewriteRuleSet = rewriteRuleSet;
    }

    private ApplicationGatewayPathRuleArgs() {
        this.backendAddressPool = Codegen.empty();
        this.backendHttpSettings = Codegen.empty();
        this.firewallPolicy = Codegen.empty();
        this.id = Codegen.empty();
        this.name = Codegen.empty();
        this.paths = Codegen.empty();
        this.redirectConfiguration = Codegen.empty();
        this.rewriteRuleSet = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayPathRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<SubResourceArgs> backendAddressPool;
        private @Nullable Output<SubResourceArgs> backendHttpSettings;
        private @Nullable Output<SubResourceArgs> firewallPolicy;
        private @Nullable Output<String> id;
        private @Nullable Output<String> name;
        private @Nullable Output<List<String>> paths;
        private @Nullable Output<SubResourceArgs> redirectConfiguration;
        private @Nullable Output<SubResourceArgs> rewriteRuleSet;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGatewayPathRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPool = defaults.backendAddressPool;
    	      this.backendHttpSettings = defaults.backendHttpSettings;
    	      this.firewallPolicy = defaults.firewallPolicy;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.paths = defaults.paths;
    	      this.redirectConfiguration = defaults.redirectConfiguration;
    	      this.rewriteRuleSet = defaults.rewriteRuleSet;
        }

        public Builder backendAddressPool(@Nullable Output<SubResourceArgs> backendAddressPool) {
            this.backendAddressPool = backendAddressPool;
            return this;
        }
        public Builder backendAddressPool(@Nullable SubResourceArgs backendAddressPool) {
            this.backendAddressPool = Codegen.ofNullable(backendAddressPool);
            return this;
        }
        public Builder backendHttpSettings(@Nullable Output<SubResourceArgs> backendHttpSettings) {
            this.backendHttpSettings = backendHttpSettings;
            return this;
        }
        public Builder backendHttpSettings(@Nullable SubResourceArgs backendHttpSettings) {
            this.backendHttpSettings = Codegen.ofNullable(backendHttpSettings);
            return this;
        }
        public Builder firewallPolicy(@Nullable Output<SubResourceArgs> firewallPolicy) {
            this.firewallPolicy = firewallPolicy;
            return this;
        }
        public Builder firewallPolicy(@Nullable SubResourceArgs firewallPolicy) {
            this.firewallPolicy = Codegen.ofNullable(firewallPolicy);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder paths(@Nullable Output<List<String>> paths) {
            this.paths = paths;
            return this;
        }
        public Builder paths(@Nullable List<String> paths) {
            this.paths = Codegen.ofNullable(paths);
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        public Builder redirectConfiguration(@Nullable Output<SubResourceArgs> redirectConfiguration) {
            this.redirectConfiguration = redirectConfiguration;
            return this;
        }
        public Builder redirectConfiguration(@Nullable SubResourceArgs redirectConfiguration) {
            this.redirectConfiguration = Codegen.ofNullable(redirectConfiguration);
            return this;
        }
        public Builder rewriteRuleSet(@Nullable Output<SubResourceArgs> rewriteRuleSet) {
            this.rewriteRuleSet = rewriteRuleSet;
            return this;
        }
        public Builder rewriteRuleSet(@Nullable SubResourceArgs rewriteRuleSet) {
            this.rewriteRuleSet = Codegen.ofNullable(rewriteRuleSet);
            return this;
        }        public ApplicationGatewayPathRuleArgs build() {
            return new ApplicationGatewayPathRuleArgs(backendAddressPool, backendHttpSettings, firewallPolicy, id, name, paths, redirectConfiguration, rewriteRuleSet);
        }
    }
}
