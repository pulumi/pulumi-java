// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.chaos.inputs;

import io.pulumi.azurenative.chaos.enums.SelectorType;
import io.pulumi.azurenative.chaos.inputs.TargetReferenceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Model that represents a selector in the Experiment resource.
 * 
 */
public final class SelectorArgs extends io.pulumi.resources.ResourceArgs {

    public static final SelectorArgs Empty = new SelectorArgs();

    /**
     * String of the selector ID.
     * 
     */
    @Import(name="id", required=true)
      private final Output<String> id;

    public Output<String> getId() {
        return this.id;
    }

    /**
     * List of Target references.
     * 
     */
    @Import(name="targets", required=true)
      private final Output<List<TargetReferenceArgs>> targets;

    public Output<List<TargetReferenceArgs>> getTargets() {
        return this.targets;
    }

    /**
     * Enum of the selector type.
     * 
     */
    @Import(name="type", required=true)
      private final Output<SelectorType> type;

    public Output<SelectorType> getType() {
        return this.type;
    }

    public SelectorArgs(
        Output<String> id,
        Output<List<TargetReferenceArgs>> targets,
        Output<SelectorType> type) {
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.targets = Objects.requireNonNull(targets, "expected parameter 'targets' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private SelectorArgs() {
        this.id = Output.empty();
        this.targets = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SelectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> id;
        private Output<List<TargetReferenceArgs>> targets;
        private Output<SelectorType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(SelectorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.targets = defaults.targets;
    	      this.type = defaults.type;
        }

        public Builder id(Output<String> id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder id(String id) {
            this.id = Output.of(Objects.requireNonNull(id));
            return this;
        }
        public Builder targets(Output<List<TargetReferenceArgs>> targets) {
            this.targets = Objects.requireNonNull(targets);
            return this;
        }
        public Builder targets(List<TargetReferenceArgs> targets) {
            this.targets = Output.of(Objects.requireNonNull(targets));
            return this;
        }
        public Builder targets(TargetReferenceArgs... targets) {
            return targets(List.of(targets));
        }
        public Builder type(Output<SelectorType> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(SelectorType type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public SelectorArgs build() {
            return new SelectorArgs(id, targets, type);
        }
    }
}
