// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.windowsesu;

import io.pulumi.azurenative.windowsesu.enums.OsType;
import io.pulumi.azurenative.windowsesu.enums.SupportType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MultipleActivationKeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final MultipleActivationKeyArgs Empty = new MultipleActivationKeyArgs();

    /**
     * Agreement number under which the key is requested.
     * 
     */
    @InputImport(name="agreementNumber")
    private final @Nullable Input<String> agreementNumber;

    public Input<String> getAgreementNumber() {
        return this.agreementNumber == null ? Input.empty() : this.agreementNumber;
    }

    /**
     * Number of activations/servers using the MAK key.
     * 
     */
    @InputImport(name="installedServerNumber")
    private final @Nullable Input<Integer> installedServerNumber;

    public Input<Integer> getInstalledServerNumber() {
        return this.installedServerNumber == null ? Input.empty() : this.installedServerNumber;
    }

    /**
     * <code> true </code> if user has eligible on-premises Windows physical or virtual machines, and that the requested key will only be used in their organization; <code> false </code> otherwise.
     * 
     */
    @InputImport(name="isEligible")
    private final @Nullable Input<Boolean> isEligible;

    public Input<Boolean> getIsEligible() {
        return this.isEligible == null ? Input.empty() : this.isEligible;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the MAK key.
     * 
     */
    @InputImport(name="multipleActivationKeyName")
    private final @Nullable Input<String> multipleActivationKeyName;

    public Input<String> getMultipleActivationKeyName() {
        return this.multipleActivationKeyName == null ? Input.empty() : this.multipleActivationKeyName;
    }

    /**
     * Type of OS for which the key is requested.
     * 
     */
    @InputImport(name="osType")
    private final @Nullable Input<Either<String,OsType>> osType;

    public Input<Either<String,OsType>> getOsType() {
        return this.osType == null ? Input.empty() : this.osType;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Type of support
     * 
     */
    @InputImport(name="supportType")
    private final @Nullable Input<Either<String,SupportType>> supportType;

    public Input<Either<String,SupportType>> getSupportType() {
        return this.supportType == null ? Input.empty() : this.supportType;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public MultipleActivationKeyArgs(
        @Nullable Input<String> agreementNumber,
        @Nullable Input<Integer> installedServerNumber,
        @Nullable Input<Boolean> isEligible,
        @Nullable Input<String> location,
        @Nullable Input<String> multipleActivationKeyName,
        @Nullable Input<Either<String,OsType>> osType,
        Input<String> resourceGroupName,
        @Nullable Input<Either<String,SupportType>> supportType,
        @Nullable Input<Map<String,String>> tags) {
        this.agreementNumber = agreementNumber;
        this.installedServerNumber = installedServerNumber;
        this.isEligible = isEligible;
        this.location = location;
        this.multipleActivationKeyName = multipleActivationKeyName;
        this.osType = osType;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.supportType = supportType == null ? Input.ofLeft("SupplementalServicing") : supportType;
        this.tags = tags;
    }

    private MultipleActivationKeyArgs() {
        this.agreementNumber = Input.empty();
        this.installedServerNumber = Input.empty();
        this.isEligible = Input.empty();
        this.location = Input.empty();
        this.multipleActivationKeyName = Input.empty();
        this.osType = Input.empty();
        this.resourceGroupName = Input.empty();
        this.supportType = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MultipleActivationKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> agreementNumber;
        private @Nullable Input<Integer> installedServerNumber;
        private @Nullable Input<Boolean> isEligible;
        private @Nullable Input<String> location;
        private @Nullable Input<String> multipleActivationKeyName;
        private @Nullable Input<Either<String,OsType>> osType;
        private Input<String> resourceGroupName;
        private @Nullable Input<Either<String,SupportType>> supportType;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(MultipleActivationKeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agreementNumber = defaults.agreementNumber;
    	      this.installedServerNumber = defaults.installedServerNumber;
    	      this.isEligible = defaults.isEligible;
    	      this.location = defaults.location;
    	      this.multipleActivationKeyName = defaults.multipleActivationKeyName;
    	      this.osType = defaults.osType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.supportType = defaults.supportType;
    	      this.tags = defaults.tags;
        }

        public Builder setAgreementNumber(@Nullable Input<String> agreementNumber) {
            this.agreementNumber = agreementNumber;
            return this;
        }

        public Builder setAgreementNumber(@Nullable String agreementNumber) {
            this.agreementNumber = Input.ofNullable(agreementNumber);
            return this;
        }

        public Builder setInstalledServerNumber(@Nullable Input<Integer> installedServerNumber) {
            this.installedServerNumber = installedServerNumber;
            return this;
        }

        public Builder setInstalledServerNumber(@Nullable Integer installedServerNumber) {
            this.installedServerNumber = Input.ofNullable(installedServerNumber);
            return this;
        }

        public Builder setIsEligible(@Nullable Input<Boolean> isEligible) {
            this.isEligible = isEligible;
            return this;
        }

        public Builder setIsEligible(@Nullable Boolean isEligible) {
            this.isEligible = Input.ofNullable(isEligible);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMultipleActivationKeyName(@Nullable Input<String> multipleActivationKeyName) {
            this.multipleActivationKeyName = multipleActivationKeyName;
            return this;
        }

        public Builder setMultipleActivationKeyName(@Nullable String multipleActivationKeyName) {
            this.multipleActivationKeyName = Input.ofNullable(multipleActivationKeyName);
            return this;
        }

        public Builder setOsType(@Nullable Input<Either<String,OsType>> osType) {
            this.osType = osType;
            return this;
        }

        public Builder setOsType(@Nullable Either<String,OsType> osType) {
            this.osType = Input.ofNullable(osType);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSupportType(@Nullable Input<Either<String,SupportType>> supportType) {
            this.supportType = supportType;
            return this;
        }

        public Builder setSupportType(@Nullable Either<String,SupportType> supportType) {
            this.supportType = Input.ofNullable(supportType);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public MultipleActivationKeyArgs build() {
            return new MultipleActivationKeyArgs(agreementNumber, installedServerNumber, isEligible, location, multipleActivationKeyName, osType, resourceGroupName, supportType, tags);
        }
    }
}
