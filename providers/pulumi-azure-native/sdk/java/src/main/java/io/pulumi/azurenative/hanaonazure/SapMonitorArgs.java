// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.hanaonazure;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SapMonitorArgs extends io.pulumi.resources.ResourceArgs {

    public static final SapMonitorArgs Empty = new SapMonitorArgs();

    /**
     * The value indicating whether to send analytics to Microsoft
     * 
     */
    @InputImport(name="enableCustomerAnalytics")
        private final @Nullable Input<Boolean> enableCustomerAnalytics;

    public Input<Boolean> getEnableCustomerAnalytics() {
        return this.enableCustomerAnalytics == null ? Input.empty() : this.enableCustomerAnalytics;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @InputImport(name="location")
        private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The ARM ID of the Log Analytics Workspace that is used for monitoring
     * 
     */
    @InputImport(name="logAnalyticsWorkspaceArmId")
        private final @Nullable Input<String> logAnalyticsWorkspaceArmId;

    public Input<String> getLogAnalyticsWorkspaceArmId() {
        return this.logAnalyticsWorkspaceArmId == null ? Input.empty() : this.logAnalyticsWorkspaceArmId;
    }

    /**
     * The workspace ID of the log analytics workspace to be used for monitoring
     * 
     */
    @InputImport(name="logAnalyticsWorkspaceId")
        private final @Nullable Input<String> logAnalyticsWorkspaceId;

    public Input<String> getLogAnalyticsWorkspaceId() {
        return this.logAnalyticsWorkspaceId == null ? Input.empty() : this.logAnalyticsWorkspaceId;
    }

    /**
     * The shared key of the log analytics workspace that is used for monitoring
     * 
     */
    @InputImport(name="logAnalyticsWorkspaceSharedKey")
        private final @Nullable Input<String> logAnalyticsWorkspaceSharedKey;

    public Input<String> getLogAnalyticsWorkspaceSharedKey() {
        return this.logAnalyticsWorkspaceSharedKey == null ? Input.empty() : this.logAnalyticsWorkspaceSharedKey;
    }

    /**
     * The subnet which the SAP monitor will be deployed in
     * 
     */
    @InputImport(name="monitorSubnet")
        private final @Nullable Input<String> monitorSubnet;

    public Input<String> getMonitorSubnet() {
        return this.monitorSubnet == null ? Input.empty() : this.monitorSubnet;
    }

    /**
     * Name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the SAP monitor resource.
     * 
     */
    @InputImport(name="sapMonitorName")
        private final @Nullable Input<String> sapMonitorName;

    public Input<String> getSapMonitorName() {
        return this.sapMonitorName == null ? Input.empty() : this.sapMonitorName;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
        private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public SapMonitorArgs(
        @Nullable Input<Boolean> enableCustomerAnalytics,
        @Nullable Input<String> location,
        @Nullable Input<String> logAnalyticsWorkspaceArmId,
        @Nullable Input<String> logAnalyticsWorkspaceId,
        @Nullable Input<String> logAnalyticsWorkspaceSharedKey,
        @Nullable Input<String> monitorSubnet,
        Input<String> resourceGroupName,
        @Nullable Input<String> sapMonitorName,
        @Nullable Input<Map<String,String>> tags) {
        this.enableCustomerAnalytics = enableCustomerAnalytics;
        this.location = location;
        this.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
        this.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
        this.logAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
        this.monitorSubnet = monitorSubnet;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sapMonitorName = sapMonitorName;
        this.tags = tags;
    }

    private SapMonitorArgs() {
        this.enableCustomerAnalytics = Input.empty();
        this.location = Input.empty();
        this.logAnalyticsWorkspaceArmId = Input.empty();
        this.logAnalyticsWorkspaceId = Input.empty();
        this.logAnalyticsWorkspaceSharedKey = Input.empty();
        this.monitorSubnet = Input.empty();
        this.resourceGroupName = Input.empty();
        this.sapMonitorName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SapMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> enableCustomerAnalytics;
        private @Nullable Input<String> location;
        private @Nullable Input<String> logAnalyticsWorkspaceArmId;
        private @Nullable Input<String> logAnalyticsWorkspaceId;
        private @Nullable Input<String> logAnalyticsWorkspaceSharedKey;
        private @Nullable Input<String> monitorSubnet;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> sapMonitorName;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(SapMonitorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableCustomerAnalytics = defaults.enableCustomerAnalytics;
    	      this.location = defaults.location;
    	      this.logAnalyticsWorkspaceArmId = defaults.logAnalyticsWorkspaceArmId;
    	      this.logAnalyticsWorkspaceId = defaults.logAnalyticsWorkspaceId;
    	      this.logAnalyticsWorkspaceSharedKey = defaults.logAnalyticsWorkspaceSharedKey;
    	      this.monitorSubnet = defaults.monitorSubnet;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sapMonitorName = defaults.sapMonitorName;
    	      this.tags = defaults.tags;
        }

        public Builder setEnableCustomerAnalytics(@Nullable Input<Boolean> enableCustomerAnalytics) {
            this.enableCustomerAnalytics = enableCustomerAnalytics;
            return this;
        }

        public Builder setEnableCustomerAnalytics(@Nullable Boolean enableCustomerAnalytics) {
            this.enableCustomerAnalytics = Input.ofNullable(enableCustomerAnalytics);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setLogAnalyticsWorkspaceArmId(@Nullable Input<String> logAnalyticsWorkspaceArmId) {
            this.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
            return this;
        }

        public Builder setLogAnalyticsWorkspaceArmId(@Nullable String logAnalyticsWorkspaceArmId) {
            this.logAnalyticsWorkspaceArmId = Input.ofNullable(logAnalyticsWorkspaceArmId);
            return this;
        }

        public Builder setLogAnalyticsWorkspaceId(@Nullable Input<String> logAnalyticsWorkspaceId) {
            this.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
            return this;
        }

        public Builder setLogAnalyticsWorkspaceId(@Nullable String logAnalyticsWorkspaceId) {
            this.logAnalyticsWorkspaceId = Input.ofNullable(logAnalyticsWorkspaceId);
            return this;
        }

        public Builder setLogAnalyticsWorkspaceSharedKey(@Nullable Input<String> logAnalyticsWorkspaceSharedKey) {
            this.logAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
            return this;
        }

        public Builder setLogAnalyticsWorkspaceSharedKey(@Nullable String logAnalyticsWorkspaceSharedKey) {
            this.logAnalyticsWorkspaceSharedKey = Input.ofNullable(logAnalyticsWorkspaceSharedKey);
            return this;
        }

        public Builder setMonitorSubnet(@Nullable Input<String> monitorSubnet) {
            this.monitorSubnet = monitorSubnet;
            return this;
        }

        public Builder setMonitorSubnet(@Nullable String monitorSubnet) {
            this.monitorSubnet = Input.ofNullable(monitorSubnet);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSapMonitorName(@Nullable Input<String> sapMonitorName) {
            this.sapMonitorName = sapMonitorName;
            return this;
        }

        public Builder setSapMonitorName(@Nullable String sapMonitorName) {
            this.sapMonitorName = Input.ofNullable(sapMonitorName);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public SapMonitorArgs build() {
            return new SapMonitorArgs(enableCustomerAnalytics, location, logAnalyticsWorkspaceArmId, logAnalyticsWorkspaceId, logAnalyticsWorkspaceSharedKey, monitorSubnet, resourceGroupName, sapMonitorName, tags);
        }
    }
}
