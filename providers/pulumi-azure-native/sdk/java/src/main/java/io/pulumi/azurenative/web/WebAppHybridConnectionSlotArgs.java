// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WebAppHybridConnectionSlotArgs extends io.pulumi.resources.ResourceArgs {

    public static final WebAppHybridConnectionSlotArgs Empty = new WebAppHybridConnectionSlotArgs();

    /**
     * The hostname of the endpoint.
     * 
     */
    @InputImport(name="hostname")
      private final @Nullable Output<String> hostname;

    public Output<String> getHostname() {
        return this.hostname == null ? Output.empty() : this.hostname;
    }

    /**
     * Kind of resource.
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * The name of the web app.
     * 
     */
    @InputImport(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * The namespace for this hybrid connection.
     * 
     */
    @InputImport(name="namespaceName", required=true)
      private final Output<String> namespaceName;

    public Output<String> getNamespaceName() {
        return this.namespaceName;
    }

    /**
     * The port of the endpoint.
     * 
     */
    @InputImport(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    /**
     * The ARM URI to the Service Bus relay.
     * 
     */
    @InputImport(name="relayArmUri")
      private final @Nullable Output<String> relayArmUri;

    public Output<String> getRelayArmUri() {
        return this.relayArmUri == null ? Output.empty() : this.relayArmUri;
    }

    /**
     * The name of the Service Bus relay.
     * 
     */
    @InputImport(name="relayName")
      private final @Nullable Output<String> relayName;

    public Output<String> getRelayName() {
        return this.relayName == null ? Output.empty() : this.relayName;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.
     * 
     */
    @InputImport(name="sendKeyName")
      private final @Nullable Output<String> sendKeyName;

    public Output<String> getSendKeyName() {
        return this.sendKeyName == null ? Output.empty() : this.sendKeyName;
    }

    /**
     * The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned
     * normally, use the POST /listKeys API instead.
     * 
     */
    @InputImport(name="sendKeyValue")
      private final @Nullable Output<String> sendKeyValue;

    public Output<String> getSendKeyValue() {
        return this.sendKeyValue == null ? Output.empty() : this.sendKeyValue;
    }

    /**
     * The name of the Service Bus namespace.
     * 
     */
    @InputImport(name="serviceBusNamespace")
      private final @Nullable Output<String> serviceBusNamespace;

    public Output<String> getServiceBusNamespace() {
        return this.serviceBusNamespace == null ? Output.empty() : this.serviceBusNamespace;
    }

    /**
     * The suffix for the service bus endpoint. By default this is .servicebus.windows.net
     * 
     */
    @InputImport(name="serviceBusSuffix")
      private final @Nullable Output<String> serviceBusSuffix;

    public Output<String> getServiceBusSuffix() {
        return this.serviceBusSuffix == null ? Output.empty() : this.serviceBusSuffix;
    }

    /**
     * The name of the slot for the web app.
     * 
     */
    @InputImport(name="slot", required=true)
      private final Output<String> slot;

    public Output<String> getSlot() {
        return this.slot;
    }

    public WebAppHybridConnectionSlotArgs(
        @Nullable Output<String> hostname,
        @Nullable Output<String> kind,
        Output<String> name,
        Output<String> namespaceName,
        @Nullable Output<Integer> port,
        @Nullable Output<String> relayArmUri,
        @Nullable Output<String> relayName,
        Output<String> resourceGroupName,
        @Nullable Output<String> sendKeyName,
        @Nullable Output<String> sendKeyValue,
        @Nullable Output<String> serviceBusNamespace,
        @Nullable Output<String> serviceBusSuffix,
        Output<String> slot) {
        this.hostname = hostname;
        this.kind = kind;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.namespaceName = Objects.requireNonNull(namespaceName, "expected parameter 'namespaceName' to be non-null");
        this.port = port;
        this.relayArmUri = relayArmUri;
        this.relayName = relayName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sendKeyName = sendKeyName;
        this.sendKeyValue = sendKeyValue;
        this.serviceBusNamespace = serviceBusNamespace;
        this.serviceBusSuffix = serviceBusSuffix;
        this.slot = Objects.requireNonNull(slot, "expected parameter 'slot' to be non-null");
    }

    private WebAppHybridConnectionSlotArgs() {
        this.hostname = Output.empty();
        this.kind = Output.empty();
        this.name = Output.empty();
        this.namespaceName = Output.empty();
        this.port = Output.empty();
        this.relayArmUri = Output.empty();
        this.relayName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.sendKeyName = Output.empty();
        this.sendKeyValue = Output.empty();
        this.serviceBusNamespace = Output.empty();
        this.serviceBusSuffix = Output.empty();
        this.slot = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAppHybridConnectionSlotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> hostname;
        private @Nullable Output<String> kind;
        private Output<String> name;
        private Output<String> namespaceName;
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> relayArmUri;
        private @Nullable Output<String> relayName;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> sendKeyName;
        private @Nullable Output<String> sendKeyValue;
        private @Nullable Output<String> serviceBusNamespace;
        private @Nullable Output<String> serviceBusSuffix;
        private Output<String> slot;

        public Builder() {
    	      // Empty
        }

        public Builder(WebAppHybridConnectionSlotArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostname = defaults.hostname;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.namespaceName = defaults.namespaceName;
    	      this.port = defaults.port;
    	      this.relayArmUri = defaults.relayArmUri;
    	      this.relayName = defaults.relayName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sendKeyName = defaults.sendKeyName;
    	      this.sendKeyValue = defaults.sendKeyValue;
    	      this.serviceBusNamespace = defaults.serviceBusNamespace;
    	      this.serviceBusSuffix = defaults.serviceBusSuffix;
    	      this.slot = defaults.slot;
        }

        public Builder hostname(@Nullable Output<String> hostname) {
            this.hostname = hostname;
            return this;
        }

        public Builder hostname(@Nullable String hostname) {
            this.hostname = Output.ofNullable(hostname);
            return this;
        }

        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder namespaceName(Output<String> namespaceName) {
            this.namespaceName = Objects.requireNonNull(namespaceName);
            return this;
        }

        public Builder namespaceName(String namespaceName) {
            this.namespaceName = Output.of(Objects.requireNonNull(namespaceName));
            return this;
        }

        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }

        public Builder relayArmUri(@Nullable Output<String> relayArmUri) {
            this.relayArmUri = relayArmUri;
            return this;
        }

        public Builder relayArmUri(@Nullable String relayArmUri) {
            this.relayArmUri = Output.ofNullable(relayArmUri);
            return this;
        }

        public Builder relayName(@Nullable Output<String> relayName) {
            this.relayName = relayName;
            return this;
        }

        public Builder relayName(@Nullable String relayName) {
            this.relayName = Output.ofNullable(relayName);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder sendKeyName(@Nullable Output<String> sendKeyName) {
            this.sendKeyName = sendKeyName;
            return this;
        }

        public Builder sendKeyName(@Nullable String sendKeyName) {
            this.sendKeyName = Output.ofNullable(sendKeyName);
            return this;
        }

        public Builder sendKeyValue(@Nullable Output<String> sendKeyValue) {
            this.sendKeyValue = sendKeyValue;
            return this;
        }

        public Builder sendKeyValue(@Nullable String sendKeyValue) {
            this.sendKeyValue = Output.ofNullable(sendKeyValue);
            return this;
        }

        public Builder serviceBusNamespace(@Nullable Output<String> serviceBusNamespace) {
            this.serviceBusNamespace = serviceBusNamespace;
            return this;
        }

        public Builder serviceBusNamespace(@Nullable String serviceBusNamespace) {
            this.serviceBusNamespace = Output.ofNullable(serviceBusNamespace);
            return this;
        }

        public Builder serviceBusSuffix(@Nullable Output<String> serviceBusSuffix) {
            this.serviceBusSuffix = serviceBusSuffix;
            return this;
        }

        public Builder serviceBusSuffix(@Nullable String serviceBusSuffix) {
            this.serviceBusSuffix = Output.ofNullable(serviceBusSuffix);
            return this;
        }

        public Builder slot(Output<String> slot) {
            this.slot = Objects.requireNonNull(slot);
            return this;
        }

        public Builder slot(String slot) {
            this.slot = Output.of(Objects.requireNonNull(slot));
            return this;
        }
        public WebAppHybridConnectionSlotArgs build() {
            return new WebAppHybridConnectionSlotArgs(hostname, kind, name, namespaceName, port, relayArmUri, relayName, resourceGroupName, sendKeyName, sendKeyValue, serviceBusNamespace, serviceBusSuffix, slot);
        }
    }
}
