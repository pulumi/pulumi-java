// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies settings related to VM Guest Patching on Windows.
 * 
 */
public final class PatchSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final PatchSettingsResponse Empty = new PatchSettingsResponse();

    /**
     * Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
     * 
     */
    @InputImport(name="assessmentMode")
    private final @Nullable String assessmentMode;

    public Optional<String> getAssessmentMode() {
        return this.assessmentMode == null ? Optional.empty() : Optional.ofNullable(this.assessmentMode);
    }

    /**
     * Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
     * 
     */
    @InputImport(name="enableHotpatching")
    private final @Nullable Boolean enableHotpatching;

    public Optional<Boolean> getEnableHotpatching() {
        return this.enableHotpatching == null ? Optional.empty() : Optional.ofNullable(this.enableHotpatching);
    }

    /**
     * Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
     * 
     */
    @InputImport(name="patchMode")
    private final @Nullable String patchMode;

    public Optional<String> getPatchMode() {
        return this.patchMode == null ? Optional.empty() : Optional.ofNullable(this.patchMode);
    }

    public PatchSettingsResponse(
        @Nullable String assessmentMode,
        @Nullable Boolean enableHotpatching,
        @Nullable String patchMode) {
        this.assessmentMode = assessmentMode;
        this.enableHotpatching = enableHotpatching;
        this.patchMode = patchMode;
    }

    private PatchSettingsResponse() {
        this.assessmentMode = null;
        this.enableHotpatching = null;
        this.patchMode = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PatchSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String assessmentMode;
        private @Nullable Boolean enableHotpatching;
        private @Nullable String patchMode;

        public Builder() {
    	      // Empty
        }

        public Builder(PatchSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assessmentMode = defaults.assessmentMode;
    	      this.enableHotpatching = defaults.enableHotpatching;
    	      this.patchMode = defaults.patchMode;
        }

        public Builder setAssessmentMode(@Nullable String assessmentMode) {
            this.assessmentMode = assessmentMode;
            return this;
        }

        public Builder setEnableHotpatching(@Nullable Boolean enableHotpatching) {
            this.enableHotpatching = enableHotpatching;
            return this;
        }

        public Builder setPatchMode(@Nullable String patchMode) {
            this.patchMode = patchMode;
            return this;
        }

        public PatchSettingsResponse build() {
            return new PatchSettingsResponse(assessmentMode, enableHotpatching, patchMode);
        }
    }
}
