// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.loadtestservice.inputs;

import io.pulumi.azurenative.loadtestservice.enums.SystemAssignedServiceIdentityType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class SystemAssignedServiceIdentityArgs extends io.pulumi.resources.ResourceArgs {

    public static final SystemAssignedServiceIdentityArgs Empty = new SystemAssignedServiceIdentityArgs();

    @InputImport(name="type", required=true)
    private final Input<Either<String,SystemAssignedServiceIdentityType>> type;

    public Input<Either<String,SystemAssignedServiceIdentityType>> getType() {
        return this.type;
    }

    public SystemAssignedServiceIdentityArgs(Input<Either<String,SystemAssignedServiceIdentityType>> type) {
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private SystemAssignedServiceIdentityArgs() {
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SystemAssignedServiceIdentityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Either<String,SystemAssignedServiceIdentityType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(SystemAssignedServiceIdentityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.type = defaults.type;
        }

        public Builder setType(Input<Either<String,SystemAssignedServiceIdentityType>> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(Either<String,SystemAssignedServiceIdentityType> type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public SystemAssignedServiceIdentityArgs build() {
            return new SystemAssignedServiceIdentityArgs(type);
        }
    }
}
