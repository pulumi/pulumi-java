// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The main origin of CDN content which is added when creating a CDN endpoint.
 * 
 */
public final class DeepCreatedOriginArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeepCreatedOriginArgs Empty = new DeepCreatedOriginArgs();

    /**
     * Origin is enabled for load balancing or not. By default, origin is always enabled.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Codegen.empty() : this.enabled;
    }

    /**
     * The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique across all origins in an endpoint.
     * 
     */
    @Import(name="hostName", required=true)
      private final Output<String> hostName;

    public Output<String> getHostName() {
        return this.hostName;
    }

    /**
     * The value of the HTTP port. Must be between 1 and 65535.
     * 
     */
    @Import(name="httpPort")
      private final @Nullable Output<Integer> httpPort;

    public Output<Integer> getHttpPort() {
        return this.httpPort == null ? Codegen.empty() : this.httpPort;
    }

    /**
     * The value of the HTTPS port. Must be between 1 and 65535.
     * 
     */
    @Import(name="httpsPort")
      private final @Nullable Output<Integer> httpsPort;

    public Output<Integer> getHttpsPort() {
        return this.httpsPort == null ? Codegen.empty() : this.httpsPort;
    }

    /**
     * Origin name which must be unique within the endpoint.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
     * 
     */
    @Import(name="originHostHeader")
      private final @Nullable Output<String> originHostHeader;

    public Output<String> getOriginHostHeader() {
        return this.originHostHeader == null ? Codegen.empty() : this.originHostHeader;
    }

    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5.
     * 
     */
    @Import(name="priority")
      private final @Nullable Output<Integer> priority;

    public Output<Integer> getPriority() {
        return this.priority == null ? Codegen.empty() : this.priority;
    }

    /**
     * The Alias of the Private Link resource. Populating this optional field indicates that this origin is 'Private'
     * 
     */
    @Import(name="privateLinkAlias")
      private final @Nullable Output<String> privateLinkAlias;

    public Output<String> getPrivateLinkAlias() {
        return this.privateLinkAlias == null ? Codegen.empty() : this.privateLinkAlias;
    }

    /**
     * A custom message to be included in the approval request to connect to the Private Link.
     * 
     */
    @Import(name="privateLinkApprovalMessage")
      private final @Nullable Output<String> privateLinkApprovalMessage;

    public Output<String> getPrivateLinkApprovalMessage() {
        return this.privateLinkApprovalMessage == null ? Codegen.empty() : this.privateLinkApprovalMessage;
    }

    /**
     * The location of the Private Link resource. Required only if 'privateLinkResourceId' is populated
     * 
     */
    @Import(name="privateLinkLocation")
      private final @Nullable Output<String> privateLinkLocation;

    public Output<String> getPrivateLinkLocation() {
        return this.privateLinkLocation == null ? Codegen.empty() : this.privateLinkLocation;
    }

    /**
     * The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
     * 
     */
    @Import(name="privateLinkResourceId")
      private final @Nullable Output<String> privateLinkResourceId;

    public Output<String> getPrivateLinkResourceId() {
        return this.privateLinkResourceId == null ? Codegen.empty() : this.privateLinkResourceId;
    }

    /**
     * Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
     * 
     */
    @Import(name="weight")
      private final @Nullable Output<Integer> weight;

    public Output<Integer> getWeight() {
        return this.weight == null ? Codegen.empty() : this.weight;
    }

    public DeepCreatedOriginArgs(
        @Nullable Output<Boolean> enabled,
        Output<String> hostName,
        @Nullable Output<Integer> httpPort,
        @Nullable Output<Integer> httpsPort,
        Output<String> name,
        @Nullable Output<String> originHostHeader,
        @Nullable Output<Integer> priority,
        @Nullable Output<String> privateLinkAlias,
        @Nullable Output<String> privateLinkApprovalMessage,
        @Nullable Output<String> privateLinkLocation,
        @Nullable Output<String> privateLinkResourceId,
        @Nullable Output<Integer> weight) {
        this.enabled = enabled;
        this.hostName = Objects.requireNonNull(hostName, "expected parameter 'hostName' to be non-null");
        this.httpPort = httpPort;
        this.httpsPort = httpsPort;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.originHostHeader = originHostHeader;
        this.priority = priority;
        this.privateLinkAlias = privateLinkAlias;
        this.privateLinkApprovalMessage = privateLinkApprovalMessage;
        this.privateLinkLocation = privateLinkLocation;
        this.privateLinkResourceId = privateLinkResourceId;
        this.weight = weight;
    }

    private DeepCreatedOriginArgs() {
        this.enabled = Codegen.empty();
        this.hostName = Codegen.empty();
        this.httpPort = Codegen.empty();
        this.httpsPort = Codegen.empty();
        this.name = Codegen.empty();
        this.originHostHeader = Codegen.empty();
        this.priority = Codegen.empty();
        this.privateLinkAlias = Codegen.empty();
        this.privateLinkApprovalMessage = Codegen.empty();
        this.privateLinkLocation = Codegen.empty();
        this.privateLinkResourceId = Codegen.empty();
        this.weight = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeepCreatedOriginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> enabled;
        private Output<String> hostName;
        private @Nullable Output<Integer> httpPort;
        private @Nullable Output<Integer> httpsPort;
        private Output<String> name;
        private @Nullable Output<String> originHostHeader;
        private @Nullable Output<Integer> priority;
        private @Nullable Output<String> privateLinkAlias;
        private @Nullable Output<String> privateLinkApprovalMessage;
        private @Nullable Output<String> privateLinkLocation;
        private @Nullable Output<String> privateLinkResourceId;
        private @Nullable Output<Integer> weight;

        public Builder() {
    	      // Empty
        }

        public Builder(DeepCreatedOriginArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.hostName = defaults.hostName;
    	      this.httpPort = defaults.httpPort;
    	      this.httpsPort = defaults.httpsPort;
    	      this.name = defaults.name;
    	      this.originHostHeader = defaults.originHostHeader;
    	      this.priority = defaults.priority;
    	      this.privateLinkAlias = defaults.privateLinkAlias;
    	      this.privateLinkApprovalMessage = defaults.privateLinkApprovalMessage;
    	      this.privateLinkLocation = defaults.privateLinkLocation;
    	      this.privateLinkResourceId = defaults.privateLinkResourceId;
    	      this.weight = defaults.weight;
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Codegen.ofNullable(enabled);
            return this;
        }
        public Builder hostName(Output<String> hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        public Builder hostName(String hostName) {
            this.hostName = Output.of(Objects.requireNonNull(hostName));
            return this;
        }
        public Builder httpPort(@Nullable Output<Integer> httpPort) {
            this.httpPort = httpPort;
            return this;
        }
        public Builder httpPort(@Nullable Integer httpPort) {
            this.httpPort = Codegen.ofNullable(httpPort);
            return this;
        }
        public Builder httpsPort(@Nullable Output<Integer> httpsPort) {
            this.httpsPort = httpsPort;
            return this;
        }
        public Builder httpsPort(@Nullable Integer httpsPort) {
            this.httpsPort = Codegen.ofNullable(httpsPort);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder originHostHeader(@Nullable Output<String> originHostHeader) {
            this.originHostHeader = originHostHeader;
            return this;
        }
        public Builder originHostHeader(@Nullable String originHostHeader) {
            this.originHostHeader = Codegen.ofNullable(originHostHeader);
            return this;
        }
        public Builder priority(@Nullable Output<Integer> priority) {
            this.priority = priority;
            return this;
        }
        public Builder priority(@Nullable Integer priority) {
            this.priority = Codegen.ofNullable(priority);
            return this;
        }
        public Builder privateLinkAlias(@Nullable Output<String> privateLinkAlias) {
            this.privateLinkAlias = privateLinkAlias;
            return this;
        }
        public Builder privateLinkAlias(@Nullable String privateLinkAlias) {
            this.privateLinkAlias = Codegen.ofNullable(privateLinkAlias);
            return this;
        }
        public Builder privateLinkApprovalMessage(@Nullable Output<String> privateLinkApprovalMessage) {
            this.privateLinkApprovalMessage = privateLinkApprovalMessage;
            return this;
        }
        public Builder privateLinkApprovalMessage(@Nullable String privateLinkApprovalMessage) {
            this.privateLinkApprovalMessage = Codegen.ofNullable(privateLinkApprovalMessage);
            return this;
        }
        public Builder privateLinkLocation(@Nullable Output<String> privateLinkLocation) {
            this.privateLinkLocation = privateLinkLocation;
            return this;
        }
        public Builder privateLinkLocation(@Nullable String privateLinkLocation) {
            this.privateLinkLocation = Codegen.ofNullable(privateLinkLocation);
            return this;
        }
        public Builder privateLinkResourceId(@Nullable Output<String> privateLinkResourceId) {
            this.privateLinkResourceId = privateLinkResourceId;
            return this;
        }
        public Builder privateLinkResourceId(@Nullable String privateLinkResourceId) {
            this.privateLinkResourceId = Codegen.ofNullable(privateLinkResourceId);
            return this;
        }
        public Builder weight(@Nullable Output<Integer> weight) {
            this.weight = weight;
            return this;
        }
        public Builder weight(@Nullable Integer weight) {
            this.weight = Codegen.ofNullable(weight);
            return this;
        }        public DeepCreatedOriginArgs build() {
            return new DeepCreatedOriginArgs(enabled, hostName, httpPort, httpsPort, name, originHostHeader, priority, privateLinkAlias, privateLinkApprovalMessage, privateLinkLocation, privateLinkResourceId, weight);
        }
    }
}
