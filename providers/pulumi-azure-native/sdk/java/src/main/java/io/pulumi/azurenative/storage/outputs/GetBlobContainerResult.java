// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.outputs;

import io.pulumi.azurenative.storage.outputs.ImmutabilityPolicyPropertiesResponse;
import io.pulumi.azurenative.storage.outputs.LegalHoldPropertiesResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetBlobContainerResult {
    private final @Nullable String defaultEncryptionScope;
    private final Boolean deleted;
    private final String deletedTime;
    private final @Nullable Boolean denyEncryptionScopeOverride;
    private final String etag;
    private final Boolean hasImmutabilityPolicy;
    private final Boolean hasLegalHold;
    private final String id;
    private final ImmutabilityPolicyPropertiesResponse immutabilityPolicy;
    private final String lastModifiedTime;
    private final String leaseDuration;
    private final String leaseState;
    private final String leaseStatus;
    private final LegalHoldPropertiesResponse legalHold;
    private final @Nullable Map<String,String> metadata;
    private final String name;
    private final @Nullable String publicAccess;
    private final Integer remainingRetentionDays;
    private final String type;
    private final String version;

    @OutputCustomType.Constructor({"defaultEncryptionScope","deleted","deletedTime","denyEncryptionScopeOverride","etag","hasImmutabilityPolicy","hasLegalHold","id","immutabilityPolicy","lastModifiedTime","leaseDuration","leaseState","leaseStatus","legalHold","metadata","name","publicAccess","remainingRetentionDays","type","version"})
    private GetBlobContainerResult(
        @Nullable String defaultEncryptionScope,
        Boolean deleted,
        String deletedTime,
        @Nullable Boolean denyEncryptionScopeOverride,
        String etag,
        Boolean hasImmutabilityPolicy,
        Boolean hasLegalHold,
        String id,
        ImmutabilityPolicyPropertiesResponse immutabilityPolicy,
        String lastModifiedTime,
        String leaseDuration,
        String leaseState,
        String leaseStatus,
        LegalHoldPropertiesResponse legalHold,
        @Nullable Map<String,String> metadata,
        String name,
        @Nullable String publicAccess,
        Integer remainingRetentionDays,
        String type,
        String version) {
        this.defaultEncryptionScope = defaultEncryptionScope;
        this.deleted = Objects.requireNonNull(deleted);
        this.deletedTime = Objects.requireNonNull(deletedTime);
        this.denyEncryptionScopeOverride = denyEncryptionScopeOverride;
        this.etag = Objects.requireNonNull(etag);
        this.hasImmutabilityPolicy = Objects.requireNonNull(hasImmutabilityPolicy);
        this.hasLegalHold = Objects.requireNonNull(hasLegalHold);
        this.id = Objects.requireNonNull(id);
        this.immutabilityPolicy = Objects.requireNonNull(immutabilityPolicy);
        this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
        this.leaseDuration = Objects.requireNonNull(leaseDuration);
        this.leaseState = Objects.requireNonNull(leaseState);
        this.leaseStatus = Objects.requireNonNull(leaseStatus);
        this.legalHold = Objects.requireNonNull(legalHold);
        this.metadata = metadata;
        this.name = Objects.requireNonNull(name);
        this.publicAccess = publicAccess;
        this.remainingRetentionDays = Objects.requireNonNull(remainingRetentionDays);
        this.type = Objects.requireNonNull(type);
        this.version = Objects.requireNonNull(version);
    }

    public Optional<String> getDefaultEncryptionScope() {
        return Optional.ofNullable(this.defaultEncryptionScope);
    }
    public Boolean getDeleted() {
        return this.deleted;
    }
    public String getDeletedTime() {
        return this.deletedTime;
    }
    public Optional<Boolean> getDenyEncryptionScopeOverride() {
        return Optional.ofNullable(this.denyEncryptionScopeOverride);
    }
    public String getEtag() {
        return this.etag;
    }
    public Boolean getHasImmutabilityPolicy() {
        return this.hasImmutabilityPolicy;
    }
    public Boolean getHasLegalHold() {
        return this.hasLegalHold;
    }
    public String getId() {
        return this.id;
    }
    public ImmutabilityPolicyPropertiesResponse getImmutabilityPolicy() {
        return this.immutabilityPolicy;
    }
    public String getLastModifiedTime() {
        return this.lastModifiedTime;
    }
    public String getLeaseDuration() {
        return this.leaseDuration;
    }
    public String getLeaseState() {
        return this.leaseState;
    }
    public String getLeaseStatus() {
        return this.leaseStatus;
    }
    public LegalHoldPropertiesResponse getLegalHold() {
        return this.legalHold;
    }
    public Map<String,String> getMetadata() {
        return this.metadata == null ? Map.of() : this.metadata;
    }
    public String getName() {
        return this.name;
    }
    public Optional<String> getPublicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    public Integer getRemainingRetentionDays() {
        return this.remainingRetentionDays;
    }
    public String getType() {
        return this.type;
    }
    public String getVersion() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBlobContainerResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String defaultEncryptionScope;
        private Boolean deleted;
        private String deletedTime;
        private @Nullable Boolean denyEncryptionScopeOverride;
        private String etag;
        private Boolean hasImmutabilityPolicy;
        private Boolean hasLegalHold;
        private String id;
        private ImmutabilityPolicyPropertiesResponse immutabilityPolicy;
        private String lastModifiedTime;
        private String leaseDuration;
        private String leaseState;
        private String leaseStatus;
        private LegalHoldPropertiesResponse legalHold;
        private @Nullable Map<String,String> metadata;
        private String name;
        private @Nullable String publicAccess;
        private Integer remainingRetentionDays;
        private String type;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBlobContainerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultEncryptionScope = defaults.defaultEncryptionScope;
    	      this.deleted = defaults.deleted;
    	      this.deletedTime = defaults.deletedTime;
    	      this.denyEncryptionScopeOverride = defaults.denyEncryptionScopeOverride;
    	      this.etag = defaults.etag;
    	      this.hasImmutabilityPolicy = defaults.hasImmutabilityPolicy;
    	      this.hasLegalHold = defaults.hasLegalHold;
    	      this.id = defaults.id;
    	      this.immutabilityPolicy = defaults.immutabilityPolicy;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.leaseDuration = defaults.leaseDuration;
    	      this.leaseState = defaults.leaseState;
    	      this.leaseStatus = defaults.leaseStatus;
    	      this.legalHold = defaults.legalHold;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.publicAccess = defaults.publicAccess;
    	      this.remainingRetentionDays = defaults.remainingRetentionDays;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        public Builder setDefaultEncryptionScope(@Nullable String defaultEncryptionScope) {
            this.defaultEncryptionScope = defaultEncryptionScope;
            return this;
        }

        public Builder setDeleted(Boolean deleted) {
            this.deleted = Objects.requireNonNull(deleted);
            return this;
        }

        public Builder setDeletedTime(String deletedTime) {
            this.deletedTime = Objects.requireNonNull(deletedTime);
            return this;
        }

        public Builder setDenyEncryptionScopeOverride(@Nullable Boolean denyEncryptionScopeOverride) {
            this.denyEncryptionScopeOverride = denyEncryptionScopeOverride;
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setHasImmutabilityPolicy(Boolean hasImmutabilityPolicy) {
            this.hasImmutabilityPolicy = Objects.requireNonNull(hasImmutabilityPolicy);
            return this;
        }

        public Builder setHasLegalHold(Boolean hasLegalHold) {
            this.hasLegalHold = Objects.requireNonNull(hasLegalHold);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setImmutabilityPolicy(ImmutabilityPolicyPropertiesResponse immutabilityPolicy) {
            this.immutabilityPolicy = Objects.requireNonNull(immutabilityPolicy);
            return this;
        }

        public Builder setLastModifiedTime(String lastModifiedTime) {
            this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
            return this;
        }

        public Builder setLeaseDuration(String leaseDuration) {
            this.leaseDuration = Objects.requireNonNull(leaseDuration);
            return this;
        }

        public Builder setLeaseState(String leaseState) {
            this.leaseState = Objects.requireNonNull(leaseState);
            return this;
        }

        public Builder setLeaseStatus(String leaseStatus) {
            this.leaseStatus = Objects.requireNonNull(leaseStatus);
            return this;
        }

        public Builder setLegalHold(LegalHoldPropertiesResponse legalHold) {
            this.legalHold = Objects.requireNonNull(legalHold);
            return this;
        }

        public Builder setMetadata(@Nullable Map<String,String> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPublicAccess(@Nullable String publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }

        public Builder setRemainingRetentionDays(Integer remainingRetentionDays) {
            this.remainingRetentionDays = Objects.requireNonNull(remainingRetentionDays);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setVersion(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public GetBlobContainerResult build() {
            return new GetBlobContainerResult(defaultEncryptionScope, deleted, deletedTime, denyEncryptionScopeOverride, etag, hasImmutabilityPolicy, hasLegalHold, id, immutabilityPolicy, lastModifiedTime, leaseDuration, leaseState, leaseStatus, legalHold, metadata, name, publicAccess, remainingRetentionDays, type, version);
        }
    }
}
