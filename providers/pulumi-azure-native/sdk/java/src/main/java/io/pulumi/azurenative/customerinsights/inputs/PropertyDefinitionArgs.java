// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights.inputs;

import io.pulumi.azurenative.customerinsights.inputs.ProfileEnumValidValuesFormatArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Property definition.
 * 
 */
public final class PropertyDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final PropertyDefinitionArgs Empty = new PropertyDefinitionArgs();

    /**
     * Array value separator for properties with isArray set.
     * 
     */
    @InputImport(name="arrayValueSeparator")
      private final @Nullable Output<String> arrayValueSeparator;

    public Output<String> getArrayValueSeparator() {
        return this.arrayValueSeparator == null ? Output.empty() : this.arrayValueSeparator;
    }

    /**
     * Describes valid values for an enum property.
     * 
     */
    @InputImport(name="enumValidValues")
      private final @Nullable Output<List<ProfileEnumValidValuesFormatArgs>> enumValidValues;

    public Output<List<ProfileEnumValidValuesFormatArgs>> getEnumValidValues() {
        return this.enumValidValues == null ? Output.empty() : this.enumValidValues;
    }

    /**
     * Name of the property.
     * 
     */
    @InputImport(name="fieldName", required=true)
      private final Output<String> fieldName;

    public Output<String> getFieldName() {
        return this.fieldName;
    }

    /**
     * Type of the property.
     * 
     */
    @InputImport(name="fieldType", required=true)
      private final Output<String> fieldType;

    public Output<String> getFieldType() {
        return this.fieldType;
    }

    /**
     * Indicates if the property is actually an array of the fieldType above on the data api.
     * 
     */
    @InputImport(name="isArray")
      private final @Nullable Output<Boolean> isArray;

    public Output<Boolean> getIsArray() {
        return this.isArray == null ? Output.empty() : this.isArray;
    }

    /**
     * Whether property is available in graph or not.
     * 
     */
    @InputImport(name="isAvailableInGraph")
      private final @Nullable Output<Boolean> isAvailableInGraph;

    public Output<Boolean> getIsAvailableInGraph() {
        return this.isAvailableInGraph == null ? Output.empty() : this.isAvailableInGraph;
    }

    /**
     * Indicates if the property is an enum.
     * 
     */
    @InputImport(name="isEnum")
      private final @Nullable Output<Boolean> isEnum;

    public Output<Boolean> getIsEnum() {
        return this.isEnum == null ? Output.empty() : this.isEnum;
    }

    /**
     * Indicates if the property is an flag enum.
     * 
     */
    @InputImport(name="isFlagEnum")
      private final @Nullable Output<Boolean> isFlagEnum;

    public Output<Boolean> getIsFlagEnum() {
        return this.isFlagEnum == null ? Output.empty() : this.isFlagEnum;
    }

    /**
     * Whether the property is an Image.
     * 
     */
    @InputImport(name="isImage")
      private final @Nullable Output<Boolean> isImage;

    public Output<Boolean> getIsImage() {
        return this.isImage == null ? Output.empty() : this.isImage;
    }

    /**
     * Whether the property is a localized string.
     * 
     */
    @InputImport(name="isLocalizedString")
      private final @Nullable Output<Boolean> isLocalizedString;

    public Output<Boolean> getIsLocalizedString() {
        return this.isLocalizedString == null ? Output.empty() : this.isLocalizedString;
    }

    /**
     * Whether the property is a name or a part of name.
     * 
     */
    @InputImport(name="isName")
      private final @Nullable Output<Boolean> isName;

    public Output<Boolean> getIsName() {
        return this.isName == null ? Output.empty() : this.isName;
    }

    /**
     * Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
     * 
     */
    @InputImport(name="isRequired")
      private final @Nullable Output<Boolean> isRequired;

    public Output<Boolean> getIsRequired() {
        return this.isRequired == null ? Output.empty() : this.isRequired;
    }

    /**
     * Max length of string. Used only if type is string.
     * 
     */
    @InputImport(name="maxLength")
      private final @Nullable Output<Integer> maxLength;

    public Output<Integer> getMaxLength() {
        return this.maxLength == null ? Output.empty() : this.maxLength;
    }

    /**
     * The ID associated with the property.
     * 
     */
    @InputImport(name="propertyId")
      private final @Nullable Output<String> propertyId;

    public Output<String> getPropertyId() {
        return this.propertyId == null ? Output.empty() : this.propertyId;
    }

    /**
     * URL encoded schema.org item prop link for the property.
     * 
     */
    @InputImport(name="schemaItemPropLink")
      private final @Nullable Output<String> schemaItemPropLink;

    public Output<String> getSchemaItemPropLink() {
        return this.schemaItemPropLink == null ? Output.empty() : this.schemaItemPropLink;
    }

    public PropertyDefinitionArgs(
        @Nullable Output<String> arrayValueSeparator,
        @Nullable Output<List<ProfileEnumValidValuesFormatArgs>> enumValidValues,
        Output<String> fieldName,
        Output<String> fieldType,
        @Nullable Output<Boolean> isArray,
        @Nullable Output<Boolean> isAvailableInGraph,
        @Nullable Output<Boolean> isEnum,
        @Nullable Output<Boolean> isFlagEnum,
        @Nullable Output<Boolean> isImage,
        @Nullable Output<Boolean> isLocalizedString,
        @Nullable Output<Boolean> isName,
        @Nullable Output<Boolean> isRequired,
        @Nullable Output<Integer> maxLength,
        @Nullable Output<String> propertyId,
        @Nullable Output<String> schemaItemPropLink) {
        this.arrayValueSeparator = arrayValueSeparator;
        this.enumValidValues = enumValidValues;
        this.fieldName = Objects.requireNonNull(fieldName, "expected parameter 'fieldName' to be non-null");
        this.fieldType = Objects.requireNonNull(fieldType, "expected parameter 'fieldType' to be non-null");
        this.isArray = isArray;
        this.isAvailableInGraph = isAvailableInGraph;
        this.isEnum = isEnum;
        this.isFlagEnum = isFlagEnum;
        this.isImage = isImage;
        this.isLocalizedString = isLocalizedString;
        this.isName = isName;
        this.isRequired = isRequired;
        this.maxLength = maxLength;
        this.propertyId = propertyId;
        this.schemaItemPropLink = schemaItemPropLink;
    }

    private PropertyDefinitionArgs() {
        this.arrayValueSeparator = Output.empty();
        this.enumValidValues = Output.empty();
        this.fieldName = Output.empty();
        this.fieldType = Output.empty();
        this.isArray = Output.empty();
        this.isAvailableInGraph = Output.empty();
        this.isEnum = Output.empty();
        this.isFlagEnum = Output.empty();
        this.isImage = Output.empty();
        this.isLocalizedString = Output.empty();
        this.isName = Output.empty();
        this.isRequired = Output.empty();
        this.maxLength = Output.empty();
        this.propertyId = Output.empty();
        this.schemaItemPropLink = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PropertyDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arrayValueSeparator;
        private @Nullable Output<List<ProfileEnumValidValuesFormatArgs>> enumValidValues;
        private Output<String> fieldName;
        private Output<String> fieldType;
        private @Nullable Output<Boolean> isArray;
        private @Nullable Output<Boolean> isAvailableInGraph;
        private @Nullable Output<Boolean> isEnum;
        private @Nullable Output<Boolean> isFlagEnum;
        private @Nullable Output<Boolean> isImage;
        private @Nullable Output<Boolean> isLocalizedString;
        private @Nullable Output<Boolean> isName;
        private @Nullable Output<Boolean> isRequired;
        private @Nullable Output<Integer> maxLength;
        private @Nullable Output<String> propertyId;
        private @Nullable Output<String> schemaItemPropLink;

        public Builder() {
    	      // Empty
        }

        public Builder(PropertyDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arrayValueSeparator = defaults.arrayValueSeparator;
    	      this.enumValidValues = defaults.enumValidValues;
    	      this.fieldName = defaults.fieldName;
    	      this.fieldType = defaults.fieldType;
    	      this.isArray = defaults.isArray;
    	      this.isAvailableInGraph = defaults.isAvailableInGraph;
    	      this.isEnum = defaults.isEnum;
    	      this.isFlagEnum = defaults.isFlagEnum;
    	      this.isImage = defaults.isImage;
    	      this.isLocalizedString = defaults.isLocalizedString;
    	      this.isName = defaults.isName;
    	      this.isRequired = defaults.isRequired;
    	      this.maxLength = defaults.maxLength;
    	      this.propertyId = defaults.propertyId;
    	      this.schemaItemPropLink = defaults.schemaItemPropLink;
        }

        public Builder arrayValueSeparator(@Nullable Output<String> arrayValueSeparator) {
            this.arrayValueSeparator = arrayValueSeparator;
            return this;
        }

        public Builder arrayValueSeparator(@Nullable String arrayValueSeparator) {
            this.arrayValueSeparator = Output.ofNullable(arrayValueSeparator);
            return this;
        }

        public Builder enumValidValues(@Nullable Output<List<ProfileEnumValidValuesFormatArgs>> enumValidValues) {
            this.enumValidValues = enumValidValues;
            return this;
        }

        public Builder enumValidValues(@Nullable List<ProfileEnumValidValuesFormatArgs> enumValidValues) {
            this.enumValidValues = Output.ofNullable(enumValidValues);
            return this;
        }

        public Builder fieldName(Output<String> fieldName) {
            this.fieldName = Objects.requireNonNull(fieldName);
            return this;
        }

        public Builder fieldName(String fieldName) {
            this.fieldName = Output.of(Objects.requireNonNull(fieldName));
            return this;
        }

        public Builder fieldType(Output<String> fieldType) {
            this.fieldType = Objects.requireNonNull(fieldType);
            return this;
        }

        public Builder fieldType(String fieldType) {
            this.fieldType = Output.of(Objects.requireNonNull(fieldType));
            return this;
        }

        public Builder isArray(@Nullable Output<Boolean> isArray) {
            this.isArray = isArray;
            return this;
        }

        public Builder isArray(@Nullable Boolean isArray) {
            this.isArray = Output.ofNullable(isArray);
            return this;
        }

        public Builder isAvailableInGraph(@Nullable Output<Boolean> isAvailableInGraph) {
            this.isAvailableInGraph = isAvailableInGraph;
            return this;
        }

        public Builder isAvailableInGraph(@Nullable Boolean isAvailableInGraph) {
            this.isAvailableInGraph = Output.ofNullable(isAvailableInGraph);
            return this;
        }

        public Builder isEnum(@Nullable Output<Boolean> isEnum) {
            this.isEnum = isEnum;
            return this;
        }

        public Builder isEnum(@Nullable Boolean isEnum) {
            this.isEnum = Output.ofNullable(isEnum);
            return this;
        }

        public Builder isFlagEnum(@Nullable Output<Boolean> isFlagEnum) {
            this.isFlagEnum = isFlagEnum;
            return this;
        }

        public Builder isFlagEnum(@Nullable Boolean isFlagEnum) {
            this.isFlagEnum = Output.ofNullable(isFlagEnum);
            return this;
        }

        public Builder isImage(@Nullable Output<Boolean> isImage) {
            this.isImage = isImage;
            return this;
        }

        public Builder isImage(@Nullable Boolean isImage) {
            this.isImage = Output.ofNullable(isImage);
            return this;
        }

        public Builder isLocalizedString(@Nullable Output<Boolean> isLocalizedString) {
            this.isLocalizedString = isLocalizedString;
            return this;
        }

        public Builder isLocalizedString(@Nullable Boolean isLocalizedString) {
            this.isLocalizedString = Output.ofNullable(isLocalizedString);
            return this;
        }

        public Builder isName(@Nullable Output<Boolean> isName) {
            this.isName = isName;
            return this;
        }

        public Builder isName(@Nullable Boolean isName) {
            this.isName = Output.ofNullable(isName);
            return this;
        }

        public Builder isRequired(@Nullable Output<Boolean> isRequired) {
            this.isRequired = isRequired;
            return this;
        }

        public Builder isRequired(@Nullable Boolean isRequired) {
            this.isRequired = Output.ofNullable(isRequired);
            return this;
        }

        public Builder maxLength(@Nullable Output<Integer> maxLength) {
            this.maxLength = maxLength;
            return this;
        }

        public Builder maxLength(@Nullable Integer maxLength) {
            this.maxLength = Output.ofNullable(maxLength);
            return this;
        }

        public Builder propertyId(@Nullable Output<String> propertyId) {
            this.propertyId = propertyId;
            return this;
        }

        public Builder propertyId(@Nullable String propertyId) {
            this.propertyId = Output.ofNullable(propertyId);
            return this;
        }

        public Builder schemaItemPropLink(@Nullable Output<String> schemaItemPropLink) {
            this.schemaItemPropLink = schemaItemPropLink;
            return this;
        }

        public Builder schemaItemPropLink(@Nullable String schemaItemPropLink) {
            this.schemaItemPropLink = Output.ofNullable(schemaItemPropLink);
            return this;
        }
        public PropertyDefinitionArgs build() {
            return new PropertyDefinitionArgs(arrayValueSeparator, enumValidValues, fieldName, fieldType, isArray, isAvailableInGraph, isEnum, isFlagEnum, isImage, isLocalizedString, isName, isRequired, maxLength, propertyId, schemaItemPropLink);
        }
    }
}
