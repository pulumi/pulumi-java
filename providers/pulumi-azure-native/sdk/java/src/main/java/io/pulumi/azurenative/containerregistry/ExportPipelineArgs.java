// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry;

import io.pulumi.azurenative.containerregistry.enums.PipelineOptions;
import io.pulumi.azurenative.containerregistry.inputs.ExportPipelineTargetPropertiesArgs;
import io.pulumi.azurenative.containerregistry.inputs.IdentityPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExportPipelineArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExportPipelineArgs Empty = new ExportPipelineArgs();

    /**
     * The name of the export pipeline.
     * 
     */
    @InputImport(name="exportPipelineName")
        private final @Nullable Input<String> exportPipelineName;

    public Input<String> getExportPipelineName() {
        return this.exportPipelineName == null ? Input.empty() : this.exportPipelineName;
    }

    /**
     * The identity of the export pipeline.
     * 
     */
    @InputImport(name="identity")
        private final @Nullable Input<IdentityPropertiesArgs> identity;

    public Input<IdentityPropertiesArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    /**
     * The location of the export pipeline.
     * 
     */
    @InputImport(name="location")
        private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The list of all options configured for the pipeline.
     * 
     */
    @InputImport(name="options")
        private final @Nullable Input<List<Either<String,PipelineOptions>>> options;

    public Input<List<Either<String,PipelineOptions>>> getOptions() {
        return this.options == null ? Input.empty() : this.options;
    }

    /**
     * The name of the container registry.
     * 
     */
    @InputImport(name="registryName", required=true)
        private final Input<String> registryName;

    public Input<String> getRegistryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The target properties of the export pipeline.
     * 
     */
    @InputImport(name="target", required=true)
        private final Input<ExportPipelineTargetPropertiesArgs> target;

    public Input<ExportPipelineTargetPropertiesArgs> getTarget() {
        return this.target;
    }

    public ExportPipelineArgs(
        @Nullable Input<String> exportPipelineName,
        @Nullable Input<IdentityPropertiesArgs> identity,
        @Nullable Input<String> location,
        @Nullable Input<List<Either<String,PipelineOptions>>> options,
        Input<String> registryName,
        Input<String> resourceGroupName,
        Input<ExportPipelineTargetPropertiesArgs> target) {
        this.exportPipelineName = exportPipelineName;
        this.identity = identity;
        this.location = location;
        this.options = options;
        this.registryName = Objects.requireNonNull(registryName, "expected parameter 'registryName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.target = Objects.requireNonNull(target, "expected parameter 'target' to be non-null");
    }

    private ExportPipelineArgs() {
        this.exportPipelineName = Input.empty();
        this.identity = Input.empty();
        this.location = Input.empty();
        this.options = Input.empty();
        this.registryName = Input.empty();
        this.resourceGroupName = Input.empty();
        this.target = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExportPipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> exportPipelineName;
        private @Nullable Input<IdentityPropertiesArgs> identity;
        private @Nullable Input<String> location;
        private @Nullable Input<List<Either<String,PipelineOptions>>> options;
        private Input<String> registryName;
        private Input<String> resourceGroupName;
        private Input<ExportPipelineTargetPropertiesArgs> target;

        public Builder() {
    	      // Empty
        }

        public Builder(ExportPipelineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exportPipelineName = defaults.exportPipelineName;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.options = defaults.options;
    	      this.registryName = defaults.registryName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.target = defaults.target;
        }

        public Builder setExportPipelineName(@Nullable Input<String> exportPipelineName) {
            this.exportPipelineName = exportPipelineName;
            return this;
        }

        public Builder setExportPipelineName(@Nullable String exportPipelineName) {
            this.exportPipelineName = Input.ofNullable(exportPipelineName);
            return this;
        }

        public Builder setIdentity(@Nullable Input<IdentityPropertiesArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIdentity(@Nullable IdentityPropertiesArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setOptions(@Nullable Input<List<Either<String,PipelineOptions>>> options) {
            this.options = options;
            return this;
        }

        public Builder setOptions(@Nullable List<Either<String,PipelineOptions>> options) {
            this.options = Input.ofNullable(options);
            return this;
        }

        public Builder setRegistryName(Input<String> registryName) {
            this.registryName = Objects.requireNonNull(registryName);
            return this;
        }

        public Builder setRegistryName(String registryName) {
            this.registryName = Input.of(Objects.requireNonNull(registryName));
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTarget(Input<ExportPipelineTargetPropertiesArgs> target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }

        public Builder setTarget(ExportPipelineTargetPropertiesArgs target) {
            this.target = Input.of(Objects.requireNonNull(target));
            return this;
        }
        public ExportPipelineArgs build() {
            return new ExportPipelineArgs(exportPipelineName, identity, location, options, registryName, resourceGroupName, target);
        }
    }
}
