// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class X12EnvelopeSettingsResponse {
    private final Integer controlStandardsId;
    private final String controlVersionNumber;
    private final Boolean enableDefaultGroupHeaders;
    private final @Nullable String functionalGroupId;
    private final Integer groupControlNumberLowerBound;
    private final Integer groupControlNumberUpperBound;
    private final String groupHeaderAgencyCode;
    private final String groupHeaderDateFormat;
    private final String groupHeaderTimeFormat;
    private final String groupHeaderVersion;
    private final Integer interchangeControlNumberLowerBound;
    private final Integer interchangeControlNumberUpperBound;
    private final Boolean overwriteExistingTransactionSetControlNumber;
    private final String receiverApplicationId;
    private final Boolean rolloverGroupControlNumber;
    private final Boolean rolloverInterchangeControlNumber;
    private final Boolean rolloverTransactionSetControlNumber;
    private final String senderApplicationId;
    private final Integer transactionSetControlNumberLowerBound;
    private final @Nullable String transactionSetControlNumberPrefix;
    private final @Nullable String transactionSetControlNumberSuffix;
    private final Integer transactionSetControlNumberUpperBound;
    private final String usageIndicator;
    private final Boolean useControlStandardsIdAsRepetitionCharacter;

    @OutputCustomType.Constructor({"controlStandardsId","controlVersionNumber","enableDefaultGroupHeaders","functionalGroupId","groupControlNumberLowerBound","groupControlNumberUpperBound","groupHeaderAgencyCode","groupHeaderDateFormat","groupHeaderTimeFormat","groupHeaderVersion","interchangeControlNumberLowerBound","interchangeControlNumberUpperBound","overwriteExistingTransactionSetControlNumber","receiverApplicationId","rolloverGroupControlNumber","rolloverInterchangeControlNumber","rolloverTransactionSetControlNumber","senderApplicationId","transactionSetControlNumberLowerBound","transactionSetControlNumberPrefix","transactionSetControlNumberSuffix","transactionSetControlNumberUpperBound","usageIndicator","useControlStandardsIdAsRepetitionCharacter"})
    private X12EnvelopeSettingsResponse(
        Integer controlStandardsId,
        String controlVersionNumber,
        Boolean enableDefaultGroupHeaders,
        @Nullable String functionalGroupId,
        Integer groupControlNumberLowerBound,
        Integer groupControlNumberUpperBound,
        String groupHeaderAgencyCode,
        String groupHeaderDateFormat,
        String groupHeaderTimeFormat,
        String groupHeaderVersion,
        Integer interchangeControlNumberLowerBound,
        Integer interchangeControlNumberUpperBound,
        Boolean overwriteExistingTransactionSetControlNumber,
        String receiverApplicationId,
        Boolean rolloverGroupControlNumber,
        Boolean rolloverInterchangeControlNumber,
        Boolean rolloverTransactionSetControlNumber,
        String senderApplicationId,
        Integer transactionSetControlNumberLowerBound,
        @Nullable String transactionSetControlNumberPrefix,
        @Nullable String transactionSetControlNumberSuffix,
        Integer transactionSetControlNumberUpperBound,
        String usageIndicator,
        Boolean useControlStandardsIdAsRepetitionCharacter) {
        this.controlStandardsId = Objects.requireNonNull(controlStandardsId);
        this.controlVersionNumber = Objects.requireNonNull(controlVersionNumber);
        this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
        this.functionalGroupId = functionalGroupId;
        this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
        this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
        this.groupHeaderAgencyCode = Objects.requireNonNull(groupHeaderAgencyCode);
        this.groupHeaderDateFormat = Objects.requireNonNull(groupHeaderDateFormat);
        this.groupHeaderTimeFormat = Objects.requireNonNull(groupHeaderTimeFormat);
        this.groupHeaderVersion = Objects.requireNonNull(groupHeaderVersion);
        this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
        this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
        this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
        this.receiverApplicationId = Objects.requireNonNull(receiverApplicationId);
        this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
        this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
        this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
        this.senderApplicationId = Objects.requireNonNull(senderApplicationId);
        this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
        this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
        this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
        this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
        this.usageIndicator = Objects.requireNonNull(usageIndicator);
        this.useControlStandardsIdAsRepetitionCharacter = Objects.requireNonNull(useControlStandardsIdAsRepetitionCharacter);
    }

    public Integer getControlStandardsId() {
        return this.controlStandardsId;
    }
    public String getControlVersionNumber() {
        return this.controlVersionNumber;
    }
    public Boolean getEnableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }
    public Optional<String> getFunctionalGroupId() {
        return Optional.ofNullable(this.functionalGroupId);
    }
    public Integer getGroupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }
    public Integer getGroupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }
    public String getGroupHeaderAgencyCode() {
        return this.groupHeaderAgencyCode;
    }
    public String getGroupHeaderDateFormat() {
        return this.groupHeaderDateFormat;
    }
    public String getGroupHeaderTimeFormat() {
        return this.groupHeaderTimeFormat;
    }
    public String getGroupHeaderVersion() {
        return this.groupHeaderVersion;
    }
    public Integer getInterchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }
    public Integer getInterchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }
    public Boolean getOverwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }
    public String getReceiverApplicationId() {
        return this.receiverApplicationId;
    }
    public Boolean getRolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }
    public Boolean getRolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }
    public Boolean getRolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }
    public String getSenderApplicationId() {
        return this.senderApplicationId;
    }
    public Integer getTransactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }
    public Optional<String> getTransactionSetControlNumberPrefix() {
        return Optional.ofNullable(this.transactionSetControlNumberPrefix);
    }
    public Optional<String> getTransactionSetControlNumberSuffix() {
        return Optional.ofNullable(this.transactionSetControlNumberSuffix);
    }
    public Integer getTransactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }
    public String getUsageIndicator() {
        return this.usageIndicator;
    }
    public Boolean getUseControlStandardsIdAsRepetitionCharacter() {
        return this.useControlStandardsIdAsRepetitionCharacter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12EnvelopeSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer controlStandardsId;
        private String controlVersionNumber;
        private Boolean enableDefaultGroupHeaders;
        private @Nullable String functionalGroupId;
        private Integer groupControlNumberLowerBound;
        private Integer groupControlNumberUpperBound;
        private String groupHeaderAgencyCode;
        private String groupHeaderDateFormat;
        private String groupHeaderTimeFormat;
        private String groupHeaderVersion;
        private Integer interchangeControlNumberLowerBound;
        private Integer interchangeControlNumberUpperBound;
        private Boolean overwriteExistingTransactionSetControlNumber;
        private String receiverApplicationId;
        private Boolean rolloverGroupControlNumber;
        private Boolean rolloverInterchangeControlNumber;
        private Boolean rolloverTransactionSetControlNumber;
        private String senderApplicationId;
        private Integer transactionSetControlNumberLowerBound;
        private @Nullable String transactionSetControlNumberPrefix;
        private @Nullable String transactionSetControlNumberSuffix;
        private Integer transactionSetControlNumberUpperBound;
        private String usageIndicator;
        private Boolean useControlStandardsIdAsRepetitionCharacter;

        public Builder() {
    	      // Empty
        }

        public Builder(X12EnvelopeSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controlStandardsId = defaults.controlStandardsId;
    	      this.controlVersionNumber = defaults.controlVersionNumber;
    	      this.enableDefaultGroupHeaders = defaults.enableDefaultGroupHeaders;
    	      this.functionalGroupId = defaults.functionalGroupId;
    	      this.groupControlNumberLowerBound = defaults.groupControlNumberLowerBound;
    	      this.groupControlNumberUpperBound = defaults.groupControlNumberUpperBound;
    	      this.groupHeaderAgencyCode = defaults.groupHeaderAgencyCode;
    	      this.groupHeaderDateFormat = defaults.groupHeaderDateFormat;
    	      this.groupHeaderTimeFormat = defaults.groupHeaderTimeFormat;
    	      this.groupHeaderVersion = defaults.groupHeaderVersion;
    	      this.interchangeControlNumberLowerBound = defaults.interchangeControlNumberLowerBound;
    	      this.interchangeControlNumberUpperBound = defaults.interchangeControlNumberUpperBound;
    	      this.overwriteExistingTransactionSetControlNumber = defaults.overwriteExistingTransactionSetControlNumber;
    	      this.receiverApplicationId = defaults.receiverApplicationId;
    	      this.rolloverGroupControlNumber = defaults.rolloverGroupControlNumber;
    	      this.rolloverInterchangeControlNumber = defaults.rolloverInterchangeControlNumber;
    	      this.rolloverTransactionSetControlNumber = defaults.rolloverTransactionSetControlNumber;
    	      this.senderApplicationId = defaults.senderApplicationId;
    	      this.transactionSetControlNumberLowerBound = defaults.transactionSetControlNumberLowerBound;
    	      this.transactionSetControlNumberPrefix = defaults.transactionSetControlNumberPrefix;
    	      this.transactionSetControlNumberSuffix = defaults.transactionSetControlNumberSuffix;
    	      this.transactionSetControlNumberUpperBound = defaults.transactionSetControlNumberUpperBound;
    	      this.usageIndicator = defaults.usageIndicator;
    	      this.useControlStandardsIdAsRepetitionCharacter = defaults.useControlStandardsIdAsRepetitionCharacter;
        }

        public Builder setControlStandardsId(Integer controlStandardsId) {
            this.controlStandardsId = Objects.requireNonNull(controlStandardsId);
            return this;
        }

        public Builder setControlVersionNumber(String controlVersionNumber) {
            this.controlVersionNumber = Objects.requireNonNull(controlVersionNumber);
            return this;
        }

        public Builder setEnableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
            return this;
        }

        public Builder setFunctionalGroupId(@Nullable String functionalGroupId) {
            this.functionalGroupId = functionalGroupId;
            return this;
        }

        public Builder setGroupControlNumberLowerBound(Integer groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
            return this;
        }

        public Builder setGroupControlNumberUpperBound(Integer groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
            return this;
        }

        public Builder setGroupHeaderAgencyCode(String groupHeaderAgencyCode) {
            this.groupHeaderAgencyCode = Objects.requireNonNull(groupHeaderAgencyCode);
            return this;
        }

        public Builder setGroupHeaderDateFormat(String groupHeaderDateFormat) {
            this.groupHeaderDateFormat = Objects.requireNonNull(groupHeaderDateFormat);
            return this;
        }

        public Builder setGroupHeaderTimeFormat(String groupHeaderTimeFormat) {
            this.groupHeaderTimeFormat = Objects.requireNonNull(groupHeaderTimeFormat);
            return this;
        }

        public Builder setGroupHeaderVersion(String groupHeaderVersion) {
            this.groupHeaderVersion = Objects.requireNonNull(groupHeaderVersion);
            return this;
        }

        public Builder setInterchangeControlNumberLowerBound(Integer interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
            return this;
        }

        public Builder setInterchangeControlNumberUpperBound(Integer interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
            return this;
        }

        public Builder setOverwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
            return this;
        }

        public Builder setReceiverApplicationId(String receiverApplicationId) {
            this.receiverApplicationId = Objects.requireNonNull(receiverApplicationId);
            return this;
        }

        public Builder setRolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
            return this;
        }

        public Builder setRolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
            return this;
        }

        public Builder setRolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
            return this;
        }

        public Builder setSenderApplicationId(String senderApplicationId) {
            this.senderApplicationId = Objects.requireNonNull(senderApplicationId);
            return this;
        }

        public Builder setTransactionSetControlNumberLowerBound(Integer transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
            return this;
        }

        public Builder setTransactionSetControlNumberPrefix(@Nullable String transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            return this;
        }

        public Builder setTransactionSetControlNumberSuffix(@Nullable String transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            return this;
        }

        public Builder setTransactionSetControlNumberUpperBound(Integer transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
            return this;
        }

        public Builder setUsageIndicator(String usageIndicator) {
            this.usageIndicator = Objects.requireNonNull(usageIndicator);
            return this;
        }

        public Builder setUseControlStandardsIdAsRepetitionCharacter(Boolean useControlStandardsIdAsRepetitionCharacter) {
            this.useControlStandardsIdAsRepetitionCharacter = Objects.requireNonNull(useControlStandardsIdAsRepetitionCharacter);
            return this;
        }

        public X12EnvelopeSettingsResponse build() {
            return new X12EnvelopeSettingsResponse(controlStandardsId, controlVersionNumber, enableDefaultGroupHeaders, functionalGroupId, groupControlNumberLowerBound, groupControlNumberUpperBound, groupHeaderAgencyCode, groupHeaderDateFormat, groupHeaderTimeFormat, groupHeaderVersion, interchangeControlNumberLowerBound, interchangeControlNumberUpperBound, overwriteExistingTransactionSetControlNumber, receiverApplicationId, rolloverGroupControlNumber, rolloverInterchangeControlNumber, rolloverTransactionSetControlNumber, senderApplicationId, transactionSetControlNumberLowerBound, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberUpperBound, usageIndicator, useControlStandardsIdAsRepetitionCharacter);
        }
    }
}
