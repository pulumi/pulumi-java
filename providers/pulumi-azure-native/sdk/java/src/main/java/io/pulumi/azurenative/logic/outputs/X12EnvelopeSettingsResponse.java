// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class X12EnvelopeSettingsResponse {
    /**
     * The controls standards id.
     * 
     */
    private final Integer controlStandardsId;
    /**
     * The control version number.
     * 
     */
    private final String controlVersionNumber;
    /**
     * The value indicating whether to enable default group headers.
     * 
     */
    private final Boolean enableDefaultGroupHeaders;
    /**
     * The functional group id.
     * 
     */
    private final @Nullable String functionalGroupId;
    /**
     * The group control number lower bound.
     * 
     */
    private final Integer groupControlNumberLowerBound;
    /**
     * The group control number upper bound.
     * 
     */
    private final Integer groupControlNumberUpperBound;
    /**
     * The group header agency code.
     * 
     */
    private final String groupHeaderAgencyCode;
    /**
     * The group header date format.
     * 
     */
    private final String groupHeaderDateFormat;
    /**
     * The group header time format.
     * 
     */
    private final String groupHeaderTimeFormat;
    /**
     * The group header version.
     * 
     */
    private final String groupHeaderVersion;
    /**
     * The interchange  control number lower bound.
     * 
     */
    private final Integer interchangeControlNumberLowerBound;
    /**
     * The interchange  control number upper bound.
     * 
     */
    private final Integer interchangeControlNumberUpperBound;
    /**
     * The value indicating whether to overwrite existing transaction set control number.
     * 
     */
    private final Boolean overwriteExistingTransactionSetControlNumber;
    /**
     * The receiver application id.
     * 
     */
    private final String receiverApplicationId;
    /**
     * The value indicating whether to rollover group control number.
     * 
     */
    private final Boolean rolloverGroupControlNumber;
    /**
     * The value indicating whether to rollover interchange control number.
     * 
     */
    private final Boolean rolloverInterchangeControlNumber;
    /**
     * The value indicating whether to rollover transaction set control number.
     * 
     */
    private final Boolean rolloverTransactionSetControlNumber;
    /**
     * The sender application id.
     * 
     */
    private final String senderApplicationId;
    /**
     * The transaction set control number lower bound.
     * 
     */
    private final Integer transactionSetControlNumberLowerBound;
    /**
     * The transaction set control number prefix.
     * 
     */
    private final @Nullable String transactionSetControlNumberPrefix;
    /**
     * The transaction set control number suffix.
     * 
     */
    private final @Nullable String transactionSetControlNumberSuffix;
    /**
     * The transaction set control number upper bound.
     * 
     */
    private final Integer transactionSetControlNumberUpperBound;
    /**
     * The usage indicator.
     * 
     */
    private final String usageIndicator;
    /**
     * The value indicating whether to use control standards id as repetition character.
     * 
     */
    private final Boolean useControlStandardsIdAsRepetitionCharacter;

    @OutputCustomType.Constructor({"controlStandardsId","controlVersionNumber","enableDefaultGroupHeaders","functionalGroupId","groupControlNumberLowerBound","groupControlNumberUpperBound","groupHeaderAgencyCode","groupHeaderDateFormat","groupHeaderTimeFormat","groupHeaderVersion","interchangeControlNumberLowerBound","interchangeControlNumberUpperBound","overwriteExistingTransactionSetControlNumber","receiverApplicationId","rolloverGroupControlNumber","rolloverInterchangeControlNumber","rolloverTransactionSetControlNumber","senderApplicationId","transactionSetControlNumberLowerBound","transactionSetControlNumberPrefix","transactionSetControlNumberSuffix","transactionSetControlNumberUpperBound","usageIndicator","useControlStandardsIdAsRepetitionCharacter"})
    private X12EnvelopeSettingsResponse(
        Integer controlStandardsId,
        String controlVersionNumber,
        Boolean enableDefaultGroupHeaders,
        @Nullable String functionalGroupId,
        Integer groupControlNumberLowerBound,
        Integer groupControlNumberUpperBound,
        String groupHeaderAgencyCode,
        String groupHeaderDateFormat,
        String groupHeaderTimeFormat,
        String groupHeaderVersion,
        Integer interchangeControlNumberLowerBound,
        Integer interchangeControlNumberUpperBound,
        Boolean overwriteExistingTransactionSetControlNumber,
        String receiverApplicationId,
        Boolean rolloverGroupControlNumber,
        Boolean rolloverInterchangeControlNumber,
        Boolean rolloverTransactionSetControlNumber,
        String senderApplicationId,
        Integer transactionSetControlNumberLowerBound,
        @Nullable String transactionSetControlNumberPrefix,
        @Nullable String transactionSetControlNumberSuffix,
        Integer transactionSetControlNumberUpperBound,
        String usageIndicator,
        Boolean useControlStandardsIdAsRepetitionCharacter) {
        this.controlStandardsId = controlStandardsId;
        this.controlVersionNumber = controlVersionNumber;
        this.enableDefaultGroupHeaders = enableDefaultGroupHeaders;
        this.functionalGroupId = functionalGroupId;
        this.groupControlNumberLowerBound = groupControlNumberLowerBound;
        this.groupControlNumberUpperBound = groupControlNumberUpperBound;
        this.groupHeaderAgencyCode = groupHeaderAgencyCode;
        this.groupHeaderDateFormat = groupHeaderDateFormat;
        this.groupHeaderTimeFormat = groupHeaderTimeFormat;
        this.groupHeaderVersion = groupHeaderVersion;
        this.interchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
        this.interchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
        this.overwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
        this.receiverApplicationId = receiverApplicationId;
        this.rolloverGroupControlNumber = rolloverGroupControlNumber;
        this.rolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
        this.rolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
        this.senderApplicationId = senderApplicationId;
        this.transactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
        this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
        this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
        this.transactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
        this.usageIndicator = usageIndicator;
        this.useControlStandardsIdAsRepetitionCharacter = useControlStandardsIdAsRepetitionCharacter;
    }

    /**
     * The controls standards id.
     * 
    */
    public Integer getControlStandardsId() {
        return this.controlStandardsId;
    }
    /**
     * The control version number.
     * 
    */
    public String getControlVersionNumber() {
        return this.controlVersionNumber;
    }
    /**
     * The value indicating whether to enable default group headers.
     * 
    */
    public Boolean getEnableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }
    /**
     * The functional group id.
     * 
    */
    public Optional<String> getFunctionalGroupId() {
        return Optional.ofNullable(this.functionalGroupId);
    }
    /**
     * The group control number lower bound.
     * 
    */
    public Integer getGroupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }
    /**
     * The group control number upper bound.
     * 
    */
    public Integer getGroupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }
    /**
     * The group header agency code.
     * 
    */
    public String getGroupHeaderAgencyCode() {
        return this.groupHeaderAgencyCode;
    }
    /**
     * The group header date format.
     * 
    */
    public String getGroupHeaderDateFormat() {
        return this.groupHeaderDateFormat;
    }
    /**
     * The group header time format.
     * 
    */
    public String getGroupHeaderTimeFormat() {
        return this.groupHeaderTimeFormat;
    }
    /**
     * The group header version.
     * 
    */
    public String getGroupHeaderVersion() {
        return this.groupHeaderVersion;
    }
    /**
     * The interchange  control number lower bound.
     * 
    */
    public Integer getInterchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }
    /**
     * The interchange  control number upper bound.
     * 
    */
    public Integer getInterchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }
    /**
     * The value indicating whether to overwrite existing transaction set control number.
     * 
    */
    public Boolean getOverwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }
    /**
     * The receiver application id.
     * 
    */
    public String getReceiverApplicationId() {
        return this.receiverApplicationId;
    }
    /**
     * The value indicating whether to rollover group control number.
     * 
    */
    public Boolean getRolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }
    /**
     * The value indicating whether to rollover interchange control number.
     * 
    */
    public Boolean getRolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }
    /**
     * The value indicating whether to rollover transaction set control number.
     * 
    */
    public Boolean getRolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }
    /**
     * The sender application id.
     * 
    */
    public String getSenderApplicationId() {
        return this.senderApplicationId;
    }
    /**
     * The transaction set control number lower bound.
     * 
    */
    public Integer getTransactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }
    /**
     * The transaction set control number prefix.
     * 
    */
    public Optional<String> getTransactionSetControlNumberPrefix() {
        return Optional.ofNullable(this.transactionSetControlNumberPrefix);
    }
    /**
     * The transaction set control number suffix.
     * 
    */
    public Optional<String> getTransactionSetControlNumberSuffix() {
        return Optional.ofNullable(this.transactionSetControlNumberSuffix);
    }
    /**
     * The transaction set control number upper bound.
     * 
    */
    public Integer getTransactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }
    /**
     * The usage indicator.
     * 
    */
    public String getUsageIndicator() {
        return this.usageIndicator;
    }
    /**
     * The value indicating whether to use control standards id as repetition character.
     * 
    */
    public Boolean getUseControlStandardsIdAsRepetitionCharacter() {
        return this.useControlStandardsIdAsRepetitionCharacter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12EnvelopeSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer controlStandardsId;
        private String controlVersionNumber;
        private Boolean enableDefaultGroupHeaders;
        private @Nullable String functionalGroupId;
        private Integer groupControlNumberLowerBound;
        private Integer groupControlNumberUpperBound;
        private String groupHeaderAgencyCode;
        private String groupHeaderDateFormat;
        private String groupHeaderTimeFormat;
        private String groupHeaderVersion;
        private Integer interchangeControlNumberLowerBound;
        private Integer interchangeControlNumberUpperBound;
        private Boolean overwriteExistingTransactionSetControlNumber;
        private String receiverApplicationId;
        private Boolean rolloverGroupControlNumber;
        private Boolean rolloverInterchangeControlNumber;
        private Boolean rolloverTransactionSetControlNumber;
        private String senderApplicationId;
        private Integer transactionSetControlNumberLowerBound;
        private @Nullable String transactionSetControlNumberPrefix;
        private @Nullable String transactionSetControlNumberSuffix;
        private Integer transactionSetControlNumberUpperBound;
        private String usageIndicator;
        private Boolean useControlStandardsIdAsRepetitionCharacter;

        public Builder() {
    	      // Empty
        }

        public Builder(X12EnvelopeSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controlStandardsId = defaults.controlStandardsId;
    	      this.controlVersionNumber = defaults.controlVersionNumber;
    	      this.enableDefaultGroupHeaders = defaults.enableDefaultGroupHeaders;
    	      this.functionalGroupId = defaults.functionalGroupId;
    	      this.groupControlNumberLowerBound = defaults.groupControlNumberLowerBound;
    	      this.groupControlNumberUpperBound = defaults.groupControlNumberUpperBound;
    	      this.groupHeaderAgencyCode = defaults.groupHeaderAgencyCode;
    	      this.groupHeaderDateFormat = defaults.groupHeaderDateFormat;
    	      this.groupHeaderTimeFormat = defaults.groupHeaderTimeFormat;
    	      this.groupHeaderVersion = defaults.groupHeaderVersion;
    	      this.interchangeControlNumberLowerBound = defaults.interchangeControlNumberLowerBound;
    	      this.interchangeControlNumberUpperBound = defaults.interchangeControlNumberUpperBound;
    	      this.overwriteExistingTransactionSetControlNumber = defaults.overwriteExistingTransactionSetControlNumber;
    	      this.receiverApplicationId = defaults.receiverApplicationId;
    	      this.rolloverGroupControlNumber = defaults.rolloverGroupControlNumber;
    	      this.rolloverInterchangeControlNumber = defaults.rolloverInterchangeControlNumber;
    	      this.rolloverTransactionSetControlNumber = defaults.rolloverTransactionSetControlNumber;
    	      this.senderApplicationId = defaults.senderApplicationId;
    	      this.transactionSetControlNumberLowerBound = defaults.transactionSetControlNumberLowerBound;
    	      this.transactionSetControlNumberPrefix = defaults.transactionSetControlNumberPrefix;
    	      this.transactionSetControlNumberSuffix = defaults.transactionSetControlNumberSuffix;
    	      this.transactionSetControlNumberUpperBound = defaults.transactionSetControlNumberUpperBound;
    	      this.usageIndicator = defaults.usageIndicator;
    	      this.useControlStandardsIdAsRepetitionCharacter = defaults.useControlStandardsIdAsRepetitionCharacter;
        }

        public Builder setControlStandardsId(Integer controlStandardsId) {
            this.controlStandardsId = Objects.requireNonNull(controlStandardsId);
            return this;
        }

        public Builder setControlVersionNumber(String controlVersionNumber) {
            this.controlVersionNumber = Objects.requireNonNull(controlVersionNumber);
            return this;
        }

        public Builder setEnableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
            return this;
        }

        public Builder setFunctionalGroupId(@Nullable String functionalGroupId) {
            this.functionalGroupId = functionalGroupId;
            return this;
        }

        public Builder setGroupControlNumberLowerBound(Integer groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
            return this;
        }

        public Builder setGroupControlNumberUpperBound(Integer groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
            return this;
        }

        public Builder setGroupHeaderAgencyCode(String groupHeaderAgencyCode) {
            this.groupHeaderAgencyCode = Objects.requireNonNull(groupHeaderAgencyCode);
            return this;
        }

        public Builder setGroupHeaderDateFormat(String groupHeaderDateFormat) {
            this.groupHeaderDateFormat = Objects.requireNonNull(groupHeaderDateFormat);
            return this;
        }

        public Builder setGroupHeaderTimeFormat(String groupHeaderTimeFormat) {
            this.groupHeaderTimeFormat = Objects.requireNonNull(groupHeaderTimeFormat);
            return this;
        }

        public Builder setGroupHeaderVersion(String groupHeaderVersion) {
            this.groupHeaderVersion = Objects.requireNonNull(groupHeaderVersion);
            return this;
        }

        public Builder setInterchangeControlNumberLowerBound(Integer interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
            return this;
        }

        public Builder setInterchangeControlNumberUpperBound(Integer interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
            return this;
        }

        public Builder setOverwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
            return this;
        }

        public Builder setReceiverApplicationId(String receiverApplicationId) {
            this.receiverApplicationId = Objects.requireNonNull(receiverApplicationId);
            return this;
        }

        public Builder setRolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
            return this;
        }

        public Builder setRolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
            return this;
        }

        public Builder setRolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
            return this;
        }

        public Builder setSenderApplicationId(String senderApplicationId) {
            this.senderApplicationId = Objects.requireNonNull(senderApplicationId);
            return this;
        }

        public Builder setTransactionSetControlNumberLowerBound(Integer transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
            return this;
        }

        public Builder setTransactionSetControlNumberPrefix(@Nullable String transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            return this;
        }

        public Builder setTransactionSetControlNumberSuffix(@Nullable String transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            return this;
        }

        public Builder setTransactionSetControlNumberUpperBound(Integer transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
            return this;
        }

        public Builder setUsageIndicator(String usageIndicator) {
            this.usageIndicator = Objects.requireNonNull(usageIndicator);
            return this;
        }

        public Builder setUseControlStandardsIdAsRepetitionCharacter(Boolean useControlStandardsIdAsRepetitionCharacter) {
            this.useControlStandardsIdAsRepetitionCharacter = Objects.requireNonNull(useControlStandardsIdAsRepetitionCharacter);
            return this;
        }
        public X12EnvelopeSettingsResponse build() {
            return new X12EnvelopeSettingsResponse(controlStandardsId, controlVersionNumber, enableDefaultGroupHeaders, functionalGroupId, groupControlNumberLowerBound, groupControlNumberUpperBound, groupHeaderAgencyCode, groupHeaderDateFormat, groupHeaderTimeFormat, groupHeaderVersion, interchangeControlNumberLowerBound, interchangeControlNumberUpperBound, overwriteExistingTransactionSetControlNumber, receiverApplicationId, rolloverGroupControlNumber, rolloverInterchangeControlNumber, rolloverTransactionSetControlNumber, senderApplicationId, transactionSetControlNumberLowerBound, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberUpperBound, usageIndicator, useControlStandardsIdAsRepetitionCharacter);
        }
    }
}
