// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.labservices.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class SizeInfoResponse {
    /**
     * Represents the actual compute size, e.g. Standard_A2_v2.
     * 
     */
    private final @Nullable String computeSize;
    /**
     * The amount of memory available (in GB).
     * 
     */
    private final @Nullable Double memory;
    /**
     * The number of cores a VM of this size has.
     * 
     */
    private final @Nullable Integer numberOfCores;
    /**
     * The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
     * 
     */
    private final @Nullable Double price;

    @OutputCustomType.Constructor({"computeSize","memory","numberOfCores","price"})
    private SizeInfoResponse(
        @Nullable String computeSize,
        @Nullable Double memory,
        @Nullable Integer numberOfCores,
        @Nullable Double price) {
        this.computeSize = computeSize;
        this.memory = memory;
        this.numberOfCores = numberOfCores;
        this.price = price;
    }

    /**
     * Represents the actual compute size, e.g. Standard_A2_v2.
     * 
    */
    public Optional<String> getComputeSize() {
        return Optional.ofNullable(this.computeSize);
    }
    /**
     * The amount of memory available (in GB).
     * 
    */
    public Optional<Double> getMemory() {
        return Optional.ofNullable(this.memory);
    }
    /**
     * The number of cores a VM of this size has.
     * 
    */
    public Optional<Integer> getNumberOfCores() {
        return Optional.ofNullable(this.numberOfCores);
    }
    /**
     * The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
     * 
    */
    public Optional<Double> getPrice() {
        return Optional.ofNullable(this.price);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SizeInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String computeSize;
        private @Nullable Double memory;
        private @Nullable Integer numberOfCores;
        private @Nullable Double price;

        public Builder() {
    	      // Empty
        }

        public Builder(SizeInfoResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computeSize = defaults.computeSize;
    	      this.memory = defaults.memory;
    	      this.numberOfCores = defaults.numberOfCores;
    	      this.price = defaults.price;
        }

        public Builder setComputeSize(@Nullable String computeSize) {
            this.computeSize = computeSize;
            return this;
        }

        public Builder setMemory(@Nullable Double memory) {
            this.memory = memory;
            return this;
        }

        public Builder setNumberOfCores(@Nullable Integer numberOfCores) {
            this.numberOfCores = numberOfCores;
            return this;
        }

        public Builder setPrice(@Nullable Double price) {
            this.price = price;
            return this;
        }
        public SizeInfoResponse build() {
            return new SizeInfoResponse(computeSize, memory, numberOfCores, price);
        }
    }
}
