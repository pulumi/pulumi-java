// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.visualstudio;

import io.pulumi.azurenative.visualstudio.inputs.ExtensionResourcePlanArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExtensionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExtensionArgs Empty = new ExtensionArgs();

    /**
     * The name of the Visual Studio Team Services account resource.
     * 
     */
    @Import(name="accountResourceName", required=true)
      private final Output<String> accountResourceName;

    public Output<String> getAccountResourceName() {
        return this.accountResourceName;
    }

    /**
     * The name of the extension.
     * 
     */
    @Import(name="extensionResourceName")
      private final @Nullable Output<String> extensionResourceName;

    public Output<String> getExtensionResourceName() {
        return this.extensionResourceName == null ? Output.empty() : this.extensionResourceName;
    }

    /**
     * The Azure region of the Visual Studio account associated with this request (i.e 'southcentralus'.)
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Extended information about the plan being purchased for this extension resource.
     * 
     */
    @Import(name="plan")
      private final @Nullable Output<ExtensionResourcePlanArgs> plan;

    public Output<ExtensionResourcePlanArgs> getPlan() {
        return this.plan == null ? Output.empty() : this.plan;
    }

    /**
     * A dictionary of extended properties. This property is currently unused.
     * 
     */
    @Import(name="properties")
      private final @Nullable Output<Map<String,String>> properties;

    public Output<Map<String,String>> getProperties() {
        return this.properties == null ? Output.empty() : this.properties;
    }

    /**
     * Name of the resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A dictionary of user-defined tags to be stored with the extension resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public ExtensionArgs(
        Output<String> accountResourceName,
        @Nullable Output<String> extensionResourceName,
        @Nullable Output<String> location,
        @Nullable Output<ExtensionResourcePlanArgs> plan,
        @Nullable Output<Map<String,String>> properties,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags) {
        this.accountResourceName = Objects.requireNonNull(accountResourceName, "expected parameter 'accountResourceName' to be non-null");
        this.extensionResourceName = extensionResourceName;
        this.location = location;
        this.plan = plan;
        this.properties = properties;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private ExtensionArgs() {
        this.accountResourceName = Output.empty();
        this.extensionResourceName = Output.empty();
        this.location = Output.empty();
        this.plan = Output.empty();
        this.properties = Output.empty();
        this.resourceGroupName = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExtensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountResourceName;
        private @Nullable Output<String> extensionResourceName;
        private @Nullable Output<String> location;
        private @Nullable Output<ExtensionResourcePlanArgs> plan;
        private @Nullable Output<Map<String,String>> properties;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ExtensionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountResourceName = defaults.accountResourceName;
    	      this.extensionResourceName = defaults.extensionResourceName;
    	      this.location = defaults.location;
    	      this.plan = defaults.plan;
    	      this.properties = defaults.properties;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder accountResourceName(Output<String> accountResourceName) {
            this.accountResourceName = Objects.requireNonNull(accountResourceName);
            return this;
        }

        public Builder accountResourceName(String accountResourceName) {
            this.accountResourceName = Output.of(Objects.requireNonNull(accountResourceName));
            return this;
        }

        public Builder extensionResourceName(@Nullable Output<String> extensionResourceName) {
            this.extensionResourceName = extensionResourceName;
            return this;
        }

        public Builder extensionResourceName(@Nullable String extensionResourceName) {
            this.extensionResourceName = Output.ofNullable(extensionResourceName);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder plan(@Nullable Output<ExtensionResourcePlanArgs> plan) {
            this.plan = plan;
            return this;
        }

        public Builder plan(@Nullable ExtensionResourcePlanArgs plan) {
            this.plan = Output.ofNullable(plan);
            return this;
        }

        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            this.properties = properties;
            return this;
        }

        public Builder properties(@Nullable Map<String,String> properties) {
            this.properties = Output.ofNullable(properties);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public ExtensionArgs build() {
            return new ExtensionArgs(accountResourceName, extensionResourceName, location, plan, properties, resourceGroupName, tags);
        }
    }
}
