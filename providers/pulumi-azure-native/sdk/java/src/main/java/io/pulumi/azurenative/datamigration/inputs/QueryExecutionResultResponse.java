// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.inputs;

import io.pulumi.azurenative.datamigration.inputs.ExecutionStatisticsResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Describes query analysis results for execution in source and target
 * 
 */
public final class QueryExecutionResultResponse extends io.pulumi.resources.InvokeArgs {

    public static final QueryExecutionResultResponse Empty = new QueryExecutionResultResponse();

    /**
     * Query text retrieved from the source server
     * 
     */
    @Import(name="queryText", required=true)
      private final String queryText;

    public String getQueryText() {
        return this.queryText;
    }

    /**
     * Query analysis result from the source
     * 
     */
    @Import(name="sourceResult", required=true)
      private final ExecutionStatisticsResponse sourceResult;

    public ExecutionStatisticsResponse getSourceResult() {
        return this.sourceResult;
    }

    /**
     * Total no. of statements in the batch
     * 
     */
    @Import(name="statementsInBatch", required=true)
      private final Double statementsInBatch;

    public Double getStatementsInBatch() {
        return this.statementsInBatch;
    }

    /**
     * Query analysis result from the target
     * 
     */
    @Import(name="targetResult", required=true)
      private final ExecutionStatisticsResponse targetResult;

    public ExecutionStatisticsResponse getTargetResult() {
        return this.targetResult;
    }

    public QueryExecutionResultResponse(
        String queryText,
        ExecutionStatisticsResponse sourceResult,
        Double statementsInBatch,
        ExecutionStatisticsResponse targetResult) {
        this.queryText = Objects.requireNonNull(queryText, "expected parameter 'queryText' to be non-null");
        this.sourceResult = Objects.requireNonNull(sourceResult, "expected parameter 'sourceResult' to be non-null");
        this.statementsInBatch = Objects.requireNonNull(statementsInBatch, "expected parameter 'statementsInBatch' to be non-null");
        this.targetResult = Objects.requireNonNull(targetResult, "expected parameter 'targetResult' to be non-null");
    }

    private QueryExecutionResultResponse() {
        this.queryText = null;
        this.sourceResult = null;
        this.statementsInBatch = null;
        this.targetResult = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueryExecutionResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String queryText;
        private ExecutionStatisticsResponse sourceResult;
        private Double statementsInBatch;
        private ExecutionStatisticsResponse targetResult;

        public Builder() {
    	      // Empty
        }

        public Builder(QueryExecutionResultResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.queryText = defaults.queryText;
    	      this.sourceResult = defaults.sourceResult;
    	      this.statementsInBatch = defaults.statementsInBatch;
    	      this.targetResult = defaults.targetResult;
        }

        public Builder queryText(String queryText) {
            this.queryText = Objects.requireNonNull(queryText);
            return this;
        }
        public Builder sourceResult(ExecutionStatisticsResponse sourceResult) {
            this.sourceResult = Objects.requireNonNull(sourceResult);
            return this;
        }
        public Builder statementsInBatch(Double statementsInBatch) {
            this.statementsInBatch = Objects.requireNonNull(statementsInBatch);
            return this;
        }
        public Builder targetResult(ExecutionStatisticsResponse targetResult) {
            this.targetResult = Objects.requireNonNull(targetResult);
            return this;
        }        public QueryExecutionResultResponse build() {
            return new QueryExecutionResultResponse(queryText, sourceResult, statementsInBatch, targetResult);
        }
    }
}
