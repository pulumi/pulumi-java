// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RampUpRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final RampUpRuleArgs Empty = new RampUpRuleArgs();

    @InputImport(name="actionHostName")
    private final @Nullable Input<String> actionHostName;

    public Input<String> getActionHostName() {
        return this.actionHostName == null ? Input.empty() : this.actionHostName;
    }

    @InputImport(name="changeDecisionCallbackUrl")
    private final @Nullable Input<String> changeDecisionCallbackUrl;

    public Input<String> getChangeDecisionCallbackUrl() {
        return this.changeDecisionCallbackUrl == null ? Input.empty() : this.changeDecisionCallbackUrl;
    }

    @InputImport(name="changeIntervalInMinutes")
    private final @Nullable Input<Integer> changeIntervalInMinutes;

    public Input<Integer> getChangeIntervalInMinutes() {
        return this.changeIntervalInMinutes == null ? Input.empty() : this.changeIntervalInMinutes;
    }

    @InputImport(name="changeStep")
    private final @Nullable Input<Double> changeStep;

    public Input<Double> getChangeStep() {
        return this.changeStep == null ? Input.empty() : this.changeStep;
    }

    @InputImport(name="maxReroutePercentage")
    private final @Nullable Input<Double> maxReroutePercentage;

    public Input<Double> getMaxReroutePercentage() {
        return this.maxReroutePercentage == null ? Input.empty() : this.maxReroutePercentage;
    }

    @InputImport(name="minReroutePercentage")
    private final @Nullable Input<Double> minReroutePercentage;

    public Input<Double> getMinReroutePercentage() {
        return this.minReroutePercentage == null ? Input.empty() : this.minReroutePercentage;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="reroutePercentage")
    private final @Nullable Input<Double> reroutePercentage;

    public Input<Double> getReroutePercentage() {
        return this.reroutePercentage == null ? Input.empty() : this.reroutePercentage;
    }

    public RampUpRuleArgs(
        @Nullable Input<String> actionHostName,
        @Nullable Input<String> changeDecisionCallbackUrl,
        @Nullable Input<Integer> changeIntervalInMinutes,
        @Nullable Input<Double> changeStep,
        @Nullable Input<Double> maxReroutePercentage,
        @Nullable Input<Double> minReroutePercentage,
        @Nullable Input<String> name,
        @Nullable Input<Double> reroutePercentage) {
        this.actionHostName = actionHostName;
        this.changeDecisionCallbackUrl = changeDecisionCallbackUrl;
        this.changeIntervalInMinutes = changeIntervalInMinutes;
        this.changeStep = changeStep;
        this.maxReroutePercentage = maxReroutePercentage;
        this.minReroutePercentage = minReroutePercentage;
        this.name = name;
        this.reroutePercentage = reroutePercentage;
    }

    private RampUpRuleArgs() {
        this.actionHostName = Input.empty();
        this.changeDecisionCallbackUrl = Input.empty();
        this.changeIntervalInMinutes = Input.empty();
        this.changeStep = Input.empty();
        this.maxReroutePercentage = Input.empty();
        this.minReroutePercentage = Input.empty();
        this.name = Input.empty();
        this.reroutePercentage = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RampUpRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> actionHostName;
        private @Nullable Input<String> changeDecisionCallbackUrl;
        private @Nullable Input<Integer> changeIntervalInMinutes;
        private @Nullable Input<Double> changeStep;
        private @Nullable Input<Double> maxReroutePercentage;
        private @Nullable Input<Double> minReroutePercentage;
        private @Nullable Input<String> name;
        private @Nullable Input<Double> reroutePercentage;

        public Builder() {
    	      // Empty
        }

        public Builder(RampUpRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionHostName = defaults.actionHostName;
    	      this.changeDecisionCallbackUrl = defaults.changeDecisionCallbackUrl;
    	      this.changeIntervalInMinutes = defaults.changeIntervalInMinutes;
    	      this.changeStep = defaults.changeStep;
    	      this.maxReroutePercentage = defaults.maxReroutePercentage;
    	      this.minReroutePercentage = defaults.minReroutePercentage;
    	      this.name = defaults.name;
    	      this.reroutePercentage = defaults.reroutePercentage;
        }

        public Builder setActionHostName(@Nullable Input<String> actionHostName) {
            this.actionHostName = actionHostName;
            return this;
        }

        public Builder setActionHostName(@Nullable String actionHostName) {
            this.actionHostName = Input.ofNullable(actionHostName);
            return this;
        }

        public Builder setChangeDecisionCallbackUrl(@Nullable Input<String> changeDecisionCallbackUrl) {
            this.changeDecisionCallbackUrl = changeDecisionCallbackUrl;
            return this;
        }

        public Builder setChangeDecisionCallbackUrl(@Nullable String changeDecisionCallbackUrl) {
            this.changeDecisionCallbackUrl = Input.ofNullable(changeDecisionCallbackUrl);
            return this;
        }

        public Builder setChangeIntervalInMinutes(@Nullable Input<Integer> changeIntervalInMinutes) {
            this.changeIntervalInMinutes = changeIntervalInMinutes;
            return this;
        }

        public Builder setChangeIntervalInMinutes(@Nullable Integer changeIntervalInMinutes) {
            this.changeIntervalInMinutes = Input.ofNullable(changeIntervalInMinutes);
            return this;
        }

        public Builder setChangeStep(@Nullable Input<Double> changeStep) {
            this.changeStep = changeStep;
            return this;
        }

        public Builder setChangeStep(@Nullable Double changeStep) {
            this.changeStep = Input.ofNullable(changeStep);
            return this;
        }

        public Builder setMaxReroutePercentage(@Nullable Input<Double> maxReroutePercentage) {
            this.maxReroutePercentage = maxReroutePercentage;
            return this;
        }

        public Builder setMaxReroutePercentage(@Nullable Double maxReroutePercentage) {
            this.maxReroutePercentage = Input.ofNullable(maxReroutePercentage);
            return this;
        }

        public Builder setMinReroutePercentage(@Nullable Input<Double> minReroutePercentage) {
            this.minReroutePercentage = minReroutePercentage;
            return this;
        }

        public Builder setMinReroutePercentage(@Nullable Double minReroutePercentage) {
            this.minReroutePercentage = Input.ofNullable(minReroutePercentage);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setReroutePercentage(@Nullable Input<Double> reroutePercentage) {
            this.reroutePercentage = reroutePercentage;
            return this;
        }

        public Builder setReroutePercentage(@Nullable Double reroutePercentage) {
            this.reroutePercentage = Input.ofNullable(reroutePercentage);
            return this;
        }

        public RampUpRuleArgs build() {
            return new RampUpRuleArgs(actionHostName, changeDecisionCallbackUrl, changeIntervalInMinutes, changeStep, maxReroutePercentage, minReroutePercentage, name, reroutePercentage);
        }
    }
}
