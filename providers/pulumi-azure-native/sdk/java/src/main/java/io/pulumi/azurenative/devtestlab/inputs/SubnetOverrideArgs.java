// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab.inputs;

import io.pulumi.azurenative.devtestlab.enums.UsagePermissionType;
import io.pulumi.azurenative.devtestlab.inputs.SubnetSharedPublicIpAddressConfigurationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Property overrides on a subnet of a virtual network.
 * 
 */
public final class SubnetOverrideArgs extends io.pulumi.resources.ResourceArgs {

    public static final SubnetOverrideArgs Empty = new SubnetOverrideArgs();

    /**
     * The name given to the subnet within the lab.
     * 
     */
    @Import(name="labSubnetName")
      private final @Nullable Output<String> labSubnetName;

    public Output<String> labSubnetName() {
        return this.labSubnetName == null ? Codegen.empty() : this.labSubnetName;
    }

    /**
     * The resource ID of the subnet.
     * 
     */
    @Import(name="resourceId")
      private final @Nullable Output<String> resourceId;

    public Output<String> resourceId() {
        return this.resourceId == null ? Codegen.empty() : this.resourceId;
    }

    /**
     * Properties that virtual machines on this subnet will share.
     * 
     */
    @Import(name="sharedPublicIpAddressConfiguration")
      private final @Nullable Output<SubnetSharedPublicIpAddressConfigurationArgs> sharedPublicIpAddressConfiguration;

    public Output<SubnetSharedPublicIpAddressConfigurationArgs> sharedPublicIpAddressConfiguration() {
        return this.sharedPublicIpAddressConfiguration == null ? Codegen.empty() : this.sharedPublicIpAddressConfiguration;
    }

    /**
     * Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
     * 
     */
    @Import(name="useInVmCreationPermission")
      private final @Nullable Output<Either<String,UsagePermissionType>> useInVmCreationPermission;

    public Output<Either<String,UsagePermissionType>> useInVmCreationPermission() {
        return this.useInVmCreationPermission == null ? Codegen.empty() : this.useInVmCreationPermission;
    }

    /**
     * Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
     * 
     */
    @Import(name="usePublicIpAddressPermission")
      private final @Nullable Output<Either<String,UsagePermissionType>> usePublicIpAddressPermission;

    public Output<Either<String,UsagePermissionType>> usePublicIpAddressPermission() {
        return this.usePublicIpAddressPermission == null ? Codegen.empty() : this.usePublicIpAddressPermission;
    }

    /**
     * The virtual network pool associated with this subnet.
     * 
     */
    @Import(name="virtualNetworkPoolName")
      private final @Nullable Output<String> virtualNetworkPoolName;

    public Output<String> virtualNetworkPoolName() {
        return this.virtualNetworkPoolName == null ? Codegen.empty() : this.virtualNetworkPoolName;
    }

    public SubnetOverrideArgs(
        @Nullable Output<String> labSubnetName,
        @Nullable Output<String> resourceId,
        @Nullable Output<SubnetSharedPublicIpAddressConfigurationArgs> sharedPublicIpAddressConfiguration,
        @Nullable Output<Either<String,UsagePermissionType>> useInVmCreationPermission,
        @Nullable Output<Either<String,UsagePermissionType>> usePublicIpAddressPermission,
        @Nullable Output<String> virtualNetworkPoolName) {
        this.labSubnetName = labSubnetName;
        this.resourceId = resourceId;
        this.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
        this.useInVmCreationPermission = useInVmCreationPermission;
        this.usePublicIpAddressPermission = usePublicIpAddressPermission;
        this.virtualNetworkPoolName = virtualNetworkPoolName;
    }

    private SubnetOverrideArgs() {
        this.labSubnetName = Codegen.empty();
        this.resourceId = Codegen.empty();
        this.sharedPublicIpAddressConfiguration = Codegen.empty();
        this.useInVmCreationPermission = Codegen.empty();
        this.usePublicIpAddressPermission = Codegen.empty();
        this.virtualNetworkPoolName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubnetOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> labSubnetName;
        private @Nullable Output<String> resourceId;
        private @Nullable Output<SubnetSharedPublicIpAddressConfigurationArgs> sharedPublicIpAddressConfiguration;
        private @Nullable Output<Either<String,UsagePermissionType>> useInVmCreationPermission;
        private @Nullable Output<Either<String,UsagePermissionType>> usePublicIpAddressPermission;
        private @Nullable Output<String> virtualNetworkPoolName;

        public Builder() {
    	      // Empty
        }

        public Builder(SubnetOverrideArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.labSubnetName = defaults.labSubnetName;
    	      this.resourceId = defaults.resourceId;
    	      this.sharedPublicIpAddressConfiguration = defaults.sharedPublicIpAddressConfiguration;
    	      this.useInVmCreationPermission = defaults.useInVmCreationPermission;
    	      this.usePublicIpAddressPermission = defaults.usePublicIpAddressPermission;
    	      this.virtualNetworkPoolName = defaults.virtualNetworkPoolName;
        }

        public Builder labSubnetName(@Nullable Output<String> labSubnetName) {
            this.labSubnetName = labSubnetName;
            return this;
        }
        public Builder labSubnetName(@Nullable String labSubnetName) {
            this.labSubnetName = Codegen.ofNullable(labSubnetName);
            return this;
        }
        public Builder resourceId(@Nullable Output<String> resourceId) {
            this.resourceId = resourceId;
            return this;
        }
        public Builder resourceId(@Nullable String resourceId) {
            this.resourceId = Codegen.ofNullable(resourceId);
            return this;
        }
        public Builder sharedPublicIpAddressConfiguration(@Nullable Output<SubnetSharedPublicIpAddressConfigurationArgs> sharedPublicIpAddressConfiguration) {
            this.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
            return this;
        }
        public Builder sharedPublicIpAddressConfiguration(@Nullable SubnetSharedPublicIpAddressConfigurationArgs sharedPublicIpAddressConfiguration) {
            this.sharedPublicIpAddressConfiguration = Codegen.ofNullable(sharedPublicIpAddressConfiguration);
            return this;
        }
        public Builder useInVmCreationPermission(@Nullable Output<Either<String,UsagePermissionType>> useInVmCreationPermission) {
            this.useInVmCreationPermission = useInVmCreationPermission;
            return this;
        }
        public Builder useInVmCreationPermission(@Nullable Either<String,UsagePermissionType> useInVmCreationPermission) {
            this.useInVmCreationPermission = Codegen.ofNullable(useInVmCreationPermission);
            return this;
        }
        public Builder usePublicIpAddressPermission(@Nullable Output<Either<String,UsagePermissionType>> usePublicIpAddressPermission) {
            this.usePublicIpAddressPermission = usePublicIpAddressPermission;
            return this;
        }
        public Builder usePublicIpAddressPermission(@Nullable Either<String,UsagePermissionType> usePublicIpAddressPermission) {
            this.usePublicIpAddressPermission = Codegen.ofNullable(usePublicIpAddressPermission);
            return this;
        }
        public Builder virtualNetworkPoolName(@Nullable Output<String> virtualNetworkPoolName) {
            this.virtualNetworkPoolName = virtualNetworkPoolName;
            return this;
        }
        public Builder virtualNetworkPoolName(@Nullable String virtualNetworkPoolName) {
            this.virtualNetworkPoolName = Codegen.ofNullable(virtualNetworkPoolName);
            return this;
        }        public SubnetOverrideArgs build() {
            return new SubnetOverrideArgs(labSubnetName, resourceId, sharedPublicIpAddressConfiguration, useInVmCreationPermission, usePublicIpAddressPermission, virtualNetworkPoolName);
        }
    }
}
