// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb;

import io.pulumi.azurenative.documentdb.enums.MongoRoleDefinitionType;
import io.pulumi.azurenative.documentdb.inputs.PrivilegeArgs;
import io.pulumi.azurenative.documentdb.inputs.RoleArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MongoDBResourceMongoRoleDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final MongoDBResourceMongoRoleDefinitionArgs Empty = new MongoDBResourceMongoRoleDefinitionArgs();

    /**
     * Cosmos DB database account name.
     * 
     */
    @InputImport(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> getAccountName() {
        return this.accountName;
    }

    /**
     * The database name for which access is being granted for this Role Definition.
     * 
     */
    @InputImport(name="databaseName")
      private final @Nullable Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName == null ? Output.empty() : this.databaseName;
    }

    /**
     * The ID for the Role Definition {dbName.roleName}.
     * 
     */
    @InputImport(name="mongoRoleDefinitionId")
      private final @Nullable Output<String> mongoRoleDefinitionId;

    public Output<String> getMongoRoleDefinitionId() {
        return this.mongoRoleDefinitionId == null ? Output.empty() : this.mongoRoleDefinitionId;
    }

    /**
     * A set of privileges contained by the Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Scopes higher than Database are not enforceable as privilege.
     * 
     */
    @InputImport(name="privileges")
      private final @Nullable Output<List<PrivilegeArgs>> privileges;

    public Output<List<PrivilegeArgs>> getPrivileges() {
        return this.privileges == null ? Output.empty() : this.privileges;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A user-friendly name for the Role Definition. Must be unique for the database account.
     * 
     */
    @InputImport(name="roleName")
      private final @Nullable Output<String> roleName;

    public Output<String> getRoleName() {
        return this.roleName == null ? Output.empty() : this.roleName;
    }

    /**
     * The set of roles inherited by this Role Definition.
     * 
     */
    @InputImport(name="roles")
      private final @Nullable Output<List<RoleArgs>> roles;

    public Output<List<RoleArgs>> getRoles() {
        return this.roles == null ? Output.empty() : this.roles;
    }

    /**
     * Indicates whether the Role Definition was built-in or user created.
     * 
     */
    @InputImport(name="type")
      private final @Nullable Output<MongoRoleDefinitionType> type;

    public Output<MongoRoleDefinitionType> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public MongoDBResourceMongoRoleDefinitionArgs(
        Output<String> accountName,
        @Nullable Output<String> databaseName,
        @Nullable Output<String> mongoRoleDefinitionId,
        @Nullable Output<List<PrivilegeArgs>> privileges,
        Output<String> resourceGroupName,
        @Nullable Output<String> roleName,
        @Nullable Output<List<RoleArgs>> roles,
        @Nullable Output<MongoRoleDefinitionType> type) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.databaseName = databaseName;
        this.mongoRoleDefinitionId = mongoRoleDefinitionId;
        this.privileges = privileges;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.roleName = roleName;
        this.roles = roles;
        this.type = type;
    }

    private MongoDBResourceMongoRoleDefinitionArgs() {
        this.accountName = Output.empty();
        this.databaseName = Output.empty();
        this.mongoRoleDefinitionId = Output.empty();
        this.privileges = Output.empty();
        this.resourceGroupName = Output.empty();
        this.roleName = Output.empty();
        this.roles = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MongoDBResourceMongoRoleDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private @Nullable Output<String> databaseName;
        private @Nullable Output<String> mongoRoleDefinitionId;
        private @Nullable Output<List<PrivilegeArgs>> privileges;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> roleName;
        private @Nullable Output<List<RoleArgs>> roles;
        private @Nullable Output<MongoRoleDefinitionType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(MongoDBResourceMongoRoleDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.databaseName = defaults.databaseName;
    	      this.mongoRoleDefinitionId = defaults.mongoRoleDefinitionId;
    	      this.privileges = defaults.privileges;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.roleName = defaults.roleName;
    	      this.roles = defaults.roles;
    	      this.type = defaults.type;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }

        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            this.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = Output.ofNullable(databaseName);
            return this;
        }

        public Builder mongoRoleDefinitionId(@Nullable Output<String> mongoRoleDefinitionId) {
            this.mongoRoleDefinitionId = mongoRoleDefinitionId;
            return this;
        }

        public Builder mongoRoleDefinitionId(@Nullable String mongoRoleDefinitionId) {
            this.mongoRoleDefinitionId = Output.ofNullable(mongoRoleDefinitionId);
            return this;
        }

        public Builder privileges(@Nullable Output<List<PrivilegeArgs>> privileges) {
            this.privileges = privileges;
            return this;
        }

        public Builder privileges(@Nullable List<PrivilegeArgs> privileges) {
            this.privileges = Output.ofNullable(privileges);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder roleName(@Nullable Output<String> roleName) {
            this.roleName = roleName;
            return this;
        }

        public Builder roleName(@Nullable String roleName) {
            this.roleName = Output.ofNullable(roleName);
            return this;
        }

        public Builder roles(@Nullable Output<List<RoleArgs>> roles) {
            this.roles = roles;
            return this;
        }

        public Builder roles(@Nullable List<RoleArgs> roles) {
            this.roles = Output.ofNullable(roles);
            return this;
        }

        public Builder type(@Nullable Output<MongoRoleDefinitionType> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable MongoRoleDefinitionType type) {
            this.type = Output.ofNullable(type);
            return this;
        }
        public MongoDBResourceMongoRoleDefinitionArgs build() {
            return new MongoDBResourceMongoRoleDefinitionArgs(accountName, databaseName, mongoRoleDefinitionId, privileges, resourceGroupName, roleName, roles, type);
        }
    }
}
