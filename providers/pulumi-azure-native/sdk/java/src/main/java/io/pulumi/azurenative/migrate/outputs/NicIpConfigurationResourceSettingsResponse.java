// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.migrate.outputs;

import io.pulumi.azurenative.migrate.outputs.LoadBalancerBackendAddressPoolReferenceResponse;
import io.pulumi.azurenative.migrate.outputs.LoadBalancerNatRuleReferenceResponse;
import io.pulumi.azurenative.migrate.outputs.PublicIpReferenceResponse;
import io.pulumi.azurenative.migrate.outputs.SubnetReferenceResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class NicIpConfigurationResourceSettingsResponse {
    /**
     * Gets or sets the references of the load balancer backend address pools.
     * 
     */
    private final @Nullable List<LoadBalancerBackendAddressPoolReferenceResponse> loadBalancerBackendAddressPools;
    /**
     * Gets or sets the references of the load balancer NAT rules.
     * 
     */
    private final @Nullable List<LoadBalancerNatRuleReferenceResponse> loadBalancerNatRules;
    /**
     * Gets or sets the IP configuration name.
     * 
     */
    private final @Nullable String name;
    /**
     * Gets or sets a value indicating whether this IP configuration is the primary.
     * 
     */
    private final @Nullable Boolean primary;
    /**
     * Gets or sets the private IP address of the network interface IP Configuration.
     * 
     */
    private final @Nullable String privateIpAddress;
    /**
     * Gets or sets the private IP address allocation method.
     * 
     */
    private final @Nullable String privateIpAllocationMethod;
    /**
     * Defines reference to a public IP.
     * 
     */
    private final @Nullable PublicIpReferenceResponse publicIp;
    /**
     * Defines reference to subnet.
     * 
     */
    private final @Nullable SubnetReferenceResponse subnet;

    @OutputCustomType.Constructor({"loadBalancerBackendAddressPools","loadBalancerNatRules","name","primary","privateIpAddress","privateIpAllocationMethod","publicIp","subnet"})
    private NicIpConfigurationResourceSettingsResponse(
        @Nullable List<LoadBalancerBackendAddressPoolReferenceResponse> loadBalancerBackendAddressPools,
        @Nullable List<LoadBalancerNatRuleReferenceResponse> loadBalancerNatRules,
        @Nullable String name,
        @Nullable Boolean primary,
        @Nullable String privateIpAddress,
        @Nullable String privateIpAllocationMethod,
        @Nullable PublicIpReferenceResponse publicIp,
        @Nullable SubnetReferenceResponse subnet) {
        this.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
        this.loadBalancerNatRules = loadBalancerNatRules;
        this.name = name;
        this.primary = primary;
        this.privateIpAddress = privateIpAddress;
        this.privateIpAllocationMethod = privateIpAllocationMethod;
        this.publicIp = publicIp;
        this.subnet = subnet;
    }

    /**
     * Gets or sets the references of the load balancer backend address pools.
     * 
     */
    public List<LoadBalancerBackendAddressPoolReferenceResponse> getLoadBalancerBackendAddressPools() {
        return this.loadBalancerBackendAddressPools == null ? List.of() : this.loadBalancerBackendAddressPools;
    }
    /**
     * Gets or sets the references of the load balancer NAT rules.
     * 
     */
    public List<LoadBalancerNatRuleReferenceResponse> getLoadBalancerNatRules() {
        return this.loadBalancerNatRules == null ? List.of() : this.loadBalancerNatRules;
    }
    /**
     * Gets or sets the IP configuration name.
     * 
     */
    public Optional<String> getName() {
        return Optional.ofNullable(this.name);
    }
    /**
     * Gets or sets a value indicating whether this IP configuration is the primary.
     * 
     */
    public Optional<Boolean> getPrimary() {
        return Optional.ofNullable(this.primary);
    }
    /**
     * Gets or sets the private IP address of the network interface IP Configuration.
     * 
     */
    public Optional<String> getPrivateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }
    /**
     * Gets or sets the private IP address allocation method.
     * 
     */
    public Optional<String> getPrivateIpAllocationMethod() {
        return Optional.ofNullable(this.privateIpAllocationMethod);
    }
    /**
     * Defines reference to a public IP.
     * 
     */
    public Optional<PublicIpReferenceResponse> getPublicIp() {
        return Optional.ofNullable(this.publicIp);
    }
    /**
     * Defines reference to subnet.
     * 
     */
    public Optional<SubnetReferenceResponse> getSubnet() {
        return Optional.ofNullable(this.subnet);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NicIpConfigurationResourceSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<LoadBalancerBackendAddressPoolReferenceResponse> loadBalancerBackendAddressPools;
        private @Nullable List<LoadBalancerNatRuleReferenceResponse> loadBalancerNatRules;
        private @Nullable String name;
        private @Nullable Boolean primary;
        private @Nullable String privateIpAddress;
        private @Nullable String privateIpAllocationMethod;
        private @Nullable PublicIpReferenceResponse publicIp;
        private @Nullable SubnetReferenceResponse subnet;

        public Builder() {
    	      // Empty
        }

        public Builder(NicIpConfigurationResourceSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.loadBalancerBackendAddressPools = defaults.loadBalancerBackendAddressPools;
    	      this.loadBalancerNatRules = defaults.loadBalancerNatRules;
    	      this.name = defaults.name;
    	      this.primary = defaults.primary;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAllocationMethod = defaults.privateIpAllocationMethod;
    	      this.publicIp = defaults.publicIp;
    	      this.subnet = defaults.subnet;
        }

        public Builder setLoadBalancerBackendAddressPools(@Nullable List<LoadBalancerBackendAddressPoolReferenceResponse> loadBalancerBackendAddressPools) {
            this.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
            return this;
        }

        public Builder setLoadBalancerNatRules(@Nullable List<LoadBalancerNatRuleReferenceResponse> loadBalancerNatRules) {
            this.loadBalancerNatRules = loadBalancerNatRules;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setPrimary(@Nullable Boolean primary) {
            this.primary = primary;
            return this;
        }

        public Builder setPrivateIpAddress(@Nullable String privateIpAddress) {
            this.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder setPrivateIpAllocationMethod(@Nullable String privateIpAllocationMethod) {
            this.privateIpAllocationMethod = privateIpAllocationMethod;
            return this;
        }

        public Builder setPublicIp(@Nullable PublicIpReferenceResponse publicIp) {
            this.publicIp = publicIp;
            return this;
        }

        public Builder setSubnet(@Nullable SubnetReferenceResponse subnet) {
            this.subnet = subnet;
            return this;
        }

        public NicIpConfigurationResourceSettingsResponse build() {
            return new NicIpConfigurationResourceSettingsResponse(loadBalancerBackendAddressPools, loadBalancerNatRules, name, primary, privateIpAddress, privateIpAllocationMethod, publicIp, subnet);
        }
    }
}
