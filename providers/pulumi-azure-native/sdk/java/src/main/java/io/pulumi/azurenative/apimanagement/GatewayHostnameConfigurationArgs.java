// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GatewayHostnameConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final GatewayHostnameConfigurationArgs Empty = new GatewayHostnameConfigurationArgs();

    /**
     * Identifier of Certificate entity that will be used for TLS connection establishment
     * 
     */
    @Import(name="certificateId")
      private final @Nullable Output<String> certificateId;

    public Output<String> getCertificateId() {
        return this.certificateId == null ? Output.empty() : this.certificateId;
    }

    /**
     * Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * 
     */
    @Import(name="gatewayId", required=true)
      private final Output<String> gatewayId;

    public Output<String> getGatewayId() {
        return this.gatewayId;
    }

    /**
     * Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * 
     */
    @Import(name="hcId")
      private final @Nullable Output<String> hcId;

    public Output<String> getHcId() {
        return this.hcId == null ? Output.empty() : this.hcId;
    }

    /**
     * Hostname value. Supports valid domain name, partial or full wildcard
     * 
     */
    @Import(name="hostname")
      private final @Nullable Output<String> hostname;

    public Output<String> getHostname() {
        return this.hostname == null ? Output.empty() : this.hostname;
    }

    /**
     * Specifies if HTTP/2.0 is supported
     * 
     */
    @Import(name="http2Enabled")
      private final @Nullable Output<Boolean> http2Enabled;

    public Output<Boolean> getHttp2Enabled() {
        return this.http2Enabled == null ? Output.empty() : this.http2Enabled;
    }

    /**
     * Determines whether gateway requests client certificate
     * 
     */
    @Import(name="negotiateClientCertificate")
      private final @Nullable Output<Boolean> negotiateClientCertificate;

    public Output<Boolean> getNegotiateClientCertificate() {
        return this.negotiateClientCertificate == null ? Output.empty() : this.negotiateClientCertificate;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * Specifies if TLS 1.0 is supported
     * 
     */
    @Import(name="tls10Enabled")
      private final @Nullable Output<Boolean> tls10Enabled;

    public Output<Boolean> getTls10Enabled() {
        return this.tls10Enabled == null ? Output.empty() : this.tls10Enabled;
    }

    /**
     * Specifies if TLS 1.1 is supported
     * 
     */
    @Import(name="tls11Enabled")
      private final @Nullable Output<Boolean> tls11Enabled;

    public Output<Boolean> getTls11Enabled() {
        return this.tls11Enabled == null ? Output.empty() : this.tls11Enabled;
    }

    public GatewayHostnameConfigurationArgs(
        @Nullable Output<String> certificateId,
        Output<String> gatewayId,
        @Nullable Output<String> hcId,
        @Nullable Output<String> hostname,
        @Nullable Output<Boolean> http2Enabled,
        @Nullable Output<Boolean> negotiateClientCertificate,
        Output<String> resourceGroupName,
        Output<String> serviceName,
        @Nullable Output<Boolean> tls10Enabled,
        @Nullable Output<Boolean> tls11Enabled) {
        this.certificateId = certificateId;
        this.gatewayId = Objects.requireNonNull(gatewayId, "expected parameter 'gatewayId' to be non-null");
        this.hcId = hcId;
        this.hostname = hostname;
        this.http2Enabled = http2Enabled;
        this.negotiateClientCertificate = negotiateClientCertificate;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.tls10Enabled = tls10Enabled;
        this.tls11Enabled = tls11Enabled;
    }

    private GatewayHostnameConfigurationArgs() {
        this.certificateId = Output.empty();
        this.gatewayId = Output.empty();
        this.hcId = Output.empty();
        this.hostname = Output.empty();
        this.http2Enabled = Output.empty();
        this.negotiateClientCertificate = Output.empty();
        this.resourceGroupName = Output.empty();
        this.serviceName = Output.empty();
        this.tls10Enabled = Output.empty();
        this.tls11Enabled = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GatewayHostnameConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> certificateId;
        private Output<String> gatewayId;
        private @Nullable Output<String> hcId;
        private @Nullable Output<String> hostname;
        private @Nullable Output<Boolean> http2Enabled;
        private @Nullable Output<Boolean> negotiateClientCertificate;
        private Output<String> resourceGroupName;
        private Output<String> serviceName;
        private @Nullable Output<Boolean> tls10Enabled;
        private @Nullable Output<Boolean> tls11Enabled;

        public Builder() {
    	      // Empty
        }

        public Builder(GatewayHostnameConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.gatewayId = defaults.gatewayId;
    	      this.hcId = defaults.hcId;
    	      this.hostname = defaults.hostname;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.negotiateClientCertificate = defaults.negotiateClientCertificate;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceName = defaults.serviceName;
    	      this.tls10Enabled = defaults.tls10Enabled;
    	      this.tls11Enabled = defaults.tls11Enabled;
        }

        public Builder certificateId(@Nullable Output<String> certificateId) {
            this.certificateId = certificateId;
            return this;
        }
        public Builder certificateId(@Nullable String certificateId) {
            this.certificateId = Output.ofNullable(certificateId);
            return this;
        }
        public Builder gatewayId(Output<String> gatewayId) {
            this.gatewayId = Objects.requireNonNull(gatewayId);
            return this;
        }
        public Builder gatewayId(String gatewayId) {
            this.gatewayId = Output.of(Objects.requireNonNull(gatewayId));
            return this;
        }
        public Builder hcId(@Nullable Output<String> hcId) {
            this.hcId = hcId;
            return this;
        }
        public Builder hcId(@Nullable String hcId) {
            this.hcId = Output.ofNullable(hcId);
            return this;
        }
        public Builder hostname(@Nullable Output<String> hostname) {
            this.hostname = hostname;
            return this;
        }
        public Builder hostname(@Nullable String hostname) {
            this.hostname = Output.ofNullable(hostname);
            return this;
        }
        public Builder http2Enabled(@Nullable Output<Boolean> http2Enabled) {
            this.http2Enabled = http2Enabled;
            return this;
        }
        public Builder http2Enabled(@Nullable Boolean http2Enabled) {
            this.http2Enabled = Output.ofNullable(http2Enabled);
            return this;
        }
        public Builder negotiateClientCertificate(@Nullable Output<Boolean> negotiateClientCertificate) {
            this.negotiateClientCertificate = negotiateClientCertificate;
            return this;
        }
        public Builder negotiateClientCertificate(@Nullable Boolean negotiateClientCertificate) {
            this.negotiateClientCertificate = Output.ofNullable(negotiateClientCertificate);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public Builder tls10Enabled(@Nullable Output<Boolean> tls10Enabled) {
            this.tls10Enabled = tls10Enabled;
            return this;
        }
        public Builder tls10Enabled(@Nullable Boolean tls10Enabled) {
            this.tls10Enabled = Output.ofNullable(tls10Enabled);
            return this;
        }
        public Builder tls11Enabled(@Nullable Output<Boolean> tls11Enabled) {
            this.tls11Enabled = tls11Enabled;
            return this;
        }
        public Builder tls11Enabled(@Nullable Boolean tls11Enabled) {
            this.tls11Enabled = Output.ofNullable(tls11Enabled);
            return this;
        }        public GatewayHostnameConfigurationArgs build() {
            return new GatewayHostnameConfigurationArgs(certificateId, gatewayId, hcId, hostname, http2Enabled, negotiateClientCertificate, resourceGroupName, serviceName, tls10Enabled, tls11Enabled);
        }
    }
}
