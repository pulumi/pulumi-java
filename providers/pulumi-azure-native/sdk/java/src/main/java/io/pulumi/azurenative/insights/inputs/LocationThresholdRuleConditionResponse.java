// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.azurenative.insights.inputs.RuleManagementEventDataSourceResponse;
import io.pulumi.azurenative.insights.inputs.RuleMetricDataSourceResponse;
import io.pulumi.core.Either;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LocationThresholdRuleConditionResponse extends io.pulumi.resources.InvokeArgs {

    public static final LocationThresholdRuleConditionResponse Empty = new LocationThresholdRuleConditionResponse();

    @InputImport(name="dataSource")
    private final @Nullable Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> dataSource;

    public Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> getDataSource() {
        return this.dataSource == null ? null : this.dataSource;
    }

    @InputImport(name="failedLocationCount", required=true)
    private final Integer failedLocationCount;

    public Integer getFailedLocationCount() {
        return this.failedLocationCount;
    }

    @InputImport(name="odataType", required=true)
    private final String odataType;

    public String getOdataType() {
        return this.odataType;
    }

    @InputImport(name="windowSize")
    private final @Nullable String windowSize;

    public Optional<String> getWindowSize() {
        return this.windowSize == null ? Optional.empty() : Optional.ofNullable(this.windowSize);
    }

    public LocationThresholdRuleConditionResponse(
        @Nullable Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> dataSource,
        Integer failedLocationCount,
        String odataType,
        @Nullable String windowSize) {
        this.dataSource = dataSource;
        this.failedLocationCount = Objects.requireNonNull(failedLocationCount, "expected parameter 'failedLocationCount' to be non-null");
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.windowSize = windowSize;
    }

    private LocationThresholdRuleConditionResponse() {
        this.dataSource = null;
        this.failedLocationCount = null;
        this.odataType = null;
        this.windowSize = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocationThresholdRuleConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> dataSource;
        private Integer failedLocationCount;
        private String odataType;
        private @Nullable String windowSize;

        public Builder() {
    	      // Empty
        }

        public Builder(LocationThresholdRuleConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSource = defaults.dataSource;
    	      this.failedLocationCount = defaults.failedLocationCount;
    	      this.odataType = defaults.odataType;
    	      this.windowSize = defaults.windowSize;
        }

        public Builder setDataSource(@Nullable Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> dataSource) {
            this.dataSource = dataSource;
            return this;
        }

        public Builder setFailedLocationCount(Integer failedLocationCount) {
            this.failedLocationCount = Objects.requireNonNull(failedLocationCount);
            return this;
        }

        public Builder setOdataType(String odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }

        public Builder setWindowSize(@Nullable String windowSize) {
            this.windowSize = windowSize;
            return this;
        }

        public LocationThresholdRuleConditionResponse build() {
            return new LocationThresholdRuleConditionResponse(dataSource, failedLocationCount, odataType, windowSize);
        }
    }
}
