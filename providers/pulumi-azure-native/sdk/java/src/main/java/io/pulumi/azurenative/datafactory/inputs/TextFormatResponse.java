// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TextFormatResponse extends io.pulumi.resources.InvokeArgs {

    public static final TextFormatResponse Empty = new TextFormatResponse();

    @InputImport(name="columnDelimiter")
    private final @Nullable Object columnDelimiter;

    public Optional<Object> getColumnDelimiter() {
        return this.columnDelimiter == null ? Optional.empty() : Optional.ofNullable(this.columnDelimiter);
    }

    @InputImport(name="deserializer")
    private final @Nullable Object deserializer;

    public Optional<Object> getDeserializer() {
        return this.deserializer == null ? Optional.empty() : Optional.ofNullable(this.deserializer);
    }

    @InputImport(name="encodingName")
    private final @Nullable Object encodingName;

    public Optional<Object> getEncodingName() {
        return this.encodingName == null ? Optional.empty() : Optional.ofNullable(this.encodingName);
    }

    @InputImport(name="escapeChar")
    private final @Nullable Object escapeChar;

    public Optional<Object> getEscapeChar() {
        return this.escapeChar == null ? Optional.empty() : Optional.ofNullable(this.escapeChar);
    }

    @InputImport(name="firstRowAsHeader")
    private final @Nullable Object firstRowAsHeader;

    public Optional<Object> getFirstRowAsHeader() {
        return this.firstRowAsHeader == null ? Optional.empty() : Optional.ofNullable(this.firstRowAsHeader);
    }

    @InputImport(name="nullValue")
    private final @Nullable Object nullValue;

    public Optional<Object> getNullValue() {
        return this.nullValue == null ? Optional.empty() : Optional.ofNullable(this.nullValue);
    }

    @InputImport(name="quoteChar")
    private final @Nullable Object quoteChar;

    public Optional<Object> getQuoteChar() {
        return this.quoteChar == null ? Optional.empty() : Optional.ofNullable(this.quoteChar);
    }

    @InputImport(name="rowDelimiter")
    private final @Nullable Object rowDelimiter;

    public Optional<Object> getRowDelimiter() {
        return this.rowDelimiter == null ? Optional.empty() : Optional.ofNullable(this.rowDelimiter);
    }

    @InputImport(name="serializer")
    private final @Nullable Object serializer;

    public Optional<Object> getSerializer() {
        return this.serializer == null ? Optional.empty() : Optional.ofNullable(this.serializer);
    }

    @InputImport(name="skipLineCount")
    private final @Nullable Object skipLineCount;

    public Optional<Object> getSkipLineCount() {
        return this.skipLineCount == null ? Optional.empty() : Optional.ofNullable(this.skipLineCount);
    }

    @InputImport(name="treatEmptyAsNull")
    private final @Nullable Object treatEmptyAsNull;

    public Optional<Object> getTreatEmptyAsNull() {
        return this.treatEmptyAsNull == null ? Optional.empty() : Optional.ofNullable(this.treatEmptyAsNull);
    }

    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    public TextFormatResponse(
        @Nullable Object columnDelimiter,
        @Nullable Object deserializer,
        @Nullable Object encodingName,
        @Nullable Object escapeChar,
        @Nullable Object firstRowAsHeader,
        @Nullable Object nullValue,
        @Nullable Object quoteChar,
        @Nullable Object rowDelimiter,
        @Nullable Object serializer,
        @Nullable Object skipLineCount,
        @Nullable Object treatEmptyAsNull,
        String type) {
        this.columnDelimiter = columnDelimiter;
        this.deserializer = deserializer;
        this.encodingName = encodingName;
        this.escapeChar = escapeChar;
        this.firstRowAsHeader = firstRowAsHeader;
        this.nullValue = nullValue;
        this.quoteChar = quoteChar;
        this.rowDelimiter = rowDelimiter;
        this.serializer = serializer;
        this.skipLineCount = skipLineCount;
        this.treatEmptyAsNull = treatEmptyAsNull;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private TextFormatResponse() {
        this.columnDelimiter = null;
        this.deserializer = null;
        this.encodingName = null;
        this.escapeChar = null;
        this.firstRowAsHeader = null;
        this.nullValue = null;
        this.quoteChar = null;
        this.rowDelimiter = null;
        this.serializer = null;
        this.skipLineCount = null;
        this.treatEmptyAsNull = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TextFormatResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Object columnDelimiter;
        private @Nullable Object deserializer;
        private @Nullable Object encodingName;
        private @Nullable Object escapeChar;
        private @Nullable Object firstRowAsHeader;
        private @Nullable Object nullValue;
        private @Nullable Object quoteChar;
        private @Nullable Object rowDelimiter;
        private @Nullable Object serializer;
        private @Nullable Object skipLineCount;
        private @Nullable Object treatEmptyAsNull;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(TextFormatResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnDelimiter = defaults.columnDelimiter;
    	      this.deserializer = defaults.deserializer;
    	      this.encodingName = defaults.encodingName;
    	      this.escapeChar = defaults.escapeChar;
    	      this.firstRowAsHeader = defaults.firstRowAsHeader;
    	      this.nullValue = defaults.nullValue;
    	      this.quoteChar = defaults.quoteChar;
    	      this.rowDelimiter = defaults.rowDelimiter;
    	      this.serializer = defaults.serializer;
    	      this.skipLineCount = defaults.skipLineCount;
    	      this.treatEmptyAsNull = defaults.treatEmptyAsNull;
    	      this.type = defaults.type;
        }

        public Builder setColumnDelimiter(@Nullable Object columnDelimiter) {
            this.columnDelimiter = columnDelimiter;
            return this;
        }

        public Builder setDeserializer(@Nullable Object deserializer) {
            this.deserializer = deserializer;
            return this;
        }

        public Builder setEncodingName(@Nullable Object encodingName) {
            this.encodingName = encodingName;
            return this;
        }

        public Builder setEscapeChar(@Nullable Object escapeChar) {
            this.escapeChar = escapeChar;
            return this;
        }

        public Builder setFirstRowAsHeader(@Nullable Object firstRowAsHeader) {
            this.firstRowAsHeader = firstRowAsHeader;
            return this;
        }

        public Builder setNullValue(@Nullable Object nullValue) {
            this.nullValue = nullValue;
            return this;
        }

        public Builder setQuoteChar(@Nullable Object quoteChar) {
            this.quoteChar = quoteChar;
            return this;
        }

        public Builder setRowDelimiter(@Nullable Object rowDelimiter) {
            this.rowDelimiter = rowDelimiter;
            return this;
        }

        public Builder setSerializer(@Nullable Object serializer) {
            this.serializer = serializer;
            return this;
        }

        public Builder setSkipLineCount(@Nullable Object skipLineCount) {
            this.skipLineCount = skipLineCount;
            return this;
        }

        public Builder setTreatEmptyAsNull(@Nullable Object treatEmptyAsNull) {
            this.treatEmptyAsNull = treatEmptyAsNull;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public TextFormatResponse build() {
            return new TextFormatResponse(columnDelimiter, deserializer, encodingName, escapeChar, firstRowAsHeader, nullValue, quoteChar, rowDelimiter, serializer, skipLineCount, treatEmptyAsNull, type);
        }
    }
}
