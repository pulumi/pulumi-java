// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.orbital.inputs;

import io.pulumi.azurenative.orbital.enums.Protocol;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * Customer End point to store/retrieve data during a contact.
 * 
 */
public final class EndPointArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndPointArgs Empty = new EndPointArgs();

    /**
     * Name of an end point.
     * 
     */
    @InputImport(name="endPointName", required=true)
      private final Input<String> endPointName;

    public Input<String> getEndPointName() {
        return this.endPointName;
    }

    /**
     * IP Address.
     * 
     */
    @InputImport(name="ipAddress", required=true)
      private final Input<String> ipAddress;

    public Input<String> getIpAddress() {
        return this.ipAddress;
    }

    /**
     * TCP port to listen on to receive data.
     * 
     */
    @InputImport(name="port", required=true)
      private final Input<String> port;

    public Input<String> getPort() {
        return this.port;
    }

    /**
     * Protocol either UDP or TCP.
     * 
     */
    @InputImport(name="protocol", required=true)
      private final Input<Either<String,Protocol>> protocol;

    public Input<Either<String,Protocol>> getProtocol() {
        return this.protocol;
    }

    public EndPointArgs(
        Input<String> endPointName,
        Input<String> ipAddress,
        Input<String> port,
        Input<Either<String,Protocol>> protocol) {
        this.endPointName = Objects.requireNonNull(endPointName, "expected parameter 'endPointName' to be non-null");
        this.ipAddress = Objects.requireNonNull(ipAddress, "expected parameter 'ipAddress' to be non-null");
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
    }

    private EndPointArgs() {
        this.endPointName = Input.empty();
        this.ipAddress = Input.empty();
        this.port = Input.empty();
        this.protocol = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> endPointName;
        private Input<String> ipAddress;
        private Input<String> port;
        private Input<Either<String,Protocol>> protocol;

        public Builder() {
    	      // Empty
        }

        public Builder(EndPointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endPointName = defaults.endPointName;
    	      this.ipAddress = defaults.ipAddress;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
        }

        public Builder endPointName(Input<String> endPointName) {
            this.endPointName = Objects.requireNonNull(endPointName);
            return this;
        }

        public Builder endPointName(String endPointName) {
            this.endPointName = Input.of(Objects.requireNonNull(endPointName));
            return this;
        }

        public Builder ipAddress(Input<String> ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Input.of(Objects.requireNonNull(ipAddress));
            return this;
        }

        public Builder port(Input<String> port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder port(String port) {
            this.port = Input.of(Objects.requireNonNull(port));
            return this;
        }

        public Builder protocol(Input<Either<String,Protocol>> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder protocol(Either<String,Protocol> protocol) {
            this.protocol = Input.of(Objects.requireNonNull(protocol));
            return this;
        }
        public EndPointArgs build() {
            return new EndPointArgs(endPointName, ipAddress, port, protocol);
        }
    }
}
