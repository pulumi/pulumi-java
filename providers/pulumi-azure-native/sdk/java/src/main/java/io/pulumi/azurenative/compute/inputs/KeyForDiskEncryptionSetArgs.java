// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.azurenative.compute.inputs.SourceVaultArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
 * 
 */
public final class KeyForDiskEncryptionSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final KeyForDiskEncryptionSetArgs Empty = new KeyForDiskEncryptionSetArgs();

    /**
     * Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
     * 
     */
    @InputImport(name="keyUrl", required=true)
      private final Input<String> keyUrl;

    public Input<String> getKeyUrl() {
        return this.keyUrl;
    }

    /**
     * Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
     * 
     */
    @InputImport(name="sourceVault")
      private final @Nullable Input<SourceVaultArgs> sourceVault;

    public Input<SourceVaultArgs> getSourceVault() {
        return this.sourceVault == null ? Input.empty() : this.sourceVault;
    }

    public KeyForDiskEncryptionSetArgs(
        Input<String> keyUrl,
        @Nullable Input<SourceVaultArgs> sourceVault) {
        this.keyUrl = Objects.requireNonNull(keyUrl, "expected parameter 'keyUrl' to be non-null");
        this.sourceVault = sourceVault;
    }

    private KeyForDiskEncryptionSetArgs() {
        this.keyUrl = Input.empty();
        this.sourceVault = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyForDiskEncryptionSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> keyUrl;
        private @Nullable Input<SourceVaultArgs> sourceVault;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyForDiskEncryptionSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keyUrl = defaults.keyUrl;
    	      this.sourceVault = defaults.sourceVault;
        }

        public Builder setKeyUrl(Input<String> keyUrl) {
            this.keyUrl = Objects.requireNonNull(keyUrl);
            return this;
        }

        public Builder setKeyUrl(String keyUrl) {
            this.keyUrl = Input.of(Objects.requireNonNull(keyUrl));
            return this;
        }

        public Builder setSourceVault(@Nullable Input<SourceVaultArgs> sourceVault) {
            this.sourceVault = sourceVault;
            return this;
        }

        public Builder setSourceVault(@Nullable SourceVaultArgs sourceVault) {
            this.sourceVault = Input.ofNullable(sourceVault);
            return this;
        }
        public KeyForDiskEncryptionSetArgs build() {
            return new KeyForDiskEncryptionSetArgs(keyUrl, sourceVault);
        }
    }
}
