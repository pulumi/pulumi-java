// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql.outputs;

import io.pulumi.azurenative.sql.outputs.InstanceFailoverGroupReadOnlyEndpointResponse;
import io.pulumi.azurenative.sql.outputs.InstanceFailoverGroupReadWriteEndpointResponse;
import io.pulumi.azurenative.sql.outputs.ManagedInstancePairInfoResponse;
import io.pulumi.azurenative.sql.outputs.PartnerRegionInfoResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetInstanceFailoverGroupResult {
    private final String id;
    private final List<ManagedInstancePairInfoResponse> managedInstancePairs;
    private final String name;
    private final List<PartnerRegionInfoResponse> partnerRegions;
    private final @Nullable InstanceFailoverGroupReadOnlyEndpointResponse readOnlyEndpoint;
    private final InstanceFailoverGroupReadWriteEndpointResponse readWriteEndpoint;
    private final String replicationRole;
    private final String replicationState;
    private final String type;

    @OutputCustomType.Constructor({"id","managedInstancePairs","name","partnerRegions","readOnlyEndpoint","readWriteEndpoint","replicationRole","replicationState","type"})
    private GetInstanceFailoverGroupResult(
        String id,
        List<ManagedInstancePairInfoResponse> managedInstancePairs,
        String name,
        List<PartnerRegionInfoResponse> partnerRegions,
        @Nullable InstanceFailoverGroupReadOnlyEndpointResponse readOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpointResponse readWriteEndpoint,
        String replicationRole,
        String replicationState,
        String type) {
        this.id = Objects.requireNonNull(id);
        this.managedInstancePairs = Objects.requireNonNull(managedInstancePairs);
        this.name = Objects.requireNonNull(name);
        this.partnerRegions = Objects.requireNonNull(partnerRegions);
        this.readOnlyEndpoint = readOnlyEndpoint;
        this.readWriteEndpoint = Objects.requireNonNull(readWriteEndpoint);
        this.replicationRole = Objects.requireNonNull(replicationRole);
        this.replicationState = Objects.requireNonNull(replicationState);
        this.type = Objects.requireNonNull(type);
    }

    public String getId() {
        return this.id;
    }
    public List<ManagedInstancePairInfoResponse> getManagedInstancePairs() {
        return this.managedInstancePairs;
    }
    public String getName() {
        return this.name;
    }
    public List<PartnerRegionInfoResponse> getPartnerRegions() {
        return this.partnerRegions;
    }
    public Optional<InstanceFailoverGroupReadOnlyEndpointResponse> getReadOnlyEndpoint() {
        return Optional.ofNullable(this.readOnlyEndpoint);
    }
    public InstanceFailoverGroupReadWriteEndpointResponse getReadWriteEndpoint() {
        return this.readWriteEndpoint;
    }
    public String getReplicationRole() {
        return this.replicationRole;
    }
    public String getReplicationState() {
        return this.replicationState;
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceFailoverGroupResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String id;
        private List<ManagedInstancePairInfoResponse> managedInstancePairs;
        private String name;
        private List<PartnerRegionInfoResponse> partnerRegions;
        private @Nullable InstanceFailoverGroupReadOnlyEndpointResponse readOnlyEndpoint;
        private InstanceFailoverGroupReadWriteEndpointResponse readWriteEndpoint;
        private String replicationRole;
        private String replicationState;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceFailoverGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.managedInstancePairs = defaults.managedInstancePairs;
    	      this.name = defaults.name;
    	      this.partnerRegions = defaults.partnerRegions;
    	      this.readOnlyEndpoint = defaults.readOnlyEndpoint;
    	      this.readWriteEndpoint = defaults.readWriteEndpoint;
    	      this.replicationRole = defaults.replicationRole;
    	      this.replicationState = defaults.replicationState;
    	      this.type = defaults.type;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setManagedInstancePairs(List<ManagedInstancePairInfoResponse> managedInstancePairs) {
            this.managedInstancePairs = Objects.requireNonNull(managedInstancePairs);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPartnerRegions(List<PartnerRegionInfoResponse> partnerRegions) {
            this.partnerRegions = Objects.requireNonNull(partnerRegions);
            return this;
        }

        public Builder setReadOnlyEndpoint(@Nullable InstanceFailoverGroupReadOnlyEndpointResponse readOnlyEndpoint) {
            this.readOnlyEndpoint = readOnlyEndpoint;
            return this;
        }

        public Builder setReadWriteEndpoint(InstanceFailoverGroupReadWriteEndpointResponse readWriteEndpoint) {
            this.readWriteEndpoint = Objects.requireNonNull(readWriteEndpoint);
            return this;
        }

        public Builder setReplicationRole(String replicationRole) {
            this.replicationRole = Objects.requireNonNull(replicationRole);
            return this;
        }

        public Builder setReplicationState(String replicationState) {
            this.replicationState = Objects.requireNonNull(replicationState);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetInstanceFailoverGroupResult build() {
            return new GetInstanceFailoverGroupResult(id, managedInstancePairs, name, partnerRegions, readOnlyEndpoint, readWriteEndpoint, replicationRole, replicationState, type);
        }
    }
}
