// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.blueprint.inputs;

import io.pulumi.azurenative.blueprint.inputs.KeyVaultReferenceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Reference to a Key Vault secret.
 * 
 */
public final class SecretValueReferenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final SecretValueReferenceArgs Empty = new SecretValueReferenceArgs();

    /**
     * Specifies the reference to a given Azure Key Vault.
     * 
     */
    @InputImport(name="keyVault", required=true)
    private final Input<KeyVaultReferenceArgs> keyVault;

    public Input<KeyVaultReferenceArgs> getKeyVault() {
        return this.keyVault;
    }

    /**
     * Name of the secret.
     * 
     */
    @InputImport(name="secretName", required=true)
    private final Input<String> secretName;

    public Input<String> getSecretName() {
        return this.secretName;
    }

    /**
     * The version of the secret to use. If left blank, the latest version of the secret is used.
     * 
     */
    @InputImport(name="secretVersion")
    private final @Nullable Input<String> secretVersion;

    public Input<String> getSecretVersion() {
        return this.secretVersion == null ? Input.empty() : this.secretVersion;
    }

    public SecretValueReferenceArgs(
        Input<KeyVaultReferenceArgs> keyVault,
        Input<String> secretName,
        @Nullable Input<String> secretVersion) {
        this.keyVault = Objects.requireNonNull(keyVault, "expected parameter 'keyVault' to be non-null");
        this.secretName = Objects.requireNonNull(secretName, "expected parameter 'secretName' to be non-null");
        this.secretVersion = secretVersion;
    }

    private SecretValueReferenceArgs() {
        this.keyVault = Input.empty();
        this.secretName = Input.empty();
        this.secretVersion = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretValueReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<KeyVaultReferenceArgs> keyVault;
        private Input<String> secretName;
        private @Nullable Input<String> secretVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretValueReferenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keyVault = defaults.keyVault;
    	      this.secretName = defaults.secretName;
    	      this.secretVersion = defaults.secretVersion;
        }

        public Builder setKeyVault(Input<KeyVaultReferenceArgs> keyVault) {
            this.keyVault = Objects.requireNonNull(keyVault);
            return this;
        }

        public Builder setKeyVault(KeyVaultReferenceArgs keyVault) {
            this.keyVault = Input.of(Objects.requireNonNull(keyVault));
            return this;
        }

        public Builder setSecretName(Input<String> secretName) {
            this.secretName = Objects.requireNonNull(secretName);
            return this;
        }

        public Builder setSecretName(String secretName) {
            this.secretName = Input.of(Objects.requireNonNull(secretName));
            return this;
        }

        public Builder setSecretVersion(@Nullable Input<String> secretVersion) {
            this.secretVersion = secretVersion;
            return this;
        }

        public Builder setSecretVersion(@Nullable String secretVersion) {
            this.secretVersion = Input.ofNullable(secretVersion);
            return this;
        }

        public SecretValueReferenceArgs build() {
            return new SecretValueReferenceArgs(keyVault, secretName, secretVersion);
        }
    }
}
