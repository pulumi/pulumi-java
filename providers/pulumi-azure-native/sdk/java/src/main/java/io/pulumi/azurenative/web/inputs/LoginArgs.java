// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.inputs.CookieExpirationArgs;
import io.pulumi.azurenative.web.inputs.LoginRoutesArgs;
import io.pulumi.azurenative.web.inputs.NonceArgs;
import io.pulumi.azurenative.web.inputs.TokenStoreArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The configuration settings of the login flow of users using App Service Authentication/Authorization.
 * 
 */
public final class LoginArgs extends io.pulumi.resources.ResourceArgs {

    public static final LoginArgs Empty = new LoginArgs();

    /**
     * External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     * 
     */
    @InputImport(name="allowedExternalRedirectUrls")
        private final @Nullable Input<List<String>> allowedExternalRedirectUrls;

    public Input<List<String>> getAllowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls == null ? Input.empty() : this.allowedExternalRedirectUrls;
    }

    /**
     * The configuration settings of the session cookie's expiration.
     * 
     */
    @InputImport(name="cookieExpiration")
        private final @Nullable Input<CookieExpirationArgs> cookieExpiration;

    public Input<CookieExpirationArgs> getCookieExpiration() {
        return this.cookieExpiration == null ? Input.empty() : this.cookieExpiration;
    }

    /**
     * The configuration settings of the nonce used in the login flow.
     * 
     */
    @InputImport(name="nonce")
        private final @Nullable Input<NonceArgs> nonce;

    public Input<NonceArgs> getNonce() {
        return this.nonce == null ? Input.empty() : this.nonce;
    }

    /**
     * <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="preserveUrlFragmentsForLogins")
        private final @Nullable Input<Boolean> preserveUrlFragmentsForLogins;

    public Input<Boolean> getPreserveUrlFragmentsForLogins() {
        return this.preserveUrlFragmentsForLogins == null ? Input.empty() : this.preserveUrlFragmentsForLogins;
    }

    /**
     * The routes that specify the endpoints used for login and logout requests.
     * 
     */
    @InputImport(name="routes")
        private final @Nullable Input<LoginRoutesArgs> routes;

    public Input<LoginRoutesArgs> getRoutes() {
        return this.routes == null ? Input.empty() : this.routes;
    }

    /**
     * The configuration settings of the token store.
     * 
     */
    @InputImport(name="tokenStore")
        private final @Nullable Input<TokenStoreArgs> tokenStore;

    public Input<TokenStoreArgs> getTokenStore() {
        return this.tokenStore == null ? Input.empty() : this.tokenStore;
    }

    public LoginArgs(
        @Nullable Input<List<String>> allowedExternalRedirectUrls,
        @Nullable Input<CookieExpirationArgs> cookieExpiration,
        @Nullable Input<NonceArgs> nonce,
        @Nullable Input<Boolean> preserveUrlFragmentsForLogins,
        @Nullable Input<LoginRoutesArgs> routes,
        @Nullable Input<TokenStoreArgs> tokenStore) {
        this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
        this.cookieExpiration = cookieExpiration;
        this.nonce = nonce;
        this.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
        this.routes = routes;
        this.tokenStore = tokenStore;
    }

    private LoginArgs() {
        this.allowedExternalRedirectUrls = Input.empty();
        this.cookieExpiration = Input.empty();
        this.nonce = Input.empty();
        this.preserveUrlFragmentsForLogins = Input.empty();
        this.routes = Input.empty();
        this.tokenStore = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> allowedExternalRedirectUrls;
        private @Nullable Input<CookieExpirationArgs> cookieExpiration;
        private @Nullable Input<NonceArgs> nonce;
        private @Nullable Input<Boolean> preserveUrlFragmentsForLogins;
        private @Nullable Input<LoginRoutesArgs> routes;
        private @Nullable Input<TokenStoreArgs> tokenStore;

        public Builder() {
    	      // Empty
        }

        public Builder(LoginArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedExternalRedirectUrls = defaults.allowedExternalRedirectUrls;
    	      this.cookieExpiration = defaults.cookieExpiration;
    	      this.nonce = defaults.nonce;
    	      this.preserveUrlFragmentsForLogins = defaults.preserveUrlFragmentsForLogins;
    	      this.routes = defaults.routes;
    	      this.tokenStore = defaults.tokenStore;
        }

        public Builder setAllowedExternalRedirectUrls(@Nullable Input<List<String>> allowedExternalRedirectUrls) {
            this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }

        public Builder setAllowedExternalRedirectUrls(@Nullable List<String> allowedExternalRedirectUrls) {
            this.allowedExternalRedirectUrls = Input.ofNullable(allowedExternalRedirectUrls);
            return this;
        }

        public Builder setCookieExpiration(@Nullable Input<CookieExpirationArgs> cookieExpiration) {
            this.cookieExpiration = cookieExpiration;
            return this;
        }

        public Builder setCookieExpiration(@Nullable CookieExpirationArgs cookieExpiration) {
            this.cookieExpiration = Input.ofNullable(cookieExpiration);
            return this;
        }

        public Builder setNonce(@Nullable Input<NonceArgs> nonce) {
            this.nonce = nonce;
            return this;
        }

        public Builder setNonce(@Nullable NonceArgs nonce) {
            this.nonce = Input.ofNullable(nonce);
            return this;
        }

        public Builder setPreserveUrlFragmentsForLogins(@Nullable Input<Boolean> preserveUrlFragmentsForLogins) {
            this.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
            return this;
        }

        public Builder setPreserveUrlFragmentsForLogins(@Nullable Boolean preserveUrlFragmentsForLogins) {
            this.preserveUrlFragmentsForLogins = Input.ofNullable(preserveUrlFragmentsForLogins);
            return this;
        }

        public Builder setRoutes(@Nullable Input<LoginRoutesArgs> routes) {
            this.routes = routes;
            return this;
        }

        public Builder setRoutes(@Nullable LoginRoutesArgs routes) {
            this.routes = Input.ofNullable(routes);
            return this;
        }

        public Builder setTokenStore(@Nullable Input<TokenStoreArgs> tokenStore) {
            this.tokenStore = tokenStore;
            return this;
        }

        public Builder setTokenStore(@Nullable TokenStoreArgs tokenStore) {
            this.tokenStore = Input.ofNullable(tokenStore);
            return this;
        }
        public LoginArgs build() {
            return new LoginArgs(allowedExternalRedirectUrls, cookieExpiration, nonce, preserveUrlFragmentsForLogins, routes, tokenStore);
        }
    }
}
