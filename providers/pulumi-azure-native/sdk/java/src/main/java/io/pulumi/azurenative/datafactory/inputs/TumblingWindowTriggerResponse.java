// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.RetryPolicyResponse;
import io.pulumi.azurenative.datafactory.inputs.SelfDependencyTumblingWindowTriggerReferenceResponse;
import io.pulumi.azurenative.datafactory.inputs.TriggerDependencyReferenceResponse;
import io.pulumi.azurenative.datafactory.inputs.TriggerPipelineReferenceResponse;
import io.pulumi.azurenative.datafactory.inputs.TumblingWindowTriggerDependencyReferenceResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
 * 
 */
public final class TumblingWindowTriggerResponse extends io.pulumi.resources.InvokeArgs {

    public static final TumblingWindowTriggerResponse Empty = new TumblingWindowTriggerResponse();

    /**
     * List of tags that can be used for describing the trigger.
     * 
     */
    @InputImport(name="annotations")
      private final @Nullable List<Object> annotations;

    public List<Object> getAnnotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }

    /**
     * Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @InputImport(name="delay")
      private final @Nullable Object delay;

    public Optional<Object> getDelay() {
        return this.delay == null ? Optional.empty() : Optional.ofNullable(this.delay);
    }

    /**
     * Triggers that this trigger depends on. Only tumbling window triggers are supported.
     * 
     */
    @InputImport(name="dependsOn")
      private final @Nullable List<Object> dependsOn;

    public List<Object> getDependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }

    /**
     * Trigger description.
     * 
     */
    @InputImport(name="description")
      private final @Nullable String description;

    public Optional<String> getDescription() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
     * 
     */
    @InputImport(name="endTime")
      private final @Nullable String endTime;

    public Optional<String> getEndTime() {
        return this.endTime == null ? Optional.empty() : Optional.ofNullable(this.endTime);
    }

    /**
     * The frequency of the time windows.
     * 
     */
    @InputImport(name="frequency", required=true)
      private final String frequency;

    public String getFrequency() {
        return this.frequency;
    }

    /**
     * The interval of the time windows. The minimum interval allowed is 15 Minutes.
     * 
     */
    @InputImport(name="interval", required=true)
      private final Integer interval;

    public Integer getInterval() {
        return this.interval;
    }

    /**
     * The max number of parallel time windows (ready for execution) for which a new run is triggered.
     * 
     */
    @InputImport(name="maxConcurrency", required=true)
      private final Integer maxConcurrency;

    public Integer getMaxConcurrency() {
        return this.maxConcurrency;
    }

    /**
     * Pipeline for which runs are created when an event is fired for trigger window that is ready.
     * 
     */
    @InputImport(name="pipeline", required=true)
      private final TriggerPipelineReferenceResponse pipeline;

    public TriggerPipelineReferenceResponse getPipeline() {
        return this.pipeline;
    }

    /**
     * Retry policy that will be applied for failed pipeline runs.
     * 
     */
    @InputImport(name="retryPolicy")
      private final @Nullable RetryPolicyResponse retryPolicy;

    public Optional<RetryPolicyResponse> getRetryPolicy() {
        return this.retryPolicy == null ? Optional.empty() : Optional.ofNullable(this.retryPolicy);
    }

    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    @InputImport(name="runtimeState", required=true)
      private final String runtimeState;

    public String getRuntimeState() {
        return this.runtimeState;
    }

    /**
     * The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
     * 
     */
    @InputImport(name="startTime", required=true)
      private final String startTime;

    public String getStartTime() {
        return this.startTime;
    }

    /**
     * Trigger type.
     * Expected value is 'TumblingWindowTrigger'.
     * 
     */
    @InputImport(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    public TumblingWindowTriggerResponse(
        @Nullable List<Object> annotations,
        @Nullable Object delay,
        @Nullable List<Object> dependsOn,
        @Nullable String description,
        @Nullable String endTime,
        String frequency,
        Integer interval,
        Integer maxConcurrency,
        TriggerPipelineReferenceResponse pipeline,
        @Nullable RetryPolicyResponse retryPolicy,
        String runtimeState,
        String startTime,
        String type) {
        this.annotations = annotations;
        this.delay = delay;
        this.dependsOn = dependsOn;
        this.description = description;
        this.endTime = endTime;
        this.frequency = Objects.requireNonNull(frequency, "expected parameter 'frequency' to be non-null");
        this.interval = Objects.requireNonNull(interval, "expected parameter 'interval' to be non-null");
        this.maxConcurrency = Objects.requireNonNull(maxConcurrency, "expected parameter 'maxConcurrency' to be non-null");
        this.pipeline = Objects.requireNonNull(pipeline, "expected parameter 'pipeline' to be non-null");
        this.retryPolicy = retryPolicy;
        this.runtimeState = Objects.requireNonNull(runtimeState, "expected parameter 'runtimeState' to be non-null");
        this.startTime = Objects.requireNonNull(startTime, "expected parameter 'startTime' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private TumblingWindowTriggerResponse() {
        this.annotations = List.of();
        this.delay = null;
        this.dependsOn = List.of();
        this.description = null;
        this.endTime = null;
        this.frequency = null;
        this.interval = null;
        this.maxConcurrency = null;
        this.pipeline = null;
        this.retryPolicy = null;
        this.runtimeState = null;
        this.startTime = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TumblingWindowTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<Object> annotations;
        private @Nullable Object delay;
        private @Nullable List<Object> dependsOn;
        private @Nullable String description;
        private @Nullable String endTime;
        private String frequency;
        private Integer interval;
        private Integer maxConcurrency;
        private TriggerPipelineReferenceResponse pipeline;
        private @Nullable RetryPolicyResponse retryPolicy;
        private String runtimeState;
        private String startTime;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(TumblingWindowTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.delay = defaults.delay;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.endTime = defaults.endTime;
    	      this.frequency = defaults.frequency;
    	      this.interval = defaults.interval;
    	      this.maxConcurrency = defaults.maxConcurrency;
    	      this.pipeline = defaults.pipeline;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.runtimeState = defaults.runtimeState;
    	      this.startTime = defaults.startTime;
    	      this.type = defaults.type;
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }

        public Builder delay(@Nullable Object delay) {
            this.delay = delay;
            return this;
        }

        public Builder dependsOn(@Nullable List<Object> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder endTime(@Nullable String endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder frequency(String frequency) {
            this.frequency = Objects.requireNonNull(frequency);
            return this;
        }

        public Builder interval(Integer interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }

        public Builder maxConcurrency(Integer maxConcurrency) {
            this.maxConcurrency = Objects.requireNonNull(maxConcurrency);
            return this;
        }

        public Builder pipeline(TriggerPipelineReferenceResponse pipeline) {
            this.pipeline = Objects.requireNonNull(pipeline);
            return this;
        }

        public Builder retryPolicy(@Nullable RetryPolicyResponse retryPolicy) {
            this.retryPolicy = retryPolicy;
            return this;
        }

        public Builder runtimeState(String runtimeState) {
            this.runtimeState = Objects.requireNonNull(runtimeState);
            return this;
        }

        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public TumblingWindowTriggerResponse build() {
            return new TumblingWindowTriggerResponse(annotations, delay, dependsOn, description, endTime, frequency, interval, maxConcurrency, pipeline, retryPolicy, runtimeState, startTime, type);
        }
    }
}
