// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.inputs;

import io.pulumi.azurenative.cdn.inputs.MatchConditionResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines a rate limiting rule that can be included in a waf policy
 * 
 */
public final class RateLimitRuleResponse extends io.pulumi.resources.InvokeArgs {

    public static final RateLimitRuleResponse Empty = new RateLimitRuleResponse();

    /**
     * Describes what action to be applied when rule matches
     * 
     */
    @Import(name="action", required=true)
      private final String action;

    public String getAction() {
        return this.action;
    }

    /**
     * Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
     * 
     */
    @Import(name="enabledState")
      private final @Nullable String enabledState;

    public Optional<String> getEnabledState() {
        return this.enabledState == null ? Optional.empty() : Optional.ofNullable(this.enabledState);
    }

    /**
     * List of match conditions.
     * 
     */
    @Import(name="matchConditions", required=true)
      private final List<MatchConditionResponse> matchConditions;

    public List<MatchConditionResponse> getMatchConditions() {
        return this.matchConditions;
    }

    /**
     * Defines the name of the custom rule
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * Defines in what order this rule be evaluated in the overall list of custom rules
     * 
     */
    @Import(name="priority", required=true)
      private final Integer priority;

    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Defines rate limit duration. Default is 1 minute.
     * 
     */
    @Import(name="rateLimitDurationInMinutes", required=true)
      private final Integer rateLimitDurationInMinutes;

    public Integer getRateLimitDurationInMinutes() {
        return this.rateLimitDurationInMinutes;
    }

    /**
     * Defines rate limit threshold.
     * 
     */
    @Import(name="rateLimitThreshold", required=true)
      private final Integer rateLimitThreshold;

    public Integer getRateLimitThreshold() {
        return this.rateLimitThreshold;
    }

    public RateLimitRuleResponse(
        String action,
        @Nullable String enabledState,
        List<MatchConditionResponse> matchConditions,
        String name,
        Integer priority,
        Integer rateLimitDurationInMinutes,
        Integer rateLimitThreshold) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.enabledState = enabledState;
        this.matchConditions = Objects.requireNonNull(matchConditions, "expected parameter 'matchConditions' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.priority = Objects.requireNonNull(priority, "expected parameter 'priority' to be non-null");
        this.rateLimitDurationInMinutes = Objects.requireNonNull(rateLimitDurationInMinutes, "expected parameter 'rateLimitDurationInMinutes' to be non-null");
        this.rateLimitThreshold = Objects.requireNonNull(rateLimitThreshold, "expected parameter 'rateLimitThreshold' to be non-null");
    }

    private RateLimitRuleResponse() {
        this.action = null;
        this.enabledState = null;
        this.matchConditions = List.of();
        this.name = null;
        this.priority = null;
        this.rateLimitDurationInMinutes = null;
        this.rateLimitThreshold = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RateLimitRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String action;
        private @Nullable String enabledState;
        private List<MatchConditionResponse> matchConditions;
        private String name;
        private Integer priority;
        private Integer rateLimitDurationInMinutes;
        private Integer rateLimitThreshold;

        public Builder() {
    	      // Empty
        }

        public Builder(RateLimitRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.enabledState = defaults.enabledState;
    	      this.matchConditions = defaults.matchConditions;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.rateLimitDurationInMinutes = defaults.rateLimitDurationInMinutes;
    	      this.rateLimitThreshold = defaults.rateLimitThreshold;
        }

        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder enabledState(@Nullable String enabledState) {
            this.enabledState = enabledState;
            return this;
        }
        public Builder matchConditions(List<MatchConditionResponse> matchConditions) {
            this.matchConditions = Objects.requireNonNull(matchConditions);
            return this;
        }
        public Builder matchConditions(MatchConditionResponse... matchConditions) {
            return matchConditions(List.of(matchConditions));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        public Builder rateLimitDurationInMinutes(Integer rateLimitDurationInMinutes) {
            this.rateLimitDurationInMinutes = Objects.requireNonNull(rateLimitDurationInMinutes);
            return this;
        }
        public Builder rateLimitThreshold(Integer rateLimitThreshold) {
            this.rateLimitThreshold = Objects.requireNonNull(rateLimitThreshold);
            return this;
        }        public RateLimitRuleResponse build() {
            return new RateLimitRuleResponse(action, enabledState, matchConditions, name, priority, rateLimitDurationInMinutes, rateLimitThreshold);
        }
    }
}
