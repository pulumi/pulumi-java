// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class EdifactEnvelopeSettingsResponse {
    private final @Nullable String applicationReferenceId;
    private final Boolean applyDelimiterStringAdvice;
    private final @Nullable String communicationAgreementId;
    private final Boolean createGroupingSegments;
    private final Boolean enableDefaultGroupHeaders;
    private final @Nullable String functionalGroupId;
    private final @Nullable String groupApplicationPassword;
    private final @Nullable String groupApplicationReceiverId;
    private final @Nullable String groupApplicationReceiverQualifier;
    private final @Nullable String groupApplicationSenderId;
    private final @Nullable String groupApplicationSenderQualifier;
    private final @Nullable String groupAssociationAssignedCode;
    private final Double groupControlNumberLowerBound;
    private final @Nullable String groupControlNumberPrefix;
    private final @Nullable String groupControlNumberSuffix;
    private final Double groupControlNumberUpperBound;
    private final @Nullable String groupControllingAgencyCode;
    private final @Nullable String groupMessageRelease;
    private final @Nullable String groupMessageVersion;
    private final Double interchangeControlNumberLowerBound;
    private final @Nullable String interchangeControlNumberPrefix;
    private final @Nullable String interchangeControlNumberSuffix;
    private final Double interchangeControlNumberUpperBound;
    private final Boolean isTestInterchange;
    private final Boolean overwriteExistingTransactionSetControlNumber;
    private final @Nullable String processingPriorityCode;
    private final @Nullable String receiverInternalIdentification;
    private final @Nullable String receiverInternalSubIdentification;
    private final @Nullable String receiverReverseRoutingAddress;
    private final @Nullable String recipientReferencePasswordQualifier;
    private final @Nullable String recipientReferencePasswordValue;
    private final Boolean rolloverGroupControlNumber;
    private final Boolean rolloverInterchangeControlNumber;
    private final Boolean rolloverTransactionSetControlNumber;
    private final @Nullable String senderInternalIdentification;
    private final @Nullable String senderInternalSubIdentification;
    private final @Nullable String senderReverseRoutingAddress;
    private final Double transactionSetControlNumberLowerBound;
    private final @Nullable String transactionSetControlNumberPrefix;
    private final @Nullable String transactionSetControlNumberSuffix;
    private final Double transactionSetControlNumberUpperBound;

    @OutputCustomType.Constructor({"applicationReferenceId","applyDelimiterStringAdvice","communicationAgreementId","createGroupingSegments","enableDefaultGroupHeaders","functionalGroupId","groupApplicationPassword","groupApplicationReceiverId","groupApplicationReceiverQualifier","groupApplicationSenderId","groupApplicationSenderQualifier","groupAssociationAssignedCode","groupControlNumberLowerBound","groupControlNumberPrefix","groupControlNumberSuffix","groupControlNumberUpperBound","groupControllingAgencyCode","groupMessageRelease","groupMessageVersion","interchangeControlNumberLowerBound","interchangeControlNumberPrefix","interchangeControlNumberSuffix","interchangeControlNumberUpperBound","isTestInterchange","overwriteExistingTransactionSetControlNumber","processingPriorityCode","receiverInternalIdentification","receiverInternalSubIdentification","receiverReverseRoutingAddress","recipientReferencePasswordQualifier","recipientReferencePasswordValue","rolloverGroupControlNumber","rolloverInterchangeControlNumber","rolloverTransactionSetControlNumber","senderInternalIdentification","senderInternalSubIdentification","senderReverseRoutingAddress","transactionSetControlNumberLowerBound","transactionSetControlNumberPrefix","transactionSetControlNumberSuffix","transactionSetControlNumberUpperBound"})
    private EdifactEnvelopeSettingsResponse(
        @Nullable String applicationReferenceId,
        Boolean applyDelimiterStringAdvice,
        @Nullable String communicationAgreementId,
        Boolean createGroupingSegments,
        Boolean enableDefaultGroupHeaders,
        @Nullable String functionalGroupId,
        @Nullable String groupApplicationPassword,
        @Nullable String groupApplicationReceiverId,
        @Nullable String groupApplicationReceiverQualifier,
        @Nullable String groupApplicationSenderId,
        @Nullable String groupApplicationSenderQualifier,
        @Nullable String groupAssociationAssignedCode,
        Double groupControlNumberLowerBound,
        @Nullable String groupControlNumberPrefix,
        @Nullable String groupControlNumberSuffix,
        Double groupControlNumberUpperBound,
        @Nullable String groupControllingAgencyCode,
        @Nullable String groupMessageRelease,
        @Nullable String groupMessageVersion,
        Double interchangeControlNumberLowerBound,
        @Nullable String interchangeControlNumberPrefix,
        @Nullable String interchangeControlNumberSuffix,
        Double interchangeControlNumberUpperBound,
        Boolean isTestInterchange,
        Boolean overwriteExistingTransactionSetControlNumber,
        @Nullable String processingPriorityCode,
        @Nullable String receiverInternalIdentification,
        @Nullable String receiverInternalSubIdentification,
        @Nullable String receiverReverseRoutingAddress,
        @Nullable String recipientReferencePasswordQualifier,
        @Nullable String recipientReferencePasswordValue,
        Boolean rolloverGroupControlNumber,
        Boolean rolloverInterchangeControlNumber,
        Boolean rolloverTransactionSetControlNumber,
        @Nullable String senderInternalIdentification,
        @Nullable String senderInternalSubIdentification,
        @Nullable String senderReverseRoutingAddress,
        Double transactionSetControlNumberLowerBound,
        @Nullable String transactionSetControlNumberPrefix,
        @Nullable String transactionSetControlNumberSuffix,
        Double transactionSetControlNumberUpperBound) {
        this.applicationReferenceId = applicationReferenceId;
        this.applyDelimiterStringAdvice = Objects.requireNonNull(applyDelimiterStringAdvice);
        this.communicationAgreementId = communicationAgreementId;
        this.createGroupingSegments = Objects.requireNonNull(createGroupingSegments);
        this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
        this.functionalGroupId = functionalGroupId;
        this.groupApplicationPassword = groupApplicationPassword;
        this.groupApplicationReceiverId = groupApplicationReceiverId;
        this.groupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
        this.groupApplicationSenderId = groupApplicationSenderId;
        this.groupApplicationSenderQualifier = groupApplicationSenderQualifier;
        this.groupAssociationAssignedCode = groupAssociationAssignedCode;
        this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
        this.groupControlNumberPrefix = groupControlNumberPrefix;
        this.groupControlNumberSuffix = groupControlNumberSuffix;
        this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
        this.groupControllingAgencyCode = groupControllingAgencyCode;
        this.groupMessageRelease = groupMessageRelease;
        this.groupMessageVersion = groupMessageVersion;
        this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
        this.interchangeControlNumberPrefix = interchangeControlNumberPrefix;
        this.interchangeControlNumberSuffix = interchangeControlNumberSuffix;
        this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
        this.isTestInterchange = Objects.requireNonNull(isTestInterchange);
        this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
        this.processingPriorityCode = processingPriorityCode;
        this.receiverInternalIdentification = receiverInternalIdentification;
        this.receiverInternalSubIdentification = receiverInternalSubIdentification;
        this.receiverReverseRoutingAddress = receiverReverseRoutingAddress;
        this.recipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
        this.recipientReferencePasswordValue = recipientReferencePasswordValue;
        this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
        this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
        this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
        this.senderInternalIdentification = senderInternalIdentification;
        this.senderInternalSubIdentification = senderInternalSubIdentification;
        this.senderReverseRoutingAddress = senderReverseRoutingAddress;
        this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
        this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
        this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
        this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
    }

    public Optional<String> getApplicationReferenceId() {
        return Optional.ofNullable(this.applicationReferenceId);
    }
    public Boolean getApplyDelimiterStringAdvice() {
        return this.applyDelimiterStringAdvice;
    }
    public Optional<String> getCommunicationAgreementId() {
        return Optional.ofNullable(this.communicationAgreementId);
    }
    public Boolean getCreateGroupingSegments() {
        return this.createGroupingSegments;
    }
    public Boolean getEnableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }
    public Optional<String> getFunctionalGroupId() {
        return Optional.ofNullable(this.functionalGroupId);
    }
    public Optional<String> getGroupApplicationPassword() {
        return Optional.ofNullable(this.groupApplicationPassword);
    }
    public Optional<String> getGroupApplicationReceiverId() {
        return Optional.ofNullable(this.groupApplicationReceiverId);
    }
    public Optional<String> getGroupApplicationReceiverQualifier() {
        return Optional.ofNullable(this.groupApplicationReceiverQualifier);
    }
    public Optional<String> getGroupApplicationSenderId() {
        return Optional.ofNullable(this.groupApplicationSenderId);
    }
    public Optional<String> getGroupApplicationSenderQualifier() {
        return Optional.ofNullable(this.groupApplicationSenderQualifier);
    }
    public Optional<String> getGroupAssociationAssignedCode() {
        return Optional.ofNullable(this.groupAssociationAssignedCode);
    }
    public Double getGroupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }
    public Optional<String> getGroupControlNumberPrefix() {
        return Optional.ofNullable(this.groupControlNumberPrefix);
    }
    public Optional<String> getGroupControlNumberSuffix() {
        return Optional.ofNullable(this.groupControlNumberSuffix);
    }
    public Double getGroupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }
    public Optional<String> getGroupControllingAgencyCode() {
        return Optional.ofNullable(this.groupControllingAgencyCode);
    }
    public Optional<String> getGroupMessageRelease() {
        return Optional.ofNullable(this.groupMessageRelease);
    }
    public Optional<String> getGroupMessageVersion() {
        return Optional.ofNullable(this.groupMessageVersion);
    }
    public Double getInterchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }
    public Optional<String> getInterchangeControlNumberPrefix() {
        return Optional.ofNullable(this.interchangeControlNumberPrefix);
    }
    public Optional<String> getInterchangeControlNumberSuffix() {
        return Optional.ofNullable(this.interchangeControlNumberSuffix);
    }
    public Double getInterchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }
    public Boolean getIsTestInterchange() {
        return this.isTestInterchange;
    }
    public Boolean getOverwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }
    public Optional<String> getProcessingPriorityCode() {
        return Optional.ofNullable(this.processingPriorityCode);
    }
    public Optional<String> getReceiverInternalIdentification() {
        return Optional.ofNullable(this.receiverInternalIdentification);
    }
    public Optional<String> getReceiverInternalSubIdentification() {
        return Optional.ofNullable(this.receiverInternalSubIdentification);
    }
    public Optional<String> getReceiverReverseRoutingAddress() {
        return Optional.ofNullable(this.receiverReverseRoutingAddress);
    }
    public Optional<String> getRecipientReferencePasswordQualifier() {
        return Optional.ofNullable(this.recipientReferencePasswordQualifier);
    }
    public Optional<String> getRecipientReferencePasswordValue() {
        return Optional.ofNullable(this.recipientReferencePasswordValue);
    }
    public Boolean getRolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }
    public Boolean getRolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }
    public Boolean getRolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }
    public Optional<String> getSenderInternalIdentification() {
        return Optional.ofNullable(this.senderInternalIdentification);
    }
    public Optional<String> getSenderInternalSubIdentification() {
        return Optional.ofNullable(this.senderInternalSubIdentification);
    }
    public Optional<String> getSenderReverseRoutingAddress() {
        return Optional.ofNullable(this.senderReverseRoutingAddress);
    }
    public Double getTransactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }
    public Optional<String> getTransactionSetControlNumberPrefix() {
        return Optional.ofNullable(this.transactionSetControlNumberPrefix);
    }
    public Optional<String> getTransactionSetControlNumberSuffix() {
        return Optional.ofNullable(this.transactionSetControlNumberSuffix);
    }
    public Double getTransactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdifactEnvelopeSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String applicationReferenceId;
        private Boolean applyDelimiterStringAdvice;
        private @Nullable String communicationAgreementId;
        private Boolean createGroupingSegments;
        private Boolean enableDefaultGroupHeaders;
        private @Nullable String functionalGroupId;
        private @Nullable String groupApplicationPassword;
        private @Nullable String groupApplicationReceiverId;
        private @Nullable String groupApplicationReceiverQualifier;
        private @Nullable String groupApplicationSenderId;
        private @Nullable String groupApplicationSenderQualifier;
        private @Nullable String groupAssociationAssignedCode;
        private Double groupControlNumberLowerBound;
        private @Nullable String groupControlNumberPrefix;
        private @Nullable String groupControlNumberSuffix;
        private Double groupControlNumberUpperBound;
        private @Nullable String groupControllingAgencyCode;
        private @Nullable String groupMessageRelease;
        private @Nullable String groupMessageVersion;
        private Double interchangeControlNumberLowerBound;
        private @Nullable String interchangeControlNumberPrefix;
        private @Nullable String interchangeControlNumberSuffix;
        private Double interchangeControlNumberUpperBound;
        private Boolean isTestInterchange;
        private Boolean overwriteExistingTransactionSetControlNumber;
        private @Nullable String processingPriorityCode;
        private @Nullable String receiverInternalIdentification;
        private @Nullable String receiverInternalSubIdentification;
        private @Nullable String receiverReverseRoutingAddress;
        private @Nullable String recipientReferencePasswordQualifier;
        private @Nullable String recipientReferencePasswordValue;
        private Boolean rolloverGroupControlNumber;
        private Boolean rolloverInterchangeControlNumber;
        private Boolean rolloverTransactionSetControlNumber;
        private @Nullable String senderInternalIdentification;
        private @Nullable String senderInternalSubIdentification;
        private @Nullable String senderReverseRoutingAddress;
        private Double transactionSetControlNumberLowerBound;
        private @Nullable String transactionSetControlNumberPrefix;
        private @Nullable String transactionSetControlNumberSuffix;
        private Double transactionSetControlNumberUpperBound;

        public Builder() {
    	      // Empty
        }

        public Builder(EdifactEnvelopeSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationReferenceId = defaults.applicationReferenceId;
    	      this.applyDelimiterStringAdvice = defaults.applyDelimiterStringAdvice;
    	      this.communicationAgreementId = defaults.communicationAgreementId;
    	      this.createGroupingSegments = defaults.createGroupingSegments;
    	      this.enableDefaultGroupHeaders = defaults.enableDefaultGroupHeaders;
    	      this.functionalGroupId = defaults.functionalGroupId;
    	      this.groupApplicationPassword = defaults.groupApplicationPassword;
    	      this.groupApplicationReceiverId = defaults.groupApplicationReceiverId;
    	      this.groupApplicationReceiverQualifier = defaults.groupApplicationReceiverQualifier;
    	      this.groupApplicationSenderId = defaults.groupApplicationSenderId;
    	      this.groupApplicationSenderQualifier = defaults.groupApplicationSenderQualifier;
    	      this.groupAssociationAssignedCode = defaults.groupAssociationAssignedCode;
    	      this.groupControlNumberLowerBound = defaults.groupControlNumberLowerBound;
    	      this.groupControlNumberPrefix = defaults.groupControlNumberPrefix;
    	      this.groupControlNumberSuffix = defaults.groupControlNumberSuffix;
    	      this.groupControlNumberUpperBound = defaults.groupControlNumberUpperBound;
    	      this.groupControllingAgencyCode = defaults.groupControllingAgencyCode;
    	      this.groupMessageRelease = defaults.groupMessageRelease;
    	      this.groupMessageVersion = defaults.groupMessageVersion;
    	      this.interchangeControlNumberLowerBound = defaults.interchangeControlNumberLowerBound;
    	      this.interchangeControlNumberPrefix = defaults.interchangeControlNumberPrefix;
    	      this.interchangeControlNumberSuffix = defaults.interchangeControlNumberSuffix;
    	      this.interchangeControlNumberUpperBound = defaults.interchangeControlNumberUpperBound;
    	      this.isTestInterchange = defaults.isTestInterchange;
    	      this.overwriteExistingTransactionSetControlNumber = defaults.overwriteExistingTransactionSetControlNumber;
    	      this.processingPriorityCode = defaults.processingPriorityCode;
    	      this.receiverInternalIdentification = defaults.receiverInternalIdentification;
    	      this.receiverInternalSubIdentification = defaults.receiverInternalSubIdentification;
    	      this.receiverReverseRoutingAddress = defaults.receiverReverseRoutingAddress;
    	      this.recipientReferencePasswordQualifier = defaults.recipientReferencePasswordQualifier;
    	      this.recipientReferencePasswordValue = defaults.recipientReferencePasswordValue;
    	      this.rolloverGroupControlNumber = defaults.rolloverGroupControlNumber;
    	      this.rolloverInterchangeControlNumber = defaults.rolloverInterchangeControlNumber;
    	      this.rolloverTransactionSetControlNumber = defaults.rolloverTransactionSetControlNumber;
    	      this.senderInternalIdentification = defaults.senderInternalIdentification;
    	      this.senderInternalSubIdentification = defaults.senderInternalSubIdentification;
    	      this.senderReverseRoutingAddress = defaults.senderReverseRoutingAddress;
    	      this.transactionSetControlNumberLowerBound = defaults.transactionSetControlNumberLowerBound;
    	      this.transactionSetControlNumberPrefix = defaults.transactionSetControlNumberPrefix;
    	      this.transactionSetControlNumberSuffix = defaults.transactionSetControlNumberSuffix;
    	      this.transactionSetControlNumberUpperBound = defaults.transactionSetControlNumberUpperBound;
        }

        public Builder setApplicationReferenceId(@Nullable String applicationReferenceId) {
            this.applicationReferenceId = applicationReferenceId;
            return this;
        }

        public Builder setApplyDelimiterStringAdvice(Boolean applyDelimiterStringAdvice) {
            this.applyDelimiterStringAdvice = Objects.requireNonNull(applyDelimiterStringAdvice);
            return this;
        }

        public Builder setCommunicationAgreementId(@Nullable String communicationAgreementId) {
            this.communicationAgreementId = communicationAgreementId;
            return this;
        }

        public Builder setCreateGroupingSegments(Boolean createGroupingSegments) {
            this.createGroupingSegments = Objects.requireNonNull(createGroupingSegments);
            return this;
        }

        public Builder setEnableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
            return this;
        }

        public Builder setFunctionalGroupId(@Nullable String functionalGroupId) {
            this.functionalGroupId = functionalGroupId;
            return this;
        }

        public Builder setGroupApplicationPassword(@Nullable String groupApplicationPassword) {
            this.groupApplicationPassword = groupApplicationPassword;
            return this;
        }

        public Builder setGroupApplicationReceiverId(@Nullable String groupApplicationReceiverId) {
            this.groupApplicationReceiverId = groupApplicationReceiverId;
            return this;
        }

        public Builder setGroupApplicationReceiverQualifier(@Nullable String groupApplicationReceiverQualifier) {
            this.groupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
            return this;
        }

        public Builder setGroupApplicationSenderId(@Nullable String groupApplicationSenderId) {
            this.groupApplicationSenderId = groupApplicationSenderId;
            return this;
        }

        public Builder setGroupApplicationSenderQualifier(@Nullable String groupApplicationSenderQualifier) {
            this.groupApplicationSenderQualifier = groupApplicationSenderQualifier;
            return this;
        }

        public Builder setGroupAssociationAssignedCode(@Nullable String groupAssociationAssignedCode) {
            this.groupAssociationAssignedCode = groupAssociationAssignedCode;
            return this;
        }

        public Builder setGroupControlNumberLowerBound(Double groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
            return this;
        }

        public Builder setGroupControlNumberPrefix(@Nullable String groupControlNumberPrefix) {
            this.groupControlNumberPrefix = groupControlNumberPrefix;
            return this;
        }

        public Builder setGroupControlNumberSuffix(@Nullable String groupControlNumberSuffix) {
            this.groupControlNumberSuffix = groupControlNumberSuffix;
            return this;
        }

        public Builder setGroupControlNumberUpperBound(Double groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
            return this;
        }

        public Builder setGroupControllingAgencyCode(@Nullable String groupControllingAgencyCode) {
            this.groupControllingAgencyCode = groupControllingAgencyCode;
            return this;
        }

        public Builder setGroupMessageRelease(@Nullable String groupMessageRelease) {
            this.groupMessageRelease = groupMessageRelease;
            return this;
        }

        public Builder setGroupMessageVersion(@Nullable String groupMessageVersion) {
            this.groupMessageVersion = groupMessageVersion;
            return this;
        }

        public Builder setInterchangeControlNumberLowerBound(Double interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
            return this;
        }

        public Builder setInterchangeControlNumberPrefix(@Nullable String interchangeControlNumberPrefix) {
            this.interchangeControlNumberPrefix = interchangeControlNumberPrefix;
            return this;
        }

        public Builder setInterchangeControlNumberSuffix(@Nullable String interchangeControlNumberSuffix) {
            this.interchangeControlNumberSuffix = interchangeControlNumberSuffix;
            return this;
        }

        public Builder setInterchangeControlNumberUpperBound(Double interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
            return this;
        }

        public Builder setIsTestInterchange(Boolean isTestInterchange) {
            this.isTestInterchange = Objects.requireNonNull(isTestInterchange);
            return this;
        }

        public Builder setOverwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
            return this;
        }

        public Builder setProcessingPriorityCode(@Nullable String processingPriorityCode) {
            this.processingPriorityCode = processingPriorityCode;
            return this;
        }

        public Builder setReceiverInternalIdentification(@Nullable String receiverInternalIdentification) {
            this.receiverInternalIdentification = receiverInternalIdentification;
            return this;
        }

        public Builder setReceiverInternalSubIdentification(@Nullable String receiverInternalSubIdentification) {
            this.receiverInternalSubIdentification = receiverInternalSubIdentification;
            return this;
        }

        public Builder setReceiverReverseRoutingAddress(@Nullable String receiverReverseRoutingAddress) {
            this.receiverReverseRoutingAddress = receiverReverseRoutingAddress;
            return this;
        }

        public Builder setRecipientReferencePasswordQualifier(@Nullable String recipientReferencePasswordQualifier) {
            this.recipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
            return this;
        }

        public Builder setRecipientReferencePasswordValue(@Nullable String recipientReferencePasswordValue) {
            this.recipientReferencePasswordValue = recipientReferencePasswordValue;
            return this;
        }

        public Builder setRolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
            return this;
        }

        public Builder setRolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
            return this;
        }

        public Builder setRolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
            return this;
        }

        public Builder setSenderInternalIdentification(@Nullable String senderInternalIdentification) {
            this.senderInternalIdentification = senderInternalIdentification;
            return this;
        }

        public Builder setSenderInternalSubIdentification(@Nullable String senderInternalSubIdentification) {
            this.senderInternalSubIdentification = senderInternalSubIdentification;
            return this;
        }

        public Builder setSenderReverseRoutingAddress(@Nullable String senderReverseRoutingAddress) {
            this.senderReverseRoutingAddress = senderReverseRoutingAddress;
            return this;
        }

        public Builder setTransactionSetControlNumberLowerBound(Double transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
            return this;
        }

        public Builder setTransactionSetControlNumberPrefix(@Nullable String transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            return this;
        }

        public Builder setTransactionSetControlNumberSuffix(@Nullable String transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            return this;
        }

        public Builder setTransactionSetControlNumberUpperBound(Double transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
            return this;
        }

        public EdifactEnvelopeSettingsResponse build() {
            return new EdifactEnvelopeSettingsResponse(applicationReferenceId, applyDelimiterStringAdvice, communicationAgreementId, createGroupingSegments, enableDefaultGroupHeaders, functionalGroupId, groupApplicationPassword, groupApplicationReceiverId, groupApplicationReceiverQualifier, groupApplicationSenderId, groupApplicationSenderQualifier, groupAssociationAssignedCode, groupControlNumberLowerBound, groupControlNumberPrefix, groupControlNumberSuffix, groupControlNumberUpperBound, groupControllingAgencyCode, groupMessageRelease, groupMessageVersion, interchangeControlNumberLowerBound, interchangeControlNumberPrefix, interchangeControlNumberSuffix, interchangeControlNumberUpperBound, isTestInterchange, overwriteExistingTransactionSetControlNumber, processingPriorityCode, receiverInternalIdentification, receiverInternalSubIdentification, receiverReverseRoutingAddress, recipientReferencePasswordQualifier, recipientReferencePasswordValue, rolloverGroupControlNumber, rolloverInterchangeControlNumber, rolloverTransactionSetControlNumber, senderInternalIdentification, senderInternalSubIdentification, senderReverseRoutingAddress, transactionSetControlNumberLowerBound, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberUpperBound);
        }
    }
}
