// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cache;

import io.pulumi.azurenative.cache.enums.PublicNetworkAccess;
import io.pulumi.azurenative.cache.enums.TlsVersion;
import io.pulumi.azurenative.cache.inputs.RedisCommonPropertiesRedisConfigurationArgs;
import io.pulumi.azurenative.cache.inputs.SkuArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RedisArgs extends io.pulumi.resources.ResourceArgs {

    public static final RedisArgs Empty = new RedisArgs();

    /**
     * Specifies whether the non-ssl Redis server port (6379) is enabled.
     * 
     */
    @Import(name="enableNonSslPort")
      private final @Nullable Output<Boolean> enableNonSslPort;

    public Output<Boolean> getEnableNonSslPort() {
        return this.enableNonSslPort == null ? Output.empty() : this.enableNonSslPort;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
     * 
     */
    @Import(name="minimumTlsVersion")
      private final @Nullable Output<Either<String,TlsVersion>> minimumTlsVersion;

    public Output<Either<String,TlsVersion>> getMinimumTlsVersion() {
        return this.minimumTlsVersion == null ? Output.empty() : this.minimumTlsVersion;
    }

    /**
     * The name of the Redis cache.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
     * 
     */
    @Import(name="publicNetworkAccess")
      private final @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;

    public Output<Either<String,PublicNetworkAccess>> getPublicNetworkAccess() {
        return this.publicNetworkAccess == null ? Output.empty() : this.publicNetworkAccess;
    }

    /**
     * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
     * 
     */
    @Import(name="redisConfiguration")
      private final @Nullable Output<RedisCommonPropertiesRedisConfigurationArgs> redisConfiguration;

    public Output<RedisCommonPropertiesRedisConfigurationArgs> getRedisConfiguration() {
        return this.redisConfiguration == null ? Output.empty() : this.redisConfiguration;
    }

    /**
     * The number of replicas to be created per master.
     * 
     */
    @Import(name="replicasPerMaster")
      private final @Nullable Output<Integer> replicasPerMaster;

    public Output<Integer> getReplicasPerMaster() {
        return this.replicasPerMaster == null ? Output.empty() : this.replicasPerMaster;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The number of shards to be created on a Premium Cluster Cache.
     * 
     */
    @Import(name="shardCount")
      private final @Nullable Output<Integer> shardCount;

    public Output<Integer> getShardCount() {
        return this.shardCount == null ? Output.empty() : this.shardCount;
    }

    /**
     * The SKU of the Redis cache to deploy.
     * 
     */
    @Import(name="sku", required=true)
      private final Output<SkuArgs> sku;

    public Output<SkuArgs> getSku() {
        return this.sku;
    }

    /**
     * Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.
     * 
     */
    @Import(name="staticIP")
      private final @Nullable Output<String> staticIP;

    public Output<String> getStaticIP() {
        return this.staticIP == null ? Output.empty() : this.staticIP;
    }

    /**
     * The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
     * 
     */
    @Import(name="subnetId")
      private final @Nullable Output<String> subnetId;

    public Output<String> getSubnetId() {
        return this.subnetId == null ? Output.empty() : this.subnetId;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A dictionary of tenant settings
     * 
     */
    @Import(name="tenantSettings")
      private final @Nullable Output<Map<String,String>> tenantSettings;

    public Output<Map<String,String>> getTenantSettings() {
        return this.tenantSettings == null ? Output.empty() : this.tenantSettings;
    }

    /**
     * A list of availability zones denoting where the resource needs to come from.
     * 
     */
    @Import(name="zones")
      private final @Nullable Output<List<String>> zones;

    public Output<List<String>> getZones() {
        return this.zones == null ? Output.empty() : this.zones;
    }

    public RedisArgs(
        @Nullable Output<Boolean> enableNonSslPort,
        @Nullable Output<String> location,
        @Nullable Output<Either<String,TlsVersion>> minimumTlsVersion,
        @Nullable Output<String> name,
        @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess,
        @Nullable Output<RedisCommonPropertiesRedisConfigurationArgs> redisConfiguration,
        @Nullable Output<Integer> replicasPerMaster,
        Output<String> resourceGroupName,
        @Nullable Output<Integer> shardCount,
        Output<SkuArgs> sku,
        @Nullable Output<String> staticIP,
        @Nullable Output<String> subnetId,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tenantSettings,
        @Nullable Output<List<String>> zones) {
        this.enableNonSslPort = enableNonSslPort == null ? Output.ofNullable(false) : enableNonSslPort;
        this.location = location;
        this.minimumTlsVersion = minimumTlsVersion;
        this.name = name;
        this.publicNetworkAccess = publicNetworkAccess == null ? Output.ofLeft("Enabled") : publicNetworkAccess;
        this.redisConfiguration = redisConfiguration;
        this.replicasPerMaster = replicasPerMaster;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.shardCount = shardCount;
        this.sku = Objects.requireNonNull(sku, "expected parameter 'sku' to be non-null");
        this.staticIP = staticIP;
        this.subnetId = subnetId;
        this.tags = tags;
        this.tenantSettings = tenantSettings;
        this.zones = zones;
    }

    private RedisArgs() {
        this.enableNonSslPort = Output.empty();
        this.location = Output.empty();
        this.minimumTlsVersion = Output.empty();
        this.name = Output.empty();
        this.publicNetworkAccess = Output.empty();
        this.redisConfiguration = Output.empty();
        this.replicasPerMaster = Output.empty();
        this.resourceGroupName = Output.empty();
        this.shardCount = Output.empty();
        this.sku = Output.empty();
        this.staticIP = Output.empty();
        this.subnetId = Output.empty();
        this.tags = Output.empty();
        this.tenantSettings = Output.empty();
        this.zones = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RedisArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> enableNonSslPort;
        private @Nullable Output<String> location;
        private @Nullable Output<Either<String,TlsVersion>> minimumTlsVersion;
        private @Nullable Output<String> name;
        private @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;
        private @Nullable Output<RedisCommonPropertiesRedisConfigurationArgs> redisConfiguration;
        private @Nullable Output<Integer> replicasPerMaster;
        private Output<String> resourceGroupName;
        private @Nullable Output<Integer> shardCount;
        private Output<SkuArgs> sku;
        private @Nullable Output<String> staticIP;
        private @Nullable Output<String> subnetId;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tenantSettings;
        private @Nullable Output<List<String>> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(RedisArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableNonSslPort = defaults.enableNonSslPort;
    	      this.location = defaults.location;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.name = defaults.name;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.redisConfiguration = defaults.redisConfiguration;
    	      this.replicasPerMaster = defaults.replicasPerMaster;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.shardCount = defaults.shardCount;
    	      this.sku = defaults.sku;
    	      this.staticIP = defaults.staticIP;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.tenantSettings = defaults.tenantSettings;
    	      this.zones = defaults.zones;
        }

        public Builder enableNonSslPort(@Nullable Output<Boolean> enableNonSslPort) {
            this.enableNonSslPort = enableNonSslPort;
            return this;
        }

        public Builder enableNonSslPort(@Nullable Boolean enableNonSslPort) {
            this.enableNonSslPort = Output.ofNullable(enableNonSslPort);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder minimumTlsVersion(@Nullable Output<Either<String,TlsVersion>> minimumTlsVersion) {
            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }

        public Builder minimumTlsVersion(@Nullable Either<String,TlsVersion> minimumTlsVersion) {
            this.minimumTlsVersion = Output.ofNullable(minimumTlsVersion);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder publicNetworkAccess(@Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publicNetworkAccess(@Nullable Either<String,PublicNetworkAccess> publicNetworkAccess) {
            this.publicNetworkAccess = Output.ofNullable(publicNetworkAccess);
            return this;
        }

        public Builder redisConfiguration(@Nullable Output<RedisCommonPropertiesRedisConfigurationArgs> redisConfiguration) {
            this.redisConfiguration = redisConfiguration;
            return this;
        }

        public Builder redisConfiguration(@Nullable RedisCommonPropertiesRedisConfigurationArgs redisConfiguration) {
            this.redisConfiguration = Output.ofNullable(redisConfiguration);
            return this;
        }

        public Builder replicasPerMaster(@Nullable Output<Integer> replicasPerMaster) {
            this.replicasPerMaster = replicasPerMaster;
            return this;
        }

        public Builder replicasPerMaster(@Nullable Integer replicasPerMaster) {
            this.replicasPerMaster = Output.ofNullable(replicasPerMaster);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder shardCount(@Nullable Output<Integer> shardCount) {
            this.shardCount = shardCount;
            return this;
        }

        public Builder shardCount(@Nullable Integer shardCount) {
            this.shardCount = Output.ofNullable(shardCount);
            return this;
        }

        public Builder sku(Output<SkuArgs> sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }

        public Builder sku(SkuArgs sku) {
            this.sku = Output.of(Objects.requireNonNull(sku));
            return this;
        }

        public Builder staticIP(@Nullable Output<String> staticIP) {
            this.staticIP = staticIP;
            return this;
        }

        public Builder staticIP(@Nullable String staticIP) {
            this.staticIP = Output.ofNullable(staticIP);
            return this;
        }

        public Builder subnetId(@Nullable Output<String> subnetId) {
            this.subnetId = subnetId;
            return this;
        }

        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = Output.ofNullable(subnetId);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder tenantSettings(@Nullable Output<Map<String,String>> tenantSettings) {
            this.tenantSettings = tenantSettings;
            return this;
        }

        public Builder tenantSettings(@Nullable Map<String,String> tenantSettings) {
            this.tenantSettings = Output.ofNullable(tenantSettings);
            return this;
        }

        public Builder zones(@Nullable Output<List<String>> zones) {
            this.zones = zones;
            return this;
        }

        public Builder zones(@Nullable List<String> zones) {
            this.zones = Output.ofNullable(zones);
            return this;
        }
        public RedisArgs build() {
            return new RedisArgs(enableNonSslPort, location, minimumTlsVersion, name, publicNetworkAccess, redisConfiguration, replicasPerMaster, resourceGroupName, shardCount, sku, staticIP, subnetId, tags, tenantSettings, zones);
        }
    }
}
