// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.policyinsights;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.policyinsights.RemediationAtSubscriptionArgs;
import io.pulumi.azurenative.policyinsights.outputs.RemediationDeploymentSummaryResponse;
import io.pulumi.azurenative.policyinsights.outputs.RemediationFiltersResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * The remediation definition.
 * API Version: 2019-07-01.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Create remediation at subscription scope
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var remediationAtSubscription = new AzureNative.PolicyInsights.RemediationAtSubscription("remediationAtSubscription", new AzureNative.PolicyInsights.RemediationAtSubscriptionArgs
 *         {
 *             PolicyAssignmentId = "/subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/providers/microsoft.authorization/policyassignments/b101830944f246d8a14088c5",
 *             RemediationName = "storageRemediation",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	policyinsights "github.com/pulumi/pulumi-azure-native/sdk/go/azure/policyinsights"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := policyinsights.NewRemediationAtSubscription(ctx, "remediationAtSubscription", &policyinsights.RemediationAtSubscriptionArgs{
 * 			PolicyAssignmentId: pulumi.String("/subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/providers/microsoft.authorization/policyassignments/b101830944f246d8a14088c5"),
 * 			RemediationName:    pulumi.String("storageRemediation"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const remediationAtSubscription = new azure_native.policyinsights.RemediationAtSubscription("remediationAtSubscription", {
 *     policyAssignmentId: "/subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/providers/microsoft.authorization/policyassignments/b101830944f246d8a14088c5",
 *     remediationName: "storageRemediation",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * remediation_at_subscription = azure_native.policyinsights.RemediationAtSubscription("remediationAtSubscription",
 *     policy_assignment_id="/subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/providers/microsoft.authorization/policyassignments/b101830944f246d8a14088c5",
 *     remediation_name="storageRemediation")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create remediation at subscription scope with all properties
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var remediationAtSubscription = new AzureNative.PolicyInsights.RemediationAtSubscription("remediationAtSubscription", new AzureNative.PolicyInsights.RemediationAtSubscriptionArgs
 *         {
 *             Filters = new AzureNative.PolicyInsights.Inputs.RemediationFiltersArgs
 *             {
 *                 Locations = 
 *                 {
 *                     "eastus",
 *                     "westus",
 *                 },
 *             },
 *             PolicyAssignmentId = "/subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/providers/microsoft.authorization/policyassignments/b101830944f246d8a14088c5",
 *             PolicyDefinitionReferenceId = "8c8fa9e4",
 *             RemediationName = "storageRemediation",
 *             ResourceDiscoveryMode = "ReEvaluateCompliance",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	policyinsights "github.com/pulumi/pulumi-azure-native/sdk/go/azure/policyinsights"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := policyinsights.NewRemediationAtSubscription(ctx, "remediationAtSubscription", &policyinsights.RemediationAtSubscriptionArgs{
 * 			Filters: &policyinsights.RemediationFiltersArgs{
 * 				Locations: pulumi.StringArray{
 * 					pulumi.String("eastus"),
 * 					pulumi.String("westus"),
 * 				},
 * 			},
 * 			PolicyAssignmentId:          pulumi.String("/subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/providers/microsoft.authorization/policyassignments/b101830944f246d8a14088c5"),
 * 			PolicyDefinitionReferenceId: pulumi.String("8c8fa9e4"),
 * 			RemediationName:             pulumi.String("storageRemediation"),
 * 			ResourceDiscoveryMode:       pulumi.String("ReEvaluateCompliance"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const remediationAtSubscription = new azure_native.policyinsights.RemediationAtSubscription("remediationAtSubscription", {
 *     filters: {
 *         locations: [
 *             "eastus",
 *             "westus",
 *         ],
 *     },
 *     policyAssignmentId: "/subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/providers/microsoft.authorization/policyassignments/b101830944f246d8a14088c5",
 *     policyDefinitionReferenceId: "8c8fa9e4",
 *     remediationName: "storageRemediation",
 *     resourceDiscoveryMode: "ReEvaluateCompliance",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * remediation_at_subscription = azure_native.policyinsights.RemediationAtSubscription("remediationAtSubscription",
 *     filters=azure_native.policyinsights.RemediationFiltersArgs(
 *         locations=[
 *             "eastus",
 *             "westus",
 *         ],
 *     ),
 *     policy_assignment_id="/subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/providers/microsoft.authorization/policyassignments/b101830944f246d8a14088c5",
 *     policy_definition_reference_id="8c8fa9e4",
 *     remediation_name="storageRemediation",
 *     resource_discovery_mode="ReEvaluateCompliance")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:policyinsights:RemediationAtSubscription storageRemediation /subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/providers/microsoft.policyinsights/remediations/storageRemediation 
 * ```
 * 
 */
@ResourceType(type="azure-native:policyinsights:RemediationAtSubscription")
public class RemediationAtSubscription extends io.pulumi.resources.CustomResource {
    /**
     * The time at which the remediation was created.
     */
    @Export(name="createdOn", type=String.class, parameters={})
    private Output<String> createdOn;

    /**
     * @return The time at which the remediation was created.
     */
    public Output<String> getCreatedOn() {
        return this.createdOn;
    }
    /**
     * The deployment status summary for all deployments created by the remediation.
     */
    @Export(name="deploymentStatus", type=RemediationDeploymentSummaryResponse.class, parameters={})
    private Output<RemediationDeploymentSummaryResponse> deploymentStatus;

    /**
     * @return The deployment status summary for all deployments created by the remediation.
     */
    public Output<RemediationDeploymentSummaryResponse> getDeploymentStatus() {
        return this.deploymentStatus;
    }
    /**
     * The filters that will be applied to determine which resources to remediate.
     */
    @Export(name="filters", type=RemediationFiltersResponse.class, parameters={})
    private Output</* @Nullable */ RemediationFiltersResponse> filters;

    /**
     * @return The filters that will be applied to determine which resources to remediate.
     */
    public Output</* @Nullable */ RemediationFiltersResponse> getFilters() {
        return this.filters;
    }
    /**
     * The time at which the remediation was last updated.
     */
    @Export(name="lastUpdatedOn", type=String.class, parameters={})
    private Output<String> lastUpdatedOn;

    /**
     * @return The time at which the remediation was last updated.
     */
    public Output<String> getLastUpdatedOn() {
        return this.lastUpdatedOn;
    }
    /**
     * The name of the remediation.
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the remediation.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The resource ID of the policy assignment that should be remediated.
     */
    @Export(name="policyAssignmentId", type=String.class, parameters={})
    private Output</* @Nullable */ String> policyAssignmentId;

    /**
     * @return The resource ID of the policy assignment that should be remediated.
     */
    public Output</* @Nullable */ String> getPolicyAssignmentId() {
        return this.policyAssignmentId;
    }
    /**
     * The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
     */
    @Export(name="policyDefinitionReferenceId", type=String.class, parameters={})
    private Output</* @Nullable */ String> policyDefinitionReferenceId;

    /**
     * @return The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
     */
    public Output</* @Nullable */ String> getPolicyDefinitionReferenceId() {
        return this.policyDefinitionReferenceId;
    }
    /**
     * The status of the remediation.
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The status of the remediation.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
     */
    @Export(name="resourceDiscoveryMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> resourceDiscoveryMode;

    /**
     * @return The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
     */
    public Output</* @Nullable */ String> getResourceDiscoveryMode() {
        return this.resourceDiscoveryMode;
    }
    /**
     * The type of the remediation.
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the remediation.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RemediationAtSubscription(String name) {
        this(name, RemediationAtSubscriptionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RemediationAtSubscription(String name, @Nullable RemediationAtSubscriptionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RemediationAtSubscription(String name, @Nullable RemediationAtSubscriptionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:policyinsights:RemediationAtSubscription", name, args == null ? RemediationAtSubscriptionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private RemediationAtSubscription(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:policyinsights:RemediationAtSubscription", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:policyinsights/v20180701preview:RemediationAtSubscription").build()),
                Output.of(Alias.builder().type("azure-native:policyinsights/v20190701:RemediationAtSubscription").build()),
                Output.of(Alias.builder().type("azure-native:policyinsights/v20211001:RemediationAtSubscription").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RemediationAtSubscription get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new RemediationAtSubscription(name, id, options);
    }
}
