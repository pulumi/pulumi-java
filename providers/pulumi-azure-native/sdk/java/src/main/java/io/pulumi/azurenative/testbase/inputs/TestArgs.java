// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.testbase.inputs;

import io.pulumi.azurenative.testbase.enums.TestType;
import io.pulumi.azurenative.testbase.inputs.CommandArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The definition of a Test.
 * 
 */
public final class TestArgs extends io.pulumi.resources.ResourceArgs {

    public static final TestArgs Empty = new TestArgs();

    /**
     * The commands used in the test.
     * 
     */
    @Import(name="commands", required=true)
      private final Output<List<CommandArgs>> commands;

    public Output<List<CommandArgs>> getCommands() {
        return this.commands;
    }

    /**
     * Indicates if this test is active.It doesn't schedule test for not active Test.
     * 
     */
    @Import(name="isActive")
      private final @Nullable Output<Boolean> isActive;

    public Output<Boolean> getIsActive() {
        return this.isActive == null ? Output.empty() : this.isActive;
    }

    /**
     * The type of the test.
     * 
     */
    @Import(name="testType", required=true)
      private final Output<Either<String,TestType>> testType;

    public Output<Either<String,TestType>> getTestType() {
        return this.testType;
    }

    public TestArgs(
        Output<List<CommandArgs>> commands,
        @Nullable Output<Boolean> isActive,
        Output<Either<String,TestType>> testType) {
        this.commands = Objects.requireNonNull(commands, "expected parameter 'commands' to be non-null");
        this.isActive = isActive;
        this.testType = Objects.requireNonNull(testType, "expected parameter 'testType' to be non-null");
    }

    private TestArgs() {
        this.commands = Output.empty();
        this.isActive = Output.empty();
        this.testType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<CommandArgs>> commands;
        private @Nullable Output<Boolean> isActive;
        private Output<Either<String,TestType>> testType;

        public Builder() {
    	      // Empty
        }

        public Builder(TestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commands = defaults.commands;
    	      this.isActive = defaults.isActive;
    	      this.testType = defaults.testType;
        }

        public Builder commands(Output<List<CommandArgs>> commands) {
            this.commands = Objects.requireNonNull(commands);
            return this;
        }
        public Builder commands(List<CommandArgs> commands) {
            this.commands = Output.of(Objects.requireNonNull(commands));
            return this;
        }
        public Builder commands(CommandArgs... commands) {
            return commands(List.of(commands));
        }
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            this.isActive = isActive;
            return this;
        }
        public Builder isActive(@Nullable Boolean isActive) {
            this.isActive = Output.ofNullable(isActive);
            return this;
        }
        public Builder testType(Output<Either<String,TestType>> testType) {
            this.testType = Objects.requireNonNull(testType);
            return this;
        }
        public Builder testType(Either<String,TestType> testType) {
            this.testType = Output.of(Objects.requireNonNull(testType));
            return this;
        }        public TestArgs build() {
            return new TestArgs(commands, isActive, testType);
        }
    }
}
