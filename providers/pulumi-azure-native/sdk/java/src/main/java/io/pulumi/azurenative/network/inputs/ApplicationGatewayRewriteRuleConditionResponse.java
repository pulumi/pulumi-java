// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Set of conditions in the Rewrite Rule in Application Gateway.
 * 
 */
public final class ApplicationGatewayRewriteRuleConditionResponse extends io.pulumi.resources.InvokeArgs {

    public static final ApplicationGatewayRewriteRuleConditionResponse Empty = new ApplicationGatewayRewriteRuleConditionResponse();

    /**
     * Setting this parameter to truth value with force the pattern to do a case in-sensitive comparison.
     * 
     */
    @InputImport(name="ignoreCase")
      private final @Nullable Boolean ignoreCase;

    public Optional<Boolean> getIgnoreCase() {
        return this.ignoreCase == null ? Optional.empty() : Optional.ofNullable(this.ignoreCase);
    }

    /**
     * Setting this value as truth will force to check the negation of the condition given by the user.
     * 
     */
    @InputImport(name="negate")
      private final @Nullable Boolean negate;

    public Optional<Boolean> getNegate() {
        return this.negate == null ? Optional.empty() : Optional.ofNullable(this.negate);
    }

    /**
     * The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
     * 
     */
    @InputImport(name="pattern")
      private final @Nullable String pattern;

    public Optional<String> getPattern() {
        return this.pattern == null ? Optional.empty() : Optional.ofNullable(this.pattern);
    }

    /**
     * The condition parameter of the RewriteRuleCondition.
     * 
     */
    @InputImport(name="variable")
      private final @Nullable String variable;

    public Optional<String> getVariable() {
        return this.variable == null ? Optional.empty() : Optional.ofNullable(this.variable);
    }

    public ApplicationGatewayRewriteRuleConditionResponse(
        @Nullable Boolean ignoreCase,
        @Nullable Boolean negate,
        @Nullable String pattern,
        @Nullable String variable) {
        this.ignoreCase = ignoreCase;
        this.negate = negate;
        this.pattern = pattern;
        this.variable = variable;
    }

    private ApplicationGatewayRewriteRuleConditionResponse() {
        this.ignoreCase = null;
        this.negate = null;
        this.pattern = null;
        this.variable = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayRewriteRuleConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean ignoreCase;
        private @Nullable Boolean negate;
        private @Nullable String pattern;
        private @Nullable String variable;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGatewayRewriteRuleConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.negate = defaults.negate;
    	      this.pattern = defaults.pattern;
    	      this.variable = defaults.variable;
        }

        public Builder ignoreCase(@Nullable Boolean ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }

        public Builder negate(@Nullable Boolean negate) {
            this.negate = negate;
            return this;
        }

        public Builder pattern(@Nullable String pattern) {
            this.pattern = pattern;
            return this;
        }

        public Builder variable(@Nullable String variable) {
            this.variable = variable;
            return this;
        }
        public ApplicationGatewayRewriteRuleConditionResponse build() {
            return new ApplicationGatewayRewriteRuleConditionResponse(ignoreCase, negate, pattern, variable);
        }
    }
}
