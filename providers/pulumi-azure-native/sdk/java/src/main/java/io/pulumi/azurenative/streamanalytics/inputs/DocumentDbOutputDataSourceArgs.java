// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DocumentDbOutputDataSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final DocumentDbOutputDataSourceArgs Empty = new DocumentDbOutputDataSourceArgs();

    @InputImport(name="accountId")
    private final @Nullable Input<String> accountId;

    public Input<String> getAccountId() {
        return this.accountId == null ? Input.empty() : this.accountId;
    }

    @InputImport(name="accountKey")
    private final @Nullable Input<String> accountKey;

    public Input<String> getAccountKey() {
        return this.accountKey == null ? Input.empty() : this.accountKey;
    }

    @InputImport(name="collectionNamePattern")
    private final @Nullable Input<String> collectionNamePattern;

    public Input<String> getCollectionNamePattern() {
        return this.collectionNamePattern == null ? Input.empty() : this.collectionNamePattern;
    }

    @InputImport(name="database")
    private final @Nullable Input<String> database;

    public Input<String> getDatabase() {
        return this.database == null ? Input.empty() : this.database;
    }

    @InputImport(name="documentId")
    private final @Nullable Input<String> documentId;

    public Input<String> getDocumentId() {
        return this.documentId == null ? Input.empty() : this.documentId;
    }

    @InputImport(name="partitionKey")
    private final @Nullable Input<String> partitionKey;

    public Input<String> getPartitionKey() {
        return this.partitionKey == null ? Input.empty() : this.partitionKey;
    }

    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public DocumentDbOutputDataSourceArgs(
        @Nullable Input<String> accountId,
        @Nullable Input<String> accountKey,
        @Nullable Input<String> collectionNamePattern,
        @Nullable Input<String> database,
        @Nullable Input<String> documentId,
        @Nullable Input<String> partitionKey,
        Input<String> type) {
        this.accountId = accountId;
        this.accountKey = accountKey;
        this.collectionNamePattern = collectionNamePattern;
        this.database = database;
        this.documentId = documentId;
        this.partitionKey = partitionKey;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private DocumentDbOutputDataSourceArgs() {
        this.accountId = Input.empty();
        this.accountKey = Input.empty();
        this.collectionNamePattern = Input.empty();
        this.database = Input.empty();
        this.documentId = Input.empty();
        this.partitionKey = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentDbOutputDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accountId;
        private @Nullable Input<String> accountKey;
        private @Nullable Input<String> collectionNamePattern;
        private @Nullable Input<String> database;
        private @Nullable Input<String> documentId;
        private @Nullable Input<String> partitionKey;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(DocumentDbOutputDataSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.accountKey = defaults.accountKey;
    	      this.collectionNamePattern = defaults.collectionNamePattern;
    	      this.database = defaults.database;
    	      this.documentId = defaults.documentId;
    	      this.partitionKey = defaults.partitionKey;
    	      this.type = defaults.type;
        }

        public Builder setAccountId(@Nullable Input<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder setAccountId(@Nullable String accountId) {
            this.accountId = Input.ofNullable(accountId);
            return this;
        }

        public Builder setAccountKey(@Nullable Input<String> accountKey) {
            this.accountKey = accountKey;
            return this;
        }

        public Builder setAccountKey(@Nullable String accountKey) {
            this.accountKey = Input.ofNullable(accountKey);
            return this;
        }

        public Builder setCollectionNamePattern(@Nullable Input<String> collectionNamePattern) {
            this.collectionNamePattern = collectionNamePattern;
            return this;
        }

        public Builder setCollectionNamePattern(@Nullable String collectionNamePattern) {
            this.collectionNamePattern = Input.ofNullable(collectionNamePattern);
            return this;
        }

        public Builder setDatabase(@Nullable Input<String> database) {
            this.database = database;
            return this;
        }

        public Builder setDatabase(@Nullable String database) {
            this.database = Input.ofNullable(database);
            return this;
        }

        public Builder setDocumentId(@Nullable Input<String> documentId) {
            this.documentId = documentId;
            return this;
        }

        public Builder setDocumentId(@Nullable String documentId) {
            this.documentId = Input.ofNullable(documentId);
            return this;
        }

        public Builder setPartitionKey(@Nullable Input<String> partitionKey) {
            this.partitionKey = partitionKey;
            return this;
        }

        public Builder setPartitionKey(@Nullable String partitionKey) {
            this.partitionKey = Input.ofNullable(partitionKey);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public DocumentDbOutputDataSourceArgs build() {
            return new DocumentDbOutputDataSourceArgs(accountId, accountKey, collectionNamePattern, database, documentId, partitionKey, type);
        }
    }
}
