// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes a DocumentDB output data source.
 * 
 */
public final class DocumentDbOutputDataSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final DocumentDbOutputDataSourceArgs Empty = new DocumentDbOutputDataSourceArgs();

    /**
     * The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @InputImport(name="accountId")
      private final @Nullable Output<String> accountId;

    public Output<String> getAccountId() {
        return this.accountId == null ? Output.empty() : this.accountId;
    }

    /**
     * The account key for the DocumentDB account. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @InputImport(name="accountKey")
      private final @Nullable Output<String> accountKey;

    public Output<String> getAccountKey() {
        return this.accountKey == null ? Output.empty() : this.accountKey;
    }

    /**
     * The collection name pattern for the collections to be used. The collection name format can be constructed using the optional {partition} token, where partitions start from 0. See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more information. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @InputImport(name="collectionNamePattern")
      private final @Nullable Output<String> collectionNamePattern;

    public Output<String> getCollectionNamePattern() {
        return this.collectionNamePattern == null ? Output.empty() : this.collectionNamePattern;
    }

    /**
     * The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @InputImport(name="database")
      private final @Nullable Output<String> database;

    public Output<String> getDatabase() {
        return this.database == null ? Output.empty() : this.database;
    }

    /**
     * The name of the field in output events used to specify the primary key which insert or update operations are based on.
     * 
     */
    @InputImport(name="documentId")
      private final @Nullable Output<String> documentId;

    public Output<String> getDocumentId() {
        return this.documentId == null ? Output.empty() : this.documentId;
    }

    /**
     * The name of the field in output events used to specify the key for partitioning output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required to be specified.
     * 
     */
    @InputImport(name="partitionKey")
      private final @Nullable Output<String> partitionKey;

    public Output<String> getPartitionKey() {
        return this.partitionKey == null ? Output.empty() : this.partitionKey;
    }

    /**
     * Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
     * Expected value is 'Microsoft.Storage/DocumentDB'.
     * 
     */
    @InputImport(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public DocumentDbOutputDataSourceArgs(
        @Nullable Output<String> accountId,
        @Nullable Output<String> accountKey,
        @Nullable Output<String> collectionNamePattern,
        @Nullable Output<String> database,
        @Nullable Output<String> documentId,
        @Nullable Output<String> partitionKey,
        Output<String> type) {
        this.accountId = accountId;
        this.accountKey = accountKey;
        this.collectionNamePattern = collectionNamePattern;
        this.database = database;
        this.documentId = documentId;
        this.partitionKey = partitionKey;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private DocumentDbOutputDataSourceArgs() {
        this.accountId = Output.empty();
        this.accountKey = Output.empty();
        this.collectionNamePattern = Output.empty();
        this.database = Output.empty();
        this.documentId = Output.empty();
        this.partitionKey = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentDbOutputDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> accountId;
        private @Nullable Output<String> accountKey;
        private @Nullable Output<String> collectionNamePattern;
        private @Nullable Output<String> database;
        private @Nullable Output<String> documentId;
        private @Nullable Output<String> partitionKey;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(DocumentDbOutputDataSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.accountKey = defaults.accountKey;
    	      this.collectionNamePattern = defaults.collectionNamePattern;
    	      this.database = defaults.database;
    	      this.documentId = defaults.documentId;
    	      this.partitionKey = defaults.partitionKey;
    	      this.type = defaults.type;
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(@Nullable String accountId) {
            this.accountId = Output.ofNullable(accountId);
            return this;
        }

        public Builder accountKey(@Nullable Output<String> accountKey) {
            this.accountKey = accountKey;
            return this;
        }

        public Builder accountKey(@Nullable String accountKey) {
            this.accountKey = Output.ofNullable(accountKey);
            return this;
        }

        public Builder collectionNamePattern(@Nullable Output<String> collectionNamePattern) {
            this.collectionNamePattern = collectionNamePattern;
            return this;
        }

        public Builder collectionNamePattern(@Nullable String collectionNamePattern) {
            this.collectionNamePattern = Output.ofNullable(collectionNamePattern);
            return this;
        }

        public Builder database(@Nullable Output<String> database) {
            this.database = database;
            return this;
        }

        public Builder database(@Nullable String database) {
            this.database = Output.ofNullable(database);
            return this;
        }

        public Builder documentId(@Nullable Output<String> documentId) {
            this.documentId = documentId;
            return this;
        }

        public Builder documentId(@Nullable String documentId) {
            this.documentId = Output.ofNullable(documentId);
            return this;
        }

        public Builder partitionKey(@Nullable Output<String> partitionKey) {
            this.partitionKey = partitionKey;
            return this;
        }

        public Builder partitionKey(@Nullable String partitionKey) {
            this.partitionKey = Output.ofNullable(partitionKey);
            return this;
        }

        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public DocumentDbOutputDataSourceArgs build() {
            return new DocumentDbOutputDataSourceArgs(accountId, accountKey, collectionNamePattern, database, documentId, partitionKey, type);
        }
    }
}
