// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.enums.FilterTrackPropertyCompareOperation;
import io.pulumi.azurenative.media.enums.FilterTrackPropertyType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * The class to specify one track property condition.
 * 
 */
public final class FilterTrackPropertyConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final FilterTrackPropertyConditionArgs Empty = new FilterTrackPropertyConditionArgs();

    /**
     * The track property condition operation.
     * 
     */
    @Import(name="operation", required=true)
      private final Output<Either<String,FilterTrackPropertyCompareOperation>> operation;

    public Output<Either<String,FilterTrackPropertyCompareOperation>> getOperation() {
        return this.operation;
    }

    /**
     * The track property type.
     * 
     */
    @Import(name="property", required=true)
      private final Output<Either<String,FilterTrackPropertyType>> property;

    public Output<Either<String,FilterTrackPropertyType>> getProperty() {
        return this.property;
    }

    /**
     * The track property value.
     * 
     */
    @Import(name="value", required=true)
      private final Output<String> value;

    public Output<String> getValue() {
        return this.value;
    }

    public FilterTrackPropertyConditionArgs(
        Output<Either<String,FilterTrackPropertyCompareOperation>> operation,
        Output<Either<String,FilterTrackPropertyType>> property,
        Output<String> value) {
        this.operation = Objects.requireNonNull(operation, "expected parameter 'operation' to be non-null");
        this.property = Objects.requireNonNull(property, "expected parameter 'property' to be non-null");
        this.value = Objects.requireNonNull(value, "expected parameter 'value' to be non-null");
    }

    private FilterTrackPropertyConditionArgs() {
        this.operation = Codegen.empty();
        this.property = Codegen.empty();
        this.value = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FilterTrackPropertyConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,FilterTrackPropertyCompareOperation>> operation;
        private Output<Either<String,FilterTrackPropertyType>> property;
        private Output<String> value;

        public Builder() {
    	      // Empty
        }

        public Builder(FilterTrackPropertyConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.operation = defaults.operation;
    	      this.property = defaults.property;
    	      this.value = defaults.value;
        }

        public Builder operation(Output<Either<String,FilterTrackPropertyCompareOperation>> operation) {
            this.operation = Objects.requireNonNull(operation);
            return this;
        }
        public Builder operation(Either<String,FilterTrackPropertyCompareOperation> operation) {
            this.operation = Output.of(Objects.requireNonNull(operation));
            return this;
        }
        public Builder property(Output<Either<String,FilterTrackPropertyType>> property) {
            this.property = Objects.requireNonNull(property);
            return this;
        }
        public Builder property(Either<String,FilterTrackPropertyType> property) {
            this.property = Output.of(Objects.requireNonNull(property));
            return this;
        }
        public Builder value(Output<String> value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }
        public Builder value(String value) {
            this.value = Output.of(Objects.requireNonNull(value));
            return this;
        }        public FilterTrackPropertyConditionArgs build() {
            return new FilterTrackPropertyConditionArgs(operation, property, value);
        }
    }
}
