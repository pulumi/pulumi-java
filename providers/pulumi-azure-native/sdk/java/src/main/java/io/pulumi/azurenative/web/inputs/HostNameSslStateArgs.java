// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.enums.HostType;
import io.pulumi.azurenative.web.enums.SslState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * SSL-enabled hostname.
 * 
 */
public final class HostNameSslStateArgs extends io.pulumi.resources.ResourceArgs {

    public static final HostNameSslStateArgs Empty = new HostNameSslStateArgs();

    /**
     * Indicates whether the hostname is a standard or repository hostname.
     * 
     */
    @Import(name="hostType")
      private final @Nullable Output<HostType> hostType;

    public Output<HostType> hostType() {
        return this.hostType == null ? Codegen.empty() : this.hostType;
    }

    /**
     * Hostname.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * SSL type.
     * 
     */
    @Import(name="sslState")
      private final @Nullable Output<SslState> sslState;

    public Output<SslState> sslState() {
        return this.sslState == null ? Codegen.empty() : this.sslState;
    }

    /**
     * SSL certificate thumbprint.
     * 
     */
    @Import(name="thumbprint")
      private final @Nullable Output<String> thumbprint;

    public Output<String> thumbprint() {
        return this.thumbprint == null ? Codegen.empty() : this.thumbprint;
    }

    /**
     * Set to <code>true</code> to update existing hostname.
     * 
     */
    @Import(name="toUpdate")
      private final @Nullable Output<Boolean> toUpdate;

    public Output<Boolean> toUpdate() {
        return this.toUpdate == null ? Codegen.empty() : this.toUpdate;
    }

    /**
     * Virtual IP address assigned to the hostname if IP based SSL is enabled.
     * 
     */
    @Import(name="virtualIP")
      private final @Nullable Output<String> virtualIP;

    public Output<String> virtualIP() {
        return this.virtualIP == null ? Codegen.empty() : this.virtualIP;
    }

    public HostNameSslStateArgs(
        @Nullable Output<HostType> hostType,
        @Nullable Output<String> name,
        @Nullable Output<SslState> sslState,
        @Nullable Output<String> thumbprint,
        @Nullable Output<Boolean> toUpdate,
        @Nullable Output<String> virtualIP) {
        this.hostType = hostType;
        this.name = name;
        this.sslState = sslState;
        this.thumbprint = thumbprint;
        this.toUpdate = toUpdate;
        this.virtualIP = virtualIP;
    }

    private HostNameSslStateArgs() {
        this.hostType = Codegen.empty();
        this.name = Codegen.empty();
        this.sslState = Codegen.empty();
        this.thumbprint = Codegen.empty();
        this.toUpdate = Codegen.empty();
        this.virtualIP = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HostNameSslStateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<HostType> hostType;
        private @Nullable Output<String> name;
        private @Nullable Output<SslState> sslState;
        private @Nullable Output<String> thumbprint;
        private @Nullable Output<Boolean> toUpdate;
        private @Nullable Output<String> virtualIP;

        public Builder() {
    	      // Empty
        }

        public Builder(HostNameSslStateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostType = defaults.hostType;
    	      this.name = defaults.name;
    	      this.sslState = defaults.sslState;
    	      this.thumbprint = defaults.thumbprint;
    	      this.toUpdate = defaults.toUpdate;
    	      this.virtualIP = defaults.virtualIP;
        }

        public Builder hostType(@Nullable Output<HostType> hostType) {
            this.hostType = hostType;
            return this;
        }
        public Builder hostType(@Nullable HostType hostType) {
            this.hostType = Codegen.ofNullable(hostType);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder sslState(@Nullable Output<SslState> sslState) {
            this.sslState = sslState;
            return this;
        }
        public Builder sslState(@Nullable SslState sslState) {
            this.sslState = Codegen.ofNullable(sslState);
            return this;
        }
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            this.thumbprint = thumbprint;
            return this;
        }
        public Builder thumbprint(@Nullable String thumbprint) {
            this.thumbprint = Codegen.ofNullable(thumbprint);
            return this;
        }
        public Builder toUpdate(@Nullable Output<Boolean> toUpdate) {
            this.toUpdate = toUpdate;
            return this;
        }
        public Builder toUpdate(@Nullable Boolean toUpdate) {
            this.toUpdate = Codegen.ofNullable(toUpdate);
            return this;
        }
        public Builder virtualIP(@Nullable Output<String> virtualIP) {
            this.virtualIP = virtualIP;
            return this;
        }
        public Builder virtualIP(@Nullable String virtualIP) {
            this.virtualIP = Codegen.ofNullable(virtualIP);
            return this;
        }        public HostNameSslStateArgs build() {
            return new HostNameSslStateArgs(hostType, name, sslState, thumbprint, toUpdate, virtualIP);
        }
    }
}
