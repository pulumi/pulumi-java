// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datalakeanalytics;

import io.pulumi.azurenative.datalakeanalytics.enums.AADObjectType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ComputePolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ComputePolicyArgs Empty = new ComputePolicyArgs();

    /**
     * The name of the Data Lake Analytics account.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> getAccountName() {
        return this.accountName;
    }

    /**
     * The name of the compute policy to create or update.
     * 
     */
    @Import(name="computePolicyName")
      private final @Nullable Output<String> computePolicyName;

    public Output<String> getComputePolicyName() {
        return this.computePolicyName == null ? Output.empty() : this.computePolicyName;
    }

    /**
     * The maximum degree of parallelism per job this user can use to submit jobs. This property, the min priority per job property, or both must be passed.
     * 
     */
    @Import(name="maxDegreeOfParallelismPerJob")
      private final @Nullable Output<Integer> maxDegreeOfParallelismPerJob;

    public Output<Integer> getMaxDegreeOfParallelismPerJob() {
        return this.maxDegreeOfParallelismPerJob == null ? Output.empty() : this.maxDegreeOfParallelismPerJob;
    }

    /**
     * The minimum priority per job this user can use to submit jobs. This property, the max degree of parallelism per job property, or both must be passed.
     * 
     */
    @Import(name="minPriorityPerJob")
      private final @Nullable Output<Integer> minPriorityPerJob;

    public Output<Integer> getMinPriorityPerJob() {
        return this.minPriorityPerJob == null ? Output.empty() : this.minPriorityPerJob;
    }

    /**
     * The AAD object identifier for the entity to create a policy for.
     * 
     */
    @Import(name="objectId", required=true)
      private final Output<String> objectId;

    public Output<String> getObjectId() {
        return this.objectId;
    }

    /**
     * The type of AAD object the object identifier refers to.
     * 
     */
    @Import(name="objectType", required=true)
      private final Output<Either<String,AADObjectType>> objectType;

    public Output<Either<String,AADObjectType>> getObjectType() {
        return this.objectType;
    }

    /**
     * The name of the Azure resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    public ComputePolicyArgs(
        Output<String> accountName,
        @Nullable Output<String> computePolicyName,
        @Nullable Output<Integer> maxDegreeOfParallelismPerJob,
        @Nullable Output<Integer> minPriorityPerJob,
        Output<String> objectId,
        Output<Either<String,AADObjectType>> objectType,
        Output<String> resourceGroupName) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.computePolicyName = computePolicyName;
        this.maxDegreeOfParallelismPerJob = maxDegreeOfParallelismPerJob;
        this.minPriorityPerJob = minPriorityPerJob;
        this.objectId = Objects.requireNonNull(objectId, "expected parameter 'objectId' to be non-null");
        this.objectType = Objects.requireNonNull(objectType, "expected parameter 'objectType' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private ComputePolicyArgs() {
        this.accountName = Output.empty();
        this.computePolicyName = Output.empty();
        this.maxDegreeOfParallelismPerJob = Output.empty();
        this.minPriorityPerJob = Output.empty();
        this.objectId = Output.empty();
        this.objectType = Output.empty();
        this.resourceGroupName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ComputePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private @Nullable Output<String> computePolicyName;
        private @Nullable Output<Integer> maxDegreeOfParallelismPerJob;
        private @Nullable Output<Integer> minPriorityPerJob;
        private Output<String> objectId;
        private Output<Either<String,AADObjectType>> objectType;
        private Output<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(ComputePolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.computePolicyName = defaults.computePolicyName;
    	      this.maxDegreeOfParallelismPerJob = defaults.maxDegreeOfParallelismPerJob;
    	      this.minPriorityPerJob = defaults.minPriorityPerJob;
    	      this.objectId = defaults.objectId;
    	      this.objectType = defaults.objectType;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }
        public Builder computePolicyName(@Nullable Output<String> computePolicyName) {
            this.computePolicyName = computePolicyName;
            return this;
        }
        public Builder computePolicyName(@Nullable String computePolicyName) {
            this.computePolicyName = Output.ofNullable(computePolicyName);
            return this;
        }
        public Builder maxDegreeOfParallelismPerJob(@Nullable Output<Integer> maxDegreeOfParallelismPerJob) {
            this.maxDegreeOfParallelismPerJob = maxDegreeOfParallelismPerJob;
            return this;
        }
        public Builder maxDegreeOfParallelismPerJob(@Nullable Integer maxDegreeOfParallelismPerJob) {
            this.maxDegreeOfParallelismPerJob = Output.ofNullable(maxDegreeOfParallelismPerJob);
            return this;
        }
        public Builder minPriorityPerJob(@Nullable Output<Integer> minPriorityPerJob) {
            this.minPriorityPerJob = minPriorityPerJob;
            return this;
        }
        public Builder minPriorityPerJob(@Nullable Integer minPriorityPerJob) {
            this.minPriorityPerJob = Output.ofNullable(minPriorityPerJob);
            return this;
        }
        public Builder objectId(Output<String> objectId) {
            this.objectId = Objects.requireNonNull(objectId);
            return this;
        }
        public Builder objectId(String objectId) {
            this.objectId = Output.of(Objects.requireNonNull(objectId));
            return this;
        }
        public Builder objectType(Output<Either<String,AADObjectType>> objectType) {
            this.objectType = Objects.requireNonNull(objectType);
            return this;
        }
        public Builder objectType(Either<String,AADObjectType> objectType) {
            this.objectType = Output.of(Objects.requireNonNull(objectType));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }        public ComputePolicyArgs build() {
            return new ComputePolicyArgs(accountName, computePolicyName, maxDegreeOfParallelismPerJob, minPriorityPerJob, objectId, objectType, resourceGroupName);
        }
    }
}
