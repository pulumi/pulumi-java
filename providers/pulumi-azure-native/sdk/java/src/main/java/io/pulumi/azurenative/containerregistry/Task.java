// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.containerregistry.outputs.AgentPropertiesResponse;
import io.pulumi.azurenative.containerregistry.outputs.CredentialsResponse;
import io.pulumi.azurenative.containerregistry.outputs.DockerBuildStepResponse;
import io.pulumi.azurenative.containerregistry.outputs.EncodedTaskStepResponse;
import io.pulumi.azurenative.containerregistry.outputs.FileTaskStepResponse;
import io.pulumi.azurenative.containerregistry.outputs.IdentityPropertiesResponse;
import io.pulumi.azurenative.containerregistry.outputs.PlatformPropertiesResponse;
import io.pulumi.azurenative.containerregistry.outputs.SystemDataResponse;
import io.pulumi.azurenative.containerregistry.outputs.TriggerPropertiesResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * The task that has the ARM resource and task properties. 
The task will have all information to schedule a run against it.
API Version: 2019-06-01-preview.

{{% examples %}}
## Example Usage
{{% example %}}
### Tasks_Create
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var task = new AzureNative.ContainerRegistry.Task("task", new AzureNative.ContainerRegistry.TaskArgs
        {
            AgentConfiguration = new AzureNative.ContainerRegistry.Inputs.AgentPropertiesArgs
            {
                Cpu = 2,
            },
            Identity = new AzureNative.ContainerRegistry.Inputs.IdentityPropertiesArgs
            {
                Type = "SystemAssigned",
            },
            IsSystemTask = false,
            Location = "eastus",
            LogTemplate = "acr/tasks:{{.Run.OS}}",
            Platform = new AzureNative.ContainerRegistry.Inputs.PlatformPropertiesArgs
            {
                Architecture = "amd64",
                Os = "Linux",
            },
            RegistryName = "myRegistry",
            ResourceGroupName = "myResourceGroup",
            Status = "Enabled",
            Step = new AzureNative.ContainerRegistry.Inputs.DockerBuildStepArgs
            {
                Arguments = 
                {
                    new AzureNative.ContainerRegistry.Inputs.ArgumentArgs
                    {
                        IsSecret = false,
                        Name = "mytestargument",
                        Value = "mytestvalue",
                    },
                    new AzureNative.ContainerRegistry.Inputs.ArgumentArgs
                    {
                        IsSecret = true,
                        Name = "mysecrettestargument",
                        Value = "mysecrettestvalue",
                    },
                },
                ContextPath = "src",
                DockerFilePath = "src/DockerFile",
                ImageNames = 
                {
                    "azurerest:testtag",
                },
                IsPushEnabled = true,
                NoCache = false,
                Type = "Docker",
            },
            Tags = 
            {
                { "testkey", "value" },
            },
            TaskName = "mytTask",
            Trigger = new AzureNative.ContainerRegistry.Inputs.TriggerPropertiesArgs
            {
                BaseImageTrigger = new AzureNative.ContainerRegistry.Inputs.BaseImageTriggerArgs
                {
                    BaseImageTriggerType = "Runtime",
                    Name = "myBaseImageTrigger",
                    UpdateTriggerEndpoint = "https://user:pass@mycicd.webhook.com?token=foo",
                    UpdateTriggerPayloadType = "Token",
                },
                SourceTriggers = 
                {
                    new AzureNative.ContainerRegistry.Inputs.SourceTriggerArgs
                    {
                        Name = "mySourceTrigger",
                        SourceRepository = new AzureNative.ContainerRegistry.Inputs.SourcePropertiesArgs
                        {
                            Branch = "master",
                            RepositoryUrl = "https://github.com/Azure/azure-rest-api-specs",
                            SourceControlAuthProperties = new AzureNative.ContainerRegistry.Inputs.AuthInfoArgs
                            {
                                Token = "xxxxx",
                                TokenType = "PAT",
                            },
                            SourceControlType = "Github",
                        },
                        SourceTriggerEvents = 
                        {
                            "commit",
                        },
                    },
                },
                TimerTriggers = 
                {
                    new AzureNative.ContainerRegistry.Inputs.TimerTriggerArgs
                    {
                        Name = "myTimerTrigger",
                        Schedule = "30 9 * * 1-5",
                    },
                },
            },
        });
    }

}

```

```go
package main

import (
	containerregistry "github.com/pulumi/pulumi-azure-native/sdk/go/azure/containerregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := containerregistry.NewTask(ctx, "task", &containerregistry.TaskArgs{
			AgentConfiguration: &containerregistry.AgentPropertiesArgs{
				Cpu: pulumi.Int(2),
			},
			Identity: &containerregistry.IdentityPropertiesArgs{
				Type: "SystemAssigned",
			},
			IsSystemTask: pulumi.Bool(false),
			Location:     pulumi.String("eastus"),
			LogTemplate:  pulumi.String("acr/tasks:{{.Run.OS}}"),
			Platform: &containerregistry.PlatformPropertiesArgs{
				Architecture: pulumi.String("amd64"),
				Os:           pulumi.String("Linux"),
			},
			RegistryName:      pulumi.String("myRegistry"),
			ResourceGroupName: pulumi.String("myResourceGroup"),
			Status:            pulumi.String("Enabled"),
			Step: containerregistry.DockerBuildStep{
				Arguments: []containerregistry.Argument{
					containerregistry.Argument{
						IsSecret: false,
						Name:     "mytestargument",
						Value:    "mytestvalue",
					},
					containerregistry.Argument{
						IsSecret: true,
						Name:     "mysecrettestargument",
						Value:    "mysecrettestvalue",
					},
				},
				ContextPath:    "src",
				DockerFilePath: "src/DockerFile",
				ImageNames: []string{
					"azurerest:testtag",
				},
				IsPushEnabled: true,
				NoCache:       false,
				Type:          "Docker",
			},
			Tags: pulumi.StringMap{
				"testkey": pulumi.String("value"),
			},
			TaskName: pulumi.String("mytTask"),
			Trigger: &containerregistry.TriggerPropertiesArgs{
				BaseImageTrigger: &containerregistry.BaseImageTriggerArgs{
					BaseImageTriggerType:     pulumi.String("Runtime"),
					Name:                     pulumi.String("myBaseImageTrigger"),
					UpdateTriggerEndpoint:    pulumi.String("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: pulumi.String("Token"),
				},
				SourceTriggers: containerregistry.SourceTriggerArray{
					&containerregistry.SourceTriggerArgs{
						Name: pulumi.String("mySourceTrigger"),
						SourceRepository: &containerregistry.SourcePropertiesArgs{
							Branch:        pulumi.String("master"),
							RepositoryUrl: pulumi.String("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &containerregistry.AuthInfoArgs{
								Token:     pulumi.String("xxxxx"),
								TokenType: pulumi.String("PAT"),
							},
							SourceControlType: pulumi.String("Github"),
						},
						SourceTriggerEvents: pulumi.StringArray{
							pulumi.String("commit"),
						},
					},
				},
				TimerTriggers: containerregistry.TimerTriggerArray{
					&containerregistry.TimerTriggerArgs{
						Name:     pulumi.String("myTimerTrigger"),
						Schedule: pulumi.String("30 9 * * 1-5"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const task = new azure_native.containerregistry.Task("task", {
    agentConfiguration: {
        cpu: 2,
    },
    identity: {
        type: "SystemAssigned",
    },
    isSystemTask: false,
    location: "eastus",
    logTemplate: "acr/tasks:{{.Run.OS}}",
    platform: {
        architecture: "amd64",
        os: "Linux",
    },
    registryName: "myRegistry",
    resourceGroupName: "myResourceGroup",
    status: "Enabled",
    step: {
        arguments: [
            {
                isSecret: false,
                name: "mytestargument",
                value: "mytestvalue",
            },
            {
                isSecret: true,
                name: "mysecrettestargument",
                value: "mysecrettestvalue",
            },
        ],
        contextPath: "src",
        dockerFilePath: "src/DockerFile",
        imageNames: ["azurerest:testtag"],
        isPushEnabled: true,
        noCache: false,
        type: "Docker",
    },
    tags: {
        testkey: "value",
    },
    taskName: "mytTask",
    trigger: {
        baseImageTrigger: {
            baseImageTriggerType: "Runtime",
            name: "myBaseImageTrigger",
            updateTriggerEndpoint: "https://user:pass@mycicd.webhook.com?token=foo",
            updateTriggerPayloadType: "Token",
        },
        sourceTriggers: [{
            name: "mySourceTrigger",
            sourceRepository: {
                branch: "master",
                repositoryUrl: "https://github.com/Azure/azure-rest-api-specs",
                sourceControlAuthProperties: {
                    token: "xxxxx",
                    tokenType: "PAT",
                },
                sourceControlType: "Github",
            },
            sourceTriggerEvents: ["commit"],
        }],
        timerTriggers: [{
            name: "myTimerTrigger",
            schedule: "30 9 * * 1-5",
        }],
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

task = azure_native.containerregistry.Task("task",
    agent_configuration=azure_native.containerregistry.AgentPropertiesArgs(
        cpu=2,
    ),
    identity=azure_native.containerregistry.IdentityPropertiesArgs(
        type="SystemAssigned",
    ),
    is_system_task=False,
    location="eastus",
    log_template="acr/tasks:{{.Run.OS}}",
    platform=azure_native.containerregistry.PlatformPropertiesArgs(
        architecture="amd64",
        os="Linux",
    ),
    registry_name="myRegistry",
    resource_group_name="myResourceGroup",
    status="Enabled",
    step=azure_native.containerregistry.DockerBuildStepArgs(
        arguments=[
            azure_native.containerregistry.ArgumentArgs(
                is_secret=False,
                name="mytestargument",
                value="mytestvalue",
            ),
            azure_native.containerregistry.ArgumentArgs(
                is_secret=True,
                name="mysecrettestargument",
                value="mysecrettestvalue",
            ),
        ],
        context_path="src",
        docker_file_path="src/DockerFile",
        image_names=["azurerest:testtag"],
        is_push_enabled=True,
        no_cache=False,
        type="Docker",
    ),
    tags={
        "testkey": "value",
    },
    task_name="mytTask",
    trigger=azure_native.containerregistry.TriggerPropertiesArgs(
        base_image_trigger=azure_native.containerregistry.BaseImageTriggerArgs(
            base_image_trigger_type="Runtime",
            name="myBaseImageTrigger",
            update_trigger_endpoint="https://user:pass@mycicd.webhook.com?token=foo",
            update_trigger_payload_type="Token",
        ),
        source_triggers=[azure_native.containerregistry.SourceTriggerArgs(
            name="mySourceTrigger",
            source_repository=azure_native.containerregistry.SourcePropertiesArgs(
                branch="master",
                repository_url="https://github.com/Azure/azure-rest-api-specs",
                source_control_auth_properties=azure_native.containerregistry.AuthInfoArgs(
                    token="xxxxx",
                    token_type="PAT",
                ),
                source_control_type="Github",
            ),
            source_trigger_events=["commit"],
        )],
        timer_triggers=[azure_native.containerregistry.TimerTriggerArgs(
            name="myTimerTrigger",
            schedule="30 9 * * 1-5",
        )],
    ))

```

{{% /example %}}
{{% example %}}
### Tasks_Create_QuickTask
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var task = new AzureNative.ContainerRegistry.Task("task", new AzureNative.ContainerRegistry.TaskArgs
        {
            IsSystemTask = true,
            Location = "eastus",
            LogTemplate = "acr/tasks:{{.Run.OS}}",
            RegistryName = "myRegistry",
            ResourceGroupName = "myResourceGroup",
            Status = "Enabled",
            Tags = 
            {
                { "testkey", "value" },
            },
            TaskName = "quicktask",
        });
    }

}

```

```go
package main

import (
	containerregistry "github.com/pulumi/pulumi-azure-native/sdk/go/azure/containerregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := containerregistry.NewTask(ctx, "task", &containerregistry.TaskArgs{
			IsSystemTask:      pulumi.Bool(true),
			Location:          pulumi.String("eastus"),
			LogTemplate:       pulumi.String("acr/tasks:{{.Run.OS}}"),
			RegistryName:      pulumi.String("myRegistry"),
			ResourceGroupName: pulumi.String("myResourceGroup"),
			Status:            pulumi.String("Enabled"),
			Tags: pulumi.StringMap{
				"testkey": pulumi.String("value"),
			},
			TaskName: pulumi.String("quicktask"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const task = new azure_native.containerregistry.Task("task", {
    isSystemTask: true,
    location: "eastus",
    logTemplate: "acr/tasks:{{.Run.OS}}",
    registryName: "myRegistry",
    resourceGroupName: "myResourceGroup",
    status: "Enabled",
    tags: {
        testkey: "value",
    },
    taskName: "quicktask",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

task = azure_native.containerregistry.Task("task",
    is_system_task=True,
    location="eastus",
    log_template="acr/tasks:{{.Run.OS}}",
    registry_name="myRegistry",
    resource_group_name="myResourceGroup",
    status="Enabled",
    tags={
        "testkey": "value",
    },
    task_name="quicktask")

```

{{% /example %}}
{{% example %}}
### Tasks_Create_WithSystemAndUserIdentities
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var task = new AzureNative.ContainerRegistry.Task("task", new AzureNative.ContainerRegistry.TaskArgs
        {
            AgentConfiguration = new AzureNative.ContainerRegistry.Inputs.AgentPropertiesArgs
            {
                Cpu = 2,
            },
            Identity = new AzureNative.ContainerRegistry.Inputs.IdentityPropertiesArgs
            {
                Type = "SystemAssigned, UserAssigned",
                UserAssignedIdentities = 
                {
                    { "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2",  },
                },
            },
            IsSystemTask = false,
            Location = "eastus",
            Platform = new AzureNative.ContainerRegistry.Inputs.PlatformPropertiesArgs
            {
                Architecture = "amd64",
                Os = "Linux",
            },
            RegistryName = "myRegistry",
            ResourceGroupName = "myResourceGroup",
            Status = "Enabled",
            Step = new AzureNative.ContainerRegistry.Inputs.DockerBuildStepArgs
            {
                Arguments = 
                {
                    new AzureNative.ContainerRegistry.Inputs.ArgumentArgs
                    {
                        IsSecret = false,
                        Name = "mytestargument",
                        Value = "mytestvalue",
                    },
                    new AzureNative.ContainerRegistry.Inputs.ArgumentArgs
                    {
                        IsSecret = true,
                        Name = "mysecrettestargument",
                        Value = "mysecrettestvalue",
                    },
                },
                ContextPath = "src",
                DockerFilePath = "src/DockerFile",
                ImageNames = 
                {
                    "azurerest:testtag",
                },
                IsPushEnabled = true,
                NoCache = false,
                Type = "Docker",
            },
            Tags = 
            {
                { "testkey", "value" },
            },
            TaskName = "mytTask",
            Trigger = new AzureNative.ContainerRegistry.Inputs.TriggerPropertiesArgs
            {
                BaseImageTrigger = new AzureNative.ContainerRegistry.Inputs.BaseImageTriggerArgs
                {
                    BaseImageTriggerType = "Runtime",
                    Name = "myBaseImageTrigger",
                    UpdateTriggerEndpoint = "https://user:pass@mycicd.webhook.com?token=foo",
                    UpdateTriggerPayloadType = "Default",
                },
                SourceTriggers = 
                {
                    new AzureNative.ContainerRegistry.Inputs.SourceTriggerArgs
                    {
                        Name = "mySourceTrigger",
                        SourceRepository = new AzureNative.ContainerRegistry.Inputs.SourcePropertiesArgs
                        {
                            Branch = "master",
                            RepositoryUrl = "https://github.com/Azure/azure-rest-api-specs",
                            SourceControlAuthProperties = new AzureNative.ContainerRegistry.Inputs.AuthInfoArgs
                            {
                                Token = "xxxxx",
                                TokenType = "PAT",
                            },
                            SourceControlType = "Github",
                        },
                        SourceTriggerEvents = 
                        {
                            "commit",
                        },
                    },
                },
                TimerTriggers = 
                {
                    new AzureNative.ContainerRegistry.Inputs.TimerTriggerArgs
                    {
                        Name = "myTimerTrigger",
                        Schedule = "30 9 * * 1-5",
                    },
                },
            },
        });
    }

}

```

```go
package main

import (
	containerregistry "github.com/pulumi/pulumi-azure-native/sdk/go/azure/containerregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := containerregistry.NewTask(ctx, "task", &containerregistry.TaskArgs{
			AgentConfiguration: &containerregistry.AgentPropertiesArgs{
				Cpu: pulumi.Int(2),
			},
			Identity: &containerregistry.IdentityPropertiesArgs{
				Type: "SystemAssigned, UserAssigned",
				UserAssignedIdentities: containerregistry.UserIdentityPropertiesMap{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": nil,
				},
			},
			IsSystemTask: pulumi.Bool(false),
			Location:     pulumi.String("eastus"),
			Platform: &containerregistry.PlatformPropertiesArgs{
				Architecture: pulumi.String("amd64"),
				Os:           pulumi.String("Linux"),
			},
			RegistryName:      pulumi.String("myRegistry"),
			ResourceGroupName: pulumi.String("myResourceGroup"),
			Status:            pulumi.String("Enabled"),
			Step: containerregistry.DockerBuildStep{
				Arguments: []containerregistry.Argument{
					containerregistry.Argument{
						IsSecret: false,
						Name:     "mytestargument",
						Value:    "mytestvalue",
					},
					containerregistry.Argument{
						IsSecret: true,
						Name:     "mysecrettestargument",
						Value:    "mysecrettestvalue",
					},
				},
				ContextPath:    "src",
				DockerFilePath: "src/DockerFile",
				ImageNames: []string{
					"azurerest:testtag",
				},
				IsPushEnabled: true,
				NoCache:       false,
				Type:          "Docker",
			},
			Tags: pulumi.StringMap{
				"testkey": pulumi.String("value"),
			},
			TaskName: pulumi.String("mytTask"),
			Trigger: &containerregistry.TriggerPropertiesArgs{
				BaseImageTrigger: &containerregistry.BaseImageTriggerArgs{
					BaseImageTriggerType:     pulumi.String("Runtime"),
					Name:                     pulumi.String("myBaseImageTrigger"),
					UpdateTriggerEndpoint:    pulumi.String("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: pulumi.String("Default"),
				},
				SourceTriggers: containerregistry.SourceTriggerArray{
					&containerregistry.SourceTriggerArgs{
						Name: pulumi.String("mySourceTrigger"),
						SourceRepository: &containerregistry.SourcePropertiesArgs{
							Branch:        pulumi.String("master"),
							RepositoryUrl: pulumi.String("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &containerregistry.AuthInfoArgs{
								Token:     pulumi.String("xxxxx"),
								TokenType: pulumi.String("PAT"),
							},
							SourceControlType: pulumi.String("Github"),
						},
						SourceTriggerEvents: pulumi.StringArray{
							pulumi.String("commit"),
						},
					},
				},
				TimerTriggers: containerregistry.TimerTriggerArray{
					&containerregistry.TimerTriggerArgs{
						Name:     pulumi.String("myTimerTrigger"),
						Schedule: pulumi.String("30 9 * * 1-5"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const task = new azure_native.containerregistry.Task("task", {
    agentConfiguration: {
        cpu: 2,
    },
    identity: {
        type: "SystemAssigned, UserAssigned",
        userAssignedIdentities: {
            "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {},
        },
    },
    isSystemTask: false,
    location: "eastus",
    platform: {
        architecture: "amd64",
        os: "Linux",
    },
    registryName: "myRegistry",
    resourceGroupName: "myResourceGroup",
    status: "Enabled",
    step: {
        arguments: [
            {
                isSecret: false,
                name: "mytestargument",
                value: "mytestvalue",
            },
            {
                isSecret: true,
                name: "mysecrettestargument",
                value: "mysecrettestvalue",
            },
        ],
        contextPath: "src",
        dockerFilePath: "src/DockerFile",
        imageNames: ["azurerest:testtag"],
        isPushEnabled: true,
        noCache: false,
        type: "Docker",
    },
    tags: {
        testkey: "value",
    },
    taskName: "mytTask",
    trigger: {
        baseImageTrigger: {
            baseImageTriggerType: "Runtime",
            name: "myBaseImageTrigger",
            updateTriggerEndpoint: "https://user:pass@mycicd.webhook.com?token=foo",
            updateTriggerPayloadType: "Default",
        },
        sourceTriggers: [{
            name: "mySourceTrigger",
            sourceRepository: {
                branch: "master",
                repositoryUrl: "https://github.com/Azure/azure-rest-api-specs",
                sourceControlAuthProperties: {
                    token: "xxxxx",
                    tokenType: "PAT",
                },
                sourceControlType: "Github",
            },
            sourceTriggerEvents: ["commit"],
        }],
        timerTriggers: [{
            name: "myTimerTrigger",
            schedule: "30 9 * * 1-5",
        }],
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

task = azure_native.containerregistry.Task("task",
    agent_configuration=azure_native.containerregistry.AgentPropertiesArgs(
        cpu=2,
    ),
    identity=azure_native.containerregistry.IdentityPropertiesArgs(
        type="SystemAssigned, UserAssigned",
        user_assigned_identities={
            "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": azure_native.containerregistry.UserIdentityPropertiesArgs(),
        },
    ),
    is_system_task=False,
    location="eastus",
    platform=azure_native.containerregistry.PlatformPropertiesArgs(
        architecture="amd64",
        os="Linux",
    ),
    registry_name="myRegistry",
    resource_group_name="myResourceGroup",
    status="Enabled",
    step=azure_native.containerregistry.DockerBuildStepArgs(
        arguments=[
            azure_native.containerregistry.ArgumentArgs(
                is_secret=False,
                name="mytestargument",
                value="mytestvalue",
            ),
            azure_native.containerregistry.ArgumentArgs(
                is_secret=True,
                name="mysecrettestargument",
                value="mysecrettestvalue",
            ),
        ],
        context_path="src",
        docker_file_path="src/DockerFile",
        image_names=["azurerest:testtag"],
        is_push_enabled=True,
        no_cache=False,
        type="Docker",
    ),
    tags={
        "testkey": "value",
    },
    task_name="mytTask",
    trigger=azure_native.containerregistry.TriggerPropertiesArgs(
        base_image_trigger=azure_native.containerregistry.BaseImageTriggerArgs(
            base_image_trigger_type="Runtime",
            name="myBaseImageTrigger",
            update_trigger_endpoint="https://user:pass@mycicd.webhook.com?token=foo",
            update_trigger_payload_type="Default",
        ),
        source_triggers=[azure_native.containerregistry.SourceTriggerArgs(
            name="mySourceTrigger",
            source_repository=azure_native.containerregistry.SourcePropertiesArgs(
                branch="master",
                repository_url="https://github.com/Azure/azure-rest-api-specs",
                source_control_auth_properties=azure_native.containerregistry.AuthInfoArgs(
                    token="xxxxx",
                    token_type="PAT",
                ),
                source_control_type="Github",
            ),
            source_trigger_events=["commit"],
        )],
        timer_triggers=[azure_native.containerregistry.TimerTriggerArgs(
            name="myTimerTrigger",
            schedule="30 9 * * 1-5",
        )],
    ))

```

{{% /example %}}
{{% example %}}
### Tasks_Create_WithUserIdentities
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var task = new AzureNative.ContainerRegistry.Task("task", new AzureNative.ContainerRegistry.TaskArgs
        {
            AgentConfiguration = new AzureNative.ContainerRegistry.Inputs.AgentPropertiesArgs
            {
                Cpu = 2,
            },
            Identity = new AzureNative.ContainerRegistry.Inputs.IdentityPropertiesArgs
            {
                Type = "UserAssigned",
                UserAssignedIdentities = 
                {
                    { "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1",  },
                    { "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2",  },
                },
            },
            IsSystemTask = false,
            Location = "eastus",
            Platform = new AzureNative.ContainerRegistry.Inputs.PlatformPropertiesArgs
            {
                Architecture = "amd64",
                Os = "Linux",
            },
            RegistryName = "myRegistry",
            ResourceGroupName = "myResourceGroup",
            Status = "Enabled",
            Step = new AzureNative.ContainerRegistry.Inputs.DockerBuildStepArgs
            {
                Arguments = 
                {
                    new AzureNative.ContainerRegistry.Inputs.ArgumentArgs
                    {
                        IsSecret = false,
                        Name = "mytestargument",
                        Value = "mytestvalue",
                    },
                    new AzureNative.ContainerRegistry.Inputs.ArgumentArgs
                    {
                        IsSecret = true,
                        Name = "mysecrettestargument",
                        Value = "mysecrettestvalue",
                    },
                },
                ContextPath = "src",
                DockerFilePath = "src/DockerFile",
                ImageNames = 
                {
                    "azurerest:testtag",
                },
                IsPushEnabled = true,
                NoCache = false,
                Type = "Docker",
            },
            Tags = 
            {
                { "testkey", "value" },
            },
            TaskName = "mytTask",
            Trigger = new AzureNative.ContainerRegistry.Inputs.TriggerPropertiesArgs
            {
                BaseImageTrigger = new AzureNative.ContainerRegistry.Inputs.BaseImageTriggerArgs
                {
                    BaseImageTriggerType = "Runtime",
                    Name = "myBaseImageTrigger",
                    UpdateTriggerEndpoint = "https://user:pass@mycicd.webhook.com?token=foo",
                    UpdateTriggerPayloadType = "Default",
                },
                SourceTriggers = 
                {
                    new AzureNative.ContainerRegistry.Inputs.SourceTriggerArgs
                    {
                        Name = "mySourceTrigger",
                        SourceRepository = new AzureNative.ContainerRegistry.Inputs.SourcePropertiesArgs
                        {
                            Branch = "master",
                            RepositoryUrl = "https://github.com/Azure/azure-rest-api-specs",
                            SourceControlAuthProperties = new AzureNative.ContainerRegistry.Inputs.AuthInfoArgs
                            {
                                Token = "xxxxx",
                                TokenType = "PAT",
                            },
                            SourceControlType = "Github",
                        },
                        SourceTriggerEvents = 
                        {
                            "commit",
                        },
                    },
                },
                TimerTriggers = 
                {
                    new AzureNative.ContainerRegistry.Inputs.TimerTriggerArgs
                    {
                        Name = "myTimerTrigger",
                        Schedule = "30 9 * * 1-5",
                    },
                },
            },
        });
    }

}

```

```go
package main

import (
	containerregistry "github.com/pulumi/pulumi-azure-native/sdk/go/azure/containerregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := containerregistry.NewTask(ctx, "task", &containerregistry.TaskArgs{
			AgentConfiguration: &containerregistry.AgentPropertiesArgs{
				Cpu: pulumi.Int(2),
			},
			Identity: &containerregistry.IdentityPropertiesArgs{
				Type: "UserAssigned",
				UserAssignedIdentities: containerregistry.UserIdentityPropertiesMap{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1":  nil,
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": nil,
				},
			},
			IsSystemTask: pulumi.Bool(false),
			Location:     pulumi.String("eastus"),
			Platform: &containerregistry.PlatformPropertiesArgs{
				Architecture: pulumi.String("amd64"),
				Os:           pulumi.String("Linux"),
			},
			RegistryName:      pulumi.String("myRegistry"),
			ResourceGroupName: pulumi.String("myResourceGroup"),
			Status:            pulumi.String("Enabled"),
			Step: containerregistry.DockerBuildStep{
				Arguments: []containerregistry.Argument{
					containerregistry.Argument{
						IsSecret: false,
						Name:     "mytestargument",
						Value:    "mytestvalue",
					},
					containerregistry.Argument{
						IsSecret: true,
						Name:     "mysecrettestargument",
						Value:    "mysecrettestvalue",
					},
				},
				ContextPath:    "src",
				DockerFilePath: "src/DockerFile",
				ImageNames: []string{
					"azurerest:testtag",
				},
				IsPushEnabled: true,
				NoCache:       false,
				Type:          "Docker",
			},
			Tags: pulumi.StringMap{
				"testkey": pulumi.String("value"),
			},
			TaskName: pulumi.String("mytTask"),
			Trigger: &containerregistry.TriggerPropertiesArgs{
				BaseImageTrigger: &containerregistry.BaseImageTriggerArgs{
					BaseImageTriggerType:     pulumi.String("Runtime"),
					Name:                     pulumi.String("myBaseImageTrigger"),
					UpdateTriggerEndpoint:    pulumi.String("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: pulumi.String("Default"),
				},
				SourceTriggers: containerregistry.SourceTriggerArray{
					&containerregistry.SourceTriggerArgs{
						Name: pulumi.String("mySourceTrigger"),
						SourceRepository: &containerregistry.SourcePropertiesArgs{
							Branch:        pulumi.String("master"),
							RepositoryUrl: pulumi.String("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &containerregistry.AuthInfoArgs{
								Token:     pulumi.String("xxxxx"),
								TokenType: pulumi.String("PAT"),
							},
							SourceControlType: pulumi.String("Github"),
						},
						SourceTriggerEvents: pulumi.StringArray{
							pulumi.String("commit"),
						},
					},
				},
				TimerTriggers: containerregistry.TimerTriggerArray{
					&containerregistry.TimerTriggerArgs{
						Name:     pulumi.String("myTimerTrigger"),
						Schedule: pulumi.String("30 9 * * 1-5"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const task = new azure_native.containerregistry.Task("task", {
    agentConfiguration: {
        cpu: 2,
    },
    identity: {
        type: "UserAssigned",
        userAssignedIdentities: {
            "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
            "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {},
        },
    },
    isSystemTask: false,
    location: "eastus",
    platform: {
        architecture: "amd64",
        os: "Linux",
    },
    registryName: "myRegistry",
    resourceGroupName: "myResourceGroup",
    status: "Enabled",
    step: {
        arguments: [
            {
                isSecret: false,
                name: "mytestargument",
                value: "mytestvalue",
            },
            {
                isSecret: true,
                name: "mysecrettestargument",
                value: "mysecrettestvalue",
            },
        ],
        contextPath: "src",
        dockerFilePath: "src/DockerFile",
        imageNames: ["azurerest:testtag"],
        isPushEnabled: true,
        noCache: false,
        type: "Docker",
    },
    tags: {
        testkey: "value",
    },
    taskName: "mytTask",
    trigger: {
        baseImageTrigger: {
            baseImageTriggerType: "Runtime",
            name: "myBaseImageTrigger",
            updateTriggerEndpoint: "https://user:pass@mycicd.webhook.com?token=foo",
            updateTriggerPayloadType: "Default",
        },
        sourceTriggers: [{
            name: "mySourceTrigger",
            sourceRepository: {
                branch: "master",
                repositoryUrl: "https://github.com/Azure/azure-rest-api-specs",
                sourceControlAuthProperties: {
                    token: "xxxxx",
                    tokenType: "PAT",
                },
                sourceControlType: "Github",
            },
            sourceTriggerEvents: ["commit"],
        }],
        timerTriggers: [{
            name: "myTimerTrigger",
            schedule: "30 9 * * 1-5",
        }],
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

task = azure_native.containerregistry.Task("task",
    agent_configuration=azure_native.containerregistry.AgentPropertiesArgs(
        cpu=2,
    ),
    identity=azure_native.containerregistry.IdentityPropertiesArgs(
        type="UserAssigned",
        user_assigned_identities={
            "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": azure_native.containerregistry.UserIdentityPropertiesArgs(),
            "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": azure_native.containerregistry.UserIdentityPropertiesArgs(),
        },
    ),
    is_system_task=False,
    location="eastus",
    platform=azure_native.containerregistry.PlatformPropertiesArgs(
        architecture="amd64",
        os="Linux",
    ),
    registry_name="myRegistry",
    resource_group_name="myResourceGroup",
    status="Enabled",
    step=azure_native.containerregistry.DockerBuildStepArgs(
        arguments=[
            azure_native.containerregistry.ArgumentArgs(
                is_secret=False,
                name="mytestargument",
                value="mytestvalue",
            ),
            azure_native.containerregistry.ArgumentArgs(
                is_secret=True,
                name="mysecrettestargument",
                value="mysecrettestvalue",
            ),
        ],
        context_path="src",
        docker_file_path="src/DockerFile",
        image_names=["azurerest:testtag"],
        is_push_enabled=True,
        no_cache=False,
        type="Docker",
    ),
    tags={
        "testkey": "value",
    },
    task_name="mytTask",
    trigger=azure_native.containerregistry.TriggerPropertiesArgs(
        base_image_trigger=azure_native.containerregistry.BaseImageTriggerArgs(
            base_image_trigger_type="Runtime",
            name="myBaseImageTrigger",
            update_trigger_endpoint="https://user:pass@mycicd.webhook.com?token=foo",
            update_trigger_payload_type="Default",
        ),
        source_triggers=[azure_native.containerregistry.SourceTriggerArgs(
            name="mySourceTrigger",
            source_repository=azure_native.containerregistry.SourcePropertiesArgs(
                branch="master",
                repository_url="https://github.com/Azure/azure-rest-api-specs",
                source_control_auth_properties=azure_native.containerregistry.AuthInfoArgs(
                    token="xxxxx",
                    token_type="PAT",
                ),
                source_control_type="Github",
            ),
            source_trigger_events=["commit"],
        )],
        timer_triggers=[azure_native.containerregistry.TimerTriggerArgs(
            name="myTimerTrigger",
            schedule="30 9 * * 1-5",
        )],
    ))

```

{{% /example %}}
{{% example %}}
### Tasks_Create_WithUserIdentities_WithSystemIdentity
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var task = new AzureNative.ContainerRegistry.Task("task", new AzureNative.ContainerRegistry.TaskArgs
        {
            AgentConfiguration = new AzureNative.ContainerRegistry.Inputs.AgentPropertiesArgs
            {
                Cpu = 2,
            },
            Identity = new AzureNative.ContainerRegistry.Inputs.IdentityPropertiesArgs
            {
                Type = "SystemAssigned",
            },
            IsSystemTask = false,
            Location = "eastus",
            Platform = new AzureNative.ContainerRegistry.Inputs.PlatformPropertiesArgs
            {
                Architecture = "amd64",
                Os = "Linux",
            },
            RegistryName = "myRegistry",
            ResourceGroupName = "myResourceGroup",
            Status = "Enabled",
            Step = new AzureNative.ContainerRegistry.Inputs.DockerBuildStepArgs
            {
                Arguments = 
                {
                    new AzureNative.ContainerRegistry.Inputs.ArgumentArgs
                    {
                        IsSecret = false,
                        Name = "mytestargument",
                        Value = "mytestvalue",
                    },
                    new AzureNative.ContainerRegistry.Inputs.ArgumentArgs
                    {
                        IsSecret = true,
                        Name = "mysecrettestargument",
                        Value = "mysecrettestvalue",
                    },
                },
                ContextPath = "src",
                DockerFilePath = "src/DockerFile",
                ImageNames = 
                {
                    "azurerest:testtag",
                },
                IsPushEnabled = true,
                NoCache = false,
                Type = "Docker",
            },
            Tags = 
            {
                { "testkey", "value" },
            },
            TaskName = "mytTask",
            Trigger = new AzureNative.ContainerRegistry.Inputs.TriggerPropertiesArgs
            {
                BaseImageTrigger = new AzureNative.ContainerRegistry.Inputs.BaseImageTriggerArgs
                {
                    BaseImageTriggerType = "Runtime",
                    Name = "myBaseImageTrigger",
                },
                SourceTriggers = 
                {
                    new AzureNative.ContainerRegistry.Inputs.SourceTriggerArgs
                    {
                        Name = "mySourceTrigger",
                        SourceRepository = new AzureNative.ContainerRegistry.Inputs.SourcePropertiesArgs
                        {
                            Branch = "master",
                            RepositoryUrl = "https://github.com/Azure/azure-rest-api-specs",
                            SourceControlAuthProperties = new AzureNative.ContainerRegistry.Inputs.AuthInfoArgs
                            {
                                Token = "xxxxx",
                                TokenType = "PAT",
                            },
                            SourceControlType = "Github",
                        },
                        SourceTriggerEvents = 
                        {
                            "commit",
                        },
                    },
                },
                TimerTriggers = 
                {
                    new AzureNative.ContainerRegistry.Inputs.TimerTriggerArgs
                    {
                        Name = "myTimerTrigger",
                        Schedule = "30 9 * * 1-5",
                    },
                },
            },
        });
    }

}

```

```go
package main

import (
	containerregistry "github.com/pulumi/pulumi-azure-native/sdk/go/azure/containerregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := containerregistry.NewTask(ctx, "task", &containerregistry.TaskArgs{
			AgentConfiguration: &containerregistry.AgentPropertiesArgs{
				Cpu: pulumi.Int(2),
			},
			Identity: &containerregistry.IdentityPropertiesArgs{
				Type: "SystemAssigned",
			},
			IsSystemTask: pulumi.Bool(false),
			Location:     pulumi.String("eastus"),
			Platform: &containerregistry.PlatformPropertiesArgs{
				Architecture: pulumi.String("amd64"),
				Os:           pulumi.String("Linux"),
			},
			RegistryName:      pulumi.String("myRegistry"),
			ResourceGroupName: pulumi.String("myResourceGroup"),
			Status:            pulumi.String("Enabled"),
			Step: containerregistry.DockerBuildStep{
				Arguments: []containerregistry.Argument{
					containerregistry.Argument{
						IsSecret: false,
						Name:     "mytestargument",
						Value:    "mytestvalue",
					},
					containerregistry.Argument{
						IsSecret: true,
						Name:     "mysecrettestargument",
						Value:    "mysecrettestvalue",
					},
				},
				ContextPath:    "src",
				DockerFilePath: "src/DockerFile",
				ImageNames: []string{
					"azurerest:testtag",
				},
				IsPushEnabled: true,
				NoCache:       false,
				Type:          "Docker",
			},
			Tags: pulumi.StringMap{
				"testkey": pulumi.String("value"),
			},
			TaskName: pulumi.String("mytTask"),
			Trigger: &containerregistry.TriggerPropertiesArgs{
				BaseImageTrigger: &containerregistry.BaseImageTriggerArgs{
					BaseImageTriggerType: pulumi.String("Runtime"),
					Name:                 pulumi.String("myBaseImageTrigger"),
				},
				SourceTriggers: containerregistry.SourceTriggerArray{
					&containerregistry.SourceTriggerArgs{
						Name: pulumi.String("mySourceTrigger"),
						SourceRepository: &containerregistry.SourcePropertiesArgs{
							Branch:        pulumi.String("master"),
							RepositoryUrl: pulumi.String("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &containerregistry.AuthInfoArgs{
								Token:     pulumi.String("xxxxx"),
								TokenType: pulumi.String("PAT"),
							},
							SourceControlType: pulumi.String("Github"),
						},
						SourceTriggerEvents: pulumi.StringArray{
							pulumi.String("commit"),
						},
					},
				},
				TimerTriggers: containerregistry.TimerTriggerArray{
					&containerregistry.TimerTriggerArgs{
						Name:     pulumi.String("myTimerTrigger"),
						Schedule: pulumi.String("30 9 * * 1-5"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const task = new azure_native.containerregistry.Task("task", {
    agentConfiguration: {
        cpu: 2,
    },
    identity: {
        type: "SystemAssigned",
    },
    isSystemTask: false,
    location: "eastus",
    platform: {
        architecture: "amd64",
        os: "Linux",
    },
    registryName: "myRegistry",
    resourceGroupName: "myResourceGroup",
    status: "Enabled",
    step: {
        arguments: [
            {
                isSecret: false,
                name: "mytestargument",
                value: "mytestvalue",
            },
            {
                isSecret: true,
                name: "mysecrettestargument",
                value: "mysecrettestvalue",
            },
        ],
        contextPath: "src",
        dockerFilePath: "src/DockerFile",
        imageNames: ["azurerest:testtag"],
        isPushEnabled: true,
        noCache: false,
        type: "Docker",
    },
    tags: {
        testkey: "value",
    },
    taskName: "mytTask",
    trigger: {
        baseImageTrigger: {
            baseImageTriggerType: "Runtime",
            name: "myBaseImageTrigger",
        },
        sourceTriggers: [{
            name: "mySourceTrigger",
            sourceRepository: {
                branch: "master",
                repositoryUrl: "https://github.com/Azure/azure-rest-api-specs",
                sourceControlAuthProperties: {
                    token: "xxxxx",
                    tokenType: "PAT",
                },
                sourceControlType: "Github",
            },
            sourceTriggerEvents: ["commit"],
        }],
        timerTriggers: [{
            name: "myTimerTrigger",
            schedule: "30 9 * * 1-5",
        }],
    },
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

task = azure_native.containerregistry.Task("task",
    agent_configuration=azure_native.containerregistry.AgentPropertiesArgs(
        cpu=2,
    ),
    identity=azure_native.containerregistry.IdentityPropertiesArgs(
        type="SystemAssigned",
    ),
    is_system_task=False,
    location="eastus",
    platform=azure_native.containerregistry.PlatformPropertiesArgs(
        architecture="amd64",
        os="Linux",
    ),
    registry_name="myRegistry",
    resource_group_name="myResourceGroup",
    status="Enabled",
    step=azure_native.containerregistry.DockerBuildStepArgs(
        arguments=[
            azure_native.containerregistry.ArgumentArgs(
                is_secret=False,
                name="mytestargument",
                value="mytestvalue",
            ),
            azure_native.containerregistry.ArgumentArgs(
                is_secret=True,
                name="mysecrettestargument",
                value="mysecrettestvalue",
            ),
        ],
        context_path="src",
        docker_file_path="src/DockerFile",
        image_names=["azurerest:testtag"],
        is_push_enabled=True,
        no_cache=False,
        type="Docker",
    ),
    tags={
        "testkey": "value",
    },
    task_name="mytTask",
    trigger=azure_native.containerregistry.TriggerPropertiesArgs(
        base_image_trigger=azure_native.containerregistry.BaseImageTriggerArgs(
            base_image_trigger_type="Runtime",
            name="myBaseImageTrigger",
        ),
        source_triggers=[azure_native.containerregistry.SourceTriggerArgs(
            name="mySourceTrigger",
            source_repository=azure_native.containerregistry.SourcePropertiesArgs(
                branch="master",
                repository_url="https://github.com/Azure/azure-rest-api-specs",
                source_control_auth_properties=azure_native.containerregistry.AuthInfoArgs(
                    token="xxxxx",
                    token_type="PAT",
                ),
                source_control_type="Github",
            ),
            source_trigger_events=["commit"],
        )],
        timer_triggers=[azure_native.containerregistry.TimerTriggerArgs(
            name="myTimerTrigger",
            schedule="30 9 * * 1-5",
        )],
    ))

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:containerregistry:Task myTask /subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask 
```

 */
@ResourceType(type="azure-native:containerregistry:Task")
public class Task extends io.pulumi.resources.CustomResource {
    /**
     * The machine configuration of the run agent.
     */
    @OutputExport(name="agentConfiguration", type=AgentPropertiesResponse.class, parameters={})
    private Output</* @Nullable */ AgentPropertiesResponse> agentConfiguration;

    /**
     * @return The machine configuration of the run agent.
     */
    public Output</* @Nullable */ AgentPropertiesResponse> getAgentConfiguration() {
        return this.agentConfiguration;
    }
    /**
     * The dedicated agent pool for the task.
     */
    @OutputExport(name="agentPoolName", type=String.class, parameters={})
    private Output</* @Nullable */ String> agentPoolName;

    /**
     * @return The dedicated agent pool for the task.
     */
    public Output</* @Nullable */ String> getAgentPoolName() {
        return this.agentPoolName;
    }
    /**
     * The creation date of task.
     */
    @OutputExport(name="creationDate", type=String.class, parameters={})
    private Output<String> creationDate;

    /**
     * @return The creation date of task.
     */
    public Output<String> getCreationDate() {
        return this.creationDate;
    }
    /**
     * The properties that describes a set of credentials that will be used when this run is invoked.
     */
    @OutputExport(name="credentials", type=CredentialsResponse.class, parameters={})
    private Output</* @Nullable */ CredentialsResponse> credentials;

    /**
     * @return The properties that describes a set of credentials that will be used when this run is invoked.
     */
    public Output</* @Nullable */ CredentialsResponse> getCredentials() {
        return this.credentials;
    }
    /**
     * Identity for the resource.
     */
    @OutputExport(name="identity", type=IdentityPropertiesResponse.class, parameters={})
    private Output</* @Nullable */ IdentityPropertiesResponse> identity;

    /**
     * @return Identity for the resource.
     */
    public Output</* @Nullable */ IdentityPropertiesResponse> getIdentity() {
        return this.identity;
    }
    /**
     * The value of this property indicates whether the task resource is system task or not.
     */
    @OutputExport(name="isSystemTask", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isSystemTask;

    /**
     * @return The value of this property indicates whether the task resource is system task or not.
     */
    public Output</* @Nullable */ Boolean> getIsSystemTask() {
        return this.isSystemTask;
    }
    /**
     * The location of the resource. This cannot be changed after the resource is created.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The location of the resource. This cannot be changed after the resource is created.
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * The template that describes the repository and tag information for run log artifact.
     */
    @OutputExport(name="logTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> logTemplate;

    /**
     * @return The template that describes the repository and tag information for run log artifact.
     */
    public Output</* @Nullable */ String> getLogTemplate() {
        return this.logTemplate;
    }
    /**
     * The name of the resource.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The platform properties against which the run has to happen.
     */
    @OutputExport(name="platform", type=PlatformPropertiesResponse.class, parameters={})
    private Output</* @Nullable */ PlatformPropertiesResponse> platform;

    /**
     * @return The platform properties against which the run has to happen.
     */
    public Output</* @Nullable */ PlatformPropertiesResponse> getPlatform() {
        return this.platform;
    }
    /**
     * The provisioning state of the task.
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning state of the task.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The current status of task.
     */
    @OutputExport(name="status", type=String.class, parameters={})
    private Output</* @Nullable */ String> status;

    /**
     * @return The current status of task.
     */
    public Output</* @Nullable */ String> getStatus() {
        return this.status;
    }
    /**
     * The properties of a task step.
     */
    @OutputExport(name="step", type=Object.class, parameters={})
    private Output</* @Nullable */ Object> step;

    /**
     * @return The properties of a task step.
     */
    public Output</* @Nullable */ Object> getStep() {
        return this.step;
    }
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    @OutputExport(name="systemData", type=SystemDataResponse.class, parameters={})
    private Output<SystemDataResponse> systemData;

    /**
     * @return Metadata pertaining to creation and last modification of the resource.
     */
    public Output<SystemDataResponse> getSystemData() {
        return this.systemData;
    }
    /**
     * The tags of the resource.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return The tags of the resource.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Run timeout in seconds.
     */
    @OutputExport(name="timeout", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> timeout;

    /**
     * @return Run timeout in seconds.
     */
    public Output</* @Nullable */ Integer> getTimeout() {
        return this.timeout;
    }
    /**
     * The properties that describe all triggers for the task.
     */
    @OutputExport(name="trigger", type=TriggerPropertiesResponse.class, parameters={})
    private Output</* @Nullable */ TriggerPropertiesResponse> trigger;

    /**
     * @return The properties that describe all triggers for the task.
     */
    public Output</* @Nullable */ TriggerPropertiesResponse> getTrigger() {
        return this.trigger;
    }
    /**
     * The type of the resource.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Task(String name, TaskArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:containerregistry:Task", name, args == null ? TaskArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Task(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:containerregistry:Task", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:containerregistry/v20180201preview:Task").build()),
                Input.of(Alias.builder().setType("azure-native:containerregistry/v20180901:Task").build()),
                Input.of(Alias.builder().setType("azure-native:containerregistry/v20190401:Task").build()),
                Input.of(Alias.builder().setType("azure-native:containerregistry/v20190601preview:Task").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Task get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Task(name, id, options);
    }
}
