// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.inputs;

import io.pulumi.azurenative.recoveryservices.inputs.HealthErrorResponse;
import io.pulumi.azurenative.recoveryservices.inputs.InMageAgentDetailsResponse;
import io.pulumi.azurenative.recoveryservices.inputs.InMageProtectedDiskDetailsResponse;
import io.pulumi.azurenative.recoveryservices.inputs.InitialReplicationDetailsResponse;
import io.pulumi.azurenative.recoveryservices.inputs.OSDiskDetailsResponse;
import io.pulumi.azurenative.recoveryservices.inputs.VMNicDetailsResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * InMage provider specific settings
 * 
 */
public final class InMageReplicationDetailsResponse extends io.pulumi.resources.InvokeArgs {

    public static final InMageReplicationDetailsResponse Empty = new InMageReplicationDetailsResponse();

    /**
     * The active location of the VM. If the VM is being protected from Azure, this field will take values from { Azure, OnPrem }. If the VM is being protected between two data-centers, this field will be OnPrem always.
     * 
     */
    @Import(name="activeSiteType")
      private final @Nullable String activeSiteType;

    public Optional<String> getActiveSiteType() {
        return this.activeSiteType == null ? Optional.empty() : Optional.ofNullable(this.activeSiteType);
    }

    /**
     * The agent details.
     * 
     */
    @Import(name="agentDetails")
      private final @Nullable InMageAgentDetailsResponse agentDetails;

    public Optional<InMageAgentDetailsResponse> getAgentDetails() {
        return this.agentDetails == null ? Optional.empty() : Optional.ofNullable(this.agentDetails);
    }

    /**
     * A value indicating the underlying Azure storage account. If the VM is not running in Azure, this value shall be set to null.
     * 
     */
    @Import(name="azureStorageAccountId")
      private final @Nullable String azureStorageAccountId;

    public Optional<String> getAzureStorageAccountId() {
        return this.azureStorageAccountId == null ? Optional.empty() : Optional.ofNullable(this.azureStorageAccountId);
    }

    /**
     * The compressed data change rate in MB.
     * 
     */
    @Import(name="compressedDataRateInMB")
      private final @Nullable Double compressedDataRateInMB;

    public Optional<Double> getCompressedDataRateInMB() {
        return this.compressedDataRateInMB == null ? Optional.empty() : Optional.ofNullable(this.compressedDataRateInMB);
    }

    /**
     * The collection of Consistency points.
     * 
     */
    @Import(name="consistencyPoints")
      private final @Nullable Map<String,String> consistencyPoints;

    public Map<String,String> getConsistencyPoints() {
        return this.consistencyPoints == null ? Map.of() : this.consistencyPoints;
    }

    /**
     * The data stores of the on-premise machine Value can be list of strings that contain data store names
     * 
     */
    @Import(name="datastores")
      private final @Nullable List<String> datastores;

    public List<String> getDatastores() {
        return this.datastores == null ? List.of() : this.datastores;
    }

    /**
     * A value indicating the discovery type of the machine.
     * 
     */
    @Import(name="discoveryType")
      private final @Nullable String discoveryType;

    public Optional<String> getDiscoveryType() {
        return this.discoveryType == null ? Optional.empty() : Optional.ofNullable(this.discoveryType);
    }

    /**
     * A value indicating whether any disk is resized for this VM.
     * 
     */
    @Import(name="diskResized")
      private final @Nullable String diskResized;

    public Optional<String> getDiskResized() {
        return this.diskResized == null ? Optional.empty() : Optional.ofNullable(this.diskResized);
    }

    /**
     * The infrastructure VM Id.
     * 
     */
    @Import(name="infrastructureVmId")
      private final @Nullable String infrastructureVmId;

    public Optional<String> getInfrastructureVmId() {
        return this.infrastructureVmId == null ? Optional.empty() : Optional.ofNullable(this.infrastructureVmId);
    }

    /**
     * Gets the Instance type.
     * Expected value is 'InMage'.
     * 
     */
    @Import(name="instanceType", required=true)
      private final String instanceType;

    public String getInstanceType() {
        return this.instanceType;
    }

    /**
     * The source IP address.
     * 
     */
    @Import(name="ipAddress")
      private final @Nullable String ipAddress;

    public Optional<String> getIpAddress() {
        return this.ipAddress == null ? Optional.empty() : Optional.ofNullable(this.ipAddress);
    }

    /**
     * The last heartbeat received from the source server.
     * 
     */
    @Import(name="lastHeartbeat")
      private final @Nullable String lastHeartbeat;

    public Optional<String> getLastHeartbeat() {
        return this.lastHeartbeat == null ? Optional.empty() : Optional.ofNullable(this.lastHeartbeat);
    }

    /**
     * The last RPO calculated time.
     * 
     */
    @Import(name="lastRpoCalculatedTime")
      private final @Nullable String lastRpoCalculatedTime;

    public Optional<String> getLastRpoCalculatedTime() {
        return this.lastRpoCalculatedTime == null ? Optional.empty() : Optional.ofNullable(this.lastRpoCalculatedTime);
    }

    /**
     * The last update time received from on-prem components.
     * 
     */
    @Import(name="lastUpdateReceivedTime")
      private final @Nullable String lastUpdateReceivedTime;

    public Optional<String> getLastUpdateReceivedTime() {
        return this.lastUpdateReceivedTime == null ? Optional.empty() : Optional.ofNullable(this.lastUpdateReceivedTime);
    }

    /**
     * The master target Id.
     * 
     */
    @Import(name="masterTargetId")
      private final @Nullable String masterTargetId;

    public Optional<String> getMasterTargetId() {
        return this.masterTargetId == null ? Optional.empty() : Optional.ofNullable(this.masterTargetId);
    }

    /**
     * The multi vm group Id, if any.
     * 
     */
    @Import(name="multiVmGroupId")
      private final @Nullable String multiVmGroupId;

    public Optional<String> getMultiVmGroupId() {
        return this.multiVmGroupId == null ? Optional.empty() : Optional.ofNullable(this.multiVmGroupId);
    }

    /**
     * The multi vm group name, if any.
     * 
     */
    @Import(name="multiVmGroupName")
      private final @Nullable String multiVmGroupName;

    public Optional<String> getMultiVmGroupName() {
        return this.multiVmGroupName == null ? Optional.empty() : Optional.ofNullable(this.multiVmGroupName);
    }

    /**
     * A value indicating whether the multi vm sync is enabled or disabled.
     * 
     */
    @Import(name="multiVmSyncStatus")
      private final @Nullable String multiVmSyncStatus;

    public Optional<String> getMultiVmSyncStatus() {
        return this.multiVmSyncStatus == null ? Optional.empty() : Optional.ofNullable(this.multiVmSyncStatus);
    }

    /**
     * The OS details.
     * 
     */
    @Import(name="osDetails")
      private final @Nullable OSDiskDetailsResponse osDetails;

    public Optional<OSDiskDetailsResponse> getOsDetails() {
        return this.osDetails == null ? Optional.empty() : Optional.ofNullable(this.osDetails);
    }

    /**
     * The OS Version of the protected item.
     * 
     */
    @Import(name="osVersion")
      private final @Nullable String osVersion;

    public Optional<String> getOsVersion() {
        return this.osVersion == null ? Optional.empty() : Optional.ofNullable(this.osVersion);
    }

    /**
     * The process server Id.
     * 
     */
    @Import(name="processServerId")
      private final @Nullable String processServerId;

    public Optional<String> getProcessServerId() {
        return this.processServerId == null ? Optional.empty() : Optional.ofNullable(this.processServerId);
    }

    /**
     * The list of protected disks.
     * 
     */
    @Import(name="protectedDisks")
      private final @Nullable List<InMageProtectedDiskDetailsResponse> protectedDisks;

    public List<InMageProtectedDiskDetailsResponse> getProtectedDisks() {
        return this.protectedDisks == null ? List.of() : this.protectedDisks;
    }

    /**
     * The protection stage.
     * 
     */
    @Import(name="protectionStage")
      private final @Nullable String protectionStage;

    public Optional<String> getProtectionStage() {
        return this.protectionStage == null ? Optional.empty() : Optional.ofNullable(this.protectionStage);
    }

    /**
     * A value indicating whether the source server requires a restart after update.
     * 
     */
    @Import(name="rebootAfterUpdateStatus")
      private final @Nullable String rebootAfterUpdateStatus;

    public Optional<String> getRebootAfterUpdateStatus() {
        return this.rebootAfterUpdateStatus == null ? Optional.empty() : Optional.ofNullable(this.rebootAfterUpdateStatus);
    }

    /**
     * The replica id of the protected item.
     * 
     */
    @Import(name="replicaId")
      private final @Nullable String replicaId;

    public Optional<String> getReplicaId() {
        return this.replicaId == null ? Optional.empty() : Optional.ofNullable(this.replicaId);
    }

    /**
     * The resync details of the machine
     * 
     */
    @Import(name="resyncDetails")
      private final @Nullable InitialReplicationDetailsResponse resyncDetails;

    public Optional<InitialReplicationDetailsResponse> getResyncDetails() {
        return this.resyncDetails == null ? Optional.empty() : Optional.ofNullable(this.resyncDetails);
    }

    /**
     * The retention window end time.
     * 
     */
    @Import(name="retentionWindowEnd")
      private final @Nullable String retentionWindowEnd;

    public Optional<String> getRetentionWindowEnd() {
        return this.retentionWindowEnd == null ? Optional.empty() : Optional.ofNullable(this.retentionWindowEnd);
    }

    /**
     * The retention window start time.
     * 
     */
    @Import(name="retentionWindowStart")
      private final @Nullable String retentionWindowStart;

    public Optional<String> getRetentionWindowStart() {
        return this.retentionWindowStart == null ? Optional.empty() : Optional.ofNullable(this.retentionWindowStart);
    }

    /**
     * The RPO in seconds.
     * 
     */
    @Import(name="rpoInSeconds")
      private final @Nullable Double rpoInSeconds;

    public Optional<Double> getRpoInSeconds() {
        return this.rpoInSeconds == null ? Optional.empty() : Optional.ofNullable(this.rpoInSeconds);
    }

    /**
     * The CPU count of the VM on the primary side.
     * 
     */
    @Import(name="sourceVmCpuCount")
      private final @Nullable Integer sourceVmCpuCount;

    public Optional<Integer> getSourceVmCpuCount() {
        return this.sourceVmCpuCount == null ? Optional.empty() : Optional.ofNullable(this.sourceVmCpuCount);
    }

    /**
     * The RAM size of the VM on the primary side.
     * 
     */
    @Import(name="sourceVmRamSizeInMB")
      private final @Nullable Integer sourceVmRamSizeInMB;

    public Optional<Integer> getSourceVmRamSizeInMB() {
        return this.sourceVmRamSizeInMB == null ? Optional.empty() : Optional.ofNullable(this.sourceVmRamSizeInMB);
    }

    /**
     * The uncompressed data change rate in MB.
     * 
     */
    @Import(name="uncompressedDataRateInMB")
      private final @Nullable Double uncompressedDataRateInMB;

    public Optional<Double> getUncompressedDataRateInMB() {
        return this.uncompressedDataRateInMB == null ? Optional.empty() : Optional.ofNullable(this.uncompressedDataRateInMB);
    }

    /**
     * The vCenter infrastructure Id.
     * 
     */
    @Import(name="vCenterInfrastructureId")
      private final @Nullable String vCenterInfrastructureId;

    public Optional<String> getVCenterInfrastructureId() {
        return this.vCenterInfrastructureId == null ? Optional.empty() : Optional.ofNullable(this.vCenterInfrastructureId);
    }

    /**
     * The validation errors of the on-premise machine Value can be list of validation errors
     * 
     */
    @Import(name="validationErrors")
      private final @Nullable List<HealthErrorResponse> validationErrors;

    public List<HealthErrorResponse> getValidationErrors() {
        return this.validationErrors == null ? List.of() : this.validationErrors;
    }

    /**
     * The virtual machine Id.
     * 
     */
    @Import(name="vmId")
      private final @Nullable String vmId;

    public Optional<String> getVmId() {
        return this.vmId == null ? Optional.empty() : Optional.ofNullable(this.vmId);
    }

    /**
     * The PE Network details.
     * 
     */
    @Import(name="vmNics")
      private final @Nullable List<VMNicDetailsResponse> vmNics;

    public List<VMNicDetailsResponse> getVmNics() {
        return this.vmNics == null ? List.of() : this.vmNics;
    }

    /**
     * The protection state for the vm.
     * 
     */
    @Import(name="vmProtectionState")
      private final @Nullable String vmProtectionState;

    public Optional<String> getVmProtectionState() {
        return this.vmProtectionState == null ? Optional.empty() : Optional.ofNullable(this.vmProtectionState);
    }

    /**
     * The protection state description for the vm.
     * 
     */
    @Import(name="vmProtectionStateDescription")
      private final @Nullable String vmProtectionStateDescription;

    public Optional<String> getVmProtectionStateDescription() {
        return this.vmProtectionStateDescription == null ? Optional.empty() : Optional.ofNullable(this.vmProtectionStateDescription);
    }

    public InMageReplicationDetailsResponse(
        @Nullable String activeSiteType,
        @Nullable InMageAgentDetailsResponse agentDetails,
        @Nullable String azureStorageAccountId,
        @Nullable Double compressedDataRateInMB,
        @Nullable Map<String,String> consistencyPoints,
        @Nullable List<String> datastores,
        @Nullable String discoveryType,
        @Nullable String diskResized,
        @Nullable String infrastructureVmId,
        String instanceType,
        @Nullable String ipAddress,
        @Nullable String lastHeartbeat,
        @Nullable String lastRpoCalculatedTime,
        @Nullable String lastUpdateReceivedTime,
        @Nullable String masterTargetId,
        @Nullable String multiVmGroupId,
        @Nullable String multiVmGroupName,
        @Nullable String multiVmSyncStatus,
        @Nullable OSDiskDetailsResponse osDetails,
        @Nullable String osVersion,
        @Nullable String processServerId,
        @Nullable List<InMageProtectedDiskDetailsResponse> protectedDisks,
        @Nullable String protectionStage,
        @Nullable String rebootAfterUpdateStatus,
        @Nullable String replicaId,
        @Nullable InitialReplicationDetailsResponse resyncDetails,
        @Nullable String retentionWindowEnd,
        @Nullable String retentionWindowStart,
        @Nullable Double rpoInSeconds,
        @Nullable Integer sourceVmCpuCount,
        @Nullable Integer sourceVmRamSizeInMB,
        @Nullable Double uncompressedDataRateInMB,
        @Nullable String vCenterInfrastructureId,
        @Nullable List<HealthErrorResponse> validationErrors,
        @Nullable String vmId,
        @Nullable List<VMNicDetailsResponse> vmNics,
        @Nullable String vmProtectionState,
        @Nullable String vmProtectionStateDescription) {
        this.activeSiteType = activeSiteType;
        this.agentDetails = agentDetails;
        this.azureStorageAccountId = azureStorageAccountId;
        this.compressedDataRateInMB = compressedDataRateInMB;
        this.consistencyPoints = consistencyPoints;
        this.datastores = datastores;
        this.discoveryType = discoveryType;
        this.diskResized = diskResized;
        this.infrastructureVmId = infrastructureVmId;
        this.instanceType = Objects.requireNonNull(instanceType, "expected parameter 'instanceType' to be non-null");
        this.ipAddress = ipAddress;
        this.lastHeartbeat = lastHeartbeat;
        this.lastRpoCalculatedTime = lastRpoCalculatedTime;
        this.lastUpdateReceivedTime = lastUpdateReceivedTime;
        this.masterTargetId = masterTargetId;
        this.multiVmGroupId = multiVmGroupId;
        this.multiVmGroupName = multiVmGroupName;
        this.multiVmSyncStatus = multiVmSyncStatus;
        this.osDetails = osDetails;
        this.osVersion = osVersion;
        this.processServerId = processServerId;
        this.protectedDisks = protectedDisks;
        this.protectionStage = protectionStage;
        this.rebootAfterUpdateStatus = rebootAfterUpdateStatus;
        this.replicaId = replicaId;
        this.resyncDetails = resyncDetails;
        this.retentionWindowEnd = retentionWindowEnd;
        this.retentionWindowStart = retentionWindowStart;
        this.rpoInSeconds = rpoInSeconds;
        this.sourceVmCpuCount = sourceVmCpuCount;
        this.sourceVmRamSizeInMB = sourceVmRamSizeInMB;
        this.uncompressedDataRateInMB = uncompressedDataRateInMB;
        this.vCenterInfrastructureId = vCenterInfrastructureId;
        this.validationErrors = validationErrors;
        this.vmId = vmId;
        this.vmNics = vmNics;
        this.vmProtectionState = vmProtectionState;
        this.vmProtectionStateDescription = vmProtectionStateDescription;
    }

    private InMageReplicationDetailsResponse() {
        this.activeSiteType = null;
        this.agentDetails = null;
        this.azureStorageAccountId = null;
        this.compressedDataRateInMB = null;
        this.consistencyPoints = Map.of();
        this.datastores = List.of();
        this.discoveryType = null;
        this.diskResized = null;
        this.infrastructureVmId = null;
        this.instanceType = null;
        this.ipAddress = null;
        this.lastHeartbeat = null;
        this.lastRpoCalculatedTime = null;
        this.lastUpdateReceivedTime = null;
        this.masterTargetId = null;
        this.multiVmGroupId = null;
        this.multiVmGroupName = null;
        this.multiVmSyncStatus = null;
        this.osDetails = null;
        this.osVersion = null;
        this.processServerId = null;
        this.protectedDisks = List.of();
        this.protectionStage = null;
        this.rebootAfterUpdateStatus = null;
        this.replicaId = null;
        this.resyncDetails = null;
        this.retentionWindowEnd = null;
        this.retentionWindowStart = null;
        this.rpoInSeconds = null;
        this.sourceVmCpuCount = null;
        this.sourceVmRamSizeInMB = null;
        this.uncompressedDataRateInMB = null;
        this.vCenterInfrastructureId = null;
        this.validationErrors = List.of();
        this.vmId = null;
        this.vmNics = List.of();
        this.vmProtectionState = null;
        this.vmProtectionStateDescription = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InMageReplicationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String activeSiteType;
        private @Nullable InMageAgentDetailsResponse agentDetails;
        private @Nullable String azureStorageAccountId;
        private @Nullable Double compressedDataRateInMB;
        private @Nullable Map<String,String> consistencyPoints;
        private @Nullable List<String> datastores;
        private @Nullable String discoveryType;
        private @Nullable String diskResized;
        private @Nullable String infrastructureVmId;
        private String instanceType;
        private @Nullable String ipAddress;
        private @Nullable String lastHeartbeat;
        private @Nullable String lastRpoCalculatedTime;
        private @Nullable String lastUpdateReceivedTime;
        private @Nullable String masterTargetId;
        private @Nullable String multiVmGroupId;
        private @Nullable String multiVmGroupName;
        private @Nullable String multiVmSyncStatus;
        private @Nullable OSDiskDetailsResponse osDetails;
        private @Nullable String osVersion;
        private @Nullable String processServerId;
        private @Nullable List<InMageProtectedDiskDetailsResponse> protectedDisks;
        private @Nullable String protectionStage;
        private @Nullable String rebootAfterUpdateStatus;
        private @Nullable String replicaId;
        private @Nullable InitialReplicationDetailsResponse resyncDetails;
        private @Nullable String retentionWindowEnd;
        private @Nullable String retentionWindowStart;
        private @Nullable Double rpoInSeconds;
        private @Nullable Integer sourceVmCpuCount;
        private @Nullable Integer sourceVmRamSizeInMB;
        private @Nullable Double uncompressedDataRateInMB;
        private @Nullable String vCenterInfrastructureId;
        private @Nullable List<HealthErrorResponse> validationErrors;
        private @Nullable String vmId;
        private @Nullable List<VMNicDetailsResponse> vmNics;
        private @Nullable String vmProtectionState;
        private @Nullable String vmProtectionStateDescription;

        public Builder() {
    	      // Empty
        }

        public Builder(InMageReplicationDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeSiteType = defaults.activeSiteType;
    	      this.agentDetails = defaults.agentDetails;
    	      this.azureStorageAccountId = defaults.azureStorageAccountId;
    	      this.compressedDataRateInMB = defaults.compressedDataRateInMB;
    	      this.consistencyPoints = defaults.consistencyPoints;
    	      this.datastores = defaults.datastores;
    	      this.discoveryType = defaults.discoveryType;
    	      this.diskResized = defaults.diskResized;
    	      this.infrastructureVmId = defaults.infrastructureVmId;
    	      this.instanceType = defaults.instanceType;
    	      this.ipAddress = defaults.ipAddress;
    	      this.lastHeartbeat = defaults.lastHeartbeat;
    	      this.lastRpoCalculatedTime = defaults.lastRpoCalculatedTime;
    	      this.lastUpdateReceivedTime = defaults.lastUpdateReceivedTime;
    	      this.masterTargetId = defaults.masterTargetId;
    	      this.multiVmGroupId = defaults.multiVmGroupId;
    	      this.multiVmGroupName = defaults.multiVmGroupName;
    	      this.multiVmSyncStatus = defaults.multiVmSyncStatus;
    	      this.osDetails = defaults.osDetails;
    	      this.osVersion = defaults.osVersion;
    	      this.processServerId = defaults.processServerId;
    	      this.protectedDisks = defaults.protectedDisks;
    	      this.protectionStage = defaults.protectionStage;
    	      this.rebootAfterUpdateStatus = defaults.rebootAfterUpdateStatus;
    	      this.replicaId = defaults.replicaId;
    	      this.resyncDetails = defaults.resyncDetails;
    	      this.retentionWindowEnd = defaults.retentionWindowEnd;
    	      this.retentionWindowStart = defaults.retentionWindowStart;
    	      this.rpoInSeconds = defaults.rpoInSeconds;
    	      this.sourceVmCpuCount = defaults.sourceVmCpuCount;
    	      this.sourceVmRamSizeInMB = defaults.sourceVmRamSizeInMB;
    	      this.uncompressedDataRateInMB = defaults.uncompressedDataRateInMB;
    	      this.vCenterInfrastructureId = defaults.vCenterInfrastructureId;
    	      this.validationErrors = defaults.validationErrors;
    	      this.vmId = defaults.vmId;
    	      this.vmNics = defaults.vmNics;
    	      this.vmProtectionState = defaults.vmProtectionState;
    	      this.vmProtectionStateDescription = defaults.vmProtectionStateDescription;
        }

        public Builder activeSiteType(@Nullable String activeSiteType) {
            this.activeSiteType = activeSiteType;
            return this;
        }
        public Builder agentDetails(@Nullable InMageAgentDetailsResponse agentDetails) {
            this.agentDetails = agentDetails;
            return this;
        }
        public Builder azureStorageAccountId(@Nullable String azureStorageAccountId) {
            this.azureStorageAccountId = azureStorageAccountId;
            return this;
        }
        public Builder compressedDataRateInMB(@Nullable Double compressedDataRateInMB) {
            this.compressedDataRateInMB = compressedDataRateInMB;
            return this;
        }
        public Builder consistencyPoints(@Nullable Map<String,String> consistencyPoints) {
            this.consistencyPoints = consistencyPoints;
            return this;
        }
        public Builder datastores(@Nullable List<String> datastores) {
            this.datastores = datastores;
            return this;
        }
        public Builder datastores(String... datastores) {
            return datastores(List.of(datastores));
        }
        public Builder discoveryType(@Nullable String discoveryType) {
            this.discoveryType = discoveryType;
            return this;
        }
        public Builder diskResized(@Nullable String diskResized) {
            this.diskResized = diskResized;
            return this;
        }
        public Builder infrastructureVmId(@Nullable String infrastructureVmId) {
            this.infrastructureVmId = infrastructureVmId;
            return this;
        }
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        public Builder lastHeartbeat(@Nullable String lastHeartbeat) {
            this.lastHeartbeat = lastHeartbeat;
            return this;
        }
        public Builder lastRpoCalculatedTime(@Nullable String lastRpoCalculatedTime) {
            this.lastRpoCalculatedTime = lastRpoCalculatedTime;
            return this;
        }
        public Builder lastUpdateReceivedTime(@Nullable String lastUpdateReceivedTime) {
            this.lastUpdateReceivedTime = lastUpdateReceivedTime;
            return this;
        }
        public Builder masterTargetId(@Nullable String masterTargetId) {
            this.masterTargetId = masterTargetId;
            return this;
        }
        public Builder multiVmGroupId(@Nullable String multiVmGroupId) {
            this.multiVmGroupId = multiVmGroupId;
            return this;
        }
        public Builder multiVmGroupName(@Nullable String multiVmGroupName) {
            this.multiVmGroupName = multiVmGroupName;
            return this;
        }
        public Builder multiVmSyncStatus(@Nullable String multiVmSyncStatus) {
            this.multiVmSyncStatus = multiVmSyncStatus;
            return this;
        }
        public Builder osDetails(@Nullable OSDiskDetailsResponse osDetails) {
            this.osDetails = osDetails;
            return this;
        }
        public Builder osVersion(@Nullable String osVersion) {
            this.osVersion = osVersion;
            return this;
        }
        public Builder processServerId(@Nullable String processServerId) {
            this.processServerId = processServerId;
            return this;
        }
        public Builder protectedDisks(@Nullable List<InMageProtectedDiskDetailsResponse> protectedDisks) {
            this.protectedDisks = protectedDisks;
            return this;
        }
        public Builder protectedDisks(InMageProtectedDiskDetailsResponse... protectedDisks) {
            return protectedDisks(List.of(protectedDisks));
        }
        public Builder protectionStage(@Nullable String protectionStage) {
            this.protectionStage = protectionStage;
            return this;
        }
        public Builder rebootAfterUpdateStatus(@Nullable String rebootAfterUpdateStatus) {
            this.rebootAfterUpdateStatus = rebootAfterUpdateStatus;
            return this;
        }
        public Builder replicaId(@Nullable String replicaId) {
            this.replicaId = replicaId;
            return this;
        }
        public Builder resyncDetails(@Nullable InitialReplicationDetailsResponse resyncDetails) {
            this.resyncDetails = resyncDetails;
            return this;
        }
        public Builder retentionWindowEnd(@Nullable String retentionWindowEnd) {
            this.retentionWindowEnd = retentionWindowEnd;
            return this;
        }
        public Builder retentionWindowStart(@Nullable String retentionWindowStart) {
            this.retentionWindowStart = retentionWindowStart;
            return this;
        }
        public Builder rpoInSeconds(@Nullable Double rpoInSeconds) {
            this.rpoInSeconds = rpoInSeconds;
            return this;
        }
        public Builder sourceVmCpuCount(@Nullable Integer sourceVmCpuCount) {
            this.sourceVmCpuCount = sourceVmCpuCount;
            return this;
        }
        public Builder sourceVmRamSizeInMB(@Nullable Integer sourceVmRamSizeInMB) {
            this.sourceVmRamSizeInMB = sourceVmRamSizeInMB;
            return this;
        }
        public Builder uncompressedDataRateInMB(@Nullable Double uncompressedDataRateInMB) {
            this.uncompressedDataRateInMB = uncompressedDataRateInMB;
            return this;
        }
        public Builder vCenterInfrastructureId(@Nullable String vCenterInfrastructureId) {
            this.vCenterInfrastructureId = vCenterInfrastructureId;
            return this;
        }
        public Builder validationErrors(@Nullable List<HealthErrorResponse> validationErrors) {
            this.validationErrors = validationErrors;
            return this;
        }
        public Builder validationErrors(HealthErrorResponse... validationErrors) {
            return validationErrors(List.of(validationErrors));
        }
        public Builder vmId(@Nullable String vmId) {
            this.vmId = vmId;
            return this;
        }
        public Builder vmNics(@Nullable List<VMNicDetailsResponse> vmNics) {
            this.vmNics = vmNics;
            return this;
        }
        public Builder vmNics(VMNicDetailsResponse... vmNics) {
            return vmNics(List.of(vmNics));
        }
        public Builder vmProtectionState(@Nullable String vmProtectionState) {
            this.vmProtectionState = vmProtectionState;
            return this;
        }
        public Builder vmProtectionStateDescription(@Nullable String vmProtectionStateDescription) {
            this.vmProtectionStateDescription = vmProtectionStateDescription;
            return this;
        }        public InMageReplicationDetailsResponse build() {
            return new InMageReplicationDetailsResponse(activeSiteType, agentDetails, azureStorageAccountId, compressedDataRateInMB, consistencyPoints, datastores, discoveryType, diskResized, infrastructureVmId, instanceType, ipAddress, lastHeartbeat, lastRpoCalculatedTime, lastUpdateReceivedTime, masterTargetId, multiVmGroupId, multiVmGroupName, multiVmSyncStatus, osDetails, osVersion, processServerId, protectedDisks, protectionStage, rebootAfterUpdateStatus, replicaId, resyncDetails, retentionWindowEnd, retentionWindowStart, rpoInSeconds, sourceVmCpuCount, sourceVmRamSizeInMB, uncompressedDataRateInMB, vCenterInfrastructureId, validationErrors, vmId, vmNics, vmProtectionState, vmProtectionStateDescription);
        }
    }
}
