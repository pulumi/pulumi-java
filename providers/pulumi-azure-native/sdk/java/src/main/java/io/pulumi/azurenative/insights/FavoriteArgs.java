// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights;

import io.pulumi.azurenative.insights.enums.FavoriteType;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FavoriteArgs extends io.pulumi.resources.ResourceArgs {

    public static final FavoriteArgs Empty = new FavoriteArgs();

    /**
     * Favorite category, as defined by the user at creation time.
     * 
     */
    @Import(name="category")
      private final @Nullable Output<String> category;

    public Output<String> getCategory() {
        return this.category == null ? Output.empty() : this.category;
    }

    /**
     * Configuration of this particular favorite, which are driven by the Azure portal UX. Configuration data is a string containing valid JSON
     * 
     */
    @Import(name="config")
      private final @Nullable Output<String> config;

    public Output<String> getConfig() {
        return this.config == null ? Output.empty() : this.config;
    }

    /**
     * The Id of a specific favorite defined in the Application Insights component
     * 
     */
    @Import(name="favoriteId")
      private final @Nullable Output<String> favoriteId;

    public Output<String> getFavoriteId() {
        return this.favoriteId == null ? Output.empty() : this.favoriteId;
    }

    /**
     * Enum indicating if this favorite definition is owned by a specific user or is shared between all users with access to the Application Insights component.
     * 
     */
    @Import(name="favoriteType")
      private final @Nullable Output<FavoriteType> favoriteType;

    public Output<FavoriteType> getFavoriteType() {
        return this.favoriteType == null ? Output.empty() : this.favoriteType;
    }

    /**
     * Flag denoting wether or not this favorite was generated from a template.
     * 
     */
    @Import(name="isGeneratedFromTemplate")
      private final @Nullable Output<Boolean> isGeneratedFromTemplate;

    public Output<Boolean> getIsGeneratedFromTemplate() {
        return this.isGeneratedFromTemplate == null ? Output.empty() : this.isGeneratedFromTemplate;
    }

    /**
     * The user-defined name of the favorite.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the Application Insights component resource.
     * 
     */
    @Import(name="resourceName", required=true)
      private final Output<String> resourceName;

    public Output<String> getPropResourceName() {
        return this.resourceName;
    }

    /**
     * The source of the favorite definition.
     * 
     */
    @Import(name="sourceType")
      private final @Nullable Output<String> sourceType;

    public Output<String> getSourceType() {
        return this.sourceType == null ? Output.empty() : this.sourceType;
    }

    /**
     * A list of 0 or more tags that are associated with this favorite definition
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<String>> tags;

    public Output<List<String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * This instance's version of the data model. This can change as new features are added that can be marked favorite. Current examples include MetricsExplorer (ME) and Search.
     * 
     */
    @Import(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Output.empty() : this.version;
    }

    public FavoriteArgs(
        @Nullable Output<String> category,
        @Nullable Output<String> config,
        @Nullable Output<String> favoriteId,
        @Nullable Output<FavoriteType> favoriteType,
        @Nullable Output<Boolean> isGeneratedFromTemplate,
        @Nullable Output<String> name,
        Output<String> resourceGroupName,
        Output<String> resourceName,
        @Nullable Output<String> sourceType,
        @Nullable Output<List<String>> tags,
        @Nullable Output<String> version) {
        this.category = category;
        this.config = config;
        this.favoriteId = favoriteId;
        this.favoriteType = favoriteType;
        this.isGeneratedFromTemplate = isGeneratedFromTemplate;
        this.name = name;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceName = Objects.requireNonNull(resourceName, "expected parameter 'resourceName' to be non-null");
        this.sourceType = sourceType;
        this.tags = tags;
        this.version = version;
    }

    private FavoriteArgs() {
        this.category = Output.empty();
        this.config = Output.empty();
        this.favoriteId = Output.empty();
        this.favoriteType = Output.empty();
        this.isGeneratedFromTemplate = Output.empty();
        this.name = Output.empty();
        this.resourceGroupName = Output.empty();
        this.resourceName = Output.empty();
        this.sourceType = Output.empty();
        this.tags = Output.empty();
        this.version = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FavoriteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> category;
        private @Nullable Output<String> config;
        private @Nullable Output<String> favoriteId;
        private @Nullable Output<FavoriteType> favoriteType;
        private @Nullable Output<Boolean> isGeneratedFromTemplate;
        private @Nullable Output<String> name;
        private Output<String> resourceGroupName;
        private Output<String> resourceName;
        private @Nullable Output<String> sourceType;
        private @Nullable Output<List<String>> tags;
        private @Nullable Output<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(FavoriteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.config = defaults.config;
    	      this.favoriteId = defaults.favoriteId;
    	      this.favoriteType = defaults.favoriteType;
    	      this.isGeneratedFromTemplate = defaults.isGeneratedFromTemplate;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceName = defaults.resourceName;
    	      this.sourceType = defaults.sourceType;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
        }

        public Builder category(@Nullable Output<String> category) {
            this.category = category;
            return this;
        }
        public Builder category(@Nullable String category) {
            this.category = Output.ofNullable(category);
            return this;
        }
        public Builder config(@Nullable Output<String> config) {
            this.config = config;
            return this;
        }
        public Builder config(@Nullable String config) {
            this.config = Output.ofNullable(config);
            return this;
        }
        public Builder favoriteId(@Nullable Output<String> favoriteId) {
            this.favoriteId = favoriteId;
            return this;
        }
        public Builder favoriteId(@Nullable String favoriteId) {
            this.favoriteId = Output.ofNullable(favoriteId);
            return this;
        }
        public Builder favoriteType(@Nullable Output<FavoriteType> favoriteType) {
            this.favoriteType = favoriteType;
            return this;
        }
        public Builder favoriteType(@Nullable FavoriteType favoriteType) {
            this.favoriteType = Output.ofNullable(favoriteType);
            return this;
        }
        public Builder isGeneratedFromTemplate(@Nullable Output<Boolean> isGeneratedFromTemplate) {
            this.isGeneratedFromTemplate = isGeneratedFromTemplate;
            return this;
        }
        public Builder isGeneratedFromTemplate(@Nullable Boolean isGeneratedFromTemplate) {
            this.isGeneratedFromTemplate = Output.ofNullable(isGeneratedFromTemplate);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder resourceName(Output<String> resourceName) {
            this.resourceName = Objects.requireNonNull(resourceName);
            return this;
        }
        public Builder resourceName(String resourceName) {
            this.resourceName = Output.of(Objects.requireNonNull(resourceName));
            return this;
        }
        public Builder sourceType(@Nullable Output<String> sourceType) {
            this.sourceType = sourceType;
            return this;
        }
        public Builder sourceType(@Nullable String sourceType) {
            this.sourceType = Output.ofNullable(sourceType);
            return this;
        }
        public Builder tags(@Nullable Output<List<String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }
        public Builder version(@Nullable String version) {
            this.version = Output.ofNullable(version);
            return this;
        }        public FavoriteArgs build() {
            return new FavoriteArgs(category, config, favoriteId, favoriteType, isGeneratedFromTemplate, name, resourceGroupName, resourceName, sourceType, tags, version);
        }
    }
}
