// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databox.inputs;

import io.pulumi.azurenative.databox.enums.LogCollectionLevel;
import io.pulumi.azurenative.databox.inputs.ManagedDiskDetailsArgs;
import io.pulumi.azurenative.databox.inputs.StorageAccountDetailsArgs;
import io.pulumi.azurenative.databox.inputs.TransferConfigurationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Details of the data to be used for exporting data from azure.
 * 
 */
public final class DataExportDetailsArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataExportDetailsArgs Empty = new DataExportDetailsArgs();

    /**
     * Account details of the data to be transferred
     * 
     */
    @Import(name="accountDetails", required=true)
      private final Output<Either<ManagedDiskDetailsArgs,StorageAccountDetailsArgs>> accountDetails;

    public Output<Either<ManagedDiskDetailsArgs,StorageAccountDetailsArgs>> getAccountDetails() {
        return this.accountDetails;
    }

    /**
     * Level of the logs to be collected.
     * 
     */
    @Import(name="logCollectionLevel")
      private final @Nullable Output<Either<String,LogCollectionLevel>> logCollectionLevel;

    public Output<Either<String,LogCollectionLevel>> getLogCollectionLevel() {
        return this.logCollectionLevel == null ? Codegen.empty() : this.logCollectionLevel;
    }

    /**
     * Configuration for the data transfer.
     * 
     */
    @Import(name="transferConfiguration", required=true)
      private final Output<TransferConfigurationArgs> transferConfiguration;

    public Output<TransferConfigurationArgs> getTransferConfiguration() {
        return this.transferConfiguration;
    }

    public DataExportDetailsArgs(
        Output<Either<ManagedDiskDetailsArgs,StorageAccountDetailsArgs>> accountDetails,
        @Nullable Output<Either<String,LogCollectionLevel>> logCollectionLevel,
        Output<TransferConfigurationArgs> transferConfiguration) {
        this.accountDetails = Objects.requireNonNull(accountDetails, "expected parameter 'accountDetails' to be non-null");
        this.logCollectionLevel = logCollectionLevel == null ? Output.ofLeft("Error") : logCollectionLevel;
        this.transferConfiguration = Objects.requireNonNull(transferConfiguration, "expected parameter 'transferConfiguration' to be non-null");
    }

    private DataExportDetailsArgs() {
        this.accountDetails = Codegen.empty();
        this.logCollectionLevel = Codegen.empty();
        this.transferConfiguration = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataExportDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<ManagedDiskDetailsArgs,StorageAccountDetailsArgs>> accountDetails;
        private @Nullable Output<Either<String,LogCollectionLevel>> logCollectionLevel;
        private Output<TransferConfigurationArgs> transferConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(DataExportDetailsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountDetails = defaults.accountDetails;
    	      this.logCollectionLevel = defaults.logCollectionLevel;
    	      this.transferConfiguration = defaults.transferConfiguration;
        }

        public Builder accountDetails(Output<Either<ManagedDiskDetailsArgs,StorageAccountDetailsArgs>> accountDetails) {
            this.accountDetails = Objects.requireNonNull(accountDetails);
            return this;
        }
        public Builder accountDetails(Either<ManagedDiskDetailsArgs,StorageAccountDetailsArgs> accountDetails) {
            this.accountDetails = Output.of(Objects.requireNonNull(accountDetails));
            return this;
        }
        public Builder logCollectionLevel(@Nullable Output<Either<String,LogCollectionLevel>> logCollectionLevel) {
            this.logCollectionLevel = logCollectionLevel;
            return this;
        }
        public Builder logCollectionLevel(@Nullable Either<String,LogCollectionLevel> logCollectionLevel) {
            this.logCollectionLevel = Codegen.ofNullable(logCollectionLevel);
            return this;
        }
        public Builder transferConfiguration(Output<TransferConfigurationArgs> transferConfiguration) {
            this.transferConfiguration = Objects.requireNonNull(transferConfiguration);
            return this;
        }
        public Builder transferConfiguration(TransferConfigurationArgs transferConfiguration) {
            this.transferConfiguration = Output.of(Objects.requireNonNull(transferConfiguration));
            return this;
        }        public DataExportDetailsArgs build() {
            return new DataExportDetailsArgs(accountDetails, logCollectionLevel, transferConfiguration);
        }
    }
}
