// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.azurenative.compute.inputs.SubResourceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * Describes a reference to Key Vault Key
 * 
 */
public final class KeyVaultKeyReferenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final KeyVaultKeyReferenceArgs Empty = new KeyVaultKeyReferenceArgs();

    /**
     * The URL referencing a key encryption key in Key Vault.
     * 
     */
    @InputImport(name="keyUrl", required=true)
      private final Input<String> keyUrl;

    public Input<String> getKeyUrl() {
        return this.keyUrl;
    }

    /**
     * The relative URL of the Key Vault containing the key.
     * 
     */
    @InputImport(name="sourceVault", required=true)
      private final Input<SubResourceArgs> sourceVault;

    public Input<SubResourceArgs> getSourceVault() {
        return this.sourceVault;
    }

    public KeyVaultKeyReferenceArgs(
        Input<String> keyUrl,
        Input<SubResourceArgs> sourceVault) {
        this.keyUrl = Objects.requireNonNull(keyUrl, "expected parameter 'keyUrl' to be non-null");
        this.sourceVault = Objects.requireNonNull(sourceVault, "expected parameter 'sourceVault' to be non-null");
    }

    private KeyVaultKeyReferenceArgs() {
        this.keyUrl = Input.empty();
        this.sourceVault = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyVaultKeyReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> keyUrl;
        private Input<SubResourceArgs> sourceVault;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyVaultKeyReferenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keyUrl = defaults.keyUrl;
    	      this.sourceVault = defaults.sourceVault;
        }

        public Builder setKeyUrl(Input<String> keyUrl) {
            this.keyUrl = Objects.requireNonNull(keyUrl);
            return this;
        }

        public Builder setKeyUrl(String keyUrl) {
            this.keyUrl = Input.of(Objects.requireNonNull(keyUrl));
            return this;
        }

        public Builder setSourceVault(Input<SubResourceArgs> sourceVault) {
            this.sourceVault = Objects.requireNonNull(sourceVault);
            return this;
        }

        public Builder setSourceVault(SubResourceArgs sourceVault) {
            this.sourceVault = Input.of(Objects.requireNonNull(sourceVault));
            return this;
        }
        public KeyVaultKeyReferenceArgs build() {
            return new KeyVaultKeyReferenceArgs(keyUrl, sourceVault);
        }
    }
}
