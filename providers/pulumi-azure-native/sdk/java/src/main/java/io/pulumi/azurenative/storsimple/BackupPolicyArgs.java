// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storsimple;

import io.pulumi.azurenative.storsimple.enums.Kind;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BackupPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final BackupPolicyArgs Empty = new BackupPolicyArgs();

    /**
     * The name of the backup policy to be created/updated.
     * 
     */
    @InputImport(name="backupPolicyName")
      private final @Nullable Output<String> backupPolicyName;

    public Output<String> getBackupPolicyName() {
        return this.backupPolicyName == null ? Output.empty() : this.backupPolicyName;
    }

    /**
     * The device name
     * 
     */
    @InputImport(name="deviceName", required=true)
      private final Output<String> deviceName;

    public Output<String> getDeviceName() {
        return this.deviceName;
    }

    /**
     * The Kind of the object. Currently only Series8000 is supported
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Output<Kind> kind;

    public Output<Kind> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * The manager name
     * 
     */
    @InputImport(name="managerName", required=true)
      private final Output<String> managerName;

    public Output<String> getManagerName() {
        return this.managerName;
    }

    /**
     * The resource group name
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The path IDs of the volumes which are part of the backup policy.
     * 
     */
    @InputImport(name="volumeIds", required=true)
      private final Output<List<String>> volumeIds;

    public Output<List<String>> getVolumeIds() {
        return this.volumeIds;
    }

    public BackupPolicyArgs(
        @Nullable Output<String> backupPolicyName,
        Output<String> deviceName,
        @Nullable Output<Kind> kind,
        Output<String> managerName,
        Output<String> resourceGroupName,
        Output<List<String>> volumeIds) {
        this.backupPolicyName = backupPolicyName;
        this.deviceName = Objects.requireNonNull(deviceName, "expected parameter 'deviceName' to be non-null");
        this.kind = kind;
        this.managerName = Objects.requireNonNull(managerName, "expected parameter 'managerName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.volumeIds = Objects.requireNonNull(volumeIds, "expected parameter 'volumeIds' to be non-null");
    }

    private BackupPolicyArgs() {
        this.backupPolicyName = Output.empty();
        this.deviceName = Output.empty();
        this.kind = Output.empty();
        this.managerName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.volumeIds = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> backupPolicyName;
        private Output<String> deviceName;
        private @Nullable Output<Kind> kind;
        private Output<String> managerName;
        private Output<String> resourceGroupName;
        private Output<List<String>> volumeIds;

        public Builder() {
    	      // Empty
        }

        public Builder(BackupPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupPolicyName = defaults.backupPolicyName;
    	      this.deviceName = defaults.deviceName;
    	      this.kind = defaults.kind;
    	      this.managerName = defaults.managerName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.volumeIds = defaults.volumeIds;
        }

        public Builder backupPolicyName(@Nullable Output<String> backupPolicyName) {
            this.backupPolicyName = backupPolicyName;
            return this;
        }

        public Builder backupPolicyName(@Nullable String backupPolicyName) {
            this.backupPolicyName = Output.ofNullable(backupPolicyName);
            return this;
        }

        public Builder deviceName(Output<String> deviceName) {
            this.deviceName = Objects.requireNonNull(deviceName);
            return this;
        }

        public Builder deviceName(String deviceName) {
            this.deviceName = Output.of(Objects.requireNonNull(deviceName));
            return this;
        }

        public Builder kind(@Nullable Output<Kind> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable Kind kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }

        public Builder managerName(Output<String> managerName) {
            this.managerName = Objects.requireNonNull(managerName);
            return this;
        }

        public Builder managerName(String managerName) {
            this.managerName = Output.of(Objects.requireNonNull(managerName));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder volumeIds(Output<List<String>> volumeIds) {
            this.volumeIds = Objects.requireNonNull(volumeIds);
            return this;
        }

        public Builder volumeIds(List<String> volumeIds) {
            this.volumeIds = Output.of(Objects.requireNonNull(volumeIds));
            return this;
        }
        public BackupPolicyArgs build() {
            return new BackupPolicyArgs(backupPolicyName, deviceName, kind, managerName, resourceGroupName, volumeIds);
        }
    }
}
