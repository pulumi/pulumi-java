// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.azurenative.logic.inputs.ContentLinkResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The assembly properties definition.
 * 
 */
public final class AssemblyPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final AssemblyPropertiesResponse Empty = new AssemblyPropertiesResponse();

    /**
     * The assembly culture.
     * 
     */
    @InputImport(name="assemblyCulture")
    private final @Nullable String assemblyCulture;

    public Optional<String> getAssemblyCulture() {
        return this.assemblyCulture == null ? Optional.empty() : Optional.ofNullable(this.assemblyCulture);
    }

    /**
     * The assembly name.
     * 
     */
    @InputImport(name="assemblyName", required=true)
    private final String assemblyName;

    public String getAssemblyName() {
        return this.assemblyName;
    }

    /**
     * The assembly public key token.
     * 
     */
    @InputImport(name="assemblyPublicKeyToken")
    private final @Nullable String assemblyPublicKeyToken;

    public Optional<String> getAssemblyPublicKeyToken() {
        return this.assemblyPublicKeyToken == null ? Optional.empty() : Optional.ofNullable(this.assemblyPublicKeyToken);
    }

    /**
     * The assembly version.
     * 
     */
    @InputImport(name="assemblyVersion")
    private final @Nullable String assemblyVersion;

    public Optional<String> getAssemblyVersion() {
        return this.assemblyVersion == null ? Optional.empty() : Optional.ofNullable(this.assemblyVersion);
    }

    /**
     * The artifact changed time.
     * 
     */
    @InputImport(name="changedTime")
    private final @Nullable String changedTime;

    public Optional<String> getChangedTime() {
        return this.changedTime == null ? Optional.empty() : Optional.ofNullable(this.changedTime);
    }

    @InputImport(name="content")
    private final @Nullable Object content;

    public Optional<Object> getContent() {
        return this.content == null ? Optional.empty() : Optional.ofNullable(this.content);
    }

    /**
     * The content link.
     * 
     */
    @InputImport(name="contentLink")
    private final @Nullable ContentLinkResponse contentLink;

    public Optional<ContentLinkResponse> getContentLink() {
        return this.contentLink == null ? Optional.empty() : Optional.ofNullable(this.contentLink);
    }

    /**
     * The content type.
     * 
     */
    @InputImport(name="contentType")
    private final @Nullable String contentType;

    public Optional<String> getContentType() {
        return this.contentType == null ? Optional.empty() : Optional.ofNullable(this.contentType);
    }

    /**
     * The artifact creation time.
     * 
     */
    @InputImport(name="createdTime")
    private final @Nullable String createdTime;

    public Optional<String> getCreatedTime() {
        return this.createdTime == null ? Optional.empty() : Optional.ofNullable(this.createdTime);
    }

    @InputImport(name="metadata")
    private final @Nullable Object metadata;

    public Optional<Object> getMetadata() {
        return this.metadata == null ? Optional.empty() : Optional.ofNullable(this.metadata);
    }

    public AssemblyPropertiesResponse(
        @Nullable String assemblyCulture,
        String assemblyName,
        @Nullable String assemblyPublicKeyToken,
        @Nullable String assemblyVersion,
        @Nullable String changedTime,
        @Nullable Object content,
        @Nullable ContentLinkResponse contentLink,
        @Nullable String contentType,
        @Nullable String createdTime,
        @Nullable Object metadata) {
        this.assemblyCulture = assemblyCulture;
        this.assemblyName = Objects.requireNonNull(assemblyName, "expected parameter 'assemblyName' to be non-null");
        this.assemblyPublicKeyToken = assemblyPublicKeyToken;
        this.assemblyVersion = assemblyVersion;
        this.changedTime = changedTime;
        this.content = content;
        this.contentLink = contentLink;
        this.contentType = contentType;
        this.createdTime = createdTime;
        this.metadata = metadata;
    }

    private AssemblyPropertiesResponse() {
        this.assemblyCulture = null;
        this.assemblyName = null;
        this.assemblyPublicKeyToken = null;
        this.assemblyVersion = null;
        this.changedTime = null;
        this.content = null;
        this.contentLink = null;
        this.contentType = null;
        this.createdTime = null;
        this.metadata = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AssemblyPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String assemblyCulture;
        private String assemblyName;
        private @Nullable String assemblyPublicKeyToken;
        private @Nullable String assemblyVersion;
        private @Nullable String changedTime;
        private @Nullable Object content;
        private @Nullable ContentLinkResponse contentLink;
        private @Nullable String contentType;
        private @Nullable String createdTime;
        private @Nullable Object metadata;

        public Builder() {
    	      // Empty
        }

        public Builder(AssemblyPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assemblyCulture = defaults.assemblyCulture;
    	      this.assemblyName = defaults.assemblyName;
    	      this.assemblyPublicKeyToken = defaults.assemblyPublicKeyToken;
    	      this.assemblyVersion = defaults.assemblyVersion;
    	      this.changedTime = defaults.changedTime;
    	      this.content = defaults.content;
    	      this.contentLink = defaults.contentLink;
    	      this.contentType = defaults.contentType;
    	      this.createdTime = defaults.createdTime;
    	      this.metadata = defaults.metadata;
        }

        public Builder setAssemblyCulture(@Nullable String assemblyCulture) {
            this.assemblyCulture = assemblyCulture;
            return this;
        }

        public Builder setAssemblyName(String assemblyName) {
            this.assemblyName = Objects.requireNonNull(assemblyName);
            return this;
        }

        public Builder setAssemblyPublicKeyToken(@Nullable String assemblyPublicKeyToken) {
            this.assemblyPublicKeyToken = assemblyPublicKeyToken;
            return this;
        }

        public Builder setAssemblyVersion(@Nullable String assemblyVersion) {
            this.assemblyVersion = assemblyVersion;
            return this;
        }

        public Builder setChangedTime(@Nullable String changedTime) {
            this.changedTime = changedTime;
            return this;
        }

        public Builder setContent(@Nullable Object content) {
            this.content = content;
            return this;
        }

        public Builder setContentLink(@Nullable ContentLinkResponse contentLink) {
            this.contentLink = contentLink;
            return this;
        }

        public Builder setContentType(@Nullable String contentType) {
            this.contentType = contentType;
            return this;
        }

        public Builder setCreatedTime(@Nullable String createdTime) {
            this.createdTime = createdTime;
            return this;
        }

        public Builder setMetadata(@Nullable Object metadata) {
            this.metadata = metadata;
            return this;
        }

        public AssemblyPropertiesResponse build() {
            return new AssemblyPropertiesResponse(assemblyCulture, assemblyName, assemblyPublicKeyToken, assemblyVersion, changedTime, content, contentLink, contentType, createdTime, metadata);
        }
    }
}
