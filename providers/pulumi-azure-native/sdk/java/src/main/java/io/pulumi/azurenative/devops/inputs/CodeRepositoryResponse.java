// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devops.inputs;

import io.pulumi.azurenative.devops.inputs.AuthorizationResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Repository containing the source code for a pipeline.
 * 
 */
public final class CodeRepositoryResponse extends io.pulumi.resources.InvokeArgs {

    public static final CodeRepositoryResponse Empty = new CodeRepositoryResponse();

    /**
     * Authorization info to access the code repository.
     * 
     */
    @InputImport(name="authorization")
    private final @Nullable AuthorizationResponse authorization;

    public Optional<AuthorizationResponse> getAuthorization() {
        return this.authorization == null ? Optional.empty() : Optional.ofNullable(this.authorization);
    }

    /**
     * Default branch used to configure Continuous Integration (CI) in the pipeline.
     * 
     */
    @InputImport(name="defaultBranch", required=true)
    private final String defaultBranch;

    public String getDefaultBranch() {
        return this.defaultBranch;
    }

    /**
     * Unique immutable identifier of the code repository.
     * 
     */
    @InputImport(name="id", required=true)
    private final String id;

    public String getId() {
        return this.id;
    }

    /**
     * Repository-specific properties.
     * 
     */
    @InputImport(name="properties")
    private final @Nullable Map<String,String> properties;

    public Map<String,String> getProperties() {
        return this.properties == null ? Map.of() : this.properties;
    }

    /**
     * Type of code repository.
     * 
     */
    @InputImport(name="repositoryType", required=true)
    private final String repositoryType;

    public String getRepositoryType() {
        return this.repositoryType;
    }

    public CodeRepositoryResponse(
        @Nullable AuthorizationResponse authorization,
        String defaultBranch,
        String id,
        @Nullable Map<String,String> properties,
        String repositoryType) {
        this.authorization = authorization;
        this.defaultBranch = Objects.requireNonNull(defaultBranch, "expected parameter 'defaultBranch' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.properties = properties;
        this.repositoryType = Objects.requireNonNull(repositoryType, "expected parameter 'repositoryType' to be non-null");
    }

    private CodeRepositoryResponse() {
        this.authorization = null;
        this.defaultBranch = null;
        this.id = null;
        this.properties = Map.of();
        this.repositoryType = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CodeRepositoryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable AuthorizationResponse authorization;
        private String defaultBranch;
        private String id;
        private @Nullable Map<String,String> properties;
        private String repositoryType;

        public Builder() {
    	      // Empty
        }

        public Builder(CodeRepositoryResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorization = defaults.authorization;
    	      this.defaultBranch = defaults.defaultBranch;
    	      this.id = defaults.id;
    	      this.properties = defaults.properties;
    	      this.repositoryType = defaults.repositoryType;
        }

        public Builder setAuthorization(@Nullable AuthorizationResponse authorization) {
            this.authorization = authorization;
            return this;
        }

        public Builder setDefaultBranch(String defaultBranch) {
            this.defaultBranch = Objects.requireNonNull(defaultBranch);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setProperties(@Nullable Map<String,String> properties) {
            this.properties = properties;
            return this;
        }

        public Builder setRepositoryType(String repositoryType) {
            this.repositoryType = Objects.requireNonNull(repositoryType);
            return this;
        }

        public CodeRepositoryResponse build() {
            return new CodeRepositoryResponse(authorization, defaultBranch, id, properties, repositoryType);
        }
    }
}
