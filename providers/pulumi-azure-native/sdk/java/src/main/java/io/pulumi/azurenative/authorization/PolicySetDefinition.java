// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.authorization;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.authorization.PolicySetDefinitionArgs;
import io.pulumi.azurenative.authorization.outputs.ParameterDefinitionsValueResponse;
import io.pulumi.azurenative.authorization.outputs.PolicyDefinitionGroupResponse;
import io.pulumi.azurenative.authorization.outputs.PolicyDefinitionReferenceResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * The policy set definition.
 * API Version: 2020-09-01.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Create or update a policy set definition
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var policySetDefinition = new AzureNative.Authorization.PolicySetDefinition("policySetDefinition", new AzureNative.Authorization.PolicySetDefinitionArgs
 *         {
 *             Description = "Policies to enforce low cost storage SKUs",
 *             DisplayName = "Cost Management",
 *             Metadata = 
 *             {
 *                 { "category", "Cost Management" },
 *             },
 *             Parameters = 
 *             {
 *                 { "namePrefix", new AzureNative.Authorization.Inputs.ParameterDefinitionsValueArgs
 *                 {
 *                     DefaultValue = "myPrefix",
 *                     Metadata = new AzureNative.Authorization.Inputs.ParameterDefinitionsValueMetadataArgs
 *                     {
 *                         DisplayName = "Prefix to enforce on resource names",
 *                     },
 *                     Type = "String",
 *                 } },
 *             },
 *             PolicyDefinitions = 
 *             {
 *                 new AzureNative.Authorization.Inputs.PolicyDefinitionReferenceArgs
 *                 {
 *                     Parameters = 
 *                     {
 *                         { "listOfAllowedSKUs", new AzureNative.Authorization.Inputs.ParameterValuesValueArgs
 *                         {
 *                             Value = 
 *                             {
 *                                 "Standard_GRS",
 *                                 "Standard_LRS",
 *                             },
 *                         } },
 *                     },
 *                     PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1",
 *                     PolicyDefinitionReferenceId = "Limit_Skus",
 *                 },
 *                 new AzureNative.Authorization.Inputs.PolicyDefinitionReferenceArgs
 *                 {
 *                     Parameters = 
 *                     {
 *                         { "prefix", new AzureNative.Authorization.Inputs.ParameterValuesValueArgs
 *                         {
 *                             Value = "[parameters('namePrefix')]",
 *                         } },
 *                         { "suffix", new AzureNative.Authorization.Inputs.ParameterValuesValueArgs
 *                         {
 *                             Value = "-LC",
 *                         } },
 *                     },
 *                     PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
 *                     PolicyDefinitionReferenceId = "Resource_Naming",
 *                 },
 *             },
 *             PolicySetDefinitionName = "CostManagement",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	authorization "github.com/pulumi/pulumi-azure-native/sdk/go/azure/authorization"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := authorization.NewPolicySetDefinition(ctx, "policySetDefinition", &authorization.PolicySetDefinitionArgs{
 * 			Description: pulumi.String("Policies to enforce low cost storage SKUs"),
 * 			DisplayName: pulumi.String("Cost Management"),
 * 			Metadata: pulumi.Any{
 * 				Category: "Cost Management",
 * 			},
 * 			Parameters: authorization.ParameterDefinitionsValueMap{
 * 				"namePrefix": &authorization.ParameterDefinitionsValueArgs{
 * 					DefaultValue: pulumi.Any("myPrefix"),
 * 					Metadata: &authorization.ParameterDefinitionsValueMetadataArgs{
 * 						DisplayName: pulumi.String("Prefix to enforce on resource names"),
 * 					},
 * 					Type: pulumi.String("String"),
 * 				},
 * 			},
 * 			PolicyDefinitions: authorization.PolicyDefinitionReferenceArray{
 * 				&authorization.PolicyDefinitionReferenceArgs{
 * 					Parameters: authorization.ParameterValuesValueMap{
 * 						"listOfAllowedSKUs": &authorization.ParameterValuesValueArgs{
 * 							Value: pulumi.Any{
 * 								"Standard_GRS",
 * 								"Standard_LRS",
 * 							},
 * 						},
 * 					},
 * 					PolicyDefinitionId:          pulumi.String("/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1"),
 * 					PolicyDefinitionReferenceId: pulumi.String("Limit_Skus"),
 * 				},
 * 				&authorization.PolicyDefinitionReferenceArgs{
 * 					Parameters: authorization.ParameterValuesValueMap{
 * 						"prefix": &authorization.ParameterValuesValueArgs{
 * 							Value: pulumi.Any("[parameters('namePrefix')]"),
 * 						},
 * 						"suffix": &authorization.ParameterValuesValueArgs{
 * 							Value: pulumi.Any("-LC"),
 * 						},
 * 					},
 * 					PolicyDefinitionId:          pulumi.String("/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming"),
 * 					PolicyDefinitionReferenceId: pulumi.String("Resource_Naming"),
 * 				},
 * 			},
 * 			PolicySetDefinitionName: pulumi.String("CostManagement"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const policySetDefinition = new azure_native.authorization.PolicySetDefinition("policySetDefinition", {
 *     description: "Policies to enforce low cost storage SKUs",
 *     displayName: "Cost Management",
 *     metadata: {
 *         category: "Cost Management",
 *     },
 *     parameters: {
 *         namePrefix: {
 *             defaultValue: "myPrefix",
 *             metadata: {
 *                 displayName: "Prefix to enforce on resource names",
 *             },
 *             type: "String",
 *         },
 *     },
 *     policyDefinitions: [
 *         {
 *             parameters: {
 *                 listOfAllowedSKUs: {
 *                     value: [
 *                         "Standard_GRS",
 *                         "Standard_LRS",
 *                     ],
 *                 },
 *             },
 *             policyDefinitionId: "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1",
 *             policyDefinitionReferenceId: "Limit_Skus",
 *         },
 *         {
 *             parameters: {
 *                 prefix: {
 *                     value: "[parameters('namePrefix')]",
 *                 },
 *                 suffix: {
 *                     value: "-LC",
 *                 },
 *             },
 *             policyDefinitionId: "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
 *             policyDefinitionReferenceId: "Resource_Naming",
 *         },
 *     ],
 *     policySetDefinitionName: "CostManagement",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * policy_set_definition = azure_native.authorization.PolicySetDefinition("policySetDefinition",
 *     description="Policies to enforce low cost storage SKUs",
 *     display_name="Cost Management",
 *     metadata={
 *         "category": "Cost Management",
 *     },
 *     parameters={
 *         "namePrefix": azure_native.authorization.ParameterDefinitionsValueArgs(
 *             default_value="myPrefix",
 *             metadata=azure_native.authorization.ParameterDefinitionsValueMetadataArgs(
 *                 display_name="Prefix to enforce on resource names",
 *             ),
 *             type="String",
 *         ),
 *     },
 *     policy_definitions=[
 *         azure_native.authorization.PolicyDefinitionReferenceArgs(
 *             parameters={
 *                 "listOfAllowedSKUs": azure_native.authorization.ParameterValuesValueArgs(
 *                     value=[
 *                         "Standard_GRS",
 *                         "Standard_LRS",
 *                     ],
 *                 ),
 *             },
 *             policy_definition_id="/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1",
 *             policy_definition_reference_id="Limit_Skus",
 *         ),
 *         azure_native.authorization.PolicyDefinitionReferenceArgs(
 *             parameters={
 *                 "prefix": azure_native.authorization.ParameterValuesValueArgs(
 *                     value="[parameters('namePrefix')]",
 *                 ),
 *                 "suffix": azure_native.authorization.ParameterValuesValueArgs(
 *                     value="-LC",
 *                 ),
 *             },
 *             policy_definition_id="/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
 *             policy_definition_reference_id="Resource_Naming",
 *         ),
 *     ],
 *     policy_set_definition_name="CostManagement")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Create or update a policy set definition with groups
 * ```csharp
 * using Pulumi;
 * using AzureNative = Pulumi.AzureNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var policySetDefinition = new AzureNative.Authorization.PolicySetDefinition("policySetDefinition", new AzureNative.Authorization.PolicySetDefinitionArgs
 *         {
 *             Description = "Policies to enforce low cost storage SKUs",
 *             DisplayName = "Cost Management",
 *             Metadata = 
 *             {
 *                 { "category", "Cost Management" },
 *             },
 *             PolicyDefinitionGroups = 
 *             {
 *                 new AzureNative.Authorization.Inputs.PolicyDefinitionGroupArgs
 *                 {
 *                     Description = "Policies designed to control spend within a subscription.",
 *                     DisplayName = "Cost Management Policies",
 *                     Name = "CostSaving",
 *                 },
 *                 new AzureNative.Authorization.Inputs.PolicyDefinitionGroupArgs
 *                 {
 *                     Description = "Policies that help enforce resource organization standards within a subscription.",
 *                     DisplayName = "Organizational Policies",
 *                     Name = "Organizational",
 *                 },
 *             },
 *             PolicyDefinitions = 
 *             {
 *                 new AzureNative.Authorization.Inputs.PolicyDefinitionReferenceArgs
 *                 {
 *                     GroupNames = 
 *                     {
 *                         "CostSaving",
 *                     },
 *                     Parameters = 
 *                     {
 *                         { "listOfAllowedSKUs", new AzureNative.Authorization.Inputs.ParameterValuesValueArgs
 *                         {
 *                             Value = 
 *                             {
 *                                 "Standard_GRS",
 *                                 "Standard_LRS",
 *                             },
 *                         } },
 *                     },
 *                     PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1",
 *                     PolicyDefinitionReferenceId = "Limit_Skus",
 *                 },
 *                 new AzureNative.Authorization.Inputs.PolicyDefinitionReferenceArgs
 *                 {
 *                     GroupNames = 
 *                     {
 *                         "Organizational",
 *                     },
 *                     Parameters = 
 *                     {
 *                         { "prefix", new AzureNative.Authorization.Inputs.ParameterValuesValueArgs
 *                         {
 *                             Value = "DeptA",
 *                         } },
 *                         { "suffix", new AzureNative.Authorization.Inputs.ParameterValuesValueArgs
 *                         {
 *                             Value = "-LC",
 *                         } },
 *                     },
 *                     PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
 *                     PolicyDefinitionReferenceId = "Resource_Naming",
 *                 },
 *             },
 *             PolicySetDefinitionName = "CostManagement",
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	authorization "github.com/pulumi/pulumi-azure-native/sdk/go/azure/authorization"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := authorization.NewPolicySetDefinition(ctx, "policySetDefinition", &authorization.PolicySetDefinitionArgs{
 * 			Description: pulumi.String("Policies to enforce low cost storage SKUs"),
 * 			DisplayName: pulumi.String("Cost Management"),
 * 			Metadata: pulumi.Any{
 * 				Category: "Cost Management",
 * 			},
 * 			PolicyDefinitionGroups: []authorization.PolicyDefinitionGroupArgs{
 * 				&authorization.PolicyDefinitionGroupArgs{
 * 					Description: pulumi.String("Policies designed to control spend within a subscription."),
 * 					DisplayName: pulumi.String("Cost Management Policies"),
 * 					Name:        pulumi.String("CostSaving"),
 * 				},
 * 				&authorization.PolicyDefinitionGroupArgs{
 * 					Description: pulumi.String("Policies that help enforce resource organization standards within a subscription."),
 * 					DisplayName: pulumi.String("Organizational Policies"),
 * 					Name:        pulumi.String("Organizational"),
 * 				},
 * 			},
 * 			PolicyDefinitions: authorization.PolicyDefinitionReferenceArray{
 * 				&authorization.PolicyDefinitionReferenceArgs{
 * 					GroupNames: pulumi.StringArray{
 * 						pulumi.String("CostSaving"),
 * 					},
 * 					Parameters: authorization.ParameterValuesValueMap{
 * 						"listOfAllowedSKUs": &authorization.ParameterValuesValueArgs{
 * 							Value: pulumi.Any{
 * 								"Standard_GRS",
 * 								"Standard_LRS",
 * 							},
 * 						},
 * 					},
 * 					PolicyDefinitionId:          pulumi.String("/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1"),
 * 					PolicyDefinitionReferenceId: pulumi.String("Limit_Skus"),
 * 				},
 * 				&authorization.PolicyDefinitionReferenceArgs{
 * 					GroupNames: pulumi.StringArray{
 * 						pulumi.String("Organizational"),
 * 					},
 * 					Parameters: authorization.ParameterValuesValueMap{
 * 						"prefix": &authorization.ParameterValuesValueArgs{
 * 							Value: pulumi.Any("DeptA"),
 * 						},
 * 						"suffix": &authorization.ParameterValuesValueArgs{
 * 							Value: pulumi.Any("-LC"),
 * 						},
 * 					},
 * 					PolicyDefinitionId:          pulumi.String("/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming"),
 * 					PolicyDefinitionReferenceId: pulumi.String("Resource_Naming"),
 * 				},
 * 			},
 * 			PolicySetDefinitionName: pulumi.String("CostManagement"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 * 
 * const policySetDefinition = new azure_native.authorization.PolicySetDefinition("policySetDefinition", {
 *     description: "Policies to enforce low cost storage SKUs",
 *     displayName: "Cost Management",
 *     metadata: {
 *         category: "Cost Management",
 *     },
 *     policyDefinitionGroups: [
 *         {
 *             description: "Policies designed to control spend within a subscription.",
 *             displayName: "Cost Management Policies",
 *             name: "CostSaving",
 *         },
 *         {
 *             description: "Policies that help enforce resource organization standards within a subscription.",
 *             displayName: "Organizational Policies",
 *             name: "Organizational",
 *         },
 *     ],
 *     policyDefinitions: [
 *         {
 *             groupNames: ["CostSaving"],
 *             parameters: {
 *                 listOfAllowedSKUs: {
 *                     value: [
 *                         "Standard_GRS",
 *                         "Standard_LRS",
 *                     ],
 *                 },
 *             },
 *             policyDefinitionId: "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1",
 *             policyDefinitionReferenceId: "Limit_Skus",
 *         },
 *         {
 *             groupNames: ["Organizational"],
 *             parameters: {
 *                 prefix: {
 *                     value: "DeptA",
 *                 },
 *                 suffix: {
 *                     value: "-LC",
 *                 },
 *             },
 *             policyDefinitionId: "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
 *             policyDefinitionReferenceId: "Resource_Naming",
 *         },
 *     ],
 *     policySetDefinitionName: "CostManagement",
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_azure_native as azure_native
 * 
 * policy_set_definition = azure_native.authorization.PolicySetDefinition("policySetDefinition",
 *     description="Policies to enforce low cost storage SKUs",
 *     display_name="Cost Management",
 *     metadata={
 *         "category": "Cost Management",
 *     },
 *     policy_definition_groups=[
 *         azure_native.authorization.PolicyDefinitionGroupArgs(
 *             description="Policies designed to control spend within a subscription.",
 *             display_name="Cost Management Policies",
 *             name="CostSaving",
 *         ),
 *         azure_native.authorization.PolicyDefinitionGroupArgs(
 *             description="Policies that help enforce resource organization standards within a subscription.",
 *             display_name="Organizational Policies",
 *             name="Organizational",
 *         ),
 *     ],
 *     policy_definitions=[
 *         azure_native.authorization.PolicyDefinitionReferenceArgs(
 *             group_names=["CostSaving"],
 *             parameters={
 *                 "listOfAllowedSKUs": azure_native.authorization.ParameterValuesValueArgs(
 *                     value=[
 *                         "Standard_GRS",
 *                         "Standard_LRS",
 *                     ],
 *                 ),
 *             },
 *             policy_definition_id="/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1",
 *             policy_definition_reference_id="Limit_Skus",
 *         ),
 *         azure_native.authorization.PolicyDefinitionReferenceArgs(
 *             group_names=["Organizational"],
 *             parameters={
 *                 "prefix": azure_native.authorization.ParameterValuesValueArgs(
 *                     value="DeptA",
 *                 ),
 *                 "suffix": azure_native.authorization.ParameterValuesValueArgs(
 *                     value="-LC",
 *                 ),
 *             },
 *             policy_definition_id="/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
 *             policy_definition_reference_id="Resource_Naming",
 *         ),
 *     ],
 *     policy_set_definition_name="CostManagement")
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:authorization:PolicySetDefinition CostManagement /subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policySetDefinitions/CostManagement 
 * ```
 * 
 */
@ResourceType(type="azure-native:authorization:PolicySetDefinition")
public class PolicySetDefinition extends io.pulumi.resources.CustomResource {
    /**
     * The policy set definition description.
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The policy set definition description.
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The display name of the policy set definition.
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return The display name of the policy set definition.
     */
    public Output</* @Nullable */ String> getDisplayName() {
        return this.displayName;
    }
    /**
     * The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
     */
    @Export(name="metadata", type=Object.class, parameters={})
    private Output</* @Nullable */ Object> metadata;

    /**
     * @return The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
     */
    public Output</* @Nullable */ Object> getMetadata() {
        return this.metadata;
    }
    /**
     * The name of the policy set definition.
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the policy set definition.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The policy set definition parameters that can be used in policy definition references.
     */
    @Export(name="parameters", type=Map.class, parameters={String.class, ParameterDefinitionsValueResponse.class})
    private Output</* @Nullable */ Map<String,ParameterDefinitionsValueResponse>> parameters;

    /**
     * @return The policy set definition parameters that can be used in policy definition references.
     */
    public Output</* @Nullable */ Map<String,ParameterDefinitionsValueResponse>> getParameters() {
        return this.parameters;
    }
    /**
     * The metadata describing groups of policy definition references within the policy set definition.
     */
    @Export(name="policyDefinitionGroups", type=List.class, parameters={PolicyDefinitionGroupResponse.class})
    private Output</* @Nullable */ List<PolicyDefinitionGroupResponse>> policyDefinitionGroups;

    /**
     * @return The metadata describing groups of policy definition references within the policy set definition.
     */
    public Output</* @Nullable */ List<PolicyDefinitionGroupResponse>> getPolicyDefinitionGroups() {
        return this.policyDefinitionGroups;
    }
    /**
     * An array of policy definition references.
     */
    @Export(name="policyDefinitions", type=List.class, parameters={PolicyDefinitionReferenceResponse.class})
    private Output<List<PolicyDefinitionReferenceResponse>> policyDefinitions;

    /**
     * @return An array of policy definition references.
     */
    public Output<List<PolicyDefinitionReferenceResponse>> getPolicyDefinitions() {
        return this.policyDefinitions;
    }
    /**
     * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
     */
    @Export(name="policyType", type=String.class, parameters={})
    private Output</* @Nullable */ String> policyType;

    /**
     * @return The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
     */
    public Output</* @Nullable */ String> getPolicyType() {
        return this.policyType;
    }
    /**
     * The type of the resource (Microsoft.Authorization/policySetDefinitions).
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource (Microsoft.Authorization/policySetDefinitions).
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PolicySetDefinition(String name) {
        this(name, PolicySetDefinitionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PolicySetDefinition(String name, PolicySetDefinitionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PolicySetDefinition(String name, PolicySetDefinitionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:authorization:PolicySetDefinition", name, args == null ? PolicySetDefinitionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private PolicySetDefinition(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:authorization:PolicySetDefinition", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:authorization/v20170601preview:PolicySetDefinition").build()),
                Output.of(Alias.builder().type("azure-native:authorization/v20180301:PolicySetDefinition").build()),
                Output.of(Alias.builder().type("azure-native:authorization/v20180501:PolicySetDefinition").build()),
                Output.of(Alias.builder().type("azure-native:authorization/v20190101:PolicySetDefinition").build()),
                Output.of(Alias.builder().type("azure-native:authorization/v20190601:PolicySetDefinition").build()),
                Output.of(Alias.builder().type("azure-native:authorization/v20190901:PolicySetDefinition").build()),
                Output.of(Alias.builder().type("azure-native:authorization/v20200301:PolicySetDefinition").build()),
                Output.of(Alias.builder().type("azure-native:authorization/v20200901:PolicySetDefinition").build()),
                Output.of(Alias.builder().type("azure-native:authorization/v20210601:PolicySetDefinition").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PolicySetDefinition get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new PolicySetDefinition(name, id, options);
    }
}
