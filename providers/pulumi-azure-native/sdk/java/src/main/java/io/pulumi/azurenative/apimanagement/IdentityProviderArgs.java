// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.azurenative.apimanagement.enums.IdentityProviderType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IdentityProviderArgs extends io.pulumi.resources.ResourceArgs {

    public static final IdentityProviderArgs Empty = new IdentityProviderArgs();

    /**
     * List of Allowed Tenants when configuring Azure Active Directory login.
     * 
     */
    @InputImport(name="allowedTenants")
        private final @Nullable Input<List<String>> allowedTenants;

    public Input<List<String>> getAllowedTenants() {
        return this.allowedTenants == null ? Input.empty() : this.allowedTenants;
    }

    /**
     * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
     * 
     */
    @InputImport(name="authority")
        private final @Nullable Input<String> authority;

    public Input<String> getAuthority() {
        return this.authority == null ? Input.empty() : this.authority;
    }

    /**
     * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
     * 
     */
    @InputImport(name="clientId", required=true)
        private final Input<String> clientId;

    public Input<String> getClientId() {
        return this.clientId;
    }

    /**
     * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
     * 
     */
    @InputImport(name="clientSecret", required=true)
        private final Input<String> clientSecret;

    public Input<String> getClientSecret() {
        return this.clientSecret;
    }

    /**
     * Identity Provider Type identifier.
     * 
     */
    @InputImport(name="identityProviderName")
        private final @Nullable Input<String> identityProviderName;

    public Input<String> getIdentityProviderName() {
        return this.identityProviderName == null ? Input.empty() : this.identityProviderName;
    }

    /**
     * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    @InputImport(name="passwordResetPolicyName")
        private final @Nullable Input<String> passwordResetPolicyName;

    public Input<String> getPasswordResetPolicyName() {
        return this.passwordResetPolicyName == null ? Input.empty() : this.passwordResetPolicyName;
    }

    /**
     * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    @InputImport(name="profileEditingPolicyName")
        private final @Nullable Input<String> profileEditingPolicyName;

    public Input<String> getProfileEditingPolicyName() {
        return this.profileEditingPolicyName == null ? Input.empty() : this.profileEditingPolicyName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @InputImport(name="serviceName", required=true)
        private final Input<String> serviceName;

    public Input<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * Signin Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    @InputImport(name="signinPolicyName")
        private final @Nullable Input<String> signinPolicyName;

    public Input<String> getSigninPolicyName() {
        return this.signinPolicyName == null ? Input.empty() : this.signinPolicyName;
    }

    /**
     * The TenantId to use instead of Common when logging into Active Directory
     * 
     */
    @InputImport(name="signinTenant")
        private final @Nullable Input<String> signinTenant;

    public Input<String> getSigninTenant() {
        return this.signinTenant == null ? Input.empty() : this.signinTenant;
    }

    /**
     * Signup Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    @InputImport(name="signupPolicyName")
        private final @Nullable Input<String> signupPolicyName;

    public Input<String> getSignupPolicyName() {
        return this.signupPolicyName == null ? Input.empty() : this.signupPolicyName;
    }

    /**
     * Identity Provider Type identifier.
     * 
     */
    @InputImport(name="type")
        private final @Nullable Input<Either<String,IdentityProviderType>> type;

    public Input<Either<String,IdentityProviderType>> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    public IdentityProviderArgs(
        @Nullable Input<List<String>> allowedTenants,
        @Nullable Input<String> authority,
        Input<String> clientId,
        Input<String> clientSecret,
        @Nullable Input<String> identityProviderName,
        @Nullable Input<String> passwordResetPolicyName,
        @Nullable Input<String> profileEditingPolicyName,
        Input<String> resourceGroupName,
        Input<String> serviceName,
        @Nullable Input<String> signinPolicyName,
        @Nullable Input<String> signinTenant,
        @Nullable Input<String> signupPolicyName,
        @Nullable Input<Either<String,IdentityProviderType>> type) {
        this.allowedTenants = allowedTenants;
        this.authority = authority;
        this.clientId = Objects.requireNonNull(clientId, "expected parameter 'clientId' to be non-null");
        this.clientSecret = Objects.requireNonNull(clientSecret, "expected parameter 'clientSecret' to be non-null");
        this.identityProviderName = identityProviderName;
        this.passwordResetPolicyName = passwordResetPolicyName;
        this.profileEditingPolicyName = profileEditingPolicyName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.signinPolicyName = signinPolicyName;
        this.signinTenant = signinTenant;
        this.signupPolicyName = signupPolicyName;
        this.type = type;
    }

    private IdentityProviderArgs() {
        this.allowedTenants = Input.empty();
        this.authority = Input.empty();
        this.clientId = Input.empty();
        this.clientSecret = Input.empty();
        this.identityProviderName = Input.empty();
        this.passwordResetPolicyName = Input.empty();
        this.profileEditingPolicyName = Input.empty();
        this.resourceGroupName = Input.empty();
        this.serviceName = Input.empty();
        this.signinPolicyName = Input.empty();
        this.signinTenant = Input.empty();
        this.signupPolicyName = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IdentityProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> allowedTenants;
        private @Nullable Input<String> authority;
        private Input<String> clientId;
        private Input<String> clientSecret;
        private @Nullable Input<String> identityProviderName;
        private @Nullable Input<String> passwordResetPolicyName;
        private @Nullable Input<String> profileEditingPolicyName;
        private Input<String> resourceGroupName;
        private Input<String> serviceName;
        private @Nullable Input<String> signinPolicyName;
        private @Nullable Input<String> signinTenant;
        private @Nullable Input<String> signupPolicyName;
        private @Nullable Input<Either<String,IdentityProviderType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(IdentityProviderArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedTenants = defaults.allowedTenants;
    	      this.authority = defaults.authority;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.identityProviderName = defaults.identityProviderName;
    	      this.passwordResetPolicyName = defaults.passwordResetPolicyName;
    	      this.profileEditingPolicyName = defaults.profileEditingPolicyName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceName = defaults.serviceName;
    	      this.signinPolicyName = defaults.signinPolicyName;
    	      this.signinTenant = defaults.signinTenant;
    	      this.signupPolicyName = defaults.signupPolicyName;
    	      this.type = defaults.type;
        }

        public Builder setAllowedTenants(@Nullable Input<List<String>> allowedTenants) {
            this.allowedTenants = allowedTenants;
            return this;
        }

        public Builder setAllowedTenants(@Nullable List<String> allowedTenants) {
            this.allowedTenants = Input.ofNullable(allowedTenants);
            return this;
        }

        public Builder setAuthority(@Nullable Input<String> authority) {
            this.authority = authority;
            return this;
        }

        public Builder setAuthority(@Nullable String authority) {
            this.authority = Input.ofNullable(authority);
            return this;
        }

        public Builder setClientId(Input<String> clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }

        public Builder setClientId(String clientId) {
            this.clientId = Input.of(Objects.requireNonNull(clientId));
            return this;
        }

        public Builder setClientSecret(Input<String> clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }

        public Builder setClientSecret(String clientSecret) {
            this.clientSecret = Input.of(Objects.requireNonNull(clientSecret));
            return this;
        }

        public Builder setIdentityProviderName(@Nullable Input<String> identityProviderName) {
            this.identityProviderName = identityProviderName;
            return this;
        }

        public Builder setIdentityProviderName(@Nullable String identityProviderName) {
            this.identityProviderName = Input.ofNullable(identityProviderName);
            return this;
        }

        public Builder setPasswordResetPolicyName(@Nullable Input<String> passwordResetPolicyName) {
            this.passwordResetPolicyName = passwordResetPolicyName;
            return this;
        }

        public Builder setPasswordResetPolicyName(@Nullable String passwordResetPolicyName) {
            this.passwordResetPolicyName = Input.ofNullable(passwordResetPolicyName);
            return this;
        }

        public Builder setProfileEditingPolicyName(@Nullable Input<String> profileEditingPolicyName) {
            this.profileEditingPolicyName = profileEditingPolicyName;
            return this;
        }

        public Builder setProfileEditingPolicyName(@Nullable String profileEditingPolicyName) {
            this.profileEditingPolicyName = Input.ofNullable(profileEditingPolicyName);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setServiceName(Input<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }

        public Builder setServiceName(String serviceName) {
            this.serviceName = Input.of(Objects.requireNonNull(serviceName));
            return this;
        }

        public Builder setSigninPolicyName(@Nullable Input<String> signinPolicyName) {
            this.signinPolicyName = signinPolicyName;
            return this;
        }

        public Builder setSigninPolicyName(@Nullable String signinPolicyName) {
            this.signinPolicyName = Input.ofNullable(signinPolicyName);
            return this;
        }

        public Builder setSigninTenant(@Nullable Input<String> signinTenant) {
            this.signinTenant = signinTenant;
            return this;
        }

        public Builder setSigninTenant(@Nullable String signinTenant) {
            this.signinTenant = Input.ofNullable(signinTenant);
            return this;
        }

        public Builder setSignupPolicyName(@Nullable Input<String> signupPolicyName) {
            this.signupPolicyName = signupPolicyName;
            return this;
        }

        public Builder setSignupPolicyName(@Nullable String signupPolicyName) {
            this.signupPolicyName = Input.ofNullable(signupPolicyName);
            return this;
        }

        public Builder setType(@Nullable Input<Either<String,IdentityProviderType>> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable Either<String,IdentityProviderType> type) {
            this.type = Input.ofNullable(type);
            return this;
        }
        public IdentityProviderArgs build() {
            return new IdentityProviderArgs(allowedTenants, authority, clientId, clientSecret, identityProviderName, passwordResetPolicyName, profileEditingPolicyName, resourceGroupName, serviceName, signinPolicyName, signinTenant, signupPolicyName, type);
        }
    }
}
