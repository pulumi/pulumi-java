// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.azurenative.apimanagement.enums.IdentityProviderType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IdentityProviderArgs extends io.pulumi.resources.ResourceArgs {

    public static final IdentityProviderArgs Empty = new IdentityProviderArgs();

    /**
     * List of Allowed Tenants when configuring Azure Active Directory login.
     * 
     */
    @Import(name="allowedTenants")
      private final @Nullable Output<List<String>> allowedTenants;

    public Output<List<String>> getAllowedTenants() {
        return this.allowedTenants == null ? Output.empty() : this.allowedTenants;
    }

    /**
     * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
     * 
     */
    @Import(name="authority")
      private final @Nullable Output<String> authority;

    public Output<String> getAuthority() {
        return this.authority == null ? Output.empty() : this.authority;
    }

    /**
     * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
     * 
     */
    @Import(name="clientId", required=true)
      private final Output<String> clientId;

    public Output<String> getClientId() {
        return this.clientId;
    }

    /**
     * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
     * 
     */
    @Import(name="clientSecret", required=true)
      private final Output<String> clientSecret;

    public Output<String> getClientSecret() {
        return this.clientSecret;
    }

    /**
     * Identity Provider Type identifier.
     * 
     */
    @Import(name="identityProviderName")
      private final @Nullable Output<String> identityProviderName;

    public Output<String> getIdentityProviderName() {
        return this.identityProviderName == null ? Output.empty() : this.identityProviderName;
    }

    /**
     * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    @Import(name="passwordResetPolicyName")
      private final @Nullable Output<String> passwordResetPolicyName;

    public Output<String> getPasswordResetPolicyName() {
        return this.passwordResetPolicyName == null ? Output.empty() : this.passwordResetPolicyName;
    }

    /**
     * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    @Import(name="profileEditingPolicyName")
      private final @Nullable Output<String> profileEditingPolicyName;

    public Output<String> getProfileEditingPolicyName() {
        return this.profileEditingPolicyName == null ? Output.empty() : this.profileEditingPolicyName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * Signin Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    @Import(name="signinPolicyName")
      private final @Nullable Output<String> signinPolicyName;

    public Output<String> getSigninPolicyName() {
        return this.signinPolicyName == null ? Output.empty() : this.signinPolicyName;
    }

    /**
     * The TenantId to use instead of Common when logging into Active Directory
     * 
     */
    @Import(name="signinTenant")
      private final @Nullable Output<String> signinTenant;

    public Output<String> getSigninTenant() {
        return this.signinTenant == null ? Output.empty() : this.signinTenant;
    }

    /**
     * Signup Policy Name. Only applies to AAD B2C Identity Provider.
     * 
     */
    @Import(name="signupPolicyName")
      private final @Nullable Output<String> signupPolicyName;

    public Output<String> getSignupPolicyName() {
        return this.signupPolicyName == null ? Output.empty() : this.signupPolicyName;
    }

    /**
     * Identity Provider Type identifier.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<Either<String,IdentityProviderType>> type;

    public Output<Either<String,IdentityProviderType>> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public IdentityProviderArgs(
        @Nullable Output<List<String>> allowedTenants,
        @Nullable Output<String> authority,
        Output<String> clientId,
        Output<String> clientSecret,
        @Nullable Output<String> identityProviderName,
        @Nullable Output<String> passwordResetPolicyName,
        @Nullable Output<String> profileEditingPolicyName,
        Output<String> resourceGroupName,
        Output<String> serviceName,
        @Nullable Output<String> signinPolicyName,
        @Nullable Output<String> signinTenant,
        @Nullable Output<String> signupPolicyName,
        @Nullable Output<Either<String,IdentityProviderType>> type) {
        this.allowedTenants = allowedTenants;
        this.authority = authority;
        this.clientId = Objects.requireNonNull(clientId, "expected parameter 'clientId' to be non-null");
        this.clientSecret = Objects.requireNonNull(clientSecret, "expected parameter 'clientSecret' to be non-null");
        this.identityProviderName = identityProviderName;
        this.passwordResetPolicyName = passwordResetPolicyName;
        this.profileEditingPolicyName = profileEditingPolicyName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.signinPolicyName = signinPolicyName;
        this.signinTenant = signinTenant;
        this.signupPolicyName = signupPolicyName;
        this.type = type;
    }

    private IdentityProviderArgs() {
        this.allowedTenants = Output.empty();
        this.authority = Output.empty();
        this.clientId = Output.empty();
        this.clientSecret = Output.empty();
        this.identityProviderName = Output.empty();
        this.passwordResetPolicyName = Output.empty();
        this.profileEditingPolicyName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.serviceName = Output.empty();
        this.signinPolicyName = Output.empty();
        this.signinTenant = Output.empty();
        this.signupPolicyName = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IdentityProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> allowedTenants;
        private @Nullable Output<String> authority;
        private Output<String> clientId;
        private Output<String> clientSecret;
        private @Nullable Output<String> identityProviderName;
        private @Nullable Output<String> passwordResetPolicyName;
        private @Nullable Output<String> profileEditingPolicyName;
        private Output<String> resourceGroupName;
        private Output<String> serviceName;
        private @Nullable Output<String> signinPolicyName;
        private @Nullable Output<String> signinTenant;
        private @Nullable Output<String> signupPolicyName;
        private @Nullable Output<Either<String,IdentityProviderType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(IdentityProviderArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedTenants = defaults.allowedTenants;
    	      this.authority = defaults.authority;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.identityProviderName = defaults.identityProviderName;
    	      this.passwordResetPolicyName = defaults.passwordResetPolicyName;
    	      this.profileEditingPolicyName = defaults.profileEditingPolicyName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceName = defaults.serviceName;
    	      this.signinPolicyName = defaults.signinPolicyName;
    	      this.signinTenant = defaults.signinTenant;
    	      this.signupPolicyName = defaults.signupPolicyName;
    	      this.type = defaults.type;
        }

        public Builder allowedTenants(@Nullable Output<List<String>> allowedTenants) {
            this.allowedTenants = allowedTenants;
            return this;
        }
        public Builder allowedTenants(@Nullable List<String> allowedTenants) {
            this.allowedTenants = Output.ofNullable(allowedTenants);
            return this;
        }
        public Builder allowedTenants(String... allowedTenants) {
            return allowedTenants(List.of(allowedTenants));
        }
        public Builder authority(@Nullable Output<String> authority) {
            this.authority = authority;
            return this;
        }
        public Builder authority(@Nullable String authority) {
            this.authority = Output.ofNullable(authority);
            return this;
        }
        public Builder clientId(Output<String> clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Output.of(Objects.requireNonNull(clientId));
            return this;
        }
        public Builder clientSecret(Output<String> clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = Output.of(Objects.requireNonNull(clientSecret));
            return this;
        }
        public Builder identityProviderName(@Nullable Output<String> identityProviderName) {
            this.identityProviderName = identityProviderName;
            return this;
        }
        public Builder identityProviderName(@Nullable String identityProviderName) {
            this.identityProviderName = Output.ofNullable(identityProviderName);
            return this;
        }
        public Builder passwordResetPolicyName(@Nullable Output<String> passwordResetPolicyName) {
            this.passwordResetPolicyName = passwordResetPolicyName;
            return this;
        }
        public Builder passwordResetPolicyName(@Nullable String passwordResetPolicyName) {
            this.passwordResetPolicyName = Output.ofNullable(passwordResetPolicyName);
            return this;
        }
        public Builder profileEditingPolicyName(@Nullable Output<String> profileEditingPolicyName) {
            this.profileEditingPolicyName = profileEditingPolicyName;
            return this;
        }
        public Builder profileEditingPolicyName(@Nullable String profileEditingPolicyName) {
            this.profileEditingPolicyName = Output.ofNullable(profileEditingPolicyName);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public Builder signinPolicyName(@Nullable Output<String> signinPolicyName) {
            this.signinPolicyName = signinPolicyName;
            return this;
        }
        public Builder signinPolicyName(@Nullable String signinPolicyName) {
            this.signinPolicyName = Output.ofNullable(signinPolicyName);
            return this;
        }
        public Builder signinTenant(@Nullable Output<String> signinTenant) {
            this.signinTenant = signinTenant;
            return this;
        }
        public Builder signinTenant(@Nullable String signinTenant) {
            this.signinTenant = Output.ofNullable(signinTenant);
            return this;
        }
        public Builder signupPolicyName(@Nullable Output<String> signupPolicyName) {
            this.signupPolicyName = signupPolicyName;
            return this;
        }
        public Builder signupPolicyName(@Nullable String signupPolicyName) {
            this.signupPolicyName = Output.ofNullable(signupPolicyName);
            return this;
        }
        public Builder type(@Nullable Output<Either<String,IdentityProviderType>> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable Either<String,IdentityProviderType> type) {
            this.type = Output.ofNullable(type);
            return this;
        }        public IdentityProviderArgs build() {
            return new IdentityProviderArgs(allowedTenants, authority, clientId, clientSecret, identityProviderName, passwordResetPolicyName, profileEditingPolicyName, resourceGroupName, serviceName, signinPolicyName, signinTenant, signupPolicyName, type);
        }
    }
}
