// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearning.outputs;

import io.pulumi.azurenative.machinelearning.outputs.PlanQuantityResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class CommitmentPlanPropertiesResponse {
    /**
     * Indicates whether usage beyond the commitment plan's included quantities will be charged.
     * 
     */
    private final Boolean chargeForOverage;
    /**
     * Indicates whether the commitment plan will incur a charge.
     * 
     */
    private final Boolean chargeForPlan;
    /**
     * The date at which this commitment plan was created, in ISO 8601 format.
     * 
     */
    private final String creationDate;
    /**
     * The included resource quantities this plan gives you.
     * 
     */
    private final Map<String,PlanQuantityResponse> includedQuantities;
    /**
     * The maximum number of commitment associations that can be children of this commitment plan.
     * 
     */
    private final Integer maxAssociationLimit;
    /**
     * The maximum scale-out capacity for this commitment plan.
     * 
     */
    private final Integer maxCapacityLimit;
    /**
     * The minimum scale-out capacity for this commitment plan.
     * 
     */
    private final Integer minCapacityLimit;
    /**
     * The Azure meter which will be used to charge for this commitment plan.
     * 
     */
    private final String planMeter;
    /**
     * The frequency at which this commitment plan's included quantities are refilled.
     * 
     */
    private final Integer refillFrequencyInDays;
    /**
     * Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan's included quantities.
     * 
     */
    private final Boolean suspendPlanOnOverage;

    @OutputCustomType.Constructor({"chargeForOverage","chargeForPlan","creationDate","includedQuantities","maxAssociationLimit","maxCapacityLimit","minCapacityLimit","planMeter","refillFrequencyInDays","suspendPlanOnOverage"})
    private CommitmentPlanPropertiesResponse(
        Boolean chargeForOverage,
        Boolean chargeForPlan,
        String creationDate,
        Map<String,PlanQuantityResponse> includedQuantities,
        Integer maxAssociationLimit,
        Integer maxCapacityLimit,
        Integer minCapacityLimit,
        String planMeter,
        Integer refillFrequencyInDays,
        Boolean suspendPlanOnOverage) {
        this.chargeForOverage = Objects.requireNonNull(chargeForOverage);
        this.chargeForPlan = Objects.requireNonNull(chargeForPlan);
        this.creationDate = Objects.requireNonNull(creationDate);
        this.includedQuantities = Objects.requireNonNull(includedQuantities);
        this.maxAssociationLimit = Objects.requireNonNull(maxAssociationLimit);
        this.maxCapacityLimit = Objects.requireNonNull(maxCapacityLimit);
        this.minCapacityLimit = Objects.requireNonNull(minCapacityLimit);
        this.planMeter = Objects.requireNonNull(planMeter);
        this.refillFrequencyInDays = Objects.requireNonNull(refillFrequencyInDays);
        this.suspendPlanOnOverage = Objects.requireNonNull(suspendPlanOnOverage);
    }

    /**
     * Indicates whether usage beyond the commitment plan's included quantities will be charged.
     * 
     */
    public Boolean getChargeForOverage() {
        return this.chargeForOverage;
    }
    /**
     * Indicates whether the commitment plan will incur a charge.
     * 
     */
    public Boolean getChargeForPlan() {
        return this.chargeForPlan;
    }
    /**
     * The date at which this commitment plan was created, in ISO 8601 format.
     * 
     */
    public String getCreationDate() {
        return this.creationDate;
    }
    /**
     * The included resource quantities this plan gives you.
     * 
     */
    public Map<String,PlanQuantityResponse> getIncludedQuantities() {
        return this.includedQuantities;
    }
    /**
     * The maximum number of commitment associations that can be children of this commitment plan.
     * 
     */
    public Integer getMaxAssociationLimit() {
        return this.maxAssociationLimit;
    }
    /**
     * The maximum scale-out capacity for this commitment plan.
     * 
     */
    public Integer getMaxCapacityLimit() {
        return this.maxCapacityLimit;
    }
    /**
     * The minimum scale-out capacity for this commitment plan.
     * 
     */
    public Integer getMinCapacityLimit() {
        return this.minCapacityLimit;
    }
    /**
     * The Azure meter which will be used to charge for this commitment plan.
     * 
     */
    public String getPlanMeter() {
        return this.planMeter;
    }
    /**
     * The frequency at which this commitment plan's included quantities are refilled.
     * 
     */
    public Integer getRefillFrequencyInDays() {
        return this.refillFrequencyInDays;
    }
    /**
     * Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan's included quantities.
     * 
     */
    public Boolean getSuspendPlanOnOverage() {
        return this.suspendPlanOnOverage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CommitmentPlanPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean chargeForOverage;
        private Boolean chargeForPlan;
        private String creationDate;
        private Map<String,PlanQuantityResponse> includedQuantities;
        private Integer maxAssociationLimit;
        private Integer maxCapacityLimit;
        private Integer minCapacityLimit;
        private String planMeter;
        private Integer refillFrequencyInDays;
        private Boolean suspendPlanOnOverage;

        public Builder() {
    	      // Empty
        }

        public Builder(CommitmentPlanPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chargeForOverage = defaults.chargeForOverage;
    	      this.chargeForPlan = defaults.chargeForPlan;
    	      this.creationDate = defaults.creationDate;
    	      this.includedQuantities = defaults.includedQuantities;
    	      this.maxAssociationLimit = defaults.maxAssociationLimit;
    	      this.maxCapacityLimit = defaults.maxCapacityLimit;
    	      this.minCapacityLimit = defaults.minCapacityLimit;
    	      this.planMeter = defaults.planMeter;
    	      this.refillFrequencyInDays = defaults.refillFrequencyInDays;
    	      this.suspendPlanOnOverage = defaults.suspendPlanOnOverage;
        }

        public Builder setChargeForOverage(Boolean chargeForOverage) {
            this.chargeForOverage = Objects.requireNonNull(chargeForOverage);
            return this;
        }

        public Builder setChargeForPlan(Boolean chargeForPlan) {
            this.chargeForPlan = Objects.requireNonNull(chargeForPlan);
            return this;
        }

        public Builder setCreationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }

        public Builder setIncludedQuantities(Map<String,PlanQuantityResponse> includedQuantities) {
            this.includedQuantities = Objects.requireNonNull(includedQuantities);
            return this;
        }

        public Builder setMaxAssociationLimit(Integer maxAssociationLimit) {
            this.maxAssociationLimit = Objects.requireNonNull(maxAssociationLimit);
            return this;
        }

        public Builder setMaxCapacityLimit(Integer maxCapacityLimit) {
            this.maxCapacityLimit = Objects.requireNonNull(maxCapacityLimit);
            return this;
        }

        public Builder setMinCapacityLimit(Integer minCapacityLimit) {
            this.minCapacityLimit = Objects.requireNonNull(minCapacityLimit);
            return this;
        }

        public Builder setPlanMeter(String planMeter) {
            this.planMeter = Objects.requireNonNull(planMeter);
            return this;
        }

        public Builder setRefillFrequencyInDays(Integer refillFrequencyInDays) {
            this.refillFrequencyInDays = Objects.requireNonNull(refillFrequencyInDays);
            return this;
        }

        public Builder setSuspendPlanOnOverage(Boolean suspendPlanOnOverage) {
            this.suspendPlanOnOverage = Objects.requireNonNull(suspendPlanOnOverage);
            return this;
        }

        public CommitmentPlanPropertiesResponse build() {
            return new CommitmentPlanPropertiesResponse(chargeForOverage, chargeForPlan, creationDate, includedQuantities, maxAssociationLimit, maxCapacityLimit, minCapacityLimit, planMeter, refillFrequencyInDays, suspendPlanOnOverage);
        }
    }
}
