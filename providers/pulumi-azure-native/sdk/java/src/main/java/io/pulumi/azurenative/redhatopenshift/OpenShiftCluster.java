// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.redhatopenshift;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.redhatopenshift.outputs.APIServerProfileResponse;
import io.pulumi.azurenative.redhatopenshift.outputs.ClusterProfileResponse;
import io.pulumi.azurenative.redhatopenshift.outputs.ConsoleProfileResponse;
import io.pulumi.azurenative.redhatopenshift.outputs.IngressProfileResponse;
import io.pulumi.azurenative.redhatopenshift.outputs.MasterProfileResponse;
import io.pulumi.azurenative.redhatopenshift.outputs.NetworkProfileResponse;
import io.pulumi.azurenative.redhatopenshift.outputs.ServicePrincipalProfileResponse;
import io.pulumi.azurenative.redhatopenshift.outputs.WorkerProfileResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * OpenShiftCluster represents an Azure Red Hat OpenShift cluster.
API Version: 2020-04-30.

{{% examples %}}
## Example Usage
{{% example %}}
### Creates or updates a OpenShift cluster with the specified subscription, resource group and resource name.
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var openShiftCluster = new AzureNative.RedHatOpenShift.OpenShiftCluster("openShiftCluster", new AzureNative.RedHatOpenShift.OpenShiftClusterArgs
        {
            ApiserverProfile = new AzureNative.RedHatOpenShift.Inputs.APIServerProfileArgs
            {
                Visibility = "Public",
            },
            ClusterProfile = new AzureNative.RedHatOpenShift.Inputs.ClusterProfileArgs
            {
                Domain = "cluster.location.aroapp.io",
                PullSecret = "{\"auths\":{\"registry.connect.redhat.com\":{\"auth\":\"\"},\"registry.redhat.io\":{\"auth\":\"\"}}}",
                ResourceGroupId = "/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup",
            },
            ConsoleProfile = ,
            IngressProfiles = 
            {
                new AzureNative.RedHatOpenShift.Inputs.IngressProfileArgs
                {
                    Name = "default",
                    Visibility = "Public",
                },
            },
            Location = "location",
            MasterProfile = new AzureNative.RedHatOpenShift.Inputs.MasterProfileArgs
            {
                SubnetId = "/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master",
                VmSize = "Standard_D8s_v3",
            },
            NetworkProfile = new AzureNative.RedHatOpenShift.Inputs.NetworkProfileArgs
            {
                PodCidr = "10.128.0.0/14",
                ServiceCidr = "172.30.0.0/16",
            },
            ResourceGroupName = "resourceGroup",
            ResourceName = "resourceName",
            ServicePrincipalProfile = new AzureNative.RedHatOpenShift.Inputs.ServicePrincipalProfileArgs
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
            },
            Tags = 
            {
                { "key", "value" },
            },
            WorkerProfiles = 
            {
                new AzureNative.RedHatOpenShift.Inputs.WorkerProfileArgs
                {
                    Count = 3,
                    DiskSizeGB = 128,
                    Name = "worker",
                    SubnetId = "/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker",
                    VmSize = "Standard_D2s_v3",
                },
            },
        });
    }

}

```

```go
package main

import (
	redhatopenshift "github.com/pulumi/pulumi-azure-native/sdk/go/azure/redhatopenshift"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := redhatopenshift.NewOpenShiftCluster(ctx, "openShiftCluster", &redhatopenshift.OpenShiftClusterArgs{
			ApiserverProfile: &redhatopenshift.APIServerProfileArgs{
				Visibility: pulumi.String("Public"),
			},
			ClusterProfile: &redhatopenshift.ClusterProfileArgs{
				Domain:          pulumi.String("cluster.location.aroapp.io"),
				PullSecret:      pulumi.String("{\"auths\":{\"registry.connect.redhat.com\":{\"auth\":\"\"},\"registry.redhat.io\":{\"auth\":\"\"}}}"),
				ResourceGroupId: pulumi.String("/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup"),
			},
			ConsoleProfile: nil,
			IngressProfiles: []redhatopenshift.IngressProfileArgs{
				&redhatopenshift.IngressProfileArgs{
					Name:       pulumi.String("default"),
					Visibility: pulumi.String("Public"),
				},
			},
			Location: pulumi.String("location"),
			MasterProfile: &redhatopenshift.MasterProfileArgs{
				SubnetId: pulumi.String("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master"),
				VmSize:   pulumi.String("Standard_D8s_v3"),
			},
			NetworkProfile: &redhatopenshift.NetworkProfileArgs{
				PodCidr:     pulumi.String("10.128.0.0/14"),
				ServiceCidr: pulumi.String("172.30.0.0/16"),
			},
			ResourceGroupName: pulumi.String("resourceGroup"),
			ResourceName:      pulumi.String("resourceName"),
			ServicePrincipalProfile: &redhatopenshift.ServicePrincipalProfileArgs{
				ClientId:     pulumi.String("clientId"),
				ClientSecret: pulumi.String("clientSecret"),
			},
			Tags: pulumi.StringMap{
				"key": pulumi.String("value"),
			},
			WorkerProfiles: []redhatopenshift.WorkerProfileArgs{
				&redhatopenshift.WorkerProfileArgs{
					Count:      pulumi.Int(3),
					DiskSizeGB: pulumi.Int(128),
					Name:       pulumi.String("worker"),
					SubnetId:   pulumi.String("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker"),
					VmSize:     pulumi.String("Standard_D2s_v3"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const openShiftCluster = new azure_native.redhatopenshift.OpenShiftCluster("openShiftCluster", {
    apiserverProfile: {
        visibility: "Public",
    },
    clusterProfile: {
        domain: "cluster.location.aroapp.io",
        pullSecret: "{\"auths\":{\"registry.connect.redhat.com\":{\"auth\":\"\"},\"registry.redhat.io\":{\"auth\":\"\"}}}",
        resourceGroupId: "/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup",
    },
    consoleProfile: {},
    ingressProfiles: [{
        name: "default",
        visibility: "Public",
    }],
    location: "location",
    masterProfile: {
        subnetId: "/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master",
        vmSize: "Standard_D8s_v3",
    },
    networkProfile: {
        podCidr: "10.128.0.0/14",
        serviceCidr: "172.30.0.0/16",
    },
    resourceGroupName: "resourceGroup",
    resourceName: "resourceName",
    servicePrincipalProfile: {
        clientId: "clientId",
        clientSecret: "clientSecret",
    },
    tags: {
        key: "value",
    },
    workerProfiles: [{
        count: 3,
        diskSizeGB: 128,
        name: "worker",
        subnetId: "/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker",
        vmSize: "Standard_D2s_v3",
    }],
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

open_shift_cluster = azure_native.redhatopenshift.OpenShiftCluster("openShiftCluster",
    apiserver_profile=azure_native.redhatopenshift.APIServerProfileArgs(
        visibility="Public",
    ),
    cluster_profile=azure_native.redhatopenshift.ClusterProfileArgs(
        domain="cluster.location.aroapp.io",
        pull_secret="{\"auths\":{\"registry.connect.redhat.com\":{\"auth\":\"\"},\"registry.redhat.io\":{\"auth\":\"\"}}}",
        resource_group_id="/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup",
    ),
    console_profile=azure_native.redhatopenshift.ConsoleProfileArgs(),
    ingress_profiles=[azure_native.redhatopenshift.IngressProfileArgs(
        name="default",
        visibility="Public",
    )],
    location="location",
    master_profile=azure_native.redhatopenshift.MasterProfileArgs(
        subnet_id="/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master",
        vm_size="Standard_D8s_v3",
    ),
    network_profile=azure_native.redhatopenshift.NetworkProfileArgs(
        pod_cidr="10.128.0.0/14",
        service_cidr="172.30.0.0/16",
    ),
    resource_group_name="resourceGroup",
    resource_name="resourceName",
    service_principal_profile=azure_native.redhatopenshift.ServicePrincipalProfileArgs(
        client_id="clientId",
        client_secret="clientSecret",
    ),
    tags={
        "key": "value",
    },
    worker_profiles=[azure_native.redhatopenshift.WorkerProfileArgs(
        count=3,
        disk_size_gb=128,
        name="worker",
        subnet_id="/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker",
        vm_size="Standard_D2s_v3",
    )])

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:redhatopenshift:OpenShiftCluster resourceName /subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.RedHatOpenShift/OpenShiftClusters/resourceName 
```

 */
@ResourceType(type="azure-native:redhatopenshift:OpenShiftCluster")
public class OpenShiftCluster extends io.pulumi.resources.CustomResource {
    /**
     * The cluster API server profile.
     */
    @OutputExport(name="apiserverProfile", type=APIServerProfileResponse.class, parameters={})
    private Output</* @Nullable */ APIServerProfileResponse> apiserverProfile;

    /**
     * @return The cluster API server profile.
     */
    public Output</* @Nullable */ APIServerProfileResponse> getApiserverProfile() {
        return this.apiserverProfile;
    }
    /**
     * The cluster profile.
     */
    @OutputExport(name="clusterProfile", type=ClusterProfileResponse.class, parameters={})
    private Output</* @Nullable */ ClusterProfileResponse> clusterProfile;

    /**
     * @return The cluster profile.
     */
    public Output</* @Nullable */ ClusterProfileResponse> getClusterProfile() {
        return this.clusterProfile;
    }
    /**
     * The console profile.
     */
    @OutputExport(name="consoleProfile", type=ConsoleProfileResponse.class, parameters={})
    private Output</* @Nullable */ ConsoleProfileResponse> consoleProfile;

    /**
     * @return The console profile.
     */
    public Output</* @Nullable */ ConsoleProfileResponse> getConsoleProfile() {
        return this.consoleProfile;
    }
    /**
     * The cluster ingress profiles.
     */
    @OutputExport(name="ingressProfiles", type=List.class, parameters={IngressProfileResponse.class})
    private Output</* @Nullable */ List<IngressProfileResponse>> ingressProfiles;

    /**
     * @return The cluster ingress profiles.
     */
    public Output</* @Nullable */ List<IngressProfileResponse>> getIngressProfiles() {
        return this.ingressProfiles;
    }
    /**
     * The geo-location where the resource lives
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The geo-location where the resource lives
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * The cluster master profile.
     */
    @OutputExport(name="masterProfile", type=MasterProfileResponse.class, parameters={})
    private Output</* @Nullable */ MasterProfileResponse> masterProfile;

    /**
     * @return The cluster master profile.
     */
    public Output</* @Nullable */ MasterProfileResponse> getMasterProfile() {
        return this.masterProfile;
    }
    /**
     * The name of the resource
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The cluster network profile.
     */
    @OutputExport(name="networkProfile", type=NetworkProfileResponse.class, parameters={})
    private Output</* @Nullable */ NetworkProfileResponse> networkProfile;

    /**
     * @return The cluster network profile.
     */
    public Output</* @Nullable */ NetworkProfileResponse> getNetworkProfile() {
        return this.networkProfile;
    }
    /**
     * The cluster provisioning state (immutable).
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output</* @Nullable */ String> provisioningState;

    /**
     * @return The cluster provisioning state (immutable).
     */
    public Output</* @Nullable */ String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The cluster service principal profile.
     */
    @OutputExport(name="servicePrincipalProfile", type=ServicePrincipalProfileResponse.class, parameters={})
    private Output</* @Nullable */ ServicePrincipalProfileResponse> servicePrincipalProfile;

    /**
     * @return The cluster service principal profile.
     */
    public Output</* @Nullable */ ServicePrincipalProfileResponse> getServicePrincipalProfile() {
        return this.servicePrincipalProfile;
    }
    /**
     * Resource tags.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * The cluster worker profiles.
     */
    @OutputExport(name="workerProfiles", type=List.class, parameters={WorkerProfileResponse.class})
    private Output</* @Nullable */ List<WorkerProfileResponse>> workerProfiles;

    /**
     * @return The cluster worker profiles.
     */
    public Output</* @Nullable */ List<WorkerProfileResponse>> getWorkerProfiles() {
        return this.workerProfiles;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OpenShiftCluster(String name, OpenShiftClusterArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:redhatopenshift:OpenShiftCluster", name, args == null ? OpenShiftClusterArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private OpenShiftCluster(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:redhatopenshift:OpenShiftCluster", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:redhatopenshift/v20200430:OpenShiftCluster").build()),
                Input.of(Alias.builder().setType("azure-native:redhatopenshift/v20210901preview:OpenShiftCluster").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OpenShiftCluster get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new OpenShiftCluster(name, id, options);
    }
}
