// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.synapse;

import io.pulumi.azurenative.synapse.enums.WorkspacePublicNetworkAccess;
import io.pulumi.azurenative.synapse.inputs.DataLakeStorageAccountDetailsArgs;
import io.pulumi.azurenative.synapse.inputs.EncryptionDetailsArgs;
import io.pulumi.azurenative.synapse.inputs.ManagedIdentityArgs;
import io.pulumi.azurenative.synapse.inputs.ManagedVirtualNetworkSettingsArgs;
import io.pulumi.azurenative.synapse.inputs.PrivateEndpointConnectionArgs;
import io.pulumi.azurenative.synapse.inputs.PurviewConfigurationArgs;
import io.pulumi.azurenative.synapse.inputs.VirtualNetworkProfileArgs;
import io.pulumi.azurenative.synapse.inputs.WorkspaceRepositoryConfigurationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WorkspaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final WorkspaceArgs Empty = new WorkspaceArgs();

    /**
     * Connectivity endpoints
     * 
     */
    @InputImport(name="connectivityEndpoints")
      private final @Nullable Input<Map<String,String>> connectivityEndpoints;

    public Input<Map<String,String>> getConnectivityEndpoints() {
        return this.connectivityEndpoints == null ? Input.empty() : this.connectivityEndpoints;
    }

    /**
     * Workspace default data lake storage account details
     * 
     */
    @InputImport(name="defaultDataLakeStorage")
      private final @Nullable Input<DataLakeStorageAccountDetailsArgs> defaultDataLakeStorage;

    public Input<DataLakeStorageAccountDetailsArgs> getDefaultDataLakeStorage() {
        return this.defaultDataLakeStorage == null ? Input.empty() : this.defaultDataLakeStorage;
    }

    /**
     * The encryption details of the workspace
     * 
     */
    @InputImport(name="encryption")
      private final @Nullable Input<EncryptionDetailsArgs> encryption;

    public Input<EncryptionDetailsArgs> getEncryption() {
        return this.encryption == null ? Input.empty() : this.encryption;
    }

    /**
     * Identity of the workspace
     * 
     */
    @InputImport(name="identity")
      private final @Nullable Input<ManagedIdentityArgs> identity;

    public Input<ManagedIdentityArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and '-', '_', '(', ')' and'.'. Note that the name cannot end with '.'
     * 
     */
    @InputImport(name="managedResourceGroupName")
      private final @Nullable Input<String> managedResourceGroupName;

    public Input<String> getManagedResourceGroupName() {
        return this.managedResourceGroupName == null ? Input.empty() : this.managedResourceGroupName;
    }

    /**
     * Setting this to 'default' will ensure that all compute for this workspace is in a virtual network managed on behalf of the user.
     * 
     */
    @InputImport(name="managedVirtualNetwork")
      private final @Nullable Input<String> managedVirtualNetwork;

    public Input<String> getManagedVirtualNetwork() {
        return this.managedVirtualNetwork == null ? Input.empty() : this.managedVirtualNetwork;
    }

    /**
     * Managed Virtual Network Settings
     * 
     */
    @InputImport(name="managedVirtualNetworkSettings")
      private final @Nullable Input<ManagedVirtualNetworkSettingsArgs> managedVirtualNetworkSettings;

    public Input<ManagedVirtualNetworkSettingsArgs> getManagedVirtualNetworkSettings() {
        return this.managedVirtualNetworkSettings == null ? Input.empty() : this.managedVirtualNetworkSettings;
    }

    /**
     * Private endpoint connections to the workspace
     * 
     */
    @InputImport(name="privateEndpointConnections")
      private final @Nullable Input<List<PrivateEndpointConnectionArgs>> privateEndpointConnections;

    public Input<List<PrivateEndpointConnectionArgs>> getPrivateEndpointConnections() {
        return this.privateEndpointConnections == null ? Input.empty() : this.privateEndpointConnections;
    }

    /**
     * Enable or Disable public network access to workspace
     * 
     */
    @InputImport(name="publicNetworkAccess")
      private final @Nullable Input<Either<String,WorkspacePublicNetworkAccess>> publicNetworkAccess;

    public Input<Either<String,WorkspacePublicNetworkAccess>> getPublicNetworkAccess() {
        return this.publicNetworkAccess == null ? Input.empty() : this.publicNetworkAccess;
    }

    /**
     * Purview Configuration
     * 
     */
    @InputImport(name="purviewConfiguration")
      private final @Nullable Input<PurviewConfigurationArgs> purviewConfiguration;

    public Input<PurviewConfigurationArgs> getPurviewConfiguration() {
        return this.purviewConfiguration == null ? Input.empty() : this.purviewConfiguration;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Login for workspace SQL active directory administrator
     * 
     */
    @InputImport(name="sqlAdministratorLogin")
      private final @Nullable Input<String> sqlAdministratorLogin;

    public Input<String> getSqlAdministratorLogin() {
        return this.sqlAdministratorLogin == null ? Input.empty() : this.sqlAdministratorLogin;
    }

    /**
     * SQL administrator login password
     * 
     */
    @InputImport(name="sqlAdministratorLoginPassword")
      private final @Nullable Input<String> sqlAdministratorLoginPassword;

    public Input<String> getSqlAdministratorLoginPassword() {
        return this.sqlAdministratorLoginPassword == null ? Input.empty() : this.sqlAdministratorLoginPassword;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Virtual Network profile
     * 
     */
    @InputImport(name="virtualNetworkProfile")
      private final @Nullable Input<VirtualNetworkProfileArgs> virtualNetworkProfile;

    public Input<VirtualNetworkProfileArgs> getVirtualNetworkProfile() {
        return this.virtualNetworkProfile == null ? Input.empty() : this.virtualNetworkProfile;
    }

    /**
     * The name of the workspace
     * 
     */
    @InputImport(name="workspaceName")
      private final @Nullable Input<String> workspaceName;

    public Input<String> getWorkspaceName() {
        return this.workspaceName == null ? Input.empty() : this.workspaceName;
    }

    /**
     * Git integration settings
     * 
     */
    @InputImport(name="workspaceRepositoryConfiguration")
      private final @Nullable Input<WorkspaceRepositoryConfigurationArgs> workspaceRepositoryConfiguration;

    public Input<WorkspaceRepositoryConfigurationArgs> getWorkspaceRepositoryConfiguration() {
        return this.workspaceRepositoryConfiguration == null ? Input.empty() : this.workspaceRepositoryConfiguration;
    }

    public WorkspaceArgs(
        @Nullable Input<Map<String,String>> connectivityEndpoints,
        @Nullable Input<DataLakeStorageAccountDetailsArgs> defaultDataLakeStorage,
        @Nullable Input<EncryptionDetailsArgs> encryption,
        @Nullable Input<ManagedIdentityArgs> identity,
        @Nullable Input<String> location,
        @Nullable Input<String> managedResourceGroupName,
        @Nullable Input<String> managedVirtualNetwork,
        @Nullable Input<ManagedVirtualNetworkSettingsArgs> managedVirtualNetworkSettings,
        @Nullable Input<List<PrivateEndpointConnectionArgs>> privateEndpointConnections,
        @Nullable Input<Either<String,WorkspacePublicNetworkAccess>> publicNetworkAccess,
        @Nullable Input<PurviewConfigurationArgs> purviewConfiguration,
        Input<String> resourceGroupName,
        @Nullable Input<String> sqlAdministratorLogin,
        @Nullable Input<String> sqlAdministratorLoginPassword,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<VirtualNetworkProfileArgs> virtualNetworkProfile,
        @Nullable Input<String> workspaceName,
        @Nullable Input<WorkspaceRepositoryConfigurationArgs> workspaceRepositoryConfiguration) {
        this.connectivityEndpoints = connectivityEndpoints;
        this.defaultDataLakeStorage = defaultDataLakeStorage;
        this.encryption = encryption;
        this.identity = identity;
        this.location = location;
        this.managedResourceGroupName = managedResourceGroupName;
        this.managedVirtualNetwork = managedVirtualNetwork;
        this.managedVirtualNetworkSettings = managedVirtualNetworkSettings;
        this.privateEndpointConnections = privateEndpointConnections;
        this.publicNetworkAccess = publicNetworkAccess;
        this.purviewConfiguration = purviewConfiguration;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sqlAdministratorLogin = sqlAdministratorLogin;
        this.sqlAdministratorLoginPassword = sqlAdministratorLoginPassword;
        this.tags = tags;
        this.virtualNetworkProfile = virtualNetworkProfile;
        this.workspaceName = workspaceName;
        this.workspaceRepositoryConfiguration = workspaceRepositoryConfiguration;
    }

    private WorkspaceArgs() {
        this.connectivityEndpoints = Input.empty();
        this.defaultDataLakeStorage = Input.empty();
        this.encryption = Input.empty();
        this.identity = Input.empty();
        this.location = Input.empty();
        this.managedResourceGroupName = Input.empty();
        this.managedVirtualNetwork = Input.empty();
        this.managedVirtualNetworkSettings = Input.empty();
        this.privateEndpointConnections = Input.empty();
        this.publicNetworkAccess = Input.empty();
        this.purviewConfiguration = Input.empty();
        this.resourceGroupName = Input.empty();
        this.sqlAdministratorLogin = Input.empty();
        this.sqlAdministratorLoginPassword = Input.empty();
        this.tags = Input.empty();
        this.virtualNetworkProfile = Input.empty();
        this.workspaceName = Input.empty();
        this.workspaceRepositoryConfiguration = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkspaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Map<String,String>> connectivityEndpoints;
        private @Nullable Input<DataLakeStorageAccountDetailsArgs> defaultDataLakeStorage;
        private @Nullable Input<EncryptionDetailsArgs> encryption;
        private @Nullable Input<ManagedIdentityArgs> identity;
        private @Nullable Input<String> location;
        private @Nullable Input<String> managedResourceGroupName;
        private @Nullable Input<String> managedVirtualNetwork;
        private @Nullable Input<ManagedVirtualNetworkSettingsArgs> managedVirtualNetworkSettings;
        private @Nullable Input<List<PrivateEndpointConnectionArgs>> privateEndpointConnections;
        private @Nullable Input<Either<String,WorkspacePublicNetworkAccess>> publicNetworkAccess;
        private @Nullable Input<PurviewConfigurationArgs> purviewConfiguration;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> sqlAdministratorLogin;
        private @Nullable Input<String> sqlAdministratorLoginPassword;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<VirtualNetworkProfileArgs> virtualNetworkProfile;
        private @Nullable Input<String> workspaceName;
        private @Nullable Input<WorkspaceRepositoryConfigurationArgs> workspaceRepositoryConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkspaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectivityEndpoints = defaults.connectivityEndpoints;
    	      this.defaultDataLakeStorage = defaults.defaultDataLakeStorage;
    	      this.encryption = defaults.encryption;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.managedResourceGroupName = defaults.managedResourceGroupName;
    	      this.managedVirtualNetwork = defaults.managedVirtualNetwork;
    	      this.managedVirtualNetworkSettings = defaults.managedVirtualNetworkSettings;
    	      this.privateEndpointConnections = defaults.privateEndpointConnections;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.purviewConfiguration = defaults.purviewConfiguration;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sqlAdministratorLogin = defaults.sqlAdministratorLogin;
    	      this.sqlAdministratorLoginPassword = defaults.sqlAdministratorLoginPassword;
    	      this.tags = defaults.tags;
    	      this.virtualNetworkProfile = defaults.virtualNetworkProfile;
    	      this.workspaceName = defaults.workspaceName;
    	      this.workspaceRepositoryConfiguration = defaults.workspaceRepositoryConfiguration;
        }

        public Builder setConnectivityEndpoints(@Nullable Input<Map<String,String>> connectivityEndpoints) {
            this.connectivityEndpoints = connectivityEndpoints;
            return this;
        }

        public Builder setConnectivityEndpoints(@Nullable Map<String,String> connectivityEndpoints) {
            this.connectivityEndpoints = Input.ofNullable(connectivityEndpoints);
            return this;
        }

        public Builder setDefaultDataLakeStorage(@Nullable Input<DataLakeStorageAccountDetailsArgs> defaultDataLakeStorage) {
            this.defaultDataLakeStorage = defaultDataLakeStorage;
            return this;
        }

        public Builder setDefaultDataLakeStorage(@Nullable DataLakeStorageAccountDetailsArgs defaultDataLakeStorage) {
            this.defaultDataLakeStorage = Input.ofNullable(defaultDataLakeStorage);
            return this;
        }

        public Builder setEncryption(@Nullable Input<EncryptionDetailsArgs> encryption) {
            this.encryption = encryption;
            return this;
        }

        public Builder setEncryption(@Nullable EncryptionDetailsArgs encryption) {
            this.encryption = Input.ofNullable(encryption);
            return this;
        }

        public Builder setIdentity(@Nullable Input<ManagedIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIdentity(@Nullable ManagedIdentityArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setManagedResourceGroupName(@Nullable Input<String> managedResourceGroupName) {
            this.managedResourceGroupName = managedResourceGroupName;
            return this;
        }

        public Builder setManagedResourceGroupName(@Nullable String managedResourceGroupName) {
            this.managedResourceGroupName = Input.ofNullable(managedResourceGroupName);
            return this;
        }

        public Builder setManagedVirtualNetwork(@Nullable Input<String> managedVirtualNetwork) {
            this.managedVirtualNetwork = managedVirtualNetwork;
            return this;
        }

        public Builder setManagedVirtualNetwork(@Nullable String managedVirtualNetwork) {
            this.managedVirtualNetwork = Input.ofNullable(managedVirtualNetwork);
            return this;
        }

        public Builder setManagedVirtualNetworkSettings(@Nullable Input<ManagedVirtualNetworkSettingsArgs> managedVirtualNetworkSettings) {
            this.managedVirtualNetworkSettings = managedVirtualNetworkSettings;
            return this;
        }

        public Builder setManagedVirtualNetworkSettings(@Nullable ManagedVirtualNetworkSettingsArgs managedVirtualNetworkSettings) {
            this.managedVirtualNetworkSettings = Input.ofNullable(managedVirtualNetworkSettings);
            return this;
        }

        public Builder setPrivateEndpointConnections(@Nullable Input<List<PrivateEndpointConnectionArgs>> privateEndpointConnections) {
            this.privateEndpointConnections = privateEndpointConnections;
            return this;
        }

        public Builder setPrivateEndpointConnections(@Nullable List<PrivateEndpointConnectionArgs> privateEndpointConnections) {
            this.privateEndpointConnections = Input.ofNullable(privateEndpointConnections);
            return this;
        }

        public Builder setPublicNetworkAccess(@Nullable Input<Either<String,WorkspacePublicNetworkAccess>> publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder setPublicNetworkAccess(@Nullable Either<String,WorkspacePublicNetworkAccess> publicNetworkAccess) {
            this.publicNetworkAccess = Input.ofNullable(publicNetworkAccess);
            return this;
        }

        public Builder setPurviewConfiguration(@Nullable Input<PurviewConfigurationArgs> purviewConfiguration) {
            this.purviewConfiguration = purviewConfiguration;
            return this;
        }

        public Builder setPurviewConfiguration(@Nullable PurviewConfigurationArgs purviewConfiguration) {
            this.purviewConfiguration = Input.ofNullable(purviewConfiguration);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setSqlAdministratorLogin(@Nullable Input<String> sqlAdministratorLogin) {
            this.sqlAdministratorLogin = sqlAdministratorLogin;
            return this;
        }

        public Builder setSqlAdministratorLogin(@Nullable String sqlAdministratorLogin) {
            this.sqlAdministratorLogin = Input.ofNullable(sqlAdministratorLogin);
            return this;
        }

        public Builder setSqlAdministratorLoginPassword(@Nullable Input<String> sqlAdministratorLoginPassword) {
            this.sqlAdministratorLoginPassword = sqlAdministratorLoginPassword;
            return this;
        }

        public Builder setSqlAdministratorLoginPassword(@Nullable String sqlAdministratorLoginPassword) {
            this.sqlAdministratorLoginPassword = Input.ofNullable(sqlAdministratorLoginPassword);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVirtualNetworkProfile(@Nullable Input<VirtualNetworkProfileArgs> virtualNetworkProfile) {
            this.virtualNetworkProfile = virtualNetworkProfile;
            return this;
        }

        public Builder setVirtualNetworkProfile(@Nullable VirtualNetworkProfileArgs virtualNetworkProfile) {
            this.virtualNetworkProfile = Input.ofNullable(virtualNetworkProfile);
            return this;
        }

        public Builder setWorkspaceName(@Nullable Input<String> workspaceName) {
            this.workspaceName = workspaceName;
            return this;
        }

        public Builder setWorkspaceName(@Nullable String workspaceName) {
            this.workspaceName = Input.ofNullable(workspaceName);
            return this;
        }

        public Builder setWorkspaceRepositoryConfiguration(@Nullable Input<WorkspaceRepositoryConfigurationArgs> workspaceRepositoryConfiguration) {
            this.workspaceRepositoryConfiguration = workspaceRepositoryConfiguration;
            return this;
        }

        public Builder setWorkspaceRepositoryConfiguration(@Nullable WorkspaceRepositoryConfigurationArgs workspaceRepositoryConfiguration) {
            this.workspaceRepositoryConfiguration = Input.ofNullable(workspaceRepositoryConfiguration);
            return this;
        }
        public WorkspaceArgs build() {
            return new WorkspaceArgs(connectivityEndpoints, defaultDataLakeStorage, encryption, identity, location, managedResourceGroupName, managedVirtualNetwork, managedVirtualNetworkSettings, privateEndpointConnections, publicNetworkAccess, purviewConfiguration, resourceGroupName, sqlAdministratorLogin, sqlAdministratorLoginPassword, tags, virtualNetworkProfile, workspaceName, workspaceRepositoryConfiguration);
        }
    }
}
