// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The X12 agreement acknowledgement settings.
 * 
 */
public final class X12AcknowledgementSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final X12AcknowledgementSettingsArgs Empty = new X12AcknowledgementSettingsArgs();

    /**
     * The acknowledgement control number lower bound.
     * 
     */
    @InputImport(name="acknowledgementControlNumberLowerBound", required=true)
      private final Input<Integer> acknowledgementControlNumberLowerBound;

    public Input<Integer> getAcknowledgementControlNumberLowerBound() {
        return this.acknowledgementControlNumberLowerBound;
    }

    /**
     * The acknowledgement control number prefix.
     * 
     */
    @InputImport(name="acknowledgementControlNumberPrefix")
      private final @Nullable Input<String> acknowledgementControlNumberPrefix;

    public Input<String> getAcknowledgementControlNumberPrefix() {
        return this.acknowledgementControlNumberPrefix == null ? Input.empty() : this.acknowledgementControlNumberPrefix;
    }

    /**
     * The acknowledgement control number suffix.
     * 
     */
    @InputImport(name="acknowledgementControlNumberSuffix")
      private final @Nullable Input<String> acknowledgementControlNumberSuffix;

    public Input<String> getAcknowledgementControlNumberSuffix() {
        return this.acknowledgementControlNumberSuffix == null ? Input.empty() : this.acknowledgementControlNumberSuffix;
    }

    /**
     * The acknowledgement control number upper bound.
     * 
     */
    @InputImport(name="acknowledgementControlNumberUpperBound", required=true)
      private final Input<Integer> acknowledgementControlNumberUpperBound;

    public Input<Integer> getAcknowledgementControlNumberUpperBound() {
        return this.acknowledgementControlNumberUpperBound;
    }

    /**
     * The value indicating whether to batch functional acknowledgements.
     * 
     */
    @InputImport(name="batchFunctionalAcknowledgements", required=true)
      private final Input<Boolean> batchFunctionalAcknowledgements;

    public Input<Boolean> getBatchFunctionalAcknowledgements() {
        return this.batchFunctionalAcknowledgements;
    }

    /**
     * The value indicating whether to batch implementation acknowledgements.
     * 
     */
    @InputImport(name="batchImplementationAcknowledgements", required=true)
      private final Input<Boolean> batchImplementationAcknowledgements;

    public Input<Boolean> getBatchImplementationAcknowledgements() {
        return this.batchImplementationAcknowledgements;
    }

    /**
     * The value indicating whether to batch the technical acknowledgements.
     * 
     */
    @InputImport(name="batchTechnicalAcknowledgements", required=true)
      private final Input<Boolean> batchTechnicalAcknowledgements;

    public Input<Boolean> getBatchTechnicalAcknowledgements() {
        return this.batchTechnicalAcknowledgements;
    }

    /**
     * The functional acknowledgement version.
     * 
     */
    @InputImport(name="functionalAcknowledgementVersion")
      private final @Nullable Input<String> functionalAcknowledgementVersion;

    public Input<String> getFunctionalAcknowledgementVersion() {
        return this.functionalAcknowledgementVersion == null ? Input.empty() : this.functionalAcknowledgementVersion;
    }

    /**
     * The implementation acknowledgement version.
     * 
     */
    @InputImport(name="implementationAcknowledgementVersion")
      private final @Nullable Input<String> implementationAcknowledgementVersion;

    public Input<String> getImplementationAcknowledgementVersion() {
        return this.implementationAcknowledgementVersion == null ? Input.empty() : this.implementationAcknowledgementVersion;
    }

    /**
     * The value indicating whether functional acknowledgement is needed.
     * 
     */
    @InputImport(name="needFunctionalAcknowledgement", required=true)
      private final Input<Boolean> needFunctionalAcknowledgement;

    public Input<Boolean> getNeedFunctionalAcknowledgement() {
        return this.needFunctionalAcknowledgement;
    }

    /**
     * The value indicating whether implementation acknowledgement is needed.
     * 
     */
    @InputImport(name="needImplementationAcknowledgement", required=true)
      private final Input<Boolean> needImplementationAcknowledgement;

    public Input<Boolean> getNeedImplementationAcknowledgement() {
        return this.needImplementationAcknowledgement;
    }

    /**
     * The value indicating whether a loop is needed for valid messages.
     * 
     */
    @InputImport(name="needLoopForValidMessages", required=true)
      private final Input<Boolean> needLoopForValidMessages;

    public Input<Boolean> getNeedLoopForValidMessages() {
        return this.needLoopForValidMessages;
    }

    /**
     * The value indicating whether technical acknowledgement is needed.
     * 
     */
    @InputImport(name="needTechnicalAcknowledgement", required=true)
      private final Input<Boolean> needTechnicalAcknowledgement;

    public Input<Boolean> getNeedTechnicalAcknowledgement() {
        return this.needTechnicalAcknowledgement;
    }

    /**
     * The value indicating whether to rollover acknowledgement control number.
     * 
     */
    @InputImport(name="rolloverAcknowledgementControlNumber", required=true)
      private final Input<Boolean> rolloverAcknowledgementControlNumber;

    public Input<Boolean> getRolloverAcknowledgementControlNumber() {
        return this.rolloverAcknowledgementControlNumber;
    }

    /**
     * The value indicating whether to send synchronous acknowledgement.
     * 
     */
    @InputImport(name="sendSynchronousAcknowledgement", required=true)
      private final Input<Boolean> sendSynchronousAcknowledgement;

    public Input<Boolean> getSendSynchronousAcknowledgement() {
        return this.sendSynchronousAcknowledgement;
    }

    public X12AcknowledgementSettingsArgs(
        Input<Integer> acknowledgementControlNumberLowerBound,
        @Nullable Input<String> acknowledgementControlNumberPrefix,
        @Nullable Input<String> acknowledgementControlNumberSuffix,
        Input<Integer> acknowledgementControlNumberUpperBound,
        Input<Boolean> batchFunctionalAcknowledgements,
        Input<Boolean> batchImplementationAcknowledgements,
        Input<Boolean> batchTechnicalAcknowledgements,
        @Nullable Input<String> functionalAcknowledgementVersion,
        @Nullable Input<String> implementationAcknowledgementVersion,
        Input<Boolean> needFunctionalAcknowledgement,
        Input<Boolean> needImplementationAcknowledgement,
        Input<Boolean> needLoopForValidMessages,
        Input<Boolean> needTechnicalAcknowledgement,
        Input<Boolean> rolloverAcknowledgementControlNumber,
        Input<Boolean> sendSynchronousAcknowledgement) {
        this.acknowledgementControlNumberLowerBound = Objects.requireNonNull(acknowledgementControlNumberLowerBound, "expected parameter 'acknowledgementControlNumberLowerBound' to be non-null");
        this.acknowledgementControlNumberPrefix = acknowledgementControlNumberPrefix;
        this.acknowledgementControlNumberSuffix = acknowledgementControlNumberSuffix;
        this.acknowledgementControlNumberUpperBound = Objects.requireNonNull(acknowledgementControlNumberUpperBound, "expected parameter 'acknowledgementControlNumberUpperBound' to be non-null");
        this.batchFunctionalAcknowledgements = Objects.requireNonNull(batchFunctionalAcknowledgements, "expected parameter 'batchFunctionalAcknowledgements' to be non-null");
        this.batchImplementationAcknowledgements = Objects.requireNonNull(batchImplementationAcknowledgements, "expected parameter 'batchImplementationAcknowledgements' to be non-null");
        this.batchTechnicalAcknowledgements = Objects.requireNonNull(batchTechnicalAcknowledgements, "expected parameter 'batchTechnicalAcknowledgements' to be non-null");
        this.functionalAcknowledgementVersion = functionalAcknowledgementVersion;
        this.implementationAcknowledgementVersion = implementationAcknowledgementVersion;
        this.needFunctionalAcknowledgement = Objects.requireNonNull(needFunctionalAcknowledgement, "expected parameter 'needFunctionalAcknowledgement' to be non-null");
        this.needImplementationAcknowledgement = Objects.requireNonNull(needImplementationAcknowledgement, "expected parameter 'needImplementationAcknowledgement' to be non-null");
        this.needLoopForValidMessages = Objects.requireNonNull(needLoopForValidMessages, "expected parameter 'needLoopForValidMessages' to be non-null");
        this.needTechnicalAcknowledgement = Objects.requireNonNull(needTechnicalAcknowledgement, "expected parameter 'needTechnicalAcknowledgement' to be non-null");
        this.rolloverAcknowledgementControlNumber = Objects.requireNonNull(rolloverAcknowledgementControlNumber, "expected parameter 'rolloverAcknowledgementControlNumber' to be non-null");
        this.sendSynchronousAcknowledgement = Objects.requireNonNull(sendSynchronousAcknowledgement, "expected parameter 'sendSynchronousAcknowledgement' to be non-null");
    }

    private X12AcknowledgementSettingsArgs() {
        this.acknowledgementControlNumberLowerBound = Input.empty();
        this.acknowledgementControlNumberPrefix = Input.empty();
        this.acknowledgementControlNumberSuffix = Input.empty();
        this.acknowledgementControlNumberUpperBound = Input.empty();
        this.batchFunctionalAcknowledgements = Input.empty();
        this.batchImplementationAcknowledgements = Input.empty();
        this.batchTechnicalAcknowledgements = Input.empty();
        this.functionalAcknowledgementVersion = Input.empty();
        this.implementationAcknowledgementVersion = Input.empty();
        this.needFunctionalAcknowledgement = Input.empty();
        this.needImplementationAcknowledgement = Input.empty();
        this.needLoopForValidMessages = Input.empty();
        this.needTechnicalAcknowledgement = Input.empty();
        this.rolloverAcknowledgementControlNumber = Input.empty();
        this.sendSynchronousAcknowledgement = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12AcknowledgementSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Integer> acknowledgementControlNumberLowerBound;
        private @Nullable Input<String> acknowledgementControlNumberPrefix;
        private @Nullable Input<String> acknowledgementControlNumberSuffix;
        private Input<Integer> acknowledgementControlNumberUpperBound;
        private Input<Boolean> batchFunctionalAcknowledgements;
        private Input<Boolean> batchImplementationAcknowledgements;
        private Input<Boolean> batchTechnicalAcknowledgements;
        private @Nullable Input<String> functionalAcknowledgementVersion;
        private @Nullable Input<String> implementationAcknowledgementVersion;
        private Input<Boolean> needFunctionalAcknowledgement;
        private Input<Boolean> needImplementationAcknowledgement;
        private Input<Boolean> needLoopForValidMessages;
        private Input<Boolean> needTechnicalAcknowledgement;
        private Input<Boolean> rolloverAcknowledgementControlNumber;
        private Input<Boolean> sendSynchronousAcknowledgement;

        public Builder() {
    	      // Empty
        }

        public Builder(X12AcknowledgementSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acknowledgementControlNumberLowerBound = defaults.acknowledgementControlNumberLowerBound;
    	      this.acknowledgementControlNumberPrefix = defaults.acknowledgementControlNumberPrefix;
    	      this.acknowledgementControlNumberSuffix = defaults.acknowledgementControlNumberSuffix;
    	      this.acknowledgementControlNumberUpperBound = defaults.acknowledgementControlNumberUpperBound;
    	      this.batchFunctionalAcknowledgements = defaults.batchFunctionalAcknowledgements;
    	      this.batchImplementationAcknowledgements = defaults.batchImplementationAcknowledgements;
    	      this.batchTechnicalAcknowledgements = defaults.batchTechnicalAcknowledgements;
    	      this.functionalAcknowledgementVersion = defaults.functionalAcknowledgementVersion;
    	      this.implementationAcknowledgementVersion = defaults.implementationAcknowledgementVersion;
    	      this.needFunctionalAcknowledgement = defaults.needFunctionalAcknowledgement;
    	      this.needImplementationAcknowledgement = defaults.needImplementationAcknowledgement;
    	      this.needLoopForValidMessages = defaults.needLoopForValidMessages;
    	      this.needTechnicalAcknowledgement = defaults.needTechnicalAcknowledgement;
    	      this.rolloverAcknowledgementControlNumber = defaults.rolloverAcknowledgementControlNumber;
    	      this.sendSynchronousAcknowledgement = defaults.sendSynchronousAcknowledgement;
        }

        public Builder setAcknowledgementControlNumberLowerBound(Input<Integer> acknowledgementControlNumberLowerBound) {
            this.acknowledgementControlNumberLowerBound = Objects.requireNonNull(acknowledgementControlNumberLowerBound);
            return this;
        }

        public Builder setAcknowledgementControlNumberLowerBound(Integer acknowledgementControlNumberLowerBound) {
            this.acknowledgementControlNumberLowerBound = Input.of(Objects.requireNonNull(acknowledgementControlNumberLowerBound));
            return this;
        }

        public Builder setAcknowledgementControlNumberPrefix(@Nullable Input<String> acknowledgementControlNumberPrefix) {
            this.acknowledgementControlNumberPrefix = acknowledgementControlNumberPrefix;
            return this;
        }

        public Builder setAcknowledgementControlNumberPrefix(@Nullable String acknowledgementControlNumberPrefix) {
            this.acknowledgementControlNumberPrefix = Input.ofNullable(acknowledgementControlNumberPrefix);
            return this;
        }

        public Builder setAcknowledgementControlNumberSuffix(@Nullable Input<String> acknowledgementControlNumberSuffix) {
            this.acknowledgementControlNumberSuffix = acknowledgementControlNumberSuffix;
            return this;
        }

        public Builder setAcknowledgementControlNumberSuffix(@Nullable String acknowledgementControlNumberSuffix) {
            this.acknowledgementControlNumberSuffix = Input.ofNullable(acknowledgementControlNumberSuffix);
            return this;
        }

        public Builder setAcknowledgementControlNumberUpperBound(Input<Integer> acknowledgementControlNumberUpperBound) {
            this.acknowledgementControlNumberUpperBound = Objects.requireNonNull(acknowledgementControlNumberUpperBound);
            return this;
        }

        public Builder setAcknowledgementControlNumberUpperBound(Integer acknowledgementControlNumberUpperBound) {
            this.acknowledgementControlNumberUpperBound = Input.of(Objects.requireNonNull(acknowledgementControlNumberUpperBound));
            return this;
        }

        public Builder setBatchFunctionalAcknowledgements(Input<Boolean> batchFunctionalAcknowledgements) {
            this.batchFunctionalAcknowledgements = Objects.requireNonNull(batchFunctionalAcknowledgements);
            return this;
        }

        public Builder setBatchFunctionalAcknowledgements(Boolean batchFunctionalAcknowledgements) {
            this.batchFunctionalAcknowledgements = Input.of(Objects.requireNonNull(batchFunctionalAcknowledgements));
            return this;
        }

        public Builder setBatchImplementationAcknowledgements(Input<Boolean> batchImplementationAcknowledgements) {
            this.batchImplementationAcknowledgements = Objects.requireNonNull(batchImplementationAcknowledgements);
            return this;
        }

        public Builder setBatchImplementationAcknowledgements(Boolean batchImplementationAcknowledgements) {
            this.batchImplementationAcknowledgements = Input.of(Objects.requireNonNull(batchImplementationAcknowledgements));
            return this;
        }

        public Builder setBatchTechnicalAcknowledgements(Input<Boolean> batchTechnicalAcknowledgements) {
            this.batchTechnicalAcknowledgements = Objects.requireNonNull(batchTechnicalAcknowledgements);
            return this;
        }

        public Builder setBatchTechnicalAcknowledgements(Boolean batchTechnicalAcknowledgements) {
            this.batchTechnicalAcknowledgements = Input.of(Objects.requireNonNull(batchTechnicalAcknowledgements));
            return this;
        }

        public Builder setFunctionalAcknowledgementVersion(@Nullable Input<String> functionalAcknowledgementVersion) {
            this.functionalAcknowledgementVersion = functionalAcknowledgementVersion;
            return this;
        }

        public Builder setFunctionalAcknowledgementVersion(@Nullable String functionalAcknowledgementVersion) {
            this.functionalAcknowledgementVersion = Input.ofNullable(functionalAcknowledgementVersion);
            return this;
        }

        public Builder setImplementationAcknowledgementVersion(@Nullable Input<String> implementationAcknowledgementVersion) {
            this.implementationAcknowledgementVersion = implementationAcknowledgementVersion;
            return this;
        }

        public Builder setImplementationAcknowledgementVersion(@Nullable String implementationAcknowledgementVersion) {
            this.implementationAcknowledgementVersion = Input.ofNullable(implementationAcknowledgementVersion);
            return this;
        }

        public Builder setNeedFunctionalAcknowledgement(Input<Boolean> needFunctionalAcknowledgement) {
            this.needFunctionalAcknowledgement = Objects.requireNonNull(needFunctionalAcknowledgement);
            return this;
        }

        public Builder setNeedFunctionalAcknowledgement(Boolean needFunctionalAcknowledgement) {
            this.needFunctionalAcknowledgement = Input.of(Objects.requireNonNull(needFunctionalAcknowledgement));
            return this;
        }

        public Builder setNeedImplementationAcknowledgement(Input<Boolean> needImplementationAcknowledgement) {
            this.needImplementationAcknowledgement = Objects.requireNonNull(needImplementationAcknowledgement);
            return this;
        }

        public Builder setNeedImplementationAcknowledgement(Boolean needImplementationAcknowledgement) {
            this.needImplementationAcknowledgement = Input.of(Objects.requireNonNull(needImplementationAcknowledgement));
            return this;
        }

        public Builder setNeedLoopForValidMessages(Input<Boolean> needLoopForValidMessages) {
            this.needLoopForValidMessages = Objects.requireNonNull(needLoopForValidMessages);
            return this;
        }

        public Builder setNeedLoopForValidMessages(Boolean needLoopForValidMessages) {
            this.needLoopForValidMessages = Input.of(Objects.requireNonNull(needLoopForValidMessages));
            return this;
        }

        public Builder setNeedTechnicalAcknowledgement(Input<Boolean> needTechnicalAcknowledgement) {
            this.needTechnicalAcknowledgement = Objects.requireNonNull(needTechnicalAcknowledgement);
            return this;
        }

        public Builder setNeedTechnicalAcknowledgement(Boolean needTechnicalAcknowledgement) {
            this.needTechnicalAcknowledgement = Input.of(Objects.requireNonNull(needTechnicalAcknowledgement));
            return this;
        }

        public Builder setRolloverAcknowledgementControlNumber(Input<Boolean> rolloverAcknowledgementControlNumber) {
            this.rolloverAcknowledgementControlNumber = Objects.requireNonNull(rolloverAcknowledgementControlNumber);
            return this;
        }

        public Builder setRolloverAcknowledgementControlNumber(Boolean rolloverAcknowledgementControlNumber) {
            this.rolloverAcknowledgementControlNumber = Input.of(Objects.requireNonNull(rolloverAcknowledgementControlNumber));
            return this;
        }

        public Builder setSendSynchronousAcknowledgement(Input<Boolean> sendSynchronousAcknowledgement) {
            this.sendSynchronousAcknowledgement = Objects.requireNonNull(sendSynchronousAcknowledgement);
            return this;
        }

        public Builder setSendSynchronousAcknowledgement(Boolean sendSynchronousAcknowledgement) {
            this.sendSynchronousAcknowledgement = Input.of(Objects.requireNonNull(sendSynchronousAcknowledgement));
            return this;
        }
        public X12AcknowledgementSettingsArgs build() {
            return new X12AcknowledgementSettingsArgs(acknowledgementControlNumberLowerBound, acknowledgementControlNumberPrefix, acknowledgementControlNumberSuffix, acknowledgementControlNumberUpperBound, batchFunctionalAcknowledgements, batchImplementationAcknowledgements, batchTechnicalAcknowledgements, functionalAcknowledgementVersion, implementationAcknowledgementVersion, needFunctionalAcknowledgement, needImplementationAcknowledgement, needLoopForValidMessages, needTechnicalAcknowledgement, rolloverAcknowledgementControlNumber, sendSynchronousAcknowledgement);
        }
    }
}
