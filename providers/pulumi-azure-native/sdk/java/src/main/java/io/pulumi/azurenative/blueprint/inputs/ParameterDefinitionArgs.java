// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.blueprint.inputs;

import io.pulumi.azurenative.blueprint.enums.TemplateParameterType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represent a parameter with constrains and metadata.
 * 
 */
public final class ParameterDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ParameterDefinitionArgs Empty = new ParameterDefinitionArgs();

    /**
     * Array of allowed values for this parameter.
     * 
     */
    @Import(name="allowedValues")
      private final @Nullable Output<List<Object>> allowedValues;

    public Output<List<Object>> getAllowedValues() {
        return this.allowedValues == null ? Output.empty() : this.allowedValues;
    }

    /**
     * Default Value for this parameter.
     * 
     */
    @Import(name="defaultValue")
      private final @Nullable Output<Object> defaultValue;

    public Output<Object> getDefaultValue() {
        return this.defaultValue == null ? Output.empty() : this.defaultValue;
    }

    /**
     * Description of this parameter/resourceGroup.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * DisplayName of this parameter/resourceGroup.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
     * 
     */
    @Import(name="strongType")
      private final @Nullable Output<String> strongType;

    public Output<String> getStrongType() {
        return this.strongType == null ? Output.empty() : this.strongType;
    }

    /**
     * Allowed data types for Resource Manager template parameters.
     * 
     */
    @Import(name="type", required=true)
      private final Output<Either<String,TemplateParameterType>> type;

    public Output<Either<String,TemplateParameterType>> getType() {
        return this.type;
    }

    public ParameterDefinitionArgs(
        @Nullable Output<List<Object>> allowedValues,
        @Nullable Output<Object> defaultValue,
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        @Nullable Output<String> strongType,
        Output<Either<String,TemplateParameterType>> type) {
        this.allowedValues = allowedValues;
        this.defaultValue = defaultValue;
        this.description = description;
        this.displayName = displayName;
        this.strongType = strongType;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ParameterDefinitionArgs() {
        this.allowedValues = Output.empty();
        this.defaultValue = Output.empty();
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.strongType = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ParameterDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Object>> allowedValues;
        private @Nullable Output<Object> defaultValue;
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> strongType;
        private Output<Either<String,TemplateParameterType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ParameterDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedValues = defaults.allowedValues;
    	      this.defaultValue = defaults.defaultValue;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.strongType = defaults.strongType;
    	      this.type = defaults.type;
        }

        public Builder allowedValues(@Nullable Output<List<Object>> allowedValues) {
            this.allowedValues = allowedValues;
            return this;
        }
        public Builder allowedValues(@Nullable List<Object> allowedValues) {
            this.allowedValues = Output.ofNullable(allowedValues);
            return this;
        }
        public Builder allowedValues(Object... allowedValues) {
            return allowedValues(List.of(allowedValues));
        }
        public Builder defaultValue(@Nullable Output<Object> defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }
        public Builder defaultValue(@Nullable Object defaultValue) {
            this.defaultValue = Output.ofNullable(defaultValue);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }
        public Builder strongType(@Nullable Output<String> strongType) {
            this.strongType = strongType;
            return this;
        }
        public Builder strongType(@Nullable String strongType) {
            this.strongType = Output.ofNullable(strongType);
            return this;
        }
        public Builder type(Output<Either<String,TemplateParameterType>> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(Either<String,TemplateParameterType> type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ParameterDefinitionArgs build() {
            return new ParameterDefinitionArgs(allowedValues, defaultValue, description, displayName, strongType, type);
        }
    }
}
