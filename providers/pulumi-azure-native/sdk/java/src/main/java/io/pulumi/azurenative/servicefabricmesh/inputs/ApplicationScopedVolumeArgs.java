// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabricmesh.inputs;

import io.pulumi.azurenative.servicefabricmesh.inputs.ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes a volume whose lifetime is scoped to the application's lifetime.
 * 
 */
public final class ApplicationScopedVolumeArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationScopedVolumeArgs Empty = new ApplicationScopedVolumeArgs();

    /**
     * Describes parameters for creating application-scoped volumes.
     * 
     */
    @Import(name="creationParameters", required=true)
      private final Output<ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskArgs> creationParameters;

    public Output<ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskArgs> getCreationParameters() {
        return this.creationParameters;
    }

    /**
     * The path within the container at which the volume should be mounted. Only valid path characters are allowed.
     * 
     */
    @Import(name="destinationPath", required=true)
      private final Output<String> destinationPath;

    public Output<String> getDestinationPath() {
        return this.destinationPath;
    }

    /**
     * Name of the volume being referenced.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * The flag indicating whether the volume is read only. Default is 'false'.
     * 
     */
    @Import(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> getReadOnly() {
        return this.readOnly == null ? Codegen.empty() : this.readOnly;
    }

    public ApplicationScopedVolumeArgs(
        Output<ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskArgs> creationParameters,
        Output<String> destinationPath,
        Output<String> name,
        @Nullable Output<Boolean> readOnly) {
        this.creationParameters = Objects.requireNonNull(creationParameters, "expected parameter 'creationParameters' to be non-null");
        this.destinationPath = Objects.requireNonNull(destinationPath, "expected parameter 'destinationPath' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.readOnly = readOnly;
    }

    private ApplicationScopedVolumeArgs() {
        this.creationParameters = Codegen.empty();
        this.destinationPath = Codegen.empty();
        this.name = Codegen.empty();
        this.readOnly = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationScopedVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskArgs> creationParameters;
        private Output<String> destinationPath;
        private Output<String> name;
        private @Nullable Output<Boolean> readOnly;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationScopedVolumeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationParameters = defaults.creationParameters;
    	      this.destinationPath = defaults.destinationPath;
    	      this.name = defaults.name;
    	      this.readOnly = defaults.readOnly;
        }

        public Builder creationParameters(Output<ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskArgs> creationParameters) {
            this.creationParameters = Objects.requireNonNull(creationParameters);
            return this;
        }
        public Builder creationParameters(ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskArgs creationParameters) {
            this.creationParameters = Output.of(Objects.requireNonNull(creationParameters));
            return this;
        }
        public Builder destinationPath(Output<String> destinationPath) {
            this.destinationPath = Objects.requireNonNull(destinationPath);
            return this;
        }
        public Builder destinationPath(String destinationPath) {
            this.destinationPath = Output.of(Objects.requireNonNull(destinationPath));
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Codegen.ofNullable(readOnly);
            return this;
        }        public ApplicationScopedVolumeArgs build() {
            return new ApplicationScopedVolumeArgs(creationParameters, destinationPath, name, readOnly);
        }
    }
}
