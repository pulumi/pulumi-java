// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.outputs;

import io.pulumi.azurenative.web.outputs.CookieExpirationResponse;
import io.pulumi.azurenative.web.outputs.LoginRoutesResponse;
import io.pulumi.azurenative.web.outputs.NonceResponse;
import io.pulumi.azurenative.web.outputs.TokenStoreResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class LoginResponse {
    /**
     * External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     * 
     */
    private final @Nullable List<String> allowedExternalRedirectUrls;
    /**
     * The configuration settings of the session cookie's expiration.
     * 
     */
    private final @Nullable CookieExpirationResponse cookieExpiration;
    /**
     * The configuration settings of the nonce used in the login flow.
     * 
     */
    private final @Nullable NonceResponse nonce;
    /**
     * <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
     * 
     */
    private final @Nullable Boolean preserveUrlFragmentsForLogins;
    /**
     * The routes that specify the endpoints used for login and logout requests.
     * 
     */
    private final @Nullable LoginRoutesResponse routes;
    /**
     * The configuration settings of the token store.
     * 
     */
    private final @Nullable TokenStoreResponse tokenStore;

    @OutputCustomType.Constructor({"allowedExternalRedirectUrls","cookieExpiration","nonce","preserveUrlFragmentsForLogins","routes","tokenStore"})
    private LoginResponse(
        @Nullable List<String> allowedExternalRedirectUrls,
        @Nullable CookieExpirationResponse cookieExpiration,
        @Nullable NonceResponse nonce,
        @Nullable Boolean preserveUrlFragmentsForLogins,
        @Nullable LoginRoutesResponse routes,
        @Nullable TokenStoreResponse tokenStore) {
        this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
        this.cookieExpiration = cookieExpiration;
        this.nonce = nonce;
        this.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
        this.routes = routes;
        this.tokenStore = tokenStore;
    }

    /**
     * External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     * 
     */
    public List<String> getAllowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls == null ? List.of() : this.allowedExternalRedirectUrls;
    }
    /**
     * The configuration settings of the session cookie's expiration.
     * 
     */
    public Optional<CookieExpirationResponse> getCookieExpiration() {
        return Optional.ofNullable(this.cookieExpiration);
    }
    /**
     * The configuration settings of the nonce used in the login flow.
     * 
     */
    public Optional<NonceResponse> getNonce() {
        return Optional.ofNullable(this.nonce);
    }
    /**
     * <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
     * 
     */
    public Optional<Boolean> getPreserveUrlFragmentsForLogins() {
        return Optional.ofNullable(this.preserveUrlFragmentsForLogins);
    }
    /**
     * The routes that specify the endpoints used for login and logout requests.
     * 
     */
    public Optional<LoginRoutesResponse> getRoutes() {
        return Optional.ofNullable(this.routes);
    }
    /**
     * The configuration settings of the token store.
     * 
     */
    public Optional<TokenStoreResponse> getTokenStore() {
        return Optional.ofNullable(this.tokenStore);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoginResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> allowedExternalRedirectUrls;
        private @Nullable CookieExpirationResponse cookieExpiration;
        private @Nullable NonceResponse nonce;
        private @Nullable Boolean preserveUrlFragmentsForLogins;
        private @Nullable LoginRoutesResponse routes;
        private @Nullable TokenStoreResponse tokenStore;

        public Builder() {
    	      // Empty
        }

        public Builder(LoginResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedExternalRedirectUrls = defaults.allowedExternalRedirectUrls;
    	      this.cookieExpiration = defaults.cookieExpiration;
    	      this.nonce = defaults.nonce;
    	      this.preserveUrlFragmentsForLogins = defaults.preserveUrlFragmentsForLogins;
    	      this.routes = defaults.routes;
    	      this.tokenStore = defaults.tokenStore;
        }

        public Builder setAllowedExternalRedirectUrls(@Nullable List<String> allowedExternalRedirectUrls) {
            this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }

        public Builder setCookieExpiration(@Nullable CookieExpirationResponse cookieExpiration) {
            this.cookieExpiration = cookieExpiration;
            return this;
        }

        public Builder setNonce(@Nullable NonceResponse nonce) {
            this.nonce = nonce;
            return this;
        }

        public Builder setPreserveUrlFragmentsForLogins(@Nullable Boolean preserveUrlFragmentsForLogins) {
            this.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
            return this;
        }

        public Builder setRoutes(@Nullable LoginRoutesResponse routes) {
            this.routes = routes;
            return this;
        }

        public Builder setTokenStore(@Nullable TokenStoreResponse tokenStore) {
            this.tokenStore = tokenStore;
            return this;
        }

        public LoginResponse build() {
            return new LoginResponse(allowedExternalRedirectUrls, cookieExpiration, nonce, preserveUrlFragmentsForLogins, routes, tokenStore);
        }
    }
}
