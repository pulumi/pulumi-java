// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerinstance.inputs;

import io.pulumi.azurenative.containerinstance.enums.Scheme;
import io.pulumi.azurenative.containerinstance.inputs.HttpHeadersArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The container Http Get settings, for liveness or readiness probe
 * 
 */
public final class ContainerHttpGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContainerHttpGetArgs Empty = new ContainerHttpGetArgs();

    /**
     * The HTTP headers.
     * 
     */
    @InputImport(name="httpHeaders")
    private final @Nullable Input<HttpHeadersArgs> httpHeaders;

    public Input<HttpHeadersArgs> getHttpHeaders() {
        return this.httpHeaders == null ? Input.empty() : this.httpHeaders;
    }

    /**
     * The path to probe.
     * 
     */
    @InputImport(name="path")
    private final @Nullable Input<String> path;

    public Input<String> getPath() {
        return this.path == null ? Input.empty() : this.path;
    }

    /**
     * The port number to probe.
     * 
     */
    @InputImport(name="port", required=true)
    private final Input<Integer> port;

    public Input<Integer> getPort() {
        return this.port;
    }

    /**
     * The scheme.
     * 
     */
    @InputImport(name="scheme")
    private final @Nullable Input<Either<String,Scheme>> scheme;

    public Input<Either<String,Scheme>> getScheme() {
        return this.scheme == null ? Input.empty() : this.scheme;
    }

    public ContainerHttpGetArgs(
        @Nullable Input<HttpHeadersArgs> httpHeaders,
        @Nullable Input<String> path,
        Input<Integer> port,
        @Nullable Input<Either<String,Scheme>> scheme) {
        this.httpHeaders = httpHeaders;
        this.path = path;
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.scheme = scheme;
    }

    private ContainerHttpGetArgs() {
        this.httpHeaders = Input.empty();
        this.path = Input.empty();
        this.port = Input.empty();
        this.scheme = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerHttpGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<HttpHeadersArgs> httpHeaders;
        private @Nullable Input<String> path;
        private Input<Integer> port;
        private @Nullable Input<Either<String,Scheme>> scheme;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerHttpGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.scheme = defaults.scheme;
        }

        public Builder setHttpHeaders(@Nullable Input<HttpHeadersArgs> httpHeaders) {
            this.httpHeaders = httpHeaders;
            return this;
        }

        public Builder setHttpHeaders(@Nullable HttpHeadersArgs httpHeaders) {
            this.httpHeaders = Input.ofNullable(httpHeaders);
            return this;
        }

        public Builder setPath(@Nullable Input<String> path) {
            this.path = path;
            return this;
        }

        public Builder setPath(@Nullable String path) {
            this.path = Input.ofNullable(path);
            return this;
        }

        public Builder setPort(Input<Integer> port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder setPort(Integer port) {
            this.port = Input.of(Objects.requireNonNull(port));
            return this;
        }

        public Builder setScheme(@Nullable Input<Either<String,Scheme>> scheme) {
            this.scheme = scheme;
            return this;
        }

        public Builder setScheme(@Nullable Either<String,Scheme> scheme) {
            this.scheme = Input.ofNullable(scheme);
            return this;
        }

        public ContainerHttpGetArgs build() {
            return new ContainerHttpGetArgs(httpHeaders, path, port, scheme);
        }
    }
}
