// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.vmwarecloudsimple;

import io.pulumi.azurenative.vmwarecloudsimple.inputs.SkuArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DedicatedCloudNodeArgs extends io.pulumi.resources.ResourceArgs {

    public static final DedicatedCloudNodeArgs Empty = new DedicatedCloudNodeArgs();

    /**
     * Availability Zone id, e.g. "az1"
     * 
     */
    @Import(name="availabilityZoneId", required=true)
      private final Output<String> availabilityZoneId;

    public Output<String> availabilityZoneId() {
        return this.availabilityZoneId;
    }

    /**
     * dedicated cloud node name
     * 
     */
    @Import(name="dedicatedCloudNodeName")
      private final @Nullable Output<String> dedicatedCloudNodeName;

    public Output<String> dedicatedCloudNodeName() {
        return this.dedicatedCloudNodeName == null ? Codegen.empty() : this.dedicatedCloudNodeName;
    }

    /**
     * SKU's id
     * 
     */
    @Import(name="id", required=true)
      private final Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    /**
     * Azure region
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * SKU's name
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * count of nodes to create
     * 
     */
    @Import(name="nodesCount", required=true)
      private final Output<Integer> nodesCount;

    public Output<Integer> nodesCount() {
        return this.nodesCount;
    }

    /**
     * Placement Group id, e.g. "n1"
     * 
     */
    @Import(name="placementGroupId", required=true)
      private final Output<String> placementGroupId;

    public Output<String> placementGroupId() {
        return this.placementGroupId;
    }

    /**
     * purchase id
     * 
     */
    @Import(name="purchaseId", required=true)
      private final Output<String> purchaseId;

    public Output<String> purchaseId() {
        return this.purchaseId;
    }

    /**
     * The name of the resource group
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Dedicated Cloud Nodes SKU
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<SkuArgs> sku;

    public Output<SkuArgs> sku() {
        return this.sku == null ? Codegen.empty() : this.sku;
    }

    /**
     * Dedicated Cloud Nodes tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public DedicatedCloudNodeArgs(
        Output<String> availabilityZoneId,
        @Nullable Output<String> dedicatedCloudNodeName,
        Output<String> id,
        @Nullable Output<String> location,
        Output<String> name,
        Output<Integer> nodesCount,
        Output<String> placementGroupId,
        Output<String> purchaseId,
        Output<String> resourceGroupName,
        @Nullable Output<SkuArgs> sku,
        @Nullable Output<Map<String,String>> tags) {
        this.availabilityZoneId = Objects.requireNonNull(availabilityZoneId, "expected parameter 'availabilityZoneId' to be non-null");
        this.dedicatedCloudNodeName = dedicatedCloudNodeName;
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.location = location;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.nodesCount = Objects.requireNonNull(nodesCount, "expected parameter 'nodesCount' to be non-null");
        this.placementGroupId = Objects.requireNonNull(placementGroupId, "expected parameter 'placementGroupId' to be non-null");
        this.purchaseId = Objects.requireNonNull(purchaseId, "expected parameter 'purchaseId' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.tags = tags;
    }

    private DedicatedCloudNodeArgs() {
        this.availabilityZoneId = Codegen.empty();
        this.dedicatedCloudNodeName = Codegen.empty();
        this.id = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.nodesCount = Codegen.empty();
        this.placementGroupId = Codegen.empty();
        this.purchaseId = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sku = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DedicatedCloudNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> availabilityZoneId;
        private @Nullable Output<String> dedicatedCloudNodeName;
        private Output<String> id;
        private @Nullable Output<String> location;
        private Output<String> name;
        private Output<Integer> nodesCount;
        private Output<String> placementGroupId;
        private Output<String> purchaseId;
        private Output<String> resourceGroupName;
        private @Nullable Output<SkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DedicatedCloudNodeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZoneId = defaults.availabilityZoneId;
    	      this.dedicatedCloudNodeName = defaults.dedicatedCloudNodeName;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.nodesCount = defaults.nodesCount;
    	      this.placementGroupId = defaults.placementGroupId;
    	      this.purchaseId = defaults.purchaseId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder availabilityZoneId(Output<String> availabilityZoneId) {
            this.availabilityZoneId = Objects.requireNonNull(availabilityZoneId);
            return this;
        }
        public Builder availabilityZoneId(String availabilityZoneId) {
            this.availabilityZoneId = Output.of(Objects.requireNonNull(availabilityZoneId));
            return this;
        }
        public Builder dedicatedCloudNodeName(@Nullable Output<String> dedicatedCloudNodeName) {
            this.dedicatedCloudNodeName = dedicatedCloudNodeName;
            return this;
        }
        public Builder dedicatedCloudNodeName(@Nullable String dedicatedCloudNodeName) {
            this.dedicatedCloudNodeName = Codegen.ofNullable(dedicatedCloudNodeName);
            return this;
        }
        public Builder id(Output<String> id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder id(String id) {
            this.id = Output.of(Objects.requireNonNull(id));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder nodesCount(Output<Integer> nodesCount) {
            this.nodesCount = Objects.requireNonNull(nodesCount);
            return this;
        }
        public Builder nodesCount(Integer nodesCount) {
            this.nodesCount = Output.of(Objects.requireNonNull(nodesCount));
            return this;
        }
        public Builder placementGroupId(Output<String> placementGroupId) {
            this.placementGroupId = Objects.requireNonNull(placementGroupId);
            return this;
        }
        public Builder placementGroupId(String placementGroupId) {
            this.placementGroupId = Output.of(Objects.requireNonNull(placementGroupId));
            return this;
        }
        public Builder purchaseId(Output<String> purchaseId) {
            this.purchaseId = Objects.requireNonNull(purchaseId);
            return this;
        }
        public Builder purchaseId(String purchaseId) {
            this.purchaseId = Output.of(Objects.requireNonNull(purchaseId));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sku(@Nullable Output<SkuArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable SkuArgs sku) {
            this.sku = Codegen.ofNullable(sku);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public DedicatedCloudNodeArgs build() {
            return new DedicatedCloudNodeArgs(availabilityZoneId, dedicatedCloudNodeName, id, location, name, nodesCount, placementGroupId, purchaseId, resourceGroupName, sku, tags);
        }
    }
}
