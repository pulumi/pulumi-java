// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.timeseriesinsights;

import io.pulumi.azurenative.timeseriesinsights.enums.DataStringComparisonBehavior;
import io.pulumi.azurenative.timeseriesinsights.inputs.ReferenceDataSetKeyPropertyArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReferenceDataSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReferenceDataSetArgs Empty = new ReferenceDataSetArgs();

    /**
     * The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used.
     * 
     */
    @InputImport(name="dataStringComparisonBehavior")
      private final @Nullable Output<Either<String,DataStringComparisonBehavior>> dataStringComparisonBehavior;

    public Output<Either<String,DataStringComparisonBehavior>> getDataStringComparisonBehavior() {
        return this.dataStringComparisonBehavior == null ? Output.empty() : this.dataStringComparisonBehavior;
    }

    /**
     * The name of the Time Series Insights environment associated with the specified resource group.
     * 
     */
    @InputImport(name="environmentName", required=true)
      private final Output<String> environmentName;

    public Output<String> getEnvironmentName() {
        return this.environmentName;
    }

    /**
     * The list of key properties for the reference data set.
     * 
     */
    @InputImport(name="keyProperties", required=true)
      private final Output<List<ReferenceDataSetKeyPropertyArgs>> keyProperties;

    public Output<List<ReferenceDataSetKeyPropertyArgs>> getKeyProperties() {
        return this.keyProperties;
    }

    /**
     * The location of the resource.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Name of the reference data set.
     * 
     */
    @InputImport(name="referenceDataSetName")
      private final @Nullable Output<String> referenceDataSetName;

    public Output<String> getReferenceDataSetName() {
        return this.referenceDataSetName == null ? Output.empty() : this.referenceDataSetName;
    }

    /**
     * Name of an Azure Resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Key-value pairs of additional properties for the resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public ReferenceDataSetArgs(
        @Nullable Output<Either<String,DataStringComparisonBehavior>> dataStringComparisonBehavior,
        Output<String> environmentName,
        Output<List<ReferenceDataSetKeyPropertyArgs>> keyProperties,
        @Nullable Output<String> location,
        @Nullable Output<String> referenceDataSetName,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags) {
        this.dataStringComparisonBehavior = dataStringComparisonBehavior;
        this.environmentName = Objects.requireNonNull(environmentName, "expected parameter 'environmentName' to be non-null");
        this.keyProperties = Objects.requireNonNull(keyProperties, "expected parameter 'keyProperties' to be non-null");
        this.location = location;
        this.referenceDataSetName = referenceDataSetName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private ReferenceDataSetArgs() {
        this.dataStringComparisonBehavior = Output.empty();
        this.environmentName = Output.empty();
        this.keyProperties = Output.empty();
        this.location = Output.empty();
        this.referenceDataSetName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReferenceDataSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,DataStringComparisonBehavior>> dataStringComparisonBehavior;
        private Output<String> environmentName;
        private Output<List<ReferenceDataSetKeyPropertyArgs>> keyProperties;
        private @Nullable Output<String> location;
        private @Nullable Output<String> referenceDataSetName;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ReferenceDataSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataStringComparisonBehavior = defaults.dataStringComparisonBehavior;
    	      this.environmentName = defaults.environmentName;
    	      this.keyProperties = defaults.keyProperties;
    	      this.location = defaults.location;
    	      this.referenceDataSetName = defaults.referenceDataSetName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder dataStringComparisonBehavior(@Nullable Output<Either<String,DataStringComparisonBehavior>> dataStringComparisonBehavior) {
            this.dataStringComparisonBehavior = dataStringComparisonBehavior;
            return this;
        }

        public Builder dataStringComparisonBehavior(@Nullable Either<String,DataStringComparisonBehavior> dataStringComparisonBehavior) {
            this.dataStringComparisonBehavior = Output.ofNullable(dataStringComparisonBehavior);
            return this;
        }

        public Builder environmentName(Output<String> environmentName) {
            this.environmentName = Objects.requireNonNull(environmentName);
            return this;
        }

        public Builder environmentName(String environmentName) {
            this.environmentName = Output.of(Objects.requireNonNull(environmentName));
            return this;
        }

        public Builder keyProperties(Output<List<ReferenceDataSetKeyPropertyArgs>> keyProperties) {
            this.keyProperties = Objects.requireNonNull(keyProperties);
            return this;
        }

        public Builder keyProperties(List<ReferenceDataSetKeyPropertyArgs> keyProperties) {
            this.keyProperties = Output.of(Objects.requireNonNull(keyProperties));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder referenceDataSetName(@Nullable Output<String> referenceDataSetName) {
            this.referenceDataSetName = referenceDataSetName;
            return this;
        }

        public Builder referenceDataSetName(@Nullable String referenceDataSetName) {
            this.referenceDataSetName = Output.ofNullable(referenceDataSetName);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public ReferenceDataSetArgs build() {
            return new ReferenceDataSetArgs(dataStringComparisonBehavior, environmentName, keyProperties, location, referenceDataSetName, resourceGroupName, tags);
        }
    }
}
