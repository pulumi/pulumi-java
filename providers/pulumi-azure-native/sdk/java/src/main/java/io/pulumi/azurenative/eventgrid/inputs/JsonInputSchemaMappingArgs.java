// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.eventgrid.inputs;

import io.pulumi.azurenative.eventgrid.inputs.JsonFieldArgs;
import io.pulumi.azurenative.eventgrid.inputs.JsonFieldWithDefaultArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
 * 
 */
public final class JsonInputSchemaMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final JsonInputSchemaMappingArgs Empty = new JsonInputSchemaMappingArgs();

    /**
     * The mapping information for the DataVersion property of the Event Grid Event.
     * 
     */
    @InputImport(name="dataVersion")
        private final @Nullable Input<JsonFieldWithDefaultArgs> dataVersion;

    public Input<JsonFieldWithDefaultArgs> getDataVersion() {
        return this.dataVersion == null ? Input.empty() : this.dataVersion;
    }

    /**
     * The mapping information for the EventTime property of the Event Grid Event.
     * 
     */
    @InputImport(name="eventTime")
        private final @Nullable Input<JsonFieldArgs> eventTime;

    public Input<JsonFieldArgs> getEventTime() {
        return this.eventTime == null ? Input.empty() : this.eventTime;
    }

    /**
     * The mapping information for the EventType property of the Event Grid Event.
     * 
     */
    @InputImport(name="eventType")
        private final @Nullable Input<JsonFieldWithDefaultArgs> eventType;

    public Input<JsonFieldWithDefaultArgs> getEventType() {
        return this.eventType == null ? Input.empty() : this.eventType;
    }

    /**
     * The mapping information for the Id property of the Event Grid Event.
     * 
     */
    @InputImport(name="id")
        private final @Nullable Input<JsonFieldArgs> id;

    public Input<JsonFieldArgs> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * Type of the custom mapping
     * Expected value is 'Json'.
     * 
     */
    @InputImport(name="inputSchemaMappingType", required=true)
        private final Input<String> inputSchemaMappingType;

    public Input<String> getInputSchemaMappingType() {
        return this.inputSchemaMappingType;
    }

    /**
     * The mapping information for the Subject property of the Event Grid Event.
     * 
     */
    @InputImport(name="subject")
        private final @Nullable Input<JsonFieldWithDefaultArgs> subject;

    public Input<JsonFieldWithDefaultArgs> getSubject() {
        return this.subject == null ? Input.empty() : this.subject;
    }

    /**
     * The mapping information for the Topic property of the Event Grid Event.
     * 
     */
    @InputImport(name="topic")
        private final @Nullable Input<JsonFieldArgs> topic;

    public Input<JsonFieldArgs> getTopic() {
        return this.topic == null ? Input.empty() : this.topic;
    }

    public JsonInputSchemaMappingArgs(
        @Nullable Input<JsonFieldWithDefaultArgs> dataVersion,
        @Nullable Input<JsonFieldArgs> eventTime,
        @Nullable Input<JsonFieldWithDefaultArgs> eventType,
        @Nullable Input<JsonFieldArgs> id,
        Input<String> inputSchemaMappingType,
        @Nullable Input<JsonFieldWithDefaultArgs> subject,
        @Nullable Input<JsonFieldArgs> topic) {
        this.dataVersion = dataVersion;
        this.eventTime = eventTime;
        this.eventType = eventType;
        this.id = id;
        this.inputSchemaMappingType = Objects.requireNonNull(inputSchemaMappingType, "expected parameter 'inputSchemaMappingType' to be non-null");
        this.subject = subject;
        this.topic = topic;
    }

    private JsonInputSchemaMappingArgs() {
        this.dataVersion = Input.empty();
        this.eventTime = Input.empty();
        this.eventType = Input.empty();
        this.id = Input.empty();
        this.inputSchemaMappingType = Input.empty();
        this.subject = Input.empty();
        this.topic = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JsonInputSchemaMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<JsonFieldWithDefaultArgs> dataVersion;
        private @Nullable Input<JsonFieldArgs> eventTime;
        private @Nullable Input<JsonFieldWithDefaultArgs> eventType;
        private @Nullable Input<JsonFieldArgs> id;
        private Input<String> inputSchemaMappingType;
        private @Nullable Input<JsonFieldWithDefaultArgs> subject;
        private @Nullable Input<JsonFieldArgs> topic;

        public Builder() {
    	      // Empty
        }

        public Builder(JsonInputSchemaMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataVersion = defaults.dataVersion;
    	      this.eventTime = defaults.eventTime;
    	      this.eventType = defaults.eventType;
    	      this.id = defaults.id;
    	      this.inputSchemaMappingType = defaults.inputSchemaMappingType;
    	      this.subject = defaults.subject;
    	      this.topic = defaults.topic;
        }

        public Builder setDataVersion(@Nullable Input<JsonFieldWithDefaultArgs> dataVersion) {
            this.dataVersion = dataVersion;
            return this;
        }

        public Builder setDataVersion(@Nullable JsonFieldWithDefaultArgs dataVersion) {
            this.dataVersion = Input.ofNullable(dataVersion);
            return this;
        }

        public Builder setEventTime(@Nullable Input<JsonFieldArgs> eventTime) {
            this.eventTime = eventTime;
            return this;
        }

        public Builder setEventTime(@Nullable JsonFieldArgs eventTime) {
            this.eventTime = Input.ofNullable(eventTime);
            return this;
        }

        public Builder setEventType(@Nullable Input<JsonFieldWithDefaultArgs> eventType) {
            this.eventType = eventType;
            return this;
        }

        public Builder setEventType(@Nullable JsonFieldWithDefaultArgs eventType) {
            this.eventType = Input.ofNullable(eventType);
            return this;
        }

        public Builder setId(@Nullable Input<JsonFieldArgs> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable JsonFieldArgs id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setInputSchemaMappingType(Input<String> inputSchemaMappingType) {
            this.inputSchemaMappingType = Objects.requireNonNull(inputSchemaMappingType);
            return this;
        }

        public Builder setInputSchemaMappingType(String inputSchemaMappingType) {
            this.inputSchemaMappingType = Input.of(Objects.requireNonNull(inputSchemaMappingType));
            return this;
        }

        public Builder setSubject(@Nullable Input<JsonFieldWithDefaultArgs> subject) {
            this.subject = subject;
            return this;
        }

        public Builder setSubject(@Nullable JsonFieldWithDefaultArgs subject) {
            this.subject = Input.ofNullable(subject);
            return this;
        }

        public Builder setTopic(@Nullable Input<JsonFieldArgs> topic) {
            this.topic = topic;
            return this;
        }

        public Builder setTopic(@Nullable JsonFieldArgs topic) {
            this.topic = Input.ofNullable(topic);
            return this;
        }
        public JsonInputSchemaMappingArgs build() {
            return new JsonInputSchemaMappingArgs(dataVersion, eventTime, eventType, id, inputSchemaMappingType, subject, topic);
        }
    }
}
