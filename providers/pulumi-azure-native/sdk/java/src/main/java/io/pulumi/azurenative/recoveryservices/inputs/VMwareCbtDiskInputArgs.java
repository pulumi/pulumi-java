// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.inputs;

import io.pulumi.azurenative.recoveryservices.enums.DiskAccountType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VMwareCbtDiskInputArgs extends io.pulumi.resources.ResourceArgs {

    public static final VMwareCbtDiskInputArgs Empty = new VMwareCbtDiskInputArgs();

    @InputImport(name="diskId", required=true)
    private final Input<String> diskId;

    public Input<String> getDiskId() {
        return this.diskId;
    }

    @InputImport(name="diskType")
    private final @Nullable Input<Either<String,DiskAccountType>> diskType;

    public Input<Either<String,DiskAccountType>> getDiskType() {
        return this.diskType == null ? Input.empty() : this.diskType;
    }

    @InputImport(name="isOSDisk", required=true)
    private final Input<String> isOSDisk;

    public Input<String> getIsOSDisk() {
        return this.isOSDisk;
    }

    @InputImport(name="logStorageAccountId", required=true)
    private final Input<String> logStorageAccountId;

    public Input<String> getLogStorageAccountId() {
        return this.logStorageAccountId;
    }

    @InputImport(name="logStorageAccountSasSecretName", required=true)
    private final Input<String> logStorageAccountSasSecretName;

    public Input<String> getLogStorageAccountSasSecretName() {
        return this.logStorageAccountSasSecretName;
    }

    public VMwareCbtDiskInputArgs(
        Input<String> diskId,
        @Nullable Input<Either<String,DiskAccountType>> diskType,
        Input<String> isOSDisk,
        Input<String> logStorageAccountId,
        Input<String> logStorageAccountSasSecretName) {
        this.diskId = Objects.requireNonNull(diskId, "expected parameter 'diskId' to be non-null");
        this.diskType = diskType;
        this.isOSDisk = Objects.requireNonNull(isOSDisk, "expected parameter 'isOSDisk' to be non-null");
        this.logStorageAccountId = Objects.requireNonNull(logStorageAccountId, "expected parameter 'logStorageAccountId' to be non-null");
        this.logStorageAccountSasSecretName = Objects.requireNonNull(logStorageAccountSasSecretName, "expected parameter 'logStorageAccountSasSecretName' to be non-null");
    }

    private VMwareCbtDiskInputArgs() {
        this.diskId = Input.empty();
        this.diskType = Input.empty();
        this.isOSDisk = Input.empty();
        this.logStorageAccountId = Input.empty();
        this.logStorageAccountSasSecretName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VMwareCbtDiskInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> diskId;
        private @Nullable Input<Either<String,DiskAccountType>> diskType;
        private Input<String> isOSDisk;
        private Input<String> logStorageAccountId;
        private Input<String> logStorageAccountSasSecretName;

        public Builder() {
    	      // Empty
        }

        public Builder(VMwareCbtDiskInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskId = defaults.diskId;
    	      this.diskType = defaults.diskType;
    	      this.isOSDisk = defaults.isOSDisk;
    	      this.logStorageAccountId = defaults.logStorageAccountId;
    	      this.logStorageAccountSasSecretName = defaults.logStorageAccountSasSecretName;
        }

        public Builder setDiskId(Input<String> diskId) {
            this.diskId = Objects.requireNonNull(diskId);
            return this;
        }

        public Builder setDiskId(String diskId) {
            this.diskId = Input.of(Objects.requireNonNull(diskId));
            return this;
        }

        public Builder setDiskType(@Nullable Input<Either<String,DiskAccountType>> diskType) {
            this.diskType = diskType;
            return this;
        }

        public Builder setDiskType(@Nullable Either<String,DiskAccountType> diskType) {
            this.diskType = Input.ofNullable(diskType);
            return this;
        }

        public Builder setIsOSDisk(Input<String> isOSDisk) {
            this.isOSDisk = Objects.requireNonNull(isOSDisk);
            return this;
        }

        public Builder setIsOSDisk(String isOSDisk) {
            this.isOSDisk = Input.of(Objects.requireNonNull(isOSDisk));
            return this;
        }

        public Builder setLogStorageAccountId(Input<String> logStorageAccountId) {
            this.logStorageAccountId = Objects.requireNonNull(logStorageAccountId);
            return this;
        }

        public Builder setLogStorageAccountId(String logStorageAccountId) {
            this.logStorageAccountId = Input.of(Objects.requireNonNull(logStorageAccountId));
            return this;
        }

        public Builder setLogStorageAccountSasSecretName(Input<String> logStorageAccountSasSecretName) {
            this.logStorageAccountSasSecretName = Objects.requireNonNull(logStorageAccountSasSecretName);
            return this;
        }

        public Builder setLogStorageAccountSasSecretName(String logStorageAccountSasSecretName) {
            this.logStorageAccountSasSecretName = Input.of(Objects.requireNonNull(logStorageAccountSasSecretName));
            return this;
        }

        public VMwareCbtDiskInputArgs build() {
            return new VMwareCbtDiskInputArgs(diskId, diskType, isOSDisk, logStorageAccountId, logStorageAccountSasSecretName);
        }
    }
}
