// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.inputs;

import io.pulumi.azurenative.recoveryservices.enums.DiskAccountType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * VMwareCbt disk input.
 * 
 */
public final class VMwareCbtDiskInputArgs extends io.pulumi.resources.ResourceArgs {

    public static final VMwareCbtDiskInputArgs Empty = new VMwareCbtDiskInputArgs();

    /**
     * The disk Id.
     * 
     */
    @Import(name="diskId", required=true)
      private final Output<String> diskId;

    public Output<String> getDiskId() {
        return this.diskId;
    }

    /**
     * The disk type.
     * 
     */
    @Import(name="diskType")
      private final @Nullable Output<Either<String,DiskAccountType>> diskType;

    public Output<Either<String,DiskAccountType>> getDiskType() {
        return this.diskType == null ? Codegen.empty() : this.diskType;
    }

    /**
     * A value indicating whether the disk is the OS disk.
     * 
     */
    @Import(name="isOSDisk", required=true)
      private final Output<String> isOSDisk;

    public Output<String> getIsOSDisk() {
        return this.isOSDisk;
    }

    /**
     * The log storage account ARM Id.
     * 
     */
    @Import(name="logStorageAccountId", required=true)
      private final Output<String> logStorageAccountId;

    public Output<String> getLogStorageAccountId() {
        return this.logStorageAccountId;
    }

    /**
     * The key vault secret name of the log storage account.
     * 
     */
    @Import(name="logStorageAccountSasSecretName", required=true)
      private final Output<String> logStorageAccountSasSecretName;

    public Output<String> getLogStorageAccountSasSecretName() {
        return this.logStorageAccountSasSecretName;
    }

    public VMwareCbtDiskInputArgs(
        Output<String> diskId,
        @Nullable Output<Either<String,DiskAccountType>> diskType,
        Output<String> isOSDisk,
        Output<String> logStorageAccountId,
        Output<String> logStorageAccountSasSecretName) {
        this.diskId = Objects.requireNonNull(diskId, "expected parameter 'diskId' to be non-null");
        this.diskType = diskType;
        this.isOSDisk = Objects.requireNonNull(isOSDisk, "expected parameter 'isOSDisk' to be non-null");
        this.logStorageAccountId = Objects.requireNonNull(logStorageAccountId, "expected parameter 'logStorageAccountId' to be non-null");
        this.logStorageAccountSasSecretName = Objects.requireNonNull(logStorageAccountSasSecretName, "expected parameter 'logStorageAccountSasSecretName' to be non-null");
    }

    private VMwareCbtDiskInputArgs() {
        this.diskId = Codegen.empty();
        this.diskType = Codegen.empty();
        this.isOSDisk = Codegen.empty();
        this.logStorageAccountId = Codegen.empty();
        this.logStorageAccountSasSecretName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VMwareCbtDiskInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> diskId;
        private @Nullable Output<Either<String,DiskAccountType>> diskType;
        private Output<String> isOSDisk;
        private Output<String> logStorageAccountId;
        private Output<String> logStorageAccountSasSecretName;

        public Builder() {
    	      // Empty
        }

        public Builder(VMwareCbtDiskInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskId = defaults.diskId;
    	      this.diskType = defaults.diskType;
    	      this.isOSDisk = defaults.isOSDisk;
    	      this.logStorageAccountId = defaults.logStorageAccountId;
    	      this.logStorageAccountSasSecretName = defaults.logStorageAccountSasSecretName;
        }

        public Builder diskId(Output<String> diskId) {
            this.diskId = Objects.requireNonNull(diskId);
            return this;
        }
        public Builder diskId(String diskId) {
            this.diskId = Output.of(Objects.requireNonNull(diskId));
            return this;
        }
        public Builder diskType(@Nullable Output<Either<String,DiskAccountType>> diskType) {
            this.diskType = diskType;
            return this;
        }
        public Builder diskType(@Nullable Either<String,DiskAccountType> diskType) {
            this.diskType = Codegen.ofNullable(diskType);
            return this;
        }
        public Builder isOSDisk(Output<String> isOSDisk) {
            this.isOSDisk = Objects.requireNonNull(isOSDisk);
            return this;
        }
        public Builder isOSDisk(String isOSDisk) {
            this.isOSDisk = Output.of(Objects.requireNonNull(isOSDisk));
            return this;
        }
        public Builder logStorageAccountId(Output<String> logStorageAccountId) {
            this.logStorageAccountId = Objects.requireNonNull(logStorageAccountId);
            return this;
        }
        public Builder logStorageAccountId(String logStorageAccountId) {
            this.logStorageAccountId = Output.of(Objects.requireNonNull(logStorageAccountId));
            return this;
        }
        public Builder logStorageAccountSasSecretName(Output<String> logStorageAccountSasSecretName) {
            this.logStorageAccountSasSecretName = Objects.requireNonNull(logStorageAccountSasSecretName);
            return this;
        }
        public Builder logStorageAccountSasSecretName(String logStorageAccountSasSecretName) {
            this.logStorageAccountSasSecretName = Output.of(Objects.requireNonNull(logStorageAccountSasSecretName));
            return this;
        }        public VMwareCbtDiskInputArgs build() {
            return new VMwareCbtDiskInputArgs(diskId, diskType, isOSDisk, logStorageAccountId, logStorageAccountSasSecretName);
        }
    }
}
