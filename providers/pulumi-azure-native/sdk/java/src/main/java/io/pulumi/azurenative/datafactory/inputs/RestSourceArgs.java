// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A copy activity Rest service source.
 * 
 */
public final class RestSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final RestSourceArgs Empty = new RestSourceArgs();

    /**
     * Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
     * 
     */
    @InputImport(name="additionalColumns")
      private final @Nullable Output<Object> additionalColumns;

    public Output<Object> getAdditionalColumns() {
        return this.additionalColumns == null ? Output.empty() : this.additionalColumns;
    }

    /**
     * The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="additionalHeaders")
      private final @Nullable Output<Object> additionalHeaders;

    public Output<Object> getAdditionalHeaders() {
        return this.additionalHeaders == null ? Output.empty() : this.additionalHeaders;
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @InputImport(name="disableMetricsCollection")
      private final @Nullable Output<Object> disableMetricsCollection;

    public Output<Object> getDisableMetricsCollection() {
        return this.disableMetricsCollection == null ? Output.empty() : this.disableMetricsCollection;
    }

    /**
     * The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @InputImport(name="httpRequestTimeout")
      private final @Nullable Output<Object> httpRequestTimeout;

    public Output<Object> getHttpRequestTimeout() {
        return this.httpRequestTimeout == null ? Output.empty() : this.httpRequestTimeout;
    }

    /**
     * The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @InputImport(name="maxConcurrentConnections")
      private final @Nullable Output<Object> maxConcurrentConnections;

    public Output<Object> getMaxConcurrentConnections() {
        return this.maxConcurrentConnections == null ? Output.empty() : this.maxConcurrentConnections;
    }

    /**
     * The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="paginationRules")
      private final @Nullable Output<Object> paginationRules;

    public Output<Object> getPaginationRules() {
        return this.paginationRules == null ? Output.empty() : this.paginationRules;
    }

    /**
     * The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="requestBody")
      private final @Nullable Output<Object> requestBody;

    public Output<Object> getRequestBody() {
        return this.requestBody == null ? Output.empty() : this.requestBody;
    }

    /**
     * The time to await before sending next page request.
     * 
     */
    @InputImport(name="requestInterval")
      private final @Nullable Output<Object> requestInterval;

    public Output<Object> getRequestInterval() {
        return this.requestInterval == null ? Output.empty() : this.requestInterval;
    }

    /**
     * The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="requestMethod")
      private final @Nullable Output<Object> requestMethod;

    public Output<Object> getRequestMethod() {
        return this.requestMethod == null ? Output.empty() : this.requestMethod;
    }

    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     * 
     */
    @InputImport(name="sourceRetryCount")
      private final @Nullable Output<Object> sourceRetryCount;

    public Output<Object> getSourceRetryCount() {
        return this.sourceRetryCount == null ? Output.empty() : this.sourceRetryCount;
    }

    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @InputImport(name="sourceRetryWait")
      private final @Nullable Output<Object> sourceRetryWait;

    public Output<Object> getSourceRetryWait() {
        return this.sourceRetryWait == null ? Output.empty() : this.sourceRetryWait;
    }

    /**
     * Copy source type.
     * Expected value is 'RestSource'.
     * 
     */
    @InputImport(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public RestSourceArgs(
        @Nullable Output<Object> additionalColumns,
        @Nullable Output<Object> additionalHeaders,
        @Nullable Output<Object> disableMetricsCollection,
        @Nullable Output<Object> httpRequestTimeout,
        @Nullable Output<Object> maxConcurrentConnections,
        @Nullable Output<Object> paginationRules,
        @Nullable Output<Object> requestBody,
        @Nullable Output<Object> requestInterval,
        @Nullable Output<Object> requestMethod,
        @Nullable Output<Object> sourceRetryCount,
        @Nullable Output<Object> sourceRetryWait,
        Output<String> type) {
        this.additionalColumns = additionalColumns;
        this.additionalHeaders = additionalHeaders;
        this.disableMetricsCollection = disableMetricsCollection;
        this.httpRequestTimeout = httpRequestTimeout;
        this.maxConcurrentConnections = maxConcurrentConnections;
        this.paginationRules = paginationRules;
        this.requestBody = requestBody;
        this.requestInterval = requestInterval;
        this.requestMethod = requestMethod;
        this.sourceRetryCount = sourceRetryCount;
        this.sourceRetryWait = sourceRetryWait;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private RestSourceArgs() {
        this.additionalColumns = Output.empty();
        this.additionalHeaders = Output.empty();
        this.disableMetricsCollection = Output.empty();
        this.httpRequestTimeout = Output.empty();
        this.maxConcurrentConnections = Output.empty();
        this.paginationRules = Output.empty();
        this.requestBody = Output.empty();
        this.requestInterval = Output.empty();
        this.requestMethod = Output.empty();
        this.sourceRetryCount = Output.empty();
        this.sourceRetryWait = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RestSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Object> additionalColumns;
        private @Nullable Output<Object> additionalHeaders;
        private @Nullable Output<Object> disableMetricsCollection;
        private @Nullable Output<Object> httpRequestTimeout;
        private @Nullable Output<Object> maxConcurrentConnections;
        private @Nullable Output<Object> paginationRules;
        private @Nullable Output<Object> requestBody;
        private @Nullable Output<Object> requestInterval;
        private @Nullable Output<Object> requestMethod;
        private @Nullable Output<Object> sourceRetryCount;
        private @Nullable Output<Object> sourceRetryWait;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(RestSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalColumns = defaults.additionalColumns;
    	      this.additionalHeaders = defaults.additionalHeaders;
    	      this.disableMetricsCollection = defaults.disableMetricsCollection;
    	      this.httpRequestTimeout = defaults.httpRequestTimeout;
    	      this.maxConcurrentConnections = defaults.maxConcurrentConnections;
    	      this.paginationRules = defaults.paginationRules;
    	      this.requestBody = defaults.requestBody;
    	      this.requestInterval = defaults.requestInterval;
    	      this.requestMethod = defaults.requestMethod;
    	      this.sourceRetryCount = defaults.sourceRetryCount;
    	      this.sourceRetryWait = defaults.sourceRetryWait;
    	      this.type = defaults.type;
        }

        public Builder additionalColumns(@Nullable Output<Object> additionalColumns) {
            this.additionalColumns = additionalColumns;
            return this;
        }

        public Builder additionalColumns(@Nullable Object additionalColumns) {
            this.additionalColumns = Output.ofNullable(additionalColumns);
            return this;
        }

        public Builder additionalHeaders(@Nullable Output<Object> additionalHeaders) {
            this.additionalHeaders = additionalHeaders;
            return this;
        }

        public Builder additionalHeaders(@Nullable Object additionalHeaders) {
            this.additionalHeaders = Output.ofNullable(additionalHeaders);
            return this;
        }

        public Builder disableMetricsCollection(@Nullable Output<Object> disableMetricsCollection) {
            this.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder disableMetricsCollection(@Nullable Object disableMetricsCollection) {
            this.disableMetricsCollection = Output.ofNullable(disableMetricsCollection);
            return this;
        }

        public Builder httpRequestTimeout(@Nullable Output<Object> httpRequestTimeout) {
            this.httpRequestTimeout = httpRequestTimeout;
            return this;
        }

        public Builder httpRequestTimeout(@Nullable Object httpRequestTimeout) {
            this.httpRequestTimeout = Output.ofNullable(httpRequestTimeout);
            return this;
        }

        public Builder maxConcurrentConnections(@Nullable Output<Object> maxConcurrentConnections) {
            this.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder maxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            this.maxConcurrentConnections = Output.ofNullable(maxConcurrentConnections);
            return this;
        }

        public Builder paginationRules(@Nullable Output<Object> paginationRules) {
            this.paginationRules = paginationRules;
            return this;
        }

        public Builder paginationRules(@Nullable Object paginationRules) {
            this.paginationRules = Output.ofNullable(paginationRules);
            return this;
        }

        public Builder requestBody(@Nullable Output<Object> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        public Builder requestBody(@Nullable Object requestBody) {
            this.requestBody = Output.ofNullable(requestBody);
            return this;
        }

        public Builder requestInterval(@Nullable Output<Object> requestInterval) {
            this.requestInterval = requestInterval;
            return this;
        }

        public Builder requestInterval(@Nullable Object requestInterval) {
            this.requestInterval = Output.ofNullable(requestInterval);
            return this;
        }

        public Builder requestMethod(@Nullable Output<Object> requestMethod) {
            this.requestMethod = requestMethod;
            return this;
        }

        public Builder requestMethod(@Nullable Object requestMethod) {
            this.requestMethod = Output.ofNullable(requestMethod);
            return this;
        }

        public Builder sourceRetryCount(@Nullable Output<Object> sourceRetryCount) {
            this.sourceRetryCount = sourceRetryCount;
            return this;
        }

        public Builder sourceRetryCount(@Nullable Object sourceRetryCount) {
            this.sourceRetryCount = Output.ofNullable(sourceRetryCount);
            return this;
        }

        public Builder sourceRetryWait(@Nullable Output<Object> sourceRetryWait) {
            this.sourceRetryWait = sourceRetryWait;
            return this;
        }

        public Builder sourceRetryWait(@Nullable Object sourceRetryWait) {
            this.sourceRetryWait = Output.ofNullable(sourceRetryWait);
            return this;
        }

        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public RestSourceArgs build() {
            return new RestSourceArgs(additionalColumns, additionalHeaders, disableMetricsCollection, httpRequestTimeout, maxConcurrentConnections, paginationRules, requestBody, requestInterval, requestMethod, sourceRetryCount, sourceRetryWait, type);
        }
    }
}
