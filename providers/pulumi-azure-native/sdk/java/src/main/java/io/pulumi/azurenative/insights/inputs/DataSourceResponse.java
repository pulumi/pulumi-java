// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.azurenative.insights.inputs.DataSourceConfigurationResponse;
import io.pulumi.azurenative.insights.inputs.SinkConfigurationResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Data source object contains configuration to collect telemetry and one or more sinks to send that telemetry data to
 * 
 */
public final class DataSourceResponse extends io.pulumi.resources.InvokeArgs {

    public static final DataSourceResponse Empty = new DataSourceResponse();

    @InputImport(name="configuration", required=true)
    private final DataSourceConfigurationResponse configuration;

    public DataSourceConfigurationResponse getConfiguration() {
        return this.configuration;
    }

    /**
     * Datasource kind
     * 
     */
    @InputImport(name="kind", required=true)
    private final String kind;

    public String getKind() {
        return this.kind;
    }

    @InputImport(name="sinks", required=true)
    private final List<SinkConfigurationResponse> sinks;

    public List<SinkConfigurationResponse> getSinks() {
        return this.sinks;
    }

    public DataSourceResponse(
        DataSourceConfigurationResponse configuration,
        String kind,
        List<SinkConfigurationResponse> sinks) {
        this.configuration = Objects.requireNonNull(configuration, "expected parameter 'configuration' to be non-null");
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.sinks = Objects.requireNonNull(sinks, "expected parameter 'sinks' to be non-null");
    }

    private DataSourceResponse() {
        this.configuration = null;
        this.kind = null;
        this.sinks = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceConfigurationResponse configuration;
        private String kind;
        private List<SinkConfigurationResponse> sinks;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSourceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configuration = defaults.configuration;
    	      this.kind = defaults.kind;
    	      this.sinks = defaults.sinks;
        }

        public Builder setConfiguration(DataSourceConfigurationResponse configuration) {
            this.configuration = Objects.requireNonNull(configuration);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setSinks(List<SinkConfigurationResponse> sinks) {
            this.sinks = Objects.requireNonNull(sinks);
            return this;
        }

        public DataSourceResponse build() {
            return new DataSourceResponse(configuration, kind, sinks);
        }
    }
}
