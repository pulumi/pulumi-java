// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.operationalinsights;

import io.pulumi.azurenative.operationalinsights.enums.BillingType;
import io.pulumi.azurenative.operationalinsights.inputs.ClusterSkuArgs;
import io.pulumi.azurenative.operationalinsights.inputs.IdentityArgs;
import io.pulumi.azurenative.operationalinsights.inputs.KeyVaultPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * The cluster's billing type.
     * 
     */
    @Import(name="billingType")
      private final @Nullable Output<Either<String,BillingType>> billingType;

    public Output<Either<String,BillingType>> billingType() {
        return this.billingType == null ? Codegen.empty() : this.billingType;
    }

    /**
     * The name of the Log Analytics cluster.
     * 
     */
    @Import(name="clusterName")
      private final @Nullable Output<String> clusterName;

    public Output<String> clusterName() {
        return this.clusterName == null ? Codegen.empty() : this.clusterName;
    }

    /**
     * The identity of the resource.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<IdentityArgs> identity;

    public Output<IdentityArgs> identity() {
        return this.identity == null ? Codegen.empty() : this.identity;
    }

    /**
     * Sets whether the cluster will support availability zones. This can be set as true only in regions where Azure Data Explorer support Availability Zones. This Property can not be modified after cluster creation. Default value is 'true' if region supports Availability Zones.
     * 
     */
    @Import(name="isAvailabilityZonesEnabled")
      private final @Nullable Output<Boolean> isAvailabilityZonesEnabled;

    public Output<Boolean> isAvailabilityZonesEnabled() {
        return this.isAvailabilityZonesEnabled == null ? Codegen.empty() : this.isAvailabilityZonesEnabled;
    }

    /**
     * Configures whether cluster will use double encryption. This Property can not be modified after cluster creation. Default value is 'true'
     * 
     */
    @Import(name="isDoubleEncryptionEnabled")
      private final @Nullable Output<Boolean> isDoubleEncryptionEnabled;

    public Output<Boolean> isDoubleEncryptionEnabled() {
        return this.isDoubleEncryptionEnabled == null ? Codegen.empty() : this.isDoubleEncryptionEnabled;
    }

    /**
     * The associated key properties.
     * 
     */
    @Import(name="keyVaultProperties")
      private final @Nullable Output<KeyVaultPropertiesArgs> keyVaultProperties;

    public Output<KeyVaultPropertiesArgs> keyVaultProperties() {
        return this.keyVaultProperties == null ? Codegen.empty() : this.keyVaultProperties;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The sku properties.
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<ClusterSkuArgs> sku;

    public Output<ClusterSkuArgs> sku() {
        return this.sku == null ? Codegen.empty() : this.sku;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public ClusterArgs(
        @Nullable Output<Either<String,BillingType>> billingType,
        @Nullable Output<String> clusterName,
        @Nullable Output<IdentityArgs> identity,
        @Nullable Output<Boolean> isAvailabilityZonesEnabled,
        @Nullable Output<Boolean> isDoubleEncryptionEnabled,
        @Nullable Output<KeyVaultPropertiesArgs> keyVaultProperties,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<ClusterSkuArgs> sku,
        @Nullable Output<Map<String,String>> tags) {
        this.billingType = billingType;
        this.clusterName = clusterName;
        this.identity = identity;
        this.isAvailabilityZonesEnabled = isAvailabilityZonesEnabled;
        this.isDoubleEncryptionEnabled = isDoubleEncryptionEnabled;
        this.keyVaultProperties = keyVaultProperties;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.tags = tags;
    }

    private ClusterArgs() {
        this.billingType = Codegen.empty();
        this.clusterName = Codegen.empty();
        this.identity = Codegen.empty();
        this.isAvailabilityZonesEnabled = Codegen.empty();
        this.isDoubleEncryptionEnabled = Codegen.empty();
        this.keyVaultProperties = Codegen.empty();
        this.location = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sku = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,BillingType>> billingType;
        private @Nullable Output<String> clusterName;
        private @Nullable Output<IdentityArgs> identity;
        private @Nullable Output<Boolean> isAvailabilityZonesEnabled;
        private @Nullable Output<Boolean> isDoubleEncryptionEnabled;
        private @Nullable Output<KeyVaultPropertiesArgs> keyVaultProperties;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<ClusterSkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billingType = defaults.billingType;
    	      this.clusterName = defaults.clusterName;
    	      this.identity = defaults.identity;
    	      this.isAvailabilityZonesEnabled = defaults.isAvailabilityZonesEnabled;
    	      this.isDoubleEncryptionEnabled = defaults.isDoubleEncryptionEnabled;
    	      this.keyVaultProperties = defaults.keyVaultProperties;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder billingType(@Nullable Output<Either<String,BillingType>> billingType) {
            this.billingType = billingType;
            return this;
        }
        public Builder billingType(@Nullable Either<String,BillingType> billingType) {
            this.billingType = Codegen.ofNullable(billingType);
            return this;
        }
        public Builder clusterName(@Nullable Output<String> clusterName) {
            this.clusterName = clusterName;
            return this;
        }
        public Builder clusterName(@Nullable String clusterName) {
            this.clusterName = Codegen.ofNullable(clusterName);
            return this;
        }
        public Builder identity(@Nullable Output<IdentityArgs> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable IdentityArgs identity) {
            this.identity = Codegen.ofNullable(identity);
            return this;
        }
        public Builder isAvailabilityZonesEnabled(@Nullable Output<Boolean> isAvailabilityZonesEnabled) {
            this.isAvailabilityZonesEnabled = isAvailabilityZonesEnabled;
            return this;
        }
        public Builder isAvailabilityZonesEnabled(@Nullable Boolean isAvailabilityZonesEnabled) {
            this.isAvailabilityZonesEnabled = Codegen.ofNullable(isAvailabilityZonesEnabled);
            return this;
        }
        public Builder isDoubleEncryptionEnabled(@Nullable Output<Boolean> isDoubleEncryptionEnabled) {
            this.isDoubleEncryptionEnabled = isDoubleEncryptionEnabled;
            return this;
        }
        public Builder isDoubleEncryptionEnabled(@Nullable Boolean isDoubleEncryptionEnabled) {
            this.isDoubleEncryptionEnabled = Codegen.ofNullable(isDoubleEncryptionEnabled);
            return this;
        }
        public Builder keyVaultProperties(@Nullable Output<KeyVaultPropertiesArgs> keyVaultProperties) {
            this.keyVaultProperties = keyVaultProperties;
            return this;
        }
        public Builder keyVaultProperties(@Nullable KeyVaultPropertiesArgs keyVaultProperties) {
            this.keyVaultProperties = Codegen.ofNullable(keyVaultProperties);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sku(@Nullable Output<ClusterSkuArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable ClusterSkuArgs sku) {
            this.sku = Codegen.ofNullable(sku);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public ClusterArgs build() {
            return new ClusterArgs(billingType, clusterName, identity, isAvailabilityZonesEnabled, isDoubleEncryptionEnabled, keyVaultProperties, location, resourceGroupName, sku, tags);
        }
    }
}
