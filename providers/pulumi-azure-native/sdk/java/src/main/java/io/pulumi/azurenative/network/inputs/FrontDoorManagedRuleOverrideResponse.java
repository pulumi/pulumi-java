// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.ManagedRuleExclusionResponse;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines a managed rule group override setting.
 * 
 */
public final class FrontDoorManagedRuleOverrideResponse extends io.pulumi.resources.InvokeArgs {

    public static final FrontDoorManagedRuleOverrideResponse Empty = new FrontDoorManagedRuleOverrideResponse();

    /**
     * Describes the override action to be applied when rule matches.
     * 
     */
    @Import(name="action")
      private final @Nullable String action;

    public Optional<String> getAction() {
        return this.action == null ? Optional.empty() : Optional.ofNullable(this.action);
    }

    /**
     * Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
     * 
     */
    @Import(name="enabledState")
      private final @Nullable String enabledState;

    public Optional<String> getEnabledState() {
        return this.enabledState == null ? Optional.empty() : Optional.ofNullable(this.enabledState);
    }

    /**
     * Describes the exclusions that are applied to this specific rule.
     * 
     */
    @Import(name="exclusions")
      private final @Nullable List<ManagedRuleExclusionResponse> exclusions;

    public List<ManagedRuleExclusionResponse> getExclusions() {
        return this.exclusions == null ? List.of() : this.exclusions;
    }

    /**
     * Identifier for the managed rule.
     * 
     */
    @Import(name="ruleId", required=true)
      private final String ruleId;

    public String getRuleId() {
        return this.ruleId;
    }

    public FrontDoorManagedRuleOverrideResponse(
        @Nullable String action,
        @Nullable String enabledState,
        @Nullable List<ManagedRuleExclusionResponse> exclusions,
        String ruleId) {
        this.action = action;
        this.enabledState = enabledState;
        this.exclusions = exclusions;
        this.ruleId = Objects.requireNonNull(ruleId, "expected parameter 'ruleId' to be non-null");
    }

    private FrontDoorManagedRuleOverrideResponse() {
        this.action = null;
        this.enabledState = null;
        this.exclusions = List.of();
        this.ruleId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontDoorManagedRuleOverrideResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String action;
        private @Nullable String enabledState;
        private @Nullable List<ManagedRuleExclusionResponse> exclusions;
        private String ruleId;

        public Builder() {
    	      // Empty
        }

        public Builder(FrontDoorManagedRuleOverrideResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.enabledState = defaults.enabledState;
    	      this.exclusions = defaults.exclusions;
    	      this.ruleId = defaults.ruleId;
        }

        public Builder action(@Nullable String action) {
            this.action = action;
            return this;
        }

        public Builder enabledState(@Nullable String enabledState) {
            this.enabledState = enabledState;
            return this;
        }

        public Builder exclusions(@Nullable List<ManagedRuleExclusionResponse> exclusions) {
            this.exclusions = exclusions;
            return this;
        }

        public Builder ruleId(String ruleId) {
            this.ruleId = Objects.requireNonNull(ruleId);
            return this;
        }
        public FrontDoorManagedRuleOverrideResponse build() {
            return new FrontDoorManagedRuleOverrideResponse(action, enabledState, exclusions, ruleId);
        }
    }
}
