// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.NatGatewaySkuResponse;
import io.pulumi.azurenative.network.inputs.SubResourceResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Nat Gateway resource.
 * 
 */
public final class NatGatewayResponse extends io.pulumi.resources.InvokeArgs {

    public static final NatGatewayResponse Empty = new NatGatewayResponse();

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
      private final String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable String id;

    public Optional<String> id() {
        return this.id == null ? Optional.empty() : Optional.ofNullable(this.id);
    }

    /**
     * The idle timeout of the nat gateway.
     * 
     */
    @Import(name="idleTimeoutInMinutes")
      private final @Nullable Integer idleTimeoutInMinutes;

    public Optional<Integer> idleTimeoutInMinutes() {
        return this.idleTimeoutInMinutes == null ? Optional.empty() : Optional.ofNullable(this.idleTimeoutInMinutes);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable String location;

    public Optional<String> location() {
        return this.location == null ? Optional.empty() : Optional.ofNullable(this.location);
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * The provisioning state of the NAT gateway resource.
     * 
     */
    @Import(name="provisioningState", required=true)
      private final String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * An array of public ip addresses associated with the nat gateway resource.
     * 
     */
    @Import(name="publicIpAddresses")
      private final @Nullable List<SubResourceResponse> publicIpAddresses;

    public List<SubResourceResponse> publicIpAddresses() {
        return this.publicIpAddresses == null ? List.of() : this.publicIpAddresses;
    }

    /**
     * An array of public ip prefixes associated with the nat gateway resource.
     * 
     */
    @Import(name="publicIpPrefixes")
      private final @Nullable List<SubResourceResponse> publicIpPrefixes;

    public List<SubResourceResponse> publicIpPrefixes() {
        return this.publicIpPrefixes == null ? List.of() : this.publicIpPrefixes;
    }

    /**
     * The resource GUID property of the NAT gateway resource.
     * 
     */
    @Import(name="resourceGuid", required=true)
      private final String resourceGuid;

    public String resourceGuid() {
        return this.resourceGuid;
    }

    /**
     * The nat gateway SKU.
     * 
     */
    @Import(name="sku")
      private final @Nullable NatGatewaySkuResponse sku;

    public Optional<NatGatewaySkuResponse> sku() {
        return this.sku == null ? Optional.empty() : Optional.ofNullable(this.sku);
    }

    /**
     * An array of references to the subnets using this nat gateway resource.
     * 
     */
    @Import(name="subnets", required=true)
      private final List<SubResourceResponse> subnets;

    public List<SubResourceResponse> subnets() {
        return this.subnets;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Map<String,String> tags;

    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    /**
     * A list of availability zones denoting the zone in which Nat Gateway should be deployed.
     * 
     */
    @Import(name="zones")
      private final @Nullable List<String> zones;

    public List<String> zones() {
        return this.zones == null ? List.of() : this.zones;
    }

    public NatGatewayResponse(
        String etag,
        @Nullable String id,
        @Nullable Integer idleTimeoutInMinutes,
        @Nullable String location,
        String name,
        String provisioningState,
        @Nullable List<SubResourceResponse> publicIpAddresses,
        @Nullable List<SubResourceResponse> publicIpPrefixes,
        String resourceGuid,
        @Nullable NatGatewaySkuResponse sku,
        List<SubResourceResponse> subnets,
        @Nullable Map<String,String> tags,
        String type,
        @Nullable List<String> zones) {
        this.etag = Objects.requireNonNull(etag, "expected parameter 'etag' to be non-null");
        this.id = id;
        this.idleTimeoutInMinutes = idleTimeoutInMinutes;
        this.location = location;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.publicIpAddresses = publicIpAddresses;
        this.publicIpPrefixes = publicIpPrefixes;
        this.resourceGuid = Objects.requireNonNull(resourceGuid, "expected parameter 'resourceGuid' to be non-null");
        this.sku = sku;
        this.subnets = Objects.requireNonNull(subnets, "expected parameter 'subnets' to be non-null");
        this.tags = tags;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.zones = zones;
    }

    private NatGatewayResponse() {
        this.etag = null;
        this.id = null;
        this.idleTimeoutInMinutes = null;
        this.location = null;
        this.name = null;
        this.provisioningState = null;
        this.publicIpAddresses = List.of();
        this.publicIpPrefixes = List.of();
        this.resourceGuid = null;
        this.sku = null;
        this.subnets = List.of();
        this.tags = Map.of();
        this.type = null;
        this.zones = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NatGatewayResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String etag;
        private @Nullable String id;
        private @Nullable Integer idleTimeoutInMinutes;
        private @Nullable String location;
        private String name;
        private String provisioningState;
        private @Nullable List<SubResourceResponse> publicIpAddresses;
        private @Nullable List<SubResourceResponse> publicIpPrefixes;
        private String resourceGuid;
        private @Nullable NatGatewaySkuResponse sku;
        private List<SubResourceResponse> subnets;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(NatGatewayResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.idleTimeoutInMinutes = defaults.idleTimeoutInMinutes;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicIpAddresses = defaults.publicIpAddresses;
    	      this.publicIpPrefixes = defaults.publicIpPrefixes;
    	      this.resourceGuid = defaults.resourceGuid;
    	      this.sku = defaults.sku;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.zones = defaults.zones;
        }

        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder idleTimeoutInMinutes(@Nullable Integer idleTimeoutInMinutes) {
            this.idleTimeoutInMinutes = idleTimeoutInMinutes;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder publicIpAddresses(@Nullable List<SubResourceResponse> publicIpAddresses) {
            this.publicIpAddresses = publicIpAddresses;
            return this;
        }
        public Builder publicIpAddresses(SubResourceResponse... publicIpAddresses) {
            return publicIpAddresses(List.of(publicIpAddresses));
        }
        public Builder publicIpPrefixes(@Nullable List<SubResourceResponse> publicIpPrefixes) {
            this.publicIpPrefixes = publicIpPrefixes;
            return this;
        }
        public Builder publicIpPrefixes(SubResourceResponse... publicIpPrefixes) {
            return publicIpPrefixes(List.of(publicIpPrefixes));
        }
        public Builder resourceGuid(String resourceGuid) {
            this.resourceGuid = Objects.requireNonNull(resourceGuid);
            return this;
        }
        public Builder sku(@Nullable NatGatewaySkuResponse sku) {
            this.sku = sku;
            return this;
        }
        public Builder subnets(List<SubResourceResponse> subnets) {
            this.subnets = Objects.requireNonNull(subnets);
            return this;
        }
        public Builder subnets(SubResourceResponse... subnets) {
            return subnets(List.of(subnets));
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder zones(@Nullable List<String> zones) {
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public NatGatewayResponse build() {
            return new NatGatewayResponse(etag, id, idleTimeoutInMinutes, location, name, provisioningState, publicIpAddresses, publicIpPrefixes, resourceGuid, sku, subnets, tags, type, zones);
        }
    }
}
