// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.BackendArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A backend pool is a collection of backends that can be routed to.
 * 
 */
public final class BackendPoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final BackendPoolArgs Empty = new BackendPoolArgs();

    /**
     * The set of backends for this pool
     * 
     */
    @Import(name="backends")
      private final @Nullable Output<List<BackendArgs>> backends;

    public Output<List<BackendArgs>> getBackends() {
        return this.backends == null ? Codegen.empty() : this.backends;
    }

    /**
     * L7 health probe settings for a backend pool
     * 
     */
    @Import(name="healthProbeSettings")
      private final @Nullable Output<SubResourceArgs> healthProbeSettings;

    public Output<SubResourceArgs> getHealthProbeSettings() {
        return this.healthProbeSettings == null ? Codegen.empty() : this.healthProbeSettings;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * Load balancing settings for a backend pool
     * 
     */
    @Import(name="loadBalancingSettings")
      private final @Nullable Output<SubResourceArgs> loadBalancingSettings;

    public Output<SubResourceArgs> getLoadBalancingSettings() {
        return this.loadBalancingSettings == null ? Codegen.empty() : this.loadBalancingSettings;
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    public BackendPoolArgs(
        @Nullable Output<List<BackendArgs>> backends,
        @Nullable Output<SubResourceArgs> healthProbeSettings,
        @Nullable Output<String> id,
        @Nullable Output<SubResourceArgs> loadBalancingSettings,
        @Nullable Output<String> name) {
        this.backends = backends;
        this.healthProbeSettings = healthProbeSettings;
        this.id = id;
        this.loadBalancingSettings = loadBalancingSettings;
        this.name = name;
    }

    private BackendPoolArgs() {
        this.backends = Codegen.empty();
        this.healthProbeSettings = Codegen.empty();
        this.id = Codegen.empty();
        this.loadBalancingSettings = Codegen.empty();
        this.name = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<BackendArgs>> backends;
        private @Nullable Output<SubResourceArgs> healthProbeSettings;
        private @Nullable Output<String> id;
        private @Nullable Output<SubResourceArgs> loadBalancingSettings;
        private @Nullable Output<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendPoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backends = defaults.backends;
    	      this.healthProbeSettings = defaults.healthProbeSettings;
    	      this.id = defaults.id;
    	      this.loadBalancingSettings = defaults.loadBalancingSettings;
    	      this.name = defaults.name;
        }

        public Builder backends(@Nullable Output<List<BackendArgs>> backends) {
            this.backends = backends;
            return this;
        }
        public Builder backends(@Nullable List<BackendArgs> backends) {
            this.backends = Codegen.ofNullable(backends);
            return this;
        }
        public Builder backends(BackendArgs... backends) {
            return backends(List.of(backends));
        }
        public Builder healthProbeSettings(@Nullable Output<SubResourceArgs> healthProbeSettings) {
            this.healthProbeSettings = healthProbeSettings;
            return this;
        }
        public Builder healthProbeSettings(@Nullable SubResourceArgs healthProbeSettings) {
            this.healthProbeSettings = Codegen.ofNullable(healthProbeSettings);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder loadBalancingSettings(@Nullable Output<SubResourceArgs> loadBalancingSettings) {
            this.loadBalancingSettings = loadBalancingSettings;
            return this;
        }
        public Builder loadBalancingSettings(@Nullable SubResourceArgs loadBalancingSettings) {
            this.loadBalancingSettings = Codegen.ofNullable(loadBalancingSettings);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }        public BackendPoolArgs build() {
            return new BackendPoolArgs(backends, healthProbeSettings, id, loadBalancingSettings, name);
        }
    }
}
