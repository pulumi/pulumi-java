// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class DatabaseBackupInfoResponse {
    /**
     * The list of backup files for the current database.
     * 
     */
    private final List<String> backupFiles;
    /**
     * Date and time when the backup operation finished.
     * 
     */
    private final String backupFinishDate;
    /**
     * Backup Type.
     * 
     */
    private final String backupType;
    /**
     * Database name.
     * 
     */
    private final String databaseName;
    /**
     * Number of files in the backup set.
     * 
     */
    private final Integer familyCount;
    /**
     * Whether the backup set is compressed
     * 
     */
    private final Boolean isCompressed;
    /**
     * Database was damaged when backed up, but the backup operation was requested to continue despite errors.
     * 
     */
    private final Boolean isDamaged;
    /**
     * Position of current database backup in the file.
     * 
     */
    private final Integer position;

    @OutputCustomType.Constructor({"backupFiles","backupFinishDate","backupType","databaseName","familyCount","isCompressed","isDamaged","position"})
    private DatabaseBackupInfoResponse(
        List<String> backupFiles,
        String backupFinishDate,
        String backupType,
        String databaseName,
        Integer familyCount,
        Boolean isCompressed,
        Boolean isDamaged,
        Integer position) {
        this.backupFiles = Objects.requireNonNull(backupFiles);
        this.backupFinishDate = Objects.requireNonNull(backupFinishDate);
        this.backupType = Objects.requireNonNull(backupType);
        this.databaseName = Objects.requireNonNull(databaseName);
        this.familyCount = Objects.requireNonNull(familyCount);
        this.isCompressed = Objects.requireNonNull(isCompressed);
        this.isDamaged = Objects.requireNonNull(isDamaged);
        this.position = Objects.requireNonNull(position);
    }

    /**
     * The list of backup files for the current database.
     * 
     */
    public List<String> getBackupFiles() {
        return this.backupFiles;
    }
    /**
     * Date and time when the backup operation finished.
     * 
     */
    public String getBackupFinishDate() {
        return this.backupFinishDate;
    }
    /**
     * Backup Type.
     * 
     */
    public String getBackupType() {
        return this.backupType;
    }
    /**
     * Database name.
     * 
     */
    public String getDatabaseName() {
        return this.databaseName;
    }
    /**
     * Number of files in the backup set.
     * 
     */
    public Integer getFamilyCount() {
        return this.familyCount;
    }
    /**
     * Whether the backup set is compressed
     * 
     */
    public Boolean getIsCompressed() {
        return this.isCompressed;
    }
    /**
     * Database was damaged when backed up, but the backup operation was requested to continue despite errors.
     * 
     */
    public Boolean getIsDamaged() {
        return this.isDamaged;
    }
    /**
     * Position of current database backup in the file.
     * 
     */
    public Integer getPosition() {
        return this.position;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseBackupInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> backupFiles;
        private String backupFinishDate;
        private String backupType;
        private String databaseName;
        private Integer familyCount;
        private Boolean isCompressed;
        private Boolean isDamaged;
        private Integer position;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseBackupInfoResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupFiles = defaults.backupFiles;
    	      this.backupFinishDate = defaults.backupFinishDate;
    	      this.backupType = defaults.backupType;
    	      this.databaseName = defaults.databaseName;
    	      this.familyCount = defaults.familyCount;
    	      this.isCompressed = defaults.isCompressed;
    	      this.isDamaged = defaults.isDamaged;
    	      this.position = defaults.position;
        }

        public Builder setBackupFiles(List<String> backupFiles) {
            this.backupFiles = Objects.requireNonNull(backupFiles);
            return this;
        }

        public Builder setBackupFinishDate(String backupFinishDate) {
            this.backupFinishDate = Objects.requireNonNull(backupFinishDate);
            return this;
        }

        public Builder setBackupType(String backupType) {
            this.backupType = Objects.requireNonNull(backupType);
            return this;
        }

        public Builder setDatabaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder setFamilyCount(Integer familyCount) {
            this.familyCount = Objects.requireNonNull(familyCount);
            return this;
        }

        public Builder setIsCompressed(Boolean isCompressed) {
            this.isCompressed = Objects.requireNonNull(isCompressed);
            return this;
        }

        public Builder setIsDamaged(Boolean isDamaged) {
            this.isDamaged = Objects.requireNonNull(isDamaged);
            return this;
        }

        public Builder setPosition(Integer position) {
            this.position = Objects.requireNonNull(position);
            return this;
        }

        public DatabaseBackupInfoResponse build() {
            return new DatabaseBackupInfoResponse(backupFiles, backupFinishDate, backupType, databaseName, familyCount, isCompressed, isDamaged, position);
        }
    }
}
