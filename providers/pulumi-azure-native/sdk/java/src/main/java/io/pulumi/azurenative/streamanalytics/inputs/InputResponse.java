// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.azurenative.streamanalytics.inputs.ReferenceInputPropertiesResponse;
import io.pulumi.azurenative.streamanalytics.inputs.StreamInputPropertiesResponse;
import io.pulumi.core.Either;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
 * 
 */
public final class InputResponse extends io.pulumi.resources.InvokeArgs {

    public static final InputResponse Empty = new InputResponse();

    /**
     * Resource Id
     * 
     */
    @Import(name="id", required=true)
      private final String id;

    public String getId() {
        return this.id;
    }

    /**
     * Resource name
     * 
     */
    @Import(name="name")
      private final @Nullable String name;

    public Optional<String> getName() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="properties")
      private final @Nullable Either<ReferenceInputPropertiesResponse,StreamInputPropertiesResponse> properties;

    public Either<ReferenceInputPropertiesResponse,StreamInputPropertiesResponse> getProperties() {
        return this.properties == null ? null : this.properties;
    }

    /**
     * Resource type
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    public InputResponse(
        String id,
        @Nullable String name,
        @Nullable Either<ReferenceInputPropertiesResponse,StreamInputPropertiesResponse> properties,
        String type) {
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.name = name;
        this.properties = properties;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private InputResponse() {
        this.id = null;
        this.name = null;
        this.properties = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String id;
        private @Nullable String name;
        private @Nullable Either<ReferenceInputPropertiesResponse,StreamInputPropertiesResponse> properties;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(InputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.properties = defaults.properties;
    	      this.type = defaults.type;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder properties(@Nullable Either<ReferenceInputPropertiesResponse,StreamInputPropertiesResponse> properties) {
            this.properties = properties;
            return this;
        }

        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public InputResponse build() {
            return new InputResponse(id, name, properties, type);
        }
    }
}
