// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.aad.inputs;

import io.pulumi.azurenative.aad.enums.ExternalAccess;
import io.pulumi.azurenative.aad.enums.Ldaps;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Secure LDAP Settings
 * 
 */
public final class LdapsSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final LdapsSettingsArgs Empty = new LdapsSettingsArgs();

    /**
     * A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
     * 
     */
    @InputImport(name="externalAccess")
      private final @Nullable Output<Either<String,ExternalAccess>> externalAccess;

    public Output<Either<String,ExternalAccess>> getExternalAccess() {
        return this.externalAccess == null ? Output.empty() : this.externalAccess;
    }

    /**
     * A flag to determine whether or not Secure LDAP is enabled or disabled.
     * 
     */
    @InputImport(name="ldaps")
      private final @Nullable Output<Either<String,Ldaps>> ldaps;

    public Output<Either<String,Ldaps>> getLdaps() {
        return this.ldaps == null ? Output.empty() : this.ldaps;
    }

    /**
     * The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
     * 
     */
    @InputImport(name="pfxCertificate")
      private final @Nullable Output<String> pfxCertificate;

    public Output<String> getPfxCertificate() {
        return this.pfxCertificate == null ? Output.empty() : this.pfxCertificate;
    }

    /**
     * The password to decrypt the provided Secure LDAP certificate pfx file.
     * 
     */
    @InputImport(name="pfxCertificatePassword")
      private final @Nullable Output<String> pfxCertificatePassword;

    public Output<String> getPfxCertificatePassword() {
        return this.pfxCertificatePassword == null ? Output.empty() : this.pfxCertificatePassword;
    }

    public LdapsSettingsArgs(
        @Nullable Output<Either<String,ExternalAccess>> externalAccess,
        @Nullable Output<Either<String,Ldaps>> ldaps,
        @Nullable Output<String> pfxCertificate,
        @Nullable Output<String> pfxCertificatePassword) {
        this.externalAccess = externalAccess == null ? Output.ofLeft("Disabled") : externalAccess;
        this.ldaps = ldaps == null ? Output.ofLeft("Disabled") : ldaps;
        this.pfxCertificate = pfxCertificate;
        this.pfxCertificatePassword = pfxCertificatePassword;
    }

    private LdapsSettingsArgs() {
        this.externalAccess = Output.empty();
        this.ldaps = Output.empty();
        this.pfxCertificate = Output.empty();
        this.pfxCertificatePassword = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LdapsSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,ExternalAccess>> externalAccess;
        private @Nullable Output<Either<String,Ldaps>> ldaps;
        private @Nullable Output<String> pfxCertificate;
        private @Nullable Output<String> pfxCertificatePassword;

        public Builder() {
    	      // Empty
        }

        public Builder(LdapsSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.externalAccess = defaults.externalAccess;
    	      this.ldaps = defaults.ldaps;
    	      this.pfxCertificate = defaults.pfxCertificate;
    	      this.pfxCertificatePassword = defaults.pfxCertificatePassword;
        }

        public Builder externalAccess(@Nullable Output<Either<String,ExternalAccess>> externalAccess) {
            this.externalAccess = externalAccess;
            return this;
        }

        public Builder externalAccess(@Nullable Either<String,ExternalAccess> externalAccess) {
            this.externalAccess = Output.ofNullable(externalAccess);
            return this;
        }

        public Builder ldaps(@Nullable Output<Either<String,Ldaps>> ldaps) {
            this.ldaps = ldaps;
            return this;
        }

        public Builder ldaps(@Nullable Either<String,Ldaps> ldaps) {
            this.ldaps = Output.ofNullable(ldaps);
            return this;
        }

        public Builder pfxCertificate(@Nullable Output<String> pfxCertificate) {
            this.pfxCertificate = pfxCertificate;
            return this;
        }

        public Builder pfxCertificate(@Nullable String pfxCertificate) {
            this.pfxCertificate = Output.ofNullable(pfxCertificate);
            return this;
        }

        public Builder pfxCertificatePassword(@Nullable Output<String> pfxCertificatePassword) {
            this.pfxCertificatePassword = pfxCertificatePassword;
            return this;
        }

        public Builder pfxCertificatePassword(@Nullable String pfxCertificatePassword) {
            this.pfxCertificatePassword = Output.ofNullable(pfxCertificatePassword);
            return this;
        }
        public LdapsSettingsArgs build() {
            return new LdapsSettingsArgs(externalAccess, ldaps, pfxCertificate, pfxCertificatePassword);
        }
    }
}
