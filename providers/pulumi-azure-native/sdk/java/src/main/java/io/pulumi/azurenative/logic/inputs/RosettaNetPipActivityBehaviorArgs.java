// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.azurenative.logic.enums.RosettaNetActionType;
import io.pulumi.azurenative.logic.enums.RosettaNetPipConfidentialityScope;
import io.pulumi.azurenative.logic.enums.RosettaNetResponseType;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


/**
 * The integration account RosettaNet ProcessConfiguration activity behavior.
 * 
 */
public final class RosettaNetPipActivityBehaviorArgs extends io.pulumi.resources.ResourceArgs {

    public static final RosettaNetPipActivityBehaviorArgs Empty = new RosettaNetPipActivityBehaviorArgs();

    /**
     * The value indicating whether the RosettaNet PIP is used for a single action.
     * 
     */
    @InputImport(name="actionType", required=true)
      private final Input<RosettaNetActionType> actionType;

    public Input<RosettaNetActionType> getActionType() {
        return this.actionType;
    }

    /**
     * The value indicating whether authorization is required.
     * 
     */
    @InputImport(name="isAuthorizationRequired", required=true)
      private final Input<Boolean> isAuthorizationRequired;

    public Input<Boolean> getIsAuthorizationRequired() {
        return this.isAuthorizationRequired;
    }

    /**
     * The value indicating whether secured transport is required.
     * 
     */
    @InputImport(name="isSecuredTransportRequired", required=true)
      private final Input<Boolean> isSecuredTransportRequired;

    public Input<Boolean> getIsSecuredTransportRequired() {
        return this.isSecuredTransportRequired;
    }

    /**
     * The value indicating whether non-repudiation is for origin and content.
     * 
     */
    @InputImport(name="nonRepudiationOfOriginAndContent", required=true)
      private final Input<Boolean> nonRepudiationOfOriginAndContent;

    public Input<Boolean> getNonRepudiationOfOriginAndContent() {
        return this.nonRepudiationOfOriginAndContent;
    }

    /**
     * The persistent confidentiality encryption scope.
     * 
     */
    @InputImport(name="persistentConfidentialityScope", required=true)
      private final Input<RosettaNetPipConfidentialityScope> persistentConfidentialityScope;

    public Input<RosettaNetPipConfidentialityScope> getPersistentConfidentialityScope() {
        return this.persistentConfidentialityScope;
    }

    /**
     * The value indicating whether the RosettaNet PIP communication is synchronous.
     * 
     */
    @InputImport(name="responseType", required=true)
      private final Input<RosettaNetResponseType> responseType;

    public Input<RosettaNetResponseType> getResponseType() {
        return this.responseType;
    }

    /**
     * The value indicating retry count.
     * 
     */
    @InputImport(name="retryCount", required=true)
      private final Input<Integer> retryCount;

    public Input<Integer> getRetryCount() {
        return this.retryCount;
    }

    /**
     * The time to perform in seconds.
     * 
     */
    @InputImport(name="timeToPerformInSeconds", required=true)
      private final Input<Integer> timeToPerformInSeconds;

    public Input<Integer> getTimeToPerformInSeconds() {
        return this.timeToPerformInSeconds;
    }

    public RosettaNetPipActivityBehaviorArgs(
        Input<RosettaNetActionType> actionType,
        Input<Boolean> isAuthorizationRequired,
        Input<Boolean> isSecuredTransportRequired,
        Input<Boolean> nonRepudiationOfOriginAndContent,
        Input<RosettaNetPipConfidentialityScope> persistentConfidentialityScope,
        Input<RosettaNetResponseType> responseType,
        Input<Integer> retryCount,
        Input<Integer> timeToPerformInSeconds) {
        this.actionType = Objects.requireNonNull(actionType, "expected parameter 'actionType' to be non-null");
        this.isAuthorizationRequired = Objects.requireNonNull(isAuthorizationRequired, "expected parameter 'isAuthorizationRequired' to be non-null");
        this.isSecuredTransportRequired = Objects.requireNonNull(isSecuredTransportRequired, "expected parameter 'isSecuredTransportRequired' to be non-null");
        this.nonRepudiationOfOriginAndContent = Objects.requireNonNull(nonRepudiationOfOriginAndContent, "expected parameter 'nonRepudiationOfOriginAndContent' to be non-null");
        this.persistentConfidentialityScope = Objects.requireNonNull(persistentConfidentialityScope, "expected parameter 'persistentConfidentialityScope' to be non-null");
        this.responseType = Objects.requireNonNull(responseType, "expected parameter 'responseType' to be non-null");
        this.retryCount = Objects.requireNonNull(retryCount, "expected parameter 'retryCount' to be non-null");
        this.timeToPerformInSeconds = Objects.requireNonNull(timeToPerformInSeconds, "expected parameter 'timeToPerformInSeconds' to be non-null");
    }

    private RosettaNetPipActivityBehaviorArgs() {
        this.actionType = Input.empty();
        this.isAuthorizationRequired = Input.empty();
        this.isSecuredTransportRequired = Input.empty();
        this.nonRepudiationOfOriginAndContent = Input.empty();
        this.persistentConfidentialityScope = Input.empty();
        this.responseType = Input.empty();
        this.retryCount = Input.empty();
        this.timeToPerformInSeconds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RosettaNetPipActivityBehaviorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<RosettaNetActionType> actionType;
        private Input<Boolean> isAuthorizationRequired;
        private Input<Boolean> isSecuredTransportRequired;
        private Input<Boolean> nonRepudiationOfOriginAndContent;
        private Input<RosettaNetPipConfidentialityScope> persistentConfidentialityScope;
        private Input<RosettaNetResponseType> responseType;
        private Input<Integer> retryCount;
        private Input<Integer> timeToPerformInSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(RosettaNetPipActivityBehaviorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionType = defaults.actionType;
    	      this.isAuthorizationRequired = defaults.isAuthorizationRequired;
    	      this.isSecuredTransportRequired = defaults.isSecuredTransportRequired;
    	      this.nonRepudiationOfOriginAndContent = defaults.nonRepudiationOfOriginAndContent;
    	      this.persistentConfidentialityScope = defaults.persistentConfidentialityScope;
    	      this.responseType = defaults.responseType;
    	      this.retryCount = defaults.retryCount;
    	      this.timeToPerformInSeconds = defaults.timeToPerformInSeconds;
        }

        public Builder setActionType(Input<RosettaNetActionType> actionType) {
            this.actionType = Objects.requireNonNull(actionType);
            return this;
        }

        public Builder setActionType(RosettaNetActionType actionType) {
            this.actionType = Input.of(Objects.requireNonNull(actionType));
            return this;
        }

        public Builder setIsAuthorizationRequired(Input<Boolean> isAuthorizationRequired) {
            this.isAuthorizationRequired = Objects.requireNonNull(isAuthorizationRequired);
            return this;
        }

        public Builder setIsAuthorizationRequired(Boolean isAuthorizationRequired) {
            this.isAuthorizationRequired = Input.of(Objects.requireNonNull(isAuthorizationRequired));
            return this;
        }

        public Builder setIsSecuredTransportRequired(Input<Boolean> isSecuredTransportRequired) {
            this.isSecuredTransportRequired = Objects.requireNonNull(isSecuredTransportRequired);
            return this;
        }

        public Builder setIsSecuredTransportRequired(Boolean isSecuredTransportRequired) {
            this.isSecuredTransportRequired = Input.of(Objects.requireNonNull(isSecuredTransportRequired));
            return this;
        }

        public Builder setNonRepudiationOfOriginAndContent(Input<Boolean> nonRepudiationOfOriginAndContent) {
            this.nonRepudiationOfOriginAndContent = Objects.requireNonNull(nonRepudiationOfOriginAndContent);
            return this;
        }

        public Builder setNonRepudiationOfOriginAndContent(Boolean nonRepudiationOfOriginAndContent) {
            this.nonRepudiationOfOriginAndContent = Input.of(Objects.requireNonNull(nonRepudiationOfOriginAndContent));
            return this;
        }

        public Builder setPersistentConfidentialityScope(Input<RosettaNetPipConfidentialityScope> persistentConfidentialityScope) {
            this.persistentConfidentialityScope = Objects.requireNonNull(persistentConfidentialityScope);
            return this;
        }

        public Builder setPersistentConfidentialityScope(RosettaNetPipConfidentialityScope persistentConfidentialityScope) {
            this.persistentConfidentialityScope = Input.of(Objects.requireNonNull(persistentConfidentialityScope));
            return this;
        }

        public Builder setResponseType(Input<RosettaNetResponseType> responseType) {
            this.responseType = Objects.requireNonNull(responseType);
            return this;
        }

        public Builder setResponseType(RosettaNetResponseType responseType) {
            this.responseType = Input.of(Objects.requireNonNull(responseType));
            return this;
        }

        public Builder setRetryCount(Input<Integer> retryCount) {
            this.retryCount = Objects.requireNonNull(retryCount);
            return this;
        }

        public Builder setRetryCount(Integer retryCount) {
            this.retryCount = Input.of(Objects.requireNonNull(retryCount));
            return this;
        }

        public Builder setTimeToPerformInSeconds(Input<Integer> timeToPerformInSeconds) {
            this.timeToPerformInSeconds = Objects.requireNonNull(timeToPerformInSeconds);
            return this;
        }

        public Builder setTimeToPerformInSeconds(Integer timeToPerformInSeconds) {
            this.timeToPerformInSeconds = Input.of(Objects.requireNonNull(timeToPerformInSeconds));
            return this;
        }
        public RosettaNetPipActivityBehaviorArgs build() {
            return new RosettaNetPipActivityBehaviorArgs(actionType, isAuthorizationRequired, isSecuredTransportRequired, nonRepudiationOfOriginAndContent, persistentConfidentialityScope, responseType, retryCount, timeToPerformInSeconds);
        }
    }
}
