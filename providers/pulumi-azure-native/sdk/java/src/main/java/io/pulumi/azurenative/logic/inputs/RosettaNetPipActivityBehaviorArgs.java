// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.azurenative.logic.enums.RosettaNetActionType;
import io.pulumi.azurenative.logic.enums.RosettaNetPipConfidentialityScope;
import io.pulumi.azurenative.logic.enums.RosettaNetResponseType;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


/**
 * The integration account RosettaNet ProcessConfiguration activity behavior.
 * 
 */
public final class RosettaNetPipActivityBehaviorArgs extends io.pulumi.resources.ResourceArgs {

    public static final RosettaNetPipActivityBehaviorArgs Empty = new RosettaNetPipActivityBehaviorArgs();

    /**
     * The value indicating whether the RosettaNet PIP is used for a single action.
     * 
     */
    @Import(name="actionType", required=true)
      private final Output<RosettaNetActionType> actionType;

    public Output<RosettaNetActionType> getActionType() {
        return this.actionType;
    }

    /**
     * The value indicating whether authorization is required.
     * 
     */
    @Import(name="isAuthorizationRequired", required=true)
      private final Output<Boolean> isAuthorizationRequired;

    public Output<Boolean> getIsAuthorizationRequired() {
        return this.isAuthorizationRequired;
    }

    /**
     * The value indicating whether secured transport is required.
     * 
     */
    @Import(name="isSecuredTransportRequired", required=true)
      private final Output<Boolean> isSecuredTransportRequired;

    public Output<Boolean> getIsSecuredTransportRequired() {
        return this.isSecuredTransportRequired;
    }

    /**
     * The value indicating whether non-repudiation is for origin and content.
     * 
     */
    @Import(name="nonRepudiationOfOriginAndContent", required=true)
      private final Output<Boolean> nonRepudiationOfOriginAndContent;

    public Output<Boolean> getNonRepudiationOfOriginAndContent() {
        return this.nonRepudiationOfOriginAndContent;
    }

    /**
     * The persistent confidentiality encryption scope.
     * 
     */
    @Import(name="persistentConfidentialityScope", required=true)
      private final Output<RosettaNetPipConfidentialityScope> persistentConfidentialityScope;

    public Output<RosettaNetPipConfidentialityScope> getPersistentConfidentialityScope() {
        return this.persistentConfidentialityScope;
    }

    /**
     * The value indicating whether the RosettaNet PIP communication is synchronous.
     * 
     */
    @Import(name="responseType", required=true)
      private final Output<RosettaNetResponseType> responseType;

    public Output<RosettaNetResponseType> getResponseType() {
        return this.responseType;
    }

    /**
     * The value indicating retry count.
     * 
     */
    @Import(name="retryCount", required=true)
      private final Output<Integer> retryCount;

    public Output<Integer> getRetryCount() {
        return this.retryCount;
    }

    /**
     * The time to perform in seconds.
     * 
     */
    @Import(name="timeToPerformInSeconds", required=true)
      private final Output<Integer> timeToPerformInSeconds;

    public Output<Integer> getTimeToPerformInSeconds() {
        return this.timeToPerformInSeconds;
    }

    public RosettaNetPipActivityBehaviorArgs(
        Output<RosettaNetActionType> actionType,
        Output<Boolean> isAuthorizationRequired,
        Output<Boolean> isSecuredTransportRequired,
        Output<Boolean> nonRepudiationOfOriginAndContent,
        Output<RosettaNetPipConfidentialityScope> persistentConfidentialityScope,
        Output<RosettaNetResponseType> responseType,
        Output<Integer> retryCount,
        Output<Integer> timeToPerformInSeconds) {
        this.actionType = Objects.requireNonNull(actionType, "expected parameter 'actionType' to be non-null");
        this.isAuthorizationRequired = Objects.requireNonNull(isAuthorizationRequired, "expected parameter 'isAuthorizationRequired' to be non-null");
        this.isSecuredTransportRequired = Objects.requireNonNull(isSecuredTransportRequired, "expected parameter 'isSecuredTransportRequired' to be non-null");
        this.nonRepudiationOfOriginAndContent = Objects.requireNonNull(nonRepudiationOfOriginAndContent, "expected parameter 'nonRepudiationOfOriginAndContent' to be non-null");
        this.persistentConfidentialityScope = Objects.requireNonNull(persistentConfidentialityScope, "expected parameter 'persistentConfidentialityScope' to be non-null");
        this.responseType = Objects.requireNonNull(responseType, "expected parameter 'responseType' to be non-null");
        this.retryCount = Objects.requireNonNull(retryCount, "expected parameter 'retryCount' to be non-null");
        this.timeToPerformInSeconds = Objects.requireNonNull(timeToPerformInSeconds, "expected parameter 'timeToPerformInSeconds' to be non-null");
    }

    private RosettaNetPipActivityBehaviorArgs() {
        this.actionType = Output.empty();
        this.isAuthorizationRequired = Output.empty();
        this.isSecuredTransportRequired = Output.empty();
        this.nonRepudiationOfOriginAndContent = Output.empty();
        this.persistentConfidentialityScope = Output.empty();
        this.responseType = Output.empty();
        this.retryCount = Output.empty();
        this.timeToPerformInSeconds = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RosettaNetPipActivityBehaviorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<RosettaNetActionType> actionType;
        private Output<Boolean> isAuthorizationRequired;
        private Output<Boolean> isSecuredTransportRequired;
        private Output<Boolean> nonRepudiationOfOriginAndContent;
        private Output<RosettaNetPipConfidentialityScope> persistentConfidentialityScope;
        private Output<RosettaNetResponseType> responseType;
        private Output<Integer> retryCount;
        private Output<Integer> timeToPerformInSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(RosettaNetPipActivityBehaviorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionType = defaults.actionType;
    	      this.isAuthorizationRequired = defaults.isAuthorizationRequired;
    	      this.isSecuredTransportRequired = defaults.isSecuredTransportRequired;
    	      this.nonRepudiationOfOriginAndContent = defaults.nonRepudiationOfOriginAndContent;
    	      this.persistentConfidentialityScope = defaults.persistentConfidentialityScope;
    	      this.responseType = defaults.responseType;
    	      this.retryCount = defaults.retryCount;
    	      this.timeToPerformInSeconds = defaults.timeToPerformInSeconds;
        }

        public Builder actionType(Output<RosettaNetActionType> actionType) {
            this.actionType = Objects.requireNonNull(actionType);
            return this;
        }
        public Builder actionType(RosettaNetActionType actionType) {
            this.actionType = Output.of(Objects.requireNonNull(actionType));
            return this;
        }
        public Builder isAuthorizationRequired(Output<Boolean> isAuthorizationRequired) {
            this.isAuthorizationRequired = Objects.requireNonNull(isAuthorizationRequired);
            return this;
        }
        public Builder isAuthorizationRequired(Boolean isAuthorizationRequired) {
            this.isAuthorizationRequired = Output.of(Objects.requireNonNull(isAuthorizationRequired));
            return this;
        }
        public Builder isSecuredTransportRequired(Output<Boolean> isSecuredTransportRequired) {
            this.isSecuredTransportRequired = Objects.requireNonNull(isSecuredTransportRequired);
            return this;
        }
        public Builder isSecuredTransportRequired(Boolean isSecuredTransportRequired) {
            this.isSecuredTransportRequired = Output.of(Objects.requireNonNull(isSecuredTransportRequired));
            return this;
        }
        public Builder nonRepudiationOfOriginAndContent(Output<Boolean> nonRepudiationOfOriginAndContent) {
            this.nonRepudiationOfOriginAndContent = Objects.requireNonNull(nonRepudiationOfOriginAndContent);
            return this;
        }
        public Builder nonRepudiationOfOriginAndContent(Boolean nonRepudiationOfOriginAndContent) {
            this.nonRepudiationOfOriginAndContent = Output.of(Objects.requireNonNull(nonRepudiationOfOriginAndContent));
            return this;
        }
        public Builder persistentConfidentialityScope(Output<RosettaNetPipConfidentialityScope> persistentConfidentialityScope) {
            this.persistentConfidentialityScope = Objects.requireNonNull(persistentConfidentialityScope);
            return this;
        }
        public Builder persistentConfidentialityScope(RosettaNetPipConfidentialityScope persistentConfidentialityScope) {
            this.persistentConfidentialityScope = Output.of(Objects.requireNonNull(persistentConfidentialityScope));
            return this;
        }
        public Builder responseType(Output<RosettaNetResponseType> responseType) {
            this.responseType = Objects.requireNonNull(responseType);
            return this;
        }
        public Builder responseType(RosettaNetResponseType responseType) {
            this.responseType = Output.of(Objects.requireNonNull(responseType));
            return this;
        }
        public Builder retryCount(Output<Integer> retryCount) {
            this.retryCount = Objects.requireNonNull(retryCount);
            return this;
        }
        public Builder retryCount(Integer retryCount) {
            this.retryCount = Output.of(Objects.requireNonNull(retryCount));
            return this;
        }
        public Builder timeToPerformInSeconds(Output<Integer> timeToPerformInSeconds) {
            this.timeToPerformInSeconds = Objects.requireNonNull(timeToPerformInSeconds);
            return this;
        }
        public Builder timeToPerformInSeconds(Integer timeToPerformInSeconds) {
            this.timeToPerformInSeconds = Output.of(Objects.requireNonNull(timeToPerformInSeconds));
            return this;
        }        public RosettaNetPipActivityBehaviorArgs build() {
            return new RosettaNetPipActivityBehaviorArgs(actionType, isAuthorizationRequired, isSecuredTransportRequired, nonRepudiationOfOriginAndContent, persistentConfidentialityScope, responseType, retryCount, timeToPerformInSeconds);
        }
    }
}
