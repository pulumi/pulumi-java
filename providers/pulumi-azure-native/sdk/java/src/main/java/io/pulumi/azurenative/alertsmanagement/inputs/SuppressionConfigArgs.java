// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.alertsmanagement.inputs;

import io.pulumi.azurenative.alertsmanagement.enums.SuppressionType;
import io.pulumi.azurenative.alertsmanagement.inputs.SuppressionScheduleArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Suppression logic for a given action rule
 * 
 */
public final class SuppressionConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final SuppressionConfigArgs Empty = new SuppressionConfigArgs();

    /**
     * Specifies when the suppression should be applied
     * 
     */
    @Import(name="recurrenceType", required=true)
      private final Output<Either<String,SuppressionType>> recurrenceType;

    public Output<Either<String,SuppressionType>> getRecurrenceType() {
        return this.recurrenceType;
    }

    /**
     * suppression schedule configuration
     * 
     */
    @Import(name="schedule")
      private final @Nullable Output<SuppressionScheduleArgs> schedule;

    public Output<SuppressionScheduleArgs> getSchedule() {
        return this.schedule == null ? Output.empty() : this.schedule;
    }

    public SuppressionConfigArgs(
        Output<Either<String,SuppressionType>> recurrenceType,
        @Nullable Output<SuppressionScheduleArgs> schedule) {
        this.recurrenceType = Objects.requireNonNull(recurrenceType, "expected parameter 'recurrenceType' to be non-null");
        this.schedule = schedule;
    }

    private SuppressionConfigArgs() {
        this.recurrenceType = Output.empty();
        this.schedule = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SuppressionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,SuppressionType>> recurrenceType;
        private @Nullable Output<SuppressionScheduleArgs> schedule;

        public Builder() {
    	      // Empty
        }

        public Builder(SuppressionConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recurrenceType = defaults.recurrenceType;
    	      this.schedule = defaults.schedule;
        }

        public Builder recurrenceType(Output<Either<String,SuppressionType>> recurrenceType) {
            this.recurrenceType = Objects.requireNonNull(recurrenceType);
            return this;
        }

        public Builder recurrenceType(Either<String,SuppressionType> recurrenceType) {
            this.recurrenceType = Output.of(Objects.requireNonNull(recurrenceType));
            return this;
        }

        public Builder schedule(@Nullable Output<SuppressionScheduleArgs> schedule) {
            this.schedule = schedule;
            return this;
        }

        public Builder schedule(@Nullable SuppressionScheduleArgs schedule) {
            this.schedule = Output.ofNullable(schedule);
            return this;
        }
        public SuppressionConfigArgs build() {
            return new SuppressionConfigArgs(recurrenceType, schedule);
        }
    }
}
