// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.VirtualNetworkGatewayConnectionProtocol;
import io.pulumi.azurenative.network.enums.VpnLinkConnectionMode;
import io.pulumi.azurenative.network.inputs.IpsecPolicyArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * VpnSiteLinkConnection Resource.
 * 
 */
public final class VpnSiteLinkConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final VpnSiteLinkConnectionArgs Empty = new VpnSiteLinkConnectionArgs();

    /**
     * Expected bandwidth in MBPS.
     * 
     */
    @Import(name="connectionBandwidth")
      private final @Nullable Output<Integer> connectionBandwidth;

    public Output<Integer> connectionBandwidth() {
        return this.connectionBandwidth == null ? Codegen.empty() : this.connectionBandwidth;
    }

    /**
     * List of egress NatRules.
     * 
     */
    @Import(name="egressNatRules")
      private final @Nullable Output<List<SubResourceArgs>> egressNatRules;

    public Output<List<SubResourceArgs>> egressNatRules() {
        return this.egressNatRules == null ? Codegen.empty() : this.egressNatRules;
    }

    /**
     * EnableBgp flag.
     * 
     */
    @Import(name="enableBgp")
      private final @Nullable Output<Boolean> enableBgp;

    public Output<Boolean> enableBgp() {
        return this.enableBgp == null ? Codegen.empty() : this.enableBgp;
    }

    /**
     * EnableBgp flag.
     * 
     */
    @Import(name="enableRateLimiting")
      private final @Nullable Output<Boolean> enableRateLimiting;

    public Output<Boolean> enableRateLimiting() {
        return this.enableRateLimiting == null ? Codegen.empty() : this.enableRateLimiting;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * List of ingress NatRules.
     * 
     */
    @Import(name="ingressNatRules")
      private final @Nullable Output<List<SubResourceArgs>> ingressNatRules;

    public Output<List<SubResourceArgs>> ingressNatRules() {
        return this.ingressNatRules == null ? Codegen.empty() : this.ingressNatRules;
    }

    /**
     * The IPSec Policies to be considered by this connection.
     * 
     */
    @Import(name="ipsecPolicies")
      private final @Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies;

    public Output<List<IpsecPolicyArgs>> ipsecPolicies() {
        return this.ipsecPolicies == null ? Codegen.empty() : this.ipsecPolicies;
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Routing weight for vpn connection.
     * 
     */
    @Import(name="routingWeight")
      private final @Nullable Output<Integer> routingWeight;

    public Output<Integer> routingWeight() {
        return this.routingWeight == null ? Codegen.empty() : this.routingWeight;
    }

    /**
     * SharedKey for the vpn connection.
     * 
     */
    @Import(name="sharedKey")
      private final @Nullable Output<String> sharedKey;

    public Output<String> sharedKey() {
        return this.sharedKey == null ? Codegen.empty() : this.sharedKey;
    }

    /**
     * Use local azure ip to initiate connection.
     * 
     */
    @Import(name="useLocalAzureIpAddress")
      private final @Nullable Output<Boolean> useLocalAzureIpAddress;

    public Output<Boolean> useLocalAzureIpAddress() {
        return this.useLocalAzureIpAddress == null ? Codegen.empty() : this.useLocalAzureIpAddress;
    }

    /**
     * Enable policy-based traffic selectors.
     * 
     */
    @Import(name="usePolicyBasedTrafficSelectors")
      private final @Nullable Output<Boolean> usePolicyBasedTrafficSelectors;

    public Output<Boolean> usePolicyBasedTrafficSelectors() {
        return this.usePolicyBasedTrafficSelectors == null ? Codegen.empty() : this.usePolicyBasedTrafficSelectors;
    }

    /**
     * Connection protocol used for this connection.
     * 
     */
    @Import(name="vpnConnectionProtocolType")
      private final @Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType;

    public Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType() {
        return this.vpnConnectionProtocolType == null ? Codegen.empty() : this.vpnConnectionProtocolType;
    }

    /**
     * Vpn link connection mode.
     * 
     */
    @Import(name="vpnLinkConnectionMode")
      private final @Nullable Output<Either<String,VpnLinkConnectionMode>> vpnLinkConnectionMode;

    public Output<Either<String,VpnLinkConnectionMode>> vpnLinkConnectionMode() {
        return this.vpnLinkConnectionMode == null ? Codegen.empty() : this.vpnLinkConnectionMode;
    }

    /**
     * Id of the connected vpn site link.
     * 
     */
    @Import(name="vpnSiteLink")
      private final @Nullable Output<SubResourceArgs> vpnSiteLink;

    public Output<SubResourceArgs> vpnSiteLink() {
        return this.vpnSiteLink == null ? Codegen.empty() : this.vpnSiteLink;
    }

    public VpnSiteLinkConnectionArgs(
        @Nullable Output<Integer> connectionBandwidth,
        @Nullable Output<List<SubResourceArgs>> egressNatRules,
        @Nullable Output<Boolean> enableBgp,
        @Nullable Output<Boolean> enableRateLimiting,
        @Nullable Output<String> id,
        @Nullable Output<List<SubResourceArgs>> ingressNatRules,
        @Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies,
        @Nullable Output<String> name,
        @Nullable Output<Integer> routingWeight,
        @Nullable Output<String> sharedKey,
        @Nullable Output<Boolean> useLocalAzureIpAddress,
        @Nullable Output<Boolean> usePolicyBasedTrafficSelectors,
        @Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType,
        @Nullable Output<Either<String,VpnLinkConnectionMode>> vpnLinkConnectionMode,
        @Nullable Output<SubResourceArgs> vpnSiteLink) {
        this.connectionBandwidth = connectionBandwidth;
        this.egressNatRules = egressNatRules;
        this.enableBgp = enableBgp;
        this.enableRateLimiting = enableRateLimiting;
        this.id = id;
        this.ingressNatRules = ingressNatRules;
        this.ipsecPolicies = ipsecPolicies;
        this.name = name;
        this.routingWeight = routingWeight;
        this.sharedKey = sharedKey;
        this.useLocalAzureIpAddress = useLocalAzureIpAddress;
        this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
        this.vpnConnectionProtocolType = vpnConnectionProtocolType;
        this.vpnLinkConnectionMode = vpnLinkConnectionMode;
        this.vpnSiteLink = vpnSiteLink;
    }

    private VpnSiteLinkConnectionArgs() {
        this.connectionBandwidth = Codegen.empty();
        this.egressNatRules = Codegen.empty();
        this.enableBgp = Codegen.empty();
        this.enableRateLimiting = Codegen.empty();
        this.id = Codegen.empty();
        this.ingressNatRules = Codegen.empty();
        this.ipsecPolicies = Codegen.empty();
        this.name = Codegen.empty();
        this.routingWeight = Codegen.empty();
        this.sharedKey = Codegen.empty();
        this.useLocalAzureIpAddress = Codegen.empty();
        this.usePolicyBasedTrafficSelectors = Codegen.empty();
        this.vpnConnectionProtocolType = Codegen.empty();
        this.vpnLinkConnectionMode = Codegen.empty();
        this.vpnSiteLink = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnSiteLinkConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> connectionBandwidth;
        private @Nullable Output<List<SubResourceArgs>> egressNatRules;
        private @Nullable Output<Boolean> enableBgp;
        private @Nullable Output<Boolean> enableRateLimiting;
        private @Nullable Output<String> id;
        private @Nullable Output<List<SubResourceArgs>> ingressNatRules;
        private @Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> routingWeight;
        private @Nullable Output<String> sharedKey;
        private @Nullable Output<Boolean> useLocalAzureIpAddress;
        private @Nullable Output<Boolean> usePolicyBasedTrafficSelectors;
        private @Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType;
        private @Nullable Output<Either<String,VpnLinkConnectionMode>> vpnLinkConnectionMode;
        private @Nullable Output<SubResourceArgs> vpnSiteLink;

        public Builder() {
    	      // Empty
        }

        public Builder(VpnSiteLinkConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionBandwidth = defaults.connectionBandwidth;
    	      this.egressNatRules = defaults.egressNatRules;
    	      this.enableBgp = defaults.enableBgp;
    	      this.enableRateLimiting = defaults.enableRateLimiting;
    	      this.id = defaults.id;
    	      this.ingressNatRules = defaults.ingressNatRules;
    	      this.ipsecPolicies = defaults.ipsecPolicies;
    	      this.name = defaults.name;
    	      this.routingWeight = defaults.routingWeight;
    	      this.sharedKey = defaults.sharedKey;
    	      this.useLocalAzureIpAddress = defaults.useLocalAzureIpAddress;
    	      this.usePolicyBasedTrafficSelectors = defaults.usePolicyBasedTrafficSelectors;
    	      this.vpnConnectionProtocolType = defaults.vpnConnectionProtocolType;
    	      this.vpnLinkConnectionMode = defaults.vpnLinkConnectionMode;
    	      this.vpnSiteLink = defaults.vpnSiteLink;
        }

        public Builder connectionBandwidth(@Nullable Output<Integer> connectionBandwidth) {
            this.connectionBandwidth = connectionBandwidth;
            return this;
        }
        public Builder connectionBandwidth(@Nullable Integer connectionBandwidth) {
            this.connectionBandwidth = Codegen.ofNullable(connectionBandwidth);
            return this;
        }
        public Builder egressNatRules(@Nullable Output<List<SubResourceArgs>> egressNatRules) {
            this.egressNatRules = egressNatRules;
            return this;
        }
        public Builder egressNatRules(@Nullable List<SubResourceArgs> egressNatRules) {
            this.egressNatRules = Codegen.ofNullable(egressNatRules);
            return this;
        }
        public Builder egressNatRules(SubResourceArgs... egressNatRules) {
            return egressNatRules(List.of(egressNatRules));
        }
        public Builder enableBgp(@Nullable Output<Boolean> enableBgp) {
            this.enableBgp = enableBgp;
            return this;
        }
        public Builder enableBgp(@Nullable Boolean enableBgp) {
            this.enableBgp = Codegen.ofNullable(enableBgp);
            return this;
        }
        public Builder enableRateLimiting(@Nullable Output<Boolean> enableRateLimiting) {
            this.enableRateLimiting = enableRateLimiting;
            return this;
        }
        public Builder enableRateLimiting(@Nullable Boolean enableRateLimiting) {
            this.enableRateLimiting = Codegen.ofNullable(enableRateLimiting);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder ingressNatRules(@Nullable Output<List<SubResourceArgs>> ingressNatRules) {
            this.ingressNatRules = ingressNatRules;
            return this;
        }
        public Builder ingressNatRules(@Nullable List<SubResourceArgs> ingressNatRules) {
            this.ingressNatRules = Codegen.ofNullable(ingressNatRules);
            return this;
        }
        public Builder ingressNatRules(SubResourceArgs... ingressNatRules) {
            return ingressNatRules(List.of(ingressNatRules));
        }
        public Builder ipsecPolicies(@Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies) {
            this.ipsecPolicies = ipsecPolicies;
            return this;
        }
        public Builder ipsecPolicies(@Nullable List<IpsecPolicyArgs> ipsecPolicies) {
            this.ipsecPolicies = Codegen.ofNullable(ipsecPolicies);
            return this;
        }
        public Builder ipsecPolicies(IpsecPolicyArgs... ipsecPolicies) {
            return ipsecPolicies(List.of(ipsecPolicies));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder routingWeight(@Nullable Output<Integer> routingWeight) {
            this.routingWeight = routingWeight;
            return this;
        }
        public Builder routingWeight(@Nullable Integer routingWeight) {
            this.routingWeight = Codegen.ofNullable(routingWeight);
            return this;
        }
        public Builder sharedKey(@Nullable Output<String> sharedKey) {
            this.sharedKey = sharedKey;
            return this;
        }
        public Builder sharedKey(@Nullable String sharedKey) {
            this.sharedKey = Codegen.ofNullable(sharedKey);
            return this;
        }
        public Builder useLocalAzureIpAddress(@Nullable Output<Boolean> useLocalAzureIpAddress) {
            this.useLocalAzureIpAddress = useLocalAzureIpAddress;
            return this;
        }
        public Builder useLocalAzureIpAddress(@Nullable Boolean useLocalAzureIpAddress) {
            this.useLocalAzureIpAddress = Codegen.ofNullable(useLocalAzureIpAddress);
            return this;
        }
        public Builder usePolicyBasedTrafficSelectors(@Nullable Output<Boolean> usePolicyBasedTrafficSelectors) {
            this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            return this;
        }
        public Builder usePolicyBasedTrafficSelectors(@Nullable Boolean usePolicyBasedTrafficSelectors) {
            this.usePolicyBasedTrafficSelectors = Codegen.ofNullable(usePolicyBasedTrafficSelectors);
            return this;
        }
        public Builder vpnConnectionProtocolType(@Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType) {
            this.vpnConnectionProtocolType = vpnConnectionProtocolType;
            return this;
        }
        public Builder vpnConnectionProtocolType(@Nullable Either<String,VirtualNetworkGatewayConnectionProtocol> vpnConnectionProtocolType) {
            this.vpnConnectionProtocolType = Codegen.ofNullable(vpnConnectionProtocolType);
            return this;
        }
        public Builder vpnLinkConnectionMode(@Nullable Output<Either<String,VpnLinkConnectionMode>> vpnLinkConnectionMode) {
            this.vpnLinkConnectionMode = vpnLinkConnectionMode;
            return this;
        }
        public Builder vpnLinkConnectionMode(@Nullable Either<String,VpnLinkConnectionMode> vpnLinkConnectionMode) {
            this.vpnLinkConnectionMode = Codegen.ofNullable(vpnLinkConnectionMode);
            return this;
        }
        public Builder vpnSiteLink(@Nullable Output<SubResourceArgs> vpnSiteLink) {
            this.vpnSiteLink = vpnSiteLink;
            return this;
        }
        public Builder vpnSiteLink(@Nullable SubResourceArgs vpnSiteLink) {
            this.vpnSiteLink = Codegen.ofNullable(vpnSiteLink);
            return this;
        }        public VpnSiteLinkConnectionArgs build() {
            return new VpnSiteLinkConnectionArgs(connectionBandwidth, egressNatRules, enableBgp, enableRateLimiting, id, ingressNatRules, ipsecPolicies, name, routingWeight, sharedKey, useLocalAzureIpAddress, usePolicyBasedTrafficSelectors, vpnConnectionProtocolType, vpnLinkConnectionMode, vpnSiteLink);
        }
    }
}
