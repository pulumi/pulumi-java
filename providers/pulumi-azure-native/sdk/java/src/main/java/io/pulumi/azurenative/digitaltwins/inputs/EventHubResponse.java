// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.digitaltwins.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventHubResponse extends io.pulumi.resources.InvokeArgs {

    public static final EventHubResponse Empty = new EventHubResponse();

    @InputImport(name="authenticationType")
    private final @Nullable String authenticationType;

    public Optional<String> getAuthenticationType() {
        return this.authenticationType == null ? Optional.empty() : Optional.ofNullable(this.authenticationType);
    }

    @InputImport(name="connectionStringPrimaryKey")
    private final @Nullable String connectionStringPrimaryKey;

    public Optional<String> getConnectionStringPrimaryKey() {
        return this.connectionStringPrimaryKey == null ? Optional.empty() : Optional.ofNullable(this.connectionStringPrimaryKey);
    }

    @InputImport(name="connectionStringSecondaryKey")
    private final @Nullable String connectionStringSecondaryKey;

    public Optional<String> getConnectionStringSecondaryKey() {
        return this.connectionStringSecondaryKey == null ? Optional.empty() : Optional.ofNullable(this.connectionStringSecondaryKey);
    }

    @InputImport(name="createdTime", required=true)
    private final String createdTime;

    public String getCreatedTime() {
        return this.createdTime;
    }

    @InputImport(name="deadLetterSecret")
    private final @Nullable String deadLetterSecret;

    public Optional<String> getDeadLetterSecret() {
        return this.deadLetterSecret == null ? Optional.empty() : Optional.ofNullable(this.deadLetterSecret);
    }

    @InputImport(name="deadLetterUri")
    private final @Nullable String deadLetterUri;

    public Optional<String> getDeadLetterUri() {
        return this.deadLetterUri == null ? Optional.empty() : Optional.ofNullable(this.deadLetterUri);
    }

    @InputImport(name="endpointType", required=true)
    private final String endpointType;

    public String getEndpointType() {
        return this.endpointType;
    }

    @InputImport(name="endpointUri")
    private final @Nullable String endpointUri;

    public Optional<String> getEndpointUri() {
        return this.endpointUri == null ? Optional.empty() : Optional.ofNullable(this.endpointUri);
    }

    @InputImport(name="entityPath")
    private final @Nullable String entityPath;

    public Optional<String> getEntityPath() {
        return this.entityPath == null ? Optional.empty() : Optional.ofNullable(this.entityPath);
    }

    @InputImport(name="provisioningState", required=true)
    private final String provisioningState;

    public String getProvisioningState() {
        return this.provisioningState;
    }

    public EventHubResponse(
        @Nullable String authenticationType,
        @Nullable String connectionStringPrimaryKey,
        @Nullable String connectionStringSecondaryKey,
        String createdTime,
        @Nullable String deadLetterSecret,
        @Nullable String deadLetterUri,
        String endpointType,
        @Nullable String endpointUri,
        @Nullable String entityPath,
        String provisioningState) {
        this.authenticationType = authenticationType;
        this.connectionStringPrimaryKey = connectionStringPrimaryKey;
        this.connectionStringSecondaryKey = connectionStringSecondaryKey;
        this.createdTime = Objects.requireNonNull(createdTime, "expected parameter 'createdTime' to be non-null");
        this.deadLetterSecret = deadLetterSecret;
        this.deadLetterUri = deadLetterUri;
        this.endpointType = Objects.requireNonNull(endpointType, "expected parameter 'endpointType' to be non-null");
        this.endpointUri = endpointUri;
        this.entityPath = entityPath;
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
    }

    private EventHubResponse() {
        this.authenticationType = null;
        this.connectionStringPrimaryKey = null;
        this.connectionStringSecondaryKey = null;
        this.createdTime = null;
        this.deadLetterSecret = null;
        this.deadLetterUri = null;
        this.endpointType = null;
        this.endpointUri = null;
        this.entityPath = null;
        this.provisioningState = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventHubResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String authenticationType;
        private @Nullable String connectionStringPrimaryKey;
        private @Nullable String connectionStringSecondaryKey;
        private String createdTime;
        private @Nullable String deadLetterSecret;
        private @Nullable String deadLetterUri;
        private String endpointType;
        private @Nullable String endpointUri;
        private @Nullable String entityPath;
        private String provisioningState;

        public Builder() {
    	      // Empty
        }

        public Builder(EventHubResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationType = defaults.authenticationType;
    	      this.connectionStringPrimaryKey = defaults.connectionStringPrimaryKey;
    	      this.connectionStringSecondaryKey = defaults.connectionStringSecondaryKey;
    	      this.createdTime = defaults.createdTime;
    	      this.deadLetterSecret = defaults.deadLetterSecret;
    	      this.deadLetterUri = defaults.deadLetterUri;
    	      this.endpointType = defaults.endpointType;
    	      this.endpointUri = defaults.endpointUri;
    	      this.entityPath = defaults.entityPath;
    	      this.provisioningState = defaults.provisioningState;
        }

        public Builder setAuthenticationType(@Nullable String authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }

        public Builder setConnectionStringPrimaryKey(@Nullable String connectionStringPrimaryKey) {
            this.connectionStringPrimaryKey = connectionStringPrimaryKey;
            return this;
        }

        public Builder setConnectionStringSecondaryKey(@Nullable String connectionStringSecondaryKey) {
            this.connectionStringSecondaryKey = connectionStringSecondaryKey;
            return this;
        }

        public Builder setCreatedTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }

        public Builder setDeadLetterSecret(@Nullable String deadLetterSecret) {
            this.deadLetterSecret = deadLetterSecret;
            return this;
        }

        public Builder setDeadLetterUri(@Nullable String deadLetterUri) {
            this.deadLetterUri = deadLetterUri;
            return this;
        }

        public Builder setEndpointType(String endpointType) {
            this.endpointType = Objects.requireNonNull(endpointType);
            return this;
        }

        public Builder setEndpointUri(@Nullable String endpointUri) {
            this.endpointUri = endpointUri;
            return this;
        }

        public Builder setEntityPath(@Nullable String entityPath) {
            this.entityPath = entityPath;
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public EventHubResponse build() {
            return new EventHubResponse(authenticationType, connectionStringPrimaryKey, connectionStringSecondaryKey, createdTime, deadLetterSecret, deadLetterUri, endpointType, endpointUri, entityPath, provisioningState);
        }
    }
}
