// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.botservice.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The parameters to provide for the Bot.
 * 
 */
public final class BotPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final BotPropertiesResponse Empty = new BotPropertiesResponse();

    /**
     * Contains resource all settings defined as key/value pairs.
     * 
     */
    @Import(name="allSettings")
      private final @Nullable Map<String,String> allSettings;

    public Map<String,String> getAllSettings() {
        return this.allSettings == null ? Map.of() : this.allSettings;
    }

    /**
     * The hint (e.g. keyVault secret resourceId) on how to fetch the app secret
     * 
     */
    @Import(name="appPasswordHint")
      private final @Nullable String appPasswordHint;

    public Optional<String> getAppPasswordHint() {
        return this.appPasswordHint == null ? Optional.empty() : Optional.ofNullable(this.appPasswordHint);
    }

    /**
     * The CMK encryption status
     * 
     */
    @Import(name="cmekEncryptionStatus", required=true)
      private final String cmekEncryptionStatus;

    public String getCmekEncryptionStatus() {
        return this.cmekEncryptionStatus;
    }

    /**
     * The CMK Url
     * 
     */
    @Import(name="cmekKeyVaultUrl")
      private final @Nullable String cmekKeyVaultUrl;

    public Optional<String> getCmekKeyVaultUrl() {
        return this.cmekKeyVaultUrl == null ? Optional.empty() : Optional.ofNullable(this.cmekKeyVaultUrl);
    }

    /**
     * Collection of channels for which the bot is configured
     * 
     */
    @Import(name="configuredChannels", required=true)
      private final List<String> configuredChannels;

    public List<String> getConfiguredChannels() {
        return this.configuredChannels;
    }

    /**
     * The description of the bot
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> getDescription() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * The Application Insights key
     * 
     */
    @Import(name="developerAppInsightKey")
      private final @Nullable String developerAppInsightKey;

    public Optional<String> getDeveloperAppInsightKey() {
        return this.developerAppInsightKey == null ? Optional.empty() : Optional.ofNullable(this.developerAppInsightKey);
    }

    /**
     * The Application Insights Api Key
     * 
     */
    @Import(name="developerAppInsightsApiKey")
      private final @Nullable String developerAppInsightsApiKey;

    public Optional<String> getDeveloperAppInsightsApiKey() {
        return this.developerAppInsightsApiKey == null ? Optional.empty() : Optional.ofNullable(this.developerAppInsightsApiKey);
    }

    /**
     * The Application Insights App Id
     * 
     */
    @Import(name="developerAppInsightsApplicationId")
      private final @Nullable String developerAppInsightsApplicationId;

    public Optional<String> getDeveloperAppInsightsApplicationId() {
        return this.developerAppInsightsApplicationId == null ? Optional.empty() : Optional.ofNullable(this.developerAppInsightsApplicationId);
    }

    /**
     * Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
     * 
     */
    @Import(name="disableLocalAuth")
      private final @Nullable Boolean disableLocalAuth;

    public Optional<Boolean> getDisableLocalAuth() {
        return this.disableLocalAuth == null ? Optional.empty() : Optional.ofNullable(this.disableLocalAuth);
    }

    /**
     * The Name of the bot
     * 
     */
    @Import(name="displayName", required=true)
      private final String displayName;

    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Collection of channels for which the bot is enabled
     * 
     */
    @Import(name="enabledChannels", required=true)
      private final List<String> enabledChannels;

    public List<String> getEnabledChannels() {
        return this.enabledChannels;
    }

    /**
     * The bot's endpoint
     * 
     */
    @Import(name="endpoint", required=true)
      private final String endpoint;

    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The bot's endpoint version
     * 
     */
    @Import(name="endpointVersion", required=true)
      private final String endpointVersion;

    public String getEndpointVersion() {
        return this.endpointVersion;
    }

    /**
     * The Icon Url of the bot
     * 
     */
    @Import(name="iconUrl")
      private final @Nullable String iconUrl;

    public Optional<String> getIconUrl() {
        return this.iconUrl == null ? Optional.empty() : Optional.ofNullable(this.iconUrl);
    }

    /**
     * Whether Cmek is enabled
     * 
     */
    @Import(name="isCmekEnabled")
      private final @Nullable Boolean isCmekEnabled;

    public Optional<Boolean> getIsCmekEnabled() {
        return this.isCmekEnabled == null ? Optional.empty() : Optional.ofNullable(this.isCmekEnabled);
    }

    /**
     * Whether the bot is developerAppInsightsApiKey set
     * 
     */
    @Import(name="isDeveloperAppInsightsApiKeySet", required=true)
      private final Boolean isDeveloperAppInsightsApiKeySet;

    public Boolean getIsDeveloperAppInsightsApiKeySet() {
        return this.isDeveloperAppInsightsApiKeySet;
    }

    /**
     * Whether the bot is streaming supported
     * 
     */
    @Import(name="isStreamingSupported")
      private final @Nullable Boolean isStreamingSupported;

    public Optional<Boolean> getIsStreamingSupported() {
        return this.isStreamingSupported == null ? Optional.empty() : Optional.ofNullable(this.isStreamingSupported);
    }

    /**
     * Collection of LUIS App Ids
     * 
     */
    @Import(name="luisAppIds")
      private final @Nullable List<String> luisAppIds;

    public List<String> getLuisAppIds() {
        return this.luisAppIds == null ? List.of() : this.luisAppIds;
    }

    /**
     * The LUIS Key
     * 
     */
    @Import(name="luisKey")
      private final @Nullable String luisKey;

    public Optional<String> getLuisKey() {
        return this.luisKey == null ? Optional.empty() : Optional.ofNullable(this.luisKey);
    }

    /**
     * The bot's manifest url
     * 
     */
    @Import(name="manifestUrl")
      private final @Nullable String manifestUrl;

    public Optional<String> getManifestUrl() {
        return this.manifestUrl == null ? Optional.empty() : Optional.ofNullable(this.manifestUrl);
    }

    /**
     * Token used to migrate non Azure bot to azure subscription
     * 
     */
    @Import(name="migrationToken", required=true)
      private final String migrationToken;

    public String getMigrationToken() {
        return this.migrationToken;
    }

    /**
     * Microsoft App Id for the bot
     * 
     */
    @Import(name="msaAppId", required=true)
      private final String msaAppId;

    public String getMsaAppId() {
        return this.msaAppId;
    }

    /**
     * Microsoft App Managed Identity Resource Id for the bot
     * 
     */
    @Import(name="msaAppMSIResourceId")
      private final @Nullable String msaAppMSIResourceId;

    public Optional<String> getMsaAppMSIResourceId() {
        return this.msaAppMSIResourceId == null ? Optional.empty() : Optional.ofNullable(this.msaAppMSIResourceId);
    }

    /**
     * Microsoft App Tenant Id for the bot
     * 
     */
    @Import(name="msaAppTenantId")
      private final @Nullable String msaAppTenantId;

    public Optional<String> getMsaAppTenantId() {
        return this.msaAppTenantId == null ? Optional.empty() : Optional.ofNullable(this.msaAppTenantId);
    }

    /**
     * Microsoft App Type for the bot
     * 
     */
    @Import(name="msaAppType")
      private final @Nullable String msaAppType;

    public Optional<String> getMsaAppType() {
        return this.msaAppType == null ? Optional.empty() : Optional.ofNullable(this.msaAppType);
    }

    /**
     * The hint to browser (e.g. protocol handler) on how to open the bot for authoring
     * 
     */
    @Import(name="openWithHint")
      private final @Nullable String openWithHint;

    public Optional<String> getOpenWithHint() {
        return this.openWithHint == null ? Optional.empty() : Optional.ofNullable(this.openWithHint);
    }

    /**
     * Contains resource parameters defined as key/value pairs.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Map<String,String> parameters;

    public Map<String,String> getParameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }

    /**
     * Provisioning state of the resource
     * 
     */
    @Import(name="provisioningState", required=true)
      private final String provisioningState;

    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Whether the bot is in an isolated network
     * 
     */
    @Import(name="publicNetworkAccess")
      private final @Nullable String publicNetworkAccess;

    public Optional<String> getPublicNetworkAccess() {
        return this.publicNetworkAccess == null ? Optional.empty() : Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * Publishing credentials of the resource
     * 
     */
    @Import(name="publishingCredentials")
      private final @Nullable String publishingCredentials;

    public Optional<String> getPublishingCredentials() {
        return this.publishingCredentials == null ? Optional.empty() : Optional.ofNullable(this.publishingCredentials);
    }

    /**
     * The channel schema transformation version for the bot
     * 
     */
    @Import(name="schemaTransformationVersion")
      private final @Nullable String schemaTransformationVersion;

    public Optional<String> getSchemaTransformationVersion() {
        return this.schemaTransformationVersion == null ? Optional.empty() : Optional.ofNullable(this.schemaTransformationVersion);
    }

    /**
     * The storage resourceId for the bot
     * 
     */
    @Import(name="storageResourceId")
      private final @Nullable String storageResourceId;

    public Optional<String> getStorageResourceId() {
        return this.storageResourceId == null ? Optional.empty() : Optional.ofNullable(this.storageResourceId);
    }

    public BotPropertiesResponse(
        @Nullable Map<String,String> allSettings,
        @Nullable String appPasswordHint,
        String cmekEncryptionStatus,
        @Nullable String cmekKeyVaultUrl,
        List<String> configuredChannels,
        @Nullable String description,
        @Nullable String developerAppInsightKey,
        @Nullable String developerAppInsightsApiKey,
        @Nullable String developerAppInsightsApplicationId,
        @Nullable Boolean disableLocalAuth,
        String displayName,
        List<String> enabledChannels,
        String endpoint,
        String endpointVersion,
        @Nullable String iconUrl,
        @Nullable Boolean isCmekEnabled,
        Boolean isDeveloperAppInsightsApiKeySet,
        @Nullable Boolean isStreamingSupported,
        @Nullable List<String> luisAppIds,
        @Nullable String luisKey,
        @Nullable String manifestUrl,
        String migrationToken,
        String msaAppId,
        @Nullable String msaAppMSIResourceId,
        @Nullable String msaAppTenantId,
        @Nullable String msaAppType,
        @Nullable String openWithHint,
        @Nullable Map<String,String> parameters,
        String provisioningState,
        @Nullable String publicNetworkAccess,
        @Nullable String publishingCredentials,
        @Nullable String schemaTransformationVersion,
        @Nullable String storageResourceId) {
        this.allSettings = allSettings;
        this.appPasswordHint = appPasswordHint;
        this.cmekEncryptionStatus = Objects.requireNonNull(cmekEncryptionStatus, "expected parameter 'cmekEncryptionStatus' to be non-null");
        this.cmekKeyVaultUrl = cmekKeyVaultUrl;
        this.configuredChannels = Objects.requireNonNull(configuredChannels, "expected parameter 'configuredChannels' to be non-null");
        this.description = description;
        this.developerAppInsightKey = developerAppInsightKey;
        this.developerAppInsightsApiKey = developerAppInsightsApiKey;
        this.developerAppInsightsApplicationId = developerAppInsightsApplicationId;
        this.disableLocalAuth = disableLocalAuth;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.enabledChannels = Objects.requireNonNull(enabledChannels, "expected parameter 'enabledChannels' to be non-null");
        this.endpoint = Objects.requireNonNull(endpoint, "expected parameter 'endpoint' to be non-null");
        this.endpointVersion = Objects.requireNonNull(endpointVersion, "expected parameter 'endpointVersion' to be non-null");
        this.iconUrl = iconUrl;
        this.isCmekEnabled = isCmekEnabled;
        this.isDeveloperAppInsightsApiKeySet = Objects.requireNonNull(isDeveloperAppInsightsApiKeySet, "expected parameter 'isDeveloperAppInsightsApiKeySet' to be non-null");
        this.isStreamingSupported = isStreamingSupported == null ? false : isStreamingSupported;
        this.luisAppIds = luisAppIds;
        this.luisKey = luisKey;
        this.manifestUrl = manifestUrl;
        this.migrationToken = Objects.requireNonNull(migrationToken, "expected parameter 'migrationToken' to be non-null");
        this.msaAppId = Objects.requireNonNull(msaAppId, "expected parameter 'msaAppId' to be non-null");
        this.msaAppMSIResourceId = msaAppMSIResourceId;
        this.msaAppTenantId = msaAppTenantId;
        this.msaAppType = msaAppType;
        this.openWithHint = openWithHint;
        this.parameters = parameters;
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.publicNetworkAccess = publicNetworkAccess == null ? "Enabled" : publicNetworkAccess;
        this.publishingCredentials = publishingCredentials;
        this.schemaTransformationVersion = schemaTransformationVersion;
        this.storageResourceId = storageResourceId;
    }

    private BotPropertiesResponse() {
        this.allSettings = Map.of();
        this.appPasswordHint = null;
        this.cmekEncryptionStatus = null;
        this.cmekKeyVaultUrl = null;
        this.configuredChannels = List.of();
        this.description = null;
        this.developerAppInsightKey = null;
        this.developerAppInsightsApiKey = null;
        this.developerAppInsightsApplicationId = null;
        this.disableLocalAuth = null;
        this.displayName = null;
        this.enabledChannels = List.of();
        this.endpoint = null;
        this.endpointVersion = null;
        this.iconUrl = null;
        this.isCmekEnabled = null;
        this.isDeveloperAppInsightsApiKeySet = null;
        this.isStreamingSupported = null;
        this.luisAppIds = List.of();
        this.luisKey = null;
        this.manifestUrl = null;
        this.migrationToken = null;
        this.msaAppId = null;
        this.msaAppMSIResourceId = null;
        this.msaAppTenantId = null;
        this.msaAppType = null;
        this.openWithHint = null;
        this.parameters = Map.of();
        this.provisioningState = null;
        this.publicNetworkAccess = null;
        this.publishingCredentials = null;
        this.schemaTransformationVersion = null;
        this.storageResourceId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BotPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Map<String,String> allSettings;
        private @Nullable String appPasswordHint;
        private String cmekEncryptionStatus;
        private @Nullable String cmekKeyVaultUrl;
        private List<String> configuredChannels;
        private @Nullable String description;
        private @Nullable String developerAppInsightKey;
        private @Nullable String developerAppInsightsApiKey;
        private @Nullable String developerAppInsightsApplicationId;
        private @Nullable Boolean disableLocalAuth;
        private String displayName;
        private List<String> enabledChannels;
        private String endpoint;
        private String endpointVersion;
        private @Nullable String iconUrl;
        private @Nullable Boolean isCmekEnabled;
        private Boolean isDeveloperAppInsightsApiKeySet;
        private @Nullable Boolean isStreamingSupported;
        private @Nullable List<String> luisAppIds;
        private @Nullable String luisKey;
        private @Nullable String manifestUrl;
        private String migrationToken;
        private String msaAppId;
        private @Nullable String msaAppMSIResourceId;
        private @Nullable String msaAppTenantId;
        private @Nullable String msaAppType;
        private @Nullable String openWithHint;
        private @Nullable Map<String,String> parameters;
        private String provisioningState;
        private @Nullable String publicNetworkAccess;
        private @Nullable String publishingCredentials;
        private @Nullable String schemaTransformationVersion;
        private @Nullable String storageResourceId;

        public Builder() {
    	      // Empty
        }

        public Builder(BotPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allSettings = defaults.allSettings;
    	      this.appPasswordHint = defaults.appPasswordHint;
    	      this.cmekEncryptionStatus = defaults.cmekEncryptionStatus;
    	      this.cmekKeyVaultUrl = defaults.cmekKeyVaultUrl;
    	      this.configuredChannels = defaults.configuredChannels;
    	      this.description = defaults.description;
    	      this.developerAppInsightKey = defaults.developerAppInsightKey;
    	      this.developerAppInsightsApiKey = defaults.developerAppInsightsApiKey;
    	      this.developerAppInsightsApplicationId = defaults.developerAppInsightsApplicationId;
    	      this.disableLocalAuth = defaults.disableLocalAuth;
    	      this.displayName = defaults.displayName;
    	      this.enabledChannels = defaults.enabledChannels;
    	      this.endpoint = defaults.endpoint;
    	      this.endpointVersion = defaults.endpointVersion;
    	      this.iconUrl = defaults.iconUrl;
    	      this.isCmekEnabled = defaults.isCmekEnabled;
    	      this.isDeveloperAppInsightsApiKeySet = defaults.isDeveloperAppInsightsApiKeySet;
    	      this.isStreamingSupported = defaults.isStreamingSupported;
    	      this.luisAppIds = defaults.luisAppIds;
    	      this.luisKey = defaults.luisKey;
    	      this.manifestUrl = defaults.manifestUrl;
    	      this.migrationToken = defaults.migrationToken;
    	      this.msaAppId = defaults.msaAppId;
    	      this.msaAppMSIResourceId = defaults.msaAppMSIResourceId;
    	      this.msaAppTenantId = defaults.msaAppTenantId;
    	      this.msaAppType = defaults.msaAppType;
    	      this.openWithHint = defaults.openWithHint;
    	      this.parameters = defaults.parameters;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.publishingCredentials = defaults.publishingCredentials;
    	      this.schemaTransformationVersion = defaults.schemaTransformationVersion;
    	      this.storageResourceId = defaults.storageResourceId;
        }

        public Builder allSettings(@Nullable Map<String,String> allSettings) {
            this.allSettings = allSettings;
            return this;
        }

        public Builder appPasswordHint(@Nullable String appPasswordHint) {
            this.appPasswordHint = appPasswordHint;
            return this;
        }

        public Builder cmekEncryptionStatus(String cmekEncryptionStatus) {
            this.cmekEncryptionStatus = Objects.requireNonNull(cmekEncryptionStatus);
            return this;
        }

        public Builder cmekKeyVaultUrl(@Nullable String cmekKeyVaultUrl) {
            this.cmekKeyVaultUrl = cmekKeyVaultUrl;
            return this;
        }

        public Builder configuredChannels(List<String> configuredChannels) {
            this.configuredChannels = Objects.requireNonNull(configuredChannels);
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder developerAppInsightKey(@Nullable String developerAppInsightKey) {
            this.developerAppInsightKey = developerAppInsightKey;
            return this;
        }

        public Builder developerAppInsightsApiKey(@Nullable String developerAppInsightsApiKey) {
            this.developerAppInsightsApiKey = developerAppInsightsApiKey;
            return this;
        }

        public Builder developerAppInsightsApplicationId(@Nullable String developerAppInsightsApplicationId) {
            this.developerAppInsightsApplicationId = developerAppInsightsApplicationId;
            return this;
        }

        public Builder disableLocalAuth(@Nullable Boolean disableLocalAuth) {
            this.disableLocalAuth = disableLocalAuth;
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder enabledChannels(List<String> enabledChannels) {
            this.enabledChannels = Objects.requireNonNull(enabledChannels);
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }

        public Builder endpointVersion(String endpointVersion) {
            this.endpointVersion = Objects.requireNonNull(endpointVersion);
            return this;
        }

        public Builder iconUrl(@Nullable String iconUrl) {
            this.iconUrl = iconUrl;
            return this;
        }

        public Builder isCmekEnabled(@Nullable Boolean isCmekEnabled) {
            this.isCmekEnabled = isCmekEnabled;
            return this;
        }

        public Builder isDeveloperAppInsightsApiKeySet(Boolean isDeveloperAppInsightsApiKeySet) {
            this.isDeveloperAppInsightsApiKeySet = Objects.requireNonNull(isDeveloperAppInsightsApiKeySet);
            return this;
        }

        public Builder isStreamingSupported(@Nullable Boolean isStreamingSupported) {
            this.isStreamingSupported = isStreamingSupported;
            return this;
        }

        public Builder luisAppIds(@Nullable List<String> luisAppIds) {
            this.luisAppIds = luisAppIds;
            return this;
        }

        public Builder luisKey(@Nullable String luisKey) {
            this.luisKey = luisKey;
            return this;
        }

        public Builder manifestUrl(@Nullable String manifestUrl) {
            this.manifestUrl = manifestUrl;
            return this;
        }

        public Builder migrationToken(String migrationToken) {
            this.migrationToken = Objects.requireNonNull(migrationToken);
            return this;
        }

        public Builder msaAppId(String msaAppId) {
            this.msaAppId = Objects.requireNonNull(msaAppId);
            return this;
        }

        public Builder msaAppMSIResourceId(@Nullable String msaAppMSIResourceId) {
            this.msaAppMSIResourceId = msaAppMSIResourceId;
            return this;
        }

        public Builder msaAppTenantId(@Nullable String msaAppTenantId) {
            this.msaAppTenantId = msaAppTenantId;
            return this;
        }

        public Builder msaAppType(@Nullable String msaAppType) {
            this.msaAppType = msaAppType;
            return this;
        }

        public Builder openWithHint(@Nullable String openWithHint) {
            this.openWithHint = openWithHint;
            return this;
        }

        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publishingCredentials(@Nullable String publishingCredentials) {
            this.publishingCredentials = publishingCredentials;
            return this;
        }

        public Builder schemaTransformationVersion(@Nullable String schemaTransformationVersion) {
            this.schemaTransformationVersion = schemaTransformationVersion;
            return this;
        }

        public Builder storageResourceId(@Nullable String storageResourceId) {
            this.storageResourceId = storageResourceId;
            return this;
        }
        public BotPropertiesResponse build() {
            return new BotPropertiesResponse(allSettings, appPasswordHint, cmekEncryptionStatus, cmekKeyVaultUrl, configuredChannels, description, developerAppInsightKey, developerAppInsightsApiKey, developerAppInsightsApplicationId, disableLocalAuth, displayName, enabledChannels, endpoint, endpointVersion, iconUrl, isCmekEnabled, isDeveloperAppInsightsApiKeySet, isStreamingSupported, luisAppIds, luisKey, manifestUrl, migrationToken, msaAppId, msaAppMSIResourceId, msaAppTenantId, msaAppType, openWithHint, parameters, provisioningState, publicNetworkAccess, publishingCredentials, schemaTransformationVersion, storageResourceId);
        }
    }
}
