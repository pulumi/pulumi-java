// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class RosettaNetPipActivityBehaviorResponse {
    private final String actionType;
    private final Boolean isAuthorizationRequired;
    private final Boolean isSecuredTransportRequired;
    private final Boolean nonRepudiationOfOriginAndContent;
    private final String persistentConfidentialityScope;
    private final String responseType;
    private final Integer retryCount;
    private final Integer timeToPerformInSeconds;

    @OutputCustomType.Constructor({"actionType","isAuthorizationRequired","isSecuredTransportRequired","nonRepudiationOfOriginAndContent","persistentConfidentialityScope","responseType","retryCount","timeToPerformInSeconds"})
    private RosettaNetPipActivityBehaviorResponse(
        String actionType,
        Boolean isAuthorizationRequired,
        Boolean isSecuredTransportRequired,
        Boolean nonRepudiationOfOriginAndContent,
        String persistentConfidentialityScope,
        String responseType,
        Integer retryCount,
        Integer timeToPerformInSeconds) {
        this.actionType = Objects.requireNonNull(actionType);
        this.isAuthorizationRequired = Objects.requireNonNull(isAuthorizationRequired);
        this.isSecuredTransportRequired = Objects.requireNonNull(isSecuredTransportRequired);
        this.nonRepudiationOfOriginAndContent = Objects.requireNonNull(nonRepudiationOfOriginAndContent);
        this.persistentConfidentialityScope = Objects.requireNonNull(persistentConfidentialityScope);
        this.responseType = Objects.requireNonNull(responseType);
        this.retryCount = Objects.requireNonNull(retryCount);
        this.timeToPerformInSeconds = Objects.requireNonNull(timeToPerformInSeconds);
    }

    public String getActionType() {
        return this.actionType;
    }
    public Boolean getIsAuthorizationRequired() {
        return this.isAuthorizationRequired;
    }
    public Boolean getIsSecuredTransportRequired() {
        return this.isSecuredTransportRequired;
    }
    public Boolean getNonRepudiationOfOriginAndContent() {
        return this.nonRepudiationOfOriginAndContent;
    }
    public String getPersistentConfidentialityScope() {
        return this.persistentConfidentialityScope;
    }
    public String getResponseType() {
        return this.responseType;
    }
    public Integer getRetryCount() {
        return this.retryCount;
    }
    public Integer getTimeToPerformInSeconds() {
        return this.timeToPerformInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RosettaNetPipActivityBehaviorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String actionType;
        private Boolean isAuthorizationRequired;
        private Boolean isSecuredTransportRequired;
        private Boolean nonRepudiationOfOriginAndContent;
        private String persistentConfidentialityScope;
        private String responseType;
        private Integer retryCount;
        private Integer timeToPerformInSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(RosettaNetPipActivityBehaviorResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionType = defaults.actionType;
    	      this.isAuthorizationRequired = defaults.isAuthorizationRequired;
    	      this.isSecuredTransportRequired = defaults.isSecuredTransportRequired;
    	      this.nonRepudiationOfOriginAndContent = defaults.nonRepudiationOfOriginAndContent;
    	      this.persistentConfidentialityScope = defaults.persistentConfidentialityScope;
    	      this.responseType = defaults.responseType;
    	      this.retryCount = defaults.retryCount;
    	      this.timeToPerformInSeconds = defaults.timeToPerformInSeconds;
        }

        public Builder setActionType(String actionType) {
            this.actionType = Objects.requireNonNull(actionType);
            return this;
        }

        public Builder setIsAuthorizationRequired(Boolean isAuthorizationRequired) {
            this.isAuthorizationRequired = Objects.requireNonNull(isAuthorizationRequired);
            return this;
        }

        public Builder setIsSecuredTransportRequired(Boolean isSecuredTransportRequired) {
            this.isSecuredTransportRequired = Objects.requireNonNull(isSecuredTransportRequired);
            return this;
        }

        public Builder setNonRepudiationOfOriginAndContent(Boolean nonRepudiationOfOriginAndContent) {
            this.nonRepudiationOfOriginAndContent = Objects.requireNonNull(nonRepudiationOfOriginAndContent);
            return this;
        }

        public Builder setPersistentConfidentialityScope(String persistentConfidentialityScope) {
            this.persistentConfidentialityScope = Objects.requireNonNull(persistentConfidentialityScope);
            return this;
        }

        public Builder setResponseType(String responseType) {
            this.responseType = Objects.requireNonNull(responseType);
            return this;
        }

        public Builder setRetryCount(Integer retryCount) {
            this.retryCount = Objects.requireNonNull(retryCount);
            return this;
        }

        public Builder setTimeToPerformInSeconds(Integer timeToPerformInSeconds) {
            this.timeToPerformInSeconds = Objects.requireNonNull(timeToPerformInSeconds);
            return this;
        }

        public RosettaNetPipActivityBehaviorResponse build() {
            return new RosettaNetPipActivityBehaviorResponse(actionType, isAuthorizationRequired, isSecuredTransportRequired, nonRepudiationOfOriginAndContent, persistentConfidentialityScope, responseType, retryCount, timeToPerformInSeconds);
        }
    }
}
