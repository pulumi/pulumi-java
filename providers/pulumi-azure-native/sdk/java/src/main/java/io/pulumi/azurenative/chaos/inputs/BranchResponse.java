// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.chaos.inputs;

import io.pulumi.azurenative.chaos.inputs.ContinuousActionResponse;
import io.pulumi.azurenative.chaos.inputs.DelayActionResponse;
import io.pulumi.azurenative.chaos.inputs.DiscreteActionResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Model that represents a branch in the step.
 * 
 */
public final class BranchResponse extends io.pulumi.resources.InvokeArgs {

    public static final BranchResponse Empty = new BranchResponse();

    /**
     * List of actions.
     * 
     */
    @Import(name="actions", required=true)
      private final List<Object> actions;

    public List<Object> getActions() {
        return this.actions;
    }

    /**
     * String of the branch name.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    public BranchResponse(
        List<Object> actions,
        String name) {
        this.actions = Objects.requireNonNull(actions, "expected parameter 'actions' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
    }

    private BranchResponse() {
        this.actions = List.of();
        this.name = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BranchResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<Object> actions;
        private String name;

        public Builder() {
    	      // Empty
        }

        public Builder(BranchResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.name = defaults.name;
        }

        public Builder actions(List<Object> actions) {
            this.actions = Objects.requireNonNull(actions);
            return this;
        }
        public Builder actions(Object... actions) {
            return actions(List.of(actions));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }        public BranchResponse build() {
            return new BranchResponse(actions, name);
        }
    }
}
