// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.edgeorder.outputs;

import io.pulumi.azurenative.edgeorder.outputs.AvailabilityInformationResponse;
import io.pulumi.azurenative.edgeorder.outputs.ConfigurationResponse;
import io.pulumi.azurenative.edgeorder.outputs.CostInformationResponse;
import io.pulumi.azurenative.edgeorder.outputs.DescriptionResponse;
import io.pulumi.azurenative.edgeorder.outputs.FilterablePropertyResponse;
import io.pulumi.azurenative.edgeorder.outputs.HierarchyInformationResponse;
import io.pulumi.azurenative.edgeorder.outputs.ImageInformationResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class ProductResponse {
    private final AvailabilityInformationResponse availabilityInformation;
    private final List<ConfigurationResponse> configurations;
    private final CostInformationResponse costInformation;
    private final DescriptionResponse description;
    private final String displayName;
    private final List<FilterablePropertyResponse> filterableProperties;
    private final HierarchyInformationResponse hierarchyInformation;
    private final List<ImageInformationResponse> imageInformation;

    @OutputCustomType.Constructor({"availabilityInformation","configurations","costInformation","description","displayName","filterableProperties","hierarchyInformation","imageInformation"})
    private ProductResponse(
        AvailabilityInformationResponse availabilityInformation,
        List<ConfigurationResponse> configurations,
        CostInformationResponse costInformation,
        DescriptionResponse description,
        String displayName,
        List<FilterablePropertyResponse> filterableProperties,
        HierarchyInformationResponse hierarchyInformation,
        List<ImageInformationResponse> imageInformation) {
        this.availabilityInformation = Objects.requireNonNull(availabilityInformation);
        this.configurations = Objects.requireNonNull(configurations);
        this.costInformation = Objects.requireNonNull(costInformation);
        this.description = Objects.requireNonNull(description);
        this.displayName = Objects.requireNonNull(displayName);
        this.filterableProperties = Objects.requireNonNull(filterableProperties);
        this.hierarchyInformation = Objects.requireNonNull(hierarchyInformation);
        this.imageInformation = Objects.requireNonNull(imageInformation);
    }

    public AvailabilityInformationResponse getAvailabilityInformation() {
        return this.availabilityInformation;
    }
    public List<ConfigurationResponse> getConfigurations() {
        return this.configurations;
    }
    public CostInformationResponse getCostInformation() {
        return this.costInformation;
    }
    public DescriptionResponse getDescription() {
        return this.description;
    }
    public String getDisplayName() {
        return this.displayName;
    }
    public List<FilterablePropertyResponse> getFilterableProperties() {
        return this.filterableProperties;
    }
    public HierarchyInformationResponse getHierarchyInformation() {
        return this.hierarchyInformation;
    }
    public List<ImageInformationResponse> getImageInformation() {
        return this.imageInformation;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProductResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AvailabilityInformationResponse availabilityInformation;
        private List<ConfigurationResponse> configurations;
        private CostInformationResponse costInformation;
        private DescriptionResponse description;
        private String displayName;
        private List<FilterablePropertyResponse> filterableProperties;
        private HierarchyInformationResponse hierarchyInformation;
        private List<ImageInformationResponse> imageInformation;

        public Builder() {
    	      // Empty
        }

        public Builder(ProductResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityInformation = defaults.availabilityInformation;
    	      this.configurations = defaults.configurations;
    	      this.costInformation = defaults.costInformation;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.filterableProperties = defaults.filterableProperties;
    	      this.hierarchyInformation = defaults.hierarchyInformation;
    	      this.imageInformation = defaults.imageInformation;
        }

        public Builder setAvailabilityInformation(AvailabilityInformationResponse availabilityInformation) {
            this.availabilityInformation = Objects.requireNonNull(availabilityInformation);
            return this;
        }

        public Builder setConfigurations(List<ConfigurationResponse> configurations) {
            this.configurations = Objects.requireNonNull(configurations);
            return this;
        }

        public Builder setCostInformation(CostInformationResponse costInformation) {
            this.costInformation = Objects.requireNonNull(costInformation);
            return this;
        }

        public Builder setDescription(DescriptionResponse description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setFilterableProperties(List<FilterablePropertyResponse> filterableProperties) {
            this.filterableProperties = Objects.requireNonNull(filterableProperties);
            return this;
        }

        public Builder setHierarchyInformation(HierarchyInformationResponse hierarchyInformation) {
            this.hierarchyInformation = Objects.requireNonNull(hierarchyInformation);
            return this;
        }

        public Builder setImageInformation(List<ImageInformationResponse> imageInformation) {
            this.imageInformation = Objects.requireNonNull(imageInformation);
            return this;
        }

        public ProductResponse build() {
            return new ProductResponse(availabilityInformation, configurations, costInformation, description, displayName, filterableProperties, hierarchyInformation, imageInformation);
        }
    }
}
