// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.outputs;

import io.pulumi.azurenative.network.outputs.PacketCaptureFilterResponse;
import io.pulumi.azurenative.network.outputs.PacketCaptureStorageLocationResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetPacketCaptureResult {
    /**
     * Number of bytes captured per packet, the remaining bytes are truncated.
     * 
     */
    private final @Nullable Double bytesToCapturePerPacket;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private final String etag;
    /**
     * A list of packet capture filters.
     * 
     */
    private final @Nullable List<PacketCaptureFilterResponse> filters;
    /**
     * ID of the packet capture operation.
     * 
     */
    private final String id;
    /**
     * Name of the packet capture session.
     * 
     */
    private final String name;
    /**
     * The provisioning state of the packet capture session.
     * 
     */
    private final String provisioningState;
    /**
     * The storage location for a packet capture session.
     * 
     */
    private final PacketCaptureStorageLocationResponse storageLocation;
    /**
     * The ID of the targeted resource, only VM is currently supported.
     * 
     */
    private final String target;
    /**
     * Maximum duration of the capture session in seconds.
     * 
     */
    private final @Nullable Integer timeLimitInSeconds;
    /**
     * Maximum size of the capture output.
     * 
     */
    private final @Nullable Double totalBytesPerSession;

    @OutputCustomType.Constructor
    private GetPacketCaptureResult(
        @OutputCustomType.Parameter("bytesToCapturePerPacket") @Nullable Double bytesToCapturePerPacket,
        @OutputCustomType.Parameter("etag") String etag,
        @OutputCustomType.Parameter("filters") @Nullable List<PacketCaptureFilterResponse> filters,
        @OutputCustomType.Parameter("id") String id,
        @OutputCustomType.Parameter("name") String name,
        @OutputCustomType.Parameter("provisioningState") String provisioningState,
        @OutputCustomType.Parameter("storageLocation") PacketCaptureStorageLocationResponse storageLocation,
        @OutputCustomType.Parameter("target") String target,
        @OutputCustomType.Parameter("timeLimitInSeconds") @Nullable Integer timeLimitInSeconds,
        @OutputCustomType.Parameter("totalBytesPerSession") @Nullable Double totalBytesPerSession) {
        this.bytesToCapturePerPacket = bytesToCapturePerPacket;
        this.etag = etag;
        this.filters = filters;
        this.id = id;
        this.name = name;
        this.provisioningState = provisioningState;
        this.storageLocation = storageLocation;
        this.target = target;
        this.timeLimitInSeconds = timeLimitInSeconds;
        this.totalBytesPerSession = totalBytesPerSession;
    }

    /**
     * Number of bytes captured per packet, the remaining bytes are truncated.
     * 
    */
    public Optional<Double> getBytesToCapturePerPacket() {
        return Optional.ofNullable(this.bytesToCapturePerPacket);
    }
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
    */
    public String getEtag() {
        return this.etag;
    }
    /**
     * A list of packet capture filters.
     * 
    */
    public List<PacketCaptureFilterResponse> getFilters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * ID of the packet capture operation.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * Name of the packet capture session.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * The provisioning state of the packet capture session.
     * 
    */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The storage location for a packet capture session.
     * 
    */
    public PacketCaptureStorageLocationResponse getStorageLocation() {
        return this.storageLocation;
    }
    /**
     * The ID of the targeted resource, only VM is currently supported.
     * 
    */
    public String getTarget() {
        return this.target;
    }
    /**
     * Maximum duration of the capture session in seconds.
     * 
    */
    public Optional<Integer> getTimeLimitInSeconds() {
        return Optional.ofNullable(this.timeLimitInSeconds);
    }
    /**
     * Maximum size of the capture output.
     * 
    */
    public Optional<Double> getTotalBytesPerSession() {
        return Optional.ofNullable(this.totalBytesPerSession);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPacketCaptureResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Double bytesToCapturePerPacket;
        private String etag;
        private @Nullable List<PacketCaptureFilterResponse> filters;
        private String id;
        private String name;
        private String provisioningState;
        private PacketCaptureStorageLocationResponse storageLocation;
        private String target;
        private @Nullable Integer timeLimitInSeconds;
        private @Nullable Double totalBytesPerSession;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPacketCaptureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bytesToCapturePerPacket = defaults.bytesToCapturePerPacket;
    	      this.etag = defaults.etag;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.storageLocation = defaults.storageLocation;
    	      this.target = defaults.target;
    	      this.timeLimitInSeconds = defaults.timeLimitInSeconds;
    	      this.totalBytesPerSession = defaults.totalBytesPerSession;
        }

        public Builder bytesToCapturePerPacket(@Nullable Double bytesToCapturePerPacket) {
            this.bytesToCapturePerPacket = bytesToCapturePerPacket;
            return this;
        }

        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder filters(@Nullable List<PacketCaptureFilterResponse> filters) {
            this.filters = filters;
            return this;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder storageLocation(PacketCaptureStorageLocationResponse storageLocation) {
            this.storageLocation = Objects.requireNonNull(storageLocation);
            return this;
        }

        public Builder target(String target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }

        public Builder timeLimitInSeconds(@Nullable Integer timeLimitInSeconds) {
            this.timeLimitInSeconds = timeLimitInSeconds;
            return this;
        }

        public Builder totalBytesPerSession(@Nullable Double totalBytesPerSession) {
            this.totalBytesPerSession = totalBytesPerSession;
            return this;
        }
        public GetPacketCaptureResult build() {
            return new GetPacketCaptureResult(bytesToCapturePerPacket, etag, filters, id, name, provisioningState, storageLocation, target, timeLimitInSeconds, totalBytesPerSession);
        }
    }
}
