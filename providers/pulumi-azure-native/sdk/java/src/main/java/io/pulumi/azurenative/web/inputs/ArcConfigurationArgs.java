// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.enums.StorageType;
import io.pulumi.azurenative.web.inputs.FrontEndConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ArcConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ArcConfigurationArgs Empty = new ArcConfigurationArgs();

    @Import(name="artifactStorageAccessMode")
      private final @Nullable Output<String> artifactStorageAccessMode;

    public Output<String> getArtifactStorageAccessMode() {
        return this.artifactStorageAccessMode == null ? Output.empty() : this.artifactStorageAccessMode;
    }

    @Import(name="artifactStorageClassName")
      private final @Nullable Output<String> artifactStorageClassName;

    public Output<String> getArtifactStorageClassName() {
        return this.artifactStorageClassName == null ? Output.empty() : this.artifactStorageClassName;
    }

    @Import(name="artifactStorageMountPath")
      private final @Nullable Output<String> artifactStorageMountPath;

    public Output<String> getArtifactStorageMountPath() {
        return this.artifactStorageMountPath == null ? Output.empty() : this.artifactStorageMountPath;
    }

    @Import(name="artifactStorageNodeName")
      private final @Nullable Output<String> artifactStorageNodeName;

    public Output<String> getArtifactStorageNodeName() {
        return this.artifactStorageNodeName == null ? Output.empty() : this.artifactStorageNodeName;
    }

    @Import(name="artifactsStorageType")
      private final @Nullable Output<StorageType> artifactsStorageType;

    public Output<StorageType> getArtifactsStorageType() {
        return this.artifactsStorageType == null ? Output.empty() : this.artifactsStorageType;
    }

    @Import(name="frontEndServiceConfiguration")
      private final @Nullable Output<FrontEndConfigurationArgs> frontEndServiceConfiguration;

    public Output<FrontEndConfigurationArgs> getFrontEndServiceConfiguration() {
        return this.frontEndServiceConfiguration == null ? Output.empty() : this.frontEndServiceConfiguration;
    }

    @Import(name="kubeConfig")
      private final @Nullable Output<String> kubeConfig;

    public Output<String> getKubeConfig() {
        return this.kubeConfig == null ? Output.empty() : this.kubeConfig;
    }

    public ArcConfigurationArgs(
        @Nullable Output<String> artifactStorageAccessMode,
        @Nullable Output<String> artifactStorageClassName,
        @Nullable Output<String> artifactStorageMountPath,
        @Nullable Output<String> artifactStorageNodeName,
        @Nullable Output<StorageType> artifactsStorageType,
        @Nullable Output<FrontEndConfigurationArgs> frontEndServiceConfiguration,
        @Nullable Output<String> kubeConfig) {
        this.artifactStorageAccessMode = artifactStorageAccessMode;
        this.artifactStorageClassName = artifactStorageClassName;
        this.artifactStorageMountPath = artifactStorageMountPath;
        this.artifactStorageNodeName = artifactStorageNodeName;
        this.artifactsStorageType = artifactsStorageType;
        this.frontEndServiceConfiguration = frontEndServiceConfiguration;
        this.kubeConfig = kubeConfig;
    }

    private ArcConfigurationArgs() {
        this.artifactStorageAccessMode = Output.empty();
        this.artifactStorageClassName = Output.empty();
        this.artifactStorageMountPath = Output.empty();
        this.artifactStorageNodeName = Output.empty();
        this.artifactsStorageType = Output.empty();
        this.frontEndServiceConfiguration = Output.empty();
        this.kubeConfig = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ArcConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> artifactStorageAccessMode;
        private @Nullable Output<String> artifactStorageClassName;
        private @Nullable Output<String> artifactStorageMountPath;
        private @Nullable Output<String> artifactStorageNodeName;
        private @Nullable Output<StorageType> artifactsStorageType;
        private @Nullable Output<FrontEndConfigurationArgs> frontEndServiceConfiguration;
        private @Nullable Output<String> kubeConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(ArcConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactStorageAccessMode = defaults.artifactStorageAccessMode;
    	      this.artifactStorageClassName = defaults.artifactStorageClassName;
    	      this.artifactStorageMountPath = defaults.artifactStorageMountPath;
    	      this.artifactStorageNodeName = defaults.artifactStorageNodeName;
    	      this.artifactsStorageType = defaults.artifactsStorageType;
    	      this.frontEndServiceConfiguration = defaults.frontEndServiceConfiguration;
    	      this.kubeConfig = defaults.kubeConfig;
        }

        public Builder artifactStorageAccessMode(@Nullable Output<String> artifactStorageAccessMode) {
            this.artifactStorageAccessMode = artifactStorageAccessMode;
            return this;
        }

        public Builder artifactStorageAccessMode(@Nullable String artifactStorageAccessMode) {
            this.artifactStorageAccessMode = Output.ofNullable(artifactStorageAccessMode);
            return this;
        }

        public Builder artifactStorageClassName(@Nullable Output<String> artifactStorageClassName) {
            this.artifactStorageClassName = artifactStorageClassName;
            return this;
        }

        public Builder artifactStorageClassName(@Nullable String artifactStorageClassName) {
            this.artifactStorageClassName = Output.ofNullable(artifactStorageClassName);
            return this;
        }

        public Builder artifactStorageMountPath(@Nullable Output<String> artifactStorageMountPath) {
            this.artifactStorageMountPath = artifactStorageMountPath;
            return this;
        }

        public Builder artifactStorageMountPath(@Nullable String artifactStorageMountPath) {
            this.artifactStorageMountPath = Output.ofNullable(artifactStorageMountPath);
            return this;
        }

        public Builder artifactStorageNodeName(@Nullable Output<String> artifactStorageNodeName) {
            this.artifactStorageNodeName = artifactStorageNodeName;
            return this;
        }

        public Builder artifactStorageNodeName(@Nullable String artifactStorageNodeName) {
            this.artifactStorageNodeName = Output.ofNullable(artifactStorageNodeName);
            return this;
        }

        public Builder artifactsStorageType(@Nullable Output<StorageType> artifactsStorageType) {
            this.artifactsStorageType = artifactsStorageType;
            return this;
        }

        public Builder artifactsStorageType(@Nullable StorageType artifactsStorageType) {
            this.artifactsStorageType = Output.ofNullable(artifactsStorageType);
            return this;
        }

        public Builder frontEndServiceConfiguration(@Nullable Output<FrontEndConfigurationArgs> frontEndServiceConfiguration) {
            this.frontEndServiceConfiguration = frontEndServiceConfiguration;
            return this;
        }

        public Builder frontEndServiceConfiguration(@Nullable FrontEndConfigurationArgs frontEndServiceConfiguration) {
            this.frontEndServiceConfiguration = Output.ofNullable(frontEndServiceConfiguration);
            return this;
        }

        public Builder kubeConfig(@Nullable Output<String> kubeConfig) {
            this.kubeConfig = kubeConfig;
            return this;
        }

        public Builder kubeConfig(@Nullable String kubeConfig) {
            this.kubeConfig = Output.ofNullable(kubeConfig);
            return this;
        }
        public ArcConfigurationArgs build() {
            return new ArcConfigurationArgs(artifactStorageAccessMode, artifactStorageClassName, artifactStorageMountPath, artifactStorageNodeName, artifactsStorageType, frontEndServiceConfiguration, kubeConfig);
        }
    }
}
