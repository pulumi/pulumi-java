// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.inputs.ApplicationGatewayAuthenticationCertificateArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayAutoscaleConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayBackendAddressPoolArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayBackendHttpSettingsArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayCustomErrorArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayFrontendIPConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayFrontendPortArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayHttpListenerArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayIPConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayPrivateLinkConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayProbeArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayRedirectConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayRequestRoutingRuleArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayRewriteRuleSetArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewaySkuArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewaySslCertificateArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewaySslPolicyArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewaySslProfileArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayTrustedClientCertificateArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayTrustedRootCertificateArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayUrlPathMapArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayWebApplicationFirewallConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ManagedServiceIdentityArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationGatewayArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayArgs Empty = new ApplicationGatewayArgs();

    @InputImport(name="applicationGatewayName")
    private final @Nullable Input<String> applicationGatewayName;

    public Input<String> getApplicationGatewayName() {
        return this.applicationGatewayName == null ? Input.empty() : this.applicationGatewayName;
    }

    @InputImport(name="authenticationCertificates")
    private final @Nullable Input<List<ApplicationGatewayAuthenticationCertificateArgs>> authenticationCertificates;

    public Input<List<ApplicationGatewayAuthenticationCertificateArgs>> getAuthenticationCertificates() {
        return this.authenticationCertificates == null ? Input.empty() : this.authenticationCertificates;
    }

    @InputImport(name="autoscaleConfiguration")
    private final @Nullable Input<ApplicationGatewayAutoscaleConfigurationArgs> autoscaleConfiguration;

    public Input<ApplicationGatewayAutoscaleConfigurationArgs> getAutoscaleConfiguration() {
        return this.autoscaleConfiguration == null ? Input.empty() : this.autoscaleConfiguration;
    }

    @InputImport(name="backendAddressPools")
    private final @Nullable Input<List<ApplicationGatewayBackendAddressPoolArgs>> backendAddressPools;

    public Input<List<ApplicationGatewayBackendAddressPoolArgs>> getBackendAddressPools() {
        return this.backendAddressPools == null ? Input.empty() : this.backendAddressPools;
    }

    @InputImport(name="backendHttpSettingsCollection")
    private final @Nullable Input<List<ApplicationGatewayBackendHttpSettingsArgs>> backendHttpSettingsCollection;

    public Input<List<ApplicationGatewayBackendHttpSettingsArgs>> getBackendHttpSettingsCollection() {
        return this.backendHttpSettingsCollection == null ? Input.empty() : this.backendHttpSettingsCollection;
    }

    @InputImport(name="customErrorConfigurations")
    private final @Nullable Input<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations;

    public Input<List<ApplicationGatewayCustomErrorArgs>> getCustomErrorConfigurations() {
        return this.customErrorConfigurations == null ? Input.empty() : this.customErrorConfigurations;
    }

    @InputImport(name="enableFips")
    private final @Nullable Input<Boolean> enableFips;

    public Input<Boolean> getEnableFips() {
        return this.enableFips == null ? Input.empty() : this.enableFips;
    }

    @InputImport(name="enableHttp2")
    private final @Nullable Input<Boolean> enableHttp2;

    public Input<Boolean> getEnableHttp2() {
        return this.enableHttp2 == null ? Input.empty() : this.enableHttp2;
    }

    @InputImport(name="firewallPolicy")
    private final @Nullable Input<SubResourceArgs> firewallPolicy;

    public Input<SubResourceArgs> getFirewallPolicy() {
        return this.firewallPolicy == null ? Input.empty() : this.firewallPolicy;
    }

    @InputImport(name="forceFirewallPolicyAssociation")
    private final @Nullable Input<Boolean> forceFirewallPolicyAssociation;

    public Input<Boolean> getForceFirewallPolicyAssociation() {
        return this.forceFirewallPolicyAssociation == null ? Input.empty() : this.forceFirewallPolicyAssociation;
    }

    @InputImport(name="frontendIPConfigurations")
    private final @Nullable Input<List<ApplicationGatewayFrontendIPConfigurationArgs>> frontendIPConfigurations;

    public Input<List<ApplicationGatewayFrontendIPConfigurationArgs>> getFrontendIPConfigurations() {
        return this.frontendIPConfigurations == null ? Input.empty() : this.frontendIPConfigurations;
    }

    @InputImport(name="frontendPorts")
    private final @Nullable Input<List<ApplicationGatewayFrontendPortArgs>> frontendPorts;

    public Input<List<ApplicationGatewayFrontendPortArgs>> getFrontendPorts() {
        return this.frontendPorts == null ? Input.empty() : this.frontendPorts;
    }

    @InputImport(name="gatewayIPConfigurations")
    private final @Nullable Input<List<ApplicationGatewayIPConfigurationArgs>> gatewayIPConfigurations;

    public Input<List<ApplicationGatewayIPConfigurationArgs>> getGatewayIPConfigurations() {
        return this.gatewayIPConfigurations == null ? Input.empty() : this.gatewayIPConfigurations;
    }

    @InputImport(name="httpListeners")
    private final @Nullable Input<List<ApplicationGatewayHttpListenerArgs>> httpListeners;

    public Input<List<ApplicationGatewayHttpListenerArgs>> getHttpListeners() {
        return this.httpListeners == null ? Input.empty() : this.httpListeners;
    }

    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="identity")
    private final @Nullable Input<ManagedServiceIdentityArgs> identity;

    public Input<ManagedServiceIdentityArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="privateLinkConfigurations")
    private final @Nullable Input<List<ApplicationGatewayPrivateLinkConfigurationArgs>> privateLinkConfigurations;

    public Input<List<ApplicationGatewayPrivateLinkConfigurationArgs>> getPrivateLinkConfigurations() {
        return this.privateLinkConfigurations == null ? Input.empty() : this.privateLinkConfigurations;
    }

    @InputImport(name="probes")
    private final @Nullable Input<List<ApplicationGatewayProbeArgs>> probes;

    public Input<List<ApplicationGatewayProbeArgs>> getProbes() {
        return this.probes == null ? Input.empty() : this.probes;
    }

    @InputImport(name="redirectConfigurations")
    private final @Nullable Input<List<ApplicationGatewayRedirectConfigurationArgs>> redirectConfigurations;

    public Input<List<ApplicationGatewayRedirectConfigurationArgs>> getRedirectConfigurations() {
        return this.redirectConfigurations == null ? Input.empty() : this.redirectConfigurations;
    }

    @InputImport(name="requestRoutingRules")
    private final @Nullable Input<List<ApplicationGatewayRequestRoutingRuleArgs>> requestRoutingRules;

    public Input<List<ApplicationGatewayRequestRoutingRuleArgs>> getRequestRoutingRules() {
        return this.requestRoutingRules == null ? Input.empty() : this.requestRoutingRules;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="rewriteRuleSets")
    private final @Nullable Input<List<ApplicationGatewayRewriteRuleSetArgs>> rewriteRuleSets;

    public Input<List<ApplicationGatewayRewriteRuleSetArgs>> getRewriteRuleSets() {
        return this.rewriteRuleSets == null ? Input.empty() : this.rewriteRuleSets;
    }

    @InputImport(name="sku")
    private final @Nullable Input<ApplicationGatewaySkuArgs> sku;

    public Input<ApplicationGatewaySkuArgs> getSku() {
        return this.sku == null ? Input.empty() : this.sku;
    }

    @InputImport(name="sslCertificates")
    private final @Nullable Input<List<ApplicationGatewaySslCertificateArgs>> sslCertificates;

    public Input<List<ApplicationGatewaySslCertificateArgs>> getSslCertificates() {
        return this.sslCertificates == null ? Input.empty() : this.sslCertificates;
    }

    @InputImport(name="sslPolicy")
    private final @Nullable Input<ApplicationGatewaySslPolicyArgs> sslPolicy;

    public Input<ApplicationGatewaySslPolicyArgs> getSslPolicy() {
        return this.sslPolicy == null ? Input.empty() : this.sslPolicy;
    }

    @InputImport(name="sslProfiles")
    private final @Nullable Input<List<ApplicationGatewaySslProfileArgs>> sslProfiles;

    public Input<List<ApplicationGatewaySslProfileArgs>> getSslProfiles() {
        return this.sslProfiles == null ? Input.empty() : this.sslProfiles;
    }

    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="trustedClientCertificates")
    private final @Nullable Input<List<ApplicationGatewayTrustedClientCertificateArgs>> trustedClientCertificates;

    public Input<List<ApplicationGatewayTrustedClientCertificateArgs>> getTrustedClientCertificates() {
        return this.trustedClientCertificates == null ? Input.empty() : this.trustedClientCertificates;
    }

    @InputImport(name="trustedRootCertificates")
    private final @Nullable Input<List<ApplicationGatewayTrustedRootCertificateArgs>> trustedRootCertificates;

    public Input<List<ApplicationGatewayTrustedRootCertificateArgs>> getTrustedRootCertificates() {
        return this.trustedRootCertificates == null ? Input.empty() : this.trustedRootCertificates;
    }

    @InputImport(name="urlPathMaps")
    private final @Nullable Input<List<ApplicationGatewayUrlPathMapArgs>> urlPathMaps;

    public Input<List<ApplicationGatewayUrlPathMapArgs>> getUrlPathMaps() {
        return this.urlPathMaps == null ? Input.empty() : this.urlPathMaps;
    }

    @InputImport(name="webApplicationFirewallConfiguration")
    private final @Nullable Input<ApplicationGatewayWebApplicationFirewallConfigurationArgs> webApplicationFirewallConfiguration;

    public Input<ApplicationGatewayWebApplicationFirewallConfigurationArgs> getWebApplicationFirewallConfiguration() {
        return this.webApplicationFirewallConfiguration == null ? Input.empty() : this.webApplicationFirewallConfiguration;
    }

    @InputImport(name="zones")
    private final @Nullable Input<List<String>> zones;

    public Input<List<String>> getZones() {
        return this.zones == null ? Input.empty() : this.zones;
    }

    public ApplicationGatewayArgs(
        @Nullable Input<String> applicationGatewayName,
        @Nullable Input<List<ApplicationGatewayAuthenticationCertificateArgs>> authenticationCertificates,
        @Nullable Input<ApplicationGatewayAutoscaleConfigurationArgs> autoscaleConfiguration,
        @Nullable Input<List<ApplicationGatewayBackendAddressPoolArgs>> backendAddressPools,
        @Nullable Input<List<ApplicationGatewayBackendHttpSettingsArgs>> backendHttpSettingsCollection,
        @Nullable Input<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations,
        @Nullable Input<Boolean> enableFips,
        @Nullable Input<Boolean> enableHttp2,
        @Nullable Input<SubResourceArgs> firewallPolicy,
        @Nullable Input<Boolean> forceFirewallPolicyAssociation,
        @Nullable Input<List<ApplicationGatewayFrontendIPConfigurationArgs>> frontendIPConfigurations,
        @Nullable Input<List<ApplicationGatewayFrontendPortArgs>> frontendPorts,
        @Nullable Input<List<ApplicationGatewayIPConfigurationArgs>> gatewayIPConfigurations,
        @Nullable Input<List<ApplicationGatewayHttpListenerArgs>> httpListeners,
        @Nullable Input<String> id,
        @Nullable Input<ManagedServiceIdentityArgs> identity,
        @Nullable Input<String> location,
        @Nullable Input<List<ApplicationGatewayPrivateLinkConfigurationArgs>> privateLinkConfigurations,
        @Nullable Input<List<ApplicationGatewayProbeArgs>> probes,
        @Nullable Input<List<ApplicationGatewayRedirectConfigurationArgs>> redirectConfigurations,
        @Nullable Input<List<ApplicationGatewayRequestRoutingRuleArgs>> requestRoutingRules,
        Input<String> resourceGroupName,
        @Nullable Input<List<ApplicationGatewayRewriteRuleSetArgs>> rewriteRuleSets,
        @Nullable Input<ApplicationGatewaySkuArgs> sku,
        @Nullable Input<List<ApplicationGatewaySslCertificateArgs>> sslCertificates,
        @Nullable Input<ApplicationGatewaySslPolicyArgs> sslPolicy,
        @Nullable Input<List<ApplicationGatewaySslProfileArgs>> sslProfiles,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<List<ApplicationGatewayTrustedClientCertificateArgs>> trustedClientCertificates,
        @Nullable Input<List<ApplicationGatewayTrustedRootCertificateArgs>> trustedRootCertificates,
        @Nullable Input<List<ApplicationGatewayUrlPathMapArgs>> urlPathMaps,
        @Nullable Input<ApplicationGatewayWebApplicationFirewallConfigurationArgs> webApplicationFirewallConfiguration,
        @Nullable Input<List<String>> zones) {
        this.applicationGatewayName = applicationGatewayName;
        this.authenticationCertificates = authenticationCertificates;
        this.autoscaleConfiguration = autoscaleConfiguration;
        this.backendAddressPools = backendAddressPools;
        this.backendHttpSettingsCollection = backendHttpSettingsCollection;
        this.customErrorConfigurations = customErrorConfigurations;
        this.enableFips = enableFips;
        this.enableHttp2 = enableHttp2;
        this.firewallPolicy = firewallPolicy;
        this.forceFirewallPolicyAssociation = forceFirewallPolicyAssociation;
        this.frontendIPConfigurations = frontendIPConfigurations;
        this.frontendPorts = frontendPorts;
        this.gatewayIPConfigurations = gatewayIPConfigurations;
        this.httpListeners = httpListeners;
        this.id = id;
        this.identity = identity;
        this.location = location;
        this.privateLinkConfigurations = privateLinkConfigurations;
        this.probes = probes;
        this.redirectConfigurations = redirectConfigurations;
        this.requestRoutingRules = requestRoutingRules;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.rewriteRuleSets = rewriteRuleSets;
        this.sku = sku;
        this.sslCertificates = sslCertificates;
        this.sslPolicy = sslPolicy;
        this.sslProfiles = sslProfiles;
        this.tags = tags;
        this.trustedClientCertificates = trustedClientCertificates;
        this.trustedRootCertificates = trustedRootCertificates;
        this.urlPathMaps = urlPathMaps;
        this.webApplicationFirewallConfiguration = webApplicationFirewallConfiguration;
        this.zones = zones;
    }

    private ApplicationGatewayArgs() {
        this.applicationGatewayName = Input.empty();
        this.authenticationCertificates = Input.empty();
        this.autoscaleConfiguration = Input.empty();
        this.backendAddressPools = Input.empty();
        this.backendHttpSettingsCollection = Input.empty();
        this.customErrorConfigurations = Input.empty();
        this.enableFips = Input.empty();
        this.enableHttp2 = Input.empty();
        this.firewallPolicy = Input.empty();
        this.forceFirewallPolicyAssociation = Input.empty();
        this.frontendIPConfigurations = Input.empty();
        this.frontendPorts = Input.empty();
        this.gatewayIPConfigurations = Input.empty();
        this.httpListeners = Input.empty();
        this.id = Input.empty();
        this.identity = Input.empty();
        this.location = Input.empty();
        this.privateLinkConfigurations = Input.empty();
        this.probes = Input.empty();
        this.redirectConfigurations = Input.empty();
        this.requestRoutingRules = Input.empty();
        this.resourceGroupName = Input.empty();
        this.rewriteRuleSets = Input.empty();
        this.sku = Input.empty();
        this.sslCertificates = Input.empty();
        this.sslPolicy = Input.empty();
        this.sslProfiles = Input.empty();
        this.tags = Input.empty();
        this.trustedClientCertificates = Input.empty();
        this.trustedRootCertificates = Input.empty();
        this.urlPathMaps = Input.empty();
        this.webApplicationFirewallConfiguration = Input.empty();
        this.zones = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> applicationGatewayName;
        private @Nullable Input<List<ApplicationGatewayAuthenticationCertificateArgs>> authenticationCertificates;
        private @Nullable Input<ApplicationGatewayAutoscaleConfigurationArgs> autoscaleConfiguration;
        private @Nullable Input<List<ApplicationGatewayBackendAddressPoolArgs>> backendAddressPools;
        private @Nullable Input<List<ApplicationGatewayBackendHttpSettingsArgs>> backendHttpSettingsCollection;
        private @Nullable Input<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations;
        private @Nullable Input<Boolean> enableFips;
        private @Nullable Input<Boolean> enableHttp2;
        private @Nullable Input<SubResourceArgs> firewallPolicy;
        private @Nullable Input<Boolean> forceFirewallPolicyAssociation;
        private @Nullable Input<List<ApplicationGatewayFrontendIPConfigurationArgs>> frontendIPConfigurations;
        private @Nullable Input<List<ApplicationGatewayFrontendPortArgs>> frontendPorts;
        private @Nullable Input<List<ApplicationGatewayIPConfigurationArgs>> gatewayIPConfigurations;
        private @Nullable Input<List<ApplicationGatewayHttpListenerArgs>> httpListeners;
        private @Nullable Input<String> id;
        private @Nullable Input<ManagedServiceIdentityArgs> identity;
        private @Nullable Input<String> location;
        private @Nullable Input<List<ApplicationGatewayPrivateLinkConfigurationArgs>> privateLinkConfigurations;
        private @Nullable Input<List<ApplicationGatewayProbeArgs>> probes;
        private @Nullable Input<List<ApplicationGatewayRedirectConfigurationArgs>> redirectConfigurations;
        private @Nullable Input<List<ApplicationGatewayRequestRoutingRuleArgs>> requestRoutingRules;
        private Input<String> resourceGroupName;
        private @Nullable Input<List<ApplicationGatewayRewriteRuleSetArgs>> rewriteRuleSets;
        private @Nullable Input<ApplicationGatewaySkuArgs> sku;
        private @Nullable Input<List<ApplicationGatewaySslCertificateArgs>> sslCertificates;
        private @Nullable Input<ApplicationGatewaySslPolicyArgs> sslPolicy;
        private @Nullable Input<List<ApplicationGatewaySslProfileArgs>> sslProfiles;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<List<ApplicationGatewayTrustedClientCertificateArgs>> trustedClientCertificates;
        private @Nullable Input<List<ApplicationGatewayTrustedRootCertificateArgs>> trustedRootCertificates;
        private @Nullable Input<List<ApplicationGatewayUrlPathMapArgs>> urlPathMaps;
        private @Nullable Input<ApplicationGatewayWebApplicationFirewallConfigurationArgs> webApplicationFirewallConfiguration;
        private @Nullable Input<List<String>> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGatewayArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationGatewayName = defaults.applicationGatewayName;
    	      this.authenticationCertificates = defaults.authenticationCertificates;
    	      this.autoscaleConfiguration = defaults.autoscaleConfiguration;
    	      this.backendAddressPools = defaults.backendAddressPools;
    	      this.backendHttpSettingsCollection = defaults.backendHttpSettingsCollection;
    	      this.customErrorConfigurations = defaults.customErrorConfigurations;
    	      this.enableFips = defaults.enableFips;
    	      this.enableHttp2 = defaults.enableHttp2;
    	      this.firewallPolicy = defaults.firewallPolicy;
    	      this.forceFirewallPolicyAssociation = defaults.forceFirewallPolicyAssociation;
    	      this.frontendIPConfigurations = defaults.frontendIPConfigurations;
    	      this.frontendPorts = defaults.frontendPorts;
    	      this.gatewayIPConfigurations = defaults.gatewayIPConfigurations;
    	      this.httpListeners = defaults.httpListeners;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.privateLinkConfigurations = defaults.privateLinkConfigurations;
    	      this.probes = defaults.probes;
    	      this.redirectConfigurations = defaults.redirectConfigurations;
    	      this.requestRoutingRules = defaults.requestRoutingRules;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.rewriteRuleSets = defaults.rewriteRuleSets;
    	      this.sku = defaults.sku;
    	      this.sslCertificates = defaults.sslCertificates;
    	      this.sslPolicy = defaults.sslPolicy;
    	      this.sslProfiles = defaults.sslProfiles;
    	      this.tags = defaults.tags;
    	      this.trustedClientCertificates = defaults.trustedClientCertificates;
    	      this.trustedRootCertificates = defaults.trustedRootCertificates;
    	      this.urlPathMaps = defaults.urlPathMaps;
    	      this.webApplicationFirewallConfiguration = defaults.webApplicationFirewallConfiguration;
    	      this.zones = defaults.zones;
        }

        public Builder setApplicationGatewayName(@Nullable Input<String> applicationGatewayName) {
            this.applicationGatewayName = applicationGatewayName;
            return this;
        }

        public Builder setApplicationGatewayName(@Nullable String applicationGatewayName) {
            this.applicationGatewayName = Input.ofNullable(applicationGatewayName);
            return this;
        }

        public Builder setAuthenticationCertificates(@Nullable Input<List<ApplicationGatewayAuthenticationCertificateArgs>> authenticationCertificates) {
            this.authenticationCertificates = authenticationCertificates;
            return this;
        }

        public Builder setAuthenticationCertificates(@Nullable List<ApplicationGatewayAuthenticationCertificateArgs> authenticationCertificates) {
            this.authenticationCertificates = Input.ofNullable(authenticationCertificates);
            return this;
        }

        public Builder setAutoscaleConfiguration(@Nullable Input<ApplicationGatewayAutoscaleConfigurationArgs> autoscaleConfiguration) {
            this.autoscaleConfiguration = autoscaleConfiguration;
            return this;
        }

        public Builder setAutoscaleConfiguration(@Nullable ApplicationGatewayAutoscaleConfigurationArgs autoscaleConfiguration) {
            this.autoscaleConfiguration = Input.ofNullable(autoscaleConfiguration);
            return this;
        }

        public Builder setBackendAddressPools(@Nullable Input<List<ApplicationGatewayBackendAddressPoolArgs>> backendAddressPools) {
            this.backendAddressPools = backendAddressPools;
            return this;
        }

        public Builder setBackendAddressPools(@Nullable List<ApplicationGatewayBackendAddressPoolArgs> backendAddressPools) {
            this.backendAddressPools = Input.ofNullable(backendAddressPools);
            return this;
        }

        public Builder setBackendHttpSettingsCollection(@Nullable Input<List<ApplicationGatewayBackendHttpSettingsArgs>> backendHttpSettingsCollection) {
            this.backendHttpSettingsCollection = backendHttpSettingsCollection;
            return this;
        }

        public Builder setBackendHttpSettingsCollection(@Nullable List<ApplicationGatewayBackendHttpSettingsArgs> backendHttpSettingsCollection) {
            this.backendHttpSettingsCollection = Input.ofNullable(backendHttpSettingsCollection);
            return this;
        }

        public Builder setCustomErrorConfigurations(@Nullable Input<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations) {
            this.customErrorConfigurations = customErrorConfigurations;
            return this;
        }

        public Builder setCustomErrorConfigurations(@Nullable List<ApplicationGatewayCustomErrorArgs> customErrorConfigurations) {
            this.customErrorConfigurations = Input.ofNullable(customErrorConfigurations);
            return this;
        }

        public Builder setEnableFips(@Nullable Input<Boolean> enableFips) {
            this.enableFips = enableFips;
            return this;
        }

        public Builder setEnableFips(@Nullable Boolean enableFips) {
            this.enableFips = Input.ofNullable(enableFips);
            return this;
        }

        public Builder setEnableHttp2(@Nullable Input<Boolean> enableHttp2) {
            this.enableHttp2 = enableHttp2;
            return this;
        }

        public Builder setEnableHttp2(@Nullable Boolean enableHttp2) {
            this.enableHttp2 = Input.ofNullable(enableHttp2);
            return this;
        }

        public Builder setFirewallPolicy(@Nullable Input<SubResourceArgs> firewallPolicy) {
            this.firewallPolicy = firewallPolicy;
            return this;
        }

        public Builder setFirewallPolicy(@Nullable SubResourceArgs firewallPolicy) {
            this.firewallPolicy = Input.ofNullable(firewallPolicy);
            return this;
        }

        public Builder setForceFirewallPolicyAssociation(@Nullable Input<Boolean> forceFirewallPolicyAssociation) {
            this.forceFirewallPolicyAssociation = forceFirewallPolicyAssociation;
            return this;
        }

        public Builder setForceFirewallPolicyAssociation(@Nullable Boolean forceFirewallPolicyAssociation) {
            this.forceFirewallPolicyAssociation = Input.ofNullable(forceFirewallPolicyAssociation);
            return this;
        }

        public Builder setFrontendIPConfigurations(@Nullable Input<List<ApplicationGatewayFrontendIPConfigurationArgs>> frontendIPConfigurations) {
            this.frontendIPConfigurations = frontendIPConfigurations;
            return this;
        }

        public Builder setFrontendIPConfigurations(@Nullable List<ApplicationGatewayFrontendIPConfigurationArgs> frontendIPConfigurations) {
            this.frontendIPConfigurations = Input.ofNullable(frontendIPConfigurations);
            return this;
        }

        public Builder setFrontendPorts(@Nullable Input<List<ApplicationGatewayFrontendPortArgs>> frontendPorts) {
            this.frontendPorts = frontendPorts;
            return this;
        }

        public Builder setFrontendPorts(@Nullable List<ApplicationGatewayFrontendPortArgs> frontendPorts) {
            this.frontendPorts = Input.ofNullable(frontendPorts);
            return this;
        }

        public Builder setGatewayIPConfigurations(@Nullable Input<List<ApplicationGatewayIPConfigurationArgs>> gatewayIPConfigurations) {
            this.gatewayIPConfigurations = gatewayIPConfigurations;
            return this;
        }

        public Builder setGatewayIPConfigurations(@Nullable List<ApplicationGatewayIPConfigurationArgs> gatewayIPConfigurations) {
            this.gatewayIPConfigurations = Input.ofNullable(gatewayIPConfigurations);
            return this;
        }

        public Builder setHttpListeners(@Nullable Input<List<ApplicationGatewayHttpListenerArgs>> httpListeners) {
            this.httpListeners = httpListeners;
            return this;
        }

        public Builder setHttpListeners(@Nullable List<ApplicationGatewayHttpListenerArgs> httpListeners) {
            this.httpListeners = Input.ofNullable(httpListeners);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setIdentity(@Nullable Input<ManagedServiceIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIdentity(@Nullable ManagedServiceIdentityArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setPrivateLinkConfigurations(@Nullable Input<List<ApplicationGatewayPrivateLinkConfigurationArgs>> privateLinkConfigurations) {
            this.privateLinkConfigurations = privateLinkConfigurations;
            return this;
        }

        public Builder setPrivateLinkConfigurations(@Nullable List<ApplicationGatewayPrivateLinkConfigurationArgs> privateLinkConfigurations) {
            this.privateLinkConfigurations = Input.ofNullable(privateLinkConfigurations);
            return this;
        }

        public Builder setProbes(@Nullable Input<List<ApplicationGatewayProbeArgs>> probes) {
            this.probes = probes;
            return this;
        }

        public Builder setProbes(@Nullable List<ApplicationGatewayProbeArgs> probes) {
            this.probes = Input.ofNullable(probes);
            return this;
        }

        public Builder setRedirectConfigurations(@Nullable Input<List<ApplicationGatewayRedirectConfigurationArgs>> redirectConfigurations) {
            this.redirectConfigurations = redirectConfigurations;
            return this;
        }

        public Builder setRedirectConfigurations(@Nullable List<ApplicationGatewayRedirectConfigurationArgs> redirectConfigurations) {
            this.redirectConfigurations = Input.ofNullable(redirectConfigurations);
            return this;
        }

        public Builder setRequestRoutingRules(@Nullable Input<List<ApplicationGatewayRequestRoutingRuleArgs>> requestRoutingRules) {
            this.requestRoutingRules = requestRoutingRules;
            return this;
        }

        public Builder setRequestRoutingRules(@Nullable List<ApplicationGatewayRequestRoutingRuleArgs> requestRoutingRules) {
            this.requestRoutingRules = Input.ofNullable(requestRoutingRules);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setRewriteRuleSets(@Nullable Input<List<ApplicationGatewayRewriteRuleSetArgs>> rewriteRuleSets) {
            this.rewriteRuleSets = rewriteRuleSets;
            return this;
        }

        public Builder setRewriteRuleSets(@Nullable List<ApplicationGatewayRewriteRuleSetArgs> rewriteRuleSets) {
            this.rewriteRuleSets = Input.ofNullable(rewriteRuleSets);
            return this;
        }

        public Builder setSku(@Nullable Input<ApplicationGatewaySkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder setSku(@Nullable ApplicationGatewaySkuArgs sku) {
            this.sku = Input.ofNullable(sku);
            return this;
        }

        public Builder setSslCertificates(@Nullable Input<List<ApplicationGatewaySslCertificateArgs>> sslCertificates) {
            this.sslCertificates = sslCertificates;
            return this;
        }

        public Builder setSslCertificates(@Nullable List<ApplicationGatewaySslCertificateArgs> sslCertificates) {
            this.sslCertificates = Input.ofNullable(sslCertificates);
            return this;
        }

        public Builder setSslPolicy(@Nullable Input<ApplicationGatewaySslPolicyArgs> sslPolicy) {
            this.sslPolicy = sslPolicy;
            return this;
        }

        public Builder setSslPolicy(@Nullable ApplicationGatewaySslPolicyArgs sslPolicy) {
            this.sslPolicy = Input.ofNullable(sslPolicy);
            return this;
        }

        public Builder setSslProfiles(@Nullable Input<List<ApplicationGatewaySslProfileArgs>> sslProfiles) {
            this.sslProfiles = sslProfiles;
            return this;
        }

        public Builder setSslProfiles(@Nullable List<ApplicationGatewaySslProfileArgs> sslProfiles) {
            this.sslProfiles = Input.ofNullable(sslProfiles);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTrustedClientCertificates(@Nullable Input<List<ApplicationGatewayTrustedClientCertificateArgs>> trustedClientCertificates) {
            this.trustedClientCertificates = trustedClientCertificates;
            return this;
        }

        public Builder setTrustedClientCertificates(@Nullable List<ApplicationGatewayTrustedClientCertificateArgs> trustedClientCertificates) {
            this.trustedClientCertificates = Input.ofNullable(trustedClientCertificates);
            return this;
        }

        public Builder setTrustedRootCertificates(@Nullable Input<List<ApplicationGatewayTrustedRootCertificateArgs>> trustedRootCertificates) {
            this.trustedRootCertificates = trustedRootCertificates;
            return this;
        }

        public Builder setTrustedRootCertificates(@Nullable List<ApplicationGatewayTrustedRootCertificateArgs> trustedRootCertificates) {
            this.trustedRootCertificates = Input.ofNullable(trustedRootCertificates);
            return this;
        }

        public Builder setUrlPathMaps(@Nullable Input<List<ApplicationGatewayUrlPathMapArgs>> urlPathMaps) {
            this.urlPathMaps = urlPathMaps;
            return this;
        }

        public Builder setUrlPathMaps(@Nullable List<ApplicationGatewayUrlPathMapArgs> urlPathMaps) {
            this.urlPathMaps = Input.ofNullable(urlPathMaps);
            return this;
        }

        public Builder setWebApplicationFirewallConfiguration(@Nullable Input<ApplicationGatewayWebApplicationFirewallConfigurationArgs> webApplicationFirewallConfiguration) {
            this.webApplicationFirewallConfiguration = webApplicationFirewallConfiguration;
            return this;
        }

        public Builder setWebApplicationFirewallConfiguration(@Nullable ApplicationGatewayWebApplicationFirewallConfigurationArgs webApplicationFirewallConfiguration) {
            this.webApplicationFirewallConfiguration = Input.ofNullable(webApplicationFirewallConfiguration);
            return this;
        }

        public Builder setZones(@Nullable Input<List<String>> zones) {
            this.zones = zones;
            return this;
        }

        public Builder setZones(@Nullable List<String> zones) {
            this.zones = Input.ofNullable(zones);
            return this;
        }

        public ApplicationGatewayArgs build() {
            return new ApplicationGatewayArgs(applicationGatewayName, authenticationCertificates, autoscaleConfiguration, backendAddressPools, backendHttpSettingsCollection, customErrorConfigurations, enableFips, enableHttp2, firewallPolicy, forceFirewallPolicyAssociation, frontendIPConfigurations, frontendPorts, gatewayIPConfigurations, httpListeners, id, identity, location, privateLinkConfigurations, probes, redirectConfigurations, requestRoutingRules, resourceGroupName, rewriteRuleSets, sku, sslCertificates, sslPolicy, sslProfiles, tags, trustedClientCertificates, trustedRootCertificates, urlPathMaps, webApplicationFirewallConfiguration, zones);
        }
    }
}
