// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.inputs.ApplicationGatewayAuthenticationCertificateArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayAutoscaleConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayBackendAddressPoolArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayBackendHttpSettingsArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayCustomErrorArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayFrontendIPConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayFrontendPortArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayHttpListenerArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayIPConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayPrivateLinkConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayProbeArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayRedirectConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayRequestRoutingRuleArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayRewriteRuleSetArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewaySkuArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewaySslCertificateArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewaySslPolicyArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewaySslProfileArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayTrustedClientCertificateArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayTrustedRootCertificateArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayUrlPathMapArgs;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayWebApplicationFirewallConfigurationArgs;
import io.pulumi.azurenative.network.inputs.ManagedServiceIdentityArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationGatewayArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayArgs Empty = new ApplicationGatewayArgs();

    /**
     * The name of the application gateway.
     * 
     */
    @Import(name="applicationGatewayName")
      private final @Nullable Output<String> applicationGatewayName;

    public Output<String> getApplicationGatewayName() {
        return this.applicationGatewayName == null ? Output.empty() : this.applicationGatewayName;
    }

    /**
     * Authentication certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="authenticationCertificates")
      private final @Nullable Output<List<ApplicationGatewayAuthenticationCertificateArgs>> authenticationCertificates;

    public Output<List<ApplicationGatewayAuthenticationCertificateArgs>> getAuthenticationCertificates() {
        return this.authenticationCertificates == null ? Output.empty() : this.authenticationCertificates;
    }

    /**
     * Autoscale Configuration.
     * 
     */
    @Import(name="autoscaleConfiguration")
      private final @Nullable Output<ApplicationGatewayAutoscaleConfigurationArgs> autoscaleConfiguration;

    public Output<ApplicationGatewayAutoscaleConfigurationArgs> getAutoscaleConfiguration() {
        return this.autoscaleConfiguration == null ? Output.empty() : this.autoscaleConfiguration;
    }

    /**
     * Backend address pool of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="backendAddressPools")
      private final @Nullable Output<List<ApplicationGatewayBackendAddressPoolArgs>> backendAddressPools;

    public Output<List<ApplicationGatewayBackendAddressPoolArgs>> getBackendAddressPools() {
        return this.backendAddressPools == null ? Output.empty() : this.backendAddressPools;
    }

    /**
     * Backend http settings of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="backendHttpSettingsCollection")
      private final @Nullable Output<List<ApplicationGatewayBackendHttpSettingsArgs>> backendHttpSettingsCollection;

    public Output<List<ApplicationGatewayBackendHttpSettingsArgs>> getBackendHttpSettingsCollection() {
        return this.backendHttpSettingsCollection == null ? Output.empty() : this.backendHttpSettingsCollection;
    }

    /**
     * Custom error configurations of the application gateway resource.
     * 
     */
    @Import(name="customErrorConfigurations")
      private final @Nullable Output<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations;

    public Output<List<ApplicationGatewayCustomErrorArgs>> getCustomErrorConfigurations() {
        return this.customErrorConfigurations == null ? Output.empty() : this.customErrorConfigurations;
    }

    /**
     * Whether FIPS is enabled on the application gateway resource.
     * 
     */
    @Import(name="enableFips")
      private final @Nullable Output<Boolean> enableFips;

    public Output<Boolean> getEnableFips() {
        return this.enableFips == null ? Output.empty() : this.enableFips;
    }

    /**
     * Whether HTTP2 is enabled on the application gateway resource.
     * 
     */
    @Import(name="enableHttp2")
      private final @Nullable Output<Boolean> enableHttp2;

    public Output<Boolean> getEnableHttp2() {
        return this.enableHttp2 == null ? Output.empty() : this.enableHttp2;
    }

    /**
     * Reference to the FirewallPolicy resource.
     * 
     */
    @Import(name="firewallPolicy")
      private final @Nullable Output<SubResourceArgs> firewallPolicy;

    public Output<SubResourceArgs> getFirewallPolicy() {
        return this.firewallPolicy == null ? Output.empty() : this.firewallPolicy;
    }

    /**
     * If true, associates a firewall policy with an application gateway regardless whether the policy differs from the WAF Config.
     * 
     */
    @Import(name="forceFirewallPolicyAssociation")
      private final @Nullable Output<Boolean> forceFirewallPolicyAssociation;

    public Output<Boolean> getForceFirewallPolicyAssociation() {
        return this.forceFirewallPolicyAssociation == null ? Output.empty() : this.forceFirewallPolicyAssociation;
    }

    /**
     * Frontend IP addresses of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="frontendIPConfigurations")
      private final @Nullable Output<List<ApplicationGatewayFrontendIPConfigurationArgs>> frontendIPConfigurations;

    public Output<List<ApplicationGatewayFrontendIPConfigurationArgs>> getFrontendIPConfigurations() {
        return this.frontendIPConfigurations == null ? Output.empty() : this.frontendIPConfigurations;
    }

    /**
     * Frontend ports of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="frontendPorts")
      private final @Nullable Output<List<ApplicationGatewayFrontendPortArgs>> frontendPorts;

    public Output<List<ApplicationGatewayFrontendPortArgs>> getFrontendPorts() {
        return this.frontendPorts == null ? Output.empty() : this.frontendPorts;
    }

    /**
     * Subnets of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="gatewayIPConfigurations")
      private final @Nullable Output<List<ApplicationGatewayIPConfigurationArgs>> gatewayIPConfigurations;

    public Output<List<ApplicationGatewayIPConfigurationArgs>> getGatewayIPConfigurations() {
        return this.gatewayIPConfigurations == null ? Output.empty() : this.gatewayIPConfigurations;
    }

    /**
     * Http listeners of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="httpListeners")
      private final @Nullable Output<List<ApplicationGatewayHttpListenerArgs>> httpListeners;

    public Output<List<ApplicationGatewayHttpListenerArgs>> getHttpListeners() {
        return this.httpListeners == null ? Output.empty() : this.httpListeners;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * The identity of the application gateway, if configured.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<ManagedServiceIdentityArgs> identity;

    public Output<ManagedServiceIdentityArgs> getIdentity() {
        return this.identity == null ? Output.empty() : this.identity;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * PrivateLink configurations on application gateway.
     * 
     */
    @Import(name="privateLinkConfigurations")
      private final @Nullable Output<List<ApplicationGatewayPrivateLinkConfigurationArgs>> privateLinkConfigurations;

    public Output<List<ApplicationGatewayPrivateLinkConfigurationArgs>> getPrivateLinkConfigurations() {
        return this.privateLinkConfigurations == null ? Output.empty() : this.privateLinkConfigurations;
    }

    /**
     * Probes of the application gateway resource.
     * 
     */
    @Import(name="probes")
      private final @Nullable Output<List<ApplicationGatewayProbeArgs>> probes;

    public Output<List<ApplicationGatewayProbeArgs>> getProbes() {
        return this.probes == null ? Output.empty() : this.probes;
    }

    /**
     * Redirect configurations of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="redirectConfigurations")
      private final @Nullable Output<List<ApplicationGatewayRedirectConfigurationArgs>> redirectConfigurations;

    public Output<List<ApplicationGatewayRedirectConfigurationArgs>> getRedirectConfigurations() {
        return this.redirectConfigurations == null ? Output.empty() : this.redirectConfigurations;
    }

    /**
     * Request routing rules of the application gateway resource.
     * 
     */
    @Import(name="requestRoutingRules")
      private final @Nullable Output<List<ApplicationGatewayRequestRoutingRuleArgs>> requestRoutingRules;

    public Output<List<ApplicationGatewayRequestRoutingRuleArgs>> getRequestRoutingRules() {
        return this.requestRoutingRules == null ? Output.empty() : this.requestRoutingRules;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Rewrite rules for the application gateway resource.
     * 
     */
    @Import(name="rewriteRuleSets")
      private final @Nullable Output<List<ApplicationGatewayRewriteRuleSetArgs>> rewriteRuleSets;

    public Output<List<ApplicationGatewayRewriteRuleSetArgs>> getRewriteRuleSets() {
        return this.rewriteRuleSets == null ? Output.empty() : this.rewriteRuleSets;
    }

    /**
     * SKU of the application gateway resource.
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<ApplicationGatewaySkuArgs> sku;

    public Output<ApplicationGatewaySkuArgs> getSku() {
        return this.sku == null ? Output.empty() : this.sku;
    }

    /**
     * SSL certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="sslCertificates")
      private final @Nullable Output<List<ApplicationGatewaySslCertificateArgs>> sslCertificates;

    public Output<List<ApplicationGatewaySslCertificateArgs>> getSslCertificates() {
        return this.sslCertificates == null ? Output.empty() : this.sslCertificates;
    }

    /**
     * SSL policy of the application gateway resource.
     * 
     */
    @Import(name="sslPolicy")
      private final @Nullable Output<ApplicationGatewaySslPolicyArgs> sslPolicy;

    public Output<ApplicationGatewaySslPolicyArgs> getSslPolicy() {
        return this.sslPolicy == null ? Output.empty() : this.sslPolicy;
    }

    /**
     * SSL profiles of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="sslProfiles")
      private final @Nullable Output<List<ApplicationGatewaySslProfileArgs>> sslProfiles;

    public Output<List<ApplicationGatewaySslProfileArgs>> getSslProfiles() {
        return this.sslProfiles == null ? Output.empty() : this.sslProfiles;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Trusted client certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="trustedClientCertificates")
      private final @Nullable Output<List<ApplicationGatewayTrustedClientCertificateArgs>> trustedClientCertificates;

    public Output<List<ApplicationGatewayTrustedClientCertificateArgs>> getTrustedClientCertificates() {
        return this.trustedClientCertificates == null ? Output.empty() : this.trustedClientCertificates;
    }

    /**
     * Trusted Root certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="trustedRootCertificates")
      private final @Nullable Output<List<ApplicationGatewayTrustedRootCertificateArgs>> trustedRootCertificates;

    public Output<List<ApplicationGatewayTrustedRootCertificateArgs>> getTrustedRootCertificates() {
        return this.trustedRootCertificates == null ? Output.empty() : this.trustedRootCertificates;
    }

    /**
     * URL path map of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
     * 
     */
    @Import(name="urlPathMaps")
      private final @Nullable Output<List<ApplicationGatewayUrlPathMapArgs>> urlPathMaps;

    public Output<List<ApplicationGatewayUrlPathMapArgs>> getUrlPathMaps() {
        return this.urlPathMaps == null ? Output.empty() : this.urlPathMaps;
    }

    /**
     * Web application firewall configuration.
     * 
     */
    @Import(name="webApplicationFirewallConfiguration")
      private final @Nullable Output<ApplicationGatewayWebApplicationFirewallConfigurationArgs> webApplicationFirewallConfiguration;

    public Output<ApplicationGatewayWebApplicationFirewallConfigurationArgs> getWebApplicationFirewallConfiguration() {
        return this.webApplicationFirewallConfiguration == null ? Output.empty() : this.webApplicationFirewallConfiguration;
    }

    /**
     * A list of availability zones denoting where the resource needs to come from.
     * 
     */
    @Import(name="zones")
      private final @Nullable Output<List<String>> zones;

    public Output<List<String>> getZones() {
        return this.zones == null ? Output.empty() : this.zones;
    }

    public ApplicationGatewayArgs(
        @Nullable Output<String> applicationGatewayName,
        @Nullable Output<List<ApplicationGatewayAuthenticationCertificateArgs>> authenticationCertificates,
        @Nullable Output<ApplicationGatewayAutoscaleConfigurationArgs> autoscaleConfiguration,
        @Nullable Output<List<ApplicationGatewayBackendAddressPoolArgs>> backendAddressPools,
        @Nullable Output<List<ApplicationGatewayBackendHttpSettingsArgs>> backendHttpSettingsCollection,
        @Nullable Output<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations,
        @Nullable Output<Boolean> enableFips,
        @Nullable Output<Boolean> enableHttp2,
        @Nullable Output<SubResourceArgs> firewallPolicy,
        @Nullable Output<Boolean> forceFirewallPolicyAssociation,
        @Nullable Output<List<ApplicationGatewayFrontendIPConfigurationArgs>> frontendIPConfigurations,
        @Nullable Output<List<ApplicationGatewayFrontendPortArgs>> frontendPorts,
        @Nullable Output<List<ApplicationGatewayIPConfigurationArgs>> gatewayIPConfigurations,
        @Nullable Output<List<ApplicationGatewayHttpListenerArgs>> httpListeners,
        @Nullable Output<String> id,
        @Nullable Output<ManagedServiceIdentityArgs> identity,
        @Nullable Output<String> location,
        @Nullable Output<List<ApplicationGatewayPrivateLinkConfigurationArgs>> privateLinkConfigurations,
        @Nullable Output<List<ApplicationGatewayProbeArgs>> probes,
        @Nullable Output<List<ApplicationGatewayRedirectConfigurationArgs>> redirectConfigurations,
        @Nullable Output<List<ApplicationGatewayRequestRoutingRuleArgs>> requestRoutingRules,
        Output<String> resourceGroupName,
        @Nullable Output<List<ApplicationGatewayRewriteRuleSetArgs>> rewriteRuleSets,
        @Nullable Output<ApplicationGatewaySkuArgs> sku,
        @Nullable Output<List<ApplicationGatewaySslCertificateArgs>> sslCertificates,
        @Nullable Output<ApplicationGatewaySslPolicyArgs> sslPolicy,
        @Nullable Output<List<ApplicationGatewaySslProfileArgs>> sslProfiles,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<List<ApplicationGatewayTrustedClientCertificateArgs>> trustedClientCertificates,
        @Nullable Output<List<ApplicationGatewayTrustedRootCertificateArgs>> trustedRootCertificates,
        @Nullable Output<List<ApplicationGatewayUrlPathMapArgs>> urlPathMaps,
        @Nullable Output<ApplicationGatewayWebApplicationFirewallConfigurationArgs> webApplicationFirewallConfiguration,
        @Nullable Output<List<String>> zones) {
        this.applicationGatewayName = applicationGatewayName;
        this.authenticationCertificates = authenticationCertificates;
        this.autoscaleConfiguration = autoscaleConfiguration;
        this.backendAddressPools = backendAddressPools;
        this.backendHttpSettingsCollection = backendHttpSettingsCollection;
        this.customErrorConfigurations = customErrorConfigurations;
        this.enableFips = enableFips;
        this.enableHttp2 = enableHttp2;
        this.firewallPolicy = firewallPolicy;
        this.forceFirewallPolicyAssociation = forceFirewallPolicyAssociation;
        this.frontendIPConfigurations = frontendIPConfigurations;
        this.frontendPorts = frontendPorts;
        this.gatewayIPConfigurations = gatewayIPConfigurations;
        this.httpListeners = httpListeners;
        this.id = id;
        this.identity = identity;
        this.location = location;
        this.privateLinkConfigurations = privateLinkConfigurations;
        this.probes = probes;
        this.redirectConfigurations = redirectConfigurations;
        this.requestRoutingRules = requestRoutingRules;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.rewriteRuleSets = rewriteRuleSets;
        this.sku = sku;
        this.sslCertificates = sslCertificates;
        this.sslPolicy = sslPolicy;
        this.sslProfiles = sslProfiles;
        this.tags = tags;
        this.trustedClientCertificates = trustedClientCertificates;
        this.trustedRootCertificates = trustedRootCertificates;
        this.urlPathMaps = urlPathMaps;
        this.webApplicationFirewallConfiguration = webApplicationFirewallConfiguration;
        this.zones = zones;
    }

    private ApplicationGatewayArgs() {
        this.applicationGatewayName = Output.empty();
        this.authenticationCertificates = Output.empty();
        this.autoscaleConfiguration = Output.empty();
        this.backendAddressPools = Output.empty();
        this.backendHttpSettingsCollection = Output.empty();
        this.customErrorConfigurations = Output.empty();
        this.enableFips = Output.empty();
        this.enableHttp2 = Output.empty();
        this.firewallPolicy = Output.empty();
        this.forceFirewallPolicyAssociation = Output.empty();
        this.frontendIPConfigurations = Output.empty();
        this.frontendPorts = Output.empty();
        this.gatewayIPConfigurations = Output.empty();
        this.httpListeners = Output.empty();
        this.id = Output.empty();
        this.identity = Output.empty();
        this.location = Output.empty();
        this.privateLinkConfigurations = Output.empty();
        this.probes = Output.empty();
        this.redirectConfigurations = Output.empty();
        this.requestRoutingRules = Output.empty();
        this.resourceGroupName = Output.empty();
        this.rewriteRuleSets = Output.empty();
        this.sku = Output.empty();
        this.sslCertificates = Output.empty();
        this.sslPolicy = Output.empty();
        this.sslProfiles = Output.empty();
        this.tags = Output.empty();
        this.trustedClientCertificates = Output.empty();
        this.trustedRootCertificates = Output.empty();
        this.urlPathMaps = Output.empty();
        this.webApplicationFirewallConfiguration = Output.empty();
        this.zones = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> applicationGatewayName;
        private @Nullable Output<List<ApplicationGatewayAuthenticationCertificateArgs>> authenticationCertificates;
        private @Nullable Output<ApplicationGatewayAutoscaleConfigurationArgs> autoscaleConfiguration;
        private @Nullable Output<List<ApplicationGatewayBackendAddressPoolArgs>> backendAddressPools;
        private @Nullable Output<List<ApplicationGatewayBackendHttpSettingsArgs>> backendHttpSettingsCollection;
        private @Nullable Output<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations;
        private @Nullable Output<Boolean> enableFips;
        private @Nullable Output<Boolean> enableHttp2;
        private @Nullable Output<SubResourceArgs> firewallPolicy;
        private @Nullable Output<Boolean> forceFirewallPolicyAssociation;
        private @Nullable Output<List<ApplicationGatewayFrontendIPConfigurationArgs>> frontendIPConfigurations;
        private @Nullable Output<List<ApplicationGatewayFrontendPortArgs>> frontendPorts;
        private @Nullable Output<List<ApplicationGatewayIPConfigurationArgs>> gatewayIPConfigurations;
        private @Nullable Output<List<ApplicationGatewayHttpListenerArgs>> httpListeners;
        private @Nullable Output<String> id;
        private @Nullable Output<ManagedServiceIdentityArgs> identity;
        private @Nullable Output<String> location;
        private @Nullable Output<List<ApplicationGatewayPrivateLinkConfigurationArgs>> privateLinkConfigurations;
        private @Nullable Output<List<ApplicationGatewayProbeArgs>> probes;
        private @Nullable Output<List<ApplicationGatewayRedirectConfigurationArgs>> redirectConfigurations;
        private @Nullable Output<List<ApplicationGatewayRequestRoutingRuleArgs>> requestRoutingRules;
        private Output<String> resourceGroupName;
        private @Nullable Output<List<ApplicationGatewayRewriteRuleSetArgs>> rewriteRuleSets;
        private @Nullable Output<ApplicationGatewaySkuArgs> sku;
        private @Nullable Output<List<ApplicationGatewaySslCertificateArgs>> sslCertificates;
        private @Nullable Output<ApplicationGatewaySslPolicyArgs> sslPolicy;
        private @Nullable Output<List<ApplicationGatewaySslProfileArgs>> sslProfiles;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<List<ApplicationGatewayTrustedClientCertificateArgs>> trustedClientCertificates;
        private @Nullable Output<List<ApplicationGatewayTrustedRootCertificateArgs>> trustedRootCertificates;
        private @Nullable Output<List<ApplicationGatewayUrlPathMapArgs>> urlPathMaps;
        private @Nullable Output<ApplicationGatewayWebApplicationFirewallConfigurationArgs> webApplicationFirewallConfiguration;
        private @Nullable Output<List<String>> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGatewayArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationGatewayName = defaults.applicationGatewayName;
    	      this.authenticationCertificates = defaults.authenticationCertificates;
    	      this.autoscaleConfiguration = defaults.autoscaleConfiguration;
    	      this.backendAddressPools = defaults.backendAddressPools;
    	      this.backendHttpSettingsCollection = defaults.backendHttpSettingsCollection;
    	      this.customErrorConfigurations = defaults.customErrorConfigurations;
    	      this.enableFips = defaults.enableFips;
    	      this.enableHttp2 = defaults.enableHttp2;
    	      this.firewallPolicy = defaults.firewallPolicy;
    	      this.forceFirewallPolicyAssociation = defaults.forceFirewallPolicyAssociation;
    	      this.frontendIPConfigurations = defaults.frontendIPConfigurations;
    	      this.frontendPorts = defaults.frontendPorts;
    	      this.gatewayIPConfigurations = defaults.gatewayIPConfigurations;
    	      this.httpListeners = defaults.httpListeners;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.privateLinkConfigurations = defaults.privateLinkConfigurations;
    	      this.probes = defaults.probes;
    	      this.redirectConfigurations = defaults.redirectConfigurations;
    	      this.requestRoutingRules = defaults.requestRoutingRules;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.rewriteRuleSets = defaults.rewriteRuleSets;
    	      this.sku = defaults.sku;
    	      this.sslCertificates = defaults.sslCertificates;
    	      this.sslPolicy = defaults.sslPolicy;
    	      this.sslProfiles = defaults.sslProfiles;
    	      this.tags = defaults.tags;
    	      this.trustedClientCertificates = defaults.trustedClientCertificates;
    	      this.trustedRootCertificates = defaults.trustedRootCertificates;
    	      this.urlPathMaps = defaults.urlPathMaps;
    	      this.webApplicationFirewallConfiguration = defaults.webApplicationFirewallConfiguration;
    	      this.zones = defaults.zones;
        }

        public Builder applicationGatewayName(@Nullable Output<String> applicationGatewayName) {
            this.applicationGatewayName = applicationGatewayName;
            return this;
        }
        public Builder applicationGatewayName(@Nullable String applicationGatewayName) {
            this.applicationGatewayName = Output.ofNullable(applicationGatewayName);
            return this;
        }
        public Builder authenticationCertificates(@Nullable Output<List<ApplicationGatewayAuthenticationCertificateArgs>> authenticationCertificates) {
            this.authenticationCertificates = authenticationCertificates;
            return this;
        }
        public Builder authenticationCertificates(@Nullable List<ApplicationGatewayAuthenticationCertificateArgs> authenticationCertificates) {
            this.authenticationCertificates = Output.ofNullable(authenticationCertificates);
            return this;
        }
        public Builder authenticationCertificates(ApplicationGatewayAuthenticationCertificateArgs... authenticationCertificates) {
            return authenticationCertificates(List.of(authenticationCertificates));
        }
        public Builder autoscaleConfiguration(@Nullable Output<ApplicationGatewayAutoscaleConfigurationArgs> autoscaleConfiguration) {
            this.autoscaleConfiguration = autoscaleConfiguration;
            return this;
        }
        public Builder autoscaleConfiguration(@Nullable ApplicationGatewayAutoscaleConfigurationArgs autoscaleConfiguration) {
            this.autoscaleConfiguration = Output.ofNullable(autoscaleConfiguration);
            return this;
        }
        public Builder backendAddressPools(@Nullable Output<List<ApplicationGatewayBackendAddressPoolArgs>> backendAddressPools) {
            this.backendAddressPools = backendAddressPools;
            return this;
        }
        public Builder backendAddressPools(@Nullable List<ApplicationGatewayBackendAddressPoolArgs> backendAddressPools) {
            this.backendAddressPools = Output.ofNullable(backendAddressPools);
            return this;
        }
        public Builder backendAddressPools(ApplicationGatewayBackendAddressPoolArgs... backendAddressPools) {
            return backendAddressPools(List.of(backendAddressPools));
        }
        public Builder backendHttpSettingsCollection(@Nullable Output<List<ApplicationGatewayBackendHttpSettingsArgs>> backendHttpSettingsCollection) {
            this.backendHttpSettingsCollection = backendHttpSettingsCollection;
            return this;
        }
        public Builder backendHttpSettingsCollection(@Nullable List<ApplicationGatewayBackendHttpSettingsArgs> backendHttpSettingsCollection) {
            this.backendHttpSettingsCollection = Output.ofNullable(backendHttpSettingsCollection);
            return this;
        }
        public Builder backendHttpSettingsCollection(ApplicationGatewayBackendHttpSettingsArgs... backendHttpSettingsCollection) {
            return backendHttpSettingsCollection(List.of(backendHttpSettingsCollection));
        }
        public Builder customErrorConfigurations(@Nullable Output<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations) {
            this.customErrorConfigurations = customErrorConfigurations;
            return this;
        }
        public Builder customErrorConfigurations(@Nullable List<ApplicationGatewayCustomErrorArgs> customErrorConfigurations) {
            this.customErrorConfigurations = Output.ofNullable(customErrorConfigurations);
            return this;
        }
        public Builder customErrorConfigurations(ApplicationGatewayCustomErrorArgs... customErrorConfigurations) {
            return customErrorConfigurations(List.of(customErrorConfigurations));
        }
        public Builder enableFips(@Nullable Output<Boolean> enableFips) {
            this.enableFips = enableFips;
            return this;
        }
        public Builder enableFips(@Nullable Boolean enableFips) {
            this.enableFips = Output.ofNullable(enableFips);
            return this;
        }
        public Builder enableHttp2(@Nullable Output<Boolean> enableHttp2) {
            this.enableHttp2 = enableHttp2;
            return this;
        }
        public Builder enableHttp2(@Nullable Boolean enableHttp2) {
            this.enableHttp2 = Output.ofNullable(enableHttp2);
            return this;
        }
        public Builder firewallPolicy(@Nullable Output<SubResourceArgs> firewallPolicy) {
            this.firewallPolicy = firewallPolicy;
            return this;
        }
        public Builder firewallPolicy(@Nullable SubResourceArgs firewallPolicy) {
            this.firewallPolicy = Output.ofNullable(firewallPolicy);
            return this;
        }
        public Builder forceFirewallPolicyAssociation(@Nullable Output<Boolean> forceFirewallPolicyAssociation) {
            this.forceFirewallPolicyAssociation = forceFirewallPolicyAssociation;
            return this;
        }
        public Builder forceFirewallPolicyAssociation(@Nullable Boolean forceFirewallPolicyAssociation) {
            this.forceFirewallPolicyAssociation = Output.ofNullable(forceFirewallPolicyAssociation);
            return this;
        }
        public Builder frontendIPConfigurations(@Nullable Output<List<ApplicationGatewayFrontendIPConfigurationArgs>> frontendIPConfigurations) {
            this.frontendIPConfigurations = frontendIPConfigurations;
            return this;
        }
        public Builder frontendIPConfigurations(@Nullable List<ApplicationGatewayFrontendIPConfigurationArgs> frontendIPConfigurations) {
            this.frontendIPConfigurations = Output.ofNullable(frontendIPConfigurations);
            return this;
        }
        public Builder frontendIPConfigurations(ApplicationGatewayFrontendIPConfigurationArgs... frontendIPConfigurations) {
            return frontendIPConfigurations(List.of(frontendIPConfigurations));
        }
        public Builder frontendPorts(@Nullable Output<List<ApplicationGatewayFrontendPortArgs>> frontendPorts) {
            this.frontendPorts = frontendPorts;
            return this;
        }
        public Builder frontendPorts(@Nullable List<ApplicationGatewayFrontendPortArgs> frontendPorts) {
            this.frontendPorts = Output.ofNullable(frontendPorts);
            return this;
        }
        public Builder frontendPorts(ApplicationGatewayFrontendPortArgs... frontendPorts) {
            return frontendPorts(List.of(frontendPorts));
        }
        public Builder gatewayIPConfigurations(@Nullable Output<List<ApplicationGatewayIPConfigurationArgs>> gatewayIPConfigurations) {
            this.gatewayIPConfigurations = gatewayIPConfigurations;
            return this;
        }
        public Builder gatewayIPConfigurations(@Nullable List<ApplicationGatewayIPConfigurationArgs> gatewayIPConfigurations) {
            this.gatewayIPConfigurations = Output.ofNullable(gatewayIPConfigurations);
            return this;
        }
        public Builder gatewayIPConfigurations(ApplicationGatewayIPConfigurationArgs... gatewayIPConfigurations) {
            return gatewayIPConfigurations(List.of(gatewayIPConfigurations));
        }
        public Builder httpListeners(@Nullable Output<List<ApplicationGatewayHttpListenerArgs>> httpListeners) {
            this.httpListeners = httpListeners;
            return this;
        }
        public Builder httpListeners(@Nullable List<ApplicationGatewayHttpListenerArgs> httpListeners) {
            this.httpListeners = Output.ofNullable(httpListeners);
            return this;
        }
        public Builder httpListeners(ApplicationGatewayHttpListenerArgs... httpListeners) {
            return httpListeners(List.of(httpListeners));
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }
        public Builder identity(@Nullable Output<ManagedServiceIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable ManagedServiceIdentityArgs identity) {
            this.identity = Output.ofNullable(identity);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder privateLinkConfigurations(@Nullable Output<List<ApplicationGatewayPrivateLinkConfigurationArgs>> privateLinkConfigurations) {
            this.privateLinkConfigurations = privateLinkConfigurations;
            return this;
        }
        public Builder privateLinkConfigurations(@Nullable List<ApplicationGatewayPrivateLinkConfigurationArgs> privateLinkConfigurations) {
            this.privateLinkConfigurations = Output.ofNullable(privateLinkConfigurations);
            return this;
        }
        public Builder privateLinkConfigurations(ApplicationGatewayPrivateLinkConfigurationArgs... privateLinkConfigurations) {
            return privateLinkConfigurations(List.of(privateLinkConfigurations));
        }
        public Builder probes(@Nullable Output<List<ApplicationGatewayProbeArgs>> probes) {
            this.probes = probes;
            return this;
        }
        public Builder probes(@Nullable List<ApplicationGatewayProbeArgs> probes) {
            this.probes = Output.ofNullable(probes);
            return this;
        }
        public Builder probes(ApplicationGatewayProbeArgs... probes) {
            return probes(List.of(probes));
        }
        public Builder redirectConfigurations(@Nullable Output<List<ApplicationGatewayRedirectConfigurationArgs>> redirectConfigurations) {
            this.redirectConfigurations = redirectConfigurations;
            return this;
        }
        public Builder redirectConfigurations(@Nullable List<ApplicationGatewayRedirectConfigurationArgs> redirectConfigurations) {
            this.redirectConfigurations = Output.ofNullable(redirectConfigurations);
            return this;
        }
        public Builder redirectConfigurations(ApplicationGatewayRedirectConfigurationArgs... redirectConfigurations) {
            return redirectConfigurations(List.of(redirectConfigurations));
        }
        public Builder requestRoutingRules(@Nullable Output<List<ApplicationGatewayRequestRoutingRuleArgs>> requestRoutingRules) {
            this.requestRoutingRules = requestRoutingRules;
            return this;
        }
        public Builder requestRoutingRules(@Nullable List<ApplicationGatewayRequestRoutingRuleArgs> requestRoutingRules) {
            this.requestRoutingRules = Output.ofNullable(requestRoutingRules);
            return this;
        }
        public Builder requestRoutingRules(ApplicationGatewayRequestRoutingRuleArgs... requestRoutingRules) {
            return requestRoutingRules(List.of(requestRoutingRules));
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder rewriteRuleSets(@Nullable Output<List<ApplicationGatewayRewriteRuleSetArgs>> rewriteRuleSets) {
            this.rewriteRuleSets = rewriteRuleSets;
            return this;
        }
        public Builder rewriteRuleSets(@Nullable List<ApplicationGatewayRewriteRuleSetArgs> rewriteRuleSets) {
            this.rewriteRuleSets = Output.ofNullable(rewriteRuleSets);
            return this;
        }
        public Builder rewriteRuleSets(ApplicationGatewayRewriteRuleSetArgs... rewriteRuleSets) {
            return rewriteRuleSets(List.of(rewriteRuleSets));
        }
        public Builder sku(@Nullable Output<ApplicationGatewaySkuArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable ApplicationGatewaySkuArgs sku) {
            this.sku = Output.ofNullable(sku);
            return this;
        }
        public Builder sslCertificates(@Nullable Output<List<ApplicationGatewaySslCertificateArgs>> sslCertificates) {
            this.sslCertificates = sslCertificates;
            return this;
        }
        public Builder sslCertificates(@Nullable List<ApplicationGatewaySslCertificateArgs> sslCertificates) {
            this.sslCertificates = Output.ofNullable(sslCertificates);
            return this;
        }
        public Builder sslCertificates(ApplicationGatewaySslCertificateArgs... sslCertificates) {
            return sslCertificates(List.of(sslCertificates));
        }
        public Builder sslPolicy(@Nullable Output<ApplicationGatewaySslPolicyArgs> sslPolicy) {
            this.sslPolicy = sslPolicy;
            return this;
        }
        public Builder sslPolicy(@Nullable ApplicationGatewaySslPolicyArgs sslPolicy) {
            this.sslPolicy = Output.ofNullable(sslPolicy);
            return this;
        }
        public Builder sslProfiles(@Nullable Output<List<ApplicationGatewaySslProfileArgs>> sslProfiles) {
            this.sslProfiles = sslProfiles;
            return this;
        }
        public Builder sslProfiles(@Nullable List<ApplicationGatewaySslProfileArgs> sslProfiles) {
            this.sslProfiles = Output.ofNullable(sslProfiles);
            return this;
        }
        public Builder sslProfiles(ApplicationGatewaySslProfileArgs... sslProfiles) {
            return sslProfiles(List.of(sslProfiles));
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder trustedClientCertificates(@Nullable Output<List<ApplicationGatewayTrustedClientCertificateArgs>> trustedClientCertificates) {
            this.trustedClientCertificates = trustedClientCertificates;
            return this;
        }
        public Builder trustedClientCertificates(@Nullable List<ApplicationGatewayTrustedClientCertificateArgs> trustedClientCertificates) {
            this.trustedClientCertificates = Output.ofNullable(trustedClientCertificates);
            return this;
        }
        public Builder trustedClientCertificates(ApplicationGatewayTrustedClientCertificateArgs... trustedClientCertificates) {
            return trustedClientCertificates(List.of(trustedClientCertificates));
        }
        public Builder trustedRootCertificates(@Nullable Output<List<ApplicationGatewayTrustedRootCertificateArgs>> trustedRootCertificates) {
            this.trustedRootCertificates = trustedRootCertificates;
            return this;
        }
        public Builder trustedRootCertificates(@Nullable List<ApplicationGatewayTrustedRootCertificateArgs> trustedRootCertificates) {
            this.trustedRootCertificates = Output.ofNullable(trustedRootCertificates);
            return this;
        }
        public Builder trustedRootCertificates(ApplicationGatewayTrustedRootCertificateArgs... trustedRootCertificates) {
            return trustedRootCertificates(List.of(trustedRootCertificates));
        }
        public Builder urlPathMaps(@Nullable Output<List<ApplicationGatewayUrlPathMapArgs>> urlPathMaps) {
            this.urlPathMaps = urlPathMaps;
            return this;
        }
        public Builder urlPathMaps(@Nullable List<ApplicationGatewayUrlPathMapArgs> urlPathMaps) {
            this.urlPathMaps = Output.ofNullable(urlPathMaps);
            return this;
        }
        public Builder urlPathMaps(ApplicationGatewayUrlPathMapArgs... urlPathMaps) {
            return urlPathMaps(List.of(urlPathMaps));
        }
        public Builder webApplicationFirewallConfiguration(@Nullable Output<ApplicationGatewayWebApplicationFirewallConfigurationArgs> webApplicationFirewallConfiguration) {
            this.webApplicationFirewallConfiguration = webApplicationFirewallConfiguration;
            return this;
        }
        public Builder webApplicationFirewallConfiguration(@Nullable ApplicationGatewayWebApplicationFirewallConfigurationArgs webApplicationFirewallConfiguration) {
            this.webApplicationFirewallConfiguration = Output.ofNullable(webApplicationFirewallConfiguration);
            return this;
        }
        public Builder zones(@Nullable Output<List<String>> zones) {
            this.zones = zones;
            return this;
        }
        public Builder zones(@Nullable List<String> zones) {
            this.zones = Output.ofNullable(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public ApplicationGatewayArgs build() {
            return new ApplicationGatewayArgs(applicationGatewayName, authenticationCertificates, autoscaleConfiguration, backendAddressPools, backendHttpSettingsCollection, customErrorConfigurations, enableFips, enableHttp2, firewallPolicy, forceFirewallPolicyAssociation, frontendIPConfigurations, frontendPorts, gatewayIPConfigurations, httpListeners, id, identity, location, privateLinkConfigurations, probes, redirectConfigurations, requestRoutingRules, resourceGroupName, rewriteRuleSets, sku, sslCertificates, sslPolicy, sslProfiles, tags, trustedClientCertificates, trustedRootCertificates, urlPathMaps, webApplicationFirewallConfiguration, zones);
        }
    }
}
