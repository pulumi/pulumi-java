// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class NonceResponse {
    /**
     * The time after the request is made when the nonce should expire.
     * 
     */
    private final @Nullable String nonceExpirationInterval;
    /**
     * <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
     * 
     */
    private final @Nullable Boolean validateNonce;

    @OutputCustomType.Constructor
    private NonceResponse(
        @OutputCustomType.Parameter("nonceExpirationInterval") @Nullable String nonceExpirationInterval,
        @OutputCustomType.Parameter("validateNonce") @Nullable Boolean validateNonce) {
        this.nonceExpirationInterval = nonceExpirationInterval;
        this.validateNonce = validateNonce;
    }

    /**
     * The time after the request is made when the nonce should expire.
     * 
    */
    public Optional<String> getNonceExpirationInterval() {
        return Optional.ofNullable(this.nonceExpirationInterval);
    }
    /**
     * <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
     * 
    */
    public Optional<Boolean> getValidateNonce() {
        return Optional.ofNullable(this.validateNonce);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NonceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String nonceExpirationInterval;
        private @Nullable Boolean validateNonce;

        public Builder() {
    	      // Empty
        }

        public Builder(NonceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nonceExpirationInterval = defaults.nonceExpirationInterval;
    	      this.validateNonce = defaults.validateNonce;
        }

        public Builder nonceExpirationInterval(@Nullable String nonceExpirationInterval) {
            this.nonceExpirationInterval = nonceExpirationInterval;
            return this;
        }

        public Builder validateNonce(@Nullable Boolean validateNonce) {
            this.validateNonce = validateNonce;
            return this;
        }
        public NonceResponse build() {
            return new NonceResponse(nonceExpirationInterval, validateNonce);
        }
    }
}
