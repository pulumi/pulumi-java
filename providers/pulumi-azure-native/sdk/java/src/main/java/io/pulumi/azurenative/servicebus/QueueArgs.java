// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicebus;

import io.pulumi.azurenative.servicebus.enums.EntityStatus;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class QueueArgs extends io.pulumi.resources.ResourceArgs {

    public static final QueueArgs Empty = new QueueArgs();

    /**
     * ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
     * 
     */
    @InputImport(name="autoDeleteOnIdle")
    private final @Nullable Input<String> autoDeleteOnIdle;

    public Input<String> getAutoDeleteOnIdle() {
        return this.autoDeleteOnIdle == null ? Input.empty() : this.autoDeleteOnIdle;
    }

    /**
     * A value that indicates whether this queue has dead letter support when a message expires.
     * 
     */
    @InputImport(name="deadLetteringOnMessageExpiration")
    private final @Nullable Input<Boolean> deadLetteringOnMessageExpiration;

    public Input<Boolean> getDeadLetteringOnMessageExpiration() {
        return this.deadLetteringOnMessageExpiration == null ? Input.empty() : this.deadLetteringOnMessageExpiration;
    }

    /**
     * ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
     */
    @InputImport(name="defaultMessageTimeToLive")
    private final @Nullable Input<String> defaultMessageTimeToLive;

    public Input<String> getDefaultMessageTimeToLive() {
        return this.defaultMessageTimeToLive == null ? Input.empty() : this.defaultMessageTimeToLive;
    }

    /**
     * ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
     * 
     */
    @InputImport(name="duplicateDetectionHistoryTimeWindow")
    private final @Nullable Input<String> duplicateDetectionHistoryTimeWindow;

    public Input<String> getDuplicateDetectionHistoryTimeWindow() {
        return this.duplicateDetectionHistoryTimeWindow == null ? Input.empty() : this.duplicateDetectionHistoryTimeWindow;
    }

    /**
     * Value that indicates whether server-side batched operations are enabled.
     * 
     */
    @InputImport(name="enableBatchedOperations")
    private final @Nullable Input<Boolean> enableBatchedOperations;

    public Input<Boolean> getEnableBatchedOperations() {
        return this.enableBatchedOperations == null ? Input.empty() : this.enableBatchedOperations;
    }

    /**
     * A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
     * 
     */
    @InputImport(name="enableExpress")
    private final @Nullable Input<Boolean> enableExpress;

    public Input<Boolean> getEnableExpress() {
        return this.enableExpress == null ? Input.empty() : this.enableExpress;
    }

    /**
     * A value that indicates whether the queue is to be partitioned across multiple message brokers.
     * 
     */
    @InputImport(name="enablePartitioning")
    private final @Nullable Input<Boolean> enablePartitioning;

    public Input<Boolean> getEnablePartitioning() {
        return this.enablePartitioning == null ? Input.empty() : this.enablePartitioning;
    }

    /**
     * Queue/Topic name to forward the Dead Letter message
     * 
     */
    @InputImport(name="forwardDeadLetteredMessagesTo")
    private final @Nullable Input<String> forwardDeadLetteredMessagesTo;

    public Input<String> getForwardDeadLetteredMessagesTo() {
        return this.forwardDeadLetteredMessagesTo == null ? Input.empty() : this.forwardDeadLetteredMessagesTo;
    }

    /**
     * Queue/Topic name to forward the messages
     * 
     */
    @InputImport(name="forwardTo")
    private final @Nullable Input<String> forwardTo;

    public Input<String> getForwardTo() {
        return this.forwardTo == null ? Input.empty() : this.forwardTo;
    }

    /**
     * ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
     * 
     */
    @InputImport(name="lockDuration")
    private final @Nullable Input<String> lockDuration;

    public Input<String> getLockDuration() {
        return this.lockDuration == null ? Input.empty() : this.lockDuration;
    }

    /**
     * The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
     * 
     */
    @InputImport(name="maxDeliveryCount")
    private final @Nullable Input<Integer> maxDeliveryCount;

    public Input<Integer> getMaxDeliveryCount() {
        return this.maxDeliveryCount == null ? Input.empty() : this.maxDeliveryCount;
    }

    /**
     * The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
     * 
     */
    @InputImport(name="maxSizeInMegabytes")
    private final @Nullable Input<Integer> maxSizeInMegabytes;

    public Input<Integer> getMaxSizeInMegabytes() {
        return this.maxSizeInMegabytes == null ? Input.empty() : this.maxSizeInMegabytes;
    }

    /**
     * The namespace name
     * 
     */
    @InputImport(name="namespaceName", required=true)
    private final Input<String> namespaceName;

    public Input<String> getNamespaceName() {
        return this.namespaceName;
    }

    /**
     * The queue name.
     * 
     */
    @InputImport(name="queueName")
    private final @Nullable Input<String> queueName;

    public Input<String> getQueueName() {
        return this.queueName == null ? Input.empty() : this.queueName;
    }

    /**
     * A value indicating if this queue requires duplicate detection.
     * 
     */
    @InputImport(name="requiresDuplicateDetection")
    private final @Nullable Input<Boolean> requiresDuplicateDetection;

    public Input<Boolean> getRequiresDuplicateDetection() {
        return this.requiresDuplicateDetection == null ? Input.empty() : this.requiresDuplicateDetection;
    }

    /**
     * A value that indicates whether the queue supports the concept of sessions.
     * 
     */
    @InputImport(name="requiresSession")
    private final @Nullable Input<Boolean> requiresSession;

    public Input<Boolean> getRequiresSession() {
        return this.requiresSession == null ? Input.empty() : this.requiresSession;
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Enumerates the possible values for the status of a messaging entity.
     * 
     */
    @InputImport(name="status")
    private final @Nullable Input<EntityStatus> status;

    public Input<EntityStatus> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    public QueueArgs(
        @Nullable Input<String> autoDeleteOnIdle,
        @Nullable Input<Boolean> deadLetteringOnMessageExpiration,
        @Nullable Input<String> defaultMessageTimeToLive,
        @Nullable Input<String> duplicateDetectionHistoryTimeWindow,
        @Nullable Input<Boolean> enableBatchedOperations,
        @Nullable Input<Boolean> enableExpress,
        @Nullable Input<Boolean> enablePartitioning,
        @Nullable Input<String> forwardDeadLetteredMessagesTo,
        @Nullable Input<String> forwardTo,
        @Nullable Input<String> lockDuration,
        @Nullable Input<Integer> maxDeliveryCount,
        @Nullable Input<Integer> maxSizeInMegabytes,
        Input<String> namespaceName,
        @Nullable Input<String> queueName,
        @Nullable Input<Boolean> requiresDuplicateDetection,
        @Nullable Input<Boolean> requiresSession,
        Input<String> resourceGroupName,
        @Nullable Input<EntityStatus> status) {
        this.autoDeleteOnIdle = autoDeleteOnIdle;
        this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
        this.defaultMessageTimeToLive = defaultMessageTimeToLive;
        this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
        this.enableBatchedOperations = enableBatchedOperations;
        this.enableExpress = enableExpress;
        this.enablePartitioning = enablePartitioning;
        this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
        this.forwardTo = forwardTo;
        this.lockDuration = lockDuration;
        this.maxDeliveryCount = maxDeliveryCount;
        this.maxSizeInMegabytes = maxSizeInMegabytes;
        this.namespaceName = Objects.requireNonNull(namespaceName, "expected parameter 'namespaceName' to be non-null");
        this.queueName = queueName;
        this.requiresDuplicateDetection = requiresDuplicateDetection;
        this.requiresSession = requiresSession;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.status = status;
    }

    private QueueArgs() {
        this.autoDeleteOnIdle = Input.empty();
        this.deadLetteringOnMessageExpiration = Input.empty();
        this.defaultMessageTimeToLive = Input.empty();
        this.duplicateDetectionHistoryTimeWindow = Input.empty();
        this.enableBatchedOperations = Input.empty();
        this.enableExpress = Input.empty();
        this.enablePartitioning = Input.empty();
        this.forwardDeadLetteredMessagesTo = Input.empty();
        this.forwardTo = Input.empty();
        this.lockDuration = Input.empty();
        this.maxDeliveryCount = Input.empty();
        this.maxSizeInMegabytes = Input.empty();
        this.namespaceName = Input.empty();
        this.queueName = Input.empty();
        this.requiresDuplicateDetection = Input.empty();
        this.requiresSession = Input.empty();
        this.resourceGroupName = Input.empty();
        this.status = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> autoDeleteOnIdle;
        private @Nullable Input<Boolean> deadLetteringOnMessageExpiration;
        private @Nullable Input<String> defaultMessageTimeToLive;
        private @Nullable Input<String> duplicateDetectionHistoryTimeWindow;
        private @Nullable Input<Boolean> enableBatchedOperations;
        private @Nullable Input<Boolean> enableExpress;
        private @Nullable Input<Boolean> enablePartitioning;
        private @Nullable Input<String> forwardDeadLetteredMessagesTo;
        private @Nullable Input<String> forwardTo;
        private @Nullable Input<String> lockDuration;
        private @Nullable Input<Integer> maxDeliveryCount;
        private @Nullable Input<Integer> maxSizeInMegabytes;
        private Input<String> namespaceName;
        private @Nullable Input<String> queueName;
        private @Nullable Input<Boolean> requiresDuplicateDetection;
        private @Nullable Input<Boolean> requiresSession;
        private Input<String> resourceGroupName;
        private @Nullable Input<EntityStatus> status;

        public Builder() {
    	      // Empty
        }

        public Builder(QueueArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoDeleteOnIdle = defaults.autoDeleteOnIdle;
    	      this.deadLetteringOnMessageExpiration = defaults.deadLetteringOnMessageExpiration;
    	      this.defaultMessageTimeToLive = defaults.defaultMessageTimeToLive;
    	      this.duplicateDetectionHistoryTimeWindow = defaults.duplicateDetectionHistoryTimeWindow;
    	      this.enableBatchedOperations = defaults.enableBatchedOperations;
    	      this.enableExpress = defaults.enableExpress;
    	      this.enablePartitioning = defaults.enablePartitioning;
    	      this.forwardDeadLetteredMessagesTo = defaults.forwardDeadLetteredMessagesTo;
    	      this.forwardTo = defaults.forwardTo;
    	      this.lockDuration = defaults.lockDuration;
    	      this.maxDeliveryCount = defaults.maxDeliveryCount;
    	      this.maxSizeInMegabytes = defaults.maxSizeInMegabytes;
    	      this.namespaceName = defaults.namespaceName;
    	      this.queueName = defaults.queueName;
    	      this.requiresDuplicateDetection = defaults.requiresDuplicateDetection;
    	      this.requiresSession = defaults.requiresSession;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.status = defaults.status;
        }

        public Builder setAutoDeleteOnIdle(@Nullable Input<String> autoDeleteOnIdle) {
            this.autoDeleteOnIdle = autoDeleteOnIdle;
            return this;
        }

        public Builder setAutoDeleteOnIdle(@Nullable String autoDeleteOnIdle) {
            this.autoDeleteOnIdle = Input.ofNullable(autoDeleteOnIdle);
            return this;
        }

        public Builder setDeadLetteringOnMessageExpiration(@Nullable Input<Boolean> deadLetteringOnMessageExpiration) {
            this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
            return this;
        }

        public Builder setDeadLetteringOnMessageExpiration(@Nullable Boolean deadLetteringOnMessageExpiration) {
            this.deadLetteringOnMessageExpiration = Input.ofNullable(deadLetteringOnMessageExpiration);
            return this;
        }

        public Builder setDefaultMessageTimeToLive(@Nullable Input<String> defaultMessageTimeToLive) {
            this.defaultMessageTimeToLive = defaultMessageTimeToLive;
            return this;
        }

        public Builder setDefaultMessageTimeToLive(@Nullable String defaultMessageTimeToLive) {
            this.defaultMessageTimeToLive = Input.ofNullable(defaultMessageTimeToLive);
            return this;
        }

        public Builder setDuplicateDetectionHistoryTimeWindow(@Nullable Input<String> duplicateDetectionHistoryTimeWindow) {
            this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            return this;
        }

        public Builder setDuplicateDetectionHistoryTimeWindow(@Nullable String duplicateDetectionHistoryTimeWindow) {
            this.duplicateDetectionHistoryTimeWindow = Input.ofNullable(duplicateDetectionHistoryTimeWindow);
            return this;
        }

        public Builder setEnableBatchedOperations(@Nullable Input<Boolean> enableBatchedOperations) {
            this.enableBatchedOperations = enableBatchedOperations;
            return this;
        }

        public Builder setEnableBatchedOperations(@Nullable Boolean enableBatchedOperations) {
            this.enableBatchedOperations = Input.ofNullable(enableBatchedOperations);
            return this;
        }

        public Builder setEnableExpress(@Nullable Input<Boolean> enableExpress) {
            this.enableExpress = enableExpress;
            return this;
        }

        public Builder setEnableExpress(@Nullable Boolean enableExpress) {
            this.enableExpress = Input.ofNullable(enableExpress);
            return this;
        }

        public Builder setEnablePartitioning(@Nullable Input<Boolean> enablePartitioning) {
            this.enablePartitioning = enablePartitioning;
            return this;
        }

        public Builder setEnablePartitioning(@Nullable Boolean enablePartitioning) {
            this.enablePartitioning = Input.ofNullable(enablePartitioning);
            return this;
        }

        public Builder setForwardDeadLetteredMessagesTo(@Nullable Input<String> forwardDeadLetteredMessagesTo) {
            this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
            return this;
        }

        public Builder setForwardDeadLetteredMessagesTo(@Nullable String forwardDeadLetteredMessagesTo) {
            this.forwardDeadLetteredMessagesTo = Input.ofNullable(forwardDeadLetteredMessagesTo);
            return this;
        }

        public Builder setForwardTo(@Nullable Input<String> forwardTo) {
            this.forwardTo = forwardTo;
            return this;
        }

        public Builder setForwardTo(@Nullable String forwardTo) {
            this.forwardTo = Input.ofNullable(forwardTo);
            return this;
        }

        public Builder setLockDuration(@Nullable Input<String> lockDuration) {
            this.lockDuration = lockDuration;
            return this;
        }

        public Builder setLockDuration(@Nullable String lockDuration) {
            this.lockDuration = Input.ofNullable(lockDuration);
            return this;
        }

        public Builder setMaxDeliveryCount(@Nullable Input<Integer> maxDeliveryCount) {
            this.maxDeliveryCount = maxDeliveryCount;
            return this;
        }

        public Builder setMaxDeliveryCount(@Nullable Integer maxDeliveryCount) {
            this.maxDeliveryCount = Input.ofNullable(maxDeliveryCount);
            return this;
        }

        public Builder setMaxSizeInMegabytes(@Nullable Input<Integer> maxSizeInMegabytes) {
            this.maxSizeInMegabytes = maxSizeInMegabytes;
            return this;
        }

        public Builder setMaxSizeInMegabytes(@Nullable Integer maxSizeInMegabytes) {
            this.maxSizeInMegabytes = Input.ofNullable(maxSizeInMegabytes);
            return this;
        }

        public Builder setNamespaceName(Input<String> namespaceName) {
            this.namespaceName = Objects.requireNonNull(namespaceName);
            return this;
        }

        public Builder setNamespaceName(String namespaceName) {
            this.namespaceName = Input.of(Objects.requireNonNull(namespaceName));
            return this;
        }

        public Builder setQueueName(@Nullable Input<String> queueName) {
            this.queueName = queueName;
            return this;
        }

        public Builder setQueueName(@Nullable String queueName) {
            this.queueName = Input.ofNullable(queueName);
            return this;
        }

        public Builder setRequiresDuplicateDetection(@Nullable Input<Boolean> requiresDuplicateDetection) {
            this.requiresDuplicateDetection = requiresDuplicateDetection;
            return this;
        }

        public Builder setRequiresDuplicateDetection(@Nullable Boolean requiresDuplicateDetection) {
            this.requiresDuplicateDetection = Input.ofNullable(requiresDuplicateDetection);
            return this;
        }

        public Builder setRequiresSession(@Nullable Input<Boolean> requiresSession) {
            this.requiresSession = requiresSession;
            return this;
        }

        public Builder setRequiresSession(@Nullable Boolean requiresSession) {
            this.requiresSession = Input.ofNullable(requiresSession);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setStatus(@Nullable Input<EntityStatus> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable EntityStatus status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public QueueArgs build() {
            return new QueueArgs(autoDeleteOnIdle, deadLetteringOnMessageExpiration, defaultMessageTimeToLive, duplicateDetectionHistoryTimeWindow, enableBatchedOperations, enableExpress, enablePartitioning, forwardDeadLetteredMessagesTo, forwardTo, lockDuration, maxDeliveryCount, maxSizeInMegabytes, namespaceName, queueName, requiresDuplicateDetection, requiresSession, resourceGroupName, status);
        }
    }
}
