// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.labservices.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class LatestOperationResultResponse extends io.pulumi.resources.InvokeArgs {

    public static final LatestOperationResultResponse Empty = new LatestOperationResultResponse();

    @InputImport(name="errorCode", required=true)
    private final String errorCode;

    public String getErrorCode() {
        return this.errorCode;
    }

    @InputImport(name="errorMessage", required=true)
    private final String errorMessage;

    public String getErrorMessage() {
        return this.errorMessage;
    }

    @InputImport(name="httpMethod", required=true)
    private final String httpMethod;

    public String getHttpMethod() {
        return this.httpMethod;
    }

    @InputImport(name="operationUrl", required=true)
    private final String operationUrl;

    public String getOperationUrl() {
        return this.operationUrl;
    }

    @InputImport(name="requestUri", required=true)
    private final String requestUri;

    public String getRequestUri() {
        return this.requestUri;
    }

    @InputImport(name="status", required=true)
    private final String status;

    public String getStatus() {
        return this.status;
    }

    public LatestOperationResultResponse(
        String errorCode,
        String errorMessage,
        String httpMethod,
        String operationUrl,
        String requestUri,
        String status) {
        this.errorCode = Objects.requireNonNull(errorCode, "expected parameter 'errorCode' to be non-null");
        this.errorMessage = Objects.requireNonNull(errorMessage, "expected parameter 'errorMessage' to be non-null");
        this.httpMethod = Objects.requireNonNull(httpMethod, "expected parameter 'httpMethod' to be non-null");
        this.operationUrl = Objects.requireNonNull(operationUrl, "expected parameter 'operationUrl' to be non-null");
        this.requestUri = Objects.requireNonNull(requestUri, "expected parameter 'requestUri' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
    }

    private LatestOperationResultResponse() {
        this.errorCode = null;
        this.errorMessage = null;
        this.httpMethod = null;
        this.operationUrl = null;
        this.requestUri = null;
        this.status = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LatestOperationResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String errorCode;
        private String errorMessage;
        private String httpMethod;
        private String operationUrl;
        private String requestUri;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(LatestOperationResultResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.errorCode = defaults.errorCode;
    	      this.errorMessage = defaults.errorMessage;
    	      this.httpMethod = defaults.httpMethod;
    	      this.operationUrl = defaults.operationUrl;
    	      this.requestUri = defaults.requestUri;
    	      this.status = defaults.status;
        }

        public Builder setErrorCode(String errorCode) {
            this.errorCode = Objects.requireNonNull(errorCode);
            return this;
        }

        public Builder setErrorMessage(String errorMessage) {
            this.errorMessage = Objects.requireNonNull(errorMessage);
            return this;
        }

        public Builder setHttpMethod(String httpMethod) {
            this.httpMethod = Objects.requireNonNull(httpMethod);
            return this;
        }

        public Builder setOperationUrl(String operationUrl) {
            this.operationUrl = Objects.requireNonNull(operationUrl);
            return this;
        }

        public Builder setRequestUri(String requestUri) {
            this.requestUri = Objects.requireNonNull(requestUri);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public LatestOperationResultResponse build() {
            return new LatestOperationResultResponse(errorCode, errorMessage, httpMethod, operationUrl, requestUri, status);
        }
    }
}
