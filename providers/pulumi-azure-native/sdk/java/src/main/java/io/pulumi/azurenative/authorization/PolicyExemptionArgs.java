// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.authorization;

import io.pulumi.azurenative.authorization.enums.ExemptionCategory;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PolicyExemptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final PolicyExemptionArgs Empty = new PolicyExemptionArgs();

    /**
     * The description of the policy exemption.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The display name of the policy exemption.
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * The policy exemption category. Possible values are Waiver and Mitigated.
     * 
     */
    @InputImport(name="exemptionCategory", required=true)
      private final Output<Either<String,ExemptionCategory>> exemptionCategory;

    public Output<Either<String,ExemptionCategory>> getExemptionCategory() {
        return this.exemptionCategory;
    }

    /**
     * The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy exemption.
     * 
     */
    @InputImport(name="expiresOn")
      private final @Nullable Output<String> expiresOn;

    public Output<String> getExpiresOn() {
        return this.expiresOn == null ? Output.empty() : this.expiresOn;
    }

    /**
     * The policy exemption metadata. Metadata is an open ended object and is typically a collection of key value pairs.
     * 
     */
    @InputImport(name="metadata")
      private final @Nullable Output<Object> metadata;

    public Output<Object> getMetadata() {
        return this.metadata == null ? Output.empty() : this.metadata;
    }

    /**
     * The ID of the policy assignment that is being exempted.
     * 
     */
    @InputImport(name="policyAssignmentId", required=true)
      private final Output<String> policyAssignmentId;

    public Output<String> getPolicyAssignmentId() {
        return this.policyAssignmentId;
    }

    /**
     * The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
     * 
     */
    @InputImport(name="policyDefinitionReferenceIds")
      private final @Nullable Output<List<String>> policyDefinitionReferenceIds;

    public Output<List<String>> getPolicyDefinitionReferenceIds() {
        return this.policyDefinitionReferenceIds == null ? Output.empty() : this.policyDefinitionReferenceIds;
    }

    /**
     * The name of the policy exemption to delete.
     * 
     */
    @InputImport(name="policyExemptionName")
      private final @Nullable Output<String> policyExemptionName;

    public Output<String> getPolicyExemptionName() {
        return this.policyExemptionName == null ? Output.empty() : this.policyExemptionName;
    }

    /**
     * The scope of the policy exemption. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * 
     */
    @InputImport(name="scope", required=true)
      private final Output<String> scope;

    public Output<String> getScope() {
        return this.scope;
    }

    public PolicyExemptionArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        Output<Either<String,ExemptionCategory>> exemptionCategory,
        @Nullable Output<String> expiresOn,
        @Nullable Output<Object> metadata,
        Output<String> policyAssignmentId,
        @Nullable Output<List<String>> policyDefinitionReferenceIds,
        @Nullable Output<String> policyExemptionName,
        Output<String> scope) {
        this.description = description;
        this.displayName = displayName;
        this.exemptionCategory = Objects.requireNonNull(exemptionCategory, "expected parameter 'exemptionCategory' to be non-null");
        this.expiresOn = expiresOn;
        this.metadata = metadata;
        this.policyAssignmentId = Objects.requireNonNull(policyAssignmentId, "expected parameter 'policyAssignmentId' to be non-null");
        this.policyDefinitionReferenceIds = policyDefinitionReferenceIds;
        this.policyExemptionName = policyExemptionName;
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
    }

    private PolicyExemptionArgs() {
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.exemptionCategory = Output.empty();
        this.expiresOn = Output.empty();
        this.metadata = Output.empty();
        this.policyAssignmentId = Output.empty();
        this.policyDefinitionReferenceIds = Output.empty();
        this.policyExemptionName = Output.empty();
        this.scope = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyExemptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private Output<Either<String,ExemptionCategory>> exemptionCategory;
        private @Nullable Output<String> expiresOn;
        private @Nullable Output<Object> metadata;
        private Output<String> policyAssignmentId;
        private @Nullable Output<List<String>> policyDefinitionReferenceIds;
        private @Nullable Output<String> policyExemptionName;
        private Output<String> scope;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyExemptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.exemptionCategory = defaults.exemptionCategory;
    	      this.expiresOn = defaults.expiresOn;
    	      this.metadata = defaults.metadata;
    	      this.policyAssignmentId = defaults.policyAssignmentId;
    	      this.policyDefinitionReferenceIds = defaults.policyDefinitionReferenceIds;
    	      this.policyExemptionName = defaults.policyExemptionName;
    	      this.scope = defaults.scope;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder exemptionCategory(Output<Either<String,ExemptionCategory>> exemptionCategory) {
            this.exemptionCategory = Objects.requireNonNull(exemptionCategory);
            return this;
        }

        public Builder exemptionCategory(Either<String,ExemptionCategory> exemptionCategory) {
            this.exemptionCategory = Output.of(Objects.requireNonNull(exemptionCategory));
            return this;
        }

        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            this.expiresOn = expiresOn;
            return this;
        }

        public Builder expiresOn(@Nullable String expiresOn) {
            this.expiresOn = Output.ofNullable(expiresOn);
            return this;
        }

        public Builder metadata(@Nullable Output<Object> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(@Nullable Object metadata) {
            this.metadata = Output.ofNullable(metadata);
            return this;
        }

        public Builder policyAssignmentId(Output<String> policyAssignmentId) {
            this.policyAssignmentId = Objects.requireNonNull(policyAssignmentId);
            return this;
        }

        public Builder policyAssignmentId(String policyAssignmentId) {
            this.policyAssignmentId = Output.of(Objects.requireNonNull(policyAssignmentId));
            return this;
        }

        public Builder policyDefinitionReferenceIds(@Nullable Output<List<String>> policyDefinitionReferenceIds) {
            this.policyDefinitionReferenceIds = policyDefinitionReferenceIds;
            return this;
        }

        public Builder policyDefinitionReferenceIds(@Nullable List<String> policyDefinitionReferenceIds) {
            this.policyDefinitionReferenceIds = Output.ofNullable(policyDefinitionReferenceIds);
            return this;
        }

        public Builder policyExemptionName(@Nullable Output<String> policyExemptionName) {
            this.policyExemptionName = policyExemptionName;
            return this;
        }

        public Builder policyExemptionName(@Nullable String policyExemptionName) {
            this.policyExemptionName = Output.ofNullable(policyExemptionName);
            return this;
        }

        public Builder scope(Output<String> scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }

        public Builder scope(String scope) {
            this.scope = Output.of(Objects.requireNonNull(scope));
            return this;
        }
        public PolicyExemptionArgs build() {
            return new PolicyExemptionArgs(description, displayName, exemptionCategory, expiresOn, metadata, policyAssignmentId, policyDefinitionReferenceIds, policyExemptionName, scope);
        }
    }
}
