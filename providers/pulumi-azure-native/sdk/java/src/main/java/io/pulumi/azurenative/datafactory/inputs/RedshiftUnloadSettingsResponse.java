// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Object;
import java.util.Objects;


public final class RedshiftUnloadSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final RedshiftUnloadSettingsResponse Empty = new RedshiftUnloadSettingsResponse();

    @InputImport(name="bucketName", required=true)
    private final Object bucketName;

    public Object getBucketName() {
        return this.bucketName;
    }

    @InputImport(name="s3LinkedServiceName", required=true)
    private final LinkedServiceReferenceResponse s3LinkedServiceName;

    public LinkedServiceReferenceResponse getS3LinkedServiceName() {
        return this.s3LinkedServiceName;
    }

    public RedshiftUnloadSettingsResponse(
        Object bucketName,
        LinkedServiceReferenceResponse s3LinkedServiceName) {
        this.bucketName = Objects.requireNonNull(bucketName, "expected parameter 'bucketName' to be non-null");
        this.s3LinkedServiceName = Objects.requireNonNull(s3LinkedServiceName, "expected parameter 's3LinkedServiceName' to be non-null");
    }

    private RedshiftUnloadSettingsResponse() {
        this.bucketName = null;
        this.s3LinkedServiceName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RedshiftUnloadSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Object bucketName;
        private LinkedServiceReferenceResponse s3LinkedServiceName;

        public Builder() {
    	      // Empty
        }

        public Builder(RedshiftUnloadSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketName = defaults.bucketName;
    	      this.s3LinkedServiceName = defaults.s3LinkedServiceName;
        }

        public Builder setBucketName(Object bucketName) {
            this.bucketName = Objects.requireNonNull(bucketName);
            return this;
        }

        public Builder setS3LinkedServiceName(LinkedServiceReferenceResponse s3LinkedServiceName) {
            this.s3LinkedServiceName = Objects.requireNonNull(s3LinkedServiceName);
            return this;
        }

        public RedshiftUnloadSettingsResponse build() {
            return new RedshiftUnloadSettingsResponse(bucketName, s3LinkedServiceName);
        }
    }
}
