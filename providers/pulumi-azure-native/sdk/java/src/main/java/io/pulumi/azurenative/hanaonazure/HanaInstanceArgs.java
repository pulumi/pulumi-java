// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.hanaonazure;

import io.pulumi.azurenative.hanaonazure.inputs.NetworkProfileArgs;
import io.pulumi.azurenative.hanaonazure.inputs.OSProfileArgs;
import io.pulumi.azurenative.hanaonazure.inputs.StorageProfileArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HanaInstanceArgs extends io.pulumi.resources.ResourceArgs {

    public static final HanaInstanceArgs Empty = new HanaInstanceArgs();

    /**
     * Name of the SAP HANA on Azure instance.
     * 
     */
    @Import(name="hanaInstanceName")
      private final @Nullable Output<String> hanaInstanceName;

    public Output<String> getHanaInstanceName() {
        return this.hanaInstanceName == null ? Codegen.empty() : this.hanaInstanceName;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Specifies the network settings for the HANA instance.
     * 
     */
    @Import(name="networkProfile")
      private final @Nullable Output<NetworkProfileArgs> networkProfile;

    public Output<NetworkProfileArgs> getNetworkProfile() {
        return this.networkProfile == null ? Codegen.empty() : this.networkProfile;
    }

    /**
     * Specifies the operating system settings for the HANA instance.
     * 
     */
    @Import(name="osProfile")
      private final @Nullable Output<OSProfileArgs> osProfile;

    public Output<OSProfileArgs> getOsProfile() {
        return this.osProfile == null ? Codegen.empty() : this.osProfile;
    }

    /**
     * ARM ID of another HanaInstance that will share a network with this HanaInstance
     * 
     */
    @Import(name="partnerNodeId")
      private final @Nullable Output<String> partnerNodeId;

    public Output<String> getPartnerNodeId() {
        return this.partnerNodeId == null ? Codegen.empty() : this.partnerNodeId;
    }

    /**
     * Name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies the storage settings for the HANA instance disks.
     * 
     */
    @Import(name="storageProfile")
      private final @Nullable Output<StorageProfileArgs> storageProfile;

    public Output<StorageProfileArgs> getStorageProfile() {
        return this.storageProfile == null ? Codegen.empty() : this.storageProfile;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public HanaInstanceArgs(
        @Nullable Output<String> hanaInstanceName,
        @Nullable Output<String> location,
        @Nullable Output<NetworkProfileArgs> networkProfile,
        @Nullable Output<OSProfileArgs> osProfile,
        @Nullable Output<String> partnerNodeId,
        Output<String> resourceGroupName,
        @Nullable Output<StorageProfileArgs> storageProfile,
        @Nullable Output<Map<String,String>> tags) {
        this.hanaInstanceName = hanaInstanceName;
        this.location = location;
        this.networkProfile = networkProfile;
        this.osProfile = osProfile;
        this.partnerNodeId = partnerNodeId;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.storageProfile = storageProfile;
        this.tags = tags;
    }

    private HanaInstanceArgs() {
        this.hanaInstanceName = Codegen.empty();
        this.location = Codegen.empty();
        this.networkProfile = Codegen.empty();
        this.osProfile = Codegen.empty();
        this.partnerNodeId = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.storageProfile = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HanaInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> hanaInstanceName;
        private @Nullable Output<String> location;
        private @Nullable Output<NetworkProfileArgs> networkProfile;
        private @Nullable Output<OSProfileArgs> osProfile;
        private @Nullable Output<String> partnerNodeId;
        private Output<String> resourceGroupName;
        private @Nullable Output<StorageProfileArgs> storageProfile;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(HanaInstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hanaInstanceName = defaults.hanaInstanceName;
    	      this.location = defaults.location;
    	      this.networkProfile = defaults.networkProfile;
    	      this.osProfile = defaults.osProfile;
    	      this.partnerNodeId = defaults.partnerNodeId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.storageProfile = defaults.storageProfile;
    	      this.tags = defaults.tags;
        }

        public Builder hanaInstanceName(@Nullable Output<String> hanaInstanceName) {
            this.hanaInstanceName = hanaInstanceName;
            return this;
        }
        public Builder hanaInstanceName(@Nullable String hanaInstanceName) {
            this.hanaInstanceName = Codegen.ofNullable(hanaInstanceName);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder networkProfile(@Nullable Output<NetworkProfileArgs> networkProfile) {
            this.networkProfile = networkProfile;
            return this;
        }
        public Builder networkProfile(@Nullable NetworkProfileArgs networkProfile) {
            this.networkProfile = Codegen.ofNullable(networkProfile);
            return this;
        }
        public Builder osProfile(@Nullable Output<OSProfileArgs> osProfile) {
            this.osProfile = osProfile;
            return this;
        }
        public Builder osProfile(@Nullable OSProfileArgs osProfile) {
            this.osProfile = Codegen.ofNullable(osProfile);
            return this;
        }
        public Builder partnerNodeId(@Nullable Output<String> partnerNodeId) {
            this.partnerNodeId = partnerNodeId;
            return this;
        }
        public Builder partnerNodeId(@Nullable String partnerNodeId) {
            this.partnerNodeId = Codegen.ofNullable(partnerNodeId);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder storageProfile(@Nullable Output<StorageProfileArgs> storageProfile) {
            this.storageProfile = storageProfile;
            return this;
        }
        public Builder storageProfile(@Nullable StorageProfileArgs storageProfile) {
            this.storageProfile = Codegen.ofNullable(storageProfile);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public HanaInstanceArgs build() {
            return new HanaInstanceArgs(hanaInstanceName, location, networkProfile, osProfile, partnerNodeId, resourceGroupName, storageProfile, tags);
        }
    }
}
