// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.TransportProtocol;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Inbound NAT pool of the load balancer.
 * 
 */
public final class InboundNatPoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final InboundNatPoolArgs Empty = new InboundNatPoolArgs();

    /**
     * The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
     * 
     */
    @InputImport(name="backendPort", required=true)
      private final Output<Integer> backendPort;

    public Output<Integer> getBackendPort() {
        return this.backendPort;
    }

    /**
     * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
     * 
     */
    @InputImport(name="enableFloatingIP")
      private final @Nullable Output<Boolean> enableFloatingIP;

    public Output<Boolean> getEnableFloatingIP() {
        return this.enableFloatingIP == null ? Output.empty() : this.enableFloatingIP;
    }

    /**
     * Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
     * 
     */
    @InputImport(name="enableTcpReset")
      private final @Nullable Output<Boolean> enableTcpReset;

    public Output<Boolean> getEnableTcpReset() {
        return this.enableTcpReset == null ? Output.empty() : this.enableTcpReset;
    }

    /**
     * A reference to frontend IP addresses.
     * 
     */
    @InputImport(name="frontendIPConfiguration")
      private final @Nullable Output<SubResourceArgs> frontendIPConfiguration;

    public Output<SubResourceArgs> getFrontendIPConfiguration() {
        return this.frontendIPConfiguration == null ? Output.empty() : this.frontendIPConfiguration;
    }

    /**
     * The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
     * 
     */
    @InputImport(name="frontendPortRangeEnd", required=true)
      private final Output<Integer> frontendPortRangeEnd;

    public Output<Integer> getFrontendPortRangeEnd() {
        return this.frontendPortRangeEnd;
    }

    /**
     * The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
     * 
     */
    @InputImport(name="frontendPortRangeStart", required=true)
      private final Output<Integer> frontendPortRangeStart;

    public Output<Integer> getFrontendPortRangeStart() {
        return this.frontendPortRangeStart;
    }

    /**
     * Resource ID.
     * 
     */
    @InputImport(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
     * 
     */
    @InputImport(name="idleTimeoutInMinutes")
      private final @Nullable Output<Integer> idleTimeoutInMinutes;

    public Output<Integer> getIdleTimeoutInMinutes() {
        return this.idleTimeoutInMinutes == null ? Output.empty() : this.idleTimeoutInMinutes;
    }

    /**
     * The name of the resource that is unique within the set of inbound NAT pools used by the load balancer. This name can be used to access the resource.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The reference to the transport protocol used by the inbound NAT pool.
     * 
     */
    @InputImport(name="protocol", required=true)
      private final Output<Either<String,TransportProtocol>> protocol;

    public Output<Either<String,TransportProtocol>> getProtocol() {
        return this.protocol;
    }

    public InboundNatPoolArgs(
        Output<Integer> backendPort,
        @Nullable Output<Boolean> enableFloatingIP,
        @Nullable Output<Boolean> enableTcpReset,
        @Nullable Output<SubResourceArgs> frontendIPConfiguration,
        Output<Integer> frontendPortRangeEnd,
        Output<Integer> frontendPortRangeStart,
        @Nullable Output<String> id,
        @Nullable Output<Integer> idleTimeoutInMinutes,
        @Nullable Output<String> name,
        Output<Either<String,TransportProtocol>> protocol) {
        this.backendPort = Objects.requireNonNull(backendPort, "expected parameter 'backendPort' to be non-null");
        this.enableFloatingIP = enableFloatingIP;
        this.enableTcpReset = enableTcpReset;
        this.frontendIPConfiguration = frontendIPConfiguration;
        this.frontendPortRangeEnd = Objects.requireNonNull(frontendPortRangeEnd, "expected parameter 'frontendPortRangeEnd' to be non-null");
        this.frontendPortRangeStart = Objects.requireNonNull(frontendPortRangeStart, "expected parameter 'frontendPortRangeStart' to be non-null");
        this.id = id;
        this.idleTimeoutInMinutes = idleTimeoutInMinutes;
        this.name = name;
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
    }

    private InboundNatPoolArgs() {
        this.backendPort = Output.empty();
        this.enableFloatingIP = Output.empty();
        this.enableTcpReset = Output.empty();
        this.frontendIPConfiguration = Output.empty();
        this.frontendPortRangeEnd = Output.empty();
        this.frontendPortRangeStart = Output.empty();
        this.id = Output.empty();
        this.idleTimeoutInMinutes = Output.empty();
        this.name = Output.empty();
        this.protocol = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InboundNatPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> backendPort;
        private @Nullable Output<Boolean> enableFloatingIP;
        private @Nullable Output<Boolean> enableTcpReset;
        private @Nullable Output<SubResourceArgs> frontendIPConfiguration;
        private Output<Integer> frontendPortRangeEnd;
        private Output<Integer> frontendPortRangeStart;
        private @Nullable Output<String> id;
        private @Nullable Output<Integer> idleTimeoutInMinutes;
        private @Nullable Output<String> name;
        private Output<Either<String,TransportProtocol>> protocol;

        public Builder() {
    	      // Empty
        }

        public Builder(InboundNatPoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendPort = defaults.backendPort;
    	      this.enableFloatingIP = defaults.enableFloatingIP;
    	      this.enableTcpReset = defaults.enableTcpReset;
    	      this.frontendIPConfiguration = defaults.frontendIPConfiguration;
    	      this.frontendPortRangeEnd = defaults.frontendPortRangeEnd;
    	      this.frontendPortRangeStart = defaults.frontendPortRangeStart;
    	      this.id = defaults.id;
    	      this.idleTimeoutInMinutes = defaults.idleTimeoutInMinutes;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
        }

        public Builder backendPort(Output<Integer> backendPort) {
            this.backendPort = Objects.requireNonNull(backendPort);
            return this;
        }

        public Builder backendPort(Integer backendPort) {
            this.backendPort = Output.of(Objects.requireNonNull(backendPort));
            return this;
        }

        public Builder enableFloatingIP(@Nullable Output<Boolean> enableFloatingIP) {
            this.enableFloatingIP = enableFloatingIP;
            return this;
        }

        public Builder enableFloatingIP(@Nullable Boolean enableFloatingIP) {
            this.enableFloatingIP = Output.ofNullable(enableFloatingIP);
            return this;
        }

        public Builder enableTcpReset(@Nullable Output<Boolean> enableTcpReset) {
            this.enableTcpReset = enableTcpReset;
            return this;
        }

        public Builder enableTcpReset(@Nullable Boolean enableTcpReset) {
            this.enableTcpReset = Output.ofNullable(enableTcpReset);
            return this;
        }

        public Builder frontendIPConfiguration(@Nullable Output<SubResourceArgs> frontendIPConfiguration) {
            this.frontendIPConfiguration = frontendIPConfiguration;
            return this;
        }

        public Builder frontendIPConfiguration(@Nullable SubResourceArgs frontendIPConfiguration) {
            this.frontendIPConfiguration = Output.ofNullable(frontendIPConfiguration);
            return this;
        }

        public Builder frontendPortRangeEnd(Output<Integer> frontendPortRangeEnd) {
            this.frontendPortRangeEnd = Objects.requireNonNull(frontendPortRangeEnd);
            return this;
        }

        public Builder frontendPortRangeEnd(Integer frontendPortRangeEnd) {
            this.frontendPortRangeEnd = Output.of(Objects.requireNonNull(frontendPortRangeEnd));
            return this;
        }

        public Builder frontendPortRangeStart(Output<Integer> frontendPortRangeStart) {
            this.frontendPortRangeStart = Objects.requireNonNull(frontendPortRangeStart);
            return this;
        }

        public Builder frontendPortRangeStart(Integer frontendPortRangeStart) {
            this.frontendPortRangeStart = Output.of(Objects.requireNonNull(frontendPortRangeStart));
            return this;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }

        public Builder idleTimeoutInMinutes(@Nullable Output<Integer> idleTimeoutInMinutes) {
            this.idleTimeoutInMinutes = idleTimeoutInMinutes;
            return this;
        }

        public Builder idleTimeoutInMinutes(@Nullable Integer idleTimeoutInMinutes) {
            this.idleTimeoutInMinutes = Output.ofNullable(idleTimeoutInMinutes);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder protocol(Output<Either<String,TransportProtocol>> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder protocol(Either<String,TransportProtocol> protocol) {
            this.protocol = Output.of(Objects.requireNonNull(protocol));
            return this;
        }
        public InboundNatPoolArgs build() {
            return new InboundNatPoolArgs(backendPort, enableFloatingIP, enableTcpReset, frontendIPConfiguration, frontendPortRangeEnd, frontendPortRangeStart, id, idleTimeoutInMinutes, name, protocol);
        }
    }
}
