// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.outputs;

import io.pulumi.azurenative.cdn.outputs.KeyVaultCertificateSourceParametersResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class UserManagedHttpsParametersResponse {
    /**
     * Defines the source of the SSL certificate.
     * Expected value is 'AzureKeyVault'.
     * 
     */
    private final String certificateSource;
    /**
     * Defines the certificate source parameters using user's keyvault certificate for enabling SSL.
     * 
     */
    private final KeyVaultCertificateSourceParametersResponse certificateSourceParameters;
    /**
     * TLS protocol version that will be used for Https
     * 
     */
    private final @Nullable String minimumTlsVersion;
    /**
     * Defines the TLS extension protocol that is used for secure delivery.
     * 
     */
    private final String protocolType;

    @OutputCustomType.Constructor
    private UserManagedHttpsParametersResponse(
        @OutputCustomType.Parameter("certificateSource") String certificateSource,
        @OutputCustomType.Parameter("certificateSourceParameters") KeyVaultCertificateSourceParametersResponse certificateSourceParameters,
        @OutputCustomType.Parameter("minimumTlsVersion") @Nullable String minimumTlsVersion,
        @OutputCustomType.Parameter("protocolType") String protocolType) {
        this.certificateSource = certificateSource;
        this.certificateSourceParameters = certificateSourceParameters;
        this.minimumTlsVersion = minimumTlsVersion;
        this.protocolType = protocolType;
    }

    /**
     * Defines the source of the SSL certificate.
     * Expected value is 'AzureKeyVault'.
     * 
    */
    public String getCertificateSource() {
        return this.certificateSource;
    }
    /**
     * Defines the certificate source parameters using user's keyvault certificate for enabling SSL.
     * 
    */
    public KeyVaultCertificateSourceParametersResponse getCertificateSourceParameters() {
        return this.certificateSourceParameters;
    }
    /**
     * TLS protocol version that will be used for Https
     * 
    */
    public Optional<String> getMinimumTlsVersion() {
        return Optional.ofNullable(this.minimumTlsVersion);
    }
    /**
     * Defines the TLS extension protocol that is used for secure delivery.
     * 
    */
    public String getProtocolType() {
        return this.protocolType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserManagedHttpsParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String certificateSource;
        private KeyVaultCertificateSourceParametersResponse certificateSourceParameters;
        private @Nullable String minimumTlsVersion;
        private String protocolType;

        public Builder() {
    	      // Empty
        }

        public Builder(UserManagedHttpsParametersResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateSource = defaults.certificateSource;
    	      this.certificateSourceParameters = defaults.certificateSourceParameters;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.protocolType = defaults.protocolType;
        }

        public Builder certificateSource(String certificateSource) {
            this.certificateSource = Objects.requireNonNull(certificateSource);
            return this;
        }

        public Builder certificateSourceParameters(KeyVaultCertificateSourceParametersResponse certificateSourceParameters) {
            this.certificateSourceParameters = Objects.requireNonNull(certificateSourceParameters);
            return this;
        }

        public Builder minimumTlsVersion(@Nullable String minimumTlsVersion) {
            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }

        public Builder protocolType(String protocolType) {
            this.protocolType = Objects.requireNonNull(protocolType);
            return this;
        }
        public UserManagedHttpsParametersResponse build() {
            return new UserManagedHttpsParametersResponse(certificateSource, certificateSourceParameters, minimumTlsVersion, protocolType);
        }
    }
}
