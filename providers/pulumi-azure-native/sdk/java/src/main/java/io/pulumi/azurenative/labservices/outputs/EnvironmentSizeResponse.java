// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.labservices.outputs;

import io.pulumi.azurenative.labservices.outputs.SizeInfoResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class EnvironmentSizeResponse {
    /**
     * The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.
     * 
     */
    private final Double maxPrice;
    /**
     * The amount of memory available (in GB). This is the minimum amount of memory within this tier.
     * 
     */
    private final Double minMemory;
    /**
     * The number of cores a VM of this size has. This is the minimum number of cores within this tier.
     * 
     */
    private final Integer minNumberOfCores;
    /**
     * The size category
     * 
     */
    private final @Nullable String name;
    /**
     * Represents a set of compute sizes that can serve this given size type
     * 
     */
    private final @Nullable List<SizeInfoResponse> vmSizes;

    @OutputCustomType.Constructor
    private EnvironmentSizeResponse(
        @OutputCustomType.Parameter("maxPrice") Double maxPrice,
        @OutputCustomType.Parameter("minMemory") Double minMemory,
        @OutputCustomType.Parameter("minNumberOfCores") Integer minNumberOfCores,
        @OutputCustomType.Parameter("name") @Nullable String name,
        @OutputCustomType.Parameter("vmSizes") @Nullable List<SizeInfoResponse> vmSizes) {
        this.maxPrice = maxPrice;
        this.minMemory = minMemory;
        this.minNumberOfCores = minNumberOfCores;
        this.name = name;
        this.vmSizes = vmSizes;
    }

    /**
     * The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.
     * 
    */
    public Double getMaxPrice() {
        return this.maxPrice;
    }
    /**
     * The amount of memory available (in GB). This is the minimum amount of memory within this tier.
     * 
    */
    public Double getMinMemory() {
        return this.minMemory;
    }
    /**
     * The number of cores a VM of this size has. This is the minimum number of cores within this tier.
     * 
    */
    public Integer getMinNumberOfCores() {
        return this.minNumberOfCores;
    }
    /**
     * The size category
     * 
    */
    public Optional<String> getName() {
        return Optional.ofNullable(this.name);
    }
    /**
     * Represents a set of compute sizes that can serve this given size type
     * 
    */
    public List<SizeInfoResponse> getVmSizes() {
        return this.vmSizes == null ? List.of() : this.vmSizes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentSizeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double maxPrice;
        private Double minMemory;
        private Integer minNumberOfCores;
        private @Nullable String name;
        private @Nullable List<SizeInfoResponse> vmSizes;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentSizeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxPrice = defaults.maxPrice;
    	      this.minMemory = defaults.minMemory;
    	      this.minNumberOfCores = defaults.minNumberOfCores;
    	      this.name = defaults.name;
    	      this.vmSizes = defaults.vmSizes;
        }

        public Builder maxPrice(Double maxPrice) {
            this.maxPrice = Objects.requireNonNull(maxPrice);
            return this;
        }

        public Builder minMemory(Double minMemory) {
            this.minMemory = Objects.requireNonNull(minMemory);
            return this;
        }

        public Builder minNumberOfCores(Integer minNumberOfCores) {
            this.minNumberOfCores = Objects.requireNonNull(minNumberOfCores);
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder vmSizes(@Nullable List<SizeInfoResponse> vmSizes) {
            this.vmSizes = vmSizes;
            return this;
        }
        public EnvironmentSizeResponse build() {
            return new EnvironmentSizeResponse(maxPrice, minMemory, minNumberOfCores, name, vmSizes);
        }
    }
}
