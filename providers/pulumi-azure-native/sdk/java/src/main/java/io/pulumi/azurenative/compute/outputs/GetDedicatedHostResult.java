// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.outputs;

import io.pulumi.azurenative.compute.outputs.DedicatedHostInstanceViewResponse;
import io.pulumi.azurenative.compute.outputs.SkuResponse;
import io.pulumi.azurenative.compute.outputs.SubResourceReadOnlyResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetDedicatedHostResult {
    /**
     * Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.
     * 
     */
    private final @Nullable Boolean autoReplaceOnFailure;
    /**
     * A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.
     * 
     */
    private final String hostId;
    /**
     * Resource Id
     * 
     */
    private final String id;
    /**
     * The dedicated host instance view.
     * 
     */
    private final DedicatedHostInstanceViewResponse instanceView;
    /**
     * Specifies the software license type that will be applied to the VMs deployed on the dedicated host. <br><br> Possible values are: <br><br> **None** <br><br> **Windows_Server_Hybrid** <br><br> **Windows_Server_Perpetual** <br><br> Default: **None**
     * 
     */
    private final @Nullable String licenseType;
    /**
     * Resource location
     * 
     */
    private final String location;
    /**
     * Resource name
     * 
     */
    private final String name;
    /**
     * Fault domain of the dedicated host within a dedicated host group.
     * 
     */
    private final @Nullable Integer platformFaultDomain;
    /**
     * The provisioning state, which only appears in the response.
     * 
     */
    private final String provisioningState;
    /**
     * The date when the host was first provisioned.
     * 
     */
    private final String provisioningTime;
    /**
     * SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible values.
     * 
     */
    private final SkuResponse sku;
    /**
     * Resource tags
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * Resource type
     * 
     */
    private final String type;
    /**
     * A list of references to all virtual machines in the Dedicated Host.
     * 
     */
    private final List<SubResourceReadOnlyResponse> virtualMachines;

    @OutputCustomType.Constructor({"autoReplaceOnFailure","hostId","id","instanceView","licenseType","location","name","platformFaultDomain","provisioningState","provisioningTime","sku","tags","type","virtualMachines"})
    private GetDedicatedHostResult(
        @Nullable Boolean autoReplaceOnFailure,
        String hostId,
        String id,
        DedicatedHostInstanceViewResponse instanceView,
        @Nullable String licenseType,
        String location,
        String name,
        @Nullable Integer platformFaultDomain,
        String provisioningState,
        String provisioningTime,
        SkuResponse sku,
        @Nullable Map<String,String> tags,
        String type,
        List<SubResourceReadOnlyResponse> virtualMachines) {
        this.autoReplaceOnFailure = autoReplaceOnFailure;
        this.hostId = Objects.requireNonNull(hostId);
        this.id = Objects.requireNonNull(id);
        this.instanceView = Objects.requireNonNull(instanceView);
        this.licenseType = licenseType;
        this.location = Objects.requireNonNull(location);
        this.name = Objects.requireNonNull(name);
        this.platformFaultDomain = platformFaultDomain;
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.provisioningTime = Objects.requireNonNull(provisioningTime);
        this.sku = Objects.requireNonNull(sku);
        this.tags = tags;
        this.type = Objects.requireNonNull(type);
        this.virtualMachines = Objects.requireNonNull(virtualMachines);
    }

    /**
     * Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.
     * 
     */
    public Optional<Boolean> getAutoReplaceOnFailure() {
        return Optional.ofNullable(this.autoReplaceOnFailure);
    }
    /**
     * A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.
     * 
     */
    public String getHostId() {
        return this.hostId;
    }
    /**
     * Resource Id
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * The dedicated host instance view.
     * 
     */
    public DedicatedHostInstanceViewResponse getInstanceView() {
        return this.instanceView;
    }
    /**
     * Specifies the software license type that will be applied to the VMs deployed on the dedicated host. <br><br> Possible values are: <br><br> **None** <br><br> **Windows_Server_Hybrid** <br><br> **Windows_Server_Perpetual** <br><br> Default: **None**
     * 
     */
    public Optional<String> getLicenseType() {
        return Optional.ofNullable(this.licenseType);
    }
    /**
     * Resource location
     * 
     */
    public String getLocation() {
        return this.location;
    }
    /**
     * Resource name
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * Fault domain of the dedicated host within a dedicated host group.
     * 
     */
    public Optional<Integer> getPlatformFaultDomain() {
        return Optional.ofNullable(this.platformFaultDomain);
    }
    /**
     * The provisioning state, which only appears in the response.
     * 
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The date when the host was first provisioned.
     * 
     */
    public String getProvisioningTime() {
        return this.provisioningTime;
    }
    /**
     * SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible values.
     * 
     */
    public SkuResponse getSku() {
        return this.sku;
    }
    /**
     * Resource tags
     * 
     */
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * Resource type
     * 
     */
    public String getType() {
        return this.type;
    }
    /**
     * A list of references to all virtual machines in the Dedicated Host.
     * 
     */
    public List<SubResourceReadOnlyResponse> getVirtualMachines() {
        return this.virtualMachines;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDedicatedHostResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean autoReplaceOnFailure;
        private String hostId;
        private String id;
        private DedicatedHostInstanceViewResponse instanceView;
        private @Nullable String licenseType;
        private String location;
        private String name;
        private @Nullable Integer platformFaultDomain;
        private String provisioningState;
        private String provisioningTime;
        private SkuResponse sku;
        private @Nullable Map<String,String> tags;
        private String type;
        private List<SubResourceReadOnlyResponse> virtualMachines;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDedicatedHostResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoReplaceOnFailure = defaults.autoReplaceOnFailure;
    	      this.hostId = defaults.hostId;
    	      this.id = defaults.id;
    	      this.instanceView = defaults.instanceView;
    	      this.licenseType = defaults.licenseType;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.platformFaultDomain = defaults.platformFaultDomain;
    	      this.provisioningState = defaults.provisioningState;
    	      this.provisioningTime = defaults.provisioningTime;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualMachines = defaults.virtualMachines;
        }

        public Builder setAutoReplaceOnFailure(@Nullable Boolean autoReplaceOnFailure) {
            this.autoReplaceOnFailure = autoReplaceOnFailure;
            return this;
        }

        public Builder setHostId(String hostId) {
            this.hostId = Objects.requireNonNull(hostId);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setInstanceView(DedicatedHostInstanceViewResponse instanceView) {
            this.instanceView = Objects.requireNonNull(instanceView);
            return this;
        }

        public Builder setLicenseType(@Nullable String licenseType) {
            this.licenseType = licenseType;
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPlatformFaultDomain(@Nullable Integer platformFaultDomain) {
            this.platformFaultDomain = platformFaultDomain;
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setProvisioningTime(String provisioningTime) {
            this.provisioningTime = Objects.requireNonNull(provisioningTime);
            return this;
        }

        public Builder setSku(SkuResponse sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setVirtualMachines(List<SubResourceReadOnlyResponse> virtualMachines) {
            this.virtualMachines = Objects.requireNonNull(virtualMachines);
            return this;
        }

        public GetDedicatedHostResult build() {
            return new GetDedicatedHostResult(autoReplaceOnFailure, hostId, id, instanceView, licenseType, location, name, platformFaultDomain, provisioningState, provisioningTime, sku, tags, type, virtualMachines);
        }
    }
}
