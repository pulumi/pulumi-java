// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.batch;

import io.pulumi.azurenative.batch.enums.InterNodeCommunicationState;
import io.pulumi.azurenative.batch.inputs.ApplicationPackageReferenceArgs;
import io.pulumi.azurenative.batch.inputs.BatchPoolIdentityArgs;
import io.pulumi.azurenative.batch.inputs.CertificateReferenceArgs;
import io.pulumi.azurenative.batch.inputs.DeploymentConfigurationArgs;
import io.pulumi.azurenative.batch.inputs.MetadataItemArgs;
import io.pulumi.azurenative.batch.inputs.MountConfigurationArgs;
import io.pulumi.azurenative.batch.inputs.NetworkConfigurationArgs;
import io.pulumi.azurenative.batch.inputs.ScaleSettingsArgs;
import io.pulumi.azurenative.batch.inputs.StartTaskArgs;
import io.pulumi.azurenative.batch.inputs.TaskSchedulingPolicyArgs;
import io.pulumi.azurenative.batch.inputs.UserAccountArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final PoolArgs Empty = new PoolArgs();

    /**
     * The name of the Batch account.
     * 
     */
    @InputImport(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> getAccountName() {
        return this.accountName;
    }

    /**
     * The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
     * 
     */
    @InputImport(name="applicationLicenses")
      private final @Nullable Output<List<String>> applicationLicenses;

    public Output<List<String>> getApplicationLicenses() {
        return this.applicationLicenses == null ? Output.empty() : this.applicationLicenses;
    }

    /**
     * Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool.
     * 
     */
    @InputImport(name="applicationPackages")
      private final @Nullable Output<List<ApplicationPackageReferenceArgs>> applicationPackages;

    public Output<List<ApplicationPackageReferenceArgs>> getApplicationPackages() {
        return this.applicationPackages == null ? Output.empty() : this.applicationPackages;
    }

    /**
     * For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
     * 
     */
    @InputImport(name="certificates")
      private final @Nullable Output<List<CertificateReferenceArgs>> certificates;

    public Output<List<CertificateReferenceArgs>> getCertificates() {
        return this.certificates == null ? Output.empty() : this.certificates;
    }

    /**
     * Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
     * 
     */
    @InputImport(name="deploymentConfiguration")
      private final @Nullable Output<DeploymentConfigurationArgs> deploymentConfiguration;

    public Output<DeploymentConfigurationArgs> getDeploymentConfiguration() {
        return this.deploymentConfiguration == null ? Output.empty() : this.deploymentConfiguration;
    }

    /**
     * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * The type of identity used for the Batch Pool.
     * 
     */
    @InputImport(name="identity")
      private final @Nullable Output<BatchPoolIdentityArgs> identity;

    public Output<BatchPoolIdentityArgs> getIdentity() {
        return this.identity == null ? Output.empty() : this.identity;
    }

    /**
     * This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
     * 
     */
    @InputImport(name="interNodeCommunication")
      private final @Nullable Output<InterNodeCommunicationState> interNodeCommunication;

    public Output<InterNodeCommunicationState> getInterNodeCommunication() {
        return this.interNodeCommunication == null ? Output.empty() : this.interNodeCommunication;
    }

    /**
     * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
     * 
     */
    @InputImport(name="metadata")
      private final @Nullable Output<List<MetadataItemArgs>> metadata;

    public Output<List<MetadataItemArgs>> getMetadata() {
        return this.metadata == null ? Output.empty() : this.metadata;
    }

    /**
     * This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
     * 
     */
    @InputImport(name="mountConfiguration")
      private final @Nullable Output<List<MountConfigurationArgs>> mountConfiguration;

    public Output<List<MountConfigurationArgs>> getMountConfiguration() {
        return this.mountConfiguration == null ? Output.empty() : this.mountConfiguration;
    }

    /**
     * The network configuration for a pool.
     * 
     */
    @InputImport(name="networkConfiguration")
      private final @Nullable Output<NetworkConfigurationArgs> networkConfiguration;

    public Output<NetworkConfigurationArgs> getNetworkConfiguration() {
        return this.networkConfiguration == null ? Output.empty() : this.networkConfiguration;
    }

    /**
     * The pool name. This must be unique within the account.
     * 
     */
    @InputImport(name="poolName")
      private final @Nullable Output<String> poolName;

    public Output<String> getPoolName() {
        return this.poolName == null ? Output.empty() : this.poolName;
    }

    /**
     * The name of the resource group that contains the Batch account.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
     * 
     */
    @InputImport(name="scaleSettings")
      private final @Nullable Output<ScaleSettingsArgs> scaleSettings;

    public Output<ScaleSettingsArgs> getScaleSettings() {
        return this.scaleSettings == null ? Output.empty() : this.scaleSettings;
    }

    /**
     * In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool.
     * 
     */
    @InputImport(name="startTask")
      private final @Nullable Output<StartTaskArgs> startTask;

    public Output<StartTaskArgs> getStartTask() {
        return this.startTask == null ? Output.empty() : this.startTask;
    }

    /**
     * If not specified, the default is spread.
     * 
     */
    @InputImport(name="taskSchedulingPolicy")
      private final @Nullable Output<TaskSchedulingPolicyArgs> taskSchedulingPolicy;

    public Output<TaskSchedulingPolicyArgs> getTaskSchedulingPolicy() {
        return this.taskSchedulingPolicy == null ? Output.empty() : this.taskSchedulingPolicy;
    }

    /**
     * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
     * 
     */
    @InputImport(name="taskSlotsPerNode")
      private final @Nullable Output<Integer> taskSlotsPerNode;

    public Output<Integer> getTaskSlotsPerNode() {
        return this.taskSlotsPerNode == null ? Output.empty() : this.taskSlotsPerNode;
    }

    @InputImport(name="userAccounts")
      private final @Nullable Output<List<UserAccountArgs>> userAccounts;

    public Output<List<UserAccountArgs>> getUserAccounts() {
        return this.userAccounts == null ? Output.empty() : this.userAccounts;
    }

    /**
     * For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
     * 
     */
    @InputImport(name="vmSize")
      private final @Nullable Output<String> vmSize;

    public Output<String> getVmSize() {
        return this.vmSize == null ? Output.empty() : this.vmSize;
    }

    public PoolArgs(
        Output<String> accountName,
        @Nullable Output<List<String>> applicationLicenses,
        @Nullable Output<List<ApplicationPackageReferenceArgs>> applicationPackages,
        @Nullable Output<List<CertificateReferenceArgs>> certificates,
        @Nullable Output<DeploymentConfigurationArgs> deploymentConfiguration,
        @Nullable Output<String> displayName,
        @Nullable Output<BatchPoolIdentityArgs> identity,
        @Nullable Output<InterNodeCommunicationState> interNodeCommunication,
        @Nullable Output<List<MetadataItemArgs>> metadata,
        @Nullable Output<List<MountConfigurationArgs>> mountConfiguration,
        @Nullable Output<NetworkConfigurationArgs> networkConfiguration,
        @Nullable Output<String> poolName,
        Output<String> resourceGroupName,
        @Nullable Output<ScaleSettingsArgs> scaleSettings,
        @Nullable Output<StartTaskArgs> startTask,
        @Nullable Output<TaskSchedulingPolicyArgs> taskSchedulingPolicy,
        @Nullable Output<Integer> taskSlotsPerNode,
        @Nullable Output<List<UserAccountArgs>> userAccounts,
        @Nullable Output<String> vmSize) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.applicationLicenses = applicationLicenses;
        this.applicationPackages = applicationPackages;
        this.certificates = certificates;
        this.deploymentConfiguration = deploymentConfiguration;
        this.displayName = displayName;
        this.identity = identity;
        this.interNodeCommunication = interNodeCommunication;
        this.metadata = metadata;
        this.mountConfiguration = mountConfiguration;
        this.networkConfiguration = networkConfiguration;
        this.poolName = poolName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scaleSettings = scaleSettings;
        this.startTask = startTask;
        this.taskSchedulingPolicy = taskSchedulingPolicy;
        this.taskSlotsPerNode = taskSlotsPerNode;
        this.userAccounts = userAccounts;
        this.vmSize = vmSize;
    }

    private PoolArgs() {
        this.accountName = Output.empty();
        this.applicationLicenses = Output.empty();
        this.applicationPackages = Output.empty();
        this.certificates = Output.empty();
        this.deploymentConfiguration = Output.empty();
        this.displayName = Output.empty();
        this.identity = Output.empty();
        this.interNodeCommunication = Output.empty();
        this.metadata = Output.empty();
        this.mountConfiguration = Output.empty();
        this.networkConfiguration = Output.empty();
        this.poolName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.scaleSettings = Output.empty();
        this.startTask = Output.empty();
        this.taskSchedulingPolicy = Output.empty();
        this.taskSlotsPerNode = Output.empty();
        this.userAccounts = Output.empty();
        this.vmSize = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private @Nullable Output<List<String>> applicationLicenses;
        private @Nullable Output<List<ApplicationPackageReferenceArgs>> applicationPackages;
        private @Nullable Output<List<CertificateReferenceArgs>> certificates;
        private @Nullable Output<DeploymentConfigurationArgs> deploymentConfiguration;
        private @Nullable Output<String> displayName;
        private @Nullable Output<BatchPoolIdentityArgs> identity;
        private @Nullable Output<InterNodeCommunicationState> interNodeCommunication;
        private @Nullable Output<List<MetadataItemArgs>> metadata;
        private @Nullable Output<List<MountConfigurationArgs>> mountConfiguration;
        private @Nullable Output<NetworkConfigurationArgs> networkConfiguration;
        private @Nullable Output<String> poolName;
        private Output<String> resourceGroupName;
        private @Nullable Output<ScaleSettingsArgs> scaleSettings;
        private @Nullable Output<StartTaskArgs> startTask;
        private @Nullable Output<TaskSchedulingPolicyArgs> taskSchedulingPolicy;
        private @Nullable Output<Integer> taskSlotsPerNode;
        private @Nullable Output<List<UserAccountArgs>> userAccounts;
        private @Nullable Output<String> vmSize;

        public Builder() {
    	      // Empty
        }

        public Builder(PoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.applicationLicenses = defaults.applicationLicenses;
    	      this.applicationPackages = defaults.applicationPackages;
    	      this.certificates = defaults.certificates;
    	      this.deploymentConfiguration = defaults.deploymentConfiguration;
    	      this.displayName = defaults.displayName;
    	      this.identity = defaults.identity;
    	      this.interNodeCommunication = defaults.interNodeCommunication;
    	      this.metadata = defaults.metadata;
    	      this.mountConfiguration = defaults.mountConfiguration;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.poolName = defaults.poolName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scaleSettings = defaults.scaleSettings;
    	      this.startTask = defaults.startTask;
    	      this.taskSchedulingPolicy = defaults.taskSchedulingPolicy;
    	      this.taskSlotsPerNode = defaults.taskSlotsPerNode;
    	      this.userAccounts = defaults.userAccounts;
    	      this.vmSize = defaults.vmSize;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }

        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }

        public Builder applicationLicenses(@Nullable Output<List<String>> applicationLicenses) {
            this.applicationLicenses = applicationLicenses;
            return this;
        }

        public Builder applicationLicenses(@Nullable List<String> applicationLicenses) {
            this.applicationLicenses = Output.ofNullable(applicationLicenses);
            return this;
        }

        public Builder applicationPackages(@Nullable Output<List<ApplicationPackageReferenceArgs>> applicationPackages) {
            this.applicationPackages = applicationPackages;
            return this;
        }

        public Builder applicationPackages(@Nullable List<ApplicationPackageReferenceArgs> applicationPackages) {
            this.applicationPackages = Output.ofNullable(applicationPackages);
            return this;
        }

        public Builder certificates(@Nullable Output<List<CertificateReferenceArgs>> certificates) {
            this.certificates = certificates;
            return this;
        }

        public Builder certificates(@Nullable List<CertificateReferenceArgs> certificates) {
            this.certificates = Output.ofNullable(certificates);
            return this;
        }

        public Builder deploymentConfiguration(@Nullable Output<DeploymentConfigurationArgs> deploymentConfiguration) {
            this.deploymentConfiguration = deploymentConfiguration;
            return this;
        }

        public Builder deploymentConfiguration(@Nullable DeploymentConfigurationArgs deploymentConfiguration) {
            this.deploymentConfiguration = Output.ofNullable(deploymentConfiguration);
            return this;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder identity(@Nullable Output<BatchPoolIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder identity(@Nullable BatchPoolIdentityArgs identity) {
            this.identity = Output.ofNullable(identity);
            return this;
        }

        public Builder interNodeCommunication(@Nullable Output<InterNodeCommunicationState> interNodeCommunication) {
            this.interNodeCommunication = interNodeCommunication;
            return this;
        }

        public Builder interNodeCommunication(@Nullable InterNodeCommunicationState interNodeCommunication) {
            this.interNodeCommunication = Output.ofNullable(interNodeCommunication);
            return this;
        }

        public Builder metadata(@Nullable Output<List<MetadataItemArgs>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(@Nullable List<MetadataItemArgs> metadata) {
            this.metadata = Output.ofNullable(metadata);
            return this;
        }

        public Builder mountConfiguration(@Nullable Output<List<MountConfigurationArgs>> mountConfiguration) {
            this.mountConfiguration = mountConfiguration;
            return this;
        }

        public Builder mountConfiguration(@Nullable List<MountConfigurationArgs> mountConfiguration) {
            this.mountConfiguration = Output.ofNullable(mountConfiguration);
            return this;
        }

        public Builder networkConfiguration(@Nullable Output<NetworkConfigurationArgs> networkConfiguration) {
            this.networkConfiguration = networkConfiguration;
            return this;
        }

        public Builder networkConfiguration(@Nullable NetworkConfigurationArgs networkConfiguration) {
            this.networkConfiguration = Output.ofNullable(networkConfiguration);
            return this;
        }

        public Builder poolName(@Nullable Output<String> poolName) {
            this.poolName = poolName;
            return this;
        }

        public Builder poolName(@Nullable String poolName) {
            this.poolName = Output.ofNullable(poolName);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder scaleSettings(@Nullable Output<ScaleSettingsArgs> scaleSettings) {
            this.scaleSettings = scaleSettings;
            return this;
        }

        public Builder scaleSettings(@Nullable ScaleSettingsArgs scaleSettings) {
            this.scaleSettings = Output.ofNullable(scaleSettings);
            return this;
        }

        public Builder startTask(@Nullable Output<StartTaskArgs> startTask) {
            this.startTask = startTask;
            return this;
        }

        public Builder startTask(@Nullable StartTaskArgs startTask) {
            this.startTask = Output.ofNullable(startTask);
            return this;
        }

        public Builder taskSchedulingPolicy(@Nullable Output<TaskSchedulingPolicyArgs> taskSchedulingPolicy) {
            this.taskSchedulingPolicy = taskSchedulingPolicy;
            return this;
        }

        public Builder taskSchedulingPolicy(@Nullable TaskSchedulingPolicyArgs taskSchedulingPolicy) {
            this.taskSchedulingPolicy = Output.ofNullable(taskSchedulingPolicy);
            return this;
        }

        public Builder taskSlotsPerNode(@Nullable Output<Integer> taskSlotsPerNode) {
            this.taskSlotsPerNode = taskSlotsPerNode;
            return this;
        }

        public Builder taskSlotsPerNode(@Nullable Integer taskSlotsPerNode) {
            this.taskSlotsPerNode = Output.ofNullable(taskSlotsPerNode);
            return this;
        }

        public Builder userAccounts(@Nullable Output<List<UserAccountArgs>> userAccounts) {
            this.userAccounts = userAccounts;
            return this;
        }

        public Builder userAccounts(@Nullable List<UserAccountArgs> userAccounts) {
            this.userAccounts = Output.ofNullable(userAccounts);
            return this;
        }

        public Builder vmSize(@Nullable Output<String> vmSize) {
            this.vmSize = vmSize;
            return this;
        }

        public Builder vmSize(@Nullable String vmSize) {
            this.vmSize = Output.ofNullable(vmSize);
            return this;
        }
        public PoolArgs build() {
            return new PoolArgs(accountName, applicationLicenses, applicationPackages, certificates, deploymentConfiguration, displayName, identity, interNodeCommunication, metadata, mountConfiguration, networkConfiguration, poolName, resourceGroupName, scaleSettings, startTask, taskSchedulingPolicy, taskSlotsPerNode, userAccounts, vmSize);
        }
    }
}
