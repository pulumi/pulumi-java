// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.batch;

import io.pulumi.azurenative.batch.enums.InterNodeCommunicationState;
import io.pulumi.azurenative.batch.inputs.ApplicationPackageReferenceArgs;
import io.pulumi.azurenative.batch.inputs.BatchPoolIdentityArgs;
import io.pulumi.azurenative.batch.inputs.CertificateReferenceArgs;
import io.pulumi.azurenative.batch.inputs.DeploymentConfigurationArgs;
import io.pulumi.azurenative.batch.inputs.MetadataItemArgs;
import io.pulumi.azurenative.batch.inputs.MountConfigurationArgs;
import io.pulumi.azurenative.batch.inputs.NetworkConfigurationArgs;
import io.pulumi.azurenative.batch.inputs.ScaleSettingsArgs;
import io.pulumi.azurenative.batch.inputs.StartTaskArgs;
import io.pulumi.azurenative.batch.inputs.TaskSchedulingPolicyArgs;
import io.pulumi.azurenative.batch.inputs.UserAccountArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final PoolArgs Empty = new PoolArgs();

    /**
     * The name of the Batch account.
     * 
     */
    @InputImport(name="accountName", required=true)
    private final Input<String> accountName;

    public Input<String> getAccountName() {
        return this.accountName;
    }

    /**
     * The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
     * 
     */
    @InputImport(name="applicationLicenses")
    private final @Nullable Input<List<String>> applicationLicenses;

    public Input<List<String>> getApplicationLicenses() {
        return this.applicationLicenses == null ? Input.empty() : this.applicationLicenses;
    }

    /**
     * Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool.
     * 
     */
    @InputImport(name="applicationPackages")
    private final @Nullable Input<List<ApplicationPackageReferenceArgs>> applicationPackages;

    public Input<List<ApplicationPackageReferenceArgs>> getApplicationPackages() {
        return this.applicationPackages == null ? Input.empty() : this.applicationPackages;
    }

    /**
     * For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
     * 
     */
    @InputImport(name="certificates")
    private final @Nullable Input<List<CertificateReferenceArgs>> certificates;

    public Input<List<CertificateReferenceArgs>> getCertificates() {
        return this.certificates == null ? Input.empty() : this.certificates;
    }

    /**
     * Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
     * 
     */
    @InputImport(name="deploymentConfiguration")
    private final @Nullable Input<DeploymentConfigurationArgs> deploymentConfiguration;

    public Input<DeploymentConfigurationArgs> getDeploymentConfiguration() {
        return this.deploymentConfiguration == null ? Input.empty() : this.deploymentConfiguration;
    }

    /**
     * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * The type of identity used for the Batch Pool.
     * 
     */
    @InputImport(name="identity")
    private final @Nullable Input<BatchPoolIdentityArgs> identity;

    public Input<BatchPoolIdentityArgs> getIdentity() {
        return this.identity == null ? Input.empty() : this.identity;
    }

    /**
     * This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
     * 
     */
    @InputImport(name="interNodeCommunication")
    private final @Nullable Input<InterNodeCommunicationState> interNodeCommunication;

    public Input<InterNodeCommunicationState> getInterNodeCommunication() {
        return this.interNodeCommunication == null ? Input.empty() : this.interNodeCommunication;
    }

    /**
     * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
     * 
     */
    @InputImport(name="metadata")
    private final @Nullable Input<List<MetadataItemArgs>> metadata;

    public Input<List<MetadataItemArgs>> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    /**
     * This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
     * 
     */
    @InputImport(name="mountConfiguration")
    private final @Nullable Input<List<MountConfigurationArgs>> mountConfiguration;

    public Input<List<MountConfigurationArgs>> getMountConfiguration() {
        return this.mountConfiguration == null ? Input.empty() : this.mountConfiguration;
    }

    /**
     * The network configuration for a pool.
     * 
     */
    @InputImport(name="networkConfiguration")
    private final @Nullable Input<NetworkConfigurationArgs> networkConfiguration;

    public Input<NetworkConfigurationArgs> getNetworkConfiguration() {
        return this.networkConfiguration == null ? Input.empty() : this.networkConfiguration;
    }

    /**
     * The pool name. This must be unique within the account.
     * 
     */
    @InputImport(name="poolName")
    private final @Nullable Input<String> poolName;

    public Input<String> getPoolName() {
        return this.poolName == null ? Input.empty() : this.poolName;
    }

    /**
     * The name of the resource group that contains the Batch account.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
     * 
     */
    @InputImport(name="scaleSettings")
    private final @Nullable Input<ScaleSettingsArgs> scaleSettings;

    public Input<ScaleSettingsArgs> getScaleSettings() {
        return this.scaleSettings == null ? Input.empty() : this.scaleSettings;
    }

    /**
     * In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool.
     * 
     */
    @InputImport(name="startTask")
    private final @Nullable Input<StartTaskArgs> startTask;

    public Input<StartTaskArgs> getStartTask() {
        return this.startTask == null ? Input.empty() : this.startTask;
    }

    /**
     * If not specified, the default is spread.
     * 
     */
    @InputImport(name="taskSchedulingPolicy")
    private final @Nullable Input<TaskSchedulingPolicyArgs> taskSchedulingPolicy;

    public Input<TaskSchedulingPolicyArgs> getTaskSchedulingPolicy() {
        return this.taskSchedulingPolicy == null ? Input.empty() : this.taskSchedulingPolicy;
    }

    /**
     * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
     * 
     */
    @InputImport(name="taskSlotsPerNode")
    private final @Nullable Input<Integer> taskSlotsPerNode;

    public Input<Integer> getTaskSlotsPerNode() {
        return this.taskSlotsPerNode == null ? Input.empty() : this.taskSlotsPerNode;
    }

    @InputImport(name="userAccounts")
    private final @Nullable Input<List<UserAccountArgs>> userAccounts;

    public Input<List<UserAccountArgs>> getUserAccounts() {
        return this.userAccounts == null ? Input.empty() : this.userAccounts;
    }

    /**
     * For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
     * 
     */
    @InputImport(name="vmSize")
    private final @Nullable Input<String> vmSize;

    public Input<String> getVmSize() {
        return this.vmSize == null ? Input.empty() : this.vmSize;
    }

    public PoolArgs(
        Input<String> accountName,
        @Nullable Input<List<String>> applicationLicenses,
        @Nullable Input<List<ApplicationPackageReferenceArgs>> applicationPackages,
        @Nullable Input<List<CertificateReferenceArgs>> certificates,
        @Nullable Input<DeploymentConfigurationArgs> deploymentConfiguration,
        @Nullable Input<String> displayName,
        @Nullable Input<BatchPoolIdentityArgs> identity,
        @Nullable Input<InterNodeCommunicationState> interNodeCommunication,
        @Nullable Input<List<MetadataItemArgs>> metadata,
        @Nullable Input<List<MountConfigurationArgs>> mountConfiguration,
        @Nullable Input<NetworkConfigurationArgs> networkConfiguration,
        @Nullable Input<String> poolName,
        Input<String> resourceGroupName,
        @Nullable Input<ScaleSettingsArgs> scaleSettings,
        @Nullable Input<StartTaskArgs> startTask,
        @Nullable Input<TaskSchedulingPolicyArgs> taskSchedulingPolicy,
        @Nullable Input<Integer> taskSlotsPerNode,
        @Nullable Input<List<UserAccountArgs>> userAccounts,
        @Nullable Input<String> vmSize) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.applicationLicenses = applicationLicenses;
        this.applicationPackages = applicationPackages;
        this.certificates = certificates;
        this.deploymentConfiguration = deploymentConfiguration;
        this.displayName = displayName;
        this.identity = identity;
        this.interNodeCommunication = interNodeCommunication;
        this.metadata = metadata;
        this.mountConfiguration = mountConfiguration;
        this.networkConfiguration = networkConfiguration;
        this.poolName = poolName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scaleSettings = scaleSettings;
        this.startTask = startTask;
        this.taskSchedulingPolicy = taskSchedulingPolicy;
        this.taskSlotsPerNode = taskSlotsPerNode;
        this.userAccounts = userAccounts;
        this.vmSize = vmSize;
    }

    private PoolArgs() {
        this.accountName = Input.empty();
        this.applicationLicenses = Input.empty();
        this.applicationPackages = Input.empty();
        this.certificates = Input.empty();
        this.deploymentConfiguration = Input.empty();
        this.displayName = Input.empty();
        this.identity = Input.empty();
        this.interNodeCommunication = Input.empty();
        this.metadata = Input.empty();
        this.mountConfiguration = Input.empty();
        this.networkConfiguration = Input.empty();
        this.poolName = Input.empty();
        this.resourceGroupName = Input.empty();
        this.scaleSettings = Input.empty();
        this.startTask = Input.empty();
        this.taskSchedulingPolicy = Input.empty();
        this.taskSlotsPerNode = Input.empty();
        this.userAccounts = Input.empty();
        this.vmSize = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> accountName;
        private @Nullable Input<List<String>> applicationLicenses;
        private @Nullable Input<List<ApplicationPackageReferenceArgs>> applicationPackages;
        private @Nullable Input<List<CertificateReferenceArgs>> certificates;
        private @Nullable Input<DeploymentConfigurationArgs> deploymentConfiguration;
        private @Nullable Input<String> displayName;
        private @Nullable Input<BatchPoolIdentityArgs> identity;
        private @Nullable Input<InterNodeCommunicationState> interNodeCommunication;
        private @Nullable Input<List<MetadataItemArgs>> metadata;
        private @Nullable Input<List<MountConfigurationArgs>> mountConfiguration;
        private @Nullable Input<NetworkConfigurationArgs> networkConfiguration;
        private @Nullable Input<String> poolName;
        private Input<String> resourceGroupName;
        private @Nullable Input<ScaleSettingsArgs> scaleSettings;
        private @Nullable Input<StartTaskArgs> startTask;
        private @Nullable Input<TaskSchedulingPolicyArgs> taskSchedulingPolicy;
        private @Nullable Input<Integer> taskSlotsPerNode;
        private @Nullable Input<List<UserAccountArgs>> userAccounts;
        private @Nullable Input<String> vmSize;

        public Builder() {
    	      // Empty
        }

        public Builder(PoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.applicationLicenses = defaults.applicationLicenses;
    	      this.applicationPackages = defaults.applicationPackages;
    	      this.certificates = defaults.certificates;
    	      this.deploymentConfiguration = defaults.deploymentConfiguration;
    	      this.displayName = defaults.displayName;
    	      this.identity = defaults.identity;
    	      this.interNodeCommunication = defaults.interNodeCommunication;
    	      this.metadata = defaults.metadata;
    	      this.mountConfiguration = defaults.mountConfiguration;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.poolName = defaults.poolName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scaleSettings = defaults.scaleSettings;
    	      this.startTask = defaults.startTask;
    	      this.taskSchedulingPolicy = defaults.taskSchedulingPolicy;
    	      this.taskSlotsPerNode = defaults.taskSlotsPerNode;
    	      this.userAccounts = defaults.userAccounts;
    	      this.vmSize = defaults.vmSize;
        }

        public Builder setAccountName(Input<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }

        public Builder setAccountName(String accountName) {
            this.accountName = Input.of(Objects.requireNonNull(accountName));
            return this;
        }

        public Builder setApplicationLicenses(@Nullable Input<List<String>> applicationLicenses) {
            this.applicationLicenses = applicationLicenses;
            return this;
        }

        public Builder setApplicationLicenses(@Nullable List<String> applicationLicenses) {
            this.applicationLicenses = Input.ofNullable(applicationLicenses);
            return this;
        }

        public Builder setApplicationPackages(@Nullable Input<List<ApplicationPackageReferenceArgs>> applicationPackages) {
            this.applicationPackages = applicationPackages;
            return this;
        }

        public Builder setApplicationPackages(@Nullable List<ApplicationPackageReferenceArgs> applicationPackages) {
            this.applicationPackages = Input.ofNullable(applicationPackages);
            return this;
        }

        public Builder setCertificates(@Nullable Input<List<CertificateReferenceArgs>> certificates) {
            this.certificates = certificates;
            return this;
        }

        public Builder setCertificates(@Nullable List<CertificateReferenceArgs> certificates) {
            this.certificates = Input.ofNullable(certificates);
            return this;
        }

        public Builder setDeploymentConfiguration(@Nullable Input<DeploymentConfigurationArgs> deploymentConfiguration) {
            this.deploymentConfiguration = deploymentConfiguration;
            return this;
        }

        public Builder setDeploymentConfiguration(@Nullable DeploymentConfigurationArgs deploymentConfiguration) {
            this.deploymentConfiguration = Input.ofNullable(deploymentConfiguration);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setIdentity(@Nullable Input<BatchPoolIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder setIdentity(@Nullable BatchPoolIdentityArgs identity) {
            this.identity = Input.ofNullable(identity);
            return this;
        }

        public Builder setInterNodeCommunication(@Nullable Input<InterNodeCommunicationState> interNodeCommunication) {
            this.interNodeCommunication = interNodeCommunication;
            return this;
        }

        public Builder setInterNodeCommunication(@Nullable InterNodeCommunicationState interNodeCommunication) {
            this.interNodeCommunication = Input.ofNullable(interNodeCommunication);
            return this;
        }

        public Builder setMetadata(@Nullable Input<List<MetadataItemArgs>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setMetadata(@Nullable List<MetadataItemArgs> metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public Builder setMountConfiguration(@Nullable Input<List<MountConfigurationArgs>> mountConfiguration) {
            this.mountConfiguration = mountConfiguration;
            return this;
        }

        public Builder setMountConfiguration(@Nullable List<MountConfigurationArgs> mountConfiguration) {
            this.mountConfiguration = Input.ofNullable(mountConfiguration);
            return this;
        }

        public Builder setNetworkConfiguration(@Nullable Input<NetworkConfigurationArgs> networkConfiguration) {
            this.networkConfiguration = networkConfiguration;
            return this;
        }

        public Builder setNetworkConfiguration(@Nullable NetworkConfigurationArgs networkConfiguration) {
            this.networkConfiguration = Input.ofNullable(networkConfiguration);
            return this;
        }

        public Builder setPoolName(@Nullable Input<String> poolName) {
            this.poolName = poolName;
            return this;
        }

        public Builder setPoolName(@Nullable String poolName) {
            this.poolName = Input.ofNullable(poolName);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setScaleSettings(@Nullable Input<ScaleSettingsArgs> scaleSettings) {
            this.scaleSettings = scaleSettings;
            return this;
        }

        public Builder setScaleSettings(@Nullable ScaleSettingsArgs scaleSettings) {
            this.scaleSettings = Input.ofNullable(scaleSettings);
            return this;
        }

        public Builder setStartTask(@Nullable Input<StartTaskArgs> startTask) {
            this.startTask = startTask;
            return this;
        }

        public Builder setStartTask(@Nullable StartTaskArgs startTask) {
            this.startTask = Input.ofNullable(startTask);
            return this;
        }

        public Builder setTaskSchedulingPolicy(@Nullable Input<TaskSchedulingPolicyArgs> taskSchedulingPolicy) {
            this.taskSchedulingPolicy = taskSchedulingPolicy;
            return this;
        }

        public Builder setTaskSchedulingPolicy(@Nullable TaskSchedulingPolicyArgs taskSchedulingPolicy) {
            this.taskSchedulingPolicy = Input.ofNullable(taskSchedulingPolicy);
            return this;
        }

        public Builder setTaskSlotsPerNode(@Nullable Input<Integer> taskSlotsPerNode) {
            this.taskSlotsPerNode = taskSlotsPerNode;
            return this;
        }

        public Builder setTaskSlotsPerNode(@Nullable Integer taskSlotsPerNode) {
            this.taskSlotsPerNode = Input.ofNullable(taskSlotsPerNode);
            return this;
        }

        public Builder setUserAccounts(@Nullable Input<List<UserAccountArgs>> userAccounts) {
            this.userAccounts = userAccounts;
            return this;
        }

        public Builder setUserAccounts(@Nullable List<UserAccountArgs> userAccounts) {
            this.userAccounts = Input.ofNullable(userAccounts);
            return this;
        }

        public Builder setVmSize(@Nullable Input<String> vmSize) {
            this.vmSize = vmSize;
            return this;
        }

        public Builder setVmSize(@Nullable String vmSize) {
            this.vmSize = Input.ofNullable(vmSize);
            return this;
        }

        public PoolArgs build() {
            return new PoolArgs(accountName, applicationLicenses, applicationPackages, certificates, deploymentConfiguration, displayName, identity, interNodeCommunication, metadata, mountConfiguration, networkConfiguration, poolName, resourceGroupName, scaleSettings, startTask, taskSchedulingPolicy, taskSlotsPerNode, userAccounts, vmSize);
        }
    }
}
