// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicebus.outputs;

import io.pulumi.azurenative.servicebus.outputs.MessageCountDetailsResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetTopicResult {
    /**
     * Last time the message was sent, or a request was received, for this topic.
     * 
     */
    private final String accessedAt;
    /**
     * ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
     * 
     */
    private final @Nullable String autoDeleteOnIdle;
    /**
     * Message count details
     * 
     */
    private final MessageCountDetailsResponse countDetails;
    /**
     * Exact time the message was created.
     * 
     */
    private final String createdAt;
    /**
     * ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
     */
    private final @Nullable String defaultMessageTimeToLive;
    /**
     * ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
     * 
     */
    private final @Nullable String duplicateDetectionHistoryTimeWindow;
    /**
     * Value that indicates whether server-side batched operations are enabled.
     * 
     */
    private final @Nullable Boolean enableBatchedOperations;
    /**
     * Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
     * 
     */
    private final @Nullable Boolean enableExpress;
    /**
     * Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
     * 
     */
    private final @Nullable Boolean enablePartitioning;
    /**
     * Resource Id
     * 
     */
    private final String id;
    /**
     * Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
     * 
     */
    private final @Nullable Integer maxSizeInMegabytes;
    /**
     * Resource name
     * 
     */
    private final String name;
    /**
     * Value indicating if this topic requires duplicate detection.
     * 
     */
    private final @Nullable Boolean requiresDuplicateDetection;
    /**
     * Size of the topic, in bytes.
     * 
     */
    private final Double sizeInBytes;
    /**
     * Enumerates the possible values for the status of a messaging entity.
     * 
     */
    private final @Nullable String status;
    /**
     * Number of subscriptions.
     * 
     */
    private final Integer subscriptionCount;
    /**
     * Value that indicates whether the topic supports ordering.
     * 
     */
    private final @Nullable Boolean supportOrdering;
    /**
     * Resource type
     * 
     */
    private final String type;
    /**
     * The exact time the message was updated.
     * 
     */
    private final String updatedAt;

    @OutputCustomType.Constructor
    private GetTopicResult(
        @OutputCustomType.Parameter("accessedAt") String accessedAt,
        @OutputCustomType.Parameter("autoDeleteOnIdle") @Nullable String autoDeleteOnIdle,
        @OutputCustomType.Parameter("countDetails") MessageCountDetailsResponse countDetails,
        @OutputCustomType.Parameter("createdAt") String createdAt,
        @OutputCustomType.Parameter("defaultMessageTimeToLive") @Nullable String defaultMessageTimeToLive,
        @OutputCustomType.Parameter("duplicateDetectionHistoryTimeWindow") @Nullable String duplicateDetectionHistoryTimeWindow,
        @OutputCustomType.Parameter("enableBatchedOperations") @Nullable Boolean enableBatchedOperations,
        @OutputCustomType.Parameter("enableExpress") @Nullable Boolean enableExpress,
        @OutputCustomType.Parameter("enablePartitioning") @Nullable Boolean enablePartitioning,
        @OutputCustomType.Parameter("id") String id,
        @OutputCustomType.Parameter("maxSizeInMegabytes") @Nullable Integer maxSizeInMegabytes,
        @OutputCustomType.Parameter("name") String name,
        @OutputCustomType.Parameter("requiresDuplicateDetection") @Nullable Boolean requiresDuplicateDetection,
        @OutputCustomType.Parameter("sizeInBytes") Double sizeInBytes,
        @OutputCustomType.Parameter("status") @Nullable String status,
        @OutputCustomType.Parameter("subscriptionCount") Integer subscriptionCount,
        @OutputCustomType.Parameter("supportOrdering") @Nullable Boolean supportOrdering,
        @OutputCustomType.Parameter("type") String type,
        @OutputCustomType.Parameter("updatedAt") String updatedAt) {
        this.accessedAt = accessedAt;
        this.autoDeleteOnIdle = autoDeleteOnIdle;
        this.countDetails = countDetails;
        this.createdAt = createdAt;
        this.defaultMessageTimeToLive = defaultMessageTimeToLive;
        this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
        this.enableBatchedOperations = enableBatchedOperations;
        this.enableExpress = enableExpress;
        this.enablePartitioning = enablePartitioning;
        this.id = id;
        this.maxSizeInMegabytes = maxSizeInMegabytes;
        this.name = name;
        this.requiresDuplicateDetection = requiresDuplicateDetection;
        this.sizeInBytes = sizeInBytes;
        this.status = status;
        this.subscriptionCount = subscriptionCount;
        this.supportOrdering = supportOrdering;
        this.type = type;
        this.updatedAt = updatedAt;
    }

    /**
     * Last time the message was sent, or a request was received, for this topic.
     * 
    */
    public String getAccessedAt() {
        return this.accessedAt;
    }
    /**
     * ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
     * 
    */
    public Optional<String> getAutoDeleteOnIdle() {
        return Optional.ofNullable(this.autoDeleteOnIdle);
    }
    /**
     * Message count details
     * 
    */
    public MessageCountDetailsResponse getCountDetails() {
        return this.countDetails;
    }
    /**
     * Exact time the message was created.
     * 
    */
    public String getCreatedAt() {
        return this.createdAt;
    }
    /**
     * ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
    */
    public Optional<String> getDefaultMessageTimeToLive() {
        return Optional.ofNullable(this.defaultMessageTimeToLive);
    }
    /**
     * ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
     * 
    */
    public Optional<String> getDuplicateDetectionHistoryTimeWindow() {
        return Optional.ofNullable(this.duplicateDetectionHistoryTimeWindow);
    }
    /**
     * Value that indicates whether server-side batched operations are enabled.
     * 
    */
    public Optional<Boolean> getEnableBatchedOperations() {
        return Optional.ofNullable(this.enableBatchedOperations);
    }
    /**
     * Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
     * 
    */
    public Optional<Boolean> getEnableExpress() {
        return Optional.ofNullable(this.enableExpress);
    }
    /**
     * Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
     * 
    */
    public Optional<Boolean> getEnablePartitioning() {
        return Optional.ofNullable(this.enablePartitioning);
    }
    /**
     * Resource Id
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
     * 
    */
    public Optional<Integer> getMaxSizeInMegabytes() {
        return Optional.ofNullable(this.maxSizeInMegabytes);
    }
    /**
     * Resource name
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Value indicating if this topic requires duplicate detection.
     * 
    */
    public Optional<Boolean> getRequiresDuplicateDetection() {
        return Optional.ofNullable(this.requiresDuplicateDetection);
    }
    /**
     * Size of the topic, in bytes.
     * 
    */
    public Double getSizeInBytes() {
        return this.sizeInBytes;
    }
    /**
     * Enumerates the possible values for the status of a messaging entity.
     * 
    */
    public Optional<String> getStatus() {
        return Optional.ofNullable(this.status);
    }
    /**
     * Number of subscriptions.
     * 
    */
    public Integer getSubscriptionCount() {
        return this.subscriptionCount;
    }
    /**
     * Value that indicates whether the topic supports ordering.
     * 
    */
    public Optional<Boolean> getSupportOrdering() {
        return Optional.ofNullable(this.supportOrdering);
    }
    /**
     * Resource type
     * 
    */
    public String getType() {
        return this.type;
    }
    /**
     * The exact time the message was updated.
     * 
    */
    public String getUpdatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTopicResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessedAt;
        private @Nullable String autoDeleteOnIdle;
        private MessageCountDetailsResponse countDetails;
        private String createdAt;
        private @Nullable String defaultMessageTimeToLive;
        private @Nullable String duplicateDetectionHistoryTimeWindow;
        private @Nullable Boolean enableBatchedOperations;
        private @Nullable Boolean enableExpress;
        private @Nullable Boolean enablePartitioning;
        private String id;
        private @Nullable Integer maxSizeInMegabytes;
        private String name;
        private @Nullable Boolean requiresDuplicateDetection;
        private Double sizeInBytes;
        private @Nullable String status;
        private Integer subscriptionCount;
        private @Nullable Boolean supportOrdering;
        private String type;
        private String updatedAt;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTopicResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessedAt = defaults.accessedAt;
    	      this.autoDeleteOnIdle = defaults.autoDeleteOnIdle;
    	      this.countDetails = defaults.countDetails;
    	      this.createdAt = defaults.createdAt;
    	      this.defaultMessageTimeToLive = defaults.defaultMessageTimeToLive;
    	      this.duplicateDetectionHistoryTimeWindow = defaults.duplicateDetectionHistoryTimeWindow;
    	      this.enableBatchedOperations = defaults.enableBatchedOperations;
    	      this.enableExpress = defaults.enableExpress;
    	      this.enablePartitioning = defaults.enablePartitioning;
    	      this.id = defaults.id;
    	      this.maxSizeInMegabytes = defaults.maxSizeInMegabytes;
    	      this.name = defaults.name;
    	      this.requiresDuplicateDetection = defaults.requiresDuplicateDetection;
    	      this.sizeInBytes = defaults.sizeInBytes;
    	      this.status = defaults.status;
    	      this.subscriptionCount = defaults.subscriptionCount;
    	      this.supportOrdering = defaults.supportOrdering;
    	      this.type = defaults.type;
    	      this.updatedAt = defaults.updatedAt;
        }

        public Builder setAccessedAt(String accessedAt) {
            this.accessedAt = Objects.requireNonNull(accessedAt);
            return this;
        }

        public Builder setAutoDeleteOnIdle(@Nullable String autoDeleteOnIdle) {
            this.autoDeleteOnIdle = autoDeleteOnIdle;
            return this;
        }

        public Builder setCountDetails(MessageCountDetailsResponse countDetails) {
            this.countDetails = Objects.requireNonNull(countDetails);
            return this;
        }

        public Builder setCreatedAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }

        public Builder setDefaultMessageTimeToLive(@Nullable String defaultMessageTimeToLive) {
            this.defaultMessageTimeToLive = defaultMessageTimeToLive;
            return this;
        }

        public Builder setDuplicateDetectionHistoryTimeWindow(@Nullable String duplicateDetectionHistoryTimeWindow) {
            this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            return this;
        }

        public Builder setEnableBatchedOperations(@Nullable Boolean enableBatchedOperations) {
            this.enableBatchedOperations = enableBatchedOperations;
            return this;
        }

        public Builder setEnableExpress(@Nullable Boolean enableExpress) {
            this.enableExpress = enableExpress;
            return this;
        }

        public Builder setEnablePartitioning(@Nullable Boolean enablePartitioning) {
            this.enablePartitioning = enablePartitioning;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setMaxSizeInMegabytes(@Nullable Integer maxSizeInMegabytes) {
            this.maxSizeInMegabytes = maxSizeInMegabytes;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setRequiresDuplicateDetection(@Nullable Boolean requiresDuplicateDetection) {
            this.requiresDuplicateDetection = requiresDuplicateDetection;
            return this;
        }

        public Builder setSizeInBytes(Double sizeInBytes) {
            this.sizeInBytes = Objects.requireNonNull(sizeInBytes);
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = status;
            return this;
        }

        public Builder setSubscriptionCount(Integer subscriptionCount) {
            this.subscriptionCount = Objects.requireNonNull(subscriptionCount);
            return this;
        }

        public Builder setSupportOrdering(@Nullable Boolean supportOrdering) {
            this.supportOrdering = supportOrdering;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUpdatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        public GetTopicResult build() {
            return new GetTopicResult(accessedAt, autoDeleteOnIdle, countDetails, createdAt, defaultMessageTimeToLive, duplicateDetectionHistoryTimeWindow, enableBatchedOperations, enableExpress, enablePartitioning, id, maxSizeInMegabytes, name, requiresDuplicateDetection, sizeInBytes, status, subscriptionCount, supportOrdering, type, updatedAt);
        }
    }
}
