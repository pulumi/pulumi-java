// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.providerhub.inputs;

import io.pulumi.azurenative.providerhub.inputs.SkuCapabilityResponse;
import io.pulumi.azurenative.providerhub.inputs.SkuCostResponse;
import io.pulumi.azurenative.providerhub.inputs.SkuLocationInfoResponse;
import io.pulumi.azurenative.providerhub.inputs.SkuSettingResponseCapacity;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SkuSettingResponse extends io.pulumi.resources.InvokeArgs {

    public static final SkuSettingResponse Empty = new SkuSettingResponse();

    @Import(name="capabilities")
      private final @Nullable List<SkuCapabilityResponse> capabilities;

    public List<SkuCapabilityResponse> capabilities() {
        return this.capabilities == null ? List.of() : this.capabilities;
    }

    @Import(name="capacity")
      private final @Nullable SkuSettingResponseCapacity capacity;

    public Optional<SkuSettingResponseCapacity> capacity() {
        return this.capacity == null ? Optional.empty() : Optional.ofNullable(this.capacity);
    }

    @Import(name="costs")
      private final @Nullable List<SkuCostResponse> costs;

    public List<SkuCostResponse> costs() {
        return this.costs == null ? List.of() : this.costs;
    }

    @Import(name="family")
      private final @Nullable String family;

    public Optional<String> family() {
        return this.family == null ? Optional.empty() : Optional.ofNullable(this.family);
    }

    @Import(name="kind")
      private final @Nullable String kind;

    public Optional<String> kind() {
        return this.kind == null ? Optional.empty() : Optional.ofNullable(this.kind);
    }

    @Import(name="locationInfo")
      private final @Nullable List<SkuLocationInfoResponse> locationInfo;

    public List<SkuLocationInfoResponse> locationInfo() {
        return this.locationInfo == null ? List.of() : this.locationInfo;
    }

    @Import(name="locations")
      private final @Nullable List<String> locations;

    public List<String> locations() {
        return this.locations == null ? List.of() : this.locations;
    }

    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    @Import(name="requiredFeatures")
      private final @Nullable List<String> requiredFeatures;

    public List<String> requiredFeatures() {
        return this.requiredFeatures == null ? List.of() : this.requiredFeatures;
    }

    @Import(name="requiredQuotaIds")
      private final @Nullable List<String> requiredQuotaIds;

    public List<String> requiredQuotaIds() {
        return this.requiredQuotaIds == null ? List.of() : this.requiredQuotaIds;
    }

    @Import(name="size")
      private final @Nullable String size;

    public Optional<String> size() {
        return this.size == null ? Optional.empty() : Optional.ofNullable(this.size);
    }

    @Import(name="tier")
      private final @Nullable String tier;

    public Optional<String> tier() {
        return this.tier == null ? Optional.empty() : Optional.ofNullable(this.tier);
    }

    public SkuSettingResponse(
        @Nullable List<SkuCapabilityResponse> capabilities,
        @Nullable SkuSettingResponseCapacity capacity,
        @Nullable List<SkuCostResponse> costs,
        @Nullable String family,
        @Nullable String kind,
        @Nullable List<SkuLocationInfoResponse> locationInfo,
        @Nullable List<String> locations,
        String name,
        @Nullable List<String> requiredFeatures,
        @Nullable List<String> requiredQuotaIds,
        @Nullable String size,
        @Nullable String tier) {
        this.capabilities = capabilities;
        this.capacity = capacity;
        this.costs = costs;
        this.family = family;
        this.kind = kind;
        this.locationInfo = locationInfo;
        this.locations = locations;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.requiredFeatures = requiredFeatures;
        this.requiredQuotaIds = requiredQuotaIds;
        this.size = size;
        this.tier = tier;
    }

    private SkuSettingResponse() {
        this.capabilities = List.of();
        this.capacity = null;
        this.costs = List.of();
        this.family = null;
        this.kind = null;
        this.locationInfo = List.of();
        this.locations = List.of();
        this.name = null;
        this.requiredFeatures = List.of();
        this.requiredQuotaIds = List.of();
        this.size = null;
        this.tier = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SkuSettingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<SkuCapabilityResponse> capabilities;
        private @Nullable SkuSettingResponseCapacity capacity;
        private @Nullable List<SkuCostResponse> costs;
        private @Nullable String family;
        private @Nullable String kind;
        private @Nullable List<SkuLocationInfoResponse> locationInfo;
        private @Nullable List<String> locations;
        private String name;
        private @Nullable List<String> requiredFeatures;
        private @Nullable List<String> requiredQuotaIds;
        private @Nullable String size;
        private @Nullable String tier;

        public Builder() {
    	      // Empty
        }

        public Builder(SkuSettingResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capabilities = defaults.capabilities;
    	      this.capacity = defaults.capacity;
    	      this.costs = defaults.costs;
    	      this.family = defaults.family;
    	      this.kind = defaults.kind;
    	      this.locationInfo = defaults.locationInfo;
    	      this.locations = defaults.locations;
    	      this.name = defaults.name;
    	      this.requiredFeatures = defaults.requiredFeatures;
    	      this.requiredQuotaIds = defaults.requiredQuotaIds;
    	      this.size = defaults.size;
    	      this.tier = defaults.tier;
        }

        public Builder capabilities(@Nullable List<SkuCapabilityResponse> capabilities) {
            this.capabilities = capabilities;
            return this;
        }
        public Builder capabilities(SkuCapabilityResponse... capabilities) {
            return capabilities(List.of(capabilities));
        }
        public Builder capacity(@Nullable SkuSettingResponseCapacity capacity) {
            this.capacity = capacity;
            return this;
        }
        public Builder costs(@Nullable List<SkuCostResponse> costs) {
            this.costs = costs;
            return this;
        }
        public Builder costs(SkuCostResponse... costs) {
            return costs(List.of(costs));
        }
        public Builder family(@Nullable String family) {
            this.family = family;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        public Builder locationInfo(@Nullable List<SkuLocationInfoResponse> locationInfo) {
            this.locationInfo = locationInfo;
            return this;
        }
        public Builder locationInfo(SkuLocationInfoResponse... locationInfo) {
            return locationInfo(List.of(locationInfo));
        }
        public Builder locations(@Nullable List<String> locations) {
            this.locations = locations;
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder requiredFeatures(@Nullable List<String> requiredFeatures) {
            this.requiredFeatures = requiredFeatures;
            return this;
        }
        public Builder requiredFeatures(String... requiredFeatures) {
            return requiredFeatures(List.of(requiredFeatures));
        }
        public Builder requiredQuotaIds(@Nullable List<String> requiredQuotaIds) {
            this.requiredQuotaIds = requiredQuotaIds;
            return this;
        }
        public Builder requiredQuotaIds(String... requiredQuotaIds) {
            return requiredQuotaIds(List.of(requiredQuotaIds));
        }
        public Builder size(@Nullable String size) {
            this.size = size;
            return this;
        }
        public Builder tier(@Nullable String tier) {
            this.tier = tier;
            return this;
        }        public SkuSettingResponse build() {
            return new SkuSettingResponse(capabilities, capacity, costs, family, kind, locationInfo, locations, name, requiredFeatures, requiredQuotaIds, size, tier);
        }
    }
}
