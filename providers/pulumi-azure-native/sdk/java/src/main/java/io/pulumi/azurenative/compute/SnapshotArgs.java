// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.compute.enums.HyperVGeneration;
import io.pulumi.azurenative.compute.enums.NetworkAccessPolicy;
import io.pulumi.azurenative.compute.enums.OperatingSystemTypes;
import io.pulumi.azurenative.compute.inputs.CreationDataArgs;
import io.pulumi.azurenative.compute.inputs.EncryptionArgs;
import io.pulumi.azurenative.compute.inputs.EncryptionSettingsCollectionArgs;
import io.pulumi.azurenative.compute.inputs.ExtendedLocationArgs;
import io.pulumi.azurenative.compute.inputs.PurchasePlanArgs;
import io.pulumi.azurenative.compute.inputs.SnapshotSkuArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SnapshotArgs extends io.pulumi.resources.ResourceArgs {

    public static final SnapshotArgs Empty = new SnapshotArgs();

    /**
     * Disk source information. CreationData information cannot be changed after the disk has been created.
     * 
     */
    @Import(name="creationData", required=true)
      private final Output<CreationDataArgs> creationData;

    public Output<CreationDataArgs> getCreationData() {
        return this.creationData;
    }

    /**
     * ARM id of the DiskAccess resource for using private endpoints on disks.
     * 
     */
    @Import(name="diskAccessId")
      private final @Nullable Output<String> diskAccessId;

    public Output<String> getDiskAccessId() {
        return this.diskAccessId == null ? Codegen.empty() : this.diskAccessId;
    }

    /**
     * If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
     * 
     */
    @Import(name="diskSizeGB")
      private final @Nullable Output<Integer> diskSizeGB;

    public Output<Integer> getDiskSizeGB() {
        return this.diskSizeGB == null ? Codegen.empty() : this.diskSizeGB;
    }

    /**
     * Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
     * 
     */
    @Import(name="encryption")
      private final @Nullable Output<EncryptionArgs> encryption;

    public Output<EncryptionArgs> getEncryption() {
        return this.encryption == null ? Codegen.empty() : this.encryption;
    }

    /**
     * Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
     * 
     */
    @Import(name="encryptionSettingsCollection")
      private final @Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection;

    public Output<EncryptionSettingsCollectionArgs> getEncryptionSettingsCollection() {
        return this.encryptionSettingsCollection == null ? Codegen.empty() : this.encryptionSettingsCollection;
    }

    /**
     * The extended location where the snapshot will be created. Extended location cannot be changed.
     * 
     */
    @Import(name="extendedLocation")
      private final @Nullable Output<ExtendedLocationArgs> extendedLocation;

    public Output<ExtendedLocationArgs> getExtendedLocation() {
        return this.extendedLocation == null ? Codegen.empty() : this.extendedLocation;
    }

    /**
     * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     */
    @Import(name="hyperVGeneration")
      private final @Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration;

    public Output<Either<String,HyperVGeneration>> getHyperVGeneration() {
        return this.hyperVGeneration == null ? Codegen.empty() : this.hyperVGeneration;
    }

    /**
     * Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
     * 
     */
    @Import(name="incremental")
      private final @Nullable Output<Boolean> incremental;

    public Output<Boolean> getIncremental() {
        return this.incremental == null ? Codegen.empty() : this.incremental;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Policy for accessing the disk via network.
     * 
     */
    @Import(name="networkAccessPolicy")
      private final @Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy;

    public Output<Either<String,NetworkAccessPolicy>> getNetworkAccessPolicy() {
        return this.networkAccessPolicy == null ? Codegen.empty() : this.networkAccessPolicy;
    }

    /**
     * The Operating System type.
     * 
     */
    @Import(name="osType")
      private final @Nullable Output<OperatingSystemTypes> osType;

    public Output<OperatingSystemTypes> getOsType() {
        return this.osType == null ? Codegen.empty() : this.osType;
    }

    /**
     * Purchase plan information for the image from which the source disk for the snapshot was originally created.
     * 
     */
    @Import(name="purchasePlan")
      private final @Nullable Output<PurchasePlanArgs> purchasePlan;

    public Output<PurchasePlanArgs> getPurchasePlan() {
        return this.purchasePlan == null ? Codegen.empty() : this.purchasePlan;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<SnapshotSkuArgs> sku;

    public Output<SnapshotSkuArgs> getSku() {
        return this.sku == null ? Codegen.empty() : this.sku;
    }

    /**
     * The name of the snapshot that is being created. The name can't be changed after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * 
     */
    @Import(name="snapshotName")
      private final @Nullable Output<String> snapshotName;

    public Output<String> getSnapshotName() {
        return this.snapshotName == null ? Codegen.empty() : this.snapshotName;
    }

    /**
     * Indicates the OS on a snapshot supports hibernation.
     * 
     */
    @Import(name="supportsHibernation")
      private final @Nullable Output<Boolean> supportsHibernation;

    public Output<Boolean> getSupportsHibernation() {
        return this.supportsHibernation == null ? Codegen.empty() : this.supportsHibernation;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public SnapshotArgs(
        Output<CreationDataArgs> creationData,
        @Nullable Output<String> diskAccessId,
        @Nullable Output<Integer> diskSizeGB,
        @Nullable Output<EncryptionArgs> encryption,
        @Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection,
        @Nullable Output<ExtendedLocationArgs> extendedLocation,
        @Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration,
        @Nullable Output<Boolean> incremental,
        @Nullable Output<String> location,
        @Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy,
        @Nullable Output<OperatingSystemTypes> osType,
        @Nullable Output<PurchasePlanArgs> purchasePlan,
        Output<String> resourceGroupName,
        @Nullable Output<SnapshotSkuArgs> sku,
        @Nullable Output<String> snapshotName,
        @Nullable Output<Boolean> supportsHibernation,
        @Nullable Output<Map<String,String>> tags) {
        this.creationData = Objects.requireNonNull(creationData, "expected parameter 'creationData' to be non-null");
        this.diskAccessId = diskAccessId;
        this.diskSizeGB = diskSizeGB;
        this.encryption = encryption;
        this.encryptionSettingsCollection = encryptionSettingsCollection;
        this.extendedLocation = extendedLocation;
        this.hyperVGeneration = hyperVGeneration;
        this.incremental = incremental;
        this.location = location;
        this.networkAccessPolicy = networkAccessPolicy;
        this.osType = osType;
        this.purchasePlan = purchasePlan;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = sku;
        this.snapshotName = snapshotName;
        this.supportsHibernation = supportsHibernation;
        this.tags = tags;
    }

    private SnapshotArgs() {
        this.creationData = Codegen.empty();
        this.diskAccessId = Codegen.empty();
        this.diskSizeGB = Codegen.empty();
        this.encryption = Codegen.empty();
        this.encryptionSettingsCollection = Codegen.empty();
        this.extendedLocation = Codegen.empty();
        this.hyperVGeneration = Codegen.empty();
        this.incremental = Codegen.empty();
        this.location = Codegen.empty();
        this.networkAccessPolicy = Codegen.empty();
        this.osType = Codegen.empty();
        this.purchasePlan = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sku = Codegen.empty();
        this.snapshotName = Codegen.empty();
        this.supportsHibernation = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SnapshotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<CreationDataArgs> creationData;
        private @Nullable Output<String> diskAccessId;
        private @Nullable Output<Integer> diskSizeGB;
        private @Nullable Output<EncryptionArgs> encryption;
        private @Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection;
        private @Nullable Output<ExtendedLocationArgs> extendedLocation;
        private @Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration;
        private @Nullable Output<Boolean> incremental;
        private @Nullable Output<String> location;
        private @Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy;
        private @Nullable Output<OperatingSystemTypes> osType;
        private @Nullable Output<PurchasePlanArgs> purchasePlan;
        private Output<String> resourceGroupName;
        private @Nullable Output<SnapshotSkuArgs> sku;
        private @Nullable Output<String> snapshotName;
        private @Nullable Output<Boolean> supportsHibernation;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(SnapshotArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationData = defaults.creationData;
    	      this.diskAccessId = defaults.diskAccessId;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.encryption = defaults.encryption;
    	      this.encryptionSettingsCollection = defaults.encryptionSettingsCollection;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.incremental = defaults.incremental;
    	      this.location = defaults.location;
    	      this.networkAccessPolicy = defaults.networkAccessPolicy;
    	      this.osType = defaults.osType;
    	      this.purchasePlan = defaults.purchasePlan;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.snapshotName = defaults.snapshotName;
    	      this.supportsHibernation = defaults.supportsHibernation;
    	      this.tags = defaults.tags;
        }

        public Builder creationData(Output<CreationDataArgs> creationData) {
            this.creationData = Objects.requireNonNull(creationData);
            return this;
        }
        public Builder creationData(CreationDataArgs creationData) {
            this.creationData = Output.of(Objects.requireNonNull(creationData));
            return this;
        }
        public Builder diskAccessId(@Nullable Output<String> diskAccessId) {
            this.diskAccessId = diskAccessId;
            return this;
        }
        public Builder diskAccessId(@Nullable String diskAccessId) {
            this.diskAccessId = Codegen.ofNullable(diskAccessId);
            return this;
        }
        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = Codegen.ofNullable(diskSizeGB);
            return this;
        }
        public Builder encryption(@Nullable Output<EncryptionArgs> encryption) {
            this.encryption = encryption;
            return this;
        }
        public Builder encryption(@Nullable EncryptionArgs encryption) {
            this.encryption = Codegen.ofNullable(encryption);
            return this;
        }
        public Builder encryptionSettingsCollection(@Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection) {
            this.encryptionSettingsCollection = encryptionSettingsCollection;
            return this;
        }
        public Builder encryptionSettingsCollection(@Nullable EncryptionSettingsCollectionArgs encryptionSettingsCollection) {
            this.encryptionSettingsCollection = Codegen.ofNullable(encryptionSettingsCollection);
            return this;
        }
        public Builder extendedLocation(@Nullable Output<ExtendedLocationArgs> extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }
        public Builder extendedLocation(@Nullable ExtendedLocationArgs extendedLocation) {
            this.extendedLocation = Codegen.ofNullable(extendedLocation);
            return this;
        }
        public Builder hyperVGeneration(@Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration) {
            this.hyperVGeneration = hyperVGeneration;
            return this;
        }
        public Builder hyperVGeneration(@Nullable Either<String,HyperVGeneration> hyperVGeneration) {
            this.hyperVGeneration = Codegen.ofNullable(hyperVGeneration);
            return this;
        }
        public Builder incremental(@Nullable Output<Boolean> incremental) {
            this.incremental = incremental;
            return this;
        }
        public Builder incremental(@Nullable Boolean incremental) {
            this.incremental = Codegen.ofNullable(incremental);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder networkAccessPolicy(@Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy) {
            this.networkAccessPolicy = networkAccessPolicy;
            return this;
        }
        public Builder networkAccessPolicy(@Nullable Either<String,NetworkAccessPolicy> networkAccessPolicy) {
            this.networkAccessPolicy = Codegen.ofNullable(networkAccessPolicy);
            return this;
        }
        public Builder osType(@Nullable Output<OperatingSystemTypes> osType) {
            this.osType = osType;
            return this;
        }
        public Builder osType(@Nullable OperatingSystemTypes osType) {
            this.osType = Codegen.ofNullable(osType);
            return this;
        }
        public Builder purchasePlan(@Nullable Output<PurchasePlanArgs> purchasePlan) {
            this.purchasePlan = purchasePlan;
            return this;
        }
        public Builder purchasePlan(@Nullable PurchasePlanArgs purchasePlan) {
            this.purchasePlan = Codegen.ofNullable(purchasePlan);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sku(@Nullable Output<SnapshotSkuArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable SnapshotSkuArgs sku) {
            this.sku = Codegen.ofNullable(sku);
            return this;
        }
        public Builder snapshotName(@Nullable Output<String> snapshotName) {
            this.snapshotName = snapshotName;
            return this;
        }
        public Builder snapshotName(@Nullable String snapshotName) {
            this.snapshotName = Codegen.ofNullable(snapshotName);
            return this;
        }
        public Builder supportsHibernation(@Nullable Output<Boolean> supportsHibernation) {
            this.supportsHibernation = supportsHibernation;
            return this;
        }
        public Builder supportsHibernation(@Nullable Boolean supportsHibernation) {
            this.supportsHibernation = Codegen.ofNullable(supportsHibernation);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public SnapshotArgs build() {
            return new SnapshotArgs(creationData, diskAccessId, diskSizeGB, encryption, encryptionSettingsCollection, extendedLocation, hyperVGeneration, incremental, location, networkAccessPolicy, osType, purchasePlan, resourceGroupName, sku, snapshotName, supportsHibernation, tags);
        }
    }
}
