// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.inputs;

import io.pulumi.azurenative.datamigration.inputs.DataItemMigrationSummaryResultResponse;
import io.pulumi.azurenative.datamigration.inputs.ReportableExceptionResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Database level result for Sql Server to Azure Sql DB migration.
 * 
 */
public final class MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse extends io.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse Empty = new MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse();

    /**
     * Name of the item
     * 
     */
    @InputImport(name="databaseName", required=true)
    private final String databaseName;

    public String getDatabaseName() {
        return this.databaseName;
    }

    /**
     * Migration end time
     * 
     */
    @InputImport(name="endedOn", required=true)
    private final String endedOn;

    public String getEndedOn() {
        return this.endedOn;
    }

    /**
     * Number of database/object errors.
     * 
     */
    @InputImport(name="errorCount", required=true)
    private final Double errorCount;

    public Double getErrorCount() {
        return this.errorCount;
    }

    /**
     * Wildcard string prefix to use for querying all errors of the item
     * 
     */
    @InputImport(name="errorPrefix", required=true)
    private final String errorPrefix;

    public String getErrorPrefix() {
        return this.errorPrefix;
    }

    /**
     * Migration exceptions and warnings.
     * 
     */
    @InputImport(name="exceptionsAndWarnings", required=true)
    private final List<ReportableExceptionResponse> exceptionsAndWarnings;

    public List<ReportableExceptionResponse> getExceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }

    /**
     * Result identifier
     * 
     */
    @InputImport(name="id", required=true)
    private final String id;

    public String getId() {
        return this.id;
    }

    /**
     * Migration progress message
     * 
     */
    @InputImport(name="message", required=true)
    private final String message;

    public String getMessage() {
        return this.message;
    }

    /**
     * Number of objects
     * 
     */
    @InputImport(name="numberOfObjects", required=true)
    private final Double numberOfObjects;

    public Double getNumberOfObjects() {
        return this.numberOfObjects;
    }

    /**
     * Number of successfully completed objects
     * 
     */
    @InputImport(name="numberOfObjectsCompleted", required=true)
    private final Double numberOfObjectsCompleted;

    public Double getNumberOfObjectsCompleted() {
        return this.numberOfObjectsCompleted;
    }

    /**
     * Summary of object results in the migration
     * 
     */
    @InputImport(name="objectSummary", required=true)
    private final Map<String,DataItemMigrationSummaryResultResponse> objectSummary;

    public Map<String,DataItemMigrationSummaryResultResponse> getObjectSummary() {
        return this.objectSummary;
    }

    /**
     * Wildcard string prefix to use for querying all sub-tem results of the item
     * 
     */
    @InputImport(name="resultPrefix", required=true)
    private final String resultPrefix;

    public String getResultPrefix() {
        return this.resultPrefix;
    }

    /**
     * Result type
     * Expected value is 'DatabaseLevelOutput'.
     * 
     */
    @InputImport(name="resultType", required=true)
    private final String resultType;

    public String getResultType() {
        return this.resultType;
    }

    /**
     * Migration stage that this database is in
     * 
     */
    @InputImport(name="stage", required=true)
    private final String stage;

    public String getStage() {
        return this.stage;
    }

    /**
     * Migration start time
     * 
     */
    @InputImport(name="startedOn", required=true)
    private final String startedOn;

    public String getStartedOn() {
        return this.startedOn;
    }

    /**
     * Current state of migration
     * 
     */
    @InputImport(name="state", required=true)
    private final String state;

    public String getState() {
        return this.state;
    }

    /**
     * Status message
     * 
     */
    @InputImport(name="statusMessage", required=true)
    private final String statusMessage;

    public String getStatusMessage() {
        return this.statusMessage;
    }

    public MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse(
        String databaseName,
        String endedOn,
        Double errorCount,
        String errorPrefix,
        List<ReportableExceptionResponse> exceptionsAndWarnings,
        String id,
        String message,
        Double numberOfObjects,
        Double numberOfObjectsCompleted,
        Map<String,DataItemMigrationSummaryResultResponse> objectSummary,
        String resultPrefix,
        String resultType,
        String stage,
        String startedOn,
        String state,
        String statusMessage) {
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.endedOn = Objects.requireNonNull(endedOn, "expected parameter 'endedOn' to be non-null");
        this.errorCount = Objects.requireNonNull(errorCount, "expected parameter 'errorCount' to be non-null");
        this.errorPrefix = Objects.requireNonNull(errorPrefix, "expected parameter 'errorPrefix' to be non-null");
        this.exceptionsAndWarnings = Objects.requireNonNull(exceptionsAndWarnings, "expected parameter 'exceptionsAndWarnings' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.message = Objects.requireNonNull(message, "expected parameter 'message' to be non-null");
        this.numberOfObjects = Objects.requireNonNull(numberOfObjects, "expected parameter 'numberOfObjects' to be non-null");
        this.numberOfObjectsCompleted = Objects.requireNonNull(numberOfObjectsCompleted, "expected parameter 'numberOfObjectsCompleted' to be non-null");
        this.objectSummary = Objects.requireNonNull(objectSummary, "expected parameter 'objectSummary' to be non-null");
        this.resultPrefix = Objects.requireNonNull(resultPrefix, "expected parameter 'resultPrefix' to be non-null");
        this.resultType = Objects.requireNonNull(resultType, "expected parameter 'resultType' to be non-null");
        this.stage = Objects.requireNonNull(stage, "expected parameter 'stage' to be non-null");
        this.startedOn = Objects.requireNonNull(startedOn, "expected parameter 'startedOn' to be non-null");
        this.state = Objects.requireNonNull(state, "expected parameter 'state' to be non-null");
        this.statusMessage = Objects.requireNonNull(statusMessage, "expected parameter 'statusMessage' to be non-null");
    }

    private MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse() {
        this.databaseName = null;
        this.endedOn = null;
        this.errorCount = null;
        this.errorPrefix = null;
        this.exceptionsAndWarnings = List.of();
        this.id = null;
        this.message = null;
        this.numberOfObjects = null;
        this.numberOfObjectsCompleted = null;
        this.objectSummary = Map.of();
        this.resultPrefix = null;
        this.resultType = null;
        this.stage = null;
        this.startedOn = null;
        this.state = null;
        this.statusMessage = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String databaseName;
        private String endedOn;
        private Double errorCount;
        private String errorPrefix;
        private List<ReportableExceptionResponse> exceptionsAndWarnings;
        private String id;
        private String message;
        private Double numberOfObjects;
        private Double numberOfObjectsCompleted;
        private Map<String,DataItemMigrationSummaryResultResponse> objectSummary;
        private String resultPrefix;
        private String resultType;
        private String stage;
        private String startedOn;
        private String state;
        private String statusMessage;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.endedOn = defaults.endedOn;
    	      this.errorCount = defaults.errorCount;
    	      this.errorPrefix = defaults.errorPrefix;
    	      this.exceptionsAndWarnings = defaults.exceptionsAndWarnings;
    	      this.id = defaults.id;
    	      this.message = defaults.message;
    	      this.numberOfObjects = defaults.numberOfObjects;
    	      this.numberOfObjectsCompleted = defaults.numberOfObjectsCompleted;
    	      this.objectSummary = defaults.objectSummary;
    	      this.resultPrefix = defaults.resultPrefix;
    	      this.resultType = defaults.resultType;
    	      this.stage = defaults.stage;
    	      this.startedOn = defaults.startedOn;
    	      this.state = defaults.state;
    	      this.statusMessage = defaults.statusMessage;
        }

        public Builder setDatabaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder setEndedOn(String endedOn) {
            this.endedOn = Objects.requireNonNull(endedOn);
            return this;
        }

        public Builder setErrorCount(Double errorCount) {
            this.errorCount = Objects.requireNonNull(errorCount);
            return this;
        }

        public Builder setErrorPrefix(String errorPrefix) {
            this.errorPrefix = Objects.requireNonNull(errorPrefix);
            return this;
        }

        public Builder setExceptionsAndWarnings(List<ReportableExceptionResponse> exceptionsAndWarnings) {
            this.exceptionsAndWarnings = Objects.requireNonNull(exceptionsAndWarnings);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setMessage(String message) {
            this.message = Objects.requireNonNull(message);
            return this;
        }

        public Builder setNumberOfObjects(Double numberOfObjects) {
            this.numberOfObjects = Objects.requireNonNull(numberOfObjects);
            return this;
        }

        public Builder setNumberOfObjectsCompleted(Double numberOfObjectsCompleted) {
            this.numberOfObjectsCompleted = Objects.requireNonNull(numberOfObjectsCompleted);
            return this;
        }

        public Builder setObjectSummary(Map<String,DataItemMigrationSummaryResultResponse> objectSummary) {
            this.objectSummary = Objects.requireNonNull(objectSummary);
            return this;
        }

        public Builder setResultPrefix(String resultPrefix) {
            this.resultPrefix = Objects.requireNonNull(resultPrefix);
            return this;
        }

        public Builder setResultType(String resultType) {
            this.resultType = Objects.requireNonNull(resultType);
            return this;
        }

        public Builder setStage(String stage) {
            this.stage = Objects.requireNonNull(stage);
            return this;
        }

        public Builder setStartedOn(String startedOn) {
            this.startedOn = Objects.requireNonNull(startedOn);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setStatusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }

        public MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse build() {
            return new MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse(databaseName, endedOn, errorCount, errorPrefix, exceptionsAndWarnings, id, message, numberOfObjects, numberOfObjectsCompleted, objectSummary, resultPrefix, resultType, stage, startedOn, state, statusMessage);
        }
    }
}
