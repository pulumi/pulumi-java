// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.guestconfiguration.inputs;

import io.pulumi.azurenative.guestconfiguration.enums.ActionAfterReboot;
import io.pulumi.azurenative.guestconfiguration.enums.ConfigurationMode;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration setting of LCM (Local Configuration Manager).
 * 
 */
public final class ConfigurationSettingArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConfigurationSettingArgs Empty = new ConfigurationSettingArgs();

    /**
     * Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
     * 
     */
    @Import(name="actionAfterReboot")
      private final @Nullable Output<Either<String,ActionAfterReboot>> actionAfterReboot;

    public Output<Either<String,ActionAfterReboot>> getActionAfterReboot() {
        return this.actionAfterReboot == null ? Output.empty() : this.actionAfterReboot;
    }

    /**
     * If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
     * 
     */
    @Import(name="allowModuleOverwrite")
      private final @Nullable Output<Boolean> allowModuleOverwrite;

    public Output<Boolean> getAllowModuleOverwrite() {
        return this.allowModuleOverwrite == null ? Output.empty() : this.allowModuleOverwrite;
    }

    /**
     * Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
     * 
     */
    @Import(name="configurationMode")
      private final @Nullable Output<Either<String,ConfigurationMode>> configurationMode;

    public Output<Either<String,ConfigurationMode>> getConfigurationMode() {
        return this.configurationMode == null ? Output.empty() : this.configurationMode;
    }

    /**
     * How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
     * 
     */
    @Import(name="configurationModeFrequencyMins")
      private final @Nullable Output<Double> configurationModeFrequencyMins;

    public Output<Double> getConfigurationModeFrequencyMins() {
        return this.configurationModeFrequencyMins == null ? Output.empty() : this.configurationModeFrequencyMins;
    }

    /**
     * Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
     * 
     */
    @Import(name="rebootIfNeeded")
      private final @Nullable Output<Boolean> rebootIfNeeded;

    public Output<Boolean> getRebootIfNeeded() {
        return this.rebootIfNeeded == null ? Output.empty() : this.rebootIfNeeded;
    }

    /**
     * The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
     * 
     */
    @Import(name="refreshFrequencyMins")
      private final @Nullable Output<Double> refreshFrequencyMins;

    public Output<Double> getRefreshFrequencyMins() {
        return this.refreshFrequencyMins == null ? Output.empty() : this.refreshFrequencyMins;
    }

    public ConfigurationSettingArgs(
        @Nullable Output<Either<String,ActionAfterReboot>> actionAfterReboot,
        @Nullable Output<Boolean> allowModuleOverwrite,
        @Nullable Output<Either<String,ConfigurationMode>> configurationMode,
        @Nullable Output<Double> configurationModeFrequencyMins,
        @Nullable Output<Boolean> rebootIfNeeded,
        @Nullable Output<Double> refreshFrequencyMins) {
        this.actionAfterReboot = actionAfterReboot;
        this.allowModuleOverwrite = allowModuleOverwrite;
        this.configurationMode = configurationMode;
        this.configurationModeFrequencyMins = configurationModeFrequencyMins == null ? Output.ofNullable(1.5e+01) : configurationModeFrequencyMins;
        this.rebootIfNeeded = rebootIfNeeded;
        this.refreshFrequencyMins = refreshFrequencyMins == null ? Output.ofNullable(3e+01) : refreshFrequencyMins;
    }

    private ConfigurationSettingArgs() {
        this.actionAfterReboot = Output.empty();
        this.allowModuleOverwrite = Output.empty();
        this.configurationMode = Output.empty();
        this.configurationModeFrequencyMins = Output.empty();
        this.rebootIfNeeded = Output.empty();
        this.refreshFrequencyMins = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,ActionAfterReboot>> actionAfterReboot;
        private @Nullable Output<Boolean> allowModuleOverwrite;
        private @Nullable Output<Either<String,ConfigurationMode>> configurationMode;
        private @Nullable Output<Double> configurationModeFrequencyMins;
        private @Nullable Output<Boolean> rebootIfNeeded;
        private @Nullable Output<Double> refreshFrequencyMins;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigurationSettingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionAfterReboot = defaults.actionAfterReboot;
    	      this.allowModuleOverwrite = defaults.allowModuleOverwrite;
    	      this.configurationMode = defaults.configurationMode;
    	      this.configurationModeFrequencyMins = defaults.configurationModeFrequencyMins;
    	      this.rebootIfNeeded = defaults.rebootIfNeeded;
    	      this.refreshFrequencyMins = defaults.refreshFrequencyMins;
        }

        public Builder actionAfterReboot(@Nullable Output<Either<String,ActionAfterReboot>> actionAfterReboot) {
            this.actionAfterReboot = actionAfterReboot;
            return this;
        }

        public Builder actionAfterReboot(@Nullable Either<String,ActionAfterReboot> actionAfterReboot) {
            this.actionAfterReboot = Output.ofNullable(actionAfterReboot);
            return this;
        }

        public Builder allowModuleOverwrite(@Nullable Output<Boolean> allowModuleOverwrite) {
            this.allowModuleOverwrite = allowModuleOverwrite;
            return this;
        }

        public Builder allowModuleOverwrite(@Nullable Boolean allowModuleOverwrite) {
            this.allowModuleOverwrite = Output.ofNullable(allowModuleOverwrite);
            return this;
        }

        public Builder configurationMode(@Nullable Output<Either<String,ConfigurationMode>> configurationMode) {
            this.configurationMode = configurationMode;
            return this;
        }

        public Builder configurationMode(@Nullable Either<String,ConfigurationMode> configurationMode) {
            this.configurationMode = Output.ofNullable(configurationMode);
            return this;
        }

        public Builder configurationModeFrequencyMins(@Nullable Output<Double> configurationModeFrequencyMins) {
            this.configurationModeFrequencyMins = configurationModeFrequencyMins;
            return this;
        }

        public Builder configurationModeFrequencyMins(@Nullable Double configurationModeFrequencyMins) {
            this.configurationModeFrequencyMins = Output.ofNullable(configurationModeFrequencyMins);
            return this;
        }

        public Builder rebootIfNeeded(@Nullable Output<Boolean> rebootIfNeeded) {
            this.rebootIfNeeded = rebootIfNeeded;
            return this;
        }

        public Builder rebootIfNeeded(@Nullable Boolean rebootIfNeeded) {
            this.rebootIfNeeded = Output.ofNullable(rebootIfNeeded);
            return this;
        }

        public Builder refreshFrequencyMins(@Nullable Output<Double> refreshFrequencyMins) {
            this.refreshFrequencyMins = refreshFrequencyMins;
            return this;
        }

        public Builder refreshFrequencyMins(@Nullable Double refreshFrequencyMins) {
            this.refreshFrequencyMins = Output.ofNullable(refreshFrequencyMins);
            return this;
        }
        public ConfigurationSettingArgs build() {
            return new ConfigurationSettingArgs(actionAfterReboot, allowModuleOverwrite, configurationMode, configurationModeFrequencyMins, rebootIfNeeded, refreshFrequencyMins);
        }
    }
}
