// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SettingsPropertiesCacheArgs extends io.pulumi.resources.ResourceArgs {

    public static final SettingsPropertiesCacheArgs Empty = new SettingsPropertiesCacheArgs();

    /**
     * Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal, Unknown.
     * 
     */
    @InputImport(name="channel", required=true)
      private final Output<String> channel;

    public Output<String> getChannel() {
        return this.channel;
    }

    /**
     * Resource ID used by Resource Manager to uniquely identify the scope.
     * 
     */
    @InputImport(name="id", required=true)
      private final Output<String> id;

    public Output<String> getId() {
        return this.id;
    }

    /**
     * Display name for the scope.
     * 
     */
    @InputImport(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * Resource ID of the parent scope. For instance, subscription's resource ID for a resource group or a management group resource ID for a subscription.
     * 
     */
    @InputImport(name="parent")
      private final @Nullable Output<String> parent;

    public Output<String> getParent() {
        return this.parent == null ? Output.empty() : this.parent;
    }

    /**
     * Indicates the status of the scope. Status only applies to subscriptions and billing accounts.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Output<String> status;

    public Output<String> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * Indicates the type of modern account. Allowed values include: Individual, Enterprise, Partner, Indirect, NotApplicable
     * 
     */
    @InputImport(name="subchannel", required=true)
      private final Output<String> subchannel;

    public Output<String> getSubchannel() {
        return this.subchannel;
    }

    public SettingsPropertiesCacheArgs(
        Output<String> channel,
        Output<String> id,
        Output<String> name,
        @Nullable Output<String> parent,
        @Nullable Output<String> status,
        Output<String> subchannel) {
        this.channel = Objects.requireNonNull(channel, "expected parameter 'channel' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.parent = parent;
        this.status = status;
        this.subchannel = Objects.requireNonNull(subchannel, "expected parameter 'subchannel' to be non-null");
    }

    private SettingsPropertiesCacheArgs() {
        this.channel = Output.empty();
        this.id = Output.empty();
        this.name = Output.empty();
        this.parent = Output.empty();
        this.status = Output.empty();
        this.subchannel = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SettingsPropertiesCacheArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> channel;
        private Output<String> id;
        private Output<String> name;
        private @Nullable Output<String> parent;
        private @Nullable Output<String> status;
        private Output<String> subchannel;

        public Builder() {
    	      // Empty
        }

        public Builder(SettingsPropertiesCacheArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channel = defaults.channel;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.status = defaults.status;
    	      this.subchannel = defaults.subchannel;
        }

        public Builder channel(Output<String> channel) {
            this.channel = Objects.requireNonNull(channel);
            return this;
        }

        public Builder channel(String channel) {
            this.channel = Output.of(Objects.requireNonNull(channel));
            return this;
        }

        public Builder id(Output<String> id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder id(String id) {
            this.id = Output.of(Objects.requireNonNull(id));
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder parent(@Nullable Output<String> parent) {
            this.parent = parent;
            return this;
        }

        public Builder parent(@Nullable String parent) {
            this.parent = Output.ofNullable(parent);
            return this;
        }

        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Output.ofNullable(status);
            return this;
        }

        public Builder subchannel(Output<String> subchannel) {
            this.subchannel = Objects.requireNonNull(subchannel);
            return this;
        }

        public Builder subchannel(String subchannel) {
            this.subchannel = Output.of(Objects.requireNonNull(subchannel));
            return this;
        }
        public SettingsPropertiesCacheArgs build() {
            return new SettingsPropertiesCacheArgs(channel, id, name, parent, status, subchannel);
        }
    }
}
