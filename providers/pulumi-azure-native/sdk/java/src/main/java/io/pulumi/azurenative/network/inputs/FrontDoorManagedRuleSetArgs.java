// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.ManagedRuleSetActionType;
import io.pulumi.azurenative.network.inputs.FrontDoorManagedRuleGroupOverrideArgs;
import io.pulumi.azurenative.network.inputs.ManagedRuleExclusionArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FrontDoorManagedRuleSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final FrontDoorManagedRuleSetArgs Empty = new FrontDoorManagedRuleSetArgs();

    @InputImport(name="exclusions")
    private final @Nullable Input<List<ManagedRuleExclusionArgs>> exclusions;

    public Input<List<ManagedRuleExclusionArgs>> getExclusions() {
        return this.exclusions == null ? Input.empty() : this.exclusions;
    }

    @InputImport(name="ruleGroupOverrides")
    private final @Nullable Input<List<FrontDoorManagedRuleGroupOverrideArgs>> ruleGroupOverrides;

    public Input<List<FrontDoorManagedRuleGroupOverrideArgs>> getRuleGroupOverrides() {
        return this.ruleGroupOverrides == null ? Input.empty() : this.ruleGroupOverrides;
    }

    @InputImport(name="ruleSetAction")
    private final @Nullable Input<Either<String,ManagedRuleSetActionType>> ruleSetAction;

    public Input<Either<String,ManagedRuleSetActionType>> getRuleSetAction() {
        return this.ruleSetAction == null ? Input.empty() : this.ruleSetAction;
    }

    @InputImport(name="ruleSetType", required=true)
    private final Input<String> ruleSetType;

    public Input<String> getRuleSetType() {
        return this.ruleSetType;
    }

    @InputImport(name="ruleSetVersion", required=true)
    private final Input<String> ruleSetVersion;

    public Input<String> getRuleSetVersion() {
        return this.ruleSetVersion;
    }

    public FrontDoorManagedRuleSetArgs(
        @Nullable Input<List<ManagedRuleExclusionArgs>> exclusions,
        @Nullable Input<List<FrontDoorManagedRuleGroupOverrideArgs>> ruleGroupOverrides,
        @Nullable Input<Either<String,ManagedRuleSetActionType>> ruleSetAction,
        Input<String> ruleSetType,
        Input<String> ruleSetVersion) {
        this.exclusions = exclusions;
        this.ruleGroupOverrides = ruleGroupOverrides;
        this.ruleSetAction = ruleSetAction;
        this.ruleSetType = Objects.requireNonNull(ruleSetType, "expected parameter 'ruleSetType' to be non-null");
        this.ruleSetVersion = Objects.requireNonNull(ruleSetVersion, "expected parameter 'ruleSetVersion' to be non-null");
    }

    private FrontDoorManagedRuleSetArgs() {
        this.exclusions = Input.empty();
        this.ruleGroupOverrides = Input.empty();
        this.ruleSetAction = Input.empty();
        this.ruleSetType = Input.empty();
        this.ruleSetVersion = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontDoorManagedRuleSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<ManagedRuleExclusionArgs>> exclusions;
        private @Nullable Input<List<FrontDoorManagedRuleGroupOverrideArgs>> ruleGroupOverrides;
        private @Nullable Input<Either<String,ManagedRuleSetActionType>> ruleSetAction;
        private Input<String> ruleSetType;
        private Input<String> ruleSetVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(FrontDoorManagedRuleSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exclusions = defaults.exclusions;
    	      this.ruleGroupOverrides = defaults.ruleGroupOverrides;
    	      this.ruleSetAction = defaults.ruleSetAction;
    	      this.ruleSetType = defaults.ruleSetType;
    	      this.ruleSetVersion = defaults.ruleSetVersion;
        }

        public Builder setExclusions(@Nullable Input<List<ManagedRuleExclusionArgs>> exclusions) {
            this.exclusions = exclusions;
            return this;
        }

        public Builder setExclusions(@Nullable List<ManagedRuleExclusionArgs> exclusions) {
            this.exclusions = Input.ofNullable(exclusions);
            return this;
        }

        public Builder setRuleGroupOverrides(@Nullable Input<List<FrontDoorManagedRuleGroupOverrideArgs>> ruleGroupOverrides) {
            this.ruleGroupOverrides = ruleGroupOverrides;
            return this;
        }

        public Builder setRuleGroupOverrides(@Nullable List<FrontDoorManagedRuleGroupOverrideArgs> ruleGroupOverrides) {
            this.ruleGroupOverrides = Input.ofNullable(ruleGroupOverrides);
            return this;
        }

        public Builder setRuleSetAction(@Nullable Input<Either<String,ManagedRuleSetActionType>> ruleSetAction) {
            this.ruleSetAction = ruleSetAction;
            return this;
        }

        public Builder setRuleSetAction(@Nullable Either<String,ManagedRuleSetActionType> ruleSetAction) {
            this.ruleSetAction = Input.ofNullable(ruleSetAction);
            return this;
        }

        public Builder setRuleSetType(Input<String> ruleSetType) {
            this.ruleSetType = Objects.requireNonNull(ruleSetType);
            return this;
        }

        public Builder setRuleSetType(String ruleSetType) {
            this.ruleSetType = Input.of(Objects.requireNonNull(ruleSetType));
            return this;
        }

        public Builder setRuleSetVersion(Input<String> ruleSetVersion) {
            this.ruleSetVersion = Objects.requireNonNull(ruleSetVersion);
            return this;
        }

        public Builder setRuleSetVersion(String ruleSetVersion) {
            this.ruleSetVersion = Input.of(Objects.requireNonNull(ruleSetVersion));
            return this;
        }

        public FrontDoorManagedRuleSetArgs build() {
            return new FrontDoorManagedRuleSetArgs(exclusions, ruleGroupOverrides, ruleSetAction, ruleSetType, ruleSetVersion);
        }
    }
}
