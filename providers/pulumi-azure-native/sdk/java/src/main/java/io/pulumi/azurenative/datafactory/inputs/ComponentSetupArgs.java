// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.SecureStringArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The custom setup of installing 3rd party components.
 * 
 */
public final class ComponentSetupArgs extends io.pulumi.resources.ResourceArgs {

    public static final ComponentSetupArgs Empty = new ComponentSetupArgs();

    /**
     * The name of the 3rd party component.
     * 
     */
    @InputImport(name="componentName", required=true)
      private final Output<String> componentName;

    public Output<String> getComponentName() {
        return this.componentName;
    }

    /**
     * The license key to activate the component.
     * 
     */
    @InputImport(name="licenseKey")
      private final @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> licenseKey;

    public Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> getLicenseKey() {
        return this.licenseKey == null ? Output.empty() : this.licenseKey;
    }

    /**
     * The type of custom setup.
     * Expected value is 'ComponentSetup'.
     * 
     */
    @InputImport(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public ComponentSetupArgs(
        Output<String> componentName,
        @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> licenseKey,
        Output<String> type) {
        this.componentName = Objects.requireNonNull(componentName, "expected parameter 'componentName' to be non-null");
        this.licenseKey = licenseKey;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ComponentSetupArgs() {
        this.componentName = Output.empty();
        this.licenseKey = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ComponentSetupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> componentName;
        private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> licenseKey;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ComponentSetupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.componentName = defaults.componentName;
    	      this.licenseKey = defaults.licenseKey;
    	      this.type = defaults.type;
        }

        public Builder componentName(Output<String> componentName) {
            this.componentName = Objects.requireNonNull(componentName);
            return this;
        }

        public Builder componentName(String componentName) {
            this.componentName = Output.of(Objects.requireNonNull(componentName));
            return this;
        }

        public Builder licenseKey(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> licenseKey) {
            this.licenseKey = licenseKey;
            return this;
        }

        public Builder licenseKey(@Nullable Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> licenseKey) {
            this.licenseKey = Output.ofNullable(licenseKey);
            return this;
        }

        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public ComponentSetupArgs build() {
            return new ComponentSetupArgs(componentName, licenseKey, type);
        }
    }
}
