// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.cdn.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class LoadBalancingSettingsParametersResponse {
    /**
     * The additional latency in milliseconds for probes to fall into the lowest latency bucket
     * 
     */
    private final @Nullable Integer additionalLatencyInMilliseconds;
    /**
     * The number of samples to consider for load balancing decisions
     * 
     */
    private final @Nullable Integer sampleSize;
    /**
     * The number of samples within the sample period that must succeed
     * 
     */
    private final @Nullable Integer successfulSamplesRequired;

    @OutputCustomType.Constructor
    private LoadBalancingSettingsParametersResponse(
        @OutputCustomType.Parameter("additionalLatencyInMilliseconds") @Nullable Integer additionalLatencyInMilliseconds,
        @OutputCustomType.Parameter("sampleSize") @Nullable Integer sampleSize,
        @OutputCustomType.Parameter("successfulSamplesRequired") @Nullable Integer successfulSamplesRequired) {
        this.additionalLatencyInMilliseconds = additionalLatencyInMilliseconds;
        this.sampleSize = sampleSize;
        this.successfulSamplesRequired = successfulSamplesRequired;
    }

    /**
     * The additional latency in milliseconds for probes to fall into the lowest latency bucket
     * 
    */
    public Optional<Integer> getAdditionalLatencyInMilliseconds() {
        return Optional.ofNullable(this.additionalLatencyInMilliseconds);
    }
    /**
     * The number of samples to consider for load balancing decisions
     * 
    */
    public Optional<Integer> getSampleSize() {
        return Optional.ofNullable(this.sampleSize);
    }
    /**
     * The number of samples within the sample period that must succeed
     * 
    */
    public Optional<Integer> getSuccessfulSamplesRequired() {
        return Optional.ofNullable(this.successfulSamplesRequired);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancingSettingsParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer additionalLatencyInMilliseconds;
        private @Nullable Integer sampleSize;
        private @Nullable Integer successfulSamplesRequired;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancingSettingsParametersResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalLatencyInMilliseconds = defaults.additionalLatencyInMilliseconds;
    	      this.sampleSize = defaults.sampleSize;
    	      this.successfulSamplesRequired = defaults.successfulSamplesRequired;
        }

        public Builder setAdditionalLatencyInMilliseconds(@Nullable Integer additionalLatencyInMilliseconds) {
            this.additionalLatencyInMilliseconds = additionalLatencyInMilliseconds;
            return this;
        }

        public Builder setSampleSize(@Nullable Integer sampleSize) {
            this.sampleSize = sampleSize;
            return this;
        }

        public Builder setSuccessfulSamplesRequired(@Nullable Integer successfulSamplesRequired) {
            this.successfulSamplesRequired = successfulSamplesRequired;
            return this;
        }
        public LoadBalancingSettingsParametersResponse build() {
            return new LoadBalancingSettingsParametersResponse(additionalLatencyInMilliseconds, sampleSize, successfulSamplesRequired);
        }
    }
}
