// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.azurenative.compute.inputs.ManagedDiskParametersResponse;
import io.pulumi.azurenative.compute.inputs.VirtualHardDiskResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a data disk.
 * 
 */
public final class DataDiskResponse extends io.pulumi.resources.InvokeArgs {

    public static final DataDiskResponse Empty = new DataDiskResponse();

    /**
     * Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
     * 
     */
    @Import(name="caching")
      private final @Nullable String caching;

    public Optional<String> getCaching() {
        return this.caching == null ? Optional.empty() : Optional.ofNullable(this.caching);
    }

    /**
     * Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
     * 
     */
    @Import(name="createOption", required=true)
      private final String createOption;

    public String getCreateOption() {
        return this.createOption;
    }

    /**
     * Specifies whether data disk should be deleted or detached upon VM deletion.<br><br> Possible values: <br><br> **Delete** If this value is used, the data disk is deleted when VM is deleted.<br><br> **Detach** If this value is used, the data disk is retained after VM is deleted.<br><br> The default value is set to **detach**
     * 
     */
    @Import(name="deleteOption")
      private final @Nullable String deleteOption;

    public Optional<String> getDeleteOption() {
        return this.deleteOption == null ? Optional.empty() : Optional.ofNullable(this.deleteOption);
    }

    /**
     * Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach**. <br><br> detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. <br><br> This feature is still in preview mode and is not supported for VirtualMachineScaleSet. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'.
     * 
     */
    @Import(name="detachOption")
      private final @Nullable String detachOption;

    public Optional<String> getDetachOption() {
        return this.detachOption == null ? Optional.empty() : Optional.ofNullable(this.detachOption);
    }

    /**
     * Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
     * 
     */
    @Import(name="diskIOPSReadWrite", required=true)
      private final Double diskIOPSReadWrite;

    public Double getDiskIOPSReadWrite() {
        return this.diskIOPSReadWrite;
    }

    /**
     * Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
     * 
     */
    @Import(name="diskMBpsReadWrite", required=true)
      private final Double diskMBpsReadWrite;

    public Double getDiskMBpsReadWrite() {
        return this.diskMBpsReadWrite;
    }

    /**
     * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
     * 
     */
    @Import(name="diskSizeGB")
      private final @Nullable Integer diskSizeGB;

    public Optional<Integer> getDiskSizeGB() {
        return this.diskSizeGB == null ? Optional.empty() : Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
     * 
     */
    @Import(name="image")
      private final @Nullable VirtualHardDiskResponse image;

    public Optional<VirtualHardDiskResponse> getImage() {
        return this.image == null ? Optional.empty() : Optional.ofNullable(this.image);
    }

    /**
     * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
     * 
     */
    @Import(name="lun", required=true)
      private final Integer lun;

    public Integer getLun() {
        return this.lun;
    }

    /**
     * The managed disk parameters.
     * 
     */
    @Import(name="managedDisk")
      private final @Nullable ManagedDiskParametersResponse managedDisk;

    public Optional<ManagedDiskParametersResponse> getManagedDisk() {
        return this.managedDisk == null ? Optional.empty() : Optional.ofNullable(this.managedDisk);
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="name")
      private final @Nullable String name;

    public Optional<String> getName() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
     * 
     */
    @Import(name="toBeDetached")
      private final @Nullable Boolean toBeDetached;

    public Optional<Boolean> getToBeDetached() {
        return this.toBeDetached == null ? Optional.empty() : Optional.ofNullable(this.toBeDetached);
    }

    /**
     * The virtual hard disk.
     * 
     */
    @Import(name="vhd")
      private final @Nullable VirtualHardDiskResponse vhd;

    public Optional<VirtualHardDiskResponse> getVhd() {
        return this.vhd == null ? Optional.empty() : Optional.ofNullable(this.vhd);
    }

    /**
     * Specifies whether writeAccelerator should be enabled or disabled on the disk.
     * 
     */
    @Import(name="writeAcceleratorEnabled")
      private final @Nullable Boolean writeAcceleratorEnabled;

    public Optional<Boolean> getWriteAcceleratorEnabled() {
        return this.writeAcceleratorEnabled == null ? Optional.empty() : Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    public DataDiskResponse(
        @Nullable String caching,
        String createOption,
        @Nullable String deleteOption,
        @Nullable String detachOption,
        Double diskIOPSReadWrite,
        Double diskMBpsReadWrite,
        @Nullable Integer diskSizeGB,
        @Nullable VirtualHardDiskResponse image,
        Integer lun,
        @Nullable ManagedDiskParametersResponse managedDisk,
        @Nullable String name,
        @Nullable Boolean toBeDetached,
        @Nullable VirtualHardDiskResponse vhd,
        @Nullable Boolean writeAcceleratorEnabled) {
        this.caching = caching;
        this.createOption = Objects.requireNonNull(createOption, "expected parameter 'createOption' to be non-null");
        this.deleteOption = deleteOption;
        this.detachOption = detachOption;
        this.diskIOPSReadWrite = Objects.requireNonNull(diskIOPSReadWrite, "expected parameter 'diskIOPSReadWrite' to be non-null");
        this.diskMBpsReadWrite = Objects.requireNonNull(diskMBpsReadWrite, "expected parameter 'diskMBpsReadWrite' to be non-null");
        this.diskSizeGB = diskSizeGB;
        this.image = image;
        this.lun = Objects.requireNonNull(lun, "expected parameter 'lun' to be non-null");
        this.managedDisk = managedDisk;
        this.name = name;
        this.toBeDetached = toBeDetached;
        this.vhd = vhd;
        this.writeAcceleratorEnabled = writeAcceleratorEnabled;
    }

    private DataDiskResponse() {
        this.caching = null;
        this.createOption = null;
        this.deleteOption = null;
        this.detachOption = null;
        this.diskIOPSReadWrite = null;
        this.diskMBpsReadWrite = null;
        this.diskSizeGB = null;
        this.image = null;
        this.lun = null;
        this.managedDisk = null;
        this.name = null;
        this.toBeDetached = null;
        this.vhd = null;
        this.writeAcceleratorEnabled = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataDiskResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String caching;
        private String createOption;
        private @Nullable String deleteOption;
        private @Nullable String detachOption;
        private Double diskIOPSReadWrite;
        private Double diskMBpsReadWrite;
        private @Nullable Integer diskSizeGB;
        private @Nullable VirtualHardDiskResponse image;
        private Integer lun;
        private @Nullable ManagedDiskParametersResponse managedDisk;
        private @Nullable String name;
        private @Nullable Boolean toBeDetached;
        private @Nullable VirtualHardDiskResponse vhd;
        private @Nullable Boolean writeAcceleratorEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(DataDiskResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.createOption = defaults.createOption;
    	      this.deleteOption = defaults.deleteOption;
    	      this.detachOption = defaults.detachOption;
    	      this.diskIOPSReadWrite = defaults.diskIOPSReadWrite;
    	      this.diskMBpsReadWrite = defaults.diskMBpsReadWrite;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.image = defaults.image;
    	      this.lun = defaults.lun;
    	      this.managedDisk = defaults.managedDisk;
    	      this.name = defaults.name;
    	      this.toBeDetached = defaults.toBeDetached;
    	      this.vhd = defaults.vhd;
    	      this.writeAcceleratorEnabled = defaults.writeAcceleratorEnabled;
        }

        public Builder caching(@Nullable String caching) {
            this.caching = caching;
            return this;
        }
        public Builder createOption(String createOption) {
            this.createOption = Objects.requireNonNull(createOption);
            return this;
        }
        public Builder deleteOption(@Nullable String deleteOption) {
            this.deleteOption = deleteOption;
            return this;
        }
        public Builder detachOption(@Nullable String detachOption) {
            this.detachOption = detachOption;
            return this;
        }
        public Builder diskIOPSReadWrite(Double diskIOPSReadWrite) {
            this.diskIOPSReadWrite = Objects.requireNonNull(diskIOPSReadWrite);
            return this;
        }
        public Builder diskMBpsReadWrite(Double diskMBpsReadWrite) {
            this.diskMBpsReadWrite = Objects.requireNonNull(diskMBpsReadWrite);
            return this;
        }
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        public Builder image(@Nullable VirtualHardDiskResponse image) {
            this.image = image;
            return this;
        }
        public Builder lun(Integer lun) {
            this.lun = Objects.requireNonNull(lun);
            return this;
        }
        public Builder managedDisk(@Nullable ManagedDiskParametersResponse managedDisk) {
            this.managedDisk = managedDisk;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder toBeDetached(@Nullable Boolean toBeDetached) {
            this.toBeDetached = toBeDetached;
            return this;
        }
        public Builder vhd(@Nullable VirtualHardDiskResponse vhd) {
            this.vhd = vhd;
            return this;
        }
        public Builder writeAcceleratorEnabled(@Nullable Boolean writeAcceleratorEnabled) {
            this.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }        public DataDiskResponse build() {
            return new DataDiskResponse(caching, createOption, deleteOption, detachOption, diskIOPSReadWrite, diskMBpsReadWrite, diskSizeGB, image, lun, managedDisk, name, toBeDetached, vhd, writeAcceleratorEnabled);
        }
    }
}
