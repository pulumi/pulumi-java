// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.azurenative.compute.inputs.ManagedDiskParametersResponse;
import io.pulumi.azurenative.compute.inputs.VirtualHardDiskResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataDiskResponse extends io.pulumi.resources.InvokeArgs {

    public static final DataDiskResponse Empty = new DataDiskResponse();

    @InputImport(name="caching")
    private final @Nullable String caching;

    public Optional<String> getCaching() {
        return this.caching == null ? Optional.empty() : Optional.ofNullable(this.caching);
    }

    @InputImport(name="createOption", required=true)
    private final String createOption;

    public String getCreateOption() {
        return this.createOption;
    }

    @InputImport(name="deleteOption")
    private final @Nullable String deleteOption;

    public Optional<String> getDeleteOption() {
        return this.deleteOption == null ? Optional.empty() : Optional.ofNullable(this.deleteOption);
    }

    @InputImport(name="detachOption")
    private final @Nullable String detachOption;

    public Optional<String> getDetachOption() {
        return this.detachOption == null ? Optional.empty() : Optional.ofNullable(this.detachOption);
    }

    @InputImport(name="diskIOPSReadWrite", required=true)
    private final Double diskIOPSReadWrite;

    public Double getDiskIOPSReadWrite() {
        return this.diskIOPSReadWrite;
    }

    @InputImport(name="diskMBpsReadWrite", required=true)
    private final Double diskMBpsReadWrite;

    public Double getDiskMBpsReadWrite() {
        return this.diskMBpsReadWrite;
    }

    @InputImport(name="diskSizeGB")
    private final @Nullable Integer diskSizeGB;

    public Optional<Integer> getDiskSizeGB() {
        return this.diskSizeGB == null ? Optional.empty() : Optional.ofNullable(this.diskSizeGB);
    }

    @InputImport(name="image")
    private final @Nullable VirtualHardDiskResponse image;

    public Optional<VirtualHardDiskResponse> getImage() {
        return this.image == null ? Optional.empty() : Optional.ofNullable(this.image);
    }

    @InputImport(name="lun", required=true)
    private final Integer lun;

    public Integer getLun() {
        return this.lun;
    }

    @InputImport(name="managedDisk")
    private final @Nullable ManagedDiskParametersResponse managedDisk;

    public Optional<ManagedDiskParametersResponse> getManagedDisk() {
        return this.managedDisk == null ? Optional.empty() : Optional.ofNullable(this.managedDisk);
    }

    @InputImport(name="name")
    private final @Nullable String name;

    public Optional<String> getName() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    @InputImport(name="toBeDetached")
    private final @Nullable Boolean toBeDetached;

    public Optional<Boolean> getToBeDetached() {
        return this.toBeDetached == null ? Optional.empty() : Optional.ofNullable(this.toBeDetached);
    }

    @InputImport(name="vhd")
    private final @Nullable VirtualHardDiskResponse vhd;

    public Optional<VirtualHardDiskResponse> getVhd() {
        return this.vhd == null ? Optional.empty() : Optional.ofNullable(this.vhd);
    }

    @InputImport(name="writeAcceleratorEnabled")
    private final @Nullable Boolean writeAcceleratorEnabled;

    public Optional<Boolean> getWriteAcceleratorEnabled() {
        return this.writeAcceleratorEnabled == null ? Optional.empty() : Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    public DataDiskResponse(
        @Nullable String caching,
        String createOption,
        @Nullable String deleteOption,
        @Nullable String detachOption,
        Double diskIOPSReadWrite,
        Double diskMBpsReadWrite,
        @Nullable Integer diskSizeGB,
        @Nullable VirtualHardDiskResponse image,
        Integer lun,
        @Nullable ManagedDiskParametersResponse managedDisk,
        @Nullable String name,
        @Nullable Boolean toBeDetached,
        @Nullable VirtualHardDiskResponse vhd,
        @Nullable Boolean writeAcceleratorEnabled) {
        this.caching = caching;
        this.createOption = Objects.requireNonNull(createOption, "expected parameter 'createOption' to be non-null");
        this.deleteOption = deleteOption;
        this.detachOption = detachOption;
        this.diskIOPSReadWrite = Objects.requireNonNull(diskIOPSReadWrite, "expected parameter 'diskIOPSReadWrite' to be non-null");
        this.diskMBpsReadWrite = Objects.requireNonNull(diskMBpsReadWrite, "expected parameter 'diskMBpsReadWrite' to be non-null");
        this.diskSizeGB = diskSizeGB;
        this.image = image;
        this.lun = Objects.requireNonNull(lun, "expected parameter 'lun' to be non-null");
        this.managedDisk = managedDisk;
        this.name = name;
        this.toBeDetached = toBeDetached;
        this.vhd = vhd;
        this.writeAcceleratorEnabled = writeAcceleratorEnabled;
    }

    private DataDiskResponse() {
        this.caching = null;
        this.createOption = null;
        this.deleteOption = null;
        this.detachOption = null;
        this.diskIOPSReadWrite = null;
        this.diskMBpsReadWrite = null;
        this.diskSizeGB = null;
        this.image = null;
        this.lun = null;
        this.managedDisk = null;
        this.name = null;
        this.toBeDetached = null;
        this.vhd = null;
        this.writeAcceleratorEnabled = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataDiskResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String caching;
        private String createOption;
        private @Nullable String deleteOption;
        private @Nullable String detachOption;
        private Double diskIOPSReadWrite;
        private Double diskMBpsReadWrite;
        private @Nullable Integer diskSizeGB;
        private @Nullable VirtualHardDiskResponse image;
        private Integer lun;
        private @Nullable ManagedDiskParametersResponse managedDisk;
        private @Nullable String name;
        private @Nullable Boolean toBeDetached;
        private @Nullable VirtualHardDiskResponse vhd;
        private @Nullable Boolean writeAcceleratorEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(DataDiskResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.createOption = defaults.createOption;
    	      this.deleteOption = defaults.deleteOption;
    	      this.detachOption = defaults.detachOption;
    	      this.diskIOPSReadWrite = defaults.diskIOPSReadWrite;
    	      this.diskMBpsReadWrite = defaults.diskMBpsReadWrite;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.image = defaults.image;
    	      this.lun = defaults.lun;
    	      this.managedDisk = defaults.managedDisk;
    	      this.name = defaults.name;
    	      this.toBeDetached = defaults.toBeDetached;
    	      this.vhd = defaults.vhd;
    	      this.writeAcceleratorEnabled = defaults.writeAcceleratorEnabled;
        }

        public Builder setCaching(@Nullable String caching) {
            this.caching = caching;
            return this;
        }

        public Builder setCreateOption(String createOption) {
            this.createOption = Objects.requireNonNull(createOption);
            return this;
        }

        public Builder setDeleteOption(@Nullable String deleteOption) {
            this.deleteOption = deleteOption;
            return this;
        }

        public Builder setDetachOption(@Nullable String detachOption) {
            this.detachOption = detachOption;
            return this;
        }

        public Builder setDiskIOPSReadWrite(Double diskIOPSReadWrite) {
            this.diskIOPSReadWrite = Objects.requireNonNull(diskIOPSReadWrite);
            return this;
        }

        public Builder setDiskMBpsReadWrite(Double diskMBpsReadWrite) {
            this.diskMBpsReadWrite = Objects.requireNonNull(diskMBpsReadWrite);
            return this;
        }

        public Builder setDiskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder setImage(@Nullable VirtualHardDiskResponse image) {
            this.image = image;
            return this;
        }

        public Builder setLun(Integer lun) {
            this.lun = Objects.requireNonNull(lun);
            return this;
        }

        public Builder setManagedDisk(@Nullable ManagedDiskParametersResponse managedDisk) {
            this.managedDisk = managedDisk;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setToBeDetached(@Nullable Boolean toBeDetached) {
            this.toBeDetached = toBeDetached;
            return this;
        }

        public Builder setVhd(@Nullable VirtualHardDiskResponse vhd) {
            this.vhd = vhd;
            return this;
        }

        public Builder setWriteAcceleratorEnabled(@Nullable Boolean writeAcceleratorEnabled) {
            this.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }

        public DataDiskResponse build() {
            return new DataDiskResponse(caching, createOption, deleteOption, detachOption, diskIOPSReadWrite, diskMBpsReadWrite, diskSizeGB, image, lun, managedDisk, name, toBeDetached, vhd, writeAcceleratorEnabled);
        }
    }
}
