// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearning.inputs;

import io.pulumi.azurenative.machinelearning.enums.ColumnFormat;
import io.pulumi.azurenative.machinelearning.enums.ColumnType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Swagger 2.0 schema for a column within the data table representing a web service input or output. See Swagger specification: http://swagger.io/specification/
 * 
 */
public final class ColumnSpecificationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ColumnSpecificationArgs Empty = new ColumnSpecificationArgs();

    /**
     * If the data type is categorical, this provides the list of accepted categories.
     * 
     */
    @InputImport(name="enum")
      private final @Nullable Output<List<Object>> $enum;

    public Output<List<Object>> get$enum() {
        return this.$enum == null ? Output.empty() : this.$enum;
    }

    /**
     * Additional format information for the data type.
     * 
     */
    @InputImport(name="format")
      private final @Nullable Output<Either<String,ColumnFormat>> format;

    public Output<Either<String,ColumnFormat>> getFormat() {
        return this.format == null ? Output.empty() : this.format;
    }

    /**
     * Data type of the column.
     * 
     */
    @InputImport(name="type", required=true)
      private final Output<Either<String,ColumnType>> type;

    public Output<Either<String,ColumnType>> getType() {
        return this.type;
    }

    /**
     * Flag indicating if the type supports null values or not.
     * 
     */
    @InputImport(name="xMsIsnullable")
      private final @Nullable Output<Boolean> xMsIsnullable;

    public Output<Boolean> getXMsIsnullable() {
        return this.xMsIsnullable == null ? Output.empty() : this.xMsIsnullable;
    }

    /**
     * Flag indicating whether the categories are treated as an ordered set or not, if this is a categorical column.
     * 
     */
    @InputImport(name="xMsIsordered")
      private final @Nullable Output<Boolean> xMsIsordered;

    public Output<Boolean> getXMsIsordered() {
        return this.xMsIsordered == null ? Output.empty() : this.xMsIsordered;
    }

    public ColumnSpecificationArgs(
        @Nullable Output<List<Object>> $enum,
        @Nullable Output<Either<String,ColumnFormat>> format,
        Output<Either<String,ColumnType>> type,
        @Nullable Output<Boolean> xMsIsnullable,
        @Nullable Output<Boolean> xMsIsordered) {
        this.$enum = $enum;
        this.format = format;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.xMsIsnullable = xMsIsnullable;
        this.xMsIsordered = xMsIsordered;
    }

    private ColumnSpecificationArgs() {
        this.$enum = Output.empty();
        this.format = Output.empty();
        this.type = Output.empty();
        this.xMsIsnullable = Output.empty();
        this.xMsIsordered = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ColumnSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Object>> $enum;
        private @Nullable Output<Either<String,ColumnFormat>> format;
        private Output<Either<String,ColumnType>> type;
        private @Nullable Output<Boolean> xMsIsnullable;
        private @Nullable Output<Boolean> xMsIsordered;

        public Builder() {
    	      // Empty
        }

        public Builder(ColumnSpecificationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.$enum = defaults.$enum;
    	      this.format = defaults.format;
    	      this.type = defaults.type;
    	      this.xMsIsnullable = defaults.xMsIsnullable;
    	      this.xMsIsordered = defaults.xMsIsordered;
        }

        public Builder $enum(@Nullable Output<List<Object>> $enum) {
            this.$enum = $enum;
            return this;
        }

        public Builder $enum(@Nullable List<Object> $enum) {
            this.$enum = Output.ofNullable($enum);
            return this;
        }

        public Builder format(@Nullable Output<Either<String,ColumnFormat>> format) {
            this.format = format;
            return this;
        }

        public Builder format(@Nullable Either<String,ColumnFormat> format) {
            this.format = Output.ofNullable(format);
            return this;
        }

        public Builder type(Output<Either<String,ColumnType>> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(Either<String,ColumnType> type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder xMsIsnullable(@Nullable Output<Boolean> xMsIsnullable) {
            this.xMsIsnullable = xMsIsnullable;
            return this;
        }

        public Builder xMsIsnullable(@Nullable Boolean xMsIsnullable) {
            this.xMsIsnullable = Output.ofNullable(xMsIsnullable);
            return this;
        }

        public Builder xMsIsordered(@Nullable Output<Boolean> xMsIsordered) {
            this.xMsIsordered = xMsIsordered;
            return this;
        }

        public Builder xMsIsordered(@Nullable Boolean xMsIsordered) {
            this.xMsIsordered = Output.ofNullable(xMsIsordered);
            return this;
        }
        public ColumnSpecificationArgs build() {
            return new ColumnSpecificationArgs($enum, format, type, xMsIsnullable, xMsIsordered);
        }
    }
}
