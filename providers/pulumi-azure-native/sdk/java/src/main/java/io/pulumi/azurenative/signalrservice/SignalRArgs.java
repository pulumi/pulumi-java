// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.signalrservice;

import io.pulumi.azurenative.signalrservice.enums.ServiceKind;
import io.pulumi.azurenative.signalrservice.inputs.ResourceSkuArgs;
import io.pulumi.azurenative.signalrservice.inputs.ServerlessUpstreamSettingsArgs;
import io.pulumi.azurenative.signalrservice.inputs.SignalRCorsSettingsArgs;
import io.pulumi.azurenative.signalrservice.inputs.SignalRFeatureArgs;
import io.pulumi.azurenative.signalrservice.inputs.SignalRNetworkACLsArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SignalRArgs extends io.pulumi.resources.ResourceArgs {

    public static final SignalRArgs Empty = new SignalRArgs();

    /**
     * Cross-Origin Resource Sharing (CORS) settings.
     * 
     */
    @InputImport(name="cors")
      private final @Nullable Output<SignalRCorsSettingsArgs> cors;

    public Output<SignalRCorsSettingsArgs> getCors() {
        return this.cors == null ? Output.empty() : this.cors;
    }

    /**
     * List of SignalR featureFlags. e.g. ServiceMode.
     * 
     * FeatureFlags that are not included in the parameters for the update operation will not be modified.
     * And the response will only include featureFlags that are explicitly set.
     * When a featureFlag is not explicitly set, SignalR service will use its globally default value.
     * But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
     * 
     */
    @InputImport(name="features")
      private final @Nullable Output<List<SignalRFeatureArgs>> features;

    public Output<List<SignalRFeatureArgs>> getFeatures() {
        return this.features == null ? Output.empty() : this.features;
    }

    /**
     * The kind of the service - e.g. "SignalR", or "RawWebSockets" for "Microsoft.SignalRService/SignalR"
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Output<Either<String,ServiceKind>> kind;

    public Output<Either<String,ServiceKind>> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * The GEO location of the SignalR service. e.g. West US | East US | North Central US | South Central US.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Network ACLs
     * 
     */
    @InputImport(name="networkACLs")
      private final @Nullable Output<SignalRNetworkACLsArgs> networkACLs;

    public Output<SignalRNetworkACLsArgs> getNetworkACLs() {
        return this.networkACLs == null ? Output.empty() : this.networkACLs;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the SignalR resource.
     * 
     */
    @InputImport(name="resourceName")
      private final @Nullable Output<String> resourceName;

    public Output<String> getPropResourceName() {
        return this.resourceName == null ? Output.empty() : this.resourceName;
    }

    /**
     * The billing information of the resource.(e.g. Free, Standard)
     * 
     */
    @InputImport(name="sku")
      private final @Nullable Output<ResourceSkuArgs> sku;

    public Output<ResourceSkuArgs> getSku() {
        return this.sku == null ? Output.empty() : this.sku;
    }

    /**
     * Tags of the service which is a list of key value pairs that describe the resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Upstream settings when the Azure SignalR is in server-less mode.
     * 
     */
    @InputImport(name="upstream")
      private final @Nullable Output<ServerlessUpstreamSettingsArgs> upstream;

    public Output<ServerlessUpstreamSettingsArgs> getUpstream() {
        return this.upstream == null ? Output.empty() : this.upstream;
    }

    public SignalRArgs(
        @Nullable Output<SignalRCorsSettingsArgs> cors,
        @Nullable Output<List<SignalRFeatureArgs>> features,
        @Nullable Output<Either<String,ServiceKind>> kind,
        @Nullable Output<String> location,
        @Nullable Output<SignalRNetworkACLsArgs> networkACLs,
        Output<String> resourceGroupName,
        @Nullable Output<String> resourceName,
        @Nullable Output<ResourceSkuArgs> sku,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<ServerlessUpstreamSettingsArgs> upstream) {
        this.cors = cors;
        this.features = features;
        this.kind = kind;
        this.location = location;
        this.networkACLs = networkACLs;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceName = resourceName;
        this.sku = sku;
        this.tags = tags;
        this.upstream = upstream;
    }

    private SignalRArgs() {
        this.cors = Output.empty();
        this.features = Output.empty();
        this.kind = Output.empty();
        this.location = Output.empty();
        this.networkACLs = Output.empty();
        this.resourceGroupName = Output.empty();
        this.resourceName = Output.empty();
        this.sku = Output.empty();
        this.tags = Output.empty();
        this.upstream = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SignalRArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<SignalRCorsSettingsArgs> cors;
        private @Nullable Output<List<SignalRFeatureArgs>> features;
        private @Nullable Output<Either<String,ServiceKind>> kind;
        private @Nullable Output<String> location;
        private @Nullable Output<SignalRNetworkACLsArgs> networkACLs;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> resourceName;
        private @Nullable Output<ResourceSkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<ServerlessUpstreamSettingsArgs> upstream;

        public Builder() {
    	      // Empty
        }

        public Builder(SignalRArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cors = defaults.cors;
    	      this.features = defaults.features;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.networkACLs = defaults.networkACLs;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceName = defaults.resourceName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.upstream = defaults.upstream;
        }

        public Builder cors(@Nullable Output<SignalRCorsSettingsArgs> cors) {
            this.cors = cors;
            return this;
        }

        public Builder cors(@Nullable SignalRCorsSettingsArgs cors) {
            this.cors = Output.ofNullable(cors);
            return this;
        }

        public Builder features(@Nullable Output<List<SignalRFeatureArgs>> features) {
            this.features = features;
            return this;
        }

        public Builder features(@Nullable List<SignalRFeatureArgs> features) {
            this.features = Output.ofNullable(features);
            return this;
        }

        public Builder kind(@Nullable Output<Either<String,ServiceKind>> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable Either<String,ServiceKind> kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder networkACLs(@Nullable Output<SignalRNetworkACLsArgs> networkACLs) {
            this.networkACLs = networkACLs;
            return this;
        }

        public Builder networkACLs(@Nullable SignalRNetworkACLsArgs networkACLs) {
            this.networkACLs = Output.ofNullable(networkACLs);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder resourceName(@Nullable Output<String> resourceName) {
            this.resourceName = resourceName;
            return this;
        }

        public Builder resourceName(@Nullable String resourceName) {
            this.resourceName = Output.ofNullable(resourceName);
            return this;
        }

        public Builder sku(@Nullable Output<ResourceSkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder sku(@Nullable ResourceSkuArgs sku) {
            this.sku = Output.ofNullable(sku);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder upstream(@Nullable Output<ServerlessUpstreamSettingsArgs> upstream) {
            this.upstream = upstream;
            return this;
        }

        public Builder upstream(@Nullable ServerlessUpstreamSettingsArgs upstream) {
            this.upstream = Output.ofNullable(upstream);
            return this;
        }
        public SignalRArgs build() {
            return new SignalRArgs(cors, features, kind, location, networkACLs, resourceGroupName, resourceName, sku, tags, upstream);
        }
    }
}
