// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import io.pulumi.azurenative.datafactory.inputs.ActivityPolicyArgs;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Data Lake Analytics U-SQL activity.
 * 
 */
public final class DataLakeAnalyticsUSQLActivityArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataLakeAnalyticsUSQLActivityArgs Empty = new DataLakeAnalyticsUSQLActivityArgs();

    /**
     * Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="compilationMode")
      private final @Nullable Input<Object> compilationMode;

    public Input<Object> getCompilationMode() {
        return this.compilationMode == null ? Input.empty() : this.compilationMode;
    }

    /**
     * The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
     * 
     */
    @InputImport(name="degreeOfParallelism")
      private final @Nullable Input<Object> degreeOfParallelism;

    public Input<Object> getDegreeOfParallelism() {
        return this.degreeOfParallelism == null ? Input.empty() : this.degreeOfParallelism;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @InputImport(name="dependsOn")
      private final @Nullable Input<List<ActivityDependencyArgs>> dependsOn;

    public Input<List<ActivityDependencyArgs>> getDependsOn() {
        return this.dependsOn == null ? Input.empty() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Linked service reference.
     * 
     */
    @InputImport(name="linkedServiceName")
      private final @Nullable Input<LinkedServiceReferenceArgs> linkedServiceName;

    public Input<LinkedServiceReferenceArgs> getLinkedServiceName() {
        return this.linkedServiceName == null ? Input.empty() : this.linkedServiceName;
    }

    /**
     * Activity name.
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * Parameters for U-SQL job request.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Input<Map<String,Object>> parameters;

    public Input<Map<String,Object>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * Activity policy.
     * 
     */
    @InputImport(name="policy")
      private final @Nullable Input<ActivityPolicyArgs> policy;

    public Input<ActivityPolicyArgs> getPolicy() {
        return this.policy == null ? Input.empty() : this.policy;
    }

    /**
     * Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
     * 
     */
    @InputImport(name="priority")
      private final @Nullable Input<Object> priority;

    public Input<Object> getPriority() {
        return this.priority == null ? Input.empty() : this.priority;
    }

    /**
     * Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="runtimeVersion")
      private final @Nullable Input<Object> runtimeVersion;

    public Input<Object> getRuntimeVersion() {
        return this.runtimeVersion == null ? Input.empty() : this.runtimeVersion;
    }

    /**
     * Script linked service reference.
     * 
     */
    @InputImport(name="scriptLinkedService", required=true)
      private final Input<LinkedServiceReferenceArgs> scriptLinkedService;

    public Input<LinkedServiceReferenceArgs> getScriptLinkedService() {
        return this.scriptLinkedService;
    }

    /**
     * Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="scriptPath", required=true)
      private final Input<Object> scriptPath;

    public Input<Object> getScriptPath() {
        return this.scriptPath;
    }

    /**
     * Type of activity.
     * Expected value is 'DataLakeAnalyticsU-SQL'.
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @InputImport(name="userProperties")
      private final @Nullable Input<List<UserPropertyArgs>> userProperties;

    public Input<List<UserPropertyArgs>> getUserProperties() {
        return this.userProperties == null ? Input.empty() : this.userProperties;
    }

    public DataLakeAnalyticsUSQLActivityArgs(
        @Nullable Input<Object> compilationMode,
        @Nullable Input<Object> degreeOfParallelism,
        @Nullable Input<List<ActivityDependencyArgs>> dependsOn,
        @Nullable Input<String> description,
        @Nullable Input<LinkedServiceReferenceArgs> linkedServiceName,
        Input<String> name,
        @Nullable Input<Map<String,Object>> parameters,
        @Nullable Input<ActivityPolicyArgs> policy,
        @Nullable Input<Object> priority,
        @Nullable Input<Object> runtimeVersion,
        Input<LinkedServiceReferenceArgs> scriptLinkedService,
        Input<Object> scriptPath,
        Input<String> type,
        @Nullable Input<List<UserPropertyArgs>> userProperties) {
        this.compilationMode = compilationMode;
        this.degreeOfParallelism = degreeOfParallelism;
        this.dependsOn = dependsOn;
        this.description = description;
        this.linkedServiceName = linkedServiceName;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.parameters = parameters;
        this.policy = policy;
        this.priority = priority;
        this.runtimeVersion = runtimeVersion;
        this.scriptLinkedService = Objects.requireNonNull(scriptLinkedService, "expected parameter 'scriptLinkedService' to be non-null");
        this.scriptPath = Objects.requireNonNull(scriptPath, "expected parameter 'scriptPath' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userProperties = userProperties;
    }

    private DataLakeAnalyticsUSQLActivityArgs() {
        this.compilationMode = Input.empty();
        this.degreeOfParallelism = Input.empty();
        this.dependsOn = Input.empty();
        this.description = Input.empty();
        this.linkedServiceName = Input.empty();
        this.name = Input.empty();
        this.parameters = Input.empty();
        this.policy = Input.empty();
        this.priority = Input.empty();
        this.runtimeVersion = Input.empty();
        this.scriptLinkedService = Input.empty();
        this.scriptPath = Input.empty();
        this.type = Input.empty();
        this.userProperties = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataLakeAnalyticsUSQLActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Object> compilationMode;
        private @Nullable Input<Object> degreeOfParallelism;
        private @Nullable Input<List<ActivityDependencyArgs>> dependsOn;
        private @Nullable Input<String> description;
        private @Nullable Input<LinkedServiceReferenceArgs> linkedServiceName;
        private Input<String> name;
        private @Nullable Input<Map<String,Object>> parameters;
        private @Nullable Input<ActivityPolicyArgs> policy;
        private @Nullable Input<Object> priority;
        private @Nullable Input<Object> runtimeVersion;
        private Input<LinkedServiceReferenceArgs> scriptLinkedService;
        private Input<Object> scriptPath;
        private Input<String> type;
        private @Nullable Input<List<UserPropertyArgs>> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(DataLakeAnalyticsUSQLActivityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compilationMode = defaults.compilationMode;
    	      this.degreeOfParallelism = defaults.degreeOfParallelism;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.policy = defaults.policy;
    	      this.priority = defaults.priority;
    	      this.runtimeVersion = defaults.runtimeVersion;
    	      this.scriptLinkedService = defaults.scriptLinkedService;
    	      this.scriptPath = defaults.scriptPath;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder compilationMode(@Nullable Input<Object> compilationMode) {
            this.compilationMode = compilationMode;
            return this;
        }

        public Builder compilationMode(@Nullable Object compilationMode) {
            this.compilationMode = Input.ofNullable(compilationMode);
            return this;
        }

        public Builder degreeOfParallelism(@Nullable Input<Object> degreeOfParallelism) {
            this.degreeOfParallelism = degreeOfParallelism;
            return this;
        }

        public Builder degreeOfParallelism(@Nullable Object degreeOfParallelism) {
            this.degreeOfParallelism = Input.ofNullable(degreeOfParallelism);
            return this;
        }

        public Builder dependsOn(@Nullable Input<List<ActivityDependencyArgs>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyArgs> dependsOn) {
            this.dependsOn = Input.ofNullable(dependsOn);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder linkedServiceName(@Nullable Input<LinkedServiceReferenceArgs> linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder linkedServiceName(@Nullable LinkedServiceReferenceArgs linkedServiceName) {
            this.linkedServiceName = Input.ofNullable(linkedServiceName);
            return this;
        }

        public Builder name(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder parameters(@Nullable Input<Map<String,Object>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Map<String,Object> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder policy(@Nullable Input<ActivityPolicyArgs> policy) {
            this.policy = policy;
            return this;
        }

        public Builder policy(@Nullable ActivityPolicyArgs policy) {
            this.policy = Input.ofNullable(policy);
            return this;
        }

        public Builder priority(@Nullable Input<Object> priority) {
            this.priority = priority;
            return this;
        }

        public Builder priority(@Nullable Object priority) {
            this.priority = Input.ofNullable(priority);
            return this;
        }

        public Builder runtimeVersion(@Nullable Input<Object> runtimeVersion) {
            this.runtimeVersion = runtimeVersion;
            return this;
        }

        public Builder runtimeVersion(@Nullable Object runtimeVersion) {
            this.runtimeVersion = Input.ofNullable(runtimeVersion);
            return this;
        }

        public Builder scriptLinkedService(Input<LinkedServiceReferenceArgs> scriptLinkedService) {
            this.scriptLinkedService = Objects.requireNonNull(scriptLinkedService);
            return this;
        }

        public Builder scriptLinkedService(LinkedServiceReferenceArgs scriptLinkedService) {
            this.scriptLinkedService = Input.of(Objects.requireNonNull(scriptLinkedService));
            return this;
        }

        public Builder scriptPath(Input<Object> scriptPath) {
            this.scriptPath = Objects.requireNonNull(scriptPath);
            return this;
        }

        public Builder scriptPath(Object scriptPath) {
            this.scriptPath = Input.of(Objects.requireNonNull(scriptPath));
            return this;
        }

        public Builder type(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder userProperties(@Nullable Input<List<UserPropertyArgs>> userProperties) {
            this.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(@Nullable List<UserPropertyArgs> userProperties) {
            this.userProperties = Input.ofNullable(userProperties);
            return this;
        }
        public DataLakeAnalyticsUSQLActivityArgs build() {
            return new DataLakeAnalyticsUSQLActivityArgs(compilationMode, degreeOfParallelism, dependsOn, description, linkedServiceName, name, parameters, policy, priority, runtimeVersion, scriptLinkedService, scriptPath, type, userProperties);
        }
    }
}
