// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.azurenative.insights.inputs.RecurrenceArgs;
import io.pulumi.azurenative.insights.inputs.ScaleCapacityArgs;
import io.pulumi.azurenative.insights.inputs.ScaleRuleArgs;
import io.pulumi.azurenative.insights.inputs.TimeWindowArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Autoscale profile.
 * 
 */
public final class AutoscaleProfileArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutoscaleProfileArgs Empty = new AutoscaleProfileArgs();

    /**
     * the number of instances that can be used during this profile.
     * 
     */
    @Import(name="capacity", required=true)
      private final Output<ScaleCapacityArgs> capacity;

    public Output<ScaleCapacityArgs> getCapacity() {
        return this.capacity;
    }

    /**
     * the specific date-time for the profile. This element is not used if the Recurrence element is used.
     * 
     */
    @Import(name="fixedDate")
      private final @Nullable Output<TimeWindowArgs> fixedDate;

    public Output<TimeWindowArgs> getFixedDate() {
        return this.fixedDate == null ? Codegen.empty() : this.fixedDate;
    }

    /**
     * the name of the profile.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
     * 
     */
    @Import(name="recurrence")
      private final @Nullable Output<RecurrenceArgs> recurrence;

    public Output<RecurrenceArgs> getRecurrence() {
        return this.recurrence == null ? Codegen.empty() : this.recurrence;
    }

    /**
     * the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
     * 
     */
    @Import(name="rules", required=true)
      private final Output<List<ScaleRuleArgs>> rules;

    public Output<List<ScaleRuleArgs>> getRules() {
        return this.rules;
    }

    public AutoscaleProfileArgs(
        Output<ScaleCapacityArgs> capacity,
        @Nullable Output<TimeWindowArgs> fixedDate,
        Output<String> name,
        @Nullable Output<RecurrenceArgs> recurrence,
        Output<List<ScaleRuleArgs>> rules) {
        this.capacity = Objects.requireNonNull(capacity, "expected parameter 'capacity' to be non-null");
        this.fixedDate = fixedDate;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.recurrence = recurrence;
        this.rules = Objects.requireNonNull(rules, "expected parameter 'rules' to be non-null");
    }

    private AutoscaleProfileArgs() {
        this.capacity = Codegen.empty();
        this.fixedDate = Codegen.empty();
        this.name = Codegen.empty();
        this.recurrence = Codegen.empty();
        this.rules = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoscaleProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ScaleCapacityArgs> capacity;
        private @Nullable Output<TimeWindowArgs> fixedDate;
        private Output<String> name;
        private @Nullable Output<RecurrenceArgs> recurrence;
        private Output<List<ScaleRuleArgs>> rules;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoscaleProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacity = defaults.capacity;
    	      this.fixedDate = defaults.fixedDate;
    	      this.name = defaults.name;
    	      this.recurrence = defaults.recurrence;
    	      this.rules = defaults.rules;
        }

        public Builder capacity(Output<ScaleCapacityArgs> capacity) {
            this.capacity = Objects.requireNonNull(capacity);
            return this;
        }
        public Builder capacity(ScaleCapacityArgs capacity) {
            this.capacity = Output.of(Objects.requireNonNull(capacity));
            return this;
        }
        public Builder fixedDate(@Nullable Output<TimeWindowArgs> fixedDate) {
            this.fixedDate = fixedDate;
            return this;
        }
        public Builder fixedDate(@Nullable TimeWindowArgs fixedDate) {
            this.fixedDate = Codegen.ofNullable(fixedDate);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder recurrence(@Nullable Output<RecurrenceArgs> recurrence) {
            this.recurrence = recurrence;
            return this;
        }
        public Builder recurrence(@Nullable RecurrenceArgs recurrence) {
            this.recurrence = Codegen.ofNullable(recurrence);
            return this;
        }
        public Builder rules(Output<List<ScaleRuleArgs>> rules) {
            this.rules = Objects.requireNonNull(rules);
            return this;
        }
        public Builder rules(List<ScaleRuleArgs> rules) {
            this.rules = Output.of(Objects.requireNonNull(rules));
            return this;
        }
        public Builder rules(ScaleRuleArgs... rules) {
            return rules(List.of(rules));
        }        public AutoscaleProfileArgs build() {
            return new AutoscaleProfileArgs(capacity, fixedDate, name, recurrence, rules);
        }
    }
}
