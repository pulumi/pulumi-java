// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.resources.inputs;

import io.pulumi.azurenative.resources.enums.DeploymentMode;
import io.pulumi.azurenative.resources.inputs.DebugSettingArgs;
import io.pulumi.azurenative.resources.inputs.ExpressionEvaluationOptionsArgs;
import io.pulumi.azurenative.resources.inputs.OnErrorDeploymentArgs;
import io.pulumi.azurenative.resources.inputs.ParametersLinkArgs;
import io.pulumi.azurenative.resources.inputs.TemplateLinkArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Deployment properties.
 * 
 */
public final class DeploymentPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeploymentPropertiesArgs Empty = new DeploymentPropertiesArgs();

    /**
     * The debug setting of the deployment.
     * 
     */
    @InputImport(name="debugSetting")
      private final @Nullable Output<DebugSettingArgs> debugSetting;

    public Output<DebugSettingArgs> getDebugSetting() {
        return this.debugSetting == null ? Output.empty() : this.debugSetting;
    }

    /**
     * Specifies whether template expressions are evaluated within the scope of the parent template or nested template. Only applicable to nested templates. If not specified, default value is outer.
     * 
     */
    @InputImport(name="expressionEvaluationOptions")
      private final @Nullable Output<ExpressionEvaluationOptionsArgs> expressionEvaluationOptions;

    public Output<ExpressionEvaluationOptionsArgs> getExpressionEvaluationOptions() {
        return this.expressionEvaluationOptions == null ? Output.empty() : this.expressionEvaluationOptions;
    }

    /**
     * The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
     * 
     */
    @InputImport(name="mode", required=true)
      private final Output<DeploymentMode> mode;

    public Output<DeploymentMode> getMode() {
        return this.mode;
    }

    /**
     * The deployment on error behavior.
     * 
     */
    @InputImport(name="onErrorDeployment")
      private final @Nullable Output<OnErrorDeploymentArgs> onErrorDeployment;

    public Output<OnErrorDeploymentArgs> getOnErrorDeployment() {
        return this.onErrorDeployment == null ? Output.empty() : this.onErrorDeployment;
    }

    /**
     * Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Output<Object> parameters;

    public Output<Object> getParameters() {
        return this.parameters == null ? Output.empty() : this.parameters;
    }

    /**
     * The URI of parameters file. You use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
     * 
     */
    @InputImport(name="parametersLink")
      private final @Nullable Output<ParametersLinkArgs> parametersLink;

    public Output<ParametersLinkArgs> getParametersLink() {
        return this.parametersLink == null ? Output.empty() : this.parametersLink;
    }

    /**
     * The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
     * 
     */
    @InputImport(name="template")
      private final @Nullable Output<Object> template;

    public Output<Object> getTemplate() {
        return this.template == null ? Output.empty() : this.template;
    }

    /**
     * The URI of the template. Use either the templateLink property or the template property, but not both.
     * 
     */
    @InputImport(name="templateLink")
      private final @Nullable Output<TemplateLinkArgs> templateLink;

    public Output<TemplateLinkArgs> getTemplateLink() {
        return this.templateLink == null ? Output.empty() : this.templateLink;
    }

    public DeploymentPropertiesArgs(
        @Nullable Output<DebugSettingArgs> debugSetting,
        @Nullable Output<ExpressionEvaluationOptionsArgs> expressionEvaluationOptions,
        Output<DeploymentMode> mode,
        @Nullable Output<OnErrorDeploymentArgs> onErrorDeployment,
        @Nullable Output<Object> parameters,
        @Nullable Output<ParametersLinkArgs> parametersLink,
        @Nullable Output<Object> template,
        @Nullable Output<TemplateLinkArgs> templateLink) {
        this.debugSetting = debugSetting;
        this.expressionEvaluationOptions = expressionEvaluationOptions;
        this.mode = Objects.requireNonNull(mode, "expected parameter 'mode' to be non-null");
        this.onErrorDeployment = onErrorDeployment;
        this.parameters = parameters;
        this.parametersLink = parametersLink;
        this.template = template;
        this.templateLink = templateLink;
    }

    private DeploymentPropertiesArgs() {
        this.debugSetting = Output.empty();
        this.expressionEvaluationOptions = Output.empty();
        this.mode = Output.empty();
        this.onErrorDeployment = Output.empty();
        this.parameters = Output.empty();
        this.parametersLink = Output.empty();
        this.template = Output.empty();
        this.templateLink = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DebugSettingArgs> debugSetting;
        private @Nullable Output<ExpressionEvaluationOptionsArgs> expressionEvaluationOptions;
        private Output<DeploymentMode> mode;
        private @Nullable Output<OnErrorDeploymentArgs> onErrorDeployment;
        private @Nullable Output<Object> parameters;
        private @Nullable Output<ParametersLinkArgs> parametersLink;
        private @Nullable Output<Object> template;
        private @Nullable Output<TemplateLinkArgs> templateLink;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.debugSetting = defaults.debugSetting;
    	      this.expressionEvaluationOptions = defaults.expressionEvaluationOptions;
    	      this.mode = defaults.mode;
    	      this.onErrorDeployment = defaults.onErrorDeployment;
    	      this.parameters = defaults.parameters;
    	      this.parametersLink = defaults.parametersLink;
    	      this.template = defaults.template;
    	      this.templateLink = defaults.templateLink;
        }

        public Builder debugSetting(@Nullable Output<DebugSettingArgs> debugSetting) {
            this.debugSetting = debugSetting;
            return this;
        }

        public Builder debugSetting(@Nullable DebugSettingArgs debugSetting) {
            this.debugSetting = Output.ofNullable(debugSetting);
            return this;
        }

        public Builder expressionEvaluationOptions(@Nullable Output<ExpressionEvaluationOptionsArgs> expressionEvaluationOptions) {
            this.expressionEvaluationOptions = expressionEvaluationOptions;
            return this;
        }

        public Builder expressionEvaluationOptions(@Nullable ExpressionEvaluationOptionsArgs expressionEvaluationOptions) {
            this.expressionEvaluationOptions = Output.ofNullable(expressionEvaluationOptions);
            return this;
        }

        public Builder mode(Output<DeploymentMode> mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }

        public Builder mode(DeploymentMode mode) {
            this.mode = Output.of(Objects.requireNonNull(mode));
            return this;
        }

        public Builder onErrorDeployment(@Nullable Output<OnErrorDeploymentArgs> onErrorDeployment) {
            this.onErrorDeployment = onErrorDeployment;
            return this;
        }

        public Builder onErrorDeployment(@Nullable OnErrorDeploymentArgs onErrorDeployment) {
            this.onErrorDeployment = Output.ofNullable(onErrorDeployment);
            return this;
        }

        public Builder parameters(@Nullable Output<Object> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Object parameters) {
            this.parameters = Output.ofNullable(parameters);
            return this;
        }

        public Builder parametersLink(@Nullable Output<ParametersLinkArgs> parametersLink) {
            this.parametersLink = parametersLink;
            return this;
        }

        public Builder parametersLink(@Nullable ParametersLinkArgs parametersLink) {
            this.parametersLink = Output.ofNullable(parametersLink);
            return this;
        }

        public Builder template(@Nullable Output<Object> template) {
            this.template = template;
            return this;
        }

        public Builder template(@Nullable Object template) {
            this.template = Output.ofNullable(template);
            return this;
        }

        public Builder templateLink(@Nullable Output<TemplateLinkArgs> templateLink) {
            this.templateLink = templateLink;
            return this;
        }

        public Builder templateLink(@Nullable TemplateLinkArgs templateLink) {
            this.templateLink = Output.ofNullable(templateLink);
            return this;
        }
        public DeploymentPropertiesArgs build() {
            return new DeploymentPropertiesArgs(debugSetting, expressionEvaluationOptions, mode, onErrorDeployment, parameters, parametersLink, template, templateLink);
        }
    }
}
