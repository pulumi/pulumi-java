// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.resources.inputs;

import io.pulumi.azurenative.resources.enums.DeploymentMode;
import io.pulumi.azurenative.resources.inputs.DebugSettingArgs;
import io.pulumi.azurenative.resources.inputs.ExpressionEvaluationOptionsArgs;
import io.pulumi.azurenative.resources.inputs.OnErrorDeploymentArgs;
import io.pulumi.azurenative.resources.inputs.ParametersLinkArgs;
import io.pulumi.azurenative.resources.inputs.TemplateLinkArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Object;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeploymentPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeploymentPropertiesArgs Empty = new DeploymentPropertiesArgs();

    @InputImport(name="debugSetting")
    private final @Nullable Input<DebugSettingArgs> debugSetting;

    public Input<DebugSettingArgs> getDebugSetting() {
        return this.debugSetting == null ? Input.empty() : this.debugSetting;
    }

    @InputImport(name="expressionEvaluationOptions")
    private final @Nullable Input<ExpressionEvaluationOptionsArgs> expressionEvaluationOptions;

    public Input<ExpressionEvaluationOptionsArgs> getExpressionEvaluationOptions() {
        return this.expressionEvaluationOptions == null ? Input.empty() : this.expressionEvaluationOptions;
    }

    @InputImport(name="mode", required=true)
    private final Input<DeploymentMode> mode;

    public Input<DeploymentMode> getMode() {
        return this.mode;
    }

    @InputImport(name="onErrorDeployment")
    private final @Nullable Input<OnErrorDeploymentArgs> onErrorDeployment;

    public Input<OnErrorDeploymentArgs> getOnErrorDeployment() {
        return this.onErrorDeployment == null ? Input.empty() : this.onErrorDeployment;
    }

    @InputImport(name="parameters")
    private final @Nullable Input<Object> parameters;

    public Input<Object> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    @InputImport(name="parametersLink")
    private final @Nullable Input<ParametersLinkArgs> parametersLink;

    public Input<ParametersLinkArgs> getParametersLink() {
        return this.parametersLink == null ? Input.empty() : this.parametersLink;
    }

    @InputImport(name="template")
    private final @Nullable Input<Object> template;

    public Input<Object> getTemplate() {
        return this.template == null ? Input.empty() : this.template;
    }

    @InputImport(name="templateLink")
    private final @Nullable Input<TemplateLinkArgs> templateLink;

    public Input<TemplateLinkArgs> getTemplateLink() {
        return this.templateLink == null ? Input.empty() : this.templateLink;
    }

    public DeploymentPropertiesArgs(
        @Nullable Input<DebugSettingArgs> debugSetting,
        @Nullable Input<ExpressionEvaluationOptionsArgs> expressionEvaluationOptions,
        Input<DeploymentMode> mode,
        @Nullable Input<OnErrorDeploymentArgs> onErrorDeployment,
        @Nullable Input<Object> parameters,
        @Nullable Input<ParametersLinkArgs> parametersLink,
        @Nullable Input<Object> template,
        @Nullable Input<TemplateLinkArgs> templateLink) {
        this.debugSetting = debugSetting;
        this.expressionEvaluationOptions = expressionEvaluationOptions;
        this.mode = Objects.requireNonNull(mode, "expected parameter 'mode' to be non-null");
        this.onErrorDeployment = onErrorDeployment;
        this.parameters = parameters;
        this.parametersLink = parametersLink;
        this.template = template;
        this.templateLink = templateLink;
    }

    private DeploymentPropertiesArgs() {
        this.debugSetting = Input.empty();
        this.expressionEvaluationOptions = Input.empty();
        this.mode = Input.empty();
        this.onErrorDeployment = Input.empty();
        this.parameters = Input.empty();
        this.parametersLink = Input.empty();
        this.template = Input.empty();
        this.templateLink = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<DebugSettingArgs> debugSetting;
        private @Nullable Input<ExpressionEvaluationOptionsArgs> expressionEvaluationOptions;
        private Input<DeploymentMode> mode;
        private @Nullable Input<OnErrorDeploymentArgs> onErrorDeployment;
        private @Nullable Input<Object> parameters;
        private @Nullable Input<ParametersLinkArgs> parametersLink;
        private @Nullable Input<Object> template;
        private @Nullable Input<TemplateLinkArgs> templateLink;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.debugSetting = defaults.debugSetting;
    	      this.expressionEvaluationOptions = defaults.expressionEvaluationOptions;
    	      this.mode = defaults.mode;
    	      this.onErrorDeployment = defaults.onErrorDeployment;
    	      this.parameters = defaults.parameters;
    	      this.parametersLink = defaults.parametersLink;
    	      this.template = defaults.template;
    	      this.templateLink = defaults.templateLink;
        }

        public Builder setDebugSetting(@Nullable Input<DebugSettingArgs> debugSetting) {
            this.debugSetting = debugSetting;
            return this;
        }

        public Builder setDebugSetting(@Nullable DebugSettingArgs debugSetting) {
            this.debugSetting = Input.ofNullable(debugSetting);
            return this;
        }

        public Builder setExpressionEvaluationOptions(@Nullable Input<ExpressionEvaluationOptionsArgs> expressionEvaluationOptions) {
            this.expressionEvaluationOptions = expressionEvaluationOptions;
            return this;
        }

        public Builder setExpressionEvaluationOptions(@Nullable ExpressionEvaluationOptionsArgs expressionEvaluationOptions) {
            this.expressionEvaluationOptions = Input.ofNullable(expressionEvaluationOptions);
            return this;
        }

        public Builder setMode(Input<DeploymentMode> mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }

        public Builder setMode(DeploymentMode mode) {
            this.mode = Input.of(Objects.requireNonNull(mode));
            return this;
        }

        public Builder setOnErrorDeployment(@Nullable Input<OnErrorDeploymentArgs> onErrorDeployment) {
            this.onErrorDeployment = onErrorDeployment;
            return this;
        }

        public Builder setOnErrorDeployment(@Nullable OnErrorDeploymentArgs onErrorDeployment) {
            this.onErrorDeployment = Input.ofNullable(onErrorDeployment);
            return this;
        }

        public Builder setParameters(@Nullable Input<Object> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setParameters(@Nullable Object parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder setParametersLink(@Nullable Input<ParametersLinkArgs> parametersLink) {
            this.parametersLink = parametersLink;
            return this;
        }

        public Builder setParametersLink(@Nullable ParametersLinkArgs parametersLink) {
            this.parametersLink = Input.ofNullable(parametersLink);
            return this;
        }

        public Builder setTemplate(@Nullable Input<Object> template) {
            this.template = template;
            return this;
        }

        public Builder setTemplate(@Nullable Object template) {
            this.template = Input.ofNullable(template);
            return this;
        }

        public Builder setTemplateLink(@Nullable Input<TemplateLinkArgs> templateLink) {
            this.templateLink = templateLink;
            return this;
        }

        public Builder setTemplateLink(@Nullable TemplateLinkArgs templateLink) {
            this.templateLink = Input.ofNullable(templateLink);
            return this;
        }

        public DeploymentPropertiesArgs build() {
            return new DeploymentPropertiesArgs(debugSetting, expressionEvaluationOptions, mode, onErrorDeployment, parameters, parametersLink, template, templateLink);
        }
    }
}
