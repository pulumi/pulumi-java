// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic;

import io.pulumi.azurenative.logic.enums.PartnerType;
import io.pulumi.azurenative.logic.inputs.PartnerContentArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IntegrationAccountPartnerArgs extends io.pulumi.resources.ResourceArgs {

    public static final IntegrationAccountPartnerArgs Empty = new IntegrationAccountPartnerArgs();

    /**
     * The partner content.
     * 
     */
    @InputImport(name="content", required=true)
      private final Input<PartnerContentArgs> content;

    public Input<PartnerContentArgs> getContent() {
        return this.content;
    }

    /**
     * The integration account name.
     * 
     */
    @InputImport(name="integrationAccountName", required=true)
      private final Input<String> integrationAccountName;

    public Input<String> getIntegrationAccountName() {
        return this.integrationAccountName;
    }

    /**
     * The resource location.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The metadata.
     * 
     */
    @InputImport(name="metadata")
      private final @Nullable Input<Object> metadata;

    public Input<Object> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    /**
     * The integration account partner name.
     * 
     */
    @InputImport(name="partnerName")
      private final @Nullable Input<String> partnerName;

    public Input<String> getPartnerName() {
        return this.partnerName == null ? Input.empty() : this.partnerName;
    }

    /**
     * The partner type.
     * 
     */
    @InputImport(name="partnerType", required=true)
      private final Input<Either<String,PartnerType>> partnerType;

    public Input<Either<String,PartnerType>> getPartnerType() {
        return this.partnerType;
    }

    /**
     * The resource group name.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public IntegrationAccountPartnerArgs(
        Input<PartnerContentArgs> content,
        Input<String> integrationAccountName,
        @Nullable Input<String> location,
        @Nullable Input<Object> metadata,
        @Nullable Input<String> partnerName,
        Input<Either<String,PartnerType>> partnerType,
        Input<String> resourceGroupName,
        @Nullable Input<Map<String,String>> tags) {
        this.content = Objects.requireNonNull(content, "expected parameter 'content' to be non-null");
        this.integrationAccountName = Objects.requireNonNull(integrationAccountName, "expected parameter 'integrationAccountName' to be non-null");
        this.location = location;
        this.metadata = metadata;
        this.partnerName = partnerName;
        this.partnerType = Objects.requireNonNull(partnerType, "expected parameter 'partnerType' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private IntegrationAccountPartnerArgs() {
        this.content = Input.empty();
        this.integrationAccountName = Input.empty();
        this.location = Input.empty();
        this.metadata = Input.empty();
        this.partnerName = Input.empty();
        this.partnerType = Input.empty();
        this.resourceGroupName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IntegrationAccountPartnerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<PartnerContentArgs> content;
        private Input<String> integrationAccountName;
        private @Nullable Input<String> location;
        private @Nullable Input<Object> metadata;
        private @Nullable Input<String> partnerName;
        private Input<Either<String,PartnerType>> partnerType;
        private Input<String> resourceGroupName;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(IntegrationAccountPartnerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.integrationAccountName = defaults.integrationAccountName;
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.partnerName = defaults.partnerName;
    	      this.partnerType = defaults.partnerType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder setContent(Input<PartnerContentArgs> content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }

        public Builder setContent(PartnerContentArgs content) {
            this.content = Input.of(Objects.requireNonNull(content));
            return this;
        }

        public Builder setIntegrationAccountName(Input<String> integrationAccountName) {
            this.integrationAccountName = Objects.requireNonNull(integrationAccountName);
            return this;
        }

        public Builder setIntegrationAccountName(String integrationAccountName) {
            this.integrationAccountName = Input.of(Objects.requireNonNull(integrationAccountName));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMetadata(@Nullable Input<Object> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setMetadata(@Nullable Object metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public Builder setPartnerName(@Nullable Input<String> partnerName) {
            this.partnerName = partnerName;
            return this;
        }

        public Builder setPartnerName(@Nullable String partnerName) {
            this.partnerName = Input.ofNullable(partnerName);
            return this;
        }

        public Builder setPartnerType(Input<Either<String,PartnerType>> partnerType) {
            this.partnerType = Objects.requireNonNull(partnerType);
            return this;
        }

        public Builder setPartnerType(Either<String,PartnerType> partnerType) {
            this.partnerType = Input.of(Objects.requireNonNull(partnerType));
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public IntegrationAccountPartnerArgs build() {
            return new IntegrationAccountPartnerArgs(content, integrationAccountName, location, metadata, partnerName, partnerType, resourceGroupName, tags);
        }
    }
}
