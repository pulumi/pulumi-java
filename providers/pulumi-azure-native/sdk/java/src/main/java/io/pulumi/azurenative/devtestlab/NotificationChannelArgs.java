// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab;

import io.pulumi.azurenative.devtestlab.inputs.EventArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NotificationChannelArgs extends io.pulumi.resources.ResourceArgs {

    public static final NotificationChannelArgs Empty = new NotificationChannelArgs();

    /**
     * Description of notification.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
     * 
     */
    @Import(name="emailRecipient")
      private final @Nullable Output<String> emailRecipient;

    public Output<String> getEmailRecipient() {
        return this.emailRecipient == null ? Output.empty() : this.emailRecipient;
    }

    /**
     * The list of event for which this notification is enabled.
     * 
     */
    @Import(name="events")
      private final @Nullable Output<List<EventArgs>> events;

    public Output<List<EventArgs>> getEvents() {
        return this.events == null ? Output.empty() : this.events;
    }

    /**
     * The name of the lab.
     * 
     */
    @Import(name="labName", required=true)
      private final Output<String> labName;

    public Output<String> getLabName() {
        return this.labName;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name of the notification channel.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The locale to use when sending a notification (fallback for unsupported languages is EN).
     * 
     */
    @Import(name="notificationLocale")
      private final @Nullable Output<String> notificationLocale;

    public Output<String> getNotificationLocale() {
        return this.notificationLocale == null ? Output.empty() : this.notificationLocale;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The webhook URL to send notifications to.
     * 
     */
    @Import(name="webHookUrl")
      private final @Nullable Output<String> webHookUrl;

    public Output<String> getWebHookUrl() {
        return this.webHookUrl == null ? Output.empty() : this.webHookUrl;
    }

    public NotificationChannelArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> emailRecipient,
        @Nullable Output<List<EventArgs>> events,
        Output<String> labName,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> notificationLocale,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> webHookUrl) {
        this.description = description;
        this.emailRecipient = emailRecipient;
        this.events = events;
        this.labName = Objects.requireNonNull(labName, "expected parameter 'labName' to be non-null");
        this.location = location;
        this.name = name;
        this.notificationLocale = notificationLocale;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.webHookUrl = webHookUrl;
    }

    private NotificationChannelArgs() {
        this.description = Output.empty();
        this.emailRecipient = Output.empty();
        this.events = Output.empty();
        this.labName = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.notificationLocale = Output.empty();
        this.resourceGroupName = Output.empty();
        this.tags = Output.empty();
        this.webHookUrl = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationChannelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> emailRecipient;
        private @Nullable Output<List<EventArgs>> events;
        private Output<String> labName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> notificationLocale;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> webHookUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(NotificationChannelArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.emailRecipient = defaults.emailRecipient;
    	      this.events = defaults.events;
    	      this.labName = defaults.labName;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.notificationLocale = defaults.notificationLocale;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.webHookUrl = defaults.webHookUrl;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder emailRecipient(@Nullable Output<String> emailRecipient) {
            this.emailRecipient = emailRecipient;
            return this;
        }
        public Builder emailRecipient(@Nullable String emailRecipient) {
            this.emailRecipient = Output.ofNullable(emailRecipient);
            return this;
        }
        public Builder events(@Nullable Output<List<EventArgs>> events) {
            this.events = events;
            return this;
        }
        public Builder events(@Nullable List<EventArgs> events) {
            this.events = Output.ofNullable(events);
            return this;
        }
        public Builder events(EventArgs... events) {
            return events(List.of(events));
        }
        public Builder labName(Output<String> labName) {
            this.labName = Objects.requireNonNull(labName);
            return this;
        }
        public Builder labName(String labName) {
            this.labName = Output.of(Objects.requireNonNull(labName));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder notificationLocale(@Nullable Output<String> notificationLocale) {
            this.notificationLocale = notificationLocale;
            return this;
        }
        public Builder notificationLocale(@Nullable String notificationLocale) {
            this.notificationLocale = Output.ofNullable(notificationLocale);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder webHookUrl(@Nullable Output<String> webHookUrl) {
            this.webHookUrl = webHookUrl;
            return this;
        }
        public Builder webHookUrl(@Nullable String webHookUrl) {
            this.webHookUrl = Output.ofNullable(webHookUrl);
            return this;
        }        public NotificationChannelArgs build() {
            return new NotificationChannelArgs(description, emailRecipient, events, labName, location, name, notificationLocale, resourceGroupName, tags, webHookUrl);
        }
    }
}
