// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb;

import io.pulumi.azurenative.documentdb.enums.ConnectorOffer;
import io.pulumi.azurenative.documentdb.enums.DatabaseAccountKind;
import io.pulumi.azurenative.documentdb.enums.DatabaseAccountOfferType;
import io.pulumi.azurenative.documentdb.enums.NetworkAclBypass;
import io.pulumi.azurenative.documentdb.enums.PublicNetworkAccess;
import io.pulumi.azurenative.documentdb.inputs.ApiPropertiesArgs;
import io.pulumi.azurenative.documentdb.inputs.CapabilityArgs;
import io.pulumi.azurenative.documentdb.inputs.ConsistencyPolicyArgs;
import io.pulumi.azurenative.documentdb.inputs.ContinuousModeBackupPolicyArgs;
import io.pulumi.azurenative.documentdb.inputs.CorsPolicyArgs;
import io.pulumi.azurenative.documentdb.inputs.IpAddressOrRangeArgs;
import io.pulumi.azurenative.documentdb.inputs.LocationArgs;
import io.pulumi.azurenative.documentdb.inputs.ManagedServiceIdentityArgs;
import io.pulumi.azurenative.documentdb.inputs.PeriodicModeBackupPolicyArgs;
import io.pulumi.azurenative.documentdb.inputs.VirtualNetworkRuleArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseAccountArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseAccountArgs Empty = new DatabaseAccountArgs();

    /**
     * Cosmos DB database account name.
     * 
     */
    @Import(name="accountName")
      private final @Nullable Output<String> accountName;

    public Output<String> getAccountName() {
        return this.accountName == null ? Output.empty() : this.accountName;
    }

    /**
     * API specific properties. Currently, supported only for MongoDB API.
     * 
     */
    @Import(name="apiProperties")
      private final @Nullable Output<ApiPropertiesArgs> apiProperties;

    public Output<ApiPropertiesArgs> getApiProperties() {
        return this.apiProperties == null ? Output.empty() : this.apiProperties;
    }

    /**
     * The object representing the policy for taking backups on an account.
     * 
     */
    @Import(name="backupPolicy")
      private final @Nullable Output<Either<ContinuousModeBackupPolicyArgs,PeriodicModeBackupPolicyArgs>> backupPolicy;

    public Output<Either<ContinuousModeBackupPolicyArgs,PeriodicModeBackupPolicyArgs>> getBackupPolicy() {
        return this.backupPolicy == null ? Output.empty() : this.backupPolicy;
    }

    /**
     * List of Cosmos DB capabilities for the account
     * 
     */
    @Import(name="capabilities")
      private final @Nullable Output<List<CapabilityArgs>> capabilities;

    public Output<List<CapabilityArgs>> getCapabilities() {
        return this.capabilities == null ? Output.empty() : this.capabilities;
    }

    /**
     * The cassandra connector offer type for the Cosmos DB database C* account.
     * 
     */
    @Import(name="connectorOffer")
      private final @Nullable Output<Either<String,ConnectorOffer>> connectorOffer;

    public Output<Either<String,ConnectorOffer>> getConnectorOffer() {
        return this.connectorOffer == null ? Output.empty() : this.connectorOffer;
    }

    /**
     * The consistency policy for the Cosmos DB account.
     * 
     */
    @Import(name="consistencyPolicy")
      private final @Nullable Output<ConsistencyPolicyArgs> consistencyPolicy;

    public Output<ConsistencyPolicyArgs> getConsistencyPolicy() {
        return this.consistencyPolicy == null ? Output.empty() : this.consistencyPolicy;
    }

    /**
     * The CORS policy for the Cosmos DB database account.
     * 
     */
    @Import(name="cors")
      private final @Nullable Output<List<CorsPolicyArgs>> cors;

    public Output<List<CorsPolicyArgs>> getCors() {
        return this.cors == null ? Output.empty() : this.cors;
    }

    /**
     * The offer type for the database
     * 
     */
    @Import(name="databaseAccountOfferType", required=true)
      private final Output<DatabaseAccountOfferType> databaseAccountOfferType;

    public Output<DatabaseAccountOfferType> getDatabaseAccountOfferType() {
        return this.databaseAccountOfferType;
    }

    /**
     * The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be "FirstPartyIdentity", "SystemAssignedIdentity" and more.
     * 
     */
    @Import(name="defaultIdentity")
      private final @Nullable Output<String> defaultIdentity;

    public Output<String> getDefaultIdentity() {
        return this.defaultIdentity == null ? Output.empty() : this.defaultIdentity;
    }

    /**
     * Disable write operations on metadata resources (databases, containers, throughput) via account keys
     * 
     */
    @Import(name="disableKeyBasedMetadataWriteAccess")
      private final @Nullable Output<Boolean> disableKeyBasedMetadataWriteAccess;

    public Output<Boolean> getDisableKeyBasedMetadataWriteAccess() {
        return this.disableKeyBasedMetadataWriteAccess == null ? Output.empty() : this.disableKeyBasedMetadataWriteAccess;
    }

    /**
     * Flag to indicate whether to enable storage analytics.
     * 
     */
    @Import(name="enableAnalyticalStorage")
      private final @Nullable Output<Boolean> enableAnalyticalStorage;

    public Output<Boolean> getEnableAnalyticalStorage() {
        return this.enableAnalyticalStorage == null ? Output.empty() : this.enableAnalyticalStorage;
    }

    /**
     * Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
     * 
     */
    @Import(name="enableAutomaticFailover")
      private final @Nullable Output<Boolean> enableAutomaticFailover;

    public Output<Boolean> getEnableAutomaticFailover() {
        return this.enableAutomaticFailover == null ? Output.empty() : this.enableAutomaticFailover;
    }

    /**
     * Enables the cassandra connector on the Cosmos DB C* account
     * 
     */
    @Import(name="enableCassandraConnector")
      private final @Nullable Output<Boolean> enableCassandraConnector;

    public Output<Boolean> getEnableCassandraConnector() {
        return this.enableCassandraConnector == null ? Output.empty() : this.enableCassandraConnector;
    }

    /**
     * Flag to indicate whether Free Tier is enabled.
     * 
     */
    @Import(name="enableFreeTier")
      private final @Nullable Output<Boolean> enableFreeTier;

    public Output<Boolean> getEnableFreeTier() {
        return this.enableFreeTier == null ? Output.empty() : this.enableFreeTier;
    }

    /**
     * Enables the account to write in multiple locations
     * 
     */
    @Import(name="enableMultipleWriteLocations")
      private final @Nullable Output<Boolean> enableMultipleWriteLocations;

    public Output<Boolean> getEnableMultipleWriteLocations() {
        return this.enableMultipleWriteLocations == null ? Output.empty() : this.enableMultipleWriteLocations;
    }

    /**
     * Identity for the resource.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<ManagedServiceIdentityArgs> identity;

    public Output<ManagedServiceIdentityArgs> getIdentity() {
        return this.identity == null ? Output.empty() : this.identity;
    }

    /**
     * List of IpRules.
     * 
     */
    @Import(name="ipRules")
      private final @Nullable Output<List<IpAddressOrRangeArgs>> ipRules;

    public Output<List<IpAddressOrRangeArgs>> getIpRules() {
        return this.ipRules == null ? Output.empty() : this.ipRules;
    }

    /**
     * Flag to indicate whether to enable/disable Virtual Network ACL rules.
     * 
     */
    @Import(name="isVirtualNetworkFilterEnabled")
      private final @Nullable Output<Boolean> isVirtualNetworkFilterEnabled;

    public Output<Boolean> getIsVirtualNetworkFilterEnabled() {
        return this.isVirtualNetworkFilterEnabled == null ? Output.empty() : this.isVirtualNetworkFilterEnabled;
    }

    /**
     * The URI of the key vault
     * 
     */
    @Import(name="keyVaultKeyUri")
      private final @Nullable Output<String> keyVaultKeyUri;

    public Output<String> getKeyVaultKeyUri() {
        return this.keyVaultKeyUri == null ? Output.empty() : this.keyVaultKeyUri;
    }

    /**
     * Indicates the type of database account. This can only be set at database account creation.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<Either<String,DatabaseAccountKind>> kind;

    public Output<Either<String,DatabaseAccountKind>> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * The location of the resource group to which the resource belongs.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * An array that contains the georeplication locations enabled for the Cosmos DB account.
     * 
     */
    @Import(name="locations", required=true)
      private final Output<List<LocationArgs>> locations;

    public Output<List<LocationArgs>> getLocations() {
        return this.locations;
    }

    /**
     * Indicates what services are allowed to bypass firewall checks.
     * 
     */
    @Import(name="networkAclBypass")
      private final @Nullable Output<NetworkAclBypass> networkAclBypass;

    public Output<NetworkAclBypass> getNetworkAclBypass() {
        return this.networkAclBypass == null ? Output.empty() : this.networkAclBypass;
    }

    /**
     * An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account.
     * 
     */
    @Import(name="networkAclBypassResourceIds")
      private final @Nullable Output<List<String>> networkAclBypassResourceIds;

    public Output<List<String>> getNetworkAclBypassResourceIds() {
        return this.networkAclBypassResourceIds == null ? Output.empty() : this.networkAclBypassResourceIds;
    }

    /**
     * Whether requests from Public Network are allowed
     * 
     */
    @Import(name="publicNetworkAccess")
      private final @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;

    public Output<Either<String,PublicNetworkAccess>> getPublicNetworkAccess() {
        return this.publicNetworkAccess == null ? Output.empty() : this.publicNetworkAccess;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * List of Virtual Network ACL rules configured for the Cosmos DB account.
     * 
     */
    @Import(name="virtualNetworkRules")
      private final @Nullable Output<List<VirtualNetworkRuleArgs>> virtualNetworkRules;

    public Output<List<VirtualNetworkRuleArgs>> getVirtualNetworkRules() {
        return this.virtualNetworkRules == null ? Output.empty() : this.virtualNetworkRules;
    }

    public DatabaseAccountArgs(
        @Nullable Output<String> accountName,
        @Nullable Output<ApiPropertiesArgs> apiProperties,
        @Nullable Output<Either<ContinuousModeBackupPolicyArgs,PeriodicModeBackupPolicyArgs>> backupPolicy,
        @Nullable Output<List<CapabilityArgs>> capabilities,
        @Nullable Output<Either<String,ConnectorOffer>> connectorOffer,
        @Nullable Output<ConsistencyPolicyArgs> consistencyPolicy,
        @Nullable Output<List<CorsPolicyArgs>> cors,
        Output<DatabaseAccountOfferType> databaseAccountOfferType,
        @Nullable Output<String> defaultIdentity,
        @Nullable Output<Boolean> disableKeyBasedMetadataWriteAccess,
        @Nullable Output<Boolean> enableAnalyticalStorage,
        @Nullable Output<Boolean> enableAutomaticFailover,
        @Nullable Output<Boolean> enableCassandraConnector,
        @Nullable Output<Boolean> enableFreeTier,
        @Nullable Output<Boolean> enableMultipleWriteLocations,
        @Nullable Output<ManagedServiceIdentityArgs> identity,
        @Nullable Output<List<IpAddressOrRangeArgs>> ipRules,
        @Nullable Output<Boolean> isVirtualNetworkFilterEnabled,
        @Nullable Output<String> keyVaultKeyUri,
        @Nullable Output<Either<String,DatabaseAccountKind>> kind,
        @Nullable Output<String> location,
        Output<List<LocationArgs>> locations,
        @Nullable Output<NetworkAclBypass> networkAclBypass,
        @Nullable Output<List<String>> networkAclBypassResourceIds,
        @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<List<VirtualNetworkRuleArgs>> virtualNetworkRules) {
        this.accountName = accountName;
        this.apiProperties = apiProperties;
        this.backupPolicy = backupPolicy;
        this.capabilities = capabilities;
        this.connectorOffer = connectorOffer;
        this.consistencyPolicy = consistencyPolicy;
        this.cors = cors;
        this.databaseAccountOfferType = Objects.requireNonNull(databaseAccountOfferType, "expected parameter 'databaseAccountOfferType' to be non-null");
        this.defaultIdentity = defaultIdentity;
        this.disableKeyBasedMetadataWriteAccess = disableKeyBasedMetadataWriteAccess;
        this.enableAnalyticalStorage = enableAnalyticalStorage;
        this.enableAutomaticFailover = enableAutomaticFailover;
        this.enableCassandraConnector = enableCassandraConnector;
        this.enableFreeTier = enableFreeTier;
        this.enableMultipleWriteLocations = enableMultipleWriteLocations;
        this.identity = identity;
        this.ipRules = ipRules;
        this.isVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
        this.keyVaultKeyUri = keyVaultKeyUri;
        this.kind = kind == null ? Output.ofLeft("GlobalDocumentDB") : kind;
        this.location = location;
        this.locations = Objects.requireNonNull(locations, "expected parameter 'locations' to be non-null");
        this.networkAclBypass = networkAclBypass;
        this.networkAclBypassResourceIds = networkAclBypassResourceIds;
        this.publicNetworkAccess = publicNetworkAccess;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.virtualNetworkRules = virtualNetworkRules;
    }

    private DatabaseAccountArgs() {
        this.accountName = Output.empty();
        this.apiProperties = Output.empty();
        this.backupPolicy = Output.empty();
        this.capabilities = Output.empty();
        this.connectorOffer = Output.empty();
        this.consistencyPolicy = Output.empty();
        this.cors = Output.empty();
        this.databaseAccountOfferType = Output.empty();
        this.defaultIdentity = Output.empty();
        this.disableKeyBasedMetadataWriteAccess = Output.empty();
        this.enableAnalyticalStorage = Output.empty();
        this.enableAutomaticFailover = Output.empty();
        this.enableCassandraConnector = Output.empty();
        this.enableFreeTier = Output.empty();
        this.enableMultipleWriteLocations = Output.empty();
        this.identity = Output.empty();
        this.ipRules = Output.empty();
        this.isVirtualNetworkFilterEnabled = Output.empty();
        this.keyVaultKeyUri = Output.empty();
        this.kind = Output.empty();
        this.location = Output.empty();
        this.locations = Output.empty();
        this.networkAclBypass = Output.empty();
        this.networkAclBypassResourceIds = Output.empty();
        this.publicNetworkAccess = Output.empty();
        this.resourceGroupName = Output.empty();
        this.tags = Output.empty();
        this.virtualNetworkRules = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> accountName;
        private @Nullable Output<ApiPropertiesArgs> apiProperties;
        private @Nullable Output<Either<ContinuousModeBackupPolicyArgs,PeriodicModeBackupPolicyArgs>> backupPolicy;
        private @Nullable Output<List<CapabilityArgs>> capabilities;
        private @Nullable Output<Either<String,ConnectorOffer>> connectorOffer;
        private @Nullable Output<ConsistencyPolicyArgs> consistencyPolicy;
        private @Nullable Output<List<CorsPolicyArgs>> cors;
        private Output<DatabaseAccountOfferType> databaseAccountOfferType;
        private @Nullable Output<String> defaultIdentity;
        private @Nullable Output<Boolean> disableKeyBasedMetadataWriteAccess;
        private @Nullable Output<Boolean> enableAnalyticalStorage;
        private @Nullable Output<Boolean> enableAutomaticFailover;
        private @Nullable Output<Boolean> enableCassandraConnector;
        private @Nullable Output<Boolean> enableFreeTier;
        private @Nullable Output<Boolean> enableMultipleWriteLocations;
        private @Nullable Output<ManagedServiceIdentityArgs> identity;
        private @Nullable Output<List<IpAddressOrRangeArgs>> ipRules;
        private @Nullable Output<Boolean> isVirtualNetworkFilterEnabled;
        private @Nullable Output<String> keyVaultKeyUri;
        private @Nullable Output<Either<String,DatabaseAccountKind>> kind;
        private @Nullable Output<String> location;
        private Output<List<LocationArgs>> locations;
        private @Nullable Output<NetworkAclBypass> networkAclBypass;
        private @Nullable Output<List<String>> networkAclBypassResourceIds;
        private @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<List<VirtualNetworkRuleArgs>> virtualNetworkRules;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseAccountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.apiProperties = defaults.apiProperties;
    	      this.backupPolicy = defaults.backupPolicy;
    	      this.capabilities = defaults.capabilities;
    	      this.connectorOffer = defaults.connectorOffer;
    	      this.consistencyPolicy = defaults.consistencyPolicy;
    	      this.cors = defaults.cors;
    	      this.databaseAccountOfferType = defaults.databaseAccountOfferType;
    	      this.defaultIdentity = defaults.defaultIdentity;
    	      this.disableKeyBasedMetadataWriteAccess = defaults.disableKeyBasedMetadataWriteAccess;
    	      this.enableAnalyticalStorage = defaults.enableAnalyticalStorage;
    	      this.enableAutomaticFailover = defaults.enableAutomaticFailover;
    	      this.enableCassandraConnector = defaults.enableCassandraConnector;
    	      this.enableFreeTier = defaults.enableFreeTier;
    	      this.enableMultipleWriteLocations = defaults.enableMultipleWriteLocations;
    	      this.identity = defaults.identity;
    	      this.ipRules = defaults.ipRules;
    	      this.isVirtualNetworkFilterEnabled = defaults.isVirtualNetworkFilterEnabled;
    	      this.keyVaultKeyUri = defaults.keyVaultKeyUri;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.locations = defaults.locations;
    	      this.networkAclBypass = defaults.networkAclBypass;
    	      this.networkAclBypassResourceIds = defaults.networkAclBypassResourceIds;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.virtualNetworkRules = defaults.virtualNetworkRules;
        }

        public Builder accountName(@Nullable Output<String> accountName) {
            this.accountName = accountName;
            return this;
        }

        public Builder accountName(@Nullable String accountName) {
            this.accountName = Output.ofNullable(accountName);
            return this;
        }

        public Builder apiProperties(@Nullable Output<ApiPropertiesArgs> apiProperties) {
            this.apiProperties = apiProperties;
            return this;
        }

        public Builder apiProperties(@Nullable ApiPropertiesArgs apiProperties) {
            this.apiProperties = Output.ofNullable(apiProperties);
            return this;
        }

        public Builder backupPolicy(@Nullable Output<Either<ContinuousModeBackupPolicyArgs,PeriodicModeBackupPolicyArgs>> backupPolicy) {
            this.backupPolicy = backupPolicy;
            return this;
        }

        public Builder backupPolicy(@Nullable Either<ContinuousModeBackupPolicyArgs,PeriodicModeBackupPolicyArgs> backupPolicy) {
            this.backupPolicy = Output.ofNullable(backupPolicy);
            return this;
        }

        public Builder capabilities(@Nullable Output<List<CapabilityArgs>> capabilities) {
            this.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(@Nullable List<CapabilityArgs> capabilities) {
            this.capabilities = Output.ofNullable(capabilities);
            return this;
        }

        public Builder connectorOffer(@Nullable Output<Either<String,ConnectorOffer>> connectorOffer) {
            this.connectorOffer = connectorOffer;
            return this;
        }

        public Builder connectorOffer(@Nullable Either<String,ConnectorOffer> connectorOffer) {
            this.connectorOffer = Output.ofNullable(connectorOffer);
            return this;
        }

        public Builder consistencyPolicy(@Nullable Output<ConsistencyPolicyArgs> consistencyPolicy) {
            this.consistencyPolicy = consistencyPolicy;
            return this;
        }

        public Builder consistencyPolicy(@Nullable ConsistencyPolicyArgs consistencyPolicy) {
            this.consistencyPolicy = Output.ofNullable(consistencyPolicy);
            return this;
        }

        public Builder cors(@Nullable Output<List<CorsPolicyArgs>> cors) {
            this.cors = cors;
            return this;
        }

        public Builder cors(@Nullable List<CorsPolicyArgs> cors) {
            this.cors = Output.ofNullable(cors);
            return this;
        }

        public Builder databaseAccountOfferType(Output<DatabaseAccountOfferType> databaseAccountOfferType) {
            this.databaseAccountOfferType = Objects.requireNonNull(databaseAccountOfferType);
            return this;
        }

        public Builder databaseAccountOfferType(DatabaseAccountOfferType databaseAccountOfferType) {
            this.databaseAccountOfferType = Output.of(Objects.requireNonNull(databaseAccountOfferType));
            return this;
        }

        public Builder defaultIdentity(@Nullable Output<String> defaultIdentity) {
            this.defaultIdentity = defaultIdentity;
            return this;
        }

        public Builder defaultIdentity(@Nullable String defaultIdentity) {
            this.defaultIdentity = Output.ofNullable(defaultIdentity);
            return this;
        }

        public Builder disableKeyBasedMetadataWriteAccess(@Nullable Output<Boolean> disableKeyBasedMetadataWriteAccess) {
            this.disableKeyBasedMetadataWriteAccess = disableKeyBasedMetadataWriteAccess;
            return this;
        }

        public Builder disableKeyBasedMetadataWriteAccess(@Nullable Boolean disableKeyBasedMetadataWriteAccess) {
            this.disableKeyBasedMetadataWriteAccess = Output.ofNullable(disableKeyBasedMetadataWriteAccess);
            return this;
        }

        public Builder enableAnalyticalStorage(@Nullable Output<Boolean> enableAnalyticalStorage) {
            this.enableAnalyticalStorage = enableAnalyticalStorage;
            return this;
        }

        public Builder enableAnalyticalStorage(@Nullable Boolean enableAnalyticalStorage) {
            this.enableAnalyticalStorage = Output.ofNullable(enableAnalyticalStorage);
            return this;
        }

        public Builder enableAutomaticFailover(@Nullable Output<Boolean> enableAutomaticFailover) {
            this.enableAutomaticFailover = enableAutomaticFailover;
            return this;
        }

        public Builder enableAutomaticFailover(@Nullable Boolean enableAutomaticFailover) {
            this.enableAutomaticFailover = Output.ofNullable(enableAutomaticFailover);
            return this;
        }

        public Builder enableCassandraConnector(@Nullable Output<Boolean> enableCassandraConnector) {
            this.enableCassandraConnector = enableCassandraConnector;
            return this;
        }

        public Builder enableCassandraConnector(@Nullable Boolean enableCassandraConnector) {
            this.enableCassandraConnector = Output.ofNullable(enableCassandraConnector);
            return this;
        }

        public Builder enableFreeTier(@Nullable Output<Boolean> enableFreeTier) {
            this.enableFreeTier = enableFreeTier;
            return this;
        }

        public Builder enableFreeTier(@Nullable Boolean enableFreeTier) {
            this.enableFreeTier = Output.ofNullable(enableFreeTier);
            return this;
        }

        public Builder enableMultipleWriteLocations(@Nullable Output<Boolean> enableMultipleWriteLocations) {
            this.enableMultipleWriteLocations = enableMultipleWriteLocations;
            return this;
        }

        public Builder enableMultipleWriteLocations(@Nullable Boolean enableMultipleWriteLocations) {
            this.enableMultipleWriteLocations = Output.ofNullable(enableMultipleWriteLocations);
            return this;
        }

        public Builder identity(@Nullable Output<ManagedServiceIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder identity(@Nullable ManagedServiceIdentityArgs identity) {
            this.identity = Output.ofNullable(identity);
            return this;
        }

        public Builder ipRules(@Nullable Output<List<IpAddressOrRangeArgs>> ipRules) {
            this.ipRules = ipRules;
            return this;
        }

        public Builder ipRules(@Nullable List<IpAddressOrRangeArgs> ipRules) {
            this.ipRules = Output.ofNullable(ipRules);
            return this;
        }

        public Builder isVirtualNetworkFilterEnabled(@Nullable Output<Boolean> isVirtualNetworkFilterEnabled) {
            this.isVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
            return this;
        }

        public Builder isVirtualNetworkFilterEnabled(@Nullable Boolean isVirtualNetworkFilterEnabled) {
            this.isVirtualNetworkFilterEnabled = Output.ofNullable(isVirtualNetworkFilterEnabled);
            return this;
        }

        public Builder keyVaultKeyUri(@Nullable Output<String> keyVaultKeyUri) {
            this.keyVaultKeyUri = keyVaultKeyUri;
            return this;
        }

        public Builder keyVaultKeyUri(@Nullable String keyVaultKeyUri) {
            this.keyVaultKeyUri = Output.ofNullable(keyVaultKeyUri);
            return this;
        }

        public Builder kind(@Nullable Output<Either<String,DatabaseAccountKind>> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable Either<String,DatabaseAccountKind> kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder locations(Output<List<LocationArgs>> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }

        public Builder locations(List<LocationArgs> locations) {
            this.locations = Output.of(Objects.requireNonNull(locations));
            return this;
        }

        public Builder networkAclBypass(@Nullable Output<NetworkAclBypass> networkAclBypass) {
            this.networkAclBypass = networkAclBypass;
            return this;
        }

        public Builder networkAclBypass(@Nullable NetworkAclBypass networkAclBypass) {
            this.networkAclBypass = Output.ofNullable(networkAclBypass);
            return this;
        }

        public Builder networkAclBypassResourceIds(@Nullable Output<List<String>> networkAclBypassResourceIds) {
            this.networkAclBypassResourceIds = networkAclBypassResourceIds;
            return this;
        }

        public Builder networkAclBypassResourceIds(@Nullable List<String> networkAclBypassResourceIds) {
            this.networkAclBypassResourceIds = Output.ofNullable(networkAclBypassResourceIds);
            return this;
        }

        public Builder publicNetworkAccess(@Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publicNetworkAccess(@Nullable Either<String,PublicNetworkAccess> publicNetworkAccess) {
            this.publicNetworkAccess = Output.ofNullable(publicNetworkAccess);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder virtualNetworkRules(@Nullable Output<List<VirtualNetworkRuleArgs>> virtualNetworkRules) {
            this.virtualNetworkRules = virtualNetworkRules;
            return this;
        }

        public Builder virtualNetworkRules(@Nullable List<VirtualNetworkRuleArgs> virtualNetworkRules) {
            this.virtualNetworkRules = Output.ofNullable(virtualNetworkRules);
            return this;
        }
        public DatabaseAccountArgs build() {
            return new DatabaseAccountArgs(accountName, apiProperties, backupPolicy, capabilities, connectorOffer, consistencyPolicy, cors, databaseAccountOfferType, defaultIdentity, disableKeyBasedMetadataWriteAccess, enableAnalyticalStorage, enableAutomaticFailover, enableCassandraConnector, enableFreeTier, enableMultipleWriteLocations, identity, ipRules, isVirtualNetworkFilterEnabled, keyVaultKeyUri, kind, location, locations, networkAclBypass, networkAclBypassResourceIds, publicNetworkAccess, resourceGroupName, tags, virtualNetworkRules);
        }
    }
}
