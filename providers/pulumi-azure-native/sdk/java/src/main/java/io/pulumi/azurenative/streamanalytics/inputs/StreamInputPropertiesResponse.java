// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.azurenative.streamanalytics.inputs.AvroSerializationResponse;
import io.pulumi.azurenative.streamanalytics.inputs.BlobStreamInputDataSourceResponse;
import io.pulumi.azurenative.streamanalytics.inputs.CsvSerializationResponse;
import io.pulumi.azurenative.streamanalytics.inputs.DiagnosticsResponse;
import io.pulumi.azurenative.streamanalytics.inputs.EventHubStreamInputDataSourceResponse;
import io.pulumi.azurenative.streamanalytics.inputs.IoTHubStreamInputDataSourceResponse;
import io.pulumi.azurenative.streamanalytics.inputs.JsonSerializationResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties that are associated with an input containing stream data.
 * 
 */
public final class StreamInputPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final StreamInputPropertiesResponse Empty = new StreamInputPropertiesResponse();

    /**
     * Describes an input data source that contains stream data. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @InputImport(name="datasource")
      private final @Nullable Object datasource;

    public Object getDatasource() {
        return this.datasource == null ? null : this.datasource;
    }

    /**
     * Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
     * 
     */
    @InputImport(name="diagnostics", required=true)
      private final DiagnosticsResponse diagnostics;

    public DiagnosticsResponse getDiagnostics() {
        return this.diagnostics;
    }

    /**
     * The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
     * 
     */
    @InputImport(name="etag", required=true)
      private final String etag;

    public String getEtag() {
        return this.etag;
    }

    /**
     * Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @InputImport(name="serialization")
      private final @Nullable Object serialization;

    public Object getSerialization() {
        return this.serialization == null ? null : this.serialization;
    }

    /**
     * Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
     * Expected value is 'Stream'.
     * 
     */
    @InputImport(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    public StreamInputPropertiesResponse(
        @Nullable Object datasource,
        DiagnosticsResponse diagnostics,
        String etag,
        @Nullable Object serialization,
        String type) {
        this.datasource = datasource;
        this.diagnostics = Objects.requireNonNull(diagnostics, "expected parameter 'diagnostics' to be non-null");
        this.etag = Objects.requireNonNull(etag, "expected parameter 'etag' to be non-null");
        this.serialization = serialization;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private StreamInputPropertiesResponse() {
        this.datasource = null;
        this.diagnostics = null;
        this.etag = null;
        this.serialization = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamInputPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Object datasource;
        private DiagnosticsResponse diagnostics;
        private String etag;
        private @Nullable Object serialization;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(StreamInputPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasource = defaults.datasource;
    	      this.diagnostics = defaults.diagnostics;
    	      this.etag = defaults.etag;
    	      this.serialization = defaults.serialization;
    	      this.type = defaults.type;
        }

        public Builder setDatasource(@Nullable Object datasource) {
            this.datasource = datasource;
            return this;
        }

        public Builder setDiagnostics(DiagnosticsResponse diagnostics) {
            this.diagnostics = Objects.requireNonNull(diagnostics);
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setSerialization(@Nullable Object serialization) {
            this.serialization = serialization;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public StreamInputPropertiesResponse build() {
            return new StreamInputPropertiesResponse(datasource, diagnostics, etag, serialization, type);
        }
    }
}
