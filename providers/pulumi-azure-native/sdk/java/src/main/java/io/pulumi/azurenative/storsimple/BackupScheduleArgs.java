// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storsimple;

import io.pulumi.azurenative.storsimple.enums.BackupType;
import io.pulumi.azurenative.storsimple.enums.Kind;
import io.pulumi.azurenative.storsimple.enums.ScheduleStatus;
import io.pulumi.azurenative.storsimple.inputs.ScheduleRecurrenceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BackupScheduleArgs extends io.pulumi.resources.ResourceArgs {

    public static final BackupScheduleArgs Empty = new BackupScheduleArgs();

    /**
     * The backup policy name.
     * 
     */
    @InputImport(name="backupPolicyName", required=true)
      private final Output<String> backupPolicyName;

    public Output<String> getBackupPolicyName() {
        return this.backupPolicyName;
    }

    /**
     * The backup schedule name.
     * 
     */
    @InputImport(name="backupScheduleName")
      private final @Nullable Output<String> backupScheduleName;

    public Output<String> getBackupScheduleName() {
        return this.backupScheduleName == null ? Output.empty() : this.backupScheduleName;
    }

    /**
     * The type of backup which needs to be taken.
     * 
     */
    @InputImport(name="backupType", required=true)
      private final Output<BackupType> backupType;

    public Output<BackupType> getBackupType() {
        return this.backupType;
    }

    /**
     * The device name
     * 
     */
    @InputImport(name="deviceName", required=true)
      private final Output<String> deviceName;

    public Output<String> getDeviceName() {
        return this.deviceName;
    }

    /**
     * The Kind of the object. Currently only Series8000 is supported
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Output<Kind> kind;

    public Output<Kind> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * The manager name
     * 
     */
    @InputImport(name="managerName", required=true)
      private final Output<String> managerName;

    public Output<String> getManagerName() {
        return this.managerName;
    }

    /**
     * The resource group name
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The number of backups to be retained.
     * 
     */
    @InputImport(name="retentionCount", required=true)
      private final Output<Double> retentionCount;

    public Output<Double> getRetentionCount() {
        return this.retentionCount;
    }

    /**
     * The schedule recurrence.
     * 
     */
    @InputImport(name="scheduleRecurrence", required=true)
      private final Output<ScheduleRecurrenceArgs> scheduleRecurrence;

    public Output<ScheduleRecurrenceArgs> getScheduleRecurrence() {
        return this.scheduleRecurrence;
    }

    /**
     * The schedule status.
     * 
     */
    @InputImport(name="scheduleStatus", required=true)
      private final Output<ScheduleStatus> scheduleStatus;

    public Output<ScheduleStatus> getScheduleStatus() {
        return this.scheduleStatus;
    }

    /**
     * The start time of the schedule.
     * 
     */
    @InputImport(name="startTime", required=true)
      private final Output<String> startTime;

    public Output<String> getStartTime() {
        return this.startTime;
    }

    public BackupScheduleArgs(
        Output<String> backupPolicyName,
        @Nullable Output<String> backupScheduleName,
        Output<BackupType> backupType,
        Output<String> deviceName,
        @Nullable Output<Kind> kind,
        Output<String> managerName,
        Output<String> resourceGroupName,
        Output<Double> retentionCount,
        Output<ScheduleRecurrenceArgs> scheduleRecurrence,
        Output<ScheduleStatus> scheduleStatus,
        Output<String> startTime) {
        this.backupPolicyName = Objects.requireNonNull(backupPolicyName, "expected parameter 'backupPolicyName' to be non-null");
        this.backupScheduleName = backupScheduleName;
        this.backupType = Objects.requireNonNull(backupType, "expected parameter 'backupType' to be non-null");
        this.deviceName = Objects.requireNonNull(deviceName, "expected parameter 'deviceName' to be non-null");
        this.kind = kind;
        this.managerName = Objects.requireNonNull(managerName, "expected parameter 'managerName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.retentionCount = Objects.requireNonNull(retentionCount, "expected parameter 'retentionCount' to be non-null");
        this.scheduleRecurrence = Objects.requireNonNull(scheduleRecurrence, "expected parameter 'scheduleRecurrence' to be non-null");
        this.scheduleStatus = Objects.requireNonNull(scheduleStatus, "expected parameter 'scheduleStatus' to be non-null");
        this.startTime = Objects.requireNonNull(startTime, "expected parameter 'startTime' to be non-null");
    }

    private BackupScheduleArgs() {
        this.backupPolicyName = Output.empty();
        this.backupScheduleName = Output.empty();
        this.backupType = Output.empty();
        this.deviceName = Output.empty();
        this.kind = Output.empty();
        this.managerName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.retentionCount = Output.empty();
        this.scheduleRecurrence = Output.empty();
        this.scheduleStatus = Output.empty();
        this.startTime = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> backupPolicyName;
        private @Nullable Output<String> backupScheduleName;
        private Output<BackupType> backupType;
        private Output<String> deviceName;
        private @Nullable Output<Kind> kind;
        private Output<String> managerName;
        private Output<String> resourceGroupName;
        private Output<Double> retentionCount;
        private Output<ScheduleRecurrenceArgs> scheduleRecurrence;
        private Output<ScheduleStatus> scheduleStatus;
        private Output<String> startTime;

        public Builder() {
    	      // Empty
        }

        public Builder(BackupScheduleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupPolicyName = defaults.backupPolicyName;
    	      this.backupScheduleName = defaults.backupScheduleName;
    	      this.backupType = defaults.backupType;
    	      this.deviceName = defaults.deviceName;
    	      this.kind = defaults.kind;
    	      this.managerName = defaults.managerName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.retentionCount = defaults.retentionCount;
    	      this.scheduleRecurrence = defaults.scheduleRecurrence;
    	      this.scheduleStatus = defaults.scheduleStatus;
    	      this.startTime = defaults.startTime;
        }

        public Builder backupPolicyName(Output<String> backupPolicyName) {
            this.backupPolicyName = Objects.requireNonNull(backupPolicyName);
            return this;
        }

        public Builder backupPolicyName(String backupPolicyName) {
            this.backupPolicyName = Output.of(Objects.requireNonNull(backupPolicyName));
            return this;
        }

        public Builder backupScheduleName(@Nullable Output<String> backupScheduleName) {
            this.backupScheduleName = backupScheduleName;
            return this;
        }

        public Builder backupScheduleName(@Nullable String backupScheduleName) {
            this.backupScheduleName = Output.ofNullable(backupScheduleName);
            return this;
        }

        public Builder backupType(Output<BackupType> backupType) {
            this.backupType = Objects.requireNonNull(backupType);
            return this;
        }

        public Builder backupType(BackupType backupType) {
            this.backupType = Output.of(Objects.requireNonNull(backupType));
            return this;
        }

        public Builder deviceName(Output<String> deviceName) {
            this.deviceName = Objects.requireNonNull(deviceName);
            return this;
        }

        public Builder deviceName(String deviceName) {
            this.deviceName = Output.of(Objects.requireNonNull(deviceName));
            return this;
        }

        public Builder kind(@Nullable Output<Kind> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable Kind kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }

        public Builder managerName(Output<String> managerName) {
            this.managerName = Objects.requireNonNull(managerName);
            return this;
        }

        public Builder managerName(String managerName) {
            this.managerName = Output.of(Objects.requireNonNull(managerName));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder retentionCount(Output<Double> retentionCount) {
            this.retentionCount = Objects.requireNonNull(retentionCount);
            return this;
        }

        public Builder retentionCount(Double retentionCount) {
            this.retentionCount = Output.of(Objects.requireNonNull(retentionCount));
            return this;
        }

        public Builder scheduleRecurrence(Output<ScheduleRecurrenceArgs> scheduleRecurrence) {
            this.scheduleRecurrence = Objects.requireNonNull(scheduleRecurrence);
            return this;
        }

        public Builder scheduleRecurrence(ScheduleRecurrenceArgs scheduleRecurrence) {
            this.scheduleRecurrence = Output.of(Objects.requireNonNull(scheduleRecurrence));
            return this;
        }

        public Builder scheduleStatus(Output<ScheduleStatus> scheduleStatus) {
            this.scheduleStatus = Objects.requireNonNull(scheduleStatus);
            return this;
        }

        public Builder scheduleStatus(ScheduleStatus scheduleStatus) {
            this.scheduleStatus = Output.of(Objects.requireNonNull(scheduleStatus));
            return this;
        }

        public Builder startTime(Output<String> startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder startTime(String startTime) {
            this.startTime = Output.of(Objects.requireNonNull(startTime));
            return this;
        }
        public BackupScheduleArgs build() {
            return new BackupScheduleArgs(backupPolicyName, backupScheduleName, backupType, deviceName, kind, managerName, resourceGroupName, retentionCount, scheduleRecurrence, scheduleStatus, startTime);
        }
    }
}
