// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import io.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import io.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * HDInsight Spark activity.
 * 
 */
public final class HDInsightSparkActivityResponse extends io.pulumi.resources.InvokeArgs {

    public static final HDInsightSparkActivityResponse Empty = new HDInsightSparkActivityResponse();

    /**
     * The user-specified arguments to HDInsightSparkActivity.
     * 
     */
    @Import(name="arguments")
      private final @Nullable List<Object> arguments;

    public List<Object> getArguments() {
        return this.arguments == null ? List.of() : this.arguments;
    }

    /**
     * The application's Java/Spark main class.
     * 
     */
    @Import(name="className")
      private final @Nullable String className;

    public Optional<String> getClassName() {
        return this.className == null ? Optional.empty() : Optional.ofNullable(this.className);
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable List<ActivityDependencyResponse> dependsOn;

    public List<ActivityDependencyResponse> getDependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> getDescription() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="entryFilePath", required=true)
      private final Object entryFilePath;

    public Object getEntryFilePath() {
        return this.entryFilePath;
    }

    /**
     * Debug info option.
     * 
     */
    @Import(name="getDebugInfo")
      private final @Nullable String getDebugInfo;

    public Optional<String> getGetDebugInfo() {
        return this.getDebugInfo == null ? Optional.empty() : Optional.ofNullable(this.getDebugInfo);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
      private final @Nullable LinkedServiceReferenceResponse linkedServiceName;

    public Optional<LinkedServiceReferenceResponse> getLinkedServiceName() {
        return this.linkedServiceName == null ? Optional.empty() : Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
      private final @Nullable ActivityPolicyResponse policy;

    public Optional<ActivityPolicyResponse> getPolicy() {
        return this.policy == null ? Optional.empty() : Optional.ofNullable(this.policy);
    }

    /**
     * The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="proxyUser")
      private final @Nullable Object proxyUser;

    public Optional<Object> getProxyUser() {
        return this.proxyUser == null ? Optional.empty() : Optional.ofNullable(this.proxyUser);
    }

    /**
     * The root path in 'sparkJobLinkedService' for all the jobâ€™s files. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="rootPath", required=true)
      private final Object rootPath;

    public Object getRootPath() {
        return this.rootPath;
    }

    /**
     * Spark configuration property.
     * 
     */
    @Import(name="sparkConfig")
      private final @Nullable Map<String,Object> sparkConfig;

    public Map<String,Object> getSparkConfig() {
        return this.sparkConfig == null ? Map.of() : this.sparkConfig;
    }

    /**
     * The storage linked service for uploading the entry file and dependencies, and for receiving logs.
     * 
     */
    @Import(name="sparkJobLinkedService")
      private final @Nullable LinkedServiceReferenceResponse sparkJobLinkedService;

    public Optional<LinkedServiceReferenceResponse> getSparkJobLinkedService() {
        return this.sparkJobLinkedService == null ? Optional.empty() : Optional.ofNullable(this.sparkJobLinkedService);
    }

    /**
     * Type of activity.
     * Expected value is 'HDInsightSpark'.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
      private final @Nullable List<UserPropertyResponse> userProperties;

    public List<UserPropertyResponse> getUserProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }

    public HDInsightSparkActivityResponse(
        @Nullable List<Object> arguments,
        @Nullable String className,
        @Nullable List<ActivityDependencyResponse> dependsOn,
        @Nullable String description,
        Object entryFilePath,
        @Nullable String getDebugInfo,
        @Nullable LinkedServiceReferenceResponse linkedServiceName,
        String name,
        @Nullable ActivityPolicyResponse policy,
        @Nullable Object proxyUser,
        Object rootPath,
        @Nullable Map<String,Object> sparkConfig,
        @Nullable LinkedServiceReferenceResponse sparkJobLinkedService,
        String type,
        @Nullable List<UserPropertyResponse> userProperties) {
        this.arguments = arguments;
        this.className = className;
        this.dependsOn = dependsOn;
        this.description = description;
        this.entryFilePath = Objects.requireNonNull(entryFilePath, "expected parameter 'entryFilePath' to be non-null");
        this.getDebugInfo = getDebugInfo;
        this.linkedServiceName = linkedServiceName;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.policy = policy;
        this.proxyUser = proxyUser;
        this.rootPath = Objects.requireNonNull(rootPath, "expected parameter 'rootPath' to be non-null");
        this.sparkConfig = sparkConfig;
        this.sparkJobLinkedService = sparkJobLinkedService;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userProperties = userProperties;
    }

    private HDInsightSparkActivityResponse() {
        this.arguments = List.of();
        this.className = null;
        this.dependsOn = List.of();
        this.description = null;
        this.entryFilePath = null;
        this.getDebugInfo = null;
        this.linkedServiceName = null;
        this.name = null;
        this.policy = null;
        this.proxyUser = null;
        this.rootPath = null;
        this.sparkConfig = Map.of();
        this.sparkJobLinkedService = null;
        this.type = null;
        this.userProperties = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HDInsightSparkActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<Object> arguments;
        private @Nullable String className;
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private Object entryFilePath;
        private @Nullable String getDebugInfo;
        private @Nullable LinkedServiceReferenceResponse linkedServiceName;
        private String name;
        private @Nullable ActivityPolicyResponse policy;
        private @Nullable Object proxyUser;
        private Object rootPath;
        private @Nullable Map<String,Object> sparkConfig;
        private @Nullable LinkedServiceReferenceResponse sparkJobLinkedService;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(HDInsightSparkActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.className = defaults.className;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.entryFilePath = defaults.entryFilePath;
    	      this.getDebugInfo = defaults.getDebugInfo;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.proxyUser = defaults.proxyUser;
    	      this.rootPath = defaults.rootPath;
    	      this.sparkConfig = defaults.sparkConfig;
    	      this.sparkJobLinkedService = defaults.sparkJobLinkedService;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder arguments(@Nullable List<Object> arguments) {
            this.arguments = arguments;
            return this;
        }
        public Builder arguments(Object... arguments) {
            return arguments(List.of(arguments));
        }
        public Builder className(@Nullable String className) {
            this.className = className;
            return this;
        }
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder entryFilePath(Object entryFilePath) {
            this.entryFilePath = Objects.requireNonNull(entryFilePath);
            return this;
        }
        public Builder getDebugInfo(@Nullable String getDebugInfo) {
            this.getDebugInfo = getDebugInfo;
            return this;
        }
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            this.policy = policy;
            return this;
        }
        public Builder proxyUser(@Nullable Object proxyUser) {
            this.proxyUser = proxyUser;
            return this;
        }
        public Builder rootPath(Object rootPath) {
            this.rootPath = Objects.requireNonNull(rootPath);
            return this;
        }
        public Builder sparkConfig(@Nullable Map<String,Object> sparkConfig) {
            this.sparkConfig = sparkConfig;
            return this;
        }
        public Builder sparkJobLinkedService(@Nullable LinkedServiceReferenceResponse sparkJobLinkedService) {
            this.sparkJobLinkedService = sparkJobLinkedService;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }        public HDInsightSparkActivityResponse build() {
            return new HDInsightSparkActivityResponse(arguments, className, dependsOn, description, entryFilePath, getDebugInfo, linkedServiceName, name, policy, proxyUser, rootPath, sparkConfig, sparkJobLinkedService, type, userProperties);
        }
    }
}
