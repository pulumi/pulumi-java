// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ExpressRouteLink Mac Security Configuration.
 * 
 */
public final class ExpressRouteLinkMacSecConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final ExpressRouteLinkMacSecConfigResponse Empty = new ExpressRouteLinkMacSecConfigResponse();

    /**
     * Keyvault Secret Identifier URL containing Mac security CAK key.
     * 
     */
    @InputImport(name="cakSecretIdentifier")
      private final @Nullable String cakSecretIdentifier;

    public Optional<String> getCakSecretIdentifier() {
        return this.cakSecretIdentifier == null ? Optional.empty() : Optional.ofNullable(this.cakSecretIdentifier);
    }

    /**
     * Mac security cipher.
     * 
     */
    @InputImport(name="cipher")
      private final @Nullable String cipher;

    public Optional<String> getCipher() {
        return this.cipher == null ? Optional.empty() : Optional.ofNullable(this.cipher);
    }

    /**
     * Keyvault Secret Identifier URL containing Mac security CKN key.
     * 
     */
    @InputImport(name="cknSecretIdentifier")
      private final @Nullable String cknSecretIdentifier;

    public Optional<String> getCknSecretIdentifier() {
        return this.cknSecretIdentifier == null ? Optional.empty() : Optional.ofNullable(this.cknSecretIdentifier);
    }

    /**
     * Sci mode enabled/disabled.
     * 
     */
    @InputImport(name="sciState")
      private final @Nullable String sciState;

    public Optional<String> getSciState() {
        return this.sciState == null ? Optional.empty() : Optional.ofNullable(this.sciState);
    }

    public ExpressRouteLinkMacSecConfigResponse(
        @Nullable String cakSecretIdentifier,
        @Nullable String cipher,
        @Nullable String cknSecretIdentifier,
        @Nullable String sciState) {
        this.cakSecretIdentifier = cakSecretIdentifier;
        this.cipher = cipher;
        this.cknSecretIdentifier = cknSecretIdentifier;
        this.sciState = sciState;
    }

    private ExpressRouteLinkMacSecConfigResponse() {
        this.cakSecretIdentifier = null;
        this.cipher = null;
        this.cknSecretIdentifier = null;
        this.sciState = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExpressRouteLinkMacSecConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String cakSecretIdentifier;
        private @Nullable String cipher;
        private @Nullable String cknSecretIdentifier;
        private @Nullable String sciState;

        public Builder() {
    	      // Empty
        }

        public Builder(ExpressRouteLinkMacSecConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cakSecretIdentifier = defaults.cakSecretIdentifier;
    	      this.cipher = defaults.cipher;
    	      this.cknSecretIdentifier = defaults.cknSecretIdentifier;
    	      this.sciState = defaults.sciState;
        }

        public Builder cakSecretIdentifier(@Nullable String cakSecretIdentifier) {
            this.cakSecretIdentifier = cakSecretIdentifier;
            return this;
        }

        public Builder cipher(@Nullable String cipher) {
            this.cipher = cipher;
            return this;
        }

        public Builder cknSecretIdentifier(@Nullable String cknSecretIdentifier) {
            this.cknSecretIdentifier = cknSecretIdentifier;
            return this;
        }

        public Builder sciState(@Nullable String sciState) {
            this.sciState = sciState;
            return this;
        }
        public ExpressRouteLinkMacSecConfigResponse build() {
            return new ExpressRouteLinkMacSecConfigResponse(cakSecretIdentifier, cipher, cknSecretIdentifier, sciState);
        }
    }
}
