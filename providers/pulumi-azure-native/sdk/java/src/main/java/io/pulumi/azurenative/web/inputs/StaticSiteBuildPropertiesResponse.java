// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Build properties for the static site.
 * 
 */
public final class StaticSiteBuildPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final StaticSiteBuildPropertiesResponse Empty = new StaticSiteBuildPropertiesResponse();

    /**
     * A custom command to run during deployment of the Azure Functions API application.
     * 
     */
    @Import(name="apiBuildCommand")
      private final @Nullable String apiBuildCommand;

    public Optional<String> getApiBuildCommand() {
        return this.apiBuildCommand == null ? Optional.empty() : Optional.ofNullable(this.apiBuildCommand);
    }

    /**
     * The path to the api code within the repository.
     * 
     */
    @Import(name="apiLocation")
      private final @Nullable String apiLocation;

    public Optional<String> getApiLocation() {
        return this.apiLocation == null ? Optional.empty() : Optional.ofNullable(this.apiLocation);
    }

    /**
     * Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation)
     * 
     */
    @Import(name="appArtifactLocation")
      private final @Nullable String appArtifactLocation;

    public Optional<String> getAppArtifactLocation() {
        return this.appArtifactLocation == null ? Optional.empty() : Optional.ofNullable(this.appArtifactLocation);
    }

    /**
     * A custom command to run during deployment of the static content application.
     * 
     */
    @Import(name="appBuildCommand")
      private final @Nullable String appBuildCommand;

    public Optional<String> getAppBuildCommand() {
        return this.appBuildCommand == null ? Optional.empty() : Optional.ofNullable(this.appBuildCommand);
    }

    /**
     * The path to the app code within the repository.
     * 
     */
    @Import(name="appLocation")
      private final @Nullable String appLocation;

    public Optional<String> getAppLocation() {
        return this.appLocation == null ? Optional.empty() : Optional.ofNullable(this.appLocation);
    }

    /**
     * Github Action secret name override.
     * 
     */
    @Import(name="githubActionSecretNameOverride")
      private final @Nullable String githubActionSecretNameOverride;

    public Optional<String> getGithubActionSecretNameOverride() {
        return this.githubActionSecretNameOverride == null ? Optional.empty() : Optional.ofNullable(this.githubActionSecretNameOverride);
    }

    /**
     * The output path of the app after building.
     * 
     */
    @Import(name="outputLocation")
      private final @Nullable String outputLocation;

    public Optional<String> getOutputLocation() {
        return this.outputLocation == null ? Optional.empty() : Optional.ofNullable(this.outputLocation);
    }

    /**
     * Skip Github Action workflow generation.
     * 
     */
    @Import(name="skipGithubActionWorkflowGeneration")
      private final @Nullable Boolean skipGithubActionWorkflowGeneration;

    public Optional<Boolean> getSkipGithubActionWorkflowGeneration() {
        return this.skipGithubActionWorkflowGeneration == null ? Optional.empty() : Optional.ofNullable(this.skipGithubActionWorkflowGeneration);
    }

    public StaticSiteBuildPropertiesResponse(
        @Nullable String apiBuildCommand,
        @Nullable String apiLocation,
        @Nullable String appArtifactLocation,
        @Nullable String appBuildCommand,
        @Nullable String appLocation,
        @Nullable String githubActionSecretNameOverride,
        @Nullable String outputLocation,
        @Nullable Boolean skipGithubActionWorkflowGeneration) {
        this.apiBuildCommand = apiBuildCommand;
        this.apiLocation = apiLocation;
        this.appArtifactLocation = appArtifactLocation;
        this.appBuildCommand = appBuildCommand;
        this.appLocation = appLocation;
        this.githubActionSecretNameOverride = githubActionSecretNameOverride;
        this.outputLocation = outputLocation;
        this.skipGithubActionWorkflowGeneration = skipGithubActionWorkflowGeneration;
    }

    private StaticSiteBuildPropertiesResponse() {
        this.apiBuildCommand = null;
        this.apiLocation = null;
        this.appArtifactLocation = null;
        this.appBuildCommand = null;
        this.appLocation = null;
        this.githubActionSecretNameOverride = null;
        this.outputLocation = null;
        this.skipGithubActionWorkflowGeneration = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StaticSiteBuildPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String apiBuildCommand;
        private @Nullable String apiLocation;
        private @Nullable String appArtifactLocation;
        private @Nullable String appBuildCommand;
        private @Nullable String appLocation;
        private @Nullable String githubActionSecretNameOverride;
        private @Nullable String outputLocation;
        private @Nullable Boolean skipGithubActionWorkflowGeneration;

        public Builder() {
    	      // Empty
        }

        public Builder(StaticSiteBuildPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiBuildCommand = defaults.apiBuildCommand;
    	      this.apiLocation = defaults.apiLocation;
    	      this.appArtifactLocation = defaults.appArtifactLocation;
    	      this.appBuildCommand = defaults.appBuildCommand;
    	      this.appLocation = defaults.appLocation;
    	      this.githubActionSecretNameOverride = defaults.githubActionSecretNameOverride;
    	      this.outputLocation = defaults.outputLocation;
    	      this.skipGithubActionWorkflowGeneration = defaults.skipGithubActionWorkflowGeneration;
        }

        public Builder apiBuildCommand(@Nullable String apiBuildCommand) {
            this.apiBuildCommand = apiBuildCommand;
            return this;
        }

        public Builder apiLocation(@Nullable String apiLocation) {
            this.apiLocation = apiLocation;
            return this;
        }

        public Builder appArtifactLocation(@Nullable String appArtifactLocation) {
            this.appArtifactLocation = appArtifactLocation;
            return this;
        }

        public Builder appBuildCommand(@Nullable String appBuildCommand) {
            this.appBuildCommand = appBuildCommand;
            return this;
        }

        public Builder appLocation(@Nullable String appLocation) {
            this.appLocation = appLocation;
            return this;
        }

        public Builder githubActionSecretNameOverride(@Nullable String githubActionSecretNameOverride) {
            this.githubActionSecretNameOverride = githubActionSecretNameOverride;
            return this;
        }

        public Builder outputLocation(@Nullable String outputLocation) {
            this.outputLocation = outputLocation;
            return this;
        }

        public Builder skipGithubActionWorkflowGeneration(@Nullable Boolean skipGithubActionWorkflowGeneration) {
            this.skipGithubActionWorkflowGeneration = skipGithubActionWorkflowGeneration;
            return this;
        }
        public StaticSiteBuildPropertiesResponse build() {
            return new StaticSiteBuildPropertiesResponse(apiBuildCommand, apiLocation, appArtifactLocation, appBuildCommand, appLocation, githubActionSecretNameOverride, outputLocation, skipGithubActionWorkflowGeneration);
        }
    }
}
