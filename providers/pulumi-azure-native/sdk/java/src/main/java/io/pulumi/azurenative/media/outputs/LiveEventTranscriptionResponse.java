// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.outputs;

import io.pulumi.azurenative.media.outputs.LiveEventInputTrackSelectionResponse;
import io.pulumi.azurenative.media.outputs.LiveEventOutputTranscriptionTrackResponse;
import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LiveEventTranscriptionResponse {
    /**
     * Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
     * 
     */
    private final @Nullable List<LiveEventInputTrackSelectionResponse> inputTrackSelection;
    /**
     * Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
     * 
     */
    private final @Nullable String language;
    /**
     * Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
     * 
     */
    private final @Nullable LiveEventOutputTranscriptionTrackResponse outputTranscriptionTrack;

    @CustomType.Constructor
    private LiveEventTranscriptionResponse(
        @CustomType.Parameter("inputTrackSelection") @Nullable List<LiveEventInputTrackSelectionResponse> inputTrackSelection,
        @CustomType.Parameter("language") @Nullable String language,
        @CustomType.Parameter("outputTranscriptionTrack") @Nullable LiveEventOutputTranscriptionTrackResponse outputTranscriptionTrack) {
        this.inputTrackSelection = inputTrackSelection;
        this.language = language;
        this.outputTranscriptionTrack = outputTranscriptionTrack;
    }

    /**
     * Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
     * 
    */
    public List<LiveEventInputTrackSelectionResponse> getInputTrackSelection() {
        return this.inputTrackSelection == null ? List.of() : this.inputTrackSelection;
    }
    /**
     * Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
     * 
    */
    public Optional<String> getLanguage() {
        return Optional.ofNullable(this.language);
    }
    /**
     * Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
     * 
    */
    public Optional<LiveEventOutputTranscriptionTrackResponse> getOutputTranscriptionTrack() {
        return Optional.ofNullable(this.outputTranscriptionTrack);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveEventTranscriptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<LiveEventInputTrackSelectionResponse> inputTrackSelection;
        private @Nullable String language;
        private @Nullable LiveEventOutputTranscriptionTrackResponse outputTranscriptionTrack;

        public Builder() {
    	      // Empty
        }

        public Builder(LiveEventTranscriptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inputTrackSelection = defaults.inputTrackSelection;
    	      this.language = defaults.language;
    	      this.outputTranscriptionTrack = defaults.outputTranscriptionTrack;
        }

        public Builder inputTrackSelection(@Nullable List<LiveEventInputTrackSelectionResponse> inputTrackSelection) {
            this.inputTrackSelection = inputTrackSelection;
            return this;
        }
        public Builder inputTrackSelection(LiveEventInputTrackSelectionResponse... inputTrackSelection) {
            return inputTrackSelection(List.of(inputTrackSelection));
        }
        public Builder language(@Nullable String language) {
            this.language = language;
            return this;
        }
        public Builder outputTranscriptionTrack(@Nullable LiveEventOutputTranscriptionTrackResponse outputTranscriptionTrack) {
            this.outputTranscriptionTrack = outputTranscriptionTrack;
            return this;
        }        public LiveEventTranscriptionResponse build() {
            return new LiveEventTranscriptionResponse(inputTrackSelection, language, outputTranscriptionTrack);
        }
    }
}
