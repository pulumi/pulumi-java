// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicebus;

import io.pulumi.azurenative.servicebus.enums.EntityStatus;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SubscriptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final SubscriptionArgs Empty = new SubscriptionArgs();

    /**
     * ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
     * 
     */
    @Import(name="autoDeleteOnIdle")
      private final @Nullable Output<String> autoDeleteOnIdle;

    public Output<String> getAutoDeleteOnIdle() {
        return this.autoDeleteOnIdle == null ? Output.empty() : this.autoDeleteOnIdle;
    }

    /**
     * Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
     * 
     */
    @Import(name="deadLetteringOnFilterEvaluationExceptions")
      private final @Nullable Output<Boolean> deadLetteringOnFilterEvaluationExceptions;

    public Output<Boolean> getDeadLetteringOnFilterEvaluationExceptions() {
        return this.deadLetteringOnFilterEvaluationExceptions == null ? Output.empty() : this.deadLetteringOnFilterEvaluationExceptions;
    }

    /**
     * Value that indicates whether a subscription has dead letter support when a message expires.
     * 
     */
    @Import(name="deadLetteringOnMessageExpiration")
      private final @Nullable Output<Boolean> deadLetteringOnMessageExpiration;

    public Output<Boolean> getDeadLetteringOnMessageExpiration() {
        return this.deadLetteringOnMessageExpiration == null ? Output.empty() : this.deadLetteringOnMessageExpiration;
    }

    /**
     * ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
     */
    @Import(name="defaultMessageTimeToLive")
      private final @Nullable Output<String> defaultMessageTimeToLive;

    public Output<String> getDefaultMessageTimeToLive() {
        return this.defaultMessageTimeToLive == null ? Output.empty() : this.defaultMessageTimeToLive;
    }

    /**
     * ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
     * 
     */
    @Import(name="duplicateDetectionHistoryTimeWindow")
      private final @Nullable Output<String> duplicateDetectionHistoryTimeWindow;

    public Output<String> getDuplicateDetectionHistoryTimeWindow() {
        return this.duplicateDetectionHistoryTimeWindow == null ? Output.empty() : this.duplicateDetectionHistoryTimeWindow;
    }

    /**
     * Value that indicates whether server-side batched operations are enabled.
     * 
     */
    @Import(name="enableBatchedOperations")
      private final @Nullable Output<Boolean> enableBatchedOperations;

    public Output<Boolean> getEnableBatchedOperations() {
        return this.enableBatchedOperations == null ? Output.empty() : this.enableBatchedOperations;
    }

    /**
     * Queue/Topic name to forward the Dead Letter message
     * 
     */
    @Import(name="forwardDeadLetteredMessagesTo")
      private final @Nullable Output<String> forwardDeadLetteredMessagesTo;

    public Output<String> getForwardDeadLetteredMessagesTo() {
        return this.forwardDeadLetteredMessagesTo == null ? Output.empty() : this.forwardDeadLetteredMessagesTo;
    }

    /**
     * Queue/Topic name to forward the messages
     * 
     */
    @Import(name="forwardTo")
      private final @Nullable Output<String> forwardTo;

    public Output<String> getForwardTo() {
        return this.forwardTo == null ? Output.empty() : this.forwardTo;
    }

    /**
     * ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
     * 
     */
    @Import(name="lockDuration")
      private final @Nullable Output<String> lockDuration;

    public Output<String> getLockDuration() {
        return this.lockDuration == null ? Output.empty() : this.lockDuration;
    }

    /**
     * Number of maximum deliveries.
     * 
     */
    @Import(name="maxDeliveryCount")
      private final @Nullable Output<Integer> maxDeliveryCount;

    public Output<Integer> getMaxDeliveryCount() {
        return this.maxDeliveryCount == null ? Output.empty() : this.maxDeliveryCount;
    }

    /**
     * The namespace name
     * 
     */
    @Import(name="namespaceName", required=true)
      private final Output<String> namespaceName;

    public Output<String> getNamespaceName() {
        return this.namespaceName;
    }

    /**
     * Value indicating if a subscription supports the concept of sessions.
     * 
     */
    @Import(name="requiresSession")
      private final @Nullable Output<Boolean> requiresSession;

    public Output<Boolean> getRequiresSession() {
        return this.requiresSession == null ? Output.empty() : this.requiresSession;
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Enumerates the possible values for the status of a messaging entity.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<EntityStatus> status;

    public Output<EntityStatus> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * The subscription name.
     * 
     */
    @Import(name="subscriptionName")
      private final @Nullable Output<String> subscriptionName;

    public Output<String> getSubscriptionName() {
        return this.subscriptionName == null ? Output.empty() : this.subscriptionName;
    }

    /**
     * The topic name.
     * 
     */
    @Import(name="topicName", required=true)
      private final Output<String> topicName;

    public Output<String> getTopicName() {
        return this.topicName;
    }

    public SubscriptionArgs(
        @Nullable Output<String> autoDeleteOnIdle,
        @Nullable Output<Boolean> deadLetteringOnFilterEvaluationExceptions,
        @Nullable Output<Boolean> deadLetteringOnMessageExpiration,
        @Nullable Output<String> defaultMessageTimeToLive,
        @Nullable Output<String> duplicateDetectionHistoryTimeWindow,
        @Nullable Output<Boolean> enableBatchedOperations,
        @Nullable Output<String> forwardDeadLetteredMessagesTo,
        @Nullable Output<String> forwardTo,
        @Nullable Output<String> lockDuration,
        @Nullable Output<Integer> maxDeliveryCount,
        Output<String> namespaceName,
        @Nullable Output<Boolean> requiresSession,
        Output<String> resourceGroupName,
        @Nullable Output<EntityStatus> status,
        @Nullable Output<String> subscriptionName,
        Output<String> topicName) {
        this.autoDeleteOnIdle = autoDeleteOnIdle;
        this.deadLetteringOnFilterEvaluationExceptions = deadLetteringOnFilterEvaluationExceptions;
        this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
        this.defaultMessageTimeToLive = defaultMessageTimeToLive;
        this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
        this.enableBatchedOperations = enableBatchedOperations;
        this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
        this.forwardTo = forwardTo;
        this.lockDuration = lockDuration;
        this.maxDeliveryCount = maxDeliveryCount;
        this.namespaceName = Objects.requireNonNull(namespaceName, "expected parameter 'namespaceName' to be non-null");
        this.requiresSession = requiresSession;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.status = status;
        this.subscriptionName = subscriptionName;
        this.topicName = Objects.requireNonNull(topicName, "expected parameter 'topicName' to be non-null");
    }

    private SubscriptionArgs() {
        this.autoDeleteOnIdle = Output.empty();
        this.deadLetteringOnFilterEvaluationExceptions = Output.empty();
        this.deadLetteringOnMessageExpiration = Output.empty();
        this.defaultMessageTimeToLive = Output.empty();
        this.duplicateDetectionHistoryTimeWindow = Output.empty();
        this.enableBatchedOperations = Output.empty();
        this.forwardDeadLetteredMessagesTo = Output.empty();
        this.forwardTo = Output.empty();
        this.lockDuration = Output.empty();
        this.maxDeliveryCount = Output.empty();
        this.namespaceName = Output.empty();
        this.requiresSession = Output.empty();
        this.resourceGroupName = Output.empty();
        this.status = Output.empty();
        this.subscriptionName = Output.empty();
        this.topicName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> autoDeleteOnIdle;
        private @Nullable Output<Boolean> deadLetteringOnFilterEvaluationExceptions;
        private @Nullable Output<Boolean> deadLetteringOnMessageExpiration;
        private @Nullable Output<String> defaultMessageTimeToLive;
        private @Nullable Output<String> duplicateDetectionHistoryTimeWindow;
        private @Nullable Output<Boolean> enableBatchedOperations;
        private @Nullable Output<String> forwardDeadLetteredMessagesTo;
        private @Nullable Output<String> forwardTo;
        private @Nullable Output<String> lockDuration;
        private @Nullable Output<Integer> maxDeliveryCount;
        private Output<String> namespaceName;
        private @Nullable Output<Boolean> requiresSession;
        private Output<String> resourceGroupName;
        private @Nullable Output<EntityStatus> status;
        private @Nullable Output<String> subscriptionName;
        private Output<String> topicName;

        public Builder() {
    	      // Empty
        }

        public Builder(SubscriptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoDeleteOnIdle = defaults.autoDeleteOnIdle;
    	      this.deadLetteringOnFilterEvaluationExceptions = defaults.deadLetteringOnFilterEvaluationExceptions;
    	      this.deadLetteringOnMessageExpiration = defaults.deadLetteringOnMessageExpiration;
    	      this.defaultMessageTimeToLive = defaults.defaultMessageTimeToLive;
    	      this.duplicateDetectionHistoryTimeWindow = defaults.duplicateDetectionHistoryTimeWindow;
    	      this.enableBatchedOperations = defaults.enableBatchedOperations;
    	      this.forwardDeadLetteredMessagesTo = defaults.forwardDeadLetteredMessagesTo;
    	      this.forwardTo = defaults.forwardTo;
    	      this.lockDuration = defaults.lockDuration;
    	      this.maxDeliveryCount = defaults.maxDeliveryCount;
    	      this.namespaceName = defaults.namespaceName;
    	      this.requiresSession = defaults.requiresSession;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.status = defaults.status;
    	      this.subscriptionName = defaults.subscriptionName;
    	      this.topicName = defaults.topicName;
        }

        public Builder autoDeleteOnIdle(@Nullable Output<String> autoDeleteOnIdle) {
            this.autoDeleteOnIdle = autoDeleteOnIdle;
            return this;
        }
        public Builder autoDeleteOnIdle(@Nullable String autoDeleteOnIdle) {
            this.autoDeleteOnIdle = Output.ofNullable(autoDeleteOnIdle);
            return this;
        }
        public Builder deadLetteringOnFilterEvaluationExceptions(@Nullable Output<Boolean> deadLetteringOnFilterEvaluationExceptions) {
            this.deadLetteringOnFilterEvaluationExceptions = deadLetteringOnFilterEvaluationExceptions;
            return this;
        }
        public Builder deadLetteringOnFilterEvaluationExceptions(@Nullable Boolean deadLetteringOnFilterEvaluationExceptions) {
            this.deadLetteringOnFilterEvaluationExceptions = Output.ofNullable(deadLetteringOnFilterEvaluationExceptions);
            return this;
        }
        public Builder deadLetteringOnMessageExpiration(@Nullable Output<Boolean> deadLetteringOnMessageExpiration) {
            this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
            return this;
        }
        public Builder deadLetteringOnMessageExpiration(@Nullable Boolean deadLetteringOnMessageExpiration) {
            this.deadLetteringOnMessageExpiration = Output.ofNullable(deadLetteringOnMessageExpiration);
            return this;
        }
        public Builder defaultMessageTimeToLive(@Nullable Output<String> defaultMessageTimeToLive) {
            this.defaultMessageTimeToLive = defaultMessageTimeToLive;
            return this;
        }
        public Builder defaultMessageTimeToLive(@Nullable String defaultMessageTimeToLive) {
            this.defaultMessageTimeToLive = Output.ofNullable(defaultMessageTimeToLive);
            return this;
        }
        public Builder duplicateDetectionHistoryTimeWindow(@Nullable Output<String> duplicateDetectionHistoryTimeWindow) {
            this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            return this;
        }
        public Builder duplicateDetectionHistoryTimeWindow(@Nullable String duplicateDetectionHistoryTimeWindow) {
            this.duplicateDetectionHistoryTimeWindow = Output.ofNullable(duplicateDetectionHistoryTimeWindow);
            return this;
        }
        public Builder enableBatchedOperations(@Nullable Output<Boolean> enableBatchedOperations) {
            this.enableBatchedOperations = enableBatchedOperations;
            return this;
        }
        public Builder enableBatchedOperations(@Nullable Boolean enableBatchedOperations) {
            this.enableBatchedOperations = Output.ofNullable(enableBatchedOperations);
            return this;
        }
        public Builder forwardDeadLetteredMessagesTo(@Nullable Output<String> forwardDeadLetteredMessagesTo) {
            this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
            return this;
        }
        public Builder forwardDeadLetteredMessagesTo(@Nullable String forwardDeadLetteredMessagesTo) {
            this.forwardDeadLetteredMessagesTo = Output.ofNullable(forwardDeadLetteredMessagesTo);
            return this;
        }
        public Builder forwardTo(@Nullable Output<String> forwardTo) {
            this.forwardTo = forwardTo;
            return this;
        }
        public Builder forwardTo(@Nullable String forwardTo) {
            this.forwardTo = Output.ofNullable(forwardTo);
            return this;
        }
        public Builder lockDuration(@Nullable Output<String> lockDuration) {
            this.lockDuration = lockDuration;
            return this;
        }
        public Builder lockDuration(@Nullable String lockDuration) {
            this.lockDuration = Output.ofNullable(lockDuration);
            return this;
        }
        public Builder maxDeliveryCount(@Nullable Output<Integer> maxDeliveryCount) {
            this.maxDeliveryCount = maxDeliveryCount;
            return this;
        }
        public Builder maxDeliveryCount(@Nullable Integer maxDeliveryCount) {
            this.maxDeliveryCount = Output.ofNullable(maxDeliveryCount);
            return this;
        }
        public Builder namespaceName(Output<String> namespaceName) {
            this.namespaceName = Objects.requireNonNull(namespaceName);
            return this;
        }
        public Builder namespaceName(String namespaceName) {
            this.namespaceName = Output.of(Objects.requireNonNull(namespaceName));
            return this;
        }
        public Builder requiresSession(@Nullable Output<Boolean> requiresSession) {
            this.requiresSession = requiresSession;
            return this;
        }
        public Builder requiresSession(@Nullable Boolean requiresSession) {
            this.requiresSession = Output.ofNullable(requiresSession);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder status(@Nullable Output<EntityStatus> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable EntityStatus status) {
            this.status = Output.ofNullable(status);
            return this;
        }
        public Builder subscriptionName(@Nullable Output<String> subscriptionName) {
            this.subscriptionName = subscriptionName;
            return this;
        }
        public Builder subscriptionName(@Nullable String subscriptionName) {
            this.subscriptionName = Output.ofNullable(subscriptionName);
            return this;
        }
        public Builder topicName(Output<String> topicName) {
            this.topicName = Objects.requireNonNull(topicName);
            return this;
        }
        public Builder topicName(String topicName) {
            this.topicName = Output.of(Objects.requireNonNull(topicName));
            return this;
        }        public SubscriptionArgs build() {
            return new SubscriptionArgs(autoDeleteOnIdle, deadLetteringOnFilterEvaluationExceptions, deadLetteringOnMessageExpiration, defaultMessageTimeToLive, duplicateDetectionHistoryTimeWindow, enableBatchedOperations, forwardDeadLetteredMessagesTo, forwardTo, lockDuration, maxDeliveryCount, namespaceName, requiresSession, resourceGroupName, status, subscriptionName, topicName);
        }
    }
}
