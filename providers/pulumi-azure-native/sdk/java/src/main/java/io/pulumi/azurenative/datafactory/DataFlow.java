// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.datafactory.outputs.FlowletResponse;
import io.pulumi.azurenative.datafactory.outputs.MappingDataFlowResponse;
import io.pulumi.azurenative.datafactory.outputs.WranglingDataFlowResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Data flow resource type.
API Version: 2018-06-01.

{{% examples %}}
## Example Usage
{{% example %}}
### DataFlows_Create
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var dataFlow = new AzureNative.DataFactory.DataFlow("dataFlow", new AzureNative.DataFactory.DataFlowArgs
        {
            DataFlowName = "exampleDataFlow",
            FactoryName = "exampleFactoryName",
            Properties = new AzureNative.DataFactory.Inputs.MappingDataFlowArgs
            {
                Description = "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
                Script = @"source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency
source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource
USDCurrency, CADSource union(byName: true)~> Union
Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn
NewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)
ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink
ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink",
                Sinks = 
                {
                    new AzureNative.DataFactory.Inputs.DataFlowSinkArgs
                    {
                        Dataset = new AzureNative.DataFactory.Inputs.DatasetReferenceArgs
                        {
                            ReferenceName = "USDOutput",
                            Type = "DatasetReference",
                        },
                        Name = "USDSink",
                    },
                    new AzureNative.DataFactory.Inputs.DataFlowSinkArgs
                    {
                        Dataset = new AzureNative.DataFactory.Inputs.DatasetReferenceArgs
                        {
                            ReferenceName = "CADOutput",
                            Type = "DatasetReference",
                        },
                        Name = "CADSink",
                    },
                },
                Sources = 
                {
                    new AzureNative.DataFactory.Inputs.DataFlowSourceArgs
                    {
                        Dataset = new AzureNative.DataFactory.Inputs.DatasetReferenceArgs
                        {
                            ReferenceName = "CurrencyDatasetUSD",
                            Type = "DatasetReference",
                        },
                        Name = "USDCurrency",
                    },
                    new AzureNative.DataFactory.Inputs.DataFlowSourceArgs
                    {
                        Dataset = new AzureNative.DataFactory.Inputs.DatasetReferenceArgs
                        {
                            ReferenceName = "CurrencyDatasetCAD",
                            Type = "DatasetReference",
                        },
                        Name = "CADSource",
                    },
                },
                Type = "MappingDataFlow",
            },
            ResourceGroupName = "exampleResourceGroup",
        });
    }

}

```

```go
package main

import (
	datafactory "github.com/pulumi/pulumi-azure-native/sdk/go/azure/datafactory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafactory.NewDataFlow(ctx, "dataFlow", &datafactory.DataFlowArgs{
			DataFlowName: pulumi.String("exampleDataFlow"),
			FactoryName:  pulumi.String("exampleFactoryName"),
			Properties: datafactory.MappingDataFlow{
				Description: "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
				Script:      "source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink",
				Sinks: []datafactory.DataFlowSink{
					datafactory.DataFlowSink{
						Dataset: datafactory.DatasetReference{
							ReferenceName: "USDOutput",
							Type:          "DatasetReference",
						},
						Name: "USDSink",
					},
					datafactory.DataFlowSink{
						Dataset: datafactory.DatasetReference{
							ReferenceName: "CADOutput",
							Type:          "DatasetReference",
						},
						Name: "CADSink",
					},
				},
				Sources: []datafactory.DataFlowSource{
					datafactory.DataFlowSource{
						Dataset: datafactory.DatasetReference{
							ReferenceName: "CurrencyDatasetUSD",
							Type:          "DatasetReference",
						},
						Name: "USDCurrency",
					},
					datafactory.DataFlowSource{
						Dataset: datafactory.DatasetReference{
							ReferenceName: "CurrencyDatasetCAD",
							Type:          "DatasetReference",
						},
						Name: "CADSource",
					},
				},
				Type: "MappingDataFlow",
			},
			ResourceGroupName: pulumi.String("exampleResourceGroup"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const dataFlow = new azure_native.datafactory.DataFlow("dataFlow", {
    dataFlowName: "exampleDataFlow",
    factoryName: "exampleFactoryName",
    properties: {
        description: "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
        script: `source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency
source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource
USDCurrency, CADSource union(byName: true)~> Union
Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn
NewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)
ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink
ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink`,
        sinks: [
            {
                dataset: {
                    referenceName: "USDOutput",
                    type: "DatasetReference",
                },
                name: "USDSink",
            },
            {
                dataset: {
                    referenceName: "CADOutput",
                    type: "DatasetReference",
                },
                name: "CADSink",
            },
        ],
        sources: [
            {
                dataset: {
                    referenceName: "CurrencyDatasetUSD",
                    type: "DatasetReference",
                },
                name: "USDCurrency",
            },
            {
                dataset: {
                    referenceName: "CurrencyDatasetCAD",
                    type: "DatasetReference",
                },
                name: "CADSource",
            },
        ],
        type: "MappingDataFlow",
    },
    resourceGroupName: "exampleResourceGroup",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

data_flow = azure_native.datafactory.DataFlow("dataFlow",
    data_flow_name="exampleDataFlow",
    factory_name="exampleFactoryName",
    properties=azure_native.datafactory.MappingDataFlowArgs(
        description="Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
        script="""source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency
source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource
USDCurrency, CADSource union(byName: true)~> Union
Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn
NewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)
ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink
ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink""",
        sinks=[
            azure_native.datafactory.DataFlowSinkArgs(
                dataset=azure_native.datafactory.DatasetReferenceArgs(
                    reference_name="USDOutput",
                    type="DatasetReference",
                ),
                name="USDSink",
            ),
            azure_native.datafactory.DataFlowSinkArgs(
                dataset=azure_native.datafactory.DatasetReferenceArgs(
                    reference_name="CADOutput",
                    type="DatasetReference",
                ),
                name="CADSink",
            ),
        ],
        sources=[
            azure_native.datafactory.DataFlowSourceArgs(
                dataset=azure_native.datafactory.DatasetReferenceArgs(
                    reference_name="CurrencyDatasetUSD",
                    type="DatasetReference",
                ),
                name="USDCurrency",
            ),
            azure_native.datafactory.DataFlowSourceArgs(
                dataset=azure_native.datafactory.DatasetReferenceArgs(
                    reference_name="CurrencyDatasetCAD",
                    type="DatasetReference",
                ),
                name="CADSource",
            ),
        ],
        type="MappingDataFlow",
    ),
    resource_group_name="exampleResourceGroup")

```

{{% /example %}}
{{% example %}}
### DataFlows_Update
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var dataFlow = new AzureNative.DataFactory.DataFlow("dataFlow", new AzureNative.DataFactory.DataFlowArgs
        {
            DataFlowName = "exampleDataFlow",
            FactoryName = "exampleFactoryName",
            Properties = new AzureNative.DataFactory.Inputs.MappingDataFlowArgs
            {
                Description = "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
                Script = @"source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency
source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource
USDCurrency, CADSource union(byName: true)~> Union
Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn
NewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)
ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink
ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink",
                Sinks = 
                {
                    new AzureNative.DataFactory.Inputs.DataFlowSinkArgs
                    {
                        Dataset = new AzureNative.DataFactory.Inputs.DatasetReferenceArgs
                        {
                            ReferenceName = "USDOutput",
                            Type = "DatasetReference",
                        },
                        Name = "USDSink",
                    },
                    new AzureNative.DataFactory.Inputs.DataFlowSinkArgs
                    {
                        Dataset = new AzureNative.DataFactory.Inputs.DatasetReferenceArgs
                        {
                            ReferenceName = "CADOutput",
                            Type = "DatasetReference",
                        },
                        Name = "CADSink",
                    },
                },
                Sources = 
                {
                    new AzureNative.DataFactory.Inputs.DataFlowSourceArgs
                    {
                        Dataset = new AzureNative.DataFactory.Inputs.DatasetReferenceArgs
                        {
                            ReferenceName = "CurrencyDatasetUSD",
                            Type = "DatasetReference",
                        },
                        Name = "USDCurrency",
                    },
                    new AzureNative.DataFactory.Inputs.DataFlowSourceArgs
                    {
                        Dataset = new AzureNative.DataFactory.Inputs.DatasetReferenceArgs
                        {
                            ReferenceName = "CurrencyDatasetCAD",
                            Type = "DatasetReference",
                        },
                        Name = "CADSource",
                    },
                },
                Type = "MappingDataFlow",
            },
            ResourceGroupName = "exampleResourceGroup",
        });
    }

}

```

```go
package main

import (
	datafactory "github.com/pulumi/pulumi-azure-native/sdk/go/azure/datafactory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafactory.NewDataFlow(ctx, "dataFlow", &datafactory.DataFlowArgs{
			DataFlowName: pulumi.String("exampleDataFlow"),
			FactoryName:  pulumi.String("exampleFactoryName"),
			Properties: datafactory.MappingDataFlow{
				Description: "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
				Script:      "source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink",
				Sinks: []datafactory.DataFlowSink{
					datafactory.DataFlowSink{
						Dataset: datafactory.DatasetReference{
							ReferenceName: "USDOutput",
							Type:          "DatasetReference",
						},
						Name: "USDSink",
					},
					datafactory.DataFlowSink{
						Dataset: datafactory.DatasetReference{
							ReferenceName: "CADOutput",
							Type:          "DatasetReference",
						},
						Name: "CADSink",
					},
				},
				Sources: []datafactory.DataFlowSource{
					datafactory.DataFlowSource{
						Dataset: datafactory.DatasetReference{
							ReferenceName: "CurrencyDatasetUSD",
							Type:          "DatasetReference",
						},
						Name: "USDCurrency",
					},
					datafactory.DataFlowSource{
						Dataset: datafactory.DatasetReference{
							ReferenceName: "CurrencyDatasetCAD",
							Type:          "DatasetReference",
						},
						Name: "CADSource",
					},
				},
				Type: "MappingDataFlow",
			},
			ResourceGroupName: pulumi.String("exampleResourceGroup"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const dataFlow = new azure_native.datafactory.DataFlow("dataFlow", {
    dataFlowName: "exampleDataFlow",
    factoryName: "exampleFactoryName",
    properties: {
        description: "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
        script: `source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency
source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource
USDCurrency, CADSource union(byName: true)~> Union
Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn
NewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)
ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink
ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink`,
        sinks: [
            {
                dataset: {
                    referenceName: "USDOutput",
                    type: "DatasetReference",
                },
                name: "USDSink",
            },
            {
                dataset: {
                    referenceName: "CADOutput",
                    type: "DatasetReference",
                },
                name: "CADSink",
            },
        ],
        sources: [
            {
                dataset: {
                    referenceName: "CurrencyDatasetUSD",
                    type: "DatasetReference",
                },
                name: "USDCurrency",
            },
            {
                dataset: {
                    referenceName: "CurrencyDatasetCAD",
                    type: "DatasetReference",
                },
                name: "CADSource",
            },
        ],
        type: "MappingDataFlow",
    },
    resourceGroupName: "exampleResourceGroup",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

data_flow = azure_native.datafactory.DataFlow("dataFlow",
    data_flow_name="exampleDataFlow",
    factory_name="exampleFactoryName",
    properties=azure_native.datafactory.MappingDataFlowArgs(
        description="Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
        script="""source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency
source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource
USDCurrency, CADSource union(byName: true)~> Union
Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn
NewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)
ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink
ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink""",
        sinks=[
            azure_native.datafactory.DataFlowSinkArgs(
                dataset=azure_native.datafactory.DatasetReferenceArgs(
                    reference_name="USDOutput",
                    type="DatasetReference",
                ),
                name="USDSink",
            ),
            azure_native.datafactory.DataFlowSinkArgs(
                dataset=azure_native.datafactory.DatasetReferenceArgs(
                    reference_name="CADOutput",
                    type="DatasetReference",
                ),
                name="CADSink",
            ),
        ],
        sources=[
            azure_native.datafactory.DataFlowSourceArgs(
                dataset=azure_native.datafactory.DatasetReferenceArgs(
                    reference_name="CurrencyDatasetUSD",
                    type="DatasetReference",
                ),
                name="USDCurrency",
            ),
            azure_native.datafactory.DataFlowSourceArgs(
                dataset=azure_native.datafactory.DatasetReferenceArgs(
                    reference_name="CurrencyDatasetCAD",
                    type="DatasetReference",
                ),
                name="CADSource",
            ),
        ],
        type="MappingDataFlow",
    ),
    resource_group_name="exampleResourceGroup")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:datafactory:DataFlow exampleDataFlow /subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/datasets/exampleDataset 
```

 */
@ResourceType(type="azure-native:datafactory:DataFlow")
public class DataFlow extends io.pulumi.resources.CustomResource {
    /**
     * Etag identifies change in the resource.
     */
    @OutputExport(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return Etag identifies change in the resource.
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * The resource name.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The resource name.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Data flow properties.
     */
    @OutputExport(name="properties", type=Object.class, parameters={})
    private Output<Object> properties;

    /**
     * @return Data flow properties.
     */
    public Output<Object> getProperties() {
        return this.properties;
    }
    /**
     * The resource type.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The resource type.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataFlow(String name, DataFlowArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:datafactory:DataFlow", name, args == null ? DataFlowArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private DataFlow(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:datafactory:DataFlow", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:datafactory/v20180601:DataFlow").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataFlow get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new DataFlow(name, id, options);
    }
}
