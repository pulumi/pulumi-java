// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.security;

import io.pulumi.azurenative.security.inputs.StandardComponentPropertiesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StandardArgs extends io.pulumi.resources.ResourceArgs {

    public static final StandardArgs Empty = new StandardArgs();

    /**
     * category of the standard provided
     * 
     */
    @InputImport(name="category")
      private final @Nullable Input<String> category;

    public Input<String> getCategory() {
        return this.category == null ? Input.empty() : this.category;
    }

    /**
     * List of component objects containing component unique keys (such as assessment keys) to apply to standard scope.  Currently only supports assessment keys.
     * 
     */
    @InputImport(name="components")
      private final @Nullable Input<List<StandardComponentPropertiesArgs>> components;

    public Input<List<StandardComponentPropertiesArgs>> getComponents() {
        return this.components == null ? Input.empty() : this.components;
    }

    /**
     * description of the standard
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * display name of the standard, equivalent to the standardId
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * Kind of the resource
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Input<String> kind;

    public Input<String> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    /**
     * Location where the resource is stored
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Security Standard key - unique key for the standard type
     * 
     */
    @InputImport(name="standardId")
      private final @Nullable Input<String> standardId;

    public Input<String> getStandardId() {
        return this.standardId == null ? Input.empty() : this.standardId;
    }

    /**
     * A list of key value pairs that describe the resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public StandardArgs(
        @Nullable Input<String> category,
        @Nullable Input<List<StandardComponentPropertiesArgs>> components,
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        @Nullable Input<String> kind,
        @Nullable Input<String> location,
        Input<String> resourceGroupName,
        @Nullable Input<String> standardId,
        @Nullable Input<Map<String,String>> tags) {
        this.category = category;
        this.components = components;
        this.description = description;
        this.displayName = displayName;
        this.kind = kind;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.standardId = standardId;
        this.tags = tags;
    }

    private StandardArgs() {
        this.category = Input.empty();
        this.components = Input.empty();
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.kind = Input.empty();
        this.location = Input.empty();
        this.resourceGroupName = Input.empty();
        this.standardId = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> category;
        private @Nullable Input<List<StandardComponentPropertiesArgs>> components;
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private @Nullable Input<String> kind;
        private @Nullable Input<String> location;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> standardId;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.components = defaults.components;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.standardId = defaults.standardId;
    	      this.tags = defaults.tags;
        }

        public Builder category(@Nullable Input<String> category) {
            this.category = category;
            return this;
        }

        public Builder category(@Nullable String category) {
            this.category = Input.ofNullable(category);
            return this;
        }

        public Builder components(@Nullable Input<List<StandardComponentPropertiesArgs>> components) {
            this.components = components;
            return this;
        }

        public Builder components(@Nullable List<StandardComponentPropertiesArgs> components) {
            this.components = Input.ofNullable(components);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder displayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder kind(@Nullable Input<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder standardId(@Nullable Input<String> standardId) {
            this.standardId = standardId;
            return this;
        }

        public Builder standardId(@Nullable String standardId) {
            this.standardId = Input.ofNullable(standardId);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public StandardArgs build() {
            return new StandardArgs(category, components, description, displayName, kind, location, resourceGroupName, standardId, tags);
        }
    }
}
