// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media;

import io.pulumi.azurenative.media.inputs.HlsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LiveOutputArgs extends io.pulumi.resources.ResourceArgs {

    public static final LiveOutputArgs Empty = new LiveOutputArgs();

    /**
     * The Media Services account name.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> getAccountName() {
        return this.accountName;
    }

    /**
     * ISO 8601 time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use PT1H30M to indicate 1 hour and 30 minutes of archive window.
     * 
     */
    @Import(name="archiveWindowLength", required=true)
      private final Output<String> archiveWindowLength;

    public Output<String> getArchiveWindowLength() {
        return this.archiveWindowLength;
    }

    /**
     * The asset that the live output will write to.
     * 
     */
    @Import(name="assetName", required=true)
      private final Output<String> assetName;

    public Output<String> getAssetName() {
        return this.assetName;
    }

    /**
     * The description of the live output.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * HTTP Live Streaming (HLS) packing setting for the live output.
     * 
     */
    @Import(name="hls")
      private final @Nullable Output<HlsArgs> hls;

    public Output<HlsArgs> getHls() {
        return this.hls == null ? Output.empty() : this.hls;
    }

    /**
     * The name of the live event, maximum length is 32.
     * 
     */
    @Import(name="liveEventName", required=true)
      private final Output<String> liveEventName;

    public Output<String> getLiveEventName() {
        return this.liveEventName;
    }

    /**
     * The name of the live output.
     * 
     */
    @Import(name="liveOutputName")
      private final @Nullable Output<String> liveOutputName;

    public Output<String> getLiveOutputName() {
        return this.liveOutputName == null ? Output.empty() : this.liveOutputName;
    }

    /**
     * The manifest file name. If not provided, the service will generate one automatically.
     * 
     */
    @Import(name="manifestName")
      private final @Nullable Output<String> manifestName;

    public Output<String> getManifestName() {
        return this.manifestName == null ? Output.empty() : this.manifestName;
    }

    /**
     * The initial timestamp that the live output will start at, any content before this value will not be archived.
     * 
     */
    @Import(name="outputSnapTime")
      private final @Nullable Output<Double> outputSnapTime;

    public Output<Double> getOutputSnapTime() {
        return this.outputSnapTime == null ? Output.empty() : this.outputSnapTime;
    }

    /**
     * The name of the resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    public LiveOutputArgs(
        Output<String> accountName,
        Output<String> archiveWindowLength,
        Output<String> assetName,
        @Nullable Output<String> description,
        @Nullable Output<HlsArgs> hls,
        Output<String> liveEventName,
        @Nullable Output<String> liveOutputName,
        @Nullable Output<String> manifestName,
        @Nullable Output<Double> outputSnapTime,
        Output<String> resourceGroupName) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.archiveWindowLength = Objects.requireNonNull(archiveWindowLength, "expected parameter 'archiveWindowLength' to be non-null");
        this.assetName = Objects.requireNonNull(assetName, "expected parameter 'assetName' to be non-null");
        this.description = description;
        this.hls = hls;
        this.liveEventName = Objects.requireNonNull(liveEventName, "expected parameter 'liveEventName' to be non-null");
        this.liveOutputName = liveOutputName;
        this.manifestName = manifestName;
        this.outputSnapTime = outputSnapTime;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private LiveOutputArgs() {
        this.accountName = Output.empty();
        this.archiveWindowLength = Output.empty();
        this.assetName = Output.empty();
        this.description = Output.empty();
        this.hls = Output.empty();
        this.liveEventName = Output.empty();
        this.liveOutputName = Output.empty();
        this.manifestName = Output.empty();
        this.outputSnapTime = Output.empty();
        this.resourceGroupName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private Output<String> archiveWindowLength;
        private Output<String> assetName;
        private @Nullable Output<String> description;
        private @Nullable Output<HlsArgs> hls;
        private Output<String> liveEventName;
        private @Nullable Output<String> liveOutputName;
        private @Nullable Output<String> manifestName;
        private @Nullable Output<Double> outputSnapTime;
        private Output<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(LiveOutputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.archiveWindowLength = defaults.archiveWindowLength;
    	      this.assetName = defaults.assetName;
    	      this.description = defaults.description;
    	      this.hls = defaults.hls;
    	      this.liveEventName = defaults.liveEventName;
    	      this.liveOutputName = defaults.liveOutputName;
    	      this.manifestName = defaults.manifestName;
    	      this.outputSnapTime = defaults.outputSnapTime;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }

        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }

        public Builder archiveWindowLength(Output<String> archiveWindowLength) {
            this.archiveWindowLength = Objects.requireNonNull(archiveWindowLength);
            return this;
        }

        public Builder archiveWindowLength(String archiveWindowLength) {
            this.archiveWindowLength = Output.of(Objects.requireNonNull(archiveWindowLength));
            return this;
        }

        public Builder assetName(Output<String> assetName) {
            this.assetName = Objects.requireNonNull(assetName);
            return this;
        }

        public Builder assetName(String assetName) {
            this.assetName = Output.of(Objects.requireNonNull(assetName));
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder hls(@Nullable Output<HlsArgs> hls) {
            this.hls = hls;
            return this;
        }

        public Builder hls(@Nullable HlsArgs hls) {
            this.hls = Output.ofNullable(hls);
            return this;
        }

        public Builder liveEventName(Output<String> liveEventName) {
            this.liveEventName = Objects.requireNonNull(liveEventName);
            return this;
        }

        public Builder liveEventName(String liveEventName) {
            this.liveEventName = Output.of(Objects.requireNonNull(liveEventName));
            return this;
        }

        public Builder liveOutputName(@Nullable Output<String> liveOutputName) {
            this.liveOutputName = liveOutputName;
            return this;
        }

        public Builder liveOutputName(@Nullable String liveOutputName) {
            this.liveOutputName = Output.ofNullable(liveOutputName);
            return this;
        }

        public Builder manifestName(@Nullable Output<String> manifestName) {
            this.manifestName = manifestName;
            return this;
        }

        public Builder manifestName(@Nullable String manifestName) {
            this.manifestName = Output.ofNullable(manifestName);
            return this;
        }

        public Builder outputSnapTime(@Nullable Output<Double> outputSnapTime) {
            this.outputSnapTime = outputSnapTime;
            return this;
        }

        public Builder outputSnapTime(@Nullable Double outputSnapTime) {
            this.outputSnapTime = Output.ofNullable(outputSnapTime);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public LiveOutputArgs build() {
            return new LiveOutputArgs(accountName, archiveWindowLength, assetName, description, hls, liveEventName, liveOutputName, manifestName, outputSnapTime, resourceGroupName);
        }
    }
}
