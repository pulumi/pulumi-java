// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media;

import io.pulumi.azurenative.media.inputs.HlsArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LiveOutputArgs extends io.pulumi.resources.ResourceArgs {

    public static final LiveOutputArgs Empty = new LiveOutputArgs();

    /**
     * The Media Services account name.
     * 
     */
    @InputImport(name="accountName", required=true)
    private final Input<String> accountName;

    public Input<String> getAccountName() {
        return this.accountName;
    }

    /**
     * ISO 8601 time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use PT1H30M to indicate 1 hour and 30 minutes of archive window.
     * 
     */
    @InputImport(name="archiveWindowLength", required=true)
    private final Input<String> archiveWindowLength;

    public Input<String> getArchiveWindowLength() {
        return this.archiveWindowLength;
    }

    /**
     * The asset that the live output will write to.
     * 
     */
    @InputImport(name="assetName", required=true)
    private final Input<String> assetName;

    public Input<String> getAssetName() {
        return this.assetName;
    }

    /**
     * The description of the live output.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * HTTP Live Streaming (HLS) packing setting for the live output.
     * 
     */
    @InputImport(name="hls")
    private final @Nullable Input<HlsArgs> hls;

    public Input<HlsArgs> getHls() {
        return this.hls == null ? Input.empty() : this.hls;
    }

    /**
     * The name of the live event, maximum length is 32.
     * 
     */
    @InputImport(name="liveEventName", required=true)
    private final Input<String> liveEventName;

    public Input<String> getLiveEventName() {
        return this.liveEventName;
    }

    /**
     * The name of the live output.
     * 
     */
    @InputImport(name="liveOutputName")
    private final @Nullable Input<String> liveOutputName;

    public Input<String> getLiveOutputName() {
        return this.liveOutputName == null ? Input.empty() : this.liveOutputName;
    }

    /**
     * The manifest file name. If not provided, the service will generate one automatically.
     * 
     */
    @InputImport(name="manifestName")
    private final @Nullable Input<String> manifestName;

    public Input<String> getManifestName() {
        return this.manifestName == null ? Input.empty() : this.manifestName;
    }

    /**
     * The initial timestamp that the live output will start at, any content before this value will not be archived.
     * 
     */
    @InputImport(name="outputSnapTime")
    private final @Nullable Input<Double> outputSnapTime;

    public Input<Double> getOutputSnapTime() {
        return this.outputSnapTime == null ? Input.empty() : this.outputSnapTime;
    }

    /**
     * The name of the resource group within the Azure subscription.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    public LiveOutputArgs(
        Input<String> accountName,
        Input<String> archiveWindowLength,
        Input<String> assetName,
        @Nullable Input<String> description,
        @Nullable Input<HlsArgs> hls,
        Input<String> liveEventName,
        @Nullable Input<String> liveOutputName,
        @Nullable Input<String> manifestName,
        @Nullable Input<Double> outputSnapTime,
        Input<String> resourceGroupName) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.archiveWindowLength = Objects.requireNonNull(archiveWindowLength, "expected parameter 'archiveWindowLength' to be non-null");
        this.assetName = Objects.requireNonNull(assetName, "expected parameter 'assetName' to be non-null");
        this.description = description;
        this.hls = hls;
        this.liveEventName = Objects.requireNonNull(liveEventName, "expected parameter 'liveEventName' to be non-null");
        this.liveOutputName = liveOutputName;
        this.manifestName = manifestName;
        this.outputSnapTime = outputSnapTime;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private LiveOutputArgs() {
        this.accountName = Input.empty();
        this.archiveWindowLength = Input.empty();
        this.assetName = Input.empty();
        this.description = Input.empty();
        this.hls = Input.empty();
        this.liveEventName = Input.empty();
        this.liveOutputName = Input.empty();
        this.manifestName = Input.empty();
        this.outputSnapTime = Input.empty();
        this.resourceGroupName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> accountName;
        private Input<String> archiveWindowLength;
        private Input<String> assetName;
        private @Nullable Input<String> description;
        private @Nullable Input<HlsArgs> hls;
        private Input<String> liveEventName;
        private @Nullable Input<String> liveOutputName;
        private @Nullable Input<String> manifestName;
        private @Nullable Input<Double> outputSnapTime;
        private Input<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(LiveOutputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.archiveWindowLength = defaults.archiveWindowLength;
    	      this.assetName = defaults.assetName;
    	      this.description = defaults.description;
    	      this.hls = defaults.hls;
    	      this.liveEventName = defaults.liveEventName;
    	      this.liveOutputName = defaults.liveOutputName;
    	      this.manifestName = defaults.manifestName;
    	      this.outputSnapTime = defaults.outputSnapTime;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder setAccountName(Input<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }

        public Builder setAccountName(String accountName) {
            this.accountName = Input.of(Objects.requireNonNull(accountName));
            return this;
        }

        public Builder setArchiveWindowLength(Input<String> archiveWindowLength) {
            this.archiveWindowLength = Objects.requireNonNull(archiveWindowLength);
            return this;
        }

        public Builder setArchiveWindowLength(String archiveWindowLength) {
            this.archiveWindowLength = Input.of(Objects.requireNonNull(archiveWindowLength));
            return this;
        }

        public Builder setAssetName(Input<String> assetName) {
            this.assetName = Objects.requireNonNull(assetName);
            return this;
        }

        public Builder setAssetName(String assetName) {
            this.assetName = Input.of(Objects.requireNonNull(assetName));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setHls(@Nullable Input<HlsArgs> hls) {
            this.hls = hls;
            return this;
        }

        public Builder setHls(@Nullable HlsArgs hls) {
            this.hls = Input.ofNullable(hls);
            return this;
        }

        public Builder setLiveEventName(Input<String> liveEventName) {
            this.liveEventName = Objects.requireNonNull(liveEventName);
            return this;
        }

        public Builder setLiveEventName(String liveEventName) {
            this.liveEventName = Input.of(Objects.requireNonNull(liveEventName));
            return this;
        }

        public Builder setLiveOutputName(@Nullable Input<String> liveOutputName) {
            this.liveOutputName = liveOutputName;
            return this;
        }

        public Builder setLiveOutputName(@Nullable String liveOutputName) {
            this.liveOutputName = Input.ofNullable(liveOutputName);
            return this;
        }

        public Builder setManifestName(@Nullable Input<String> manifestName) {
            this.manifestName = manifestName;
            return this;
        }

        public Builder setManifestName(@Nullable String manifestName) {
            this.manifestName = Input.ofNullable(manifestName);
            return this;
        }

        public Builder setOutputSnapTime(@Nullable Input<Double> outputSnapTime) {
            this.outputSnapTime = outputSnapTime;
            return this;
        }

        public Builder setOutputSnapTime(@Nullable Double outputSnapTime) {
            this.outputSnapTime = Input.ofNullable(outputSnapTime);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public LiveOutputArgs build() {
            return new LiveOutputArgs(accountName, archiveWindowLength, assetName, description, hls, liveEventName, liveOutputName, manifestName, outputSnapTime, resourceGroupName);
        }
    }
}
