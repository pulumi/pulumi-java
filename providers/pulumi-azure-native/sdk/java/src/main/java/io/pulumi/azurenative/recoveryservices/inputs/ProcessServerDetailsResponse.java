// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.recoveryservices.inputs;

import io.pulumi.azurenative.recoveryservices.inputs.HealthErrorResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ProcessServerDetailsResponse extends io.pulumi.resources.InvokeArgs {

    public static final ProcessServerDetailsResponse Empty = new ProcessServerDetailsResponse();

    @InputImport(name="availableMemoryInBytes", required=true)
    private final Double availableMemoryInBytes;

    public Double getAvailableMemoryInBytes() {
        return this.availableMemoryInBytes;
    }

    @InputImport(name="availableSpaceInBytes", required=true)
    private final Double availableSpaceInBytes;

    public Double getAvailableSpaceInBytes() {
        return this.availableSpaceInBytes;
    }

    @InputImport(name="freeSpacePercentage", required=true)
    private final Double freeSpacePercentage;

    public Double getFreeSpacePercentage() {
        return this.freeSpacePercentage;
    }

    @InputImport(name="health", required=true)
    private final String health;

    public String getHealth() {
        return this.health;
    }

    @InputImport(name="healthErrors", required=true)
    private final List<HealthErrorResponse> healthErrors;

    public List<HealthErrorResponse> getHealthErrors() {
        return this.healthErrors;
    }

    @InputImport(name="historicHealth", required=true)
    private final String historicHealth;

    public String getHistoricHealth() {
        return this.historicHealth;
    }

    @InputImport(name="id", required=true)
    private final String id;

    public String getId() {
        return this.id;
    }

    @InputImport(name="lastHeartbeatUtc", required=true)
    private final String lastHeartbeatUtc;

    public String getLastHeartbeatUtc() {
        return this.lastHeartbeatUtc;
    }

    @InputImport(name="memoryUsagePercentage", required=true)
    private final Double memoryUsagePercentage;

    public Double getMemoryUsagePercentage() {
        return this.memoryUsagePercentage;
    }

    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    @InputImport(name="processorUsagePercentage", required=true)
    private final Double processorUsagePercentage;

    public Double getProcessorUsagePercentage() {
        return this.processorUsagePercentage;
    }

    @InputImport(name="throughputInBytes", required=true)
    private final Double throughputInBytes;

    public Double getThroughputInBytes() {
        return this.throughputInBytes;
    }

    @InputImport(name="throughputUploadPendingDataInBytes", required=true)
    private final Double throughputUploadPendingDataInBytes;

    public Double getThroughputUploadPendingDataInBytes() {
        return this.throughputUploadPendingDataInBytes;
    }

    @InputImport(name="totalMemoryInBytes", required=true)
    private final Double totalMemoryInBytes;

    public Double getTotalMemoryInBytes() {
        return this.totalMemoryInBytes;
    }

    @InputImport(name="totalSpaceInBytes", required=true)
    private final Double totalSpaceInBytes;

    public Double getTotalSpaceInBytes() {
        return this.totalSpaceInBytes;
    }

    @InputImport(name="usedMemoryInBytes", required=true)
    private final Double usedMemoryInBytes;

    public Double getUsedMemoryInBytes() {
        return this.usedMemoryInBytes;
    }

    @InputImport(name="usedSpaceInBytes", required=true)
    private final Double usedSpaceInBytes;

    public Double getUsedSpaceInBytes() {
        return this.usedSpaceInBytes;
    }

    @InputImport(name="version", required=true)
    private final String version;

    public String getVersion() {
        return this.version;
    }

    public ProcessServerDetailsResponse(
        Double availableMemoryInBytes,
        Double availableSpaceInBytes,
        Double freeSpacePercentage,
        String health,
        List<HealthErrorResponse> healthErrors,
        String historicHealth,
        String id,
        String lastHeartbeatUtc,
        Double memoryUsagePercentage,
        String name,
        Double processorUsagePercentage,
        Double throughputInBytes,
        Double throughputUploadPendingDataInBytes,
        Double totalMemoryInBytes,
        Double totalSpaceInBytes,
        Double usedMemoryInBytes,
        Double usedSpaceInBytes,
        String version) {
        this.availableMemoryInBytes = Objects.requireNonNull(availableMemoryInBytes, "expected parameter 'availableMemoryInBytes' to be non-null");
        this.availableSpaceInBytes = Objects.requireNonNull(availableSpaceInBytes, "expected parameter 'availableSpaceInBytes' to be non-null");
        this.freeSpacePercentage = Objects.requireNonNull(freeSpacePercentage, "expected parameter 'freeSpacePercentage' to be non-null");
        this.health = Objects.requireNonNull(health, "expected parameter 'health' to be non-null");
        this.healthErrors = Objects.requireNonNull(healthErrors, "expected parameter 'healthErrors' to be non-null");
        this.historicHealth = Objects.requireNonNull(historicHealth, "expected parameter 'historicHealth' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.lastHeartbeatUtc = Objects.requireNonNull(lastHeartbeatUtc, "expected parameter 'lastHeartbeatUtc' to be non-null");
        this.memoryUsagePercentage = Objects.requireNonNull(memoryUsagePercentage, "expected parameter 'memoryUsagePercentage' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.processorUsagePercentage = Objects.requireNonNull(processorUsagePercentage, "expected parameter 'processorUsagePercentage' to be non-null");
        this.throughputInBytes = Objects.requireNonNull(throughputInBytes, "expected parameter 'throughputInBytes' to be non-null");
        this.throughputUploadPendingDataInBytes = Objects.requireNonNull(throughputUploadPendingDataInBytes, "expected parameter 'throughputUploadPendingDataInBytes' to be non-null");
        this.totalMemoryInBytes = Objects.requireNonNull(totalMemoryInBytes, "expected parameter 'totalMemoryInBytes' to be non-null");
        this.totalSpaceInBytes = Objects.requireNonNull(totalSpaceInBytes, "expected parameter 'totalSpaceInBytes' to be non-null");
        this.usedMemoryInBytes = Objects.requireNonNull(usedMemoryInBytes, "expected parameter 'usedMemoryInBytes' to be non-null");
        this.usedSpaceInBytes = Objects.requireNonNull(usedSpaceInBytes, "expected parameter 'usedSpaceInBytes' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
    }

    private ProcessServerDetailsResponse() {
        this.availableMemoryInBytes = null;
        this.availableSpaceInBytes = null;
        this.freeSpacePercentage = null;
        this.health = null;
        this.healthErrors = List.of();
        this.historicHealth = null;
        this.id = null;
        this.lastHeartbeatUtc = null;
        this.memoryUsagePercentage = null;
        this.name = null;
        this.processorUsagePercentage = null;
        this.throughputInBytes = null;
        this.throughputUploadPendingDataInBytes = null;
        this.totalMemoryInBytes = null;
        this.totalSpaceInBytes = null;
        this.usedMemoryInBytes = null;
        this.usedSpaceInBytes = null;
        this.version = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProcessServerDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double availableMemoryInBytes;
        private Double availableSpaceInBytes;
        private Double freeSpacePercentage;
        private String health;
        private List<HealthErrorResponse> healthErrors;
        private String historicHealth;
        private String id;
        private String lastHeartbeatUtc;
        private Double memoryUsagePercentage;
        private String name;
        private Double processorUsagePercentage;
        private Double throughputInBytes;
        private Double throughputUploadPendingDataInBytes;
        private Double totalMemoryInBytes;
        private Double totalSpaceInBytes;
        private Double usedMemoryInBytes;
        private Double usedSpaceInBytes;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(ProcessServerDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableMemoryInBytes = defaults.availableMemoryInBytes;
    	      this.availableSpaceInBytes = defaults.availableSpaceInBytes;
    	      this.freeSpacePercentage = defaults.freeSpacePercentage;
    	      this.health = defaults.health;
    	      this.healthErrors = defaults.healthErrors;
    	      this.historicHealth = defaults.historicHealth;
    	      this.id = defaults.id;
    	      this.lastHeartbeatUtc = defaults.lastHeartbeatUtc;
    	      this.memoryUsagePercentage = defaults.memoryUsagePercentage;
    	      this.name = defaults.name;
    	      this.processorUsagePercentage = defaults.processorUsagePercentage;
    	      this.throughputInBytes = defaults.throughputInBytes;
    	      this.throughputUploadPendingDataInBytes = defaults.throughputUploadPendingDataInBytes;
    	      this.totalMemoryInBytes = defaults.totalMemoryInBytes;
    	      this.totalSpaceInBytes = defaults.totalSpaceInBytes;
    	      this.usedMemoryInBytes = defaults.usedMemoryInBytes;
    	      this.usedSpaceInBytes = defaults.usedSpaceInBytes;
    	      this.version = defaults.version;
        }

        public Builder setAvailableMemoryInBytes(Double availableMemoryInBytes) {
            this.availableMemoryInBytes = Objects.requireNonNull(availableMemoryInBytes);
            return this;
        }

        public Builder setAvailableSpaceInBytes(Double availableSpaceInBytes) {
            this.availableSpaceInBytes = Objects.requireNonNull(availableSpaceInBytes);
            return this;
        }

        public Builder setFreeSpacePercentage(Double freeSpacePercentage) {
            this.freeSpacePercentage = Objects.requireNonNull(freeSpacePercentage);
            return this;
        }

        public Builder setHealth(String health) {
            this.health = Objects.requireNonNull(health);
            return this;
        }

        public Builder setHealthErrors(List<HealthErrorResponse> healthErrors) {
            this.healthErrors = Objects.requireNonNull(healthErrors);
            return this;
        }

        public Builder setHistoricHealth(String historicHealth) {
            this.historicHealth = Objects.requireNonNull(historicHealth);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLastHeartbeatUtc(String lastHeartbeatUtc) {
            this.lastHeartbeatUtc = Objects.requireNonNull(lastHeartbeatUtc);
            return this;
        }

        public Builder setMemoryUsagePercentage(Double memoryUsagePercentage) {
            this.memoryUsagePercentage = Objects.requireNonNull(memoryUsagePercentage);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProcessorUsagePercentage(Double processorUsagePercentage) {
            this.processorUsagePercentage = Objects.requireNonNull(processorUsagePercentage);
            return this;
        }

        public Builder setThroughputInBytes(Double throughputInBytes) {
            this.throughputInBytes = Objects.requireNonNull(throughputInBytes);
            return this;
        }

        public Builder setThroughputUploadPendingDataInBytes(Double throughputUploadPendingDataInBytes) {
            this.throughputUploadPendingDataInBytes = Objects.requireNonNull(throughputUploadPendingDataInBytes);
            return this;
        }

        public Builder setTotalMemoryInBytes(Double totalMemoryInBytes) {
            this.totalMemoryInBytes = Objects.requireNonNull(totalMemoryInBytes);
            return this;
        }

        public Builder setTotalSpaceInBytes(Double totalSpaceInBytes) {
            this.totalSpaceInBytes = Objects.requireNonNull(totalSpaceInBytes);
            return this;
        }

        public Builder setUsedMemoryInBytes(Double usedMemoryInBytes) {
            this.usedMemoryInBytes = Objects.requireNonNull(usedMemoryInBytes);
            return this;
        }

        public Builder setUsedSpaceInBytes(Double usedSpaceInBytes) {
            this.usedSpaceInBytes = Objects.requireNonNull(usedSpaceInBytes);
            return this;
        }

        public Builder setVersion(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public ProcessServerDetailsResponse build() {
            return new ProcessServerDetailsResponse(availableMemoryInBytes, availableSpaceInBytes, freeSpacePercentage, health, healthErrors, historicHealth, id, lastHeartbeatUtc, memoryUsagePercentage, name, processorUsagePercentage, throughputInBytes, throughputUploadPendingDataInBytes, totalMemoryInBytes, totalSpaceInBytes, usedMemoryInBytes, usedSpaceInBytes, version);
        }
    }
}
