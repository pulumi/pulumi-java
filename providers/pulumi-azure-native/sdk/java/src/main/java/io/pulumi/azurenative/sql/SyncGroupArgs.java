// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.sql.enums.SyncConflictResolutionPolicy;
import io.pulumi.azurenative.sql.inputs.SkuArgs;
import io.pulumi.azurenative.sql.inputs.SyncGroupSchemaArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SyncGroupArgs extends io.pulumi.resources.ResourceArgs {

    public static final SyncGroupArgs Empty = new SyncGroupArgs();

    /**
     * Conflict logging retention period.
     * 
     */
    @Import(name="conflictLoggingRetentionInDays")
      private final @Nullable Output<Integer> conflictLoggingRetentionInDays;

    public Output<Integer> getConflictLoggingRetentionInDays() {
        return this.conflictLoggingRetentionInDays == null ? Output.empty() : this.conflictLoggingRetentionInDays;
    }

    /**
     * Conflict resolution policy of the sync group.
     * 
     */
    @Import(name="conflictResolutionPolicy")
      private final @Nullable Output<Either<String,SyncConflictResolutionPolicy>> conflictResolutionPolicy;

    public Output<Either<String,SyncConflictResolutionPolicy>> getConflictResolutionPolicy() {
        return this.conflictResolutionPolicy == null ? Output.empty() : this.conflictResolutionPolicy;
    }

    /**
     * The name of the database on which the sync group is hosted.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName;
    }

    /**
     * If conflict logging is enabled.
     * 
     */
    @Import(name="enableConflictLogging")
      private final @Nullable Output<Boolean> enableConflictLogging;

    public Output<Boolean> getEnableConflictLogging() {
        return this.enableConflictLogging == null ? Output.empty() : this.enableConflictLogging;
    }

    /**
     * Password for the sync group hub database credential.
     * 
     */
    @Import(name="hubDatabasePassword")
      private final @Nullable Output<String> hubDatabasePassword;

    public Output<String> getHubDatabasePassword() {
        return this.hubDatabasePassword == null ? Output.empty() : this.hubDatabasePassword;
    }

    /**
     * User name for the sync group hub database credential.
     * 
     */
    @Import(name="hubDatabaseUserName")
      private final @Nullable Output<String> hubDatabaseUserName;

    public Output<String> getHubDatabaseUserName() {
        return this.hubDatabaseUserName == null ? Output.empty() : this.hubDatabaseUserName;
    }

    /**
     * Sync interval of the sync group.
     * 
     */
    @Import(name="interval")
      private final @Nullable Output<Integer> interval;

    public Output<Integer> getInterval() {
        return this.interval == null ? Output.empty() : this.interval;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Sync schema of the sync group.
     * 
     */
    @Import(name="schema")
      private final @Nullable Output<SyncGroupSchemaArgs> schema;

    public Output<SyncGroupSchemaArgs> getSchema() {
        return this.schema == null ? Output.empty() : this.schema;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
      private final Output<String> serverName;

    public Output<String> getServerName() {
        return this.serverName;
    }

    /**
     * The name and capacity of the SKU.
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<SkuArgs> sku;

    public Output<SkuArgs> getSku() {
        return this.sku == null ? Output.empty() : this.sku;
    }

    /**
     * ARM resource id of the sync database in the sync group.
     * 
     */
    @Import(name="syncDatabaseId")
      private final @Nullable Output<String> syncDatabaseId;

    public Output<String> getSyncDatabaseId() {
        return this.syncDatabaseId == null ? Output.empty() : this.syncDatabaseId;
    }

    /**
     * The name of the sync group.
     * 
     */
    @Import(name="syncGroupName")
      private final @Nullable Output<String> syncGroupName;

    public Output<String> getSyncGroupName() {
        return this.syncGroupName == null ? Output.empty() : this.syncGroupName;
    }

    /**
     * If use private link connection is enabled.
     * 
     */
    @Import(name="usePrivateLinkConnection")
      private final @Nullable Output<Boolean> usePrivateLinkConnection;

    public Output<Boolean> getUsePrivateLinkConnection() {
        return this.usePrivateLinkConnection == null ? Output.empty() : this.usePrivateLinkConnection;
    }

    public SyncGroupArgs(
        @Nullable Output<Integer> conflictLoggingRetentionInDays,
        @Nullable Output<Either<String,SyncConflictResolutionPolicy>> conflictResolutionPolicy,
        Output<String> databaseName,
        @Nullable Output<Boolean> enableConflictLogging,
        @Nullable Output<String> hubDatabasePassword,
        @Nullable Output<String> hubDatabaseUserName,
        @Nullable Output<Integer> interval,
        Output<String> resourceGroupName,
        @Nullable Output<SyncGroupSchemaArgs> schema,
        Output<String> serverName,
        @Nullable Output<SkuArgs> sku,
        @Nullable Output<String> syncDatabaseId,
        @Nullable Output<String> syncGroupName,
        @Nullable Output<Boolean> usePrivateLinkConnection) {
        this.conflictLoggingRetentionInDays = conflictLoggingRetentionInDays;
        this.conflictResolutionPolicy = conflictResolutionPolicy;
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.enableConflictLogging = enableConflictLogging;
        this.hubDatabasePassword = hubDatabasePassword;
        this.hubDatabaseUserName = hubDatabaseUserName;
        this.interval = interval;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.schema = schema;
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
        this.sku = sku;
        this.syncDatabaseId = syncDatabaseId;
        this.syncGroupName = syncGroupName;
        this.usePrivateLinkConnection = usePrivateLinkConnection;
    }

    private SyncGroupArgs() {
        this.conflictLoggingRetentionInDays = Output.empty();
        this.conflictResolutionPolicy = Output.empty();
        this.databaseName = Output.empty();
        this.enableConflictLogging = Output.empty();
        this.hubDatabasePassword = Output.empty();
        this.hubDatabaseUserName = Output.empty();
        this.interval = Output.empty();
        this.resourceGroupName = Output.empty();
        this.schema = Output.empty();
        this.serverName = Output.empty();
        this.sku = Output.empty();
        this.syncDatabaseId = Output.empty();
        this.syncGroupName = Output.empty();
        this.usePrivateLinkConnection = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyncGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> conflictLoggingRetentionInDays;
        private @Nullable Output<Either<String,SyncConflictResolutionPolicy>> conflictResolutionPolicy;
        private Output<String> databaseName;
        private @Nullable Output<Boolean> enableConflictLogging;
        private @Nullable Output<String> hubDatabasePassword;
        private @Nullable Output<String> hubDatabaseUserName;
        private @Nullable Output<Integer> interval;
        private Output<String> resourceGroupName;
        private @Nullable Output<SyncGroupSchemaArgs> schema;
        private Output<String> serverName;
        private @Nullable Output<SkuArgs> sku;
        private @Nullable Output<String> syncDatabaseId;
        private @Nullable Output<String> syncGroupName;
        private @Nullable Output<Boolean> usePrivateLinkConnection;

        public Builder() {
    	      // Empty
        }

        public Builder(SyncGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conflictLoggingRetentionInDays = defaults.conflictLoggingRetentionInDays;
    	      this.conflictResolutionPolicy = defaults.conflictResolutionPolicy;
    	      this.databaseName = defaults.databaseName;
    	      this.enableConflictLogging = defaults.enableConflictLogging;
    	      this.hubDatabasePassword = defaults.hubDatabasePassword;
    	      this.hubDatabaseUserName = defaults.hubDatabaseUserName;
    	      this.interval = defaults.interval;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.schema = defaults.schema;
    	      this.serverName = defaults.serverName;
    	      this.sku = defaults.sku;
    	      this.syncDatabaseId = defaults.syncDatabaseId;
    	      this.syncGroupName = defaults.syncGroupName;
    	      this.usePrivateLinkConnection = defaults.usePrivateLinkConnection;
        }

        public Builder conflictLoggingRetentionInDays(@Nullable Output<Integer> conflictLoggingRetentionInDays) {
            this.conflictLoggingRetentionInDays = conflictLoggingRetentionInDays;
            return this;
        }

        public Builder conflictLoggingRetentionInDays(@Nullable Integer conflictLoggingRetentionInDays) {
            this.conflictLoggingRetentionInDays = Output.ofNullable(conflictLoggingRetentionInDays);
            return this;
        }

        public Builder conflictResolutionPolicy(@Nullable Output<Either<String,SyncConflictResolutionPolicy>> conflictResolutionPolicy) {
            this.conflictResolutionPolicy = conflictResolutionPolicy;
            return this;
        }

        public Builder conflictResolutionPolicy(@Nullable Either<String,SyncConflictResolutionPolicy> conflictResolutionPolicy) {
            this.conflictResolutionPolicy = Output.ofNullable(conflictResolutionPolicy);
            return this;
        }

        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }

        public Builder enableConflictLogging(@Nullable Output<Boolean> enableConflictLogging) {
            this.enableConflictLogging = enableConflictLogging;
            return this;
        }

        public Builder enableConflictLogging(@Nullable Boolean enableConflictLogging) {
            this.enableConflictLogging = Output.ofNullable(enableConflictLogging);
            return this;
        }

        public Builder hubDatabasePassword(@Nullable Output<String> hubDatabasePassword) {
            this.hubDatabasePassword = hubDatabasePassword;
            return this;
        }

        public Builder hubDatabasePassword(@Nullable String hubDatabasePassword) {
            this.hubDatabasePassword = Output.ofNullable(hubDatabasePassword);
            return this;
        }

        public Builder hubDatabaseUserName(@Nullable Output<String> hubDatabaseUserName) {
            this.hubDatabaseUserName = hubDatabaseUserName;
            return this;
        }

        public Builder hubDatabaseUserName(@Nullable String hubDatabaseUserName) {
            this.hubDatabaseUserName = Output.ofNullable(hubDatabaseUserName);
            return this;
        }

        public Builder interval(@Nullable Output<Integer> interval) {
            this.interval = interval;
            return this;
        }

        public Builder interval(@Nullable Integer interval) {
            this.interval = Output.ofNullable(interval);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder schema(@Nullable Output<SyncGroupSchemaArgs> schema) {
            this.schema = schema;
            return this;
        }

        public Builder schema(@Nullable SyncGroupSchemaArgs schema) {
            this.schema = Output.ofNullable(schema);
            return this;
        }

        public Builder serverName(Output<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }

        public Builder serverName(String serverName) {
            this.serverName = Output.of(Objects.requireNonNull(serverName));
            return this;
        }

        public Builder sku(@Nullable Output<SkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder sku(@Nullable SkuArgs sku) {
            this.sku = Output.ofNullable(sku);
            return this;
        }

        public Builder syncDatabaseId(@Nullable Output<String> syncDatabaseId) {
            this.syncDatabaseId = syncDatabaseId;
            return this;
        }

        public Builder syncDatabaseId(@Nullable String syncDatabaseId) {
            this.syncDatabaseId = Output.ofNullable(syncDatabaseId);
            return this;
        }

        public Builder syncGroupName(@Nullable Output<String> syncGroupName) {
            this.syncGroupName = syncGroupName;
            return this;
        }

        public Builder syncGroupName(@Nullable String syncGroupName) {
            this.syncGroupName = Output.ofNullable(syncGroupName);
            return this;
        }

        public Builder usePrivateLinkConnection(@Nullable Output<Boolean> usePrivateLinkConnection) {
            this.usePrivateLinkConnection = usePrivateLinkConnection;
            return this;
        }

        public Builder usePrivateLinkConnection(@Nullable Boolean usePrivateLinkConnection) {
            this.usePrivateLinkConnection = Output.ofNullable(usePrivateLinkConnection);
            return this;
        }
        public SyncGroupArgs build() {
            return new SyncGroupArgs(conflictLoggingRetentionInDays, conflictResolutionPolicy, databaseName, enableConflictLogging, hubDatabasePassword, hubDatabaseUserName, interval, resourceGroupName, schema, serverName, sku, syncDatabaseId, syncGroupName, usePrivateLinkConnection);
        }
    }
}
