// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb.inputs;

import io.pulumi.azurenative.documentdb.enums.IndexingMode;
import io.pulumi.azurenative.documentdb.inputs.CompositePathArgs;
import io.pulumi.azurenative.documentdb.inputs.ExcludedPathArgs;
import io.pulumi.azurenative.documentdb.inputs.IncludedPathArgs;
import io.pulumi.azurenative.documentdb.inputs.SpatialSpecArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Cosmos DB indexing policy
 * 
 */
public final class IndexingPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final IndexingPolicyArgs Empty = new IndexingPolicyArgs();

    /**
     * Indicates if the indexing policy is automatic
     * 
     */
    @InputImport(name="automatic")
      private final @Nullable Output<Boolean> automatic;

    public Output<Boolean> getAutomatic() {
        return this.automatic == null ? Output.empty() : this.automatic;
    }

    /**
     * List of composite path list
     * 
     */
    @InputImport(name="compositeIndexes")
      private final @Nullable Output<List<List<CompositePathArgs>>> compositeIndexes;

    public Output<List<List<CompositePathArgs>>> getCompositeIndexes() {
        return this.compositeIndexes == null ? Output.empty() : this.compositeIndexes;
    }

    /**
     * List of paths to exclude from indexing
     * 
     */
    @InputImport(name="excludedPaths")
      private final @Nullable Output<List<ExcludedPathArgs>> excludedPaths;

    public Output<List<ExcludedPathArgs>> getExcludedPaths() {
        return this.excludedPaths == null ? Output.empty() : this.excludedPaths;
    }

    /**
     * List of paths to include in the indexing
     * 
     */
    @InputImport(name="includedPaths")
      private final @Nullable Output<List<IncludedPathArgs>> includedPaths;

    public Output<List<IncludedPathArgs>> getIncludedPaths() {
        return this.includedPaths == null ? Output.empty() : this.includedPaths;
    }

    /**
     * Indicates the indexing mode.
     * 
     */
    @InputImport(name="indexingMode")
      private final @Nullable Output<Either<String,IndexingMode>> indexingMode;

    public Output<Either<String,IndexingMode>> getIndexingMode() {
        return this.indexingMode == null ? Output.empty() : this.indexingMode;
    }

    /**
     * List of spatial specifics
     * 
     */
    @InputImport(name="spatialIndexes")
      private final @Nullable Output<List<SpatialSpecArgs>> spatialIndexes;

    public Output<List<SpatialSpecArgs>> getSpatialIndexes() {
        return this.spatialIndexes == null ? Output.empty() : this.spatialIndexes;
    }

    public IndexingPolicyArgs(
        @Nullable Output<Boolean> automatic,
        @Nullable Output<List<List<CompositePathArgs>>> compositeIndexes,
        @Nullable Output<List<ExcludedPathArgs>> excludedPaths,
        @Nullable Output<List<IncludedPathArgs>> includedPaths,
        @Nullable Output<Either<String,IndexingMode>> indexingMode,
        @Nullable Output<List<SpatialSpecArgs>> spatialIndexes) {
        this.automatic = automatic;
        this.compositeIndexes = compositeIndexes;
        this.excludedPaths = excludedPaths;
        this.includedPaths = includedPaths;
        this.indexingMode = indexingMode == null ? Output.ofLeft("consistent") : indexingMode;
        this.spatialIndexes = spatialIndexes;
    }

    private IndexingPolicyArgs() {
        this.automatic = Output.empty();
        this.compositeIndexes = Output.empty();
        this.excludedPaths = Output.empty();
        this.includedPaths = Output.empty();
        this.indexingMode = Output.empty();
        this.spatialIndexes = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IndexingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> automatic;
        private @Nullable Output<List<List<CompositePathArgs>>> compositeIndexes;
        private @Nullable Output<List<ExcludedPathArgs>> excludedPaths;
        private @Nullable Output<List<IncludedPathArgs>> includedPaths;
        private @Nullable Output<Either<String,IndexingMode>> indexingMode;
        private @Nullable Output<List<SpatialSpecArgs>> spatialIndexes;

        public Builder() {
    	      // Empty
        }

        public Builder(IndexingPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automatic = defaults.automatic;
    	      this.compositeIndexes = defaults.compositeIndexes;
    	      this.excludedPaths = defaults.excludedPaths;
    	      this.includedPaths = defaults.includedPaths;
    	      this.indexingMode = defaults.indexingMode;
    	      this.spatialIndexes = defaults.spatialIndexes;
        }

        public Builder automatic(@Nullable Output<Boolean> automatic) {
            this.automatic = automatic;
            return this;
        }

        public Builder automatic(@Nullable Boolean automatic) {
            this.automatic = Output.ofNullable(automatic);
            return this;
        }

        public Builder compositeIndexes(@Nullable Output<List<List<CompositePathArgs>>> compositeIndexes) {
            this.compositeIndexes = compositeIndexes;
            return this;
        }

        public Builder compositeIndexes(@Nullable List<List<CompositePathArgs>> compositeIndexes) {
            this.compositeIndexes = Output.ofNullable(compositeIndexes);
            return this;
        }

        public Builder excludedPaths(@Nullable Output<List<ExcludedPathArgs>> excludedPaths) {
            this.excludedPaths = excludedPaths;
            return this;
        }

        public Builder excludedPaths(@Nullable List<ExcludedPathArgs> excludedPaths) {
            this.excludedPaths = Output.ofNullable(excludedPaths);
            return this;
        }

        public Builder includedPaths(@Nullable Output<List<IncludedPathArgs>> includedPaths) {
            this.includedPaths = includedPaths;
            return this;
        }

        public Builder includedPaths(@Nullable List<IncludedPathArgs> includedPaths) {
            this.includedPaths = Output.ofNullable(includedPaths);
            return this;
        }

        public Builder indexingMode(@Nullable Output<Either<String,IndexingMode>> indexingMode) {
            this.indexingMode = indexingMode;
            return this;
        }

        public Builder indexingMode(@Nullable Either<String,IndexingMode> indexingMode) {
            this.indexingMode = Output.ofNullable(indexingMode);
            return this;
        }

        public Builder spatialIndexes(@Nullable Output<List<SpatialSpecArgs>> spatialIndexes) {
            this.spatialIndexes = spatialIndexes;
            return this;
        }

        public Builder spatialIndexes(@Nullable List<SpatialSpecArgs> spatialIndexes) {
            this.spatialIndexes = Output.ofNullable(spatialIndexes);
            return this;
        }
        public IndexingPolicyArgs build() {
            return new IndexingPolicyArgs(automatic, compositeIndexes, excludedPaths, includedPaths, indexingMode, spatialIndexes);
        }
    }
}
