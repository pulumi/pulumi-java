// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab;

import io.pulumi.azurenative.devtestlab.enums.EnableStatus;
import io.pulumi.azurenative.devtestlab.inputs.DayDetailsArgs;
import io.pulumi.azurenative.devtestlab.inputs.HourDetailsArgs;
import io.pulumi.azurenative.devtestlab.inputs.NotificationSettingsArgs;
import io.pulumi.azurenative.devtestlab.inputs.WeekDetailsArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceFabricScheduleArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceFabricScheduleArgs Empty = new ServiceFabricScheduleArgs();

    /**
     * If the schedule will occur once each day of the week, specify the daily recurrence.
     * 
     */
    @InputImport(name="dailyRecurrence")
      private final @Nullable Output<DayDetailsArgs> dailyRecurrence;

    public Output<DayDetailsArgs> getDailyRecurrence() {
        return this.dailyRecurrence == null ? Output.empty() : this.dailyRecurrence;
    }

    /**
     * If the schedule will occur multiple times a day, specify the hourly recurrence.
     * 
     */
    @InputImport(name="hourlyRecurrence")
      private final @Nullable Output<HourDetailsArgs> hourlyRecurrence;

    public Output<HourDetailsArgs> getHourlyRecurrence() {
        return this.hourlyRecurrence == null ? Output.empty() : this.hourlyRecurrence;
    }

    /**
     * The name of the lab.
     * 
     */
    @InputImport(name="labName", required=true)
      private final Output<String> labName;

    public Output<String> getLabName() {
        return this.labName;
    }

    /**
     * The location of the resource.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name of the schedule.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Notification settings.
     * 
     */
    @InputImport(name="notificationSettings")
      private final @Nullable Output<NotificationSettingsArgs> notificationSettings;

    public Output<NotificationSettingsArgs> getNotificationSettings() {
        return this.notificationSettings == null ? Output.empty() : this.notificationSettings;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the service fabric.
     * 
     */
    @InputImport(name="serviceFabricName", required=true)
      private final Output<String> serviceFabricName;

    public Output<String> getServiceFabricName() {
        return this.serviceFabricName;
    }

    /**
     * The status of the schedule (i.e. Enabled, Disabled)
     * 
     */
    @InputImport(name="status")
      private final @Nullable Output<Either<String,EnableStatus>> status;

    public Output<Either<String,EnableStatus>> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * The tags of the resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The resource ID to which the schedule belongs
     * 
     */
    @InputImport(name="targetResourceId")
      private final @Nullable Output<String> targetResourceId;

    public Output<String> getTargetResourceId() {
        return this.targetResourceId == null ? Output.empty() : this.targetResourceId;
    }

    /**
     * The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     * 
     */
    @InputImport(name="taskType")
      private final @Nullable Output<String> taskType;

    public Output<String> getTaskType() {
        return this.taskType == null ? Output.empty() : this.taskType;
    }

    /**
     * The time zone ID (e.g. Pacific Standard time).
     * 
     */
    @InputImport(name="timeZoneId")
      private final @Nullable Output<String> timeZoneId;

    public Output<String> getTimeZoneId() {
        return this.timeZoneId == null ? Output.empty() : this.timeZoneId;
    }

    /**
     * The name of the user profile.
     * 
     */
    @InputImport(name="userName", required=true)
      private final Output<String> userName;

    public Output<String> getUserName() {
        return this.userName;
    }

    /**
     * If the schedule will occur only some days of the week, specify the weekly recurrence.
     * 
     */
    @InputImport(name="weeklyRecurrence")
      private final @Nullable Output<WeekDetailsArgs> weeklyRecurrence;

    public Output<WeekDetailsArgs> getWeeklyRecurrence() {
        return this.weeklyRecurrence == null ? Output.empty() : this.weeklyRecurrence;
    }

    public ServiceFabricScheduleArgs(
        @Nullable Output<DayDetailsArgs> dailyRecurrence,
        @Nullable Output<HourDetailsArgs> hourlyRecurrence,
        Output<String> labName,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<NotificationSettingsArgs> notificationSettings,
        Output<String> resourceGroupName,
        Output<String> serviceFabricName,
        @Nullable Output<Either<String,EnableStatus>> status,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> targetResourceId,
        @Nullable Output<String> taskType,
        @Nullable Output<String> timeZoneId,
        Output<String> userName,
        @Nullable Output<WeekDetailsArgs> weeklyRecurrence) {
        this.dailyRecurrence = dailyRecurrence;
        this.hourlyRecurrence = hourlyRecurrence;
        this.labName = Objects.requireNonNull(labName, "expected parameter 'labName' to be non-null");
        this.location = location;
        this.name = name;
        this.notificationSettings = notificationSettings;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceFabricName = Objects.requireNonNull(serviceFabricName, "expected parameter 'serviceFabricName' to be non-null");
        this.status = status == null ? Output.ofLeft("Disabled") : status;
        this.tags = tags;
        this.targetResourceId = targetResourceId;
        this.taskType = taskType;
        this.timeZoneId = timeZoneId;
        this.userName = Objects.requireNonNull(userName, "expected parameter 'userName' to be non-null");
        this.weeklyRecurrence = weeklyRecurrence;
    }

    private ServiceFabricScheduleArgs() {
        this.dailyRecurrence = Output.empty();
        this.hourlyRecurrence = Output.empty();
        this.labName = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.notificationSettings = Output.empty();
        this.resourceGroupName = Output.empty();
        this.serviceFabricName = Output.empty();
        this.status = Output.empty();
        this.tags = Output.empty();
        this.targetResourceId = Output.empty();
        this.taskType = Output.empty();
        this.timeZoneId = Output.empty();
        this.userName = Output.empty();
        this.weeklyRecurrence = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceFabricScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DayDetailsArgs> dailyRecurrence;
        private @Nullable Output<HourDetailsArgs> hourlyRecurrence;
        private Output<String> labName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<NotificationSettingsArgs> notificationSettings;
        private Output<String> resourceGroupName;
        private Output<String> serviceFabricName;
        private @Nullable Output<Either<String,EnableStatus>> status;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> targetResourceId;
        private @Nullable Output<String> taskType;
        private @Nullable Output<String> timeZoneId;
        private Output<String> userName;
        private @Nullable Output<WeekDetailsArgs> weeklyRecurrence;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceFabricScheduleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dailyRecurrence = defaults.dailyRecurrence;
    	      this.hourlyRecurrence = defaults.hourlyRecurrence;
    	      this.labName = defaults.labName;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.notificationSettings = defaults.notificationSettings;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceFabricName = defaults.serviceFabricName;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.targetResourceId = defaults.targetResourceId;
    	      this.taskType = defaults.taskType;
    	      this.timeZoneId = defaults.timeZoneId;
    	      this.userName = defaults.userName;
    	      this.weeklyRecurrence = defaults.weeklyRecurrence;
        }

        public Builder dailyRecurrence(@Nullable Output<DayDetailsArgs> dailyRecurrence) {
            this.dailyRecurrence = dailyRecurrence;
            return this;
        }

        public Builder dailyRecurrence(@Nullable DayDetailsArgs dailyRecurrence) {
            this.dailyRecurrence = Output.ofNullable(dailyRecurrence);
            return this;
        }

        public Builder hourlyRecurrence(@Nullable Output<HourDetailsArgs> hourlyRecurrence) {
            this.hourlyRecurrence = hourlyRecurrence;
            return this;
        }

        public Builder hourlyRecurrence(@Nullable HourDetailsArgs hourlyRecurrence) {
            this.hourlyRecurrence = Output.ofNullable(hourlyRecurrence);
            return this;
        }

        public Builder labName(Output<String> labName) {
            this.labName = Objects.requireNonNull(labName);
            return this;
        }

        public Builder labName(String labName) {
            this.labName = Output.of(Objects.requireNonNull(labName));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder notificationSettings(@Nullable Output<NotificationSettingsArgs> notificationSettings) {
            this.notificationSettings = notificationSettings;
            return this;
        }

        public Builder notificationSettings(@Nullable NotificationSettingsArgs notificationSettings) {
            this.notificationSettings = Output.ofNullable(notificationSettings);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder serviceFabricName(Output<String> serviceFabricName) {
            this.serviceFabricName = Objects.requireNonNull(serviceFabricName);
            return this;
        }

        public Builder serviceFabricName(String serviceFabricName) {
            this.serviceFabricName = Output.of(Objects.requireNonNull(serviceFabricName));
            return this;
        }

        public Builder status(@Nullable Output<Either<String,EnableStatus>> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable Either<String,EnableStatus> status) {
            this.status = Output.ofNullable(status);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder targetResourceId(@Nullable Output<String> targetResourceId) {
            this.targetResourceId = targetResourceId;
            return this;
        }

        public Builder targetResourceId(@Nullable String targetResourceId) {
            this.targetResourceId = Output.ofNullable(targetResourceId);
            return this;
        }

        public Builder taskType(@Nullable Output<String> taskType) {
            this.taskType = taskType;
            return this;
        }

        public Builder taskType(@Nullable String taskType) {
            this.taskType = Output.ofNullable(taskType);
            return this;
        }

        public Builder timeZoneId(@Nullable Output<String> timeZoneId) {
            this.timeZoneId = timeZoneId;
            return this;
        }

        public Builder timeZoneId(@Nullable String timeZoneId) {
            this.timeZoneId = Output.ofNullable(timeZoneId);
            return this;
        }

        public Builder userName(Output<String> userName) {
            this.userName = Objects.requireNonNull(userName);
            return this;
        }

        public Builder userName(String userName) {
            this.userName = Output.of(Objects.requireNonNull(userName));
            return this;
        }

        public Builder weeklyRecurrence(@Nullable Output<WeekDetailsArgs> weeklyRecurrence) {
            this.weeklyRecurrence = weeklyRecurrence;
            return this;
        }

        public Builder weeklyRecurrence(@Nullable WeekDetailsArgs weeklyRecurrence) {
            this.weeklyRecurrence = Output.ofNullable(weeklyRecurrence);
            return this;
        }
        public ServiceFabricScheduleArgs build() {
            return new ServiceFabricScheduleArgs(dailyRecurrence, hourlyRecurrence, labName, location, name, notificationSettings, resourceGroupName, serviceFabricName, status, tags, targetResourceId, taskType, timeZoneId, userName, weeklyRecurrence);
        }
    }
}
