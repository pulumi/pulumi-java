// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.blueprint.inputs;

import io.pulumi.azurenative.blueprint.enums.AssignmentLockMode;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Defines how resources deployed by a blueprint assignment are locked.
 * 
 */
public final class AssignmentLockSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AssignmentLockSettingsArgs Empty = new AssignmentLockSettingsArgs();

    /**
     * List of management operations that are excluded from blueprint locks. Up to 200 actions are permitted. If the lock mode is set to 'AllResourcesReadOnly', then the following actions are automatically appended to 'excludedActions': '*{@literal /}read', 'Microsoft.Network/virtualNetworks/subnets/join/action' and 'Microsoft.Authorization/locks/delete'. If the lock mode is set to 'AllResourcesDoNotDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will get removed.
     * 
     */
    @Import(name="excludedActions")
      private final @Nullable Output<List<String>> excludedActions;

    public Output<List<String>> excludedActions() {
        return this.excludedActions == null ? Codegen.empty() : this.excludedActions;
    }

    /**
     * List of AAD principals excluded from blueprint locks. Up to 5 principals are permitted.
     * 
     */
    @Import(name="excludedPrincipals")
      private final @Nullable Output<List<String>> excludedPrincipals;

    public Output<List<String>> excludedPrincipals() {
        return this.excludedPrincipals == null ? Codegen.empty() : this.excludedPrincipals;
    }

    /**
     * Lock mode.
     * 
     */
    @Import(name="mode")
      private final @Nullable Output<Either<String,AssignmentLockMode>> mode;

    public Output<Either<String,AssignmentLockMode>> mode() {
        return this.mode == null ? Codegen.empty() : this.mode;
    }

    public AssignmentLockSettingsArgs(
        @Nullable Output<List<String>> excludedActions,
        @Nullable Output<List<String>> excludedPrincipals,
        @Nullable Output<Either<String,AssignmentLockMode>> mode) {
        this.excludedActions = excludedActions;
        this.excludedPrincipals = excludedPrincipals;
        this.mode = mode;
    }

    private AssignmentLockSettingsArgs() {
        this.excludedActions = Codegen.empty();
        this.excludedPrincipals = Codegen.empty();
        this.mode = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AssignmentLockSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> excludedActions;
        private @Nullable Output<List<String>> excludedPrincipals;
        private @Nullable Output<Either<String,AssignmentLockMode>> mode;

        public Builder() {
    	      // Empty
        }

        public Builder(AssignmentLockSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludedActions = defaults.excludedActions;
    	      this.excludedPrincipals = defaults.excludedPrincipals;
    	      this.mode = defaults.mode;
        }

        public Builder excludedActions(@Nullable Output<List<String>> excludedActions) {
            this.excludedActions = excludedActions;
            return this;
        }
        public Builder excludedActions(@Nullable List<String> excludedActions) {
            this.excludedActions = Codegen.ofNullable(excludedActions);
            return this;
        }
        public Builder excludedActions(String... excludedActions) {
            return excludedActions(List.of(excludedActions));
        }
        public Builder excludedPrincipals(@Nullable Output<List<String>> excludedPrincipals) {
            this.excludedPrincipals = excludedPrincipals;
            return this;
        }
        public Builder excludedPrincipals(@Nullable List<String> excludedPrincipals) {
            this.excludedPrincipals = Codegen.ofNullable(excludedPrincipals);
            return this;
        }
        public Builder excludedPrincipals(String... excludedPrincipals) {
            return excludedPrincipals(List.of(excludedPrincipals));
        }
        public Builder mode(@Nullable Output<Either<String,AssignmentLockMode>> mode) {
            this.mode = mode;
            return this;
        }
        public Builder mode(@Nullable Either<String,AssignmentLockMode> mode) {
            this.mode = Codegen.ofNullable(mode);
            return this;
        }        public AssignmentLockSettingsArgs build() {
            return new AssignmentLockSettingsArgs(excludedActions, excludedPrincipals, mode);
        }
    }
}
