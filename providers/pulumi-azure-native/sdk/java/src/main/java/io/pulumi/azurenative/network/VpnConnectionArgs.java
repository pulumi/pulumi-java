// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.enums.VirtualNetworkGatewayConnectionProtocol;
import io.pulumi.azurenative.network.inputs.IpsecPolicyArgs;
import io.pulumi.azurenative.network.inputs.RoutingConfigurationArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.azurenative.network.inputs.TrafficSelectorPolicyArgs;
import io.pulumi.azurenative.network.inputs.VpnSiteLinkConnectionArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpnConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final VpnConnectionArgs Empty = new VpnConnectionArgs();

    /**
     * Expected bandwidth in MBPS.
     * 
     */
    @Import(name="connectionBandwidth")
      private final @Nullable Output<Integer> connectionBandwidth;

    public Output<Integer> getConnectionBandwidth() {
        return this.connectionBandwidth == null ? Codegen.empty() : this.connectionBandwidth;
    }

    /**
     * The name of the connection.
     * 
     */
    @Import(name="connectionName")
      private final @Nullable Output<String> connectionName;

    public Output<String> getConnectionName() {
        return this.connectionName == null ? Codegen.empty() : this.connectionName;
    }

    /**
     * DPD timeout in seconds for vpn connection.
     * 
     */
    @Import(name="dpdTimeoutSeconds")
      private final @Nullable Output<Integer> dpdTimeoutSeconds;

    public Output<Integer> getDpdTimeoutSeconds() {
        return this.dpdTimeoutSeconds == null ? Codegen.empty() : this.dpdTimeoutSeconds;
    }

    /**
     * EnableBgp flag.
     * 
     */
    @Import(name="enableBgp")
      private final @Nullable Output<Boolean> enableBgp;

    public Output<Boolean> getEnableBgp() {
        return this.enableBgp == null ? Codegen.empty() : this.enableBgp;
    }

    /**
     * Enable internet security.
     * 
     */
    @Import(name="enableInternetSecurity")
      private final @Nullable Output<Boolean> enableInternetSecurity;

    public Output<Boolean> getEnableInternetSecurity() {
        return this.enableInternetSecurity == null ? Codegen.empty() : this.enableInternetSecurity;
    }

    /**
     * EnableBgp flag.
     * 
     */
    @Import(name="enableRateLimiting")
      private final @Nullable Output<Boolean> enableRateLimiting;

    public Output<Boolean> getEnableRateLimiting() {
        return this.enableRateLimiting == null ? Codegen.empty() : this.enableRateLimiting;
    }

    /**
     * The name of the gateway.
     * 
     */
    @Import(name="gatewayName", required=true)
      private final Output<String> gatewayName;

    public Output<String> getGatewayName() {
        return this.gatewayName;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * The IPSec Policies to be considered by this connection.
     * 
     */
    @Import(name="ipsecPolicies")
      private final @Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies;

    public Output<List<IpsecPolicyArgs>> getIpsecPolicies() {
        return this.ipsecPolicies == null ? Codegen.empty() : this.ipsecPolicies;
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Id of the connected vpn site.
     * 
     */
    @Import(name="remoteVpnSite")
      private final @Nullable Output<SubResourceArgs> remoteVpnSite;

    public Output<SubResourceArgs> getRemoteVpnSite() {
        return this.remoteVpnSite == null ? Codegen.empty() : this.remoteVpnSite;
    }

    /**
     * The resource group name of the VpnGateway.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Routing Configuration indicating the associated and propagated route tables on this connection.
     * 
     */
    @Import(name="routingConfiguration")
      private final @Nullable Output<RoutingConfigurationArgs> routingConfiguration;

    public Output<RoutingConfigurationArgs> getRoutingConfiguration() {
        return this.routingConfiguration == null ? Codegen.empty() : this.routingConfiguration;
    }

    /**
     * Routing weight for vpn connection.
     * 
     */
    @Import(name="routingWeight")
      private final @Nullable Output<Integer> routingWeight;

    public Output<Integer> getRoutingWeight() {
        return this.routingWeight == null ? Codegen.empty() : this.routingWeight;
    }

    /**
     * SharedKey for the vpn connection.
     * 
     */
    @Import(name="sharedKey")
      private final @Nullable Output<String> sharedKey;

    public Output<String> getSharedKey() {
        return this.sharedKey == null ? Codegen.empty() : this.sharedKey;
    }

    /**
     * The Traffic Selector Policies to be considered by this connection.
     * 
     */
    @Import(name="trafficSelectorPolicies")
      private final @Nullable Output<List<TrafficSelectorPolicyArgs>> trafficSelectorPolicies;

    public Output<List<TrafficSelectorPolicyArgs>> getTrafficSelectorPolicies() {
        return this.trafficSelectorPolicies == null ? Codegen.empty() : this.trafficSelectorPolicies;
    }

    /**
     * Use local azure ip to initiate connection.
     * 
     */
    @Import(name="useLocalAzureIpAddress")
      private final @Nullable Output<Boolean> useLocalAzureIpAddress;

    public Output<Boolean> getUseLocalAzureIpAddress() {
        return this.useLocalAzureIpAddress == null ? Codegen.empty() : this.useLocalAzureIpAddress;
    }

    /**
     * Enable policy-based traffic selectors.
     * 
     */
    @Import(name="usePolicyBasedTrafficSelectors")
      private final @Nullable Output<Boolean> usePolicyBasedTrafficSelectors;

    public Output<Boolean> getUsePolicyBasedTrafficSelectors() {
        return this.usePolicyBasedTrafficSelectors == null ? Codegen.empty() : this.usePolicyBasedTrafficSelectors;
    }

    /**
     * Connection protocol used for this connection.
     * 
     */
    @Import(name="vpnConnectionProtocolType")
      private final @Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType;

    public Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> getVpnConnectionProtocolType() {
        return this.vpnConnectionProtocolType == null ? Codegen.empty() : this.vpnConnectionProtocolType;
    }

    /**
     * List of all vpn site link connections to the gateway.
     * 
     */
    @Import(name="vpnLinkConnections")
      private final @Nullable Output<List<VpnSiteLinkConnectionArgs>> vpnLinkConnections;

    public Output<List<VpnSiteLinkConnectionArgs>> getVpnLinkConnections() {
        return this.vpnLinkConnections == null ? Codegen.empty() : this.vpnLinkConnections;
    }

    public VpnConnectionArgs(
        @Nullable Output<Integer> connectionBandwidth,
        @Nullable Output<String> connectionName,
        @Nullable Output<Integer> dpdTimeoutSeconds,
        @Nullable Output<Boolean> enableBgp,
        @Nullable Output<Boolean> enableInternetSecurity,
        @Nullable Output<Boolean> enableRateLimiting,
        Output<String> gatewayName,
        @Nullable Output<String> id,
        @Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies,
        @Nullable Output<String> name,
        @Nullable Output<SubResourceArgs> remoteVpnSite,
        Output<String> resourceGroupName,
        @Nullable Output<RoutingConfigurationArgs> routingConfiguration,
        @Nullable Output<Integer> routingWeight,
        @Nullable Output<String> sharedKey,
        @Nullable Output<List<TrafficSelectorPolicyArgs>> trafficSelectorPolicies,
        @Nullable Output<Boolean> useLocalAzureIpAddress,
        @Nullable Output<Boolean> usePolicyBasedTrafficSelectors,
        @Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType,
        @Nullable Output<List<VpnSiteLinkConnectionArgs>> vpnLinkConnections) {
        this.connectionBandwidth = connectionBandwidth;
        this.connectionName = connectionName;
        this.dpdTimeoutSeconds = dpdTimeoutSeconds;
        this.enableBgp = enableBgp;
        this.enableInternetSecurity = enableInternetSecurity;
        this.enableRateLimiting = enableRateLimiting;
        this.gatewayName = Objects.requireNonNull(gatewayName, "expected parameter 'gatewayName' to be non-null");
        this.id = id;
        this.ipsecPolicies = ipsecPolicies;
        this.name = name;
        this.remoteVpnSite = remoteVpnSite;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.routingConfiguration = routingConfiguration;
        this.routingWeight = routingWeight;
        this.sharedKey = sharedKey;
        this.trafficSelectorPolicies = trafficSelectorPolicies;
        this.useLocalAzureIpAddress = useLocalAzureIpAddress;
        this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
        this.vpnConnectionProtocolType = vpnConnectionProtocolType;
        this.vpnLinkConnections = vpnLinkConnections;
    }

    private VpnConnectionArgs() {
        this.connectionBandwidth = Codegen.empty();
        this.connectionName = Codegen.empty();
        this.dpdTimeoutSeconds = Codegen.empty();
        this.enableBgp = Codegen.empty();
        this.enableInternetSecurity = Codegen.empty();
        this.enableRateLimiting = Codegen.empty();
        this.gatewayName = Codegen.empty();
        this.id = Codegen.empty();
        this.ipsecPolicies = Codegen.empty();
        this.name = Codegen.empty();
        this.remoteVpnSite = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.routingConfiguration = Codegen.empty();
        this.routingWeight = Codegen.empty();
        this.sharedKey = Codegen.empty();
        this.trafficSelectorPolicies = Codegen.empty();
        this.useLocalAzureIpAddress = Codegen.empty();
        this.usePolicyBasedTrafficSelectors = Codegen.empty();
        this.vpnConnectionProtocolType = Codegen.empty();
        this.vpnLinkConnections = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> connectionBandwidth;
        private @Nullable Output<String> connectionName;
        private @Nullable Output<Integer> dpdTimeoutSeconds;
        private @Nullable Output<Boolean> enableBgp;
        private @Nullable Output<Boolean> enableInternetSecurity;
        private @Nullable Output<Boolean> enableRateLimiting;
        private Output<String> gatewayName;
        private @Nullable Output<String> id;
        private @Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies;
        private @Nullable Output<String> name;
        private @Nullable Output<SubResourceArgs> remoteVpnSite;
        private Output<String> resourceGroupName;
        private @Nullable Output<RoutingConfigurationArgs> routingConfiguration;
        private @Nullable Output<Integer> routingWeight;
        private @Nullable Output<String> sharedKey;
        private @Nullable Output<List<TrafficSelectorPolicyArgs>> trafficSelectorPolicies;
        private @Nullable Output<Boolean> useLocalAzureIpAddress;
        private @Nullable Output<Boolean> usePolicyBasedTrafficSelectors;
        private @Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType;
        private @Nullable Output<List<VpnSiteLinkConnectionArgs>> vpnLinkConnections;

        public Builder() {
    	      // Empty
        }

        public Builder(VpnConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionBandwidth = defaults.connectionBandwidth;
    	      this.connectionName = defaults.connectionName;
    	      this.dpdTimeoutSeconds = defaults.dpdTimeoutSeconds;
    	      this.enableBgp = defaults.enableBgp;
    	      this.enableInternetSecurity = defaults.enableInternetSecurity;
    	      this.enableRateLimiting = defaults.enableRateLimiting;
    	      this.gatewayName = defaults.gatewayName;
    	      this.id = defaults.id;
    	      this.ipsecPolicies = defaults.ipsecPolicies;
    	      this.name = defaults.name;
    	      this.remoteVpnSite = defaults.remoteVpnSite;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.routingConfiguration = defaults.routingConfiguration;
    	      this.routingWeight = defaults.routingWeight;
    	      this.sharedKey = defaults.sharedKey;
    	      this.trafficSelectorPolicies = defaults.trafficSelectorPolicies;
    	      this.useLocalAzureIpAddress = defaults.useLocalAzureIpAddress;
    	      this.usePolicyBasedTrafficSelectors = defaults.usePolicyBasedTrafficSelectors;
    	      this.vpnConnectionProtocolType = defaults.vpnConnectionProtocolType;
    	      this.vpnLinkConnections = defaults.vpnLinkConnections;
        }

        public Builder connectionBandwidth(@Nullable Output<Integer> connectionBandwidth) {
            this.connectionBandwidth = connectionBandwidth;
            return this;
        }
        public Builder connectionBandwidth(@Nullable Integer connectionBandwidth) {
            this.connectionBandwidth = Codegen.ofNullable(connectionBandwidth);
            return this;
        }
        public Builder connectionName(@Nullable Output<String> connectionName) {
            this.connectionName = connectionName;
            return this;
        }
        public Builder connectionName(@Nullable String connectionName) {
            this.connectionName = Codegen.ofNullable(connectionName);
            return this;
        }
        public Builder dpdTimeoutSeconds(@Nullable Output<Integer> dpdTimeoutSeconds) {
            this.dpdTimeoutSeconds = dpdTimeoutSeconds;
            return this;
        }
        public Builder dpdTimeoutSeconds(@Nullable Integer dpdTimeoutSeconds) {
            this.dpdTimeoutSeconds = Codegen.ofNullable(dpdTimeoutSeconds);
            return this;
        }
        public Builder enableBgp(@Nullable Output<Boolean> enableBgp) {
            this.enableBgp = enableBgp;
            return this;
        }
        public Builder enableBgp(@Nullable Boolean enableBgp) {
            this.enableBgp = Codegen.ofNullable(enableBgp);
            return this;
        }
        public Builder enableInternetSecurity(@Nullable Output<Boolean> enableInternetSecurity) {
            this.enableInternetSecurity = enableInternetSecurity;
            return this;
        }
        public Builder enableInternetSecurity(@Nullable Boolean enableInternetSecurity) {
            this.enableInternetSecurity = Codegen.ofNullable(enableInternetSecurity);
            return this;
        }
        public Builder enableRateLimiting(@Nullable Output<Boolean> enableRateLimiting) {
            this.enableRateLimiting = enableRateLimiting;
            return this;
        }
        public Builder enableRateLimiting(@Nullable Boolean enableRateLimiting) {
            this.enableRateLimiting = Codegen.ofNullable(enableRateLimiting);
            return this;
        }
        public Builder gatewayName(Output<String> gatewayName) {
            this.gatewayName = Objects.requireNonNull(gatewayName);
            return this;
        }
        public Builder gatewayName(String gatewayName) {
            this.gatewayName = Output.of(Objects.requireNonNull(gatewayName));
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder ipsecPolicies(@Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies) {
            this.ipsecPolicies = ipsecPolicies;
            return this;
        }
        public Builder ipsecPolicies(@Nullable List<IpsecPolicyArgs> ipsecPolicies) {
            this.ipsecPolicies = Codegen.ofNullable(ipsecPolicies);
            return this;
        }
        public Builder ipsecPolicies(IpsecPolicyArgs... ipsecPolicies) {
            return ipsecPolicies(List.of(ipsecPolicies));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder remoteVpnSite(@Nullable Output<SubResourceArgs> remoteVpnSite) {
            this.remoteVpnSite = remoteVpnSite;
            return this;
        }
        public Builder remoteVpnSite(@Nullable SubResourceArgs remoteVpnSite) {
            this.remoteVpnSite = Codegen.ofNullable(remoteVpnSite);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder routingConfiguration(@Nullable Output<RoutingConfigurationArgs> routingConfiguration) {
            this.routingConfiguration = routingConfiguration;
            return this;
        }
        public Builder routingConfiguration(@Nullable RoutingConfigurationArgs routingConfiguration) {
            this.routingConfiguration = Codegen.ofNullable(routingConfiguration);
            return this;
        }
        public Builder routingWeight(@Nullable Output<Integer> routingWeight) {
            this.routingWeight = routingWeight;
            return this;
        }
        public Builder routingWeight(@Nullable Integer routingWeight) {
            this.routingWeight = Codegen.ofNullable(routingWeight);
            return this;
        }
        public Builder sharedKey(@Nullable Output<String> sharedKey) {
            this.sharedKey = sharedKey;
            return this;
        }
        public Builder sharedKey(@Nullable String sharedKey) {
            this.sharedKey = Codegen.ofNullable(sharedKey);
            return this;
        }
        public Builder trafficSelectorPolicies(@Nullable Output<List<TrafficSelectorPolicyArgs>> trafficSelectorPolicies) {
            this.trafficSelectorPolicies = trafficSelectorPolicies;
            return this;
        }
        public Builder trafficSelectorPolicies(@Nullable List<TrafficSelectorPolicyArgs> trafficSelectorPolicies) {
            this.trafficSelectorPolicies = Codegen.ofNullable(trafficSelectorPolicies);
            return this;
        }
        public Builder trafficSelectorPolicies(TrafficSelectorPolicyArgs... trafficSelectorPolicies) {
            return trafficSelectorPolicies(List.of(trafficSelectorPolicies));
        }
        public Builder useLocalAzureIpAddress(@Nullable Output<Boolean> useLocalAzureIpAddress) {
            this.useLocalAzureIpAddress = useLocalAzureIpAddress;
            return this;
        }
        public Builder useLocalAzureIpAddress(@Nullable Boolean useLocalAzureIpAddress) {
            this.useLocalAzureIpAddress = Codegen.ofNullable(useLocalAzureIpAddress);
            return this;
        }
        public Builder usePolicyBasedTrafficSelectors(@Nullable Output<Boolean> usePolicyBasedTrafficSelectors) {
            this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            return this;
        }
        public Builder usePolicyBasedTrafficSelectors(@Nullable Boolean usePolicyBasedTrafficSelectors) {
            this.usePolicyBasedTrafficSelectors = Codegen.ofNullable(usePolicyBasedTrafficSelectors);
            return this;
        }
        public Builder vpnConnectionProtocolType(@Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType) {
            this.vpnConnectionProtocolType = vpnConnectionProtocolType;
            return this;
        }
        public Builder vpnConnectionProtocolType(@Nullable Either<String,VirtualNetworkGatewayConnectionProtocol> vpnConnectionProtocolType) {
            this.vpnConnectionProtocolType = Codegen.ofNullable(vpnConnectionProtocolType);
            return this;
        }
        public Builder vpnLinkConnections(@Nullable Output<List<VpnSiteLinkConnectionArgs>> vpnLinkConnections) {
            this.vpnLinkConnections = vpnLinkConnections;
            return this;
        }
        public Builder vpnLinkConnections(@Nullable List<VpnSiteLinkConnectionArgs> vpnLinkConnections) {
            this.vpnLinkConnections = Codegen.ofNullable(vpnLinkConnections);
            return this;
        }
        public Builder vpnLinkConnections(VpnSiteLinkConnectionArgs... vpnLinkConnections) {
            return vpnLinkConnections(List.of(vpnLinkConnections));
        }        public VpnConnectionArgs build() {
            return new VpnConnectionArgs(connectionBandwidth, connectionName, dpdTimeoutSeconds, enableBgp, enableInternetSecurity, enableRateLimiting, gatewayName, id, ipsecPolicies, name, remoteVpnSite, resourceGroupName, routingConfiguration, routingWeight, sharedKey, trafficSelectorPolicies, useLocalAzureIpAddress, usePolicyBasedTrafficSelectors, vpnConnectionProtocolType, vpnLinkConnections);
        }
    }
}
