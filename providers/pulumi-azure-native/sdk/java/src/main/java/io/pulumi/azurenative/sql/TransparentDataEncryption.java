// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.Utilities;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Represents a database transparent data encryption configuration.
API Version: 2014-04-01.

{{% examples %}}
## Example Usage
{{% example %}}
### Create or update a database's transparent data encryption configuration
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var transparentDataEncryption = new AzureNative.Sql.TransparentDataEncryption("transparentDataEncryption", new AzureNative.Sql.TransparentDataEncryptionArgs
        {
            DatabaseName = "sqlcrudtest-9187",
            ResourceGroupName = "sqlcrudtest-6852",
            ServerName = "sqlcrudtest-2080",
            Status = "Enabled",
            TransparentDataEncryptionName = "current",
        });
    }

}

```

```go
package main

import (
	sql "github.com/pulumi/pulumi-azure-native/sdk/go/azure/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.NewTransparentDataEncryption(ctx, "transparentDataEncryption", &sql.TransparentDataEncryptionArgs{
			DatabaseName:                  pulumi.String("sqlcrudtest-9187"),
			ResourceGroupName:             pulumi.String("sqlcrudtest-6852"),
			ServerName:                    pulumi.String("sqlcrudtest-2080"),
			Status:                        pulumi.String("Enabled"),
			TransparentDataEncryptionName: pulumi.String("current"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const transparentDataEncryption = new azure_native.sql.TransparentDataEncryption("transparentDataEncryption", {
    databaseName: "sqlcrudtest-9187",
    resourceGroupName: "sqlcrudtest-6852",
    serverName: "sqlcrudtest-2080",
    status: "Enabled",
    transparentDataEncryptionName: "current",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

transparent_data_encryption = azure_native.sql.TransparentDataEncryption("transparentDataEncryption",
    database_name="sqlcrudtest-9187",
    resource_group_name="sqlcrudtest-6852",
    server_name="sqlcrudtest-2080",
    status="Enabled",
    transparent_data_encryption_name="current")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:sql:TransparentDataEncryption current /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-9187/transparentDataEncryption/current 
```

 */
@ResourceType(type="azure-native:sql:TransparentDataEncryption")
public class TransparentDataEncryption extends io.pulumi.resources.CustomResource {
    /**
     * Resource location.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource location.
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Resource name.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The status of the database transparent data encryption.
     */
    @OutputExport(name="status", type=String.class, parameters={})
    private Output</* @Nullable */ String> status;

    /**
     * @return The status of the database transparent data encryption.
     */
    public Output</* @Nullable */ String> getStatus() {
        return this.status;
    }
    /**
     * Resource type.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type.
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TransparentDataEncryption(String name, TransparentDataEncryptionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:sql:TransparentDataEncryption", name, args == null ? TransparentDataEncryptionArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private TransparentDataEncryption(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:sql:TransparentDataEncryption", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:sql/v20140401:TransparentDataEncryption").build()),
                Input.of(Alias.builder().setType("azure-native:sql/v20200202preview:TransparentDataEncryption").build()),
                Input.of(Alias.builder().setType("azure-native:sql/v20200801preview:TransparentDataEncryption").build()),
                Input.of(Alias.builder().setType("azure-native:sql/v20201101preview:TransparentDataEncryption").build()),
                Input.of(Alias.builder().setType("azure-native:sql/v20210201preview:TransparentDataEncryption").build()),
                Input.of(Alias.builder().setType("azure-native:sql/v20210501preview:TransparentDataEncryption").build()),
                Input.of(Alias.builder().setType("azure-native:sql/v20210801preview:TransparentDataEncryption").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TransparentDataEncryption get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new TransparentDataEncryption(name, id, options);
    }
}
