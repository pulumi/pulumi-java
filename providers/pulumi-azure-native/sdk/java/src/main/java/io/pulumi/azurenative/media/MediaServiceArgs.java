// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media;

import io.pulumi.azurenative.media.enums.StorageAuthentication;
import io.pulumi.azurenative.media.inputs.AccountEncryptionArgs;
import io.pulumi.azurenative.media.inputs.MediaServiceIdentityArgs;
import io.pulumi.azurenative.media.inputs.StorageAccountArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MediaServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final MediaServiceArgs Empty = new MediaServiceArgs();

    /**
     * The Media Services account name.
     * 
     */
    @Import(name="accountName")
      private final @Nullable Output<String> accountName;

    public Output<String> getAccountName() {
        return this.accountName == null ? Output.empty() : this.accountName;
    }

    /**
     * The account encryption properties.
     * 
     */
    @Import(name="encryption")
      private final @Nullable Output<AccountEncryptionArgs> encryption;

    public Output<AccountEncryptionArgs> getEncryption() {
        return this.encryption == null ? Output.empty() : this.encryption;
    }

    /**
     * The Managed Identity for the Media Services account.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<MediaServiceIdentityArgs> identity;

    public Output<MediaServiceIdentityArgs> getIdentity() {
        return this.identity == null ? Output.empty() : this.identity;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name of the resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The storage accounts for this resource.
     * 
     */
    @Import(name="storageAccounts")
      private final @Nullable Output<List<StorageAccountArgs>> storageAccounts;

    public Output<List<StorageAccountArgs>> getStorageAccounts() {
        return this.storageAccounts == null ? Output.empty() : this.storageAccounts;
    }

    @Import(name="storageAuthentication")
      private final @Nullable Output<Either<String,StorageAuthentication>> storageAuthentication;

    public Output<Either<String,StorageAuthentication>> getStorageAuthentication() {
        return this.storageAuthentication == null ? Output.empty() : this.storageAuthentication;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public MediaServiceArgs(
        @Nullable Output<String> accountName,
        @Nullable Output<AccountEncryptionArgs> encryption,
        @Nullable Output<MediaServiceIdentityArgs> identity,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<List<StorageAccountArgs>> storageAccounts,
        @Nullable Output<Either<String,StorageAuthentication>> storageAuthentication,
        @Nullable Output<Map<String,String>> tags) {
        this.accountName = accountName;
        this.encryption = encryption;
        this.identity = identity;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.storageAccounts = storageAccounts;
        this.storageAuthentication = storageAuthentication;
        this.tags = tags;
    }

    private MediaServiceArgs() {
        this.accountName = Output.empty();
        this.encryption = Output.empty();
        this.identity = Output.empty();
        this.location = Output.empty();
        this.resourceGroupName = Output.empty();
        this.storageAccounts = Output.empty();
        this.storageAuthentication = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MediaServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> accountName;
        private @Nullable Output<AccountEncryptionArgs> encryption;
        private @Nullable Output<MediaServiceIdentityArgs> identity;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<List<StorageAccountArgs>> storageAccounts;
        private @Nullable Output<Either<String,StorageAuthentication>> storageAuthentication;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(MediaServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.encryption = defaults.encryption;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.storageAccounts = defaults.storageAccounts;
    	      this.storageAuthentication = defaults.storageAuthentication;
    	      this.tags = defaults.tags;
        }

        public Builder accountName(@Nullable Output<String> accountName) {
            this.accountName = accountName;
            return this;
        }

        public Builder accountName(@Nullable String accountName) {
            this.accountName = Output.ofNullable(accountName);
            return this;
        }

        public Builder encryption(@Nullable Output<AccountEncryptionArgs> encryption) {
            this.encryption = encryption;
            return this;
        }

        public Builder encryption(@Nullable AccountEncryptionArgs encryption) {
            this.encryption = Output.ofNullable(encryption);
            return this;
        }

        public Builder identity(@Nullable Output<MediaServiceIdentityArgs> identity) {
            this.identity = identity;
            return this;
        }

        public Builder identity(@Nullable MediaServiceIdentityArgs identity) {
            this.identity = Output.ofNullable(identity);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder storageAccounts(@Nullable Output<List<StorageAccountArgs>> storageAccounts) {
            this.storageAccounts = storageAccounts;
            return this;
        }

        public Builder storageAccounts(@Nullable List<StorageAccountArgs> storageAccounts) {
            this.storageAccounts = Output.ofNullable(storageAccounts);
            return this;
        }

        public Builder storageAuthentication(@Nullable Output<Either<String,StorageAuthentication>> storageAuthentication) {
            this.storageAuthentication = storageAuthentication;
            return this;
        }

        public Builder storageAuthentication(@Nullable Either<String,StorageAuthentication> storageAuthentication) {
            this.storageAuthentication = Output.ofNullable(storageAuthentication);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public MediaServiceArgs build() {
            return new MediaServiceArgs(accountName, encryption, identity, location, resourceGroupName, storageAccounts, storageAuthentication, tags);
        }
    }
}
