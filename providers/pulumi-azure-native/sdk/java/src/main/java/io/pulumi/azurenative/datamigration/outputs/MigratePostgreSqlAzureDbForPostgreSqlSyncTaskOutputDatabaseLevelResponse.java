// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse {
    private final Double appliedChanges;
    private final Double cdcDeleteCounter;
    private final Double cdcInsertCounter;
    private final Double cdcUpdateCounter;
    private final String databaseName;
    private final String endedOn;
    private final Double fullLoadCompletedTables;
    private final Double fullLoadErroredTables;
    private final Double fullLoadLoadingTables;
    private final Double fullLoadQueuedTables;
    private final String id;
    private final Double incomingChanges;
    private final Boolean initializationCompleted;
    private final Double latency;
    private final String migrationState;
    private final String resultType;
    private final String startedOn;

    @OutputCustomType.Constructor({"appliedChanges","cdcDeleteCounter","cdcInsertCounter","cdcUpdateCounter","databaseName","endedOn","fullLoadCompletedTables","fullLoadErroredTables","fullLoadLoadingTables","fullLoadQueuedTables","id","incomingChanges","initializationCompleted","latency","migrationState","resultType","startedOn"})
    private MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse(
        Double appliedChanges,
        Double cdcDeleteCounter,
        Double cdcInsertCounter,
        Double cdcUpdateCounter,
        String databaseName,
        String endedOn,
        Double fullLoadCompletedTables,
        Double fullLoadErroredTables,
        Double fullLoadLoadingTables,
        Double fullLoadQueuedTables,
        String id,
        Double incomingChanges,
        Boolean initializationCompleted,
        Double latency,
        String migrationState,
        String resultType,
        String startedOn) {
        this.appliedChanges = Objects.requireNonNull(appliedChanges);
        this.cdcDeleteCounter = Objects.requireNonNull(cdcDeleteCounter);
        this.cdcInsertCounter = Objects.requireNonNull(cdcInsertCounter);
        this.cdcUpdateCounter = Objects.requireNonNull(cdcUpdateCounter);
        this.databaseName = Objects.requireNonNull(databaseName);
        this.endedOn = Objects.requireNonNull(endedOn);
        this.fullLoadCompletedTables = Objects.requireNonNull(fullLoadCompletedTables);
        this.fullLoadErroredTables = Objects.requireNonNull(fullLoadErroredTables);
        this.fullLoadLoadingTables = Objects.requireNonNull(fullLoadLoadingTables);
        this.fullLoadQueuedTables = Objects.requireNonNull(fullLoadQueuedTables);
        this.id = Objects.requireNonNull(id);
        this.incomingChanges = Objects.requireNonNull(incomingChanges);
        this.initializationCompleted = Objects.requireNonNull(initializationCompleted);
        this.latency = Objects.requireNonNull(latency);
        this.migrationState = Objects.requireNonNull(migrationState);
        this.resultType = Objects.requireNonNull(resultType);
        this.startedOn = Objects.requireNonNull(startedOn);
    }

    public Double getAppliedChanges() {
        return this.appliedChanges;
    }
    public Double getCdcDeleteCounter() {
        return this.cdcDeleteCounter;
    }
    public Double getCdcInsertCounter() {
        return this.cdcInsertCounter;
    }
    public Double getCdcUpdateCounter() {
        return this.cdcUpdateCounter;
    }
    public String getDatabaseName() {
        return this.databaseName;
    }
    public String getEndedOn() {
        return this.endedOn;
    }
    public Double getFullLoadCompletedTables() {
        return this.fullLoadCompletedTables;
    }
    public Double getFullLoadErroredTables() {
        return this.fullLoadErroredTables;
    }
    public Double getFullLoadLoadingTables() {
        return this.fullLoadLoadingTables;
    }
    public Double getFullLoadQueuedTables() {
        return this.fullLoadQueuedTables;
    }
    public String getId() {
        return this.id;
    }
    public Double getIncomingChanges() {
        return this.incomingChanges;
    }
    public Boolean getInitializationCompleted() {
        return this.initializationCompleted;
    }
    public Double getLatency() {
        return this.latency;
    }
    public String getMigrationState() {
        return this.migrationState;
    }
    public String getResultType() {
        return this.resultType;
    }
    public String getStartedOn() {
        return this.startedOn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double appliedChanges;
        private Double cdcDeleteCounter;
        private Double cdcInsertCounter;
        private Double cdcUpdateCounter;
        private String databaseName;
        private String endedOn;
        private Double fullLoadCompletedTables;
        private Double fullLoadErroredTables;
        private Double fullLoadLoadingTables;
        private Double fullLoadQueuedTables;
        private String id;
        private Double incomingChanges;
        private Boolean initializationCompleted;
        private Double latency;
        private String migrationState;
        private String resultType;
        private String startedOn;

        public Builder() {
    	      // Empty
        }

        public Builder(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appliedChanges = defaults.appliedChanges;
    	      this.cdcDeleteCounter = defaults.cdcDeleteCounter;
    	      this.cdcInsertCounter = defaults.cdcInsertCounter;
    	      this.cdcUpdateCounter = defaults.cdcUpdateCounter;
    	      this.databaseName = defaults.databaseName;
    	      this.endedOn = defaults.endedOn;
    	      this.fullLoadCompletedTables = defaults.fullLoadCompletedTables;
    	      this.fullLoadErroredTables = defaults.fullLoadErroredTables;
    	      this.fullLoadLoadingTables = defaults.fullLoadLoadingTables;
    	      this.fullLoadQueuedTables = defaults.fullLoadQueuedTables;
    	      this.id = defaults.id;
    	      this.incomingChanges = defaults.incomingChanges;
    	      this.initializationCompleted = defaults.initializationCompleted;
    	      this.latency = defaults.latency;
    	      this.migrationState = defaults.migrationState;
    	      this.resultType = defaults.resultType;
    	      this.startedOn = defaults.startedOn;
        }

        public Builder setAppliedChanges(Double appliedChanges) {
            this.appliedChanges = Objects.requireNonNull(appliedChanges);
            return this;
        }

        public Builder setCdcDeleteCounter(Double cdcDeleteCounter) {
            this.cdcDeleteCounter = Objects.requireNonNull(cdcDeleteCounter);
            return this;
        }

        public Builder setCdcInsertCounter(Double cdcInsertCounter) {
            this.cdcInsertCounter = Objects.requireNonNull(cdcInsertCounter);
            return this;
        }

        public Builder setCdcUpdateCounter(Double cdcUpdateCounter) {
            this.cdcUpdateCounter = Objects.requireNonNull(cdcUpdateCounter);
            return this;
        }

        public Builder setDatabaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder setEndedOn(String endedOn) {
            this.endedOn = Objects.requireNonNull(endedOn);
            return this;
        }

        public Builder setFullLoadCompletedTables(Double fullLoadCompletedTables) {
            this.fullLoadCompletedTables = Objects.requireNonNull(fullLoadCompletedTables);
            return this;
        }

        public Builder setFullLoadErroredTables(Double fullLoadErroredTables) {
            this.fullLoadErroredTables = Objects.requireNonNull(fullLoadErroredTables);
            return this;
        }

        public Builder setFullLoadLoadingTables(Double fullLoadLoadingTables) {
            this.fullLoadLoadingTables = Objects.requireNonNull(fullLoadLoadingTables);
            return this;
        }

        public Builder setFullLoadQueuedTables(Double fullLoadQueuedTables) {
            this.fullLoadQueuedTables = Objects.requireNonNull(fullLoadQueuedTables);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIncomingChanges(Double incomingChanges) {
            this.incomingChanges = Objects.requireNonNull(incomingChanges);
            return this;
        }

        public Builder setInitializationCompleted(Boolean initializationCompleted) {
            this.initializationCompleted = Objects.requireNonNull(initializationCompleted);
            return this;
        }

        public Builder setLatency(Double latency) {
            this.latency = Objects.requireNonNull(latency);
            return this;
        }

        public Builder setMigrationState(String migrationState) {
            this.migrationState = Objects.requireNonNull(migrationState);
            return this;
        }

        public Builder setResultType(String resultType) {
            this.resultType = Objects.requireNonNull(resultType);
            return this;
        }

        public Builder setStartedOn(String startedOn) {
            this.startedOn = Objects.requireNonNull(startedOn);
            return this;
        }

        public MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse build() {
            return new MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse(appliedChanges, cdcDeleteCounter, cdcInsertCounter, cdcUpdateCounter, databaseName, endedOn, fullLoadCompletedTables, fullLoadErroredTables, fullLoadLoadingTables, fullLoadQueuedTables, id, incomingChanges, initializationCompleted, latency, migrationState, resultType, startedOn);
        }
    }
}
