// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.enums.ContentKeyPolicyPlayReadyUnknownOutputPassingOption;
import io.pulumi.azurenative.media.inputs.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configures the Play Right in the PlayReady license.
 * 
 */
public final class ContentKeyPolicyPlayReadyPlayRightArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContentKeyPolicyPlayReadyPlayRightArgs Empty = new ContentKeyPolicyPlayReadyPlayRightArgs();

    /**
     * Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
     * 
     */
    @InputImport(name="agcAndColorStripeRestriction")
        private final @Nullable Input<Integer> agcAndColorStripeRestriction;

    public Input<Integer> getAgcAndColorStripeRestriction() {
        return this.agcAndColorStripeRestriction == null ? Input.empty() : this.agcAndColorStripeRestriction;
    }

    /**
     * Configures Unknown output handling settings of the license.
     * 
     */
    @InputImport(name="allowPassingVideoContentToUnknownOutput", required=true)
        private final Input<Either<String,ContentKeyPolicyPlayReadyUnknownOutputPassingOption>> allowPassingVideoContentToUnknownOutput;

    public Input<Either<String,ContentKeyPolicyPlayReadyUnknownOutputPassingOption>> getAllowPassingVideoContentToUnknownOutput() {
        return this.allowPassingVideoContentToUnknownOutput;
    }

    /**
     * Specifies the output protection level for compressed digital audio.
     * 
     */
    @InputImport(name="analogVideoOpl")
        private final @Nullable Input<Integer> analogVideoOpl;

    public Input<Integer> getAnalogVideoOpl() {
        return this.analogVideoOpl == null ? Input.empty() : this.analogVideoOpl;
    }

    /**
     * Specifies the output protection level for compressed digital audio.
     * 
     */
    @InputImport(name="compressedDigitalAudioOpl")
        private final @Nullable Input<Integer> compressedDigitalAudioOpl;

    public Input<Integer> getCompressedDigitalAudioOpl() {
        return this.compressedDigitalAudioOpl == null ? Input.empty() : this.compressedDigitalAudioOpl;
    }

    /**
     * Specifies the output protection level for compressed digital video.
     * 
     */
    @InputImport(name="compressedDigitalVideoOpl")
        private final @Nullable Input<Integer> compressedDigitalVideoOpl;

    public Input<Integer> getCompressedDigitalVideoOpl() {
        return this.compressedDigitalVideoOpl == null ? Input.empty() : this.compressedDigitalVideoOpl;
    }

    /**
     * Enables the Image Constraint For Analog Component Video Restriction in the license.
     * 
     */
    @InputImport(name="digitalVideoOnlyContentRestriction", required=true)
        private final Input<Boolean> digitalVideoOnlyContentRestriction;

    public Input<Boolean> getDigitalVideoOnlyContentRestriction() {
        return this.digitalVideoOnlyContentRestriction;
    }

    /**
     * Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
     * 
     */
    @InputImport(name="explicitAnalogTelevisionOutputRestriction")
        private final @Nullable Input<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs> explicitAnalogTelevisionOutputRestriction;

    public Input<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs> getExplicitAnalogTelevisionOutputRestriction() {
        return this.explicitAnalogTelevisionOutputRestriction == null ? Input.empty() : this.explicitAnalogTelevisionOutputRestriction;
    }

    /**
     * The amount of time that the license is valid after the license is first used to play content.
     * 
     */
    @InputImport(name="firstPlayExpiration")
        private final @Nullable Input<String> firstPlayExpiration;

    public Input<String> getFirstPlayExpiration() {
        return this.firstPlayExpiration == null ? Input.empty() : this.firstPlayExpiration;
    }

    /**
     * Enables the Image Constraint For Analog Component Video Restriction in the license.
     * 
     */
    @InputImport(name="imageConstraintForAnalogComponentVideoRestriction", required=true)
        private final Input<Boolean> imageConstraintForAnalogComponentVideoRestriction;

    public Input<Boolean> getImageConstraintForAnalogComponentVideoRestriction() {
        return this.imageConstraintForAnalogComponentVideoRestriction;
    }

    /**
     * Enables the Image Constraint For Analog Component Video Restriction in the license.
     * 
     */
    @InputImport(name="imageConstraintForAnalogComputerMonitorRestriction", required=true)
        private final Input<Boolean> imageConstraintForAnalogComputerMonitorRestriction;

    public Input<Boolean> getImageConstraintForAnalogComputerMonitorRestriction() {
        return this.imageConstraintForAnalogComputerMonitorRestriction;
    }

    /**
     * Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
     * 
     */
    @InputImport(name="scmsRestriction")
        private final @Nullable Input<Integer> scmsRestriction;

    public Input<Integer> getScmsRestriction() {
        return this.scmsRestriction == null ? Input.empty() : this.scmsRestriction;
    }

    /**
     * Specifies the output protection level for uncompressed digital audio.
     * 
     */
    @InputImport(name="uncompressedDigitalAudioOpl")
        private final @Nullable Input<Integer> uncompressedDigitalAudioOpl;

    public Input<Integer> getUncompressedDigitalAudioOpl() {
        return this.uncompressedDigitalAudioOpl == null ? Input.empty() : this.uncompressedDigitalAudioOpl;
    }

    /**
     * Specifies the output protection level for uncompressed digital video.
     * 
     */
    @InputImport(name="uncompressedDigitalVideoOpl")
        private final @Nullable Input<Integer> uncompressedDigitalVideoOpl;

    public Input<Integer> getUncompressedDigitalVideoOpl() {
        return this.uncompressedDigitalVideoOpl == null ? Input.empty() : this.uncompressedDigitalVideoOpl;
    }

    public ContentKeyPolicyPlayReadyPlayRightArgs(
        @Nullable Input<Integer> agcAndColorStripeRestriction,
        Input<Either<String,ContentKeyPolicyPlayReadyUnknownOutputPassingOption>> allowPassingVideoContentToUnknownOutput,
        @Nullable Input<Integer> analogVideoOpl,
        @Nullable Input<Integer> compressedDigitalAudioOpl,
        @Nullable Input<Integer> compressedDigitalVideoOpl,
        Input<Boolean> digitalVideoOnlyContentRestriction,
        @Nullable Input<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs> explicitAnalogTelevisionOutputRestriction,
        @Nullable Input<String> firstPlayExpiration,
        Input<Boolean> imageConstraintForAnalogComponentVideoRestriction,
        Input<Boolean> imageConstraintForAnalogComputerMonitorRestriction,
        @Nullable Input<Integer> scmsRestriction,
        @Nullable Input<Integer> uncompressedDigitalAudioOpl,
        @Nullable Input<Integer> uncompressedDigitalVideoOpl) {
        this.agcAndColorStripeRestriction = agcAndColorStripeRestriction;
        this.allowPassingVideoContentToUnknownOutput = Objects.requireNonNull(allowPassingVideoContentToUnknownOutput, "expected parameter 'allowPassingVideoContentToUnknownOutput' to be non-null");
        this.analogVideoOpl = analogVideoOpl;
        this.compressedDigitalAudioOpl = compressedDigitalAudioOpl;
        this.compressedDigitalVideoOpl = compressedDigitalVideoOpl;
        this.digitalVideoOnlyContentRestriction = Objects.requireNonNull(digitalVideoOnlyContentRestriction, "expected parameter 'digitalVideoOnlyContentRestriction' to be non-null");
        this.explicitAnalogTelevisionOutputRestriction = explicitAnalogTelevisionOutputRestriction;
        this.firstPlayExpiration = firstPlayExpiration;
        this.imageConstraintForAnalogComponentVideoRestriction = Objects.requireNonNull(imageConstraintForAnalogComponentVideoRestriction, "expected parameter 'imageConstraintForAnalogComponentVideoRestriction' to be non-null");
        this.imageConstraintForAnalogComputerMonitorRestriction = Objects.requireNonNull(imageConstraintForAnalogComputerMonitorRestriction, "expected parameter 'imageConstraintForAnalogComputerMonitorRestriction' to be non-null");
        this.scmsRestriction = scmsRestriction;
        this.uncompressedDigitalAudioOpl = uncompressedDigitalAudioOpl;
        this.uncompressedDigitalVideoOpl = uncompressedDigitalVideoOpl;
    }

    private ContentKeyPolicyPlayReadyPlayRightArgs() {
        this.agcAndColorStripeRestriction = Input.empty();
        this.allowPassingVideoContentToUnknownOutput = Input.empty();
        this.analogVideoOpl = Input.empty();
        this.compressedDigitalAudioOpl = Input.empty();
        this.compressedDigitalVideoOpl = Input.empty();
        this.digitalVideoOnlyContentRestriction = Input.empty();
        this.explicitAnalogTelevisionOutputRestriction = Input.empty();
        this.firstPlayExpiration = Input.empty();
        this.imageConstraintForAnalogComponentVideoRestriction = Input.empty();
        this.imageConstraintForAnalogComputerMonitorRestriction = Input.empty();
        this.scmsRestriction = Input.empty();
        this.uncompressedDigitalAudioOpl = Input.empty();
        this.uncompressedDigitalVideoOpl = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContentKeyPolicyPlayReadyPlayRightArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> agcAndColorStripeRestriction;
        private Input<Either<String,ContentKeyPolicyPlayReadyUnknownOutputPassingOption>> allowPassingVideoContentToUnknownOutput;
        private @Nullable Input<Integer> analogVideoOpl;
        private @Nullable Input<Integer> compressedDigitalAudioOpl;
        private @Nullable Input<Integer> compressedDigitalVideoOpl;
        private Input<Boolean> digitalVideoOnlyContentRestriction;
        private @Nullable Input<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs> explicitAnalogTelevisionOutputRestriction;
        private @Nullable Input<String> firstPlayExpiration;
        private Input<Boolean> imageConstraintForAnalogComponentVideoRestriction;
        private Input<Boolean> imageConstraintForAnalogComputerMonitorRestriction;
        private @Nullable Input<Integer> scmsRestriction;
        private @Nullable Input<Integer> uncompressedDigitalAudioOpl;
        private @Nullable Input<Integer> uncompressedDigitalVideoOpl;

        public Builder() {
    	      // Empty
        }

        public Builder(ContentKeyPolicyPlayReadyPlayRightArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agcAndColorStripeRestriction = defaults.agcAndColorStripeRestriction;
    	      this.allowPassingVideoContentToUnknownOutput = defaults.allowPassingVideoContentToUnknownOutput;
    	      this.analogVideoOpl = defaults.analogVideoOpl;
    	      this.compressedDigitalAudioOpl = defaults.compressedDigitalAudioOpl;
    	      this.compressedDigitalVideoOpl = defaults.compressedDigitalVideoOpl;
    	      this.digitalVideoOnlyContentRestriction = defaults.digitalVideoOnlyContentRestriction;
    	      this.explicitAnalogTelevisionOutputRestriction = defaults.explicitAnalogTelevisionOutputRestriction;
    	      this.firstPlayExpiration = defaults.firstPlayExpiration;
    	      this.imageConstraintForAnalogComponentVideoRestriction = defaults.imageConstraintForAnalogComponentVideoRestriction;
    	      this.imageConstraintForAnalogComputerMonitorRestriction = defaults.imageConstraintForAnalogComputerMonitorRestriction;
    	      this.scmsRestriction = defaults.scmsRestriction;
    	      this.uncompressedDigitalAudioOpl = defaults.uncompressedDigitalAudioOpl;
    	      this.uncompressedDigitalVideoOpl = defaults.uncompressedDigitalVideoOpl;
        }

        public Builder setAgcAndColorStripeRestriction(@Nullable Input<Integer> agcAndColorStripeRestriction) {
            this.agcAndColorStripeRestriction = agcAndColorStripeRestriction;
            return this;
        }

        public Builder setAgcAndColorStripeRestriction(@Nullable Integer agcAndColorStripeRestriction) {
            this.agcAndColorStripeRestriction = Input.ofNullable(agcAndColorStripeRestriction);
            return this;
        }

        public Builder setAllowPassingVideoContentToUnknownOutput(Input<Either<String,ContentKeyPolicyPlayReadyUnknownOutputPassingOption>> allowPassingVideoContentToUnknownOutput) {
            this.allowPassingVideoContentToUnknownOutput = Objects.requireNonNull(allowPassingVideoContentToUnknownOutput);
            return this;
        }

        public Builder setAllowPassingVideoContentToUnknownOutput(Either<String,ContentKeyPolicyPlayReadyUnknownOutputPassingOption> allowPassingVideoContentToUnknownOutput) {
            this.allowPassingVideoContentToUnknownOutput = Input.of(Objects.requireNonNull(allowPassingVideoContentToUnknownOutput));
            return this;
        }

        public Builder setAnalogVideoOpl(@Nullable Input<Integer> analogVideoOpl) {
            this.analogVideoOpl = analogVideoOpl;
            return this;
        }

        public Builder setAnalogVideoOpl(@Nullable Integer analogVideoOpl) {
            this.analogVideoOpl = Input.ofNullable(analogVideoOpl);
            return this;
        }

        public Builder setCompressedDigitalAudioOpl(@Nullable Input<Integer> compressedDigitalAudioOpl) {
            this.compressedDigitalAudioOpl = compressedDigitalAudioOpl;
            return this;
        }

        public Builder setCompressedDigitalAudioOpl(@Nullable Integer compressedDigitalAudioOpl) {
            this.compressedDigitalAudioOpl = Input.ofNullable(compressedDigitalAudioOpl);
            return this;
        }

        public Builder setCompressedDigitalVideoOpl(@Nullable Input<Integer> compressedDigitalVideoOpl) {
            this.compressedDigitalVideoOpl = compressedDigitalVideoOpl;
            return this;
        }

        public Builder setCompressedDigitalVideoOpl(@Nullable Integer compressedDigitalVideoOpl) {
            this.compressedDigitalVideoOpl = Input.ofNullable(compressedDigitalVideoOpl);
            return this;
        }

        public Builder setDigitalVideoOnlyContentRestriction(Input<Boolean> digitalVideoOnlyContentRestriction) {
            this.digitalVideoOnlyContentRestriction = Objects.requireNonNull(digitalVideoOnlyContentRestriction);
            return this;
        }

        public Builder setDigitalVideoOnlyContentRestriction(Boolean digitalVideoOnlyContentRestriction) {
            this.digitalVideoOnlyContentRestriction = Input.of(Objects.requireNonNull(digitalVideoOnlyContentRestriction));
            return this;
        }

        public Builder setExplicitAnalogTelevisionOutputRestriction(@Nullable Input<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs> explicitAnalogTelevisionOutputRestriction) {
            this.explicitAnalogTelevisionOutputRestriction = explicitAnalogTelevisionOutputRestriction;
            return this;
        }

        public Builder setExplicitAnalogTelevisionOutputRestriction(@Nullable ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs explicitAnalogTelevisionOutputRestriction) {
            this.explicitAnalogTelevisionOutputRestriction = Input.ofNullable(explicitAnalogTelevisionOutputRestriction);
            return this;
        }

        public Builder setFirstPlayExpiration(@Nullable Input<String> firstPlayExpiration) {
            this.firstPlayExpiration = firstPlayExpiration;
            return this;
        }

        public Builder setFirstPlayExpiration(@Nullable String firstPlayExpiration) {
            this.firstPlayExpiration = Input.ofNullable(firstPlayExpiration);
            return this;
        }

        public Builder setImageConstraintForAnalogComponentVideoRestriction(Input<Boolean> imageConstraintForAnalogComponentVideoRestriction) {
            this.imageConstraintForAnalogComponentVideoRestriction = Objects.requireNonNull(imageConstraintForAnalogComponentVideoRestriction);
            return this;
        }

        public Builder setImageConstraintForAnalogComponentVideoRestriction(Boolean imageConstraintForAnalogComponentVideoRestriction) {
            this.imageConstraintForAnalogComponentVideoRestriction = Input.of(Objects.requireNonNull(imageConstraintForAnalogComponentVideoRestriction));
            return this;
        }

        public Builder setImageConstraintForAnalogComputerMonitorRestriction(Input<Boolean> imageConstraintForAnalogComputerMonitorRestriction) {
            this.imageConstraintForAnalogComputerMonitorRestriction = Objects.requireNonNull(imageConstraintForAnalogComputerMonitorRestriction);
            return this;
        }

        public Builder setImageConstraintForAnalogComputerMonitorRestriction(Boolean imageConstraintForAnalogComputerMonitorRestriction) {
            this.imageConstraintForAnalogComputerMonitorRestriction = Input.of(Objects.requireNonNull(imageConstraintForAnalogComputerMonitorRestriction));
            return this;
        }

        public Builder setScmsRestriction(@Nullable Input<Integer> scmsRestriction) {
            this.scmsRestriction = scmsRestriction;
            return this;
        }

        public Builder setScmsRestriction(@Nullable Integer scmsRestriction) {
            this.scmsRestriction = Input.ofNullable(scmsRestriction);
            return this;
        }

        public Builder setUncompressedDigitalAudioOpl(@Nullable Input<Integer> uncompressedDigitalAudioOpl) {
            this.uncompressedDigitalAudioOpl = uncompressedDigitalAudioOpl;
            return this;
        }

        public Builder setUncompressedDigitalAudioOpl(@Nullable Integer uncompressedDigitalAudioOpl) {
            this.uncompressedDigitalAudioOpl = Input.ofNullable(uncompressedDigitalAudioOpl);
            return this;
        }

        public Builder setUncompressedDigitalVideoOpl(@Nullable Input<Integer> uncompressedDigitalVideoOpl) {
            this.uncompressedDigitalVideoOpl = uncompressedDigitalVideoOpl;
            return this;
        }

        public Builder setUncompressedDigitalVideoOpl(@Nullable Integer uncompressedDigitalVideoOpl) {
            this.uncompressedDigitalVideoOpl = Input.ofNullable(uncompressedDigitalVideoOpl);
            return this;
        }
        public ContentKeyPolicyPlayReadyPlayRightArgs build() {
            return new ContentKeyPolicyPlayReadyPlayRightArgs(agcAndColorStripeRestriction, allowPassingVideoContentToUnknownOutput, analogVideoOpl, compressedDigitalAudioOpl, compressedDigitalVideoOpl, digitalVideoOnlyContentRestriction, explicitAnalogTelevisionOutputRestriction, firstPlayExpiration, imageConstraintForAnalogComponentVideoRestriction, imageConstraintForAnalogComputerMonitorRestriction, scmsRestriction, uncompressedDigitalAudioOpl, uncompressedDigitalVideoOpl);
        }
    }
}
