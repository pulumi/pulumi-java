// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import io.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import io.pulumi.azurenative.datafactory.inputs.CustomActivityReferenceObjectResponse;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import io.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Custom activity type.
 * 
 */
public final class CustomActivityResponse extends io.pulumi.resources.InvokeArgs {

    public static final CustomActivityResponse Empty = new CustomActivityResponse();

    /**
     * Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
     * 
     */
    @InputImport(name="autoUserSpecification")
      private final @Nullable Object autoUserSpecification;

    public Optional<Object> getAutoUserSpecification() {
        return this.autoUserSpecification == null ? Optional.empty() : Optional.ofNullable(this.autoUserSpecification);
    }

    /**
     * Command for custom activity Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="command", required=true)
      private final Object command;

    public Object getCommand() {
        return this.command;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @InputImport(name="dependsOn")
      private final @Nullable List<ActivityDependencyResponse> dependsOn;

    public List<ActivityDependencyResponse> getDependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @InputImport(name="description")
      private final @Nullable String description;

    public Optional<String> getDescription() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
     * 
     */
    @InputImport(name="extendedProperties")
      private final @Nullable Map<String,Object> extendedProperties;

    public Map<String,Object> getExtendedProperties() {
        return this.extendedProperties == null ? Map.of() : this.extendedProperties;
    }

    /**
     * Folder path for resource files Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="folderPath")
      private final @Nullable Object folderPath;

    public Optional<Object> getFolderPath() {
        return this.folderPath == null ? Optional.empty() : Optional.ofNullable(this.folderPath);
    }

    /**
     * Linked service reference.
     * 
     */
    @InputImport(name="linkedServiceName")
      private final @Nullable LinkedServiceReferenceResponse linkedServiceName;

    public Optional<LinkedServiceReferenceResponse> getLinkedServiceName() {
        return this.linkedServiceName == null ? Optional.empty() : Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Activity name.
     * 
     */
    @InputImport(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @InputImport(name="policy")
      private final @Nullable ActivityPolicyResponse policy;

    public Optional<ActivityPolicyResponse> getPolicy() {
        return this.policy == null ? Optional.empty() : Optional.ofNullable(this.policy);
    }

    /**
     * Reference objects
     * 
     */
    @InputImport(name="referenceObjects")
      private final @Nullable CustomActivityReferenceObjectResponse referenceObjects;

    public Optional<CustomActivityReferenceObjectResponse> getReferenceObjects() {
        return this.referenceObjects == null ? Optional.empty() : Optional.ofNullable(this.referenceObjects);
    }

    /**
     * Resource linked service reference.
     * 
     */
    @InputImport(name="resourceLinkedService")
      private final @Nullable LinkedServiceReferenceResponse resourceLinkedService;

    public Optional<LinkedServiceReferenceResponse> getResourceLinkedService() {
        return this.resourceLinkedService == null ? Optional.empty() : Optional.ofNullable(this.resourceLinkedService);
    }

    /**
     * The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
     * 
     */
    @InputImport(name="retentionTimeInDays")
      private final @Nullable Object retentionTimeInDays;

    public Optional<Object> getRetentionTimeInDays() {
        return this.retentionTimeInDays == null ? Optional.empty() : Optional.ofNullable(this.retentionTimeInDays);
    }

    /**
     * Type of activity.
     * Expected value is 'Custom'.
     * 
     */
    @InputImport(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @InputImport(name="userProperties")
      private final @Nullable List<UserPropertyResponse> userProperties;

    public List<UserPropertyResponse> getUserProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }

    public CustomActivityResponse(
        @Nullable Object autoUserSpecification,
        Object command,
        @Nullable List<ActivityDependencyResponse> dependsOn,
        @Nullable String description,
        @Nullable Map<String,Object> extendedProperties,
        @Nullable Object folderPath,
        @Nullable LinkedServiceReferenceResponse linkedServiceName,
        String name,
        @Nullable ActivityPolicyResponse policy,
        @Nullable CustomActivityReferenceObjectResponse referenceObjects,
        @Nullable LinkedServiceReferenceResponse resourceLinkedService,
        @Nullable Object retentionTimeInDays,
        String type,
        @Nullable List<UserPropertyResponse> userProperties) {
        this.autoUserSpecification = autoUserSpecification;
        this.command = Objects.requireNonNull(command, "expected parameter 'command' to be non-null");
        this.dependsOn = dependsOn;
        this.description = description;
        this.extendedProperties = extendedProperties;
        this.folderPath = folderPath;
        this.linkedServiceName = linkedServiceName;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.policy = policy;
        this.referenceObjects = referenceObjects;
        this.resourceLinkedService = resourceLinkedService;
        this.retentionTimeInDays = retentionTimeInDays;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userProperties = userProperties;
    }

    private CustomActivityResponse() {
        this.autoUserSpecification = null;
        this.command = null;
        this.dependsOn = List.of();
        this.description = null;
        this.extendedProperties = Map.of();
        this.folderPath = null;
        this.linkedServiceName = null;
        this.name = null;
        this.policy = null;
        this.referenceObjects = null;
        this.resourceLinkedService = null;
        this.retentionTimeInDays = null;
        this.type = null;
        this.userProperties = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Object autoUserSpecification;
        private Object command;
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private @Nullable Map<String,Object> extendedProperties;
        private @Nullable Object folderPath;
        private @Nullable LinkedServiceReferenceResponse linkedServiceName;
        private String name;
        private @Nullable ActivityPolicyResponse policy;
        private @Nullable CustomActivityReferenceObjectResponse referenceObjects;
        private @Nullable LinkedServiceReferenceResponse resourceLinkedService;
        private @Nullable Object retentionTimeInDays;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoUserSpecification = defaults.autoUserSpecification;
    	      this.command = defaults.command;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.extendedProperties = defaults.extendedProperties;
    	      this.folderPath = defaults.folderPath;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.referenceObjects = defaults.referenceObjects;
    	      this.resourceLinkedService = defaults.resourceLinkedService;
    	      this.retentionTimeInDays = defaults.retentionTimeInDays;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder autoUserSpecification(@Nullable Object autoUserSpecification) {
            this.autoUserSpecification = autoUserSpecification;
            return this;
        }

        public Builder command(Object command) {
            this.command = Objects.requireNonNull(command);
            return this;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder extendedProperties(@Nullable Map<String,Object> extendedProperties) {
            this.extendedProperties = extendedProperties;
            return this;
        }

        public Builder folderPath(@Nullable Object folderPath) {
            this.folderPath = folderPath;
            return this;
        }

        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            this.policy = policy;
            return this;
        }

        public Builder referenceObjects(@Nullable CustomActivityReferenceObjectResponse referenceObjects) {
            this.referenceObjects = referenceObjects;
            return this;
        }

        public Builder resourceLinkedService(@Nullable LinkedServiceReferenceResponse resourceLinkedService) {
            this.resourceLinkedService = resourceLinkedService;
            return this;
        }

        public Builder retentionTimeInDays(@Nullable Object retentionTimeInDays) {
            this.retentionTimeInDays = retentionTimeInDays;
            return this;
        }

        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public CustomActivityResponse build() {
            return new CustomActivityResponse(autoUserSpecification, command, dependsOn, description, extendedProperties, folderPath, linkedServiceName, name, policy, referenceObjects, resourceLinkedService, retentionTimeInDays, type, userProperties);
        }
    }
}
