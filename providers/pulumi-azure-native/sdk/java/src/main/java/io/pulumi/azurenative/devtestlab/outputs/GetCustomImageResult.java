// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab.outputs;

import io.pulumi.azurenative.devtestlab.outputs.CustomImagePropertiesCustomResponse;
import io.pulumi.azurenative.devtestlab.outputs.CustomImagePropertiesFromPlanResponse;
import io.pulumi.azurenative.devtestlab.outputs.CustomImagePropertiesFromVmResponse;
import io.pulumi.azurenative.devtestlab.outputs.DataDiskStorageTypeInfoResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetCustomImageResult {
    /**
     * The author of the custom image.
     * 
     */
    private final @Nullable String author;
    /**
     * The creation date of the custom image.
     * 
     */
    private final String creationDate;
    /**
     * Storage information about the plan related to this custom image
     * 
     */
    private final @Nullable CustomImagePropertiesFromPlanResponse customImagePlan;
    /**
     * Storage information about the data disks present in the custom image
     * 
     */
    private final @Nullable List<DataDiskStorageTypeInfoResponse> dataDiskStorageInfo;
    /**
     * The description of the custom image.
     * 
     */
    private final @Nullable String description;
    /**
     * The identifier of the resource.
     * 
     */
    private final String id;
    /**
     * Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
     * 
     */
    private final @Nullable Boolean isPlanAuthorized;
    /**
     * The location of the resource.
     * 
     */
    private final @Nullable String location;
    /**
     * The Managed Image Id backing the custom image.
     * 
     */
    private final @Nullable String managedImageId;
    /**
     * The Managed Snapshot Id backing the custom image.
     * 
     */
    private final @Nullable String managedSnapshotId;
    /**
     * The name of the resource.
     * 
     */
    private final String name;
    /**
     * The provisioning status of the resource.
     * 
     */
    private final String provisioningState;
    /**
     * The tags of the resource.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * The type of the resource.
     * 
     */
    private final String type;
    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    private final String uniqueIdentifier;
    /**
     * The VHD from which the image is to be created.
     * 
     */
    private final @Nullable CustomImagePropertiesCustomResponse vhd;
    /**
     * The virtual machine from which the image is to be created.
     * 
     */
    private final @Nullable CustomImagePropertiesFromVmResponse vm;

    @OutputCustomType.Constructor({"author","creationDate","customImagePlan","dataDiskStorageInfo","description","id","isPlanAuthorized","location","managedImageId","managedSnapshotId","name","provisioningState","tags","type","uniqueIdentifier","vhd","vm"})
    private GetCustomImageResult(
        @Nullable String author,
        String creationDate,
        @Nullable CustomImagePropertiesFromPlanResponse customImagePlan,
        @Nullable List<DataDiskStorageTypeInfoResponse> dataDiskStorageInfo,
        @Nullable String description,
        String id,
        @Nullable Boolean isPlanAuthorized,
        @Nullable String location,
        @Nullable String managedImageId,
        @Nullable String managedSnapshotId,
        String name,
        String provisioningState,
        @Nullable Map<String,String> tags,
        String type,
        String uniqueIdentifier,
        @Nullable CustomImagePropertiesCustomResponse vhd,
        @Nullable CustomImagePropertiesFromVmResponse vm) {
        this.author = author;
        this.creationDate = Objects.requireNonNull(creationDate);
        this.customImagePlan = customImagePlan;
        this.dataDiskStorageInfo = dataDiskStorageInfo;
        this.description = description;
        this.id = Objects.requireNonNull(id);
        this.isPlanAuthorized = isPlanAuthorized;
        this.location = location;
        this.managedImageId = managedImageId;
        this.managedSnapshotId = managedSnapshotId;
        this.name = Objects.requireNonNull(name);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.tags = tags;
        this.type = Objects.requireNonNull(type);
        this.uniqueIdentifier = Objects.requireNonNull(uniqueIdentifier);
        this.vhd = vhd;
        this.vm = vm;
    }

    /**
     * The author of the custom image.
     * 
     */
    public Optional<String> getAuthor() {
        return Optional.ofNullable(this.author);
    }
    /**
     * The creation date of the custom image.
     * 
     */
    public String getCreationDate() {
        return this.creationDate;
    }
    /**
     * Storage information about the plan related to this custom image
     * 
     */
    public Optional<CustomImagePropertiesFromPlanResponse> getCustomImagePlan() {
        return Optional.ofNullable(this.customImagePlan);
    }
    /**
     * Storage information about the data disks present in the custom image
     * 
     */
    public List<DataDiskStorageTypeInfoResponse> getDataDiskStorageInfo() {
        return this.dataDiskStorageInfo == null ? List.of() : this.dataDiskStorageInfo;
    }
    /**
     * The description of the custom image.
     * 
     */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * The identifier of the resource.
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
     * 
     */
    public Optional<Boolean> getIsPlanAuthorized() {
        return Optional.ofNullable(this.isPlanAuthorized);
    }
    /**
     * The location of the resource.
     * 
     */
    public Optional<String> getLocation() {
        return Optional.ofNullable(this.location);
    }
    /**
     * The Managed Image Id backing the custom image.
     * 
     */
    public Optional<String> getManagedImageId() {
        return Optional.ofNullable(this.managedImageId);
    }
    /**
     * The Managed Snapshot Id backing the custom image.
     * 
     */
    public Optional<String> getManagedSnapshotId() {
        return Optional.ofNullable(this.managedSnapshotId);
    }
    /**
     * The name of the resource.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * The provisioning status of the resource.
     * 
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The tags of the resource.
     * 
     */
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * The type of the resource.
     * 
     */
    public String getType() {
        return this.type;
    }
    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    public String getUniqueIdentifier() {
        return this.uniqueIdentifier;
    }
    /**
     * The VHD from which the image is to be created.
     * 
     */
    public Optional<CustomImagePropertiesCustomResponse> getVhd() {
        return Optional.ofNullable(this.vhd);
    }
    /**
     * The virtual machine from which the image is to be created.
     * 
     */
    public Optional<CustomImagePropertiesFromVmResponse> getVm() {
        return Optional.ofNullable(this.vm);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCustomImageResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String author;
        private String creationDate;
        private @Nullable CustomImagePropertiesFromPlanResponse customImagePlan;
        private @Nullable List<DataDiskStorageTypeInfoResponse> dataDiskStorageInfo;
        private @Nullable String description;
        private String id;
        private @Nullable Boolean isPlanAuthorized;
        private @Nullable String location;
        private @Nullable String managedImageId;
        private @Nullable String managedSnapshotId;
        private String name;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private String uniqueIdentifier;
        private @Nullable CustomImagePropertiesCustomResponse vhd;
        private @Nullable CustomImagePropertiesFromVmResponse vm;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCustomImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.author = defaults.author;
    	      this.creationDate = defaults.creationDate;
    	      this.customImagePlan = defaults.customImagePlan;
    	      this.dataDiskStorageInfo = defaults.dataDiskStorageInfo;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.isPlanAuthorized = defaults.isPlanAuthorized;
    	      this.location = defaults.location;
    	      this.managedImageId = defaults.managedImageId;
    	      this.managedSnapshotId = defaults.managedSnapshotId;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
    	      this.vhd = defaults.vhd;
    	      this.vm = defaults.vm;
        }

        public Builder setAuthor(@Nullable String author) {
            this.author = author;
            return this;
        }

        public Builder setCreationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }

        public Builder setCustomImagePlan(@Nullable CustomImagePropertiesFromPlanResponse customImagePlan) {
            this.customImagePlan = customImagePlan;
            return this;
        }

        public Builder setDataDiskStorageInfo(@Nullable List<DataDiskStorageTypeInfoResponse> dataDiskStorageInfo) {
            this.dataDiskStorageInfo = dataDiskStorageInfo;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIsPlanAuthorized(@Nullable Boolean isPlanAuthorized) {
            this.isPlanAuthorized = isPlanAuthorized;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = location;
            return this;
        }

        public Builder setManagedImageId(@Nullable String managedImageId) {
            this.managedImageId = managedImageId;
            return this;
        }

        public Builder setManagedSnapshotId(@Nullable String managedSnapshotId) {
            this.managedSnapshotId = managedSnapshotId;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUniqueIdentifier(String uniqueIdentifier) {
            this.uniqueIdentifier = Objects.requireNonNull(uniqueIdentifier);
            return this;
        }

        public Builder setVhd(@Nullable CustomImagePropertiesCustomResponse vhd) {
            this.vhd = vhd;
            return this;
        }

        public Builder setVm(@Nullable CustomImagePropertiesFromVmResponse vm) {
            this.vm = vm;
            return this;
        }
        public GetCustomImageResult build() {
            return new GetCustomImageResult(author, creationDate, customImagePlan, dataDiskStorageInfo, description, id, isPlanAuthorized, location, managedImageId, managedSnapshotId, name, provisioningState, tags, type, uniqueIdentifier, vhd, vm);
        }
    }
}
