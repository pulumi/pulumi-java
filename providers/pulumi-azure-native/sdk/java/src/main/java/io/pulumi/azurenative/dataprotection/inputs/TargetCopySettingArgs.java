// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.dataprotection.inputs;

import io.pulumi.azurenative.dataprotection.inputs.CopyOnExpiryOptionArgs;
import io.pulumi.azurenative.dataprotection.inputs.CustomCopyOptionArgs;
import io.pulumi.azurenative.dataprotection.inputs.DataStoreInfoBaseArgs;
import io.pulumi.azurenative.dataprotection.inputs.ImmediateCopyOptionArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.util.Objects;


/**
 * Target copy settings
 * 
 */
public final class TargetCopySettingArgs extends io.pulumi.resources.ResourceArgs {

    public static final TargetCopySettingArgs Empty = new TargetCopySettingArgs();

    /**
     * It can be CustomCopyOption or ImmediateCopyOption.
     * 
     */
    @InputImport(name="copyAfter", required=true)
      private final Output<Object> copyAfter;

    public Output<Object> getCopyAfter() {
        return this.copyAfter;
    }

    /**
     * Info of target datastore
     * 
     */
    @InputImport(name="dataStore", required=true)
      private final Output<DataStoreInfoBaseArgs> dataStore;

    public Output<DataStoreInfoBaseArgs> getDataStore() {
        return this.dataStore;
    }

    public TargetCopySettingArgs(
        Output<Object> copyAfter,
        Output<DataStoreInfoBaseArgs> dataStore) {
        this.copyAfter = Objects.requireNonNull(copyAfter, "expected parameter 'copyAfter' to be non-null");
        this.dataStore = Objects.requireNonNull(dataStore, "expected parameter 'dataStore' to be non-null");
    }

    private TargetCopySettingArgs() {
        this.copyAfter = Output.empty();
        this.dataStore = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TargetCopySettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Object> copyAfter;
        private Output<DataStoreInfoBaseArgs> dataStore;

        public Builder() {
    	      // Empty
        }

        public Builder(TargetCopySettingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.copyAfter = defaults.copyAfter;
    	      this.dataStore = defaults.dataStore;
        }

        public Builder copyAfter(Output<Object> copyAfter) {
            this.copyAfter = Objects.requireNonNull(copyAfter);
            return this;
        }

        public Builder copyAfter(Object copyAfter) {
            this.copyAfter = Output.of(Objects.requireNonNull(copyAfter));
            return this;
        }

        public Builder dataStore(Output<DataStoreInfoBaseArgs> dataStore) {
            this.dataStore = Objects.requireNonNull(dataStore);
            return this;
        }

        public Builder dataStore(DataStoreInfoBaseArgs dataStore) {
            this.dataStore = Output.of(Objects.requireNonNull(dataStore));
            return this;
        }
        public TargetCopySettingArgs build() {
            return new TargetCopySettingArgs(copyAfter, dataStore);
        }
    }
}
