// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.videoanalyzer;

import io.pulumi.azurenative.videoanalyzer.inputs.ParameterDefinitionArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LivePipelineArgs extends io.pulumi.resources.ResourceArgs {

    public static final LivePipelineArgs Empty = new LivePipelineArgs();

    /**
     * The Azure Video Analyzer account name.
     * 
     */
    @InputImport(name="accountName", required=true)
        private final Input<String> accountName;

    public Input<String> getAccountName() {
        return this.accountName;
    }

    /**
     * Maximum bitrate capacity in Kbps reserved for the live pipeline. The allowed range is from 500 to 3000 Kbps in increments of 100 Kbps. If the RTSP camera exceeds this capacity, then the service will disconnect temporarily from the camera. It will retry to re-establish connection (with exponential backoff), checking to see if the camera bitrate is now below the reserved capacity. Doing so will ensure that one 'noisy neighbor' does not affect other live pipelines in your account.
     * 
     */
    @InputImport(name="bitrateKbps", required=true)
        private final Input<Integer> bitrateKbps;

    public Input<Integer> getBitrateKbps() {
        return this.bitrateKbps;
    }

    /**
     * An optional description for the pipeline.
     * 
     */
    @InputImport(name="description")
        private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Live pipeline unique identifier.
     * 
     */
    @InputImport(name="livePipelineName")
        private final @Nullable Input<String> livePipelineName;

    public Input<String> getLivePipelineName() {
        return this.livePipelineName == null ? Input.empty() : this.livePipelineName;
    }

    /**
     * List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override parameters values for parameters which have been declared in the referenced topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be optionally be overridden.
     * 
     */
    @InputImport(name="parameters")
        private final @Nullable Input<List<ParameterDefinitionArgs>> parameters;

    public Input<List<ParameterDefinitionArgs>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
        private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The reference to an existing pipeline topology defined for real-time content processing. When activated, this live pipeline will process content according to the pipeline topology definition.
     * 
     */
    @InputImport(name="topologyName", required=true)
        private final Input<String> topologyName;

    public Input<String> getTopologyName() {
        return this.topologyName;
    }

    public LivePipelineArgs(
        Input<String> accountName,
        Input<Integer> bitrateKbps,
        @Nullable Input<String> description,
        @Nullable Input<String> livePipelineName,
        @Nullable Input<List<ParameterDefinitionArgs>> parameters,
        Input<String> resourceGroupName,
        Input<String> topologyName) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.bitrateKbps = Objects.requireNonNull(bitrateKbps, "expected parameter 'bitrateKbps' to be non-null");
        this.description = description;
        this.livePipelineName = livePipelineName;
        this.parameters = parameters;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.topologyName = Objects.requireNonNull(topologyName, "expected parameter 'topologyName' to be non-null");
    }

    private LivePipelineArgs() {
        this.accountName = Input.empty();
        this.bitrateKbps = Input.empty();
        this.description = Input.empty();
        this.livePipelineName = Input.empty();
        this.parameters = Input.empty();
        this.resourceGroupName = Input.empty();
        this.topologyName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LivePipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> accountName;
        private Input<Integer> bitrateKbps;
        private @Nullable Input<String> description;
        private @Nullable Input<String> livePipelineName;
        private @Nullable Input<List<ParameterDefinitionArgs>> parameters;
        private Input<String> resourceGroupName;
        private Input<String> topologyName;

        public Builder() {
    	      // Empty
        }

        public Builder(LivePipelineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.bitrateKbps = defaults.bitrateKbps;
    	      this.description = defaults.description;
    	      this.livePipelineName = defaults.livePipelineName;
    	      this.parameters = defaults.parameters;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.topologyName = defaults.topologyName;
        }

        public Builder setAccountName(Input<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }

        public Builder setAccountName(String accountName) {
            this.accountName = Input.of(Objects.requireNonNull(accountName));
            return this;
        }

        public Builder setBitrateKbps(Input<Integer> bitrateKbps) {
            this.bitrateKbps = Objects.requireNonNull(bitrateKbps);
            return this;
        }

        public Builder setBitrateKbps(Integer bitrateKbps) {
            this.bitrateKbps = Input.of(Objects.requireNonNull(bitrateKbps));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setLivePipelineName(@Nullable Input<String> livePipelineName) {
            this.livePipelineName = livePipelineName;
            return this;
        }

        public Builder setLivePipelineName(@Nullable String livePipelineName) {
            this.livePipelineName = Input.ofNullable(livePipelineName);
            return this;
        }

        public Builder setParameters(@Nullable Input<List<ParameterDefinitionArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setParameters(@Nullable List<ParameterDefinitionArgs> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setTopologyName(Input<String> topologyName) {
            this.topologyName = Objects.requireNonNull(topologyName);
            return this;
        }

        public Builder setTopologyName(String topologyName) {
            this.topologyName = Input.of(Objects.requireNonNull(topologyName));
            return this;
        }
        public LivePipelineArgs build() {
            return new LivePipelineArgs(accountName, bitrateKbps, description, livePipelineName, parameters, resourceGroupName, topologyName);
        }
    }
}
