// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The liveness probe requirements.
 * 
 */
public final class AKSServiceCreateRequestLivenessProbeRequirementsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AKSServiceCreateRequestLivenessProbeRequirementsArgs Empty = new AKSServiceCreateRequestLivenessProbeRequirementsArgs();

    /**
     * The number of failures to allow before returning an unhealthy status.
     * 
     */
    @InputImport(name="failureThreshold")
      private final @Nullable Output<Integer> failureThreshold;

    public Output<Integer> getFailureThreshold() {
        return this.failureThreshold == null ? Output.empty() : this.failureThreshold;
    }

    /**
     * The delay before the first probe in seconds.
     * 
     */
    @InputImport(name="initialDelaySeconds")
      private final @Nullable Output<Integer> initialDelaySeconds;

    public Output<Integer> getInitialDelaySeconds() {
        return this.initialDelaySeconds == null ? Output.empty() : this.initialDelaySeconds;
    }

    /**
     * The length of time between probes in seconds.
     * 
     */
    @InputImport(name="periodSeconds")
      private final @Nullable Output<Integer> periodSeconds;

    public Output<Integer> getPeriodSeconds() {
        return this.periodSeconds == null ? Output.empty() : this.periodSeconds;
    }

    /**
     * The number of successful probes before returning a healthy status.
     * 
     */
    @InputImport(name="successThreshold")
      private final @Nullable Output<Integer> successThreshold;

    public Output<Integer> getSuccessThreshold() {
        return this.successThreshold == null ? Output.empty() : this.successThreshold;
    }

    /**
     * The probe timeout in seconds.
     * 
     */
    @InputImport(name="timeoutSeconds")
      private final @Nullable Output<Integer> timeoutSeconds;

    public Output<Integer> getTimeoutSeconds() {
        return this.timeoutSeconds == null ? Output.empty() : this.timeoutSeconds;
    }

    public AKSServiceCreateRequestLivenessProbeRequirementsArgs(
        @Nullable Output<Integer> failureThreshold,
        @Nullable Output<Integer> initialDelaySeconds,
        @Nullable Output<Integer> periodSeconds,
        @Nullable Output<Integer> successThreshold,
        @Nullable Output<Integer> timeoutSeconds) {
        this.failureThreshold = failureThreshold;
        this.initialDelaySeconds = initialDelaySeconds;
        this.periodSeconds = periodSeconds;
        this.successThreshold = successThreshold;
        this.timeoutSeconds = timeoutSeconds;
    }

    private AKSServiceCreateRequestLivenessProbeRequirementsArgs() {
        this.failureThreshold = Output.empty();
        this.initialDelaySeconds = Output.empty();
        this.periodSeconds = Output.empty();
        this.successThreshold = Output.empty();
        this.timeoutSeconds = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AKSServiceCreateRequestLivenessProbeRequirementsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> failureThreshold;
        private @Nullable Output<Integer> initialDelaySeconds;
        private @Nullable Output<Integer> periodSeconds;
        private @Nullable Output<Integer> successThreshold;
        private @Nullable Output<Integer> timeoutSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(AKSServiceCreateRequestLivenessProbeRequirementsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.initialDelaySeconds = defaults.initialDelaySeconds;
    	      this.periodSeconds = defaults.periodSeconds;
    	      this.successThreshold = defaults.successThreshold;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        public Builder failureThreshold(@Nullable Output<Integer> failureThreshold) {
            this.failureThreshold = failureThreshold;
            return this;
        }

        public Builder failureThreshold(@Nullable Integer failureThreshold) {
            this.failureThreshold = Output.ofNullable(failureThreshold);
            return this;
        }

        public Builder initialDelaySeconds(@Nullable Output<Integer> initialDelaySeconds) {
            this.initialDelaySeconds = initialDelaySeconds;
            return this;
        }

        public Builder initialDelaySeconds(@Nullable Integer initialDelaySeconds) {
            this.initialDelaySeconds = Output.ofNullable(initialDelaySeconds);
            return this;
        }

        public Builder periodSeconds(@Nullable Output<Integer> periodSeconds) {
            this.periodSeconds = periodSeconds;
            return this;
        }

        public Builder periodSeconds(@Nullable Integer periodSeconds) {
            this.periodSeconds = Output.ofNullable(periodSeconds);
            return this;
        }

        public Builder successThreshold(@Nullable Output<Integer> successThreshold) {
            this.successThreshold = successThreshold;
            return this;
        }

        public Builder successThreshold(@Nullable Integer successThreshold) {
            this.successThreshold = Output.ofNullable(successThreshold);
            return this;
        }

        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = Output.ofNullable(timeoutSeconds);
            return this;
        }
        public AKSServiceCreateRequestLivenessProbeRequirementsArgs build() {
            return new AKSServiceCreateRequestLivenessProbeRequirementsArgs(failureThreshold, initialDelaySeconds, periodSeconds, successThreshold, timeoutSeconds);
        }
    }
}
