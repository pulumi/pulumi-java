// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab.outputs;

import io.pulumi.azurenative.devtestlab.outputs.ApplicableScheduleResponse;
import io.pulumi.azurenative.devtestlab.outputs.ArtifactDeploymentStatusPropertiesResponse;
import io.pulumi.azurenative.devtestlab.outputs.ArtifactInstallPropertiesResponse;
import io.pulumi.azurenative.devtestlab.outputs.ComputeVmPropertiesResponse;
import io.pulumi.azurenative.devtestlab.outputs.DataDiskPropertiesResponse;
import io.pulumi.azurenative.devtestlab.outputs.GalleryImageReferenceResponse;
import io.pulumi.azurenative.devtestlab.outputs.NetworkInterfacePropertiesResponse;
import io.pulumi.azurenative.devtestlab.outputs.ScheduleCreationParameterResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetVirtualMachineResult {
    /**
     * Indicates whether another user can take ownership of the virtual machine
     * 
     */
    private final @Nullable Boolean allowClaim;
    /**
     * The applicable schedule for the virtual machine.
     * 
     */
    private final ApplicableScheduleResponse applicableSchedule;
    /**
     * The artifact deployment status for the virtual machine.
     * 
     */
    private final ArtifactDeploymentStatusPropertiesResponse artifactDeploymentStatus;
    /**
     * The artifacts to be installed on the virtual machine.
     * 
     */
    private final @Nullable List<ArtifactInstallPropertiesResponse> artifacts;
    /**
     * The resource identifier (Microsoft.Compute) of the virtual machine.
     * 
     */
    private final String computeId;
    /**
     * The compute virtual machine properties.
     * 
     */
    private final ComputeVmPropertiesResponse computeVm;
    /**
     * The email address of creator of the virtual machine.
     * 
     */
    private final String createdByUser;
    /**
     * The object identifier of the creator of the virtual machine.
     * 
     */
    private final String createdByUserId;
    /**
     * The creation date of the virtual machine.
     * 
     */
    private final @Nullable String createdDate;
    /**
     * The custom image identifier of the virtual machine.
     * 
     */
    private final @Nullable String customImageId;
    /**
     * New or existing data disks to attach to the virtual machine after creation
     * 
     */
    private final @Nullable List<DataDiskPropertiesResponse> dataDiskParameters;
    /**
     * Indicates whether the virtual machine is to be created without a public IP address.
     * 
     */
    private final @Nullable Boolean disallowPublicIpAddress;
    /**
     * The resource ID of the environment that contains this virtual machine, if any.
     * 
     */
    private final @Nullable String environmentId;
    /**
     * The expiration date for VM.
     * 
     */
    private final @Nullable String expirationDate;
    /**
     * The fully-qualified domain name of the virtual machine.
     * 
     */
    private final String fqdn;
    /**
     * The Microsoft Azure Marketplace image reference of the virtual machine.
     * 
     */
    private final @Nullable GalleryImageReferenceResponse galleryImageReference;
    /**
     * The identifier of the resource.
     * 
     */
    private final String id;
    /**
     * Indicates whether this virtual machine uses an SSH key for authentication.
     * 
     */
    private final @Nullable Boolean isAuthenticationWithSshKey;
    /**
     * The lab subnet name of the virtual machine.
     * 
     */
    private final @Nullable String labSubnetName;
    /**
     * The lab virtual network identifier of the virtual machine.
     * 
     */
    private final @Nullable String labVirtualNetworkId;
    /**
     * Last known compute power state captured in DTL
     * 
     */
    private final String lastKnownPowerState;
    /**
     * The location of the resource.
     * 
     */
    private final @Nullable String location;
    /**
     * The name of the resource.
     * 
     */
    private final String name;
    /**
     * The network interface properties.
     * 
     */
    private final @Nullable NetworkInterfacePropertiesResponse networkInterface;
    /**
     * The notes of the virtual machine.
     * 
     */
    private final @Nullable String notes;
    /**
     * The OS type of the virtual machine.
     * 
     */
    private final String osType;
    /**
     * The object identifier of the owner of the virtual machine.
     * 
     */
    private final @Nullable String ownerObjectId;
    /**
     * The user principal name of the virtual machine owner.
     * 
     */
    private final @Nullable String ownerUserPrincipalName;
    /**
     * The password of the virtual machine administrator.
     * 
     */
    private final @Nullable String password;
    /**
     * The id of the plan associated with the virtual machine image
     * 
     */
    private final @Nullable String planId;
    /**
     * The provisioning status of the resource.
     * 
     */
    private final String provisioningState;
    /**
     * Virtual Machine schedules to be created
     * 
     */
    private final @Nullable List<ScheduleCreationParameterResponse> scheduleParameters;
    /**
     * The size of the virtual machine.
     * 
     */
    private final @Nullable String size;
    /**
     * The SSH key of the virtual machine administrator.
     * 
     */
    private final @Nullable String sshKey;
    /**
     * Storage type to use for virtual machine (i.e. Standard, Premium).
     * 
     */
    private final @Nullable String storageType;
    /**
     * The tags of the resource.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * The type of the resource.
     * 
     */
    private final String type;
    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    private final String uniqueIdentifier;
    /**
     * The user name of the virtual machine.
     * 
     */
    private final @Nullable String userName;
    /**
     * Tells source of creation of lab virtual machine. Output property only.
     * 
     */
    private final String virtualMachineCreationSource;

    @OutputCustomType.Constructor({"allowClaim","applicableSchedule","artifactDeploymentStatus","artifacts","computeId","computeVm","createdByUser","createdByUserId","createdDate","customImageId","dataDiskParameters","disallowPublicIpAddress","environmentId","expirationDate","fqdn","galleryImageReference","id","isAuthenticationWithSshKey","labSubnetName","labVirtualNetworkId","lastKnownPowerState","location","name","networkInterface","notes","osType","ownerObjectId","ownerUserPrincipalName","password","planId","provisioningState","scheduleParameters","size","sshKey","storageType","tags","type","uniqueIdentifier","userName","virtualMachineCreationSource"})
    private GetVirtualMachineResult(
        @Nullable Boolean allowClaim,
        ApplicableScheduleResponse applicableSchedule,
        ArtifactDeploymentStatusPropertiesResponse artifactDeploymentStatus,
        @Nullable List<ArtifactInstallPropertiesResponse> artifacts,
        String computeId,
        ComputeVmPropertiesResponse computeVm,
        String createdByUser,
        String createdByUserId,
        @Nullable String createdDate,
        @Nullable String customImageId,
        @Nullable List<DataDiskPropertiesResponse> dataDiskParameters,
        @Nullable Boolean disallowPublicIpAddress,
        @Nullable String environmentId,
        @Nullable String expirationDate,
        String fqdn,
        @Nullable GalleryImageReferenceResponse galleryImageReference,
        String id,
        @Nullable Boolean isAuthenticationWithSshKey,
        @Nullable String labSubnetName,
        @Nullable String labVirtualNetworkId,
        String lastKnownPowerState,
        @Nullable String location,
        String name,
        @Nullable NetworkInterfacePropertiesResponse networkInterface,
        @Nullable String notes,
        String osType,
        @Nullable String ownerObjectId,
        @Nullable String ownerUserPrincipalName,
        @Nullable String password,
        @Nullable String planId,
        String provisioningState,
        @Nullable List<ScheduleCreationParameterResponse> scheduleParameters,
        @Nullable String size,
        @Nullable String sshKey,
        @Nullable String storageType,
        @Nullable Map<String,String> tags,
        String type,
        String uniqueIdentifier,
        @Nullable String userName,
        String virtualMachineCreationSource) {
        this.allowClaim = allowClaim;
        this.applicableSchedule = Objects.requireNonNull(applicableSchedule);
        this.artifactDeploymentStatus = Objects.requireNonNull(artifactDeploymentStatus);
        this.artifacts = artifacts;
        this.computeId = Objects.requireNonNull(computeId);
        this.computeVm = Objects.requireNonNull(computeVm);
        this.createdByUser = Objects.requireNonNull(createdByUser);
        this.createdByUserId = Objects.requireNonNull(createdByUserId);
        this.createdDate = createdDate;
        this.customImageId = customImageId;
        this.dataDiskParameters = dataDiskParameters;
        this.disallowPublicIpAddress = disallowPublicIpAddress;
        this.environmentId = environmentId;
        this.expirationDate = expirationDate;
        this.fqdn = Objects.requireNonNull(fqdn);
        this.galleryImageReference = galleryImageReference;
        this.id = Objects.requireNonNull(id);
        this.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
        this.labSubnetName = labSubnetName;
        this.labVirtualNetworkId = labVirtualNetworkId;
        this.lastKnownPowerState = Objects.requireNonNull(lastKnownPowerState);
        this.location = location;
        this.name = Objects.requireNonNull(name);
        this.networkInterface = networkInterface;
        this.notes = notes;
        this.osType = Objects.requireNonNull(osType);
        this.ownerObjectId = ownerObjectId;
        this.ownerUserPrincipalName = ownerUserPrincipalName;
        this.password = password;
        this.planId = planId;
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.scheduleParameters = scheduleParameters;
        this.size = size;
        this.sshKey = sshKey;
        this.storageType = storageType;
        this.tags = tags;
        this.type = Objects.requireNonNull(type);
        this.uniqueIdentifier = Objects.requireNonNull(uniqueIdentifier);
        this.userName = userName;
        this.virtualMachineCreationSource = Objects.requireNonNull(virtualMachineCreationSource);
    }

    /**
     * Indicates whether another user can take ownership of the virtual machine
     * 
     */
    public Optional<Boolean> getAllowClaim() {
        return Optional.ofNullable(this.allowClaim);
    }
    /**
     * The applicable schedule for the virtual machine.
     * 
     */
    public ApplicableScheduleResponse getApplicableSchedule() {
        return this.applicableSchedule;
    }
    /**
     * The artifact deployment status for the virtual machine.
     * 
     */
    public ArtifactDeploymentStatusPropertiesResponse getArtifactDeploymentStatus() {
        return this.artifactDeploymentStatus;
    }
    /**
     * The artifacts to be installed on the virtual machine.
     * 
     */
    public List<ArtifactInstallPropertiesResponse> getArtifacts() {
        return this.artifacts == null ? List.of() : this.artifacts;
    }
    /**
     * The resource identifier (Microsoft.Compute) of the virtual machine.
     * 
     */
    public String getComputeId() {
        return this.computeId;
    }
    /**
     * The compute virtual machine properties.
     * 
     */
    public ComputeVmPropertiesResponse getComputeVm() {
        return this.computeVm;
    }
    /**
     * The email address of creator of the virtual machine.
     * 
     */
    public String getCreatedByUser() {
        return this.createdByUser;
    }
    /**
     * The object identifier of the creator of the virtual machine.
     * 
     */
    public String getCreatedByUserId() {
        return this.createdByUserId;
    }
    /**
     * The creation date of the virtual machine.
     * 
     */
    public Optional<String> getCreatedDate() {
        return Optional.ofNullable(this.createdDate);
    }
    /**
     * The custom image identifier of the virtual machine.
     * 
     */
    public Optional<String> getCustomImageId() {
        return Optional.ofNullable(this.customImageId);
    }
    /**
     * New or existing data disks to attach to the virtual machine after creation
     * 
     */
    public List<DataDiskPropertiesResponse> getDataDiskParameters() {
        return this.dataDiskParameters == null ? List.of() : this.dataDiskParameters;
    }
    /**
     * Indicates whether the virtual machine is to be created without a public IP address.
     * 
     */
    public Optional<Boolean> getDisallowPublicIpAddress() {
        return Optional.ofNullable(this.disallowPublicIpAddress);
    }
    /**
     * The resource ID of the environment that contains this virtual machine, if any.
     * 
     */
    public Optional<String> getEnvironmentId() {
        return Optional.ofNullable(this.environmentId);
    }
    /**
     * The expiration date for VM.
     * 
     */
    public Optional<String> getExpirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }
    /**
     * The fully-qualified domain name of the virtual machine.
     * 
     */
    public String getFqdn() {
        return this.fqdn;
    }
    /**
     * The Microsoft Azure Marketplace image reference of the virtual machine.
     * 
     */
    public Optional<GalleryImageReferenceResponse> getGalleryImageReference() {
        return Optional.ofNullable(this.galleryImageReference);
    }
    /**
     * The identifier of the resource.
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * Indicates whether this virtual machine uses an SSH key for authentication.
     * 
     */
    public Optional<Boolean> getIsAuthenticationWithSshKey() {
        return Optional.ofNullable(this.isAuthenticationWithSshKey);
    }
    /**
     * The lab subnet name of the virtual machine.
     * 
     */
    public Optional<String> getLabSubnetName() {
        return Optional.ofNullable(this.labSubnetName);
    }
    /**
     * The lab virtual network identifier of the virtual machine.
     * 
     */
    public Optional<String> getLabVirtualNetworkId() {
        return Optional.ofNullable(this.labVirtualNetworkId);
    }
    /**
     * Last known compute power state captured in DTL
     * 
     */
    public String getLastKnownPowerState() {
        return this.lastKnownPowerState;
    }
    /**
     * The location of the resource.
     * 
     */
    public Optional<String> getLocation() {
        return Optional.ofNullable(this.location);
    }
    /**
     * The name of the resource.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * The network interface properties.
     * 
     */
    public Optional<NetworkInterfacePropertiesResponse> getNetworkInterface() {
        return Optional.ofNullable(this.networkInterface);
    }
    /**
     * The notes of the virtual machine.
     * 
     */
    public Optional<String> getNotes() {
        return Optional.ofNullable(this.notes);
    }
    /**
     * The OS type of the virtual machine.
     * 
     */
    public String getOsType() {
        return this.osType;
    }
    /**
     * The object identifier of the owner of the virtual machine.
     * 
     */
    public Optional<String> getOwnerObjectId() {
        return Optional.ofNullable(this.ownerObjectId);
    }
    /**
     * The user principal name of the virtual machine owner.
     * 
     */
    public Optional<String> getOwnerUserPrincipalName() {
        return Optional.ofNullable(this.ownerUserPrincipalName);
    }
    /**
     * The password of the virtual machine administrator.
     * 
     */
    public Optional<String> getPassword() {
        return Optional.ofNullable(this.password);
    }
    /**
     * The id of the plan associated with the virtual machine image
     * 
     */
    public Optional<String> getPlanId() {
        return Optional.ofNullable(this.planId);
    }
    /**
     * The provisioning status of the resource.
     * 
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * Virtual Machine schedules to be created
     * 
     */
    public List<ScheduleCreationParameterResponse> getScheduleParameters() {
        return this.scheduleParameters == null ? List.of() : this.scheduleParameters;
    }
    /**
     * The size of the virtual machine.
     * 
     */
    public Optional<String> getSize() {
        return Optional.ofNullable(this.size);
    }
    /**
     * The SSH key of the virtual machine administrator.
     * 
     */
    public Optional<String> getSshKey() {
        return Optional.ofNullable(this.sshKey);
    }
    /**
     * Storage type to use for virtual machine (i.e. Standard, Premium).
     * 
     */
    public Optional<String> getStorageType() {
        return Optional.ofNullable(this.storageType);
    }
    /**
     * The tags of the resource.
     * 
     */
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * The type of the resource.
     * 
     */
    public String getType() {
        return this.type;
    }
    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    public String getUniqueIdentifier() {
        return this.uniqueIdentifier;
    }
    /**
     * The user name of the virtual machine.
     * 
     */
    public Optional<String> getUserName() {
        return Optional.ofNullable(this.userName);
    }
    /**
     * Tells source of creation of lab virtual machine. Output property only.
     * 
     */
    public String getVirtualMachineCreationSource() {
        return this.virtualMachineCreationSource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualMachineResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean allowClaim;
        private ApplicableScheduleResponse applicableSchedule;
        private ArtifactDeploymentStatusPropertiesResponse artifactDeploymentStatus;
        private @Nullable List<ArtifactInstallPropertiesResponse> artifacts;
        private String computeId;
        private ComputeVmPropertiesResponse computeVm;
        private String createdByUser;
        private String createdByUserId;
        private @Nullable String createdDate;
        private @Nullable String customImageId;
        private @Nullable List<DataDiskPropertiesResponse> dataDiskParameters;
        private @Nullable Boolean disallowPublicIpAddress;
        private @Nullable String environmentId;
        private @Nullable String expirationDate;
        private String fqdn;
        private @Nullable GalleryImageReferenceResponse galleryImageReference;
        private String id;
        private @Nullable Boolean isAuthenticationWithSshKey;
        private @Nullable String labSubnetName;
        private @Nullable String labVirtualNetworkId;
        private String lastKnownPowerState;
        private @Nullable String location;
        private String name;
        private @Nullable NetworkInterfacePropertiesResponse networkInterface;
        private @Nullable String notes;
        private String osType;
        private @Nullable String ownerObjectId;
        private @Nullable String ownerUserPrincipalName;
        private @Nullable String password;
        private @Nullable String planId;
        private String provisioningState;
        private @Nullable List<ScheduleCreationParameterResponse> scheduleParameters;
        private @Nullable String size;
        private @Nullable String sshKey;
        private @Nullable String storageType;
        private @Nullable Map<String,String> tags;
        private String type;
        private String uniqueIdentifier;
        private @Nullable String userName;
        private String virtualMachineCreationSource;

        public Builder() {
    	      // Empty
        }

        public Builder(GetVirtualMachineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowClaim = defaults.allowClaim;
    	      this.applicableSchedule = defaults.applicableSchedule;
    	      this.artifactDeploymentStatus = defaults.artifactDeploymentStatus;
    	      this.artifacts = defaults.artifacts;
    	      this.computeId = defaults.computeId;
    	      this.computeVm = defaults.computeVm;
    	      this.createdByUser = defaults.createdByUser;
    	      this.createdByUserId = defaults.createdByUserId;
    	      this.createdDate = defaults.createdDate;
    	      this.customImageId = defaults.customImageId;
    	      this.dataDiskParameters = defaults.dataDiskParameters;
    	      this.disallowPublicIpAddress = defaults.disallowPublicIpAddress;
    	      this.environmentId = defaults.environmentId;
    	      this.expirationDate = defaults.expirationDate;
    	      this.fqdn = defaults.fqdn;
    	      this.galleryImageReference = defaults.galleryImageReference;
    	      this.id = defaults.id;
    	      this.isAuthenticationWithSshKey = defaults.isAuthenticationWithSshKey;
    	      this.labSubnetName = defaults.labSubnetName;
    	      this.labVirtualNetworkId = defaults.labVirtualNetworkId;
    	      this.lastKnownPowerState = defaults.lastKnownPowerState;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.networkInterface = defaults.networkInterface;
    	      this.notes = defaults.notes;
    	      this.osType = defaults.osType;
    	      this.ownerObjectId = defaults.ownerObjectId;
    	      this.ownerUserPrincipalName = defaults.ownerUserPrincipalName;
    	      this.password = defaults.password;
    	      this.planId = defaults.planId;
    	      this.provisioningState = defaults.provisioningState;
    	      this.scheduleParameters = defaults.scheduleParameters;
    	      this.size = defaults.size;
    	      this.sshKey = defaults.sshKey;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
    	      this.userName = defaults.userName;
    	      this.virtualMachineCreationSource = defaults.virtualMachineCreationSource;
        }

        public Builder setAllowClaim(@Nullable Boolean allowClaim) {
            this.allowClaim = allowClaim;
            return this;
        }

        public Builder setApplicableSchedule(ApplicableScheduleResponse applicableSchedule) {
            this.applicableSchedule = Objects.requireNonNull(applicableSchedule);
            return this;
        }

        public Builder setArtifactDeploymentStatus(ArtifactDeploymentStatusPropertiesResponse artifactDeploymentStatus) {
            this.artifactDeploymentStatus = Objects.requireNonNull(artifactDeploymentStatus);
            return this;
        }

        public Builder setArtifacts(@Nullable List<ArtifactInstallPropertiesResponse> artifacts) {
            this.artifacts = artifacts;
            return this;
        }

        public Builder setComputeId(String computeId) {
            this.computeId = Objects.requireNonNull(computeId);
            return this;
        }

        public Builder setComputeVm(ComputeVmPropertiesResponse computeVm) {
            this.computeVm = Objects.requireNonNull(computeVm);
            return this;
        }

        public Builder setCreatedByUser(String createdByUser) {
            this.createdByUser = Objects.requireNonNull(createdByUser);
            return this;
        }

        public Builder setCreatedByUserId(String createdByUserId) {
            this.createdByUserId = Objects.requireNonNull(createdByUserId);
            return this;
        }

        public Builder setCreatedDate(@Nullable String createdDate) {
            this.createdDate = createdDate;
            return this;
        }

        public Builder setCustomImageId(@Nullable String customImageId) {
            this.customImageId = customImageId;
            return this;
        }

        public Builder setDataDiskParameters(@Nullable List<DataDiskPropertiesResponse> dataDiskParameters) {
            this.dataDiskParameters = dataDiskParameters;
            return this;
        }

        public Builder setDisallowPublicIpAddress(@Nullable Boolean disallowPublicIpAddress) {
            this.disallowPublicIpAddress = disallowPublicIpAddress;
            return this;
        }

        public Builder setEnvironmentId(@Nullable String environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        public Builder setExpirationDate(@Nullable String expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }

        public Builder setFqdn(String fqdn) {
            this.fqdn = Objects.requireNonNull(fqdn);
            return this;
        }

        public Builder setGalleryImageReference(@Nullable GalleryImageReferenceResponse galleryImageReference) {
            this.galleryImageReference = galleryImageReference;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIsAuthenticationWithSshKey(@Nullable Boolean isAuthenticationWithSshKey) {
            this.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
            return this;
        }

        public Builder setLabSubnetName(@Nullable String labSubnetName) {
            this.labSubnetName = labSubnetName;
            return this;
        }

        public Builder setLabVirtualNetworkId(@Nullable String labVirtualNetworkId) {
            this.labVirtualNetworkId = labVirtualNetworkId;
            return this;
        }

        public Builder setLastKnownPowerState(String lastKnownPowerState) {
            this.lastKnownPowerState = Objects.requireNonNull(lastKnownPowerState);
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = location;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetworkInterface(@Nullable NetworkInterfacePropertiesResponse networkInterface) {
            this.networkInterface = networkInterface;
            return this;
        }

        public Builder setNotes(@Nullable String notes) {
            this.notes = notes;
            return this;
        }

        public Builder setOsType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }

        public Builder setOwnerObjectId(@Nullable String ownerObjectId) {
            this.ownerObjectId = ownerObjectId;
            return this;
        }

        public Builder setOwnerUserPrincipalName(@Nullable String ownerUserPrincipalName) {
            this.ownerUserPrincipalName = ownerUserPrincipalName;
            return this;
        }

        public Builder setPassword(@Nullable String password) {
            this.password = password;
            return this;
        }

        public Builder setPlanId(@Nullable String planId) {
            this.planId = planId;
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setScheduleParameters(@Nullable List<ScheduleCreationParameterResponse> scheduleParameters) {
            this.scheduleParameters = scheduleParameters;
            return this;
        }

        public Builder setSize(@Nullable String size) {
            this.size = size;
            return this;
        }

        public Builder setSshKey(@Nullable String sshKey) {
            this.sshKey = sshKey;
            return this;
        }

        public Builder setStorageType(@Nullable String storageType) {
            this.storageType = storageType;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUniqueIdentifier(String uniqueIdentifier) {
            this.uniqueIdentifier = Objects.requireNonNull(uniqueIdentifier);
            return this;
        }

        public Builder setUserName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }

        public Builder setVirtualMachineCreationSource(String virtualMachineCreationSource) {
            this.virtualMachineCreationSource = Objects.requireNonNull(virtualMachineCreationSource);
            return this;
        }
        public GetVirtualMachineResult build() {
            return new GetVirtualMachineResult(allowClaim, applicableSchedule, artifactDeploymentStatus, artifacts, computeId, computeVm, createdByUser, createdByUserId, createdDate, customImageId, dataDiskParameters, disallowPublicIpAddress, environmentId, expirationDate, fqdn, galleryImageReference, id, isAuthenticationWithSshKey, labSubnetName, labVirtualNetworkId, lastKnownPowerState, location, name, networkInterface, notes, osType, ownerObjectId, ownerUserPrincipalName, password, planId, provisioningState, scheduleParameters, size, sshKey, storageType, tags, type, uniqueIdentifier, userName, virtualMachineCreationSource);
        }
    }
}
