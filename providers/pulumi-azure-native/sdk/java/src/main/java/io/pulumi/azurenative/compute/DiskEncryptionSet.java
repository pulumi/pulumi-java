// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.compute.DiskEncryptionSetArgs;
import io.pulumi.azurenative.compute.outputs.EncryptionSetIdentityResponse;
import io.pulumi.azurenative.compute.outputs.KeyForDiskEncryptionSetResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * disk encryption set resource.
API Version: 2020-12-01.

{{% examples %}}
## Example Usage
{{% example %}}
### Create a disk encryption set with key vault from a different subscription.
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var diskEncryptionSet = new AzureNative.Compute.DiskEncryptionSet("diskEncryptionSet", new AzureNative.Compute.DiskEncryptionSetArgs
        {
            ActiveKey = new AzureNative.Compute.Inputs.KeyForDiskEncryptionSetArgs
            {
                KeyUrl = "https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}",
            },
            DiskEncryptionSetName = "myDiskEncryptionSet",
            EncryptionType = "EncryptionAtRestWithCustomerKey",
            Identity = new AzureNative.Compute.Inputs.EncryptionSetIdentityArgs
            {
                Type = "SystemAssigned",
            },
            Location = "West US",
            ResourceGroupName = "myResourceGroup",
        });
    }

}

```

```go
package main

import (
	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := compute.NewDiskEncryptionSet(ctx, "diskEncryptionSet", &compute.DiskEncryptionSetArgs{
			ActiveKey: &compute.KeyForDiskEncryptionSetArgs{
				KeyUrl: pulumi.String("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
			},
			DiskEncryptionSetName: pulumi.String("myDiskEncryptionSet"),
			EncryptionType:        pulumi.String("EncryptionAtRestWithCustomerKey"),
			Identity: &compute.EncryptionSetIdentityArgs{
				Type: pulumi.String("SystemAssigned"),
			},
			Location:          pulumi.String("West US"),
			ResourceGroupName: pulumi.String("myResourceGroup"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const diskEncryptionSet = new azure_native.compute.DiskEncryptionSet("diskEncryptionSet", {
    activeKey: {
        keyUrl: "https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}",
    },
    diskEncryptionSetName: "myDiskEncryptionSet",
    encryptionType: "EncryptionAtRestWithCustomerKey",
    identity: {
        type: "SystemAssigned",
    },
    location: "West US",
    resourceGroupName: "myResourceGroup",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

disk_encryption_set = azure_native.compute.DiskEncryptionSet("diskEncryptionSet",
    active_key=azure_native.compute.KeyForDiskEncryptionSetArgs(
        key_url="https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}",
    ),
    disk_encryption_set_name="myDiskEncryptionSet",
    encryption_type="EncryptionAtRestWithCustomerKey",
    identity=azure_native.compute.EncryptionSetIdentityArgs(
        type="SystemAssigned",
    ),
    location="West US",
    resource_group_name="myResourceGroup")

```

{{% /example %}}
{{% example %}}
### Create a disk encryption set.
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var diskEncryptionSet = new AzureNative.Compute.DiskEncryptionSet("diskEncryptionSet", new AzureNative.Compute.DiskEncryptionSetArgs
        {
            ActiveKey = new AzureNative.Compute.Inputs.KeyForDiskEncryptionSetArgs
            {
                KeyUrl = "https://myvmvault.vault-int.azure-int.net/keys/{key}",
                SourceVault = new AzureNative.Compute.Inputs.SourceVaultArgs
                {
                    Id = "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault",
                },
            },
            DiskEncryptionSetName = "myDiskEncryptionSet",
            EncryptionType = "EncryptionAtRestWithCustomerKey",
            Identity = new AzureNative.Compute.Inputs.EncryptionSetIdentityArgs
            {
                Type = "SystemAssigned",
            },
            Location = "West US",
            ResourceGroupName = "myResourceGroup",
        });
    }

}

```

```go
package main

import (
	compute "github.com/pulumi/pulumi-azure-native/sdk/go/azure/compute"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := compute.NewDiskEncryptionSet(ctx, "diskEncryptionSet", &compute.DiskEncryptionSetArgs{
			ActiveKey: &compute.KeyForDiskEncryptionSetArgs{
				KeyUrl: pulumi.String("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &compute.SourceVaultArgs{
					Id: pulumi.String("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			DiskEncryptionSetName: pulumi.String("myDiskEncryptionSet"),
			EncryptionType:        pulumi.String("EncryptionAtRestWithCustomerKey"),
			Identity: &compute.EncryptionSetIdentityArgs{
				Type: pulumi.String("SystemAssigned"),
			},
			Location:          pulumi.String("West US"),
			ResourceGroupName: pulumi.String("myResourceGroup"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const diskEncryptionSet = new azure_native.compute.DiskEncryptionSet("diskEncryptionSet", {
    activeKey: {
        keyUrl: "https://myvmvault.vault-int.azure-int.net/keys/{key}",
        sourceVault: {
            id: "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault",
        },
    },
    diskEncryptionSetName: "myDiskEncryptionSet",
    encryptionType: "EncryptionAtRestWithCustomerKey",
    identity: {
        type: "SystemAssigned",
    },
    location: "West US",
    resourceGroupName: "myResourceGroup",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

disk_encryption_set = azure_native.compute.DiskEncryptionSet("diskEncryptionSet",
    active_key=azure_native.compute.KeyForDiskEncryptionSetArgs(
        key_url="https://myvmvault.vault-int.azure-int.net/keys/{key}",
        source_vault=azure_native.compute.SourceVaultArgs(
            id="/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault",
        ),
    ),
    disk_encryption_set_name="myDiskEncryptionSet",
    encryption_type="EncryptionAtRestWithCustomerKey",
    identity=azure_native.compute.EncryptionSetIdentityArgs(
        type="SystemAssigned",
    ),
    location="West US",
    resource_group_name="myResourceGroup")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:compute:DiskEncryptionSet myDiskEncryptionSet /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName} 
```

 */
@ResourceType(type="azure-native:compute:DiskEncryptionSet")
public class DiskEncryptionSet extends io.pulumi.resources.CustomResource {
    /**
     * The key vault key which is currently used by this disk encryption set.
     */
    @OutputExport(name="activeKey", type=KeyForDiskEncryptionSetResponse.class, parameters={})
    private Output</* @Nullable */ KeyForDiskEncryptionSetResponse> activeKey;

    /**
     * @return The key vault key which is currently used by this disk encryption set.
     */
    public Output</* @Nullable */ KeyForDiskEncryptionSetResponse> getActiveKey() {
        return this.activeKey;
    }
    /**
     * The type of key used to encrypt the data of the disk.
     */
    @OutputExport(name="encryptionType", type=String.class, parameters={})
    private Output</* @Nullable */ String> encryptionType;

    /**
     * @return The type of key used to encrypt the data of the disk.
     */
    public Output</* @Nullable */ String> getEncryptionType() {
        return this.encryptionType;
    }
    /**
     * The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
     */
    @OutputExport(name="identity", type=EncryptionSetIdentityResponse.class, parameters={})
    private Output</* @Nullable */ EncryptionSetIdentityResponse> identity;

    /**
     * @return The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
     */
    public Output</* @Nullable */ EncryptionSetIdentityResponse> getIdentity() {
        return this.identity;
    }
    /**
     * The time when the active key of this disk encryption set was updated.
     */
    @OutputExport(name="lastKeyRotationTimestamp", type=String.class, parameters={})
    private Output<String> lastKeyRotationTimestamp;

    /**
     * @return The time when the active key of this disk encryption set was updated.
     */
    public Output<String> getLastKeyRotationTimestamp() {
        return this.lastKeyRotationTimestamp;
    }
    /**
     * Resource location
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource location
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Resource name
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
     */
    @OutputExport(name="previousKeys", type=List.class, parameters={KeyForDiskEncryptionSetResponse.class})
    private Output<List<KeyForDiskEncryptionSetResponse>> previousKeys;

    /**
     * @return A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
     */
    public Output<List<KeyForDiskEncryptionSetResponse>> getPreviousKeys() {
        return this.previousKeys;
    }
    /**
     * The disk encryption set provisioning state.
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The disk encryption set provisioning state.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * Set this flag to true to enable auto-updating of this disk encryption set to the latest key version.
     */
    @OutputExport(name="rotationToLatestKeyVersionEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> rotationToLatestKeyVersionEnabled;

    /**
     * @return Set this flag to true to enable auto-updating of this disk encryption set to the latest key version.
     */
    public Output</* @Nullable */ Boolean> getRotationToLatestKeyVersionEnabled() {
        return this.rotationToLatestKeyVersionEnabled;
    }
    /**
     * Resource tags
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Resource type
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DiskEncryptionSet(String name, DiskEncryptionSetArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:compute:DiskEncryptionSet", name, args == null ? DiskEncryptionSetArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private DiskEncryptionSet(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:compute:DiskEncryptionSet", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:compute/v20190701:DiskEncryptionSet").build()),
                Input.of(Alias.builder().setType("azure-native:compute/v20191101:DiskEncryptionSet").build()),
                Input.of(Alias.builder().setType("azure-native:compute/v20200501:DiskEncryptionSet").build()),
                Input.of(Alias.builder().setType("azure-native:compute/v20200630:DiskEncryptionSet").build()),
                Input.of(Alias.builder().setType("azure-native:compute/v20200930:DiskEncryptionSet").build()),
                Input.of(Alias.builder().setType("azure-native:compute/v20201201:DiskEncryptionSet").build()),
                Input.of(Alias.builder().setType("azure-native:compute/v20210401:DiskEncryptionSet").build()),
                Input.of(Alias.builder().setType("azure-native:compute/v20210801:DiskEncryptionSet").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DiskEncryptionSet get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new DiskEncryptionSet(name, id, options);
    }
}
