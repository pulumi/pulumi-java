// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.quantum.inputs;

import io.pulumi.azurenative.quantum.enums.Status;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Information about a Provider. A Provider is an entity that offers Targets to run Azure Quantum Jobs.
 * 
 */
public final class ProviderArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * The provider's marketplace application display name.
     * 
     */
    @InputImport(name="applicationName")
    private final @Nullable Input<String> applicationName;

    public Input<String> getApplicationName() {
        return this.applicationName == null ? Input.empty() : this.applicationName;
    }

    /**
     * A Uri identifying the specific instance of this provider.
     * 
     */
    @InputImport(name="instanceUri")
    private final @Nullable Input<String> instanceUri;

    public Input<String> getInstanceUri() {
        return this.instanceUri == null ? Input.empty() : this.instanceUri;
    }

    /**
     * Unique id of this provider.
     * 
     */
    @InputImport(name="providerId")
    private final @Nullable Input<String> providerId;

    public Input<String> getProviderId() {
        return this.providerId == null ? Input.empty() : this.providerId;
    }

    /**
     * The sku associated with pricing information for this provider.
     * 
     */
    @InputImport(name="providerSku")
    private final @Nullable Input<String> providerSku;

    public Input<String> getProviderSku() {
        return this.providerSku == null ? Input.empty() : this.providerSku;
    }

    /**
     * Provisioning status field
     * 
     */
    @InputImport(name="provisioningState")
    private final @Nullable Input<Either<String,Status>> provisioningState;

    public Input<Either<String,Status>> getProvisioningState() {
        return this.provisioningState == null ? Input.empty() : this.provisioningState;
    }

    /**
     * Id to track resource usage for the provider.
     * 
     */
    @InputImport(name="resourceUsageId")
    private final @Nullable Input<String> resourceUsageId;

    public Input<String> getResourceUsageId() {
        return this.resourceUsageId == null ? Input.empty() : this.resourceUsageId;
    }

    public ProviderArgs(
        @Nullable Input<String> applicationName,
        @Nullable Input<String> instanceUri,
        @Nullable Input<String> providerId,
        @Nullable Input<String> providerSku,
        @Nullable Input<Either<String,Status>> provisioningState,
        @Nullable Input<String> resourceUsageId) {
        this.applicationName = applicationName;
        this.instanceUri = instanceUri;
        this.providerId = providerId;
        this.providerSku = providerSku;
        this.provisioningState = provisioningState;
        this.resourceUsageId = resourceUsageId;
    }

    private ProviderArgs() {
        this.applicationName = Input.empty();
        this.instanceUri = Input.empty();
        this.providerId = Input.empty();
        this.providerSku = Input.empty();
        this.provisioningState = Input.empty();
        this.resourceUsageId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> applicationName;
        private @Nullable Input<String> instanceUri;
        private @Nullable Input<String> providerId;
        private @Nullable Input<String> providerSku;
        private @Nullable Input<Either<String,Status>> provisioningState;
        private @Nullable Input<String> resourceUsageId;

        public Builder() {
    	      // Empty
        }

        public Builder(ProviderArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationName = defaults.applicationName;
    	      this.instanceUri = defaults.instanceUri;
    	      this.providerId = defaults.providerId;
    	      this.providerSku = defaults.providerSku;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceUsageId = defaults.resourceUsageId;
        }

        public Builder setApplicationName(@Nullable Input<String> applicationName) {
            this.applicationName = applicationName;
            return this;
        }

        public Builder setApplicationName(@Nullable String applicationName) {
            this.applicationName = Input.ofNullable(applicationName);
            return this;
        }

        public Builder setInstanceUri(@Nullable Input<String> instanceUri) {
            this.instanceUri = instanceUri;
            return this;
        }

        public Builder setInstanceUri(@Nullable String instanceUri) {
            this.instanceUri = Input.ofNullable(instanceUri);
            return this;
        }

        public Builder setProviderId(@Nullable Input<String> providerId) {
            this.providerId = providerId;
            return this;
        }

        public Builder setProviderId(@Nullable String providerId) {
            this.providerId = Input.ofNullable(providerId);
            return this;
        }

        public Builder setProviderSku(@Nullable Input<String> providerSku) {
            this.providerSku = providerSku;
            return this;
        }

        public Builder setProviderSku(@Nullable String providerSku) {
            this.providerSku = Input.ofNullable(providerSku);
            return this;
        }

        public Builder setProvisioningState(@Nullable Input<Either<String,Status>> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }

        public Builder setProvisioningState(@Nullable Either<String,Status> provisioningState) {
            this.provisioningState = Input.ofNullable(provisioningState);
            return this;
        }

        public Builder setResourceUsageId(@Nullable Input<String> resourceUsageId) {
            this.resourceUsageId = resourceUsageId;
            return this;
        }

        public Builder setResourceUsageId(@Nullable String resourceUsageId) {
            this.resourceUsageId = Input.ofNullable(resourceUsageId);
            return this;
        }

        public ProviderArgs build() {
            return new ProviderArgs(applicationName, instanceUri, providerId, providerSku, provisioningState, resourceUsageId);
        }
    }
}
