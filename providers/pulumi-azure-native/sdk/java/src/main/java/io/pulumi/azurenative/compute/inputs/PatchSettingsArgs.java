// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.compute.inputs;

import io.pulumi.azurenative.compute.enums.WindowsPatchAssessmentMode;
import io.pulumi.azurenative.compute.enums.WindowsVMGuestPatchMode;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies settings related to VM Guest Patching on Windows.
 * 
 */
public final class PatchSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final PatchSettingsArgs Empty = new PatchSettingsArgs();

    /**
     * Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
     * 
     */
    @InputImport(name="assessmentMode")
    private final @Nullable Input<Either<String,WindowsPatchAssessmentMode>> assessmentMode;

    public Input<Either<String,WindowsPatchAssessmentMode>> getAssessmentMode() {
        return this.assessmentMode == null ? Input.empty() : this.assessmentMode;
    }

    /**
     * Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
     * 
     */
    @InputImport(name="enableHotpatching")
    private final @Nullable Input<Boolean> enableHotpatching;

    public Input<Boolean> getEnableHotpatching() {
        return this.enableHotpatching == null ? Input.empty() : this.enableHotpatching;
    }

    /**
     * Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
     * 
     */
    @InputImport(name="patchMode")
    private final @Nullable Input<Either<String,WindowsVMGuestPatchMode>> patchMode;

    public Input<Either<String,WindowsVMGuestPatchMode>> getPatchMode() {
        return this.patchMode == null ? Input.empty() : this.patchMode;
    }

    public PatchSettingsArgs(
        @Nullable Input<Either<String,WindowsPatchAssessmentMode>> assessmentMode,
        @Nullable Input<Boolean> enableHotpatching,
        @Nullable Input<Either<String,WindowsVMGuestPatchMode>> patchMode) {
        this.assessmentMode = assessmentMode;
        this.enableHotpatching = enableHotpatching;
        this.patchMode = patchMode;
    }

    private PatchSettingsArgs() {
        this.assessmentMode = Input.empty();
        this.enableHotpatching = Input.empty();
        this.patchMode = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PatchSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,WindowsPatchAssessmentMode>> assessmentMode;
        private @Nullable Input<Boolean> enableHotpatching;
        private @Nullable Input<Either<String,WindowsVMGuestPatchMode>> patchMode;

        public Builder() {
    	      // Empty
        }

        public Builder(PatchSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assessmentMode = defaults.assessmentMode;
    	      this.enableHotpatching = defaults.enableHotpatching;
    	      this.patchMode = defaults.patchMode;
        }

        public Builder setAssessmentMode(@Nullable Input<Either<String,WindowsPatchAssessmentMode>> assessmentMode) {
            this.assessmentMode = assessmentMode;
            return this;
        }

        public Builder setAssessmentMode(@Nullable Either<String,WindowsPatchAssessmentMode> assessmentMode) {
            this.assessmentMode = Input.ofNullable(assessmentMode);
            return this;
        }

        public Builder setEnableHotpatching(@Nullable Input<Boolean> enableHotpatching) {
            this.enableHotpatching = enableHotpatching;
            return this;
        }

        public Builder setEnableHotpatching(@Nullable Boolean enableHotpatching) {
            this.enableHotpatching = Input.ofNullable(enableHotpatching);
            return this;
        }

        public Builder setPatchMode(@Nullable Input<Either<String,WindowsVMGuestPatchMode>> patchMode) {
            this.patchMode = patchMode;
            return this;
        }

        public Builder setPatchMode(@Nullable Either<String,WindowsVMGuestPatchMode> patchMode) {
            this.patchMode = Input.ofNullable(patchMode);
            return this;
        }

        public PatchSettingsArgs build() {
            return new PatchSettingsArgs(assessmentMode, enableHotpatching, patchMode);
        }
    }
}
