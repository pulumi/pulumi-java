// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabricmesh.outputs;

import io.pulumi.azurenative.servicefabricmesh.outputs.ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class ApplicationScopedVolumeResponse {
    /**
     * Describes parameters for creating application-scoped volumes.
     * 
     */
    private final ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskResponse creationParameters;
    /**
     * The path within the container at which the volume should be mounted. Only valid path characters are allowed.
     * 
     */
    private final String destinationPath;
    /**
     * Name of the volume being referenced.
     * 
     */
    private final String name;
    /**
     * The flag indicating whether the volume is read only. Default is 'false'.
     * 
     */
    private final @Nullable Boolean readOnly;

    @OutputCustomType.Constructor({"creationParameters","destinationPath","name","readOnly"})
    private ApplicationScopedVolumeResponse(
        ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskResponse creationParameters,
        String destinationPath,
        String name,
        @Nullable Boolean readOnly) {
        this.creationParameters = Objects.requireNonNull(creationParameters);
        this.destinationPath = Objects.requireNonNull(destinationPath);
        this.name = Objects.requireNonNull(name);
        this.readOnly = readOnly;
    }

    /**
     * Describes parameters for creating application-scoped volumes.
     * 
    */
    public ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskResponse getCreationParameters() {
        return this.creationParameters;
    }
    /**
     * The path within the container at which the volume should be mounted. Only valid path characters are allowed.
     * 
    */
    public String getDestinationPath() {
        return this.destinationPath;
    }
    /**
     * Name of the volume being referenced.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * The flag indicating whether the volume is read only. Default is 'false'.
     * 
    */
    public Optional<Boolean> getReadOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationScopedVolumeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskResponse creationParameters;
        private String destinationPath;
        private String name;
        private @Nullable Boolean readOnly;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationScopedVolumeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationParameters = defaults.creationParameters;
    	      this.destinationPath = defaults.destinationPath;
    	      this.name = defaults.name;
    	      this.readOnly = defaults.readOnly;
        }

        public Builder setCreationParameters(ApplicationScopedVolumeCreationParametersServiceFabricVolumeDiskResponse creationParameters) {
            this.creationParameters = Objects.requireNonNull(creationParameters);
            return this;
        }

        public Builder setDestinationPath(String destinationPath) {
            this.destinationPath = Objects.requireNonNull(destinationPath);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setReadOnly(@Nullable Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public ApplicationScopedVolumeResponse build() {
            return new ApplicationScopedVolumeResponse(creationParameters, destinationPath, name, readOnly);
        }
    }
}
