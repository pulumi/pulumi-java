// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.migrate;

import io.pulumi.azurenative.migrate.inputs.ProjectPropertiesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProjectArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * For optimistic concurrency control.
     * 
     */
    @InputImport(name="eTag")
      private final @Nullable Input<String> eTag;

    public Input<String> getETag() {
        return this.eTag == null ? Input.empty() : this.eTag;
    }

    /**
     * Azure location in which project is created.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Name of the Azure Migrate project.
     * 
     */
    @InputImport(name="projectName")
      private final @Nullable Input<String> projectName;

    public Input<String> getProjectName() {
        return this.projectName == null ? Input.empty() : this.projectName;
    }

    /**
     * Properties of the project.
     * 
     */
    @InputImport(name="properties")
      private final @Nullable Input<ProjectPropertiesArgs> properties;

    public Input<ProjectPropertiesArgs> getProperties() {
        return this.properties == null ? Input.empty() : this.properties;
    }

    /**
     * Name of the Azure Resource Group that project is part of.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Tags provided by Azure Tagging service.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Object> tags;

    public Input<Object> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ProjectArgs(
        @Nullable Input<String> eTag,
        @Nullable Input<String> location,
        @Nullable Input<String> projectName,
        @Nullable Input<ProjectPropertiesArgs> properties,
        Input<String> resourceGroupName,
        @Nullable Input<Object> tags) {
        this.eTag = eTag;
        this.location = location;
        this.projectName = projectName;
        this.properties = properties;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private ProjectArgs() {
        this.eTag = Input.empty();
        this.location = Input.empty();
        this.projectName = Input.empty();
        this.properties = Input.empty();
        this.resourceGroupName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> eTag;
        private @Nullable Input<String> location;
        private @Nullable Input<String> projectName;
        private @Nullable Input<ProjectPropertiesArgs> properties;
        private Input<String> resourceGroupName;
        private @Nullable Input<Object> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ProjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eTag = defaults.eTag;
    	      this.location = defaults.location;
    	      this.projectName = defaults.projectName;
    	      this.properties = defaults.properties;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder eTag(@Nullable Input<String> eTag) {
            this.eTag = eTag;
            return this;
        }

        public Builder eTag(@Nullable String eTag) {
            this.eTag = Input.ofNullable(eTag);
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder projectName(@Nullable Input<String> projectName) {
            this.projectName = projectName;
            return this;
        }

        public Builder projectName(@Nullable String projectName) {
            this.projectName = Input.ofNullable(projectName);
            return this;
        }

        public Builder properties(@Nullable Input<ProjectPropertiesArgs> properties) {
            this.properties = properties;
            return this;
        }

        public Builder properties(@Nullable ProjectPropertiesArgs properties) {
            this.properties = Input.ofNullable(properties);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder tags(@Nullable Input<Object> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Object tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public ProjectArgs build() {
            return new ProjectArgs(eTag, location, projectName, properties, resourceGroupName, tags);
        }
    }
}
