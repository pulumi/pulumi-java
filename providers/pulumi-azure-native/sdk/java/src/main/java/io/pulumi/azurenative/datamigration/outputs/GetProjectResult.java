// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.outputs;

import io.pulumi.azurenative.datamigration.outputs.DatabaseInfoResponse;
import io.pulumi.azurenative.datamigration.outputs.MiSqlConnectionInfoResponse;
import io.pulumi.azurenative.datamigration.outputs.MySqlConnectionInfoResponse;
import io.pulumi.azurenative.datamigration.outputs.PostgreSqlConnectionInfoResponse;
import io.pulumi.azurenative.datamigration.outputs.SqlConnectionInfoResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetProjectResult {
    private final String creationTime;
    private final @Nullable List<DatabaseInfoResponse> databasesInfo;
    private final String id;
    private final String location;
    private final String name;
    private final String provisioningState;
    private final @Nullable Object sourceConnectionInfo;
    private final String sourcePlatform;
    private final @Nullable Map<String,String> tags;
    private final @Nullable Object targetConnectionInfo;
    private final String targetPlatform;
    private final String type;

    @OutputCustomType.Constructor({"creationTime","databasesInfo","id","location","name","provisioningState","sourceConnectionInfo","sourcePlatform","tags","targetConnectionInfo","targetPlatform","type"})
    private GetProjectResult(
        String creationTime,
        @Nullable List<DatabaseInfoResponse> databasesInfo,
        String id,
        String location,
        String name,
        String provisioningState,
        @Nullable Object sourceConnectionInfo,
        String sourcePlatform,
        @Nullable Map<String,String> tags,
        @Nullable Object targetConnectionInfo,
        String targetPlatform,
        String type) {
        this.creationTime = Objects.requireNonNull(creationTime);
        this.databasesInfo = databasesInfo;
        this.id = Objects.requireNonNull(id);
        this.location = Objects.requireNonNull(location);
        this.name = Objects.requireNonNull(name);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.sourceConnectionInfo = sourceConnectionInfo;
        this.sourcePlatform = Objects.requireNonNull(sourcePlatform);
        this.tags = tags;
        this.targetConnectionInfo = targetConnectionInfo;
        this.targetPlatform = Objects.requireNonNull(targetPlatform);
        this.type = Objects.requireNonNull(type);
    }

    public String getCreationTime() {
        return this.creationTime;
    }
    public List<DatabaseInfoResponse> getDatabasesInfo() {
        return this.databasesInfo == null ? List.of() : this.databasesInfo;
    }
    public String getId() {
        return this.id;
    }
    public String getLocation() {
        return this.location;
    }
    public String getName() {
        return this.name;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public Optional<Object> getSourceConnectionInfo() {
        return Optional.ofNullable(this.sourceConnectionInfo);
    }
    public String getSourcePlatform() {
        return this.sourcePlatform;
    }
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Optional<Object> getTargetConnectionInfo() {
        return Optional.ofNullable(this.targetConnectionInfo);
    }
    public String getTargetPlatform() {
        return this.targetPlatform;
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String creationTime;
        private @Nullable List<DatabaseInfoResponse> databasesInfo;
        private String id;
        private String location;
        private String name;
        private String provisioningState;
        private @Nullable Object sourceConnectionInfo;
        private String sourcePlatform;
        private @Nullable Map<String,String> tags;
        private @Nullable Object targetConnectionInfo;
        private String targetPlatform;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTime = defaults.creationTime;
    	      this.databasesInfo = defaults.databasesInfo;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sourceConnectionInfo = defaults.sourceConnectionInfo;
    	      this.sourcePlatform = defaults.sourcePlatform;
    	      this.tags = defaults.tags;
    	      this.targetConnectionInfo = defaults.targetConnectionInfo;
    	      this.targetPlatform = defaults.targetPlatform;
    	      this.type = defaults.type;
        }

        public Builder setCreationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }

        public Builder setDatabasesInfo(@Nullable List<DatabaseInfoResponse> databasesInfo) {
            this.databasesInfo = databasesInfo;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setSourceConnectionInfo(@Nullable Object sourceConnectionInfo) {
            this.sourceConnectionInfo = sourceConnectionInfo;
            return this;
        }

        public Builder setSourcePlatform(String sourcePlatform) {
            this.sourcePlatform = Objects.requireNonNull(sourcePlatform);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTargetConnectionInfo(@Nullable Object targetConnectionInfo) {
            this.targetConnectionInfo = targetConnectionInfo;
            return this;
        }

        public Builder setTargetPlatform(String targetPlatform) {
            this.targetPlatform = Objects.requireNonNull(targetPlatform);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetProjectResult build() {
            return new GetProjectResult(creationTime, databasesInfo, id, location, name, provisioningState, sourceConnectionInfo, sourcePlatform, tags, targetConnectionInfo, targetPlatform, type);
        }
    }
}
