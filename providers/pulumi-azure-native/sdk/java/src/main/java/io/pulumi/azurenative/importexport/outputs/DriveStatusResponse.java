// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.importexport.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class DriveStatusResponse {
    /**
     * The BitLocker key used to encrypt the drive.
     * 
     */
    private final @Nullable String bitLockerKey;
    /**
     * Bytes successfully transferred for the drive.
     * 
     */
    private final @Nullable Double bytesSucceeded;
    /**
     * Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.
     * 
     */
    private final @Nullable String copyStatus;
    /**
     * The drive header hash value.
     * 
     */
    private final @Nullable String driveHeaderHash;
    /**
     * The drive's hardware serial number, without spaces.
     * 
     */
    private final @Nullable String driveId;
    /**
     * A URI that points to the blob containing the error log for the data transfer operation.
     * 
     */
    private final @Nullable String errorLogUri;
    /**
     * The relative path of the manifest file on the drive.
     * 
     */
    private final @Nullable String manifestFile;
    /**
     * The Base16-encoded MD5 hash of the manifest file on the drive.
     * 
     */
    private final @Nullable String manifestHash;
    /**
     * A URI that points to the blob containing the drive manifest file.
     * 
     */
    private final @Nullable String manifestUri;
    /**
     * Percentage completed for the drive.
     * 
     */
    private final @Nullable Integer percentComplete;
    /**
     * The drive's current state.
     * 
     */
    private final @Nullable String state;
    /**
     * A URI that points to the blob containing the verbose log for the data transfer operation.
     * 
     */
    private final @Nullable String verboseLogUri;

    @OutputCustomType.Constructor({"bitLockerKey","bytesSucceeded","copyStatus","driveHeaderHash","driveId","errorLogUri","manifestFile","manifestHash","manifestUri","percentComplete","state","verboseLogUri"})
    private DriveStatusResponse(
        @Nullable String bitLockerKey,
        @Nullable Double bytesSucceeded,
        @Nullable String copyStatus,
        @Nullable String driveHeaderHash,
        @Nullable String driveId,
        @Nullable String errorLogUri,
        @Nullable String manifestFile,
        @Nullable String manifestHash,
        @Nullable String manifestUri,
        @Nullable Integer percentComplete,
        @Nullable String state,
        @Nullable String verboseLogUri) {
        this.bitLockerKey = bitLockerKey;
        this.bytesSucceeded = bytesSucceeded;
        this.copyStatus = copyStatus;
        this.driveHeaderHash = driveHeaderHash;
        this.driveId = driveId;
        this.errorLogUri = errorLogUri;
        this.manifestFile = manifestFile;
        this.manifestHash = manifestHash;
        this.manifestUri = manifestUri;
        this.percentComplete = percentComplete;
        this.state = state;
        this.verboseLogUri = verboseLogUri;
    }

    /**
     * The BitLocker key used to encrypt the drive.
     * 
     */
    public Optional<String> getBitLockerKey() {
        return Optional.ofNullable(this.bitLockerKey);
    }
    /**
     * Bytes successfully transferred for the drive.
     * 
     */
    public Optional<Double> getBytesSucceeded() {
        return Optional.ofNullable(this.bytesSucceeded);
    }
    /**
     * Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.
     * 
     */
    public Optional<String> getCopyStatus() {
        return Optional.ofNullable(this.copyStatus);
    }
    /**
     * The drive header hash value.
     * 
     */
    public Optional<String> getDriveHeaderHash() {
        return Optional.ofNullable(this.driveHeaderHash);
    }
    /**
     * The drive's hardware serial number, without spaces.
     * 
     */
    public Optional<String> getDriveId() {
        return Optional.ofNullable(this.driveId);
    }
    /**
     * A URI that points to the blob containing the error log for the data transfer operation.
     * 
     */
    public Optional<String> getErrorLogUri() {
        return Optional.ofNullable(this.errorLogUri);
    }
    /**
     * The relative path of the manifest file on the drive.
     * 
     */
    public Optional<String> getManifestFile() {
        return Optional.ofNullable(this.manifestFile);
    }
    /**
     * The Base16-encoded MD5 hash of the manifest file on the drive.
     * 
     */
    public Optional<String> getManifestHash() {
        return Optional.ofNullable(this.manifestHash);
    }
    /**
     * A URI that points to the blob containing the drive manifest file.
     * 
     */
    public Optional<String> getManifestUri() {
        return Optional.ofNullable(this.manifestUri);
    }
    /**
     * Percentage completed for the drive.
     * 
     */
    public Optional<Integer> getPercentComplete() {
        return Optional.ofNullable(this.percentComplete);
    }
    /**
     * The drive's current state.
     * 
     */
    public Optional<String> getState() {
        return Optional.ofNullable(this.state);
    }
    /**
     * A URI that points to the blob containing the verbose log for the data transfer operation.
     * 
     */
    public Optional<String> getVerboseLogUri() {
        return Optional.ofNullable(this.verboseLogUri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DriveStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String bitLockerKey;
        private @Nullable Double bytesSucceeded;
        private @Nullable String copyStatus;
        private @Nullable String driveHeaderHash;
        private @Nullable String driveId;
        private @Nullable String errorLogUri;
        private @Nullable String manifestFile;
        private @Nullable String manifestHash;
        private @Nullable String manifestUri;
        private @Nullable Integer percentComplete;
        private @Nullable String state;
        private @Nullable String verboseLogUri;

        public Builder() {
    	      // Empty
        }

        public Builder(DriveStatusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitLockerKey = defaults.bitLockerKey;
    	      this.bytesSucceeded = defaults.bytesSucceeded;
    	      this.copyStatus = defaults.copyStatus;
    	      this.driveHeaderHash = defaults.driveHeaderHash;
    	      this.driveId = defaults.driveId;
    	      this.errorLogUri = defaults.errorLogUri;
    	      this.manifestFile = defaults.manifestFile;
    	      this.manifestHash = defaults.manifestHash;
    	      this.manifestUri = defaults.manifestUri;
    	      this.percentComplete = defaults.percentComplete;
    	      this.state = defaults.state;
    	      this.verboseLogUri = defaults.verboseLogUri;
        }

        public Builder setBitLockerKey(@Nullable String bitLockerKey) {
            this.bitLockerKey = bitLockerKey;
            return this;
        }

        public Builder setBytesSucceeded(@Nullable Double bytesSucceeded) {
            this.bytesSucceeded = bytesSucceeded;
            return this;
        }

        public Builder setCopyStatus(@Nullable String copyStatus) {
            this.copyStatus = copyStatus;
            return this;
        }

        public Builder setDriveHeaderHash(@Nullable String driveHeaderHash) {
            this.driveHeaderHash = driveHeaderHash;
            return this;
        }

        public Builder setDriveId(@Nullable String driveId) {
            this.driveId = driveId;
            return this;
        }

        public Builder setErrorLogUri(@Nullable String errorLogUri) {
            this.errorLogUri = errorLogUri;
            return this;
        }

        public Builder setManifestFile(@Nullable String manifestFile) {
            this.manifestFile = manifestFile;
            return this;
        }

        public Builder setManifestHash(@Nullable String manifestHash) {
            this.manifestHash = manifestHash;
            return this;
        }

        public Builder setManifestUri(@Nullable String manifestUri) {
            this.manifestUri = manifestUri;
            return this;
        }

        public Builder setPercentComplete(@Nullable Integer percentComplete) {
            this.percentComplete = percentComplete;
            return this;
        }

        public Builder setState(@Nullable String state) {
            this.state = state;
            return this;
        }

        public Builder setVerboseLogUri(@Nullable String verboseLogUri) {
            this.verboseLogUri = verboseLogUri;
            return this;
        }

        public DriveStatusResponse build() {
            return new DriveStatusResponse(bitLockerKey, bytesSucceeded, copyStatus, driveHeaderHash, driveId, errorLogUri, manifestFile, manifestHash, manifestUri, percentComplete, state, verboseLogUri);
        }
    }
}
