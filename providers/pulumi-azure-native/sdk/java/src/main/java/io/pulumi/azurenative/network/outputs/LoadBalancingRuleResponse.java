// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.outputs;

import io.pulumi.azurenative.network.outputs.SubResourceResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class LoadBalancingRuleResponse {
    private final @Nullable SubResourceResponse backendAddressPool;
    private final @Nullable Integer backendPort;
    private final @Nullable Boolean disableOutboundSnat;
    private final @Nullable Boolean enableFloatingIP;
    private final @Nullable Boolean enableTcpReset;
    private final String etag;
    private final @Nullable SubResourceResponse frontendIPConfiguration;
    private final Integer frontendPort;
    private final @Nullable String id;
    private final @Nullable Integer idleTimeoutInMinutes;
    private final @Nullable String loadDistribution;
    private final @Nullable String name;
    private final @Nullable SubResourceResponse probe;
    private final String protocol;
    private final String provisioningState;
    private final String type;

    @OutputCustomType.Constructor({"backendAddressPool","backendPort","disableOutboundSnat","enableFloatingIP","enableTcpReset","etag","frontendIPConfiguration","frontendPort","id","idleTimeoutInMinutes","loadDistribution","name","probe","protocol","provisioningState","type"})
    private LoadBalancingRuleResponse(
        @Nullable SubResourceResponse backendAddressPool,
        @Nullable Integer backendPort,
        @Nullable Boolean disableOutboundSnat,
        @Nullable Boolean enableFloatingIP,
        @Nullable Boolean enableTcpReset,
        String etag,
        @Nullable SubResourceResponse frontendIPConfiguration,
        Integer frontendPort,
        @Nullable String id,
        @Nullable Integer idleTimeoutInMinutes,
        @Nullable String loadDistribution,
        @Nullable String name,
        @Nullable SubResourceResponse probe,
        String protocol,
        String provisioningState,
        String type) {
        this.backendAddressPool = backendAddressPool;
        this.backendPort = backendPort;
        this.disableOutboundSnat = disableOutboundSnat;
        this.enableFloatingIP = enableFloatingIP;
        this.enableTcpReset = enableTcpReset;
        this.etag = Objects.requireNonNull(etag);
        this.frontendIPConfiguration = frontendIPConfiguration;
        this.frontendPort = Objects.requireNonNull(frontendPort);
        this.id = id;
        this.idleTimeoutInMinutes = idleTimeoutInMinutes;
        this.loadDistribution = loadDistribution;
        this.name = name;
        this.probe = probe;
        this.protocol = Objects.requireNonNull(protocol);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.type = Objects.requireNonNull(type);
    }

    public Optional<SubResourceResponse> getBackendAddressPool() {
        return Optional.ofNullable(this.backendAddressPool);
    }
    public Optional<Integer> getBackendPort() {
        return Optional.ofNullable(this.backendPort);
    }
    public Optional<Boolean> getDisableOutboundSnat() {
        return Optional.ofNullable(this.disableOutboundSnat);
    }
    public Optional<Boolean> getEnableFloatingIP() {
        return Optional.ofNullable(this.enableFloatingIP);
    }
    public Optional<Boolean> getEnableTcpReset() {
        return Optional.ofNullable(this.enableTcpReset);
    }
    public String getEtag() {
        return this.etag;
    }
    public Optional<SubResourceResponse> getFrontendIPConfiguration() {
        return Optional.ofNullable(this.frontendIPConfiguration);
    }
    public Integer getFrontendPort() {
        return this.frontendPort;
    }
    public Optional<String> getId() {
        return Optional.ofNullable(this.id);
    }
    public Optional<Integer> getIdleTimeoutInMinutes() {
        return Optional.ofNullable(this.idleTimeoutInMinutes);
    }
    public Optional<String> getLoadDistribution() {
        return Optional.ofNullable(this.loadDistribution);
    }
    public Optional<String> getName() {
        return Optional.ofNullable(this.name);
    }
    public Optional<SubResourceResponse> getProbe() {
        return Optional.ofNullable(this.probe);
    }
    public String getProtocol() {
        return this.protocol;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancingRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable SubResourceResponse backendAddressPool;
        private @Nullable Integer backendPort;
        private @Nullable Boolean disableOutboundSnat;
        private @Nullable Boolean enableFloatingIP;
        private @Nullable Boolean enableTcpReset;
        private String etag;
        private @Nullable SubResourceResponse frontendIPConfiguration;
        private Integer frontendPort;
        private @Nullable String id;
        private @Nullable Integer idleTimeoutInMinutes;
        private @Nullable String loadDistribution;
        private @Nullable String name;
        private @Nullable SubResourceResponse probe;
        private String protocol;
        private String provisioningState;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancingRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPool = defaults.backendAddressPool;
    	      this.backendPort = defaults.backendPort;
    	      this.disableOutboundSnat = defaults.disableOutboundSnat;
    	      this.enableFloatingIP = defaults.enableFloatingIP;
    	      this.enableTcpReset = defaults.enableTcpReset;
    	      this.etag = defaults.etag;
    	      this.frontendIPConfiguration = defaults.frontendIPConfiguration;
    	      this.frontendPort = defaults.frontendPort;
    	      this.id = defaults.id;
    	      this.idleTimeoutInMinutes = defaults.idleTimeoutInMinutes;
    	      this.loadDistribution = defaults.loadDistribution;
    	      this.name = defaults.name;
    	      this.probe = defaults.probe;
    	      this.protocol = defaults.protocol;
    	      this.provisioningState = defaults.provisioningState;
    	      this.type = defaults.type;
        }

        public Builder setBackendAddressPool(@Nullable SubResourceResponse backendAddressPool) {
            this.backendAddressPool = backendAddressPool;
            return this;
        }

        public Builder setBackendPort(@Nullable Integer backendPort) {
            this.backendPort = backendPort;
            return this;
        }

        public Builder setDisableOutboundSnat(@Nullable Boolean disableOutboundSnat) {
            this.disableOutboundSnat = disableOutboundSnat;
            return this;
        }

        public Builder setEnableFloatingIP(@Nullable Boolean enableFloatingIP) {
            this.enableFloatingIP = enableFloatingIP;
            return this;
        }

        public Builder setEnableTcpReset(@Nullable Boolean enableTcpReset) {
            this.enableTcpReset = enableTcpReset;
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setFrontendIPConfiguration(@Nullable SubResourceResponse frontendIPConfiguration) {
            this.frontendIPConfiguration = frontendIPConfiguration;
            return this;
        }

        public Builder setFrontendPort(Integer frontendPort) {
            this.frontendPort = Objects.requireNonNull(frontendPort);
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setIdleTimeoutInMinutes(@Nullable Integer idleTimeoutInMinutes) {
            this.idleTimeoutInMinutes = idleTimeoutInMinutes;
            return this;
        }

        public Builder setLoadDistribution(@Nullable String loadDistribution) {
            this.loadDistribution = loadDistribution;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setProbe(@Nullable SubResourceResponse probe) {
            this.probe = probe;
            return this;
        }

        public Builder setProtocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public LoadBalancingRuleResponse build() {
            return new LoadBalancingRuleResponse(backendAddressPool, backendPort, disableOutboundSnat, enableFloatingIP, enableTcpReset, etag, frontendIPConfiguration, frontendPort, id, idleTimeoutInMinutes, loadDistribution, name, probe, protocol, provisioningState, type);
        }
    }
}
