// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.customerinsights;

import io.pulumi.azurenative.customerinsights.inputs.ParticipantProfilePropertyReferenceArgs;
import io.pulumi.azurenative.customerinsights.inputs.RelationshipLinkFieldMappingArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RelationshipLinkArgs extends io.pulumi.resources.ResourceArgs {

    public static final RelationshipLinkArgs Empty = new RelationshipLinkArgs();

    /**
     * Localized descriptions for the Relationship Link.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<Map<String,String>> description;

    public Output<Map<String,String>> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Localized display name for the Relationship Link.
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Output<Map<String,String>> displayName;

    public Output<Map<String,String>> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * The name of the hub.
     * 
     */
    @InputImport(name="hubName", required=true)
      private final Output<String> hubName;

    public Output<String> getHubName() {
        return this.hubName;
    }

    /**
     * The InteractionType associated with the Relationship Link.
     * 
     */
    @InputImport(name="interactionType", required=true)
      private final Output<String> interactionType;

    public Output<String> getInteractionType() {
        return this.interactionType;
    }

    /**
     * The mappings between Interaction and Relationship fields.
     * 
     */
    @InputImport(name="mappings")
      private final @Nullable Output<List<RelationshipLinkFieldMappingArgs>> mappings;

    public Output<List<RelationshipLinkFieldMappingArgs>> getMappings() {
        return this.mappings == null ? Output.empty() : this.mappings;
    }

    /**
     * The property references for the Profile of the Relationship.
     * 
     */
    @InputImport(name="profilePropertyReferences", required=true)
      private final Output<List<ParticipantProfilePropertyReferenceArgs>> profilePropertyReferences;

    public Output<List<ParticipantProfilePropertyReferenceArgs>> getProfilePropertyReferences() {
        return this.profilePropertyReferences;
    }

    /**
     * The property references for the Related Profile of the Relationship.
     * 
     */
    @InputImport(name="relatedProfilePropertyReferences", required=true)
      private final Output<List<ParticipantProfilePropertyReferenceArgs>> relatedProfilePropertyReferences;

    public Output<List<ParticipantProfilePropertyReferenceArgs>> getRelatedProfilePropertyReferences() {
        return this.relatedProfilePropertyReferences;
    }

    /**
     * The name of the relationship link.
     * 
     */
    @InputImport(name="relationshipLinkName")
      private final @Nullable Output<String> relationshipLinkName;

    public Output<String> getRelationshipLinkName() {
        return this.relationshipLinkName == null ? Output.empty() : this.relationshipLinkName;
    }

    /**
     * The Relationship associated with the Link.
     * 
     */
    @InputImport(name="relationshipName", required=true)
      private final Output<String> relationshipName;

    public Output<String> getRelationshipName() {
        return this.relationshipName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    public RelationshipLinkArgs(
        @Nullable Output<Map<String,String>> description,
        @Nullable Output<Map<String,String>> displayName,
        Output<String> hubName,
        Output<String> interactionType,
        @Nullable Output<List<RelationshipLinkFieldMappingArgs>> mappings,
        Output<List<ParticipantProfilePropertyReferenceArgs>> profilePropertyReferences,
        Output<List<ParticipantProfilePropertyReferenceArgs>> relatedProfilePropertyReferences,
        @Nullable Output<String> relationshipLinkName,
        Output<String> relationshipName,
        Output<String> resourceGroupName) {
        this.description = description;
        this.displayName = displayName;
        this.hubName = Objects.requireNonNull(hubName, "expected parameter 'hubName' to be non-null");
        this.interactionType = Objects.requireNonNull(interactionType, "expected parameter 'interactionType' to be non-null");
        this.mappings = mappings;
        this.profilePropertyReferences = Objects.requireNonNull(profilePropertyReferences, "expected parameter 'profilePropertyReferences' to be non-null");
        this.relatedProfilePropertyReferences = Objects.requireNonNull(relatedProfilePropertyReferences, "expected parameter 'relatedProfilePropertyReferences' to be non-null");
        this.relationshipLinkName = relationshipLinkName;
        this.relationshipName = Objects.requireNonNull(relationshipName, "expected parameter 'relationshipName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private RelationshipLinkArgs() {
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.hubName = Output.empty();
        this.interactionType = Output.empty();
        this.mappings = Output.empty();
        this.profilePropertyReferences = Output.empty();
        this.relatedProfilePropertyReferences = Output.empty();
        this.relationshipLinkName = Output.empty();
        this.relationshipName = Output.empty();
        this.resourceGroupName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RelationshipLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> description;
        private @Nullable Output<Map<String,String>> displayName;
        private Output<String> hubName;
        private Output<String> interactionType;
        private @Nullable Output<List<RelationshipLinkFieldMappingArgs>> mappings;
        private Output<List<ParticipantProfilePropertyReferenceArgs>> profilePropertyReferences;
        private Output<List<ParticipantProfilePropertyReferenceArgs>> relatedProfilePropertyReferences;
        private @Nullable Output<String> relationshipLinkName;
        private Output<String> relationshipName;
        private Output<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(RelationshipLinkArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.hubName = defaults.hubName;
    	      this.interactionType = defaults.interactionType;
    	      this.mappings = defaults.mappings;
    	      this.profilePropertyReferences = defaults.profilePropertyReferences;
    	      this.relatedProfilePropertyReferences = defaults.relatedProfilePropertyReferences;
    	      this.relationshipLinkName = defaults.relationshipLinkName;
    	      this.relationshipName = defaults.relationshipName;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder description(@Nullable Output<Map<String,String>> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable Map<String,String> description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder displayName(@Nullable Output<Map<String,String>> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable Map<String,String> displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder hubName(Output<String> hubName) {
            this.hubName = Objects.requireNonNull(hubName);
            return this;
        }

        public Builder hubName(String hubName) {
            this.hubName = Output.of(Objects.requireNonNull(hubName));
            return this;
        }

        public Builder interactionType(Output<String> interactionType) {
            this.interactionType = Objects.requireNonNull(interactionType);
            return this;
        }

        public Builder interactionType(String interactionType) {
            this.interactionType = Output.of(Objects.requireNonNull(interactionType));
            return this;
        }

        public Builder mappings(@Nullable Output<List<RelationshipLinkFieldMappingArgs>> mappings) {
            this.mappings = mappings;
            return this;
        }

        public Builder mappings(@Nullable List<RelationshipLinkFieldMappingArgs> mappings) {
            this.mappings = Output.ofNullable(mappings);
            return this;
        }

        public Builder profilePropertyReferences(Output<List<ParticipantProfilePropertyReferenceArgs>> profilePropertyReferences) {
            this.profilePropertyReferences = Objects.requireNonNull(profilePropertyReferences);
            return this;
        }

        public Builder profilePropertyReferences(List<ParticipantProfilePropertyReferenceArgs> profilePropertyReferences) {
            this.profilePropertyReferences = Output.of(Objects.requireNonNull(profilePropertyReferences));
            return this;
        }

        public Builder relatedProfilePropertyReferences(Output<List<ParticipantProfilePropertyReferenceArgs>> relatedProfilePropertyReferences) {
            this.relatedProfilePropertyReferences = Objects.requireNonNull(relatedProfilePropertyReferences);
            return this;
        }

        public Builder relatedProfilePropertyReferences(List<ParticipantProfilePropertyReferenceArgs> relatedProfilePropertyReferences) {
            this.relatedProfilePropertyReferences = Output.of(Objects.requireNonNull(relatedProfilePropertyReferences));
            return this;
        }

        public Builder relationshipLinkName(@Nullable Output<String> relationshipLinkName) {
            this.relationshipLinkName = relationshipLinkName;
            return this;
        }

        public Builder relationshipLinkName(@Nullable String relationshipLinkName) {
            this.relationshipLinkName = Output.ofNullable(relationshipLinkName);
            return this;
        }

        public Builder relationshipName(Output<String> relationshipName) {
            this.relationshipName = Objects.requireNonNull(relationshipName);
            return this;
        }

        public Builder relationshipName(String relationshipName) {
            this.relationshipName = Output.of(Objects.requireNonNull(relationshipName));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public RelationshipLinkArgs build() {
            return new RelationshipLinkArgs(description, displayName, hubName, interactionType, mappings, profilePropertyReferences, relatedProfilePropertyReferences, relationshipLinkName, relationshipName, resourceGroupName);
        }
    }
}
