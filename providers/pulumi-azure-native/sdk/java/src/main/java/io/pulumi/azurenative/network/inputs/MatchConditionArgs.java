// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.WebApplicationFirewallOperator;
import io.pulumi.azurenative.network.enums.WebApplicationFirewallTransform;
import io.pulumi.azurenative.network.inputs.MatchVariableArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Define match conditions.
 * 
 */
public final class MatchConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final MatchConditionArgs Empty = new MatchConditionArgs();

    /**
     * Match value.
     * 
     */
    @InputImport(name="matchValues", required=true)
    private final Input<List<String>> matchValues;

    public Input<List<String>> getMatchValues() {
        return this.matchValues;
    }

    /**
     * List of match variables.
     * 
     */
    @InputImport(name="matchVariables", required=true)
    private final Input<List<MatchVariableArgs>> matchVariables;

    public Input<List<MatchVariableArgs>> getMatchVariables() {
        return this.matchVariables;
    }

    /**
     * Whether this is negate condition or not.
     * 
     */
    @InputImport(name="negationConditon")
    private final @Nullable Input<Boolean> negationConditon;

    public Input<Boolean> getNegationConditon() {
        return this.negationConditon == null ? Input.empty() : this.negationConditon;
    }

    /**
     * The operator to be matched.
     * 
     */
    @InputImport(name="operator", required=true)
    private final Input<Either<String,WebApplicationFirewallOperator>> operator;

    public Input<Either<String,WebApplicationFirewallOperator>> getOperator() {
        return this.operator;
    }

    /**
     * List of transforms.
     * 
     */
    @InputImport(name="transforms")
    private final @Nullable Input<List<Either<String,WebApplicationFirewallTransform>>> transforms;

    public Input<List<Either<String,WebApplicationFirewallTransform>>> getTransforms() {
        return this.transforms == null ? Input.empty() : this.transforms;
    }

    public MatchConditionArgs(
        Input<List<String>> matchValues,
        Input<List<MatchVariableArgs>> matchVariables,
        @Nullable Input<Boolean> negationConditon,
        Input<Either<String,WebApplicationFirewallOperator>> operator,
        @Nullable Input<List<Either<String,WebApplicationFirewallTransform>>> transforms) {
        this.matchValues = Objects.requireNonNull(matchValues, "expected parameter 'matchValues' to be non-null");
        this.matchVariables = Objects.requireNonNull(matchVariables, "expected parameter 'matchVariables' to be non-null");
        this.negationConditon = negationConditon;
        this.operator = Objects.requireNonNull(operator, "expected parameter 'operator' to be non-null");
        this.transforms = transforms;
    }

    private MatchConditionArgs() {
        this.matchValues = Input.empty();
        this.matchVariables = Input.empty();
        this.negationConditon = Input.empty();
        this.operator = Input.empty();
        this.transforms = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MatchConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> matchValues;
        private Input<List<MatchVariableArgs>> matchVariables;
        private @Nullable Input<Boolean> negationConditon;
        private Input<Either<String,WebApplicationFirewallOperator>> operator;
        private @Nullable Input<List<Either<String,WebApplicationFirewallTransform>>> transforms;

        public Builder() {
    	      // Empty
        }

        public Builder(MatchConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchValues = defaults.matchValues;
    	      this.matchVariables = defaults.matchVariables;
    	      this.negationConditon = defaults.negationConditon;
    	      this.operator = defaults.operator;
    	      this.transforms = defaults.transforms;
        }

        public Builder setMatchValues(Input<List<String>> matchValues) {
            this.matchValues = Objects.requireNonNull(matchValues);
            return this;
        }

        public Builder setMatchValues(List<String> matchValues) {
            this.matchValues = Input.of(Objects.requireNonNull(matchValues));
            return this;
        }

        public Builder setMatchVariables(Input<List<MatchVariableArgs>> matchVariables) {
            this.matchVariables = Objects.requireNonNull(matchVariables);
            return this;
        }

        public Builder setMatchVariables(List<MatchVariableArgs> matchVariables) {
            this.matchVariables = Input.of(Objects.requireNonNull(matchVariables));
            return this;
        }

        public Builder setNegationConditon(@Nullable Input<Boolean> negationConditon) {
            this.negationConditon = negationConditon;
            return this;
        }

        public Builder setNegationConditon(@Nullable Boolean negationConditon) {
            this.negationConditon = Input.ofNullable(negationConditon);
            return this;
        }

        public Builder setOperator(Input<Either<String,WebApplicationFirewallOperator>> operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }

        public Builder setOperator(Either<String,WebApplicationFirewallOperator> operator) {
            this.operator = Input.of(Objects.requireNonNull(operator));
            return this;
        }

        public Builder setTransforms(@Nullable Input<List<Either<String,WebApplicationFirewallTransform>>> transforms) {
            this.transforms = transforms;
            return this;
        }

        public Builder setTransforms(@Nullable List<Either<String,WebApplicationFirewallTransform>> transforms) {
            this.transforms = Input.ofNullable(transforms);
            return this;
        }

        public MatchConditionArgs build() {
            return new MatchConditionArgs(matchValues, matchVariables, negationConditon, operator, transforms);
        }
    }
}
