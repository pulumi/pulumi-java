// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.synapse;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.synapse.BigDataPoolArgs;
import io.pulumi.azurenative.synapse.outputs.AutoPausePropertiesResponse;
import io.pulumi.azurenative.synapse.outputs.AutoScalePropertiesResponse;
import io.pulumi.azurenative.synapse.outputs.DynamicExecutorAllocationResponse;
import io.pulumi.azurenative.synapse.outputs.LibraryInfoResponse;
import io.pulumi.azurenative.synapse.outputs.LibraryRequirementsResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

@ResourceType(type="azure-native:synapse:BigDataPool")
public class BigDataPool extends io.pulumi.resources.CustomResource {
    @OutputExport(name="autoPause", type=AutoPausePropertiesResponse.class, parameters={})
    private Output</* @Nullable */ AutoPausePropertiesResponse> autoPause;

    public Output</* @Nullable */ AutoPausePropertiesResponse> getAutoPause() {
        return this.autoPause;
    }
    @OutputExport(name="autoScale", type=AutoScalePropertiesResponse.class, parameters={})
    private Output</* @Nullable */ AutoScalePropertiesResponse> autoScale;

    public Output</* @Nullable */ AutoScalePropertiesResponse> getAutoScale() {
        return this.autoScale;
    }
    @OutputExport(name="cacheSize", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> cacheSize;

    public Output</* @Nullable */ Integer> getCacheSize() {
        return this.cacheSize;
    }
    @OutputExport(name="creationDate", type=String.class, parameters={})
    private Output</* @Nullable */ String> creationDate;

    public Output</* @Nullable */ String> getCreationDate() {
        return this.creationDate;
    }
    @OutputExport(name="customLibraries", type=List.class, parameters={LibraryInfoResponse.class})
    private Output</* @Nullable */ List<LibraryInfoResponse>> customLibraries;

    public Output</* @Nullable */ List<LibraryInfoResponse>> getCustomLibraries() {
        return this.customLibraries;
    }
    @OutputExport(name="defaultSparkLogFolder", type=String.class, parameters={})
    private Output</* @Nullable */ String> defaultSparkLogFolder;

    public Output</* @Nullable */ String> getDefaultSparkLogFolder() {
        return this.defaultSparkLogFolder;
    }
    @OutputExport(name="dynamicExecutorAllocation", type=DynamicExecutorAllocationResponse.class, parameters={})
    private Output</* @Nullable */ DynamicExecutorAllocationResponse> dynamicExecutorAllocation;

    public Output</* @Nullable */ DynamicExecutorAllocationResponse> getDynamicExecutorAllocation() {
        return this.dynamicExecutorAllocation;
    }
    @OutputExport(name="isComputeIsolationEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isComputeIsolationEnabled;

    public Output</* @Nullable */ Boolean> getIsComputeIsolationEnabled() {
        return this.isComputeIsolationEnabled;
    }
    @OutputExport(name="lastSucceededTimestamp", type=String.class, parameters={})
    private Output<String> lastSucceededTimestamp;

    public Output<String> getLastSucceededTimestamp() {
        return this.lastSucceededTimestamp;
    }
    @OutputExport(name="libraryRequirements", type=LibraryRequirementsResponse.class, parameters={})
    private Output</* @Nullable */ LibraryRequirementsResponse> libraryRequirements;

    public Output</* @Nullable */ LibraryRequirementsResponse> getLibraryRequirements() {
        return this.libraryRequirements;
    }
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    public Output<String> getLocation() {
        return this.location;
    }
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    public Output<String> getName() {
        return this.name;
    }
    @OutputExport(name="nodeCount", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> nodeCount;

    public Output</* @Nullable */ Integer> getNodeCount() {
        return this.nodeCount;
    }
    @OutputExport(name="nodeSize", type=String.class, parameters={})
    private Output</* @Nullable */ String> nodeSize;

    public Output</* @Nullable */ String> getNodeSize() {
        return this.nodeSize;
    }
    @OutputExport(name="nodeSizeFamily", type=String.class, parameters={})
    private Output</* @Nullable */ String> nodeSizeFamily;

    public Output</* @Nullable */ String> getNodeSizeFamily() {
        return this.nodeSizeFamily;
    }
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output</* @Nullable */ String> provisioningState;

    public Output</* @Nullable */ String> getProvisioningState() {
        return this.provisioningState;
    }
    @OutputExport(name="sessionLevelPackagesEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> sessionLevelPackagesEnabled;

    public Output</* @Nullable */ Boolean> getSessionLevelPackagesEnabled() {
        return this.sessionLevelPackagesEnabled;
    }
    @OutputExport(name="sparkConfigProperties", type=LibraryRequirementsResponse.class, parameters={})
    private Output</* @Nullable */ LibraryRequirementsResponse> sparkConfigProperties;

    public Output</* @Nullable */ LibraryRequirementsResponse> getSparkConfigProperties() {
        return this.sparkConfigProperties;
    }
    @OutputExport(name="sparkEventsFolder", type=String.class, parameters={})
    private Output</* @Nullable */ String> sparkEventsFolder;

    public Output</* @Nullable */ String> getSparkEventsFolder() {
        return this.sparkEventsFolder;
    }
    @OutputExport(name="sparkVersion", type=String.class, parameters={})
    private Output</* @Nullable */ String> sparkVersion;

    public Output</* @Nullable */ String> getSparkVersion() {
        return this.sparkVersion;
    }
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public BigDataPool(String name, BigDataPoolArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:synapse:BigDataPool", name, args == null ? BigDataPoolArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private BigDataPool(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:synapse:BigDataPool", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:synapse/v20190601preview:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20201201:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20210301:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20210401preview:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20210501:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20210601:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20210601preview:BigDataPool").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    public static BigDataPool get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new BigDataPool(name, id, options);
    }
}
