// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.synapse;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.synapse.BigDataPoolArgs;
import io.pulumi.azurenative.synapse.outputs.AutoPausePropertiesResponse;
import io.pulumi.azurenative.synapse.outputs.AutoScalePropertiesResponse;
import io.pulumi.azurenative.synapse.outputs.DynamicExecutorAllocationResponse;
import io.pulumi.azurenative.synapse.outputs.LibraryInfoResponse;
import io.pulumi.azurenative.synapse.outputs.LibraryRequirementsResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * A Big Data pool
 * API Version: 2021-03-01.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:synapse:BigDataPool ExamplePool /subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/bigDataPools/ExamplePool 
 * ```
 * 
 */
@ResourceType(type="azure-native:synapse:BigDataPool")
public class BigDataPool extends io.pulumi.resources.CustomResource {
    /**
     * Auto-pausing properties
     * 
     */
    @OutputExport(name="autoPause", type=AutoPausePropertiesResponse.class, parameters={})
    private Output</* @Nullable */ AutoPausePropertiesResponse> autoPause;

    /**
     * @return Auto-pausing properties
     * 
     */
    public Output</* @Nullable */ AutoPausePropertiesResponse> getAutoPause() {
        return this.autoPause;
    }
    /**
     * Auto-scaling properties
     * 
     */
    @OutputExport(name="autoScale", type=AutoScalePropertiesResponse.class, parameters={})
    private Output</* @Nullable */ AutoScalePropertiesResponse> autoScale;

    /**
     * @return Auto-scaling properties
     * 
     */
    public Output</* @Nullable */ AutoScalePropertiesResponse> getAutoScale() {
        return this.autoScale;
    }
    /**
     * The cache size
     * 
     */
    @OutputExport(name="cacheSize", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> cacheSize;

    /**
     * @return The cache size
     * 
     */
    public Output</* @Nullable */ Integer> getCacheSize() {
        return this.cacheSize;
    }
    /**
     * The time when the Big Data pool was created.
     * 
     */
    @OutputExport(name="creationDate", type=String.class, parameters={})
    private Output</* @Nullable */ String> creationDate;

    /**
     * @return The time when the Big Data pool was created.
     * 
     */
    public Output</* @Nullable */ String> getCreationDate() {
        return this.creationDate;
    }
    /**
     * List of custom libraries/packages associated with the spark pool.
     * 
     */
    @OutputExport(name="customLibraries", type=List.class, parameters={LibraryInfoResponse.class})
    private Output</* @Nullable */ List<LibraryInfoResponse>> customLibraries;

    /**
     * @return List of custom libraries/packages associated with the spark pool.
     * 
     */
    public Output</* @Nullable */ List<LibraryInfoResponse>> getCustomLibraries() {
        return this.customLibraries;
    }
    /**
     * The default folder where Spark logs will be written.
     * 
     */
    @OutputExport(name="defaultSparkLogFolder", type=String.class, parameters={})
    private Output</* @Nullable */ String> defaultSparkLogFolder;

    /**
     * @return The default folder where Spark logs will be written.
     * 
     */
    public Output</* @Nullable */ String> getDefaultSparkLogFolder() {
        return this.defaultSparkLogFolder;
    }
    /**
     * Dynamic Executor Allocation
     * 
     */
    @OutputExport(name="dynamicExecutorAllocation", type=DynamicExecutorAllocationResponse.class, parameters={})
    private Output</* @Nullable */ DynamicExecutorAllocationResponse> dynamicExecutorAllocation;

    /**
     * @return Dynamic Executor Allocation
     * 
     */
    public Output</* @Nullable */ DynamicExecutorAllocationResponse> getDynamicExecutorAllocation() {
        return this.dynamicExecutorAllocation;
    }
    /**
     * Whether compute isolation is required or not.
     * 
     */
    @OutputExport(name="isComputeIsolationEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isComputeIsolationEnabled;

    /**
     * @return Whether compute isolation is required or not.
     * 
     */
    public Output</* @Nullable */ Boolean> getIsComputeIsolationEnabled() {
        return this.isComputeIsolationEnabled;
    }
    /**
     * The time when the Big Data pool was updated successfully.
     * 
     */
    @OutputExport(name="lastSucceededTimestamp", type=String.class, parameters={})
    private Output<String> lastSucceededTimestamp;

    /**
     * @return The time when the Big Data pool was updated successfully.
     * 
     */
    public Output<String> getLastSucceededTimestamp() {
        return this.lastSucceededTimestamp;
    }
    /**
     * Library version requirements
     * 
     */
    @OutputExport(name="libraryRequirements", type=LibraryRequirementsResponse.class, parameters={})
    private Output</* @Nullable */ LibraryRequirementsResponse> libraryRequirements;

    /**
     * @return Library version requirements
     * 
     */
    public Output</* @Nullable */ LibraryRequirementsResponse> getLibraryRequirements() {
        return this.libraryRequirements;
    }
    /**
     * The geo-location where the resource lives
     * 
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * The name of the resource
     * 
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The number of nodes in the Big Data pool.
     * 
     */
    @OutputExport(name="nodeCount", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> nodeCount;

    /**
     * @return The number of nodes in the Big Data pool.
     * 
     */
    public Output</* @Nullable */ Integer> getNodeCount() {
        return this.nodeCount;
    }
    /**
     * The level of compute power that each node in the Big Data pool has.
     * 
     */
    @OutputExport(name="nodeSize", type=String.class, parameters={})
    private Output</* @Nullable */ String> nodeSize;

    /**
     * @return The level of compute power that each node in the Big Data pool has.
     * 
     */
    public Output</* @Nullable */ String> getNodeSize() {
        return this.nodeSize;
    }
    /**
     * The kind of nodes that the Big Data pool provides.
     * 
     */
    @OutputExport(name="nodeSizeFamily", type=String.class, parameters={})
    private Output</* @Nullable */ String> nodeSizeFamily;

    /**
     * @return The kind of nodes that the Big Data pool provides.
     * 
     */
    public Output</* @Nullable */ String> getNodeSizeFamily() {
        return this.nodeSizeFamily;
    }
    /**
     * The state of the Big Data pool.
     * 
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output</* @Nullable */ String> provisioningState;

    /**
     * @return The state of the Big Data pool.
     * 
     */
    public Output</* @Nullable */ String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * Whether session level packages enabled.
     * 
     */
    @OutputExport(name="sessionLevelPackagesEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> sessionLevelPackagesEnabled;

    /**
     * @return Whether session level packages enabled.
     * 
     */
    public Output</* @Nullable */ Boolean> getSessionLevelPackagesEnabled() {
        return this.sessionLevelPackagesEnabled;
    }
    /**
     * Spark configuration file to specify additional properties
     * 
     */
    @OutputExport(name="sparkConfigProperties", type=LibraryRequirementsResponse.class, parameters={})
    private Output</* @Nullable */ LibraryRequirementsResponse> sparkConfigProperties;

    /**
     * @return Spark configuration file to specify additional properties
     * 
     */
    public Output</* @Nullable */ LibraryRequirementsResponse> getSparkConfigProperties() {
        return this.sparkConfigProperties;
    }
    /**
     * The Spark events folder
     * 
     */
    @OutputExport(name="sparkEventsFolder", type=String.class, parameters={})
    private Output</* @Nullable */ String> sparkEventsFolder;

    /**
     * @return The Spark events folder
     * 
     */
    public Output</* @Nullable */ String> getSparkEventsFolder() {
        return this.sparkEventsFolder;
    }
    /**
     * The Apache Spark version.
     * 
     */
    @OutputExport(name="sparkVersion", type=String.class, parameters={})
    private Output</* @Nullable */ String> sparkVersion;

    /**
     * @return The Apache Spark version.
     * 
     */
    public Output</* @Nullable */ String> getSparkVersion() {
        return this.sparkVersion;
    }
    /**
     * Resource tags.
     * 
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BigDataPool(String name, BigDataPoolArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:synapse:BigDataPool", name, args == null ? BigDataPoolArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private BigDataPool(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:synapse:BigDataPool", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:synapse/v20190601preview:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20201201:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20210301:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20210401preview:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20210501:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20210601:BigDataPool").build()),
                Input.of(Alias.builder().setType("azure-native:synapse/v20210601preview:BigDataPool").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BigDataPool get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new BigDataPool(name, id, options);
    }
}
