// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.enums.VirtualNetworkPeeringState;
import io.pulumi.azurenative.network.inputs.AddressSpaceArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.azurenative.network.inputs.VirtualNetworkBgpCommunitiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualNetworkPeeringArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkPeeringArgs Empty = new VirtualNetworkPeeringArgs();

    /**
     * Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     * 
     */
    @InputImport(name="allowForwardedTraffic")
    private final @Nullable Input<Boolean> allowForwardedTraffic;

    public Input<Boolean> getAllowForwardedTraffic() {
        return this.allowForwardedTraffic == null ? Input.empty() : this.allowForwardedTraffic;
    }

    /**
     * If gateway links can be used in remote virtual networking to link to this virtual network.
     * 
     */
    @InputImport(name="allowGatewayTransit")
    private final @Nullable Input<Boolean> allowGatewayTransit;

    public Input<Boolean> getAllowGatewayTransit() {
        return this.allowGatewayTransit == null ? Input.empty() : this.allowGatewayTransit;
    }

    /**
     * Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     * 
     */
    @InputImport(name="allowVirtualNetworkAccess")
    private final @Nullable Input<Boolean> allowVirtualNetworkAccess;

    public Input<Boolean> getAllowVirtualNetworkAccess() {
        return this.allowVirtualNetworkAccess == null ? Input.empty() : this.allowVirtualNetworkAccess;
    }

    /**
     * If we need to verify the provisioning state of the remote gateway.
     * 
     */
    @InputImport(name="doNotVerifyRemoteGateways")
    private final @Nullable Input<Boolean> doNotVerifyRemoteGateways;

    public Input<Boolean> getDoNotVerifyRemoteGateways() {
        return this.doNotVerifyRemoteGateways == null ? Input.empty() : this.doNotVerifyRemoteGateways;
    }

    /**
     * Resource ID.
     * 
     */
    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The status of the virtual network peering.
     * 
     */
    @InputImport(name="peeringState")
    private final @Nullable Input<Either<String,VirtualNetworkPeeringState>> peeringState;

    public Input<Either<String,VirtualNetworkPeeringState>> getPeeringState() {
        return this.peeringState == null ? Input.empty() : this.peeringState;
    }

    /**
     * The reference to the remote virtual network address space.
     * 
     */
    @InputImport(name="remoteAddressSpace")
    private final @Nullable Input<AddressSpaceArgs> remoteAddressSpace;

    public Input<AddressSpaceArgs> getRemoteAddressSpace() {
        return this.remoteAddressSpace == null ? Input.empty() : this.remoteAddressSpace;
    }

    /**
     * The reference to the remote virtual network's Bgp Communities.
     * 
     */
    @InputImport(name="remoteBgpCommunities")
    private final @Nullable Input<VirtualNetworkBgpCommunitiesArgs> remoteBgpCommunities;

    public Input<VirtualNetworkBgpCommunitiesArgs> getRemoteBgpCommunities() {
        return this.remoteBgpCommunities == null ? Input.empty() : this.remoteBgpCommunities;
    }

    /**
     * The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     * 
     */
    @InputImport(name="remoteVirtualNetwork")
    private final @Nullable Input<SubResourceArgs> remoteVirtualNetwork;

    public Input<SubResourceArgs> getRemoteVirtualNetwork() {
        return this.remoteVirtualNetwork == null ? Input.empty() : this.remoteVirtualNetwork;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource type.
     * 
     */
    @InputImport(name="type")
    private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     * 
     */
    @InputImport(name="useRemoteGateways")
    private final @Nullable Input<Boolean> useRemoteGateways;

    public Input<Boolean> getUseRemoteGateways() {
        return this.useRemoteGateways == null ? Input.empty() : this.useRemoteGateways;
    }

    /**
     * The name of the virtual network.
     * 
     */
    @InputImport(name="virtualNetworkName", required=true)
    private final Input<String> virtualNetworkName;

    public Input<String> getVirtualNetworkName() {
        return this.virtualNetworkName;
    }

    /**
     * The name of the peering.
     * 
     */
    @InputImport(name="virtualNetworkPeeringName")
    private final @Nullable Input<String> virtualNetworkPeeringName;

    public Input<String> getVirtualNetworkPeeringName() {
        return this.virtualNetworkPeeringName == null ? Input.empty() : this.virtualNetworkPeeringName;
    }

    public VirtualNetworkPeeringArgs(
        @Nullable Input<Boolean> allowForwardedTraffic,
        @Nullable Input<Boolean> allowGatewayTransit,
        @Nullable Input<Boolean> allowVirtualNetworkAccess,
        @Nullable Input<Boolean> doNotVerifyRemoteGateways,
        @Nullable Input<String> id,
        @Nullable Input<String> name,
        @Nullable Input<Either<String,VirtualNetworkPeeringState>> peeringState,
        @Nullable Input<AddressSpaceArgs> remoteAddressSpace,
        @Nullable Input<VirtualNetworkBgpCommunitiesArgs> remoteBgpCommunities,
        @Nullable Input<SubResourceArgs> remoteVirtualNetwork,
        Input<String> resourceGroupName,
        @Nullable Input<String> type,
        @Nullable Input<Boolean> useRemoteGateways,
        Input<String> virtualNetworkName,
        @Nullable Input<String> virtualNetworkPeeringName) {
        this.allowForwardedTraffic = allowForwardedTraffic;
        this.allowGatewayTransit = allowGatewayTransit;
        this.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
        this.doNotVerifyRemoteGateways = doNotVerifyRemoteGateways;
        this.id = id;
        this.name = name;
        this.peeringState = peeringState;
        this.remoteAddressSpace = remoteAddressSpace;
        this.remoteBgpCommunities = remoteBgpCommunities;
        this.remoteVirtualNetwork = remoteVirtualNetwork;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.type = type;
        this.useRemoteGateways = useRemoteGateways;
        this.virtualNetworkName = Objects.requireNonNull(virtualNetworkName, "expected parameter 'virtualNetworkName' to be non-null");
        this.virtualNetworkPeeringName = virtualNetworkPeeringName;
    }

    private VirtualNetworkPeeringArgs() {
        this.allowForwardedTraffic = Input.empty();
        this.allowGatewayTransit = Input.empty();
        this.allowVirtualNetworkAccess = Input.empty();
        this.doNotVerifyRemoteGateways = Input.empty();
        this.id = Input.empty();
        this.name = Input.empty();
        this.peeringState = Input.empty();
        this.remoteAddressSpace = Input.empty();
        this.remoteBgpCommunities = Input.empty();
        this.remoteVirtualNetwork = Input.empty();
        this.resourceGroupName = Input.empty();
        this.type = Input.empty();
        this.useRemoteGateways = Input.empty();
        this.virtualNetworkName = Input.empty();
        this.virtualNetworkPeeringName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNetworkPeeringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> allowForwardedTraffic;
        private @Nullable Input<Boolean> allowGatewayTransit;
        private @Nullable Input<Boolean> allowVirtualNetworkAccess;
        private @Nullable Input<Boolean> doNotVerifyRemoteGateways;
        private @Nullable Input<String> id;
        private @Nullable Input<String> name;
        private @Nullable Input<Either<String,VirtualNetworkPeeringState>> peeringState;
        private @Nullable Input<AddressSpaceArgs> remoteAddressSpace;
        private @Nullable Input<VirtualNetworkBgpCommunitiesArgs> remoteBgpCommunities;
        private @Nullable Input<SubResourceArgs> remoteVirtualNetwork;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> type;
        private @Nullable Input<Boolean> useRemoteGateways;
        private Input<String> virtualNetworkName;
        private @Nullable Input<String> virtualNetworkPeeringName;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNetworkPeeringArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowForwardedTraffic = defaults.allowForwardedTraffic;
    	      this.allowGatewayTransit = defaults.allowGatewayTransit;
    	      this.allowVirtualNetworkAccess = defaults.allowVirtualNetworkAccess;
    	      this.doNotVerifyRemoteGateways = defaults.doNotVerifyRemoteGateways;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.peeringState = defaults.peeringState;
    	      this.remoteAddressSpace = defaults.remoteAddressSpace;
    	      this.remoteBgpCommunities = defaults.remoteBgpCommunities;
    	      this.remoteVirtualNetwork = defaults.remoteVirtualNetwork;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.type = defaults.type;
    	      this.useRemoteGateways = defaults.useRemoteGateways;
    	      this.virtualNetworkName = defaults.virtualNetworkName;
    	      this.virtualNetworkPeeringName = defaults.virtualNetworkPeeringName;
        }

        public Builder setAllowForwardedTraffic(@Nullable Input<Boolean> allowForwardedTraffic) {
            this.allowForwardedTraffic = allowForwardedTraffic;
            return this;
        }

        public Builder setAllowForwardedTraffic(@Nullable Boolean allowForwardedTraffic) {
            this.allowForwardedTraffic = Input.ofNullable(allowForwardedTraffic);
            return this;
        }

        public Builder setAllowGatewayTransit(@Nullable Input<Boolean> allowGatewayTransit) {
            this.allowGatewayTransit = allowGatewayTransit;
            return this;
        }

        public Builder setAllowGatewayTransit(@Nullable Boolean allowGatewayTransit) {
            this.allowGatewayTransit = Input.ofNullable(allowGatewayTransit);
            return this;
        }

        public Builder setAllowVirtualNetworkAccess(@Nullable Input<Boolean> allowVirtualNetworkAccess) {
            this.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
            return this;
        }

        public Builder setAllowVirtualNetworkAccess(@Nullable Boolean allowVirtualNetworkAccess) {
            this.allowVirtualNetworkAccess = Input.ofNullable(allowVirtualNetworkAccess);
            return this;
        }

        public Builder setDoNotVerifyRemoteGateways(@Nullable Input<Boolean> doNotVerifyRemoteGateways) {
            this.doNotVerifyRemoteGateways = doNotVerifyRemoteGateways;
            return this;
        }

        public Builder setDoNotVerifyRemoteGateways(@Nullable Boolean doNotVerifyRemoteGateways) {
            this.doNotVerifyRemoteGateways = Input.ofNullable(doNotVerifyRemoteGateways);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPeeringState(@Nullable Input<Either<String,VirtualNetworkPeeringState>> peeringState) {
            this.peeringState = peeringState;
            return this;
        }

        public Builder setPeeringState(@Nullable Either<String,VirtualNetworkPeeringState> peeringState) {
            this.peeringState = Input.ofNullable(peeringState);
            return this;
        }

        public Builder setRemoteAddressSpace(@Nullable Input<AddressSpaceArgs> remoteAddressSpace) {
            this.remoteAddressSpace = remoteAddressSpace;
            return this;
        }

        public Builder setRemoteAddressSpace(@Nullable AddressSpaceArgs remoteAddressSpace) {
            this.remoteAddressSpace = Input.ofNullable(remoteAddressSpace);
            return this;
        }

        public Builder setRemoteBgpCommunities(@Nullable Input<VirtualNetworkBgpCommunitiesArgs> remoteBgpCommunities) {
            this.remoteBgpCommunities = remoteBgpCommunities;
            return this;
        }

        public Builder setRemoteBgpCommunities(@Nullable VirtualNetworkBgpCommunitiesArgs remoteBgpCommunities) {
            this.remoteBgpCommunities = Input.ofNullable(remoteBgpCommunities);
            return this;
        }

        public Builder setRemoteVirtualNetwork(@Nullable Input<SubResourceArgs> remoteVirtualNetwork) {
            this.remoteVirtualNetwork = remoteVirtualNetwork;
            return this;
        }

        public Builder setRemoteVirtualNetwork(@Nullable SubResourceArgs remoteVirtualNetwork) {
            this.remoteVirtualNetwork = Input.ofNullable(remoteVirtualNetwork);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setUseRemoteGateways(@Nullable Input<Boolean> useRemoteGateways) {
            this.useRemoteGateways = useRemoteGateways;
            return this;
        }

        public Builder setUseRemoteGateways(@Nullable Boolean useRemoteGateways) {
            this.useRemoteGateways = Input.ofNullable(useRemoteGateways);
            return this;
        }

        public Builder setVirtualNetworkName(Input<String> virtualNetworkName) {
            this.virtualNetworkName = Objects.requireNonNull(virtualNetworkName);
            return this;
        }

        public Builder setVirtualNetworkName(String virtualNetworkName) {
            this.virtualNetworkName = Input.of(Objects.requireNonNull(virtualNetworkName));
            return this;
        }

        public Builder setVirtualNetworkPeeringName(@Nullable Input<String> virtualNetworkPeeringName) {
            this.virtualNetworkPeeringName = virtualNetworkPeeringName;
            return this;
        }

        public Builder setVirtualNetworkPeeringName(@Nullable String virtualNetworkPeeringName) {
            this.virtualNetworkPeeringName = Input.ofNullable(virtualNetworkPeeringName);
            return this;
        }

        public VirtualNetworkPeeringArgs build() {
            return new VirtualNetworkPeeringArgs(allowForwardedTraffic, allowGatewayTransit, allowVirtualNetworkAccess, doNotVerifyRemoteGateways, id, name, peeringState, remoteAddressSpace, remoteBgpCommunities, remoteVirtualNetwork, resourceGroupName, type, useRemoteGateways, virtualNetworkName, virtualNetworkPeeringName);
        }
    }
}
