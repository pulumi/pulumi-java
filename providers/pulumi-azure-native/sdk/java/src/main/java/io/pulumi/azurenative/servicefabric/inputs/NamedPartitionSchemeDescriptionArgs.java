// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabric.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Describes the named partition scheme of the service.
 * 
 */
public final class NamedPartitionSchemeDescriptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final NamedPartitionSchemeDescriptionArgs Empty = new NamedPartitionSchemeDescriptionArgs();

    /**
     * The number of partitions.
     * 
     */
    @InputImport(name="count", required=true)
      private final Input<Integer> count;

    public Input<Integer> getCount() {
        return this.count;
    }

    /**
     * Array of size specified by the ‘count’ parameter, for the names of the partitions.
     * 
     */
    @InputImport(name="names", required=true)
      private final Input<List<String>> names;

    public Input<List<String>> getNames() {
        return this.names;
    }

    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is 'Named'.
     * 
     */
    @InputImport(name="partitionScheme", required=true)
      private final Input<String> partitionScheme;

    public Input<String> getPartitionScheme() {
        return this.partitionScheme;
    }

    public NamedPartitionSchemeDescriptionArgs(
        Input<Integer> count,
        Input<List<String>> names,
        Input<String> partitionScheme) {
        this.count = Objects.requireNonNull(count, "expected parameter 'count' to be non-null");
        this.names = Objects.requireNonNull(names, "expected parameter 'names' to be non-null");
        this.partitionScheme = Objects.requireNonNull(partitionScheme, "expected parameter 'partitionScheme' to be non-null");
    }

    private NamedPartitionSchemeDescriptionArgs() {
        this.count = Input.empty();
        this.names = Input.empty();
        this.partitionScheme = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NamedPartitionSchemeDescriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Integer> count;
        private Input<List<String>> names;
        private Input<String> partitionScheme;

        public Builder() {
    	      // Empty
        }

        public Builder(NamedPartitionSchemeDescriptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.names = defaults.names;
    	      this.partitionScheme = defaults.partitionScheme;
        }

        public Builder count(Input<Integer> count) {
            this.count = Objects.requireNonNull(count);
            return this;
        }

        public Builder count(Integer count) {
            this.count = Input.of(Objects.requireNonNull(count));
            return this;
        }

        public Builder names(Input<List<String>> names) {
            this.names = Objects.requireNonNull(names);
            return this;
        }

        public Builder names(List<String> names) {
            this.names = Input.of(Objects.requireNonNull(names));
            return this;
        }

        public Builder partitionScheme(Input<String> partitionScheme) {
            this.partitionScheme = Objects.requireNonNull(partitionScheme);
            return this;
        }

        public Builder partitionScheme(String partitionScheme) {
            this.partitionScheme = Input.of(Objects.requireNonNull(partitionScheme));
            return this;
        }
        public NamedPartitionSchemeDescriptionArgs build() {
            return new NamedPartitionSchemeDescriptionArgs(count, names, partitionScheme);
        }
    }
}
