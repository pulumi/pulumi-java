// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databoxedge.inputs;

import io.pulumi.azurenative.databoxedge.inputs.MetricDimensionResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The metric counter
 * 
 */
public final class MetricCounterResponse extends io.pulumi.resources.InvokeArgs {

    public static final MetricCounterResponse Empty = new MetricCounterResponse();

    /**
     * The additional dimensions to be added to metric.
     * 
     */
    @InputImport(name="additionalDimensions")
      private final @Nullable List<MetricDimensionResponse> additionalDimensions;

    public List<MetricDimensionResponse> getAdditionalDimensions() {
        return this.additionalDimensions == null ? List.of() : this.additionalDimensions;
    }

    /**
     * The dimension filter.
     * 
     */
    @InputImport(name="dimensionFilter")
      private final @Nullable List<MetricDimensionResponse> dimensionFilter;

    public List<MetricDimensionResponse> getDimensionFilter() {
        return this.dimensionFilter == null ? List.of() : this.dimensionFilter;
    }

    /**
     * The instance from which counter should be collected.
     * 
     */
    @InputImport(name="instance")
      private final @Nullable String instance;

    public Optional<String> getInstance() {
        return this.instance == null ? Optional.empty() : Optional.ofNullable(this.instance);
    }

    /**
     * The counter name.
     * 
     */
    @InputImport(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    public MetricCounterResponse(
        @Nullable List<MetricDimensionResponse> additionalDimensions,
        @Nullable List<MetricDimensionResponse> dimensionFilter,
        @Nullable String instance,
        String name) {
        this.additionalDimensions = additionalDimensions;
        this.dimensionFilter = dimensionFilter;
        this.instance = instance;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
    }

    private MetricCounterResponse() {
        this.additionalDimensions = List.of();
        this.dimensionFilter = List.of();
        this.instance = null;
        this.name = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricCounterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<MetricDimensionResponse> additionalDimensions;
        private @Nullable List<MetricDimensionResponse> dimensionFilter;
        private @Nullable String instance;
        private String name;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricCounterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDimensions = defaults.additionalDimensions;
    	      this.dimensionFilter = defaults.dimensionFilter;
    	      this.instance = defaults.instance;
    	      this.name = defaults.name;
        }

        public Builder setAdditionalDimensions(@Nullable List<MetricDimensionResponse> additionalDimensions) {
            this.additionalDimensions = additionalDimensions;
            return this;
        }

        public Builder setDimensionFilter(@Nullable List<MetricDimensionResponse> dimensionFilter) {
            this.dimensionFilter = dimensionFilter;
            return this;
        }

        public Builder setInstance(@Nullable String instance) {
            this.instance = instance;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public MetricCounterResponse build() {
            return new MetricCounterResponse(additionalDimensions, dimensionFilter, instance, name);
        }
    }
}
