// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.inputs.RoutingConfigurationArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HubVirtualNetworkConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final HubVirtualNetworkConnectionArgs Empty = new HubVirtualNetworkConnectionArgs();

    /**
     * Deprecated: VirtualHub to RemoteVnet transit to enabled or not.
     * 
     */
    @Import(name="allowHubToRemoteVnetTransit")
      private final @Nullable Output<Boolean> allowHubToRemoteVnetTransit;

    public Output<Boolean> allowHubToRemoteVnetTransit() {
        return this.allowHubToRemoteVnetTransit == null ? Codegen.empty() : this.allowHubToRemoteVnetTransit;
    }

    /**
     * Deprecated: Allow RemoteVnet to use Virtual Hub's gateways.
     * 
     */
    @Import(name="allowRemoteVnetToUseHubVnetGateways")
      private final @Nullable Output<Boolean> allowRemoteVnetToUseHubVnetGateways;

    public Output<Boolean> allowRemoteVnetToUseHubVnetGateways() {
        return this.allowRemoteVnetToUseHubVnetGateways == null ? Codegen.empty() : this.allowRemoteVnetToUseHubVnetGateways;
    }

    /**
     * The name of the HubVirtualNetworkConnection.
     * 
     */
    @Import(name="connectionName")
      private final @Nullable Output<String> connectionName;

    public Output<String> connectionName() {
        return this.connectionName == null ? Codegen.empty() : this.connectionName;
    }

    /**
     * Enable internet security.
     * 
     */
    @Import(name="enableInternetSecurity")
      private final @Nullable Output<Boolean> enableInternetSecurity;

    public Output<Boolean> enableInternetSecurity() {
        return this.enableInternetSecurity == null ? Codegen.empty() : this.enableInternetSecurity;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Reference to the remote virtual network.
     * 
     */
    @Import(name="remoteVirtualNetwork")
      private final @Nullable Output<SubResourceArgs> remoteVirtualNetwork;

    public Output<SubResourceArgs> remoteVirtualNetwork() {
        return this.remoteVirtualNetwork == null ? Codegen.empty() : this.remoteVirtualNetwork;
    }

    /**
     * The resource group name of the HubVirtualNetworkConnection.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Routing Configuration indicating the associated and propagated route tables on this connection.
     * 
     */
    @Import(name="routingConfiguration")
      private final @Nullable Output<RoutingConfigurationArgs> routingConfiguration;

    public Output<RoutingConfigurationArgs> routingConfiguration() {
        return this.routingConfiguration == null ? Codegen.empty() : this.routingConfiguration;
    }

    /**
     * The name of the VirtualHub.
     * 
     */
    @Import(name="virtualHubName", required=true)
      private final Output<String> virtualHubName;

    public Output<String> virtualHubName() {
        return this.virtualHubName;
    }

    public HubVirtualNetworkConnectionArgs(
        @Nullable Output<Boolean> allowHubToRemoteVnetTransit,
        @Nullable Output<Boolean> allowRemoteVnetToUseHubVnetGateways,
        @Nullable Output<String> connectionName,
        @Nullable Output<Boolean> enableInternetSecurity,
        @Nullable Output<String> id,
        @Nullable Output<String> name,
        @Nullable Output<SubResourceArgs> remoteVirtualNetwork,
        Output<String> resourceGroupName,
        @Nullable Output<RoutingConfigurationArgs> routingConfiguration,
        Output<String> virtualHubName) {
        this.allowHubToRemoteVnetTransit = allowHubToRemoteVnetTransit;
        this.allowRemoteVnetToUseHubVnetGateways = allowRemoteVnetToUseHubVnetGateways;
        this.connectionName = connectionName;
        this.enableInternetSecurity = enableInternetSecurity;
        this.id = id;
        this.name = name;
        this.remoteVirtualNetwork = remoteVirtualNetwork;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.routingConfiguration = routingConfiguration;
        this.virtualHubName = Objects.requireNonNull(virtualHubName, "expected parameter 'virtualHubName' to be non-null");
    }

    private HubVirtualNetworkConnectionArgs() {
        this.allowHubToRemoteVnetTransit = Codegen.empty();
        this.allowRemoteVnetToUseHubVnetGateways = Codegen.empty();
        this.connectionName = Codegen.empty();
        this.enableInternetSecurity = Codegen.empty();
        this.id = Codegen.empty();
        this.name = Codegen.empty();
        this.remoteVirtualNetwork = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.routingConfiguration = Codegen.empty();
        this.virtualHubName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HubVirtualNetworkConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowHubToRemoteVnetTransit;
        private @Nullable Output<Boolean> allowRemoteVnetToUseHubVnetGateways;
        private @Nullable Output<String> connectionName;
        private @Nullable Output<Boolean> enableInternetSecurity;
        private @Nullable Output<String> id;
        private @Nullable Output<String> name;
        private @Nullable Output<SubResourceArgs> remoteVirtualNetwork;
        private Output<String> resourceGroupName;
        private @Nullable Output<RoutingConfigurationArgs> routingConfiguration;
        private Output<String> virtualHubName;

        public Builder() {
    	      // Empty
        }

        public Builder(HubVirtualNetworkConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowHubToRemoteVnetTransit = defaults.allowHubToRemoteVnetTransit;
    	      this.allowRemoteVnetToUseHubVnetGateways = defaults.allowRemoteVnetToUseHubVnetGateways;
    	      this.connectionName = defaults.connectionName;
    	      this.enableInternetSecurity = defaults.enableInternetSecurity;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.remoteVirtualNetwork = defaults.remoteVirtualNetwork;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.routingConfiguration = defaults.routingConfiguration;
    	      this.virtualHubName = defaults.virtualHubName;
        }

        public Builder allowHubToRemoteVnetTransit(@Nullable Output<Boolean> allowHubToRemoteVnetTransit) {
            this.allowHubToRemoteVnetTransit = allowHubToRemoteVnetTransit;
            return this;
        }
        public Builder allowHubToRemoteVnetTransit(@Nullable Boolean allowHubToRemoteVnetTransit) {
            this.allowHubToRemoteVnetTransit = Codegen.ofNullable(allowHubToRemoteVnetTransit);
            return this;
        }
        public Builder allowRemoteVnetToUseHubVnetGateways(@Nullable Output<Boolean> allowRemoteVnetToUseHubVnetGateways) {
            this.allowRemoteVnetToUseHubVnetGateways = allowRemoteVnetToUseHubVnetGateways;
            return this;
        }
        public Builder allowRemoteVnetToUseHubVnetGateways(@Nullable Boolean allowRemoteVnetToUseHubVnetGateways) {
            this.allowRemoteVnetToUseHubVnetGateways = Codegen.ofNullable(allowRemoteVnetToUseHubVnetGateways);
            return this;
        }
        public Builder connectionName(@Nullable Output<String> connectionName) {
            this.connectionName = connectionName;
            return this;
        }
        public Builder connectionName(@Nullable String connectionName) {
            this.connectionName = Codegen.ofNullable(connectionName);
            return this;
        }
        public Builder enableInternetSecurity(@Nullable Output<Boolean> enableInternetSecurity) {
            this.enableInternetSecurity = enableInternetSecurity;
            return this;
        }
        public Builder enableInternetSecurity(@Nullable Boolean enableInternetSecurity) {
            this.enableInternetSecurity = Codegen.ofNullable(enableInternetSecurity);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder remoteVirtualNetwork(@Nullable Output<SubResourceArgs> remoteVirtualNetwork) {
            this.remoteVirtualNetwork = remoteVirtualNetwork;
            return this;
        }
        public Builder remoteVirtualNetwork(@Nullable SubResourceArgs remoteVirtualNetwork) {
            this.remoteVirtualNetwork = Codegen.ofNullable(remoteVirtualNetwork);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder routingConfiguration(@Nullable Output<RoutingConfigurationArgs> routingConfiguration) {
            this.routingConfiguration = routingConfiguration;
            return this;
        }
        public Builder routingConfiguration(@Nullable RoutingConfigurationArgs routingConfiguration) {
            this.routingConfiguration = Codegen.ofNullable(routingConfiguration);
            return this;
        }
        public Builder virtualHubName(Output<String> virtualHubName) {
            this.virtualHubName = Objects.requireNonNull(virtualHubName);
            return this;
        }
        public Builder virtualHubName(String virtualHubName) {
            this.virtualHubName = Output.of(Objects.requireNonNull(virtualHubName));
            return this;
        }        public HubVirtualNetworkConnectionArgs build() {
            return new HubVirtualNetworkConnectionArgs(allowHubToRemoteVnetTransit, allowRemoteVnetToUseHubVnetGateways, connectionName, enableInternetSecurity, id, name, remoteVirtualNetwork, resourceGroupName, routingConfiguration, virtualHubName);
        }
    }
}
