// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Load balancer backend addresses.
 * 
 */
public final class LoadBalancerBackendAddressArgs extends io.pulumi.resources.ResourceArgs {

    public static final LoadBalancerBackendAddressArgs Empty = new LoadBalancerBackendAddressArgs();

    /**
     * IP Address belonging to the referenced virtual network.
     * 
     */
    @InputImport(name="ipAddress")
    private final @Nullable Input<String> ipAddress;

    public Input<String> getIpAddress() {
        return this.ipAddress == null ? Input.empty() : this.ipAddress;
    }

    /**
     * Reference to the frontend ip address configuration defined in regional loadbalancer.
     * 
     */
    @InputImport(name="loadBalancerFrontendIPConfiguration")
    private final @Nullable Input<SubResourceArgs> loadBalancerFrontendIPConfiguration;

    public Input<SubResourceArgs> getLoadBalancerFrontendIPConfiguration() {
        return this.loadBalancerFrontendIPConfiguration == null ? Input.empty() : this.loadBalancerFrontendIPConfiguration;
    }

    /**
     * Name of the backend address.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Reference to an existing subnet.
     * 
     */
    @InputImport(name="subnet")
    private final @Nullable Input<SubResourceArgs> subnet;

    public Input<SubResourceArgs> getSubnet() {
        return this.subnet == null ? Input.empty() : this.subnet;
    }

    /**
     * Reference to an existing virtual network.
     * 
     */
    @InputImport(name="virtualNetwork")
    private final @Nullable Input<SubResourceArgs> virtualNetwork;

    public Input<SubResourceArgs> getVirtualNetwork() {
        return this.virtualNetwork == null ? Input.empty() : this.virtualNetwork;
    }

    public LoadBalancerBackendAddressArgs(
        @Nullable Input<String> ipAddress,
        @Nullable Input<SubResourceArgs> loadBalancerFrontendIPConfiguration,
        @Nullable Input<String> name,
        @Nullable Input<SubResourceArgs> subnet,
        @Nullable Input<SubResourceArgs> virtualNetwork) {
        this.ipAddress = ipAddress;
        this.loadBalancerFrontendIPConfiguration = loadBalancerFrontendIPConfiguration;
        this.name = name;
        this.subnet = subnet;
        this.virtualNetwork = virtualNetwork;
    }

    private LoadBalancerBackendAddressArgs() {
        this.ipAddress = Input.empty();
        this.loadBalancerFrontendIPConfiguration = Input.empty();
        this.name = Input.empty();
        this.subnet = Input.empty();
        this.virtualNetwork = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerBackendAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> ipAddress;
        private @Nullable Input<SubResourceArgs> loadBalancerFrontendIPConfiguration;
        private @Nullable Input<String> name;
        private @Nullable Input<SubResourceArgs> subnet;
        private @Nullable Input<SubResourceArgs> virtualNetwork;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancerBackendAddressArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipAddress = defaults.ipAddress;
    	      this.loadBalancerFrontendIPConfiguration = defaults.loadBalancerFrontendIPConfiguration;
    	      this.name = defaults.name;
    	      this.subnet = defaults.subnet;
    	      this.virtualNetwork = defaults.virtualNetwork;
        }

        public Builder setIpAddress(@Nullable Input<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder setIpAddress(@Nullable String ipAddress) {
            this.ipAddress = Input.ofNullable(ipAddress);
            return this;
        }

        public Builder setLoadBalancerFrontendIPConfiguration(@Nullable Input<SubResourceArgs> loadBalancerFrontendIPConfiguration) {
            this.loadBalancerFrontendIPConfiguration = loadBalancerFrontendIPConfiguration;
            return this;
        }

        public Builder setLoadBalancerFrontendIPConfiguration(@Nullable SubResourceArgs loadBalancerFrontendIPConfiguration) {
            this.loadBalancerFrontendIPConfiguration = Input.ofNullable(loadBalancerFrontendIPConfiguration);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setSubnet(@Nullable Input<SubResourceArgs> subnet) {
            this.subnet = subnet;
            return this;
        }

        public Builder setSubnet(@Nullable SubResourceArgs subnet) {
            this.subnet = Input.ofNullable(subnet);
            return this;
        }

        public Builder setVirtualNetwork(@Nullable Input<SubResourceArgs> virtualNetwork) {
            this.virtualNetwork = virtualNetwork;
            return this;
        }

        public Builder setVirtualNetwork(@Nullable SubResourceArgs virtualNetwork) {
            this.virtualNetwork = Input.ofNullable(virtualNetwork);
            return this;
        }

        public LoadBalancerBackendAddressArgs build() {
            return new LoadBalancerBackendAddressArgs(ipAddress, loadBalancerFrontendIPConfiguration, name, subnet, virtualNetwork);
        }
    }
}
