// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.outputs;

import io.pulumi.azurenative.insights.outputs.ScaleRuleMetricDimensionResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class MetricTriggerResponse {
    private final @Nullable List<ScaleRuleMetricDimensionResponse> dimensions;
    private final @Nullable Boolean dividePerInstance;
    private final String metricName;
    private final @Nullable String metricNamespace;
    private final @Nullable String metricResourceLocation;
    private final String metricResourceUri;
    private final String operator;
    private final String statistic;
    private final Double threshold;
    private final String timeAggregation;
    private final String timeGrain;
    private final String timeWindow;

    @OutputCustomType.Constructor({"dimensions","dividePerInstance","metricName","metricNamespace","metricResourceLocation","metricResourceUri","operator","statistic","threshold","timeAggregation","timeGrain","timeWindow"})
    private MetricTriggerResponse(
        @Nullable List<ScaleRuleMetricDimensionResponse> dimensions,
        @Nullable Boolean dividePerInstance,
        String metricName,
        @Nullable String metricNamespace,
        @Nullable String metricResourceLocation,
        String metricResourceUri,
        String operator,
        String statistic,
        Double threshold,
        String timeAggregation,
        String timeGrain,
        String timeWindow) {
        this.dimensions = dimensions;
        this.dividePerInstance = dividePerInstance;
        this.metricName = Objects.requireNonNull(metricName);
        this.metricNamespace = metricNamespace;
        this.metricResourceLocation = metricResourceLocation;
        this.metricResourceUri = Objects.requireNonNull(metricResourceUri);
        this.operator = Objects.requireNonNull(operator);
        this.statistic = Objects.requireNonNull(statistic);
        this.threshold = Objects.requireNonNull(threshold);
        this.timeAggregation = Objects.requireNonNull(timeAggregation);
        this.timeGrain = Objects.requireNonNull(timeGrain);
        this.timeWindow = Objects.requireNonNull(timeWindow);
    }

    public List<ScaleRuleMetricDimensionResponse> getDimensions() {
        return this.dimensions == null ? List.of() : this.dimensions;
    }
    public Optional<Boolean> getDividePerInstance() {
        return Optional.ofNullable(this.dividePerInstance);
    }
    public String getMetricName() {
        return this.metricName;
    }
    public Optional<String> getMetricNamespace() {
        return Optional.ofNullable(this.metricNamespace);
    }
    public Optional<String> getMetricResourceLocation() {
        return Optional.ofNullable(this.metricResourceLocation);
    }
    public String getMetricResourceUri() {
        return this.metricResourceUri;
    }
    public String getOperator() {
        return this.operator;
    }
    public String getStatistic() {
        return this.statistic;
    }
    public Double getThreshold() {
        return this.threshold;
    }
    public String getTimeAggregation() {
        return this.timeAggregation;
    }
    public String getTimeGrain() {
        return this.timeGrain;
    }
    public String getTimeWindow() {
        return this.timeWindow;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<ScaleRuleMetricDimensionResponse> dimensions;
        private @Nullable Boolean dividePerInstance;
        private String metricName;
        private @Nullable String metricNamespace;
        private @Nullable String metricResourceLocation;
        private String metricResourceUri;
        private String operator;
        private String statistic;
        private Double threshold;
        private String timeAggregation;
        private String timeGrain;
        private String timeWindow;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dimensions = defaults.dimensions;
    	      this.dividePerInstance = defaults.dividePerInstance;
    	      this.metricName = defaults.metricName;
    	      this.metricNamespace = defaults.metricNamespace;
    	      this.metricResourceLocation = defaults.metricResourceLocation;
    	      this.metricResourceUri = defaults.metricResourceUri;
    	      this.operator = defaults.operator;
    	      this.statistic = defaults.statistic;
    	      this.threshold = defaults.threshold;
    	      this.timeAggregation = defaults.timeAggregation;
    	      this.timeGrain = defaults.timeGrain;
    	      this.timeWindow = defaults.timeWindow;
        }

        public Builder setDimensions(@Nullable List<ScaleRuleMetricDimensionResponse> dimensions) {
            this.dimensions = dimensions;
            return this;
        }

        public Builder setDividePerInstance(@Nullable Boolean dividePerInstance) {
            this.dividePerInstance = dividePerInstance;
            return this;
        }

        public Builder setMetricName(String metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }

        public Builder setMetricNamespace(@Nullable String metricNamespace) {
            this.metricNamespace = metricNamespace;
            return this;
        }

        public Builder setMetricResourceLocation(@Nullable String metricResourceLocation) {
            this.metricResourceLocation = metricResourceLocation;
            return this;
        }

        public Builder setMetricResourceUri(String metricResourceUri) {
            this.metricResourceUri = Objects.requireNonNull(metricResourceUri);
            return this;
        }

        public Builder setOperator(String operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }

        public Builder setStatistic(String statistic) {
            this.statistic = Objects.requireNonNull(statistic);
            return this;
        }

        public Builder setThreshold(Double threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }

        public Builder setTimeAggregation(String timeAggregation) {
            this.timeAggregation = Objects.requireNonNull(timeAggregation);
            return this;
        }

        public Builder setTimeGrain(String timeGrain) {
            this.timeGrain = Objects.requireNonNull(timeGrain);
            return this;
        }

        public Builder setTimeWindow(String timeWindow) {
            this.timeWindow = Objects.requireNonNull(timeWindow);
            return this;
        }

        public MetricTriggerResponse build() {
            return new MetricTriggerResponse(dimensions, dividePerInstance, metricName, metricNamespace, metricResourceLocation, metricResourceUri, operator, statistic, threshold, timeAggregation, timeGrain, timeWindow);
        }
    }
}
