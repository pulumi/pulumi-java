// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.outputs;

import io.pulumi.azurenative.insights.outputs.ScaleRuleMetricDimensionResponse;
import io.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MetricTriggerResponse {
    /**
     * List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
     * 
     */
    private final @Nullable List<ScaleRuleMetricDimensionResponse> dimensions;
    /**
     * a value indicating whether metric should divide per instance.
     * 
     */
    private final @Nullable Boolean dividePerInstance;
    /**
     * the name of the metric that defines what the rule monitors.
     * 
     */
    private final String metricName;
    /**
     * the namespace of the metric that defines what the rule monitors.
     * 
     */
    private final @Nullable String metricNamespace;
    /**
     * the location of the resource the rule monitors.
     * 
     */
    private final @Nullable String metricResourceLocation;
    /**
     * the resource identifier of the resource the rule monitors.
     * 
     */
    private final String metricResourceUri;
    /**
     * the operator that is used to compare the metric data and the threshold.
     * 
     */
    private final String operator;
    /**
     * the metric statistic type. How the metrics from multiple instances are combined.
     * 
     */
    private final String statistic;
    /**
     * the threshold of the metric that triggers the scale action.
     * 
     */
    private final Double threshold;
    /**
     * time aggregation type. How the data that is collected should be combined over time. The default value is Average.
     * 
     */
    private final String timeAggregation;
    /**
     * the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
     * 
     */
    private final String timeGrain;
    /**
     * the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
     * 
     */
    private final String timeWindow;

    @CustomType.Constructor
    private MetricTriggerResponse(
        @CustomType.Parameter("dimensions") @Nullable List<ScaleRuleMetricDimensionResponse> dimensions,
        @CustomType.Parameter("dividePerInstance") @Nullable Boolean dividePerInstance,
        @CustomType.Parameter("metricName") String metricName,
        @CustomType.Parameter("metricNamespace") @Nullable String metricNamespace,
        @CustomType.Parameter("metricResourceLocation") @Nullable String metricResourceLocation,
        @CustomType.Parameter("metricResourceUri") String metricResourceUri,
        @CustomType.Parameter("operator") String operator,
        @CustomType.Parameter("statistic") String statistic,
        @CustomType.Parameter("threshold") Double threshold,
        @CustomType.Parameter("timeAggregation") String timeAggregation,
        @CustomType.Parameter("timeGrain") String timeGrain,
        @CustomType.Parameter("timeWindow") String timeWindow) {
        this.dimensions = dimensions;
        this.dividePerInstance = dividePerInstance;
        this.metricName = metricName;
        this.metricNamespace = metricNamespace;
        this.metricResourceLocation = metricResourceLocation;
        this.metricResourceUri = metricResourceUri;
        this.operator = operator;
        this.statistic = statistic;
        this.threshold = threshold;
        this.timeAggregation = timeAggregation;
        this.timeGrain = timeGrain;
        this.timeWindow = timeWindow;
    }

    /**
     * List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
     * 
    */
    public List<ScaleRuleMetricDimensionResponse> dimensions() {
        return this.dimensions == null ? List.of() : this.dimensions;
    }
    /**
     * a value indicating whether metric should divide per instance.
     * 
    */
    public Optional<Boolean> dividePerInstance() {
        return Optional.ofNullable(this.dividePerInstance);
    }
    /**
     * the name of the metric that defines what the rule monitors.
     * 
    */
    public String metricName() {
        return this.metricName;
    }
    /**
     * the namespace of the metric that defines what the rule monitors.
     * 
    */
    public Optional<String> metricNamespace() {
        return Optional.ofNullable(this.metricNamespace);
    }
    /**
     * the location of the resource the rule monitors.
     * 
    */
    public Optional<String> metricResourceLocation() {
        return Optional.ofNullable(this.metricResourceLocation);
    }
    /**
     * the resource identifier of the resource the rule monitors.
     * 
    */
    public String metricResourceUri() {
        return this.metricResourceUri;
    }
    /**
     * the operator that is used to compare the metric data and the threshold.
     * 
    */
    public String operator() {
        return this.operator;
    }
    /**
     * the metric statistic type. How the metrics from multiple instances are combined.
     * 
    */
    public String statistic() {
        return this.statistic;
    }
    /**
     * the threshold of the metric that triggers the scale action.
     * 
    */
    public Double threshold() {
        return this.threshold;
    }
    /**
     * time aggregation type. How the data that is collected should be combined over time. The default value is Average.
     * 
    */
    public String timeAggregation() {
        return this.timeAggregation;
    }
    /**
     * the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
     * 
    */
    public String timeGrain() {
        return this.timeGrain;
    }
    /**
     * the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
     * 
    */
    public String timeWindow() {
        return this.timeWindow;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<ScaleRuleMetricDimensionResponse> dimensions;
        private @Nullable Boolean dividePerInstance;
        private String metricName;
        private @Nullable String metricNamespace;
        private @Nullable String metricResourceLocation;
        private String metricResourceUri;
        private String operator;
        private String statistic;
        private Double threshold;
        private String timeAggregation;
        private String timeGrain;
        private String timeWindow;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dimensions = defaults.dimensions;
    	      this.dividePerInstance = defaults.dividePerInstance;
    	      this.metricName = defaults.metricName;
    	      this.metricNamespace = defaults.metricNamespace;
    	      this.metricResourceLocation = defaults.metricResourceLocation;
    	      this.metricResourceUri = defaults.metricResourceUri;
    	      this.operator = defaults.operator;
    	      this.statistic = defaults.statistic;
    	      this.threshold = defaults.threshold;
    	      this.timeAggregation = defaults.timeAggregation;
    	      this.timeGrain = defaults.timeGrain;
    	      this.timeWindow = defaults.timeWindow;
        }

        public Builder dimensions(@Nullable List<ScaleRuleMetricDimensionResponse> dimensions) {
            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(ScaleRuleMetricDimensionResponse... dimensions) {
            return dimensions(List.of(dimensions));
        }
        public Builder dividePerInstance(@Nullable Boolean dividePerInstance) {
            this.dividePerInstance = dividePerInstance;
            return this;
        }
        public Builder metricName(String metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        public Builder metricNamespace(@Nullable String metricNamespace) {
            this.metricNamespace = metricNamespace;
            return this;
        }
        public Builder metricResourceLocation(@Nullable String metricResourceLocation) {
            this.metricResourceLocation = metricResourceLocation;
            return this;
        }
        public Builder metricResourceUri(String metricResourceUri) {
            this.metricResourceUri = Objects.requireNonNull(metricResourceUri);
            return this;
        }
        public Builder operator(String operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }
        public Builder statistic(String statistic) {
            this.statistic = Objects.requireNonNull(statistic);
            return this;
        }
        public Builder threshold(Double threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }
        public Builder timeAggregation(String timeAggregation) {
            this.timeAggregation = Objects.requireNonNull(timeAggregation);
            return this;
        }
        public Builder timeGrain(String timeGrain) {
            this.timeGrain = Objects.requireNonNull(timeGrain);
            return this;
        }
        public Builder timeWindow(String timeWindow) {
            this.timeWindow = Objects.requireNonNull(timeWindow);
            return this;
        }        public MetricTriggerResponse build() {
            return new MetricTriggerResponse(dimensions, dividePerInstance, metricName, metricNamespace, metricResourceLocation, metricResourceUri, operator, statistic, threshold, timeAggregation, timeGrain, timeWindow);
        }
    }
}
