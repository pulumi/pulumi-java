// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.inputs.VirtualDirectoryResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Virtual application in an app.
 * 
 */
public final class VirtualApplicationResponse extends io.pulumi.resources.InvokeArgs {

    public static final VirtualApplicationResponse Empty = new VirtualApplicationResponse();

    /**
     * Physical path.
     * 
     */
    @InputImport(name="physicalPath")
      private final @Nullable String physicalPath;

    public Optional<String> getPhysicalPath() {
        return this.physicalPath == null ? Optional.empty() : Optional.ofNullable(this.physicalPath);
    }

    /**
     * <code>true</code> if preloading is enabled; otherwise, <code>false</code>.
     * 
     */
    @InputImport(name="preloadEnabled")
      private final @Nullable Boolean preloadEnabled;

    public Optional<Boolean> getPreloadEnabled() {
        return this.preloadEnabled == null ? Optional.empty() : Optional.ofNullable(this.preloadEnabled);
    }

    /**
     * Virtual directories for virtual application.
     * 
     */
    @InputImport(name="virtualDirectories")
      private final @Nullable List<VirtualDirectoryResponse> virtualDirectories;

    public List<VirtualDirectoryResponse> getVirtualDirectories() {
        return this.virtualDirectories == null ? List.of() : this.virtualDirectories;
    }

    /**
     * Virtual path.
     * 
     */
    @InputImport(name="virtualPath")
      private final @Nullable String virtualPath;

    public Optional<String> getVirtualPath() {
        return this.virtualPath == null ? Optional.empty() : Optional.ofNullable(this.virtualPath);
    }

    public VirtualApplicationResponse(
        @Nullable String physicalPath,
        @Nullable Boolean preloadEnabled,
        @Nullable List<VirtualDirectoryResponse> virtualDirectories,
        @Nullable String virtualPath) {
        this.physicalPath = physicalPath;
        this.preloadEnabled = preloadEnabled;
        this.virtualDirectories = virtualDirectories;
        this.virtualPath = virtualPath;
    }

    private VirtualApplicationResponse() {
        this.physicalPath = null;
        this.preloadEnabled = null;
        this.virtualDirectories = List.of();
        this.virtualPath = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualApplicationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String physicalPath;
        private @Nullable Boolean preloadEnabled;
        private @Nullable List<VirtualDirectoryResponse> virtualDirectories;
        private @Nullable String virtualPath;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualApplicationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.physicalPath = defaults.physicalPath;
    	      this.preloadEnabled = defaults.preloadEnabled;
    	      this.virtualDirectories = defaults.virtualDirectories;
    	      this.virtualPath = defaults.virtualPath;
        }

        public Builder setPhysicalPath(@Nullable String physicalPath) {
            this.physicalPath = physicalPath;
            return this;
        }

        public Builder setPreloadEnabled(@Nullable Boolean preloadEnabled) {
            this.preloadEnabled = preloadEnabled;
            return this;
        }

        public Builder setVirtualDirectories(@Nullable List<VirtualDirectoryResponse> virtualDirectories) {
            this.virtualDirectories = virtualDirectories;
            return this;
        }

        public Builder setVirtualPath(@Nullable String virtualPath) {
            this.virtualPath = virtualPath;
            return this;
        }
        public VirtualApplicationResponse build() {
            return new VirtualApplicationResponse(physicalPath, preloadEnabled, virtualDirectories, virtualPath);
        }
    }
}
