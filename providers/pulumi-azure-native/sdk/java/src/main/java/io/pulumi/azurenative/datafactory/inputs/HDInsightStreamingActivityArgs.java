// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.enums.HDInsightActivityDebugInfoOption;
import io.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import io.pulumi.azurenative.datafactory.inputs.ActivityPolicyArgs;
import io.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import io.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * HDInsight streaming activity type.
 * 
 */
public final class HDInsightStreamingActivityArgs extends io.pulumi.resources.ResourceArgs {

    public static final HDInsightStreamingActivityArgs Empty = new HDInsightStreamingActivityArgs();

    /**
     * User specified arguments to HDInsightActivity.
     * 
     */
    @InputImport(name="arguments")
      private final @Nullable Output<List<Object>> arguments;

    public Output<List<Object>> getArguments() {
        return this.arguments == null ? Output.empty() : this.arguments;
    }

    /**
     * Combiner executable name. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="combiner")
      private final @Nullable Output<Object> combiner;

    public Output<Object> getCombiner() {
        return this.combiner == null ? Output.empty() : this.combiner;
    }

    /**
     * Command line environment values.
     * 
     */
    @InputImport(name="commandEnvironment")
      private final @Nullable Output<List<Object>> commandEnvironment;

    public Output<List<Object>> getCommandEnvironment() {
        return this.commandEnvironment == null ? Output.empty() : this.commandEnvironment;
    }

    /**
     * Allows user to specify defines for streaming job request.
     * 
     */
    @InputImport(name="defines")
      private final @Nullable Output<Map<String,Object>> defines;

    public Output<Map<String,Object>> getDefines() {
        return this.defines == null ? Output.empty() : this.defines;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @InputImport(name="dependsOn")
      private final @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    public Output<List<ActivityDependencyArgs>> getDependsOn() {
        return this.dependsOn == null ? Output.empty() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Linked service reference where the files are located.
     * 
     */
    @InputImport(name="fileLinkedService")
      private final @Nullable Output<LinkedServiceReferenceArgs> fileLinkedService;

    public Output<LinkedServiceReferenceArgs> getFileLinkedService() {
        return this.fileLinkedService == null ? Output.empty() : this.fileLinkedService;
    }

    /**
     * Paths to streaming job files. Can be directories.
     * 
     */
    @InputImport(name="filePaths", required=true)
      private final Output<List<Object>> filePaths;

    public Output<List<Object>> getFilePaths() {
        return this.filePaths;
    }

    /**
     * Debug info option.
     * 
     */
    @InputImport(name="getDebugInfo")
      private final @Nullable Output<Either<String,HDInsightActivityDebugInfoOption>> getDebugInfo;

    public Output<Either<String,HDInsightActivityDebugInfoOption>> getGetDebugInfo() {
        return this.getDebugInfo == null ? Output.empty() : this.getDebugInfo;
    }

    /**
     * Input blob path. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="input", required=true)
      private final Output<Object> input;

    public Output<Object> getInput() {
        return this.input;
    }

    /**
     * Linked service reference.
     * 
     */
    @InputImport(name="linkedServiceName")
      private final @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Output<LinkedServiceReferenceArgs> getLinkedServiceName() {
        return this.linkedServiceName == null ? Output.empty() : this.linkedServiceName;
    }

    /**
     * Mapper executable name. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="mapper", required=true)
      private final Output<Object> mapper;

    public Output<Object> getMapper() {
        return this.mapper;
    }

    /**
     * Activity name.
     * 
     */
    @InputImport(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * Output blob path. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="output", required=true)
      private final Output<Object> output;

    public Output<Object> getOutput() {
        return this.output;
    }

    /**
     * Activity policy.
     * 
     */
    @InputImport(name="policy")
      private final @Nullable Output<ActivityPolicyArgs> policy;

    public Output<ActivityPolicyArgs> getPolicy() {
        return this.policy == null ? Output.empty() : this.policy;
    }

    /**
     * Reducer executable name. Type: string (or Expression with resultType string).
     * 
     */
    @InputImport(name="reducer", required=true)
      private final Output<Object> reducer;

    public Output<Object> getReducer() {
        return this.reducer;
    }

    /**
     * Storage linked service references.
     * 
     */
    @InputImport(name="storageLinkedServices")
      private final @Nullable Output<List<LinkedServiceReferenceArgs>> storageLinkedServices;

    public Output<List<LinkedServiceReferenceArgs>> getStorageLinkedServices() {
        return this.storageLinkedServices == null ? Output.empty() : this.storageLinkedServices;
    }

    /**
     * Type of activity.
     * Expected value is 'HDInsightStreaming'.
     * 
     */
    @InputImport(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @InputImport(name="userProperties")
      private final @Nullable Output<List<UserPropertyArgs>> userProperties;

    public Output<List<UserPropertyArgs>> getUserProperties() {
        return this.userProperties == null ? Output.empty() : this.userProperties;
    }

    public HDInsightStreamingActivityArgs(
        @Nullable Output<List<Object>> arguments,
        @Nullable Output<Object> combiner,
        @Nullable Output<List<Object>> commandEnvironment,
        @Nullable Output<Map<String,Object>> defines,
        @Nullable Output<List<ActivityDependencyArgs>> dependsOn,
        @Nullable Output<String> description,
        @Nullable Output<LinkedServiceReferenceArgs> fileLinkedService,
        Output<List<Object>> filePaths,
        @Nullable Output<Either<String,HDInsightActivityDebugInfoOption>> getDebugInfo,
        Output<Object> input,
        @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName,
        Output<Object> mapper,
        Output<String> name,
        Output<Object> output,
        @Nullable Output<ActivityPolicyArgs> policy,
        Output<Object> reducer,
        @Nullable Output<List<LinkedServiceReferenceArgs>> storageLinkedServices,
        Output<String> type,
        @Nullable Output<List<UserPropertyArgs>> userProperties) {
        this.arguments = arguments;
        this.combiner = combiner;
        this.commandEnvironment = commandEnvironment;
        this.defines = defines;
        this.dependsOn = dependsOn;
        this.description = description;
        this.fileLinkedService = fileLinkedService;
        this.filePaths = Objects.requireNonNull(filePaths, "expected parameter 'filePaths' to be non-null");
        this.getDebugInfo = getDebugInfo;
        this.input = Objects.requireNonNull(input, "expected parameter 'input' to be non-null");
        this.linkedServiceName = linkedServiceName;
        this.mapper = Objects.requireNonNull(mapper, "expected parameter 'mapper' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.output = Objects.requireNonNull(output, "expected parameter 'output' to be non-null");
        this.policy = policy;
        this.reducer = Objects.requireNonNull(reducer, "expected parameter 'reducer' to be non-null");
        this.storageLinkedServices = storageLinkedServices;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userProperties = userProperties;
    }

    private HDInsightStreamingActivityArgs() {
        this.arguments = Output.empty();
        this.combiner = Output.empty();
        this.commandEnvironment = Output.empty();
        this.defines = Output.empty();
        this.dependsOn = Output.empty();
        this.description = Output.empty();
        this.fileLinkedService = Output.empty();
        this.filePaths = Output.empty();
        this.getDebugInfo = Output.empty();
        this.input = Output.empty();
        this.linkedServiceName = Output.empty();
        this.mapper = Output.empty();
        this.name = Output.empty();
        this.output = Output.empty();
        this.policy = Output.empty();
        this.reducer = Output.empty();
        this.storageLinkedServices = Output.empty();
        this.type = Output.empty();
        this.userProperties = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HDInsightStreamingActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Object>> arguments;
        private @Nullable Output<Object> combiner;
        private @Nullable Output<List<Object>> commandEnvironment;
        private @Nullable Output<Map<String,Object>> defines;
        private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;
        private @Nullable Output<String> description;
        private @Nullable Output<LinkedServiceReferenceArgs> fileLinkedService;
        private Output<List<Object>> filePaths;
        private @Nullable Output<Either<String,HDInsightActivityDebugInfoOption>> getDebugInfo;
        private Output<Object> input;
        private @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;
        private Output<Object> mapper;
        private Output<String> name;
        private Output<Object> output;
        private @Nullable Output<ActivityPolicyArgs> policy;
        private Output<Object> reducer;
        private @Nullable Output<List<LinkedServiceReferenceArgs>> storageLinkedServices;
        private Output<String> type;
        private @Nullable Output<List<UserPropertyArgs>> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(HDInsightStreamingActivityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.combiner = defaults.combiner;
    	      this.commandEnvironment = defaults.commandEnvironment;
    	      this.defines = defaults.defines;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.fileLinkedService = defaults.fileLinkedService;
    	      this.filePaths = defaults.filePaths;
    	      this.getDebugInfo = defaults.getDebugInfo;
    	      this.input = defaults.input;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.mapper = defaults.mapper;
    	      this.name = defaults.name;
    	      this.output = defaults.output;
    	      this.policy = defaults.policy;
    	      this.reducer = defaults.reducer;
    	      this.storageLinkedServices = defaults.storageLinkedServices;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder arguments(@Nullable Output<List<Object>> arguments) {
            this.arguments = arguments;
            return this;
        }

        public Builder arguments(@Nullable List<Object> arguments) {
            this.arguments = Output.ofNullable(arguments);
            return this;
        }

        public Builder combiner(@Nullable Output<Object> combiner) {
            this.combiner = combiner;
            return this;
        }

        public Builder combiner(@Nullable Object combiner) {
            this.combiner = Output.ofNullable(combiner);
            return this;
        }

        public Builder commandEnvironment(@Nullable Output<List<Object>> commandEnvironment) {
            this.commandEnvironment = commandEnvironment;
            return this;
        }

        public Builder commandEnvironment(@Nullable List<Object> commandEnvironment) {
            this.commandEnvironment = Output.ofNullable(commandEnvironment);
            return this;
        }

        public Builder defines(@Nullable Output<Map<String,Object>> defines) {
            this.defines = defines;
            return this;
        }

        public Builder defines(@Nullable Map<String,Object> defines) {
            this.defines = Output.ofNullable(defines);
            return this;
        }

        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyArgs> dependsOn) {
            this.dependsOn = Output.ofNullable(dependsOn);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder fileLinkedService(@Nullable Output<LinkedServiceReferenceArgs> fileLinkedService) {
            this.fileLinkedService = fileLinkedService;
            return this;
        }

        public Builder fileLinkedService(@Nullable LinkedServiceReferenceArgs fileLinkedService) {
            this.fileLinkedService = Output.ofNullable(fileLinkedService);
            return this;
        }

        public Builder filePaths(Output<List<Object>> filePaths) {
            this.filePaths = Objects.requireNonNull(filePaths);
            return this;
        }

        public Builder filePaths(List<Object> filePaths) {
            this.filePaths = Output.of(Objects.requireNonNull(filePaths));
            return this;
        }

        public Builder getDebugInfo(@Nullable Output<Either<String,HDInsightActivityDebugInfoOption>> getDebugInfo) {
            this.getDebugInfo = getDebugInfo;
            return this;
        }

        public Builder getDebugInfo(@Nullable Either<String,HDInsightActivityDebugInfoOption> getDebugInfo) {
            this.getDebugInfo = Output.ofNullable(getDebugInfo);
            return this;
        }

        public Builder input(Output<Object> input) {
            this.input = Objects.requireNonNull(input);
            return this;
        }

        public Builder input(Object input) {
            this.input = Output.of(Objects.requireNonNull(input));
            return this;
        }

        public Builder linkedServiceName(@Nullable Output<LinkedServiceReferenceArgs> linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder linkedServiceName(@Nullable LinkedServiceReferenceArgs linkedServiceName) {
            this.linkedServiceName = Output.ofNullable(linkedServiceName);
            return this;
        }

        public Builder mapper(Output<Object> mapper) {
            this.mapper = Objects.requireNonNull(mapper);
            return this;
        }

        public Builder mapper(Object mapper) {
            this.mapper = Output.of(Objects.requireNonNull(mapper));
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder output(Output<Object> output) {
            this.output = Objects.requireNonNull(output);
            return this;
        }

        public Builder output(Object output) {
            this.output = Output.of(Objects.requireNonNull(output));
            return this;
        }

        public Builder policy(@Nullable Output<ActivityPolicyArgs> policy) {
            this.policy = policy;
            return this;
        }

        public Builder policy(@Nullable ActivityPolicyArgs policy) {
            this.policy = Output.ofNullable(policy);
            return this;
        }

        public Builder reducer(Output<Object> reducer) {
            this.reducer = Objects.requireNonNull(reducer);
            return this;
        }

        public Builder reducer(Object reducer) {
            this.reducer = Output.of(Objects.requireNonNull(reducer));
            return this;
        }

        public Builder storageLinkedServices(@Nullable Output<List<LinkedServiceReferenceArgs>> storageLinkedServices) {
            this.storageLinkedServices = storageLinkedServices;
            return this;
        }

        public Builder storageLinkedServices(@Nullable List<LinkedServiceReferenceArgs> storageLinkedServices) {
            this.storageLinkedServices = Output.ofNullable(storageLinkedServices);
            return this;
        }

        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            this.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(@Nullable List<UserPropertyArgs> userProperties) {
            this.userProperties = Output.ofNullable(userProperties);
            return this;
        }
        public HDInsightStreamingActivityArgs build() {
            return new HDInsightStreamingActivityArgs(arguments, combiner, commandEnvironment, defines, dependsOn, description, fileLinkedService, filePaths, getDebugInfo, input, linkedServiceName, mapper, name, output, policy, reducer, storageLinkedServices, type, userProperties);
        }
    }
}
