// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WebAppInstanceFunctionSlotArgs extends io.pulumi.resources.ResourceArgs {

    public static final WebAppInstanceFunctionSlotArgs Empty = new WebAppInstanceFunctionSlotArgs();

    /**
     * Config information.
     * 
     */
    @Import(name="config")
      private final @Nullable Output<Object> config;

    public Output<Object> config() {
        return this.config == null ? Codegen.empty() : this.config;
    }

    /**
     * Config URI.
     * 
     */
    @Import(name="configHref")
      private final @Nullable Output<String> configHref;

    public Output<String> configHref() {
        return this.configHref == null ? Codegen.empty() : this.configHref;
    }

    /**
     * File list.
     * 
     */
    @Import(name="files")
      private final @Nullable Output<Map<String,String>> files;

    public Output<Map<String,String>> files() {
        return this.files == null ? Codegen.empty() : this.files;
    }

    /**
     * Function App ID.
     * 
     */
    @Import(name="functionAppId")
      private final @Nullable Output<String> functionAppId;

    public Output<String> functionAppId() {
        return this.functionAppId == null ? Codegen.empty() : this.functionAppId;
    }

    /**
     * Function name.
     * 
     */
    @Import(name="functionName")
      private final @Nullable Output<String> functionName;

    public Output<String> functionName() {
        return this.functionName == null ? Codegen.empty() : this.functionName;
    }

    /**
     * Function URI.
     * 
     */
    @Import(name="href")
      private final @Nullable Output<String> href;

    public Output<String> href() {
        return this.href == null ? Codegen.empty() : this.href;
    }

    /**
     * The invocation URL
     * 
     */
    @Import(name="invokeUrlTemplate")
      private final @Nullable Output<String> invokeUrlTemplate;

    public Output<String> invokeUrlTemplate() {
        return this.invokeUrlTemplate == null ? Codegen.empty() : this.invokeUrlTemplate;
    }

    /**
     * Gets or sets a value indicating whether the function is disabled
     * 
     */
    @Import(name="isDisabled")
      private final @Nullable Output<Boolean> isDisabled;

    public Output<Boolean> isDisabled() {
        return this.isDisabled == null ? Codegen.empty() : this.isDisabled;
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> kind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * The function language
     * 
     */
    @Import(name="language")
      private final @Nullable Output<String> language;

    public Output<String> language() {
        return this.language == null ? Codegen.empty() : this.language;
    }

    /**
     * Site name.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Script URI.
     * 
     */
    @Import(name="scriptHref")
      private final @Nullable Output<String> scriptHref;

    public Output<String> scriptHref() {
        return this.scriptHref == null ? Codegen.empty() : this.scriptHref;
    }

    /**
     * Script root path URI.
     * 
     */
    @Import(name="scriptRootPathHref")
      private final @Nullable Output<String> scriptRootPathHref;

    public Output<String> scriptRootPathHref() {
        return this.scriptRootPathHref == null ? Codegen.empty() : this.scriptRootPathHref;
    }

    /**
     * Secrets file URI.
     * 
     */
    @Import(name="secretsFileHref")
      private final @Nullable Output<String> secretsFileHref;

    public Output<String> secretsFileHref() {
        return this.secretsFileHref == null ? Codegen.empty() : this.secretsFileHref;
    }

    /**
     * Name of the deployment slot.
     * 
     */
    @Import(name="slot", required=true)
      private final Output<String> slot;

    public Output<String> slot() {
        return this.slot;
    }

    /**
     * Test data used when testing via the Azure Portal.
     * 
     */
    @Import(name="testData")
      private final @Nullable Output<String> testData;

    public Output<String> testData() {
        return this.testData == null ? Codegen.empty() : this.testData;
    }

    /**
     * Test data URI.
     * 
     */
    @Import(name="testDataHref")
      private final @Nullable Output<String> testDataHref;

    public Output<String> testDataHref() {
        return this.testDataHref == null ? Codegen.empty() : this.testDataHref;
    }

    public WebAppInstanceFunctionSlotArgs(
        @Nullable Output<Object> config,
        @Nullable Output<String> configHref,
        @Nullable Output<Map<String,String>> files,
        @Nullable Output<String> functionAppId,
        @Nullable Output<String> functionName,
        @Nullable Output<String> href,
        @Nullable Output<String> invokeUrlTemplate,
        @Nullable Output<Boolean> isDisabled,
        @Nullable Output<String> kind,
        @Nullable Output<String> language,
        Output<String> name,
        Output<String> resourceGroupName,
        @Nullable Output<String> scriptHref,
        @Nullable Output<String> scriptRootPathHref,
        @Nullable Output<String> secretsFileHref,
        Output<String> slot,
        @Nullable Output<String> testData,
        @Nullable Output<String> testDataHref) {
        this.config = config;
        this.configHref = configHref;
        this.files = files;
        this.functionAppId = functionAppId;
        this.functionName = functionName;
        this.href = href;
        this.invokeUrlTemplate = invokeUrlTemplate;
        this.isDisabled = isDisabled;
        this.kind = kind;
        this.language = language;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scriptHref = scriptHref;
        this.scriptRootPathHref = scriptRootPathHref;
        this.secretsFileHref = secretsFileHref;
        this.slot = Objects.requireNonNull(slot, "expected parameter 'slot' to be non-null");
        this.testData = testData;
        this.testDataHref = testDataHref;
    }

    private WebAppInstanceFunctionSlotArgs() {
        this.config = Codegen.empty();
        this.configHref = Codegen.empty();
        this.files = Codegen.empty();
        this.functionAppId = Codegen.empty();
        this.functionName = Codegen.empty();
        this.href = Codegen.empty();
        this.invokeUrlTemplate = Codegen.empty();
        this.isDisabled = Codegen.empty();
        this.kind = Codegen.empty();
        this.language = Codegen.empty();
        this.name = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.scriptHref = Codegen.empty();
        this.scriptRootPathHref = Codegen.empty();
        this.secretsFileHref = Codegen.empty();
        this.slot = Codegen.empty();
        this.testData = Codegen.empty();
        this.testDataHref = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAppInstanceFunctionSlotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Object> config;
        private @Nullable Output<String> configHref;
        private @Nullable Output<Map<String,String>> files;
        private @Nullable Output<String> functionAppId;
        private @Nullable Output<String> functionName;
        private @Nullable Output<String> href;
        private @Nullable Output<String> invokeUrlTemplate;
        private @Nullable Output<Boolean> isDisabled;
        private @Nullable Output<String> kind;
        private @Nullable Output<String> language;
        private Output<String> name;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> scriptHref;
        private @Nullable Output<String> scriptRootPathHref;
        private @Nullable Output<String> secretsFileHref;
        private Output<String> slot;
        private @Nullable Output<String> testData;
        private @Nullable Output<String> testDataHref;

        public Builder() {
    	      // Empty
        }

        public Builder(WebAppInstanceFunctionSlotArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.config = defaults.config;
    	      this.configHref = defaults.configHref;
    	      this.files = defaults.files;
    	      this.functionAppId = defaults.functionAppId;
    	      this.functionName = defaults.functionName;
    	      this.href = defaults.href;
    	      this.invokeUrlTemplate = defaults.invokeUrlTemplate;
    	      this.isDisabled = defaults.isDisabled;
    	      this.kind = defaults.kind;
    	      this.language = defaults.language;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scriptHref = defaults.scriptHref;
    	      this.scriptRootPathHref = defaults.scriptRootPathHref;
    	      this.secretsFileHref = defaults.secretsFileHref;
    	      this.slot = defaults.slot;
    	      this.testData = defaults.testData;
    	      this.testDataHref = defaults.testDataHref;
        }

        public Builder config(@Nullable Output<Object> config) {
            this.config = config;
            return this;
        }
        public Builder config(@Nullable Object config) {
            this.config = Codegen.ofNullable(config);
            return this;
        }
        public Builder configHref(@Nullable Output<String> configHref) {
            this.configHref = configHref;
            return this;
        }
        public Builder configHref(@Nullable String configHref) {
            this.configHref = Codegen.ofNullable(configHref);
            return this;
        }
        public Builder files(@Nullable Output<Map<String,String>> files) {
            this.files = files;
            return this;
        }
        public Builder files(@Nullable Map<String,String> files) {
            this.files = Codegen.ofNullable(files);
            return this;
        }
        public Builder functionAppId(@Nullable Output<String> functionAppId) {
            this.functionAppId = functionAppId;
            return this;
        }
        public Builder functionAppId(@Nullable String functionAppId) {
            this.functionAppId = Codegen.ofNullable(functionAppId);
            return this;
        }
        public Builder functionName(@Nullable Output<String> functionName) {
            this.functionName = functionName;
            return this;
        }
        public Builder functionName(@Nullable String functionName) {
            this.functionName = Codegen.ofNullable(functionName);
            return this;
        }
        public Builder href(@Nullable Output<String> href) {
            this.href = href;
            return this;
        }
        public Builder href(@Nullable String href) {
            this.href = Codegen.ofNullable(href);
            return this;
        }
        public Builder invokeUrlTemplate(@Nullable Output<String> invokeUrlTemplate) {
            this.invokeUrlTemplate = invokeUrlTemplate;
            return this;
        }
        public Builder invokeUrlTemplate(@Nullable String invokeUrlTemplate) {
            this.invokeUrlTemplate = Codegen.ofNullable(invokeUrlTemplate);
            return this;
        }
        public Builder isDisabled(@Nullable Output<Boolean> isDisabled) {
            this.isDisabled = isDisabled;
            return this;
        }
        public Builder isDisabled(@Nullable Boolean isDisabled) {
            this.isDisabled = Codegen.ofNullable(isDisabled);
            return this;
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder language(@Nullable Output<String> language) {
            this.language = language;
            return this;
        }
        public Builder language(@Nullable String language) {
            this.language = Codegen.ofNullable(language);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder scriptHref(@Nullable Output<String> scriptHref) {
            this.scriptHref = scriptHref;
            return this;
        }
        public Builder scriptHref(@Nullable String scriptHref) {
            this.scriptHref = Codegen.ofNullable(scriptHref);
            return this;
        }
        public Builder scriptRootPathHref(@Nullable Output<String> scriptRootPathHref) {
            this.scriptRootPathHref = scriptRootPathHref;
            return this;
        }
        public Builder scriptRootPathHref(@Nullable String scriptRootPathHref) {
            this.scriptRootPathHref = Codegen.ofNullable(scriptRootPathHref);
            return this;
        }
        public Builder secretsFileHref(@Nullable Output<String> secretsFileHref) {
            this.secretsFileHref = secretsFileHref;
            return this;
        }
        public Builder secretsFileHref(@Nullable String secretsFileHref) {
            this.secretsFileHref = Codegen.ofNullable(secretsFileHref);
            return this;
        }
        public Builder slot(Output<String> slot) {
            this.slot = Objects.requireNonNull(slot);
            return this;
        }
        public Builder slot(String slot) {
            this.slot = Output.of(Objects.requireNonNull(slot));
            return this;
        }
        public Builder testData(@Nullable Output<String> testData) {
            this.testData = testData;
            return this;
        }
        public Builder testData(@Nullable String testData) {
            this.testData = Codegen.ofNullable(testData);
            return this;
        }
        public Builder testDataHref(@Nullable Output<String> testDataHref) {
            this.testDataHref = testDataHref;
            return this;
        }
        public Builder testDataHref(@Nullable String testDataHref) {
            this.testDataHref = Codegen.ofNullable(testDataHref);
            return this;
        }        public WebAppInstanceFunctionSlotArgs build() {
            return new WebAppInstanceFunctionSlotArgs(config, configHref, files, functionAppId, functionName, href, invokeUrlTemplate, isDisabled, kind, language, name, resourceGroupName, scriptHref, scriptRootPathHref, secretsFileHref, slot, testData, testDataHref);
        }
    }
}
