// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement.outputs;

import io.pulumi.azurenative.apimanagement.outputs.CertificateInformationResponse;
import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CertificateConfigurationResponse {
    /**
     * Certificate information.
     * 
     */
    private final @Nullable CertificateInformationResponse certificate;
    /**
     * Certificate Password.
     * 
     */
    private final @Nullable String certificatePassword;
    /**
     * Base64 Encoded certificate.
     * 
     */
    private final @Nullable String encodedCertificate;
    /**
     * The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.
     * 
     */
    private final String storeName;

    @CustomType.Constructor
    private CertificateConfigurationResponse(
        @CustomType.Parameter("certificate") @Nullable CertificateInformationResponse certificate,
        @CustomType.Parameter("certificatePassword") @Nullable String certificatePassword,
        @CustomType.Parameter("encodedCertificate") @Nullable String encodedCertificate,
        @CustomType.Parameter("storeName") String storeName) {
        this.certificate = certificate;
        this.certificatePassword = certificatePassword;
        this.encodedCertificate = encodedCertificate;
        this.storeName = storeName;
    }

    /**
     * Certificate information.
     * 
    */
    public Optional<CertificateInformationResponse> getCertificate() {
        return Optional.ofNullable(this.certificate);
    }
    /**
     * Certificate Password.
     * 
    */
    public Optional<String> getCertificatePassword() {
        return Optional.ofNullable(this.certificatePassword);
    }
    /**
     * Base64 Encoded certificate.
     * 
    */
    public Optional<String> getEncodedCertificate() {
        return Optional.ofNullable(this.encodedCertificate);
    }
    /**
     * The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.
     * 
    */
    public String getStoreName() {
        return this.storeName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable CertificateInformationResponse certificate;
        private @Nullable String certificatePassword;
        private @Nullable String encodedCertificate;
        private String storeName;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificate = defaults.certificate;
    	      this.certificatePassword = defaults.certificatePassword;
    	      this.encodedCertificate = defaults.encodedCertificate;
    	      this.storeName = defaults.storeName;
        }

        public Builder certificate(@Nullable CertificateInformationResponse certificate) {
            this.certificate = certificate;
            return this;
        }

        public Builder certificatePassword(@Nullable String certificatePassword) {
            this.certificatePassword = certificatePassword;
            return this;
        }

        public Builder encodedCertificate(@Nullable String encodedCertificate) {
            this.encodedCertificate = encodedCertificate;
            return this;
        }

        public Builder storeName(String storeName) {
            this.storeName = Objects.requireNonNull(storeName);
            return this;
        }
        public CertificateConfigurationResponse build() {
            return new CertificateConfigurationResponse(certificate, certificatePassword, encodedCertificate, storeName);
        }
    }
}
