// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.labservices;

import io.pulumi.azurenative.labservices.inputs.ResourceSetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EnvironmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final EnvironmentArgs Empty = new EnvironmentArgs();

    /**
     * The name of the environment.
     * 
     */
    @Import(name="environmentName")
      private final @Nullable Output<String> environmentName;

    public Output<String> environmentName() {
        return this.environmentName == null ? Codegen.empty() : this.environmentName;
    }

    /**
     * The name of the environment Setting.
     * 
     */
    @Import(name="environmentSettingName", required=true)
      private final Output<String> environmentSettingName;

    public Output<String> environmentSettingName() {
        return this.environmentSettingName;
    }

    /**
     * The name of the lab Account.
     * 
     */
    @Import(name="labAccountName", required=true)
      private final Output<String> labAccountName;

    public Output<String> labAccountName() {
        return this.labAccountName;
    }

    /**
     * The name of the lab.
     * 
     */
    @Import(name="labName", required=true)
      private final Output<String> labName;

    public Output<String> labName() {
        return this.labName;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The provisioning status of the resource.
     * 
     */
    @Import(name="provisioningState")
      private final @Nullable Output<String> provisioningState;

    public Output<String> provisioningState() {
        return this.provisioningState == null ? Codegen.empty() : this.provisioningState;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The set of a VM and the setting id it was created for
     * 
     */
    @Import(name="resourceSets")
      private final @Nullable Output<ResourceSetArgs> resourceSets;

    public Output<ResourceSetArgs> resourceSets() {
        return this.resourceSets == null ? Codegen.empty() : this.resourceSets;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    @Import(name="uniqueIdentifier")
      private final @Nullable Output<String> uniqueIdentifier;

    public Output<String> uniqueIdentifier() {
        return this.uniqueIdentifier == null ? Codegen.empty() : this.uniqueIdentifier;
    }

    public EnvironmentArgs(
        @Nullable Output<String> environmentName,
        Output<String> environmentSettingName,
        Output<String> labAccountName,
        Output<String> labName,
        @Nullable Output<String> location,
        @Nullable Output<String> provisioningState,
        Output<String> resourceGroupName,
        @Nullable Output<ResourceSetArgs> resourceSets,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> uniqueIdentifier) {
        this.environmentName = environmentName;
        this.environmentSettingName = Objects.requireNonNull(environmentSettingName, "expected parameter 'environmentSettingName' to be non-null");
        this.labAccountName = Objects.requireNonNull(labAccountName, "expected parameter 'labAccountName' to be non-null");
        this.labName = Objects.requireNonNull(labName, "expected parameter 'labName' to be non-null");
        this.location = location;
        this.provisioningState = provisioningState;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceSets = resourceSets;
        this.tags = tags;
        this.uniqueIdentifier = uniqueIdentifier;
    }

    private EnvironmentArgs() {
        this.environmentName = Codegen.empty();
        this.environmentSettingName = Codegen.empty();
        this.labAccountName = Codegen.empty();
        this.labName = Codegen.empty();
        this.location = Codegen.empty();
        this.provisioningState = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.resourceSets = Codegen.empty();
        this.tags = Codegen.empty();
        this.uniqueIdentifier = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> environmentName;
        private Output<String> environmentSettingName;
        private Output<String> labAccountName;
        private Output<String> labName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> provisioningState;
        private Output<String> resourceGroupName;
        private @Nullable Output<ResourceSetArgs> resourceSets;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> uniqueIdentifier;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.environmentName = defaults.environmentName;
    	      this.environmentSettingName = defaults.environmentSettingName;
    	      this.labAccountName = defaults.labAccountName;
    	      this.labName = defaults.labName;
    	      this.location = defaults.location;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceSets = defaults.resourceSets;
    	      this.tags = defaults.tags;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
        }

        public Builder environmentName(@Nullable Output<String> environmentName) {
            this.environmentName = environmentName;
            return this;
        }
        public Builder environmentName(@Nullable String environmentName) {
            this.environmentName = Codegen.ofNullable(environmentName);
            return this;
        }
        public Builder environmentSettingName(Output<String> environmentSettingName) {
            this.environmentSettingName = Objects.requireNonNull(environmentSettingName);
            return this;
        }
        public Builder environmentSettingName(String environmentSettingName) {
            this.environmentSettingName = Output.of(Objects.requireNonNull(environmentSettingName));
            return this;
        }
        public Builder labAccountName(Output<String> labAccountName) {
            this.labAccountName = Objects.requireNonNull(labAccountName);
            return this;
        }
        public Builder labAccountName(String labAccountName) {
            this.labAccountName = Output.of(Objects.requireNonNull(labAccountName));
            return this;
        }
        public Builder labName(Output<String> labName) {
            this.labName = Objects.requireNonNull(labName);
            return this;
        }
        public Builder labName(String labName) {
            this.labName = Output.of(Objects.requireNonNull(labName));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder provisioningState(@Nullable Output<String> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = Codegen.ofNullable(provisioningState);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder resourceSets(@Nullable Output<ResourceSetArgs> resourceSets) {
            this.resourceSets = resourceSets;
            return this;
        }
        public Builder resourceSets(@Nullable ResourceSetArgs resourceSets) {
            this.resourceSets = Codegen.ofNullable(resourceSets);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder uniqueIdentifier(@Nullable Output<String> uniqueIdentifier) {
            this.uniqueIdentifier = uniqueIdentifier;
            return this;
        }
        public Builder uniqueIdentifier(@Nullable String uniqueIdentifier) {
            this.uniqueIdentifier = Codegen.ofNullable(uniqueIdentifier);
            return this;
        }        public EnvironmentArgs build() {
            return new EnvironmentArgs(environmentName, environmentSettingName, labAccountName, labName, location, provisioningState, resourceGroupName, resourceSets, tags, uniqueIdentifier);
        }
    }
}
