// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.ApplicationGatewayProtocol;
import io.pulumi.azurenative.network.inputs.ApplicationGatewayCustomErrorArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Http listener of an application gateway.
 * 
 */
public final class ApplicationGatewayHttpListenerArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayHttpListenerArgs Empty = new ApplicationGatewayHttpListenerArgs();

    /**
     * Custom error configurations of the HTTP listener.
     * 
     */
    @Import(name="customErrorConfigurations")
      private final @Nullable Output<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations;

    public Output<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations() {
        return this.customErrorConfigurations == null ? Codegen.empty() : this.customErrorConfigurations;
    }

    /**
     * Reference to the FirewallPolicy resource.
     * 
     */
    @Import(name="firewallPolicy")
      private final @Nullable Output<SubResourceArgs> firewallPolicy;

    public Output<SubResourceArgs> firewallPolicy() {
        return this.firewallPolicy == null ? Codegen.empty() : this.firewallPolicy;
    }

    /**
     * Frontend IP configuration resource of an application gateway.
     * 
     */
    @Import(name="frontendIPConfiguration")
      private final @Nullable Output<SubResourceArgs> frontendIPConfiguration;

    public Output<SubResourceArgs> frontendIPConfiguration() {
        return this.frontendIPConfiguration == null ? Codegen.empty() : this.frontendIPConfiguration;
    }

    /**
     * Frontend port resource of an application gateway.
     * 
     */
    @Import(name="frontendPort")
      private final @Nullable Output<SubResourceArgs> frontendPort;

    public Output<SubResourceArgs> frontendPort() {
        return this.frontendPort == null ? Codegen.empty() : this.frontendPort;
    }

    /**
     * Host name of HTTP listener.
     * 
     */
    @Import(name="hostName")
      private final @Nullable Output<String> hostName;

    public Output<String> hostName() {
        return this.hostName == null ? Codegen.empty() : this.hostName;
    }

    /**
     * List of Host names for HTTP Listener that allows special wildcard characters as well.
     * 
     */
    @Import(name="hostNames")
      private final @Nullable Output<List<String>> hostNames;

    public Output<List<String>> hostNames() {
        return this.hostNames == null ? Codegen.empty() : this.hostNames;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * Name of the HTTP listener that is unique within an Application Gateway.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Protocol of the HTTP listener.
     * 
     */
    @Import(name="protocol")
      private final @Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol;

    public Output<Either<String,ApplicationGatewayProtocol>> protocol() {
        return this.protocol == null ? Codegen.empty() : this.protocol;
    }

    /**
     * Applicable only if protocol is https. Enables SNI for multi-hosting.
     * 
     */
    @Import(name="requireServerNameIndication")
      private final @Nullable Output<Boolean> requireServerNameIndication;

    public Output<Boolean> requireServerNameIndication() {
        return this.requireServerNameIndication == null ? Codegen.empty() : this.requireServerNameIndication;
    }

    /**
     * SSL certificate resource of an application gateway.
     * 
     */
    @Import(name="sslCertificate")
      private final @Nullable Output<SubResourceArgs> sslCertificate;

    public Output<SubResourceArgs> sslCertificate() {
        return this.sslCertificate == null ? Codegen.empty() : this.sslCertificate;
    }

    /**
     * SSL profile resource of the application gateway.
     * 
     */
    @Import(name="sslProfile")
      private final @Nullable Output<SubResourceArgs> sslProfile;

    public Output<SubResourceArgs> sslProfile() {
        return this.sslProfile == null ? Codegen.empty() : this.sslProfile;
    }

    public ApplicationGatewayHttpListenerArgs(
        @Nullable Output<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations,
        @Nullable Output<SubResourceArgs> firewallPolicy,
        @Nullable Output<SubResourceArgs> frontendIPConfiguration,
        @Nullable Output<SubResourceArgs> frontendPort,
        @Nullable Output<String> hostName,
        @Nullable Output<List<String>> hostNames,
        @Nullable Output<String> id,
        @Nullable Output<String> name,
        @Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol,
        @Nullable Output<Boolean> requireServerNameIndication,
        @Nullable Output<SubResourceArgs> sslCertificate,
        @Nullable Output<SubResourceArgs> sslProfile) {
        this.customErrorConfigurations = customErrorConfigurations;
        this.firewallPolicy = firewallPolicy;
        this.frontendIPConfiguration = frontendIPConfiguration;
        this.frontendPort = frontendPort;
        this.hostName = hostName;
        this.hostNames = hostNames;
        this.id = id;
        this.name = name;
        this.protocol = protocol;
        this.requireServerNameIndication = requireServerNameIndication;
        this.sslCertificate = sslCertificate;
        this.sslProfile = sslProfile;
    }

    private ApplicationGatewayHttpListenerArgs() {
        this.customErrorConfigurations = Codegen.empty();
        this.firewallPolicy = Codegen.empty();
        this.frontendIPConfiguration = Codegen.empty();
        this.frontendPort = Codegen.empty();
        this.hostName = Codegen.empty();
        this.hostNames = Codegen.empty();
        this.id = Codegen.empty();
        this.name = Codegen.empty();
        this.protocol = Codegen.empty();
        this.requireServerNameIndication = Codegen.empty();
        this.sslCertificate = Codegen.empty();
        this.sslProfile = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayHttpListenerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations;
        private @Nullable Output<SubResourceArgs> firewallPolicy;
        private @Nullable Output<SubResourceArgs> frontendIPConfiguration;
        private @Nullable Output<SubResourceArgs> frontendPort;
        private @Nullable Output<String> hostName;
        private @Nullable Output<List<String>> hostNames;
        private @Nullable Output<String> id;
        private @Nullable Output<String> name;
        private @Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol;
        private @Nullable Output<Boolean> requireServerNameIndication;
        private @Nullable Output<SubResourceArgs> sslCertificate;
        private @Nullable Output<SubResourceArgs> sslProfile;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGatewayHttpListenerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customErrorConfigurations = defaults.customErrorConfigurations;
    	      this.firewallPolicy = defaults.firewallPolicy;
    	      this.frontendIPConfiguration = defaults.frontendIPConfiguration;
    	      this.frontendPort = defaults.frontendPort;
    	      this.hostName = defaults.hostName;
    	      this.hostNames = defaults.hostNames;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.requireServerNameIndication = defaults.requireServerNameIndication;
    	      this.sslCertificate = defaults.sslCertificate;
    	      this.sslProfile = defaults.sslProfile;
        }

        public Builder customErrorConfigurations(@Nullable Output<List<ApplicationGatewayCustomErrorArgs>> customErrorConfigurations) {
            this.customErrorConfigurations = customErrorConfigurations;
            return this;
        }
        public Builder customErrorConfigurations(@Nullable List<ApplicationGatewayCustomErrorArgs> customErrorConfigurations) {
            this.customErrorConfigurations = Codegen.ofNullable(customErrorConfigurations);
            return this;
        }
        public Builder customErrorConfigurations(ApplicationGatewayCustomErrorArgs... customErrorConfigurations) {
            return customErrorConfigurations(List.of(customErrorConfigurations));
        }
        public Builder firewallPolicy(@Nullable Output<SubResourceArgs> firewallPolicy) {
            this.firewallPolicy = firewallPolicy;
            return this;
        }
        public Builder firewallPolicy(@Nullable SubResourceArgs firewallPolicy) {
            this.firewallPolicy = Codegen.ofNullable(firewallPolicy);
            return this;
        }
        public Builder frontendIPConfiguration(@Nullable Output<SubResourceArgs> frontendIPConfiguration) {
            this.frontendIPConfiguration = frontendIPConfiguration;
            return this;
        }
        public Builder frontendIPConfiguration(@Nullable SubResourceArgs frontendIPConfiguration) {
            this.frontendIPConfiguration = Codegen.ofNullable(frontendIPConfiguration);
            return this;
        }
        public Builder frontendPort(@Nullable Output<SubResourceArgs> frontendPort) {
            this.frontendPort = frontendPort;
            return this;
        }
        public Builder frontendPort(@Nullable SubResourceArgs frontendPort) {
            this.frontendPort = Codegen.ofNullable(frontendPort);
            return this;
        }
        public Builder hostName(@Nullable Output<String> hostName) {
            this.hostName = hostName;
            return this;
        }
        public Builder hostName(@Nullable String hostName) {
            this.hostName = Codegen.ofNullable(hostName);
            return this;
        }
        public Builder hostNames(@Nullable Output<List<String>> hostNames) {
            this.hostNames = hostNames;
            return this;
        }
        public Builder hostNames(@Nullable List<String> hostNames) {
            this.hostNames = Codegen.ofNullable(hostNames);
            return this;
        }
        public Builder hostNames(String... hostNames) {
            return hostNames(List.of(hostNames));
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder protocol(@Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol) {
            this.protocol = protocol;
            return this;
        }
        public Builder protocol(@Nullable Either<String,ApplicationGatewayProtocol> protocol) {
            this.protocol = Codegen.ofNullable(protocol);
            return this;
        }
        public Builder requireServerNameIndication(@Nullable Output<Boolean> requireServerNameIndication) {
            this.requireServerNameIndication = requireServerNameIndication;
            return this;
        }
        public Builder requireServerNameIndication(@Nullable Boolean requireServerNameIndication) {
            this.requireServerNameIndication = Codegen.ofNullable(requireServerNameIndication);
            return this;
        }
        public Builder sslCertificate(@Nullable Output<SubResourceArgs> sslCertificate) {
            this.sslCertificate = sslCertificate;
            return this;
        }
        public Builder sslCertificate(@Nullable SubResourceArgs sslCertificate) {
            this.sslCertificate = Codegen.ofNullable(sslCertificate);
            return this;
        }
        public Builder sslProfile(@Nullable Output<SubResourceArgs> sslProfile) {
            this.sslProfile = sslProfile;
            return this;
        }
        public Builder sslProfile(@Nullable SubResourceArgs sslProfile) {
            this.sslProfile = Codegen.ofNullable(sslProfile);
            return this;
        }        public ApplicationGatewayHttpListenerArgs build() {
            return new ApplicationGatewayHttpListenerArgs(customErrorConfigurations, firewallPolicy, frontendIPConfiguration, frontendPort, hostName, hostNames, id, name, protocol, requireServerNameIndication, sslCertificate, sslProfile);
        }
    }
}
