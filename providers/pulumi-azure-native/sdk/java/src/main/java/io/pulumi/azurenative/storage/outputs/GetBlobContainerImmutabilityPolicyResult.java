// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.storage.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetBlobContainerImmutabilityPolicyResult {
    /**
     * This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API
     * 
     */
    private final @Nullable Boolean allowProtectedAppendWrites;
    /**
     * Resource Etag.
     * 
     */
    private final String etag;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * The immutability period for the blobs in the container since the policy creation, in days.
     * 
     */
    private final @Nullable Integer immutabilityPeriodSinceCreationInDays;
    /**
     * The name of the resource
     * 
     */
    private final String name;
    /**
     * The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
     * 
     */
    private final String state;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"allowProtectedAppendWrites","etag","id","immutabilityPeriodSinceCreationInDays","name","state","type"})
    private GetBlobContainerImmutabilityPolicyResult(
        @Nullable Boolean allowProtectedAppendWrites,
        String etag,
        String id,
        @Nullable Integer immutabilityPeriodSinceCreationInDays,
        String name,
        String state,
        String type) {
        this.allowProtectedAppendWrites = allowProtectedAppendWrites;
        this.etag = etag;
        this.id = id;
        this.immutabilityPeriodSinceCreationInDays = immutabilityPeriodSinceCreationInDays;
        this.name = name;
        this.state = state;
        this.type = type;
    }

    /**
     * This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API
     * 
    */
    public Optional<Boolean> getAllowProtectedAppendWrites() {
        return Optional.ofNullable(this.allowProtectedAppendWrites);
    }
    /**
     * Resource Etag.
     * 
    */
    public String getEtag() {
        return this.etag;
    }
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * The immutability period for the blobs in the container since the policy creation, in days.
     * 
    */
    public Optional<Integer> getImmutabilityPeriodSinceCreationInDays() {
        return Optional.ofNullable(this.immutabilityPeriodSinceCreationInDays);
    }
    /**
     * The name of the resource
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
     * 
    */
    public String getState() {
        return this.state;
    }
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
    */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBlobContainerImmutabilityPolicyResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean allowProtectedAppendWrites;
        private String etag;
        private String id;
        private @Nullable Integer immutabilityPeriodSinceCreationInDays;
        private String name;
        private String state;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBlobContainerImmutabilityPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowProtectedAppendWrites = defaults.allowProtectedAppendWrites;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.immutabilityPeriodSinceCreationInDays = defaults.immutabilityPeriodSinceCreationInDays;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
        }

        public Builder setAllowProtectedAppendWrites(@Nullable Boolean allowProtectedAppendWrites) {
            this.allowProtectedAppendWrites = allowProtectedAppendWrites;
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setImmutabilityPeriodSinceCreationInDays(@Nullable Integer immutabilityPeriodSinceCreationInDays) {
            this.immutabilityPeriodSinceCreationInDays = immutabilityPeriodSinceCreationInDays;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetBlobContainerImmutabilityPolicyResult build() {
            return new GetBlobContainerImmutabilityPolicyResult(allowProtectedAppendWrites, etag, id, immutabilityPeriodSinceCreationInDays, name, state, type);
        }
    }
}
