// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class X12EnvelopeSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final X12EnvelopeSettingsResponse Empty = new X12EnvelopeSettingsResponse();

    @InputImport(name="controlStandardsId", required=true)
    private final Integer controlStandardsId;

    public Integer getControlStandardsId() {
        return this.controlStandardsId;
    }

    @InputImport(name="controlVersionNumber", required=true)
    private final String controlVersionNumber;

    public String getControlVersionNumber() {
        return this.controlVersionNumber;
    }

    @InputImport(name="enableDefaultGroupHeaders", required=true)
    private final Boolean enableDefaultGroupHeaders;

    public Boolean getEnableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }

    @InputImport(name="functionalGroupId")
    private final @Nullable String functionalGroupId;

    public Optional<String> getFunctionalGroupId() {
        return this.functionalGroupId == null ? Optional.empty() : Optional.ofNullable(this.functionalGroupId);
    }

    @InputImport(name="groupControlNumberLowerBound", required=true)
    private final Integer groupControlNumberLowerBound;

    public Integer getGroupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }

    @InputImport(name="groupControlNumberUpperBound", required=true)
    private final Integer groupControlNumberUpperBound;

    public Integer getGroupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }

    @InputImport(name="groupHeaderAgencyCode", required=true)
    private final String groupHeaderAgencyCode;

    public String getGroupHeaderAgencyCode() {
        return this.groupHeaderAgencyCode;
    }

    @InputImport(name="groupHeaderDateFormat", required=true)
    private final String groupHeaderDateFormat;

    public String getGroupHeaderDateFormat() {
        return this.groupHeaderDateFormat;
    }

    @InputImport(name="groupHeaderTimeFormat", required=true)
    private final String groupHeaderTimeFormat;

    public String getGroupHeaderTimeFormat() {
        return this.groupHeaderTimeFormat;
    }

    @InputImport(name="groupHeaderVersion", required=true)
    private final String groupHeaderVersion;

    public String getGroupHeaderVersion() {
        return this.groupHeaderVersion;
    }

    @InputImport(name="interchangeControlNumberLowerBound", required=true)
    private final Integer interchangeControlNumberLowerBound;

    public Integer getInterchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }

    @InputImport(name="interchangeControlNumberUpperBound", required=true)
    private final Integer interchangeControlNumberUpperBound;

    public Integer getInterchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }

    @InputImport(name="overwriteExistingTransactionSetControlNumber", required=true)
    private final Boolean overwriteExistingTransactionSetControlNumber;

    public Boolean getOverwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }

    @InputImport(name="receiverApplicationId", required=true)
    private final String receiverApplicationId;

    public String getReceiverApplicationId() {
        return this.receiverApplicationId;
    }

    @InputImport(name="rolloverGroupControlNumber", required=true)
    private final Boolean rolloverGroupControlNumber;

    public Boolean getRolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }

    @InputImport(name="rolloverInterchangeControlNumber", required=true)
    private final Boolean rolloverInterchangeControlNumber;

    public Boolean getRolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }

    @InputImport(name="rolloverTransactionSetControlNumber", required=true)
    private final Boolean rolloverTransactionSetControlNumber;

    public Boolean getRolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }

    @InputImport(name="senderApplicationId", required=true)
    private final String senderApplicationId;

    public String getSenderApplicationId() {
        return this.senderApplicationId;
    }

    @InputImport(name="transactionSetControlNumberLowerBound", required=true)
    private final Integer transactionSetControlNumberLowerBound;

    public Integer getTransactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }

    @InputImport(name="transactionSetControlNumberPrefix")
    private final @Nullable String transactionSetControlNumberPrefix;

    public Optional<String> getTransactionSetControlNumberPrefix() {
        return this.transactionSetControlNumberPrefix == null ? Optional.empty() : Optional.ofNullable(this.transactionSetControlNumberPrefix);
    }

    @InputImport(name="transactionSetControlNumberSuffix")
    private final @Nullable String transactionSetControlNumberSuffix;

    public Optional<String> getTransactionSetControlNumberSuffix() {
        return this.transactionSetControlNumberSuffix == null ? Optional.empty() : Optional.ofNullable(this.transactionSetControlNumberSuffix);
    }

    @InputImport(name="transactionSetControlNumberUpperBound", required=true)
    private final Integer transactionSetControlNumberUpperBound;

    public Integer getTransactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }

    @InputImport(name="usageIndicator", required=true)
    private final String usageIndicator;

    public String getUsageIndicator() {
        return this.usageIndicator;
    }

    @InputImport(name="useControlStandardsIdAsRepetitionCharacter", required=true)
    private final Boolean useControlStandardsIdAsRepetitionCharacter;

    public Boolean getUseControlStandardsIdAsRepetitionCharacter() {
        return this.useControlStandardsIdAsRepetitionCharacter;
    }

    public X12EnvelopeSettingsResponse(
        Integer controlStandardsId,
        String controlVersionNumber,
        Boolean enableDefaultGroupHeaders,
        @Nullable String functionalGroupId,
        Integer groupControlNumberLowerBound,
        Integer groupControlNumberUpperBound,
        String groupHeaderAgencyCode,
        String groupHeaderDateFormat,
        String groupHeaderTimeFormat,
        String groupHeaderVersion,
        Integer interchangeControlNumberLowerBound,
        Integer interchangeControlNumberUpperBound,
        Boolean overwriteExistingTransactionSetControlNumber,
        String receiverApplicationId,
        Boolean rolloverGroupControlNumber,
        Boolean rolloverInterchangeControlNumber,
        Boolean rolloverTransactionSetControlNumber,
        String senderApplicationId,
        Integer transactionSetControlNumberLowerBound,
        @Nullable String transactionSetControlNumberPrefix,
        @Nullable String transactionSetControlNumberSuffix,
        Integer transactionSetControlNumberUpperBound,
        String usageIndicator,
        Boolean useControlStandardsIdAsRepetitionCharacter) {
        this.controlStandardsId = Objects.requireNonNull(controlStandardsId, "expected parameter 'controlStandardsId' to be non-null");
        this.controlVersionNumber = Objects.requireNonNull(controlVersionNumber, "expected parameter 'controlVersionNumber' to be non-null");
        this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders, "expected parameter 'enableDefaultGroupHeaders' to be non-null");
        this.functionalGroupId = functionalGroupId;
        this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound, "expected parameter 'groupControlNumberLowerBound' to be non-null");
        this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound, "expected parameter 'groupControlNumberUpperBound' to be non-null");
        this.groupHeaderAgencyCode = Objects.requireNonNull(groupHeaderAgencyCode, "expected parameter 'groupHeaderAgencyCode' to be non-null");
        this.groupHeaderDateFormat = Objects.requireNonNull(groupHeaderDateFormat, "expected parameter 'groupHeaderDateFormat' to be non-null");
        this.groupHeaderTimeFormat = Objects.requireNonNull(groupHeaderTimeFormat, "expected parameter 'groupHeaderTimeFormat' to be non-null");
        this.groupHeaderVersion = Objects.requireNonNull(groupHeaderVersion, "expected parameter 'groupHeaderVersion' to be non-null");
        this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound, "expected parameter 'interchangeControlNumberLowerBound' to be non-null");
        this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound, "expected parameter 'interchangeControlNumberUpperBound' to be non-null");
        this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber, "expected parameter 'overwriteExistingTransactionSetControlNumber' to be non-null");
        this.receiverApplicationId = Objects.requireNonNull(receiverApplicationId, "expected parameter 'receiverApplicationId' to be non-null");
        this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber, "expected parameter 'rolloverGroupControlNumber' to be non-null");
        this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber, "expected parameter 'rolloverInterchangeControlNumber' to be non-null");
        this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber, "expected parameter 'rolloverTransactionSetControlNumber' to be non-null");
        this.senderApplicationId = Objects.requireNonNull(senderApplicationId, "expected parameter 'senderApplicationId' to be non-null");
        this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound, "expected parameter 'transactionSetControlNumberLowerBound' to be non-null");
        this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
        this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
        this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound, "expected parameter 'transactionSetControlNumberUpperBound' to be non-null");
        this.usageIndicator = Objects.requireNonNull(usageIndicator, "expected parameter 'usageIndicator' to be non-null");
        this.useControlStandardsIdAsRepetitionCharacter = Objects.requireNonNull(useControlStandardsIdAsRepetitionCharacter, "expected parameter 'useControlStandardsIdAsRepetitionCharacter' to be non-null");
    }

    private X12EnvelopeSettingsResponse() {
        this.controlStandardsId = null;
        this.controlVersionNumber = null;
        this.enableDefaultGroupHeaders = null;
        this.functionalGroupId = null;
        this.groupControlNumberLowerBound = null;
        this.groupControlNumberUpperBound = null;
        this.groupHeaderAgencyCode = null;
        this.groupHeaderDateFormat = null;
        this.groupHeaderTimeFormat = null;
        this.groupHeaderVersion = null;
        this.interchangeControlNumberLowerBound = null;
        this.interchangeControlNumberUpperBound = null;
        this.overwriteExistingTransactionSetControlNumber = null;
        this.receiverApplicationId = null;
        this.rolloverGroupControlNumber = null;
        this.rolloverInterchangeControlNumber = null;
        this.rolloverTransactionSetControlNumber = null;
        this.senderApplicationId = null;
        this.transactionSetControlNumberLowerBound = null;
        this.transactionSetControlNumberPrefix = null;
        this.transactionSetControlNumberSuffix = null;
        this.transactionSetControlNumberUpperBound = null;
        this.usageIndicator = null;
        this.useControlStandardsIdAsRepetitionCharacter = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12EnvelopeSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer controlStandardsId;
        private String controlVersionNumber;
        private Boolean enableDefaultGroupHeaders;
        private @Nullable String functionalGroupId;
        private Integer groupControlNumberLowerBound;
        private Integer groupControlNumberUpperBound;
        private String groupHeaderAgencyCode;
        private String groupHeaderDateFormat;
        private String groupHeaderTimeFormat;
        private String groupHeaderVersion;
        private Integer interchangeControlNumberLowerBound;
        private Integer interchangeControlNumberUpperBound;
        private Boolean overwriteExistingTransactionSetControlNumber;
        private String receiverApplicationId;
        private Boolean rolloverGroupControlNumber;
        private Boolean rolloverInterchangeControlNumber;
        private Boolean rolloverTransactionSetControlNumber;
        private String senderApplicationId;
        private Integer transactionSetControlNumberLowerBound;
        private @Nullable String transactionSetControlNumberPrefix;
        private @Nullable String transactionSetControlNumberSuffix;
        private Integer transactionSetControlNumberUpperBound;
        private String usageIndicator;
        private Boolean useControlStandardsIdAsRepetitionCharacter;

        public Builder() {
    	      // Empty
        }

        public Builder(X12EnvelopeSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controlStandardsId = defaults.controlStandardsId;
    	      this.controlVersionNumber = defaults.controlVersionNumber;
    	      this.enableDefaultGroupHeaders = defaults.enableDefaultGroupHeaders;
    	      this.functionalGroupId = defaults.functionalGroupId;
    	      this.groupControlNumberLowerBound = defaults.groupControlNumberLowerBound;
    	      this.groupControlNumberUpperBound = defaults.groupControlNumberUpperBound;
    	      this.groupHeaderAgencyCode = defaults.groupHeaderAgencyCode;
    	      this.groupHeaderDateFormat = defaults.groupHeaderDateFormat;
    	      this.groupHeaderTimeFormat = defaults.groupHeaderTimeFormat;
    	      this.groupHeaderVersion = defaults.groupHeaderVersion;
    	      this.interchangeControlNumberLowerBound = defaults.interchangeControlNumberLowerBound;
    	      this.interchangeControlNumberUpperBound = defaults.interchangeControlNumberUpperBound;
    	      this.overwriteExistingTransactionSetControlNumber = defaults.overwriteExistingTransactionSetControlNumber;
    	      this.receiverApplicationId = defaults.receiverApplicationId;
    	      this.rolloverGroupControlNumber = defaults.rolloverGroupControlNumber;
    	      this.rolloverInterchangeControlNumber = defaults.rolloverInterchangeControlNumber;
    	      this.rolloverTransactionSetControlNumber = defaults.rolloverTransactionSetControlNumber;
    	      this.senderApplicationId = defaults.senderApplicationId;
    	      this.transactionSetControlNumberLowerBound = defaults.transactionSetControlNumberLowerBound;
    	      this.transactionSetControlNumberPrefix = defaults.transactionSetControlNumberPrefix;
    	      this.transactionSetControlNumberSuffix = defaults.transactionSetControlNumberSuffix;
    	      this.transactionSetControlNumberUpperBound = defaults.transactionSetControlNumberUpperBound;
    	      this.usageIndicator = defaults.usageIndicator;
    	      this.useControlStandardsIdAsRepetitionCharacter = defaults.useControlStandardsIdAsRepetitionCharacter;
        }

        public Builder setControlStandardsId(Integer controlStandardsId) {
            this.controlStandardsId = Objects.requireNonNull(controlStandardsId);
            return this;
        }

        public Builder setControlVersionNumber(String controlVersionNumber) {
            this.controlVersionNumber = Objects.requireNonNull(controlVersionNumber);
            return this;
        }

        public Builder setEnableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
            return this;
        }

        public Builder setFunctionalGroupId(@Nullable String functionalGroupId) {
            this.functionalGroupId = functionalGroupId;
            return this;
        }

        public Builder setGroupControlNumberLowerBound(Integer groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
            return this;
        }

        public Builder setGroupControlNumberUpperBound(Integer groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
            return this;
        }

        public Builder setGroupHeaderAgencyCode(String groupHeaderAgencyCode) {
            this.groupHeaderAgencyCode = Objects.requireNonNull(groupHeaderAgencyCode);
            return this;
        }

        public Builder setGroupHeaderDateFormat(String groupHeaderDateFormat) {
            this.groupHeaderDateFormat = Objects.requireNonNull(groupHeaderDateFormat);
            return this;
        }

        public Builder setGroupHeaderTimeFormat(String groupHeaderTimeFormat) {
            this.groupHeaderTimeFormat = Objects.requireNonNull(groupHeaderTimeFormat);
            return this;
        }

        public Builder setGroupHeaderVersion(String groupHeaderVersion) {
            this.groupHeaderVersion = Objects.requireNonNull(groupHeaderVersion);
            return this;
        }

        public Builder setInterchangeControlNumberLowerBound(Integer interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
            return this;
        }

        public Builder setInterchangeControlNumberUpperBound(Integer interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
            return this;
        }

        public Builder setOverwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
            return this;
        }

        public Builder setReceiverApplicationId(String receiverApplicationId) {
            this.receiverApplicationId = Objects.requireNonNull(receiverApplicationId);
            return this;
        }

        public Builder setRolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
            return this;
        }

        public Builder setRolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
            return this;
        }

        public Builder setRolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
            return this;
        }

        public Builder setSenderApplicationId(String senderApplicationId) {
            this.senderApplicationId = Objects.requireNonNull(senderApplicationId);
            return this;
        }

        public Builder setTransactionSetControlNumberLowerBound(Integer transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
            return this;
        }

        public Builder setTransactionSetControlNumberPrefix(@Nullable String transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            return this;
        }

        public Builder setTransactionSetControlNumberSuffix(@Nullable String transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            return this;
        }

        public Builder setTransactionSetControlNumberUpperBound(Integer transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
            return this;
        }

        public Builder setUsageIndicator(String usageIndicator) {
            this.usageIndicator = Objects.requireNonNull(usageIndicator);
            return this;
        }

        public Builder setUseControlStandardsIdAsRepetitionCharacter(Boolean useControlStandardsIdAsRepetitionCharacter) {
            this.useControlStandardsIdAsRepetitionCharacter = Objects.requireNonNull(useControlStandardsIdAsRepetitionCharacter);
            return this;
        }

        public X12EnvelopeSettingsResponse build() {
            return new X12EnvelopeSettingsResponse(controlStandardsId, controlVersionNumber, enableDefaultGroupHeaders, functionalGroupId, groupControlNumberLowerBound, groupControlNumberUpperBound, groupHeaderAgencyCode, groupHeaderDateFormat, groupHeaderTimeFormat, groupHeaderVersion, interchangeControlNumberLowerBound, interchangeControlNumberUpperBound, overwriteExistingTransactionSetControlNumber, receiverApplicationId, rolloverGroupControlNumber, rolloverInterchangeControlNumber, rolloverTransactionSetControlNumber, senderApplicationId, transactionSetControlNumberLowerBound, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberUpperBound, usageIndicator, useControlStandardsIdAsRepetitionCharacter);
        }
    }
}
