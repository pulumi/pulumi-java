// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The X12 agreement envelope settings.
 * 
 */
public final class X12EnvelopeSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final X12EnvelopeSettingsResponse Empty = new X12EnvelopeSettingsResponse();

    /**
     * The controls standards id.
     * 
     */
    @Import(name="controlStandardsId", required=true)
      private final Integer controlStandardsId;

    public Integer getControlStandardsId() {
        return this.controlStandardsId;
    }

    /**
     * The control version number.
     * 
     */
    @Import(name="controlVersionNumber", required=true)
      private final String controlVersionNumber;

    public String getControlVersionNumber() {
        return this.controlVersionNumber;
    }

    /**
     * The value indicating whether to enable default group headers.
     * 
     */
    @Import(name="enableDefaultGroupHeaders", required=true)
      private final Boolean enableDefaultGroupHeaders;

    public Boolean getEnableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }

    /**
     * The functional group id.
     * 
     */
    @Import(name="functionalGroupId")
      private final @Nullable String functionalGroupId;

    public Optional<String> getFunctionalGroupId() {
        return this.functionalGroupId == null ? Optional.empty() : Optional.ofNullable(this.functionalGroupId);
    }

    /**
     * The group control number lower bound.
     * 
     */
    @Import(name="groupControlNumberLowerBound", required=true)
      private final Integer groupControlNumberLowerBound;

    public Integer getGroupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }

    /**
     * The group control number upper bound.
     * 
     */
    @Import(name="groupControlNumberUpperBound", required=true)
      private final Integer groupControlNumberUpperBound;

    public Integer getGroupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }

    /**
     * The group header agency code.
     * 
     */
    @Import(name="groupHeaderAgencyCode", required=true)
      private final String groupHeaderAgencyCode;

    public String getGroupHeaderAgencyCode() {
        return this.groupHeaderAgencyCode;
    }

    /**
     * The group header date format.
     * 
     */
    @Import(name="groupHeaderDateFormat", required=true)
      private final String groupHeaderDateFormat;

    public String getGroupHeaderDateFormat() {
        return this.groupHeaderDateFormat;
    }

    /**
     * The group header time format.
     * 
     */
    @Import(name="groupHeaderTimeFormat", required=true)
      private final String groupHeaderTimeFormat;

    public String getGroupHeaderTimeFormat() {
        return this.groupHeaderTimeFormat;
    }

    /**
     * The group header version.
     * 
     */
    @Import(name="groupHeaderVersion", required=true)
      private final String groupHeaderVersion;

    public String getGroupHeaderVersion() {
        return this.groupHeaderVersion;
    }

    /**
     * The interchange  control number lower bound.
     * 
     */
    @Import(name="interchangeControlNumberLowerBound", required=true)
      private final Integer interchangeControlNumberLowerBound;

    public Integer getInterchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }

    /**
     * The interchange  control number upper bound.
     * 
     */
    @Import(name="interchangeControlNumberUpperBound", required=true)
      private final Integer interchangeControlNumberUpperBound;

    public Integer getInterchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }

    /**
     * The value indicating whether to overwrite existing transaction set control number.
     * 
     */
    @Import(name="overwriteExistingTransactionSetControlNumber", required=true)
      private final Boolean overwriteExistingTransactionSetControlNumber;

    public Boolean getOverwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }

    /**
     * The receiver application id.
     * 
     */
    @Import(name="receiverApplicationId", required=true)
      private final String receiverApplicationId;

    public String getReceiverApplicationId() {
        return this.receiverApplicationId;
    }

    /**
     * The value indicating whether to rollover group control number.
     * 
     */
    @Import(name="rolloverGroupControlNumber", required=true)
      private final Boolean rolloverGroupControlNumber;

    public Boolean getRolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }

    /**
     * The value indicating whether to rollover interchange control number.
     * 
     */
    @Import(name="rolloverInterchangeControlNumber", required=true)
      private final Boolean rolloverInterchangeControlNumber;

    public Boolean getRolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }

    /**
     * The value indicating whether to rollover transaction set control number.
     * 
     */
    @Import(name="rolloverTransactionSetControlNumber", required=true)
      private final Boolean rolloverTransactionSetControlNumber;

    public Boolean getRolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }

    /**
     * The sender application id.
     * 
     */
    @Import(name="senderApplicationId", required=true)
      private final String senderApplicationId;

    public String getSenderApplicationId() {
        return this.senderApplicationId;
    }

    /**
     * The transaction set control number lower bound.
     * 
     */
    @Import(name="transactionSetControlNumberLowerBound", required=true)
      private final Integer transactionSetControlNumberLowerBound;

    public Integer getTransactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }

    /**
     * The transaction set control number prefix.
     * 
     */
    @Import(name="transactionSetControlNumberPrefix")
      private final @Nullable String transactionSetControlNumberPrefix;

    public Optional<String> getTransactionSetControlNumberPrefix() {
        return this.transactionSetControlNumberPrefix == null ? Optional.empty() : Optional.ofNullable(this.transactionSetControlNumberPrefix);
    }

    /**
     * The transaction set control number suffix.
     * 
     */
    @Import(name="transactionSetControlNumberSuffix")
      private final @Nullable String transactionSetControlNumberSuffix;

    public Optional<String> getTransactionSetControlNumberSuffix() {
        return this.transactionSetControlNumberSuffix == null ? Optional.empty() : Optional.ofNullable(this.transactionSetControlNumberSuffix);
    }

    /**
     * The transaction set control number upper bound.
     * 
     */
    @Import(name="transactionSetControlNumberUpperBound", required=true)
      private final Integer transactionSetControlNumberUpperBound;

    public Integer getTransactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }

    /**
     * The usage indicator.
     * 
     */
    @Import(name="usageIndicator", required=true)
      private final String usageIndicator;

    public String getUsageIndicator() {
        return this.usageIndicator;
    }

    /**
     * The value indicating whether to use control standards id as repetition character.
     * 
     */
    @Import(name="useControlStandardsIdAsRepetitionCharacter", required=true)
      private final Boolean useControlStandardsIdAsRepetitionCharacter;

    public Boolean getUseControlStandardsIdAsRepetitionCharacter() {
        return this.useControlStandardsIdAsRepetitionCharacter;
    }

    public X12EnvelopeSettingsResponse(
        Integer controlStandardsId,
        String controlVersionNumber,
        Boolean enableDefaultGroupHeaders,
        @Nullable String functionalGroupId,
        Integer groupControlNumberLowerBound,
        Integer groupControlNumberUpperBound,
        String groupHeaderAgencyCode,
        String groupHeaderDateFormat,
        String groupHeaderTimeFormat,
        String groupHeaderVersion,
        Integer interchangeControlNumberLowerBound,
        Integer interchangeControlNumberUpperBound,
        Boolean overwriteExistingTransactionSetControlNumber,
        String receiverApplicationId,
        Boolean rolloverGroupControlNumber,
        Boolean rolloverInterchangeControlNumber,
        Boolean rolloverTransactionSetControlNumber,
        String senderApplicationId,
        Integer transactionSetControlNumberLowerBound,
        @Nullable String transactionSetControlNumberPrefix,
        @Nullable String transactionSetControlNumberSuffix,
        Integer transactionSetControlNumberUpperBound,
        String usageIndicator,
        Boolean useControlStandardsIdAsRepetitionCharacter) {
        this.controlStandardsId = Objects.requireNonNull(controlStandardsId, "expected parameter 'controlStandardsId' to be non-null");
        this.controlVersionNumber = Objects.requireNonNull(controlVersionNumber, "expected parameter 'controlVersionNumber' to be non-null");
        this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders, "expected parameter 'enableDefaultGroupHeaders' to be non-null");
        this.functionalGroupId = functionalGroupId;
        this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound, "expected parameter 'groupControlNumberLowerBound' to be non-null");
        this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound, "expected parameter 'groupControlNumberUpperBound' to be non-null");
        this.groupHeaderAgencyCode = Objects.requireNonNull(groupHeaderAgencyCode, "expected parameter 'groupHeaderAgencyCode' to be non-null");
        this.groupHeaderDateFormat = Objects.requireNonNull(groupHeaderDateFormat, "expected parameter 'groupHeaderDateFormat' to be non-null");
        this.groupHeaderTimeFormat = Objects.requireNonNull(groupHeaderTimeFormat, "expected parameter 'groupHeaderTimeFormat' to be non-null");
        this.groupHeaderVersion = Objects.requireNonNull(groupHeaderVersion, "expected parameter 'groupHeaderVersion' to be non-null");
        this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound, "expected parameter 'interchangeControlNumberLowerBound' to be non-null");
        this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound, "expected parameter 'interchangeControlNumberUpperBound' to be non-null");
        this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber, "expected parameter 'overwriteExistingTransactionSetControlNumber' to be non-null");
        this.receiverApplicationId = Objects.requireNonNull(receiverApplicationId, "expected parameter 'receiverApplicationId' to be non-null");
        this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber, "expected parameter 'rolloverGroupControlNumber' to be non-null");
        this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber, "expected parameter 'rolloverInterchangeControlNumber' to be non-null");
        this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber, "expected parameter 'rolloverTransactionSetControlNumber' to be non-null");
        this.senderApplicationId = Objects.requireNonNull(senderApplicationId, "expected parameter 'senderApplicationId' to be non-null");
        this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound, "expected parameter 'transactionSetControlNumberLowerBound' to be non-null");
        this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
        this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
        this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound, "expected parameter 'transactionSetControlNumberUpperBound' to be non-null");
        this.usageIndicator = Objects.requireNonNull(usageIndicator, "expected parameter 'usageIndicator' to be non-null");
        this.useControlStandardsIdAsRepetitionCharacter = Objects.requireNonNull(useControlStandardsIdAsRepetitionCharacter, "expected parameter 'useControlStandardsIdAsRepetitionCharacter' to be non-null");
    }

    private X12EnvelopeSettingsResponse() {
        this.controlStandardsId = null;
        this.controlVersionNumber = null;
        this.enableDefaultGroupHeaders = null;
        this.functionalGroupId = null;
        this.groupControlNumberLowerBound = null;
        this.groupControlNumberUpperBound = null;
        this.groupHeaderAgencyCode = null;
        this.groupHeaderDateFormat = null;
        this.groupHeaderTimeFormat = null;
        this.groupHeaderVersion = null;
        this.interchangeControlNumberLowerBound = null;
        this.interchangeControlNumberUpperBound = null;
        this.overwriteExistingTransactionSetControlNumber = null;
        this.receiverApplicationId = null;
        this.rolloverGroupControlNumber = null;
        this.rolloverInterchangeControlNumber = null;
        this.rolloverTransactionSetControlNumber = null;
        this.senderApplicationId = null;
        this.transactionSetControlNumberLowerBound = null;
        this.transactionSetControlNumberPrefix = null;
        this.transactionSetControlNumberSuffix = null;
        this.transactionSetControlNumberUpperBound = null;
        this.usageIndicator = null;
        this.useControlStandardsIdAsRepetitionCharacter = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12EnvelopeSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer controlStandardsId;
        private String controlVersionNumber;
        private Boolean enableDefaultGroupHeaders;
        private @Nullable String functionalGroupId;
        private Integer groupControlNumberLowerBound;
        private Integer groupControlNumberUpperBound;
        private String groupHeaderAgencyCode;
        private String groupHeaderDateFormat;
        private String groupHeaderTimeFormat;
        private String groupHeaderVersion;
        private Integer interchangeControlNumberLowerBound;
        private Integer interchangeControlNumberUpperBound;
        private Boolean overwriteExistingTransactionSetControlNumber;
        private String receiverApplicationId;
        private Boolean rolloverGroupControlNumber;
        private Boolean rolloverInterchangeControlNumber;
        private Boolean rolloverTransactionSetControlNumber;
        private String senderApplicationId;
        private Integer transactionSetControlNumberLowerBound;
        private @Nullable String transactionSetControlNumberPrefix;
        private @Nullable String transactionSetControlNumberSuffix;
        private Integer transactionSetControlNumberUpperBound;
        private String usageIndicator;
        private Boolean useControlStandardsIdAsRepetitionCharacter;

        public Builder() {
    	      // Empty
        }

        public Builder(X12EnvelopeSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controlStandardsId = defaults.controlStandardsId;
    	      this.controlVersionNumber = defaults.controlVersionNumber;
    	      this.enableDefaultGroupHeaders = defaults.enableDefaultGroupHeaders;
    	      this.functionalGroupId = defaults.functionalGroupId;
    	      this.groupControlNumberLowerBound = defaults.groupControlNumberLowerBound;
    	      this.groupControlNumberUpperBound = defaults.groupControlNumberUpperBound;
    	      this.groupHeaderAgencyCode = defaults.groupHeaderAgencyCode;
    	      this.groupHeaderDateFormat = defaults.groupHeaderDateFormat;
    	      this.groupHeaderTimeFormat = defaults.groupHeaderTimeFormat;
    	      this.groupHeaderVersion = defaults.groupHeaderVersion;
    	      this.interchangeControlNumberLowerBound = defaults.interchangeControlNumberLowerBound;
    	      this.interchangeControlNumberUpperBound = defaults.interchangeControlNumberUpperBound;
    	      this.overwriteExistingTransactionSetControlNumber = defaults.overwriteExistingTransactionSetControlNumber;
    	      this.receiverApplicationId = defaults.receiverApplicationId;
    	      this.rolloverGroupControlNumber = defaults.rolloverGroupControlNumber;
    	      this.rolloverInterchangeControlNumber = defaults.rolloverInterchangeControlNumber;
    	      this.rolloverTransactionSetControlNumber = defaults.rolloverTransactionSetControlNumber;
    	      this.senderApplicationId = defaults.senderApplicationId;
    	      this.transactionSetControlNumberLowerBound = defaults.transactionSetControlNumberLowerBound;
    	      this.transactionSetControlNumberPrefix = defaults.transactionSetControlNumberPrefix;
    	      this.transactionSetControlNumberSuffix = defaults.transactionSetControlNumberSuffix;
    	      this.transactionSetControlNumberUpperBound = defaults.transactionSetControlNumberUpperBound;
    	      this.usageIndicator = defaults.usageIndicator;
    	      this.useControlStandardsIdAsRepetitionCharacter = defaults.useControlStandardsIdAsRepetitionCharacter;
        }

        public Builder controlStandardsId(Integer controlStandardsId) {
            this.controlStandardsId = Objects.requireNonNull(controlStandardsId);
            return this;
        }
        public Builder controlVersionNumber(String controlVersionNumber) {
            this.controlVersionNumber = Objects.requireNonNull(controlVersionNumber);
            return this;
        }
        public Builder enableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
            return this;
        }
        public Builder functionalGroupId(@Nullable String functionalGroupId) {
            this.functionalGroupId = functionalGroupId;
            return this;
        }
        public Builder groupControlNumberLowerBound(Integer groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
            return this;
        }
        public Builder groupControlNumberUpperBound(Integer groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
            return this;
        }
        public Builder groupHeaderAgencyCode(String groupHeaderAgencyCode) {
            this.groupHeaderAgencyCode = Objects.requireNonNull(groupHeaderAgencyCode);
            return this;
        }
        public Builder groupHeaderDateFormat(String groupHeaderDateFormat) {
            this.groupHeaderDateFormat = Objects.requireNonNull(groupHeaderDateFormat);
            return this;
        }
        public Builder groupHeaderTimeFormat(String groupHeaderTimeFormat) {
            this.groupHeaderTimeFormat = Objects.requireNonNull(groupHeaderTimeFormat);
            return this;
        }
        public Builder groupHeaderVersion(String groupHeaderVersion) {
            this.groupHeaderVersion = Objects.requireNonNull(groupHeaderVersion);
            return this;
        }
        public Builder interchangeControlNumberLowerBound(Integer interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
            return this;
        }
        public Builder interchangeControlNumberUpperBound(Integer interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
            return this;
        }
        public Builder overwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
            return this;
        }
        public Builder receiverApplicationId(String receiverApplicationId) {
            this.receiverApplicationId = Objects.requireNonNull(receiverApplicationId);
            return this;
        }
        public Builder rolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
            return this;
        }
        public Builder rolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
            return this;
        }
        public Builder rolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
            return this;
        }
        public Builder senderApplicationId(String senderApplicationId) {
            this.senderApplicationId = Objects.requireNonNull(senderApplicationId);
            return this;
        }
        public Builder transactionSetControlNumberLowerBound(Integer transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
            return this;
        }
        public Builder transactionSetControlNumberPrefix(@Nullable String transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            return this;
        }
        public Builder transactionSetControlNumberSuffix(@Nullable String transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            return this;
        }
        public Builder transactionSetControlNumberUpperBound(Integer transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
            return this;
        }
        public Builder usageIndicator(String usageIndicator) {
            this.usageIndicator = Objects.requireNonNull(usageIndicator);
            return this;
        }
        public Builder useControlStandardsIdAsRepetitionCharacter(Boolean useControlStandardsIdAsRepetitionCharacter) {
            this.useControlStandardsIdAsRepetitionCharacter = Objects.requireNonNull(useControlStandardsIdAsRepetitionCharacter);
            return this;
        }        public X12EnvelopeSettingsResponse build() {
            return new X12EnvelopeSettingsResponse(controlStandardsId, controlVersionNumber, enableDefaultGroupHeaders, functionalGroupId, groupControlNumberLowerBound, groupControlNumberUpperBound, groupHeaderAgencyCode, groupHeaderDateFormat, groupHeaderTimeFormat, groupHeaderVersion, interchangeControlNumberLowerBound, interchangeControlNumberUpperBound, overwriteExistingTransactionSetControlNumber, receiverApplicationId, rolloverGroupControlNumber, rolloverInterchangeControlNumber, rolloverTransactionSetControlNumber, senderApplicationId, transactionSetControlNumberLowerBound, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberUpperBound, usageIndicator, useControlStandardsIdAsRepetitionCharacter);
        }
    }
}
