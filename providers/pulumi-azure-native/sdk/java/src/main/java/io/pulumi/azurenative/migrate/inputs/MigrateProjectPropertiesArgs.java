// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.migrate.inputs;

import io.pulumi.azurenative.migrate.enums.ProvisioningState;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Class for migrate project properties.
 * 
 */
public final class MigrateProjectPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final MigrateProjectPropertiesArgs Empty = new MigrateProjectPropertiesArgs();

    /**
     * Provisioning state of the migrate project.
     * 
     */
    @InputImport(name="provisioningState")
      private final @Nullable Output<Either<String,ProvisioningState>> provisioningState;

    public Output<Either<String,ProvisioningState>> getProvisioningState() {
        return this.provisioningState == null ? Output.empty() : this.provisioningState;
    }

    /**
     * Gets or sets the list of tools registered with the migrate project.
     * 
     */
    @InputImport(name="registeredTools")
      private final @Nullable Output<List<String>> registeredTools;

    public Output<List<String>> getRegisteredTools() {
        return this.registeredTools == null ? Output.empty() : this.registeredTools;
    }

    public MigrateProjectPropertiesArgs(
        @Nullable Output<Either<String,ProvisioningState>> provisioningState,
        @Nullable Output<List<String>> registeredTools) {
        this.provisioningState = provisioningState;
        this.registeredTools = registeredTools;
    }

    private MigrateProjectPropertiesArgs() {
        this.provisioningState = Output.empty();
        this.registeredTools = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateProjectPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,ProvisioningState>> provisioningState;
        private @Nullable Output<List<String>> registeredTools;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrateProjectPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.provisioningState = defaults.provisioningState;
    	      this.registeredTools = defaults.registeredTools;
        }

        public Builder provisioningState(@Nullable Output<Either<String,ProvisioningState>> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }

        public Builder provisioningState(@Nullable Either<String,ProvisioningState> provisioningState) {
            this.provisioningState = Output.ofNullable(provisioningState);
            return this;
        }

        public Builder registeredTools(@Nullable Output<List<String>> registeredTools) {
            this.registeredTools = registeredTools;
            return this;
        }

        public Builder registeredTools(@Nullable List<String> registeredTools) {
            this.registeredTools = Output.ofNullable(registeredTools);
            return this;
        }
        public MigrateProjectPropertiesArgs build() {
            return new MigrateProjectPropertiesArgs(provisioningState, registeredTools);
        }
    }
}
