// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.synapse.inputs;

import io.pulumi.azurenative.synapse.inputs.IntegrationRuntimeDataFlowPropertiesArgs;
import io.pulumi.azurenative.synapse.inputs.IntegrationRuntimeVNetPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The compute resource properties for managed integration runtime.
 * 
 */
public final class IntegrationRuntimeComputePropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final IntegrationRuntimeComputePropertiesArgs Empty = new IntegrationRuntimeComputePropertiesArgs();

    /**
     * Data flow properties for managed integration runtime.
     * 
     */
    @InputImport(name="dataFlowProperties")
      private final @Nullable Output<IntegrationRuntimeDataFlowPropertiesArgs> dataFlowProperties;

    public Output<IntegrationRuntimeDataFlowPropertiesArgs> getDataFlowProperties() {
        return this.dataFlowProperties == null ? Output.empty() : this.dataFlowProperties;
    }

    /**
     * The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Maximum parallel executions count per node for managed integration runtime.
     * 
     */
    @InputImport(name="maxParallelExecutionsPerNode")
      private final @Nullable Output<Integer> maxParallelExecutionsPerNode;

    public Output<Integer> getMaxParallelExecutionsPerNode() {
        return this.maxParallelExecutionsPerNode == null ? Output.empty() : this.maxParallelExecutionsPerNode;
    }

    /**
     * The node size requirement to managed integration runtime.
     * 
     */
    @InputImport(name="nodeSize")
      private final @Nullable Output<String> nodeSize;

    public Output<String> getNodeSize() {
        return this.nodeSize == null ? Output.empty() : this.nodeSize;
    }

    /**
     * The required number of nodes for managed integration runtime.
     * 
     */
    @InputImport(name="numberOfNodes")
      private final @Nullable Output<Integer> numberOfNodes;

    public Output<Integer> getNumberOfNodes() {
        return this.numberOfNodes == null ? Output.empty() : this.numberOfNodes;
    }

    /**
     * VNet properties for managed integration runtime.
     * 
     */
    @InputImport(name="vNetProperties")
      private final @Nullable Output<IntegrationRuntimeVNetPropertiesArgs> vNetProperties;

    public Output<IntegrationRuntimeVNetPropertiesArgs> getVNetProperties() {
        return this.vNetProperties == null ? Output.empty() : this.vNetProperties;
    }

    public IntegrationRuntimeComputePropertiesArgs(
        @Nullable Output<IntegrationRuntimeDataFlowPropertiesArgs> dataFlowProperties,
        @Nullable Output<String> location,
        @Nullable Output<Integer> maxParallelExecutionsPerNode,
        @Nullable Output<String> nodeSize,
        @Nullable Output<Integer> numberOfNodes,
        @Nullable Output<IntegrationRuntimeVNetPropertiesArgs> vNetProperties) {
        this.dataFlowProperties = dataFlowProperties;
        this.location = location;
        this.maxParallelExecutionsPerNode = maxParallelExecutionsPerNode;
        this.nodeSize = nodeSize;
        this.numberOfNodes = numberOfNodes;
        this.vNetProperties = vNetProperties;
    }

    private IntegrationRuntimeComputePropertiesArgs() {
        this.dataFlowProperties = Output.empty();
        this.location = Output.empty();
        this.maxParallelExecutionsPerNode = Output.empty();
        this.nodeSize = Output.empty();
        this.numberOfNodes = Output.empty();
        this.vNetProperties = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IntegrationRuntimeComputePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<IntegrationRuntimeDataFlowPropertiesArgs> dataFlowProperties;
        private @Nullable Output<String> location;
        private @Nullable Output<Integer> maxParallelExecutionsPerNode;
        private @Nullable Output<String> nodeSize;
        private @Nullable Output<Integer> numberOfNodes;
        private @Nullable Output<IntegrationRuntimeVNetPropertiesArgs> vNetProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(IntegrationRuntimeComputePropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataFlowProperties = defaults.dataFlowProperties;
    	      this.location = defaults.location;
    	      this.maxParallelExecutionsPerNode = defaults.maxParallelExecutionsPerNode;
    	      this.nodeSize = defaults.nodeSize;
    	      this.numberOfNodes = defaults.numberOfNodes;
    	      this.vNetProperties = defaults.vNetProperties;
        }

        public Builder dataFlowProperties(@Nullable Output<IntegrationRuntimeDataFlowPropertiesArgs> dataFlowProperties) {
            this.dataFlowProperties = dataFlowProperties;
            return this;
        }

        public Builder dataFlowProperties(@Nullable IntegrationRuntimeDataFlowPropertiesArgs dataFlowProperties) {
            this.dataFlowProperties = Output.ofNullable(dataFlowProperties);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder maxParallelExecutionsPerNode(@Nullable Output<Integer> maxParallelExecutionsPerNode) {
            this.maxParallelExecutionsPerNode = maxParallelExecutionsPerNode;
            return this;
        }

        public Builder maxParallelExecutionsPerNode(@Nullable Integer maxParallelExecutionsPerNode) {
            this.maxParallelExecutionsPerNode = Output.ofNullable(maxParallelExecutionsPerNode);
            return this;
        }

        public Builder nodeSize(@Nullable Output<String> nodeSize) {
            this.nodeSize = nodeSize;
            return this;
        }

        public Builder nodeSize(@Nullable String nodeSize) {
            this.nodeSize = Output.ofNullable(nodeSize);
            return this;
        }

        public Builder numberOfNodes(@Nullable Output<Integer> numberOfNodes) {
            this.numberOfNodes = numberOfNodes;
            return this;
        }

        public Builder numberOfNodes(@Nullable Integer numberOfNodes) {
            this.numberOfNodes = Output.ofNullable(numberOfNodes);
            return this;
        }

        public Builder vNetProperties(@Nullable Output<IntegrationRuntimeVNetPropertiesArgs> vNetProperties) {
            this.vNetProperties = vNetProperties;
            return this;
        }

        public Builder vNetProperties(@Nullable IntegrationRuntimeVNetPropertiesArgs vNetProperties) {
            this.vNetProperties = Output.ofNullable(vNetProperties);
            return this;
        }
        public IntegrationRuntimeComputePropertiesArgs build() {
            return new IntegrationRuntimeComputePropertiesArgs(dataFlowProperties, location, maxParallelExecutionsPerNode, nodeSize, numberOfNodes, vNetProperties);
        }
    }
}
