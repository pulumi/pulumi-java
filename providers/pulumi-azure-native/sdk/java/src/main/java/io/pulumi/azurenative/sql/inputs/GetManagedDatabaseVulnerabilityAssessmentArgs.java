// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetManagedDatabaseVulnerabilityAssessmentArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetManagedDatabaseVulnerabilityAssessmentArgs Empty = new GetManagedDatabaseVulnerabilityAssessmentArgs();

    /**
     * The name of the database for which the vulnerability assessment is defined.
     * 
     */
    @Import(name="databaseName", required=true)
      private final String databaseName;

    public String getDatabaseName() {
        return this.databaseName;
    }

    /**
     * The name of the managed instance.
     * 
     */
    @Import(name="managedInstanceName", required=true)
      private final String managedInstanceName;

    public String getManagedInstanceName() {
        return this.managedInstanceName;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final String resourceGroupName;

    public String getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the vulnerability assessment.
     * 
     */
    @Import(name="vulnerabilityAssessmentName", required=true)
      private final String vulnerabilityAssessmentName;

    public String getVulnerabilityAssessmentName() {
        return this.vulnerabilityAssessmentName;
    }

    public GetManagedDatabaseVulnerabilityAssessmentArgs(
        String databaseName,
        String managedInstanceName,
        String resourceGroupName,
        String vulnerabilityAssessmentName) {
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.managedInstanceName = Objects.requireNonNull(managedInstanceName, "expected parameter 'managedInstanceName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.vulnerabilityAssessmentName = Objects.requireNonNull(vulnerabilityAssessmentName, "expected parameter 'vulnerabilityAssessmentName' to be non-null");
    }

    private GetManagedDatabaseVulnerabilityAssessmentArgs() {
        this.databaseName = null;
        this.managedInstanceName = null;
        this.resourceGroupName = null;
        this.vulnerabilityAssessmentName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseVulnerabilityAssessmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String databaseName;
        private String managedInstanceName;
        private String resourceGroupName;
        private String vulnerabilityAssessmentName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedDatabaseVulnerabilityAssessmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.managedInstanceName = defaults.managedInstanceName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.vulnerabilityAssessmentName = defaults.vulnerabilityAssessmentName;
        }

        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder managedInstanceName(String managedInstanceName) {
            this.managedInstanceName = Objects.requireNonNull(managedInstanceName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder vulnerabilityAssessmentName(String vulnerabilityAssessmentName) {
            this.vulnerabilityAssessmentName = Objects.requireNonNull(vulnerabilityAssessmentName);
            return this;
        }
        public GetManagedDatabaseVulnerabilityAssessmentArgs build() {
            return new GetManagedDatabaseVulnerabilityAssessmentArgs(databaseName, managedInstanceName, resourceGroupName, vulnerabilityAssessmentName);
        }
    }
}
