// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement.inputs;

import io.pulumi.azurenative.costmanagement.enums.ExportType;
import io.pulumi.azurenative.costmanagement.enums.TimeframeType;
import io.pulumi.azurenative.costmanagement.inputs.ExportDatasetArgs;
import io.pulumi.azurenative.costmanagement.inputs.ExportTimePeriodArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The definition of an export.
 * 
 */
public final class ExportDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExportDefinitionArgs Empty = new ExportDefinitionArgs();

    /**
     * The definition for data in the export.
     * 
     */
    @Import(name="dataSet")
      private final @Nullable Output<ExportDatasetArgs> dataSet;

    public Output<ExportDatasetArgs> dataSet() {
        return this.dataSet == null ? Codegen.empty() : this.dataSet;
    }

    /**
     * Has time period for pulling data for the export.
     * 
     */
    @Import(name="timePeriod")
      private final @Nullable Output<ExportTimePeriodArgs> timePeriod;

    public Output<ExportTimePeriodArgs> timePeriod() {
        return this.timePeriod == null ? Codegen.empty() : this.timePeriod;
    }

    /**
     * The time frame for pulling data for the export. If custom, then a specific time period must be provided.
     * 
     */
    @Import(name="timeframe", required=true)
      private final Output<Either<String,TimeframeType>> timeframe;

    public Output<Either<String,TimeframeType>> timeframe() {
        return this.timeframe;
    }

    /**
     * The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
     * 
     */
    @Import(name="type", required=true)
      private final Output<Either<String,ExportType>> type;

    public Output<Either<String,ExportType>> type() {
        return this.type;
    }

    public ExportDefinitionArgs(
        @Nullable Output<ExportDatasetArgs> dataSet,
        @Nullable Output<ExportTimePeriodArgs> timePeriod,
        Output<Either<String,TimeframeType>> timeframe,
        Output<Either<String,ExportType>> type) {
        this.dataSet = dataSet;
        this.timePeriod = timePeriod;
        this.timeframe = Objects.requireNonNull(timeframe, "expected parameter 'timeframe' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ExportDefinitionArgs() {
        this.dataSet = Codegen.empty();
        this.timePeriod = Codegen.empty();
        this.timeframe = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExportDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ExportDatasetArgs> dataSet;
        private @Nullable Output<ExportTimePeriodArgs> timePeriod;
        private Output<Either<String,TimeframeType>> timeframe;
        private Output<Either<String,ExportType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ExportDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSet = defaults.dataSet;
    	      this.timePeriod = defaults.timePeriod;
    	      this.timeframe = defaults.timeframe;
    	      this.type = defaults.type;
        }

        public Builder dataSet(@Nullable Output<ExportDatasetArgs> dataSet) {
            this.dataSet = dataSet;
            return this;
        }
        public Builder dataSet(@Nullable ExportDatasetArgs dataSet) {
            this.dataSet = Codegen.ofNullable(dataSet);
            return this;
        }
        public Builder timePeriod(@Nullable Output<ExportTimePeriodArgs> timePeriod) {
            this.timePeriod = timePeriod;
            return this;
        }
        public Builder timePeriod(@Nullable ExportTimePeriodArgs timePeriod) {
            this.timePeriod = Codegen.ofNullable(timePeriod);
            return this;
        }
        public Builder timeframe(Output<Either<String,TimeframeType>> timeframe) {
            this.timeframe = Objects.requireNonNull(timeframe);
            return this;
        }
        public Builder timeframe(Either<String,TimeframeType> timeframe) {
            this.timeframe = Output.of(Objects.requireNonNull(timeframe));
            return this;
        }
        public Builder type(Output<Either<String,ExportType>> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(Either<String,ExportType> type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ExportDefinitionArgs build() {
            return new ExportDefinitionArgs(dataSet, timePeriod, timeframe, type);
        }
    }
}
