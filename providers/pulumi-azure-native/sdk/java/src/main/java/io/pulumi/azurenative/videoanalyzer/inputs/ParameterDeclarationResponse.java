// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.videoanalyzer.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Single topology parameter declaration. Declared parameters can and must be referenced throughout the topology and can optionally have default values to be used when they are not defined in the pipelines.
 * 
 */
public final class ParameterDeclarationResponse extends io.pulumi.resources.InvokeArgs {

    public static final ParameterDeclarationResponse Empty = new ParameterDeclarationResponse();

    /**
     * The default value for the parameter to be used if the pipeline does not specify a value.
     * 
     */
    @Import(name="default")
      private final @Nullable String $default;

    public Optional<String> get$default() {
        return this.$default == null ? Optional.empty() : Optional.ofNullable(this.$default);
    }

    /**
     * Description of the parameter.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> getDescription() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * Name of the parameter.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * Type of the parameter.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    public ParameterDeclarationResponse(
        @Nullable String $default,
        @Nullable String description,
        String name,
        String type) {
        this.$default = $default;
        this.description = description;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ParameterDeclarationResponse() {
        this.$default = null;
        this.description = null;
        this.name = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ParameterDeclarationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String $default;
        private @Nullable String description;
        private String name;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(ParameterDeclarationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.$default = defaults.$default;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
        }

        public Builder $default(@Nullable String $default) {
            this.$default = $default;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ParameterDeclarationResponse build() {
            return new ParameterDeclarationResponse($default, description, name, type);
        }
    }
}
