// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datafactory.inputs;

import io.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import io.pulumi.azurenative.datafactory.inputs.AppendVariableActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.AzureDataExplorerCommandActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.AzureFunctionActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.AzureMLBatchExecutionActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.AzureMLExecutePipelineActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.AzureMLUpdateResourceActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.ControlActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.CopyActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.CustomActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.DataLakeAnalyticsUSQLActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.DatabricksNotebookActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.DatabricksSparkJarActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.DatabricksSparkPythonActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.DeleteActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.ExecutePipelineActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.ExecuteSSISPackageActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.ExecuteWranglingDataflowActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.ExecutionActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.ExpressionResponse;
import io.pulumi.azurenative.datafactory.inputs.FailActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.FilterActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.ForEachActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.GetMetadataActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.HDInsightHiveActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.HDInsightMapReduceActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.HDInsightPigActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.HDInsightSparkActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.HDInsightStreamingActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.LookupActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.SetVariableActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.SqlServerStoredProcedureActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.SwitchActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.UntilActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import io.pulumi.azurenative.datafactory.inputs.ValidationActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.WaitActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.WebActivityResponse;
import io.pulumi.azurenative.datafactory.inputs.WebHookActivityResponse;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
 * 
 */
public final class IfConditionActivityResponse extends io.pulumi.resources.InvokeArgs {

    public static final IfConditionActivityResponse Empty = new IfConditionActivityResponse();

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable List<ActivityDependencyResponse> dependsOn;

    public List<ActivityDependencyResponse> dependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> description() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
     * 
     */
    @Import(name="expression", required=true)
      private final ExpressionResponse expression;

    public ExpressionResponse expression() {
        return this.expression;
    }

    /**
     * List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
     * 
     */
    @Import(name="ifFalseActivities")
      private final @Nullable List<Object> ifFalseActivities;

    public List<Object> ifFalseActivities() {
        return this.ifFalseActivities == null ? List.of() : this.ifFalseActivities;
    }

    /**
     * List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
     * 
     */
    @Import(name="ifTrueActivities")
      private final @Nullable List<Object> ifTrueActivities;

    public List<Object> ifTrueActivities() {
        return this.ifTrueActivities == null ? List.of() : this.ifTrueActivities;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * Type of activity.
     * Expected value is 'IfCondition'.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
      private final @Nullable List<UserPropertyResponse> userProperties;

    public List<UserPropertyResponse> userProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }

    public IfConditionActivityResponse(
        @Nullable List<ActivityDependencyResponse> dependsOn,
        @Nullable String description,
        ExpressionResponse expression,
        @Nullable List<Object> ifFalseActivities,
        @Nullable List<Object> ifTrueActivities,
        String name,
        String type,
        @Nullable List<UserPropertyResponse> userProperties) {
        this.dependsOn = dependsOn;
        this.description = description;
        this.expression = Objects.requireNonNull(expression, "expected parameter 'expression' to be non-null");
        this.ifFalseActivities = ifFalseActivities;
        this.ifTrueActivities = ifTrueActivities;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userProperties = userProperties;
    }

    private IfConditionActivityResponse() {
        this.dependsOn = List.of();
        this.description = null;
        this.expression = null;
        this.ifFalseActivities = List.of();
        this.ifTrueActivities = List.of();
        this.name = null;
        this.type = null;
        this.userProperties = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IfConditionActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private ExpressionResponse expression;
        private @Nullable List<Object> ifFalseActivities;
        private @Nullable List<Object> ifTrueActivities;
        private String name;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(IfConditionActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.expression = defaults.expression;
    	      this.ifFalseActivities = defaults.ifFalseActivities;
    	      this.ifTrueActivities = defaults.ifTrueActivities;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder expression(ExpressionResponse expression) {
            this.expression = Objects.requireNonNull(expression);
            return this;
        }
        public Builder ifFalseActivities(@Nullable List<Object> ifFalseActivities) {
            this.ifFalseActivities = ifFalseActivities;
            return this;
        }
        public Builder ifFalseActivities(Object... ifFalseActivities) {
            return ifFalseActivities(List.of(ifFalseActivities));
        }
        public Builder ifTrueActivities(@Nullable List<Object> ifTrueActivities) {
            this.ifTrueActivities = ifTrueActivities;
            return this;
        }
        public Builder ifTrueActivities(Object... ifTrueActivities) {
            return ifTrueActivities(List.of(ifTrueActivities));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }        public IfConditionActivityResponse build() {
            return new IfConditionActivityResponse(dependsOn, description, expression, ifFalseActivities, ifTrueActivities, name, type, userProperties);
        }
    }
}
