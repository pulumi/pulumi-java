// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.kusto.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of the key vault.
 * 
 */
public final class KeyVaultPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final KeyVaultPropertiesResponse Empty = new KeyVaultPropertiesResponse();

    /**
     * The name of the key vault key.
     * 
     */
    @Import(name="keyName", required=true)
      private final String keyName;

    public String getKeyName() {
        return this.keyName;
    }

    /**
     * The Uri of the key vault.
     * 
     */
    @Import(name="keyVaultUri", required=true)
      private final String keyVaultUri;

    public String getKeyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * The version of the key vault key.
     * 
     */
    @Import(name="keyVersion")
      private final @Nullable String keyVersion;

    public Optional<String> getKeyVersion() {
        return this.keyVersion == null ? Optional.empty() : Optional.ofNullable(this.keyVersion);
    }

    /**
     * The user assigned identity (ARM resource id) that has access to the key.
     * 
     */
    @Import(name="userIdentity")
      private final @Nullable String userIdentity;

    public Optional<String> getUserIdentity() {
        return this.userIdentity == null ? Optional.empty() : Optional.ofNullable(this.userIdentity);
    }

    public KeyVaultPropertiesResponse(
        String keyName,
        String keyVaultUri,
        @Nullable String keyVersion,
        @Nullable String userIdentity) {
        this.keyName = Objects.requireNonNull(keyName, "expected parameter 'keyName' to be non-null");
        this.keyVaultUri = Objects.requireNonNull(keyVaultUri, "expected parameter 'keyVaultUri' to be non-null");
        this.keyVersion = keyVersion;
        this.userIdentity = userIdentity;
    }

    private KeyVaultPropertiesResponse() {
        this.keyName = null;
        this.keyVaultUri = null;
        this.keyVersion = null;
        this.userIdentity = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyVaultPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String keyName;
        private String keyVaultUri;
        private @Nullable String keyVersion;
        private @Nullable String userIdentity;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyVaultPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keyName = defaults.keyName;
    	      this.keyVaultUri = defaults.keyVaultUri;
    	      this.keyVersion = defaults.keyVersion;
    	      this.userIdentity = defaults.userIdentity;
        }

        public Builder keyName(String keyName) {
            this.keyName = Objects.requireNonNull(keyName);
            return this;
        }

        public Builder keyVaultUri(String keyVaultUri) {
            this.keyVaultUri = Objects.requireNonNull(keyVaultUri);
            return this;
        }

        public Builder keyVersion(@Nullable String keyVersion) {
            this.keyVersion = keyVersion;
            return this;
        }

        public Builder userIdentity(@Nullable String userIdentity) {
            this.userIdentity = userIdentity;
            return this;
        }
        public KeyVaultPropertiesResponse build() {
            return new KeyVaultPropertiesResponse(keyName, keyVaultUri, keyVersion, userIdentity);
        }
    }
}
