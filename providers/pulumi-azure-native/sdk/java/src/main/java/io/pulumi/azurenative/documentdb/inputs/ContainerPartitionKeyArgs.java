// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb.inputs;

import io.pulumi.azurenative.documentdb.enums.PartitionKind;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The configuration of the partition key to be used for partitioning data into multiple partitions
 * 
 */
public final class ContainerPartitionKeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContainerPartitionKeyArgs Empty = new ContainerPartitionKeyArgs();

    /**
     * Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create
     * 
     */
    @InputImport(name="kind")
    private final @Nullable Input<Either<String,PartitionKind>> kind;

    public Input<Either<String,PartitionKind>> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    /**
     * List of paths using which data within the container can be partitioned
     * 
     */
    @InputImport(name="paths")
    private final @Nullable Input<List<String>> paths;

    public Input<List<String>> getPaths() {
        return this.paths == null ? Input.empty() : this.paths;
    }

    /**
     * Indicates the version of the partition key definition
     * 
     */
    @InputImport(name="version")
    private final @Nullable Input<Integer> version;

    public Input<Integer> getVersion() {
        return this.version == null ? Input.empty() : this.version;
    }

    public ContainerPartitionKeyArgs(
        @Nullable Input<Either<String,PartitionKind>> kind,
        @Nullable Input<List<String>> paths,
        @Nullable Input<Integer> version) {
        this.kind = kind == null ? Input.ofLeft("Hash") : kind;
        this.paths = paths;
        this.version = version;
    }

    private ContainerPartitionKeyArgs() {
        this.kind = Input.empty();
        this.paths = Input.empty();
        this.version = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerPartitionKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,PartitionKind>> kind;
        private @Nullable Input<List<String>> paths;
        private @Nullable Input<Integer> version;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerPartitionKeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kind = defaults.kind;
    	      this.paths = defaults.paths;
    	      this.version = defaults.version;
        }

        public Builder setKind(@Nullable Input<Either<String,PartitionKind>> kind) {
            this.kind = kind;
            return this;
        }

        public Builder setKind(@Nullable Either<String,PartitionKind> kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder setPaths(@Nullable Input<List<String>> paths) {
            this.paths = paths;
            return this;
        }

        public Builder setPaths(@Nullable List<String> paths) {
            this.paths = Input.ofNullable(paths);
            return this;
        }

        public Builder setVersion(@Nullable Input<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder setVersion(@Nullable Integer version) {
            this.version = Input.ofNullable(version);
            return this;
        }

        public ContainerPartitionKeyArgs build() {
            return new ContainerPartitionKeyArgs(kind, paths, version);
        }
    }
}
