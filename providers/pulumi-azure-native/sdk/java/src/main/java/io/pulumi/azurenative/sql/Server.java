// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.sql.ServerArgs;
import io.pulumi.azurenative.sql.outputs.ResourceIdentityResponse;
import io.pulumi.azurenative.sql.outputs.ServerExternalAdministratorResponse;
import io.pulumi.azurenative.sql.outputs.ServerPrivateEndpointConnectionResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * An Azure SQL Database server.
 * API Version: 2020-11-01-preview.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:sql:Server sqlcrudtest-4645 /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645 
 * ```
 * 
 */
@ResourceType(type="azure-native:sql:Server")
public class Server extends io.pulumi.resources.CustomResource {
    /**
     * Administrator username for the server. Once created it cannot be changed.
     * 
     */
    @Export(name="administratorLogin", type=String.class, parameters={})
    private Output</* @Nullable */ String> administratorLogin;

    /**
     * @return Administrator username for the server. Once created it cannot be changed.
     * 
     */
    public Output</* @Nullable */ String> getAdministratorLogin() {
        return this.administratorLogin;
    }
    /**
     * The Azure Active Directory identity of the server.
     * 
     */
    @Export(name="administrators", type=ServerExternalAdministratorResponse.class, parameters={})
    private Output</* @Nullable */ ServerExternalAdministratorResponse> administrators;

    /**
     * @return The Azure Active Directory identity of the server.
     * 
     */
    public Output</* @Nullable */ ServerExternalAdministratorResponse> getAdministrators() {
        return this.administrators;
    }
    /**
     * The fully qualified domain name of the server.
     * 
     */
    @Export(name="fullyQualifiedDomainName", type=String.class, parameters={})
    private Output<String> fullyQualifiedDomainName;

    /**
     * @return The fully qualified domain name of the server.
     * 
     */
    public Output<String> getFullyQualifiedDomainName() {
        return this.fullyQualifiedDomainName;
    }
    /**
     * The Azure Active Directory identity of the server.
     * 
     */
    @Export(name="identity", type=ResourceIdentityResponse.class, parameters={})
    private Output</* @Nullable */ ResourceIdentityResponse> identity;

    /**
     * @return The Azure Active Directory identity of the server.
     * 
     */
    public Output</* @Nullable */ ResourceIdentityResponse> getIdentity() {
        return this.identity;
    }
    /**
     * A CMK URI of the key to use for encryption.
     * 
     */
    @Export(name="keyId", type=String.class, parameters={})
    private Output</* @Nullable */ String> keyId;

    /**
     * @return A CMK URI of the key to use for encryption.
     * 
     */
    public Output</* @Nullable */ String> getKeyId() {
        return this.keyId;
    }
    /**
     * Kind of sql server. This is metadata used for the Azure portal experience.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return Kind of sql server. This is metadata used for the Azure portal experience.
     * 
     */
    public Output<String> getKind() {
        return this.kind;
    }
    /**
     * Resource location.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource location.
     * 
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
     * 
     */
    @Export(name="minimalTlsVersion", type=String.class, parameters={})
    private Output</* @Nullable */ String> minimalTlsVersion;

    /**
     * @return Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
     * 
     */
    public Output</* @Nullable */ String> getMinimalTlsVersion() {
        return this.minimalTlsVersion;
    }
    /**
     * Resource name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The resource id of a user assigned identity to be used by default.
     * 
     */
    @Export(name="primaryUserAssignedIdentityId", type=String.class, parameters={})
    private Output</* @Nullable */ String> primaryUserAssignedIdentityId;

    /**
     * @return The resource id of a user assigned identity to be used by default.
     * 
     */
    public Output</* @Nullable */ String> getPrimaryUserAssignedIdentityId() {
        return this.primaryUserAssignedIdentityId;
    }
    /**
     * List of private endpoint connections on a server
     * 
     */
    @Export(name="privateEndpointConnections", type=List.class, parameters={ServerPrivateEndpointConnectionResponse.class})
    private Output<List<ServerPrivateEndpointConnectionResponse>> privateEndpointConnections;

    /**
     * @return List of private endpoint connections on a server
     * 
     */
    public Output<List<ServerPrivateEndpointConnectionResponse>> getPrivateEndpointConnections() {
        return this.privateEndpointConnections;
    }
    /**
     * Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
     * 
     */
    @Export(name="publicNetworkAccess", type=String.class, parameters={})
    private Output</* @Nullable */ String> publicNetworkAccess;

    /**
     * @return Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
     * 
     */
    public Output</* @Nullable */ String> getPublicNetworkAccess() {
        return this.publicNetworkAccess;
    }
    /**
     * The state of the server.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The state of the server.
     * 
     */
    public Output<String> getState() {
        return this.state;
    }
    /**
     * Resource tags.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Resource type.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * The version of the server.
     * 
     */
    @Export(name="version", type=String.class, parameters={})
    private Output</* @Nullable */ String> version;

    /**
     * @return The version of the server.
     * 
     */
    public Output</* @Nullable */ String> getVersion() {
        return this.version;
    }
    /**
     * Whether or not existing server has a workspace created and if it allows connection from workspace
     * 
     */
    @Export(name="workspaceFeature", type=String.class, parameters={})
    private Output<String> workspaceFeature;

    /**
     * @return Whether or not existing server has a workspace created and if it allows connection from workspace
     * 
     */
    public Output<String> getWorkspaceFeature() {
        return this.workspaceFeature;
    }

    public interface BuilderApplicator {
        public void apply(ServerArgs.Builder a);
    }
    private static io.pulumi.azurenative.sql.ServerArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.azurenative.sql.ServerArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public Server(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Server(String name) {
        this(name, ServerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Server(String name, ServerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Server(String name, ServerArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:sql:Server", name, args == null ? ServerArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Server(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:sql:Server", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Output.of(Alias.builder().setType("azure-native:sql/v20140401:Server").build()),
                Output.of(Alias.builder().setType("azure-native:sql/v20150501preview:Server").build()),
                Output.of(Alias.builder().setType("azure-native:sql/v20190601preview:Server").build()),
                Output.of(Alias.builder().setType("azure-native:sql/v20200202preview:Server").build()),
                Output.of(Alias.builder().setType("azure-native:sql/v20200801preview:Server").build()),
                Output.of(Alias.builder().setType("azure-native:sql/v20201101preview:Server").build()),
                Output.of(Alias.builder().setType("azure-native:sql/v20210201preview:Server").build()),
                Output.of(Alias.builder().setType("azure-native:sql/v20210501preview:Server").build()),
                Output.of(Alias.builder().setType("azure-native:sql/v20210801preview:Server").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Server get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Server(name, id, options);
    }
}
