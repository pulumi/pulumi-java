// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.virtualmachineimages.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Purchase plan configuration for platform image.
 * 
 */
public final class PlatformImagePurchasePlanArgs extends io.pulumi.resources.ResourceArgs {

    public static final PlatformImagePurchasePlanArgs Empty = new PlatformImagePurchasePlanArgs();

    /**
     * Name of the purchase plan.
     * 
     */
    @Import(name="planName", required=true)
      private final Output<String> planName;

    public Output<String> getPlanName() {
        return this.planName;
    }

    /**
     * Product of the purchase plan.
     * 
     */
    @Import(name="planProduct", required=true)
      private final Output<String> planProduct;

    public Output<String> getPlanProduct() {
        return this.planProduct;
    }

    /**
     * Publisher of the purchase plan.
     * 
     */
    @Import(name="planPublisher", required=true)
      private final Output<String> planPublisher;

    public Output<String> getPlanPublisher() {
        return this.planPublisher;
    }

    public PlatformImagePurchasePlanArgs(
        Output<String> planName,
        Output<String> planProduct,
        Output<String> planPublisher) {
        this.planName = Objects.requireNonNull(planName, "expected parameter 'planName' to be non-null");
        this.planProduct = Objects.requireNonNull(planProduct, "expected parameter 'planProduct' to be non-null");
        this.planPublisher = Objects.requireNonNull(planPublisher, "expected parameter 'planPublisher' to be non-null");
    }

    private PlatformImagePurchasePlanArgs() {
        this.planName = Output.empty();
        this.planProduct = Output.empty();
        this.planPublisher = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PlatformImagePurchasePlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> planName;
        private Output<String> planProduct;
        private Output<String> planPublisher;

        public Builder() {
    	      // Empty
        }

        public Builder(PlatformImagePurchasePlanArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.planName = defaults.planName;
    	      this.planProduct = defaults.planProduct;
    	      this.planPublisher = defaults.planPublisher;
        }

        public Builder planName(Output<String> planName) {
            this.planName = Objects.requireNonNull(planName);
            return this;
        }

        public Builder planName(String planName) {
            this.planName = Output.of(Objects.requireNonNull(planName));
            return this;
        }

        public Builder planProduct(Output<String> planProduct) {
            this.planProduct = Objects.requireNonNull(planProduct);
            return this;
        }

        public Builder planProduct(String planProduct) {
            this.planProduct = Output.of(Objects.requireNonNull(planProduct));
            return this;
        }

        public Builder planPublisher(Output<String> planPublisher) {
            this.planPublisher = Objects.requireNonNull(planPublisher);
            return this;
        }

        public Builder planPublisher(String planPublisher) {
            this.planPublisher = Output.of(Objects.requireNonNull(planPublisher));
            return this;
        }
        public PlatformImagePurchasePlanArgs build() {
            return new PlatformImagePurchasePlanArgs(planName, planProduct, planPublisher);
        }
    }
}
