// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.inputs;

import io.pulumi.azurenative.datamigration.inputs.DatabaseTableResponse;
import io.pulumi.azurenative.datamigration.inputs.ReportableExceptionResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Output of the task that collects user tables for the given list of databases
 * 
 */
public final class GetUserTablesSqlTaskOutputResponse extends io.pulumi.resources.InvokeArgs {

    public static final GetUserTablesSqlTaskOutputResponse Empty = new GetUserTablesSqlTaskOutputResponse();

    /**
     * Mapping from database name to list of tables
     * 
     */
    @InputImport(name="databasesToTables", required=true)
        private final Map<String,List<DatabaseTableResponse>> databasesToTables;

    public Map<String,List<DatabaseTableResponse>> getDatabasesToTables() {
        return this.databasesToTables;
    }

    /**
     * Result identifier
     * 
     */
    @InputImport(name="id", required=true)
        private final String id;

    public String getId() {
        return this.id;
    }

    /**
     * Validation errors
     * 
     */
    @InputImport(name="validationErrors", required=true)
        private final List<ReportableExceptionResponse> validationErrors;

    public List<ReportableExceptionResponse> getValidationErrors() {
        return this.validationErrors;
    }

    public GetUserTablesSqlTaskOutputResponse(
        Map<String,List<DatabaseTableResponse>> databasesToTables,
        String id,
        List<ReportableExceptionResponse> validationErrors) {
        this.databasesToTables = Objects.requireNonNull(databasesToTables, "expected parameter 'databasesToTables' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.validationErrors = Objects.requireNonNull(validationErrors, "expected parameter 'validationErrors' to be non-null");
    }

    private GetUserTablesSqlTaskOutputResponse() {
        this.databasesToTables = Map.of();
        this.id = null;
        this.validationErrors = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserTablesSqlTaskOutputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,List<DatabaseTableResponse>> databasesToTables;
        private String id;
        private List<ReportableExceptionResponse> validationErrors;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserTablesSqlTaskOutputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databasesToTables = defaults.databasesToTables;
    	      this.id = defaults.id;
    	      this.validationErrors = defaults.validationErrors;
        }

        public Builder setDatabasesToTables(Map<String,List<DatabaseTableResponse>> databasesToTables) {
            this.databasesToTables = Objects.requireNonNull(databasesToTables);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setValidationErrors(List<ReportableExceptionResponse> validationErrors) {
            this.validationErrors = Objects.requireNonNull(validationErrors);
            return this;
        }
        public GetUserTablesSqlTaskOutputResponse build() {
            return new GetUserTablesSqlTaskOutputResponse(databasesToTables, id, validationErrors);
        }
    }
}
