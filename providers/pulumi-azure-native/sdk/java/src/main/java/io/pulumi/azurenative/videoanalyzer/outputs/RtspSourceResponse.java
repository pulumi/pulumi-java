// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.videoanalyzer.outputs;

import io.pulumi.azurenative.videoanalyzer.outputs.TlsEndpointResponse;
import io.pulumi.azurenative.videoanalyzer.outputs.UnsecuredEndpointResponse;
import io.pulumi.core.Either;
import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RtspSourceResponse {
    /**
     * RTSP endpoint information for Video Analyzer to connect to. This contains the required information for Video Analyzer to connect to RTSP cameras and/or generic RTSP servers.
     * 
     */
    private final Either<TlsEndpointResponse,UnsecuredEndpointResponse> endpoint;
    /**
     * Node name. Must be unique within the topology.
     * 
     */
    private final String name;
    /**
     * Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP, the RTP packets are interleaved on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged through long lived HTTP connections, and the RTP packages are interleaved in the HTTP connections alongside the RTSP messages.
     * 
     */
    private final @Nullable String transport;
    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.VideoAnalyzer.RtspSource'.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private RtspSourceResponse(
        @CustomType.Parameter("endpoint") Either<TlsEndpointResponse,UnsecuredEndpointResponse> endpoint,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("transport") @Nullable String transport,
        @CustomType.Parameter("type") String type) {
        this.endpoint = endpoint;
        this.name = name;
        this.transport = transport;
        this.type = type;
    }

    /**
     * RTSP endpoint information for Video Analyzer to connect to. This contains the required information for Video Analyzer to connect to RTSP cameras and/or generic RTSP servers.
     * 
    */
    public Either<TlsEndpointResponse,UnsecuredEndpointResponse> getEndpoint() {
        return this.endpoint;
    }
    /**
     * Node name. Must be unique within the topology.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP, the RTP packets are interleaved on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged through long lived HTTP connections, and the RTP packages are interleaved in the HTTP connections alongside the RTSP messages.
     * 
    */
    public Optional<String> getTransport() {
        return Optional.ofNullable(this.transport);
    }
    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.VideoAnalyzer.RtspSource'.
     * 
    */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RtspSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Either<TlsEndpointResponse,UnsecuredEndpointResponse> endpoint;
        private String name;
        private @Nullable String transport;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(RtspSourceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endpoint = defaults.endpoint;
    	      this.name = defaults.name;
    	      this.transport = defaults.transport;
    	      this.type = defaults.type;
        }

        public Builder endpoint(Either<TlsEndpointResponse,UnsecuredEndpointResponse> endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder transport(@Nullable String transport) {
            this.transport = transport;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public RtspSourceResponse build() {
            return new RtspSourceResponse(endpoint, name, transport, type);
        }
    }
}
