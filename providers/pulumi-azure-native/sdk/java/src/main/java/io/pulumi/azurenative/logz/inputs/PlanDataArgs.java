// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logz.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PlanDataArgs extends io.pulumi.resources.ResourceArgs {

    public static final PlanDataArgs Empty = new PlanDataArgs();

    /**
     * different billing cycles like MONTHLY/WEEKLY. this could be enum
     * 
     */
    @InputImport(name="billingCycle")
    private final @Nullable Input<String> billingCycle;

    public Input<String> getBillingCycle() {
        return this.billingCycle == null ? Input.empty() : this.billingCycle;
    }

    /**
     * date when plan was applied
     * 
     */
    @InputImport(name="effectiveDate")
    private final @Nullable Input<String> effectiveDate;

    public Input<String> getEffectiveDate() {
        return this.effectiveDate == null ? Input.empty() : this.effectiveDate;
    }

    /**
     * plan id as published by Logz
     * 
     */
    @InputImport(name="planDetails")
    private final @Nullable Input<String> planDetails;

    public Input<String> getPlanDetails() {
        return this.planDetails == null ? Input.empty() : this.planDetails;
    }

    /**
     * different usage type like PAYG/COMMITTED. this could be enum
     * 
     */
    @InputImport(name="usageType")
    private final @Nullable Input<String> usageType;

    public Input<String> getUsageType() {
        return this.usageType == null ? Input.empty() : this.usageType;
    }

    public PlanDataArgs(
        @Nullable Input<String> billingCycle,
        @Nullable Input<String> effectiveDate,
        @Nullable Input<String> planDetails,
        @Nullable Input<String> usageType) {
        this.billingCycle = billingCycle;
        this.effectiveDate = effectiveDate;
        this.planDetails = planDetails;
        this.usageType = usageType;
    }

    private PlanDataArgs() {
        this.billingCycle = Input.empty();
        this.effectiveDate = Input.empty();
        this.planDetails = Input.empty();
        this.usageType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PlanDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> billingCycle;
        private @Nullable Input<String> effectiveDate;
        private @Nullable Input<String> planDetails;
        private @Nullable Input<String> usageType;

        public Builder() {
    	      // Empty
        }

        public Builder(PlanDataArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billingCycle = defaults.billingCycle;
    	      this.effectiveDate = defaults.effectiveDate;
    	      this.planDetails = defaults.planDetails;
    	      this.usageType = defaults.usageType;
        }

        public Builder setBillingCycle(@Nullable Input<String> billingCycle) {
            this.billingCycle = billingCycle;
            return this;
        }

        public Builder setBillingCycle(@Nullable String billingCycle) {
            this.billingCycle = Input.ofNullable(billingCycle);
            return this;
        }

        public Builder setEffectiveDate(@Nullable Input<String> effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }

        public Builder setEffectiveDate(@Nullable String effectiveDate) {
            this.effectiveDate = Input.ofNullable(effectiveDate);
            return this;
        }

        public Builder setPlanDetails(@Nullable Input<String> planDetails) {
            this.planDetails = planDetails;
            return this;
        }

        public Builder setPlanDetails(@Nullable String planDetails) {
            this.planDetails = Input.ofNullable(planDetails);
            return this;
        }

        public Builder setUsageType(@Nullable Input<String> usageType) {
            this.usageType = usageType;
            return this;
        }

        public Builder setUsageType(@Nullable String usageType) {
            this.usageType = Input.ofNullable(usageType);
            return this;
        }

        public PlanDataArgs build() {
            return new PlanDataArgs(billingCycle, effectiveDate, planDetails, usageType);
        }
    }
}
