// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.kusto.outputs;

import io.pulumi.azurenative.kusto.outputs.DatabaseStatisticsResponse;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetReadOnlyFollowingDatabaseResult {
    private final String attachedDatabaseConfigurationName;
    private final @Nullable String hotCachePeriod;
    private final String id;
    private final String kind;
    private final String leaderClusterResourceId;
    private final @Nullable String location;
    private final String name;
    private final String principalsModificationKind;
    private final String provisioningState;
    private final String softDeletePeriod;
    private final DatabaseStatisticsResponse statistics;
    private final String type;

    @OutputCustomType.Constructor({"attachedDatabaseConfigurationName","hotCachePeriod","id","kind","leaderClusterResourceId","location","name","principalsModificationKind","provisioningState","softDeletePeriod","statistics","type"})
    private GetReadOnlyFollowingDatabaseResult(
        String attachedDatabaseConfigurationName,
        @Nullable String hotCachePeriod,
        String id,
        String kind,
        String leaderClusterResourceId,
        @Nullable String location,
        String name,
        String principalsModificationKind,
        String provisioningState,
        String softDeletePeriod,
        DatabaseStatisticsResponse statistics,
        String type) {
        this.attachedDatabaseConfigurationName = Objects.requireNonNull(attachedDatabaseConfigurationName);
        this.hotCachePeriod = hotCachePeriod;
        this.id = Objects.requireNonNull(id);
        this.kind = Objects.requireNonNull(kind);
        this.leaderClusterResourceId = Objects.requireNonNull(leaderClusterResourceId);
        this.location = location;
        this.name = Objects.requireNonNull(name);
        this.principalsModificationKind = Objects.requireNonNull(principalsModificationKind);
        this.provisioningState = Objects.requireNonNull(provisioningState);
        this.softDeletePeriod = Objects.requireNonNull(softDeletePeriod);
        this.statistics = Objects.requireNonNull(statistics);
        this.type = Objects.requireNonNull(type);
    }

    public String getAttachedDatabaseConfigurationName() {
        return this.attachedDatabaseConfigurationName;
    }
    public Optional<String> getHotCachePeriod() {
        return Optional.ofNullable(this.hotCachePeriod);
    }
    public String getId() {
        return this.id;
    }
    public String getKind() {
        return this.kind;
    }
    public String getLeaderClusterResourceId() {
        return this.leaderClusterResourceId;
    }
    public Optional<String> getLocation() {
        return Optional.ofNullable(this.location);
    }
    public String getName() {
        return this.name;
    }
    public String getPrincipalsModificationKind() {
        return this.principalsModificationKind;
    }
    public String getProvisioningState() {
        return this.provisioningState;
    }
    public String getSoftDeletePeriod() {
        return this.softDeletePeriod;
    }
    public DatabaseStatisticsResponse getStatistics() {
        return this.statistics;
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReadOnlyFollowingDatabaseResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String attachedDatabaseConfigurationName;
        private @Nullable String hotCachePeriod;
        private String id;
        private String kind;
        private String leaderClusterResourceId;
        private @Nullable String location;
        private String name;
        private String principalsModificationKind;
        private String provisioningState;
        private String softDeletePeriod;
        private DatabaseStatisticsResponse statistics;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetReadOnlyFollowingDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedDatabaseConfigurationName = defaults.attachedDatabaseConfigurationName;
    	      this.hotCachePeriod = defaults.hotCachePeriod;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.leaderClusterResourceId = defaults.leaderClusterResourceId;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.principalsModificationKind = defaults.principalsModificationKind;
    	      this.provisioningState = defaults.provisioningState;
    	      this.softDeletePeriod = defaults.softDeletePeriod;
    	      this.statistics = defaults.statistics;
    	      this.type = defaults.type;
        }

        public Builder setAttachedDatabaseConfigurationName(String attachedDatabaseConfigurationName) {
            this.attachedDatabaseConfigurationName = Objects.requireNonNull(attachedDatabaseConfigurationName);
            return this;
        }

        public Builder setHotCachePeriod(@Nullable String hotCachePeriod) {
            this.hotCachePeriod = hotCachePeriod;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLeaderClusterResourceId(String leaderClusterResourceId) {
            this.leaderClusterResourceId = Objects.requireNonNull(leaderClusterResourceId);
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = location;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPrincipalsModificationKind(String principalsModificationKind) {
            this.principalsModificationKind = Objects.requireNonNull(principalsModificationKind);
            return this;
        }

        public Builder setProvisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder setSoftDeletePeriod(String softDeletePeriod) {
            this.softDeletePeriod = Objects.requireNonNull(softDeletePeriod);
            return this;
        }

        public Builder setStatistics(DatabaseStatisticsResponse statistics) {
            this.statistics = Objects.requireNonNull(statistics);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetReadOnlyFollowingDatabaseResult build() {
            return new GetReadOnlyFollowingDatabaseResult(attachedDatabaseConfigurationName, hotCachePeriod, id, kind, leaderClusterResourceId, location, name, principalsModificationKind, provisioningState, softDeletePeriod, statistics, type);
        }
    }
}
