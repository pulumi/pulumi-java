// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerregistry;

import io.pulumi.azurenative.containerregistry.enums.ConnectedRegistryMode;
import io.pulumi.azurenative.containerregistry.inputs.LoggingPropertiesArgs;
import io.pulumi.azurenative.containerregistry.inputs.ParentPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConnectedRegistryArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectedRegistryArgs Empty = new ConnectedRegistryArgs();

    /**
     * The list of the ACR token resource IDs used to authenticate clients to the connected registry.
     * 
     */
    @InputImport(name="clientTokenIds")
      private final @Nullable Input<List<String>> clientTokenIds;

    public Input<List<String>> getClientTokenIds() {
        return this.clientTokenIds == null ? Input.empty() : this.clientTokenIds;
    }

    /**
     * The name of the connected registry.
     * 
     */
    @InputImport(name="connectedRegistryName")
      private final @Nullable Input<String> connectedRegistryName;

    public Input<String> getConnectedRegistryName() {
        return this.connectedRegistryName == null ? Input.empty() : this.connectedRegistryName;
    }

    /**
     * The logging properties of the connected registry.
     * 
     */
    @InputImport(name="logging")
      private final @Nullable Input<LoggingPropertiesArgs> logging;

    public Input<LoggingPropertiesArgs> getLogging() {
        return this.logging == null ? Input.empty() : this.logging;
    }

    /**
     * The mode of the connected registry resource that indicates the permissions of the registry.
     * 
     */
    @InputImport(name="mode", required=true)
      private final Input<Either<String,ConnectedRegistryMode>> mode;

    public Input<Either<String,ConnectedRegistryMode>> getMode() {
        return this.mode;
    }

    /**
     * The parent of the connected registry.
     * 
     */
    @InputImport(name="parent", required=true)
      private final Input<ParentPropertiesArgs> parent;

    public Input<ParentPropertiesArgs> getParent() {
        return this.parent;
    }

    /**
     * The name of the container registry.
     * 
     */
    @InputImport(name="registryName", required=true)
      private final Input<String> registryName;

    public Input<String> getRegistryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    public ConnectedRegistryArgs(
        @Nullable Input<List<String>> clientTokenIds,
        @Nullable Input<String> connectedRegistryName,
        @Nullable Input<LoggingPropertiesArgs> logging,
        Input<Either<String,ConnectedRegistryMode>> mode,
        Input<ParentPropertiesArgs> parent,
        Input<String> registryName,
        Input<String> resourceGroupName) {
        this.clientTokenIds = clientTokenIds;
        this.connectedRegistryName = connectedRegistryName;
        this.logging = logging;
        this.mode = Objects.requireNonNull(mode, "expected parameter 'mode' to be non-null");
        this.parent = Objects.requireNonNull(parent, "expected parameter 'parent' to be non-null");
        this.registryName = Objects.requireNonNull(registryName, "expected parameter 'registryName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private ConnectedRegistryArgs() {
        this.clientTokenIds = Input.empty();
        this.connectedRegistryName = Input.empty();
        this.logging = Input.empty();
        this.mode = Input.empty();
        this.parent = Input.empty();
        this.registryName = Input.empty();
        this.resourceGroupName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectedRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> clientTokenIds;
        private @Nullable Input<String> connectedRegistryName;
        private @Nullable Input<LoggingPropertiesArgs> logging;
        private Input<Either<String,ConnectedRegistryMode>> mode;
        private Input<ParentPropertiesArgs> parent;
        private Input<String> registryName;
        private Input<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectedRegistryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientTokenIds = defaults.clientTokenIds;
    	      this.connectedRegistryName = defaults.connectedRegistryName;
    	      this.logging = defaults.logging;
    	      this.mode = defaults.mode;
    	      this.parent = defaults.parent;
    	      this.registryName = defaults.registryName;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder clientTokenIds(@Nullable Input<List<String>> clientTokenIds) {
            this.clientTokenIds = clientTokenIds;
            return this;
        }

        public Builder clientTokenIds(@Nullable List<String> clientTokenIds) {
            this.clientTokenIds = Input.ofNullable(clientTokenIds);
            return this;
        }

        public Builder connectedRegistryName(@Nullable Input<String> connectedRegistryName) {
            this.connectedRegistryName = connectedRegistryName;
            return this;
        }

        public Builder connectedRegistryName(@Nullable String connectedRegistryName) {
            this.connectedRegistryName = Input.ofNullable(connectedRegistryName);
            return this;
        }

        public Builder logging(@Nullable Input<LoggingPropertiesArgs> logging) {
            this.logging = logging;
            return this;
        }

        public Builder logging(@Nullable LoggingPropertiesArgs logging) {
            this.logging = Input.ofNullable(logging);
            return this;
        }

        public Builder mode(Input<Either<String,ConnectedRegistryMode>> mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }

        public Builder mode(Either<String,ConnectedRegistryMode> mode) {
            this.mode = Input.of(Objects.requireNonNull(mode));
            return this;
        }

        public Builder parent(Input<ParentPropertiesArgs> parent) {
            this.parent = Objects.requireNonNull(parent);
            return this;
        }

        public Builder parent(ParentPropertiesArgs parent) {
            this.parent = Input.of(Objects.requireNonNull(parent));
            return this;
        }

        public Builder registryName(Input<String> registryName) {
            this.registryName = Objects.requireNonNull(registryName);
            return this;
        }

        public Builder registryName(String registryName) {
            this.registryName = Input.of(Objects.requireNonNull(registryName));
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public ConnectedRegistryArgs build() {
            return new ConnectedRegistryArgs(clientTokenIds, connectedRegistryName, logging, mode, parent, registryName, resourceGroupName);
        }
    }
}
