// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.sql.enums.ServerKeyType;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ManagedInstanceKeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagedInstanceKeyArgs Empty = new ManagedInstanceKeyArgs();

    /**
     * The name of the managed instance key to be operated on (updated or created).
     * 
     */
    @Import(name="keyName")
      private final @Nullable Output<String> keyName;

    public Output<String> getKeyName() {
        return this.keyName == null ? Output.empty() : this.keyName;
    }

    /**
     * The name of the managed instance.
     * 
     */
    @Import(name="managedInstanceName", required=true)
      private final Output<String> managedInstanceName;

    public Output<String> getManagedInstanceName() {
        return this.managedInstanceName;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The key type like 'ServiceManaged', 'AzureKeyVault'.
     * 
     */
    @Import(name="serverKeyType", required=true)
      private final Output<Either<String,ServerKeyType>> serverKeyType;

    public Output<Either<String,ServerKeyType>> getServerKeyType() {
        return this.serverKeyType;
    }

    /**
     * The URI of the key. If the ServerKeyType is AzureKeyVault, then the URI is required.
     * 
     */
    @Import(name="uri")
      private final @Nullable Output<String> uri;

    public Output<String> getUri() {
        return this.uri == null ? Output.empty() : this.uri;
    }

    public ManagedInstanceKeyArgs(
        @Nullable Output<String> keyName,
        Output<String> managedInstanceName,
        Output<String> resourceGroupName,
        Output<Either<String,ServerKeyType>> serverKeyType,
        @Nullable Output<String> uri) {
        this.keyName = keyName;
        this.managedInstanceName = Objects.requireNonNull(managedInstanceName, "expected parameter 'managedInstanceName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverKeyType = Objects.requireNonNull(serverKeyType, "expected parameter 'serverKeyType' to be non-null");
        this.uri = uri;
    }

    private ManagedInstanceKeyArgs() {
        this.keyName = Output.empty();
        this.managedInstanceName = Output.empty();
        this.resourceGroupName = Output.empty();
        this.serverKeyType = Output.empty();
        this.uri = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedInstanceKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> keyName;
        private Output<String> managedInstanceName;
        private Output<String> resourceGroupName;
        private Output<Either<String,ServerKeyType>> serverKeyType;
        private @Nullable Output<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedInstanceKeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keyName = defaults.keyName;
    	      this.managedInstanceName = defaults.managedInstanceName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverKeyType = defaults.serverKeyType;
    	      this.uri = defaults.uri;
        }

        public Builder keyName(@Nullable Output<String> keyName) {
            this.keyName = keyName;
            return this;
        }

        public Builder keyName(@Nullable String keyName) {
            this.keyName = Output.ofNullable(keyName);
            return this;
        }

        public Builder managedInstanceName(Output<String> managedInstanceName) {
            this.managedInstanceName = Objects.requireNonNull(managedInstanceName);
            return this;
        }

        public Builder managedInstanceName(String managedInstanceName) {
            this.managedInstanceName = Output.of(Objects.requireNonNull(managedInstanceName));
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder serverKeyType(Output<Either<String,ServerKeyType>> serverKeyType) {
            this.serverKeyType = Objects.requireNonNull(serverKeyType);
            return this;
        }

        public Builder serverKeyType(Either<String,ServerKeyType> serverKeyType) {
            this.serverKeyType = Output.of(Objects.requireNonNull(serverKeyType));
            return this;
        }

        public Builder uri(@Nullable Output<String> uri) {
            this.uri = uri;
            return this;
        }

        public Builder uri(@Nullable String uri) {
            this.uri = Output.ofNullable(uri);
            return this;
        }
        public ManagedInstanceKeyArgs build() {
            return new ManagedInstanceKeyArgs(keyName, managedInstanceName, resourceGroupName, serverKeyType, uri);
        }
    }
}
