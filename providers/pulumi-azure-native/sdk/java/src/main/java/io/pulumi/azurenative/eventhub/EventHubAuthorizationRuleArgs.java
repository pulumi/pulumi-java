// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.eventhub;

import io.pulumi.azurenative.eventhub.enums.AccessRights;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventHubAuthorizationRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventHubAuthorizationRuleArgs Empty = new EventHubAuthorizationRuleArgs();

    /**
     * The authorization rule name.
     * 
     */
    @Import(name="authorizationRuleName")
      private final @Nullable Output<String> authorizationRuleName;

    public Output<String> getAuthorizationRuleName() {
        return this.authorizationRuleName == null ? Codegen.empty() : this.authorizationRuleName;
    }

    /**
     * The Event Hub name
     * 
     */
    @Import(name="eventHubName", required=true)
      private final Output<String> eventHubName;

    public Output<String> getEventHubName() {
        return this.eventHubName;
    }

    /**
     * The Namespace name
     * 
     */
    @Import(name="namespaceName", required=true)
      private final Output<String> namespaceName;

    public Output<String> getNamespaceName() {
        return this.namespaceName;
    }

    /**
     * Name of the resource group within the azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The rights associated with the rule.
     * 
     */
    @Import(name="rights", required=true)
      private final Output<List<Either<String,AccessRights>>> rights;

    public Output<List<Either<String,AccessRights>>> getRights() {
        return this.rights;
    }

    public EventHubAuthorizationRuleArgs(
        @Nullable Output<String> authorizationRuleName,
        Output<String> eventHubName,
        Output<String> namespaceName,
        Output<String> resourceGroupName,
        Output<List<Either<String,AccessRights>>> rights) {
        this.authorizationRuleName = authorizationRuleName;
        this.eventHubName = Objects.requireNonNull(eventHubName, "expected parameter 'eventHubName' to be non-null");
        this.namespaceName = Objects.requireNonNull(namespaceName, "expected parameter 'namespaceName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.rights = Objects.requireNonNull(rights, "expected parameter 'rights' to be non-null");
    }

    private EventHubAuthorizationRuleArgs() {
        this.authorizationRuleName = Codegen.empty();
        this.eventHubName = Codegen.empty();
        this.namespaceName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.rights = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventHubAuthorizationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> authorizationRuleName;
        private Output<String> eventHubName;
        private Output<String> namespaceName;
        private Output<String> resourceGroupName;
        private Output<List<Either<String,AccessRights>>> rights;

        public Builder() {
    	      // Empty
        }

        public Builder(EventHubAuthorizationRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationRuleName = defaults.authorizationRuleName;
    	      this.eventHubName = defaults.eventHubName;
    	      this.namespaceName = defaults.namespaceName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.rights = defaults.rights;
        }

        public Builder authorizationRuleName(@Nullable Output<String> authorizationRuleName) {
            this.authorizationRuleName = authorizationRuleName;
            return this;
        }
        public Builder authorizationRuleName(@Nullable String authorizationRuleName) {
            this.authorizationRuleName = Codegen.ofNullable(authorizationRuleName);
            return this;
        }
        public Builder eventHubName(Output<String> eventHubName) {
            this.eventHubName = Objects.requireNonNull(eventHubName);
            return this;
        }
        public Builder eventHubName(String eventHubName) {
            this.eventHubName = Output.of(Objects.requireNonNull(eventHubName));
            return this;
        }
        public Builder namespaceName(Output<String> namespaceName) {
            this.namespaceName = Objects.requireNonNull(namespaceName);
            return this;
        }
        public Builder namespaceName(String namespaceName) {
            this.namespaceName = Output.of(Objects.requireNonNull(namespaceName));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder rights(Output<List<Either<String,AccessRights>>> rights) {
            this.rights = Objects.requireNonNull(rights);
            return this;
        }
        public Builder rights(List<Either<String,AccessRights>> rights) {
            this.rights = Output.of(Objects.requireNonNull(rights));
            return this;
        }
        public Builder rights(Either<String,AccessRights>... rights) {
            return rights(List.of(rights));
        }        public EventHubAuthorizationRuleArgs build() {
            return new EventHubAuthorizationRuleArgs(authorizationRuleName, eventHubName, namespaceName, resourceGroupName, rights);
        }
    }
}
