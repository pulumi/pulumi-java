// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.enums.ChannelMapping;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Select audio tracks from the input by specifying a track identifier.
 * 
 */
public final class SelectAudioTrackByIdArgs extends io.pulumi.resources.ResourceArgs {

    public static final SelectAudioTrackByIdArgs Empty = new SelectAudioTrackByIdArgs();

    /**
     * Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
     * 
     */
    @InputImport(name="channelMapping")
    private final @Nullable Input<Either<String,ChannelMapping>> channelMapping;

    public Input<Either<String,ChannelMapping>> getChannelMapping() {
        return this.channelMapping == null ? Input.empty() : this.channelMapping;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.Media.SelectAudioTrackById'.
     * 
     */
    @InputImport(name="odataType", required=true)
    private final Input<String> odataType;

    public Input<String> getOdataType() {
        return this.odataType;
    }

    /**
     * Track identifier to select
     * 
     */
    @InputImport(name="trackId", required=true)
    private final Input<Double> trackId;

    public Input<Double> getTrackId() {
        return this.trackId;
    }

    public SelectAudioTrackByIdArgs(
        @Nullable Input<Either<String,ChannelMapping>> channelMapping,
        Input<String> odataType,
        Input<Double> trackId) {
        this.channelMapping = channelMapping;
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.trackId = Objects.requireNonNull(trackId, "expected parameter 'trackId' to be non-null");
    }

    private SelectAudioTrackByIdArgs() {
        this.channelMapping = Input.empty();
        this.odataType = Input.empty();
        this.trackId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SelectAudioTrackByIdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,ChannelMapping>> channelMapping;
        private Input<String> odataType;
        private Input<Double> trackId;

        public Builder() {
    	      // Empty
        }

        public Builder(SelectAudioTrackByIdArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channelMapping = defaults.channelMapping;
    	      this.odataType = defaults.odataType;
    	      this.trackId = defaults.trackId;
        }

        public Builder setChannelMapping(@Nullable Input<Either<String,ChannelMapping>> channelMapping) {
            this.channelMapping = channelMapping;
            return this;
        }

        public Builder setChannelMapping(@Nullable Either<String,ChannelMapping> channelMapping) {
            this.channelMapping = Input.ofNullable(channelMapping);
            return this;
        }

        public Builder setOdataType(Input<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }

        public Builder setOdataType(String odataType) {
            this.odataType = Input.of(Objects.requireNonNull(odataType));
            return this;
        }

        public Builder setTrackId(Input<Double> trackId) {
            this.trackId = Objects.requireNonNull(trackId);
            return this;
        }

        public Builder setTrackId(Double trackId) {
            this.trackId = Input.of(Objects.requireNonNull(trackId));
            return this;
        }

        public SelectAudioTrackByIdArgs build() {
            return new SelectAudioTrackByIdArgs(channelMapping, odataType, trackId);
        }
    }
}
