// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.RulesEngineMatchVariable;
import io.pulumi.azurenative.network.enums.RulesEngineOperator;
import io.pulumi.azurenative.network.enums.Transform;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RulesEngineMatchConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final RulesEngineMatchConditionArgs Empty = new RulesEngineMatchConditionArgs();

    @InputImport(name="negateCondition")
    private final @Nullable Input<Boolean> negateCondition;

    public Input<Boolean> getNegateCondition() {
        return this.negateCondition == null ? Input.empty() : this.negateCondition;
    }

    @InputImport(name="rulesEngineMatchValue", required=true)
    private final Input<List<String>> rulesEngineMatchValue;

    public Input<List<String>> getRulesEngineMatchValue() {
        return this.rulesEngineMatchValue;
    }

    @InputImport(name="rulesEngineMatchVariable", required=true)
    private final Input<Either<String,RulesEngineMatchVariable>> rulesEngineMatchVariable;

    public Input<Either<String,RulesEngineMatchVariable>> getRulesEngineMatchVariable() {
        return this.rulesEngineMatchVariable;
    }

    @InputImport(name="rulesEngineOperator", required=true)
    private final Input<Either<String,RulesEngineOperator>> rulesEngineOperator;

    public Input<Either<String,RulesEngineOperator>> getRulesEngineOperator() {
        return this.rulesEngineOperator;
    }

    @InputImport(name="selector")
    private final @Nullable Input<String> selector;

    public Input<String> getSelector() {
        return this.selector == null ? Input.empty() : this.selector;
    }

    @InputImport(name="transforms")
    private final @Nullable Input<List<Either<String,Transform>>> transforms;

    public Input<List<Either<String,Transform>>> getTransforms() {
        return this.transforms == null ? Input.empty() : this.transforms;
    }

    public RulesEngineMatchConditionArgs(
        @Nullable Input<Boolean> negateCondition,
        Input<List<String>> rulesEngineMatchValue,
        Input<Either<String,RulesEngineMatchVariable>> rulesEngineMatchVariable,
        Input<Either<String,RulesEngineOperator>> rulesEngineOperator,
        @Nullable Input<String> selector,
        @Nullable Input<List<Either<String,Transform>>> transforms) {
        this.negateCondition = negateCondition;
        this.rulesEngineMatchValue = Objects.requireNonNull(rulesEngineMatchValue, "expected parameter 'rulesEngineMatchValue' to be non-null");
        this.rulesEngineMatchVariable = Objects.requireNonNull(rulesEngineMatchVariable, "expected parameter 'rulesEngineMatchVariable' to be non-null");
        this.rulesEngineOperator = Objects.requireNonNull(rulesEngineOperator, "expected parameter 'rulesEngineOperator' to be non-null");
        this.selector = selector;
        this.transforms = transforms;
    }

    private RulesEngineMatchConditionArgs() {
        this.negateCondition = Input.empty();
        this.rulesEngineMatchValue = Input.empty();
        this.rulesEngineMatchVariable = Input.empty();
        this.rulesEngineOperator = Input.empty();
        this.selector = Input.empty();
        this.transforms = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesEngineMatchConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> negateCondition;
        private Input<List<String>> rulesEngineMatchValue;
        private Input<Either<String,RulesEngineMatchVariable>> rulesEngineMatchVariable;
        private Input<Either<String,RulesEngineOperator>> rulesEngineOperator;
        private @Nullable Input<String> selector;
        private @Nullable Input<List<Either<String,Transform>>> transforms;

        public Builder() {
    	      // Empty
        }

        public Builder(RulesEngineMatchConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.negateCondition = defaults.negateCondition;
    	      this.rulesEngineMatchValue = defaults.rulesEngineMatchValue;
    	      this.rulesEngineMatchVariable = defaults.rulesEngineMatchVariable;
    	      this.rulesEngineOperator = defaults.rulesEngineOperator;
    	      this.selector = defaults.selector;
    	      this.transforms = defaults.transforms;
        }

        public Builder setNegateCondition(@Nullable Input<Boolean> negateCondition) {
            this.negateCondition = negateCondition;
            return this;
        }

        public Builder setNegateCondition(@Nullable Boolean negateCondition) {
            this.negateCondition = Input.ofNullable(negateCondition);
            return this;
        }

        public Builder setRulesEngineMatchValue(Input<List<String>> rulesEngineMatchValue) {
            this.rulesEngineMatchValue = Objects.requireNonNull(rulesEngineMatchValue);
            return this;
        }

        public Builder setRulesEngineMatchValue(List<String> rulesEngineMatchValue) {
            this.rulesEngineMatchValue = Input.of(Objects.requireNonNull(rulesEngineMatchValue));
            return this;
        }

        public Builder setRulesEngineMatchVariable(Input<Either<String,RulesEngineMatchVariable>> rulesEngineMatchVariable) {
            this.rulesEngineMatchVariable = Objects.requireNonNull(rulesEngineMatchVariable);
            return this;
        }

        public Builder setRulesEngineMatchVariable(Either<String,RulesEngineMatchVariable> rulesEngineMatchVariable) {
            this.rulesEngineMatchVariable = Input.of(Objects.requireNonNull(rulesEngineMatchVariable));
            return this;
        }

        public Builder setRulesEngineOperator(Input<Either<String,RulesEngineOperator>> rulesEngineOperator) {
            this.rulesEngineOperator = Objects.requireNonNull(rulesEngineOperator);
            return this;
        }

        public Builder setRulesEngineOperator(Either<String,RulesEngineOperator> rulesEngineOperator) {
            this.rulesEngineOperator = Input.of(Objects.requireNonNull(rulesEngineOperator));
            return this;
        }

        public Builder setSelector(@Nullable Input<String> selector) {
            this.selector = selector;
            return this;
        }

        public Builder setSelector(@Nullable String selector) {
            this.selector = Input.ofNullable(selector);
            return this;
        }

        public Builder setTransforms(@Nullable Input<List<Either<String,Transform>>> transforms) {
            this.transforms = transforms;
            return this;
        }

        public Builder setTransforms(@Nullable List<Either<String,Transform>> transforms) {
            this.transforms = Input.ofNullable(transforms);
            return this;
        }

        public RulesEngineMatchConditionArgs build() {
            return new RulesEngineMatchConditionArgs(negateCondition, rulesEngineMatchValue, rulesEngineMatchVariable, rulesEngineOperator, selector, transforms);
        }
    }
}
