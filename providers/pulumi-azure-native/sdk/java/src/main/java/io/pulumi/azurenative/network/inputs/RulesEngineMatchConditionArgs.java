// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network.inputs;

import io.pulumi.azurenative.network.enums.RulesEngineMatchVariable;
import io.pulumi.azurenative.network.enums.RulesEngineOperator;
import io.pulumi.azurenative.network.enums.Transform;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Define a match condition
 * 
 */
public final class RulesEngineMatchConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final RulesEngineMatchConditionArgs Empty = new RulesEngineMatchConditionArgs();

    /**
     * Describes if this is negate condition or not
     * 
     */
    @Import(name="negateCondition")
      private final @Nullable Output<Boolean> negateCondition;

    public Output<Boolean> negateCondition() {
        return this.negateCondition == null ? Codegen.empty() : this.negateCondition;
    }

    /**
     * Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
     * 
     */
    @Import(name="rulesEngineMatchValue", required=true)
      private final Output<List<String>> rulesEngineMatchValue;

    public Output<List<String>> rulesEngineMatchValue() {
        return this.rulesEngineMatchValue;
    }

    /**
     * Match Variable
     * 
     */
    @Import(name="rulesEngineMatchVariable", required=true)
      private final Output<Either<String,RulesEngineMatchVariable>> rulesEngineMatchVariable;

    public Output<Either<String,RulesEngineMatchVariable>> rulesEngineMatchVariable() {
        return this.rulesEngineMatchVariable;
    }

    /**
     * Describes operator to apply to the match condition.
     * 
     */
    @Import(name="rulesEngineOperator", required=true)
      private final Output<Either<String,RulesEngineOperator>> rulesEngineOperator;

    public Output<Either<String,RulesEngineOperator>> rulesEngineOperator() {
        return this.rulesEngineOperator;
    }

    /**
     * Name of selector in RequestHeader or RequestBody to be matched
     * 
     */
    @Import(name="selector")
      private final @Nullable Output<String> selector;

    public Output<String> selector() {
        return this.selector == null ? Codegen.empty() : this.selector;
    }

    /**
     * List of transforms
     * 
     */
    @Import(name="transforms")
      private final @Nullable Output<List<Either<String,Transform>>> transforms;

    public Output<List<Either<String,Transform>>> transforms() {
        return this.transforms == null ? Codegen.empty() : this.transforms;
    }

    public RulesEngineMatchConditionArgs(
        @Nullable Output<Boolean> negateCondition,
        Output<List<String>> rulesEngineMatchValue,
        Output<Either<String,RulesEngineMatchVariable>> rulesEngineMatchVariable,
        Output<Either<String,RulesEngineOperator>> rulesEngineOperator,
        @Nullable Output<String> selector,
        @Nullable Output<List<Either<String,Transform>>> transforms) {
        this.negateCondition = negateCondition;
        this.rulesEngineMatchValue = Objects.requireNonNull(rulesEngineMatchValue, "expected parameter 'rulesEngineMatchValue' to be non-null");
        this.rulesEngineMatchVariable = Objects.requireNonNull(rulesEngineMatchVariable, "expected parameter 'rulesEngineMatchVariable' to be non-null");
        this.rulesEngineOperator = Objects.requireNonNull(rulesEngineOperator, "expected parameter 'rulesEngineOperator' to be non-null");
        this.selector = selector;
        this.transforms = transforms;
    }

    private RulesEngineMatchConditionArgs() {
        this.negateCondition = Codegen.empty();
        this.rulesEngineMatchValue = Codegen.empty();
        this.rulesEngineMatchVariable = Codegen.empty();
        this.rulesEngineOperator = Codegen.empty();
        this.selector = Codegen.empty();
        this.transforms = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesEngineMatchConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> negateCondition;
        private Output<List<String>> rulesEngineMatchValue;
        private Output<Either<String,RulesEngineMatchVariable>> rulesEngineMatchVariable;
        private Output<Either<String,RulesEngineOperator>> rulesEngineOperator;
        private @Nullable Output<String> selector;
        private @Nullable Output<List<Either<String,Transform>>> transforms;

        public Builder() {
    	      // Empty
        }

        public Builder(RulesEngineMatchConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.negateCondition = defaults.negateCondition;
    	      this.rulesEngineMatchValue = defaults.rulesEngineMatchValue;
    	      this.rulesEngineMatchVariable = defaults.rulesEngineMatchVariable;
    	      this.rulesEngineOperator = defaults.rulesEngineOperator;
    	      this.selector = defaults.selector;
    	      this.transforms = defaults.transforms;
        }

        public Builder negateCondition(@Nullable Output<Boolean> negateCondition) {
            this.negateCondition = negateCondition;
            return this;
        }
        public Builder negateCondition(@Nullable Boolean negateCondition) {
            this.negateCondition = Codegen.ofNullable(negateCondition);
            return this;
        }
        public Builder rulesEngineMatchValue(Output<List<String>> rulesEngineMatchValue) {
            this.rulesEngineMatchValue = Objects.requireNonNull(rulesEngineMatchValue);
            return this;
        }
        public Builder rulesEngineMatchValue(List<String> rulesEngineMatchValue) {
            this.rulesEngineMatchValue = Output.of(Objects.requireNonNull(rulesEngineMatchValue));
            return this;
        }
        public Builder rulesEngineMatchValue(String... rulesEngineMatchValue) {
            return rulesEngineMatchValue(List.of(rulesEngineMatchValue));
        }
        public Builder rulesEngineMatchVariable(Output<Either<String,RulesEngineMatchVariable>> rulesEngineMatchVariable) {
            this.rulesEngineMatchVariable = Objects.requireNonNull(rulesEngineMatchVariable);
            return this;
        }
        public Builder rulesEngineMatchVariable(Either<String,RulesEngineMatchVariable> rulesEngineMatchVariable) {
            this.rulesEngineMatchVariable = Output.of(Objects.requireNonNull(rulesEngineMatchVariable));
            return this;
        }
        public Builder rulesEngineOperator(Output<Either<String,RulesEngineOperator>> rulesEngineOperator) {
            this.rulesEngineOperator = Objects.requireNonNull(rulesEngineOperator);
            return this;
        }
        public Builder rulesEngineOperator(Either<String,RulesEngineOperator> rulesEngineOperator) {
            this.rulesEngineOperator = Output.of(Objects.requireNonNull(rulesEngineOperator));
            return this;
        }
        public Builder selector(@Nullable Output<String> selector) {
            this.selector = selector;
            return this;
        }
        public Builder selector(@Nullable String selector) {
            this.selector = Codegen.ofNullable(selector);
            return this;
        }
        public Builder transforms(@Nullable Output<List<Either<String,Transform>>> transforms) {
            this.transforms = transforms;
            return this;
        }
        public Builder transforms(@Nullable List<Either<String,Transform>> transforms) {
            this.transforms = Codegen.ofNullable(transforms);
            return this;
        }
        public Builder transforms(Either<String,Transform>... transforms) {
            return transforms(List.of(transforms));
        }        public RulesEngineMatchConditionArgs build() {
            return new RulesEngineMatchConditionArgs(negateCondition, rulesEngineMatchValue, rulesEngineMatchVariable, rulesEngineOperator, selector, transforms);
        }
    }
}
