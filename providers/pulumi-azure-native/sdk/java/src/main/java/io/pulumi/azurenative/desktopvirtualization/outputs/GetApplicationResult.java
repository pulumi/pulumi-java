// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.desktopvirtualization.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetApplicationResult {
    /**
     * Resource Type of Application.
     * 
     */
    private final @Nullable String applicationType;
    /**
     * Command Line Arguments for Application.
     * 
     */
    private final @Nullable String commandLineArguments;
    /**
     * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
     * 
     */
    private final String commandLineSetting;
    /**
     * Description of Application.
     * 
     */
    private final @Nullable String description;
    /**
     * Specifies a path for the executable file for the application.
     * 
     */
    private final @Nullable String filePath;
    /**
     * Friendly name of Application.
     * 
     */
    private final @Nullable String friendlyName;
    /**
     * the icon a 64 bit string as a byte array.
     * 
     */
    private final String iconContent;
    /**
     * Hash of the icon.
     * 
     */
    private final String iconHash;
    /**
     * Index of the icon.
     * 
     */
    private final @Nullable Integer iconIndex;
    /**
     * Path to icon.
     * 
     */
    private final @Nullable String iconPath;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * Specifies the package application Id for MSIX applications
     * 
     */
    private final @Nullable String msixPackageApplicationId;
    /**
     * Specifies the package family name for MSIX applications
     * 
     */
    private final @Nullable String msixPackageFamilyName;
    /**
     * The name of the resource
     * 
     */
    private final String name;
    /**
     * ObjectId of Application. (internal use)
     * 
     */
    private final String objectId;
    /**
     * Specifies whether to show the RemoteApp program in the RD Web Access server.
     * 
     */
    private final @Nullable Boolean showInPortal;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"applicationType","commandLineArguments","commandLineSetting","description","filePath","friendlyName","iconContent","iconHash","iconIndex","iconPath","id","msixPackageApplicationId","msixPackageFamilyName","name","objectId","showInPortal","type"})
    private GetApplicationResult(
        @Nullable String applicationType,
        @Nullable String commandLineArguments,
        String commandLineSetting,
        @Nullable String description,
        @Nullable String filePath,
        @Nullable String friendlyName,
        String iconContent,
        String iconHash,
        @Nullable Integer iconIndex,
        @Nullable String iconPath,
        String id,
        @Nullable String msixPackageApplicationId,
        @Nullable String msixPackageFamilyName,
        String name,
        String objectId,
        @Nullable Boolean showInPortal,
        String type) {
        this.applicationType = applicationType;
        this.commandLineArguments = commandLineArguments;
        this.commandLineSetting = Objects.requireNonNull(commandLineSetting);
        this.description = description;
        this.filePath = filePath;
        this.friendlyName = friendlyName;
        this.iconContent = Objects.requireNonNull(iconContent);
        this.iconHash = Objects.requireNonNull(iconHash);
        this.iconIndex = iconIndex;
        this.iconPath = iconPath;
        this.id = Objects.requireNonNull(id);
        this.msixPackageApplicationId = msixPackageApplicationId;
        this.msixPackageFamilyName = msixPackageFamilyName;
        this.name = Objects.requireNonNull(name);
        this.objectId = Objects.requireNonNull(objectId);
        this.showInPortal = showInPortal;
        this.type = Objects.requireNonNull(type);
    }

    /**
     * Resource Type of Application.
     * 
     */
    public Optional<String> getApplicationType() {
        return Optional.ofNullable(this.applicationType);
    }
    /**
     * Command Line Arguments for Application.
     * 
     */
    public Optional<String> getCommandLineArguments() {
        return Optional.ofNullable(this.commandLineArguments);
    }
    /**
     * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
     * 
     */
    public String getCommandLineSetting() {
        return this.commandLineSetting;
    }
    /**
     * Description of Application.
     * 
     */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * Specifies a path for the executable file for the application.
     * 
     */
    public Optional<String> getFilePath() {
        return Optional.ofNullable(this.filePath);
    }
    /**
     * Friendly name of Application.
     * 
     */
    public Optional<String> getFriendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }
    /**
     * the icon a 64 bit string as a byte array.
     * 
     */
    public String getIconContent() {
        return this.iconContent;
    }
    /**
     * Hash of the icon.
     * 
     */
    public String getIconHash() {
        return this.iconHash;
    }
    /**
     * Index of the icon.
     * 
     */
    public Optional<Integer> getIconIndex() {
        return Optional.ofNullable(this.iconIndex);
    }
    /**
     * Path to icon.
     * 
     */
    public Optional<String> getIconPath() {
        return Optional.ofNullable(this.iconPath);
    }
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * Specifies the package application Id for MSIX applications
     * 
     */
    public Optional<String> getMsixPackageApplicationId() {
        return Optional.ofNullable(this.msixPackageApplicationId);
    }
    /**
     * Specifies the package family name for MSIX applications
     * 
     */
    public Optional<String> getMsixPackageFamilyName() {
        return Optional.ofNullable(this.msixPackageFamilyName);
    }
    /**
     * The name of the resource
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * ObjectId of Application. (internal use)
     * 
     */
    public String getObjectId() {
        return this.objectId;
    }
    /**
     * Specifies whether to show the RemoteApp program in the RD Web Access server.
     * 
     */
    public Optional<Boolean> getShowInPortal() {
        return Optional.ofNullable(this.showInPortal);
    }
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String applicationType;
        private @Nullable String commandLineArguments;
        private String commandLineSetting;
        private @Nullable String description;
        private @Nullable String filePath;
        private @Nullable String friendlyName;
        private String iconContent;
        private String iconHash;
        private @Nullable Integer iconIndex;
        private @Nullable String iconPath;
        private String id;
        private @Nullable String msixPackageApplicationId;
        private @Nullable String msixPackageFamilyName;
        private String name;
        private String objectId;
        private @Nullable Boolean showInPortal;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetApplicationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationType = defaults.applicationType;
    	      this.commandLineArguments = defaults.commandLineArguments;
    	      this.commandLineSetting = defaults.commandLineSetting;
    	      this.description = defaults.description;
    	      this.filePath = defaults.filePath;
    	      this.friendlyName = defaults.friendlyName;
    	      this.iconContent = defaults.iconContent;
    	      this.iconHash = defaults.iconHash;
    	      this.iconIndex = defaults.iconIndex;
    	      this.iconPath = defaults.iconPath;
    	      this.id = defaults.id;
    	      this.msixPackageApplicationId = defaults.msixPackageApplicationId;
    	      this.msixPackageFamilyName = defaults.msixPackageFamilyName;
    	      this.name = defaults.name;
    	      this.objectId = defaults.objectId;
    	      this.showInPortal = defaults.showInPortal;
    	      this.type = defaults.type;
        }

        public Builder setApplicationType(@Nullable String applicationType) {
            this.applicationType = applicationType;
            return this;
        }

        public Builder setCommandLineArguments(@Nullable String commandLineArguments) {
            this.commandLineArguments = commandLineArguments;
            return this;
        }

        public Builder setCommandLineSetting(String commandLineSetting) {
            this.commandLineSetting = Objects.requireNonNull(commandLineSetting);
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setFilePath(@Nullable String filePath) {
            this.filePath = filePath;
            return this;
        }

        public Builder setFriendlyName(@Nullable String friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }

        public Builder setIconContent(String iconContent) {
            this.iconContent = Objects.requireNonNull(iconContent);
            return this;
        }

        public Builder setIconHash(String iconHash) {
            this.iconHash = Objects.requireNonNull(iconHash);
            return this;
        }

        public Builder setIconIndex(@Nullable Integer iconIndex) {
            this.iconIndex = iconIndex;
            return this;
        }

        public Builder setIconPath(@Nullable String iconPath) {
            this.iconPath = iconPath;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setMsixPackageApplicationId(@Nullable String msixPackageApplicationId) {
            this.msixPackageApplicationId = msixPackageApplicationId;
            return this;
        }

        public Builder setMsixPackageFamilyName(@Nullable String msixPackageFamilyName) {
            this.msixPackageFamilyName = msixPackageFamilyName;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setObjectId(String objectId) {
            this.objectId = Objects.requireNonNull(objectId);
            return this;
        }

        public Builder setShowInPortal(@Nullable Boolean showInPortal) {
            this.showInPortal = showInPortal;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetApplicationResult build() {
            return new GetApplicationResult(applicationType, commandLineArguments, commandLineSetting, description, filePath, friendlyName, iconContent, iconHash, iconIndex, iconPath, id, msixPackageApplicationId, msixPackageFamilyName, name, objectId, showInPortal, type);
        }
    }
}
