// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.consumption.outputs;

import io.pulumi.azurenative.consumption.outputs.BudgetFilterResponse;
import io.pulumi.azurenative.consumption.outputs.BudgetTimePeriodResponse;
import io.pulumi.azurenative.consumption.outputs.CurrentSpendResponse;
import io.pulumi.azurenative.consumption.outputs.ForecastSpendResponse;
import io.pulumi.azurenative.consumption.outputs.NotificationResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetBudgetResult {
    /**
     * The total amount of cost to track with the budget
     * 
     */
    private final Double amount;
    /**
     * The category of the budget, whether the budget tracks cost or usage.
     * 
     */
    private final String category;
    /**
     * The current amount of cost which is being tracked for a budget.
     * 
     */
    private final CurrentSpendResponse currentSpend;
    /**
     * eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     * 
     */
    private final @Nullable String eTag;
    /**
     * May be used to filter budgets by user-specified dimensions and/or tags.
     * 
     */
    private final @Nullable BudgetFilterResponse filter;
    /**
     * The forecasted cost which is being tracked for a budget.
     * 
     */
    private final ForecastSpendResponse forecastSpend;
    /**
     * Resource Id.
     * 
     */
    private final String id;
    /**
     * Resource name.
     * 
     */
    private final String name;
    /**
     * Dictionary of notifications associated with the budget. Budget can have up to five notifications.
     * 
     */
    private final @Nullable Map<String,NotificationResponse> notifications;
    /**
     * The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
     * 
     */
    private final String timeGrain;
    /**
     * Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
     * 
     */
    private final BudgetTimePeriodResponse timePeriod;
    /**
     * Resource type.
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"amount","category","currentSpend","eTag","filter","forecastSpend","id","name","notifications","timeGrain","timePeriod","type"})
    private GetBudgetResult(
        Double amount,
        String category,
        CurrentSpendResponse currentSpend,
        @Nullable String eTag,
        @Nullable BudgetFilterResponse filter,
        ForecastSpendResponse forecastSpend,
        String id,
        String name,
        @Nullable Map<String,NotificationResponse> notifications,
        String timeGrain,
        BudgetTimePeriodResponse timePeriod,
        String type) {
        this.amount = Objects.requireNonNull(amount);
        this.category = Objects.requireNonNull(category);
        this.currentSpend = Objects.requireNonNull(currentSpend);
        this.eTag = eTag;
        this.filter = filter;
        this.forecastSpend = Objects.requireNonNull(forecastSpend);
        this.id = Objects.requireNonNull(id);
        this.name = Objects.requireNonNull(name);
        this.notifications = notifications;
        this.timeGrain = Objects.requireNonNull(timeGrain);
        this.timePeriod = Objects.requireNonNull(timePeriod);
        this.type = Objects.requireNonNull(type);
    }

    /**
     * The total amount of cost to track with the budget
     * 
     */
    public Double getAmount() {
        return this.amount;
    }
    /**
     * The category of the budget, whether the budget tracks cost or usage.
     * 
     */
    public String getCategory() {
        return this.category;
    }
    /**
     * The current amount of cost which is being tracked for a budget.
     * 
     */
    public CurrentSpendResponse getCurrentSpend() {
        return this.currentSpend;
    }
    /**
     * eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     * 
     */
    public Optional<String> getETag() {
        return Optional.ofNullable(this.eTag);
    }
    /**
     * May be used to filter budgets by user-specified dimensions and/or tags.
     * 
     */
    public Optional<BudgetFilterResponse> getFilter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * The forecasted cost which is being tracked for a budget.
     * 
     */
    public ForecastSpendResponse getForecastSpend() {
        return this.forecastSpend;
    }
    /**
     * Resource Id.
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * Resource name.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * Dictionary of notifications associated with the budget. Budget can have up to five notifications.
     * 
     */
    public Map<String,NotificationResponse> getNotifications() {
        return this.notifications == null ? Map.of() : this.notifications;
    }
    /**
     * The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
     * 
     */
    public String getTimeGrain() {
        return this.timeGrain;
    }
    /**
     * Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
     * 
     */
    public BudgetTimePeriodResponse getTimePeriod() {
        return this.timePeriod;
    }
    /**
     * Resource type.
     * 
     */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBudgetResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double amount;
        private String category;
        private CurrentSpendResponse currentSpend;
        private @Nullable String eTag;
        private @Nullable BudgetFilterResponse filter;
        private ForecastSpendResponse forecastSpend;
        private String id;
        private String name;
        private @Nullable Map<String,NotificationResponse> notifications;
        private String timeGrain;
        private BudgetTimePeriodResponse timePeriod;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBudgetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amount = defaults.amount;
    	      this.category = defaults.category;
    	      this.currentSpend = defaults.currentSpend;
    	      this.eTag = defaults.eTag;
    	      this.filter = defaults.filter;
    	      this.forecastSpend = defaults.forecastSpend;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.timeGrain = defaults.timeGrain;
    	      this.timePeriod = defaults.timePeriod;
    	      this.type = defaults.type;
        }

        public Builder setAmount(Double amount) {
            this.amount = Objects.requireNonNull(amount);
            return this;
        }

        public Builder setCategory(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }

        public Builder setCurrentSpend(CurrentSpendResponse currentSpend) {
            this.currentSpend = Objects.requireNonNull(currentSpend);
            return this;
        }

        public Builder setETag(@Nullable String eTag) {
            this.eTag = eTag;
            return this;
        }

        public Builder setFilter(@Nullable BudgetFilterResponse filter) {
            this.filter = filter;
            return this;
        }

        public Builder setForecastSpend(ForecastSpendResponse forecastSpend) {
            this.forecastSpend = Objects.requireNonNull(forecastSpend);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNotifications(@Nullable Map<String,NotificationResponse> notifications) {
            this.notifications = notifications;
            return this;
        }

        public Builder setTimeGrain(String timeGrain) {
            this.timeGrain = Objects.requireNonNull(timeGrain);
            return this;
        }

        public Builder setTimePeriod(BudgetTimePeriodResponse timePeriod) {
            this.timePeriod = Objects.requireNonNull(timePeriod);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetBudgetResult build() {
            return new GetBudgetResult(amount, category, currentSpend, eTag, filter, forecastSpend, id, name, notifications, timeGrain, timePeriod, type);
        }
    }
}
