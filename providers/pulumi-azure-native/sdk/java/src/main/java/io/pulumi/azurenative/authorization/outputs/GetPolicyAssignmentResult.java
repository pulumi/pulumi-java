// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.authorization.outputs;

import io.pulumi.azurenative.authorization.outputs.IdentityResponse;
import io.pulumi.azurenative.authorization.outputs.NonComplianceMessageResponse;
import io.pulumi.azurenative.authorization.outputs.ParameterValuesValueResponse;
import io.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPolicyAssignmentResult {
    /**
     * This message will be part of response in case of policy violation.
     * 
     */
    private final @Nullable String description;
    /**
     * The display name of the policy assignment.
     * 
     */
    private final @Nullable String displayName;
    /**
     * The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
     * 
     */
    private final @Nullable String enforcementMode;
    /**
     * The ID of the policy assignment.
     * 
     */
    private final String id;
    /**
     * The managed identity associated with the policy assignment.
     * 
     */
    private final @Nullable IdentityResponse identity;
    /**
     * The location of the policy assignment. Only required when utilizing managed identity.
     * 
     */
    private final @Nullable String location;
    /**
     * The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
     * 
     */
    private final @Nullable Object metadata;
    /**
     * The name of the policy assignment.
     * 
     */
    private final String name;
    /**
     * The messages that describe why a resource is non-compliant with the policy.
     * 
     */
    private final @Nullable List<NonComplianceMessageResponse> nonComplianceMessages;
    /**
     * The policy's excluded scopes.
     * 
     */
    private final @Nullable List<String> notScopes;
    /**
     * The parameter values for the assigned policy rule. The keys are the parameter names.
     * 
     */
    private final @Nullable Map<String,ParameterValuesValueResponse> parameters;
    /**
     * The ID of the policy definition or policy set definition being assigned.
     * 
     */
    private final @Nullable String policyDefinitionId;
    /**
     * The scope for the policy assignment.
     * 
     */
    private final String scope;
    /**
     * The type of the policy assignment.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetPolicyAssignmentResult(
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("displayName") @Nullable String displayName,
        @CustomType.Parameter("enforcementMode") @Nullable String enforcementMode,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identity") @Nullable IdentityResponse identity,
        @CustomType.Parameter("location") @Nullable String location,
        @CustomType.Parameter("metadata") @Nullable Object metadata,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nonComplianceMessages") @Nullable List<NonComplianceMessageResponse> nonComplianceMessages,
        @CustomType.Parameter("notScopes") @Nullable List<String> notScopes,
        @CustomType.Parameter("parameters") @Nullable Map<String,ParameterValuesValueResponse> parameters,
        @CustomType.Parameter("policyDefinitionId") @Nullable String policyDefinitionId,
        @CustomType.Parameter("scope") String scope,
        @CustomType.Parameter("type") String type) {
        this.description = description;
        this.displayName = displayName;
        this.enforcementMode = enforcementMode;
        this.id = id;
        this.identity = identity;
        this.location = location;
        this.metadata = metadata;
        this.name = name;
        this.nonComplianceMessages = nonComplianceMessages;
        this.notScopes = notScopes;
        this.parameters = parameters;
        this.policyDefinitionId = policyDefinitionId;
        this.scope = scope;
        this.type = type;
    }

    /**
     * This message will be part of response in case of policy violation.
     * 
    */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * The display name of the policy assignment.
     * 
    */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
     * 
    */
    public Optional<String> enforcementMode() {
        return Optional.ofNullable(this.enforcementMode);
    }
    /**
     * The ID of the policy assignment.
     * 
    */
    public String id() {
        return this.id;
    }
    /**
     * The managed identity associated with the policy assignment.
     * 
    */
    public Optional<IdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * The location of the policy assignment. Only required when utilizing managed identity.
     * 
    */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
     * 
    */
    public Optional<Object> metadata() {
        return Optional.ofNullable(this.metadata);
    }
    /**
     * The name of the policy assignment.
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * The messages that describe why a resource is non-compliant with the policy.
     * 
    */
    public List<NonComplianceMessageResponse> nonComplianceMessages() {
        return this.nonComplianceMessages == null ? List.of() : this.nonComplianceMessages;
    }
    /**
     * The policy's excluded scopes.
     * 
    */
    public List<String> notScopes() {
        return this.notScopes == null ? List.of() : this.notScopes;
    }
    /**
     * The parameter values for the assigned policy rule. The keys are the parameter names.
     * 
    */
    public Map<String,ParameterValuesValueResponse> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * The ID of the policy definition or policy set definition being assigned.
     * 
    */
    public Optional<String> policyDefinitionId() {
        return Optional.ofNullable(this.policyDefinitionId);
    }
    /**
     * The scope for the policy assignment.
     * 
    */
    public String scope() {
        return this.scope;
    }
    /**
     * The type of the policy assignment.
     * 
    */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyAssignmentResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable String enforcementMode;
        private String id;
        private @Nullable IdentityResponse identity;
        private @Nullable String location;
        private @Nullable Object metadata;
        private String name;
        private @Nullable List<NonComplianceMessageResponse> nonComplianceMessages;
        private @Nullable List<String> notScopes;
        private @Nullable Map<String,ParameterValuesValueResponse> parameters;
        private @Nullable String policyDefinitionId;
        private String scope;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPolicyAssignmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enforcementMode = defaults.enforcementMode;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.nonComplianceMessages = defaults.nonComplianceMessages;
    	      this.notScopes = defaults.notScopes;
    	      this.parameters = defaults.parameters;
    	      this.policyDefinitionId = defaults.policyDefinitionId;
    	      this.scope = defaults.scope;
    	      this.type = defaults.type;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder enforcementMode(@Nullable String enforcementMode) {
            this.enforcementMode = enforcementMode;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identity(@Nullable IdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        public Builder metadata(@Nullable Object metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nonComplianceMessages(@Nullable List<NonComplianceMessageResponse> nonComplianceMessages) {
            this.nonComplianceMessages = nonComplianceMessages;
            return this;
        }
        public Builder nonComplianceMessages(NonComplianceMessageResponse... nonComplianceMessages) {
            return nonComplianceMessages(List.of(nonComplianceMessages));
        }
        public Builder notScopes(@Nullable List<String> notScopes) {
            this.notScopes = notScopes;
            return this;
        }
        public Builder notScopes(String... notScopes) {
            return notScopes(List.of(notScopes));
        }
        public Builder parameters(@Nullable Map<String,ParameterValuesValueResponse> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder policyDefinitionId(@Nullable String policyDefinitionId) {
            this.policyDefinitionId = policyDefinitionId;
            return this;
        }
        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetPolicyAssignmentResult build() {
            return new GetPolicyAssignmentResult(description, displayName, enforcementMode, id, identity, location, metadata, name, nonComplianceMessages, notScopes, parameters, policyDefinitionId, scope, type);
        }
    }
}
