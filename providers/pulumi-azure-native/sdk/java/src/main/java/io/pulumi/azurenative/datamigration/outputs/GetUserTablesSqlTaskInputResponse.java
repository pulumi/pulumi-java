// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.outputs;

import io.pulumi.azurenative.datamigration.outputs.SqlConnectionInfoResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetUserTablesSqlTaskInputResponse {
    /**
     * Connection information for SQL Server
     * 
     */
    private final SqlConnectionInfoResponse connectionInfo;
    /**
     * List of database names to collect tables for
     * 
     */
    private final List<String> selectedDatabases;

    @OutputCustomType.Constructor
    private GetUserTablesSqlTaskInputResponse(
        @OutputCustomType.Parameter("connectionInfo") SqlConnectionInfoResponse connectionInfo,
        @OutputCustomType.Parameter("selectedDatabases") List<String> selectedDatabases) {
        this.connectionInfo = connectionInfo;
        this.selectedDatabases = selectedDatabases;
    }

    /**
     * Connection information for SQL Server
     * 
    */
    public SqlConnectionInfoResponse getConnectionInfo() {
        return this.connectionInfo;
    }
    /**
     * List of database names to collect tables for
     * 
    */
    public List<String> getSelectedDatabases() {
        return this.selectedDatabases;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserTablesSqlTaskInputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlConnectionInfoResponse connectionInfo;
        private List<String> selectedDatabases;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserTablesSqlTaskInputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionInfo = defaults.connectionInfo;
    	      this.selectedDatabases = defaults.selectedDatabases;
        }

        public Builder setConnectionInfo(SqlConnectionInfoResponse connectionInfo) {
            this.connectionInfo = Objects.requireNonNull(connectionInfo);
            return this;
        }

        public Builder setSelectedDatabases(List<String> selectedDatabases) {
            this.selectedDatabases = Objects.requireNonNull(selectedDatabases);
            return this;
        }
        public GetUserTablesSqlTaskInputResponse build() {
            return new GetUserTablesSqlTaskInputResponse(connectionInfo, selectedDatabases);
        }
    }
}
