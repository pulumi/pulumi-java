// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web.inputs;

import io.pulumi.azurenative.web.inputs.ApiDefinitionInfoResponse;
import io.pulumi.azurenative.web.inputs.ApiManagementConfigResponse;
import io.pulumi.azurenative.web.inputs.AutoHealRulesResponse;
import io.pulumi.azurenative.web.inputs.AzureStorageInfoValueResponse;
import io.pulumi.azurenative.web.inputs.ConnStringInfoResponse;
import io.pulumi.azurenative.web.inputs.CorsSettingsResponse;
import io.pulumi.azurenative.web.inputs.ExperimentsResponse;
import io.pulumi.azurenative.web.inputs.HandlerMappingResponse;
import io.pulumi.azurenative.web.inputs.IpSecurityRestrictionResponse;
import io.pulumi.azurenative.web.inputs.NameValuePairResponse;
import io.pulumi.azurenative.web.inputs.PushSettingsResponse;
import io.pulumi.azurenative.web.inputs.SiteLimitsResponse;
import io.pulumi.azurenative.web.inputs.SiteMachineKeyResponse;
import io.pulumi.azurenative.web.inputs.VirtualApplicationResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SiteConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final SiteConfigResponse Empty = new SiteConfigResponse();

    @InputImport(name="acrUseManagedIdentityCreds")
    private final @Nullable Boolean acrUseManagedIdentityCreds;

    public Optional<Boolean> getAcrUseManagedIdentityCreds() {
        return this.acrUseManagedIdentityCreds == null ? Optional.empty() : Optional.ofNullable(this.acrUseManagedIdentityCreds);
    }

    @InputImport(name="acrUserManagedIdentityID")
    private final @Nullable String acrUserManagedIdentityID;

    public Optional<String> getAcrUserManagedIdentityID() {
        return this.acrUserManagedIdentityID == null ? Optional.empty() : Optional.ofNullable(this.acrUserManagedIdentityID);
    }

    @InputImport(name="alwaysOn")
    private final @Nullable Boolean alwaysOn;

    public Optional<Boolean> getAlwaysOn() {
        return this.alwaysOn == null ? Optional.empty() : Optional.ofNullable(this.alwaysOn);
    }

    @InputImport(name="apiDefinition")
    private final @Nullable ApiDefinitionInfoResponse apiDefinition;

    public Optional<ApiDefinitionInfoResponse> getApiDefinition() {
        return this.apiDefinition == null ? Optional.empty() : Optional.ofNullable(this.apiDefinition);
    }

    @InputImport(name="apiManagementConfig")
    private final @Nullable ApiManagementConfigResponse apiManagementConfig;

    public Optional<ApiManagementConfigResponse> getApiManagementConfig() {
        return this.apiManagementConfig == null ? Optional.empty() : Optional.ofNullable(this.apiManagementConfig);
    }

    @InputImport(name="appCommandLine")
    private final @Nullable String appCommandLine;

    public Optional<String> getAppCommandLine() {
        return this.appCommandLine == null ? Optional.empty() : Optional.ofNullable(this.appCommandLine);
    }

    @InputImport(name="appSettings")
    private final @Nullable List<NameValuePairResponse> appSettings;

    public List<NameValuePairResponse> getAppSettings() {
        return this.appSettings == null ? List.of() : this.appSettings;
    }

    @InputImport(name="autoHealEnabled")
    private final @Nullable Boolean autoHealEnabled;

    public Optional<Boolean> getAutoHealEnabled() {
        return this.autoHealEnabled == null ? Optional.empty() : Optional.ofNullable(this.autoHealEnabled);
    }

    @InputImport(name="autoHealRules")
    private final @Nullable AutoHealRulesResponse autoHealRules;

    public Optional<AutoHealRulesResponse> getAutoHealRules() {
        return this.autoHealRules == null ? Optional.empty() : Optional.ofNullable(this.autoHealRules);
    }

    @InputImport(name="autoSwapSlotName")
    private final @Nullable String autoSwapSlotName;

    public Optional<String> getAutoSwapSlotName() {
        return this.autoSwapSlotName == null ? Optional.empty() : Optional.ofNullable(this.autoSwapSlotName);
    }

    @InputImport(name="azureStorageAccounts")
    private final @Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts;

    public Map<String,AzureStorageInfoValueResponse> getAzureStorageAccounts() {
        return this.azureStorageAccounts == null ? Map.of() : this.azureStorageAccounts;
    }

    @InputImport(name="connectionStrings")
    private final @Nullable List<ConnStringInfoResponse> connectionStrings;

    public List<ConnStringInfoResponse> getConnectionStrings() {
        return this.connectionStrings == null ? List.of() : this.connectionStrings;
    }

    @InputImport(name="cors")
    private final @Nullable CorsSettingsResponse cors;

    public Optional<CorsSettingsResponse> getCors() {
        return this.cors == null ? Optional.empty() : Optional.ofNullable(this.cors);
    }

    @InputImport(name="defaultDocuments")
    private final @Nullable List<String> defaultDocuments;

    public List<String> getDefaultDocuments() {
        return this.defaultDocuments == null ? List.of() : this.defaultDocuments;
    }

    @InputImport(name="detailedErrorLoggingEnabled")
    private final @Nullable Boolean detailedErrorLoggingEnabled;

    public Optional<Boolean> getDetailedErrorLoggingEnabled() {
        return this.detailedErrorLoggingEnabled == null ? Optional.empty() : Optional.ofNullable(this.detailedErrorLoggingEnabled);
    }

    @InputImport(name="documentRoot")
    private final @Nullable String documentRoot;

    public Optional<String> getDocumentRoot() {
        return this.documentRoot == null ? Optional.empty() : Optional.ofNullable(this.documentRoot);
    }

    @InputImport(name="experiments")
    private final @Nullable ExperimentsResponse experiments;

    public Optional<ExperimentsResponse> getExperiments() {
        return this.experiments == null ? Optional.empty() : Optional.ofNullable(this.experiments);
    }

    @InputImport(name="ftpsState")
    private final @Nullable String ftpsState;

    public Optional<String> getFtpsState() {
        return this.ftpsState == null ? Optional.empty() : Optional.ofNullable(this.ftpsState);
    }

    @InputImport(name="functionAppScaleLimit")
    private final @Nullable Integer functionAppScaleLimit;

    public Optional<Integer> getFunctionAppScaleLimit() {
        return this.functionAppScaleLimit == null ? Optional.empty() : Optional.ofNullable(this.functionAppScaleLimit);
    }

    @InputImport(name="functionsRuntimeScaleMonitoringEnabled")
    private final @Nullable Boolean functionsRuntimeScaleMonitoringEnabled;

    public Optional<Boolean> getFunctionsRuntimeScaleMonitoringEnabled() {
        return this.functionsRuntimeScaleMonitoringEnabled == null ? Optional.empty() : Optional.ofNullable(this.functionsRuntimeScaleMonitoringEnabled);
    }

    @InputImport(name="handlerMappings")
    private final @Nullable List<HandlerMappingResponse> handlerMappings;

    public List<HandlerMappingResponse> getHandlerMappings() {
        return this.handlerMappings == null ? List.of() : this.handlerMappings;
    }

    @InputImport(name="healthCheckPath")
    private final @Nullable String healthCheckPath;

    public Optional<String> getHealthCheckPath() {
        return this.healthCheckPath == null ? Optional.empty() : Optional.ofNullable(this.healthCheckPath);
    }

    @InputImport(name="http20Enabled")
    private final @Nullable Boolean http20Enabled;

    public Optional<Boolean> getHttp20Enabled() {
        return this.http20Enabled == null ? Optional.empty() : Optional.ofNullable(this.http20Enabled);
    }

    @InputImport(name="httpLoggingEnabled")
    private final @Nullable Boolean httpLoggingEnabled;

    public Optional<Boolean> getHttpLoggingEnabled() {
        return this.httpLoggingEnabled == null ? Optional.empty() : Optional.ofNullable(this.httpLoggingEnabled);
    }

    @InputImport(name="ipSecurityRestrictions")
    private final @Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions;

    public List<IpSecurityRestrictionResponse> getIpSecurityRestrictions() {
        return this.ipSecurityRestrictions == null ? List.of() : this.ipSecurityRestrictions;
    }

    @InputImport(name="javaContainer")
    private final @Nullable String javaContainer;

    public Optional<String> getJavaContainer() {
        return this.javaContainer == null ? Optional.empty() : Optional.ofNullable(this.javaContainer);
    }

    @InputImport(name="javaContainerVersion")
    private final @Nullable String javaContainerVersion;

    public Optional<String> getJavaContainerVersion() {
        return this.javaContainerVersion == null ? Optional.empty() : Optional.ofNullable(this.javaContainerVersion);
    }

    @InputImport(name="javaVersion")
    private final @Nullable String javaVersion;

    public Optional<String> getJavaVersion() {
        return this.javaVersion == null ? Optional.empty() : Optional.ofNullable(this.javaVersion);
    }

    @InputImport(name="keyVaultReferenceIdentity")
    private final @Nullable String keyVaultReferenceIdentity;

    public Optional<String> getKeyVaultReferenceIdentity() {
        return this.keyVaultReferenceIdentity == null ? Optional.empty() : Optional.ofNullable(this.keyVaultReferenceIdentity);
    }

    @InputImport(name="limits")
    private final @Nullable SiteLimitsResponse limits;

    public Optional<SiteLimitsResponse> getLimits() {
        return this.limits == null ? Optional.empty() : Optional.ofNullable(this.limits);
    }

    @InputImport(name="linuxFxVersion")
    private final @Nullable String linuxFxVersion;

    public Optional<String> getLinuxFxVersion() {
        return this.linuxFxVersion == null ? Optional.empty() : Optional.ofNullable(this.linuxFxVersion);
    }

    @InputImport(name="loadBalancing")
    private final @Nullable String loadBalancing;

    public Optional<String> getLoadBalancing() {
        return this.loadBalancing == null ? Optional.empty() : Optional.ofNullable(this.loadBalancing);
    }

    @InputImport(name="localMySqlEnabled")
    private final @Nullable Boolean localMySqlEnabled;

    public Optional<Boolean> getLocalMySqlEnabled() {
        return this.localMySqlEnabled == null ? Optional.empty() : Optional.ofNullable(this.localMySqlEnabled);
    }

    @InputImport(name="logsDirectorySizeLimit")
    private final @Nullable Integer logsDirectorySizeLimit;

    public Optional<Integer> getLogsDirectorySizeLimit() {
        return this.logsDirectorySizeLimit == null ? Optional.empty() : Optional.ofNullable(this.logsDirectorySizeLimit);
    }

    @InputImport(name="machineKey", required=true)
    private final SiteMachineKeyResponse machineKey;

    public SiteMachineKeyResponse getMachineKey() {
        return this.machineKey;
    }

    @InputImport(name="managedPipelineMode")
    private final @Nullable String managedPipelineMode;

    public Optional<String> getManagedPipelineMode() {
        return this.managedPipelineMode == null ? Optional.empty() : Optional.ofNullable(this.managedPipelineMode);
    }

    @InputImport(name="managedServiceIdentityId")
    private final @Nullable Integer managedServiceIdentityId;

    public Optional<Integer> getManagedServiceIdentityId() {
        return this.managedServiceIdentityId == null ? Optional.empty() : Optional.ofNullable(this.managedServiceIdentityId);
    }

    @InputImport(name="minTlsVersion")
    private final @Nullable String minTlsVersion;

    public Optional<String> getMinTlsVersion() {
        return this.minTlsVersion == null ? Optional.empty() : Optional.ofNullable(this.minTlsVersion);
    }

    @InputImport(name="minimumElasticInstanceCount")
    private final @Nullable Integer minimumElasticInstanceCount;

    public Optional<Integer> getMinimumElasticInstanceCount() {
        return this.minimumElasticInstanceCount == null ? Optional.empty() : Optional.ofNullable(this.minimumElasticInstanceCount);
    }

    @InputImport(name="netFrameworkVersion")
    private final @Nullable String netFrameworkVersion;

    public Optional<String> getNetFrameworkVersion() {
        return this.netFrameworkVersion == null ? Optional.empty() : Optional.ofNullable(this.netFrameworkVersion);
    }

    @InputImport(name="nodeVersion")
    private final @Nullable String nodeVersion;

    public Optional<String> getNodeVersion() {
        return this.nodeVersion == null ? Optional.empty() : Optional.ofNullable(this.nodeVersion);
    }

    @InputImport(name="numberOfWorkers")
    private final @Nullable Integer numberOfWorkers;

    public Optional<Integer> getNumberOfWorkers() {
        return this.numberOfWorkers == null ? Optional.empty() : Optional.ofNullable(this.numberOfWorkers);
    }

    @InputImport(name="phpVersion")
    private final @Nullable String phpVersion;

    public Optional<String> getPhpVersion() {
        return this.phpVersion == null ? Optional.empty() : Optional.ofNullable(this.phpVersion);
    }

    @InputImport(name="powerShellVersion")
    private final @Nullable String powerShellVersion;

    public Optional<String> getPowerShellVersion() {
        return this.powerShellVersion == null ? Optional.empty() : Optional.ofNullable(this.powerShellVersion);
    }

    @InputImport(name="preWarmedInstanceCount")
    private final @Nullable Integer preWarmedInstanceCount;

    public Optional<Integer> getPreWarmedInstanceCount() {
        return this.preWarmedInstanceCount == null ? Optional.empty() : Optional.ofNullable(this.preWarmedInstanceCount);
    }

    @InputImport(name="publicNetworkAccess")
    private final @Nullable String publicNetworkAccess;

    public Optional<String> getPublicNetworkAccess() {
        return this.publicNetworkAccess == null ? Optional.empty() : Optional.ofNullable(this.publicNetworkAccess);
    }

    @InputImport(name="publishingUsername")
    private final @Nullable String publishingUsername;

    public Optional<String> getPublishingUsername() {
        return this.publishingUsername == null ? Optional.empty() : Optional.ofNullable(this.publishingUsername);
    }

    @InputImport(name="push")
    private final @Nullable PushSettingsResponse push;

    public Optional<PushSettingsResponse> getPush() {
        return this.push == null ? Optional.empty() : Optional.ofNullable(this.push);
    }

    @InputImport(name="pythonVersion")
    private final @Nullable String pythonVersion;

    public Optional<String> getPythonVersion() {
        return this.pythonVersion == null ? Optional.empty() : Optional.ofNullable(this.pythonVersion);
    }

    @InputImport(name="remoteDebuggingEnabled")
    private final @Nullable Boolean remoteDebuggingEnabled;

    public Optional<Boolean> getRemoteDebuggingEnabled() {
        return this.remoteDebuggingEnabled == null ? Optional.empty() : Optional.ofNullable(this.remoteDebuggingEnabled);
    }

    @InputImport(name="remoteDebuggingVersion")
    private final @Nullable String remoteDebuggingVersion;

    public Optional<String> getRemoteDebuggingVersion() {
        return this.remoteDebuggingVersion == null ? Optional.empty() : Optional.ofNullable(this.remoteDebuggingVersion);
    }

    @InputImport(name="requestTracingEnabled")
    private final @Nullable Boolean requestTracingEnabled;

    public Optional<Boolean> getRequestTracingEnabled() {
        return this.requestTracingEnabled == null ? Optional.empty() : Optional.ofNullable(this.requestTracingEnabled);
    }

    @InputImport(name="requestTracingExpirationTime")
    private final @Nullable String requestTracingExpirationTime;

    public Optional<String> getRequestTracingExpirationTime() {
        return this.requestTracingExpirationTime == null ? Optional.empty() : Optional.ofNullable(this.requestTracingExpirationTime);
    }

    @InputImport(name="scmIpSecurityRestrictions")
    private final @Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions;

    public List<IpSecurityRestrictionResponse> getScmIpSecurityRestrictions() {
        return this.scmIpSecurityRestrictions == null ? List.of() : this.scmIpSecurityRestrictions;
    }

    @InputImport(name="scmIpSecurityRestrictionsUseMain")
    private final @Nullable Boolean scmIpSecurityRestrictionsUseMain;

    public Optional<Boolean> getScmIpSecurityRestrictionsUseMain() {
        return this.scmIpSecurityRestrictionsUseMain == null ? Optional.empty() : Optional.ofNullable(this.scmIpSecurityRestrictionsUseMain);
    }

    @InputImport(name="scmMinTlsVersion")
    private final @Nullable String scmMinTlsVersion;

    public Optional<String> getScmMinTlsVersion() {
        return this.scmMinTlsVersion == null ? Optional.empty() : Optional.ofNullable(this.scmMinTlsVersion);
    }

    @InputImport(name="scmType")
    private final @Nullable String scmType;

    public Optional<String> getScmType() {
        return this.scmType == null ? Optional.empty() : Optional.ofNullable(this.scmType);
    }

    @InputImport(name="tracingOptions")
    private final @Nullable String tracingOptions;

    public Optional<String> getTracingOptions() {
        return this.tracingOptions == null ? Optional.empty() : Optional.ofNullable(this.tracingOptions);
    }

    @InputImport(name="use32BitWorkerProcess")
    private final @Nullable Boolean use32BitWorkerProcess;

    public Optional<Boolean> getUse32BitWorkerProcess() {
        return this.use32BitWorkerProcess == null ? Optional.empty() : Optional.ofNullable(this.use32BitWorkerProcess);
    }

    @InputImport(name="virtualApplications")
    private final @Nullable List<VirtualApplicationResponse> virtualApplications;

    public List<VirtualApplicationResponse> getVirtualApplications() {
        return this.virtualApplications == null ? List.of() : this.virtualApplications;
    }

    @InputImport(name="vnetName")
    private final @Nullable String vnetName;

    public Optional<String> getVnetName() {
        return this.vnetName == null ? Optional.empty() : Optional.ofNullable(this.vnetName);
    }

    @InputImport(name="vnetPrivatePortsCount")
    private final @Nullable Integer vnetPrivatePortsCount;

    public Optional<Integer> getVnetPrivatePortsCount() {
        return this.vnetPrivatePortsCount == null ? Optional.empty() : Optional.ofNullable(this.vnetPrivatePortsCount);
    }

    @InputImport(name="vnetRouteAllEnabled")
    private final @Nullable Boolean vnetRouteAllEnabled;

    public Optional<Boolean> getVnetRouteAllEnabled() {
        return this.vnetRouteAllEnabled == null ? Optional.empty() : Optional.ofNullable(this.vnetRouteAllEnabled);
    }

    @InputImport(name="webSocketsEnabled")
    private final @Nullable Boolean webSocketsEnabled;

    public Optional<Boolean> getWebSocketsEnabled() {
        return this.webSocketsEnabled == null ? Optional.empty() : Optional.ofNullable(this.webSocketsEnabled);
    }

    @InputImport(name="websiteTimeZone")
    private final @Nullable String websiteTimeZone;

    public Optional<String> getWebsiteTimeZone() {
        return this.websiteTimeZone == null ? Optional.empty() : Optional.ofNullable(this.websiteTimeZone);
    }

    @InputImport(name="windowsFxVersion")
    private final @Nullable String windowsFxVersion;

    public Optional<String> getWindowsFxVersion() {
        return this.windowsFxVersion == null ? Optional.empty() : Optional.ofNullable(this.windowsFxVersion);
    }

    @InputImport(name="xManagedServiceIdentityId")
    private final @Nullable Integer xManagedServiceIdentityId;

    public Optional<Integer> getXManagedServiceIdentityId() {
        return this.xManagedServiceIdentityId == null ? Optional.empty() : Optional.ofNullable(this.xManagedServiceIdentityId);
    }

    public SiteConfigResponse(
        @Nullable Boolean acrUseManagedIdentityCreds,
        @Nullable String acrUserManagedIdentityID,
        @Nullable Boolean alwaysOn,
        @Nullable ApiDefinitionInfoResponse apiDefinition,
        @Nullable ApiManagementConfigResponse apiManagementConfig,
        @Nullable String appCommandLine,
        @Nullable List<NameValuePairResponse> appSettings,
        @Nullable Boolean autoHealEnabled,
        @Nullable AutoHealRulesResponse autoHealRules,
        @Nullable String autoSwapSlotName,
        @Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts,
        @Nullable List<ConnStringInfoResponse> connectionStrings,
        @Nullable CorsSettingsResponse cors,
        @Nullable List<String> defaultDocuments,
        @Nullable Boolean detailedErrorLoggingEnabled,
        @Nullable String documentRoot,
        @Nullable ExperimentsResponse experiments,
        @Nullable String ftpsState,
        @Nullable Integer functionAppScaleLimit,
        @Nullable Boolean functionsRuntimeScaleMonitoringEnabled,
        @Nullable List<HandlerMappingResponse> handlerMappings,
        @Nullable String healthCheckPath,
        @Nullable Boolean http20Enabled,
        @Nullable Boolean httpLoggingEnabled,
        @Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions,
        @Nullable String javaContainer,
        @Nullable String javaContainerVersion,
        @Nullable String javaVersion,
        @Nullable String keyVaultReferenceIdentity,
        @Nullable SiteLimitsResponse limits,
        @Nullable String linuxFxVersion,
        @Nullable String loadBalancing,
        @Nullable Boolean localMySqlEnabled,
        @Nullable Integer logsDirectorySizeLimit,
        SiteMachineKeyResponse machineKey,
        @Nullable String managedPipelineMode,
        @Nullable Integer managedServiceIdentityId,
        @Nullable String minTlsVersion,
        @Nullable Integer minimumElasticInstanceCount,
        @Nullable String netFrameworkVersion,
        @Nullable String nodeVersion,
        @Nullable Integer numberOfWorkers,
        @Nullable String phpVersion,
        @Nullable String powerShellVersion,
        @Nullable Integer preWarmedInstanceCount,
        @Nullable String publicNetworkAccess,
        @Nullable String publishingUsername,
        @Nullable PushSettingsResponse push,
        @Nullable String pythonVersion,
        @Nullable Boolean remoteDebuggingEnabled,
        @Nullable String remoteDebuggingVersion,
        @Nullable Boolean requestTracingEnabled,
        @Nullable String requestTracingExpirationTime,
        @Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions,
        @Nullable Boolean scmIpSecurityRestrictionsUseMain,
        @Nullable String scmMinTlsVersion,
        @Nullable String scmType,
        @Nullable String tracingOptions,
        @Nullable Boolean use32BitWorkerProcess,
        @Nullable List<VirtualApplicationResponse> virtualApplications,
        @Nullable String vnetName,
        @Nullable Integer vnetPrivatePortsCount,
        @Nullable Boolean vnetRouteAllEnabled,
        @Nullable Boolean webSocketsEnabled,
        @Nullable String websiteTimeZone,
        @Nullable String windowsFxVersion,
        @Nullable Integer xManagedServiceIdentityId) {
        this.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
        this.acrUserManagedIdentityID = acrUserManagedIdentityID;
        this.alwaysOn = alwaysOn;
        this.apiDefinition = apiDefinition;
        this.apiManagementConfig = apiManagementConfig;
        this.appCommandLine = appCommandLine;
        this.appSettings = appSettings;
        this.autoHealEnabled = autoHealEnabled;
        this.autoHealRules = autoHealRules;
        this.autoSwapSlotName = autoSwapSlotName;
        this.azureStorageAccounts = azureStorageAccounts;
        this.connectionStrings = connectionStrings;
        this.cors = cors;
        this.defaultDocuments = defaultDocuments;
        this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
        this.documentRoot = documentRoot;
        this.experiments = experiments;
        this.ftpsState = ftpsState;
        this.functionAppScaleLimit = functionAppScaleLimit;
        this.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
        this.handlerMappings = handlerMappings;
        this.healthCheckPath = healthCheckPath;
        this.http20Enabled = http20Enabled == null ? true : http20Enabled;
        this.httpLoggingEnabled = httpLoggingEnabled;
        this.ipSecurityRestrictions = ipSecurityRestrictions;
        this.javaContainer = javaContainer;
        this.javaContainerVersion = javaContainerVersion;
        this.javaVersion = javaVersion;
        this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
        this.limits = limits;
        this.linuxFxVersion = linuxFxVersion;
        this.loadBalancing = loadBalancing;
        this.localMySqlEnabled = localMySqlEnabled == null ? false : localMySqlEnabled;
        this.logsDirectorySizeLimit = logsDirectorySizeLimit;
        this.machineKey = Objects.requireNonNull(machineKey, "expected parameter 'machineKey' to be non-null");
        this.managedPipelineMode = managedPipelineMode;
        this.managedServiceIdentityId = managedServiceIdentityId;
        this.minTlsVersion = minTlsVersion;
        this.minimumElasticInstanceCount = minimumElasticInstanceCount;
        this.netFrameworkVersion = netFrameworkVersion == null ? "v4.6" : netFrameworkVersion;
        this.nodeVersion = nodeVersion;
        this.numberOfWorkers = numberOfWorkers;
        this.phpVersion = phpVersion;
        this.powerShellVersion = powerShellVersion;
        this.preWarmedInstanceCount = preWarmedInstanceCount;
        this.publicNetworkAccess = publicNetworkAccess;
        this.publishingUsername = publishingUsername;
        this.push = push;
        this.pythonVersion = pythonVersion;
        this.remoteDebuggingEnabled = remoteDebuggingEnabled;
        this.remoteDebuggingVersion = remoteDebuggingVersion;
        this.requestTracingEnabled = requestTracingEnabled;
        this.requestTracingExpirationTime = requestTracingExpirationTime;
        this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
        this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
        this.scmMinTlsVersion = scmMinTlsVersion;
        this.scmType = scmType;
        this.tracingOptions = tracingOptions;
        this.use32BitWorkerProcess = use32BitWorkerProcess;
        this.virtualApplications = virtualApplications;
        this.vnetName = vnetName;
        this.vnetPrivatePortsCount = vnetPrivatePortsCount;
        this.vnetRouteAllEnabled = vnetRouteAllEnabled;
        this.webSocketsEnabled = webSocketsEnabled;
        this.websiteTimeZone = websiteTimeZone;
        this.windowsFxVersion = windowsFxVersion;
        this.xManagedServiceIdentityId = xManagedServiceIdentityId;
    }

    private SiteConfigResponse() {
        this.acrUseManagedIdentityCreds = null;
        this.acrUserManagedIdentityID = null;
        this.alwaysOn = null;
        this.apiDefinition = null;
        this.apiManagementConfig = null;
        this.appCommandLine = null;
        this.appSettings = List.of();
        this.autoHealEnabled = null;
        this.autoHealRules = null;
        this.autoSwapSlotName = null;
        this.azureStorageAccounts = Map.of();
        this.connectionStrings = List.of();
        this.cors = null;
        this.defaultDocuments = List.of();
        this.detailedErrorLoggingEnabled = null;
        this.documentRoot = null;
        this.experiments = null;
        this.ftpsState = null;
        this.functionAppScaleLimit = null;
        this.functionsRuntimeScaleMonitoringEnabled = null;
        this.handlerMappings = List.of();
        this.healthCheckPath = null;
        this.http20Enabled = null;
        this.httpLoggingEnabled = null;
        this.ipSecurityRestrictions = List.of();
        this.javaContainer = null;
        this.javaContainerVersion = null;
        this.javaVersion = null;
        this.keyVaultReferenceIdentity = null;
        this.limits = null;
        this.linuxFxVersion = null;
        this.loadBalancing = null;
        this.localMySqlEnabled = null;
        this.logsDirectorySizeLimit = null;
        this.machineKey = null;
        this.managedPipelineMode = null;
        this.managedServiceIdentityId = null;
        this.minTlsVersion = null;
        this.minimumElasticInstanceCount = null;
        this.netFrameworkVersion = null;
        this.nodeVersion = null;
        this.numberOfWorkers = null;
        this.phpVersion = null;
        this.powerShellVersion = null;
        this.preWarmedInstanceCount = null;
        this.publicNetworkAccess = null;
        this.publishingUsername = null;
        this.push = null;
        this.pythonVersion = null;
        this.remoteDebuggingEnabled = null;
        this.remoteDebuggingVersion = null;
        this.requestTracingEnabled = null;
        this.requestTracingExpirationTime = null;
        this.scmIpSecurityRestrictions = List.of();
        this.scmIpSecurityRestrictionsUseMain = null;
        this.scmMinTlsVersion = null;
        this.scmType = null;
        this.tracingOptions = null;
        this.use32BitWorkerProcess = null;
        this.virtualApplications = List.of();
        this.vnetName = null;
        this.vnetPrivatePortsCount = null;
        this.vnetRouteAllEnabled = null;
        this.webSocketsEnabled = null;
        this.websiteTimeZone = null;
        this.windowsFxVersion = null;
        this.xManagedServiceIdentityId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SiteConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean acrUseManagedIdentityCreds;
        private @Nullable String acrUserManagedIdentityID;
        private @Nullable Boolean alwaysOn;
        private @Nullable ApiDefinitionInfoResponse apiDefinition;
        private @Nullable ApiManagementConfigResponse apiManagementConfig;
        private @Nullable String appCommandLine;
        private @Nullable List<NameValuePairResponse> appSettings;
        private @Nullable Boolean autoHealEnabled;
        private @Nullable AutoHealRulesResponse autoHealRules;
        private @Nullable String autoSwapSlotName;
        private @Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts;
        private @Nullable List<ConnStringInfoResponse> connectionStrings;
        private @Nullable CorsSettingsResponse cors;
        private @Nullable List<String> defaultDocuments;
        private @Nullable Boolean detailedErrorLoggingEnabled;
        private @Nullable String documentRoot;
        private @Nullable ExperimentsResponse experiments;
        private @Nullable String ftpsState;
        private @Nullable Integer functionAppScaleLimit;
        private @Nullable Boolean functionsRuntimeScaleMonitoringEnabled;
        private @Nullable List<HandlerMappingResponse> handlerMappings;
        private @Nullable String healthCheckPath;
        private @Nullable Boolean http20Enabled;
        private @Nullable Boolean httpLoggingEnabled;
        private @Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions;
        private @Nullable String javaContainer;
        private @Nullable String javaContainerVersion;
        private @Nullable String javaVersion;
        private @Nullable String keyVaultReferenceIdentity;
        private @Nullable SiteLimitsResponse limits;
        private @Nullable String linuxFxVersion;
        private @Nullable String loadBalancing;
        private @Nullable Boolean localMySqlEnabled;
        private @Nullable Integer logsDirectorySizeLimit;
        private SiteMachineKeyResponse machineKey;
        private @Nullable String managedPipelineMode;
        private @Nullable Integer managedServiceIdentityId;
        private @Nullable String minTlsVersion;
        private @Nullable Integer minimumElasticInstanceCount;
        private @Nullable String netFrameworkVersion;
        private @Nullable String nodeVersion;
        private @Nullable Integer numberOfWorkers;
        private @Nullable String phpVersion;
        private @Nullable String powerShellVersion;
        private @Nullable Integer preWarmedInstanceCount;
        private @Nullable String publicNetworkAccess;
        private @Nullable String publishingUsername;
        private @Nullable PushSettingsResponse push;
        private @Nullable String pythonVersion;
        private @Nullable Boolean remoteDebuggingEnabled;
        private @Nullable String remoteDebuggingVersion;
        private @Nullable Boolean requestTracingEnabled;
        private @Nullable String requestTracingExpirationTime;
        private @Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions;
        private @Nullable Boolean scmIpSecurityRestrictionsUseMain;
        private @Nullable String scmMinTlsVersion;
        private @Nullable String scmType;
        private @Nullable String tracingOptions;
        private @Nullable Boolean use32BitWorkerProcess;
        private @Nullable List<VirtualApplicationResponse> virtualApplications;
        private @Nullable String vnetName;
        private @Nullable Integer vnetPrivatePortsCount;
        private @Nullable Boolean vnetRouteAllEnabled;
        private @Nullable Boolean webSocketsEnabled;
        private @Nullable String websiteTimeZone;
        private @Nullable String windowsFxVersion;
        private @Nullable Integer xManagedServiceIdentityId;

        public Builder() {
    	      // Empty
        }

        public Builder(SiteConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acrUseManagedIdentityCreds = defaults.acrUseManagedIdentityCreds;
    	      this.acrUserManagedIdentityID = defaults.acrUserManagedIdentityID;
    	      this.alwaysOn = defaults.alwaysOn;
    	      this.apiDefinition = defaults.apiDefinition;
    	      this.apiManagementConfig = defaults.apiManagementConfig;
    	      this.appCommandLine = defaults.appCommandLine;
    	      this.appSettings = defaults.appSettings;
    	      this.autoHealEnabled = defaults.autoHealEnabled;
    	      this.autoHealRules = defaults.autoHealRules;
    	      this.autoSwapSlotName = defaults.autoSwapSlotName;
    	      this.azureStorageAccounts = defaults.azureStorageAccounts;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.cors = defaults.cors;
    	      this.defaultDocuments = defaults.defaultDocuments;
    	      this.detailedErrorLoggingEnabled = defaults.detailedErrorLoggingEnabled;
    	      this.documentRoot = defaults.documentRoot;
    	      this.experiments = defaults.experiments;
    	      this.ftpsState = defaults.ftpsState;
    	      this.functionAppScaleLimit = defaults.functionAppScaleLimit;
    	      this.functionsRuntimeScaleMonitoringEnabled = defaults.functionsRuntimeScaleMonitoringEnabled;
    	      this.handlerMappings = defaults.handlerMappings;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.http20Enabled = defaults.http20Enabled;
    	      this.httpLoggingEnabled = defaults.httpLoggingEnabled;
    	      this.ipSecurityRestrictions = defaults.ipSecurityRestrictions;
    	      this.javaContainer = defaults.javaContainer;
    	      this.javaContainerVersion = defaults.javaContainerVersion;
    	      this.javaVersion = defaults.javaVersion;
    	      this.keyVaultReferenceIdentity = defaults.keyVaultReferenceIdentity;
    	      this.limits = defaults.limits;
    	      this.linuxFxVersion = defaults.linuxFxVersion;
    	      this.loadBalancing = defaults.loadBalancing;
    	      this.localMySqlEnabled = defaults.localMySqlEnabled;
    	      this.logsDirectorySizeLimit = defaults.logsDirectorySizeLimit;
    	      this.machineKey = defaults.machineKey;
    	      this.managedPipelineMode = defaults.managedPipelineMode;
    	      this.managedServiceIdentityId = defaults.managedServiceIdentityId;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.minimumElasticInstanceCount = defaults.minimumElasticInstanceCount;
    	      this.netFrameworkVersion = defaults.netFrameworkVersion;
    	      this.nodeVersion = defaults.nodeVersion;
    	      this.numberOfWorkers = defaults.numberOfWorkers;
    	      this.phpVersion = defaults.phpVersion;
    	      this.powerShellVersion = defaults.powerShellVersion;
    	      this.preWarmedInstanceCount = defaults.preWarmedInstanceCount;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.publishingUsername = defaults.publishingUsername;
    	      this.push = defaults.push;
    	      this.pythonVersion = defaults.pythonVersion;
    	      this.remoteDebuggingEnabled = defaults.remoteDebuggingEnabled;
    	      this.remoteDebuggingVersion = defaults.remoteDebuggingVersion;
    	      this.requestTracingEnabled = defaults.requestTracingEnabled;
    	      this.requestTracingExpirationTime = defaults.requestTracingExpirationTime;
    	      this.scmIpSecurityRestrictions = defaults.scmIpSecurityRestrictions;
    	      this.scmIpSecurityRestrictionsUseMain = defaults.scmIpSecurityRestrictionsUseMain;
    	      this.scmMinTlsVersion = defaults.scmMinTlsVersion;
    	      this.scmType = defaults.scmType;
    	      this.tracingOptions = defaults.tracingOptions;
    	      this.use32BitWorkerProcess = defaults.use32BitWorkerProcess;
    	      this.virtualApplications = defaults.virtualApplications;
    	      this.vnetName = defaults.vnetName;
    	      this.vnetPrivatePortsCount = defaults.vnetPrivatePortsCount;
    	      this.vnetRouteAllEnabled = defaults.vnetRouteAllEnabled;
    	      this.webSocketsEnabled = defaults.webSocketsEnabled;
    	      this.websiteTimeZone = defaults.websiteTimeZone;
    	      this.windowsFxVersion = defaults.windowsFxVersion;
    	      this.xManagedServiceIdentityId = defaults.xManagedServiceIdentityId;
        }

        public Builder setAcrUseManagedIdentityCreds(@Nullable Boolean acrUseManagedIdentityCreds) {
            this.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
            return this;
        }

        public Builder setAcrUserManagedIdentityID(@Nullable String acrUserManagedIdentityID) {
            this.acrUserManagedIdentityID = acrUserManagedIdentityID;
            return this;
        }

        public Builder setAlwaysOn(@Nullable Boolean alwaysOn) {
            this.alwaysOn = alwaysOn;
            return this;
        }

        public Builder setApiDefinition(@Nullable ApiDefinitionInfoResponse apiDefinition) {
            this.apiDefinition = apiDefinition;
            return this;
        }

        public Builder setApiManagementConfig(@Nullable ApiManagementConfigResponse apiManagementConfig) {
            this.apiManagementConfig = apiManagementConfig;
            return this;
        }

        public Builder setAppCommandLine(@Nullable String appCommandLine) {
            this.appCommandLine = appCommandLine;
            return this;
        }

        public Builder setAppSettings(@Nullable List<NameValuePairResponse> appSettings) {
            this.appSettings = appSettings;
            return this;
        }

        public Builder setAutoHealEnabled(@Nullable Boolean autoHealEnabled) {
            this.autoHealEnabled = autoHealEnabled;
            return this;
        }

        public Builder setAutoHealRules(@Nullable AutoHealRulesResponse autoHealRules) {
            this.autoHealRules = autoHealRules;
            return this;
        }

        public Builder setAutoSwapSlotName(@Nullable String autoSwapSlotName) {
            this.autoSwapSlotName = autoSwapSlotName;
            return this;
        }

        public Builder setAzureStorageAccounts(@Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts) {
            this.azureStorageAccounts = azureStorageAccounts;
            return this;
        }

        public Builder setConnectionStrings(@Nullable List<ConnStringInfoResponse> connectionStrings) {
            this.connectionStrings = connectionStrings;
            return this;
        }

        public Builder setCors(@Nullable CorsSettingsResponse cors) {
            this.cors = cors;
            return this;
        }

        public Builder setDefaultDocuments(@Nullable List<String> defaultDocuments) {
            this.defaultDocuments = defaultDocuments;
            return this;
        }

        public Builder setDetailedErrorLoggingEnabled(@Nullable Boolean detailedErrorLoggingEnabled) {
            this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            return this;
        }

        public Builder setDocumentRoot(@Nullable String documentRoot) {
            this.documentRoot = documentRoot;
            return this;
        }

        public Builder setExperiments(@Nullable ExperimentsResponse experiments) {
            this.experiments = experiments;
            return this;
        }

        public Builder setFtpsState(@Nullable String ftpsState) {
            this.ftpsState = ftpsState;
            return this;
        }

        public Builder setFunctionAppScaleLimit(@Nullable Integer functionAppScaleLimit) {
            this.functionAppScaleLimit = functionAppScaleLimit;
            return this;
        }

        public Builder setFunctionsRuntimeScaleMonitoringEnabled(@Nullable Boolean functionsRuntimeScaleMonitoringEnabled) {
            this.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
            return this;
        }

        public Builder setHandlerMappings(@Nullable List<HandlerMappingResponse> handlerMappings) {
            this.handlerMappings = handlerMappings;
            return this;
        }

        public Builder setHealthCheckPath(@Nullable String healthCheckPath) {
            this.healthCheckPath = healthCheckPath;
            return this;
        }

        public Builder setHttp20Enabled(@Nullable Boolean http20Enabled) {
            this.http20Enabled = http20Enabled;
            return this;
        }

        public Builder setHttpLoggingEnabled(@Nullable Boolean httpLoggingEnabled) {
            this.httpLoggingEnabled = httpLoggingEnabled;
            return this;
        }

        public Builder setIpSecurityRestrictions(@Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions) {
            this.ipSecurityRestrictions = ipSecurityRestrictions;
            return this;
        }

        public Builder setJavaContainer(@Nullable String javaContainer) {
            this.javaContainer = javaContainer;
            return this;
        }

        public Builder setJavaContainerVersion(@Nullable String javaContainerVersion) {
            this.javaContainerVersion = javaContainerVersion;
            return this;
        }

        public Builder setJavaVersion(@Nullable String javaVersion) {
            this.javaVersion = javaVersion;
            return this;
        }

        public Builder setKeyVaultReferenceIdentity(@Nullable String keyVaultReferenceIdentity) {
            this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            return this;
        }

        public Builder setLimits(@Nullable SiteLimitsResponse limits) {
            this.limits = limits;
            return this;
        }

        public Builder setLinuxFxVersion(@Nullable String linuxFxVersion) {
            this.linuxFxVersion = linuxFxVersion;
            return this;
        }

        public Builder setLoadBalancing(@Nullable String loadBalancing) {
            this.loadBalancing = loadBalancing;
            return this;
        }

        public Builder setLocalMySqlEnabled(@Nullable Boolean localMySqlEnabled) {
            this.localMySqlEnabled = localMySqlEnabled;
            return this;
        }

        public Builder setLogsDirectorySizeLimit(@Nullable Integer logsDirectorySizeLimit) {
            this.logsDirectorySizeLimit = logsDirectorySizeLimit;
            return this;
        }

        public Builder setMachineKey(SiteMachineKeyResponse machineKey) {
            this.machineKey = Objects.requireNonNull(machineKey);
            return this;
        }

        public Builder setManagedPipelineMode(@Nullable String managedPipelineMode) {
            this.managedPipelineMode = managedPipelineMode;
            return this;
        }

        public Builder setManagedServiceIdentityId(@Nullable Integer managedServiceIdentityId) {
            this.managedServiceIdentityId = managedServiceIdentityId;
            return this;
        }

        public Builder setMinTlsVersion(@Nullable String minTlsVersion) {
            this.minTlsVersion = minTlsVersion;
            return this;
        }

        public Builder setMinimumElasticInstanceCount(@Nullable Integer minimumElasticInstanceCount) {
            this.minimumElasticInstanceCount = minimumElasticInstanceCount;
            return this;
        }

        public Builder setNetFrameworkVersion(@Nullable String netFrameworkVersion) {
            this.netFrameworkVersion = netFrameworkVersion;
            return this;
        }

        public Builder setNodeVersion(@Nullable String nodeVersion) {
            this.nodeVersion = nodeVersion;
            return this;
        }

        public Builder setNumberOfWorkers(@Nullable Integer numberOfWorkers) {
            this.numberOfWorkers = numberOfWorkers;
            return this;
        }

        public Builder setPhpVersion(@Nullable String phpVersion) {
            this.phpVersion = phpVersion;
            return this;
        }

        public Builder setPowerShellVersion(@Nullable String powerShellVersion) {
            this.powerShellVersion = powerShellVersion;
            return this;
        }

        public Builder setPreWarmedInstanceCount(@Nullable Integer preWarmedInstanceCount) {
            this.preWarmedInstanceCount = preWarmedInstanceCount;
            return this;
        }

        public Builder setPublicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder setPublishingUsername(@Nullable String publishingUsername) {
            this.publishingUsername = publishingUsername;
            return this;
        }

        public Builder setPush(@Nullable PushSettingsResponse push) {
            this.push = push;
            return this;
        }

        public Builder setPythonVersion(@Nullable String pythonVersion) {
            this.pythonVersion = pythonVersion;
            return this;
        }

        public Builder setRemoteDebuggingEnabled(@Nullable Boolean remoteDebuggingEnabled) {
            this.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }

        public Builder setRemoteDebuggingVersion(@Nullable String remoteDebuggingVersion) {
            this.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }

        public Builder setRequestTracingEnabled(@Nullable Boolean requestTracingEnabled) {
            this.requestTracingEnabled = requestTracingEnabled;
            return this;
        }

        public Builder setRequestTracingExpirationTime(@Nullable String requestTracingExpirationTime) {
            this.requestTracingExpirationTime = requestTracingExpirationTime;
            return this;
        }

        public Builder setScmIpSecurityRestrictions(@Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions) {
            this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
            return this;
        }

        public Builder setScmIpSecurityRestrictionsUseMain(@Nullable Boolean scmIpSecurityRestrictionsUseMain) {
            this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
            return this;
        }

        public Builder setScmMinTlsVersion(@Nullable String scmMinTlsVersion) {
            this.scmMinTlsVersion = scmMinTlsVersion;
            return this;
        }

        public Builder setScmType(@Nullable String scmType) {
            this.scmType = scmType;
            return this;
        }

        public Builder setTracingOptions(@Nullable String tracingOptions) {
            this.tracingOptions = tracingOptions;
            return this;
        }

        public Builder setUse32BitWorkerProcess(@Nullable Boolean use32BitWorkerProcess) {
            this.use32BitWorkerProcess = use32BitWorkerProcess;
            return this;
        }

        public Builder setVirtualApplications(@Nullable List<VirtualApplicationResponse> virtualApplications) {
            this.virtualApplications = virtualApplications;
            return this;
        }

        public Builder setVnetName(@Nullable String vnetName) {
            this.vnetName = vnetName;
            return this;
        }

        public Builder setVnetPrivatePortsCount(@Nullable Integer vnetPrivatePortsCount) {
            this.vnetPrivatePortsCount = vnetPrivatePortsCount;
            return this;
        }

        public Builder setVnetRouteAllEnabled(@Nullable Boolean vnetRouteAllEnabled) {
            this.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }

        public Builder setWebSocketsEnabled(@Nullable Boolean webSocketsEnabled) {
            this.webSocketsEnabled = webSocketsEnabled;
            return this;
        }

        public Builder setWebsiteTimeZone(@Nullable String websiteTimeZone) {
            this.websiteTimeZone = websiteTimeZone;
            return this;
        }

        public Builder setWindowsFxVersion(@Nullable String windowsFxVersion) {
            this.windowsFxVersion = windowsFxVersion;
            return this;
        }

        public Builder setXManagedServiceIdentityId(@Nullable Integer xManagedServiceIdentityId) {
            this.xManagedServiceIdentityId = xManagedServiceIdentityId;
            return this;
        }

        public SiteConfigResponse build() {
            return new SiteConfigResponse(acrUseManagedIdentityCreds, acrUserManagedIdentityID, alwaysOn, apiDefinition, apiManagementConfig, appCommandLine, appSettings, autoHealEnabled, autoHealRules, autoSwapSlotName, azureStorageAccounts, connectionStrings, cors, defaultDocuments, detailedErrorLoggingEnabled, documentRoot, experiments, ftpsState, functionAppScaleLimit, functionsRuntimeScaleMonitoringEnabled, handlerMappings, healthCheckPath, http20Enabled, httpLoggingEnabled, ipSecurityRestrictions, javaContainer, javaContainerVersion, javaVersion, keyVaultReferenceIdentity, limits, linuxFxVersion, loadBalancing, localMySqlEnabled, logsDirectorySizeLimit, machineKey, managedPipelineMode, managedServiceIdentityId, minTlsVersion, minimumElasticInstanceCount, netFrameworkVersion, nodeVersion, numberOfWorkers, phpVersion, powerShellVersion, preWarmedInstanceCount, publicNetworkAccess, publishingUsername, push, pythonVersion, remoteDebuggingEnabled, remoteDebuggingVersion, requestTracingEnabled, requestTracingExpirationTime, scmIpSecurityRestrictions, scmIpSecurityRestrictionsUseMain, scmMinTlsVersion, scmType, tracingOptions, use32BitWorkerProcess, virtualApplications, vnetName, vnetPrivatePortsCount, vnetRouteAllEnabled, webSocketsEnabled, websiteTimeZone, windowsFxVersion, xManagedServiceIdentityId);
        }
    }
}
