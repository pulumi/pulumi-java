// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class EdifactDelimiterOverrideResponse {
    private final Integer componentSeparator;
    private final Integer dataElementSeparator;
    private final String decimalPointIndicator;
    private final @Nullable String messageAssociationAssignedCode;
    private final @Nullable String messageId;
    private final @Nullable String messageRelease;
    private final @Nullable String messageVersion;
    private final Integer releaseIndicator;
    private final Integer repetitionSeparator;
    private final Integer segmentTerminator;
    private final String segmentTerminatorSuffix;
    private final @Nullable String targetNamespace;

    @OutputCustomType.Constructor({"componentSeparator","dataElementSeparator","decimalPointIndicator","messageAssociationAssignedCode","messageId","messageRelease","messageVersion","releaseIndicator","repetitionSeparator","segmentTerminator","segmentTerminatorSuffix","targetNamespace"})
    private EdifactDelimiterOverrideResponse(
        Integer componentSeparator,
        Integer dataElementSeparator,
        String decimalPointIndicator,
        @Nullable String messageAssociationAssignedCode,
        @Nullable String messageId,
        @Nullable String messageRelease,
        @Nullable String messageVersion,
        Integer releaseIndicator,
        Integer repetitionSeparator,
        Integer segmentTerminator,
        String segmentTerminatorSuffix,
        @Nullable String targetNamespace) {
        this.componentSeparator = Objects.requireNonNull(componentSeparator);
        this.dataElementSeparator = Objects.requireNonNull(dataElementSeparator);
        this.decimalPointIndicator = Objects.requireNonNull(decimalPointIndicator);
        this.messageAssociationAssignedCode = messageAssociationAssignedCode;
        this.messageId = messageId;
        this.messageRelease = messageRelease;
        this.messageVersion = messageVersion;
        this.releaseIndicator = Objects.requireNonNull(releaseIndicator);
        this.repetitionSeparator = Objects.requireNonNull(repetitionSeparator);
        this.segmentTerminator = Objects.requireNonNull(segmentTerminator);
        this.segmentTerminatorSuffix = Objects.requireNonNull(segmentTerminatorSuffix);
        this.targetNamespace = targetNamespace;
    }

    public Integer getComponentSeparator() {
        return this.componentSeparator;
    }
    public Integer getDataElementSeparator() {
        return this.dataElementSeparator;
    }
    public String getDecimalPointIndicator() {
        return this.decimalPointIndicator;
    }
    public Optional<String> getMessageAssociationAssignedCode() {
        return Optional.ofNullable(this.messageAssociationAssignedCode);
    }
    public Optional<String> getMessageId() {
        return Optional.ofNullable(this.messageId);
    }
    public Optional<String> getMessageRelease() {
        return Optional.ofNullable(this.messageRelease);
    }
    public Optional<String> getMessageVersion() {
        return Optional.ofNullable(this.messageVersion);
    }
    public Integer getReleaseIndicator() {
        return this.releaseIndicator;
    }
    public Integer getRepetitionSeparator() {
        return this.repetitionSeparator;
    }
    public Integer getSegmentTerminator() {
        return this.segmentTerminator;
    }
    public String getSegmentTerminatorSuffix() {
        return this.segmentTerminatorSuffix;
    }
    public Optional<String> getTargetNamespace() {
        return Optional.ofNullable(this.targetNamespace);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdifactDelimiterOverrideResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer componentSeparator;
        private Integer dataElementSeparator;
        private String decimalPointIndicator;
        private @Nullable String messageAssociationAssignedCode;
        private @Nullable String messageId;
        private @Nullable String messageRelease;
        private @Nullable String messageVersion;
        private Integer releaseIndicator;
        private Integer repetitionSeparator;
        private Integer segmentTerminator;
        private String segmentTerminatorSuffix;
        private @Nullable String targetNamespace;

        public Builder() {
    	      // Empty
        }

        public Builder(EdifactDelimiterOverrideResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.componentSeparator = defaults.componentSeparator;
    	      this.dataElementSeparator = defaults.dataElementSeparator;
    	      this.decimalPointIndicator = defaults.decimalPointIndicator;
    	      this.messageAssociationAssignedCode = defaults.messageAssociationAssignedCode;
    	      this.messageId = defaults.messageId;
    	      this.messageRelease = defaults.messageRelease;
    	      this.messageVersion = defaults.messageVersion;
    	      this.releaseIndicator = defaults.releaseIndicator;
    	      this.repetitionSeparator = defaults.repetitionSeparator;
    	      this.segmentTerminator = defaults.segmentTerminator;
    	      this.segmentTerminatorSuffix = defaults.segmentTerminatorSuffix;
    	      this.targetNamespace = defaults.targetNamespace;
        }

        public Builder setComponentSeparator(Integer componentSeparator) {
            this.componentSeparator = Objects.requireNonNull(componentSeparator);
            return this;
        }

        public Builder setDataElementSeparator(Integer dataElementSeparator) {
            this.dataElementSeparator = Objects.requireNonNull(dataElementSeparator);
            return this;
        }

        public Builder setDecimalPointIndicator(String decimalPointIndicator) {
            this.decimalPointIndicator = Objects.requireNonNull(decimalPointIndicator);
            return this;
        }

        public Builder setMessageAssociationAssignedCode(@Nullable String messageAssociationAssignedCode) {
            this.messageAssociationAssignedCode = messageAssociationAssignedCode;
            return this;
        }

        public Builder setMessageId(@Nullable String messageId) {
            this.messageId = messageId;
            return this;
        }

        public Builder setMessageRelease(@Nullable String messageRelease) {
            this.messageRelease = messageRelease;
            return this;
        }

        public Builder setMessageVersion(@Nullable String messageVersion) {
            this.messageVersion = messageVersion;
            return this;
        }

        public Builder setReleaseIndicator(Integer releaseIndicator) {
            this.releaseIndicator = Objects.requireNonNull(releaseIndicator);
            return this;
        }

        public Builder setRepetitionSeparator(Integer repetitionSeparator) {
            this.repetitionSeparator = Objects.requireNonNull(repetitionSeparator);
            return this;
        }

        public Builder setSegmentTerminator(Integer segmentTerminator) {
            this.segmentTerminator = Objects.requireNonNull(segmentTerminator);
            return this;
        }

        public Builder setSegmentTerminatorSuffix(String segmentTerminatorSuffix) {
            this.segmentTerminatorSuffix = Objects.requireNonNull(segmentTerminatorSuffix);
            return this;
        }

        public Builder setTargetNamespace(@Nullable String targetNamespace) {
            this.targetNamespace = targetNamespace;
            return this;
        }

        public EdifactDelimiterOverrideResponse build() {
            return new EdifactDelimiterOverrideResponse(componentSeparator, dataElementSeparator, decimalPointIndicator, messageAssociationAssignedCode, messageId, messageRelease, messageVersion, releaseIndicator, repetitionSeparator, segmentTerminator, segmentTerminatorSuffix, targetNamespace);
        }
    }
}
