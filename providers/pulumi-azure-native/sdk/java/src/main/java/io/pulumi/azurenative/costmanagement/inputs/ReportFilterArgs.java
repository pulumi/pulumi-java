// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement.inputs;

import io.pulumi.azurenative.costmanagement.inputs.ReportComparisonExpressionArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The filter expression to be used in the report.
 * 
 */
public final class ReportFilterArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReportFilterArgs Empty = new ReportFilterArgs();

    /**
     * The logical "AND" expression. Must have at least 2 items.
     * 
     */
    @Import(name="and")
      private final @Nullable Output<List<ReportFilterArgs>> and;

    public Output<List<ReportFilterArgs>> getAnd() {
        return this.and == null ? Codegen.empty() : this.and;
    }

    /**
     * Has comparison expression for a dimension
     * 
     */
    @Import(name="dimension")
      private final @Nullable Output<ReportComparisonExpressionArgs> dimension;

    public Output<ReportComparisonExpressionArgs> getDimension() {
        return this.dimension == null ? Codegen.empty() : this.dimension;
    }

    /**
     * The logical "NOT" expression.
     * 
     */
    @Import(name="not")
      private final @Nullable Output<ReportFilterArgs> not;

    public Output<ReportFilterArgs> getNot() {
        return this.not == null ? Codegen.empty() : this.not;
    }

    /**
     * The logical "OR" expression. Must have at least 2 items.
     * 
     */
    @Import(name="or")
      private final @Nullable Output<List<ReportFilterArgs>> or;

    public Output<List<ReportFilterArgs>> getOr() {
        return this.or == null ? Codegen.empty() : this.or;
    }

    /**
     * Has comparison expression for a tag
     * 
     */
    @Import(name="tag")
      private final @Nullable Output<ReportComparisonExpressionArgs> tag;

    public Output<ReportComparisonExpressionArgs> getTag() {
        return this.tag == null ? Codegen.empty() : this.tag;
    }

    public ReportFilterArgs(
        @Nullable Output<List<ReportFilterArgs>> and,
        @Nullable Output<ReportComparisonExpressionArgs> dimension,
        @Nullable Output<ReportFilterArgs> not,
        @Nullable Output<List<ReportFilterArgs>> or,
        @Nullable Output<ReportComparisonExpressionArgs> tag) {
        this.and = and;
        this.dimension = dimension;
        this.not = not;
        this.or = or;
        this.tag = tag;
    }

    private ReportFilterArgs() {
        this.and = Codegen.empty();
        this.dimension = Codegen.empty();
        this.not = Codegen.empty();
        this.or = Codegen.empty();
        this.tag = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<ReportFilterArgs>> and;
        private @Nullable Output<ReportComparisonExpressionArgs> dimension;
        private @Nullable Output<ReportFilterArgs> not;
        private @Nullable Output<List<ReportFilterArgs>> or;
        private @Nullable Output<ReportComparisonExpressionArgs> tag;

        public Builder() {
    	      // Empty
        }

        public Builder(ReportFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.and = defaults.and;
    	      this.dimension = defaults.dimension;
    	      this.not = defaults.not;
    	      this.or = defaults.or;
    	      this.tag = defaults.tag;
        }

        public Builder and(@Nullable Output<List<ReportFilterArgs>> and) {
            this.and = and;
            return this;
        }
        public Builder and(@Nullable List<ReportFilterArgs> and) {
            this.and = Codegen.ofNullable(and);
            return this;
        }
        public Builder and(ReportFilterArgs... and) {
            return and(List.of(and));
        }
        public Builder dimension(@Nullable Output<ReportComparisonExpressionArgs> dimension) {
            this.dimension = dimension;
            return this;
        }
        public Builder dimension(@Nullable ReportComparisonExpressionArgs dimension) {
            this.dimension = Codegen.ofNullable(dimension);
            return this;
        }
        public Builder not(@Nullable Output<ReportFilterArgs> not) {
            this.not = not;
            return this;
        }
        public Builder not(@Nullable ReportFilterArgs not) {
            this.not = Codegen.ofNullable(not);
            return this;
        }
        public Builder or(@Nullable Output<List<ReportFilterArgs>> or) {
            this.or = or;
            return this;
        }
        public Builder or(@Nullable List<ReportFilterArgs> or) {
            this.or = Codegen.ofNullable(or);
            return this;
        }
        public Builder or(ReportFilterArgs... or) {
            return or(List.of(or));
        }
        public Builder tag(@Nullable Output<ReportComparisonExpressionArgs> tag) {
            this.tag = tag;
            return this;
        }
        public Builder tag(@Nullable ReportComparisonExpressionArgs tag) {
            this.tag = Codegen.ofNullable(tag);
            return this;
        }        public ReportFilterArgs build() {
            return new ReportFilterArgs(and, dimension, not, or, tag);
        }
    }
}
