// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningexperimentation;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.machinelearningexperimentation.ProjectArgs;
import io.pulumi.core.Alias;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * An object that represents a machine learning project.
API Version: 2017-05-01-preview.

{{% examples %}}
## Example Usage
{{% example %}}
### CreateProject
```csharp
using Pulumi;
using AzureNative = Pulumi.AzureNative;

class MyStack : Stack
{
    public MyStack()
    {
        var project = new AzureNative.MachineLearningExperimentation.Project("project", new AzureNative.MachineLearningExperimentation.ProjectArgs
        {
            AccountName = "testaccount",
            FriendlyName = "testName",
            Gitrepo = "https://github/abc",
            Location = "East US",
            ProjectName = "testProject",
            ResourceGroupName = "myResourceGroup",
            Tags = 
            {
                { "tagKey1", "TagValue1" },
            },
            WorkspaceName = "testworkspace",
        });
    }

}

```

```go
package main

import (
	machinelearningexperimentation "github.com/pulumi/pulumi-azure-native/sdk/go/azure/machinelearningexperimentation"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := machinelearningexperimentation.NewProject(ctx, "project", &machinelearningexperimentation.ProjectArgs{
			AccountName:       pulumi.String("testaccount"),
			FriendlyName:      pulumi.String("testName"),
			Gitrepo:           pulumi.String("https://github/abc"),
			Location:          pulumi.String("East US"),
			ProjectName:       pulumi.String("testProject"),
			ResourceGroupName: pulumi.String("myResourceGroup"),
			Tags: pulumi.StringMap{
				"tagKey1": pulumi.String("TagValue1"),
			},
			WorkspaceName: pulumi.String("testworkspace"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}

```

```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const project = new azure_native.machinelearningexperimentation.Project("project", {
    accountName: "testaccount",
    friendlyName: "testName",
    gitrepo: "https://github/abc",
    location: "East US",
    projectName: "testProject",
    resourceGroupName: "myResourceGroup",
    tags: {
        tagKey1: "TagValue1",
    },
    workspaceName: "testworkspace",
});

```

```python
import pulumi
import pulumi_azure_native as azure_native

project = azure_native.machinelearningexperimentation.Project("project",
    account_name="testaccount",
    friendly_name="testName",
    gitrepo="https://github/abc",
    location="East US",
    project_name="testProject",
    resource_group_name="myResourceGroup",
    tags={
        "tagKey1": "TagValue1",
    },
    workspace_name="testworkspace")

```

{{% /example %}}
{{% /examples %}}

## Import

An existing resource can be imported using its type token, name, and identifier, e.g.

```sh
$ pulumi import azure-native:machinelearningexperimentation:Project testProject /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.MachineLearningExperimentation/accounts/testaccount/workspaces/testworkspace/projects/testProject 
```

 */
@ResourceType(type="azure-native:machinelearningexperimentation:Project")
public class Project extends io.pulumi.resources.CustomResource {
    /**
     * The immutable id of the team account which contains this project.
     */
    @OutputExport(name="accountId", type=String.class, parameters={})
    private Output<String> accountId;

    /**
     * @return The immutable id of the team account which contains this project.
     */
    public Output<String> getAccountId() {
        return this.accountId;
    }
    /**
     * The creation date of the project in ISO8601 format.
     */
    @OutputExport(name="creationDate", type=String.class, parameters={})
    private Output<String> creationDate;

    /**
     * @return The creation date of the project in ISO8601 format.
     */
    public Output<String> getCreationDate() {
        return this.creationDate;
    }
    /**
     * The description of this project.
     */
    @OutputExport(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of this project.
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The friendly name for this project.
     */
    @OutputExport(name="friendlyName", type=String.class, parameters={})
    private Output<String> friendlyName;

    /**
     * @return The friendly name for this project.
     */
    public Output<String> getFriendlyName() {
        return this.friendlyName;
    }
    /**
     * The reference to git repo for this project.
     */
    @OutputExport(name="gitrepo", type=String.class, parameters={})
    private Output</* @Nullable */ String> gitrepo;

    /**
     * @return The reference to git repo for this project.
     */
    public Output</* @Nullable */ String> getGitrepo() {
        return this.gitrepo;
    }
    /**
     * The location of the resource. This cannot be changed after the resource is created.
     */
    @OutputExport(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The location of the resource. This cannot be changed after the resource is created.
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * The name of the resource.
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource.
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The immutable id of this project.
     */
    @OutputExport(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return The immutable id of this project.
     */
    public Output<String> getProjectId() {
        return this.projectId;
    }
    /**
     * The current deployment state of project resource. The provisioningState is to indicate states for resource provisioning.
     */
    @OutputExport(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The current deployment state of project resource. The provisioningState is to indicate states for resource provisioning.
     */
    public Output<String> getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * The tags of the resource.
     */
    @OutputExport(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return The tags of the resource.
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * The type of the resource.
     */
    @OutputExport(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource.
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * The immutable id of the workspace which contains this project.
     */
    @OutputExport(name="workspaceId", type=String.class, parameters={})
    private Output<String> workspaceId;

    /**
     * @return The immutable id of the workspace which contains this project.
     */
    public Output<String> getWorkspaceId() {
        return this.workspaceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Project(String name, ProjectArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:machinelearningexperimentation:Project", name, args == null ? ProjectArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Project(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:machinelearningexperimentation:Project", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .setAliases(List.of(
                Input.of(Alias.builder().setType("azure-native:machinelearningexperimentation/v20170501preview:Project").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Project get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Project(name, id, options);
    }
}
