// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.sql;

import io.pulumi.azurenative.sql.inputs.VulnerabilityAssessmentRecurringScansPropertiesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServerVulnerabilityAssessmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServerVulnerabilityAssessmentArgs Empty = new ServerVulnerabilityAssessmentArgs();

    /**
     * The recurring scans settings
     * 
     */
    @InputImport(name="recurringScans")
      private final @Nullable Input<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans;

    public Input<VulnerabilityAssessmentRecurringScansPropertiesArgs> getRecurringScans() {
        return this.recurringScans == null ? Input.empty() : this.recurringScans;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server for which the vulnerability assessment is defined.
     * 
     */
    @InputImport(name="serverName", required=true)
      private final Input<String> serverName;

    public Input<String> getServerName() {
        return this.serverName;
    }

    /**
     * Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required. Applies only if the storage account is not behind a Vnet or a firewall
     * 
     */
    @InputImport(name="storageAccountAccessKey")
      private final @Nullable Input<String> storageAccountAccessKey;

    public Input<String> getStorageAccountAccessKey() {
        return this.storageAccountAccessKey == null ? Input.empty() : this.storageAccountAccessKey;
    }

    /**
     * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
     * 
     */
    @InputImport(name="storageContainerPath", required=true)
      private final Input<String> storageContainerPath;

    public Input<String> getStorageContainerPath() {
        return this.storageContainerPath;
    }

    /**
     * A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required. Applies only if the storage account is not behind a Vnet or a firewall
     * 
     */
    @InputImport(name="storageContainerSasKey")
      private final @Nullable Input<String> storageContainerSasKey;

    public Input<String> getStorageContainerSasKey() {
        return this.storageContainerSasKey == null ? Input.empty() : this.storageContainerSasKey;
    }

    /**
     * The name of the vulnerability assessment.
     * 
     */
    @InputImport(name="vulnerabilityAssessmentName")
      private final @Nullable Input<String> vulnerabilityAssessmentName;

    public Input<String> getVulnerabilityAssessmentName() {
        return this.vulnerabilityAssessmentName == null ? Input.empty() : this.vulnerabilityAssessmentName;
    }

    public ServerVulnerabilityAssessmentArgs(
        @Nullable Input<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans,
        Input<String> resourceGroupName,
        Input<String> serverName,
        @Nullable Input<String> storageAccountAccessKey,
        Input<String> storageContainerPath,
        @Nullable Input<String> storageContainerSasKey,
        @Nullable Input<String> vulnerabilityAssessmentName) {
        this.recurringScans = recurringScans;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
        this.storageAccountAccessKey = storageAccountAccessKey;
        this.storageContainerPath = Objects.requireNonNull(storageContainerPath, "expected parameter 'storageContainerPath' to be non-null");
        this.storageContainerSasKey = storageContainerSasKey;
        this.vulnerabilityAssessmentName = vulnerabilityAssessmentName;
    }

    private ServerVulnerabilityAssessmentArgs() {
        this.recurringScans = Input.empty();
        this.resourceGroupName = Input.empty();
        this.serverName = Input.empty();
        this.storageAccountAccessKey = Input.empty();
        this.storageContainerPath = Input.empty();
        this.storageContainerSasKey = Input.empty();
        this.vulnerabilityAssessmentName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerVulnerabilityAssessmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans;
        private Input<String> resourceGroupName;
        private Input<String> serverName;
        private @Nullable Input<String> storageAccountAccessKey;
        private Input<String> storageContainerPath;
        private @Nullable Input<String> storageContainerSasKey;
        private @Nullable Input<String> vulnerabilityAssessmentName;

        public Builder() {
    	      // Empty
        }

        public Builder(ServerVulnerabilityAssessmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recurringScans = defaults.recurringScans;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.storageAccountAccessKey = defaults.storageAccountAccessKey;
    	      this.storageContainerPath = defaults.storageContainerPath;
    	      this.storageContainerSasKey = defaults.storageContainerSasKey;
    	      this.vulnerabilityAssessmentName = defaults.vulnerabilityAssessmentName;
        }

        public Builder recurringScans(@Nullable Input<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans) {
            this.recurringScans = recurringScans;
            return this;
        }

        public Builder recurringScans(@Nullable VulnerabilityAssessmentRecurringScansPropertiesArgs recurringScans) {
            this.recurringScans = Input.ofNullable(recurringScans);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder serverName(Input<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }

        public Builder serverName(String serverName) {
            this.serverName = Input.of(Objects.requireNonNull(serverName));
            return this;
        }

        public Builder storageAccountAccessKey(@Nullable Input<String> storageAccountAccessKey) {
            this.storageAccountAccessKey = storageAccountAccessKey;
            return this;
        }

        public Builder storageAccountAccessKey(@Nullable String storageAccountAccessKey) {
            this.storageAccountAccessKey = Input.ofNullable(storageAccountAccessKey);
            return this;
        }

        public Builder storageContainerPath(Input<String> storageContainerPath) {
            this.storageContainerPath = Objects.requireNonNull(storageContainerPath);
            return this;
        }

        public Builder storageContainerPath(String storageContainerPath) {
            this.storageContainerPath = Input.of(Objects.requireNonNull(storageContainerPath));
            return this;
        }

        public Builder storageContainerSasKey(@Nullable Input<String> storageContainerSasKey) {
            this.storageContainerSasKey = storageContainerSasKey;
            return this;
        }

        public Builder storageContainerSasKey(@Nullable String storageContainerSasKey) {
            this.storageContainerSasKey = Input.ofNullable(storageContainerSasKey);
            return this;
        }

        public Builder vulnerabilityAssessmentName(@Nullable Input<String> vulnerabilityAssessmentName) {
            this.vulnerabilityAssessmentName = vulnerabilityAssessmentName;
            return this;
        }

        public Builder vulnerabilityAssessmentName(@Nullable String vulnerabilityAssessmentName) {
            this.vulnerabilityAssessmentName = Input.ofNullable(vulnerabilityAssessmentName);
            return this;
        }
        public ServerVulnerabilityAssessmentArgs build() {
            return new ServerVulnerabilityAssessmentArgs(recurringScans, resourceGroupName, serverName, storageAccountAccessKey, storageContainerPath, storageContainerSasKey, vulnerabilityAssessmentName);
        }
    }
}
