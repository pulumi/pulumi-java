// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.videoanalyzer.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * Username and password credentials.
 * 
 */
public final class UsernamePasswordCredentialsArgs extends io.pulumi.resources.ResourceArgs {

    public static final UsernamePasswordCredentialsArgs Empty = new UsernamePasswordCredentialsArgs();

    /**
     * Password to be presented as part of the credentials. It is recommended that this value is parameterized as a secret string in order to prevent this value to be returned as part of the resource on API requests.
     * 
     */
    @InputImport(name="password", required=true)
        private final Input<String> password;

    public Input<String> getPassword() {
        return this.password;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.VideoAnalyzer.UsernamePasswordCredentials'.
     * 
     */
    @InputImport(name="type", required=true)
        private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    /**
     * Username to be presented as part of the credentials.
     * 
     */
    @InputImport(name="username", required=true)
        private final Input<String> username;

    public Input<String> getUsername() {
        return this.username;
    }

    public UsernamePasswordCredentialsArgs(
        Input<String> password,
        Input<String> type,
        Input<String> username) {
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
    }

    private UsernamePasswordCredentialsArgs() {
        this.password = Input.empty();
        this.type = Input.empty();
        this.username = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UsernamePasswordCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> password;
        private Input<String> type;
        private Input<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(UsernamePasswordCredentialsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.password = defaults.password;
    	      this.type = defaults.type;
    	      this.username = defaults.username;
        }

        public Builder setPassword(Input<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder setPassword(String password) {
            this.password = Input.of(Objects.requireNonNull(password));
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder setUsername(Input<String> username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }

        public Builder setUsername(String username) {
            this.username = Input.of(Objects.requireNonNull(username));
            return this;
        }
        public UsernamePasswordCredentialsArgs build() {
            return new UsernamePasswordCredentialsArgs(password, type, username);
        }
    }
}
