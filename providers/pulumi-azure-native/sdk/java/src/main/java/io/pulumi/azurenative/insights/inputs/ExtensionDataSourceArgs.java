// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.azurenative.insights.enums.KnownExtensionDataSourceStreams;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
 * Collected from either Windows and Linux machines, depending on which extension is defined.
 * 
 */
public final class ExtensionDataSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExtensionDataSourceArgs Empty = new ExtensionDataSourceArgs();

    /**
     * The name of the VM extension.
     * 
     */
    @InputImport(name="extensionName", required=true)
        private final Input<String> extensionName;

    public Input<String> getExtensionName() {
        return this.extensionName;
    }

    /**
     * The extension settings. The format is specific for particular extension.
     * 
     */
    @InputImport(name="extensionSettings")
        private final @Nullable Input<Object> extensionSettings;

    public Input<Object> getExtensionSettings() {
        return this.extensionSettings == null ? Input.empty() : this.extensionSettings;
    }

    /**
     * The list of data sources this extension needs data from.
     * 
     */
    @InputImport(name="inputDataSources")
        private final @Nullable Input<List<String>> inputDataSources;

    public Input<List<String>> getInputDataSources() {
        return this.inputDataSources == null ? Input.empty() : this.inputDataSources;
    }

    /**
     * A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     * 
     */
    @InputImport(name="name")
        private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     * 
     */
    @InputImport(name="streams")
        private final @Nullable Input<List<Either<String,KnownExtensionDataSourceStreams>>> streams;

    public Input<List<Either<String,KnownExtensionDataSourceStreams>>> getStreams() {
        return this.streams == null ? Input.empty() : this.streams;
    }

    public ExtensionDataSourceArgs(
        Input<String> extensionName,
        @Nullable Input<Object> extensionSettings,
        @Nullable Input<List<String>> inputDataSources,
        @Nullable Input<String> name,
        @Nullable Input<List<Either<String,KnownExtensionDataSourceStreams>>> streams) {
        this.extensionName = Objects.requireNonNull(extensionName, "expected parameter 'extensionName' to be non-null");
        this.extensionSettings = extensionSettings;
        this.inputDataSources = inputDataSources;
        this.name = name;
        this.streams = streams;
    }

    private ExtensionDataSourceArgs() {
        this.extensionName = Input.empty();
        this.extensionSettings = Input.empty();
        this.inputDataSources = Input.empty();
        this.name = Input.empty();
        this.streams = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExtensionDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> extensionName;
        private @Nullable Input<Object> extensionSettings;
        private @Nullable Input<List<String>> inputDataSources;
        private @Nullable Input<String> name;
        private @Nullable Input<List<Either<String,KnownExtensionDataSourceStreams>>> streams;

        public Builder() {
    	      // Empty
        }

        public Builder(ExtensionDataSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.extensionName = defaults.extensionName;
    	      this.extensionSettings = defaults.extensionSettings;
    	      this.inputDataSources = defaults.inputDataSources;
    	      this.name = defaults.name;
    	      this.streams = defaults.streams;
        }

        public Builder setExtensionName(Input<String> extensionName) {
            this.extensionName = Objects.requireNonNull(extensionName);
            return this;
        }

        public Builder setExtensionName(String extensionName) {
            this.extensionName = Input.of(Objects.requireNonNull(extensionName));
            return this;
        }

        public Builder setExtensionSettings(@Nullable Input<Object> extensionSettings) {
            this.extensionSettings = extensionSettings;
            return this;
        }

        public Builder setExtensionSettings(@Nullable Object extensionSettings) {
            this.extensionSettings = Input.ofNullable(extensionSettings);
            return this;
        }

        public Builder setInputDataSources(@Nullable Input<List<String>> inputDataSources) {
            this.inputDataSources = inputDataSources;
            return this;
        }

        public Builder setInputDataSources(@Nullable List<String> inputDataSources) {
            this.inputDataSources = Input.ofNullable(inputDataSources);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setStreams(@Nullable Input<List<Either<String,KnownExtensionDataSourceStreams>>> streams) {
            this.streams = streams;
            return this;
        }

        public Builder setStreams(@Nullable List<Either<String,KnownExtensionDataSourceStreams>> streams) {
            this.streams = Input.ofNullable(streams);
            return this;
        }
        public ExtensionDataSourceArgs build() {
            return new ExtensionDataSourceArgs(extensionName, extensionSettings, inputDataSources, name, streams);
        }
    }
}
