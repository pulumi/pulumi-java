// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.kusto.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * A class that contains virtual network definition.
 * 
 */
public final class VirtualNetworkConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkConfigurationArgs Empty = new VirtualNetworkConfigurationArgs();

    /**
     * Data management's service public IP address resource id.
     * 
     */
    @InputImport(name="dataManagementPublicIpId", required=true)
        private final Input<String> dataManagementPublicIpId;

    public Input<String> getDataManagementPublicIpId() {
        return this.dataManagementPublicIpId;
    }

    /**
     * Engine service's public IP address resource id.
     * 
     */
    @InputImport(name="enginePublicIpId", required=true)
        private final Input<String> enginePublicIpId;

    public Input<String> getEnginePublicIpId() {
        return this.enginePublicIpId;
    }

    /**
     * The subnet resource id.
     * 
     */
    @InputImport(name="subnetId", required=true)
        private final Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId;
    }

    public VirtualNetworkConfigurationArgs(
        Input<String> dataManagementPublicIpId,
        Input<String> enginePublicIpId,
        Input<String> subnetId) {
        this.dataManagementPublicIpId = Objects.requireNonNull(dataManagementPublicIpId, "expected parameter 'dataManagementPublicIpId' to be non-null");
        this.enginePublicIpId = Objects.requireNonNull(enginePublicIpId, "expected parameter 'enginePublicIpId' to be non-null");
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
    }

    private VirtualNetworkConfigurationArgs() {
        this.dataManagementPublicIpId = Input.empty();
        this.enginePublicIpId = Input.empty();
        this.subnetId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNetworkConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> dataManagementPublicIpId;
        private Input<String> enginePublicIpId;
        private Input<String> subnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNetworkConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataManagementPublicIpId = defaults.dataManagementPublicIpId;
    	      this.enginePublicIpId = defaults.enginePublicIpId;
    	      this.subnetId = defaults.subnetId;
        }

        public Builder setDataManagementPublicIpId(Input<String> dataManagementPublicIpId) {
            this.dataManagementPublicIpId = Objects.requireNonNull(dataManagementPublicIpId);
            return this;
        }

        public Builder setDataManagementPublicIpId(String dataManagementPublicIpId) {
            this.dataManagementPublicIpId = Input.of(Objects.requireNonNull(dataManagementPublicIpId));
            return this;
        }

        public Builder setEnginePublicIpId(Input<String> enginePublicIpId) {
            this.enginePublicIpId = Objects.requireNonNull(enginePublicIpId);
            return this;
        }

        public Builder setEnginePublicIpId(String enginePublicIpId) {
            this.enginePublicIpId = Input.of(Objects.requireNonNull(enginePublicIpId));
            return this;
        }

        public Builder setSubnetId(Input<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }

        public Builder setSubnetId(String subnetId) {
            this.subnetId = Input.of(Objects.requireNonNull(subnetId));
            return this;
        }
        public VirtualNetworkConfigurationArgs build() {
            return new VirtualNetworkConfigurationArgs(dataManagementPublicIpId, enginePublicIpId, subnetId);
        }
    }
}
