// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningcompute.inputs;

import io.pulumi.azurenative.machinelearningcompute.enums.Status;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * SSL configuration. If configured data-plane calls to user services will be exposed over SSL only.
 * 
 */
public final class SslConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final SslConfigurationArgs Empty = new SslConfigurationArgs();

    /**
     * The SSL cert data in PEM format.
     * 
     */
    @Import(name="cert")
      private final @Nullable Output<String> cert;

    public Output<String> cert() {
        return this.cert == null ? Codegen.empty() : this.cert;
    }

    /**
     * The CName of the certificate.
     * 
     */
    @Import(name="cname")
      private final @Nullable Output<String> cname;

    public Output<String> cname() {
        return this.cname == null ? Codegen.empty() : this.cname;
    }

    /**
     * The SSL key data in PEM format. This is not returned in response of GET/PUT on the resource. To see this please call listKeys API.
     * 
     */
    @Import(name="key")
      private final @Nullable Output<String> key;

    public Output<String> key() {
        return this.key == null ? Codegen.empty() : this.key;
    }

    /**
     * SSL status. Allowed values are Enabled and Disabled.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<Either<String,Status>> status;

    public Output<Either<String,Status>> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    public SslConfigurationArgs(
        @Nullable Output<String> cert,
        @Nullable Output<String> cname,
        @Nullable Output<String> key,
        @Nullable Output<Either<String,Status>> status) {
        this.cert = cert;
        this.cname = cname;
        this.key = key;
        this.status = status == null ? Output.ofLeft("Enabled") : status;
    }

    private SslConfigurationArgs() {
        this.cert = Codegen.empty();
        this.cname = Codegen.empty();
        this.key = Codegen.empty();
        this.status = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SslConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> cert;
        private @Nullable Output<String> cname;
        private @Nullable Output<String> key;
        private @Nullable Output<Either<String,Status>> status;

        public Builder() {
    	      // Empty
        }

        public Builder(SslConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cert = defaults.cert;
    	      this.cname = defaults.cname;
    	      this.key = defaults.key;
    	      this.status = defaults.status;
        }

        public Builder cert(@Nullable Output<String> cert) {
            this.cert = cert;
            return this;
        }
        public Builder cert(@Nullable String cert) {
            this.cert = Codegen.ofNullable(cert);
            return this;
        }
        public Builder cname(@Nullable Output<String> cname) {
            this.cname = cname;
            return this;
        }
        public Builder cname(@Nullable String cname) {
            this.cname = Codegen.ofNullable(cname);
            return this;
        }
        public Builder key(@Nullable Output<String> key) {
            this.key = key;
            return this;
        }
        public Builder key(@Nullable String key) {
            this.key = Codegen.ofNullable(key);
            return this;
        }
        public Builder status(@Nullable Output<Either<String,Status>> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable Either<String,Status> status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }        public SslConfigurationArgs build() {
            return new SslConfigurationArgs(cert, cname, key, status);
        }
    }
}
