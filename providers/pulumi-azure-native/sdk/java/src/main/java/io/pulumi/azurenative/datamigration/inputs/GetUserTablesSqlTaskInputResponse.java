// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datamigration.inputs;

import io.pulumi.azurenative.datamigration.inputs.SqlConnectionInfoResponse;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetUserTablesSqlTaskInputResponse extends io.pulumi.resources.InvokeArgs {

    public static final GetUserTablesSqlTaskInputResponse Empty = new GetUserTablesSqlTaskInputResponse();

    @InputImport(name="connectionInfo", required=true)
    private final SqlConnectionInfoResponse connectionInfo;

    public SqlConnectionInfoResponse getConnectionInfo() {
        return this.connectionInfo;
    }

    @InputImport(name="selectedDatabases", required=true)
    private final List<String> selectedDatabases;

    public List<String> getSelectedDatabases() {
        return this.selectedDatabases;
    }

    public GetUserTablesSqlTaskInputResponse(
        SqlConnectionInfoResponse connectionInfo,
        List<String> selectedDatabases) {
        this.connectionInfo = Objects.requireNonNull(connectionInfo, "expected parameter 'connectionInfo' to be non-null");
        this.selectedDatabases = Objects.requireNonNull(selectedDatabases, "expected parameter 'selectedDatabases' to be non-null");
    }

    private GetUserTablesSqlTaskInputResponse() {
        this.connectionInfo = null;
        this.selectedDatabases = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserTablesSqlTaskInputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlConnectionInfoResponse connectionInfo;
        private List<String> selectedDatabases;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserTablesSqlTaskInputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionInfo = defaults.connectionInfo;
    	      this.selectedDatabases = defaults.selectedDatabases;
        }

        public Builder setConnectionInfo(SqlConnectionInfoResponse connectionInfo) {
            this.connectionInfo = Objects.requireNonNull(connectionInfo);
            return this;
        }

        public Builder setSelectedDatabases(List<String> selectedDatabases) {
            this.selectedDatabases = Objects.requireNonNull(selectedDatabases);
            return this;
        }

        public GetUserTablesSqlTaskInputResponse build() {
            return new GetUserTablesSqlTaskInputResponse(connectionInfo, selectedDatabases);
        }
    }
}
