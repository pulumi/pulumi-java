// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.appplatform.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Required inbound or outbound traffic for Azure Spring Cloud instance.
 * 
 */
public final class RequiredTrafficResponse extends io.pulumi.resources.InvokeArgs {

    public static final RequiredTrafficResponse Empty = new RequiredTrafficResponse();

    /**
     * The direction of required traffic
     * 
     */
    @Import(name="direction", required=true)
      private final String direction;

    public String direction() {
        return this.direction;
    }

    /**
     * The FQDN list of required traffic
     * 
     */
    @Import(name="fqdns", required=true)
      private final List<String> fqdns;

    public List<String> fqdns() {
        return this.fqdns;
    }

    /**
     * The ip list of required traffic
     * 
     */
    @Import(name="ips", required=true)
      private final List<String> ips;

    public List<String> ips() {
        return this.ips;
    }

    /**
     * The port of required traffic
     * 
     */
    @Import(name="port", required=true)
      private final Integer port;

    public Integer port() {
        return this.port;
    }

    /**
     * The protocol of required traffic
     * 
     */
    @Import(name="protocol", required=true)
      private final String protocol;

    public String protocol() {
        return this.protocol;
    }

    public RequiredTrafficResponse(
        String direction,
        List<String> fqdns,
        List<String> ips,
        Integer port,
        String protocol) {
        this.direction = Objects.requireNonNull(direction, "expected parameter 'direction' to be non-null");
        this.fqdns = Objects.requireNonNull(fqdns, "expected parameter 'fqdns' to be non-null");
        this.ips = Objects.requireNonNull(ips, "expected parameter 'ips' to be non-null");
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
    }

    private RequiredTrafficResponse() {
        this.direction = null;
        this.fqdns = List.of();
        this.ips = List.of();
        this.port = null;
        this.protocol = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RequiredTrafficResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String direction;
        private List<String> fqdns;
        private List<String> ips;
        private Integer port;
        private String protocol;

        public Builder() {
    	      // Empty
        }

        public Builder(RequiredTrafficResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.direction = defaults.direction;
    	      this.fqdns = defaults.fqdns;
    	      this.ips = defaults.ips;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
        }

        public Builder direction(String direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }
        public Builder fqdns(List<String> fqdns) {
            this.fqdns = Objects.requireNonNull(fqdns);
            return this;
        }
        public Builder fqdns(String... fqdns) {
            return fqdns(List.of(fqdns));
        }
        public Builder ips(List<String> ips) {
            this.ips = Objects.requireNonNull(ips);
            return this;
        }
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }        public RequiredTrafficResponse build() {
            return new RequiredTrafficResponse(direction, fqdns, ips, port, protocol);
        }
    }
}
