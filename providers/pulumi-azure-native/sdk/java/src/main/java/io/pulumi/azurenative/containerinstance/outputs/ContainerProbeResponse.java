// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.containerinstance.outputs;

import io.pulumi.azurenative.containerinstance.outputs.ContainerExecResponse;
import io.pulumi.azurenative.containerinstance.outputs.ContainerHttpGetResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class ContainerProbeResponse {
    /**
     * The execution command to probe
     * 
     */
    private final @Nullable ContainerExecResponse exec;
    /**
     * The failure threshold.
     * 
     */
    private final @Nullable Integer failureThreshold;
    /**
     * The Http Get settings to probe
     * 
     */
    private final @Nullable ContainerHttpGetResponse httpGet;
    /**
     * The initial delay seconds.
     * 
     */
    private final @Nullable Integer initialDelaySeconds;
    /**
     * The period seconds.
     * 
     */
    private final @Nullable Integer periodSeconds;
    /**
     * The success threshold.
     * 
     */
    private final @Nullable Integer successThreshold;
    /**
     * The timeout seconds.
     * 
     */
    private final @Nullable Integer timeoutSeconds;

    @OutputCustomType.Constructor({"exec","failureThreshold","httpGet","initialDelaySeconds","periodSeconds","successThreshold","timeoutSeconds"})
    private ContainerProbeResponse(
        @Nullable ContainerExecResponse exec,
        @Nullable Integer failureThreshold,
        @Nullable ContainerHttpGetResponse httpGet,
        @Nullable Integer initialDelaySeconds,
        @Nullable Integer periodSeconds,
        @Nullable Integer successThreshold,
        @Nullable Integer timeoutSeconds) {
        this.exec = exec;
        this.failureThreshold = failureThreshold;
        this.httpGet = httpGet;
        this.initialDelaySeconds = initialDelaySeconds;
        this.periodSeconds = periodSeconds;
        this.successThreshold = successThreshold;
        this.timeoutSeconds = timeoutSeconds;
    }

    /**
     * The execution command to probe
     * 
     */
    public Optional<ContainerExecResponse> getExec() {
        return Optional.ofNullable(this.exec);
    }
    /**
     * The failure threshold.
     * 
     */
    public Optional<Integer> getFailureThreshold() {
        return Optional.ofNullable(this.failureThreshold);
    }
    /**
     * The Http Get settings to probe
     * 
     */
    public Optional<ContainerHttpGetResponse> getHttpGet() {
        return Optional.ofNullable(this.httpGet);
    }
    /**
     * The initial delay seconds.
     * 
     */
    public Optional<Integer> getInitialDelaySeconds() {
        return Optional.ofNullable(this.initialDelaySeconds);
    }
    /**
     * The period seconds.
     * 
     */
    public Optional<Integer> getPeriodSeconds() {
        return Optional.ofNullable(this.periodSeconds);
    }
    /**
     * The success threshold.
     * 
     */
    public Optional<Integer> getSuccessThreshold() {
        return Optional.ofNullable(this.successThreshold);
    }
    /**
     * The timeout seconds.
     * 
     */
    public Optional<Integer> getTimeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerProbeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable ContainerExecResponse exec;
        private @Nullable Integer failureThreshold;
        private @Nullable ContainerHttpGetResponse httpGet;
        private @Nullable Integer initialDelaySeconds;
        private @Nullable Integer periodSeconds;
        private @Nullable Integer successThreshold;
        private @Nullable Integer timeoutSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerProbeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exec = defaults.exec;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.httpGet = defaults.httpGet;
    	      this.initialDelaySeconds = defaults.initialDelaySeconds;
    	      this.periodSeconds = defaults.periodSeconds;
    	      this.successThreshold = defaults.successThreshold;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        public Builder setExec(@Nullable ContainerExecResponse exec) {
            this.exec = exec;
            return this;
        }

        public Builder setFailureThreshold(@Nullable Integer failureThreshold) {
            this.failureThreshold = failureThreshold;
            return this;
        }

        public Builder setHttpGet(@Nullable ContainerHttpGetResponse httpGet) {
            this.httpGet = httpGet;
            return this;
        }

        public Builder setInitialDelaySeconds(@Nullable Integer initialDelaySeconds) {
            this.initialDelaySeconds = initialDelaySeconds;
            return this;
        }

        public Builder setPeriodSeconds(@Nullable Integer periodSeconds) {
            this.periodSeconds = periodSeconds;
            return this;
        }

        public Builder setSuccessThreshold(@Nullable Integer successThreshold) {
            this.successThreshold = successThreshold;
            return this;
        }

        public Builder setTimeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public ContainerProbeResponse build() {
            return new ContainerProbeResponse(exec, failureThreshold, httpGet, initialDelaySeconds, periodSeconds, successThreshold, timeoutSeconds);
        }
    }
}
