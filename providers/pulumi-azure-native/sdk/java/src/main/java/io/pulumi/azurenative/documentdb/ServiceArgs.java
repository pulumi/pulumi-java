// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb;

import io.pulumi.azurenative.documentdb.enums.ServiceSize;
import io.pulumi.azurenative.documentdb.enums.ServiceType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * Cosmos DB database account name.
     * 
     */
    @InputImport(name="accountName", required=true)
      private final Input<String> accountName;

    public Input<String> getAccountName() {
        return this.accountName;
    }

    /**
     * Instance count for the service.
     * 
     */
    @InputImport(name="instanceCount")
      private final @Nullable Input<Integer> instanceCount;

    public Input<Integer> getInstanceCount() {
        return this.instanceCount == null ? Input.empty() : this.instanceCount;
    }

    /**
     * Instance type for the service.
     * 
     */
    @InputImport(name="instanceSize")
      private final @Nullable Input<Either<String,ServiceSize>> instanceSize;

    public Input<Either<String,ServiceSize>> getInstanceSize() {
        return this.instanceSize == null ? Input.empty() : this.instanceSize;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Cosmos DB service name.
     * 
     */
    @InputImport(name="serviceName")
      private final @Nullable Input<String> serviceName;

    public Input<String> getServiceName() {
        return this.serviceName == null ? Input.empty() : this.serviceName;
    }

    /**
     * ServiceType for the service.
     * 
     */
    @InputImport(name="serviceType")
      private final @Nullable Input<Either<String,ServiceType>> serviceType;

    public Input<Either<String,ServiceType>> getServiceType() {
        return this.serviceType == null ? Input.empty() : this.serviceType;
    }

    public ServiceArgs(
        Input<String> accountName,
        @Nullable Input<Integer> instanceCount,
        @Nullable Input<Either<String,ServiceSize>> instanceSize,
        Input<String> resourceGroupName,
        @Nullable Input<String> serviceName,
        @Nullable Input<Either<String,ServiceType>> serviceType) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.instanceCount = instanceCount;
        this.instanceSize = instanceSize;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceName = serviceName;
        this.serviceType = serviceType;
    }

    private ServiceArgs() {
        this.accountName = Input.empty();
        this.instanceCount = Input.empty();
        this.instanceSize = Input.empty();
        this.resourceGroupName = Input.empty();
        this.serviceName = Input.empty();
        this.serviceType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> accountName;
        private @Nullable Input<Integer> instanceCount;
        private @Nullable Input<Either<String,ServiceSize>> instanceSize;
        private Input<String> resourceGroupName;
        private @Nullable Input<String> serviceName;
        private @Nullable Input<Either<String,ServiceType>> serviceType;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.instanceCount = defaults.instanceCount;
    	      this.instanceSize = defaults.instanceSize;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceName = defaults.serviceName;
    	      this.serviceType = defaults.serviceType;
        }

        public Builder setAccountName(Input<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }

        public Builder setAccountName(String accountName) {
            this.accountName = Input.of(Objects.requireNonNull(accountName));
            return this;
        }

        public Builder setInstanceCount(@Nullable Input<Integer> instanceCount) {
            this.instanceCount = instanceCount;
            return this;
        }

        public Builder setInstanceCount(@Nullable Integer instanceCount) {
            this.instanceCount = Input.ofNullable(instanceCount);
            return this;
        }

        public Builder setInstanceSize(@Nullable Input<Either<String,ServiceSize>> instanceSize) {
            this.instanceSize = instanceSize;
            return this;
        }

        public Builder setInstanceSize(@Nullable Either<String,ServiceSize> instanceSize) {
            this.instanceSize = Input.ofNullable(instanceSize);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setServiceName(@Nullable Input<String> serviceName) {
            this.serviceName = serviceName;
            return this;
        }

        public Builder setServiceName(@Nullable String serviceName) {
            this.serviceName = Input.ofNullable(serviceName);
            return this;
        }

        public Builder setServiceType(@Nullable Input<Either<String,ServiceType>> serviceType) {
            this.serviceType = serviceType;
            return this;
        }

        public Builder setServiceType(@Nullable Either<String,ServiceType> serviceType) {
            this.serviceType = Input.ofNullable(serviceType);
            return this;
        }
        public ServiceArgs build() {
            return new ServiceArgs(accountName, instanceCount, instanceSize, resourceGroupName, serviceName, serviceType);
        }
    }
}
