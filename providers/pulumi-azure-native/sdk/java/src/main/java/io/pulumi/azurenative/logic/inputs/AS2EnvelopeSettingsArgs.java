// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.logic.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The AS2 agreement envelope settings.
 * 
 */
public final class AS2EnvelopeSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AS2EnvelopeSettingsArgs Empty = new AS2EnvelopeSettingsArgs();

    /**
     * The value indicating whether to auto generate file name.
     * 
     */
    @InputImport(name="autogenerateFileName", required=true)
      private final Output<Boolean> autogenerateFileName;

    public Output<Boolean> getAutogenerateFileName() {
        return this.autogenerateFileName;
    }

    /**
     * The template for file name.
     * 
     */
    @InputImport(name="fileNameTemplate", required=true)
      private final Output<String> fileNameTemplate;

    public Output<String> getFileNameTemplate() {
        return this.fileNameTemplate;
    }

    /**
     * The message content type.
     * 
     */
    @InputImport(name="messageContentType", required=true)
      private final Output<String> messageContentType;

    public Output<String> getMessageContentType() {
        return this.messageContentType;
    }

    /**
     * The value indicating whether to suspend message on file name generation error.
     * 
     */
    @InputImport(name="suspendMessageOnFileNameGenerationError", required=true)
      private final Output<Boolean> suspendMessageOnFileNameGenerationError;

    public Output<Boolean> getSuspendMessageOnFileNameGenerationError() {
        return this.suspendMessageOnFileNameGenerationError;
    }

    /**
     * The value indicating whether to transmit file name in mime header.
     * 
     */
    @InputImport(name="transmitFileNameInMimeHeader", required=true)
      private final Output<Boolean> transmitFileNameInMimeHeader;

    public Output<Boolean> getTransmitFileNameInMimeHeader() {
        return this.transmitFileNameInMimeHeader;
    }

    public AS2EnvelopeSettingsArgs(
        Output<Boolean> autogenerateFileName,
        Output<String> fileNameTemplate,
        Output<String> messageContentType,
        Output<Boolean> suspendMessageOnFileNameGenerationError,
        Output<Boolean> transmitFileNameInMimeHeader) {
        this.autogenerateFileName = Objects.requireNonNull(autogenerateFileName, "expected parameter 'autogenerateFileName' to be non-null");
        this.fileNameTemplate = Objects.requireNonNull(fileNameTemplate, "expected parameter 'fileNameTemplate' to be non-null");
        this.messageContentType = Objects.requireNonNull(messageContentType, "expected parameter 'messageContentType' to be non-null");
        this.suspendMessageOnFileNameGenerationError = Objects.requireNonNull(suspendMessageOnFileNameGenerationError, "expected parameter 'suspendMessageOnFileNameGenerationError' to be non-null");
        this.transmitFileNameInMimeHeader = Objects.requireNonNull(transmitFileNameInMimeHeader, "expected parameter 'transmitFileNameInMimeHeader' to be non-null");
    }

    private AS2EnvelopeSettingsArgs() {
        this.autogenerateFileName = Output.empty();
        this.fileNameTemplate = Output.empty();
        this.messageContentType = Output.empty();
        this.suspendMessageOnFileNameGenerationError = Output.empty();
        this.transmitFileNameInMimeHeader = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AS2EnvelopeSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Boolean> autogenerateFileName;
        private Output<String> fileNameTemplate;
        private Output<String> messageContentType;
        private Output<Boolean> suspendMessageOnFileNameGenerationError;
        private Output<Boolean> transmitFileNameInMimeHeader;

        public Builder() {
    	      // Empty
        }

        public Builder(AS2EnvelopeSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autogenerateFileName = defaults.autogenerateFileName;
    	      this.fileNameTemplate = defaults.fileNameTemplate;
    	      this.messageContentType = defaults.messageContentType;
    	      this.suspendMessageOnFileNameGenerationError = defaults.suspendMessageOnFileNameGenerationError;
    	      this.transmitFileNameInMimeHeader = defaults.transmitFileNameInMimeHeader;
        }

        public Builder autogenerateFileName(Output<Boolean> autogenerateFileName) {
            this.autogenerateFileName = Objects.requireNonNull(autogenerateFileName);
            return this;
        }

        public Builder autogenerateFileName(Boolean autogenerateFileName) {
            this.autogenerateFileName = Output.of(Objects.requireNonNull(autogenerateFileName));
            return this;
        }

        public Builder fileNameTemplate(Output<String> fileNameTemplate) {
            this.fileNameTemplate = Objects.requireNonNull(fileNameTemplate);
            return this;
        }

        public Builder fileNameTemplate(String fileNameTemplate) {
            this.fileNameTemplate = Output.of(Objects.requireNonNull(fileNameTemplate));
            return this;
        }

        public Builder messageContentType(Output<String> messageContentType) {
            this.messageContentType = Objects.requireNonNull(messageContentType);
            return this;
        }

        public Builder messageContentType(String messageContentType) {
            this.messageContentType = Output.of(Objects.requireNonNull(messageContentType));
            return this;
        }

        public Builder suspendMessageOnFileNameGenerationError(Output<Boolean> suspendMessageOnFileNameGenerationError) {
            this.suspendMessageOnFileNameGenerationError = Objects.requireNonNull(suspendMessageOnFileNameGenerationError);
            return this;
        }

        public Builder suspendMessageOnFileNameGenerationError(Boolean suspendMessageOnFileNameGenerationError) {
            this.suspendMessageOnFileNameGenerationError = Output.of(Objects.requireNonNull(suspendMessageOnFileNameGenerationError));
            return this;
        }

        public Builder transmitFileNameInMimeHeader(Output<Boolean> transmitFileNameInMimeHeader) {
            this.transmitFileNameInMimeHeader = Objects.requireNonNull(transmitFileNameInMimeHeader);
            return this;
        }

        public Builder transmitFileNameInMimeHeader(Boolean transmitFileNameInMimeHeader) {
            this.transmitFileNameInMimeHeader = Output.of(Objects.requireNonNull(transmitFileNameInMimeHeader));
            return this;
        }
        public AS2EnvelopeSettingsArgs build() {
            return new AS2EnvelopeSettingsArgs(autogenerateFileName, fileNameTemplate, messageContentType, suspendMessageOnFileNameGenerationError, transmitFileNameInMimeHeader);
        }
    }
}
