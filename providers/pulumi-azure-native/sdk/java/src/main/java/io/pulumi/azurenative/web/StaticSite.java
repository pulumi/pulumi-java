// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.web;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.web.StaticSiteArgs;
import io.pulumi.azurenative.web.outputs.ManagedServiceIdentityResponse;
import io.pulumi.azurenative.web.outputs.ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse;
import io.pulumi.azurenative.web.outputs.SkuDescriptionResponse;
import io.pulumi.azurenative.web.outputs.StaticSiteBuildPropertiesResponse;
import io.pulumi.azurenative.web.outputs.StaticSiteTemplateOptionsResponse;
import io.pulumi.azurenative.web.outputs.StaticSiteUserProvidedFunctionAppResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Static Site ARM resource.
 * API Version: 2020-12-01.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:web:StaticSite testStaticSite0 /subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0 
 * ```
 * 
 */
@ResourceType(type="azure-native:web:StaticSite")
public class StaticSite extends io.pulumi.resources.CustomResource {
    /**
     * <code>false</code> if config file is locked for this static web app; otherwise, <code>true</code>.
     * 
     */
    @Export(name="allowConfigFileUpdates", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowConfigFileUpdates;

    /**
     * @return <code>false</code> if config file is locked for this static web app; otherwise, <code>true</code>.
     * 
     */
    public Output</* @Nullable */ Boolean> getAllowConfigFileUpdates() {
        return this.allowConfigFileUpdates;
    }
    /**
     * The target branch in the repository.
     * 
     */
    @Export(name="branch", type=String.class, parameters={})
    private Output</* @Nullable */ String> branch;

    /**
     * @return The target branch in the repository.
     * 
     */
    public Output</* @Nullable */ String> getBranch() {
        return this.branch;
    }
    /**
     * Build properties to configure on the repository.
     * 
     */
    @Export(name="buildProperties", type=StaticSiteBuildPropertiesResponse.class, parameters={})
    private Output</* @Nullable */ StaticSiteBuildPropertiesResponse> buildProperties;

    /**
     * @return Build properties to configure on the repository.
     * 
     */
    public Output</* @Nullable */ StaticSiteBuildPropertiesResponse> getBuildProperties() {
        return this.buildProperties;
    }
    /**
     * The content distribution endpoint for the static site.
     * 
     */
    @Export(name="contentDistributionEndpoint", type=String.class, parameters={})
    private Output<String> contentDistributionEndpoint;

    /**
     * @return The content distribution endpoint for the static site.
     * 
     */
    public Output<String> getContentDistributionEndpoint() {
        return this.contentDistributionEndpoint;
    }
    /**
     * The custom domains associated with this static site.
     * 
     */
    @Export(name="customDomains", type=List.class, parameters={String.class})
    private Output<List<String>> customDomains;

    /**
     * @return The custom domains associated with this static site.
     * 
     */
    public Output<List<String>> getCustomDomains() {
        return this.customDomains;
    }
    /**
     * The default autogenerated hostname for the static site.
     * 
     */
    @Export(name="defaultHostname", type=String.class, parameters={})
    private Output<String> defaultHostname;

    /**
     * @return The default autogenerated hostname for the static site.
     * 
     */
    public Output<String> getDefaultHostname() {
        return this.defaultHostname;
    }
    /**
     * Managed service identity.
     * 
     */
    @Export(name="identity", type=ManagedServiceIdentityResponse.class, parameters={})
    private Output</* @Nullable */ ManagedServiceIdentityResponse> identity;

    /**
     * @return Managed service identity.
     * 
     */
    public Output</* @Nullable */ ManagedServiceIdentityResponse> getIdentity() {
        return this.identity;
    }
    /**
     * Identity to use for Key Vault Reference authentication.
     * 
     */
    @Export(name="keyVaultReferenceIdentity", type=String.class, parameters={})
    private Output<String> keyVaultReferenceIdentity;

    /**
     * @return Identity to use for Key Vault Reference authentication.
     * 
     */
    public Output<String> getKeyVaultReferenceIdentity() {
        return this.keyVaultReferenceIdentity;
    }
    /**
     * Kind of resource.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output</* @Nullable */ String> kind;

    /**
     * @return Kind of resource.
     * 
     */
    public Output</* @Nullable */ String> getKind() {
        return this.kind;
    }
    /**
     * Resource Location.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource Location.
     * 
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Resource Name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource Name.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Private endpoint connections
     * 
     */
    @Export(name="privateEndpointConnections", type=List.class, parameters={ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse.class})
    private Output<List<ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse>> privateEndpointConnections;

    /**
     * @return Private endpoint connections
     * 
     */
    public Output<List<ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse>> getPrivateEndpointConnections() {
        return this.privateEndpointConnections;
    }
    /**
     * The provider that submitted the last deployment to the primary environment of the static site.
     * 
     */
    @Export(name="provider", type=String.class, parameters={})
    private Output<String> provider;

    /**
     * @return The provider that submitted the last deployment to the primary environment of the static site.
     * 
     */
    public Output<String> getProvider() {
        return this.provider;
    }
    /**
     * A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
     * 
     */
    @Export(name="repositoryToken", type=String.class, parameters={})
    private Output</* @Nullable */ String> repositoryToken;

    /**
     * @return A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
     * 
     */
    public Output</* @Nullable */ String> getRepositoryToken() {
        return this.repositoryToken;
    }
    /**
     * URL for the repository of the static site.
     * 
     */
    @Export(name="repositoryUrl", type=String.class, parameters={})
    private Output</* @Nullable */ String> repositoryUrl;

    /**
     * @return URL for the repository of the static site.
     * 
     */
    public Output</* @Nullable */ String> getRepositoryUrl() {
        return this.repositoryUrl;
    }
    /**
     * Description of a SKU for a scalable resource.
     * 
     */
    @Export(name="sku", type=SkuDescriptionResponse.class, parameters={})
    private Output</* @Nullable */ SkuDescriptionResponse> sku;

    /**
     * @return Description of a SKU for a scalable resource.
     * 
     */
    public Output</* @Nullable */ SkuDescriptionResponse> getSku() {
        return this.sku;
    }
    /**
     * State indicating whether staging environments are allowed or not allowed for a static web app.
     * 
     */
    @Export(name="stagingEnvironmentPolicy", type=String.class, parameters={})
    private Output</* @Nullable */ String> stagingEnvironmentPolicy;

    /**
     * @return State indicating whether staging environments are allowed or not allowed for a static web app.
     * 
     */
    public Output</* @Nullable */ String> getStagingEnvironmentPolicy() {
        return this.stagingEnvironmentPolicy;
    }
    /**
     * Resource tags.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Template options for generating a new repository.
     * 
     */
    @Export(name="templateProperties", type=StaticSiteTemplateOptionsResponse.class, parameters={})
    private Output</* @Nullable */ StaticSiteTemplateOptionsResponse> templateProperties;

    /**
     * @return Template options for generating a new repository.
     * 
     */
    public Output</* @Nullable */ StaticSiteTemplateOptionsResponse> getTemplateProperties() {
        return this.templateProperties;
    }
    /**
     * Resource type.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * User provided function apps registered with the static site
     * 
     */
    @Export(name="userProvidedFunctionApps", type=List.class, parameters={StaticSiteUserProvidedFunctionAppResponse.class})
    private Output<List<StaticSiteUserProvidedFunctionAppResponse>> userProvidedFunctionApps;

    /**
     * @return User provided function apps registered with the static site
     * 
     */
    public Output<List<StaticSiteUserProvidedFunctionAppResponse>> getUserProvidedFunctionApps() {
        return this.userProvidedFunctionApps;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public StaticSite(String name) {
        this(name, StaticSiteArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public StaticSite(String name, StaticSiteArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public StaticSite(String name, StaticSiteArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:web:StaticSite", name, args == null ? StaticSiteArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private StaticSite(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:web:StaticSite", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:web/v20190801:StaticSite").build()),
                Output.of(Alias.builder().type("azure-native:web/v20200601:StaticSite").build()),
                Output.of(Alias.builder().type("azure-native:web/v20200901:StaticSite").build()),
                Output.of(Alias.builder().type("azure-native:web/v20201001:StaticSite").build()),
                Output.of(Alias.builder().type("azure-native:web/v20201201:StaticSite").build()),
                Output.of(Alias.builder().type("azure-native:web/v20210101:StaticSite").build()),
                Output.of(Alias.builder().type("azure-native:web/v20210115:StaticSite").build()),
                Output.of(Alias.builder().type("azure-native:web/v20210201:StaticSite").build()),
                Output.of(Alias.builder().type("azure-native:web/v20210301:StaticSite").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static StaticSite get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new StaticSite(name, id, options);
    }
}
