// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.hybriddata;

import io.pulumi.azurenative.hybriddata.enums.RunLocation;
import io.pulumi.azurenative.hybriddata.enums.State;
import io.pulumi.azurenative.hybriddata.enums.UserConfirmation;
import io.pulumi.azurenative.hybriddata.inputs.CustomerSecretArgs;
import io.pulumi.azurenative.hybriddata.inputs.ScheduleArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobDefinitionArgs Empty = new JobDefinitionArgs();

    /**
     * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     * 
     */
    @InputImport(name="customerSecrets")
      private final @Nullable Input<List<CustomerSecretArgs>> customerSecrets;

    public Input<List<CustomerSecretArgs>> getCustomerSecrets() {
        return this.customerSecrets == null ? Input.empty() : this.customerSecrets;
    }

    /**
     * The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * 
     */
    @InputImport(name="dataManagerName", required=true)
      private final Input<String> dataManagerName;

    public Input<String> getDataManagerName() {
        return this.dataManagerName;
    }

    /**
     * A generic json used differently by each data service type.
     * 
     */
    @InputImport(name="dataServiceInput")
      private final @Nullable Input<Object> dataServiceInput;

    public Input<Object> getDataServiceInput() {
        return this.dataServiceInput == null ? Input.empty() : this.dataServiceInput;
    }

    /**
     * The data service type of the job definition.
     * 
     */
    @InputImport(name="dataServiceName", required=true)
      private final Input<String> dataServiceName;

    public Input<String> getDataServiceName() {
        return this.dataServiceName;
    }

    /**
     * Data Sink Id associated to the job definition.
     * 
     */
    @InputImport(name="dataSinkId", required=true)
      private final Input<String> dataSinkId;

    public Input<String> getDataSinkId() {
        return this.dataSinkId;
    }

    /**
     * Data Source Id associated to the job definition.
     * 
     */
    @InputImport(name="dataSourceId", required=true)
      private final Input<String> dataSourceId;

    public Input<String> getDataSourceId() {
        return this.dataSourceId;
    }

    /**
     * The job definition name to be created or updated.
     * 
     */
    @InputImport(name="jobDefinitionName")
      private final @Nullable Input<String> jobDefinitionName;

    public Input<String> getJobDefinitionName() {
        return this.jobDefinitionName == null ? Input.empty() : this.jobDefinitionName;
    }

    /**
     * Last modified time of the job definition.
     * 
     */
    @InputImport(name="lastModifiedTime")
      private final @Nullable Input<String> lastModifiedTime;

    public Input<String> getLastModifiedTime() {
        return this.lastModifiedTime == null ? Input.empty() : this.lastModifiedTime;
    }

    /**
     * The Resource Group Name
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * This is the preferred geo location for the job to run.
     * 
     */
    @InputImport(name="runLocation")
      private final @Nullable Input<RunLocation> runLocation;

    public Input<RunLocation> getRunLocation() {
        return this.runLocation == null ? Input.empty() : this.runLocation;
    }

    /**
     * Schedule for running the job definition
     * 
     */
    @InputImport(name="schedules")
      private final @Nullable Input<List<ScheduleArgs>> schedules;

    public Input<List<ScheduleArgs>> getSchedules() {
        return this.schedules == null ? Input.empty() : this.schedules;
    }

    /**
     * State of the job definition.
     * 
     */
    @InputImport(name="state", required=true)
      private final Input<State> state;

    public Input<State> getState() {
        return this.state;
    }

    /**
     * Enum to detect if user confirmation is required. If not passed will default to NotRequired.
     * 
     */
    @InputImport(name="userConfirmation")
      private final @Nullable Input<UserConfirmation> userConfirmation;

    public Input<UserConfirmation> getUserConfirmation() {
        return this.userConfirmation == null ? Input.empty() : this.userConfirmation;
    }

    public JobDefinitionArgs(
        @Nullable Input<List<CustomerSecretArgs>> customerSecrets,
        Input<String> dataManagerName,
        @Nullable Input<Object> dataServiceInput,
        Input<String> dataServiceName,
        Input<String> dataSinkId,
        Input<String> dataSourceId,
        @Nullable Input<String> jobDefinitionName,
        @Nullable Input<String> lastModifiedTime,
        Input<String> resourceGroupName,
        @Nullable Input<RunLocation> runLocation,
        @Nullable Input<List<ScheduleArgs>> schedules,
        Input<State> state,
        @Nullable Input<UserConfirmation> userConfirmation) {
        this.customerSecrets = customerSecrets;
        this.dataManagerName = Objects.requireNonNull(dataManagerName, "expected parameter 'dataManagerName' to be non-null");
        this.dataServiceInput = dataServiceInput;
        this.dataServiceName = Objects.requireNonNull(dataServiceName, "expected parameter 'dataServiceName' to be non-null");
        this.dataSinkId = Objects.requireNonNull(dataSinkId, "expected parameter 'dataSinkId' to be non-null");
        this.dataSourceId = Objects.requireNonNull(dataSourceId, "expected parameter 'dataSourceId' to be non-null");
        this.jobDefinitionName = jobDefinitionName;
        this.lastModifiedTime = lastModifiedTime;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.runLocation = runLocation;
        this.schedules = schedules;
        this.state = Objects.requireNonNull(state, "expected parameter 'state' to be non-null");
        this.userConfirmation = userConfirmation == null ? Input.ofNullable(io.pulumi.azurenative.hybriddata.enums.UserConfirmation.NotRequired) : userConfirmation;
    }

    private JobDefinitionArgs() {
        this.customerSecrets = Input.empty();
        this.dataManagerName = Input.empty();
        this.dataServiceInput = Input.empty();
        this.dataServiceName = Input.empty();
        this.dataSinkId = Input.empty();
        this.dataSourceId = Input.empty();
        this.jobDefinitionName = Input.empty();
        this.lastModifiedTime = Input.empty();
        this.resourceGroupName = Input.empty();
        this.runLocation = Input.empty();
        this.schedules = Input.empty();
        this.state = Input.empty();
        this.userConfirmation = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<CustomerSecretArgs>> customerSecrets;
        private Input<String> dataManagerName;
        private @Nullable Input<Object> dataServiceInput;
        private Input<String> dataServiceName;
        private Input<String> dataSinkId;
        private Input<String> dataSourceId;
        private @Nullable Input<String> jobDefinitionName;
        private @Nullable Input<String> lastModifiedTime;
        private Input<String> resourceGroupName;
        private @Nullable Input<RunLocation> runLocation;
        private @Nullable Input<List<ScheduleArgs>> schedules;
        private Input<State> state;
        private @Nullable Input<UserConfirmation> userConfirmation;

        public Builder() {
    	      // Empty
        }

        public Builder(JobDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customerSecrets = defaults.customerSecrets;
    	      this.dataManagerName = defaults.dataManagerName;
    	      this.dataServiceInput = defaults.dataServiceInput;
    	      this.dataServiceName = defaults.dataServiceName;
    	      this.dataSinkId = defaults.dataSinkId;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.jobDefinitionName = defaults.jobDefinitionName;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.runLocation = defaults.runLocation;
    	      this.schedules = defaults.schedules;
    	      this.state = defaults.state;
    	      this.userConfirmation = defaults.userConfirmation;
        }

        public Builder customerSecrets(@Nullable Input<List<CustomerSecretArgs>> customerSecrets) {
            this.customerSecrets = customerSecrets;
            return this;
        }

        public Builder customerSecrets(@Nullable List<CustomerSecretArgs> customerSecrets) {
            this.customerSecrets = Input.ofNullable(customerSecrets);
            return this;
        }

        public Builder dataManagerName(Input<String> dataManagerName) {
            this.dataManagerName = Objects.requireNonNull(dataManagerName);
            return this;
        }

        public Builder dataManagerName(String dataManagerName) {
            this.dataManagerName = Input.of(Objects.requireNonNull(dataManagerName));
            return this;
        }

        public Builder dataServiceInput(@Nullable Input<Object> dataServiceInput) {
            this.dataServiceInput = dataServiceInput;
            return this;
        }

        public Builder dataServiceInput(@Nullable Object dataServiceInput) {
            this.dataServiceInput = Input.ofNullable(dataServiceInput);
            return this;
        }

        public Builder dataServiceName(Input<String> dataServiceName) {
            this.dataServiceName = Objects.requireNonNull(dataServiceName);
            return this;
        }

        public Builder dataServiceName(String dataServiceName) {
            this.dataServiceName = Input.of(Objects.requireNonNull(dataServiceName));
            return this;
        }

        public Builder dataSinkId(Input<String> dataSinkId) {
            this.dataSinkId = Objects.requireNonNull(dataSinkId);
            return this;
        }

        public Builder dataSinkId(String dataSinkId) {
            this.dataSinkId = Input.of(Objects.requireNonNull(dataSinkId));
            return this;
        }

        public Builder dataSourceId(Input<String> dataSourceId) {
            this.dataSourceId = Objects.requireNonNull(dataSourceId);
            return this;
        }

        public Builder dataSourceId(String dataSourceId) {
            this.dataSourceId = Input.of(Objects.requireNonNull(dataSourceId));
            return this;
        }

        public Builder jobDefinitionName(@Nullable Input<String> jobDefinitionName) {
            this.jobDefinitionName = jobDefinitionName;
            return this;
        }

        public Builder jobDefinitionName(@Nullable String jobDefinitionName) {
            this.jobDefinitionName = Input.ofNullable(jobDefinitionName);
            return this;
        }

        public Builder lastModifiedTime(@Nullable Input<String> lastModifiedTime) {
            this.lastModifiedTime = lastModifiedTime;
            return this;
        }

        public Builder lastModifiedTime(@Nullable String lastModifiedTime) {
            this.lastModifiedTime = Input.ofNullable(lastModifiedTime);
            return this;
        }

        public Builder resourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder runLocation(@Nullable Input<RunLocation> runLocation) {
            this.runLocation = runLocation;
            return this;
        }

        public Builder runLocation(@Nullable RunLocation runLocation) {
            this.runLocation = Input.ofNullable(runLocation);
            return this;
        }

        public Builder schedules(@Nullable Input<List<ScheduleArgs>> schedules) {
            this.schedules = schedules;
            return this;
        }

        public Builder schedules(@Nullable List<ScheduleArgs> schedules) {
            this.schedules = Input.ofNullable(schedules);
            return this;
        }

        public Builder state(Input<State> state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder state(State state) {
            this.state = Input.of(Objects.requireNonNull(state));
            return this;
        }

        public Builder userConfirmation(@Nullable Input<UserConfirmation> userConfirmation) {
            this.userConfirmation = userConfirmation;
            return this;
        }

        public Builder userConfirmation(@Nullable UserConfirmation userConfirmation) {
            this.userConfirmation = Input.ofNullable(userConfirmation);
            return this;
        }
        public JobDefinitionArgs build() {
            return new JobDefinitionArgs(customerSecrets, dataManagerName, dataServiceInput, dataServiceName, dataSinkId, dataSourceId, jobDefinitionName, lastModifiedTime, resourceGroupName, runLocation, schedules, state, userConfirmation);
        }
    }
}
