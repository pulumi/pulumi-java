// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.streamanalytics.inputs;

import io.pulumi.azurenative.streamanalytics.inputs.AvroSerializationArgs;
import io.pulumi.azurenative.streamanalytics.inputs.BlobReferenceInputDataSourceArgs;
import io.pulumi.azurenative.streamanalytics.inputs.CsvSerializationArgs;
import io.pulumi.azurenative.streamanalytics.inputs.JsonSerializationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The properties that are associated with an input containing reference data.
 * 
 */
public final class ReferenceInputPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReferenceInputPropertiesArgs Empty = new ReferenceInputPropertiesArgs();

    /**
     * Describes an input data source that contains reference data. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @InputImport(name="datasource")
        private final @Nullable Input<BlobReferenceInputDataSourceArgs> datasource;

    public Input<BlobReferenceInputDataSourceArgs> getDatasource() {
        return this.datasource == null ? Input.empty() : this.datasource;
    }

    /**
     * Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @InputImport(name="serialization")
        private final @Nullable Input<Object> serialization;

    public Input<Object> getSerialization() {
        return this.serialization == null ? Input.empty() : this.serialization;
    }

    /**
     * Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
     * Expected value is 'Reference'.
     * 
     */
    @InputImport(name="type", required=true)
        private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public ReferenceInputPropertiesArgs(
        @Nullable Input<BlobReferenceInputDataSourceArgs> datasource,
        @Nullable Input<Object> serialization,
        Input<String> type) {
        this.datasource = datasource;
        this.serialization = serialization;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ReferenceInputPropertiesArgs() {
        this.datasource = Input.empty();
        this.serialization = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReferenceInputPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<BlobReferenceInputDataSourceArgs> datasource;
        private @Nullable Input<Object> serialization;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ReferenceInputPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasource = defaults.datasource;
    	      this.serialization = defaults.serialization;
    	      this.type = defaults.type;
        }

        public Builder setDatasource(@Nullable Input<BlobReferenceInputDataSourceArgs> datasource) {
            this.datasource = datasource;
            return this;
        }

        public Builder setDatasource(@Nullable BlobReferenceInputDataSourceArgs datasource) {
            this.datasource = Input.ofNullable(datasource);
            return this;
        }

        public Builder setSerialization(@Nullable Input<Object> serialization) {
            this.serialization = serialization;
            return this;
        }

        public Builder setSerialization(@Nullable Object serialization) {
            this.serialization = Input.ofNullable(serialization);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }
        public ReferenceInputPropertiesArgs build() {
            return new ReferenceInputPropertiesArgs(datasource, serialization, type);
        }
    }
}
