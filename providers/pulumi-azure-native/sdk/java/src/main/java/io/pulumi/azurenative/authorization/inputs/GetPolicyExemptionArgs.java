// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.authorization.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class GetPolicyExemptionArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetPolicyExemptionArgs Empty = new GetPolicyExemptionArgs();

    /**
     * The name of the policy exemption to delete.
     * 
     */
    @InputImport(name="policyExemptionName", required=true)
    private final String policyExemptionName;

    public String getPolicyExemptionName() {
        return this.policyExemptionName;
    }

    /**
     * The scope of the policy exemption. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     * 
     */
    @InputImport(name="scope", required=true)
    private final String scope;

    public String getScope() {
        return this.scope;
    }

    public GetPolicyExemptionArgs(
        String policyExemptionName,
        String scope) {
        this.policyExemptionName = Objects.requireNonNull(policyExemptionName, "expected parameter 'policyExemptionName' to be non-null");
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
    }

    private GetPolicyExemptionArgs() {
        this.policyExemptionName = null;
        this.scope = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyExemptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String policyExemptionName;
        private String scope;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPolicyExemptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.policyExemptionName = defaults.policyExemptionName;
    	      this.scope = defaults.scope;
        }

        public Builder setPolicyExemptionName(String policyExemptionName) {
            this.policyExemptionName = Objects.requireNonNull(policyExemptionName);
            return this;
        }

        public Builder setScope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }

        public GetPolicyExemptionArgs build() {
            return new GetPolicyExemptionArgs(policyExemptionName, scope);
        }
    }
}
