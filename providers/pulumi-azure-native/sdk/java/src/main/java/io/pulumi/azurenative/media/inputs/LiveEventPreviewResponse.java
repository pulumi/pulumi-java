// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.media.inputs;

import io.pulumi.azurenative.media.inputs.LiveEventEndpointResponse;
import io.pulumi.azurenative.media.inputs.LiveEventPreviewAccessControlResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Live event preview settings.
 * 
 */
public final class LiveEventPreviewResponse extends io.pulumi.resources.InvokeArgs {

    public static final LiveEventPreviewResponse Empty = new LiveEventPreviewResponse();

    /**
     * The access control for live event preview.
     * 
     */
    @InputImport(name="accessControl")
      private final @Nullable LiveEventPreviewAccessControlResponse accessControl;

    public Optional<LiveEventPreviewAccessControlResponse> getAccessControl() {
        return this.accessControl == null ? Optional.empty() : Optional.ofNullable(this.accessControl);
    }

    /**
     * An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
     * 
     */
    @InputImport(name="alternativeMediaId")
      private final @Nullable String alternativeMediaId;

    public Optional<String> getAlternativeMediaId() {
        return this.alternativeMediaId == null ? Optional.empty() : Optional.ofNullable(this.alternativeMediaId);
    }

    /**
     * The endpoints for preview. Do not share the preview URL with the live event audience.
     * 
     */
    @InputImport(name="endpoints")
      private final @Nullable List<LiveEventEndpointResponse> endpoints;

    public List<LiveEventEndpointResponse> getEndpoints() {
        return this.endpoints == null ? List.of() : this.endpoints;
    }

    /**
     * The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
     * 
     */
    @InputImport(name="previewLocator")
      private final @Nullable String previewLocator;

    public Optional<String> getPreviewLocator() {
        return this.previewLocator == null ? Optional.empty() : Optional.ofNullable(this.previewLocator);
    }

    /**
     * The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
     * 
     */
    @InputImport(name="streamingPolicyName")
      private final @Nullable String streamingPolicyName;

    public Optional<String> getStreamingPolicyName() {
        return this.streamingPolicyName == null ? Optional.empty() : Optional.ofNullable(this.streamingPolicyName);
    }

    public LiveEventPreviewResponse(
        @Nullable LiveEventPreviewAccessControlResponse accessControl,
        @Nullable String alternativeMediaId,
        @Nullable List<LiveEventEndpointResponse> endpoints,
        @Nullable String previewLocator,
        @Nullable String streamingPolicyName) {
        this.accessControl = accessControl;
        this.alternativeMediaId = alternativeMediaId;
        this.endpoints = endpoints;
        this.previewLocator = previewLocator;
        this.streamingPolicyName = streamingPolicyName;
    }

    private LiveEventPreviewResponse() {
        this.accessControl = null;
        this.alternativeMediaId = null;
        this.endpoints = List.of();
        this.previewLocator = null;
        this.streamingPolicyName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveEventPreviewResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable LiveEventPreviewAccessControlResponse accessControl;
        private @Nullable String alternativeMediaId;
        private @Nullable List<LiveEventEndpointResponse> endpoints;
        private @Nullable String previewLocator;
        private @Nullable String streamingPolicyName;

        public Builder() {
    	      // Empty
        }

        public Builder(LiveEventPreviewResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessControl = defaults.accessControl;
    	      this.alternativeMediaId = defaults.alternativeMediaId;
    	      this.endpoints = defaults.endpoints;
    	      this.previewLocator = defaults.previewLocator;
    	      this.streamingPolicyName = defaults.streamingPolicyName;
        }

        public Builder setAccessControl(@Nullable LiveEventPreviewAccessControlResponse accessControl) {
            this.accessControl = accessControl;
            return this;
        }

        public Builder setAlternativeMediaId(@Nullable String alternativeMediaId) {
            this.alternativeMediaId = alternativeMediaId;
            return this;
        }

        public Builder setEndpoints(@Nullable List<LiveEventEndpointResponse> endpoints) {
            this.endpoints = endpoints;
            return this;
        }

        public Builder setPreviewLocator(@Nullable String previewLocator) {
            this.previewLocator = previewLocator;
            return this;
        }

        public Builder setStreamingPolicyName(@Nullable String streamingPolicyName) {
            this.streamingPolicyName = streamingPolicyName;
            return this;
        }
        public LiveEventPreviewResponse build() {
            return new LiveEventPreviewResponse(accessControl, alternativeMediaId, endpoints, previewLocator, streamingPolicyName);
        }
    }
}
