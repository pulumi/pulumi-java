// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.migrate.inputs;

import io.pulumi.azurenative.migrate.inputs.DatabasesSolutionSummaryResponse;
import io.pulumi.azurenative.migrate.inputs.ServersSolutionSummaryResponse;
import io.pulumi.azurenative.migrate.inputs.SolutionDetailsResponse;
import io.pulumi.core.Either;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class for solution properties.
 * 
 */
public final class SolutionPropertiesResponse extends io.pulumi.resources.InvokeArgs {

    public static final SolutionPropertiesResponse Empty = new SolutionPropertiesResponse();

    /**
     * Gets or sets the cleanup state of the solution.
     * 
     */
    @InputImport(name="cleanupState")
      private final @Nullable String cleanupState;

    public Optional<String> getCleanupState() {
        return this.cleanupState == null ? Optional.empty() : Optional.ofNullable(this.cleanupState);
    }

    /**
     * Gets or sets the details of the solution.
     * 
     */
    @InputImport(name="details")
      private final @Nullable SolutionDetailsResponse details;

    public Optional<SolutionDetailsResponse> getDetails() {
        return this.details == null ? Optional.empty() : Optional.ofNullable(this.details);
    }

    /**
     * Gets or sets the goal of the solution.
     * 
     */
    @InputImport(name="goal")
      private final @Nullable String goal;

    public Optional<String> getGoal() {
        return this.goal == null ? Optional.empty() : Optional.ofNullable(this.goal);
    }

    /**
     * Gets or sets the purpose of the solution.
     * 
     */
    @InputImport(name="purpose")
      private final @Nullable String purpose;

    public Optional<String> getPurpose() {
        return this.purpose == null ? Optional.empty() : Optional.ofNullable(this.purpose);
    }

    /**
     * Gets or sets the current status of the solution.
     * 
     */
    @InputImport(name="status")
      private final @Nullable String status;

    public Optional<String> getStatus() {
        return this.status == null ? Optional.empty() : Optional.ofNullable(this.status);
    }

    /**
     * Gets or sets the summary of the solution.
     * 
     */
    @InputImport(name="summary")
      private final @Nullable Either<DatabasesSolutionSummaryResponse,ServersSolutionSummaryResponse> summary;

    public Either<DatabasesSolutionSummaryResponse,ServersSolutionSummaryResponse> getSummary() {
        return this.summary == null ? null : this.summary;
    }

    /**
     * Gets or sets the tool being used in the solution.
     * 
     */
    @InputImport(name="tool")
      private final @Nullable String tool;

    public Optional<String> getTool() {
        return this.tool == null ? Optional.empty() : Optional.ofNullable(this.tool);
    }

    public SolutionPropertiesResponse(
        @Nullable String cleanupState,
        @Nullable SolutionDetailsResponse details,
        @Nullable String goal,
        @Nullable String purpose,
        @Nullable String status,
        @Nullable Either<DatabasesSolutionSummaryResponse,ServersSolutionSummaryResponse> summary,
        @Nullable String tool) {
        this.cleanupState = cleanupState;
        this.details = details;
        this.goal = goal;
        this.purpose = purpose;
        this.status = status;
        this.summary = summary;
        this.tool = tool;
    }

    private SolutionPropertiesResponse() {
        this.cleanupState = null;
        this.details = null;
        this.goal = null;
        this.purpose = null;
        this.status = null;
        this.summary = null;
        this.tool = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SolutionPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String cleanupState;
        private @Nullable SolutionDetailsResponse details;
        private @Nullable String goal;
        private @Nullable String purpose;
        private @Nullable String status;
        private @Nullable Either<DatabasesSolutionSummaryResponse,ServersSolutionSummaryResponse> summary;
        private @Nullable String tool;

        public Builder() {
    	      // Empty
        }

        public Builder(SolutionPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cleanupState = defaults.cleanupState;
    	      this.details = defaults.details;
    	      this.goal = defaults.goal;
    	      this.purpose = defaults.purpose;
    	      this.status = defaults.status;
    	      this.summary = defaults.summary;
    	      this.tool = defaults.tool;
        }

        public Builder setCleanupState(@Nullable String cleanupState) {
            this.cleanupState = cleanupState;
            return this;
        }

        public Builder setDetails(@Nullable SolutionDetailsResponse details) {
            this.details = details;
            return this;
        }

        public Builder setGoal(@Nullable String goal) {
            this.goal = goal;
            return this;
        }

        public Builder setPurpose(@Nullable String purpose) {
            this.purpose = purpose;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = status;
            return this;
        }

        public Builder setSummary(@Nullable Either<DatabasesSolutionSummaryResponse,ServersSolutionSummaryResponse> summary) {
            this.summary = summary;
            return this;
        }

        public Builder setTool(@Nullable String tool) {
            this.tool = tool;
            return this;
        }
        public SolutionPropertiesResponse build() {
            return new SolutionPropertiesResponse(cleanupState, details, goal, purpose, status, summary, tool);
        }
    }
}
