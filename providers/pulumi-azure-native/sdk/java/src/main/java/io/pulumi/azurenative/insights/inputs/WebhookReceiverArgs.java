// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.insights.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A webhook receiver.
 * 
 */
public final class WebhookReceiverArgs extends io.pulumi.resources.ResourceArgs {

    public static final WebhookReceiverArgs Empty = new WebhookReceiverArgs();

    /**
     * Indicates the identifier uri for aad auth.
     * 
     */
    @InputImport(name="identifierUri")
        private final @Nullable Input<String> identifierUri;

    public Input<String> getIdentifierUri() {
        return this.identifierUri == null ? Input.empty() : this.identifierUri;
    }

    /**
     * The name of the webhook receiver. Names must be unique across all receivers within an action group.
     * 
     */
    @InputImport(name="name", required=true)
        private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * Indicates the webhook app object Id for aad auth.
     * 
     */
    @InputImport(name="objectId")
        private final @Nullable Input<String> objectId;

    public Input<String> getObjectId() {
        return this.objectId == null ? Input.empty() : this.objectId;
    }

    /**
     * The URI where webhooks should be sent.
     * 
     */
    @InputImport(name="serviceUri", required=true)
        private final Input<String> serviceUri;

    public Input<String> getServiceUri() {
        return this.serviceUri;
    }

    /**
     * Indicates the tenant id for aad auth.
     * 
     */
    @InputImport(name="tenantId")
        private final @Nullable Input<String> tenantId;

    public Input<String> getTenantId() {
        return this.tenantId == null ? Input.empty() : this.tenantId;
    }

    /**
     * Indicates whether or not use AAD authentication.
     * 
     */
    @InputImport(name="useAadAuth")
        private final @Nullable Input<Boolean> useAadAuth;

    public Input<Boolean> getUseAadAuth() {
        return this.useAadAuth == null ? Input.empty() : this.useAadAuth;
    }

    /**
     * Indicates whether to use common alert schema.
     * 
     */
    @InputImport(name="useCommonAlertSchema")
        private final @Nullable Input<Boolean> useCommonAlertSchema;

    public Input<Boolean> getUseCommonAlertSchema() {
        return this.useCommonAlertSchema == null ? Input.empty() : this.useCommonAlertSchema;
    }

    public WebhookReceiverArgs(
        @Nullable Input<String> identifierUri,
        Input<String> name,
        @Nullable Input<String> objectId,
        Input<String> serviceUri,
        @Nullable Input<String> tenantId,
        @Nullable Input<Boolean> useAadAuth,
        @Nullable Input<Boolean> useCommonAlertSchema) {
        this.identifierUri = identifierUri;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.objectId = objectId;
        this.serviceUri = Objects.requireNonNull(serviceUri, "expected parameter 'serviceUri' to be non-null");
        this.tenantId = tenantId;
        this.useAadAuth = useAadAuth == null ? Input.ofNullable(false) : useAadAuth;
        this.useCommonAlertSchema = useCommonAlertSchema == null ? Input.ofNullable(false) : useCommonAlertSchema;
    }

    private WebhookReceiverArgs() {
        this.identifierUri = Input.empty();
        this.name = Input.empty();
        this.objectId = Input.empty();
        this.serviceUri = Input.empty();
        this.tenantId = Input.empty();
        this.useAadAuth = Input.empty();
        this.useCommonAlertSchema = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebhookReceiverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> identifierUri;
        private Input<String> name;
        private @Nullable Input<String> objectId;
        private Input<String> serviceUri;
        private @Nullable Input<String> tenantId;
        private @Nullable Input<Boolean> useAadAuth;
        private @Nullable Input<Boolean> useCommonAlertSchema;

        public Builder() {
    	      // Empty
        }

        public Builder(WebhookReceiverArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.identifierUri = defaults.identifierUri;
    	      this.name = defaults.name;
    	      this.objectId = defaults.objectId;
    	      this.serviceUri = defaults.serviceUri;
    	      this.tenantId = defaults.tenantId;
    	      this.useAadAuth = defaults.useAadAuth;
    	      this.useCommonAlertSchema = defaults.useCommonAlertSchema;
        }

        public Builder setIdentifierUri(@Nullable Input<String> identifierUri) {
            this.identifierUri = identifierUri;
            return this;
        }

        public Builder setIdentifierUri(@Nullable String identifierUri) {
            this.identifierUri = Input.ofNullable(identifierUri);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setObjectId(@Nullable Input<String> objectId) {
            this.objectId = objectId;
            return this;
        }

        public Builder setObjectId(@Nullable String objectId) {
            this.objectId = Input.ofNullable(objectId);
            return this;
        }

        public Builder setServiceUri(Input<String> serviceUri) {
            this.serviceUri = Objects.requireNonNull(serviceUri);
            return this;
        }

        public Builder setServiceUri(String serviceUri) {
            this.serviceUri = Input.of(Objects.requireNonNull(serviceUri));
            return this;
        }

        public Builder setTenantId(@Nullable Input<String> tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        public Builder setTenantId(@Nullable String tenantId) {
            this.tenantId = Input.ofNullable(tenantId);
            return this;
        }

        public Builder setUseAadAuth(@Nullable Input<Boolean> useAadAuth) {
            this.useAadAuth = useAadAuth;
            return this;
        }

        public Builder setUseAadAuth(@Nullable Boolean useAadAuth) {
            this.useAadAuth = Input.ofNullable(useAadAuth);
            return this;
        }

        public Builder setUseCommonAlertSchema(@Nullable Input<Boolean> useCommonAlertSchema) {
            this.useCommonAlertSchema = useCommonAlertSchema;
            return this;
        }

        public Builder setUseCommonAlertSchema(@Nullable Boolean useCommonAlertSchema) {
            this.useCommonAlertSchema = Input.ofNullable(useCommonAlertSchema);
            return this;
        }
        public WebhookReceiverArgs build() {
            return new WebhookReceiverArgs(identifierUri, name, objectId, serviceUri, tenantId, useAadAuth, useCommonAlertSchema);
        }
    }
}
