// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.network;

import io.pulumi.azurenative.network.enums.ServiceProviderProvisioningState;
import io.pulumi.azurenative.network.inputs.ExpressRouteCircuitAuthorizationArgs;
import io.pulumi.azurenative.network.inputs.ExpressRouteCircuitPeeringArgs;
import io.pulumi.azurenative.network.inputs.ExpressRouteCircuitServiceProviderPropertiesArgs;
import io.pulumi.azurenative.network.inputs.ExpressRouteCircuitSkuArgs;
import io.pulumi.azurenative.network.inputs.SubResourceArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExpressRouteCircuitArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExpressRouteCircuitArgs Empty = new ExpressRouteCircuitArgs();

    /**
     * Allow classic operations.
     * 
     */
    @InputImport(name="allowClassicOperations")
      private final @Nullable Output<Boolean> allowClassicOperations;

    public Output<Boolean> getAllowClassicOperations() {
        return this.allowClassicOperations == null ? Output.empty() : this.allowClassicOperations;
    }

    /**
     * The list of authorizations.
     * 
     */
    @InputImport(name="authorizations")
      private final @Nullable Output<List<ExpressRouteCircuitAuthorizationArgs>> authorizations;

    public Output<List<ExpressRouteCircuitAuthorizationArgs>> getAuthorizations() {
        return this.authorizations == null ? Output.empty() : this.authorizations;
    }

    /**
     * The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
     * 
     */
    @InputImport(name="bandwidthInGbps")
      private final @Nullable Output<Double> bandwidthInGbps;

    public Output<Double> getBandwidthInGbps() {
        return this.bandwidthInGbps == null ? Output.empty() : this.bandwidthInGbps;
    }

    /**
     * The name of the circuit.
     * 
     */
    @InputImport(name="circuitName")
      private final @Nullable Output<String> circuitName;

    public Output<String> getCircuitName() {
        return this.circuitName == null ? Output.empty() : this.circuitName;
    }

    /**
     * The CircuitProvisioningState state of the resource.
     * 
     */
    @InputImport(name="circuitProvisioningState")
      private final @Nullable Output<String> circuitProvisioningState;

    public Output<String> getCircuitProvisioningState() {
        return this.circuitProvisioningState == null ? Output.empty() : this.circuitProvisioningState;
    }

    /**
     * The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
     * 
     */
    @InputImport(name="expressRoutePort")
      private final @Nullable Output<SubResourceArgs> expressRoutePort;

    public Output<SubResourceArgs> getExpressRoutePort() {
        return this.expressRoutePort == null ? Output.empty() : this.expressRoutePort;
    }

    /**
     * The GatewayManager Etag.
     * 
     */
    @InputImport(name="gatewayManagerEtag")
      private final @Nullable Output<String> gatewayManagerEtag;

    public Output<String> getGatewayManagerEtag() {
        return this.gatewayManagerEtag == null ? Output.empty() : this.gatewayManagerEtag;
    }

    /**
     * Flag denoting global reach status.
     * 
     */
    @InputImport(name="globalReachEnabled")
      private final @Nullable Output<Boolean> globalReachEnabled;

    public Output<Boolean> getGlobalReachEnabled() {
        return this.globalReachEnabled == null ? Output.empty() : this.globalReachEnabled;
    }

    /**
     * Resource ID.
     * 
     */
    @InputImport(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * Resource location.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The list of peerings.
     * 
     */
    @InputImport(name="peerings")
      private final @Nullable Output<List<ExpressRouteCircuitPeeringArgs>> peerings;

    public Output<List<ExpressRouteCircuitPeeringArgs>> getPeerings() {
        return this.peerings == null ? Output.empty() : this.peerings;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The ServiceKey.
     * 
     */
    @InputImport(name="serviceKey")
      private final @Nullable Output<String> serviceKey;

    public Output<String> getServiceKey() {
        return this.serviceKey == null ? Output.empty() : this.serviceKey;
    }

    /**
     * The ServiceProviderNotes.
     * 
     */
    @InputImport(name="serviceProviderNotes")
      private final @Nullable Output<String> serviceProviderNotes;

    public Output<String> getServiceProviderNotes() {
        return this.serviceProviderNotes == null ? Output.empty() : this.serviceProviderNotes;
    }

    /**
     * The ServiceProviderProperties.
     * 
     */
    @InputImport(name="serviceProviderProperties")
      private final @Nullable Output<ExpressRouteCircuitServiceProviderPropertiesArgs> serviceProviderProperties;

    public Output<ExpressRouteCircuitServiceProviderPropertiesArgs> getServiceProviderProperties() {
        return this.serviceProviderProperties == null ? Output.empty() : this.serviceProviderProperties;
    }

    /**
     * The ServiceProviderProvisioningState state of the resource.
     * 
     */
    @InputImport(name="serviceProviderProvisioningState")
      private final @Nullable Output<Either<String,ServiceProviderProvisioningState>> serviceProviderProvisioningState;

    public Output<Either<String,ServiceProviderProvisioningState>> getServiceProviderProvisioningState() {
        return this.serviceProviderProvisioningState == null ? Output.empty() : this.serviceProviderProvisioningState;
    }

    /**
     * The SKU.
     * 
     */
    @InputImport(name="sku")
      private final @Nullable Output<ExpressRouteCircuitSkuArgs> sku;

    public Output<ExpressRouteCircuitSkuArgs> getSku() {
        return this.sku == null ? Output.empty() : this.sku;
    }

    /**
     * Resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public ExpressRouteCircuitArgs(
        @Nullable Output<Boolean> allowClassicOperations,
        @Nullable Output<List<ExpressRouteCircuitAuthorizationArgs>> authorizations,
        @Nullable Output<Double> bandwidthInGbps,
        @Nullable Output<String> circuitName,
        @Nullable Output<String> circuitProvisioningState,
        @Nullable Output<SubResourceArgs> expressRoutePort,
        @Nullable Output<String> gatewayManagerEtag,
        @Nullable Output<Boolean> globalReachEnabled,
        @Nullable Output<String> id,
        @Nullable Output<String> location,
        @Nullable Output<List<ExpressRouteCircuitPeeringArgs>> peerings,
        Output<String> resourceGroupName,
        @Nullable Output<String> serviceKey,
        @Nullable Output<String> serviceProviderNotes,
        @Nullable Output<ExpressRouteCircuitServiceProviderPropertiesArgs> serviceProviderProperties,
        @Nullable Output<Either<String,ServiceProviderProvisioningState>> serviceProviderProvisioningState,
        @Nullable Output<ExpressRouteCircuitSkuArgs> sku,
        @Nullable Output<Map<String,String>> tags) {
        this.allowClassicOperations = allowClassicOperations;
        this.authorizations = authorizations;
        this.bandwidthInGbps = bandwidthInGbps;
        this.circuitName = circuitName;
        this.circuitProvisioningState = circuitProvisioningState;
        this.expressRoutePort = expressRoutePort;
        this.gatewayManagerEtag = gatewayManagerEtag;
        this.globalReachEnabled = globalReachEnabled;
        this.id = id;
        this.location = location;
        this.peerings = peerings;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceKey = serviceKey;
        this.serviceProviderNotes = serviceProviderNotes;
        this.serviceProviderProperties = serviceProviderProperties;
        this.serviceProviderProvisioningState = serviceProviderProvisioningState;
        this.sku = sku;
        this.tags = tags;
    }

    private ExpressRouteCircuitArgs() {
        this.allowClassicOperations = Output.empty();
        this.authorizations = Output.empty();
        this.bandwidthInGbps = Output.empty();
        this.circuitName = Output.empty();
        this.circuitProvisioningState = Output.empty();
        this.expressRoutePort = Output.empty();
        this.gatewayManagerEtag = Output.empty();
        this.globalReachEnabled = Output.empty();
        this.id = Output.empty();
        this.location = Output.empty();
        this.peerings = Output.empty();
        this.resourceGroupName = Output.empty();
        this.serviceKey = Output.empty();
        this.serviceProviderNotes = Output.empty();
        this.serviceProviderProperties = Output.empty();
        this.serviceProviderProvisioningState = Output.empty();
        this.sku = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExpressRouteCircuitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowClassicOperations;
        private @Nullable Output<List<ExpressRouteCircuitAuthorizationArgs>> authorizations;
        private @Nullable Output<Double> bandwidthInGbps;
        private @Nullable Output<String> circuitName;
        private @Nullable Output<String> circuitProvisioningState;
        private @Nullable Output<SubResourceArgs> expressRoutePort;
        private @Nullable Output<String> gatewayManagerEtag;
        private @Nullable Output<Boolean> globalReachEnabled;
        private @Nullable Output<String> id;
        private @Nullable Output<String> location;
        private @Nullable Output<List<ExpressRouteCircuitPeeringArgs>> peerings;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> serviceKey;
        private @Nullable Output<String> serviceProviderNotes;
        private @Nullable Output<ExpressRouteCircuitServiceProviderPropertiesArgs> serviceProviderProperties;
        private @Nullable Output<Either<String,ServiceProviderProvisioningState>> serviceProviderProvisioningState;
        private @Nullable Output<ExpressRouteCircuitSkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ExpressRouteCircuitArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowClassicOperations = defaults.allowClassicOperations;
    	      this.authorizations = defaults.authorizations;
    	      this.bandwidthInGbps = defaults.bandwidthInGbps;
    	      this.circuitName = defaults.circuitName;
    	      this.circuitProvisioningState = defaults.circuitProvisioningState;
    	      this.expressRoutePort = defaults.expressRoutePort;
    	      this.gatewayManagerEtag = defaults.gatewayManagerEtag;
    	      this.globalReachEnabled = defaults.globalReachEnabled;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.peerings = defaults.peerings;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceKey = defaults.serviceKey;
    	      this.serviceProviderNotes = defaults.serviceProviderNotes;
    	      this.serviceProviderProperties = defaults.serviceProviderProperties;
    	      this.serviceProviderProvisioningState = defaults.serviceProviderProvisioningState;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        public Builder allowClassicOperations(@Nullable Output<Boolean> allowClassicOperations) {
            this.allowClassicOperations = allowClassicOperations;
            return this;
        }

        public Builder allowClassicOperations(@Nullable Boolean allowClassicOperations) {
            this.allowClassicOperations = Output.ofNullable(allowClassicOperations);
            return this;
        }

        public Builder authorizations(@Nullable Output<List<ExpressRouteCircuitAuthorizationArgs>> authorizations) {
            this.authorizations = authorizations;
            return this;
        }

        public Builder authorizations(@Nullable List<ExpressRouteCircuitAuthorizationArgs> authorizations) {
            this.authorizations = Output.ofNullable(authorizations);
            return this;
        }

        public Builder bandwidthInGbps(@Nullable Output<Double> bandwidthInGbps) {
            this.bandwidthInGbps = bandwidthInGbps;
            return this;
        }

        public Builder bandwidthInGbps(@Nullable Double bandwidthInGbps) {
            this.bandwidthInGbps = Output.ofNullable(bandwidthInGbps);
            return this;
        }

        public Builder circuitName(@Nullable Output<String> circuitName) {
            this.circuitName = circuitName;
            return this;
        }

        public Builder circuitName(@Nullable String circuitName) {
            this.circuitName = Output.ofNullable(circuitName);
            return this;
        }

        public Builder circuitProvisioningState(@Nullable Output<String> circuitProvisioningState) {
            this.circuitProvisioningState = circuitProvisioningState;
            return this;
        }

        public Builder circuitProvisioningState(@Nullable String circuitProvisioningState) {
            this.circuitProvisioningState = Output.ofNullable(circuitProvisioningState);
            return this;
        }

        public Builder expressRoutePort(@Nullable Output<SubResourceArgs> expressRoutePort) {
            this.expressRoutePort = expressRoutePort;
            return this;
        }

        public Builder expressRoutePort(@Nullable SubResourceArgs expressRoutePort) {
            this.expressRoutePort = Output.ofNullable(expressRoutePort);
            return this;
        }

        public Builder gatewayManagerEtag(@Nullable Output<String> gatewayManagerEtag) {
            this.gatewayManagerEtag = gatewayManagerEtag;
            return this;
        }

        public Builder gatewayManagerEtag(@Nullable String gatewayManagerEtag) {
            this.gatewayManagerEtag = Output.ofNullable(gatewayManagerEtag);
            return this;
        }

        public Builder globalReachEnabled(@Nullable Output<Boolean> globalReachEnabled) {
            this.globalReachEnabled = globalReachEnabled;
            return this;
        }

        public Builder globalReachEnabled(@Nullable Boolean globalReachEnabled) {
            this.globalReachEnabled = Output.ofNullable(globalReachEnabled);
            return this;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder peerings(@Nullable Output<List<ExpressRouteCircuitPeeringArgs>> peerings) {
            this.peerings = peerings;
            return this;
        }

        public Builder peerings(@Nullable List<ExpressRouteCircuitPeeringArgs> peerings) {
            this.peerings = Output.ofNullable(peerings);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder serviceKey(@Nullable Output<String> serviceKey) {
            this.serviceKey = serviceKey;
            return this;
        }

        public Builder serviceKey(@Nullable String serviceKey) {
            this.serviceKey = Output.ofNullable(serviceKey);
            return this;
        }

        public Builder serviceProviderNotes(@Nullable Output<String> serviceProviderNotes) {
            this.serviceProviderNotes = serviceProviderNotes;
            return this;
        }

        public Builder serviceProviderNotes(@Nullable String serviceProviderNotes) {
            this.serviceProviderNotes = Output.ofNullable(serviceProviderNotes);
            return this;
        }

        public Builder serviceProviderProperties(@Nullable Output<ExpressRouteCircuitServiceProviderPropertiesArgs> serviceProviderProperties) {
            this.serviceProviderProperties = serviceProviderProperties;
            return this;
        }

        public Builder serviceProviderProperties(@Nullable ExpressRouteCircuitServiceProviderPropertiesArgs serviceProviderProperties) {
            this.serviceProviderProperties = Output.ofNullable(serviceProviderProperties);
            return this;
        }

        public Builder serviceProviderProvisioningState(@Nullable Output<Either<String,ServiceProviderProvisioningState>> serviceProviderProvisioningState) {
            this.serviceProviderProvisioningState = serviceProviderProvisioningState;
            return this;
        }

        public Builder serviceProviderProvisioningState(@Nullable Either<String,ServiceProviderProvisioningState> serviceProviderProvisioningState) {
            this.serviceProviderProvisioningState = Output.ofNullable(serviceProviderProvisioningState);
            return this;
        }

        public Builder sku(@Nullable Output<ExpressRouteCircuitSkuArgs> sku) {
            this.sku = sku;
            return this;
        }

        public Builder sku(@Nullable ExpressRouteCircuitSkuArgs sku) {
            this.sku = Output.ofNullable(sku);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public ExpressRouteCircuitArgs build() {
            return new ExpressRouteCircuitArgs(allowClassicOperations, authorizations, bandwidthInGbps, circuitName, circuitProvisioningState, expressRoutePort, gatewayManagerEtag, globalReachEnabled, id, location, peerings, resourceGroupName, serviceKey, serviceProviderNotes, serviceProviderProperties, serviceProviderProvisioningState, sku, tags);
        }
    }
}
