// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.dataprotection.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * DatasourceSet details of datasource to be backed up
 * 
 */
public final class DatasourceSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatasourceSetArgs Empty = new DatasourceSetArgs();

    /**
     * DatasourceType of the resource.
     * 
     */
    @InputImport(name="datasourceType")
      private final @Nullable Output<String> datasourceType;

    public Output<String> getDatasourceType() {
        return this.datasourceType == null ? Output.empty() : this.datasourceType;
    }

    /**
     * Type of Datasource object, used to initialize the right inherited type
     * 
     */
    @InputImport(name="objectType")
      private final @Nullable Output<String> objectType;

    public Output<String> getObjectType() {
        return this.objectType == null ? Output.empty() : this.objectType;
    }

    /**
     * Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault.
     * 
     */
    @InputImport(name="resourceID", required=true)
      private final Output<String> resourceID;

    public Output<String> getResourceID() {
        return this.resourceID;
    }

    /**
     * Location of datasource.
     * 
     */
    @InputImport(name="resourceLocation")
      private final @Nullable Output<String> resourceLocation;

    public Output<String> getResourceLocation() {
        return this.resourceLocation == null ? Output.empty() : this.resourceLocation;
    }

    /**
     * Unique identifier of the resource in the context of parent.
     * 
     */
    @InputImport(name="resourceName")
      private final @Nullable Output<String> resourceName;

    public Output<String> getPropResourceName() {
        return this.resourceName == null ? Output.empty() : this.resourceName;
    }

    /**
     * Resource Type of Datasource.
     * 
     */
    @InputImport(name="resourceType")
      private final @Nullable Output<String> resourceType;

    public Output<String> getPropResourceType() {
        return this.resourceType == null ? Output.empty() : this.resourceType;
    }

    /**
     * Uri of the resource.
     * 
     */
    @InputImport(name="resourceUri")
      private final @Nullable Output<String> resourceUri;

    public Output<String> getResourceUri() {
        return this.resourceUri == null ? Output.empty() : this.resourceUri;
    }

    public DatasourceSetArgs(
        @Nullable Output<String> datasourceType,
        @Nullable Output<String> objectType,
        Output<String> resourceID,
        @Nullable Output<String> resourceLocation,
        @Nullable Output<String> resourceName,
        @Nullable Output<String> resourceType,
        @Nullable Output<String> resourceUri) {
        this.datasourceType = datasourceType;
        this.objectType = objectType;
        this.resourceID = Objects.requireNonNull(resourceID, "expected parameter 'resourceID' to be non-null");
        this.resourceLocation = resourceLocation;
        this.resourceName = resourceName;
        this.resourceType = resourceType;
        this.resourceUri = resourceUri;
    }

    private DatasourceSetArgs() {
        this.datasourceType = Output.empty();
        this.objectType = Output.empty();
        this.resourceID = Output.empty();
        this.resourceLocation = Output.empty();
        this.resourceName = Output.empty();
        this.resourceType = Output.empty();
        this.resourceUri = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasourceSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> datasourceType;
        private @Nullable Output<String> objectType;
        private Output<String> resourceID;
        private @Nullable Output<String> resourceLocation;
        private @Nullable Output<String> resourceName;
        private @Nullable Output<String> resourceType;
        private @Nullable Output<String> resourceUri;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasourceSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasourceType = defaults.datasourceType;
    	      this.objectType = defaults.objectType;
    	      this.resourceID = defaults.resourceID;
    	      this.resourceLocation = defaults.resourceLocation;
    	      this.resourceName = defaults.resourceName;
    	      this.resourceType = defaults.resourceType;
    	      this.resourceUri = defaults.resourceUri;
        }

        public Builder datasourceType(@Nullable Output<String> datasourceType) {
            this.datasourceType = datasourceType;
            return this;
        }

        public Builder datasourceType(@Nullable String datasourceType) {
            this.datasourceType = Output.ofNullable(datasourceType);
            return this;
        }

        public Builder objectType(@Nullable Output<String> objectType) {
            this.objectType = objectType;
            return this;
        }

        public Builder objectType(@Nullable String objectType) {
            this.objectType = Output.ofNullable(objectType);
            return this;
        }

        public Builder resourceID(Output<String> resourceID) {
            this.resourceID = Objects.requireNonNull(resourceID);
            return this;
        }

        public Builder resourceID(String resourceID) {
            this.resourceID = Output.of(Objects.requireNonNull(resourceID));
            return this;
        }

        public Builder resourceLocation(@Nullable Output<String> resourceLocation) {
            this.resourceLocation = resourceLocation;
            return this;
        }

        public Builder resourceLocation(@Nullable String resourceLocation) {
            this.resourceLocation = Output.ofNullable(resourceLocation);
            return this;
        }

        public Builder resourceName(@Nullable Output<String> resourceName) {
            this.resourceName = resourceName;
            return this;
        }

        public Builder resourceName(@Nullable String resourceName) {
            this.resourceName = Output.ofNullable(resourceName);
            return this;
        }

        public Builder resourceType(@Nullable Output<String> resourceType) {
            this.resourceType = resourceType;
            return this;
        }

        public Builder resourceType(@Nullable String resourceType) {
            this.resourceType = Output.ofNullable(resourceType);
            return this;
        }

        public Builder resourceUri(@Nullable Output<String> resourceUri) {
            this.resourceUri = resourceUri;
            return this;
        }

        public Builder resourceUri(@Nullable String resourceUri) {
            this.resourceUri = Output.ofNullable(resourceUri);
            return this;
        }
        public DatasourceSetArgs build() {
            return new DatasourceSetArgs(datasourceType, objectType, resourceID, resourceLocation, resourceName, resourceType, resourceUri);
        }
    }
}
