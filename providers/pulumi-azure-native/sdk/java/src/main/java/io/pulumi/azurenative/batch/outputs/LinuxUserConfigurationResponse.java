// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.batch.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class LinuxUserConfigurationResponse {
    /**
     * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
     * 
     */
    private final @Nullable Integer gid;
    /**
     * The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
     * 
     */
    private final @Nullable String sshPrivateKey;
    /**
     * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
     * 
     */
    private final @Nullable Integer uid;

    @OutputCustomType.Constructor
    private LinuxUserConfigurationResponse(
        @OutputCustomType.Parameter("gid") @Nullable Integer gid,
        @OutputCustomType.Parameter("sshPrivateKey") @Nullable String sshPrivateKey,
        @OutputCustomType.Parameter("uid") @Nullable Integer uid) {
        this.gid = gid;
        this.sshPrivateKey = sshPrivateKey;
        this.uid = uid;
    }

    /**
     * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
     * 
    */
    public Optional<Integer> getGid() {
        return Optional.ofNullable(this.gid);
    }
    /**
     * The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
     * 
    */
    public Optional<String> getSshPrivateKey() {
        return Optional.ofNullable(this.sshPrivateKey);
    }
    /**
     * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
     * 
    */
    public Optional<Integer> getUid() {
        return Optional.ofNullable(this.uid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinuxUserConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer gid;
        private @Nullable String sshPrivateKey;
        private @Nullable Integer uid;

        public Builder() {
    	      // Empty
        }

        public Builder(LinuxUserConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gid = defaults.gid;
    	      this.sshPrivateKey = defaults.sshPrivateKey;
    	      this.uid = defaults.uid;
        }

        public Builder setGid(@Nullable Integer gid) {
            this.gid = gid;
            return this;
        }

        public Builder setSshPrivateKey(@Nullable String sshPrivateKey) {
            this.sshPrivateKey = sshPrivateKey;
            return this;
        }

        public Builder setUid(@Nullable Integer uid) {
            this.uid = uid;
            return this;
        }
        public LinuxUserConfigurationResponse build() {
            return new LinuxUserConfigurationResponse(gid, sshPrivateKey, uid);
        }
    }
}
