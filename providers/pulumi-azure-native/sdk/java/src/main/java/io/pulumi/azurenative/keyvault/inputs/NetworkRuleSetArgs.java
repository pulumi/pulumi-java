// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.keyvault.inputs;

import io.pulumi.azurenative.keyvault.enums.NetworkRuleAction;
import io.pulumi.azurenative.keyvault.enums.NetworkRuleBypassOptions;
import io.pulumi.azurenative.keyvault.inputs.IPRuleArgs;
import io.pulumi.azurenative.keyvault.inputs.VirtualNetworkRuleArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A set of rules governing the network accessibility of a vault.
 * 
 */
public final class NetworkRuleSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final NetworkRuleSetArgs Empty = new NetworkRuleSetArgs();

    /**
     * Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
     * 
     */
    @InputImport(name="bypass")
    private final @Nullable Input<Either<String,NetworkRuleBypassOptions>> bypass;

    public Input<Either<String,NetworkRuleBypassOptions>> getBypass() {
        return this.bypass == null ? Input.empty() : this.bypass;
    }

    /**
     * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
     * 
     */
    @InputImport(name="defaultAction")
    private final @Nullable Input<Either<String,NetworkRuleAction>> defaultAction;

    public Input<Either<String,NetworkRuleAction>> getDefaultAction() {
        return this.defaultAction == null ? Input.empty() : this.defaultAction;
    }

    /**
     * The list of IP address rules.
     * 
     */
    @InputImport(name="ipRules")
    private final @Nullable Input<List<IPRuleArgs>> ipRules;

    public Input<List<IPRuleArgs>> getIpRules() {
        return this.ipRules == null ? Input.empty() : this.ipRules;
    }

    /**
     * The list of virtual network rules.
     * 
     */
    @InputImport(name="virtualNetworkRules")
    private final @Nullable Input<List<VirtualNetworkRuleArgs>> virtualNetworkRules;

    public Input<List<VirtualNetworkRuleArgs>> getVirtualNetworkRules() {
        return this.virtualNetworkRules == null ? Input.empty() : this.virtualNetworkRules;
    }

    public NetworkRuleSetArgs(
        @Nullable Input<Either<String,NetworkRuleBypassOptions>> bypass,
        @Nullable Input<Either<String,NetworkRuleAction>> defaultAction,
        @Nullable Input<List<IPRuleArgs>> ipRules,
        @Nullable Input<List<VirtualNetworkRuleArgs>> virtualNetworkRules) {
        this.bypass = bypass;
        this.defaultAction = defaultAction;
        this.ipRules = ipRules;
        this.virtualNetworkRules = virtualNetworkRules;
    }

    private NetworkRuleSetArgs() {
        this.bypass = Input.empty();
        this.defaultAction = Input.empty();
        this.ipRules = Input.empty();
        this.virtualNetworkRules = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkRuleSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Either<String,NetworkRuleBypassOptions>> bypass;
        private @Nullable Input<Either<String,NetworkRuleAction>> defaultAction;
        private @Nullable Input<List<IPRuleArgs>> ipRules;
        private @Nullable Input<List<VirtualNetworkRuleArgs>> virtualNetworkRules;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkRuleSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bypass = defaults.bypass;
    	      this.defaultAction = defaults.defaultAction;
    	      this.ipRules = defaults.ipRules;
    	      this.virtualNetworkRules = defaults.virtualNetworkRules;
        }

        public Builder setBypass(@Nullable Input<Either<String,NetworkRuleBypassOptions>> bypass) {
            this.bypass = bypass;
            return this;
        }

        public Builder setBypass(@Nullable Either<String,NetworkRuleBypassOptions> bypass) {
            this.bypass = Input.ofNullable(bypass);
            return this;
        }

        public Builder setDefaultAction(@Nullable Input<Either<String,NetworkRuleAction>> defaultAction) {
            this.defaultAction = defaultAction;
            return this;
        }

        public Builder setDefaultAction(@Nullable Either<String,NetworkRuleAction> defaultAction) {
            this.defaultAction = Input.ofNullable(defaultAction);
            return this;
        }

        public Builder setIpRules(@Nullable Input<List<IPRuleArgs>> ipRules) {
            this.ipRules = ipRules;
            return this;
        }

        public Builder setIpRules(@Nullable List<IPRuleArgs> ipRules) {
            this.ipRules = Input.ofNullable(ipRules);
            return this;
        }

        public Builder setVirtualNetworkRules(@Nullable Input<List<VirtualNetworkRuleArgs>> virtualNetworkRules) {
            this.virtualNetworkRules = virtualNetworkRules;
            return this;
        }

        public Builder setVirtualNetworkRules(@Nullable List<VirtualNetworkRuleArgs> virtualNetworkRules) {
            this.virtualNetworkRules = Input.ofNullable(virtualNetworkRules);
            return this;
        }

        public NetworkRuleSetArgs build() {
            return new NetworkRuleSetArgs(bypass, defaultAction, ipRules, virtualNetworkRules);
        }
    }
}
