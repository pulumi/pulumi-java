// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.managedservices.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Authorization tuple containing principal Id (of user/service principal/security group) and role definition id.
 * 
 */
public final class AuthorizationArgs extends io.pulumi.resources.ResourceArgs {

    public static final AuthorizationArgs Empty = new AuthorizationArgs();

    /**
     * The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
     * 
     */
    @InputImport(name="delegatedRoleDefinitionIds")
        private final @Nullable Input<List<String>> delegatedRoleDefinitionIds;

    public Input<List<String>> getDelegatedRoleDefinitionIds() {
        return this.delegatedRoleDefinitionIds == null ? Input.empty() : this.delegatedRoleDefinitionIds;
    }

    /**
     * Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
     * 
     */
    @InputImport(name="principalId", required=true)
        private final Input<String> principalId;

    public Input<String> getPrincipalId() {
        return this.principalId;
    }

    /**
     * Display name of the principal Id.
     * 
     */
    @InputImport(name="principalIdDisplayName")
        private final @Nullable Input<String> principalIdDisplayName;

    public Input<String> getPrincipalIdDisplayName() {
        return this.principalIdDisplayName == null ? Input.empty() : this.principalIdDisplayName;
    }

    /**
     * The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
     * 
     */
    @InputImport(name="roleDefinitionId", required=true)
        private final Input<String> roleDefinitionId;

    public Input<String> getRoleDefinitionId() {
        return this.roleDefinitionId;
    }

    public AuthorizationArgs(
        @Nullable Input<List<String>> delegatedRoleDefinitionIds,
        Input<String> principalId,
        @Nullable Input<String> principalIdDisplayName,
        Input<String> roleDefinitionId) {
        this.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
        this.principalId = Objects.requireNonNull(principalId, "expected parameter 'principalId' to be non-null");
        this.principalIdDisplayName = principalIdDisplayName;
        this.roleDefinitionId = Objects.requireNonNull(roleDefinitionId, "expected parameter 'roleDefinitionId' to be non-null");
    }

    private AuthorizationArgs() {
        this.delegatedRoleDefinitionIds = Input.empty();
        this.principalId = Input.empty();
        this.principalIdDisplayName = Input.empty();
        this.roleDefinitionId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> delegatedRoleDefinitionIds;
        private Input<String> principalId;
        private @Nullable Input<String> principalIdDisplayName;
        private Input<String> roleDefinitionId;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthorizationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.delegatedRoleDefinitionIds = defaults.delegatedRoleDefinitionIds;
    	      this.principalId = defaults.principalId;
    	      this.principalIdDisplayName = defaults.principalIdDisplayName;
    	      this.roleDefinitionId = defaults.roleDefinitionId;
        }

        public Builder setDelegatedRoleDefinitionIds(@Nullable Input<List<String>> delegatedRoleDefinitionIds) {
            this.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
            return this;
        }

        public Builder setDelegatedRoleDefinitionIds(@Nullable List<String> delegatedRoleDefinitionIds) {
            this.delegatedRoleDefinitionIds = Input.ofNullable(delegatedRoleDefinitionIds);
            return this;
        }

        public Builder setPrincipalId(Input<String> principalId) {
            this.principalId = Objects.requireNonNull(principalId);
            return this;
        }

        public Builder setPrincipalId(String principalId) {
            this.principalId = Input.of(Objects.requireNonNull(principalId));
            return this;
        }

        public Builder setPrincipalIdDisplayName(@Nullable Input<String> principalIdDisplayName) {
            this.principalIdDisplayName = principalIdDisplayName;
            return this;
        }

        public Builder setPrincipalIdDisplayName(@Nullable String principalIdDisplayName) {
            this.principalIdDisplayName = Input.ofNullable(principalIdDisplayName);
            return this;
        }

        public Builder setRoleDefinitionId(Input<String> roleDefinitionId) {
            this.roleDefinitionId = Objects.requireNonNull(roleDefinitionId);
            return this;
        }

        public Builder setRoleDefinitionId(String roleDefinitionId) {
            this.roleDefinitionId = Input.of(Objects.requireNonNull(roleDefinitionId));
            return this;
        }
        public AuthorizationArgs build() {
            return new AuthorizationArgs(delegatedRoleDefinitionIds, principalId, principalIdDisplayName, roleDefinitionId);
        }
    }
}
