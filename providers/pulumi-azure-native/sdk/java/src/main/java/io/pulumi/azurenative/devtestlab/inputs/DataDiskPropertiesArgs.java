// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.devtestlab.inputs;

import io.pulumi.azurenative.devtestlab.enums.HostCachingOptions;
import io.pulumi.azurenative.devtestlab.inputs.AttachNewDataDiskOptionsArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Request body for adding a new or existing data disk to a virtual machine.
 * 
 */
public final class DataDiskPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataDiskPropertiesArgs Empty = new DataDiskPropertiesArgs();

    /**
     * Specifies options to attach a new disk to the virtual machine.
     * 
     */
    @InputImport(name="attachNewDataDiskOptions")
    private final @Nullable Input<AttachNewDataDiskOptionsArgs> attachNewDataDiskOptions;

    public Input<AttachNewDataDiskOptionsArgs> getAttachNewDataDiskOptions() {
        return this.attachNewDataDiskOptions == null ? Input.empty() : this.attachNewDataDiskOptions;
    }

    /**
     * Specifies the existing lab disk id to attach to virtual machine.
     * 
     */
    @InputImport(name="existingLabDiskId")
    private final @Nullable Input<String> existingLabDiskId;

    public Input<String> getExistingLabDiskId() {
        return this.existingLabDiskId == null ? Input.empty() : this.existingLabDiskId;
    }

    /**
     * Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
     * 
     */
    @InputImport(name="hostCaching")
    private final @Nullable Input<Either<String,HostCachingOptions>> hostCaching;

    public Input<Either<String,HostCachingOptions>> getHostCaching() {
        return this.hostCaching == null ? Input.empty() : this.hostCaching;
    }

    public DataDiskPropertiesArgs(
        @Nullable Input<AttachNewDataDiskOptionsArgs> attachNewDataDiskOptions,
        @Nullable Input<String> existingLabDiskId,
        @Nullable Input<Either<String,HostCachingOptions>> hostCaching) {
        this.attachNewDataDiskOptions = attachNewDataDiskOptions;
        this.existingLabDiskId = existingLabDiskId;
        this.hostCaching = hostCaching;
    }

    private DataDiskPropertiesArgs() {
        this.attachNewDataDiskOptions = Input.empty();
        this.existingLabDiskId = Input.empty();
        this.hostCaching = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataDiskPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<AttachNewDataDiskOptionsArgs> attachNewDataDiskOptions;
        private @Nullable Input<String> existingLabDiskId;
        private @Nullable Input<Either<String,HostCachingOptions>> hostCaching;

        public Builder() {
    	      // Empty
        }

        public Builder(DataDiskPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachNewDataDiskOptions = defaults.attachNewDataDiskOptions;
    	      this.existingLabDiskId = defaults.existingLabDiskId;
    	      this.hostCaching = defaults.hostCaching;
        }

        public Builder setAttachNewDataDiskOptions(@Nullable Input<AttachNewDataDiskOptionsArgs> attachNewDataDiskOptions) {
            this.attachNewDataDiskOptions = attachNewDataDiskOptions;
            return this;
        }

        public Builder setAttachNewDataDiskOptions(@Nullable AttachNewDataDiskOptionsArgs attachNewDataDiskOptions) {
            this.attachNewDataDiskOptions = Input.ofNullable(attachNewDataDiskOptions);
            return this;
        }

        public Builder setExistingLabDiskId(@Nullable Input<String> existingLabDiskId) {
            this.existingLabDiskId = existingLabDiskId;
            return this;
        }

        public Builder setExistingLabDiskId(@Nullable String existingLabDiskId) {
            this.existingLabDiskId = Input.ofNullable(existingLabDiskId);
            return this;
        }

        public Builder setHostCaching(@Nullable Input<Either<String,HostCachingOptions>> hostCaching) {
            this.hostCaching = hostCaching;
            return this;
        }

        public Builder setHostCaching(@Nullable Either<String,HostCachingOptions> hostCaching) {
            this.hostCaching = Input.ofNullable(hostCaching);
            return this;
        }

        public DataDiskPropertiesArgs build() {
            return new DataDiskPropertiesArgs(attachNewDataDiskOptions, existingLabDiskId, hostCaching);
        }
    }
}
