// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.costmanagement.inputs;

import io.pulumi.azurenative.costmanagement.enums.ReportColumnType;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * The group by expression to be used in the report.
 * 
 */
public final class ReportGroupingArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReportGroupingArgs Empty = new ReportGroupingArgs();

    /**
     * The name of the column to group.
     * 
     */
    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * Has type of the column to group.
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<Either<String,ReportColumnType>> type;

    public Input<Either<String,ReportColumnType>> getType() {
        return this.type;
    }

    public ReportGroupingArgs(
        Input<String> name,
        Input<Either<String,ReportColumnType>> type) {
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ReportGroupingArgs() {
        this.name = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportGroupingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> name;
        private Input<Either<String,ReportColumnType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ReportGroupingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.type = defaults.type;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setType(Input<Either<String,ReportColumnType>> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(Either<String,ReportColumnType> type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public ReportGroupingArgs build() {
            return new ReportGroupingArgs(name, type);
        }
    }
}
