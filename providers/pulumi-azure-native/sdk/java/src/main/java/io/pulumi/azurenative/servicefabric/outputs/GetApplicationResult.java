// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabric.outputs;

import io.pulumi.azurenative.servicefabric.outputs.ApplicationMetricDescriptionResponse;
import io.pulumi.azurenative.servicefabric.outputs.ApplicationUpgradePolicyResponse;
import io.pulumi.azurenative.servicefabric.outputs.ApplicationUserAssignedIdentityResponse;
import io.pulumi.azurenative.servicefabric.outputs.ManagedIdentityResponse;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetApplicationResult {
    /**
     * Azure resource etag.
     * 
     */
    private final String etag;
    /**
     * Azure resource identifier.
     * 
     */
    private final String id;
    /**
     * Describes the managed identities for an Azure resource.
     * 
     */
    private final @Nullable ManagedIdentityResponse identity;
    /**
     * It will be deprecated in New API, resource location depends on the parent resource.
     * 
     */
    private final @Nullable String location;
    /**
     * List of user assigned identities for the application, each mapped to a friendly name.
     * 
     */
    private final @Nullable List<ApplicationUserAssignedIdentityResponse> managedIdentities;
    /**
     * The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
     * 
     */
    private final @Nullable Double maximumNodes;
    /**
     * List of application capacity metric description.
     * 
     */
    private final @Nullable List<ApplicationMetricDescriptionResponse> metrics;
    /**
     * The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
     * 
     */
    private final @Nullable Double minimumNodes;
    /**
     * Azure resource name.
     * 
     */
    private final String name;
    /**
     * List of application parameters with overridden values from their default values specified in the application manifest.
     * 
     */
    private final @Nullable Map<String,String> parameters;
    /**
     * The current deployment or provisioning state, which only appears in the response
     * 
     */
    private final String provisioningState;
    /**
     * Remove the current application capacity settings.
     * 
     */
    private final @Nullable Boolean removeApplicationCapacity;
    /**
     * Azure resource tags.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * Azure resource type.
     * 
     */
    private final String type;
    /**
     * The application type name as defined in the application manifest.
     * 
     */
    private final @Nullable String typeName;
    /**
     * The version of the application type as defined in the application manifest.
     * 
     */
    private final @Nullable String typeVersion;
    /**
     * Describes the policy for a monitored application upgrade.
     * 
     */
    private final @Nullable ApplicationUpgradePolicyResponse upgradePolicy;

    @OutputCustomType.Constructor
    private GetApplicationResult(
        @OutputCustomType.Parameter("etag") String etag,
        @OutputCustomType.Parameter("id") String id,
        @OutputCustomType.Parameter("identity") @Nullable ManagedIdentityResponse identity,
        @OutputCustomType.Parameter("location") @Nullable String location,
        @OutputCustomType.Parameter("managedIdentities") @Nullable List<ApplicationUserAssignedIdentityResponse> managedIdentities,
        @OutputCustomType.Parameter("maximumNodes") @Nullable Double maximumNodes,
        @OutputCustomType.Parameter("metrics") @Nullable List<ApplicationMetricDescriptionResponse> metrics,
        @OutputCustomType.Parameter("minimumNodes") @Nullable Double minimumNodes,
        @OutputCustomType.Parameter("name") String name,
        @OutputCustomType.Parameter("parameters") @Nullable Map<String,String> parameters,
        @OutputCustomType.Parameter("provisioningState") String provisioningState,
        @OutputCustomType.Parameter("removeApplicationCapacity") @Nullable Boolean removeApplicationCapacity,
        @OutputCustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @OutputCustomType.Parameter("type") String type,
        @OutputCustomType.Parameter("typeName") @Nullable String typeName,
        @OutputCustomType.Parameter("typeVersion") @Nullable String typeVersion,
        @OutputCustomType.Parameter("upgradePolicy") @Nullable ApplicationUpgradePolicyResponse upgradePolicy) {
        this.etag = etag;
        this.id = id;
        this.identity = identity;
        this.location = location;
        this.managedIdentities = managedIdentities;
        this.maximumNodes = maximumNodes;
        this.metrics = metrics;
        this.minimumNodes = minimumNodes;
        this.name = name;
        this.parameters = parameters;
        this.provisioningState = provisioningState;
        this.removeApplicationCapacity = removeApplicationCapacity;
        this.tags = tags;
        this.type = type;
        this.typeName = typeName;
        this.typeVersion = typeVersion;
        this.upgradePolicy = upgradePolicy;
    }

    /**
     * Azure resource etag.
     * 
    */
    public String getEtag() {
        return this.etag;
    }
    /**
     * Azure resource identifier.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * Describes the managed identities for an Azure resource.
     * 
    */
    public Optional<ManagedIdentityResponse> getIdentity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * It will be deprecated in New API, resource location depends on the parent resource.
     * 
    */
    public Optional<String> getLocation() {
        return Optional.ofNullable(this.location);
    }
    /**
     * List of user assigned identities for the application, each mapped to a friendly name.
     * 
    */
    public List<ApplicationUserAssignedIdentityResponse> getManagedIdentities() {
        return this.managedIdentities == null ? List.of() : this.managedIdentities;
    }
    /**
     * The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
     * 
    */
    public Optional<Double> getMaximumNodes() {
        return Optional.ofNullable(this.maximumNodes);
    }
    /**
     * List of application capacity metric description.
     * 
    */
    public List<ApplicationMetricDescriptionResponse> getMetrics() {
        return this.metrics == null ? List.of() : this.metrics;
    }
    /**
     * The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
     * 
    */
    public Optional<Double> getMinimumNodes() {
        return Optional.ofNullable(this.minimumNodes);
    }
    /**
     * Azure resource name.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * List of application parameters with overridden values from their default values specified in the application manifest.
     * 
    */
    public Map<String,String> getParameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * The current deployment or provisioning state, which only appears in the response
     * 
    */
    public String getProvisioningState() {
        return this.provisioningState;
    }
    /**
     * Remove the current application capacity settings.
     * 
    */
    public Optional<Boolean> getRemoveApplicationCapacity() {
        return Optional.ofNullable(this.removeApplicationCapacity);
    }
    /**
     * Azure resource tags.
     * 
    */
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * Azure resource type.
     * 
    */
    public String getType() {
        return this.type;
    }
    /**
     * The application type name as defined in the application manifest.
     * 
    */
    public Optional<String> getTypeName() {
        return Optional.ofNullable(this.typeName);
    }
    /**
     * The version of the application type as defined in the application manifest.
     * 
    */
    public Optional<String> getTypeVersion() {
        return Optional.ofNullable(this.typeVersion);
    }
    /**
     * Describes the policy for a monitored application upgrade.
     * 
    */
    public Optional<ApplicationUpgradePolicyResponse> getUpgradePolicy() {
        return Optional.ofNullable(this.upgradePolicy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String etag;
        private String id;
        private @Nullable ManagedIdentityResponse identity;
        private @Nullable String location;
        private @Nullable List<ApplicationUserAssignedIdentityResponse> managedIdentities;
        private @Nullable Double maximumNodes;
        private @Nullable List<ApplicationMetricDescriptionResponse> metrics;
        private @Nullable Double minimumNodes;
        private String name;
        private @Nullable Map<String,String> parameters;
        private String provisioningState;
        private @Nullable Boolean removeApplicationCapacity;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable String typeName;
        private @Nullable String typeVersion;
        private @Nullable ApplicationUpgradePolicyResponse upgradePolicy;

        public Builder() {
    	      // Empty
        }

        public Builder(GetApplicationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.managedIdentities = defaults.managedIdentities;
    	      this.maximumNodes = defaults.maximumNodes;
    	      this.metrics = defaults.metrics;
    	      this.minimumNodes = defaults.minimumNodes;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.provisioningState = defaults.provisioningState;
    	      this.removeApplicationCapacity = defaults.removeApplicationCapacity;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.typeName = defaults.typeName;
    	      this.typeVersion = defaults.typeVersion;
    	      this.upgradePolicy = defaults.upgradePolicy;
        }

        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder identity(@Nullable ManagedIdentityResponse identity) {
            this.identity = identity;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }

        public Builder managedIdentities(@Nullable List<ApplicationUserAssignedIdentityResponse> managedIdentities) {
            this.managedIdentities = managedIdentities;
            return this;
        }

        public Builder maximumNodes(@Nullable Double maximumNodes) {
            this.maximumNodes = maximumNodes;
            return this;
        }

        public Builder metrics(@Nullable List<ApplicationMetricDescriptionResponse> metrics) {
            this.metrics = metrics;
            return this;
        }

        public Builder minimumNodes(@Nullable Double minimumNodes) {
            this.minimumNodes = minimumNodes;
            return this;
        }

        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }

        public Builder removeApplicationCapacity(@Nullable Boolean removeApplicationCapacity) {
            this.removeApplicationCapacity = removeApplicationCapacity;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder typeName(@Nullable String typeName) {
            this.typeName = typeName;
            return this;
        }

        public Builder typeVersion(@Nullable String typeVersion) {
            this.typeVersion = typeVersion;
            return this;
        }

        public Builder upgradePolicy(@Nullable ApplicationUpgradePolicyResponse upgradePolicy) {
            this.upgradePolicy = upgradePolicy;
            return this;
        }
        public GetApplicationResult build() {
            return new GetApplicationResult(etag, id, identity, location, managedIdentities, maximumNodes, metrics, minimumNodes, name, parameters, provisioningState, removeApplicationCapacity, tags, type, typeName, typeVersion, upgradePolicy);
        }
    }
}
