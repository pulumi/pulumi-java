// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.portal;

import io.pulumi.azurenative.portal.inputs.DashboardLensArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DashboardArgs extends io.pulumi.resources.ResourceArgs {

    public static final DashboardArgs Empty = new DashboardArgs();

    /**
     * The name of the dashboard.
     * 
     */
    @InputImport(name="dashboardName")
      private final @Nullable Output<String> dashboardName;

    public Output<String> getDashboardName() {
        return this.dashboardName == null ? Output.empty() : this.dashboardName;
    }

    /**
     * The dashboard lenses.
     * 
     */
    @InputImport(name="lenses")
      private final @Nullable Output<List<DashboardLensArgs>> lenses;

    public Output<List<DashboardLensArgs>> getLenses() {
        return this.lenses == null ? Output.empty() : this.lenses;
    }

    /**
     * Resource location
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The dashboard metadata.
     * 
     */
    @InputImport(name="metadata")
      private final @Nullable Output<Map<String,Object>> metadata;

    public Output<Map<String,Object>> getMetadata() {
        return this.metadata == null ? Output.empty() : this.metadata;
    }

    /**
     * The name of the resource group.
     * 
     */
    @InputImport(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DashboardArgs(
        @Nullable Output<String> dashboardName,
        @Nullable Output<List<DashboardLensArgs>> lenses,
        @Nullable Output<String> location,
        @Nullable Output<Map<String,Object>> metadata,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags) {
        this.dashboardName = dashboardName;
        this.lenses = lenses;
        this.location = location;
        this.metadata = metadata;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private DashboardArgs() {
        this.dashboardName = Output.empty();
        this.lenses = Output.empty();
        this.location = Output.empty();
        this.metadata = Output.empty();
        this.resourceGroupName = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> dashboardName;
        private @Nullable Output<List<DashboardLensArgs>> lenses;
        private @Nullable Output<String> location;
        private @Nullable Output<Map<String,Object>> metadata;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DashboardArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dashboardName = defaults.dashboardName;
    	      this.lenses = defaults.lenses;
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder dashboardName(@Nullable Output<String> dashboardName) {
            this.dashboardName = dashboardName;
            return this;
        }

        public Builder dashboardName(@Nullable String dashboardName) {
            this.dashboardName = Output.ofNullable(dashboardName);
            return this;
        }

        public Builder lenses(@Nullable Output<List<DashboardLensArgs>> lenses) {
            this.lenses = lenses;
            return this;
        }

        public Builder lenses(@Nullable List<DashboardLensArgs> lenses) {
            this.lenses = Output.ofNullable(lenses);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder metadata(@Nullable Output<Map<String,Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(@Nullable Map<String,Object> metadata) {
            this.metadata = Output.ofNullable(metadata);
            return this;
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public DashboardArgs build() {
            return new DashboardArgs(dashboardName, lenses, location, metadata, resourceGroupName, tags);
        }
    }
}
