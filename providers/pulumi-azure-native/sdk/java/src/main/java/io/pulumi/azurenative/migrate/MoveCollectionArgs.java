// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.migrate;

import io.pulumi.azurenative.migrate.inputs.IdentityArgs;
import io.pulumi.azurenative.migrate.inputs.MoveCollectionPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MoveCollectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final MoveCollectionArgs Empty = new MoveCollectionArgs();

    /**
     * Defines the MSI properties of the Move Collection.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<IdentityArgs> identity;

    public Output<IdentityArgs> getIdentity() {
        return this.identity == null ? Codegen.empty() : this.identity;
    }

    /**
     * The geo-location where the resource lives.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The Move Collection Name.
     * 
     */
    @Import(name="moveCollectionName")
      private final @Nullable Output<String> moveCollectionName;

    public Output<String> getMoveCollectionName() {
        return this.moveCollectionName == null ? Codegen.empty() : this.moveCollectionName;
    }

    /**
     * Defines the move collection properties.
     * 
     */
    @Import(name="properties")
      private final @Nullable Output<MoveCollectionPropertiesArgs> properties;

    public Output<MoveCollectionPropertiesArgs> getProperties() {
        return this.properties == null ? Codegen.empty() : this.properties;
    }

    /**
     * The Resource Group Name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public MoveCollectionArgs(
        @Nullable Output<IdentityArgs> identity,
        @Nullable Output<String> location,
        @Nullable Output<String> moveCollectionName,
        @Nullable Output<MoveCollectionPropertiesArgs> properties,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags) {
        this.identity = identity;
        this.location = location;
        this.moveCollectionName = moveCollectionName;
        this.properties = properties;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private MoveCollectionArgs() {
        this.identity = Codegen.empty();
        this.location = Codegen.empty();
        this.moveCollectionName = Codegen.empty();
        this.properties = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MoveCollectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<IdentityArgs> identity;
        private @Nullable Output<String> location;
        private @Nullable Output<String> moveCollectionName;
        private @Nullable Output<MoveCollectionPropertiesArgs> properties;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(MoveCollectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.moveCollectionName = defaults.moveCollectionName;
    	      this.properties = defaults.properties;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder identity(@Nullable Output<IdentityArgs> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable IdentityArgs identity) {
            this.identity = Codegen.ofNullable(identity);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder moveCollectionName(@Nullable Output<String> moveCollectionName) {
            this.moveCollectionName = moveCollectionName;
            return this;
        }
        public Builder moveCollectionName(@Nullable String moveCollectionName) {
            this.moveCollectionName = Codegen.ofNullable(moveCollectionName);
            return this;
        }
        public Builder properties(@Nullable Output<MoveCollectionPropertiesArgs> properties) {
            this.properties = properties;
            return this;
        }
        public Builder properties(@Nullable MoveCollectionPropertiesArgs properties) {
            this.properties = Codegen.ofNullable(properties);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public MoveCollectionArgs build() {
            return new MoveCollectionArgs(identity, location, moveCollectionName, properties, resourceGroupName, tags);
        }
    }
}
