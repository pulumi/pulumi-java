// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.servicefabricmesh;

import io.pulumi.azurenative.servicefabricmesh.inputs.DiagnosticsDescriptionArgs;
import io.pulumi.azurenative.servicefabricmesh.inputs.ServiceResourceDescriptionArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    @InputImport(name="applicationResourceName")
    private final @Nullable Input<String> applicationResourceName;

    public Input<String> getApplicationResourceName() {
        return this.applicationResourceName == null ? Input.empty() : this.applicationResourceName;
    }

    @InputImport(name="debugParams")
    private final @Nullable Input<String> debugParams;

    public Input<String> getDebugParams() {
        return this.debugParams == null ? Input.empty() : this.debugParams;
    }

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="diagnostics")
    private final @Nullable Input<DiagnosticsDescriptionArgs> diagnostics;

    public Input<DiagnosticsDescriptionArgs> getDiagnostics() {
        return this.diagnostics == null ? Input.empty() : this.diagnostics;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="resourceGroupName", required=true)
    private final Input<String> resourceGroupName;

    public Input<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    @InputImport(name="services")
    private final @Nullable Input<List<ServiceResourceDescriptionArgs>> services;

    public Input<List<ServiceResourceDescriptionArgs>> getServices() {
        return this.services == null ? Input.empty() : this.services;
    }

    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ApplicationArgs(
        @Nullable Input<String> applicationResourceName,
        @Nullable Input<String> debugParams,
        @Nullable Input<String> description,
        @Nullable Input<DiagnosticsDescriptionArgs> diagnostics,
        @Nullable Input<String> location,
        Input<String> resourceGroupName,
        @Nullable Input<List<ServiceResourceDescriptionArgs>> services,
        @Nullable Input<Map<String,String>> tags) {
        this.applicationResourceName = applicationResourceName;
        this.debugParams = debugParams;
        this.description = description;
        this.diagnostics = diagnostics;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.services = services;
        this.tags = tags;
    }

    private ApplicationArgs() {
        this.applicationResourceName = Input.empty();
        this.debugParams = Input.empty();
        this.description = Input.empty();
        this.diagnostics = Input.empty();
        this.location = Input.empty();
        this.resourceGroupName = Input.empty();
        this.services = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> applicationResourceName;
        private @Nullable Input<String> debugParams;
        private @Nullable Input<String> description;
        private @Nullable Input<DiagnosticsDescriptionArgs> diagnostics;
        private @Nullable Input<String> location;
        private Input<String> resourceGroupName;
        private @Nullable Input<List<ServiceResourceDescriptionArgs>> services;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationResourceName = defaults.applicationResourceName;
    	      this.debugParams = defaults.debugParams;
    	      this.description = defaults.description;
    	      this.diagnostics = defaults.diagnostics;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.services = defaults.services;
    	      this.tags = defaults.tags;
        }

        public Builder setApplicationResourceName(@Nullable Input<String> applicationResourceName) {
            this.applicationResourceName = applicationResourceName;
            return this;
        }

        public Builder setApplicationResourceName(@Nullable String applicationResourceName) {
            this.applicationResourceName = Input.ofNullable(applicationResourceName);
            return this;
        }

        public Builder setDebugParams(@Nullable Input<String> debugParams) {
            this.debugParams = debugParams;
            return this;
        }

        public Builder setDebugParams(@Nullable String debugParams) {
            this.debugParams = Input.ofNullable(debugParams);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDiagnostics(@Nullable Input<DiagnosticsDescriptionArgs> diagnostics) {
            this.diagnostics = diagnostics;
            return this;
        }

        public Builder setDiagnostics(@Nullable DiagnosticsDescriptionArgs diagnostics) {
            this.diagnostics = Input.ofNullable(diagnostics);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setResourceGroupName(Input<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }

        public Builder setResourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Input.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }

        public Builder setServices(@Nullable Input<List<ServiceResourceDescriptionArgs>> services) {
            this.services = services;
            return this;
        }

        public Builder setServices(@Nullable List<ServiceResourceDescriptionArgs> services) {
            this.services = Input.ofNullable(services);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public ApplicationArgs build() {
            return new ApplicationArgs(applicationResourceName, debugParams, description, diagnostics, location, resourceGroupName, services, tags);
        }
    }
}
