// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class MpiResponse {
    private final String distributionType;
    private final @Nullable Integer processCountPerInstance;

    @OutputCustomType.Constructor({"distributionType","processCountPerInstance"})
    private MpiResponse(
        String distributionType,
        @Nullable Integer processCountPerInstance) {
        this.distributionType = Objects.requireNonNull(distributionType);
        this.processCountPerInstance = processCountPerInstance;
    }

    public String getDistributionType() {
        return this.distributionType;
    }
    public Optional<Integer> getProcessCountPerInstance() {
        return Optional.ofNullable(this.processCountPerInstance);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MpiResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String distributionType;
        private @Nullable Integer processCountPerInstance;

        public Builder() {
    	      // Empty
        }

        public Builder(MpiResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distributionType = defaults.distributionType;
    	      this.processCountPerInstance = defaults.processCountPerInstance;
        }

        public Builder setDistributionType(String distributionType) {
            this.distributionType = Objects.requireNonNull(distributionType);
            return this;
        }

        public Builder setProcessCountPerInstance(@Nullable Integer processCountPerInstance) {
            this.processCountPerInstance = processCountPerInstance;
            return this;
        }

        public MpiResponse build() {
            return new MpiResponse(distributionType, processCountPerInstance);
        }
    }
}
