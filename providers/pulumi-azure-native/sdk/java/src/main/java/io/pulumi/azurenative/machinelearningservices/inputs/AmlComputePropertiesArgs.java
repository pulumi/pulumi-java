// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.azurenative.machinelearningservices.enums.OsType;
import io.pulumi.azurenative.machinelearningservices.enums.RemoteLoginPortPublicAccess;
import io.pulumi.azurenative.machinelearningservices.enums.VmPriority;
import io.pulumi.azurenative.machinelearningservices.inputs.ResourceIdArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.ScaleSettingsArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.UserAccountCredentialsArgs;
import io.pulumi.azurenative.machinelearningservices.inputs.VirtualMachineImageArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * AML Compute properties
 * 
 */
public final class AmlComputePropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final AmlComputePropertiesArgs Empty = new AmlComputePropertiesArgs();

    /**
     * Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
     * 
     */
    @InputImport(name="enableNodePublicIp")
      private final @Nullable Output<Boolean> enableNodePublicIp;

    public Output<Boolean> getEnableNodePublicIp() {
        return this.enableNodePublicIp == null ? Output.empty() : this.enableNodePublicIp;
    }

    /**
     * Network is isolated or not
     * 
     */
    @InputImport(name="isolatedNetwork")
      private final @Nullable Output<Boolean> isolatedNetwork;

    public Output<Boolean> getIsolatedNetwork() {
        return this.isolatedNetwork == null ? Output.empty() : this.isolatedNetwork;
    }

    /**
     * Compute OS Type
     * 
     */
    @InputImport(name="osType")
      private final @Nullable Output<Either<String,OsType>> osType;

    public Output<Either<String,OsType>> getOsType() {
        return this.osType == null ? Output.empty() : this.osType;
    }

    /**
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
     * 
     */
    @InputImport(name="remoteLoginPortPublicAccess")
      private final @Nullable Output<Either<String,RemoteLoginPortPublicAccess>> remoteLoginPortPublicAccess;

    public Output<Either<String,RemoteLoginPortPublicAccess>> getRemoteLoginPortPublicAccess() {
        return this.remoteLoginPortPublicAccess == null ? Output.empty() : this.remoteLoginPortPublicAccess;
    }

    /**
     * Scale settings for AML Compute
     * 
     */
    @InputImport(name="scaleSettings")
      private final @Nullable Output<ScaleSettingsArgs> scaleSettings;

    public Output<ScaleSettingsArgs> getScaleSettings() {
        return this.scaleSettings == null ? Output.empty() : this.scaleSettings;
    }

    /**
     * Virtual network subnet resource ID the compute nodes belong to.
     * 
     */
    @InputImport(name="subnet")
      private final @Nullable Output<ResourceIdArgs> subnet;

    public Output<ResourceIdArgs> getSubnet() {
        return this.subnet == null ? Output.empty() : this.subnet;
    }

    /**
     * Credentials for an administrator user account that will be created on each compute node.
     * 
     */
    @InputImport(name="userAccountCredentials")
      private final @Nullable Output<UserAccountCredentialsArgs> userAccountCredentials;

    public Output<UserAccountCredentialsArgs> getUserAccountCredentials() {
        return this.userAccountCredentials == null ? Output.empty() : this.userAccountCredentials;
    }

    /**
     * Virtual Machine image for AML Compute - windows only
     * 
     */
    @InputImport(name="virtualMachineImage")
      private final @Nullable Output<VirtualMachineImageArgs> virtualMachineImage;

    public Output<VirtualMachineImageArgs> getVirtualMachineImage() {
        return this.virtualMachineImage == null ? Output.empty() : this.virtualMachineImage;
    }

    /**
     * Virtual Machine priority
     * 
     */
    @InputImport(name="vmPriority")
      private final @Nullable Output<Either<String,VmPriority>> vmPriority;

    public Output<Either<String,VmPriority>> getVmPriority() {
        return this.vmPriority == null ? Output.empty() : this.vmPriority;
    }

    /**
     * Virtual Machine Size
     * 
     */
    @InputImport(name="vmSize")
      private final @Nullable Output<String> vmSize;

    public Output<String> getVmSize() {
        return this.vmSize == null ? Output.empty() : this.vmSize;
    }

    public AmlComputePropertiesArgs(
        @Nullable Output<Boolean> enableNodePublicIp,
        @Nullable Output<Boolean> isolatedNetwork,
        @Nullable Output<Either<String,OsType>> osType,
        @Nullable Output<Either<String,RemoteLoginPortPublicAccess>> remoteLoginPortPublicAccess,
        @Nullable Output<ScaleSettingsArgs> scaleSettings,
        @Nullable Output<ResourceIdArgs> subnet,
        @Nullable Output<UserAccountCredentialsArgs> userAccountCredentials,
        @Nullable Output<VirtualMachineImageArgs> virtualMachineImage,
        @Nullable Output<Either<String,VmPriority>> vmPriority,
        @Nullable Output<String> vmSize) {
        this.enableNodePublicIp = enableNodePublicIp == null ? Output.ofNullable(true) : enableNodePublicIp;
        this.isolatedNetwork = isolatedNetwork;
        this.osType = osType == null ? Output.ofLeft("Linux") : osType;
        this.remoteLoginPortPublicAccess = remoteLoginPortPublicAccess == null ? Output.ofLeft("NotSpecified") : remoteLoginPortPublicAccess;
        this.scaleSettings = scaleSettings;
        this.subnet = subnet;
        this.userAccountCredentials = userAccountCredentials;
        this.virtualMachineImage = virtualMachineImage;
        this.vmPriority = vmPriority;
        this.vmSize = vmSize;
    }

    private AmlComputePropertiesArgs() {
        this.enableNodePublicIp = Output.empty();
        this.isolatedNetwork = Output.empty();
        this.osType = Output.empty();
        this.remoteLoginPortPublicAccess = Output.empty();
        this.scaleSettings = Output.empty();
        this.subnet = Output.empty();
        this.userAccountCredentials = Output.empty();
        this.virtualMachineImage = Output.empty();
        this.vmPriority = Output.empty();
        this.vmSize = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AmlComputePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> enableNodePublicIp;
        private @Nullable Output<Boolean> isolatedNetwork;
        private @Nullable Output<Either<String,OsType>> osType;
        private @Nullable Output<Either<String,RemoteLoginPortPublicAccess>> remoteLoginPortPublicAccess;
        private @Nullable Output<ScaleSettingsArgs> scaleSettings;
        private @Nullable Output<ResourceIdArgs> subnet;
        private @Nullable Output<UserAccountCredentialsArgs> userAccountCredentials;
        private @Nullable Output<VirtualMachineImageArgs> virtualMachineImage;
        private @Nullable Output<Either<String,VmPriority>> vmPriority;
        private @Nullable Output<String> vmSize;

        public Builder() {
    	      // Empty
        }

        public Builder(AmlComputePropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableNodePublicIp = defaults.enableNodePublicIp;
    	      this.isolatedNetwork = defaults.isolatedNetwork;
    	      this.osType = defaults.osType;
    	      this.remoteLoginPortPublicAccess = defaults.remoteLoginPortPublicAccess;
    	      this.scaleSettings = defaults.scaleSettings;
    	      this.subnet = defaults.subnet;
    	      this.userAccountCredentials = defaults.userAccountCredentials;
    	      this.virtualMachineImage = defaults.virtualMachineImage;
    	      this.vmPriority = defaults.vmPriority;
    	      this.vmSize = defaults.vmSize;
        }

        public Builder enableNodePublicIp(@Nullable Output<Boolean> enableNodePublicIp) {
            this.enableNodePublicIp = enableNodePublicIp;
            return this;
        }

        public Builder enableNodePublicIp(@Nullable Boolean enableNodePublicIp) {
            this.enableNodePublicIp = Output.ofNullable(enableNodePublicIp);
            return this;
        }

        public Builder isolatedNetwork(@Nullable Output<Boolean> isolatedNetwork) {
            this.isolatedNetwork = isolatedNetwork;
            return this;
        }

        public Builder isolatedNetwork(@Nullable Boolean isolatedNetwork) {
            this.isolatedNetwork = Output.ofNullable(isolatedNetwork);
            return this;
        }

        public Builder osType(@Nullable Output<Either<String,OsType>> osType) {
            this.osType = osType;
            return this;
        }

        public Builder osType(@Nullable Either<String,OsType> osType) {
            this.osType = Output.ofNullable(osType);
            return this;
        }

        public Builder remoteLoginPortPublicAccess(@Nullable Output<Either<String,RemoteLoginPortPublicAccess>> remoteLoginPortPublicAccess) {
            this.remoteLoginPortPublicAccess = remoteLoginPortPublicAccess;
            return this;
        }

        public Builder remoteLoginPortPublicAccess(@Nullable Either<String,RemoteLoginPortPublicAccess> remoteLoginPortPublicAccess) {
            this.remoteLoginPortPublicAccess = Output.ofNullable(remoteLoginPortPublicAccess);
            return this;
        }

        public Builder scaleSettings(@Nullable Output<ScaleSettingsArgs> scaleSettings) {
            this.scaleSettings = scaleSettings;
            return this;
        }

        public Builder scaleSettings(@Nullable ScaleSettingsArgs scaleSettings) {
            this.scaleSettings = Output.ofNullable(scaleSettings);
            return this;
        }

        public Builder subnet(@Nullable Output<ResourceIdArgs> subnet) {
            this.subnet = subnet;
            return this;
        }

        public Builder subnet(@Nullable ResourceIdArgs subnet) {
            this.subnet = Output.ofNullable(subnet);
            return this;
        }

        public Builder userAccountCredentials(@Nullable Output<UserAccountCredentialsArgs> userAccountCredentials) {
            this.userAccountCredentials = userAccountCredentials;
            return this;
        }

        public Builder userAccountCredentials(@Nullable UserAccountCredentialsArgs userAccountCredentials) {
            this.userAccountCredentials = Output.ofNullable(userAccountCredentials);
            return this;
        }

        public Builder virtualMachineImage(@Nullable Output<VirtualMachineImageArgs> virtualMachineImage) {
            this.virtualMachineImage = virtualMachineImage;
            return this;
        }

        public Builder virtualMachineImage(@Nullable VirtualMachineImageArgs virtualMachineImage) {
            this.virtualMachineImage = Output.ofNullable(virtualMachineImage);
            return this;
        }

        public Builder vmPriority(@Nullable Output<Either<String,VmPriority>> vmPriority) {
            this.vmPriority = vmPriority;
            return this;
        }

        public Builder vmPriority(@Nullable Either<String,VmPriority> vmPriority) {
            this.vmPriority = Output.ofNullable(vmPriority);
            return this;
        }

        public Builder vmSize(@Nullable Output<String> vmSize) {
            this.vmSize = vmSize;
            return this;
        }

        public Builder vmSize(@Nullable String vmSize) {
            this.vmSize = Output.ofNullable(vmSize);
            return this;
        }
        public AmlComputePropertiesArgs build() {
            return new AmlComputePropertiesArgs(enableNodePublicIp, isolatedNetwork, osType, remoteLoginPortPublicAccess, scaleSettings, subnet, userAccountCredentials, virtualMachineImage, vmPriority, vmSize);
        }
    }
}
