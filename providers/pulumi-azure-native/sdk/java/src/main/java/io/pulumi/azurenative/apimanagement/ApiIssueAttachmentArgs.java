// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.apimanagement;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApiIssueAttachmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApiIssueAttachmentArgs Empty = new ApiIssueAttachmentArgs();

    /**
     * API identifier. Must be unique in the current API Management service instance.
     * 
     */
    @Import(name="apiId", required=true)
      private final Output<String> apiId;

    public Output<String> getApiId() {
        return this.apiId;
    }

    /**
     * Attachment identifier within an Issue. Must be unique in the current Issue.
     * 
     */
    @Import(name="attachmentId")
      private final @Nullable Output<String> attachmentId;

    public Output<String> getAttachmentId() {
        return this.attachmentId == null ? Codegen.empty() : this.attachmentId;
    }

    /**
     * An HTTP link or Base64-encoded binary data.
     * 
     */
    @Import(name="content", required=true)
      private final Output<String> content;

    public Output<String> getContent() {
        return this.content;
    }

    /**
     * Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property.
     * 
     */
    @Import(name="contentFormat", required=true)
      private final Output<String> contentFormat;

    public Output<String> getContentFormat() {
        return this.contentFormat;
    }

    /**
     * Issue identifier. Must be unique in the current API Management service instance.
     * 
     */
    @Import(name="issueId", required=true)
      private final Output<String> issueId;

    public Output<String> getIssueId() {
        return this.issueId;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> getResourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * Filename by which the binary data will be saved.
     * 
     */
    @Import(name="title", required=true)
      private final Output<String> title;

    public Output<String> getTitle() {
        return this.title;
    }

    public ApiIssueAttachmentArgs(
        Output<String> apiId,
        @Nullable Output<String> attachmentId,
        Output<String> content,
        Output<String> contentFormat,
        Output<String> issueId,
        Output<String> resourceGroupName,
        Output<String> serviceName,
        Output<String> title) {
        this.apiId = Objects.requireNonNull(apiId, "expected parameter 'apiId' to be non-null");
        this.attachmentId = attachmentId;
        this.content = Objects.requireNonNull(content, "expected parameter 'content' to be non-null");
        this.contentFormat = Objects.requireNonNull(contentFormat, "expected parameter 'contentFormat' to be non-null");
        this.issueId = Objects.requireNonNull(issueId, "expected parameter 'issueId' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.title = Objects.requireNonNull(title, "expected parameter 'title' to be non-null");
    }

    private ApiIssueAttachmentArgs() {
        this.apiId = Codegen.empty();
        this.attachmentId = Codegen.empty();
        this.content = Codegen.empty();
        this.contentFormat = Codegen.empty();
        this.issueId = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.serviceName = Codegen.empty();
        this.title = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApiIssueAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> apiId;
        private @Nullable Output<String> attachmentId;
        private Output<String> content;
        private Output<String> contentFormat;
        private Output<String> issueId;
        private Output<String> resourceGroupName;
        private Output<String> serviceName;
        private Output<String> title;

        public Builder() {
    	      // Empty
        }

        public Builder(ApiIssueAttachmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiId = defaults.apiId;
    	      this.attachmentId = defaults.attachmentId;
    	      this.content = defaults.content;
    	      this.contentFormat = defaults.contentFormat;
    	      this.issueId = defaults.issueId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serviceName = defaults.serviceName;
    	      this.title = defaults.title;
        }

        public Builder apiId(Output<String> apiId) {
            this.apiId = Objects.requireNonNull(apiId);
            return this;
        }
        public Builder apiId(String apiId) {
            this.apiId = Output.of(Objects.requireNonNull(apiId));
            return this;
        }
        public Builder attachmentId(@Nullable Output<String> attachmentId) {
            this.attachmentId = attachmentId;
            return this;
        }
        public Builder attachmentId(@Nullable String attachmentId) {
            this.attachmentId = Codegen.ofNullable(attachmentId);
            return this;
        }
        public Builder content(Output<String> content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }
        public Builder content(String content) {
            this.content = Output.of(Objects.requireNonNull(content));
            return this;
        }
        public Builder contentFormat(Output<String> contentFormat) {
            this.contentFormat = Objects.requireNonNull(contentFormat);
            return this;
        }
        public Builder contentFormat(String contentFormat) {
            this.contentFormat = Output.of(Objects.requireNonNull(contentFormat));
            return this;
        }
        public Builder issueId(Output<String> issueId) {
            this.issueId = Objects.requireNonNull(issueId);
            return this;
        }
        public Builder issueId(String issueId) {
            this.issueId = Output.of(Objects.requireNonNull(issueId));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public Builder title(Output<String> title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }
        public Builder title(String title) {
            this.title = Output.of(Objects.requireNonNull(title));
            return this;
        }        public ApiIssueAttachmentArgs build() {
            return new ApiIssueAttachmentArgs(apiId, attachmentId, content, contentFormat, issueId, resourceGroupName, serviceName, title);
        }
    }
}
