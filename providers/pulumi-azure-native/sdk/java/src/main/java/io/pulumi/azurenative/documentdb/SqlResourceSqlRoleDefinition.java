// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.documentdb;

import io.pulumi.azurenative.Utilities;
import io.pulumi.azurenative.documentdb.SqlResourceSqlRoleDefinitionArgs;
import io.pulumi.azurenative.documentdb.outputs.PermissionResponse;
import io.pulumi.core.Alias;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * An Azure Cosmos DB SQL Role Definition.
 * API Version: 2021-03-01-preview.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:documentdb:SqlResourceSqlRoleDefinition myRoleDefinitionId /subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.DocumentDB/databaseAccounts/myAccountName/sqlRoleDefinitions/myRoleDefinitionId 
 * ```
 * 
 */
@ResourceType(type="azure-native:documentdb:SqlResourceSqlRoleDefinition")
public class SqlResourceSqlRoleDefinition extends io.pulumi.resources.CustomResource {
    /**
     * A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
     * 
     */
    @Export(name="assignableScopes", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> assignableScopes;

    /**
     * @return A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
     * 
     */
    public Output</* @Nullable */ List<String>> assignableScopes() {
        return this.assignableScopes;
    }
    /**
     * The name of the database account.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the database account.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The set of operations allowed through this Role Definition.
     * 
     */
    @Export(name="permissions", type=List.class, parameters={PermissionResponse.class})
    private Output</* @Nullable */ List<PermissionResponse>> permissions;

    /**
     * @return The set of operations allowed through this Role Definition.
     * 
     */
    public Output</* @Nullable */ List<PermissionResponse>> permissions() {
        return this.permissions;
    }
    /**
     * A user-friendly name for the Role Definition. Must be unique for the database account.
     * 
     */
    @Export(name="roleName", type=String.class, parameters={})
    private Output</* @Nullable */ String> roleName;

    /**
     * @return A user-friendly name for the Role Definition. Must be unique for the database account.
     * 
     */
    public Output</* @Nullable */ String> roleName() {
        return this.roleName;
    }
    /**
     * The type of Azure resource.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of Azure resource.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SqlResourceSqlRoleDefinition(String name) {
        this(name, SqlResourceSqlRoleDefinitionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SqlResourceSqlRoleDefinition(String name, SqlResourceSqlRoleDefinitionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SqlResourceSqlRoleDefinition(String name, SqlResourceSqlRoleDefinitionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:documentdb:SqlResourceSqlRoleDefinition", name, args == null ? SqlResourceSqlRoleDefinitionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SqlResourceSqlRoleDefinition(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:documentdb:SqlResourceSqlRoleDefinition", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:documentdb/v20200601preview:SqlResourceSqlRoleDefinition").build()),
                Output.of(Alias.builder().type("azure-native:documentdb/v20210301preview:SqlResourceSqlRoleDefinition").build()),
                Output.of(Alias.builder().type("azure-native:documentdb/v20210401preview:SqlResourceSqlRoleDefinition").build()),
                Output.of(Alias.builder().type("azure-native:documentdb/v20210415:SqlResourceSqlRoleDefinition").build()),
                Output.of(Alias.builder().type("azure-native:documentdb/v20210515:SqlResourceSqlRoleDefinition").build()),
                Output.of(Alias.builder().type("azure-native:documentdb/v20210615:SqlResourceSqlRoleDefinition").build()),
                Output.of(Alias.builder().type("azure-native:documentdb/v20210701preview:SqlResourceSqlRoleDefinition").build()),
                Output.of(Alias.builder().type("azure-native:documentdb/v20211015:SqlResourceSqlRoleDefinition").build()),
                Output.of(Alias.builder().type("azure-native:documentdb/v20211015preview:SqlResourceSqlRoleDefinition").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SqlResourceSqlRoleDefinition get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new SqlResourceSqlRoleDefinition(name, id, options);
    }
}
