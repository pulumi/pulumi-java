// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.databox.inputs;

import io.pulumi.azurenative.databox.enums.KekType;
import io.pulumi.azurenative.databox.inputs.IdentityPropertiesArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Encryption key containing details about key to encrypt different keys.
 * 
 */
public final class KeyEncryptionKeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final KeyEncryptionKeyArgs Empty = new KeyEncryptionKeyArgs();

    /**
     * Managed identity properties used for key encryption.
     * 
     */
    @Import(name="identityProperties")
      private final @Nullable Output<IdentityPropertiesArgs> identityProperties;

    public Output<IdentityPropertiesArgs> identityProperties() {
        return this.identityProperties == null ? Codegen.empty() : this.identityProperties;
    }

    /**
     * Type of encryption key used for key encryption.
     * 
     */
    @Import(name="kekType", required=true)
      private final Output<Either<String,KekType>> kekType;

    public Output<Either<String,KekType>> kekType() {
        return this.kekType;
    }

    /**
     * Key encryption key. It is required in case of Customer managed KekType.
     * 
     */
    @Import(name="kekUrl")
      private final @Nullable Output<String> kekUrl;

    public Output<String> kekUrl() {
        return this.kekUrl == null ? Codegen.empty() : this.kekUrl;
    }

    /**
     * Kek vault resource id. It is required in case of Customer managed KekType.
     * 
     */
    @Import(name="kekVaultResourceID")
      private final @Nullable Output<String> kekVaultResourceID;

    public Output<String> kekVaultResourceID() {
        return this.kekVaultResourceID == null ? Codegen.empty() : this.kekVaultResourceID;
    }

    public KeyEncryptionKeyArgs(
        @Nullable Output<IdentityPropertiesArgs> identityProperties,
        Output<Either<String,KekType>> kekType,
        @Nullable Output<String> kekUrl,
        @Nullable Output<String> kekVaultResourceID) {
        this.identityProperties = identityProperties;
        this.kekType = kekType == null ? Output.ofLeft("MicrosoftManaged") : Objects.requireNonNull(kekType, "expected parameter 'kekType' to be non-null");
        this.kekUrl = kekUrl;
        this.kekVaultResourceID = kekVaultResourceID;
    }

    private KeyEncryptionKeyArgs() {
        this.identityProperties = Codegen.empty();
        this.kekType = Codegen.empty();
        this.kekUrl = Codegen.empty();
        this.kekVaultResourceID = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyEncryptionKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<IdentityPropertiesArgs> identityProperties;
        private Output<Either<String,KekType>> kekType;
        private @Nullable Output<String> kekUrl;
        private @Nullable Output<String> kekVaultResourceID;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyEncryptionKeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.identityProperties = defaults.identityProperties;
    	      this.kekType = defaults.kekType;
    	      this.kekUrl = defaults.kekUrl;
    	      this.kekVaultResourceID = defaults.kekVaultResourceID;
        }

        public Builder identityProperties(@Nullable Output<IdentityPropertiesArgs> identityProperties) {
            this.identityProperties = identityProperties;
            return this;
        }
        public Builder identityProperties(@Nullable IdentityPropertiesArgs identityProperties) {
            this.identityProperties = Codegen.ofNullable(identityProperties);
            return this;
        }
        public Builder kekType(Output<Either<String,KekType>> kekType) {
            this.kekType = Objects.requireNonNull(kekType);
            return this;
        }
        public Builder kekType(Either<String,KekType> kekType) {
            this.kekType = Output.of(Objects.requireNonNull(kekType));
            return this;
        }
        public Builder kekUrl(@Nullable Output<String> kekUrl) {
            this.kekUrl = kekUrl;
            return this;
        }
        public Builder kekUrl(@Nullable String kekUrl) {
            this.kekUrl = Codegen.ofNullable(kekUrl);
            return this;
        }
        public Builder kekVaultResourceID(@Nullable Output<String> kekVaultResourceID) {
            this.kekVaultResourceID = kekVaultResourceID;
            return this;
        }
        public Builder kekVaultResourceID(@Nullable String kekVaultResourceID) {
            this.kekVaultResourceID = Codegen.ofNullable(kekVaultResourceID);
            return this;
        }        public KeyEncryptionKeyArgs build() {
            return new KeyEncryptionKeyArgs(identityProperties, kekType, kekUrl, kekVaultResourceID);
        }
    }
}
