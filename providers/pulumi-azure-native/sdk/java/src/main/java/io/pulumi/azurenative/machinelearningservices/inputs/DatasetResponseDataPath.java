// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.machinelearningservices.inputs;

import io.pulumi.azurenative.machinelearningservices.inputs.DatasetResponseSqlDataPath;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 *  Datastore and reference to location of data such as relativePath, Sql Query and etc.
 * 
 */
public final class DatasetResponseDataPath extends io.pulumi.resources.InvokeArgs {

    public static final DatasetResponseDataPath Empty = new DatasetResponseDataPath();

    /**
     * Additional Properties.
     * 
     */
    @Import(name="additionalProperties")
      private final @Nullable Map<String,Object> additionalProperties;

    public Map<String,Object> getAdditionalProperties() {
        return this.additionalProperties == null ? Map.of() : this.additionalProperties;
    }

    /**
     * Azure path for Azure Blob or File
     * 
     */
    @Import(name="azureFilePath", required=true)
      private final String azureFilePath;

    public String getAzureFilePath() {
        return this.azureFilePath;
    }

    /**
     * Data store Name
     * 
     */
    @Import(name="datastoreName", required=true)
      private final String datastoreName;

    public String getDatastoreName() {
        return this.datastoreName;
    }

    /**
     * HTTP URL.
     * 
     */
    @Import(name="httpUrl", required=true)
      private final String httpUrl;

    public String getHttpUrl() {
        return this.httpUrl;
    }

    /**
     * Specify the partition format of path. Defaults to None.
     * 
     */
    @Import(name="partitionFormat", required=true)
      private final String partitionFormat;

    public String getPartitionFormat() {
        return this.partitionFormat;
    }

    /**
     * Whether or not to ignore unmatched path.
     * 
     */
    @Import(name="partitionFormatIgnoreError", required=true)
      private final Boolean partitionFormatIgnoreError;

    public Boolean getPartitionFormatIgnoreError() {
        return this.partitionFormatIgnoreError;
    }

    /**
     * List of files expanded from a file GLOB specified
     * 
     */
    @Import(name="paths", required=true)
      private final List<String> paths;

    public List<String> getPaths() {
        return this.paths;
    }

    /**
     * Relative path in the data store
     * 
     */
    @Import(name="relativePath", required=true)
      private final String relativePath;

    public String getRelativePath() {
        return this.relativePath;
    }

    /**
     * Sql Query/Table/Stored Procedure details.
     * 
     */
    @Import(name="sqlDataPath")
      private final @Nullable DatasetResponseSqlDataPath sqlDataPath;

    public Optional<DatasetResponseSqlDataPath> getSqlDataPath() {
        return this.sqlDataPath == null ? Optional.empty() : Optional.ofNullable(this.sqlDataPath);
    }

    public DatasetResponseDataPath(
        @Nullable Map<String,Object> additionalProperties,
        String azureFilePath,
        String datastoreName,
        String httpUrl,
        String partitionFormat,
        Boolean partitionFormatIgnoreError,
        List<String> paths,
        String relativePath,
        @Nullable DatasetResponseSqlDataPath sqlDataPath) {
        this.additionalProperties = additionalProperties;
        this.azureFilePath = Objects.requireNonNull(azureFilePath, "expected parameter 'azureFilePath' to be non-null");
        this.datastoreName = Objects.requireNonNull(datastoreName, "expected parameter 'datastoreName' to be non-null");
        this.httpUrl = Objects.requireNonNull(httpUrl, "expected parameter 'httpUrl' to be non-null");
        this.partitionFormat = Objects.requireNonNull(partitionFormat, "expected parameter 'partitionFormat' to be non-null");
        this.partitionFormatIgnoreError = Objects.requireNonNull(partitionFormatIgnoreError, "expected parameter 'partitionFormatIgnoreError' to be non-null");
        this.paths = Objects.requireNonNull(paths, "expected parameter 'paths' to be non-null");
        this.relativePath = Objects.requireNonNull(relativePath, "expected parameter 'relativePath' to be non-null");
        this.sqlDataPath = sqlDataPath;
    }

    private DatasetResponseDataPath() {
        this.additionalProperties = Map.of();
        this.azureFilePath = null;
        this.datastoreName = null;
        this.httpUrl = null;
        this.partitionFormat = null;
        this.partitionFormatIgnoreError = null;
        this.paths = List.of();
        this.relativePath = null;
        this.sqlDataPath = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetResponseDataPath defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Map<String,Object> additionalProperties;
        private String azureFilePath;
        private String datastoreName;
        private String httpUrl;
        private String partitionFormat;
        private Boolean partitionFormatIgnoreError;
        private List<String> paths;
        private String relativePath;
        private @Nullable DatasetResponseSqlDataPath sqlDataPath;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetResponseDataPath defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalProperties = defaults.additionalProperties;
    	      this.azureFilePath = defaults.azureFilePath;
    	      this.datastoreName = defaults.datastoreName;
    	      this.httpUrl = defaults.httpUrl;
    	      this.partitionFormat = defaults.partitionFormat;
    	      this.partitionFormatIgnoreError = defaults.partitionFormatIgnoreError;
    	      this.paths = defaults.paths;
    	      this.relativePath = defaults.relativePath;
    	      this.sqlDataPath = defaults.sqlDataPath;
        }

        public Builder additionalProperties(@Nullable Map<String,Object> additionalProperties) {
            this.additionalProperties = additionalProperties;
            return this;
        }

        public Builder azureFilePath(String azureFilePath) {
            this.azureFilePath = Objects.requireNonNull(azureFilePath);
            return this;
        }

        public Builder datastoreName(String datastoreName) {
            this.datastoreName = Objects.requireNonNull(datastoreName);
            return this;
        }

        public Builder httpUrl(String httpUrl) {
            this.httpUrl = Objects.requireNonNull(httpUrl);
            return this;
        }

        public Builder partitionFormat(String partitionFormat) {
            this.partitionFormat = Objects.requireNonNull(partitionFormat);
            return this;
        }

        public Builder partitionFormatIgnoreError(Boolean partitionFormatIgnoreError) {
            this.partitionFormatIgnoreError = Objects.requireNonNull(partitionFormatIgnoreError);
            return this;
        }

        public Builder paths(List<String> paths) {
            this.paths = Objects.requireNonNull(paths);
            return this;
        }

        public Builder relativePath(String relativePath) {
            this.relativePath = Objects.requireNonNull(relativePath);
            return this;
        }

        public Builder sqlDataPath(@Nullable DatasetResponseSqlDataPath sqlDataPath) {
            this.sqlDataPath = sqlDataPath;
            return this;
        }
        public DatasetResponseDataPath build() {
            return new DatasetResponseDataPath(additionalProperties, azureFilePath, datastoreName, httpUrl, partitionFormat, partitionFormatIgnoreError, paths, relativePath, sqlDataPath);
        }
    }
}
