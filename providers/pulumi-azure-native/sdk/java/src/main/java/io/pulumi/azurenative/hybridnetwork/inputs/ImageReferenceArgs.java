// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.hybridnetwork.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The image reference properties.
 * 
 */
public final class ImageReferenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ImageReferenceArgs Empty = new ImageReferenceArgs();

    /**
     * Specifies in decimal numbers, the exact version of image used to create the virtual machine.
     * 
     */
    @InputImport(name="exactVersion")
    private final @Nullable Input<String> exactVersion;

    public Input<String> getExactVersion() {
        return this.exactVersion == null ? Input.empty() : this.exactVersion;
    }

    /**
     * Specifies the offer of the image used to create the virtual machine.
     * 
     */
    @InputImport(name="offer")
    private final @Nullable Input<String> offer;

    public Input<String> getOffer() {
        return this.offer == null ? Input.empty() : this.offer;
    }

    /**
     * The image publisher.
     * 
     */
    @InputImport(name="publisher")
    private final @Nullable Input<String> publisher;

    public Input<String> getPublisher() {
        return this.publisher == null ? Input.empty() : this.publisher;
    }

    /**
     * The image SKU.
     * 
     */
    @InputImport(name="sku")
    private final @Nullable Input<String> sku;

    public Input<String> getSku() {
        return this.sku == null ? Input.empty() : this.sku;
    }

    /**
     * Specifies the version of the image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
     * 
     */
    @InputImport(name="version")
    private final @Nullable Input<String> version;

    public Input<String> getVersion() {
        return this.version == null ? Input.empty() : this.version;
    }

    public ImageReferenceArgs(
        @Nullable Input<String> exactVersion,
        @Nullable Input<String> offer,
        @Nullable Input<String> publisher,
        @Nullable Input<String> sku,
        @Nullable Input<String> version) {
        this.exactVersion = exactVersion;
        this.offer = offer;
        this.publisher = publisher;
        this.sku = sku;
        this.version = version;
    }

    private ImageReferenceArgs() {
        this.exactVersion = Input.empty();
        this.offer = Input.empty();
        this.publisher = Input.empty();
        this.sku = Input.empty();
        this.version = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> exactVersion;
        private @Nullable Input<String> offer;
        private @Nullable Input<String> publisher;
        private @Nullable Input<String> sku;
        private @Nullable Input<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageReferenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exactVersion = defaults.exactVersion;
    	      this.offer = defaults.offer;
    	      this.publisher = defaults.publisher;
    	      this.sku = defaults.sku;
    	      this.version = defaults.version;
        }

        public Builder setExactVersion(@Nullable Input<String> exactVersion) {
            this.exactVersion = exactVersion;
            return this;
        }

        public Builder setExactVersion(@Nullable String exactVersion) {
            this.exactVersion = Input.ofNullable(exactVersion);
            return this;
        }

        public Builder setOffer(@Nullable Input<String> offer) {
            this.offer = offer;
            return this;
        }

        public Builder setOffer(@Nullable String offer) {
            this.offer = Input.ofNullable(offer);
            return this;
        }

        public Builder setPublisher(@Nullable Input<String> publisher) {
            this.publisher = publisher;
            return this;
        }

        public Builder setPublisher(@Nullable String publisher) {
            this.publisher = Input.ofNullable(publisher);
            return this;
        }

        public Builder setSku(@Nullable Input<String> sku) {
            this.sku = sku;
            return this;
        }

        public Builder setSku(@Nullable String sku) {
            this.sku = Input.ofNullable(sku);
            return this;
        }

        public Builder setVersion(@Nullable Input<String> version) {
            this.version = version;
            return this;
        }

        public Builder setVersion(@Nullable String version) {
            this.version = Input.ofNullable(version);
            return this;
        }

        public ImageReferenceArgs build() {
            return new ImageReferenceArgs(exactVersion, offer, publisher, sku, version);
        }
    }
}
