// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.azurenative.datashare.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SynchronizationDetailsResponse {
    /**
     * Id of data set
     * 
     */
    private final String dataSetId;
    /**
     * Type of the data set
     * 
     */
    private final String dataSetType;
    /**
     * Duration of data set level copy
     * 
     */
    private final Integer durationMs;
    /**
     * End time of data set level copy
     * 
     */
    private final String endTime;
    /**
     * The number of files read from the source data set
     * 
     */
    private final Double filesRead;
    /**
     * The number of files written into the sink data set
     * 
     */
    private final Double filesWritten;
    /**
     * Error message if any
     * 
     */
    private final String message;
    /**
     * Name of the data set
     * 
     */
    private final String name;
    /**
     * The number of files copied into the sink data set
     * 
     */
    private final Double rowsCopied;
    /**
     * The number of rows read from the source data set.
     * 
     */
    private final Double rowsRead;
    /**
     * The size of the data read from the source data set in bytes
     * 
     */
    private final Double sizeRead;
    /**
     * The size of the data written into the sink data set in bytes
     * 
     */
    private final Double sizeWritten;
    /**
     * Start time of data set level copy
     * 
     */
    private final String startTime;
    /**
     * Raw Status
     * 
     */
    private final String status;
    /**
     * The vCore units consumed for the data set synchronization
     * 
     */
    private final Double vCore;

    @CustomType.Constructor
    private SynchronizationDetailsResponse(
        @CustomType.Parameter("dataSetId") String dataSetId,
        @CustomType.Parameter("dataSetType") String dataSetType,
        @CustomType.Parameter("durationMs") Integer durationMs,
        @CustomType.Parameter("endTime") String endTime,
        @CustomType.Parameter("filesRead") Double filesRead,
        @CustomType.Parameter("filesWritten") Double filesWritten,
        @CustomType.Parameter("message") String message,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("rowsCopied") Double rowsCopied,
        @CustomType.Parameter("rowsRead") Double rowsRead,
        @CustomType.Parameter("sizeRead") Double sizeRead,
        @CustomType.Parameter("sizeWritten") Double sizeWritten,
        @CustomType.Parameter("startTime") String startTime,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("vCore") Double vCore) {
        this.dataSetId = dataSetId;
        this.dataSetType = dataSetType;
        this.durationMs = durationMs;
        this.endTime = endTime;
        this.filesRead = filesRead;
        this.filesWritten = filesWritten;
        this.message = message;
        this.name = name;
        this.rowsCopied = rowsCopied;
        this.rowsRead = rowsRead;
        this.sizeRead = sizeRead;
        this.sizeWritten = sizeWritten;
        this.startTime = startTime;
        this.status = status;
        this.vCore = vCore;
    }

    /**
     * Id of data set
     * 
    */
    public String dataSetId() {
        return this.dataSetId;
    }
    /**
     * Type of the data set
     * 
    */
    public String dataSetType() {
        return this.dataSetType;
    }
    /**
     * Duration of data set level copy
     * 
    */
    public Integer durationMs() {
        return this.durationMs;
    }
    /**
     * End time of data set level copy
     * 
    */
    public String endTime() {
        return this.endTime;
    }
    /**
     * The number of files read from the source data set
     * 
    */
    public Double filesRead() {
        return this.filesRead;
    }
    /**
     * The number of files written into the sink data set
     * 
    */
    public Double filesWritten() {
        return this.filesWritten;
    }
    /**
     * Error message if any
     * 
    */
    public String message() {
        return this.message;
    }
    /**
     * Name of the data set
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * The number of files copied into the sink data set
     * 
    */
    public Double rowsCopied() {
        return this.rowsCopied;
    }
    /**
     * The number of rows read from the source data set.
     * 
    */
    public Double rowsRead() {
        return this.rowsRead;
    }
    /**
     * The size of the data read from the source data set in bytes
     * 
    */
    public Double sizeRead() {
        return this.sizeRead;
    }
    /**
     * The size of the data written into the sink data set in bytes
     * 
    */
    public Double sizeWritten() {
        return this.sizeWritten;
    }
    /**
     * Start time of data set level copy
     * 
    */
    public String startTime() {
        return this.startTime;
    }
    /**
     * Raw Status
     * 
    */
    public String status() {
        return this.status;
    }
    /**
     * The vCore units consumed for the data set synchronization
     * 
    */
    public Double vCore() {
        return this.vCore;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SynchronizationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String dataSetId;
        private String dataSetType;
        private Integer durationMs;
        private String endTime;
        private Double filesRead;
        private Double filesWritten;
        private String message;
        private String name;
        private Double rowsCopied;
        private Double rowsRead;
        private Double sizeRead;
        private Double sizeWritten;
        private String startTime;
        private String status;
        private Double vCore;

        public Builder() {
    	      // Empty
        }

        public Builder(SynchronizationDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSetId = defaults.dataSetId;
    	      this.dataSetType = defaults.dataSetType;
    	      this.durationMs = defaults.durationMs;
    	      this.endTime = defaults.endTime;
    	      this.filesRead = defaults.filesRead;
    	      this.filesWritten = defaults.filesWritten;
    	      this.message = defaults.message;
    	      this.name = defaults.name;
    	      this.rowsCopied = defaults.rowsCopied;
    	      this.rowsRead = defaults.rowsRead;
    	      this.sizeRead = defaults.sizeRead;
    	      this.sizeWritten = defaults.sizeWritten;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
    	      this.vCore = defaults.vCore;
        }

        public Builder dataSetId(String dataSetId) {
            this.dataSetId = Objects.requireNonNull(dataSetId);
            return this;
        }
        public Builder dataSetType(String dataSetType) {
            this.dataSetType = Objects.requireNonNull(dataSetType);
            return this;
        }
        public Builder durationMs(Integer durationMs) {
            this.durationMs = Objects.requireNonNull(durationMs);
            return this;
        }
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        public Builder filesRead(Double filesRead) {
            this.filesRead = Objects.requireNonNull(filesRead);
            return this;
        }
        public Builder filesWritten(Double filesWritten) {
            this.filesWritten = Objects.requireNonNull(filesWritten);
            return this;
        }
        public Builder message(String message) {
            this.message = Objects.requireNonNull(message);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder rowsCopied(Double rowsCopied) {
            this.rowsCopied = Objects.requireNonNull(rowsCopied);
            return this;
        }
        public Builder rowsRead(Double rowsRead) {
            this.rowsRead = Objects.requireNonNull(rowsRead);
            return this;
        }
        public Builder sizeRead(Double sizeRead) {
            this.sizeRead = Objects.requireNonNull(sizeRead);
            return this;
        }
        public Builder sizeWritten(Double sizeWritten) {
            this.sizeWritten = Objects.requireNonNull(sizeWritten);
            return this;
        }
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder vCore(Double vCore) {
            this.vCore = Objects.requireNonNull(vCore);
            return this;
        }        public SynchronizationDetailsResponse build() {
            return new SynchronizationDetailsResponse(dataSetId, dataSetType, durationMs, endTime, filesRead, filesWritten, message, name, rowsCopied, rowsRead, sizeRead, sizeWritten, startTime, status, vCore);
        }
    }
}
