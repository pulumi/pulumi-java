// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.azurenative.logic.inputs.X12AcknowledgementSettingsArgs;
import com.pulumi.azurenative.logic.inputs.X12DelimiterOverridesArgs;
import com.pulumi.azurenative.logic.inputs.X12EnvelopeOverrideArgs;
import com.pulumi.azurenative.logic.inputs.X12EnvelopeSettingsArgs;
import com.pulumi.azurenative.logic.inputs.X12FramingSettingsArgs;
import com.pulumi.azurenative.logic.inputs.X12MessageFilterArgs;
import com.pulumi.azurenative.logic.inputs.X12MessageIdentifierArgs;
import com.pulumi.azurenative.logic.inputs.X12ProcessingSettingsArgs;
import com.pulumi.azurenative.logic.inputs.X12SchemaReferenceArgs;
import com.pulumi.azurenative.logic.inputs.X12SecuritySettingsArgs;
import com.pulumi.azurenative.logic.inputs.X12ValidationOverrideArgs;
import com.pulumi.azurenative.logic.inputs.X12ValidationSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The X12 agreement protocol settings.
 * 
 */
public final class X12ProtocolSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final X12ProtocolSettingsArgs Empty = new X12ProtocolSettingsArgs();

    /**
     * The X12 acknowledgment settings.
     * 
     */
    @Import(name="acknowledgementSettings", required=true)
    private Output<X12AcknowledgementSettingsArgs> acknowledgementSettings;

    public Output<X12AcknowledgementSettingsArgs> acknowledgementSettings() {
        return this.acknowledgementSettings;
    }

    /**
     * The X12 envelope override settings.
     * 
     */
    @Import(name="envelopeOverrides")
    private @Nullable Output<List<X12EnvelopeOverrideArgs>> envelopeOverrides;

    public Optional<Output<List<X12EnvelopeOverrideArgs>>> envelopeOverrides() {
        return Optional.ofNullable(this.envelopeOverrides);
    }

    /**
     * The X12 envelope settings.
     * 
     */
    @Import(name="envelopeSettings", required=true)
    private Output<X12EnvelopeSettingsArgs> envelopeSettings;

    public Output<X12EnvelopeSettingsArgs> envelopeSettings() {
        return this.envelopeSettings;
    }

    /**
     * The X12 framing settings.
     * 
     */
    @Import(name="framingSettings", required=true)
    private Output<X12FramingSettingsArgs> framingSettings;

    public Output<X12FramingSettingsArgs> framingSettings() {
        return this.framingSettings;
    }

    /**
     * The X12 message filter.
     * 
     */
    @Import(name="messageFilter", required=true)
    private Output<X12MessageFilterArgs> messageFilter;

    public Output<X12MessageFilterArgs> messageFilter() {
        return this.messageFilter;
    }

    /**
     * The X12 message filter list.
     * 
     */
    @Import(name="messageFilterList")
    private @Nullable Output<List<X12MessageIdentifierArgs>> messageFilterList;

    public Optional<Output<List<X12MessageIdentifierArgs>>> messageFilterList() {
        return Optional.ofNullable(this.messageFilterList);
    }

    /**
     * The X12 processing settings.
     * 
     */
    @Import(name="processingSettings", required=true)
    private Output<X12ProcessingSettingsArgs> processingSettings;

    public Output<X12ProcessingSettingsArgs> processingSettings() {
        return this.processingSettings;
    }

    /**
     * The X12 schema references.
     * 
     */
    @Import(name="schemaReferences", required=true)
    private Output<List<X12SchemaReferenceArgs>> schemaReferences;

    public Output<List<X12SchemaReferenceArgs>> schemaReferences() {
        return this.schemaReferences;
    }

    /**
     * The X12 security settings.
     * 
     */
    @Import(name="securitySettings", required=true)
    private Output<X12SecuritySettingsArgs> securitySettings;

    public Output<X12SecuritySettingsArgs> securitySettings() {
        return this.securitySettings;
    }

    /**
     * The X12 validation override settings.
     * 
     */
    @Import(name="validationOverrides")
    private @Nullable Output<List<X12ValidationOverrideArgs>> validationOverrides;

    public Optional<Output<List<X12ValidationOverrideArgs>>> validationOverrides() {
        return Optional.ofNullable(this.validationOverrides);
    }

    /**
     * The X12 validation settings.
     * 
     */
    @Import(name="validationSettings", required=true)
    private Output<X12ValidationSettingsArgs> validationSettings;

    public Output<X12ValidationSettingsArgs> validationSettings() {
        return this.validationSettings;
    }

    /**
     * The X12 delimiter override settings.
     * 
     */
    @Import(name="x12DelimiterOverrides")
    private @Nullable Output<List<X12DelimiterOverridesArgs>> x12DelimiterOverrides;

    public Optional<Output<List<X12DelimiterOverridesArgs>>> x12DelimiterOverrides() {
        return Optional.ofNullable(this.x12DelimiterOverrides);
    }

    private X12ProtocolSettingsArgs() {}

    private X12ProtocolSettingsArgs(X12ProtocolSettingsArgs $) {
        this.acknowledgementSettings = $.acknowledgementSettings;
        this.envelopeOverrides = $.envelopeOverrides;
        this.envelopeSettings = $.envelopeSettings;
        this.framingSettings = $.framingSettings;
        this.messageFilter = $.messageFilter;
        this.messageFilterList = $.messageFilterList;
        this.processingSettings = $.processingSettings;
        this.schemaReferences = $.schemaReferences;
        this.securitySettings = $.securitySettings;
        this.validationOverrides = $.validationOverrides;
        this.validationSettings = $.validationSettings;
        this.x12DelimiterOverrides = $.x12DelimiterOverrides;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(X12ProtocolSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private X12ProtocolSettingsArgs $;

        public Builder() {
            $ = new X12ProtocolSettingsArgs();
        }

        public Builder(X12ProtocolSettingsArgs defaults) {
            $ = new X12ProtocolSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder acknowledgementSettings(Output<X12AcknowledgementSettingsArgs> acknowledgementSettings) {
            $.acknowledgementSettings = acknowledgementSettings;
            return this;
        }

        public Builder acknowledgementSettings(X12AcknowledgementSettingsArgs acknowledgementSettings) {
            return acknowledgementSettings(Output.of(acknowledgementSettings));
        }

        public Builder envelopeOverrides(@Nullable Output<List<X12EnvelopeOverrideArgs>> envelopeOverrides) {
            $.envelopeOverrides = envelopeOverrides;
            return this;
        }

        public Builder envelopeOverrides(List<X12EnvelopeOverrideArgs> envelopeOverrides) {
            return envelopeOverrides(Output.of(envelopeOverrides));
        }

        public Builder envelopeOverrides(X12EnvelopeOverrideArgs... envelopeOverrides) {
            return envelopeOverrides(List.of(envelopeOverrides));
        }

        public Builder envelopeSettings(Output<X12EnvelopeSettingsArgs> envelopeSettings) {
            $.envelopeSettings = envelopeSettings;
            return this;
        }

        public Builder envelopeSettings(X12EnvelopeSettingsArgs envelopeSettings) {
            return envelopeSettings(Output.of(envelopeSettings));
        }

        public Builder framingSettings(Output<X12FramingSettingsArgs> framingSettings) {
            $.framingSettings = framingSettings;
            return this;
        }

        public Builder framingSettings(X12FramingSettingsArgs framingSettings) {
            return framingSettings(Output.of(framingSettings));
        }

        public Builder messageFilter(Output<X12MessageFilterArgs> messageFilter) {
            $.messageFilter = messageFilter;
            return this;
        }

        public Builder messageFilter(X12MessageFilterArgs messageFilter) {
            return messageFilter(Output.of(messageFilter));
        }

        public Builder messageFilterList(@Nullable Output<List<X12MessageIdentifierArgs>> messageFilterList) {
            $.messageFilterList = messageFilterList;
            return this;
        }

        public Builder messageFilterList(List<X12MessageIdentifierArgs> messageFilterList) {
            return messageFilterList(Output.of(messageFilterList));
        }

        public Builder messageFilterList(X12MessageIdentifierArgs... messageFilterList) {
            return messageFilterList(List.of(messageFilterList));
        }

        public Builder processingSettings(Output<X12ProcessingSettingsArgs> processingSettings) {
            $.processingSettings = processingSettings;
            return this;
        }

        public Builder processingSettings(X12ProcessingSettingsArgs processingSettings) {
            return processingSettings(Output.of(processingSettings));
        }

        public Builder schemaReferences(Output<List<X12SchemaReferenceArgs>> schemaReferences) {
            $.schemaReferences = schemaReferences;
            return this;
        }

        public Builder schemaReferences(List<X12SchemaReferenceArgs> schemaReferences) {
            return schemaReferences(Output.of(schemaReferences));
        }

        public Builder schemaReferences(X12SchemaReferenceArgs... schemaReferences) {
            return schemaReferences(List.of(schemaReferences));
        }

        public Builder securitySettings(Output<X12SecuritySettingsArgs> securitySettings) {
            $.securitySettings = securitySettings;
            return this;
        }

        public Builder securitySettings(X12SecuritySettingsArgs securitySettings) {
            return securitySettings(Output.of(securitySettings));
        }

        public Builder validationOverrides(@Nullable Output<List<X12ValidationOverrideArgs>> validationOverrides) {
            $.validationOverrides = validationOverrides;
            return this;
        }

        public Builder validationOverrides(List<X12ValidationOverrideArgs> validationOverrides) {
            return validationOverrides(Output.of(validationOverrides));
        }

        public Builder validationOverrides(X12ValidationOverrideArgs... validationOverrides) {
            return validationOverrides(List.of(validationOverrides));
        }

        public Builder validationSettings(Output<X12ValidationSettingsArgs> validationSettings) {
            $.validationSettings = validationSettings;
            return this;
        }

        public Builder validationSettings(X12ValidationSettingsArgs validationSettings) {
            return validationSettings(Output.of(validationSettings));
        }

        public Builder x12DelimiterOverrides(@Nullable Output<List<X12DelimiterOverridesArgs>> x12DelimiterOverrides) {
            $.x12DelimiterOverrides = x12DelimiterOverrides;
            return this;
        }

        public Builder x12DelimiterOverrides(List<X12DelimiterOverridesArgs> x12DelimiterOverrides) {
            return x12DelimiterOverrides(Output.of(x12DelimiterOverrides));
        }

        public Builder x12DelimiterOverrides(X12DelimiterOverridesArgs... x12DelimiterOverrides) {
            return x12DelimiterOverrides(List.of(x12DelimiterOverrides));
        }

        public X12ProtocolSettingsArgs build() {
            $.acknowledgementSettings = Objects.requireNonNull($.acknowledgementSettings, "expected parameter 'acknowledgementSettings' to be non-null");
            $.envelopeSettings = Objects.requireNonNull($.envelopeSettings, "expected parameter 'envelopeSettings' to be non-null");
            $.framingSettings = Objects.requireNonNull($.framingSettings, "expected parameter 'framingSettings' to be non-null");
            $.messageFilter = Objects.requireNonNull($.messageFilter, "expected parameter 'messageFilter' to be non-null");
            $.processingSettings = Objects.requireNonNull($.processingSettings, "expected parameter 'processingSettings' to be non-null");
            $.schemaReferences = Objects.requireNonNull($.schemaReferences, "expected parameter 'schemaReferences' to be non-null");
            $.securitySettings = Objects.requireNonNull($.securitySettings, "expected parameter 'securitySettings' to be non-null");
            $.validationSettings = Objects.requireNonNull($.validationSettings, "expected parameter 'validationSettings' to be non-null");
            return $;
        }
    }

}
