// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.enums.AccessPolicyRsaAlgo;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Required validation properties for tokens generated with RSA algorithm.
 * 
 */
public final class RsaTokenKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RsaTokenKeyArgs Empty = new RsaTokenKeyArgs();

    /**
     * RSA algorithm to be used: RS256, RS384 or RS512.
     * 
     */
    @Import(name="alg", required=true)
    private Output<Either<String,AccessPolicyRsaAlgo>> alg;

    public Output<Either<String,AccessPolicyRsaAlgo>> alg() {
        return this.alg;
    }

    /**
     * RSA public key exponent.
     * 
     */
    @Import(name="e", required=true)
    private Output<String> e;

    public Output<String> e() {
        return this.e;
    }

    /**
     * JWT token key id. Validation keys are looked up based on the key id present on the JWT token header.
     * 
     */
    @Import(name="kid", required=true)
    private Output<String> kid;

    public Output<String> kid() {
        return this.kid;
    }

    /**
     * RSA public key modulus.
     * 
     */
    @Import(name="n", required=true)
    private Output<String> n;

    public Output<String> n() {
        return this.n;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.RsaTokenKey&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private RsaTokenKeyArgs() {}

    private RsaTokenKeyArgs(RsaTokenKeyArgs $) {
        this.alg = $.alg;
        this.e = $.e;
        this.kid = $.kid;
        this.n = $.n;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RsaTokenKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RsaTokenKeyArgs $;

        public Builder() {
            $ = new RsaTokenKeyArgs();
        }

        public Builder(RsaTokenKeyArgs defaults) {
            $ = new RsaTokenKeyArgs(Objects.requireNonNull(defaults));
        }

        public Builder alg(Output<Either<String,AccessPolicyRsaAlgo>> alg) {
            $.alg = alg;
            return this;
        }

        public Builder alg(Either<String,AccessPolicyRsaAlgo> alg) {
            return alg(Output.of(alg));
        }

        public Builder alg(String alg) {
            return alg(Either.ofLeft(alg));
        }

        public Builder alg(AccessPolicyRsaAlgo alg) {
            return alg(Either.ofRight(alg));
        }

        public Builder e(Output<String> e) {
            $.e = e;
            return this;
        }

        public Builder e(String e) {
            return e(Output.of(e));
        }

        public Builder kid(Output<String> kid) {
            $.kid = kid;
            return this;
        }

        public Builder kid(String kid) {
            return kid(Output.of(kid));
        }

        public Builder n(Output<String> n) {
            $.n = n;
            return this;
        }

        public Builder n(String n) {
            return n(Output.of(n));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RsaTokenKeyArgs build() {
            $.alg = Objects.requireNonNull($.alg, "expected parameter 'alg' to be non-null");
            $.e = Objects.requireNonNull($.e, "expected parameter 'e' to be non-null");
            $.kid = Objects.requireNonNull($.kid, "expected parameter 'kid' to be non-null");
            $.n = Objects.requireNonNull($.n, "expected parameter 'n' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
