// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid;

import com.pulumi.azurenative.eventgrid.inputs.EventChannelDestinationArgs;
import com.pulumi.azurenative.eventgrid.inputs.EventChannelFilterArgs;
import com.pulumi.azurenative.eventgrid.inputs.EventChannelSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventChannelArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventChannelArgs Empty = new EventChannelArgs();

    /**
     * Represents the destination of an event channel.
     * 
     */
    @Import(name="destination")
    private @Nullable Output<EventChannelDestinationArgs> destination;

    /**
     * @return Represents the destination of an event channel.
     * 
     */
    public Optional<Output<EventChannelDestinationArgs>> destination() {
        return Optional.ofNullable(this.destination);
    }

    /**
     * Name of the event channel.
     * 
     */
    @Import(name="eventChannelName")
    private @Nullable Output<String> eventChannelName;

    /**
     * @return Name of the event channel.
     * 
     */
    public Optional<Output<String>> eventChannelName() {
        return Optional.ofNullable(this.eventChannelName);
    }

    /**
     * Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
     * the event channel and corresponding partner topic are deleted.
     * 
     */
    @Import(name="expirationTimeIfNotActivatedUtc")
    private @Nullable Output<String> expirationTimeIfNotActivatedUtc;

    /**
     * @return Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
     * the event channel and corresponding partner topic are deleted.
     * 
     */
    public Optional<Output<String>> expirationTimeIfNotActivatedUtc() {
        return Optional.ofNullable(this.expirationTimeIfNotActivatedUtc);
    }

    /**
     * Information about the filter for the event channel.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<EventChannelFilterArgs> filter;

    /**
     * @return Information about the filter for the event channel.
     * 
     */
    public Optional<Output<EventChannelFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Name of the partner namespace.
     * 
     */
    @Import(name="partnerNamespaceName", required=true)
    private Output<String> partnerNamespaceName;

    /**
     * @return Name of the partner namespace.
     * 
     */
    public Output<String> partnerNamespaceName() {
        return this.partnerNamespaceName;
    }

    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     * 
     */
    @Import(name="partnerTopicFriendlyDescription")
    private @Nullable Output<String> partnerTopicFriendlyDescription;

    /**
     * @return Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     * 
     */
    public Optional<Output<String>> partnerTopicFriendlyDescription() {
        return Optional.ofNullable(this.partnerTopicFriendlyDescription);
    }

    /**
     * The name of the resource group within the user&#39;s subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the user&#39;s subscription.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Source of the event channel. This represents a unique resource in the partner&#39;s resource model.
     * 
     */
    @Import(name="source")
    private @Nullable Output<EventChannelSourceArgs> source;

    /**
     * @return Source of the event channel. This represents a unique resource in the partner&#39;s resource model.
     * 
     */
    public Optional<Output<EventChannelSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    private EventChannelArgs() {}

    private EventChannelArgs(EventChannelArgs $) {
        this.destination = $.destination;
        this.eventChannelName = $.eventChannelName;
        this.expirationTimeIfNotActivatedUtc = $.expirationTimeIfNotActivatedUtc;
        this.filter = $.filter;
        this.partnerNamespaceName = $.partnerNamespaceName;
        this.partnerTopicFriendlyDescription = $.partnerTopicFriendlyDescription;
        this.resourceGroupName = $.resourceGroupName;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventChannelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventChannelArgs $;

        public Builder() {
            $ = new EventChannelArgs();
        }

        public Builder(EventChannelArgs defaults) {
            $ = new EventChannelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destination Represents the destination of an event channel.
         * 
         * @return builder
         * 
         */
        public Builder destination(@Nullable Output<EventChannelDestinationArgs> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination Represents the destination of an event channel.
         * 
         * @return builder
         * 
         */
        public Builder destination(EventChannelDestinationArgs destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param eventChannelName Name of the event channel.
         * 
         * @return builder
         * 
         */
        public Builder eventChannelName(@Nullable Output<String> eventChannelName) {
            $.eventChannelName = eventChannelName;
            return this;
        }

        /**
         * @param eventChannelName Name of the event channel.
         * 
         * @return builder
         * 
         */
        public Builder eventChannelName(String eventChannelName) {
            return eventChannelName(Output.of(eventChannelName));
        }

        /**
         * @param expirationTimeIfNotActivatedUtc Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
         * the event channel and corresponding partner topic are deleted.
         * 
         * @return builder
         * 
         */
        public Builder expirationTimeIfNotActivatedUtc(@Nullable Output<String> expirationTimeIfNotActivatedUtc) {
            $.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
            return this;
        }

        /**
         * @param expirationTimeIfNotActivatedUtc Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
         * the event channel and corresponding partner topic are deleted.
         * 
         * @return builder
         * 
         */
        public Builder expirationTimeIfNotActivatedUtc(String expirationTimeIfNotActivatedUtc) {
            return expirationTimeIfNotActivatedUtc(Output.of(expirationTimeIfNotActivatedUtc));
        }

        /**
         * @param filter Information about the filter for the event channel.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<EventChannelFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Information about the filter for the event channel.
         * 
         * @return builder
         * 
         */
        public Builder filter(EventChannelFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param partnerNamespaceName Name of the partner namespace.
         * 
         * @return builder
         * 
         */
        public Builder partnerNamespaceName(Output<String> partnerNamespaceName) {
            $.partnerNamespaceName = partnerNamespaceName;
            return this;
        }

        /**
         * @param partnerNamespaceName Name of the partner namespace.
         * 
         * @return builder
         * 
         */
        public Builder partnerNamespaceName(String partnerNamespaceName) {
            return partnerNamespaceName(Output.of(partnerNamespaceName));
        }

        /**
         * @param partnerTopicFriendlyDescription Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
         * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
         * 
         * @return builder
         * 
         */
        public Builder partnerTopicFriendlyDescription(@Nullable Output<String> partnerTopicFriendlyDescription) {
            $.partnerTopicFriendlyDescription = partnerTopicFriendlyDescription;
            return this;
        }

        /**
         * @param partnerTopicFriendlyDescription Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
         * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
         * 
         * @return builder
         * 
         */
        public Builder partnerTopicFriendlyDescription(String partnerTopicFriendlyDescription) {
            return partnerTopicFriendlyDescription(Output.of(partnerTopicFriendlyDescription));
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param source Source of the event channel. This represents a unique resource in the partner&#39;s resource model.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<EventChannelSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Source of the event channel. This represents a unique resource in the partner&#39;s resource model.
         * 
         * @return builder
         * 
         */
        public Builder source(EventChannelSourceArgs source) {
            return source(Output.of(source));
        }

        public EventChannelArgs build() {
            $.partnerNamespaceName = Objects.requireNonNull($.partnerNamespaceName, "expected parameter 'partnerNamespaceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
