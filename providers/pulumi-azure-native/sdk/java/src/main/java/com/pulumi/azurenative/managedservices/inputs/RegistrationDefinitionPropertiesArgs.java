// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managedservices.inputs;

import com.pulumi.azurenative.managedservices.inputs.AuthorizationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of a registration definition.
 * 
 */
public final class RegistrationDefinitionPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistrationDefinitionPropertiesArgs Empty = new RegistrationDefinitionPropertiesArgs();

    /**
     * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
     * 
     */
    @Import(name="authorizations", required=true)
    private Output<List<AuthorizationArgs>> authorizations;

    /**
     * @return Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
     * 
     */
    public Output<List<AuthorizationArgs>> authorizations() {
        return this.authorizations;
    }

    /**
     * Description of the registration definition.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the registration definition.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Id of the managedBy tenant.
     * 
     */
    @Import(name="managedByTenantId", required=true)
    private Output<String> managedByTenantId;

    /**
     * @return Id of the managedBy tenant.
     * 
     */
    public Output<String> managedByTenantId() {
        return this.managedByTenantId;
    }

    /**
     * Name of the registration definition.
     * 
     */
    @Import(name="registrationDefinitionName")
    private @Nullable Output<String> registrationDefinitionName;

    /**
     * @return Name of the registration definition.
     * 
     */
    public Optional<Output<String>> registrationDefinitionName() {
        return Optional.ofNullable(this.registrationDefinitionName);
    }

    private RegistrationDefinitionPropertiesArgs() {}

    private RegistrationDefinitionPropertiesArgs(RegistrationDefinitionPropertiesArgs $) {
        this.authorizations = $.authorizations;
        this.description = $.description;
        this.managedByTenantId = $.managedByTenantId;
        this.registrationDefinitionName = $.registrationDefinitionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationDefinitionPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationDefinitionPropertiesArgs $;

        public Builder() {
            $ = new RegistrationDefinitionPropertiesArgs();
        }

        public Builder(RegistrationDefinitionPropertiesArgs defaults) {
            $ = new RegistrationDefinitionPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizations Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
         * 
         * @return builder
         * 
         */
        public Builder authorizations(Output<List<AuthorizationArgs>> authorizations) {
            $.authorizations = authorizations;
            return this;
        }

        /**
         * @param authorizations Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
         * 
         * @return builder
         * 
         */
        public Builder authorizations(List<AuthorizationArgs> authorizations) {
            return authorizations(Output.of(authorizations));
        }

        /**
         * @param authorizations Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
         * 
         * @return builder
         * 
         */
        public Builder authorizations(AuthorizationArgs... authorizations) {
            return authorizations(List.of(authorizations));
        }

        /**
         * @param description Description of the registration definition.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the registration definition.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param managedByTenantId Id of the managedBy tenant.
         * 
         * @return builder
         * 
         */
        public Builder managedByTenantId(Output<String> managedByTenantId) {
            $.managedByTenantId = managedByTenantId;
            return this;
        }

        /**
         * @param managedByTenantId Id of the managedBy tenant.
         * 
         * @return builder
         * 
         */
        public Builder managedByTenantId(String managedByTenantId) {
            return managedByTenantId(Output.of(managedByTenantId));
        }

        /**
         * @param registrationDefinitionName Name of the registration definition.
         * 
         * @return builder
         * 
         */
        public Builder registrationDefinitionName(@Nullable Output<String> registrationDefinitionName) {
            $.registrationDefinitionName = registrationDefinitionName;
            return this;
        }

        /**
         * @param registrationDefinitionName Name of the registration definition.
         * 
         * @return builder
         * 
         */
        public Builder registrationDefinitionName(String registrationDefinitionName) {
            return registrationDefinitionName(Output.of(registrationDefinitionName));
        }

        public RegistrationDefinitionPropertiesArgs build() {
            $.authorizations = Objects.requireNonNull($.authorizations, "expected parameter 'authorizations' to be non-null");
            $.managedByTenantId = Objects.requireNonNull($.managedByTenantId, "expected parameter 'managedByTenantId' to be non-null");
            return $;
        }
    }

}
