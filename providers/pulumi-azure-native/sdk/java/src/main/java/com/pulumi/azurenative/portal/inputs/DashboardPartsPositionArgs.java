// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.portal.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The dashboard&#39;s part position.
 * 
 */
public final class DashboardPartsPositionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardPartsPositionArgs Empty = new DashboardPartsPositionArgs();

    /**
     * The dashboard&#39;s part column span.
     * 
     */
    @Import(name="colSpan", required=true)
    private Output<Integer> colSpan;

    public Output<Integer> colSpan() {
        return this.colSpan;
    }

    /**
     * The dashboard part&#39;s metadata.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,Object>> metadata;

    public Optional<Output<Map<String,Object>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The dashboard&#39;s part row span.
     * 
     */
    @Import(name="rowSpan", required=true)
    private Output<Integer> rowSpan;

    public Output<Integer> rowSpan() {
        return this.rowSpan;
    }

    /**
     * The dashboard&#39;s part x coordinate.
     * 
     */
    @Import(name="x", required=true)
    private Output<Integer> x;

    public Output<Integer> x() {
        return this.x;
    }

    /**
     * The dashboard&#39;s part y coordinate.
     * 
     */
    @Import(name="y", required=true)
    private Output<Integer> y;

    public Output<Integer> y() {
        return this.y;
    }

    private DashboardPartsPositionArgs() {}

    private DashboardPartsPositionArgs(DashboardPartsPositionArgs $) {
        this.colSpan = $.colSpan;
        this.metadata = $.metadata;
        this.rowSpan = $.rowSpan;
        this.x = $.x;
        this.y = $.y;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardPartsPositionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardPartsPositionArgs $;

        public Builder() {
            $ = new DashboardPartsPositionArgs();
        }

        public Builder(DashboardPartsPositionArgs defaults) {
            $ = new DashboardPartsPositionArgs(Objects.requireNonNull(defaults));
        }

        public Builder colSpan(Output<Integer> colSpan) {
            $.colSpan = colSpan;
            return this;
        }

        public Builder colSpan(Integer colSpan) {
            return colSpan(Output.of(colSpan));
        }

        public Builder metadata(@Nullable Output<Map<String,Object>> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String,Object> metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder rowSpan(Output<Integer> rowSpan) {
            $.rowSpan = rowSpan;
            return this;
        }

        public Builder rowSpan(Integer rowSpan) {
            return rowSpan(Output.of(rowSpan));
        }

        public Builder x(Output<Integer> x) {
            $.x = x;
            return this;
        }

        public Builder x(Integer x) {
            return x(Output.of(x));
        }

        public Builder y(Output<Integer> y) {
            $.y = y;
            return this;
        }

        public Builder y(Integer y) {
            return y(Output.of(y));
        }

        public DashboardPartsPositionArgs build() {
            $.colSpan = Objects.requireNonNull($.colSpan, "expected parameter 'colSpan' to be non-null");
            $.rowSpan = Objects.requireNonNull($.rowSpan, "expected parameter 'rowSpan' to be non-null");
            $.x = Objects.requireNonNull($.x, "expected parameter 'x' to be non-null");
            $.y = Objects.requireNonNull($.y, "expected parameter 'y' to be non-null");
            return $;
        }
    }

}
