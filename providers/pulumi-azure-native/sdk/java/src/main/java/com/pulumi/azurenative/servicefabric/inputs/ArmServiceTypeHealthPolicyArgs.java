// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents the health policy used to evaluate the health of services belonging to a service type.
 * 
 */
public final class ArmServiceTypeHealthPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ArmServiceTypeHealthPolicyArgs Empty = new ArmServiceTypeHealthPolicyArgs();

    /**
     * The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
     * 
     */
    @Import(name="maxPercentUnhealthyPartitionsPerService")
    private @Nullable Output<Integer> maxPercentUnhealthyPartitionsPerService;

    /**
     * @return The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
     * 
     */
    public Optional<Output<Integer>> maxPercentUnhealthyPartitionsPerService() {
        return Optional.ofNullable(this.maxPercentUnhealthyPartitionsPerService);
    }

    /**
     * The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
     * 
     */
    @Import(name="maxPercentUnhealthyReplicasPerPartition")
    private @Nullable Output<Integer> maxPercentUnhealthyReplicasPerPartition;

    /**
     * @return The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
     * 
     */
    public Optional<Output<Integer>> maxPercentUnhealthyReplicasPerPartition() {
        return Optional.ofNullable(this.maxPercentUnhealthyReplicasPerPartition);
    }

    /**
     * The maximum percentage of services allowed to be unhealthy before your application is considered in error.
     * 
     */
    @Import(name="maxPercentUnhealthyServices")
    private @Nullable Output<Integer> maxPercentUnhealthyServices;

    /**
     * @return The maximum percentage of services allowed to be unhealthy before your application is considered in error.
     * 
     */
    public Optional<Output<Integer>> maxPercentUnhealthyServices() {
        return Optional.ofNullable(this.maxPercentUnhealthyServices);
    }

    private ArmServiceTypeHealthPolicyArgs() {}

    private ArmServiceTypeHealthPolicyArgs(ArmServiceTypeHealthPolicyArgs $) {
        this.maxPercentUnhealthyPartitionsPerService = $.maxPercentUnhealthyPartitionsPerService;
        this.maxPercentUnhealthyReplicasPerPartition = $.maxPercentUnhealthyReplicasPerPartition;
        this.maxPercentUnhealthyServices = $.maxPercentUnhealthyServices;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ArmServiceTypeHealthPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ArmServiceTypeHealthPolicyArgs $;

        public Builder() {
            $ = new ArmServiceTypeHealthPolicyArgs();
        }

        public Builder(ArmServiceTypeHealthPolicyArgs defaults) {
            $ = new ArmServiceTypeHealthPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxPercentUnhealthyPartitionsPerService The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
         * 
         * @return builder
         * 
         */
        public Builder maxPercentUnhealthyPartitionsPerService(@Nullable Output<Integer> maxPercentUnhealthyPartitionsPerService) {
            $.maxPercentUnhealthyPartitionsPerService = maxPercentUnhealthyPartitionsPerService;
            return this;
        }

        /**
         * @param maxPercentUnhealthyPartitionsPerService The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
         * 
         * @return builder
         * 
         */
        public Builder maxPercentUnhealthyPartitionsPerService(Integer maxPercentUnhealthyPartitionsPerService) {
            return maxPercentUnhealthyPartitionsPerService(Output.of(maxPercentUnhealthyPartitionsPerService));
        }

        /**
         * @param maxPercentUnhealthyReplicasPerPartition The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
         * 
         * @return builder
         * 
         */
        public Builder maxPercentUnhealthyReplicasPerPartition(@Nullable Output<Integer> maxPercentUnhealthyReplicasPerPartition) {
            $.maxPercentUnhealthyReplicasPerPartition = maxPercentUnhealthyReplicasPerPartition;
            return this;
        }

        /**
         * @param maxPercentUnhealthyReplicasPerPartition The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
         * 
         * @return builder
         * 
         */
        public Builder maxPercentUnhealthyReplicasPerPartition(Integer maxPercentUnhealthyReplicasPerPartition) {
            return maxPercentUnhealthyReplicasPerPartition(Output.of(maxPercentUnhealthyReplicasPerPartition));
        }

        /**
         * @param maxPercentUnhealthyServices The maximum percentage of services allowed to be unhealthy before your application is considered in error.
         * 
         * @return builder
         * 
         */
        public Builder maxPercentUnhealthyServices(@Nullable Output<Integer> maxPercentUnhealthyServices) {
            $.maxPercentUnhealthyServices = maxPercentUnhealthyServices;
            return this;
        }

        /**
         * @param maxPercentUnhealthyServices The maximum percentage of services allowed to be unhealthy before your application is considered in error.
         * 
         * @return builder
         * 
         */
        public Builder maxPercentUnhealthyServices(Integer maxPercentUnhealthyServices) {
            return maxPercentUnhealthyServices(Output.of(maxPercentUnhealthyServices));
        }

        public ArmServiceTypeHealthPolicyArgs build() {
            $.maxPercentUnhealthyPartitionsPerService = Codegen.integerProp("maxPercentUnhealthyPartitionsPerService").output().arg($.maxPercentUnhealthyPartitionsPerService).def(0).getNullable();
            $.maxPercentUnhealthyReplicasPerPartition = Codegen.integerProp("maxPercentUnhealthyReplicasPerPartition").output().arg($.maxPercentUnhealthyReplicasPerPartition).def(0).getNullable();
            $.maxPercentUnhealthyServices = Codegen.integerProp("maxPercentUnhealthyServices").output().arg($.maxPercentUnhealthyServices).def(0).getNullable();
            return $;
        }
    }

}
