// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The execution options of a job step.
 * 
 */
public final class JobStepExecutionOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobStepExecutionOptionsResponse Empty = new JobStepExecutionOptionsResponse();

    /**
     * Initial delay between retries for job step execution.
     * 
     */
    @Import(name="initialRetryIntervalSeconds")
    private @Nullable Integer initialRetryIntervalSeconds;

    public Optional<Integer> initialRetryIntervalSeconds() {
        return Optional.ofNullable(this.initialRetryIntervalSeconds);
    }

    /**
     * The maximum amount of time to wait between retries for job step execution.
     * 
     */
    @Import(name="maximumRetryIntervalSeconds")
    private @Nullable Integer maximumRetryIntervalSeconds;

    public Optional<Integer> maximumRetryIntervalSeconds() {
        return Optional.ofNullable(this.maximumRetryIntervalSeconds);
    }

    /**
     * Maximum number of times the job step will be reattempted if the first attempt fails.
     * 
     */
    @Import(name="retryAttempts")
    private @Nullable Integer retryAttempts;

    public Optional<Integer> retryAttempts() {
        return Optional.ofNullable(this.retryAttempts);
    }

    /**
     * The backoff multiplier for the time between retries.
     * 
     */
    @Import(name="retryIntervalBackoffMultiplier")
    private @Nullable Double retryIntervalBackoffMultiplier;

    public Optional<Double> retryIntervalBackoffMultiplier() {
        return Optional.ofNullable(this.retryIntervalBackoffMultiplier);
    }

    /**
     * Execution timeout for the job step.
     * 
     */
    @Import(name="timeoutSeconds")
    private @Nullable Integer timeoutSeconds;

    public Optional<Integer> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    private JobStepExecutionOptionsResponse() {}

    private JobStepExecutionOptionsResponse(JobStepExecutionOptionsResponse $) {
        this.initialRetryIntervalSeconds = $.initialRetryIntervalSeconds;
        this.maximumRetryIntervalSeconds = $.maximumRetryIntervalSeconds;
        this.retryAttempts = $.retryAttempts;
        this.retryIntervalBackoffMultiplier = $.retryIntervalBackoffMultiplier;
        this.timeoutSeconds = $.timeoutSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobStepExecutionOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobStepExecutionOptionsResponse $;

        public Builder() {
            $ = new JobStepExecutionOptionsResponse();
        }

        public Builder(JobStepExecutionOptionsResponse defaults) {
            $ = new JobStepExecutionOptionsResponse(Objects.requireNonNull(defaults));
        }

        public Builder initialRetryIntervalSeconds(@Nullable Integer initialRetryIntervalSeconds) {
            $.initialRetryIntervalSeconds = initialRetryIntervalSeconds;
            return this;
        }

        public Builder maximumRetryIntervalSeconds(@Nullable Integer maximumRetryIntervalSeconds) {
            $.maximumRetryIntervalSeconds = maximumRetryIntervalSeconds;
            return this;
        }

        public Builder retryAttempts(@Nullable Integer retryAttempts) {
            $.retryAttempts = retryAttempts;
            return this;
        }

        public Builder retryIntervalBackoffMultiplier(@Nullable Double retryIntervalBackoffMultiplier) {
            $.retryIntervalBackoffMultiplier = retryIntervalBackoffMultiplier;
            return this;
        }

        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public JobStepExecutionOptionsResponse build() {
            $.initialRetryIntervalSeconds = Codegen.integerProp("initialRetryIntervalSeconds").arg($.initialRetryIntervalSeconds).def(1).getNullable();
            $.maximumRetryIntervalSeconds = Codegen.integerProp("maximumRetryIntervalSeconds").arg($.maximumRetryIntervalSeconds).def(120).getNullable();
            $.retryAttempts = Codegen.integerProp("retryAttempts").arg($.retryAttempts).def(10).getNullable();
            $.retryIntervalBackoffMultiplier = Codegen.doubleProp("retryIntervalBackoffMultiplier").arg($.retryIntervalBackoffMultiplier).def(2e+00).getNullable();
            $.timeoutSeconds = Codegen.integerProp("timeoutSeconds").arg($.timeoutSeconds).def(43200).getNullable();
            return $;
        }
    }

}
