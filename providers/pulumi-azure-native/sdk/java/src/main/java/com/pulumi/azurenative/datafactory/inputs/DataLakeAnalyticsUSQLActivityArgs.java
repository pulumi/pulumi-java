// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyArgs;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Data Lake Analytics U-SQL activity.
 * 
 */
public final class DataLakeAnalyticsUSQLActivityArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataLakeAnalyticsUSQLActivityArgs Empty = new DataLakeAnalyticsUSQLActivityArgs();

    /**
     * Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="compilationMode")
    private @Nullable Output<Object> compilationMode;

    /**
     * @return Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> compilationMode() {
        return Optional.ofNullable(this.compilationMode);
    }

    /**
     * The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
     * 
     */
    @Import(name="degreeOfParallelism")
    private @Nullable Output<Object> degreeOfParallelism;

    /**
     * @return The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
     * 
     */
    public Optional<Output<Object>> degreeOfParallelism() {
        return Optional.ofNullable(this.degreeOfParallelism);
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    /**
     * @return Activity depends on condition.
     * 
     */
    public Optional<Output<List<ActivityDependencyArgs>>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Activity description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;

    /**
     * @return Linked service reference.
     * 
     */
    public Optional<Output<LinkedServiceReferenceArgs>> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Activity name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Parameters for U-SQL job request.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,Object>> parameters;

    /**
     * @return Parameters for U-SQL job request.
     * 
     */
    public Optional<Output<Map<String,Object>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<ActivityPolicyArgs> policy;

    /**
     * @return Activity policy.
     * 
     */
    public Optional<Output<ActivityPolicyArgs>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Object> priority;

    /**
     * @return Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
     * 
     */
    public Optional<Output<Object>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="runtimeVersion")
    private @Nullable Output<Object> runtimeVersion;

    /**
     * @return Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    /**
     * Script linked service reference.
     * 
     */
    @Import(name="scriptLinkedService", required=true)
    private Output<LinkedServiceReferenceArgs> scriptLinkedService;

    /**
     * @return Script linked service reference.
     * 
     */
    public Output<LinkedServiceReferenceArgs> scriptLinkedService() {
        return this.scriptLinkedService;
    }

    /**
     * Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="scriptPath", required=true)
    private Output<Object> scriptPath;

    /**
     * @return Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
     * 
     */
    public Output<Object> scriptPath() {
        return this.scriptPath;
    }

    /**
     * Type of activity.
     * Expected value is &#39;DataLakeAnalyticsU-SQL&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of activity.
     * Expected value is &#39;DataLakeAnalyticsU-SQL&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable Output<List<UserPropertyArgs>> userProperties;

    /**
     * @return Activity user properties.
     * 
     */
    public Optional<Output<List<UserPropertyArgs>>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private DataLakeAnalyticsUSQLActivityArgs() {}

    private DataLakeAnalyticsUSQLActivityArgs(DataLakeAnalyticsUSQLActivityArgs $) {
        this.compilationMode = $.compilationMode;
        this.degreeOfParallelism = $.degreeOfParallelism;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.linkedServiceName = $.linkedServiceName;
        this.name = $.name;
        this.parameters = $.parameters;
        this.policy = $.policy;
        this.priority = $.priority;
        this.runtimeVersion = $.runtimeVersion;
        this.scriptLinkedService = $.scriptLinkedService;
        this.scriptPath = $.scriptPath;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataLakeAnalyticsUSQLActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataLakeAnalyticsUSQLActivityArgs $;

        public Builder() {
            $ = new DataLakeAnalyticsUSQLActivityArgs();
        }

        public Builder(DataLakeAnalyticsUSQLActivityArgs defaults) {
            $ = new DataLakeAnalyticsUSQLActivityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compilationMode Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder compilationMode(@Nullable Output<Object> compilationMode) {
            $.compilationMode = compilationMode;
            return this;
        }

        /**
         * @param compilationMode Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder compilationMode(Object compilationMode) {
            return compilationMode(Output.of(compilationMode));
        }

        /**
         * @param degreeOfParallelism The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
         * 
         * @return builder
         * 
         */
        public Builder degreeOfParallelism(@Nullable Output<Object> degreeOfParallelism) {
            $.degreeOfParallelism = degreeOfParallelism;
            return this;
        }

        /**
         * @param degreeOfParallelism The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
         * 
         * @return builder
         * 
         */
        public Builder degreeOfParallelism(Object degreeOfParallelism) {
            return degreeOfParallelism(Output.of(degreeOfParallelism));
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(List<ActivityDependencyArgs> dependsOn) {
            return dependsOn(Output.of(dependsOn));
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(ActivityDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        /**
         * @param description Activity description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Activity description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param linkedServiceName Linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedServiceName(@Nullable Output<LinkedServiceReferenceArgs> linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        /**
         * @param linkedServiceName Linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedServiceName(LinkedServiceReferenceArgs linkedServiceName) {
            return linkedServiceName(Output.of(linkedServiceName));
        }

        /**
         * @param name Activity name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Activity name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parameters Parameters for U-SQL job request.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,Object>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Parameters for U-SQL job request.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,Object> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param policy Activity policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<ActivityPolicyArgs> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy Activity policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(ActivityPolicyArgs policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param priority Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Object> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
         * 
         * @return builder
         * 
         */
        public Builder priority(Object priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param runtimeVersion Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(@Nullable Output<Object> runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        /**
         * @param runtimeVersion Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(Object runtimeVersion) {
            return runtimeVersion(Output.of(runtimeVersion));
        }

        /**
         * @param scriptLinkedService Script linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder scriptLinkedService(Output<LinkedServiceReferenceArgs> scriptLinkedService) {
            $.scriptLinkedService = scriptLinkedService;
            return this;
        }

        /**
         * @param scriptLinkedService Script linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder scriptLinkedService(LinkedServiceReferenceArgs scriptLinkedService) {
            return scriptLinkedService(Output.of(scriptLinkedService));
        }

        /**
         * @param scriptPath Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder scriptPath(Output<Object> scriptPath) {
            $.scriptPath = scriptPath;
            return this;
        }

        /**
         * @param scriptPath Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder scriptPath(Object scriptPath) {
            return scriptPath(Output.of(scriptPath));
        }

        /**
         * @param type Type of activity.
         * Expected value is &#39;DataLakeAnalyticsU-SQL&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of activity.
         * Expected value is &#39;DataLakeAnalyticsU-SQL&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(List<UserPropertyArgs> userProperties) {
            return userProperties(Output.of(userProperties));
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(UserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public DataLakeAnalyticsUSQLActivityArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.scriptLinkedService = Objects.requireNonNull($.scriptLinkedService, "expected parameter 'scriptLinkedService' to be non-null");
            $.scriptPath = Objects.requireNonNull($.scriptPath, "expected parameter 'scriptPath' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
