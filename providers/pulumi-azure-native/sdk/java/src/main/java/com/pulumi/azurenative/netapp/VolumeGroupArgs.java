// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp;

import com.pulumi.azurenative.netapp.inputs.VolumeGroupMetaDataArgs;
import com.pulumi.azurenative.netapp.inputs.VolumeGroupVolumePropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeGroupArgs Empty = new VolumeGroupArgs();

    /**
     * The name of the NetApp account
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The name of the NetApp account
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Volume group details
     * 
     */
    @Import(name="groupMetaData")
    private @Nullable Output<VolumeGroupMetaDataArgs> groupMetaData;

    /**
     * @return Volume group details
     * 
     */
    public Optional<Output<VolumeGroupMetaDataArgs>> groupMetaData() {
        return Optional.ofNullable(this.groupMetaData);
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the volumeGroup
     * 
     */
    @Import(name="volumeGroupName")
    private @Nullable Output<String> volumeGroupName;

    /**
     * @return The name of the volumeGroup
     * 
     */
    public Optional<Output<String>> volumeGroupName() {
        return Optional.ofNullable(this.volumeGroupName);
    }

    /**
     * List of volumes from group
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<VolumeGroupVolumePropertiesArgs>> volumes;

    /**
     * @return List of volumes from group
     * 
     */
    public Optional<Output<List<VolumeGroupVolumePropertiesArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private VolumeGroupArgs() {}

    private VolumeGroupArgs(VolumeGroupArgs $) {
        this.accountName = $.accountName;
        this.groupMetaData = $.groupMetaData;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.volumeGroupName = $.volumeGroupName;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeGroupArgs $;

        public Builder() {
            $ = new VolumeGroupArgs();
        }

        public Builder(VolumeGroupArgs defaults) {
            $ = new VolumeGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the NetApp account
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the NetApp account
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param groupMetaData Volume group details
         * 
         * @return builder
         * 
         */
        public Builder groupMetaData(@Nullable Output<VolumeGroupMetaDataArgs> groupMetaData) {
            $.groupMetaData = groupMetaData;
            return this;
        }

        /**
         * @param groupMetaData Volume group details
         * 
         * @return builder
         * 
         */
        public Builder groupMetaData(VolumeGroupMetaDataArgs groupMetaData) {
            return groupMetaData(Output.of(groupMetaData));
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param volumeGroupName The name of the volumeGroup
         * 
         * @return builder
         * 
         */
        public Builder volumeGroupName(@Nullable Output<String> volumeGroupName) {
            $.volumeGroupName = volumeGroupName;
            return this;
        }

        /**
         * @param volumeGroupName The name of the volumeGroup
         * 
         * @return builder
         * 
         */
        public Builder volumeGroupName(String volumeGroupName) {
            return volumeGroupName(Output.of(volumeGroupName));
        }

        /**
         * @param volumes List of volumes from group
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<VolumeGroupVolumePropertiesArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes List of volumes from group
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<VolumeGroupVolumePropertiesArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes List of volumes from group
         * 
         * @return builder
         * 
         */
        public Builder volumes(VolumeGroupVolumePropertiesArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public VolumeGroupArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
