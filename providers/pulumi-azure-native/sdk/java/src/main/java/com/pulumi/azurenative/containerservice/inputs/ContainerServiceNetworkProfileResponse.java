// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerservice.inputs;

import com.pulumi.azurenative.containerservice.inputs.ManagedClusterLoadBalancerProfileResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Profile of network configuration.
 * 
 */
public final class ContainerServiceNetworkProfileResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContainerServiceNetworkProfileResponse Empty = new ContainerServiceNetworkProfileResponse();

    /**
     * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     * 
     */
    @Import(name="dnsServiceIP")
      private final @Nullable String dnsServiceIP;

    public Optional<String> dnsServiceIP() {
        return this.dnsServiceIP == null ? Optional.empty() : Optional.ofNullable(this.dnsServiceIP);
    }

    /**
     * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
     * 
     */
    @Import(name="dockerBridgeCidr")
      private final @Nullable String dockerBridgeCidr;

    public Optional<String> dockerBridgeCidr() {
        return this.dockerBridgeCidr == null ? Optional.empty() : Optional.ofNullable(this.dockerBridgeCidr);
    }

    /**
     * Profile of the cluster load balancer.
     * 
     */
    @Import(name="loadBalancerProfile")
      private final @Nullable ManagedClusterLoadBalancerProfileResponse loadBalancerProfile;

    public Optional<ManagedClusterLoadBalancerProfileResponse> loadBalancerProfile() {
        return this.loadBalancerProfile == null ? Optional.empty() : Optional.ofNullable(this.loadBalancerProfile);
    }

    /**
     * The load balancer sku for the managed cluster.
     * 
     */
    @Import(name="loadBalancerSku")
      private final @Nullable String loadBalancerSku;

    public Optional<String> loadBalancerSku() {
        return this.loadBalancerSku == null ? Optional.empty() : Optional.ofNullable(this.loadBalancerSku);
    }

    /**
     * Network mode used for building Kubernetes network.
     * 
     */
    @Import(name="networkMode")
      private final @Nullable String networkMode;

    public Optional<String> networkMode() {
        return this.networkMode == null ? Optional.empty() : Optional.ofNullable(this.networkMode);
    }

    /**
     * Network plugin used for building Kubernetes network.
     * 
     */
    @Import(name="networkPlugin")
      private final @Nullable String networkPlugin;

    public Optional<String> networkPlugin() {
        return this.networkPlugin == null ? Optional.empty() : Optional.ofNullable(this.networkPlugin);
    }

    /**
     * Network policy used for building Kubernetes network.
     * 
     */
    @Import(name="networkPolicy")
      private final @Nullable String networkPolicy;

    public Optional<String> networkPolicy() {
        return this.networkPolicy == null ? Optional.empty() : Optional.ofNullable(this.networkPolicy);
    }

    /**
     * The outbound (egress) routing method.
     * 
     */
    @Import(name="outboundType")
      private final @Nullable String outboundType;

    public Optional<String> outboundType() {
        return this.outboundType == null ? Optional.empty() : Optional.ofNullable(this.outboundType);
    }

    /**
     * A CIDR notation IP range from which to assign pod IPs when kubenet is used.
     * 
     */
    @Import(name="podCidr")
      private final @Nullable String podCidr;

    public Optional<String> podCidr() {
        return this.podCidr == null ? Optional.empty() : Optional.ofNullable(this.podCidr);
    }

    /**
     * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     * 
     */
    @Import(name="serviceCidr")
      private final @Nullable String serviceCidr;

    public Optional<String> serviceCidr() {
        return this.serviceCidr == null ? Optional.empty() : Optional.ofNullable(this.serviceCidr);
    }

    public ContainerServiceNetworkProfileResponse(
        @Nullable String dnsServiceIP,
        @Nullable String dockerBridgeCidr,
        @Nullable ManagedClusterLoadBalancerProfileResponse loadBalancerProfile,
        @Nullable String loadBalancerSku,
        @Nullable String networkMode,
        @Nullable String networkPlugin,
        @Nullable String networkPolicy,
        @Nullable String outboundType,
        @Nullable String podCidr,
        @Nullable String serviceCidr) {
        this.dnsServiceIP = Codegen.stringProp("dnsServiceIP").arg(dnsServiceIP).def("10.0.0.10").getNullable();
        this.dockerBridgeCidr = Codegen.stringProp("dockerBridgeCidr").arg(dockerBridgeCidr).def("172.17.0.1/16").getNullable();
        this.loadBalancerProfile = loadBalancerProfile;
        this.loadBalancerSku = loadBalancerSku;
        this.networkMode = networkMode;
        this.networkPlugin = Codegen.stringProp("networkPlugin").arg(networkPlugin).def("kubenet").getNullable();
        this.networkPolicy = networkPolicy;
        this.outboundType = Codegen.stringProp("outboundType").arg(outboundType).def("loadBalancer").getNullable();
        this.podCidr = Codegen.stringProp("podCidr").arg(podCidr).def("10.244.0.0/16").getNullable();
        this.serviceCidr = Codegen.stringProp("serviceCidr").arg(serviceCidr).def("10.0.0.0/16").getNullable();
    }

    private ContainerServiceNetworkProfileResponse() {
        this.dnsServiceIP = null;
        this.dockerBridgeCidr = null;
        this.loadBalancerProfile = null;
        this.loadBalancerSku = null;
        this.networkMode = null;
        this.networkPlugin = null;
        this.networkPolicy = null;
        this.outboundType = null;
        this.podCidr = null;
        this.serviceCidr = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerServiceNetworkProfileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String dnsServiceIP;
        private @Nullable String dockerBridgeCidr;
        private @Nullable ManagedClusterLoadBalancerProfileResponse loadBalancerProfile;
        private @Nullable String loadBalancerSku;
        private @Nullable String networkMode;
        private @Nullable String networkPlugin;
        private @Nullable String networkPolicy;
        private @Nullable String outboundType;
        private @Nullable String podCidr;
        private @Nullable String serviceCidr;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerServiceNetworkProfileResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServiceIP = defaults.dnsServiceIP;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.loadBalancerProfile = defaults.loadBalancerProfile;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.networkMode = defaults.networkMode;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.outboundType = defaults.outboundType;
    	      this.podCidr = defaults.podCidr;
    	      this.serviceCidr = defaults.serviceCidr;
        }

        public Builder dnsServiceIP(@Nullable String dnsServiceIP) {
            this.dnsServiceIP = dnsServiceIP;
            return this;
        }
        public Builder dockerBridgeCidr(@Nullable String dockerBridgeCidr) {
            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        public Builder loadBalancerProfile(@Nullable ManagedClusterLoadBalancerProfileResponse loadBalancerProfile) {
            this.loadBalancerProfile = loadBalancerProfile;
            return this;
        }
        public Builder loadBalancerSku(@Nullable String loadBalancerSku) {
            this.loadBalancerSku = loadBalancerSku;
            return this;
        }
        public Builder networkMode(@Nullable String networkMode) {
            this.networkMode = networkMode;
            return this;
        }
        public Builder networkPlugin(@Nullable String networkPlugin) {
            this.networkPlugin = networkPlugin;
            return this;
        }
        public Builder networkPolicy(@Nullable String networkPolicy) {
            this.networkPolicy = networkPolicy;
            return this;
        }
        public Builder outboundType(@Nullable String outboundType) {
            this.outboundType = outboundType;
            return this;
        }
        public Builder podCidr(@Nullable String podCidr) {
            this.podCidr = podCidr;
            return this;
        }
        public Builder serviceCidr(@Nullable String serviceCidr) {
            this.serviceCidr = serviceCidr;
            return this;
        }        public ContainerServiceNetworkProfileResponse build() {
            return new ContainerServiceNetworkProfileResponse(dnsServiceIP, dockerBridgeCidr, loadBalancerProfile, loadBalancerSku, networkMode, networkPlugin, networkPolicy, outboundType, podCidr, serviceCidr);
        }
    }
}
