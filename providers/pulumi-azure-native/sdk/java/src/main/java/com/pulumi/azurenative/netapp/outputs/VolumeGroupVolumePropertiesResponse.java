// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp.outputs;

import com.pulumi.azurenative.netapp.outputs.MountTargetPropertiesResponse;
import com.pulumi.azurenative.netapp.outputs.PlacementKeyValuePairsResponse;
import com.pulumi.azurenative.netapp.outputs.VolumePropertiesResponseDataProtection;
import com.pulumi.azurenative.netapp.outputs.VolumePropertiesResponseExportPolicy;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VolumeGroupVolumePropertiesResponse {
    /**
     * @return Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
     * 
     */
    private final @Nullable String avsDataStore;
    /**
     * @return UUID v4 or resource identifier used to identify the Backup.
     * 
     */
    private final @Nullable String backupId;
    /**
     * @return Unique Baremetal Tenant Identifier.
     * 
     */
    private final String baremetalTenantId;
    /**
     * @return Pool Resource Id used in case of creating a volume through volume group
     * 
     */
    private final @Nullable String capacityPoolResourceId;
    /**
     * @return When a volume is being restored from another volume&#39;s snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.
     * 
     */
    private final Integer cloneProgress;
    /**
     * @return Specifies whether Cool Access(tiering) is enabled for the volume.
     * 
     */
    private final @Nullable Boolean coolAccess;
    /**
     * @return Specifies the number of days after which data that is not accessed by clients will be tiered.
     * 
     */
    private final @Nullable Integer coolnessPeriod;
    /**
     * @return A unique file path for the volume. Used when creating mount targets
     * 
     */
    private final String creationToken;
    /**
     * @return DataProtection type volumes include an object containing details of the replication
     * 
     */
    private final @Nullable VolumePropertiesResponseDataProtection dataProtection;
    /**
     * @return Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
     * 
     */
    private final @Nullable Double defaultGroupQuotaInKiBs;
    /**
     * @return Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
     * 
     */
    private final @Nullable Double defaultUserQuotaInKiBs;
    /**
     * @return Flag indicating whether subvolume operations are enabled on the volume
     * 
     */
    private final @Nullable String enableSubvolumes;
    /**
     * @return Encryption Key Source. Possible values are: &#39;Microsoft.NetApp&#39;
     * 
     */
    private final @Nullable String encryptionKeySource;
    /**
     * @return Set of export policy rules
     * 
     */
    private final @Nullable VolumePropertiesResponseExportPolicy exportPolicy;
    /**
     * @return Unique FileSystem Identifier.
     * 
     */
    private final String fileSystemId;
    /**
     * @return Resource Id
     * 
     */
    private final String id;
    /**
     * @return Specifies if default quota is enabled for the volume.
     * 
     */
    private final @Nullable Boolean isDefaultQuotaEnabled;
    /**
     * @return Restoring
     * 
     */
    private final @Nullable Boolean isRestoring;
    /**
     * @return Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     * 
     */
    private final @Nullable Boolean kerberosEnabled;
    /**
     * @return Specifies whether LDAP is enabled or not for a given NFS volume.
     * 
     */
    private final @Nullable Boolean ldapEnabled;
    /**
     * @return Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB.
     * 
     */
    private final Double maximumNumberOfFiles;
    /**
     * @return List of mount targets
     * 
     */
    private final List<MountTargetPropertiesResponse> mountTargets;
    /**
     * @return Resource name
     * 
     */
    private final @Nullable String name;
    /**
     * @return Basic network, or Standard features available to the volume.
     * 
     */
    private final @Nullable String networkFeatures;
    /**
     * @return Network Sibling Set ID for the the group of volumes sharing networking resources.
     * 
     */
    private final String networkSiblingSetId;
    /**
     * @return Application specific placement rules for the particular volume
     * 
     */
    private final @Nullable List<PlacementKeyValuePairsResponse> placementRules;
    /**
     * @return Set of protocol types, default NFSv3, CIFS for SMB protocol
     * 
     */
    private final @Nullable List<String> protocolTypes;
    /**
     * @return Azure lifecycle management
     * 
     */
    private final String provisioningState;
    /**
     * @return Proximity placement group associated with the volume
     * 
     */
    private final @Nullable String proximityPlacementGroup;
    /**
     * @return The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     * 
     */
    private final @Nullable String securityStyle;
    /**
     * @return The service level of the file system
     * 
     */
    private final @Nullable String serviceLevel;
    /**
     * @return Enables continuously available share property for smb volume. Only applicable for SMB volume
     * 
     */
    private final @Nullable Boolean smbContinuouslyAvailable;
    /**
     * @return Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
     * 
     */
    private final @Nullable Boolean smbEncryption;
    /**
     * @return If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume&#39;s snapshots (default to true).
     * 
     */
    private final @Nullable Boolean snapshotDirectoryVisible;
    /**
     * @return UUID v4 or resource identifier used to identify the Snapshot.
     * 
     */
    private final @Nullable String snapshotId;
    /**
     * @return Provides storage to network proximity information for the volume.
     * 
     */
    private final String storageToNetworkProximity;
    /**
     * @return The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     * 
     */
    private final String subnetId;
    /**
     * @return T2 network information
     * 
     */
    private final String t2Network;
    /**
     * @return Resource tags
     * 
     */
    private final @Nullable Map<String,String> tags;
    private final @Nullable Double throughputMibps;
    /**
     * @return Resource type
     * 
     */
    private final String type;
    /**
     * @return UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
     * 
     */
    private final @Nullable String unixPermissions;
    /**
     * @return Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
     * 
     */
    private final Double usageThreshold;
    /**
     * @return Volume Group Name
     * 
     */
    private final String volumeGroupName;
    /**
     * @return Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
     * 
     */
    private final @Nullable String volumeSpecName;
    /**
     * @return What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
     * 
     */
    private final @Nullable String volumeType;

    @CustomType.Constructor
    private VolumeGroupVolumePropertiesResponse(
        @CustomType.Parameter("avsDataStore") @Nullable String avsDataStore,
        @CustomType.Parameter("backupId") @Nullable String backupId,
        @CustomType.Parameter("baremetalTenantId") String baremetalTenantId,
        @CustomType.Parameter("capacityPoolResourceId") @Nullable String capacityPoolResourceId,
        @CustomType.Parameter("cloneProgress") Integer cloneProgress,
        @CustomType.Parameter("coolAccess") @Nullable Boolean coolAccess,
        @CustomType.Parameter("coolnessPeriod") @Nullable Integer coolnessPeriod,
        @CustomType.Parameter("creationToken") String creationToken,
        @CustomType.Parameter("dataProtection") @Nullable VolumePropertiesResponseDataProtection dataProtection,
        @CustomType.Parameter("defaultGroupQuotaInKiBs") @Nullable Double defaultGroupQuotaInKiBs,
        @CustomType.Parameter("defaultUserQuotaInKiBs") @Nullable Double defaultUserQuotaInKiBs,
        @CustomType.Parameter("enableSubvolumes") @Nullable String enableSubvolumes,
        @CustomType.Parameter("encryptionKeySource") @Nullable String encryptionKeySource,
        @CustomType.Parameter("exportPolicy") @Nullable VolumePropertiesResponseExportPolicy exportPolicy,
        @CustomType.Parameter("fileSystemId") String fileSystemId,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isDefaultQuotaEnabled") @Nullable Boolean isDefaultQuotaEnabled,
        @CustomType.Parameter("isRestoring") @Nullable Boolean isRestoring,
        @CustomType.Parameter("kerberosEnabled") @Nullable Boolean kerberosEnabled,
        @CustomType.Parameter("ldapEnabled") @Nullable Boolean ldapEnabled,
        @CustomType.Parameter("maximumNumberOfFiles") Double maximumNumberOfFiles,
        @CustomType.Parameter("mountTargets") List<MountTargetPropertiesResponse> mountTargets,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("networkFeatures") @Nullable String networkFeatures,
        @CustomType.Parameter("networkSiblingSetId") String networkSiblingSetId,
        @CustomType.Parameter("placementRules") @Nullable List<PlacementKeyValuePairsResponse> placementRules,
        @CustomType.Parameter("protocolTypes") @Nullable List<String> protocolTypes,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("proximityPlacementGroup") @Nullable String proximityPlacementGroup,
        @CustomType.Parameter("securityStyle") @Nullable String securityStyle,
        @CustomType.Parameter("serviceLevel") @Nullable String serviceLevel,
        @CustomType.Parameter("smbContinuouslyAvailable") @Nullable Boolean smbContinuouslyAvailable,
        @CustomType.Parameter("smbEncryption") @Nullable Boolean smbEncryption,
        @CustomType.Parameter("snapshotDirectoryVisible") @Nullable Boolean snapshotDirectoryVisible,
        @CustomType.Parameter("snapshotId") @Nullable String snapshotId,
        @CustomType.Parameter("storageToNetworkProximity") String storageToNetworkProximity,
        @CustomType.Parameter("subnetId") String subnetId,
        @CustomType.Parameter("t2Network") String t2Network,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("throughputMibps") @Nullable Double throughputMibps,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("unixPermissions") @Nullable String unixPermissions,
        @CustomType.Parameter("usageThreshold") Double usageThreshold,
        @CustomType.Parameter("volumeGroupName") String volumeGroupName,
        @CustomType.Parameter("volumeSpecName") @Nullable String volumeSpecName,
        @CustomType.Parameter("volumeType") @Nullable String volumeType) {
        this.avsDataStore = avsDataStore;
        this.backupId = backupId;
        this.baremetalTenantId = baremetalTenantId;
        this.capacityPoolResourceId = capacityPoolResourceId;
        this.cloneProgress = cloneProgress;
        this.coolAccess = coolAccess;
        this.coolnessPeriod = coolnessPeriod;
        this.creationToken = creationToken;
        this.dataProtection = dataProtection;
        this.defaultGroupQuotaInKiBs = defaultGroupQuotaInKiBs;
        this.defaultUserQuotaInKiBs = defaultUserQuotaInKiBs;
        this.enableSubvolumes = enableSubvolumes;
        this.encryptionKeySource = encryptionKeySource;
        this.exportPolicy = exportPolicy;
        this.fileSystemId = fileSystemId;
        this.id = id;
        this.isDefaultQuotaEnabled = isDefaultQuotaEnabled;
        this.isRestoring = isRestoring;
        this.kerberosEnabled = kerberosEnabled;
        this.ldapEnabled = ldapEnabled;
        this.maximumNumberOfFiles = maximumNumberOfFiles;
        this.mountTargets = mountTargets;
        this.name = name;
        this.networkFeatures = networkFeatures;
        this.networkSiblingSetId = networkSiblingSetId;
        this.placementRules = placementRules;
        this.protocolTypes = protocolTypes;
        this.provisioningState = provisioningState;
        this.proximityPlacementGroup = proximityPlacementGroup;
        this.securityStyle = securityStyle;
        this.serviceLevel = serviceLevel;
        this.smbContinuouslyAvailable = smbContinuouslyAvailable;
        this.smbEncryption = smbEncryption;
        this.snapshotDirectoryVisible = snapshotDirectoryVisible;
        this.snapshotId = snapshotId;
        this.storageToNetworkProximity = storageToNetworkProximity;
        this.subnetId = subnetId;
        this.t2Network = t2Network;
        this.tags = tags;
        this.throughputMibps = throughputMibps;
        this.type = type;
        this.unixPermissions = unixPermissions;
        this.usageThreshold = usageThreshold;
        this.volumeGroupName = volumeGroupName;
        this.volumeSpecName = volumeSpecName;
        this.volumeType = volumeType;
    }

    /**
     * @return Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
     * 
     */
    public Optional<String> avsDataStore() {
        return Optional.ofNullable(this.avsDataStore);
    }
    /**
     * @return UUID v4 or resource identifier used to identify the Backup.
     * 
     */
    public Optional<String> backupId() {
        return Optional.ofNullable(this.backupId);
    }
    /**
     * @return Unique Baremetal Tenant Identifier.
     * 
     */
    public String baremetalTenantId() {
        return this.baremetalTenantId;
    }
    /**
     * @return Pool Resource Id used in case of creating a volume through volume group
     * 
     */
    public Optional<String> capacityPoolResourceId() {
        return Optional.ofNullable(this.capacityPoolResourceId);
    }
    /**
     * @return When a volume is being restored from another volume&#39;s snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.
     * 
     */
    public Integer cloneProgress() {
        return this.cloneProgress;
    }
    /**
     * @return Specifies whether Cool Access(tiering) is enabled for the volume.
     * 
     */
    public Optional<Boolean> coolAccess() {
        return Optional.ofNullable(this.coolAccess);
    }
    /**
     * @return Specifies the number of days after which data that is not accessed by clients will be tiered.
     * 
     */
    public Optional<Integer> coolnessPeriod() {
        return Optional.ofNullable(this.coolnessPeriod);
    }
    /**
     * @return A unique file path for the volume. Used when creating mount targets
     * 
     */
    public String creationToken() {
        return this.creationToken;
    }
    /**
     * @return DataProtection type volumes include an object containing details of the replication
     * 
     */
    public Optional<VolumePropertiesResponseDataProtection> dataProtection() {
        return Optional.ofNullable(this.dataProtection);
    }
    /**
     * @return Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
     * 
     */
    public Optional<Double> defaultGroupQuotaInKiBs() {
        return Optional.ofNullable(this.defaultGroupQuotaInKiBs);
    }
    /**
     * @return Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
     * 
     */
    public Optional<Double> defaultUserQuotaInKiBs() {
        return Optional.ofNullable(this.defaultUserQuotaInKiBs);
    }
    /**
     * @return Flag indicating whether subvolume operations are enabled on the volume
     * 
     */
    public Optional<String> enableSubvolumes() {
        return Optional.ofNullable(this.enableSubvolumes);
    }
    /**
     * @return Encryption Key Source. Possible values are: &#39;Microsoft.NetApp&#39;
     * 
     */
    public Optional<String> encryptionKeySource() {
        return Optional.ofNullable(this.encryptionKeySource);
    }
    /**
     * @return Set of export policy rules
     * 
     */
    public Optional<VolumePropertiesResponseExportPolicy> exportPolicy() {
        return Optional.ofNullable(this.exportPolicy);
    }
    /**
     * @return Unique FileSystem Identifier.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies if default quota is enabled for the volume.
     * 
     */
    public Optional<Boolean> isDefaultQuotaEnabled() {
        return Optional.ofNullable(this.isDefaultQuotaEnabled);
    }
    /**
     * @return Restoring
     * 
     */
    public Optional<Boolean> isRestoring() {
        return Optional.ofNullable(this.isRestoring);
    }
    /**
     * @return Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     * 
     */
    public Optional<Boolean> kerberosEnabled() {
        return Optional.ofNullable(this.kerberosEnabled);
    }
    /**
     * @return Specifies whether LDAP is enabled or not for a given NFS volume.
     * 
     */
    public Optional<Boolean> ldapEnabled() {
        return Optional.ofNullable(this.ldapEnabled);
    }
    /**
     * @return Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB.
     * 
     */
    public Double maximumNumberOfFiles() {
        return this.maximumNumberOfFiles;
    }
    /**
     * @return List of mount targets
     * 
     */
    public List<MountTargetPropertiesResponse> mountTargets() {
        return this.mountTargets;
    }
    /**
     * @return Resource name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Basic network, or Standard features available to the volume.
     * 
     */
    public Optional<String> networkFeatures() {
        return Optional.ofNullable(this.networkFeatures);
    }
    /**
     * @return Network Sibling Set ID for the the group of volumes sharing networking resources.
     * 
     */
    public String networkSiblingSetId() {
        return this.networkSiblingSetId;
    }
    /**
     * @return Application specific placement rules for the particular volume
     * 
     */
    public List<PlacementKeyValuePairsResponse> placementRules() {
        return this.placementRules == null ? List.of() : this.placementRules;
    }
    /**
     * @return Set of protocol types, default NFSv3, CIFS for SMB protocol
     * 
     */
    public List<String> protocolTypes() {
        return this.protocolTypes == null ? List.of() : this.protocolTypes;
    }
    /**
     * @return Azure lifecycle management
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Proximity placement group associated with the volume
     * 
     */
    public Optional<String> proximityPlacementGroup() {
        return Optional.ofNullable(this.proximityPlacementGroup);
    }
    /**
     * @return The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     * 
     */
    public Optional<String> securityStyle() {
        return Optional.ofNullable(this.securityStyle);
    }
    /**
     * @return The service level of the file system
     * 
     */
    public Optional<String> serviceLevel() {
        return Optional.ofNullable(this.serviceLevel);
    }
    /**
     * @return Enables continuously available share property for smb volume. Only applicable for SMB volume
     * 
     */
    public Optional<Boolean> smbContinuouslyAvailable() {
        return Optional.ofNullable(this.smbContinuouslyAvailable);
    }
    /**
     * @return Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
     * 
     */
    public Optional<Boolean> smbEncryption() {
        return Optional.ofNullable(this.smbEncryption);
    }
    /**
     * @return If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume&#39;s snapshots (default to true).
     * 
     */
    public Optional<Boolean> snapshotDirectoryVisible() {
        return Optional.ofNullable(this.snapshotDirectoryVisible);
    }
    /**
     * @return UUID v4 or resource identifier used to identify the Snapshot.
     * 
     */
    public Optional<String> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }
    /**
     * @return Provides storage to network proximity information for the volume.
     * 
     */
    public String storageToNetworkProximity() {
        return this.storageToNetworkProximity;
    }
    /**
     * @return The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return T2 network information
     * 
     */
    public String t2Network() {
        return this.t2Network;
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Optional<Double> throughputMibps() {
        return Optional.ofNullable(this.throughputMibps);
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
     * 
     */
    public Optional<String> unixPermissions() {
        return Optional.ofNullable(this.unixPermissions);
    }
    /**
     * @return Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
     * 
     */
    public Double usageThreshold() {
        return this.usageThreshold;
    }
    /**
     * @return Volume Group Name
     * 
     */
    public String volumeGroupName() {
        return this.volumeGroupName;
    }
    /**
     * @return Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
     * 
     */
    public Optional<String> volumeSpecName() {
        return Optional.ofNullable(this.volumeSpecName);
    }
    /**
     * @return What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
     * 
     */
    public Optional<String> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeGroupVolumePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String avsDataStore;
        private @Nullable String backupId;
        private String baremetalTenantId;
        private @Nullable String capacityPoolResourceId;
        private Integer cloneProgress;
        private @Nullable Boolean coolAccess;
        private @Nullable Integer coolnessPeriod;
        private String creationToken;
        private @Nullable VolumePropertiesResponseDataProtection dataProtection;
        private @Nullable Double defaultGroupQuotaInKiBs;
        private @Nullable Double defaultUserQuotaInKiBs;
        private @Nullable String enableSubvolumes;
        private @Nullable String encryptionKeySource;
        private @Nullable VolumePropertiesResponseExportPolicy exportPolicy;
        private String fileSystemId;
        private String id;
        private @Nullable Boolean isDefaultQuotaEnabled;
        private @Nullable Boolean isRestoring;
        private @Nullable Boolean kerberosEnabled;
        private @Nullable Boolean ldapEnabled;
        private Double maximumNumberOfFiles;
        private List<MountTargetPropertiesResponse> mountTargets;
        private @Nullable String name;
        private @Nullable String networkFeatures;
        private String networkSiblingSetId;
        private @Nullable List<PlacementKeyValuePairsResponse> placementRules;
        private @Nullable List<String> protocolTypes;
        private String provisioningState;
        private @Nullable String proximityPlacementGroup;
        private @Nullable String securityStyle;
        private @Nullable String serviceLevel;
        private @Nullable Boolean smbContinuouslyAvailable;
        private @Nullable Boolean smbEncryption;
        private @Nullable Boolean snapshotDirectoryVisible;
        private @Nullable String snapshotId;
        private String storageToNetworkProximity;
        private String subnetId;
        private String t2Network;
        private @Nullable Map<String,String> tags;
        private @Nullable Double throughputMibps;
        private String type;
        private @Nullable String unixPermissions;
        private Double usageThreshold;
        private String volumeGroupName;
        private @Nullable String volumeSpecName;
        private @Nullable String volumeType;

        public Builder() {
    	      // Empty
        }

        public Builder(VolumeGroupVolumePropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.avsDataStore = defaults.avsDataStore;
    	      this.backupId = defaults.backupId;
    	      this.baremetalTenantId = defaults.baremetalTenantId;
    	      this.capacityPoolResourceId = defaults.capacityPoolResourceId;
    	      this.cloneProgress = defaults.cloneProgress;
    	      this.coolAccess = defaults.coolAccess;
    	      this.coolnessPeriod = defaults.coolnessPeriod;
    	      this.creationToken = defaults.creationToken;
    	      this.dataProtection = defaults.dataProtection;
    	      this.defaultGroupQuotaInKiBs = defaults.defaultGroupQuotaInKiBs;
    	      this.defaultUserQuotaInKiBs = defaults.defaultUserQuotaInKiBs;
    	      this.enableSubvolumes = defaults.enableSubvolumes;
    	      this.encryptionKeySource = defaults.encryptionKeySource;
    	      this.exportPolicy = defaults.exportPolicy;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.id = defaults.id;
    	      this.isDefaultQuotaEnabled = defaults.isDefaultQuotaEnabled;
    	      this.isRestoring = defaults.isRestoring;
    	      this.kerberosEnabled = defaults.kerberosEnabled;
    	      this.ldapEnabled = defaults.ldapEnabled;
    	      this.maximumNumberOfFiles = defaults.maximumNumberOfFiles;
    	      this.mountTargets = defaults.mountTargets;
    	      this.name = defaults.name;
    	      this.networkFeatures = defaults.networkFeatures;
    	      this.networkSiblingSetId = defaults.networkSiblingSetId;
    	      this.placementRules = defaults.placementRules;
    	      this.protocolTypes = defaults.protocolTypes;
    	      this.provisioningState = defaults.provisioningState;
    	      this.proximityPlacementGroup = defaults.proximityPlacementGroup;
    	      this.securityStyle = defaults.securityStyle;
    	      this.serviceLevel = defaults.serviceLevel;
    	      this.smbContinuouslyAvailable = defaults.smbContinuouslyAvailable;
    	      this.smbEncryption = defaults.smbEncryption;
    	      this.snapshotDirectoryVisible = defaults.snapshotDirectoryVisible;
    	      this.snapshotId = defaults.snapshotId;
    	      this.storageToNetworkProximity = defaults.storageToNetworkProximity;
    	      this.subnetId = defaults.subnetId;
    	      this.t2Network = defaults.t2Network;
    	      this.tags = defaults.tags;
    	      this.throughputMibps = defaults.throughputMibps;
    	      this.type = defaults.type;
    	      this.unixPermissions = defaults.unixPermissions;
    	      this.usageThreshold = defaults.usageThreshold;
    	      this.volumeGroupName = defaults.volumeGroupName;
    	      this.volumeSpecName = defaults.volumeSpecName;
    	      this.volumeType = defaults.volumeType;
        }

        public Builder avsDataStore(@Nullable String avsDataStore) {
            this.avsDataStore = avsDataStore;
            return this;
        }
        public Builder backupId(@Nullable String backupId) {
            this.backupId = backupId;
            return this;
        }
        public Builder baremetalTenantId(String baremetalTenantId) {
            this.baremetalTenantId = Objects.requireNonNull(baremetalTenantId);
            return this;
        }
        public Builder capacityPoolResourceId(@Nullable String capacityPoolResourceId) {
            this.capacityPoolResourceId = capacityPoolResourceId;
            return this;
        }
        public Builder cloneProgress(Integer cloneProgress) {
            this.cloneProgress = Objects.requireNonNull(cloneProgress);
            return this;
        }
        public Builder coolAccess(@Nullable Boolean coolAccess) {
            this.coolAccess = coolAccess;
            return this;
        }
        public Builder coolnessPeriod(@Nullable Integer coolnessPeriod) {
            this.coolnessPeriod = coolnessPeriod;
            return this;
        }
        public Builder creationToken(String creationToken) {
            this.creationToken = Objects.requireNonNull(creationToken);
            return this;
        }
        public Builder dataProtection(@Nullable VolumePropertiesResponseDataProtection dataProtection) {
            this.dataProtection = dataProtection;
            return this;
        }
        public Builder defaultGroupQuotaInKiBs(@Nullable Double defaultGroupQuotaInKiBs) {
            this.defaultGroupQuotaInKiBs = defaultGroupQuotaInKiBs;
            return this;
        }
        public Builder defaultUserQuotaInKiBs(@Nullable Double defaultUserQuotaInKiBs) {
            this.defaultUserQuotaInKiBs = defaultUserQuotaInKiBs;
            return this;
        }
        public Builder enableSubvolumes(@Nullable String enableSubvolumes) {
            this.enableSubvolumes = enableSubvolumes;
            return this;
        }
        public Builder encryptionKeySource(@Nullable String encryptionKeySource) {
            this.encryptionKeySource = encryptionKeySource;
            return this;
        }
        public Builder exportPolicy(@Nullable VolumePropertiesResponseExportPolicy exportPolicy) {
            this.exportPolicy = exportPolicy;
            return this;
        }
        public Builder fileSystemId(String fileSystemId) {
            this.fileSystemId = Objects.requireNonNull(fileSystemId);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isDefaultQuotaEnabled(@Nullable Boolean isDefaultQuotaEnabled) {
            this.isDefaultQuotaEnabled = isDefaultQuotaEnabled;
            return this;
        }
        public Builder isRestoring(@Nullable Boolean isRestoring) {
            this.isRestoring = isRestoring;
            return this;
        }
        public Builder kerberosEnabled(@Nullable Boolean kerberosEnabled) {
            this.kerberosEnabled = kerberosEnabled;
            return this;
        }
        public Builder ldapEnabled(@Nullable Boolean ldapEnabled) {
            this.ldapEnabled = ldapEnabled;
            return this;
        }
        public Builder maximumNumberOfFiles(Double maximumNumberOfFiles) {
            this.maximumNumberOfFiles = Objects.requireNonNull(maximumNumberOfFiles);
            return this;
        }
        public Builder mountTargets(List<MountTargetPropertiesResponse> mountTargets) {
            this.mountTargets = Objects.requireNonNull(mountTargets);
            return this;
        }
        public Builder mountTargets(MountTargetPropertiesResponse... mountTargets) {
            return mountTargets(List.of(mountTargets));
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder networkFeatures(@Nullable String networkFeatures) {
            this.networkFeatures = networkFeatures;
            return this;
        }
        public Builder networkSiblingSetId(String networkSiblingSetId) {
            this.networkSiblingSetId = Objects.requireNonNull(networkSiblingSetId);
            return this;
        }
        public Builder placementRules(@Nullable List<PlacementKeyValuePairsResponse> placementRules) {
            this.placementRules = placementRules;
            return this;
        }
        public Builder placementRules(PlacementKeyValuePairsResponse... placementRules) {
            return placementRules(List.of(placementRules));
        }
        public Builder protocolTypes(@Nullable List<String> protocolTypes) {
            this.protocolTypes = protocolTypes;
            return this;
        }
        public Builder protocolTypes(String... protocolTypes) {
            return protocolTypes(List.of(protocolTypes));
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder proximityPlacementGroup(@Nullable String proximityPlacementGroup) {
            this.proximityPlacementGroup = proximityPlacementGroup;
            return this;
        }
        public Builder securityStyle(@Nullable String securityStyle) {
            this.securityStyle = securityStyle;
            return this;
        }
        public Builder serviceLevel(@Nullable String serviceLevel) {
            this.serviceLevel = serviceLevel;
            return this;
        }
        public Builder smbContinuouslyAvailable(@Nullable Boolean smbContinuouslyAvailable) {
            this.smbContinuouslyAvailable = smbContinuouslyAvailable;
            return this;
        }
        public Builder smbEncryption(@Nullable Boolean smbEncryption) {
            this.smbEncryption = smbEncryption;
            return this;
        }
        public Builder snapshotDirectoryVisible(@Nullable Boolean snapshotDirectoryVisible) {
            this.snapshotDirectoryVisible = snapshotDirectoryVisible;
            return this;
        }
        public Builder snapshotId(@Nullable String snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }
        public Builder storageToNetworkProximity(String storageToNetworkProximity) {
            this.storageToNetworkProximity = Objects.requireNonNull(storageToNetworkProximity);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder t2Network(String t2Network) {
            this.t2Network = Objects.requireNonNull(t2Network);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder throughputMibps(@Nullable Double throughputMibps) {
            this.throughputMibps = throughputMibps;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder unixPermissions(@Nullable String unixPermissions) {
            this.unixPermissions = unixPermissions;
            return this;
        }
        public Builder usageThreshold(Double usageThreshold) {
            this.usageThreshold = Objects.requireNonNull(usageThreshold);
            return this;
        }
        public Builder volumeGroupName(String volumeGroupName) {
            this.volumeGroupName = Objects.requireNonNull(volumeGroupName);
            return this;
        }
        public Builder volumeSpecName(@Nullable String volumeSpecName) {
            this.volumeSpecName = volumeSpecName;
            return this;
        }
        public Builder volumeType(@Nullable String volumeType) {
            this.volumeType = volumeType;
            return this;
        }        public VolumeGroupVolumePropertiesResponse build() {
            return new VolumeGroupVolumePropertiesResponse(avsDataStore, backupId, baremetalTenantId, capacityPoolResourceId, cloneProgress, coolAccess, coolnessPeriod, creationToken, dataProtection, defaultGroupQuotaInKiBs, defaultUserQuotaInKiBs, enableSubvolumes, encryptionKeySource, exportPolicy, fileSystemId, id, isDefaultQuotaEnabled, isRestoring, kerberosEnabled, ldapEnabled, maximumNumberOfFiles, mountTargets, name, networkFeatures, networkSiblingSetId, placementRules, protocolTypes, provisioningState, proximityPlacementGroup, securityStyle, serviceLevel, smbContinuouslyAvailable, smbEncryption, snapshotDirectoryVisible, snapshotId, storageToNetworkProximity, subnetId, t2Network, tags, throughputMibps, type, unixPermissions, usageThreshold, volumeGroupName, volumeSpecName, volumeType);
        }
    }
}
