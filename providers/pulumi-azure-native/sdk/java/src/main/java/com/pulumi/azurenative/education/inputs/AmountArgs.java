// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.education.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The amount.
 * 
 */
public final class AmountArgs extends com.pulumi.resources.ResourceArgs {

    public static final AmountArgs Empty = new AmountArgs();

    /**
     * The type of currency being used for the value.
     * 
     */
    @Import(name="currency")
    private @Nullable Output<String> currency;

    /**
     * @return The type of currency being used for the value.
     * 
     */
    public Optional<Output<String>> currency() {
        return Optional.ofNullable(this.currency);
    }

    /**
     * Amount value.
     * 
     */
    @Import(name="value")
    private @Nullable Output<Double> value;

    /**
     * @return Amount value.
     * 
     */
    public Optional<Output<Double>> value() {
        return Optional.ofNullable(this.value);
    }

    private AmountArgs() {}

    private AmountArgs(AmountArgs $) {
        this.currency = $.currency;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AmountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AmountArgs $;

        public Builder() {
            $ = new AmountArgs();
        }

        public Builder(AmountArgs defaults) {
            $ = new AmountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currency The type of currency being used for the value.
         * 
         * @return builder
         * 
         */
        public Builder currency(@Nullable Output<String> currency) {
            $.currency = currency;
            return this;
        }

        /**
         * @param currency The type of currency being used for the value.
         * 
         * @return builder
         * 
         */
        public Builder currency(String currency) {
            return currency(Output.of(currency));
        }

        /**
         * @param value Amount value.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Double> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Amount value.
         * 
         * @return builder
         * 
         */
        public Builder value(Double value) {
            return value(Output.of(value));
        }

        public AmountArgs build() {
            return $;
        }
    }

}
