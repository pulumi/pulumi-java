// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetTransparentDataEncryptionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTransparentDataEncryptionArgs Empty = new GetTransparentDataEncryptionArgs();

    /**
     * The name of the database for which the transparent data encryption applies.
     * 
     */
    @Import(name="databaseName", required=true)
    private String databaseName;

    public String databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
    private String serverName;

    public String serverName() {
        return this.serverName;
    }

    /**
     * The name of the transparent data encryption configuration.
     * 
     */
    @Import(name="transparentDataEncryptionName", required=true)
    private String transparentDataEncryptionName;

    public String transparentDataEncryptionName() {
        return this.transparentDataEncryptionName;
    }

    private GetTransparentDataEncryptionArgs() {}

    private GetTransparentDataEncryptionArgs(GetTransparentDataEncryptionArgs $) {
        this.databaseName = $.databaseName;
        this.resourceGroupName = $.resourceGroupName;
        this.serverName = $.serverName;
        this.transparentDataEncryptionName = $.transparentDataEncryptionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTransparentDataEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTransparentDataEncryptionArgs $;

        public Builder() {
            $ = new GetTransparentDataEncryptionArgs();
        }

        public Builder(GetTransparentDataEncryptionArgs defaults) {
            $ = new GetTransparentDataEncryptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder databaseName(String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder serverName(String serverName) {
            $.serverName = serverName;
            return this;
        }

        public Builder transparentDataEncryptionName(String transparentDataEncryptionName) {
            $.transparentDataEncryptionName = transparentDataEncryptionName;
            return this;
        }

        public GetTransparentDataEncryptionArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serverName = Objects.requireNonNull($.serverName, "expected parameter 'serverName' to be non-null");
            $.transparentDataEncryptionName = Objects.requireNonNull($.transparentDataEncryptionName, "expected parameter 'transparentDataEncryptionName' to be non-null");
            return $;
        }
    }

}
