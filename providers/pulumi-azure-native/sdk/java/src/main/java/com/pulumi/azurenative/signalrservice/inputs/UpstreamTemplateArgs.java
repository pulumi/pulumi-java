// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.signalrservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Upstream template item settings. It defines the Upstream URL of the incoming requests.
 * The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
 * 
 */
public final class UpstreamTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final UpstreamTemplateArgs Empty = new UpstreamTemplateArgs();

    /**
     * Gets or sets the matching pattern for category names. If not set, it matches any category.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any category name
     *     2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages"
     *     3. The single category name, for example, "connections", it matches the category "connections"
     * 
     */
    @Import(name="categoryPattern")
      private final @Nullable Output<String> categoryPattern;

    public Output<String> categoryPattern() {
        return this.categoryPattern == null ? Codegen.empty() : this.categoryPattern;
    }

    /**
     * Gets or sets the matching pattern for event names. If not set, it matches any event.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any event name
     *     2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
     *     3. The single event name, for example, "connect", it matches "connect"
     * 
     */
    @Import(name="eventPattern")
      private final @Nullable Output<String> eventPattern;

    public Output<String> eventPattern() {
        return this.eventPattern == null ? Codegen.empty() : this.eventPattern;
    }

    /**
     * Gets or sets the matching pattern for hub names. If not set, it matches any hub.
     * There are 3 kind of patterns supported:
     *     1. "*", it to matches any hub name
     *     2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
     *     3. The single hub name, for example, "hub1", it matches "hub1"
     * 
     */
    @Import(name="hubPattern")
      private final @Nullable Output<String> hubPattern;

    public Output<String> hubPattern() {
        return this.hubPattern == null ? Codegen.empty() : this.hubPattern;
    }

    /**
     * Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
     * For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
     * 
     */
    @Import(name="urlTemplate", required=true)
      private final Output<String> urlTemplate;

    public Output<String> urlTemplate() {
        return this.urlTemplate;
    }

    public UpstreamTemplateArgs(
        @Nullable Output<String> categoryPattern,
        @Nullable Output<String> eventPattern,
        @Nullable Output<String> hubPattern,
        Output<String> urlTemplate) {
        this.categoryPattern = categoryPattern;
        this.eventPattern = eventPattern;
        this.hubPattern = hubPattern;
        this.urlTemplate = Objects.requireNonNull(urlTemplate, "expected parameter 'urlTemplate' to be non-null");
    }

    private UpstreamTemplateArgs() {
        this.categoryPattern = Codegen.empty();
        this.eventPattern = Codegen.empty();
        this.hubPattern = Codegen.empty();
        this.urlTemplate = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UpstreamTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> categoryPattern;
        private @Nullable Output<String> eventPattern;
        private @Nullable Output<String> hubPattern;
        private Output<String> urlTemplate;

        public Builder() {
    	      // Empty
        }

        public Builder(UpstreamTemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryPattern = defaults.categoryPattern;
    	      this.eventPattern = defaults.eventPattern;
    	      this.hubPattern = defaults.hubPattern;
    	      this.urlTemplate = defaults.urlTemplate;
        }

        public Builder categoryPattern(@Nullable Output<String> categoryPattern) {
            this.categoryPattern = categoryPattern;
            return this;
        }
        public Builder categoryPattern(@Nullable String categoryPattern) {
            this.categoryPattern = Codegen.ofNullable(categoryPattern);
            return this;
        }
        public Builder eventPattern(@Nullable Output<String> eventPattern) {
            this.eventPattern = eventPattern;
            return this;
        }
        public Builder eventPattern(@Nullable String eventPattern) {
            this.eventPattern = Codegen.ofNullable(eventPattern);
            return this;
        }
        public Builder hubPattern(@Nullable Output<String> hubPattern) {
            this.hubPattern = hubPattern;
            return this;
        }
        public Builder hubPattern(@Nullable String hubPattern) {
            this.hubPattern = Codegen.ofNullable(hubPattern);
            return this;
        }
        public Builder urlTemplate(Output<String> urlTemplate) {
            this.urlTemplate = Objects.requireNonNull(urlTemplate);
            return this;
        }
        public Builder urlTemplate(String urlTemplate) {
            this.urlTemplate = Output.of(Objects.requireNonNull(urlTemplate));
            return this;
        }        public UpstreamTemplateArgs build() {
            return new UpstreamTemplateArgs(categoryPattern, eventPattern, hubPattern, urlTemplate);
        }
    }
}
