// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.HDInsightActivityDebugInfoOption;
import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyArgs;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * HDInsight Spark activity.
 * 
 */
public final class HDInsightSparkActivityArgs extends com.pulumi.resources.ResourceArgs {

    public static final HDInsightSparkActivityArgs Empty = new HDInsightSparkActivityArgs();

    /**
     * The user-specified arguments to HDInsightSparkActivity.
     * 
     */
    @Import(name="arguments")
      private final @Nullable Output<List<Object>> arguments;

    public Output<List<Object>> arguments() {
        return this.arguments == null ? Codegen.empty() : this.arguments;
    }

    /**
     * The application&#39;s Java/Spark main class.
     * 
     */
    @Import(name="className")
      private final @Nullable Output<String> className;

    public Output<String> className() {
        return this.className == null ? Codegen.empty() : this.className;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    public Output<List<ActivityDependencyArgs>> dependsOn() {
        return this.dependsOn == null ? Codegen.empty() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="entryFilePath", required=true)
      private final Output<Object> entryFilePath;

    public Output<Object> entryFilePath() {
        return this.entryFilePath;
    }

    /**
     * Debug info option.
     * 
     */
    @Import(name="getDebugInfo")
      private final @Nullable Output<Either<String,HDInsightActivityDebugInfoOption>> getDebugInfo;

    public Output<Either<String,HDInsightActivityDebugInfoOption>> getDebugInfo() {
        return this.getDebugInfo == null ? Codegen.empty() : this.getDebugInfo;
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
      private final @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Output<LinkedServiceReferenceArgs> linkedServiceName() {
        return this.linkedServiceName == null ? Codegen.empty() : this.linkedServiceName;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
      private final @Nullable Output<ActivityPolicyArgs> policy;

    public Output<ActivityPolicyArgs> policy() {
        return this.policy == null ? Codegen.empty() : this.policy;
    }

    /**
     * The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="proxyUser")
      private final @Nullable Output<Object> proxyUser;

    public Output<Object> proxyUser() {
        return this.proxyUser == null ? Codegen.empty() : this.proxyUser;
    }

    /**
     * The root path in &#39;sparkJobLinkedService&#39; for all the jobâ€™s files. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="rootPath", required=true)
      private final Output<Object> rootPath;

    public Output<Object> rootPath() {
        return this.rootPath;
    }

    /**
     * Spark configuration property.
     * 
     */
    @Import(name="sparkConfig")
      private final @Nullable Output<Map<String,Object>> sparkConfig;

    public Output<Map<String,Object>> sparkConfig() {
        return this.sparkConfig == null ? Codegen.empty() : this.sparkConfig;
    }

    /**
     * The storage linked service for uploading the entry file and dependencies, and for receiving logs.
     * 
     */
    @Import(name="sparkJobLinkedService")
      private final @Nullable Output<LinkedServiceReferenceArgs> sparkJobLinkedService;

    public Output<LinkedServiceReferenceArgs> sparkJobLinkedService() {
        return this.sparkJobLinkedService == null ? Codegen.empty() : this.sparkJobLinkedService;
    }

    /**
     * Type of activity.
     * Expected value is &#39;HDInsightSpark&#39;.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
      private final @Nullable Output<List<UserPropertyArgs>> userProperties;

    public Output<List<UserPropertyArgs>> userProperties() {
        return this.userProperties == null ? Codegen.empty() : this.userProperties;
    }

    public HDInsightSparkActivityArgs(
        @Nullable Output<List<Object>> arguments,
        @Nullable Output<String> className,
        @Nullable Output<List<ActivityDependencyArgs>> dependsOn,
        @Nullable Output<String> description,
        Output<Object> entryFilePath,
        @Nullable Output<Either<String,HDInsightActivityDebugInfoOption>> getDebugInfo,
        @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName,
        Output<String> name,
        @Nullable Output<ActivityPolicyArgs> policy,
        @Nullable Output<Object> proxyUser,
        Output<Object> rootPath,
        @Nullable Output<Map<String,Object>> sparkConfig,
        @Nullable Output<LinkedServiceReferenceArgs> sparkJobLinkedService,
        Output<String> type,
        @Nullable Output<List<UserPropertyArgs>> userProperties) {
        this.arguments = arguments;
        this.className = className;
        this.dependsOn = dependsOn;
        this.description = description;
        this.entryFilePath = Objects.requireNonNull(entryFilePath, "expected parameter 'entryFilePath' to be non-null");
        this.getDebugInfo = getDebugInfo;
        this.linkedServiceName = linkedServiceName;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.policy = policy;
        this.proxyUser = proxyUser;
        this.rootPath = Objects.requireNonNull(rootPath, "expected parameter 'rootPath' to be non-null");
        this.sparkConfig = sparkConfig;
        this.sparkJobLinkedService = sparkJobLinkedService;
        this.type = Codegen.stringProp("type").output().arg(type).require();
        this.userProperties = userProperties;
    }

    private HDInsightSparkActivityArgs() {
        this.arguments = Codegen.empty();
        this.className = Codegen.empty();
        this.dependsOn = Codegen.empty();
        this.description = Codegen.empty();
        this.entryFilePath = Codegen.empty();
        this.getDebugInfo = Codegen.empty();
        this.linkedServiceName = Codegen.empty();
        this.name = Codegen.empty();
        this.policy = Codegen.empty();
        this.proxyUser = Codegen.empty();
        this.rootPath = Codegen.empty();
        this.sparkConfig = Codegen.empty();
        this.sparkJobLinkedService = Codegen.empty();
        this.type = Codegen.empty();
        this.userProperties = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HDInsightSparkActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Object>> arguments;
        private @Nullable Output<String> className;
        private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;
        private @Nullable Output<String> description;
        private Output<Object> entryFilePath;
        private @Nullable Output<Either<String,HDInsightActivityDebugInfoOption>> getDebugInfo;
        private @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;
        private Output<String> name;
        private @Nullable Output<ActivityPolicyArgs> policy;
        private @Nullable Output<Object> proxyUser;
        private Output<Object> rootPath;
        private @Nullable Output<Map<String,Object>> sparkConfig;
        private @Nullable Output<LinkedServiceReferenceArgs> sparkJobLinkedService;
        private Output<String> type;
        private @Nullable Output<List<UserPropertyArgs>> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(HDInsightSparkActivityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.className = defaults.className;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.entryFilePath = defaults.entryFilePath;
    	      this.getDebugInfo = defaults.getDebugInfo;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.proxyUser = defaults.proxyUser;
    	      this.rootPath = defaults.rootPath;
    	      this.sparkConfig = defaults.sparkConfig;
    	      this.sparkJobLinkedService = defaults.sparkJobLinkedService;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder arguments(@Nullable Output<List<Object>> arguments) {
            this.arguments = arguments;
            return this;
        }
        public Builder arguments(@Nullable List<Object> arguments) {
            this.arguments = Codegen.ofNullable(arguments);
            return this;
        }
        public Builder arguments(Object... arguments) {
            return arguments(List.of(arguments));
        }
        public Builder className(@Nullable Output<String> className) {
            this.className = className;
            return this;
        }
        public Builder className(@Nullable String className) {
            this.className = Codegen.ofNullable(className);
            return this;
        }
        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(@Nullable List<ActivityDependencyArgs> dependsOn) {
            this.dependsOn = Codegen.ofNullable(dependsOn);
            return this;
        }
        public Builder dependsOn(ActivityDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder entryFilePath(Output<Object> entryFilePath) {
            this.entryFilePath = Objects.requireNonNull(entryFilePath);
            return this;
        }
        public Builder entryFilePath(Object entryFilePath) {
            this.entryFilePath = Output.of(Objects.requireNonNull(entryFilePath));
            return this;
        }
        public Builder getDebugInfo(@Nullable Output<Either<String,HDInsightActivityDebugInfoOption>> getDebugInfo) {
            this.getDebugInfo = getDebugInfo;
            return this;
        }
        public Builder getDebugInfo(@Nullable Either<String,HDInsightActivityDebugInfoOption> getDebugInfo) {
            this.getDebugInfo = Codegen.ofNullable(getDebugInfo);
            return this;
        }
        public Builder linkedServiceName(@Nullable Output<LinkedServiceReferenceArgs> linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceArgs linkedServiceName) {
            this.linkedServiceName = Codegen.ofNullable(linkedServiceName);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder policy(@Nullable Output<ActivityPolicyArgs> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable ActivityPolicyArgs policy) {
            this.policy = Codegen.ofNullable(policy);
            return this;
        }
        public Builder proxyUser(@Nullable Output<Object> proxyUser) {
            this.proxyUser = proxyUser;
            return this;
        }
        public Builder proxyUser(@Nullable Object proxyUser) {
            this.proxyUser = Codegen.ofNullable(proxyUser);
            return this;
        }
        public Builder rootPath(Output<Object> rootPath) {
            this.rootPath = Objects.requireNonNull(rootPath);
            return this;
        }
        public Builder rootPath(Object rootPath) {
            this.rootPath = Output.of(Objects.requireNonNull(rootPath));
            return this;
        }
        public Builder sparkConfig(@Nullable Output<Map<String,Object>> sparkConfig) {
            this.sparkConfig = sparkConfig;
            return this;
        }
        public Builder sparkConfig(@Nullable Map<String,Object> sparkConfig) {
            this.sparkConfig = Codegen.ofNullable(sparkConfig);
            return this;
        }
        public Builder sparkJobLinkedService(@Nullable Output<LinkedServiceReferenceArgs> sparkJobLinkedService) {
            this.sparkJobLinkedService = sparkJobLinkedService;
            return this;
        }
        public Builder sparkJobLinkedService(@Nullable LinkedServiceReferenceArgs sparkJobLinkedService) {
            this.sparkJobLinkedService = Codegen.ofNullable(sparkJobLinkedService);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyArgs> userProperties) {
            this.userProperties = Codegen.ofNullable(userProperties);
            return this;
        }
        public Builder userProperties(UserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }        public HDInsightSparkActivityArgs build() {
            return new HDInsightSparkActivityArgs(arguments, className, dependsOn, description, entryFilePath, getDebugInfo, linkedServiceName, name, policy, proxyUser, rootPath, sparkConfig, sparkJobLinkedService, type, userProperties);
        }
    }
}
