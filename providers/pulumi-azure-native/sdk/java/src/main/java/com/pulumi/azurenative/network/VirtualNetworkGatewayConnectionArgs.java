// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.enums.VirtualNetworkGatewayConnectionMode;
import com.pulumi.azurenative.network.enums.VirtualNetworkGatewayConnectionProtocol;
import com.pulumi.azurenative.network.enums.VirtualNetworkGatewayConnectionType;
import com.pulumi.azurenative.network.inputs.IpsecPolicyArgs;
import com.pulumi.azurenative.network.inputs.LocalNetworkGatewayArgs;
import com.pulumi.azurenative.network.inputs.SubResourceArgs;
import com.pulumi.azurenative.network.inputs.TrafficSelectorPolicyArgs;
import com.pulumi.azurenative.network.inputs.VirtualNetworkGatewayArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNetworkGatewayConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkGatewayConnectionArgs Empty = new VirtualNetworkGatewayConnectionArgs();

    /**
     * The authorizationKey.
     * 
     */
    @Import(name="authorizationKey")
    private @Nullable Output<String> authorizationKey;

    /**
     * @return The authorizationKey.
     * 
     */
    public Optional<Output<String>> authorizationKey() {
        return Optional.ofNullable(this.authorizationKey);
    }

    /**
     * The connection mode for this connection.
     * 
     */
    @Import(name="connectionMode")
    private @Nullable Output<Either<String,VirtualNetworkGatewayConnectionMode>> connectionMode;

    /**
     * @return The connection mode for this connection.
     * 
     */
    public Optional<Output<Either<String,VirtualNetworkGatewayConnectionMode>>> connectionMode() {
        return Optional.ofNullable(this.connectionMode);
    }

    /**
     * Connection protocol used for this connection.
     * 
     */
    @Import(name="connectionProtocol")
    private @Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> connectionProtocol;

    /**
     * @return Connection protocol used for this connection.
     * 
     */
    public Optional<Output<Either<String,VirtualNetworkGatewayConnectionProtocol>>> connectionProtocol() {
        return Optional.ofNullable(this.connectionProtocol);
    }

    /**
     * Gateway connection type.
     * 
     */
    @Import(name="connectionType", required=true)
    private Output<Either<String,VirtualNetworkGatewayConnectionType>> connectionType;

    /**
     * @return Gateway connection type.
     * 
     */
    public Output<Either<String,VirtualNetworkGatewayConnectionType>> connectionType() {
        return this.connectionType;
    }

    /**
     * The dead peer detection timeout of this connection in seconds.
     * 
     */
    @Import(name="dpdTimeoutSeconds")
    private @Nullable Output<Integer> dpdTimeoutSeconds;

    /**
     * @return The dead peer detection timeout of this connection in seconds.
     * 
     */
    public Optional<Output<Integer>> dpdTimeoutSeconds() {
        return Optional.ofNullable(this.dpdTimeoutSeconds);
    }

    /**
     * EnableBgp flag.
     * 
     */
    @Import(name="enableBgp")
    private @Nullable Output<Boolean> enableBgp;

    /**
     * @return EnableBgp flag.
     * 
     */
    public Optional<Output<Boolean>> enableBgp() {
        return Optional.ofNullable(this.enableBgp);
    }

    /**
     * Bypass ExpressRoute Gateway for data forwarding.
     * 
     */
    @Import(name="expressRouteGatewayBypass")
    private @Nullable Output<Boolean> expressRouteGatewayBypass;

    /**
     * @return Bypass ExpressRoute Gateway for data forwarding.
     * 
     */
    public Optional<Output<Boolean>> expressRouteGatewayBypass() {
        return Optional.ofNullable(this.expressRouteGatewayBypass);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The IPSec Policies to be considered by this connection.
     * 
     */
    @Import(name="ipsecPolicies")
    private @Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies;

    /**
     * @return The IPSec Policies to be considered by this connection.
     * 
     */
    public Optional<Output<List<IpsecPolicyArgs>>> ipsecPolicies() {
        return Optional.ofNullable(this.ipsecPolicies);
    }

    /**
     * The reference to local network gateway resource.
     * 
     */
    @Import(name="localNetworkGateway2")
    private @Nullable Output<LocalNetworkGatewayArgs> localNetworkGateway2;

    /**
     * @return The reference to local network gateway resource.
     * 
     */
    public Optional<Output<LocalNetworkGatewayArgs>> localNetworkGateway2() {
        return Optional.ofNullable(this.localNetworkGateway2);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The reference to peerings resource.
     * 
     */
    @Import(name="peer")
    private @Nullable Output<SubResourceArgs> peer;

    /**
     * @return The reference to peerings resource.
     * 
     */
    public Optional<Output<SubResourceArgs>> peer() {
        return Optional.ofNullable(this.peer);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The routing weight.
     * 
     */
    @Import(name="routingWeight")
    private @Nullable Output<Integer> routingWeight;

    /**
     * @return The routing weight.
     * 
     */
    public Optional<Output<Integer>> routingWeight() {
        return Optional.ofNullable(this.routingWeight);
    }

    /**
     * The IPSec shared key.
     * 
     */
    @Import(name="sharedKey")
    private @Nullable Output<String> sharedKey;

    /**
     * @return The IPSec shared key.
     * 
     */
    public Optional<Output<String>> sharedKey() {
        return Optional.ofNullable(this.sharedKey);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Traffic Selector Policies to be considered by this connection.
     * 
     */
    @Import(name="trafficSelectorPolicies")
    private @Nullable Output<List<TrafficSelectorPolicyArgs>> trafficSelectorPolicies;

    /**
     * @return The Traffic Selector Policies to be considered by this connection.
     * 
     */
    public Optional<Output<List<TrafficSelectorPolicyArgs>>> trafficSelectorPolicies() {
        return Optional.ofNullable(this.trafficSelectorPolicies);
    }

    /**
     * Use private local Azure IP for the connection.
     * 
     */
    @Import(name="useLocalAzureIpAddress")
    private @Nullable Output<Boolean> useLocalAzureIpAddress;

    /**
     * @return Use private local Azure IP for the connection.
     * 
     */
    public Optional<Output<Boolean>> useLocalAzureIpAddress() {
        return Optional.ofNullable(this.useLocalAzureIpAddress);
    }

    /**
     * Enable policy-based traffic selectors.
     * 
     */
    @Import(name="usePolicyBasedTrafficSelectors")
    private @Nullable Output<Boolean> usePolicyBasedTrafficSelectors;

    /**
     * @return Enable policy-based traffic selectors.
     * 
     */
    public Optional<Output<Boolean>> usePolicyBasedTrafficSelectors() {
        return Optional.ofNullable(this.usePolicyBasedTrafficSelectors);
    }

    /**
     * The reference to virtual network gateway resource.
     * 
     */
    @Import(name="virtualNetworkGateway1", required=true)
    private Output<VirtualNetworkGatewayArgs> virtualNetworkGateway1;

    /**
     * @return The reference to virtual network gateway resource.
     * 
     */
    public Output<VirtualNetworkGatewayArgs> virtualNetworkGateway1() {
        return this.virtualNetworkGateway1;
    }

    /**
     * The reference to virtual network gateway resource.
     * 
     */
    @Import(name="virtualNetworkGateway2")
    private @Nullable Output<VirtualNetworkGatewayArgs> virtualNetworkGateway2;

    /**
     * @return The reference to virtual network gateway resource.
     * 
     */
    public Optional<Output<VirtualNetworkGatewayArgs>> virtualNetworkGateway2() {
        return Optional.ofNullable(this.virtualNetworkGateway2);
    }

    /**
     * The name of the virtual network gateway connection.
     * 
     */
    @Import(name="virtualNetworkGatewayConnectionName")
    private @Nullable Output<String> virtualNetworkGatewayConnectionName;

    /**
     * @return The name of the virtual network gateway connection.
     * 
     */
    public Optional<Output<String>> virtualNetworkGatewayConnectionName() {
        return Optional.ofNullable(this.virtualNetworkGatewayConnectionName);
    }

    private VirtualNetworkGatewayConnectionArgs() {}

    private VirtualNetworkGatewayConnectionArgs(VirtualNetworkGatewayConnectionArgs $) {
        this.authorizationKey = $.authorizationKey;
        this.connectionMode = $.connectionMode;
        this.connectionProtocol = $.connectionProtocol;
        this.connectionType = $.connectionType;
        this.dpdTimeoutSeconds = $.dpdTimeoutSeconds;
        this.enableBgp = $.enableBgp;
        this.expressRouteGatewayBypass = $.expressRouteGatewayBypass;
        this.id = $.id;
        this.ipsecPolicies = $.ipsecPolicies;
        this.localNetworkGateway2 = $.localNetworkGateway2;
        this.location = $.location;
        this.peer = $.peer;
        this.resourceGroupName = $.resourceGroupName;
        this.routingWeight = $.routingWeight;
        this.sharedKey = $.sharedKey;
        this.tags = $.tags;
        this.trafficSelectorPolicies = $.trafficSelectorPolicies;
        this.useLocalAzureIpAddress = $.useLocalAzureIpAddress;
        this.usePolicyBasedTrafficSelectors = $.usePolicyBasedTrafficSelectors;
        this.virtualNetworkGateway1 = $.virtualNetworkGateway1;
        this.virtualNetworkGateway2 = $.virtualNetworkGateway2;
        this.virtualNetworkGatewayConnectionName = $.virtualNetworkGatewayConnectionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkGatewayConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkGatewayConnectionArgs $;

        public Builder() {
            $ = new VirtualNetworkGatewayConnectionArgs();
        }

        public Builder(VirtualNetworkGatewayConnectionArgs defaults) {
            $ = new VirtualNetworkGatewayConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationKey The authorizationKey.
         * 
         * @return builder
         * 
         */
        public Builder authorizationKey(@Nullable Output<String> authorizationKey) {
            $.authorizationKey = authorizationKey;
            return this;
        }

        /**
         * @param authorizationKey The authorizationKey.
         * 
         * @return builder
         * 
         */
        public Builder authorizationKey(String authorizationKey) {
            return authorizationKey(Output.of(authorizationKey));
        }

        /**
         * @param connectionMode The connection mode for this connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionMode(@Nullable Output<Either<String,VirtualNetworkGatewayConnectionMode>> connectionMode) {
            $.connectionMode = connectionMode;
            return this;
        }

        /**
         * @param connectionMode The connection mode for this connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionMode(Either<String,VirtualNetworkGatewayConnectionMode> connectionMode) {
            return connectionMode(Output.of(connectionMode));
        }

        /**
         * @param connectionMode The connection mode for this connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionMode(String connectionMode) {
            return connectionMode(Either.ofLeft(connectionMode));
        }

        /**
         * @param connectionMode The connection mode for this connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionMode(VirtualNetworkGatewayConnectionMode connectionMode) {
            return connectionMode(Either.ofRight(connectionMode));
        }

        /**
         * @param connectionProtocol Connection protocol used for this connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionProtocol(@Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> connectionProtocol) {
            $.connectionProtocol = connectionProtocol;
            return this;
        }

        /**
         * @param connectionProtocol Connection protocol used for this connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionProtocol(Either<String,VirtualNetworkGatewayConnectionProtocol> connectionProtocol) {
            return connectionProtocol(Output.of(connectionProtocol));
        }

        /**
         * @param connectionProtocol Connection protocol used for this connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionProtocol(String connectionProtocol) {
            return connectionProtocol(Either.ofLeft(connectionProtocol));
        }

        /**
         * @param connectionProtocol Connection protocol used for this connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionProtocol(VirtualNetworkGatewayConnectionProtocol connectionProtocol) {
            return connectionProtocol(Either.ofRight(connectionProtocol));
        }

        /**
         * @param connectionType Gateway connection type.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(Output<Either<String,VirtualNetworkGatewayConnectionType>> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        /**
         * @param connectionType Gateway connection type.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(Either<String,VirtualNetworkGatewayConnectionType> connectionType) {
            return connectionType(Output.of(connectionType));
        }

        /**
         * @param connectionType Gateway connection type.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(String connectionType) {
            return connectionType(Either.ofLeft(connectionType));
        }

        /**
         * @param connectionType Gateway connection type.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(VirtualNetworkGatewayConnectionType connectionType) {
            return connectionType(Either.ofRight(connectionType));
        }

        /**
         * @param dpdTimeoutSeconds The dead peer detection timeout of this connection in seconds.
         * 
         * @return builder
         * 
         */
        public Builder dpdTimeoutSeconds(@Nullable Output<Integer> dpdTimeoutSeconds) {
            $.dpdTimeoutSeconds = dpdTimeoutSeconds;
            return this;
        }

        /**
         * @param dpdTimeoutSeconds The dead peer detection timeout of this connection in seconds.
         * 
         * @return builder
         * 
         */
        public Builder dpdTimeoutSeconds(Integer dpdTimeoutSeconds) {
            return dpdTimeoutSeconds(Output.of(dpdTimeoutSeconds));
        }

        /**
         * @param enableBgp EnableBgp flag.
         * 
         * @return builder
         * 
         */
        public Builder enableBgp(@Nullable Output<Boolean> enableBgp) {
            $.enableBgp = enableBgp;
            return this;
        }

        /**
         * @param enableBgp EnableBgp flag.
         * 
         * @return builder
         * 
         */
        public Builder enableBgp(Boolean enableBgp) {
            return enableBgp(Output.of(enableBgp));
        }

        /**
         * @param expressRouteGatewayBypass Bypass ExpressRoute Gateway for data forwarding.
         * 
         * @return builder
         * 
         */
        public Builder expressRouteGatewayBypass(@Nullable Output<Boolean> expressRouteGatewayBypass) {
            $.expressRouteGatewayBypass = expressRouteGatewayBypass;
            return this;
        }

        /**
         * @param expressRouteGatewayBypass Bypass ExpressRoute Gateway for data forwarding.
         * 
         * @return builder
         * 
         */
        public Builder expressRouteGatewayBypass(Boolean expressRouteGatewayBypass) {
            return expressRouteGatewayBypass(Output.of(expressRouteGatewayBypass));
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ipsecPolicies The IPSec Policies to be considered by this connection.
         * 
         * @return builder
         * 
         */
        public Builder ipsecPolicies(@Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies) {
            $.ipsecPolicies = ipsecPolicies;
            return this;
        }

        /**
         * @param ipsecPolicies The IPSec Policies to be considered by this connection.
         * 
         * @return builder
         * 
         */
        public Builder ipsecPolicies(List<IpsecPolicyArgs> ipsecPolicies) {
            return ipsecPolicies(Output.of(ipsecPolicies));
        }

        /**
         * @param ipsecPolicies The IPSec Policies to be considered by this connection.
         * 
         * @return builder
         * 
         */
        public Builder ipsecPolicies(IpsecPolicyArgs... ipsecPolicies) {
            return ipsecPolicies(List.of(ipsecPolicies));
        }

        /**
         * @param localNetworkGateway2 The reference to local network gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder localNetworkGateway2(@Nullable Output<LocalNetworkGatewayArgs> localNetworkGateway2) {
            $.localNetworkGateway2 = localNetworkGateway2;
            return this;
        }

        /**
         * @param localNetworkGateway2 The reference to local network gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder localNetworkGateway2(LocalNetworkGatewayArgs localNetworkGateway2) {
            return localNetworkGateway2(Output.of(localNetworkGateway2));
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param peer The reference to peerings resource.
         * 
         * @return builder
         * 
         */
        public Builder peer(@Nullable Output<SubResourceArgs> peer) {
            $.peer = peer;
            return this;
        }

        /**
         * @param peer The reference to peerings resource.
         * 
         * @return builder
         * 
         */
        public Builder peer(SubResourceArgs peer) {
            return peer(Output.of(peer));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param routingWeight The routing weight.
         * 
         * @return builder
         * 
         */
        public Builder routingWeight(@Nullable Output<Integer> routingWeight) {
            $.routingWeight = routingWeight;
            return this;
        }

        /**
         * @param routingWeight The routing weight.
         * 
         * @return builder
         * 
         */
        public Builder routingWeight(Integer routingWeight) {
            return routingWeight(Output.of(routingWeight));
        }

        /**
         * @param sharedKey The IPSec shared key.
         * 
         * @return builder
         * 
         */
        public Builder sharedKey(@Nullable Output<String> sharedKey) {
            $.sharedKey = sharedKey;
            return this;
        }

        /**
         * @param sharedKey The IPSec shared key.
         * 
         * @return builder
         * 
         */
        public Builder sharedKey(String sharedKey) {
            return sharedKey(Output.of(sharedKey));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param trafficSelectorPolicies The Traffic Selector Policies to be considered by this connection.
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectorPolicies(@Nullable Output<List<TrafficSelectorPolicyArgs>> trafficSelectorPolicies) {
            $.trafficSelectorPolicies = trafficSelectorPolicies;
            return this;
        }

        /**
         * @param trafficSelectorPolicies The Traffic Selector Policies to be considered by this connection.
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectorPolicies(List<TrafficSelectorPolicyArgs> trafficSelectorPolicies) {
            return trafficSelectorPolicies(Output.of(trafficSelectorPolicies));
        }

        /**
         * @param trafficSelectorPolicies The Traffic Selector Policies to be considered by this connection.
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectorPolicies(TrafficSelectorPolicyArgs... trafficSelectorPolicies) {
            return trafficSelectorPolicies(List.of(trafficSelectorPolicies));
        }

        /**
         * @param useLocalAzureIpAddress Use private local Azure IP for the connection.
         * 
         * @return builder
         * 
         */
        public Builder useLocalAzureIpAddress(@Nullable Output<Boolean> useLocalAzureIpAddress) {
            $.useLocalAzureIpAddress = useLocalAzureIpAddress;
            return this;
        }

        /**
         * @param useLocalAzureIpAddress Use private local Azure IP for the connection.
         * 
         * @return builder
         * 
         */
        public Builder useLocalAzureIpAddress(Boolean useLocalAzureIpAddress) {
            return useLocalAzureIpAddress(Output.of(useLocalAzureIpAddress));
        }

        /**
         * @param usePolicyBasedTrafficSelectors Enable policy-based traffic selectors.
         * 
         * @return builder
         * 
         */
        public Builder usePolicyBasedTrafficSelectors(@Nullable Output<Boolean> usePolicyBasedTrafficSelectors) {
            $.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            return this;
        }

        /**
         * @param usePolicyBasedTrafficSelectors Enable policy-based traffic selectors.
         * 
         * @return builder
         * 
         */
        public Builder usePolicyBasedTrafficSelectors(Boolean usePolicyBasedTrafficSelectors) {
            return usePolicyBasedTrafficSelectors(Output.of(usePolicyBasedTrafficSelectors));
        }

        /**
         * @param virtualNetworkGateway1 The reference to virtual network gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkGateway1(Output<VirtualNetworkGatewayArgs> virtualNetworkGateway1) {
            $.virtualNetworkGateway1 = virtualNetworkGateway1;
            return this;
        }

        /**
         * @param virtualNetworkGateway1 The reference to virtual network gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkGateway1(VirtualNetworkGatewayArgs virtualNetworkGateway1) {
            return virtualNetworkGateway1(Output.of(virtualNetworkGateway1));
        }

        /**
         * @param virtualNetworkGateway2 The reference to virtual network gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkGateway2(@Nullable Output<VirtualNetworkGatewayArgs> virtualNetworkGateway2) {
            $.virtualNetworkGateway2 = virtualNetworkGateway2;
            return this;
        }

        /**
         * @param virtualNetworkGateway2 The reference to virtual network gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkGateway2(VirtualNetworkGatewayArgs virtualNetworkGateway2) {
            return virtualNetworkGateway2(Output.of(virtualNetworkGateway2));
        }

        /**
         * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkGatewayConnectionName(@Nullable Output<String> virtualNetworkGatewayConnectionName) {
            $.virtualNetworkGatewayConnectionName = virtualNetworkGatewayConnectionName;
            return this;
        }

        /**
         * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkGatewayConnectionName(String virtualNetworkGatewayConnectionName) {
            return virtualNetworkGatewayConnectionName(Output.of(virtualNetworkGatewayConnectionName));
        }

        public VirtualNetworkGatewayConnectionArgs build() {
            $.connectionType = Objects.requireNonNull($.connectionType, "expected parameter 'connectionType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.virtualNetworkGateway1 = Objects.requireNonNull($.virtualNetworkGateway1, "expected parameter 'virtualNetworkGateway1' to be non-null");
            return $;
        }
    }

}
