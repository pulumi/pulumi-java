// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.inputs.LogMetricTriggerResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The condition that results in the Log Search rule.
 * 
 */
public final class TriggerConditionResponse extends com.pulumi.resources.InvokeArgs {

    public static final TriggerConditionResponse Empty = new TriggerConditionResponse();

    /**
     * Trigger condition for metric query rule
     * 
     */
    @Import(name="metricTrigger")
    private @Nullable LogMetricTriggerResponse metricTrigger;

    public Optional<LogMetricTriggerResponse> metricTrigger() {
        return Optional.ofNullable(this.metricTrigger);
    }

    /**
     * Result or count threshold based on which rule should be triggered.
     * 
     */
    @Import(name="threshold", required=true)
    private Double threshold;

    public Double threshold() {
        return this.threshold;
    }

    /**
     * Evaluation operation for rule - &#39;GreaterThan&#39; or &#39;LessThan.
     * 
     */
    @Import(name="thresholdOperator", required=true)
    private String thresholdOperator;

    public String thresholdOperator() {
        return this.thresholdOperator;
    }

    private TriggerConditionResponse() {}

    private TriggerConditionResponse(TriggerConditionResponse $) {
        this.metricTrigger = $.metricTrigger;
        this.threshold = $.threshold;
        this.thresholdOperator = $.thresholdOperator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerConditionResponse $;

        public Builder() {
            $ = new TriggerConditionResponse();
        }

        public Builder(TriggerConditionResponse defaults) {
            $ = new TriggerConditionResponse(Objects.requireNonNull(defaults));
        }

        public Builder metricTrigger(@Nullable LogMetricTriggerResponse metricTrigger) {
            $.metricTrigger = metricTrigger;
            return this;
        }

        public Builder threshold(Double threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder thresholdOperator(String thresholdOperator) {
            $.thresholdOperator = thresholdOperator;
            return this;
        }

        public TriggerConditionResponse build() {
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            $.thresholdOperator = Objects.requireNonNull($.thresholdOperator, "expected parameter 'thresholdOperator' to be non-null");
            return $;
        }
    }

}
