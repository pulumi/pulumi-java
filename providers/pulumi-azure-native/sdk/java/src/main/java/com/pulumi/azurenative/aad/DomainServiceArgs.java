// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.aad;

import com.pulumi.azurenative.aad.enums.FilteredSync;
import com.pulumi.azurenative.aad.inputs.DomainSecuritySettingsArgs;
import com.pulumi.azurenative.aad.inputs.LdapsSettingsArgs;
import com.pulumi.azurenative.aad.inputs.NotificationSettingsArgs;
import com.pulumi.azurenative.aad.inputs.ReplicaSetArgs;
import com.pulumi.azurenative.aad.inputs.ResourceForestSettingsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainServiceArgs Empty = new DomainServiceArgs();

    /**
     * Domain Configuration Type
     * 
     */
    @Import(name="domainConfigurationType")
    private @Nullable Output<String> domainConfigurationType;

    /**
     * @return Domain Configuration Type
     * 
     */
    public Optional<Output<String>> domainConfigurationType() {
        return Optional.ofNullable(this.domainConfigurationType);
    }

    /**
     * The name of the Azure domain that the user would like to deploy Domain Services to.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return The name of the Azure domain that the user would like to deploy Domain Services to.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * DomainSecurity Settings
     * 
     */
    @Import(name="domainSecuritySettings")
    private @Nullable Output<DomainSecuritySettingsArgs> domainSecuritySettings;

    /**
     * @return DomainSecurity Settings
     * 
     */
    public Optional<Output<DomainSecuritySettingsArgs>> domainSecuritySettings() {
        return Optional.ofNullable(this.domainSecuritySettings);
    }

    /**
     * The name of the domain service.
     * 
     */
    @Import(name="domainServiceName")
    private @Nullable Output<String> domainServiceName;

    /**
     * @return The name of the domain service.
     * 
     */
    public Optional<Output<String>> domainServiceName() {
        return Optional.ofNullable(this.domainServiceName);
    }

    /**
     * Enabled or Disabled flag to turn on Group-based filtered sync
     * 
     */
    @Import(name="filteredSync")
    private @Nullable Output<Either<String,FilteredSync>> filteredSync;

    /**
     * @return Enabled or Disabled flag to turn on Group-based filtered sync
     * 
     */
    public Optional<Output<Either<String,FilteredSync>>> filteredSync() {
        return Optional.ofNullable(this.filteredSync);
    }

    /**
     * Secure LDAP Settings
     * 
     */
    @Import(name="ldapsSettings")
    private @Nullable Output<LdapsSettingsArgs> ldapsSettings;

    /**
     * @return Secure LDAP Settings
     * 
     */
    public Optional<Output<LdapsSettingsArgs>> ldapsSettings() {
        return Optional.ofNullable(this.ldapsSettings);
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Notification Settings
     * 
     */
    @Import(name="notificationSettings")
    private @Nullable Output<NotificationSettingsArgs> notificationSettings;

    /**
     * @return Notification Settings
     * 
     */
    public Optional<Output<NotificationSettingsArgs>> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }

    /**
     * List of ReplicaSets
     * 
     */
    @Import(name="replicaSets")
    private @Nullable Output<List<ReplicaSetArgs>> replicaSets;

    /**
     * @return List of ReplicaSets
     * 
     */
    public Optional<Output<List<ReplicaSetArgs>>> replicaSets() {
        return Optional.ofNullable(this.replicaSets);
    }

    /**
     * Resource Forest Settings
     * 
     */
    @Import(name="resourceForestSettings")
    private @Nullable Output<ResourceForestSettingsArgs> resourceForestSettings;

    /**
     * @return Resource Forest Settings
     * 
     */
    public Optional<Output<ResourceForestSettingsArgs>> resourceForestSettings() {
        return Optional.ofNullable(this.resourceForestSettings);
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Sku Type
     * 
     */
    @Import(name="sku")
    private @Nullable Output<String> sku;

    /**
     * @return Sku Type
     * 
     */
    public Optional<Output<String>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DomainServiceArgs() {}

    private DomainServiceArgs(DomainServiceArgs $) {
        this.domainConfigurationType = $.domainConfigurationType;
        this.domainName = $.domainName;
        this.domainSecuritySettings = $.domainSecuritySettings;
        this.domainServiceName = $.domainServiceName;
        this.filteredSync = $.filteredSync;
        this.ldapsSettings = $.ldapsSettings;
        this.location = $.location;
        this.notificationSettings = $.notificationSettings;
        this.replicaSets = $.replicaSets;
        this.resourceForestSettings = $.resourceForestSettings;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainServiceArgs $;

        public Builder() {
            $ = new DomainServiceArgs();
        }

        public Builder(DomainServiceArgs defaults) {
            $ = new DomainServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainConfigurationType Domain Configuration Type
         * 
         * @return builder
         * 
         */
        public Builder domainConfigurationType(@Nullable Output<String> domainConfigurationType) {
            $.domainConfigurationType = domainConfigurationType;
            return this;
        }

        /**
         * @param domainConfigurationType Domain Configuration Type
         * 
         * @return builder
         * 
         */
        public Builder domainConfigurationType(String domainConfigurationType) {
            return domainConfigurationType(Output.of(domainConfigurationType));
        }

        /**
         * @param domainName The name of the Azure domain that the user would like to deploy Domain Services to.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The name of the Azure domain that the user would like to deploy Domain Services to.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainSecuritySettings DomainSecurity Settings
         * 
         * @return builder
         * 
         */
        public Builder domainSecuritySettings(@Nullable Output<DomainSecuritySettingsArgs> domainSecuritySettings) {
            $.domainSecuritySettings = domainSecuritySettings;
            return this;
        }

        /**
         * @param domainSecuritySettings DomainSecurity Settings
         * 
         * @return builder
         * 
         */
        public Builder domainSecuritySettings(DomainSecuritySettingsArgs domainSecuritySettings) {
            return domainSecuritySettings(Output.of(domainSecuritySettings));
        }

        /**
         * @param domainServiceName The name of the domain service.
         * 
         * @return builder
         * 
         */
        public Builder domainServiceName(@Nullable Output<String> domainServiceName) {
            $.domainServiceName = domainServiceName;
            return this;
        }

        /**
         * @param domainServiceName The name of the domain service.
         * 
         * @return builder
         * 
         */
        public Builder domainServiceName(String domainServiceName) {
            return domainServiceName(Output.of(domainServiceName));
        }

        /**
         * @param filteredSync Enabled or Disabled flag to turn on Group-based filtered sync
         * 
         * @return builder
         * 
         */
        public Builder filteredSync(@Nullable Output<Either<String,FilteredSync>> filteredSync) {
            $.filteredSync = filteredSync;
            return this;
        }

        /**
         * @param filteredSync Enabled or Disabled flag to turn on Group-based filtered sync
         * 
         * @return builder
         * 
         */
        public Builder filteredSync(Either<String,FilteredSync> filteredSync) {
            return filteredSync(Output.of(filteredSync));
        }

        /**
         * @param filteredSync Enabled or Disabled flag to turn on Group-based filtered sync
         * 
         * @return builder
         * 
         */
        public Builder filteredSync(String filteredSync) {
            return filteredSync(Either.ofLeft(filteredSync));
        }

        /**
         * @param filteredSync Enabled or Disabled flag to turn on Group-based filtered sync
         * 
         * @return builder
         * 
         */
        public Builder filteredSync(FilteredSync filteredSync) {
            return filteredSync(Either.ofRight(filteredSync));
        }

        /**
         * @param ldapsSettings Secure LDAP Settings
         * 
         * @return builder
         * 
         */
        public Builder ldapsSettings(@Nullable Output<LdapsSettingsArgs> ldapsSettings) {
            $.ldapsSettings = ldapsSettings;
            return this;
        }

        /**
         * @param ldapsSettings Secure LDAP Settings
         * 
         * @return builder
         * 
         */
        public Builder ldapsSettings(LdapsSettingsArgs ldapsSettings) {
            return ldapsSettings(Output.of(ldapsSettings));
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param notificationSettings Notification Settings
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(@Nullable Output<NotificationSettingsArgs> notificationSettings) {
            $.notificationSettings = notificationSettings;
            return this;
        }

        /**
         * @param notificationSettings Notification Settings
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(NotificationSettingsArgs notificationSettings) {
            return notificationSettings(Output.of(notificationSettings));
        }

        /**
         * @param replicaSets List of ReplicaSets
         * 
         * @return builder
         * 
         */
        public Builder replicaSets(@Nullable Output<List<ReplicaSetArgs>> replicaSets) {
            $.replicaSets = replicaSets;
            return this;
        }

        /**
         * @param replicaSets List of ReplicaSets
         * 
         * @return builder
         * 
         */
        public Builder replicaSets(List<ReplicaSetArgs> replicaSets) {
            return replicaSets(Output.of(replicaSets));
        }

        /**
         * @param replicaSets List of ReplicaSets
         * 
         * @return builder
         * 
         */
        public Builder replicaSets(ReplicaSetArgs... replicaSets) {
            return replicaSets(List.of(replicaSets));
        }

        /**
         * @param resourceForestSettings Resource Forest Settings
         * 
         * @return builder
         * 
         */
        public Builder resourceForestSettings(@Nullable Output<ResourceForestSettingsArgs> resourceForestSettings) {
            $.resourceForestSettings = resourceForestSettings;
            return this;
        }

        /**
         * @param resourceForestSettings Resource Forest Settings
         * 
         * @return builder
         * 
         */
        public Builder resourceForestSettings(ResourceForestSettingsArgs resourceForestSettings) {
            return resourceForestSettings(Output.of(resourceForestSettings));
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sku Sku Type
         * 
         * @return builder
         * 
         */
        public Builder sku(@Nullable Output<String> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku Sku Type
         * 
         * @return builder
         * 
         */
        public Builder sku(String sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DomainServiceArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
