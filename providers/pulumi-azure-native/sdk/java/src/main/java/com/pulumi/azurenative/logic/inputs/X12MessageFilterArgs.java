// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.azurenative.logic.enums.MessageFilterType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * The X12 message filter for odata query.
 * 
 */
public final class X12MessageFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final X12MessageFilterArgs Empty = new X12MessageFilterArgs();

    /**
     * The message filter type.
     * 
     */
    @Import(name="messageFilterType", required=true)
      private final Output<Either<String,MessageFilterType>> messageFilterType;

    public Output<Either<String,MessageFilterType>> messageFilterType() {
        return this.messageFilterType;
    }

    public X12MessageFilterArgs(Output<Either<String,MessageFilterType>> messageFilterType) {
        this.messageFilterType = Objects.requireNonNull(messageFilterType, "expected parameter 'messageFilterType' to be non-null");
    }

    private X12MessageFilterArgs() {
        this.messageFilterType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12MessageFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,MessageFilterType>> messageFilterType;

        public Builder() {
    	      // Empty
        }

        public Builder(X12MessageFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.messageFilterType = defaults.messageFilterType;
        }

        public Builder messageFilterType(Output<Either<String,MessageFilterType>> messageFilterType) {
            this.messageFilterType = Objects.requireNonNull(messageFilterType);
            return this;
        }
        public Builder messageFilterType(Either<String,MessageFilterType> messageFilterType) {
            this.messageFilterType = Output.of(Objects.requireNonNull(messageFilterType));
            return this;
        }        public X12MessageFilterArgs build() {
            return new X12MessageFilterArgs(messageFilterType);
        }
    }
}
