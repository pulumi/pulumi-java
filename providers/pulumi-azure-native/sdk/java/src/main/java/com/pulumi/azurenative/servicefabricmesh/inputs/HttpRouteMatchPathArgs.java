// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.inputs;

import com.pulumi.azurenative.servicefabricmesh.enums.PathMatchType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Path to match for routing.
 * 
 */
public final class HttpRouteMatchPathArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteMatchPathArgs Empty = new HttpRouteMatchPathArgs();

    /**
     * replacement string for matched part of the Uri.
     * 
     */
    @Import(name="rewrite")
    private @Nullable Output<String> rewrite;

    /**
     * @return replacement string for matched part of the Uri.
     * 
     */
    public Optional<Output<String>> rewrite() {
        return Optional.ofNullable(this.rewrite);
    }

    /**
     * how to match value in the Uri
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,PathMatchType>> type;

    /**
     * @return how to match value in the Uri
     * 
     */
    public Output<Either<String,PathMatchType>> type() {
        return this.type;
    }

    /**
     * Uri path to match for request.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Uri path to match for request.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private HttpRouteMatchPathArgs() {}

    private HttpRouteMatchPathArgs(HttpRouteMatchPathArgs $) {
        this.rewrite = $.rewrite;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteMatchPathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteMatchPathArgs $;

        public Builder() {
            $ = new HttpRouteMatchPathArgs();
        }

        public Builder(HttpRouteMatchPathArgs defaults) {
            $ = new HttpRouteMatchPathArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rewrite replacement string for matched part of the Uri.
         * 
         * @return builder
         * 
         */
        public Builder rewrite(@Nullable Output<String> rewrite) {
            $.rewrite = rewrite;
            return this;
        }

        /**
         * @param rewrite replacement string for matched part of the Uri.
         * 
         * @return builder
         * 
         */
        public Builder rewrite(String rewrite) {
            return rewrite(Output.of(rewrite));
        }

        /**
         * @param type how to match value in the Uri
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,PathMatchType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type how to match value in the Uri
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,PathMatchType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type how to match value in the Uri
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type how to match value in the Uri
         * 
         * @return builder
         * 
         */
        public Builder type(PathMatchType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param value Uri path to match for request.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Uri path to match for request.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public HttpRouteMatchPathArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
