// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The Edifact agreement envelope settings.
 * 
 */
public final class EdifactEnvelopeSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final EdifactEnvelopeSettingsArgs Empty = new EdifactEnvelopeSettingsArgs();

    /**
     * The application reference id.
     * 
     */
    @Import(name="applicationReferenceId")
      private final @Nullable Output<String> applicationReferenceId;

    public Output<String> applicationReferenceId() {
        return this.applicationReferenceId == null ? Codegen.empty() : this.applicationReferenceId;
    }

    /**
     * The value indicating whether to apply delimiter string advice.
     * 
     */
    @Import(name="applyDelimiterStringAdvice", required=true)
      private final Output<Boolean> applyDelimiterStringAdvice;

    public Output<Boolean> applyDelimiterStringAdvice() {
        return this.applyDelimiterStringAdvice;
    }

    /**
     * The communication agreement id.
     * 
     */
    @Import(name="communicationAgreementId")
      private final @Nullable Output<String> communicationAgreementId;

    public Output<String> communicationAgreementId() {
        return this.communicationAgreementId == null ? Codegen.empty() : this.communicationAgreementId;
    }

    /**
     * The value indicating whether to create grouping segments.
     * 
     */
    @Import(name="createGroupingSegments", required=true)
      private final Output<Boolean> createGroupingSegments;

    public Output<Boolean> createGroupingSegments() {
        return this.createGroupingSegments;
    }

    /**
     * The value indicating whether to enable default group headers.
     * 
     */
    @Import(name="enableDefaultGroupHeaders", required=true)
      private final Output<Boolean> enableDefaultGroupHeaders;

    public Output<Boolean> enableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }

    /**
     * The functional group id.
     * 
     */
    @Import(name="functionalGroupId")
      private final @Nullable Output<String> functionalGroupId;

    public Output<String> functionalGroupId() {
        return this.functionalGroupId == null ? Codegen.empty() : this.functionalGroupId;
    }

    /**
     * The group application password.
     * 
     */
    @Import(name="groupApplicationPassword")
      private final @Nullable Output<String> groupApplicationPassword;

    public Output<String> groupApplicationPassword() {
        return this.groupApplicationPassword == null ? Codegen.empty() : this.groupApplicationPassword;
    }

    /**
     * The group application receiver id.
     * 
     */
    @Import(name="groupApplicationReceiverId")
      private final @Nullable Output<String> groupApplicationReceiverId;

    public Output<String> groupApplicationReceiverId() {
        return this.groupApplicationReceiverId == null ? Codegen.empty() : this.groupApplicationReceiverId;
    }

    /**
     * The group application receiver qualifier.
     * 
     */
    @Import(name="groupApplicationReceiverQualifier")
      private final @Nullable Output<String> groupApplicationReceiverQualifier;

    public Output<String> groupApplicationReceiverQualifier() {
        return this.groupApplicationReceiverQualifier == null ? Codegen.empty() : this.groupApplicationReceiverQualifier;
    }

    /**
     * The group application sender id.
     * 
     */
    @Import(name="groupApplicationSenderId")
      private final @Nullable Output<String> groupApplicationSenderId;

    public Output<String> groupApplicationSenderId() {
        return this.groupApplicationSenderId == null ? Codegen.empty() : this.groupApplicationSenderId;
    }

    /**
     * The group application sender qualifier.
     * 
     */
    @Import(name="groupApplicationSenderQualifier")
      private final @Nullable Output<String> groupApplicationSenderQualifier;

    public Output<String> groupApplicationSenderQualifier() {
        return this.groupApplicationSenderQualifier == null ? Codegen.empty() : this.groupApplicationSenderQualifier;
    }

    /**
     * The group association assigned code.
     * 
     */
    @Import(name="groupAssociationAssignedCode")
      private final @Nullable Output<String> groupAssociationAssignedCode;

    public Output<String> groupAssociationAssignedCode() {
        return this.groupAssociationAssignedCode == null ? Codegen.empty() : this.groupAssociationAssignedCode;
    }

    /**
     * The group control number lower bound.
     * 
     */
    @Import(name="groupControlNumberLowerBound", required=true)
      private final Output<Double> groupControlNumberLowerBound;

    public Output<Double> groupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }

    /**
     * The group control number prefix.
     * 
     */
    @Import(name="groupControlNumberPrefix")
      private final @Nullable Output<String> groupControlNumberPrefix;

    public Output<String> groupControlNumberPrefix() {
        return this.groupControlNumberPrefix == null ? Codegen.empty() : this.groupControlNumberPrefix;
    }

    /**
     * The group control number suffix.
     * 
     */
    @Import(name="groupControlNumberSuffix")
      private final @Nullable Output<String> groupControlNumberSuffix;

    public Output<String> groupControlNumberSuffix() {
        return this.groupControlNumberSuffix == null ? Codegen.empty() : this.groupControlNumberSuffix;
    }

    /**
     * The group control number upper bound.
     * 
     */
    @Import(name="groupControlNumberUpperBound", required=true)
      private final Output<Double> groupControlNumberUpperBound;

    public Output<Double> groupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }

    /**
     * The group controlling agency code.
     * 
     */
    @Import(name="groupControllingAgencyCode")
      private final @Nullable Output<String> groupControllingAgencyCode;

    public Output<String> groupControllingAgencyCode() {
        return this.groupControllingAgencyCode == null ? Codegen.empty() : this.groupControllingAgencyCode;
    }

    /**
     * The group message release.
     * 
     */
    @Import(name="groupMessageRelease")
      private final @Nullable Output<String> groupMessageRelease;

    public Output<String> groupMessageRelease() {
        return this.groupMessageRelease == null ? Codegen.empty() : this.groupMessageRelease;
    }

    /**
     * The group message version.
     * 
     */
    @Import(name="groupMessageVersion")
      private final @Nullable Output<String> groupMessageVersion;

    public Output<String> groupMessageVersion() {
        return this.groupMessageVersion == null ? Codegen.empty() : this.groupMessageVersion;
    }

    /**
     * The interchange control number lower bound.
     * 
     */
    @Import(name="interchangeControlNumberLowerBound", required=true)
      private final Output<Double> interchangeControlNumberLowerBound;

    public Output<Double> interchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }

    /**
     * The interchange control number prefix.
     * 
     */
    @Import(name="interchangeControlNumberPrefix")
      private final @Nullable Output<String> interchangeControlNumberPrefix;

    public Output<String> interchangeControlNumberPrefix() {
        return this.interchangeControlNumberPrefix == null ? Codegen.empty() : this.interchangeControlNumberPrefix;
    }

    /**
     * The interchange control number suffix.
     * 
     */
    @Import(name="interchangeControlNumberSuffix")
      private final @Nullable Output<String> interchangeControlNumberSuffix;

    public Output<String> interchangeControlNumberSuffix() {
        return this.interchangeControlNumberSuffix == null ? Codegen.empty() : this.interchangeControlNumberSuffix;
    }

    /**
     * The interchange control number upper bound.
     * 
     */
    @Import(name="interchangeControlNumberUpperBound", required=true)
      private final Output<Double> interchangeControlNumberUpperBound;

    public Output<Double> interchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }

    /**
     * The value indicating whether the message is a test interchange.
     * 
     */
    @Import(name="isTestInterchange", required=true)
      private final Output<Boolean> isTestInterchange;

    public Output<Boolean> isTestInterchange() {
        return this.isTestInterchange;
    }

    /**
     * The value indicating whether to overwrite existing transaction set control number.
     * 
     */
    @Import(name="overwriteExistingTransactionSetControlNumber", required=true)
      private final Output<Boolean> overwriteExistingTransactionSetControlNumber;

    public Output<Boolean> overwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }

    /**
     * The processing priority code.
     * 
     */
    @Import(name="processingPriorityCode")
      private final @Nullable Output<String> processingPriorityCode;

    public Output<String> processingPriorityCode() {
        return this.processingPriorityCode == null ? Codegen.empty() : this.processingPriorityCode;
    }

    /**
     * The receiver internal identification.
     * 
     */
    @Import(name="receiverInternalIdentification")
      private final @Nullable Output<String> receiverInternalIdentification;

    public Output<String> receiverInternalIdentification() {
        return this.receiverInternalIdentification == null ? Codegen.empty() : this.receiverInternalIdentification;
    }

    /**
     * The receiver internal sub identification.
     * 
     */
    @Import(name="receiverInternalSubIdentification")
      private final @Nullable Output<String> receiverInternalSubIdentification;

    public Output<String> receiverInternalSubIdentification() {
        return this.receiverInternalSubIdentification == null ? Codegen.empty() : this.receiverInternalSubIdentification;
    }

    /**
     * The receiver reverse routing address.
     * 
     */
    @Import(name="receiverReverseRoutingAddress")
      private final @Nullable Output<String> receiverReverseRoutingAddress;

    public Output<String> receiverReverseRoutingAddress() {
        return this.receiverReverseRoutingAddress == null ? Codegen.empty() : this.receiverReverseRoutingAddress;
    }

    /**
     * The recipient reference password qualifier.
     * 
     */
    @Import(name="recipientReferencePasswordQualifier")
      private final @Nullable Output<String> recipientReferencePasswordQualifier;

    public Output<String> recipientReferencePasswordQualifier() {
        return this.recipientReferencePasswordQualifier == null ? Codegen.empty() : this.recipientReferencePasswordQualifier;
    }

    /**
     * The recipient reference password value.
     * 
     */
    @Import(name="recipientReferencePasswordValue")
      private final @Nullable Output<String> recipientReferencePasswordValue;

    public Output<String> recipientReferencePasswordValue() {
        return this.recipientReferencePasswordValue == null ? Codegen.empty() : this.recipientReferencePasswordValue;
    }

    /**
     * The value indicating whether to rollover group control number.
     * 
     */
    @Import(name="rolloverGroupControlNumber", required=true)
      private final Output<Boolean> rolloverGroupControlNumber;

    public Output<Boolean> rolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }

    /**
     * The value indicating whether to rollover interchange control number.
     * 
     */
    @Import(name="rolloverInterchangeControlNumber", required=true)
      private final Output<Boolean> rolloverInterchangeControlNumber;

    public Output<Boolean> rolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }

    /**
     * The value indicating whether to rollover transaction set control number.
     * 
     */
    @Import(name="rolloverTransactionSetControlNumber", required=true)
      private final Output<Boolean> rolloverTransactionSetControlNumber;

    public Output<Boolean> rolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }

    /**
     * The sender internal identification.
     * 
     */
    @Import(name="senderInternalIdentification")
      private final @Nullable Output<String> senderInternalIdentification;

    public Output<String> senderInternalIdentification() {
        return this.senderInternalIdentification == null ? Codegen.empty() : this.senderInternalIdentification;
    }

    /**
     * The sender internal sub identification.
     * 
     */
    @Import(name="senderInternalSubIdentification")
      private final @Nullable Output<String> senderInternalSubIdentification;

    public Output<String> senderInternalSubIdentification() {
        return this.senderInternalSubIdentification == null ? Codegen.empty() : this.senderInternalSubIdentification;
    }

    /**
     * The sender reverse routing address.
     * 
     */
    @Import(name="senderReverseRoutingAddress")
      private final @Nullable Output<String> senderReverseRoutingAddress;

    public Output<String> senderReverseRoutingAddress() {
        return this.senderReverseRoutingAddress == null ? Codegen.empty() : this.senderReverseRoutingAddress;
    }

    /**
     * The transaction set control number lower bound.
     * 
     */
    @Import(name="transactionSetControlNumberLowerBound", required=true)
      private final Output<Double> transactionSetControlNumberLowerBound;

    public Output<Double> transactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }

    /**
     * The transaction set control number prefix.
     * 
     */
    @Import(name="transactionSetControlNumberPrefix")
      private final @Nullable Output<String> transactionSetControlNumberPrefix;

    public Output<String> transactionSetControlNumberPrefix() {
        return this.transactionSetControlNumberPrefix == null ? Codegen.empty() : this.transactionSetControlNumberPrefix;
    }

    /**
     * The transaction set control number suffix.
     * 
     */
    @Import(name="transactionSetControlNumberSuffix")
      private final @Nullable Output<String> transactionSetControlNumberSuffix;

    public Output<String> transactionSetControlNumberSuffix() {
        return this.transactionSetControlNumberSuffix == null ? Codegen.empty() : this.transactionSetControlNumberSuffix;
    }

    /**
     * The transaction set control number upper bound.
     * 
     */
    @Import(name="transactionSetControlNumberUpperBound", required=true)
      private final Output<Double> transactionSetControlNumberUpperBound;

    public Output<Double> transactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }

    public EdifactEnvelopeSettingsArgs(
        @Nullable Output<String> applicationReferenceId,
        Output<Boolean> applyDelimiterStringAdvice,
        @Nullable Output<String> communicationAgreementId,
        Output<Boolean> createGroupingSegments,
        Output<Boolean> enableDefaultGroupHeaders,
        @Nullable Output<String> functionalGroupId,
        @Nullable Output<String> groupApplicationPassword,
        @Nullable Output<String> groupApplicationReceiverId,
        @Nullable Output<String> groupApplicationReceiverQualifier,
        @Nullable Output<String> groupApplicationSenderId,
        @Nullable Output<String> groupApplicationSenderQualifier,
        @Nullable Output<String> groupAssociationAssignedCode,
        Output<Double> groupControlNumberLowerBound,
        @Nullable Output<String> groupControlNumberPrefix,
        @Nullable Output<String> groupControlNumberSuffix,
        Output<Double> groupControlNumberUpperBound,
        @Nullable Output<String> groupControllingAgencyCode,
        @Nullable Output<String> groupMessageRelease,
        @Nullable Output<String> groupMessageVersion,
        Output<Double> interchangeControlNumberLowerBound,
        @Nullable Output<String> interchangeControlNumberPrefix,
        @Nullable Output<String> interchangeControlNumberSuffix,
        Output<Double> interchangeControlNumberUpperBound,
        Output<Boolean> isTestInterchange,
        Output<Boolean> overwriteExistingTransactionSetControlNumber,
        @Nullable Output<String> processingPriorityCode,
        @Nullable Output<String> receiverInternalIdentification,
        @Nullable Output<String> receiverInternalSubIdentification,
        @Nullable Output<String> receiverReverseRoutingAddress,
        @Nullable Output<String> recipientReferencePasswordQualifier,
        @Nullable Output<String> recipientReferencePasswordValue,
        Output<Boolean> rolloverGroupControlNumber,
        Output<Boolean> rolloverInterchangeControlNumber,
        Output<Boolean> rolloverTransactionSetControlNumber,
        @Nullable Output<String> senderInternalIdentification,
        @Nullable Output<String> senderInternalSubIdentification,
        @Nullable Output<String> senderReverseRoutingAddress,
        Output<Double> transactionSetControlNumberLowerBound,
        @Nullable Output<String> transactionSetControlNumberPrefix,
        @Nullable Output<String> transactionSetControlNumberSuffix,
        Output<Double> transactionSetControlNumberUpperBound) {
        this.applicationReferenceId = applicationReferenceId;
        this.applyDelimiterStringAdvice = Objects.requireNonNull(applyDelimiterStringAdvice, "expected parameter 'applyDelimiterStringAdvice' to be non-null");
        this.communicationAgreementId = communicationAgreementId;
        this.createGroupingSegments = Objects.requireNonNull(createGroupingSegments, "expected parameter 'createGroupingSegments' to be non-null");
        this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders, "expected parameter 'enableDefaultGroupHeaders' to be non-null");
        this.functionalGroupId = functionalGroupId;
        this.groupApplicationPassword = groupApplicationPassword;
        this.groupApplicationReceiverId = groupApplicationReceiverId;
        this.groupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
        this.groupApplicationSenderId = groupApplicationSenderId;
        this.groupApplicationSenderQualifier = groupApplicationSenderQualifier;
        this.groupAssociationAssignedCode = groupAssociationAssignedCode;
        this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound, "expected parameter 'groupControlNumberLowerBound' to be non-null");
        this.groupControlNumberPrefix = groupControlNumberPrefix;
        this.groupControlNumberSuffix = groupControlNumberSuffix;
        this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound, "expected parameter 'groupControlNumberUpperBound' to be non-null");
        this.groupControllingAgencyCode = groupControllingAgencyCode;
        this.groupMessageRelease = groupMessageRelease;
        this.groupMessageVersion = groupMessageVersion;
        this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound, "expected parameter 'interchangeControlNumberLowerBound' to be non-null");
        this.interchangeControlNumberPrefix = interchangeControlNumberPrefix;
        this.interchangeControlNumberSuffix = interchangeControlNumberSuffix;
        this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound, "expected parameter 'interchangeControlNumberUpperBound' to be non-null");
        this.isTestInterchange = Objects.requireNonNull(isTestInterchange, "expected parameter 'isTestInterchange' to be non-null");
        this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber, "expected parameter 'overwriteExistingTransactionSetControlNumber' to be non-null");
        this.processingPriorityCode = processingPriorityCode;
        this.receiverInternalIdentification = receiverInternalIdentification;
        this.receiverInternalSubIdentification = receiverInternalSubIdentification;
        this.receiverReverseRoutingAddress = receiverReverseRoutingAddress;
        this.recipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
        this.recipientReferencePasswordValue = recipientReferencePasswordValue;
        this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber, "expected parameter 'rolloverGroupControlNumber' to be non-null");
        this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber, "expected parameter 'rolloverInterchangeControlNumber' to be non-null");
        this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber, "expected parameter 'rolloverTransactionSetControlNumber' to be non-null");
        this.senderInternalIdentification = senderInternalIdentification;
        this.senderInternalSubIdentification = senderInternalSubIdentification;
        this.senderReverseRoutingAddress = senderReverseRoutingAddress;
        this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound, "expected parameter 'transactionSetControlNumberLowerBound' to be non-null");
        this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
        this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
        this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound, "expected parameter 'transactionSetControlNumberUpperBound' to be non-null");
    }

    private EdifactEnvelopeSettingsArgs() {
        this.applicationReferenceId = Codegen.empty();
        this.applyDelimiterStringAdvice = Codegen.empty();
        this.communicationAgreementId = Codegen.empty();
        this.createGroupingSegments = Codegen.empty();
        this.enableDefaultGroupHeaders = Codegen.empty();
        this.functionalGroupId = Codegen.empty();
        this.groupApplicationPassword = Codegen.empty();
        this.groupApplicationReceiverId = Codegen.empty();
        this.groupApplicationReceiverQualifier = Codegen.empty();
        this.groupApplicationSenderId = Codegen.empty();
        this.groupApplicationSenderQualifier = Codegen.empty();
        this.groupAssociationAssignedCode = Codegen.empty();
        this.groupControlNumberLowerBound = Codegen.empty();
        this.groupControlNumberPrefix = Codegen.empty();
        this.groupControlNumberSuffix = Codegen.empty();
        this.groupControlNumberUpperBound = Codegen.empty();
        this.groupControllingAgencyCode = Codegen.empty();
        this.groupMessageRelease = Codegen.empty();
        this.groupMessageVersion = Codegen.empty();
        this.interchangeControlNumberLowerBound = Codegen.empty();
        this.interchangeControlNumberPrefix = Codegen.empty();
        this.interchangeControlNumberSuffix = Codegen.empty();
        this.interchangeControlNumberUpperBound = Codegen.empty();
        this.isTestInterchange = Codegen.empty();
        this.overwriteExistingTransactionSetControlNumber = Codegen.empty();
        this.processingPriorityCode = Codegen.empty();
        this.receiverInternalIdentification = Codegen.empty();
        this.receiverInternalSubIdentification = Codegen.empty();
        this.receiverReverseRoutingAddress = Codegen.empty();
        this.recipientReferencePasswordQualifier = Codegen.empty();
        this.recipientReferencePasswordValue = Codegen.empty();
        this.rolloverGroupControlNumber = Codegen.empty();
        this.rolloverInterchangeControlNumber = Codegen.empty();
        this.rolloverTransactionSetControlNumber = Codegen.empty();
        this.senderInternalIdentification = Codegen.empty();
        this.senderInternalSubIdentification = Codegen.empty();
        this.senderReverseRoutingAddress = Codegen.empty();
        this.transactionSetControlNumberLowerBound = Codegen.empty();
        this.transactionSetControlNumberPrefix = Codegen.empty();
        this.transactionSetControlNumberSuffix = Codegen.empty();
        this.transactionSetControlNumberUpperBound = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdifactEnvelopeSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> applicationReferenceId;
        private Output<Boolean> applyDelimiterStringAdvice;
        private @Nullable Output<String> communicationAgreementId;
        private Output<Boolean> createGroupingSegments;
        private Output<Boolean> enableDefaultGroupHeaders;
        private @Nullable Output<String> functionalGroupId;
        private @Nullable Output<String> groupApplicationPassword;
        private @Nullable Output<String> groupApplicationReceiverId;
        private @Nullable Output<String> groupApplicationReceiverQualifier;
        private @Nullable Output<String> groupApplicationSenderId;
        private @Nullable Output<String> groupApplicationSenderQualifier;
        private @Nullable Output<String> groupAssociationAssignedCode;
        private Output<Double> groupControlNumberLowerBound;
        private @Nullable Output<String> groupControlNumberPrefix;
        private @Nullable Output<String> groupControlNumberSuffix;
        private Output<Double> groupControlNumberUpperBound;
        private @Nullable Output<String> groupControllingAgencyCode;
        private @Nullable Output<String> groupMessageRelease;
        private @Nullable Output<String> groupMessageVersion;
        private Output<Double> interchangeControlNumberLowerBound;
        private @Nullable Output<String> interchangeControlNumberPrefix;
        private @Nullable Output<String> interchangeControlNumberSuffix;
        private Output<Double> interchangeControlNumberUpperBound;
        private Output<Boolean> isTestInterchange;
        private Output<Boolean> overwriteExistingTransactionSetControlNumber;
        private @Nullable Output<String> processingPriorityCode;
        private @Nullable Output<String> receiverInternalIdentification;
        private @Nullable Output<String> receiverInternalSubIdentification;
        private @Nullable Output<String> receiverReverseRoutingAddress;
        private @Nullable Output<String> recipientReferencePasswordQualifier;
        private @Nullable Output<String> recipientReferencePasswordValue;
        private Output<Boolean> rolloverGroupControlNumber;
        private Output<Boolean> rolloverInterchangeControlNumber;
        private Output<Boolean> rolloverTransactionSetControlNumber;
        private @Nullable Output<String> senderInternalIdentification;
        private @Nullable Output<String> senderInternalSubIdentification;
        private @Nullable Output<String> senderReverseRoutingAddress;
        private Output<Double> transactionSetControlNumberLowerBound;
        private @Nullable Output<String> transactionSetControlNumberPrefix;
        private @Nullable Output<String> transactionSetControlNumberSuffix;
        private Output<Double> transactionSetControlNumberUpperBound;

        public Builder() {
    	      // Empty
        }

        public Builder(EdifactEnvelopeSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationReferenceId = defaults.applicationReferenceId;
    	      this.applyDelimiterStringAdvice = defaults.applyDelimiterStringAdvice;
    	      this.communicationAgreementId = defaults.communicationAgreementId;
    	      this.createGroupingSegments = defaults.createGroupingSegments;
    	      this.enableDefaultGroupHeaders = defaults.enableDefaultGroupHeaders;
    	      this.functionalGroupId = defaults.functionalGroupId;
    	      this.groupApplicationPassword = defaults.groupApplicationPassword;
    	      this.groupApplicationReceiverId = defaults.groupApplicationReceiverId;
    	      this.groupApplicationReceiverQualifier = defaults.groupApplicationReceiverQualifier;
    	      this.groupApplicationSenderId = defaults.groupApplicationSenderId;
    	      this.groupApplicationSenderQualifier = defaults.groupApplicationSenderQualifier;
    	      this.groupAssociationAssignedCode = defaults.groupAssociationAssignedCode;
    	      this.groupControlNumberLowerBound = defaults.groupControlNumberLowerBound;
    	      this.groupControlNumberPrefix = defaults.groupControlNumberPrefix;
    	      this.groupControlNumberSuffix = defaults.groupControlNumberSuffix;
    	      this.groupControlNumberUpperBound = defaults.groupControlNumberUpperBound;
    	      this.groupControllingAgencyCode = defaults.groupControllingAgencyCode;
    	      this.groupMessageRelease = defaults.groupMessageRelease;
    	      this.groupMessageVersion = defaults.groupMessageVersion;
    	      this.interchangeControlNumberLowerBound = defaults.interchangeControlNumberLowerBound;
    	      this.interchangeControlNumberPrefix = defaults.interchangeControlNumberPrefix;
    	      this.interchangeControlNumberSuffix = defaults.interchangeControlNumberSuffix;
    	      this.interchangeControlNumberUpperBound = defaults.interchangeControlNumberUpperBound;
    	      this.isTestInterchange = defaults.isTestInterchange;
    	      this.overwriteExistingTransactionSetControlNumber = defaults.overwriteExistingTransactionSetControlNumber;
    	      this.processingPriorityCode = defaults.processingPriorityCode;
    	      this.receiverInternalIdentification = defaults.receiverInternalIdentification;
    	      this.receiverInternalSubIdentification = defaults.receiverInternalSubIdentification;
    	      this.receiverReverseRoutingAddress = defaults.receiverReverseRoutingAddress;
    	      this.recipientReferencePasswordQualifier = defaults.recipientReferencePasswordQualifier;
    	      this.recipientReferencePasswordValue = defaults.recipientReferencePasswordValue;
    	      this.rolloverGroupControlNumber = defaults.rolloverGroupControlNumber;
    	      this.rolloverInterchangeControlNumber = defaults.rolloverInterchangeControlNumber;
    	      this.rolloverTransactionSetControlNumber = defaults.rolloverTransactionSetControlNumber;
    	      this.senderInternalIdentification = defaults.senderInternalIdentification;
    	      this.senderInternalSubIdentification = defaults.senderInternalSubIdentification;
    	      this.senderReverseRoutingAddress = defaults.senderReverseRoutingAddress;
    	      this.transactionSetControlNumberLowerBound = defaults.transactionSetControlNumberLowerBound;
    	      this.transactionSetControlNumberPrefix = defaults.transactionSetControlNumberPrefix;
    	      this.transactionSetControlNumberSuffix = defaults.transactionSetControlNumberSuffix;
    	      this.transactionSetControlNumberUpperBound = defaults.transactionSetControlNumberUpperBound;
        }

        public Builder applicationReferenceId(@Nullable Output<String> applicationReferenceId) {
            this.applicationReferenceId = applicationReferenceId;
            return this;
        }
        public Builder applicationReferenceId(@Nullable String applicationReferenceId) {
            this.applicationReferenceId = Codegen.ofNullable(applicationReferenceId);
            return this;
        }
        public Builder applyDelimiterStringAdvice(Output<Boolean> applyDelimiterStringAdvice) {
            this.applyDelimiterStringAdvice = Objects.requireNonNull(applyDelimiterStringAdvice);
            return this;
        }
        public Builder applyDelimiterStringAdvice(Boolean applyDelimiterStringAdvice) {
            this.applyDelimiterStringAdvice = Output.of(Objects.requireNonNull(applyDelimiterStringAdvice));
            return this;
        }
        public Builder communicationAgreementId(@Nullable Output<String> communicationAgreementId) {
            this.communicationAgreementId = communicationAgreementId;
            return this;
        }
        public Builder communicationAgreementId(@Nullable String communicationAgreementId) {
            this.communicationAgreementId = Codegen.ofNullable(communicationAgreementId);
            return this;
        }
        public Builder createGroupingSegments(Output<Boolean> createGroupingSegments) {
            this.createGroupingSegments = Objects.requireNonNull(createGroupingSegments);
            return this;
        }
        public Builder createGroupingSegments(Boolean createGroupingSegments) {
            this.createGroupingSegments = Output.of(Objects.requireNonNull(createGroupingSegments));
            return this;
        }
        public Builder enableDefaultGroupHeaders(Output<Boolean> enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
            return this;
        }
        public Builder enableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Output.of(Objects.requireNonNull(enableDefaultGroupHeaders));
            return this;
        }
        public Builder functionalGroupId(@Nullable Output<String> functionalGroupId) {
            this.functionalGroupId = functionalGroupId;
            return this;
        }
        public Builder functionalGroupId(@Nullable String functionalGroupId) {
            this.functionalGroupId = Codegen.ofNullable(functionalGroupId);
            return this;
        }
        public Builder groupApplicationPassword(@Nullable Output<String> groupApplicationPassword) {
            this.groupApplicationPassword = groupApplicationPassword;
            return this;
        }
        public Builder groupApplicationPassword(@Nullable String groupApplicationPassword) {
            this.groupApplicationPassword = Codegen.ofNullable(groupApplicationPassword);
            return this;
        }
        public Builder groupApplicationReceiverId(@Nullable Output<String> groupApplicationReceiverId) {
            this.groupApplicationReceiverId = groupApplicationReceiverId;
            return this;
        }
        public Builder groupApplicationReceiverId(@Nullable String groupApplicationReceiverId) {
            this.groupApplicationReceiverId = Codegen.ofNullable(groupApplicationReceiverId);
            return this;
        }
        public Builder groupApplicationReceiverQualifier(@Nullable Output<String> groupApplicationReceiverQualifier) {
            this.groupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
            return this;
        }
        public Builder groupApplicationReceiverQualifier(@Nullable String groupApplicationReceiverQualifier) {
            this.groupApplicationReceiverQualifier = Codegen.ofNullable(groupApplicationReceiverQualifier);
            return this;
        }
        public Builder groupApplicationSenderId(@Nullable Output<String> groupApplicationSenderId) {
            this.groupApplicationSenderId = groupApplicationSenderId;
            return this;
        }
        public Builder groupApplicationSenderId(@Nullable String groupApplicationSenderId) {
            this.groupApplicationSenderId = Codegen.ofNullable(groupApplicationSenderId);
            return this;
        }
        public Builder groupApplicationSenderQualifier(@Nullable Output<String> groupApplicationSenderQualifier) {
            this.groupApplicationSenderQualifier = groupApplicationSenderQualifier;
            return this;
        }
        public Builder groupApplicationSenderQualifier(@Nullable String groupApplicationSenderQualifier) {
            this.groupApplicationSenderQualifier = Codegen.ofNullable(groupApplicationSenderQualifier);
            return this;
        }
        public Builder groupAssociationAssignedCode(@Nullable Output<String> groupAssociationAssignedCode) {
            this.groupAssociationAssignedCode = groupAssociationAssignedCode;
            return this;
        }
        public Builder groupAssociationAssignedCode(@Nullable String groupAssociationAssignedCode) {
            this.groupAssociationAssignedCode = Codegen.ofNullable(groupAssociationAssignedCode);
            return this;
        }
        public Builder groupControlNumberLowerBound(Output<Double> groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
            return this;
        }
        public Builder groupControlNumberLowerBound(Double groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Output.of(Objects.requireNonNull(groupControlNumberLowerBound));
            return this;
        }
        public Builder groupControlNumberPrefix(@Nullable Output<String> groupControlNumberPrefix) {
            this.groupControlNumberPrefix = groupControlNumberPrefix;
            return this;
        }
        public Builder groupControlNumberPrefix(@Nullable String groupControlNumberPrefix) {
            this.groupControlNumberPrefix = Codegen.ofNullable(groupControlNumberPrefix);
            return this;
        }
        public Builder groupControlNumberSuffix(@Nullable Output<String> groupControlNumberSuffix) {
            this.groupControlNumberSuffix = groupControlNumberSuffix;
            return this;
        }
        public Builder groupControlNumberSuffix(@Nullable String groupControlNumberSuffix) {
            this.groupControlNumberSuffix = Codegen.ofNullable(groupControlNumberSuffix);
            return this;
        }
        public Builder groupControlNumberUpperBound(Output<Double> groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
            return this;
        }
        public Builder groupControlNumberUpperBound(Double groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Output.of(Objects.requireNonNull(groupControlNumberUpperBound));
            return this;
        }
        public Builder groupControllingAgencyCode(@Nullable Output<String> groupControllingAgencyCode) {
            this.groupControllingAgencyCode = groupControllingAgencyCode;
            return this;
        }
        public Builder groupControllingAgencyCode(@Nullable String groupControllingAgencyCode) {
            this.groupControllingAgencyCode = Codegen.ofNullable(groupControllingAgencyCode);
            return this;
        }
        public Builder groupMessageRelease(@Nullable Output<String> groupMessageRelease) {
            this.groupMessageRelease = groupMessageRelease;
            return this;
        }
        public Builder groupMessageRelease(@Nullable String groupMessageRelease) {
            this.groupMessageRelease = Codegen.ofNullable(groupMessageRelease);
            return this;
        }
        public Builder groupMessageVersion(@Nullable Output<String> groupMessageVersion) {
            this.groupMessageVersion = groupMessageVersion;
            return this;
        }
        public Builder groupMessageVersion(@Nullable String groupMessageVersion) {
            this.groupMessageVersion = Codegen.ofNullable(groupMessageVersion);
            return this;
        }
        public Builder interchangeControlNumberLowerBound(Output<Double> interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
            return this;
        }
        public Builder interchangeControlNumberLowerBound(Double interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Output.of(Objects.requireNonNull(interchangeControlNumberLowerBound));
            return this;
        }
        public Builder interchangeControlNumberPrefix(@Nullable Output<String> interchangeControlNumberPrefix) {
            this.interchangeControlNumberPrefix = interchangeControlNumberPrefix;
            return this;
        }
        public Builder interchangeControlNumberPrefix(@Nullable String interchangeControlNumberPrefix) {
            this.interchangeControlNumberPrefix = Codegen.ofNullable(interchangeControlNumberPrefix);
            return this;
        }
        public Builder interchangeControlNumberSuffix(@Nullable Output<String> interchangeControlNumberSuffix) {
            this.interchangeControlNumberSuffix = interchangeControlNumberSuffix;
            return this;
        }
        public Builder interchangeControlNumberSuffix(@Nullable String interchangeControlNumberSuffix) {
            this.interchangeControlNumberSuffix = Codegen.ofNullable(interchangeControlNumberSuffix);
            return this;
        }
        public Builder interchangeControlNumberUpperBound(Output<Double> interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
            return this;
        }
        public Builder interchangeControlNumberUpperBound(Double interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Output.of(Objects.requireNonNull(interchangeControlNumberUpperBound));
            return this;
        }
        public Builder isTestInterchange(Output<Boolean> isTestInterchange) {
            this.isTestInterchange = Objects.requireNonNull(isTestInterchange);
            return this;
        }
        public Builder isTestInterchange(Boolean isTestInterchange) {
            this.isTestInterchange = Output.of(Objects.requireNonNull(isTestInterchange));
            return this;
        }
        public Builder overwriteExistingTransactionSetControlNumber(Output<Boolean> overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
            return this;
        }
        public Builder overwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Output.of(Objects.requireNonNull(overwriteExistingTransactionSetControlNumber));
            return this;
        }
        public Builder processingPriorityCode(@Nullable Output<String> processingPriorityCode) {
            this.processingPriorityCode = processingPriorityCode;
            return this;
        }
        public Builder processingPriorityCode(@Nullable String processingPriorityCode) {
            this.processingPriorityCode = Codegen.ofNullable(processingPriorityCode);
            return this;
        }
        public Builder receiverInternalIdentification(@Nullable Output<String> receiverInternalIdentification) {
            this.receiverInternalIdentification = receiverInternalIdentification;
            return this;
        }
        public Builder receiverInternalIdentification(@Nullable String receiverInternalIdentification) {
            this.receiverInternalIdentification = Codegen.ofNullable(receiverInternalIdentification);
            return this;
        }
        public Builder receiverInternalSubIdentification(@Nullable Output<String> receiverInternalSubIdentification) {
            this.receiverInternalSubIdentification = receiverInternalSubIdentification;
            return this;
        }
        public Builder receiverInternalSubIdentification(@Nullable String receiverInternalSubIdentification) {
            this.receiverInternalSubIdentification = Codegen.ofNullable(receiverInternalSubIdentification);
            return this;
        }
        public Builder receiverReverseRoutingAddress(@Nullable Output<String> receiverReverseRoutingAddress) {
            this.receiverReverseRoutingAddress = receiverReverseRoutingAddress;
            return this;
        }
        public Builder receiverReverseRoutingAddress(@Nullable String receiverReverseRoutingAddress) {
            this.receiverReverseRoutingAddress = Codegen.ofNullable(receiverReverseRoutingAddress);
            return this;
        }
        public Builder recipientReferencePasswordQualifier(@Nullable Output<String> recipientReferencePasswordQualifier) {
            this.recipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
            return this;
        }
        public Builder recipientReferencePasswordQualifier(@Nullable String recipientReferencePasswordQualifier) {
            this.recipientReferencePasswordQualifier = Codegen.ofNullable(recipientReferencePasswordQualifier);
            return this;
        }
        public Builder recipientReferencePasswordValue(@Nullable Output<String> recipientReferencePasswordValue) {
            this.recipientReferencePasswordValue = recipientReferencePasswordValue;
            return this;
        }
        public Builder recipientReferencePasswordValue(@Nullable String recipientReferencePasswordValue) {
            this.recipientReferencePasswordValue = Codegen.ofNullable(recipientReferencePasswordValue);
            return this;
        }
        public Builder rolloverGroupControlNumber(Output<Boolean> rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
            return this;
        }
        public Builder rolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Output.of(Objects.requireNonNull(rolloverGroupControlNumber));
            return this;
        }
        public Builder rolloverInterchangeControlNumber(Output<Boolean> rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
            return this;
        }
        public Builder rolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Output.of(Objects.requireNonNull(rolloverInterchangeControlNumber));
            return this;
        }
        public Builder rolloverTransactionSetControlNumber(Output<Boolean> rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
            return this;
        }
        public Builder rolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Output.of(Objects.requireNonNull(rolloverTransactionSetControlNumber));
            return this;
        }
        public Builder senderInternalIdentification(@Nullable Output<String> senderInternalIdentification) {
            this.senderInternalIdentification = senderInternalIdentification;
            return this;
        }
        public Builder senderInternalIdentification(@Nullable String senderInternalIdentification) {
            this.senderInternalIdentification = Codegen.ofNullable(senderInternalIdentification);
            return this;
        }
        public Builder senderInternalSubIdentification(@Nullable Output<String> senderInternalSubIdentification) {
            this.senderInternalSubIdentification = senderInternalSubIdentification;
            return this;
        }
        public Builder senderInternalSubIdentification(@Nullable String senderInternalSubIdentification) {
            this.senderInternalSubIdentification = Codegen.ofNullable(senderInternalSubIdentification);
            return this;
        }
        public Builder senderReverseRoutingAddress(@Nullable Output<String> senderReverseRoutingAddress) {
            this.senderReverseRoutingAddress = senderReverseRoutingAddress;
            return this;
        }
        public Builder senderReverseRoutingAddress(@Nullable String senderReverseRoutingAddress) {
            this.senderReverseRoutingAddress = Codegen.ofNullable(senderReverseRoutingAddress);
            return this;
        }
        public Builder transactionSetControlNumberLowerBound(Output<Double> transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
            return this;
        }
        public Builder transactionSetControlNumberLowerBound(Double transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Output.of(Objects.requireNonNull(transactionSetControlNumberLowerBound));
            return this;
        }
        public Builder transactionSetControlNumberPrefix(@Nullable Output<String> transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            return this;
        }
        public Builder transactionSetControlNumberPrefix(@Nullable String transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = Codegen.ofNullable(transactionSetControlNumberPrefix);
            return this;
        }
        public Builder transactionSetControlNumberSuffix(@Nullable Output<String> transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            return this;
        }
        public Builder transactionSetControlNumberSuffix(@Nullable String transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = Codegen.ofNullable(transactionSetControlNumberSuffix);
            return this;
        }
        public Builder transactionSetControlNumberUpperBound(Output<Double> transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
            return this;
        }
        public Builder transactionSetControlNumberUpperBound(Double transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Output.of(Objects.requireNonNull(transactionSetControlNumberUpperBound));
            return this;
        }        public EdifactEnvelopeSettingsArgs build() {
            return new EdifactEnvelopeSettingsArgs(applicationReferenceId, applyDelimiterStringAdvice, communicationAgreementId, createGroupingSegments, enableDefaultGroupHeaders, functionalGroupId, groupApplicationPassword, groupApplicationReceiverId, groupApplicationReceiverQualifier, groupApplicationSenderId, groupApplicationSenderQualifier, groupAssociationAssignedCode, groupControlNumberLowerBound, groupControlNumberPrefix, groupControlNumberSuffix, groupControlNumberUpperBound, groupControllingAgencyCode, groupMessageRelease, groupMessageVersion, interchangeControlNumberLowerBound, interchangeControlNumberPrefix, interchangeControlNumberSuffix, interchangeControlNumberUpperBound, isTestInterchange, overwriteExistingTransactionSetControlNumber, processingPriorityCode, receiverInternalIdentification, receiverInternalSubIdentification, receiverReverseRoutingAddress, recipientReferencePasswordQualifier, recipientReferencePasswordValue, rolloverGroupControlNumber, rolloverInterchangeControlNumber, rolloverTransactionSetControlNumber, senderInternalIdentification, senderInternalSubIdentification, senderReverseRoutingAddress, transactionSetControlNumberLowerBound, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberUpperBound);
        }
    }
}
