// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement;

import com.pulumi.azurenative.costmanagement.inputs.SettingsPropertiesCacheArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final SettingArgs Empty = new SettingArgs();

    /**
     * Array of scopes with additional details used by Cost Management in the Azure portal.
     * 
     */
    @Import(name="cache")
    private @Nullable Output<List<SettingsPropertiesCacheArgs>> cache;

    public Optional<Output<List<SettingsPropertiesCacheArgs>>> cache() {
        return Optional.ofNullable(this.cache);
    }

    /**
     * Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    public Output<String> scope() {
        return this.scope;
    }

    /**
     * Name of the setting. Allowed values: myscope
     * 
     */
    @Import(name="settingName")
    private @Nullable Output<String> settingName;

    public Optional<Output<String>> settingName() {
        return Optional.ofNullable(this.settingName);
    }

    /**
     * Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
     * 
     */
    @Import(name="startOn")
    private @Nullable Output<String> startOn;

    public Optional<Output<String>> startOn() {
        return Optional.ofNullable(this.startOn);
    }

    private SettingArgs() {}

    private SettingArgs(SettingArgs $) {
        this.cache = $.cache;
        this.scope = $.scope;
        this.settingName = $.settingName;
        this.startOn = $.startOn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SettingArgs $;

        public Builder() {
            $ = new SettingArgs();
        }

        public Builder(SettingArgs defaults) {
            $ = new SettingArgs(Objects.requireNonNull(defaults));
        }

        public Builder cache(@Nullable Output<List<SettingsPropertiesCacheArgs>> cache) {
            $.cache = cache;
            return this;
        }

        public Builder cache(List<SettingsPropertiesCacheArgs> cache) {
            return cache(Output.of(cache));
        }

        public Builder cache(SettingsPropertiesCacheArgs... cache) {
            return cache(List.of(cache));
        }

        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public Builder settingName(@Nullable Output<String> settingName) {
            $.settingName = settingName;
            return this;
        }

        public Builder settingName(String settingName) {
            return settingName(Output.of(settingName));
        }

        public Builder startOn(@Nullable Output<String> startOn) {
            $.startOn = startOn;
            return this;
        }

        public Builder startOn(String startOn) {
            return startOn(Output.of(startOn));
        }

        public SettingArgs build() {
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
