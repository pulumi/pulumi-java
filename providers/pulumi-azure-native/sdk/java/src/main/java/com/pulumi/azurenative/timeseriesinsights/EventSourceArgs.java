// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.timeseriesinsights;

import com.pulumi.azurenative.timeseriesinsights.enums.EventSourceKind;
import com.pulumi.azurenative.timeseriesinsights.inputs.LocalTimestampArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventSourceArgs Empty = new EventSourceArgs();

    /**
     * The name of the Time Series Insights environment associated with the specified resource group.
     * 
     */
    @Import(name="environmentName", required=true)
      private final Output<String> environmentName;

    public Output<String> environmentName() {
        return this.environmentName;
    }

    /**
     * Name of the event source.
     * 
     */
    @Import(name="eventSourceName")
      private final @Nullable Output<String> eventSourceName;

    public Output<String> eventSourceName() {
        return this.eventSourceName == null ? Codegen.empty() : this.eventSourceName;
    }

    /**
     * The kind of the event source.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<Either<String,EventSourceKind>> kind;

    public Output<Either<String,EventSourceKind>> kind() {
        return this.kind;
    }

    /**
     * An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
     * 
     */
    @Import(name="localTimestamp")
      private final @Nullable Output<LocalTimestampArgs> localTimestamp;

    public Output<LocalTimestampArgs> localTimestamp() {
        return this.localTimestamp == null ? Codegen.empty() : this.localTimestamp;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Name of an Azure Resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Key-value pairs of additional properties for the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public EventSourceArgs(
        Output<String> environmentName,
        @Nullable Output<String> eventSourceName,
        Output<Either<String,EventSourceKind>> kind,
        @Nullable Output<LocalTimestampArgs> localTimestamp,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags) {
        this.environmentName = Objects.requireNonNull(environmentName, "expected parameter 'environmentName' to be non-null");
        this.eventSourceName = eventSourceName;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.localTimestamp = localTimestamp;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private EventSourceArgs() {
        this.environmentName = Codegen.empty();
        this.eventSourceName = Codegen.empty();
        this.kind = Codegen.empty();
        this.localTimestamp = Codegen.empty();
        this.location = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> environmentName;
        private @Nullable Output<String> eventSourceName;
        private Output<Either<String,EventSourceKind>> kind;
        private @Nullable Output<LocalTimestampArgs> localTimestamp;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(EventSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.environmentName = defaults.environmentName;
    	      this.eventSourceName = defaults.eventSourceName;
    	      this.kind = defaults.kind;
    	      this.localTimestamp = defaults.localTimestamp;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder environmentName(Output<String> environmentName) {
            this.environmentName = Objects.requireNonNull(environmentName);
            return this;
        }
        public Builder environmentName(String environmentName) {
            this.environmentName = Output.of(Objects.requireNonNull(environmentName));
            return this;
        }
        public Builder eventSourceName(@Nullable Output<String> eventSourceName) {
            this.eventSourceName = eventSourceName;
            return this;
        }
        public Builder eventSourceName(@Nullable String eventSourceName) {
            this.eventSourceName = Codegen.ofNullable(eventSourceName);
            return this;
        }
        public Builder kind(Output<Either<String,EventSourceKind>> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder kind(Either<String,EventSourceKind> kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }
        public Builder localTimestamp(@Nullable Output<LocalTimestampArgs> localTimestamp) {
            this.localTimestamp = localTimestamp;
            return this;
        }
        public Builder localTimestamp(@Nullable LocalTimestampArgs localTimestamp) {
            this.localTimestamp = Codegen.ofNullable(localTimestamp);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public EventSourceArgs build() {
            return new EventSourceArgs(environmentName, eventSourceName, kind, localTimestamp, location, resourceGroupName, tags);
        }
    }
}
