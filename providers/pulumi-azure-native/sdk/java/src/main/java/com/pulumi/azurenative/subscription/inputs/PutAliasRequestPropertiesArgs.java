// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.subscription.inputs;

import com.pulumi.azurenative.subscription.enums.Workload;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Put subscription properties.
 * 
 */
public final class PutAliasRequestPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final PutAliasRequestPropertiesArgs Empty = new PutAliasRequestPropertiesArgs();

    /**
     * Determines whether subscription is fieldLed, partnerLed or LegacyEA
     * 
     */
    @Import(name="billingScope")
    private @Nullable Output<String> billingScope;

    /**
     * @return Determines whether subscription is fieldLed, partnerLed or LegacyEA
     * 
     */
    public Optional<Output<String>> billingScope() {
        return Optional.ofNullable(this.billingScope);
    }

    /**
     * The friendly name of the subscription.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The friendly name of the subscription.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Reseller ID, basically MPN Id
     * 
     */
    @Import(name="resellerId")
    private @Nullable Output<String> resellerId;

    /**
     * @return Reseller ID, basically MPN Id
     * 
     */
    public Optional<Output<String>> resellerId() {
        return Optional.ofNullable(this.resellerId);
    }

    /**
     * This parameter can be used to create alias for existing subscription Id
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return This parameter can be used to create alias for existing subscription Id
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * The workload type of the subscription. It can be either Production or DevTest.
     * 
     */
    @Import(name="workload")
    private @Nullable Output<Either<String,Workload>> workload;

    /**
     * @return The workload type of the subscription. It can be either Production or DevTest.
     * 
     */
    public Optional<Output<Either<String,Workload>>> workload() {
        return Optional.ofNullable(this.workload);
    }

    private PutAliasRequestPropertiesArgs() {}

    private PutAliasRequestPropertiesArgs(PutAliasRequestPropertiesArgs $) {
        this.billingScope = $.billingScope;
        this.displayName = $.displayName;
        this.resellerId = $.resellerId;
        this.subscriptionId = $.subscriptionId;
        this.workload = $.workload;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PutAliasRequestPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PutAliasRequestPropertiesArgs $;

        public Builder() {
            $ = new PutAliasRequestPropertiesArgs();
        }

        public Builder(PutAliasRequestPropertiesArgs defaults) {
            $ = new PutAliasRequestPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param billingScope Determines whether subscription is fieldLed, partnerLed or LegacyEA
         * 
         * @return builder
         * 
         */
        public Builder billingScope(@Nullable Output<String> billingScope) {
            $.billingScope = billingScope;
            return this;
        }

        /**
         * @param billingScope Determines whether subscription is fieldLed, partnerLed or LegacyEA
         * 
         * @return builder
         * 
         */
        public Builder billingScope(String billingScope) {
            return billingScope(Output.of(billingScope));
        }

        /**
         * @param displayName The friendly name of the subscription.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The friendly name of the subscription.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param resellerId Reseller ID, basically MPN Id
         * 
         * @return builder
         * 
         */
        public Builder resellerId(@Nullable Output<String> resellerId) {
            $.resellerId = resellerId;
            return this;
        }

        /**
         * @param resellerId Reseller ID, basically MPN Id
         * 
         * @return builder
         * 
         */
        public Builder resellerId(String resellerId) {
            return resellerId(Output.of(resellerId));
        }

        /**
         * @param subscriptionId This parameter can be used to create alias for existing subscription Id
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId This parameter can be used to create alias for existing subscription Id
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param workload The workload type of the subscription. It can be either Production or DevTest.
         * 
         * @return builder
         * 
         */
        public Builder workload(@Nullable Output<Either<String,Workload>> workload) {
            $.workload = workload;
            return this;
        }

        /**
         * @param workload The workload type of the subscription. It can be either Production or DevTest.
         * 
         * @return builder
         * 
         */
        public Builder workload(Either<String,Workload> workload) {
            return workload(Output.of(workload));
        }

        /**
         * @param workload The workload type of the subscription. It can be either Production or DevTest.
         * 
         * @return builder
         * 
         */
        public Builder workload(String workload) {
            return workload(Either.ofLeft(workload));
        }

        /**
         * @param workload The workload type of the subscription. It can be either Production or DevTest.
         * 
         * @return builder
         * 
         */
        public Builder workload(Workload workload) {
            return workload(Either.ofRight(workload));
        }

        public PutAliasRequestPropertiesArgs build() {
            return $;
        }
    }

}
