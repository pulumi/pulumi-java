// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.AppendVariableActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDataExplorerCommandActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureFunctionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMLBatchExecutionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMLExecutePipelineActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMLUpdateResourceActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ControlActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.CopyActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.CustomActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DataLakeAnalyticsUSQLActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DatabricksNotebookActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DatabricksSparkJarActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DatabricksSparkPythonActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DeleteActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecutePipelineActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecuteSSISPackageActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecuteWranglingDataflowActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecutionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExpressionResponse;
import com.pulumi.azurenative.datafactory.inputs.FailActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.FilterActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.GetMetadataActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightHiveActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightMapReduceActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightPigActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightSparkActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightStreamingActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.IfConditionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.LookupActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.SetVariableActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlServerStoredProcedureActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.SwitchActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.UntilActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.azurenative.datafactory.inputs.ValidationActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.WaitActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.WebActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.WebHookActivityResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * This activity is used for iterating over a collection and execute given activities.
 * 
 */
public final class ForEachActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final ForEachActivityResponse Empty = new ForEachActivityResponse();

    /**
     * List of activities to execute .
     * 
     */
    @Import(name="activities", required=true)
    private List<Object> activities;

    public List<Object> activities() {
        return this.activities;
    }

    /**
     * Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
     * 
     */
    @Import(name="batchCount")
    private @Nullable Integer batchCount;

    public Optional<Integer> batchCount() {
        return Optional.ofNullable(this.batchCount);
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Should the loop be executed in sequence or in parallel (max 50)
     * 
     */
    @Import(name="isSequential")
    private @Nullable Boolean isSequential;

    public Optional<Boolean> isSequential() {
        return Optional.ofNullable(this.isSequential);
    }

    /**
     * Collection to iterate.
     * 
     */
    @Import(name="items", required=true)
    private ExpressionResponse items;

    public ExpressionResponse items() {
        return this.items;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Type of activity.
     * Expected value is &#39;ForEach&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private ForEachActivityResponse() {}

    private ForEachActivityResponse(ForEachActivityResponse $) {
        this.activities = $.activities;
        this.batchCount = $.batchCount;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.isSequential = $.isSequential;
        this.items = $.items;
        this.name = $.name;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForEachActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForEachActivityResponse $;

        public Builder() {
            $ = new ForEachActivityResponse();
        }

        public Builder(ForEachActivityResponse defaults) {
            $ = new ForEachActivityResponse(Objects.requireNonNull(defaults));
        }

        public Builder activities(List<Object> activities) {
            $.activities = activities;
            return this;
        }

        public Builder activities(Object... activities) {
            return activities(List.of(activities));
        }

        public Builder batchCount(@Nullable Integer batchCount) {
            $.batchCount = batchCount;
            return this;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder isSequential(@Nullable Boolean isSequential) {
            $.isSequential = isSequential;
            return this;
        }

        public Builder items(ExpressionResponse items) {
            $.items = items;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public ForEachActivityResponse build() {
            $.activities = Objects.requireNonNull($.activities, "expected parameter 'activities' to be non-null");
            $.items = Objects.requireNonNull($.items, "expected parameter 'items' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
