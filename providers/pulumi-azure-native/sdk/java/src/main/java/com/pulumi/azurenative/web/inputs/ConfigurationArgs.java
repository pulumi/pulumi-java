// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.enums.ActiveRevisionsMode;
import com.pulumi.azurenative.web.inputs.IngressArgs;
import com.pulumi.azurenative.web.inputs.RegistryCredentialsArgs;
import com.pulumi.azurenative.web.inputs.SecretArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Non versioned Container App configuration properties that define the mutable settings of a Container app
 * 
 */
public final class ConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationArgs Empty = new ConfigurationArgs();

    /**
     * ActiveRevisionsMode controls how active revisions are handled for the Container app:
     * &lt;list&gt;&lt;item&gt;Multiple: multiple revisions can be active. If no value if provided, this is the default&lt;/item&gt;&lt;item&gt;Single: Only one revision can be active at a time. Revision weights can not be used in this mode&lt;/item&gt;&lt;/list&gt;
     * 
     */
    @Import(name="activeRevisionsMode")
      private final @Nullable Output<Either<String,ActiveRevisionsMode>> activeRevisionsMode;

    public Output<Either<String,ActiveRevisionsMode>> activeRevisionsMode() {
        return this.activeRevisionsMode == null ? Codegen.empty() : this.activeRevisionsMode;
    }

    /**
     * Ingress configurations.
     * 
     */
    @Import(name="ingress")
      private final @Nullable Output<IngressArgs> ingress;

    public Output<IngressArgs> ingress() {
        return this.ingress == null ? Codegen.empty() : this.ingress;
    }

    /**
     * Collection of private container registry credentials for containers used by the Container app
     * 
     */
    @Import(name="registries")
      private final @Nullable Output<List<RegistryCredentialsArgs>> registries;

    public Output<List<RegistryCredentialsArgs>> registries() {
        return this.registries == null ? Codegen.empty() : this.registries;
    }

    /**
     * Collection of secrets used by a Container app
     * 
     */
    @Import(name="secrets")
      private final @Nullable Output<List<SecretArgs>> secrets;

    public Output<List<SecretArgs>> secrets() {
        return this.secrets == null ? Codegen.empty() : this.secrets;
    }

    public ConfigurationArgs(
        @Nullable Output<Either<String,ActiveRevisionsMode>> activeRevisionsMode,
        @Nullable Output<IngressArgs> ingress,
        @Nullable Output<List<RegistryCredentialsArgs>> registries,
        @Nullable Output<List<SecretArgs>> secrets) {
        this.activeRevisionsMode = activeRevisionsMode;
        this.ingress = ingress;
        this.registries = registries;
        this.secrets = secrets;
    }

    private ConfigurationArgs() {
        this.activeRevisionsMode = Codegen.empty();
        this.ingress = Codegen.empty();
        this.registries = Codegen.empty();
        this.secrets = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,ActiveRevisionsMode>> activeRevisionsMode;
        private @Nullable Output<IngressArgs> ingress;
        private @Nullable Output<List<RegistryCredentialsArgs>> registries;
        private @Nullable Output<List<SecretArgs>> secrets;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeRevisionsMode = defaults.activeRevisionsMode;
    	      this.ingress = defaults.ingress;
    	      this.registries = defaults.registries;
    	      this.secrets = defaults.secrets;
        }

        public Builder activeRevisionsMode(@Nullable Output<Either<String,ActiveRevisionsMode>> activeRevisionsMode) {
            this.activeRevisionsMode = activeRevisionsMode;
            return this;
        }
        public Builder activeRevisionsMode(@Nullable Either<String,ActiveRevisionsMode> activeRevisionsMode) {
            this.activeRevisionsMode = Codegen.ofNullable(activeRevisionsMode);
            return this;
        }
        public Builder ingress(@Nullable Output<IngressArgs> ingress) {
            this.ingress = ingress;
            return this;
        }
        public Builder ingress(@Nullable IngressArgs ingress) {
            this.ingress = Codegen.ofNullable(ingress);
            return this;
        }
        public Builder registries(@Nullable Output<List<RegistryCredentialsArgs>> registries) {
            this.registries = registries;
            return this;
        }
        public Builder registries(@Nullable List<RegistryCredentialsArgs> registries) {
            this.registries = Codegen.ofNullable(registries);
            return this;
        }
        public Builder registries(RegistryCredentialsArgs... registries) {
            return registries(List.of(registries));
        }
        public Builder secrets(@Nullable Output<List<SecretArgs>> secrets) {
            this.secrets = secrets;
            return this;
        }
        public Builder secrets(@Nullable List<SecretArgs> secrets) {
            this.secrets = Codegen.ofNullable(secrets);
            return this;
        }
        public Builder secrets(SecretArgs... secrets) {
            return secrets(List.of(secrets));
        }        public ConfigurationArgs build() {
            return new ConfigurationArgs(activeRevisionsMode, ingress, registries, secrets);
        }
    }
}
