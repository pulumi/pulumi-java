// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage;

import com.pulumi.azurenative.storage.enums.EnabledProtocols;
import com.pulumi.azurenative.storage.enums.RootSquashType;
import com.pulumi.azurenative.storage.enums.ShareAccessTier;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FileShareArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileShareArgs Empty = new FileShareArgs();

    /**
     * Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
     * 
     */
    @Import(name="accessTier")
      private final @Nullable Output<Either<String,ShareAccessTier>> accessTier;

    public Output<Either<String,ShareAccessTier>> accessTier() {
        return this.accessTier == null ? Codegen.empty() : this.accessTier;
    }

    /**
     * The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The authentication protocol that is used for the file share. Can only be specified when creating a share.
     * 
     */
    @Import(name="enabledProtocols")
      private final @Nullable Output<Either<String,EnabledProtocols>> enabledProtocols;

    public Output<Either<String,EnabledProtocols>> enabledProtocols() {
        return this.enabledProtocols == null ? Codegen.empty() : this.enabledProtocols;
    }

    /**
     * Optional, used to create a snapshot.
     * 
     */
    @Import(name="expand")
      private final @Nullable Output<String> expand;

    public Output<String> expand() {
        return this.expand == null ? Codegen.empty() : this.expand;
    }

    /**
     * A name-value pair to associate with the share as metadata.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<Map<String,String>> metadata;

    public Output<Map<String,String>> metadata() {
        return this.metadata == null ? Codegen.empty() : this.metadata;
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The property is for NFS share only. The default is NoRootSquash.
     * 
     */
    @Import(name="rootSquash")
      private final @Nullable Output<Either<String,RootSquashType>> rootSquash;

    public Output<Either<String,RootSquashType>> rootSquash() {
        return this.rootSquash == null ? Codegen.empty() : this.rootSquash;
    }

    /**
     * The name of the file share within the specified storage account. File share names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * 
     */
    @Import(name="shareName")
      private final @Nullable Output<String> shareName;

    public Output<String> shareName() {
        return this.shareName == null ? Codegen.empty() : this.shareName;
    }

    /**
     * The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
     * 
     */
    @Import(name="shareQuota")
      private final @Nullable Output<Integer> shareQuota;

    public Output<Integer> shareQuota() {
        return this.shareQuota == null ? Codegen.empty() : this.shareQuota;
    }

    public FileShareArgs(
        @Nullable Output<Either<String,ShareAccessTier>> accessTier,
        Output<String> accountName,
        @Nullable Output<Either<String,EnabledProtocols>> enabledProtocols,
        @Nullable Output<String> expand,
        @Nullable Output<Map<String,String>> metadata,
        Output<String> resourceGroupName,
        @Nullable Output<Either<String,RootSquashType>> rootSquash,
        @Nullable Output<String> shareName,
        @Nullable Output<Integer> shareQuota) {
        this.accessTier = accessTier;
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.enabledProtocols = enabledProtocols;
        this.expand = expand;
        this.metadata = metadata;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.rootSquash = rootSquash;
        this.shareName = shareName;
        this.shareQuota = shareQuota;
    }

    private FileShareArgs() {
        this.accessTier = Codegen.empty();
        this.accountName = Codegen.empty();
        this.enabledProtocols = Codegen.empty();
        this.expand = Codegen.empty();
        this.metadata = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.rootSquash = Codegen.empty();
        this.shareName = Codegen.empty();
        this.shareQuota = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FileShareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,ShareAccessTier>> accessTier;
        private Output<String> accountName;
        private @Nullable Output<Either<String,EnabledProtocols>> enabledProtocols;
        private @Nullable Output<String> expand;
        private @Nullable Output<Map<String,String>> metadata;
        private Output<String> resourceGroupName;
        private @Nullable Output<Either<String,RootSquashType>> rootSquash;
        private @Nullable Output<String> shareName;
        private @Nullable Output<Integer> shareQuota;

        public Builder() {
    	      // Empty
        }

        public Builder(FileShareArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTier = defaults.accessTier;
    	      this.accountName = defaults.accountName;
    	      this.enabledProtocols = defaults.enabledProtocols;
    	      this.expand = defaults.expand;
    	      this.metadata = defaults.metadata;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.rootSquash = defaults.rootSquash;
    	      this.shareName = defaults.shareName;
    	      this.shareQuota = defaults.shareQuota;
        }

        public Builder accessTier(@Nullable Output<Either<String,ShareAccessTier>> accessTier) {
            this.accessTier = accessTier;
            return this;
        }
        public Builder accessTier(@Nullable Either<String,ShareAccessTier> accessTier) {
            this.accessTier = Codegen.ofNullable(accessTier);
            return this;
        }
        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }
        public Builder enabledProtocols(@Nullable Output<Either<String,EnabledProtocols>> enabledProtocols) {
            this.enabledProtocols = enabledProtocols;
            return this;
        }
        public Builder enabledProtocols(@Nullable Either<String,EnabledProtocols> enabledProtocols) {
            this.enabledProtocols = Codegen.ofNullable(enabledProtocols);
            return this;
        }
        public Builder expand(@Nullable Output<String> expand) {
            this.expand = expand;
            return this;
        }
        public Builder expand(@Nullable String expand) {
            this.expand = Codegen.ofNullable(expand);
            return this;
        }
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable Map<String,String> metadata) {
            this.metadata = Codegen.ofNullable(metadata);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder rootSquash(@Nullable Output<Either<String,RootSquashType>> rootSquash) {
            this.rootSquash = rootSquash;
            return this;
        }
        public Builder rootSquash(@Nullable Either<String,RootSquashType> rootSquash) {
            this.rootSquash = Codegen.ofNullable(rootSquash);
            return this;
        }
        public Builder shareName(@Nullable Output<String> shareName) {
            this.shareName = shareName;
            return this;
        }
        public Builder shareName(@Nullable String shareName) {
            this.shareName = Codegen.ofNullable(shareName);
            return this;
        }
        public Builder shareQuota(@Nullable Output<Integer> shareQuota) {
            this.shareQuota = shareQuota;
            return this;
        }
        public Builder shareQuota(@Nullable Integer shareQuota) {
            this.shareQuota = Codegen.ofNullable(shareQuota);
            return this;
        }        public FileShareArgs build() {
            return new FileShareArgs(accessTier, accountName, enabledProtocols, expand, metadata, resourceGroupName, rootSquash, shareName, shareQuota);
        }
    }
}
