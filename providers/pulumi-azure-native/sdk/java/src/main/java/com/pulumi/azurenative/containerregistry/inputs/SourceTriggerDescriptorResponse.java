// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The source trigger that caused a run.
 * 
 */
public final class SourceTriggerDescriptorResponse extends com.pulumi.resources.InvokeArgs {

    public static final SourceTriggerDescriptorResponse Empty = new SourceTriggerDescriptorResponse();

    /**
     * The branch name in the repository.
     * 
     */
    @Import(name="branchName")
    private @Nullable String branchName;

    public Optional<String> branchName() {
        return Optional.ofNullable(this.branchName);
    }

    /**
     * The unique ID that identifies a commit.
     * 
     */
    @Import(name="commitId")
    private @Nullable String commitId;

    public Optional<String> commitId() {
        return Optional.ofNullable(this.commitId);
    }

    /**
     * The event type of the trigger.
     * 
     */
    @Import(name="eventType")
    private @Nullable String eventType;

    public Optional<String> eventType() {
        return Optional.ofNullable(this.eventType);
    }

    /**
     * The unique ID of the trigger.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The source control provider type.
     * 
     */
    @Import(name="providerType")
    private @Nullable String providerType;

    public Optional<String> providerType() {
        return Optional.ofNullable(this.providerType);
    }

    /**
     * The unique ID that identifies pull request.
     * 
     */
    @Import(name="pullRequestId")
    private @Nullable String pullRequestId;

    public Optional<String> pullRequestId() {
        return Optional.ofNullable(this.pullRequestId);
    }

    /**
     * The repository URL.
     * 
     */
    @Import(name="repositoryUrl")
    private @Nullable String repositoryUrl;

    public Optional<String> repositoryUrl() {
        return Optional.ofNullable(this.repositoryUrl);
    }

    private SourceTriggerDescriptorResponse() {}

    private SourceTriggerDescriptorResponse(SourceTriggerDescriptorResponse $) {
        this.branchName = $.branchName;
        this.commitId = $.commitId;
        this.eventType = $.eventType;
        this.id = $.id;
        this.providerType = $.providerType;
        this.pullRequestId = $.pullRequestId;
        this.repositoryUrl = $.repositoryUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceTriggerDescriptorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceTriggerDescriptorResponse $;

        public Builder() {
            $ = new SourceTriggerDescriptorResponse();
        }

        public Builder(SourceTriggerDescriptorResponse defaults) {
            $ = new SourceTriggerDescriptorResponse(Objects.requireNonNull(defaults));
        }

        public Builder branchName(@Nullable String branchName) {
            $.branchName = branchName;
            return this;
        }

        public Builder commitId(@Nullable String commitId) {
            $.commitId = commitId;
            return this;
        }

        public Builder eventType(@Nullable String eventType) {
            $.eventType = eventType;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder providerType(@Nullable String providerType) {
            $.providerType = providerType;
            return this;
        }

        public Builder pullRequestId(@Nullable String pullRequestId) {
            $.pullRequestId = pullRequestId;
            return this;
        }

        public Builder repositoryUrl(@Nullable String repositoryUrl) {
            $.repositoryUrl = repositoryUrl;
            return this;
        }

        public SourceTriggerDescriptorResponse build() {
            return $;
        }
    }

}
