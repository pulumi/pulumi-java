// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * An update history of the ImmutabilityPolicy of a blob container.
 * 
 */
public final class UpdateHistoryPropertyResponse extends com.pulumi.resources.InvokeArgs {

    public static final UpdateHistoryPropertyResponse Empty = new UpdateHistoryPropertyResponse();

    /**
     * The immutability period for the blobs in the container since the policy creation, in days.
     * 
     */
    @Import(name="immutabilityPeriodSinceCreationInDays", required=true)
    private Integer immutabilityPeriodSinceCreationInDays;

    public Integer immutabilityPeriodSinceCreationInDays() {
        return this.immutabilityPeriodSinceCreationInDays;
    }

    /**
     * Returns the Object ID of the user who updated the ImmutabilityPolicy.
     * 
     */
    @Import(name="objectIdentifier", required=true)
    private String objectIdentifier;

    public String objectIdentifier() {
        return this.objectIdentifier;
    }

    /**
     * Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.
     * 
     */
    @Import(name="tenantId", required=true)
    private String tenantId;

    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Returns the date and time the ImmutabilityPolicy was updated.
     * 
     */
    @Import(name="timestamp", required=true)
    private String timestamp;

    public String timestamp() {
        return this.timestamp;
    }

    /**
     * The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.
     * 
     */
    @Import(name="update", required=true)
    private String update;

    public String update() {
        return this.update;
    }

    /**
     * Returns the User Principal Name of the user who updated the ImmutabilityPolicy.
     * 
     */
    @Import(name="upn", required=true)
    private String upn;

    public String upn() {
        return this.upn;
    }

    private UpdateHistoryPropertyResponse() {}

    private UpdateHistoryPropertyResponse(UpdateHistoryPropertyResponse $) {
        this.immutabilityPeriodSinceCreationInDays = $.immutabilityPeriodSinceCreationInDays;
        this.objectIdentifier = $.objectIdentifier;
        this.tenantId = $.tenantId;
        this.timestamp = $.timestamp;
        this.update = $.update;
        this.upn = $.upn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpdateHistoryPropertyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpdateHistoryPropertyResponse $;

        public Builder() {
            $ = new UpdateHistoryPropertyResponse();
        }

        public Builder(UpdateHistoryPropertyResponse defaults) {
            $ = new UpdateHistoryPropertyResponse(Objects.requireNonNull(defaults));
        }

        public Builder immutabilityPeriodSinceCreationInDays(Integer immutabilityPeriodSinceCreationInDays) {
            $.immutabilityPeriodSinceCreationInDays = immutabilityPeriodSinceCreationInDays;
            return this;
        }

        public Builder objectIdentifier(String objectIdentifier) {
            $.objectIdentifier = objectIdentifier;
            return this;
        }

        public Builder tenantId(String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder timestamp(String timestamp) {
            $.timestamp = timestamp;
            return this;
        }

        public Builder update(String update) {
            $.update = update;
            return this;
        }

        public Builder upn(String upn) {
            $.upn = upn;
            return this;
        }

        public UpdateHistoryPropertyResponse build() {
            $.immutabilityPeriodSinceCreationInDays = Objects.requireNonNull($.immutabilityPeriodSinceCreationInDays, "expected parameter 'immutabilityPeriodSinceCreationInDays' to be non-null");
            $.objectIdentifier = Objects.requireNonNull($.objectIdentifier, "expected parameter 'objectIdentifier' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            $.timestamp = Objects.requireNonNull($.timestamp, "expected parameter 'timestamp' to be non-null");
            $.update = Objects.requireNonNull($.update, "expected parameter 'update' to be non-null");
            $.upn = Objects.requireNonNull($.upn, "expected parameter 'upn' to be non-null");
            return $;
        }
    }

}
