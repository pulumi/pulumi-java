// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.policyinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;


/**
 * Scenario specific error details.
 * 
 */
public final class TypedErrorInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final TypedErrorInfoResponse Empty = new TypedErrorInfoResponse();

    /**
     * The scenario specific error details.
     * 
     */
    @Import(name="info", required=true)
    private Object info;

    /**
     * @return The scenario specific error details.
     * 
     */
    public Object info() {
        return this.info;
    }

    /**
     * The type of included error details.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of included error details.
     * 
     */
    public String type() {
        return this.type;
    }

    private TypedErrorInfoResponse() {}

    private TypedErrorInfoResponse(TypedErrorInfoResponse $) {
        this.info = $.info;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TypedErrorInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TypedErrorInfoResponse $;

        public Builder() {
            $ = new TypedErrorInfoResponse();
        }

        public Builder(TypedErrorInfoResponse defaults) {
            $ = new TypedErrorInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param info The scenario specific error details.
         * 
         * @return builder
         * 
         */
        public Builder info(Object info) {
            $.info = info;
            return this;
        }

        /**
         * @param type The type of included error details.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public TypedErrorInfoResponse build() {
            $.info = Objects.requireNonNull($.info, "expected parameter 'info' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
