// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devices.inputs;

import com.pulumi.azurenative.devices.enums.AuthenticationType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties related to service bus queue endpoint types.
 * 
 */
public final class RoutingServiceBusQueueEndpointPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoutingServiceBusQueueEndpointPropertiesArgs Empty = new RoutingServiceBusQueueEndpointPropertiesArgs();

    /**
     * Method used to authenticate against the service bus queue endpoint
     * 
     */
    @Import(name="authenticationType")
    private @Nullable Output<Either<String,AuthenticationType>> authenticationType;

    /**
     * @return Method used to authenticate against the service bus queue endpoint
     * 
     */
    public Optional<Output<Either<String,AuthenticationType>>> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    /**
     * The connection string of the service bus queue endpoint.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return The connection string of the service bus queue endpoint.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * The url of the service bus queue endpoint. It must include the protocol sb://
     * 
     */
    @Import(name="endpointUri")
    private @Nullable Output<String> endpointUri;

    /**
     * @return The url of the service bus queue endpoint. It must include the protocol sb://
     * 
     */
    public Optional<Output<String>> endpointUri() {
        return Optional.ofNullable(this.endpointUri);
    }

    /**
     * Queue name on the service bus namespace
     * 
     */
    @Import(name="entityPath")
    private @Nullable Output<String> entityPath;

    /**
     * @return Queue name on the service bus namespace
     * 
     */
    public Optional<Output<String>> entityPath() {
        return Optional.ofNullable(this.entityPath);
    }

    /**
     * Id of the service bus queue endpoint
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Id of the service bus queue endpoint
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types. The name need not be the same as the actual queue name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types. The name need not be the same as the actual queue name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The name of the resource group of the service bus queue endpoint.
     * 
     */
    @Import(name="resourceGroup")
    private @Nullable Output<String> resourceGroup;

    /**
     * @return The name of the resource group of the service bus queue endpoint.
     * 
     */
    public Optional<Output<String>> resourceGroup() {
        return Optional.ofNullable(this.resourceGroup);
    }

    /**
     * The subscription identifier of the service bus queue endpoint.
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return The subscription identifier of the service bus queue endpoint.
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    private RoutingServiceBusQueueEndpointPropertiesArgs() {}

    private RoutingServiceBusQueueEndpointPropertiesArgs(RoutingServiceBusQueueEndpointPropertiesArgs $) {
        this.authenticationType = $.authenticationType;
        this.connectionString = $.connectionString;
        this.endpointUri = $.endpointUri;
        this.entityPath = $.entityPath;
        this.id = $.id;
        this.name = $.name;
        this.resourceGroup = $.resourceGroup;
        this.subscriptionId = $.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoutingServiceBusQueueEndpointPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoutingServiceBusQueueEndpointPropertiesArgs $;

        public Builder() {
            $ = new RoutingServiceBusQueueEndpointPropertiesArgs();
        }

        public Builder(RoutingServiceBusQueueEndpointPropertiesArgs defaults) {
            $ = new RoutingServiceBusQueueEndpointPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationType Method used to authenticate against the service bus queue endpoint
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(@Nullable Output<Either<String,AuthenticationType>> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param authenticationType Method used to authenticate against the service bus queue endpoint
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(Either<String,AuthenticationType> authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        /**
         * @param authenticationType Method used to authenticate against the service bus queue endpoint
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(String authenticationType) {
            return authenticationType(Either.ofLeft(authenticationType));
        }

        /**
         * @param authenticationType Method used to authenticate against the service bus queue endpoint
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(AuthenticationType authenticationType) {
            return authenticationType(Either.ofRight(authenticationType));
        }

        /**
         * @param connectionString The connection string of the service bus queue endpoint.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString The connection string of the service bus queue endpoint.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param endpointUri The url of the service bus queue endpoint. It must include the protocol sb://
         * 
         * @return builder
         * 
         */
        public Builder endpointUri(@Nullable Output<String> endpointUri) {
            $.endpointUri = endpointUri;
            return this;
        }

        /**
         * @param endpointUri The url of the service bus queue endpoint. It must include the protocol sb://
         * 
         * @return builder
         * 
         */
        public Builder endpointUri(String endpointUri) {
            return endpointUri(Output.of(endpointUri));
        }

        /**
         * @param entityPath Queue name on the service bus namespace
         * 
         * @return builder
         * 
         */
        public Builder entityPath(@Nullable Output<String> entityPath) {
            $.entityPath = entityPath;
            return this;
        }

        /**
         * @param entityPath Queue name on the service bus namespace
         * 
         * @return builder
         * 
         */
        public Builder entityPath(String entityPath) {
            return entityPath(Output.of(entityPath));
        }

        /**
         * @param id Id of the service bus queue endpoint
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Id of the service bus queue endpoint
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types. The name need not be the same as the actual queue name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types. The name need not be the same as the actual queue name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroup The name of the resource group of the service bus queue endpoint.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(@Nullable Output<String> resourceGroup) {
            $.resourceGroup = resourceGroup;
            return this;
        }

        /**
         * @param resourceGroup The name of the resource group of the service bus queue endpoint.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(String resourceGroup) {
            return resourceGroup(Output.of(resourceGroup));
        }

        /**
         * @param subscriptionId The subscription identifier of the service bus queue endpoint.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The subscription identifier of the service bus queue endpoint.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        public RoutingServiceBusQueueEndpointPropertiesArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
