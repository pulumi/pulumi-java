// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.ApplicationGatewayCookieBasedAffinity;
import com.pulumi.azurenative.network.enums.ApplicationGatewayProtocol;
import com.pulumi.azurenative.network.inputs.ApplicationGatewayConnectionDrainingArgs;
import com.pulumi.azurenative.network.inputs.SubResourceArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Backend address pool settings of an application gateway.
 * 
 */
public final class ApplicationGatewayBackendHttpSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayBackendHttpSettingsArgs Empty = new ApplicationGatewayBackendHttpSettingsArgs();

    /**
     * Cookie name to use for the affinity cookie.
     * 
     */
    @Import(name="affinityCookieName")
    private @Nullable Output<String> affinityCookieName;

    public Optional<Output<String>> affinityCookieName() {
        return Optional.ofNullable(this.affinityCookieName);
    }

    /**
     * Array of references to application gateway authentication certificates.
     * 
     */
    @Import(name="authenticationCertificates")
    private @Nullable Output<List<SubResourceArgs>> authenticationCertificates;

    public Optional<Output<List<SubResourceArgs>>> authenticationCertificates() {
        return Optional.ofNullable(this.authenticationCertificates);
    }

    /**
     * Connection draining of the backend http settings resource.
     * 
     */
    @Import(name="connectionDraining")
    private @Nullable Output<ApplicationGatewayConnectionDrainingArgs> connectionDraining;

    public Optional<Output<ApplicationGatewayConnectionDrainingArgs>> connectionDraining() {
        return Optional.ofNullable(this.connectionDraining);
    }

    /**
     * Cookie based affinity.
     * 
     */
    @Import(name="cookieBasedAffinity")
    private @Nullable Output<Either<String,ApplicationGatewayCookieBasedAffinity>> cookieBasedAffinity;

    public Optional<Output<Either<String,ApplicationGatewayCookieBasedAffinity>>> cookieBasedAffinity() {
        return Optional.ofNullable(this.cookieBasedAffinity);
    }

    /**
     * Host header to be sent to the backend servers.
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the backend http settings that is unique within an Application Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Whether to pick host header should be picked from the host name of the backend server. Default value is false.
     * 
     */
    @Import(name="pickHostNameFromBackendAddress")
    private @Nullable Output<Boolean> pickHostNameFromBackendAddress;

    public Optional<Output<Boolean>> pickHostNameFromBackendAddress() {
        return Optional.ofNullable(this.pickHostNameFromBackendAddress);
    }

    /**
     * The destination port on the backend.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Probe resource of an application gateway.
     * 
     */
    @Import(name="probe")
    private @Nullable Output<SubResourceArgs> probe;

    public Optional<Output<SubResourceArgs>> probe() {
        return Optional.ofNullable(this.probe);
    }

    /**
     * Whether the probe is enabled. Default value is false.
     * 
     */
    @Import(name="probeEnabled")
    private @Nullable Output<Boolean> probeEnabled;

    public Optional<Output<Boolean>> probeEnabled() {
        return Optional.ofNullable(this.probeEnabled);
    }

    /**
     * The protocol used to communicate with the backend.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol;

    public Optional<Output<Either<String,ApplicationGatewayProtocol>>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
     * 
     */
    @Import(name="requestTimeout")
    private @Nullable Output<Integer> requestTimeout;

    public Optional<Output<Integer>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * Array of references to application gateway trusted root certificates.
     * 
     */
    @Import(name="trustedRootCertificates")
    private @Nullable Output<List<SubResourceArgs>> trustedRootCertificates;

    public Optional<Output<List<SubResourceArgs>>> trustedRootCertificates() {
        return Optional.ofNullable(this.trustedRootCertificates);
    }

    private ApplicationGatewayBackendHttpSettingsArgs() {}

    private ApplicationGatewayBackendHttpSettingsArgs(ApplicationGatewayBackendHttpSettingsArgs $) {
        this.affinityCookieName = $.affinityCookieName;
        this.authenticationCertificates = $.authenticationCertificates;
        this.connectionDraining = $.connectionDraining;
        this.cookieBasedAffinity = $.cookieBasedAffinity;
        this.hostName = $.hostName;
        this.id = $.id;
        this.name = $.name;
        this.path = $.path;
        this.pickHostNameFromBackendAddress = $.pickHostNameFromBackendAddress;
        this.port = $.port;
        this.probe = $.probe;
        this.probeEnabled = $.probeEnabled;
        this.protocol = $.protocol;
        this.requestTimeout = $.requestTimeout;
        this.trustedRootCertificates = $.trustedRootCertificates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGatewayBackendHttpSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGatewayBackendHttpSettingsArgs $;

        public Builder() {
            $ = new ApplicationGatewayBackendHttpSettingsArgs();
        }

        public Builder(ApplicationGatewayBackendHttpSettingsArgs defaults) {
            $ = new ApplicationGatewayBackendHttpSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder affinityCookieName(@Nullable Output<String> affinityCookieName) {
            $.affinityCookieName = affinityCookieName;
            return this;
        }

        public Builder affinityCookieName(String affinityCookieName) {
            return affinityCookieName(Output.of(affinityCookieName));
        }

        public Builder authenticationCertificates(@Nullable Output<List<SubResourceArgs>> authenticationCertificates) {
            $.authenticationCertificates = authenticationCertificates;
            return this;
        }

        public Builder authenticationCertificates(List<SubResourceArgs> authenticationCertificates) {
            return authenticationCertificates(Output.of(authenticationCertificates));
        }

        public Builder authenticationCertificates(SubResourceArgs... authenticationCertificates) {
            return authenticationCertificates(List.of(authenticationCertificates));
        }

        public Builder connectionDraining(@Nullable Output<ApplicationGatewayConnectionDrainingArgs> connectionDraining) {
            $.connectionDraining = connectionDraining;
            return this;
        }

        public Builder connectionDraining(ApplicationGatewayConnectionDrainingArgs connectionDraining) {
            return connectionDraining(Output.of(connectionDraining));
        }

        public Builder cookieBasedAffinity(@Nullable Output<Either<String,ApplicationGatewayCookieBasedAffinity>> cookieBasedAffinity) {
            $.cookieBasedAffinity = cookieBasedAffinity;
            return this;
        }

        public Builder cookieBasedAffinity(Either<String,ApplicationGatewayCookieBasedAffinity> cookieBasedAffinity) {
            return cookieBasedAffinity(Output.of(cookieBasedAffinity));
        }

        public Builder cookieBasedAffinity(String cookieBasedAffinity) {
            return cookieBasedAffinity(Either.ofLeft(cookieBasedAffinity));
        }

        public Builder cookieBasedAffinity(ApplicationGatewayCookieBasedAffinity cookieBasedAffinity) {
            return cookieBasedAffinity(Either.ofRight(cookieBasedAffinity));
        }

        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder pickHostNameFromBackendAddress(@Nullable Output<Boolean> pickHostNameFromBackendAddress) {
            $.pickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            return this;
        }

        public Builder pickHostNameFromBackendAddress(Boolean pickHostNameFromBackendAddress) {
            return pickHostNameFromBackendAddress(Output.of(pickHostNameFromBackendAddress));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder probe(@Nullable Output<SubResourceArgs> probe) {
            $.probe = probe;
            return this;
        }

        public Builder probe(SubResourceArgs probe) {
            return probe(Output.of(probe));
        }

        public Builder probeEnabled(@Nullable Output<Boolean> probeEnabled) {
            $.probeEnabled = probeEnabled;
            return this;
        }

        public Builder probeEnabled(Boolean probeEnabled) {
            return probeEnabled(Output.of(probeEnabled));
        }

        public Builder protocol(@Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(Either<String,ApplicationGatewayProtocol> protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder protocol(String protocol) {
            return protocol(Either.ofLeft(protocol));
        }

        public Builder protocol(ApplicationGatewayProtocol protocol) {
            return protocol(Either.ofRight(protocol));
        }

        public Builder requestTimeout(@Nullable Output<Integer> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        public Builder requestTimeout(Integer requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        public Builder trustedRootCertificates(@Nullable Output<List<SubResourceArgs>> trustedRootCertificates) {
            $.trustedRootCertificates = trustedRootCertificates;
            return this;
        }

        public Builder trustedRootCertificates(List<SubResourceArgs> trustedRootCertificates) {
            return trustedRootCertificates(Output.of(trustedRootCertificates));
        }

        public Builder trustedRootCertificates(SubResourceArgs... trustedRootCertificates) {
            return trustedRootCertificates(List.of(trustedRootCertificates));
        }

        public ApplicationGatewayBackendHttpSettingsArgs build() {
            return $;
        }
    }

}
