// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information about the webhook destination for an event subscription.
 * 
 */
public final class WebHookEventSubscriptionDestinationResponse extends com.pulumi.resources.InvokeArgs {

    public static final WebHookEventSubscriptionDestinationResponse Empty = new WebHookEventSubscriptionDestinationResponse();

    /**
     * The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
     * 
     */
    @Import(name="azureActiveDirectoryApplicationIdOrUri")
    private @Nullable String azureActiveDirectoryApplicationIdOrUri;

    /**
     * @return The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
     * 
     */
    public Optional<String> azureActiveDirectoryApplicationIdOrUri() {
        return Optional.ofNullable(this.azureActiveDirectoryApplicationIdOrUri);
    }

    /**
     * The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
     * 
     */
    @Import(name="azureActiveDirectoryTenantId")
    private @Nullable String azureActiveDirectoryTenantId;

    /**
     * @return The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
     * 
     */
    public Optional<String> azureActiveDirectoryTenantId() {
        return Optional.ofNullable(this.azureActiveDirectoryTenantId);
    }

    /**
     * The base URL that represents the endpoint of the destination of an event subscription.
     * 
     */
    @Import(name="endpointBaseUrl", required=true)
    private String endpointBaseUrl;

    /**
     * @return The base URL that represents the endpoint of the destination of an event subscription.
     * 
     */
    public String endpointBaseUrl() {
        return this.endpointBaseUrl;
    }

    /**
     * Type of the endpoint for the event subscription destination.
     * Expected value is &#39;WebHook&#39;.
     * 
     */
    @Import(name="endpointType", required=true)
    private String endpointType;

    /**
     * @return Type of the endpoint for the event subscription destination.
     * Expected value is &#39;WebHook&#39;.
     * 
     */
    public String endpointType() {
        return this.endpointType;
    }

    /**
     * The URL that represents the endpoint of the destination of an event subscription.
     * 
     */
    @Import(name="endpointUrl")
    private @Nullable String endpointUrl;

    /**
     * @return The URL that represents the endpoint of the destination of an event subscription.
     * 
     */
    public Optional<String> endpointUrl() {
        return Optional.ofNullable(this.endpointUrl);
    }

    /**
     * Maximum number of events per batch.
     * 
     */
    @Import(name="maxEventsPerBatch")
    private @Nullable Integer maxEventsPerBatch;

    /**
     * @return Maximum number of events per batch.
     * 
     */
    public Optional<Integer> maxEventsPerBatch() {
        return Optional.ofNullable(this.maxEventsPerBatch);
    }

    /**
     * Preferred batch size in Kilobytes.
     * 
     */
    @Import(name="preferredBatchSizeInKilobytes")
    private @Nullable Integer preferredBatchSizeInKilobytes;

    /**
     * @return Preferred batch size in Kilobytes.
     * 
     */
    public Optional<Integer> preferredBatchSizeInKilobytes() {
        return Optional.ofNullable(this.preferredBatchSizeInKilobytes);
    }

    private WebHookEventSubscriptionDestinationResponse() {}

    private WebHookEventSubscriptionDestinationResponse(WebHookEventSubscriptionDestinationResponse $) {
        this.azureActiveDirectoryApplicationIdOrUri = $.azureActiveDirectoryApplicationIdOrUri;
        this.azureActiveDirectoryTenantId = $.azureActiveDirectoryTenantId;
        this.endpointBaseUrl = $.endpointBaseUrl;
        this.endpointType = $.endpointType;
        this.endpointUrl = $.endpointUrl;
        this.maxEventsPerBatch = $.maxEventsPerBatch;
        this.preferredBatchSizeInKilobytes = $.preferredBatchSizeInKilobytes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebHookEventSubscriptionDestinationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebHookEventSubscriptionDestinationResponse $;

        public Builder() {
            $ = new WebHookEventSubscriptionDestinationResponse();
        }

        public Builder(WebHookEventSubscriptionDestinationResponse defaults) {
            $ = new WebHookEventSubscriptionDestinationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureActiveDirectoryApplicationIdOrUri The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
         * 
         * @return builder
         * 
         */
        public Builder azureActiveDirectoryApplicationIdOrUri(@Nullable String azureActiveDirectoryApplicationIdOrUri) {
            $.azureActiveDirectoryApplicationIdOrUri = azureActiveDirectoryApplicationIdOrUri;
            return this;
        }

        /**
         * @param azureActiveDirectoryTenantId The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
         * 
         * @return builder
         * 
         */
        public Builder azureActiveDirectoryTenantId(@Nullable String azureActiveDirectoryTenantId) {
            $.azureActiveDirectoryTenantId = azureActiveDirectoryTenantId;
            return this;
        }

        /**
         * @param endpointBaseUrl The base URL that represents the endpoint of the destination of an event subscription.
         * 
         * @return builder
         * 
         */
        public Builder endpointBaseUrl(String endpointBaseUrl) {
            $.endpointBaseUrl = endpointBaseUrl;
            return this;
        }

        /**
         * @param endpointType Type of the endpoint for the event subscription destination.
         * Expected value is &#39;WebHook&#39;.
         * 
         * @return builder
         * 
         */
        public Builder endpointType(String endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        /**
         * @param endpointUrl The URL that represents the endpoint of the destination of an event subscription.
         * 
         * @return builder
         * 
         */
        public Builder endpointUrl(@Nullable String endpointUrl) {
            $.endpointUrl = endpointUrl;
            return this;
        }

        /**
         * @param maxEventsPerBatch Maximum number of events per batch.
         * 
         * @return builder
         * 
         */
        public Builder maxEventsPerBatch(@Nullable Integer maxEventsPerBatch) {
            $.maxEventsPerBatch = maxEventsPerBatch;
            return this;
        }

        /**
         * @param preferredBatchSizeInKilobytes Preferred batch size in Kilobytes.
         * 
         * @return builder
         * 
         */
        public Builder preferredBatchSizeInKilobytes(@Nullable Integer preferredBatchSizeInKilobytes) {
            $.preferredBatchSizeInKilobytes = preferredBatchSizeInKilobytes;
            return this;
        }

        public WebHookEventSubscriptionDestinationResponse build() {
            $.endpointBaseUrl = Objects.requireNonNull($.endpointBaseUrl, "expected parameter 'endpointBaseUrl' to be non-null");
            $.endpointType = Codegen.stringProp("endpointType").arg($.endpointType).require();
            $.maxEventsPerBatch = Codegen.integerProp("maxEventsPerBatch").arg($.maxEventsPerBatch).def(1).getNullable();
            $.preferredBatchSizeInKilobytes = Codegen.integerProp("preferredBatchSizeInKilobytes").arg($.preferredBatchSizeInKilobytes).def(64).getNullable();
            return $;
        }
    }

}
