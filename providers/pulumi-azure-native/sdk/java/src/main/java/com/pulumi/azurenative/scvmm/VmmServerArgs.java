// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scvmm;

import com.pulumi.azurenative.scvmm.inputs.ExtendedLocationArgs;
import com.pulumi.azurenative.scvmm.inputs.VMMServerPropertiesCredentialsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmmServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmmServerArgs Empty = new VmmServerArgs();

    /**
     * Credentials to connect to VMMServer.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<VMMServerPropertiesCredentialsArgs> credentials;

    /**
     * @return Credentials to connect to VMMServer.
     * 
     */
    public Optional<Output<VMMServerPropertiesCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The extended location.
     * 
     */
    @Import(name="extendedLocation", required=true)
    private Output<ExtendedLocationArgs> extendedLocation;

    /**
     * @return The extended location.
     * 
     */
    public Output<ExtendedLocationArgs> extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Fqdn is the hostname/ip of the vmmServer.
     * 
     */
    @Import(name="fqdn", required=true)
    private Output<String> fqdn;

    /**
     * @return Fqdn is the hostname/ip of the vmmServer.
     * 
     */
    public Output<String> fqdn() {
        return this.fqdn;
    }

    /**
     * Gets or sets the location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Gets or sets the location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Port is the port on which the vmmServer is listening.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port is the port on which the vmmServer is listening.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Name of the VMMServer.
     * 
     */
    @Import(name="vmmServerName")
    private @Nullable Output<String> vmmServerName;

    /**
     * @return Name of the VMMServer.
     * 
     */
    public Optional<Output<String>> vmmServerName() {
        return Optional.ofNullable(this.vmmServerName);
    }

    private VmmServerArgs() {}

    private VmmServerArgs(VmmServerArgs $) {
        this.credentials = $.credentials;
        this.extendedLocation = $.extendedLocation;
        this.fqdn = $.fqdn;
        this.location = $.location;
        this.port = $.port;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.vmmServerName = $.vmmServerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmmServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmmServerArgs $;

        public Builder() {
            $ = new VmmServerArgs();
        }

        public Builder(VmmServerArgs defaults) {
            $ = new VmmServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentials Credentials to connect to VMMServer.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<VMMServerPropertiesCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Credentials to connect to VMMServer.
         * 
         * @return builder
         * 
         */
        public Builder credentials(VMMServerPropertiesCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param extendedLocation The extended location.
         * 
         * @return builder
         * 
         */
        public Builder extendedLocation(Output<ExtendedLocationArgs> extendedLocation) {
            $.extendedLocation = extendedLocation;
            return this;
        }

        /**
         * @param extendedLocation The extended location.
         * 
         * @return builder
         * 
         */
        public Builder extendedLocation(ExtendedLocationArgs extendedLocation) {
            return extendedLocation(Output.of(extendedLocation));
        }

        /**
         * @param fqdn Fqdn is the hostname/ip of the vmmServer.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(Output<String> fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        /**
         * @param fqdn Fqdn is the hostname/ip of the vmmServer.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(String fqdn) {
            return fqdn(Output.of(fqdn));
        }

        /**
         * @param location Gets or sets the location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Gets or sets the location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param port Port is the port on which the vmmServer is listening.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port is the port on which the vmmServer is listening.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vmmServerName Name of the VMMServer.
         * 
         * @return builder
         * 
         */
        public Builder vmmServerName(@Nullable Output<String> vmmServerName) {
            $.vmmServerName = vmmServerName;
            return this;
        }

        /**
         * @param vmmServerName Name of the VMMServer.
         * 
         * @return builder
         * 
         */
        public Builder vmmServerName(String vmmServerName) {
            return vmmServerName(Output.of(vmmServerName));
        }

        public VmmServerArgs build() {
            $.extendedLocation = Objects.requireNonNull($.extendedLocation, "expected parameter 'extendedLocation' to be non-null");
            $.fqdn = Objects.requireNonNull($.fqdn, "expected parameter 'fqdn' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
