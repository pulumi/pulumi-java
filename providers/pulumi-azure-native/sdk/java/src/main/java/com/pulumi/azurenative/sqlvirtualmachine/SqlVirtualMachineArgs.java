// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sqlvirtualmachine;

import com.pulumi.azurenative.sqlvirtualmachine.enums.SqlImageSku;
import com.pulumi.azurenative.sqlvirtualmachine.enums.SqlManagementMode;
import com.pulumi.azurenative.sqlvirtualmachine.enums.SqlServerLicenseType;
import com.pulumi.azurenative.sqlvirtualmachine.inputs.AutoBackupSettingsArgs;
import com.pulumi.azurenative.sqlvirtualmachine.inputs.AutoPatchingSettingsArgs;
import com.pulumi.azurenative.sqlvirtualmachine.inputs.KeyVaultCredentialSettingsArgs;
import com.pulumi.azurenative.sqlvirtualmachine.inputs.ResourceIdentityArgs;
import com.pulumi.azurenative.sqlvirtualmachine.inputs.ServerConfigurationsManagementSettingsArgs;
import com.pulumi.azurenative.sqlvirtualmachine.inputs.StorageConfigurationSettingsArgs;
import com.pulumi.azurenative.sqlvirtualmachine.inputs.WsfcDomainCredentialsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlVirtualMachineArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlVirtualMachineArgs Empty = new SqlVirtualMachineArgs();

    /**
     * Auto backup settings for SQL Server.
     * 
     */
    @Import(name="autoBackupSettings")
    private @Nullable Output<AutoBackupSettingsArgs> autoBackupSettings;

    public Optional<Output<AutoBackupSettingsArgs>> autoBackupSettings() {
        return Optional.ofNullable(this.autoBackupSettings);
    }

    /**
     * Auto patching settings for applying critical security updates to SQL virtual machine.
     * 
     */
    @Import(name="autoPatchingSettings")
    private @Nullable Output<AutoPatchingSettingsArgs> autoPatchingSettings;

    public Optional<Output<AutoPatchingSettingsArgs>> autoPatchingSettings() {
        return Optional.ofNullable(this.autoPatchingSettings);
    }

    /**
     * Azure Active Directory identity of the server.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<ResourceIdentityArgs> identity;

    public Optional<Output<ResourceIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Key vault credential settings.
     * 
     */
    @Import(name="keyVaultCredentialSettings")
    private @Nullable Output<KeyVaultCredentialSettingsArgs> keyVaultCredentialSettings;

    public Optional<Output<KeyVaultCredentialSettingsArgs>> keyVaultCredentialSettings() {
        return Optional.ofNullable(this.keyVaultCredentialSettings);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * SQL Server configuration management settings.
     * 
     */
    @Import(name="serverConfigurationsManagementSettings")
    private @Nullable Output<ServerConfigurationsManagementSettingsArgs> serverConfigurationsManagementSettings;

    public Optional<Output<ServerConfigurationsManagementSettingsArgs>> serverConfigurationsManagementSettings() {
        return Optional.ofNullable(this.serverConfigurationsManagementSettings);
    }

    /**
     * SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.
     * 
     */
    @Import(name="sqlImageOffer")
    private @Nullable Output<String> sqlImageOffer;

    public Optional<Output<String>> sqlImageOffer() {
        return Optional.ofNullable(this.sqlImageOffer);
    }

    /**
     * SQL Server edition type.
     * 
     */
    @Import(name="sqlImageSku")
    private @Nullable Output<Either<String,SqlImageSku>> sqlImageSku;

    public Optional<Output<Either<String,SqlImageSku>>> sqlImageSku() {
        return Optional.ofNullable(this.sqlImageSku);
    }

    /**
     * SQL Server Management type.
     * 
     */
    @Import(name="sqlManagement")
    private @Nullable Output<Either<String,SqlManagementMode>> sqlManagement;

    public Optional<Output<Either<String,SqlManagementMode>>> sqlManagement() {
        return Optional.ofNullable(this.sqlManagement);
    }

    /**
     * SQL Server license type.
     * 
     */
    @Import(name="sqlServerLicenseType")
    private @Nullable Output<Either<String,SqlServerLicenseType>> sqlServerLicenseType;

    public Optional<Output<Either<String,SqlServerLicenseType>>> sqlServerLicenseType() {
        return Optional.ofNullable(this.sqlServerLicenseType);
    }

    /**
     * ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
     * 
     */
    @Import(name="sqlVirtualMachineGroupResourceId")
    private @Nullable Output<String> sqlVirtualMachineGroupResourceId;

    public Optional<Output<String>> sqlVirtualMachineGroupResourceId() {
        return Optional.ofNullable(this.sqlVirtualMachineGroupResourceId);
    }

    /**
     * Name of the SQL virtual machine.
     * 
     */
    @Import(name="sqlVirtualMachineName")
    private @Nullable Output<String> sqlVirtualMachineName;

    public Optional<Output<String>> sqlVirtualMachineName() {
        return Optional.ofNullable(this.sqlVirtualMachineName);
    }

    /**
     * Storage Configuration Settings.
     * 
     */
    @Import(name="storageConfigurationSettings")
    private @Nullable Output<StorageConfigurationSettingsArgs> storageConfigurationSettings;

    public Optional<Output<StorageConfigurationSettingsArgs>> storageConfigurationSettings() {
        return Optional.ofNullable(this.storageConfigurationSettings);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * ARM Resource id of underlying virtual machine created from SQL marketplace image.
     * 
     */
    @Import(name="virtualMachineResourceId")
    private @Nullable Output<String> virtualMachineResourceId;

    public Optional<Output<String>> virtualMachineResourceId() {
        return Optional.ofNullable(this.virtualMachineResourceId);
    }

    /**
     * Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
     * 
     */
    @Import(name="wsfcDomainCredentials")
    private @Nullable Output<WsfcDomainCredentialsArgs> wsfcDomainCredentials;

    public Optional<Output<WsfcDomainCredentialsArgs>> wsfcDomainCredentials() {
        return Optional.ofNullable(this.wsfcDomainCredentials);
    }

    private SqlVirtualMachineArgs() {}

    private SqlVirtualMachineArgs(SqlVirtualMachineArgs $) {
        this.autoBackupSettings = $.autoBackupSettings;
        this.autoPatchingSettings = $.autoPatchingSettings;
        this.identity = $.identity;
        this.keyVaultCredentialSettings = $.keyVaultCredentialSettings;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.serverConfigurationsManagementSettings = $.serverConfigurationsManagementSettings;
        this.sqlImageOffer = $.sqlImageOffer;
        this.sqlImageSku = $.sqlImageSku;
        this.sqlManagement = $.sqlManagement;
        this.sqlServerLicenseType = $.sqlServerLicenseType;
        this.sqlVirtualMachineGroupResourceId = $.sqlVirtualMachineGroupResourceId;
        this.sqlVirtualMachineName = $.sqlVirtualMachineName;
        this.storageConfigurationSettings = $.storageConfigurationSettings;
        this.tags = $.tags;
        this.virtualMachineResourceId = $.virtualMachineResourceId;
        this.wsfcDomainCredentials = $.wsfcDomainCredentials;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlVirtualMachineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlVirtualMachineArgs $;

        public Builder() {
            $ = new SqlVirtualMachineArgs();
        }

        public Builder(SqlVirtualMachineArgs defaults) {
            $ = new SqlVirtualMachineArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoBackupSettings(@Nullable Output<AutoBackupSettingsArgs> autoBackupSettings) {
            $.autoBackupSettings = autoBackupSettings;
            return this;
        }

        public Builder autoBackupSettings(AutoBackupSettingsArgs autoBackupSettings) {
            return autoBackupSettings(Output.of(autoBackupSettings));
        }

        public Builder autoPatchingSettings(@Nullable Output<AutoPatchingSettingsArgs> autoPatchingSettings) {
            $.autoPatchingSettings = autoPatchingSettings;
            return this;
        }

        public Builder autoPatchingSettings(AutoPatchingSettingsArgs autoPatchingSettings) {
            return autoPatchingSettings(Output.of(autoPatchingSettings));
        }

        public Builder identity(@Nullable Output<ResourceIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(ResourceIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        public Builder keyVaultCredentialSettings(@Nullable Output<KeyVaultCredentialSettingsArgs> keyVaultCredentialSettings) {
            $.keyVaultCredentialSettings = keyVaultCredentialSettings;
            return this;
        }

        public Builder keyVaultCredentialSettings(KeyVaultCredentialSettingsArgs keyVaultCredentialSettings) {
            return keyVaultCredentialSettings(Output.of(keyVaultCredentialSettings));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serverConfigurationsManagementSettings(@Nullable Output<ServerConfigurationsManagementSettingsArgs> serverConfigurationsManagementSettings) {
            $.serverConfigurationsManagementSettings = serverConfigurationsManagementSettings;
            return this;
        }

        public Builder serverConfigurationsManagementSettings(ServerConfigurationsManagementSettingsArgs serverConfigurationsManagementSettings) {
            return serverConfigurationsManagementSettings(Output.of(serverConfigurationsManagementSettings));
        }

        public Builder sqlImageOffer(@Nullable Output<String> sqlImageOffer) {
            $.sqlImageOffer = sqlImageOffer;
            return this;
        }

        public Builder sqlImageOffer(String sqlImageOffer) {
            return sqlImageOffer(Output.of(sqlImageOffer));
        }

        public Builder sqlImageSku(@Nullable Output<Either<String,SqlImageSku>> sqlImageSku) {
            $.sqlImageSku = sqlImageSku;
            return this;
        }

        public Builder sqlImageSku(Either<String,SqlImageSku> sqlImageSku) {
            return sqlImageSku(Output.of(sqlImageSku));
        }

        public Builder sqlManagement(@Nullable Output<Either<String,SqlManagementMode>> sqlManagement) {
            $.sqlManagement = sqlManagement;
            return this;
        }

        public Builder sqlManagement(Either<String,SqlManagementMode> sqlManagement) {
            return sqlManagement(Output.of(sqlManagement));
        }

        public Builder sqlServerLicenseType(@Nullable Output<Either<String,SqlServerLicenseType>> sqlServerLicenseType) {
            $.sqlServerLicenseType = sqlServerLicenseType;
            return this;
        }

        public Builder sqlServerLicenseType(Either<String,SqlServerLicenseType> sqlServerLicenseType) {
            return sqlServerLicenseType(Output.of(sqlServerLicenseType));
        }

        public Builder sqlVirtualMachineGroupResourceId(@Nullable Output<String> sqlVirtualMachineGroupResourceId) {
            $.sqlVirtualMachineGroupResourceId = sqlVirtualMachineGroupResourceId;
            return this;
        }

        public Builder sqlVirtualMachineGroupResourceId(String sqlVirtualMachineGroupResourceId) {
            return sqlVirtualMachineGroupResourceId(Output.of(sqlVirtualMachineGroupResourceId));
        }

        public Builder sqlVirtualMachineName(@Nullable Output<String> sqlVirtualMachineName) {
            $.sqlVirtualMachineName = sqlVirtualMachineName;
            return this;
        }

        public Builder sqlVirtualMachineName(String sqlVirtualMachineName) {
            return sqlVirtualMachineName(Output.of(sqlVirtualMachineName));
        }

        public Builder storageConfigurationSettings(@Nullable Output<StorageConfigurationSettingsArgs> storageConfigurationSettings) {
            $.storageConfigurationSettings = storageConfigurationSettings;
            return this;
        }

        public Builder storageConfigurationSettings(StorageConfigurationSettingsArgs storageConfigurationSettings) {
            return storageConfigurationSettings(Output.of(storageConfigurationSettings));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder virtualMachineResourceId(@Nullable Output<String> virtualMachineResourceId) {
            $.virtualMachineResourceId = virtualMachineResourceId;
            return this;
        }

        public Builder virtualMachineResourceId(String virtualMachineResourceId) {
            return virtualMachineResourceId(Output.of(virtualMachineResourceId));
        }

        public Builder wsfcDomainCredentials(@Nullable Output<WsfcDomainCredentialsArgs> wsfcDomainCredentials) {
            $.wsfcDomainCredentials = wsfcDomainCredentials;
            return this;
        }

        public Builder wsfcDomainCredentials(WsfcDomainCredentialsArgs wsfcDomainCredentials) {
            return wsfcDomainCredentials(Output.of(wsfcDomainCredentials));
        }

        public SqlVirtualMachineArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
