// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Select audio tracks from the input by specifying an attribute and an attribute filter.
 * 
 */
public final class SelectAudioTrackByAttributeResponse extends com.pulumi.resources.InvokeArgs {

    public static final SelectAudioTrackByAttributeResponse Empty = new SelectAudioTrackByAttributeResponse();

    /**
     * The TrackAttribute to filter the tracks by.
     * 
     */
    @Import(name="attribute", required=true)
    private String attribute;

    public String attribute() {
        return this.attribute;
    }

    /**
     * Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
     * 
     */
    @Import(name="channelMapping")
    private @Nullable String channelMapping;

    public Optional<String> channelMapping() {
        return Optional.ofNullable(this.channelMapping);
    }

    /**
     * The type of AttributeFilter to apply to the TrackAttribute in order to select the tracks.
     * 
     */
    @Import(name="filter", required=true)
    private String filter;

    public String filter() {
        return this.filter;
    }

    /**
     * The value to filter the tracks by.  Only used when AttributeFilter.ValueEquals is specified for the Filter property.
     * 
     */
    @Import(name="filterValue")
    private @Nullable String filterValue;

    public Optional<String> filterValue() {
        return Optional.ofNullable(this.filterValue);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.SelectAudioTrackByAttribute&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private String odataType;

    public String odataType() {
        return this.odataType;
    }

    private SelectAudioTrackByAttributeResponse() {}

    private SelectAudioTrackByAttributeResponse(SelectAudioTrackByAttributeResponse $) {
        this.attribute = $.attribute;
        this.channelMapping = $.channelMapping;
        this.filter = $.filter;
        this.filterValue = $.filterValue;
        this.odataType = $.odataType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SelectAudioTrackByAttributeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SelectAudioTrackByAttributeResponse $;

        public Builder() {
            $ = new SelectAudioTrackByAttributeResponse();
        }

        public Builder(SelectAudioTrackByAttributeResponse defaults) {
            $ = new SelectAudioTrackByAttributeResponse(Objects.requireNonNull(defaults));
        }

        public Builder attribute(String attribute) {
            $.attribute = attribute;
            return this;
        }

        public Builder channelMapping(@Nullable String channelMapping) {
            $.channelMapping = channelMapping;
            return this;
        }

        public Builder filter(String filter) {
            $.filter = filter;
            return this;
        }

        public Builder filterValue(@Nullable String filterValue) {
            $.filterValue = filterValue;
            return this;
        }

        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        public SelectAudioTrackByAttributeResponse build() {
            $.attribute = Objects.requireNonNull($.attribute, "expected parameter 'attribute' to be non-null");
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            $.odataType = Codegen.stringProp("odataType").arg($.odataType).require();
            return $;
        }
    }

}
