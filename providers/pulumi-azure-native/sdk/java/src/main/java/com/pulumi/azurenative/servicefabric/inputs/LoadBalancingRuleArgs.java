// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.azurenative.servicefabric.enums.ProbeProtocol;
import com.pulumi.azurenative.servicefabric.enums.Protocol;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes a load balancing rule.
 * 
 */
public final class LoadBalancingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancingRuleArgs Empty = new LoadBalancingRuleArgs();

    /**
     * The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
     * 
     */
    @Import(name="backendPort", required=true)
      private final Output<Integer> backendPort;

    public Output<Integer> backendPort() {
        return this.backendPort;
    }

    /**
     * The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 1 and 65534.
     * 
     */
    @Import(name="frontendPort", required=true)
      private final Output<Integer> frontendPort;

    public Output<Integer> frontendPort() {
        return this.frontendPort;
    }

    /**
     * the reference to the load balancer probe used by the load balancing rule.
     * 
     */
    @Import(name="probeProtocol", required=true)
      private final Output<Either<String,ProbeProtocol>> probeProtocol;

    public Output<Either<String,ProbeProtocol>> probeProtocol() {
        return this.probeProtocol;
    }

    /**
     * The probe request path. Only supported for HTTP/HTTPS probes.
     * 
     */
    @Import(name="probeRequestPath")
      private final @Nullable Output<String> probeRequestPath;

    public Output<String> probeRequestPath() {
        return this.probeRequestPath == null ? Codegen.empty() : this.probeRequestPath;
    }

    /**
     * The reference to the transport protocol used by the load balancing rule.
     * 
     */
    @Import(name="protocol", required=true)
      private final Output<Either<String,Protocol>> protocol;

    public Output<Either<String,Protocol>> protocol() {
        return this.protocol;
    }

    public LoadBalancingRuleArgs(
        Output<Integer> backendPort,
        Output<Integer> frontendPort,
        Output<Either<String,ProbeProtocol>> probeProtocol,
        @Nullable Output<String> probeRequestPath,
        Output<Either<String,Protocol>> protocol) {
        this.backendPort = Objects.requireNonNull(backendPort, "expected parameter 'backendPort' to be non-null");
        this.frontendPort = Objects.requireNonNull(frontendPort, "expected parameter 'frontendPort' to be non-null");
        this.probeProtocol = Objects.requireNonNull(probeProtocol, "expected parameter 'probeProtocol' to be non-null");
        this.probeRequestPath = probeRequestPath;
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
    }

    private LoadBalancingRuleArgs() {
        this.backendPort = Codegen.empty();
        this.frontendPort = Codegen.empty();
        this.probeProtocol = Codegen.empty();
        this.probeRequestPath = Codegen.empty();
        this.protocol = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> backendPort;
        private Output<Integer> frontendPort;
        private Output<Either<String,ProbeProtocol>> probeProtocol;
        private @Nullable Output<String> probeRequestPath;
        private Output<Either<String,Protocol>> protocol;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancingRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendPort = defaults.backendPort;
    	      this.frontendPort = defaults.frontendPort;
    	      this.probeProtocol = defaults.probeProtocol;
    	      this.probeRequestPath = defaults.probeRequestPath;
    	      this.protocol = defaults.protocol;
        }

        public Builder backendPort(Output<Integer> backendPort) {
            this.backendPort = Objects.requireNonNull(backendPort);
            return this;
        }
        public Builder backendPort(Integer backendPort) {
            this.backendPort = Output.of(Objects.requireNonNull(backendPort));
            return this;
        }
        public Builder frontendPort(Output<Integer> frontendPort) {
            this.frontendPort = Objects.requireNonNull(frontendPort);
            return this;
        }
        public Builder frontendPort(Integer frontendPort) {
            this.frontendPort = Output.of(Objects.requireNonNull(frontendPort));
            return this;
        }
        public Builder probeProtocol(Output<Either<String,ProbeProtocol>> probeProtocol) {
            this.probeProtocol = Objects.requireNonNull(probeProtocol);
            return this;
        }
        public Builder probeProtocol(Either<String,ProbeProtocol> probeProtocol) {
            this.probeProtocol = Output.of(Objects.requireNonNull(probeProtocol));
            return this;
        }
        public Builder probeRequestPath(@Nullable Output<String> probeRequestPath) {
            this.probeRequestPath = probeRequestPath;
            return this;
        }
        public Builder probeRequestPath(@Nullable String probeRequestPath) {
            this.probeRequestPath = Codegen.ofNullable(probeRequestPath);
            return this;
        }
        public Builder protocol(Output<Either<String,Protocol>> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder protocol(Either<String,Protocol> protocol) {
            this.protocol = Output.of(Objects.requireNonNull(protocol));
            return this;
        }        public LoadBalancingRuleArgs build() {
            return new LoadBalancingRuleArgs(backendPort, frontendPort, probeProtocol, probeRequestPath, protocol);
        }
    }
}
