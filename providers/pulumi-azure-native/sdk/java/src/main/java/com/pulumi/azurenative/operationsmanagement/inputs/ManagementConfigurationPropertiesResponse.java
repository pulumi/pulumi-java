// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationsmanagement.inputs;

import com.pulumi.azurenative.operationsmanagement.inputs.ArmTemplateParameterResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ManagementConfiguration properties supported by the OperationsManagement resource provider.
 * 
 */
public final class ManagementConfigurationPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagementConfigurationPropertiesResponse Empty = new ManagementConfigurationPropertiesResponse();

    /**
     * The applicationId of the appliance for this Management.
     * 
     */
    @Import(name="applicationId")
    private @Nullable String applicationId;

    /**
     * @return The applicationId of the appliance for this Management.
     * 
     */
    public Optional<String> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * Parameters to run the ARM template
     * 
     */
    @Import(name="parameters", required=true)
    private List<ArmTemplateParameterResponse> parameters;

    /**
     * @return Parameters to run the ARM template
     * 
     */
    public List<ArmTemplateParameterResponse> parameters() {
        return this.parameters;
    }

    /**
     * The type of the parent resource.
     * 
     */
    @Import(name="parentResourceType", required=true)
    private String parentResourceType;

    /**
     * @return The type of the parent resource.
     * 
     */
    public String parentResourceType() {
        return this.parentResourceType;
    }

    /**
     * The provisioning state for the ManagementConfiguration.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state for the ManagementConfiguration.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The Json object containing the ARM template to deploy
     * 
     */
    @Import(name="template", required=true)
    private Object template;

    /**
     * @return The Json object containing the ARM template to deploy
     * 
     */
    public Object template() {
        return this.template;
    }

    private ManagementConfigurationPropertiesResponse() {}

    private ManagementConfigurationPropertiesResponse(ManagementConfigurationPropertiesResponse $) {
        this.applicationId = $.applicationId;
        this.parameters = $.parameters;
        this.parentResourceType = $.parentResourceType;
        this.provisioningState = $.provisioningState;
        this.template = $.template;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementConfigurationPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementConfigurationPropertiesResponse $;

        public Builder() {
            $ = new ManagementConfigurationPropertiesResponse();
        }

        public Builder(ManagementConfigurationPropertiesResponse defaults) {
            $ = new ManagementConfigurationPropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId The applicationId of the appliance for this Management.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable String applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param parameters Parameters to run the ARM template
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<ArmTemplateParameterResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Parameters to run the ARM template
         * 
         * @return builder
         * 
         */
        public Builder parameters(ArmTemplateParameterResponse... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param parentResourceType The type of the parent resource.
         * 
         * @return builder
         * 
         */
        public Builder parentResourceType(String parentResourceType) {
            $.parentResourceType = parentResourceType;
            return this;
        }

        /**
         * @param provisioningState The provisioning state for the ManagementConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param template The Json object containing the ARM template to deploy
         * 
         * @return builder
         * 
         */
        public Builder template(Object template) {
            $.template = template;
            return this;
        }

        public ManagementConfigurationPropertiesResponse build() {
            $.parameters = Objects.requireNonNull($.parameters, "expected parameter 'parameters' to be non-null");
            $.parentResourceType = Objects.requireNonNull($.parentResourceType, "expected parameter 'parentResourceType' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.template = Objects.requireNonNull($.template, "expected parameter 'template' to be non-null");
            return $;
        }
    }

}
