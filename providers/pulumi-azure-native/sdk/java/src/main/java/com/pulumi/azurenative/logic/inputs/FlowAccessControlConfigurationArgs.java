// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.azurenative.logic.inputs.FlowAccessControlConfigurationPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The access control configuration.
 * 
 */
public final class FlowAccessControlConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowAccessControlConfigurationArgs Empty = new FlowAccessControlConfigurationArgs();

    /**
     * The access control configuration for workflow actions.
     * 
     */
    @Import(name="actions")
      private final @Nullable Output<FlowAccessControlConfigurationPolicyArgs> actions;

    public Output<FlowAccessControlConfigurationPolicyArgs> actions() {
        return this.actions == null ? Codegen.empty() : this.actions;
    }

    /**
     * The access control configuration for accessing workflow run contents.
     * 
     */
    @Import(name="contents")
      private final @Nullable Output<FlowAccessControlConfigurationPolicyArgs> contents;

    public Output<FlowAccessControlConfigurationPolicyArgs> contents() {
        return this.contents == null ? Codegen.empty() : this.contents;
    }

    /**
     * The access control configuration for invoking workflow triggers.
     * 
     */
    @Import(name="triggers")
      private final @Nullable Output<FlowAccessControlConfigurationPolicyArgs> triggers;

    public Output<FlowAccessControlConfigurationPolicyArgs> triggers() {
        return this.triggers == null ? Codegen.empty() : this.triggers;
    }

    /**
     * The access control configuration for workflow management.
     * 
     */
    @Import(name="workflowManagement")
      private final @Nullable Output<FlowAccessControlConfigurationPolicyArgs> workflowManagement;

    public Output<FlowAccessControlConfigurationPolicyArgs> workflowManagement() {
        return this.workflowManagement == null ? Codegen.empty() : this.workflowManagement;
    }

    public FlowAccessControlConfigurationArgs(
        @Nullable Output<FlowAccessControlConfigurationPolicyArgs> actions,
        @Nullable Output<FlowAccessControlConfigurationPolicyArgs> contents,
        @Nullable Output<FlowAccessControlConfigurationPolicyArgs> triggers,
        @Nullable Output<FlowAccessControlConfigurationPolicyArgs> workflowManagement) {
        this.actions = actions;
        this.contents = contents;
        this.triggers = triggers;
        this.workflowManagement = workflowManagement;
    }

    private FlowAccessControlConfigurationArgs() {
        this.actions = Codegen.empty();
        this.contents = Codegen.empty();
        this.triggers = Codegen.empty();
        this.workflowManagement = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowAccessControlConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<FlowAccessControlConfigurationPolicyArgs> actions;
        private @Nullable Output<FlowAccessControlConfigurationPolicyArgs> contents;
        private @Nullable Output<FlowAccessControlConfigurationPolicyArgs> triggers;
        private @Nullable Output<FlowAccessControlConfigurationPolicyArgs> workflowManagement;

        public Builder() {
    	      // Empty
        }

        public Builder(FlowAccessControlConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.contents = defaults.contents;
    	      this.triggers = defaults.triggers;
    	      this.workflowManagement = defaults.workflowManagement;
        }

        public Builder actions(@Nullable Output<FlowAccessControlConfigurationPolicyArgs> actions) {
            this.actions = actions;
            return this;
        }
        public Builder actions(@Nullable FlowAccessControlConfigurationPolicyArgs actions) {
            this.actions = Codegen.ofNullable(actions);
            return this;
        }
        public Builder contents(@Nullable Output<FlowAccessControlConfigurationPolicyArgs> contents) {
            this.contents = contents;
            return this;
        }
        public Builder contents(@Nullable FlowAccessControlConfigurationPolicyArgs contents) {
            this.contents = Codegen.ofNullable(contents);
            return this;
        }
        public Builder triggers(@Nullable Output<FlowAccessControlConfigurationPolicyArgs> triggers) {
            this.triggers = triggers;
            return this;
        }
        public Builder triggers(@Nullable FlowAccessControlConfigurationPolicyArgs triggers) {
            this.triggers = Codegen.ofNullable(triggers);
            return this;
        }
        public Builder workflowManagement(@Nullable Output<FlowAccessControlConfigurationPolicyArgs> workflowManagement) {
            this.workflowManagement = workflowManagement;
            return this;
        }
        public Builder workflowManagement(@Nullable FlowAccessControlConfigurationPolicyArgs workflowManagement) {
            this.workflowManagement = Codegen.ofNullable(workflowManagement);
            return this;
        }        public FlowAccessControlConfigurationArgs build() {
            return new FlowAccessControlConfigurationArgs(actions, contents, triggers, workflowManagement);
        }
    }
}
