// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute;

import com.pulumi.azurenative.compute.inputs.AdditionalCapabilitiesArgs;
import com.pulumi.azurenative.compute.inputs.DiagnosticsProfileArgs;
import com.pulumi.azurenative.compute.inputs.HardwareProfileArgs;
import com.pulumi.azurenative.compute.inputs.NetworkProfileArgs;
import com.pulumi.azurenative.compute.inputs.OSProfileArgs;
import com.pulumi.azurenative.compute.inputs.PlanArgs;
import com.pulumi.azurenative.compute.inputs.SecurityProfileArgs;
import com.pulumi.azurenative.compute.inputs.StorageProfileArgs;
import com.pulumi.azurenative.compute.inputs.SubResourceArgs;
import com.pulumi.azurenative.compute.inputs.VirtualMachineScaleSetVMNetworkProfileConfigurationArgs;
import com.pulumi.azurenative.compute.inputs.VirtualMachineScaleSetVMProtectionPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualMachineScaleSetVMArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineScaleSetVMArgs Empty = new VirtualMachineScaleSetVMArgs();

    /**
     * Specifies additional capabilities enabled or disabled on the virtual machine in the scale set. For instance: whether the virtual machine has the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
     * 
     */
    @Import(name="additionalCapabilities")
      private final @Nullable Output<AdditionalCapabilitiesArgs> additionalCapabilities;

    public Output<AdditionalCapabilitiesArgs> additionalCapabilities() {
        return this.additionalCapabilities == null ? Codegen.empty() : this.additionalCapabilities;
    }

    /**
     * Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
     * 
     */
    @Import(name="availabilitySet")
      private final @Nullable Output<SubResourceArgs> availabilitySet;

    public Output<SubResourceArgs> availabilitySet() {
        return this.availabilitySet == null ? Codegen.empty() : this.availabilitySet;
    }

    /**
     * Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum api-version: 2015-06-15.
     * 
     */
    @Import(name="diagnosticsProfile")
      private final @Nullable Output<DiagnosticsProfileArgs> diagnosticsProfile;

    public Output<DiagnosticsProfileArgs> diagnosticsProfile() {
        return this.diagnosticsProfile == null ? Codegen.empty() : this.diagnosticsProfile;
    }

    /**
     * Specifies the hardware settings for the virtual machine.
     * 
     */
    @Import(name="hardwareProfile")
      private final @Nullable Output<HardwareProfileArgs> hardwareProfile;

    public Output<HardwareProfileArgs> hardwareProfile() {
        return this.hardwareProfile == null ? Codegen.empty() : this.hardwareProfile;
    }

    /**
     * The instance ID of the virtual machine.
     * 
     */
    @Import(name="instanceId")
      private final @Nullable Output<String> instanceId;

    public Output<String> instanceId() {
        return this.instanceId == null ? Codegen.empty() : this.instanceId;
    }

    /**
     * Specifies that the image or disk that is being used was licensed on-premises. &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
     * 
     */
    @Import(name="licenseType")
      private final @Nullable Output<String> licenseType;

    public Output<String> licenseType() {
        return this.licenseType == null ? Codegen.empty() : this.licenseType;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Specifies the network interfaces of the virtual machine.
     * 
     */
    @Import(name="networkProfile")
      private final @Nullable Output<NetworkProfileArgs> networkProfile;

    public Output<NetworkProfileArgs> networkProfile() {
        return this.networkProfile == null ? Codegen.empty() : this.networkProfile;
    }

    /**
     * Specifies the network profile configuration of the virtual machine.
     * 
     */
    @Import(name="networkProfileConfiguration")
      private final @Nullable Output<VirtualMachineScaleSetVMNetworkProfileConfigurationArgs> networkProfileConfiguration;

    public Output<VirtualMachineScaleSetVMNetworkProfileConfigurationArgs> networkProfileConfiguration() {
        return this.networkProfileConfiguration == null ? Codegen.empty() : this.networkProfileConfiguration;
    }

    /**
     * Specifies the operating system settings for the virtual machine.
     * 
     */
    @Import(name="osProfile")
      private final @Nullable Output<OSProfileArgs> osProfile;

    public Output<OSProfileArgs> osProfile() {
        return this.osProfile == null ? Codegen.empty() : this.osProfile;
    }

    /**
     * Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**.
     * 
     */
    @Import(name="plan")
      private final @Nullable Output<PlanArgs> plan;

    public Output<PlanArgs> plan() {
        return this.plan == null ? Codegen.empty() : this.plan;
    }

    /**
     * Specifies the protection policy of the virtual machine.
     * 
     */
    @Import(name="protectionPolicy")
      private final @Nullable Output<VirtualMachineScaleSetVMProtectionPolicyArgs> protectionPolicy;

    public Output<VirtualMachineScaleSetVMProtectionPolicyArgs> protectionPolicy() {
        return this.protectionPolicy == null ? Codegen.empty() : this.protectionPolicy;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies the Security related profile settings for the virtual machine.
     * 
     */
    @Import(name="securityProfile")
      private final @Nullable Output<SecurityProfileArgs> securityProfile;

    public Output<SecurityProfileArgs> securityProfile() {
        return this.securityProfile == null ? Codegen.empty() : this.securityProfile;
    }

    /**
     * Specifies the storage settings for the virtual machine disks.
     * 
     */
    @Import(name="storageProfile")
      private final @Nullable Output<StorageProfileArgs> storageProfile;

    public Output<StorageProfileArgs> storageProfile() {
        return this.storageProfile == null ? Codegen.empty() : this.storageProfile;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. &lt;br&gt;&lt;br&gt;Minimum api-version: 2021-03-01
     * 
     */
    @Import(name="userData")
      private final @Nullable Output<String> userData;

    public Output<String> userData() {
        return this.userData == null ? Codegen.empty() : this.userData;
    }

    /**
     * The name of the VM scale set where the extension should be create or updated.
     * 
     */
    @Import(name="vmScaleSetName", required=true)
      private final Output<String> vmScaleSetName;

    public Output<String> vmScaleSetName() {
        return this.vmScaleSetName;
    }

    public VirtualMachineScaleSetVMArgs(
        @Nullable Output<AdditionalCapabilitiesArgs> additionalCapabilities,
        @Nullable Output<SubResourceArgs> availabilitySet,
        @Nullable Output<DiagnosticsProfileArgs> diagnosticsProfile,
        @Nullable Output<HardwareProfileArgs> hardwareProfile,
        @Nullable Output<String> instanceId,
        @Nullable Output<String> licenseType,
        @Nullable Output<String> location,
        @Nullable Output<NetworkProfileArgs> networkProfile,
        @Nullable Output<VirtualMachineScaleSetVMNetworkProfileConfigurationArgs> networkProfileConfiguration,
        @Nullable Output<OSProfileArgs> osProfile,
        @Nullable Output<PlanArgs> plan,
        @Nullable Output<VirtualMachineScaleSetVMProtectionPolicyArgs> protectionPolicy,
        Output<String> resourceGroupName,
        @Nullable Output<SecurityProfileArgs> securityProfile,
        @Nullable Output<StorageProfileArgs> storageProfile,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> userData,
        Output<String> vmScaleSetName) {
        this.additionalCapabilities = additionalCapabilities;
        this.availabilitySet = availabilitySet;
        this.diagnosticsProfile = diagnosticsProfile;
        this.hardwareProfile = hardwareProfile;
        this.instanceId = instanceId;
        this.licenseType = licenseType;
        this.location = location;
        this.networkProfile = networkProfile;
        this.networkProfileConfiguration = networkProfileConfiguration;
        this.osProfile = osProfile;
        this.plan = plan;
        this.protectionPolicy = protectionPolicy;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.securityProfile = securityProfile;
        this.storageProfile = storageProfile;
        this.tags = tags;
        this.userData = userData;
        this.vmScaleSetName = Objects.requireNonNull(vmScaleSetName, "expected parameter 'vmScaleSetName' to be non-null");
    }

    private VirtualMachineScaleSetVMArgs() {
        this.additionalCapabilities = Codegen.empty();
        this.availabilitySet = Codegen.empty();
        this.diagnosticsProfile = Codegen.empty();
        this.hardwareProfile = Codegen.empty();
        this.instanceId = Codegen.empty();
        this.licenseType = Codegen.empty();
        this.location = Codegen.empty();
        this.networkProfile = Codegen.empty();
        this.networkProfileConfiguration = Codegen.empty();
        this.osProfile = Codegen.empty();
        this.plan = Codegen.empty();
        this.protectionPolicy = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.securityProfile = Codegen.empty();
        this.storageProfile = Codegen.empty();
        this.tags = Codegen.empty();
        this.userData = Codegen.empty();
        this.vmScaleSetName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineScaleSetVMArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AdditionalCapabilitiesArgs> additionalCapabilities;
        private @Nullable Output<SubResourceArgs> availabilitySet;
        private @Nullable Output<DiagnosticsProfileArgs> diagnosticsProfile;
        private @Nullable Output<HardwareProfileArgs> hardwareProfile;
        private @Nullable Output<String> instanceId;
        private @Nullable Output<String> licenseType;
        private @Nullable Output<String> location;
        private @Nullable Output<NetworkProfileArgs> networkProfile;
        private @Nullable Output<VirtualMachineScaleSetVMNetworkProfileConfigurationArgs> networkProfileConfiguration;
        private @Nullable Output<OSProfileArgs> osProfile;
        private @Nullable Output<PlanArgs> plan;
        private @Nullable Output<VirtualMachineScaleSetVMProtectionPolicyArgs> protectionPolicy;
        private Output<String> resourceGroupName;
        private @Nullable Output<SecurityProfileArgs> securityProfile;
        private @Nullable Output<StorageProfileArgs> storageProfile;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> userData;
        private Output<String> vmScaleSetName;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineScaleSetVMArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalCapabilities = defaults.additionalCapabilities;
    	      this.availabilitySet = defaults.availabilitySet;
    	      this.diagnosticsProfile = defaults.diagnosticsProfile;
    	      this.hardwareProfile = defaults.hardwareProfile;
    	      this.instanceId = defaults.instanceId;
    	      this.licenseType = defaults.licenseType;
    	      this.location = defaults.location;
    	      this.networkProfile = defaults.networkProfile;
    	      this.networkProfileConfiguration = defaults.networkProfileConfiguration;
    	      this.osProfile = defaults.osProfile;
    	      this.plan = defaults.plan;
    	      this.protectionPolicy = defaults.protectionPolicy;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.securityProfile = defaults.securityProfile;
    	      this.storageProfile = defaults.storageProfile;
    	      this.tags = defaults.tags;
    	      this.userData = defaults.userData;
    	      this.vmScaleSetName = defaults.vmScaleSetName;
        }

        public Builder additionalCapabilities(@Nullable Output<AdditionalCapabilitiesArgs> additionalCapabilities) {
            this.additionalCapabilities = additionalCapabilities;
            return this;
        }
        public Builder additionalCapabilities(@Nullable AdditionalCapabilitiesArgs additionalCapabilities) {
            this.additionalCapabilities = Codegen.ofNullable(additionalCapabilities);
            return this;
        }
        public Builder availabilitySet(@Nullable Output<SubResourceArgs> availabilitySet) {
            this.availabilitySet = availabilitySet;
            return this;
        }
        public Builder availabilitySet(@Nullable SubResourceArgs availabilitySet) {
            this.availabilitySet = Codegen.ofNullable(availabilitySet);
            return this;
        }
        public Builder diagnosticsProfile(@Nullable Output<DiagnosticsProfileArgs> diagnosticsProfile) {
            this.diagnosticsProfile = diagnosticsProfile;
            return this;
        }
        public Builder diagnosticsProfile(@Nullable DiagnosticsProfileArgs diagnosticsProfile) {
            this.diagnosticsProfile = Codegen.ofNullable(diagnosticsProfile);
            return this;
        }
        public Builder hardwareProfile(@Nullable Output<HardwareProfileArgs> hardwareProfile) {
            this.hardwareProfile = hardwareProfile;
            return this;
        }
        public Builder hardwareProfile(@Nullable HardwareProfileArgs hardwareProfile) {
            this.hardwareProfile = Codegen.ofNullable(hardwareProfile);
            return this;
        }
        public Builder instanceId(@Nullable Output<String> instanceId) {
            this.instanceId = instanceId;
            return this;
        }
        public Builder instanceId(@Nullable String instanceId) {
            this.instanceId = Codegen.ofNullable(instanceId);
            return this;
        }
        public Builder licenseType(@Nullable Output<String> licenseType) {
            this.licenseType = licenseType;
            return this;
        }
        public Builder licenseType(@Nullable String licenseType) {
            this.licenseType = Codegen.ofNullable(licenseType);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder networkProfile(@Nullable Output<NetworkProfileArgs> networkProfile) {
            this.networkProfile = networkProfile;
            return this;
        }
        public Builder networkProfile(@Nullable NetworkProfileArgs networkProfile) {
            this.networkProfile = Codegen.ofNullable(networkProfile);
            return this;
        }
        public Builder networkProfileConfiguration(@Nullable Output<VirtualMachineScaleSetVMNetworkProfileConfigurationArgs> networkProfileConfiguration) {
            this.networkProfileConfiguration = networkProfileConfiguration;
            return this;
        }
        public Builder networkProfileConfiguration(@Nullable VirtualMachineScaleSetVMNetworkProfileConfigurationArgs networkProfileConfiguration) {
            this.networkProfileConfiguration = Codegen.ofNullable(networkProfileConfiguration);
            return this;
        }
        public Builder osProfile(@Nullable Output<OSProfileArgs> osProfile) {
            this.osProfile = osProfile;
            return this;
        }
        public Builder osProfile(@Nullable OSProfileArgs osProfile) {
            this.osProfile = Codegen.ofNullable(osProfile);
            return this;
        }
        public Builder plan(@Nullable Output<PlanArgs> plan) {
            this.plan = plan;
            return this;
        }
        public Builder plan(@Nullable PlanArgs plan) {
            this.plan = Codegen.ofNullable(plan);
            return this;
        }
        public Builder protectionPolicy(@Nullable Output<VirtualMachineScaleSetVMProtectionPolicyArgs> protectionPolicy) {
            this.protectionPolicy = protectionPolicy;
            return this;
        }
        public Builder protectionPolicy(@Nullable VirtualMachineScaleSetVMProtectionPolicyArgs protectionPolicy) {
            this.protectionPolicy = Codegen.ofNullable(protectionPolicy);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder securityProfile(@Nullable Output<SecurityProfileArgs> securityProfile) {
            this.securityProfile = securityProfile;
            return this;
        }
        public Builder securityProfile(@Nullable SecurityProfileArgs securityProfile) {
            this.securityProfile = Codegen.ofNullable(securityProfile);
            return this;
        }
        public Builder storageProfile(@Nullable Output<StorageProfileArgs> storageProfile) {
            this.storageProfile = storageProfile;
            return this;
        }
        public Builder storageProfile(@Nullable StorageProfileArgs storageProfile) {
            this.storageProfile = Codegen.ofNullable(storageProfile);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder userData(@Nullable Output<String> userData) {
            this.userData = userData;
            return this;
        }
        public Builder userData(@Nullable String userData) {
            this.userData = Codegen.ofNullable(userData);
            return this;
        }
        public Builder vmScaleSetName(Output<String> vmScaleSetName) {
            this.vmScaleSetName = Objects.requireNonNull(vmScaleSetName);
            return this;
        }
        public Builder vmScaleSetName(String vmScaleSetName) {
            this.vmScaleSetName = Output.of(Objects.requireNonNull(vmScaleSetName));
            return this;
        }        public VirtualMachineScaleSetVMArgs build() {
            return new VirtualMachineScaleSetVMArgs(additionalCapabilities, availabilitySet, diagnosticsProfile, hardwareProfile, instanceId, licenseType, location, networkProfile, networkProfileConfiguration, osProfile, plan, protectionPolicy, resourceGroupName, securityProfile, storageProfile, tags, userData, vmScaleSetName);
        }
    }
}
