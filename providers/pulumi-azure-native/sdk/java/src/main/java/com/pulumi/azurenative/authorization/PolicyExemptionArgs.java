// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization;

import com.pulumi.azurenative.authorization.enums.ExemptionCategory;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyExemptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyExemptionArgs Empty = new PolicyExemptionArgs();

    /**
     * The description of the policy exemption.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the policy exemption.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The policy exemption category. Possible values are Waiver and Mitigated.
     * 
     */
    @Import(name="exemptionCategory", required=true)
    private Output<Either<String,ExemptionCategory>> exemptionCategory;

    public Output<Either<String,ExemptionCategory>> exemptionCategory() {
        return this.exemptionCategory;
    }

    /**
     * The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy exemption.
     * 
     */
    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    /**
     * The policy exemption metadata. Metadata is an open ended object and is typically a collection of key value pairs.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Object> metadata;

    public Optional<Output<Object>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The ID of the policy assignment that is being exempted.
     * 
     */
    @Import(name="policyAssignmentId", required=true)
    private Output<String> policyAssignmentId;

    public Output<String> policyAssignmentId() {
        return this.policyAssignmentId;
    }

    /**
     * The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
     * 
     */
    @Import(name="policyDefinitionReferenceIds")
    private @Nullable Output<List<String>> policyDefinitionReferenceIds;

    public Optional<Output<List<String>>> policyDefinitionReferenceIds() {
        return Optional.ofNullable(this.policyDefinitionReferenceIds);
    }

    /**
     * The name of the policy exemption to delete.
     * 
     */
    @Import(name="policyExemptionName")
    private @Nullable Output<String> policyExemptionName;

    public Optional<Output<String>> policyExemptionName() {
        return Optional.ofNullable(this.policyExemptionName);
    }

    /**
     * The scope of the policy exemption. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or resource (format: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    public Output<String> scope() {
        return this.scope;
    }

    private PolicyExemptionArgs() {}

    private PolicyExemptionArgs(PolicyExemptionArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.exemptionCategory = $.exemptionCategory;
        this.expiresOn = $.expiresOn;
        this.metadata = $.metadata;
        this.policyAssignmentId = $.policyAssignmentId;
        this.policyDefinitionReferenceIds = $.policyDefinitionReferenceIds;
        this.policyExemptionName = $.policyExemptionName;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyExemptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyExemptionArgs $;

        public Builder() {
            $ = new PolicyExemptionArgs();
        }

        public Builder(PolicyExemptionArgs defaults) {
            $ = new PolicyExemptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder exemptionCategory(Output<Either<String,ExemptionCategory>> exemptionCategory) {
            $.exemptionCategory = exemptionCategory;
            return this;
        }

        public Builder exemptionCategory(Either<String,ExemptionCategory> exemptionCategory) {
            return exemptionCategory(Output.of(exemptionCategory));
        }

        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        public Builder metadata(@Nullable Output<Object> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Object metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder policyAssignmentId(Output<String> policyAssignmentId) {
            $.policyAssignmentId = policyAssignmentId;
            return this;
        }

        public Builder policyAssignmentId(String policyAssignmentId) {
            return policyAssignmentId(Output.of(policyAssignmentId));
        }

        public Builder policyDefinitionReferenceIds(@Nullable Output<List<String>> policyDefinitionReferenceIds) {
            $.policyDefinitionReferenceIds = policyDefinitionReferenceIds;
            return this;
        }

        public Builder policyDefinitionReferenceIds(List<String> policyDefinitionReferenceIds) {
            return policyDefinitionReferenceIds(Output.of(policyDefinitionReferenceIds));
        }

        public Builder policyDefinitionReferenceIds(String... policyDefinitionReferenceIds) {
            return policyDefinitionReferenceIds(List.of(policyDefinitionReferenceIds));
        }

        public Builder policyExemptionName(@Nullable Output<String> policyExemptionName) {
            $.policyExemptionName = policyExemptionName;
            return this;
        }

        public Builder policyExemptionName(String policyExemptionName) {
            return policyExemptionName(Output.of(policyExemptionName));
        }

        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public PolicyExemptionArgs build() {
            $.exemptionCategory = Objects.requireNonNull($.exemptionCategory, "expected parameter 'exemptionCategory' to be non-null");
            $.policyAssignmentId = Objects.requireNonNull($.policyAssignmentId, "expected parameter 'policyAssignmentId' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
