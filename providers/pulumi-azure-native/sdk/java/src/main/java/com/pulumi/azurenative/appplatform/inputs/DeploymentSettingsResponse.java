// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appplatform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Deployment settings payload
 * 
 */
public final class DeploymentSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final DeploymentSettingsResponse Empty = new DeploymentSettingsResponse();

    /**
     * Required CPU, basic tier should be 1, standard tier should be in range (1, 4)
     * 
     */
    @Import(name="cpu")
    private @Nullable Integer cpu;

    public Optional<Integer> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * Collection of environment variables
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Map<String,String> environmentVariables;

    public Optional<Map<String,String>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * JVM parameter
     * 
     */
    @Import(name="jvmOptions")
    private @Nullable String jvmOptions;

    public Optional<String> jvmOptions() {
        return Optional.ofNullable(this.jvmOptions);
    }

    /**
     * Required Memory size in GB, basic tier should be in range (1, 2), standard tier should be in range (1, 8)
     * 
     */
    @Import(name="memoryInGB")
    private @Nullable Integer memoryInGB;

    public Optional<Integer> memoryInGB() {
        return Optional.ofNullable(this.memoryInGB);
    }

    /**
     * The path to the .NET executable relative to zip root
     * 
     */
    @Import(name="netCoreMainEntryPath")
    private @Nullable String netCoreMainEntryPath;

    public Optional<String> netCoreMainEntryPath() {
        return Optional.ofNullable(this.netCoreMainEntryPath);
    }

    /**
     * Runtime version
     * 
     */
    @Import(name="runtimeVersion")
    private @Nullable String runtimeVersion;

    public Optional<String> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    private DeploymentSettingsResponse() {}

    private DeploymentSettingsResponse(DeploymentSettingsResponse $) {
        this.cpu = $.cpu;
        this.environmentVariables = $.environmentVariables;
        this.jvmOptions = $.jvmOptions;
        this.memoryInGB = $.memoryInGB;
        this.netCoreMainEntryPath = $.netCoreMainEntryPath;
        this.runtimeVersion = $.runtimeVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSettingsResponse $;

        public Builder() {
            $ = new DeploymentSettingsResponse();
        }

        public Builder(DeploymentSettingsResponse defaults) {
            $ = new DeploymentSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder cpu(@Nullable Integer cpu) {
            $.cpu = cpu;
            return this;
        }

        public Builder environmentVariables(@Nullable Map<String,String> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        public Builder jvmOptions(@Nullable String jvmOptions) {
            $.jvmOptions = jvmOptions;
            return this;
        }

        public Builder memoryInGB(@Nullable Integer memoryInGB) {
            $.memoryInGB = memoryInGB;
            return this;
        }

        public Builder netCoreMainEntryPath(@Nullable String netCoreMainEntryPath) {
            $.netCoreMainEntryPath = netCoreMainEntryPath;
            return this;
        }

        public Builder runtimeVersion(@Nullable String runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        public DeploymentSettingsResponse build() {
            $.cpu = Codegen.integerProp("cpu").arg($.cpu).def(1).getNullable();
            $.memoryInGB = Codegen.integerProp("memoryInGB").arg($.memoryInGB).def(1).getNullable();
            $.runtimeVersion = Codegen.stringProp("runtimeVersion").arg($.runtimeVersion).def("Java_8").getNullable();
            return $;
        }
    }

}
