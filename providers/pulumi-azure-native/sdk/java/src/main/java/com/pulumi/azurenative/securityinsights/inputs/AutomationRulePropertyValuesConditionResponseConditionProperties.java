// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration of the automation rule condition
 * 
 */
public final class AutomationRulePropertyValuesConditionResponseConditionProperties extends com.pulumi.resources.InvokeArgs {

    public static final AutomationRulePropertyValuesConditionResponseConditionProperties Empty = new AutomationRulePropertyValuesConditionResponseConditionProperties();

    /**
     * The operator to use for evaluation the condition
     * 
     */
    @Import(name="operator")
    private @Nullable String operator;

    /**
     * @return The operator to use for evaluation the condition
     * 
     */
    public Optional<String> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * The property to evaluate
     * 
     */
    @Import(name="propertyName")
    private @Nullable String propertyName;

    /**
     * @return The property to evaluate
     * 
     */
    public Optional<String> propertyName() {
        return Optional.ofNullable(this.propertyName);
    }

    /**
     * The values to use for evaluating the condition
     * 
     */
    @Import(name="propertyValues")
    private @Nullable List<String> propertyValues;

    /**
     * @return The values to use for evaluating the condition
     * 
     */
    public Optional<List<String>> propertyValues() {
        return Optional.ofNullable(this.propertyValues);
    }

    private AutomationRulePropertyValuesConditionResponseConditionProperties() {}

    private AutomationRulePropertyValuesConditionResponseConditionProperties(AutomationRulePropertyValuesConditionResponseConditionProperties $) {
        this.operator = $.operator;
        this.propertyName = $.propertyName;
        this.propertyValues = $.propertyValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationRulePropertyValuesConditionResponseConditionProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationRulePropertyValuesConditionResponseConditionProperties $;

        public Builder() {
            $ = new AutomationRulePropertyValuesConditionResponseConditionProperties();
        }

        public Builder(AutomationRulePropertyValuesConditionResponseConditionProperties defaults) {
            $ = new AutomationRulePropertyValuesConditionResponseConditionProperties(Objects.requireNonNull(defaults));
        }

        /**
         * @param operator The operator to use for evaluation the condition
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable String operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param propertyName The property to evaluate
         * 
         * @return builder
         * 
         */
        public Builder propertyName(@Nullable String propertyName) {
            $.propertyName = propertyName;
            return this;
        }

        /**
         * @param propertyValues The values to use for evaluating the condition
         * 
         * @return builder
         * 
         */
        public Builder propertyValues(@Nullable List<String> propertyValues) {
            $.propertyValues = propertyValues;
            return this;
        }

        /**
         * @param propertyValues The values to use for evaluating the condition
         * 
         * @return builder
         * 
         */
        public Builder propertyValues(String... propertyValues) {
            return propertyValues(List.of(propertyValues));
        }

        public AutomationRulePropertyValuesConditionResponseConditionProperties build() {
            return $;
        }
    }

}
