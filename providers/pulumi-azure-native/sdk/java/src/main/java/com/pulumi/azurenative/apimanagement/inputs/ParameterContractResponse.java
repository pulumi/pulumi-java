// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Operation parameters details.
 * 
 */
public final class ParameterContractResponse extends com.pulumi.resources.InvokeArgs {

    public static final ParameterContractResponse Empty = new ParameterContractResponse();

    /**
     * Default parameter value.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable String defaultValue;

    /**
     * @return Default parameter value.
     * 
     */
    public Optional<String> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * Parameter description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Parameter description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Parameter name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Parameter name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Specifies whether parameter is required or not.
     * 
     */
    @Import(name="required")
    private @Nullable Boolean required;

    /**
     * @return Specifies whether parameter is required or not.
     * 
     */
    public Optional<Boolean> required() {
        return Optional.ofNullable(this.required);
    }

    /**
     * Parameter type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Parameter type.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Parameter values.
     * 
     */
    @Import(name="values")
    private @Nullable List<String> values;

    /**
     * @return Parameter values.
     * 
     */
    public Optional<List<String>> values() {
        return Optional.ofNullable(this.values);
    }

    private ParameterContractResponse() {}

    private ParameterContractResponse(ParameterContractResponse $) {
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.name = $.name;
        this.required = $.required;
        this.type = $.type;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ParameterContractResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ParameterContractResponse $;

        public Builder() {
            $ = new ParameterContractResponse();
        }

        public Builder(ParameterContractResponse defaults) {
            $ = new ParameterContractResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValue Default parameter value.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable String defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param description Parameter description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param name Parameter name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param required Specifies whether parameter is required or not.
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Boolean required) {
            $.required = required;
            return this;
        }

        /**
         * @param type Parameter type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param values Parameter values.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable List<String> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Parameter values.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public ParameterContractResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
