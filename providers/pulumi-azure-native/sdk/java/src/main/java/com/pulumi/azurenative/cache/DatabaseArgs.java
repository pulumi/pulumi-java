// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cache;

import com.pulumi.azurenative.cache.enums.ClusteringPolicy;
import com.pulumi.azurenative.cache.enums.EvictionPolicy;
import com.pulumi.azurenative.cache.enums.Protocol;
import com.pulumi.azurenative.cache.inputs.ModuleArgs;
import com.pulumi.azurenative.cache.inputs.PersistenceArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseArgs Empty = new DatabaseArgs();

    /**
     * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
     * 
     */
    @Import(name="clientProtocol")
    private @Nullable Output<Either<String,Protocol>> clientProtocol;

    /**
     * @return Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
     * 
     */
    public Optional<Output<Either<String,Protocol>>> clientProtocol() {
        return Optional.ofNullable(this.clientProtocol);
    }

    /**
     * The name of the RedisEnterprise cluster.
     * 
     */
    @Import(name="clusterName", required=true)
    private Output<String> clusterName;

    /**
     * @return The name of the RedisEnterprise cluster.
     * 
     */
    public Output<String> clusterName() {
        return this.clusterName;
    }

    /**
     * Clustering policy - default is OSSCluster. Specified at create time.
     * 
     */
    @Import(name="clusteringPolicy")
    private @Nullable Output<Either<String,ClusteringPolicy>> clusteringPolicy;

    /**
     * @return Clustering policy - default is OSSCluster. Specified at create time.
     * 
     */
    public Optional<Output<Either<String,ClusteringPolicy>>> clusteringPolicy() {
        return Optional.ofNullable(this.clusteringPolicy);
    }

    /**
     * The name of the database.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return The name of the database.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * Redis eviction policy - default is VolatileLRU
     * 
     */
    @Import(name="evictionPolicy")
    private @Nullable Output<Either<String,EvictionPolicy>> evictionPolicy;

    /**
     * @return Redis eviction policy - default is VolatileLRU
     * 
     */
    public Optional<Output<Either<String,EvictionPolicy>>> evictionPolicy() {
        return Optional.ofNullable(this.evictionPolicy);
    }

    /**
     * Optional set of redis modules to enable in this database - modules can only be added at creation time.
     * 
     */
    @Import(name="modules")
    private @Nullable Output<List<ModuleArgs>> modules;

    /**
     * @return Optional set of redis modules to enable in this database - modules can only be added at creation time.
     * 
     */
    public Optional<Output<List<ModuleArgs>>> modules() {
        return Optional.ofNullable(this.modules);
    }

    /**
     * Persistence settings
     * 
     */
    @Import(name="persistence")
    private @Nullable Output<PersistenceArgs> persistence;

    /**
     * @return Persistence settings
     * 
     */
    public Optional<Output<PersistenceArgs>> persistence() {
        return Optional.ofNullable(this.persistence);
    }

    /**
     * TCP port of the database endpoint. Specified at create time. Defaults to an available port.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return TCP port of the database endpoint. Specified at create time. Defaults to an available port.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private DatabaseArgs() {}

    private DatabaseArgs(DatabaseArgs $) {
        this.clientProtocol = $.clientProtocol;
        this.clusterName = $.clusterName;
        this.clusteringPolicy = $.clusteringPolicy;
        this.databaseName = $.databaseName;
        this.evictionPolicy = $.evictionPolicy;
        this.modules = $.modules;
        this.persistence = $.persistence;
        this.port = $.port;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseArgs $;

        public Builder() {
            $ = new DatabaseArgs();
        }

        public Builder(DatabaseArgs defaults) {
            $ = new DatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientProtocol Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
         * 
         * @return builder
         * 
         */
        public Builder clientProtocol(@Nullable Output<Either<String,Protocol>> clientProtocol) {
            $.clientProtocol = clientProtocol;
            return this;
        }

        /**
         * @param clientProtocol Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
         * 
         * @return builder
         * 
         */
        public Builder clientProtocol(Either<String,Protocol> clientProtocol) {
            return clientProtocol(Output.of(clientProtocol));
        }

        /**
         * @param clientProtocol Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
         * 
         * @return builder
         * 
         */
        public Builder clientProtocol(String clientProtocol) {
            return clientProtocol(Either.ofLeft(clientProtocol));
        }

        /**
         * @param clientProtocol Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
         * 
         * @return builder
         * 
         */
        public Builder clientProtocol(Protocol clientProtocol) {
            return clientProtocol(Either.ofRight(clientProtocol));
        }

        /**
         * @param clusterName The name of the RedisEnterprise cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName The name of the RedisEnterprise cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param clusteringPolicy Clustering policy - default is OSSCluster. Specified at create time.
         * 
         * @return builder
         * 
         */
        public Builder clusteringPolicy(@Nullable Output<Either<String,ClusteringPolicy>> clusteringPolicy) {
            $.clusteringPolicy = clusteringPolicy;
            return this;
        }

        /**
         * @param clusteringPolicy Clustering policy - default is OSSCluster. Specified at create time.
         * 
         * @return builder
         * 
         */
        public Builder clusteringPolicy(Either<String,ClusteringPolicy> clusteringPolicy) {
            return clusteringPolicy(Output.of(clusteringPolicy));
        }

        /**
         * @param clusteringPolicy Clustering policy - default is OSSCluster. Specified at create time.
         * 
         * @return builder
         * 
         */
        public Builder clusteringPolicy(String clusteringPolicy) {
            return clusteringPolicy(Either.ofLeft(clusteringPolicy));
        }

        /**
         * @param clusteringPolicy Clustering policy - default is OSSCluster. Specified at create time.
         * 
         * @return builder
         * 
         */
        public Builder clusteringPolicy(ClusteringPolicy clusteringPolicy) {
            return clusteringPolicy(Either.ofRight(clusteringPolicy));
        }

        /**
         * @param databaseName The name of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param evictionPolicy Redis eviction policy - default is VolatileLRU
         * 
         * @return builder
         * 
         */
        public Builder evictionPolicy(@Nullable Output<Either<String,EvictionPolicy>> evictionPolicy) {
            $.evictionPolicy = evictionPolicy;
            return this;
        }

        /**
         * @param evictionPolicy Redis eviction policy - default is VolatileLRU
         * 
         * @return builder
         * 
         */
        public Builder evictionPolicy(Either<String,EvictionPolicy> evictionPolicy) {
            return evictionPolicy(Output.of(evictionPolicy));
        }

        /**
         * @param evictionPolicy Redis eviction policy - default is VolatileLRU
         * 
         * @return builder
         * 
         */
        public Builder evictionPolicy(String evictionPolicy) {
            return evictionPolicy(Either.ofLeft(evictionPolicy));
        }

        /**
         * @param evictionPolicy Redis eviction policy - default is VolatileLRU
         * 
         * @return builder
         * 
         */
        public Builder evictionPolicy(EvictionPolicy evictionPolicy) {
            return evictionPolicy(Either.ofRight(evictionPolicy));
        }

        /**
         * @param modules Optional set of redis modules to enable in this database - modules can only be added at creation time.
         * 
         * @return builder
         * 
         */
        public Builder modules(@Nullable Output<List<ModuleArgs>> modules) {
            $.modules = modules;
            return this;
        }

        /**
         * @param modules Optional set of redis modules to enable in this database - modules can only be added at creation time.
         * 
         * @return builder
         * 
         */
        public Builder modules(List<ModuleArgs> modules) {
            return modules(Output.of(modules));
        }

        /**
         * @param modules Optional set of redis modules to enable in this database - modules can only be added at creation time.
         * 
         * @return builder
         * 
         */
        public Builder modules(ModuleArgs... modules) {
            return modules(List.of(modules));
        }

        /**
         * @param persistence Persistence settings
         * 
         * @return builder
         * 
         */
        public Builder persistence(@Nullable Output<PersistenceArgs> persistence) {
            $.persistence = persistence;
            return this;
        }

        /**
         * @param persistence Persistence settings
         * 
         * @return builder
         * 
         */
        public Builder persistence(PersistenceArgs persistence) {
            return persistence(Output.of(persistence));
        }

        /**
         * @param port TCP port of the database endpoint. Specified at create time. Defaults to an available port.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port TCP port of the database endpoint. Specified at create time. Defaults to an available port.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public DatabaseArgs build() {
            $.clusterName = Objects.requireNonNull($.clusterName, "expected parameter 'clusterName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
