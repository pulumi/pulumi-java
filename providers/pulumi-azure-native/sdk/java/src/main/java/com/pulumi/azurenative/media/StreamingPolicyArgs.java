// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media;

import com.pulumi.azurenative.media.inputs.CommonEncryptionCbcsArgs;
import com.pulumi.azurenative.media.inputs.CommonEncryptionCencArgs;
import com.pulumi.azurenative.media.inputs.EnvelopeEncryptionArgs;
import com.pulumi.azurenative.media.inputs.NoEncryptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamingPolicyArgs Empty = new StreamingPolicyArgs();

    /**
     * The Media Services account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The Media Services account name.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Configuration of CommonEncryptionCbcs
     * 
     */
    @Import(name="commonEncryptionCbcs")
    private @Nullable Output<CommonEncryptionCbcsArgs> commonEncryptionCbcs;

    /**
     * @return Configuration of CommonEncryptionCbcs
     * 
     */
    public Optional<Output<CommonEncryptionCbcsArgs>> commonEncryptionCbcs() {
        return Optional.ofNullable(this.commonEncryptionCbcs);
    }

    /**
     * Configuration of CommonEncryptionCenc
     * 
     */
    @Import(name="commonEncryptionCenc")
    private @Nullable Output<CommonEncryptionCencArgs> commonEncryptionCenc;

    /**
     * @return Configuration of CommonEncryptionCenc
     * 
     */
    public Optional<Output<CommonEncryptionCencArgs>> commonEncryptionCenc() {
        return Optional.ofNullable(this.commonEncryptionCenc);
    }

    /**
     * Default ContentKey used by current Streaming Policy
     * 
     */
    @Import(name="defaultContentKeyPolicyName")
    private @Nullable Output<String> defaultContentKeyPolicyName;

    /**
     * @return Default ContentKey used by current Streaming Policy
     * 
     */
    public Optional<Output<String>> defaultContentKeyPolicyName() {
        return Optional.ofNullable(this.defaultContentKeyPolicyName);
    }

    /**
     * Configuration of EnvelopeEncryption
     * 
     */
    @Import(name="envelopeEncryption")
    private @Nullable Output<EnvelopeEncryptionArgs> envelopeEncryption;

    /**
     * @return Configuration of EnvelopeEncryption
     * 
     */
    public Optional<Output<EnvelopeEncryptionArgs>> envelopeEncryption() {
        return Optional.ofNullable(this.envelopeEncryption);
    }

    /**
     * Configurations of NoEncryption
     * 
     */
    @Import(name="noEncryption")
    private @Nullable Output<NoEncryptionArgs> noEncryption;

    /**
     * @return Configurations of NoEncryption
     * 
     */
    public Optional<Output<NoEncryptionArgs>> noEncryption() {
        return Optional.ofNullable(this.noEncryption);
    }

    /**
     * The name of the resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the Azure subscription.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Streaming Policy name.
     * 
     */
    @Import(name="streamingPolicyName")
    private @Nullable Output<String> streamingPolicyName;

    /**
     * @return The Streaming Policy name.
     * 
     */
    public Optional<Output<String>> streamingPolicyName() {
        return Optional.ofNullable(this.streamingPolicyName);
    }

    private StreamingPolicyArgs() {}

    private StreamingPolicyArgs(StreamingPolicyArgs $) {
        this.accountName = $.accountName;
        this.commonEncryptionCbcs = $.commonEncryptionCbcs;
        this.commonEncryptionCenc = $.commonEncryptionCenc;
        this.defaultContentKeyPolicyName = $.defaultContentKeyPolicyName;
        this.envelopeEncryption = $.envelopeEncryption;
        this.noEncryption = $.noEncryption;
        this.resourceGroupName = $.resourceGroupName;
        this.streamingPolicyName = $.streamingPolicyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingPolicyArgs $;

        public Builder() {
            $ = new StreamingPolicyArgs();
        }

        public Builder(StreamingPolicyArgs defaults) {
            $ = new StreamingPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The Media Services account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The Media Services account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param commonEncryptionCbcs Configuration of CommonEncryptionCbcs
         * 
         * @return builder
         * 
         */
        public Builder commonEncryptionCbcs(@Nullable Output<CommonEncryptionCbcsArgs> commonEncryptionCbcs) {
            $.commonEncryptionCbcs = commonEncryptionCbcs;
            return this;
        }

        /**
         * @param commonEncryptionCbcs Configuration of CommonEncryptionCbcs
         * 
         * @return builder
         * 
         */
        public Builder commonEncryptionCbcs(CommonEncryptionCbcsArgs commonEncryptionCbcs) {
            return commonEncryptionCbcs(Output.of(commonEncryptionCbcs));
        }

        /**
         * @param commonEncryptionCenc Configuration of CommonEncryptionCenc
         * 
         * @return builder
         * 
         */
        public Builder commonEncryptionCenc(@Nullable Output<CommonEncryptionCencArgs> commonEncryptionCenc) {
            $.commonEncryptionCenc = commonEncryptionCenc;
            return this;
        }

        /**
         * @param commonEncryptionCenc Configuration of CommonEncryptionCenc
         * 
         * @return builder
         * 
         */
        public Builder commonEncryptionCenc(CommonEncryptionCencArgs commonEncryptionCenc) {
            return commonEncryptionCenc(Output.of(commonEncryptionCenc));
        }

        /**
         * @param defaultContentKeyPolicyName Default ContentKey used by current Streaming Policy
         * 
         * @return builder
         * 
         */
        public Builder defaultContentKeyPolicyName(@Nullable Output<String> defaultContentKeyPolicyName) {
            $.defaultContentKeyPolicyName = defaultContentKeyPolicyName;
            return this;
        }

        /**
         * @param defaultContentKeyPolicyName Default ContentKey used by current Streaming Policy
         * 
         * @return builder
         * 
         */
        public Builder defaultContentKeyPolicyName(String defaultContentKeyPolicyName) {
            return defaultContentKeyPolicyName(Output.of(defaultContentKeyPolicyName));
        }

        /**
         * @param envelopeEncryption Configuration of EnvelopeEncryption
         * 
         * @return builder
         * 
         */
        public Builder envelopeEncryption(@Nullable Output<EnvelopeEncryptionArgs> envelopeEncryption) {
            $.envelopeEncryption = envelopeEncryption;
            return this;
        }

        /**
         * @param envelopeEncryption Configuration of EnvelopeEncryption
         * 
         * @return builder
         * 
         */
        public Builder envelopeEncryption(EnvelopeEncryptionArgs envelopeEncryption) {
            return envelopeEncryption(Output.of(envelopeEncryption));
        }

        /**
         * @param noEncryption Configurations of NoEncryption
         * 
         * @return builder
         * 
         */
        public Builder noEncryption(@Nullable Output<NoEncryptionArgs> noEncryption) {
            $.noEncryption = noEncryption;
            return this;
        }

        /**
         * @param noEncryption Configurations of NoEncryption
         * 
         * @return builder
         * 
         */
        public Builder noEncryption(NoEncryptionArgs noEncryption) {
            return noEncryption(Output.of(noEncryption));
        }

        /**
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param streamingPolicyName The Streaming Policy name.
         * 
         * @return builder
         * 
         */
        public Builder streamingPolicyName(@Nullable Output<String> streamingPolicyName) {
            $.streamingPolicyName = streamingPolicyName;
            return this;
        }

        /**
         * @param streamingPolicyName The Streaming Policy name.
         * 
         * @return builder
         * 
         */
        public Builder streamingPolicyName(String streamingPolicyName) {
            return streamingPolicyName(Output.of(streamingPolicyName));
        }

        public StreamingPolicyArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
