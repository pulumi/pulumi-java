// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.enums.OperatingSystemType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DockerImagePlatformArgs extends com.pulumi.resources.ResourceArgs {

    public static final DockerImagePlatformArgs Empty = new DockerImagePlatformArgs();

    /**
     * The OS type the Environment.
     * 
     */
    @Import(name="operatingSystemType")
    private @Nullable Output<Either<String,OperatingSystemType>> operatingSystemType;

    /**
     * @return The OS type the Environment.
     * 
     */
    public Optional<Output<Either<String,OperatingSystemType>>> operatingSystemType() {
        return Optional.ofNullable(this.operatingSystemType);
    }

    private DockerImagePlatformArgs() {}

    private DockerImagePlatformArgs(DockerImagePlatformArgs $) {
        this.operatingSystemType = $.operatingSystemType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DockerImagePlatformArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DockerImagePlatformArgs $;

        public Builder() {
            $ = new DockerImagePlatformArgs();
        }

        public Builder(DockerImagePlatformArgs defaults) {
            $ = new DockerImagePlatformArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operatingSystemType The OS type the Environment.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystemType(@Nullable Output<Either<String,OperatingSystemType>> operatingSystemType) {
            $.operatingSystemType = operatingSystemType;
            return this;
        }

        /**
         * @param operatingSystemType The OS type the Environment.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystemType(Either<String,OperatingSystemType> operatingSystemType) {
            return operatingSystemType(Output.of(operatingSystemType));
        }

        /**
         * @param operatingSystemType The OS type the Environment.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystemType(String operatingSystemType) {
            return operatingSystemType(Either.ofLeft(operatingSystemType));
        }

        /**
         * @param operatingSystemType The OS type the Environment.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystemType(OperatingSystemType operatingSystemType) {
            return operatingSystemType(Either.ofRight(operatingSystemType));
        }

        public DockerImagePlatformArgs build() {
            return $;
        }
    }

}
