// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.azurearcdata;

import com.pulumi.azurenative.azurearcdata.inputs.DataControllerPropertiesArgs;
import com.pulumi.azurenative.azurearcdata.inputs.ExtendedLocationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DataControllerArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataControllerArgs Empty = new DataControllerArgs();

    @Import(name="dataControllerName")
      private final @Nullable Output<String> dataControllerName;

    public Output<String> dataControllerName() {
        return this.dataControllerName == null ? Codegen.empty() : this.dataControllerName;
    }

    /**
     * The extendedLocation of the resource.
     * 
     */
    @Import(name="extendedLocation")
      private final @Nullable Output<ExtendedLocationArgs> extendedLocation;

    public Output<ExtendedLocationArgs> extendedLocation() {
        return this.extendedLocation == null ? Codegen.empty() : this.extendedLocation;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The data controller&#39;s properties
     * 
     */
    @Import(name="properties", required=true)
      private final Output<DataControllerPropertiesArgs> properties;

    public Output<DataControllerPropertiesArgs> properties() {
        return this.properties;
    }

    /**
     * The name of the Azure resource group
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public DataControllerArgs(
        @Nullable Output<String> dataControllerName,
        @Nullable Output<ExtendedLocationArgs> extendedLocation,
        @Nullable Output<String> location,
        Output<DataControllerPropertiesArgs> properties,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags) {
        this.dataControllerName = dataControllerName;
        this.extendedLocation = extendedLocation;
        this.location = location;
        this.properties = Objects.requireNonNull(properties, "expected parameter 'properties' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private DataControllerArgs() {
        this.dataControllerName = Codegen.empty();
        this.extendedLocation = Codegen.empty();
        this.location = Codegen.empty();
        this.properties = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataControllerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> dataControllerName;
        private @Nullable Output<ExtendedLocationArgs> extendedLocation;
        private @Nullable Output<String> location;
        private Output<DataControllerPropertiesArgs> properties;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DataControllerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataControllerName = defaults.dataControllerName;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.location = defaults.location;
    	      this.properties = defaults.properties;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder dataControllerName(@Nullable Output<String> dataControllerName) {
            this.dataControllerName = dataControllerName;
            return this;
        }
        public Builder dataControllerName(@Nullable String dataControllerName) {
            this.dataControllerName = Codegen.ofNullable(dataControllerName);
            return this;
        }
        public Builder extendedLocation(@Nullable Output<ExtendedLocationArgs> extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }
        public Builder extendedLocation(@Nullable ExtendedLocationArgs extendedLocation) {
            this.extendedLocation = Codegen.ofNullable(extendedLocation);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder properties(Output<DataControllerPropertiesArgs> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        public Builder properties(DataControllerPropertiesArgs properties) {
            this.properties = Output.of(Objects.requireNonNull(properties));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public DataControllerArgs build() {
            return new DataControllerArgs(dataControllerName, extendedLocation, location, properties, resourceGroupName, tags);
        }
    }
}
