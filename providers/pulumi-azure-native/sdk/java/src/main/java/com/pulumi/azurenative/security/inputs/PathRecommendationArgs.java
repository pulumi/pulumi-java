// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.inputs;

import com.pulumi.azurenative.security.inputs.PublisherInfoArgs;
import com.pulumi.azurenative.security.inputs.UserRecommendationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a path that is recommended to be allowed and its properties
 * 
 */
public final class PathRecommendationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PathRecommendationArgs Empty = new PathRecommendationArgs();

    /**
     * The recommendation action of the machine or rule
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Whether the application is commonly run on the machine
     * 
     */
    @Import(name="common")
    private @Nullable Output<Boolean> common;

    public Optional<Output<Boolean>> common() {
        return Optional.ofNullable(this.common);
    }

    /**
     * The configuration status of the machines group or machine or rule
     * 
     */
    @Import(name="configurationStatus")
    private @Nullable Output<String> configurationStatus;

    public Optional<Output<String>> configurationStatus() {
        return Optional.ofNullable(this.configurationStatus);
    }

    /**
     * The type of the file (for Linux files - Executable is used)
     * 
     */
    @Import(name="fileType")
    private @Nullable Output<String> fileType;

    public Optional<Output<String>> fileType() {
        return Optional.ofNullable(this.fileType);
    }

    /**
     * The full path of the file, or an identifier of the application
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Represents the publisher information of a process/rule
     * 
     */
    @Import(name="publisherInfo")
    private @Nullable Output<PublisherInfoArgs> publisherInfo;

    public Optional<Output<PublisherInfoArgs>> publisherInfo() {
        return Optional.ofNullable(this.publisherInfo);
    }

    /**
     * The type of the rule to be allowed
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="userSids")
    private @Nullable Output<List<String>> userSids;

    public Optional<Output<List<String>>> userSids() {
        return Optional.ofNullable(this.userSids);
    }

    @Import(name="usernames")
    private @Nullable Output<List<UserRecommendationArgs>> usernames;

    public Optional<Output<List<UserRecommendationArgs>>> usernames() {
        return Optional.ofNullable(this.usernames);
    }

    private PathRecommendationArgs() {}

    private PathRecommendationArgs(PathRecommendationArgs $) {
        this.action = $.action;
        this.common = $.common;
        this.configurationStatus = $.configurationStatus;
        this.fileType = $.fileType;
        this.path = $.path;
        this.publisherInfo = $.publisherInfo;
        this.type = $.type;
        this.userSids = $.userSids;
        this.usernames = $.usernames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PathRecommendationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PathRecommendationArgs $;

        public Builder() {
            $ = new PathRecommendationArgs();
        }

        public Builder(PathRecommendationArgs defaults) {
            $ = new PathRecommendationArgs(Objects.requireNonNull(defaults));
        }

        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        public Builder action(String action) {
            return action(Output.of(action));
        }

        public Builder common(@Nullable Output<Boolean> common) {
            $.common = common;
            return this;
        }

        public Builder common(Boolean common) {
            return common(Output.of(common));
        }

        public Builder configurationStatus(@Nullable Output<String> configurationStatus) {
            $.configurationStatus = configurationStatus;
            return this;
        }

        public Builder configurationStatus(String configurationStatus) {
            return configurationStatus(Output.of(configurationStatus));
        }

        public Builder fileType(@Nullable Output<String> fileType) {
            $.fileType = fileType;
            return this;
        }

        public Builder fileType(String fileType) {
            return fileType(Output.of(fileType));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder publisherInfo(@Nullable Output<PublisherInfoArgs> publisherInfo) {
            $.publisherInfo = publisherInfo;
            return this;
        }

        public Builder publisherInfo(PublisherInfoArgs publisherInfo) {
            return publisherInfo(Output.of(publisherInfo));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder userSids(@Nullable Output<List<String>> userSids) {
            $.userSids = userSids;
            return this;
        }

        public Builder userSids(List<String> userSids) {
            return userSids(Output.of(userSids));
        }

        public Builder userSids(String... userSids) {
            return userSids(List.of(userSids));
        }

        public Builder usernames(@Nullable Output<List<UserRecommendationArgs>> usernames) {
            $.usernames = usernames;
            return this;
        }

        public Builder usernames(List<UserRecommendationArgs> usernames) {
            return usernames(Output.of(usernames));
        }

        public Builder usernames(UserRecommendationArgs... usernames) {
            return usernames(List.of(usernames));
        }

        public PathRecommendationArgs build() {
            return $;
        }
    }

}
