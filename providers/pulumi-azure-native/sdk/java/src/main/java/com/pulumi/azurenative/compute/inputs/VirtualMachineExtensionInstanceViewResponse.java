// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.InstanceViewStatusResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The instance view of a virtual machine extension.
 * 
 */
public final class VirtualMachineExtensionInstanceViewResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualMachineExtensionInstanceViewResponse Empty = new VirtualMachineExtensionInstanceViewResponse();

    /**
     * The virtual machine extension name.
     * 
     */
    @Import(name="name")
      private final @Nullable String name;

    public Optional<String> name() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * The resource status information.
     * 
     */
    @Import(name="statuses")
      private final @Nullable List<InstanceViewStatusResponse> statuses;

    public List<InstanceViewStatusResponse> statuses() {
        return this.statuses == null ? List.of() : this.statuses;
    }

    /**
     * The resource status information.
     * 
     */
    @Import(name="substatuses")
      private final @Nullable List<InstanceViewStatusResponse> substatuses;

    public List<InstanceViewStatusResponse> substatuses() {
        return this.substatuses == null ? List.of() : this.substatuses;
    }

    /**
     * Specifies the type of the extension; an example is &#34;CustomScriptExtension&#34;.
     * 
     */
    @Import(name="type")
      private final @Nullable String type;

    public Optional<String> type() {
        return this.type == null ? Optional.empty() : Optional.ofNullable(this.type);
    }

    /**
     * Specifies the version of the script handler.
     * 
     */
    @Import(name="typeHandlerVersion")
      private final @Nullable String typeHandlerVersion;

    public Optional<String> typeHandlerVersion() {
        return this.typeHandlerVersion == null ? Optional.empty() : Optional.ofNullable(this.typeHandlerVersion);
    }

    public VirtualMachineExtensionInstanceViewResponse(
        @Nullable String name,
        @Nullable List<InstanceViewStatusResponse> statuses,
        @Nullable List<InstanceViewStatusResponse> substatuses,
        @Nullable String type,
        @Nullable String typeHandlerVersion) {
        this.name = name;
        this.statuses = statuses;
        this.substatuses = substatuses;
        this.type = type;
        this.typeHandlerVersion = typeHandlerVersion;
    }

    private VirtualMachineExtensionInstanceViewResponse() {
        this.name = null;
        this.statuses = List.of();
        this.substatuses = List.of();
        this.type = null;
        this.typeHandlerVersion = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineExtensionInstanceViewResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String name;
        private @Nullable List<InstanceViewStatusResponse> statuses;
        private @Nullable List<InstanceViewStatusResponse> substatuses;
        private @Nullable String type;
        private @Nullable String typeHandlerVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineExtensionInstanceViewResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.statuses = defaults.statuses;
    	      this.substatuses = defaults.substatuses;
    	      this.type = defaults.type;
    	      this.typeHandlerVersion = defaults.typeHandlerVersion;
        }

        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder statuses(@Nullable List<InstanceViewStatusResponse> statuses) {
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(InstanceViewStatusResponse... statuses) {
            return statuses(List.of(statuses));
        }
        public Builder substatuses(@Nullable List<InstanceViewStatusResponse> substatuses) {
            this.substatuses = substatuses;
            return this;
        }
        public Builder substatuses(InstanceViewStatusResponse... substatuses) {
            return substatuses(List.of(substatuses));
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public Builder typeHandlerVersion(@Nullable String typeHandlerVersion) {
            this.typeHandlerVersion = typeHandlerVersion;
            return this;
        }        public VirtualMachineExtensionInstanceViewResponse build() {
            return new VirtualMachineExtensionInstanceViewResponse(name, statuses, substatuses, type, typeHandlerVersion);
        }
    }
}
