// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managednetwork;

import com.pulumi.azurenative.managednetwork.inputs.ManagedNetworkPeeringPolicyPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedNetworkPeeringPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedNetworkPeeringPolicyArgs Empty = new ManagedNetworkPeeringPolicyArgs();

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the Managed Network.
     * 
     */
    @Import(name="managedNetworkName", required=true)
    private Output<String> managedNetworkName;

    /**
     * @return The name of the Managed Network.
     * 
     */
    public Output<String> managedNetworkName() {
        return this.managedNetworkName;
    }

    /**
     * The name of the Managed Network Peering Policy.
     * 
     */
    @Import(name="managedNetworkPeeringPolicyName")
    private @Nullable Output<String> managedNetworkPeeringPolicyName;

    /**
     * @return The name of the Managed Network Peering Policy.
     * 
     */
    public Optional<Output<String>> managedNetworkPeeringPolicyName() {
        return Optional.ofNullable(this.managedNetworkPeeringPolicyName);
    }

    /**
     * Gets or sets the properties of a Managed Network Policy
     * 
     */
    @Import(name="properties")
    private @Nullable Output<ManagedNetworkPeeringPolicyPropertiesArgs> properties;

    /**
     * @return Gets or sets the properties of a Managed Network Policy
     * 
     */
    public Optional<Output<ManagedNetworkPeeringPolicyPropertiesArgs>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private ManagedNetworkPeeringPolicyArgs() {}

    private ManagedNetworkPeeringPolicyArgs(ManagedNetworkPeeringPolicyArgs $) {
        this.location = $.location;
        this.managedNetworkName = $.managedNetworkName;
        this.managedNetworkPeeringPolicyName = $.managedNetworkPeeringPolicyName;
        this.properties = $.properties;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedNetworkPeeringPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedNetworkPeeringPolicyArgs $;

        public Builder() {
            $ = new ManagedNetworkPeeringPolicyArgs();
        }

        public Builder(ManagedNetworkPeeringPolicyArgs defaults) {
            $ = new ManagedNetworkPeeringPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managedNetworkName The name of the Managed Network.
         * 
         * @return builder
         * 
         */
        public Builder managedNetworkName(Output<String> managedNetworkName) {
            $.managedNetworkName = managedNetworkName;
            return this;
        }

        /**
         * @param managedNetworkName The name of the Managed Network.
         * 
         * @return builder
         * 
         */
        public Builder managedNetworkName(String managedNetworkName) {
            return managedNetworkName(Output.of(managedNetworkName));
        }

        /**
         * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
         * 
         * @return builder
         * 
         */
        public Builder managedNetworkPeeringPolicyName(@Nullable Output<String> managedNetworkPeeringPolicyName) {
            $.managedNetworkPeeringPolicyName = managedNetworkPeeringPolicyName;
            return this;
        }

        /**
         * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
         * 
         * @return builder
         * 
         */
        public Builder managedNetworkPeeringPolicyName(String managedNetworkPeeringPolicyName) {
            return managedNetworkPeeringPolicyName(Output.of(managedNetworkPeeringPolicyName));
        }

        /**
         * @param properties Gets or sets the properties of a Managed Network Policy
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<ManagedNetworkPeeringPolicyPropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Gets or sets the properties of a Managed Network Policy
         * 
         * @return builder
         * 
         */
        public Builder properties(ManagedNetworkPeeringPolicyPropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public ManagedNetworkPeeringPolicyArgs build() {
            $.managedNetworkName = Objects.requireNonNull($.managedNetworkName, "expected parameter 'managedNetworkName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
