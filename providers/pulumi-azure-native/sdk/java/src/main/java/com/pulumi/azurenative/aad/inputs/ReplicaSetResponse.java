// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.aad.inputs;

import com.pulumi.azurenative.aad.inputs.HealthAlertResponse;
import com.pulumi.azurenative.aad.inputs.HealthMonitorResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Replica Set Definition
 * 
 */
public final class ReplicaSetResponse extends com.pulumi.resources.InvokeArgs {

    public static final ReplicaSetResponse Empty = new ReplicaSetResponse();

    /**
     * List of Domain Controller IP Address
     * 
     */
    @Import(name="domainControllerIpAddress", required=true)
    private List<String> domainControllerIpAddress;

    public List<String> domainControllerIpAddress() {
        return this.domainControllerIpAddress;
    }

    /**
     * External access ip address.
     * 
     */
    @Import(name="externalAccessIpAddress", required=true)
    private String externalAccessIpAddress;

    public String externalAccessIpAddress() {
        return this.externalAccessIpAddress;
    }

    /**
     * List of Domain Health Alerts
     * 
     */
    @Import(name="healthAlerts", required=true)
    private List<HealthAlertResponse> healthAlerts;

    public List<HealthAlertResponse> healthAlerts() {
        return this.healthAlerts;
    }

    /**
     * Last domain evaluation run DateTime
     * 
     */
    @Import(name="healthLastEvaluated", required=true)
    private String healthLastEvaluated;

    public String healthLastEvaluated() {
        return this.healthLastEvaluated;
    }

    /**
     * List of Domain Health Monitors
     * 
     */
    @Import(name="healthMonitors", required=true)
    private List<HealthMonitorResponse> healthMonitors;

    public List<HealthMonitorResponse> healthMonitors() {
        return this.healthMonitors;
    }

    /**
     * Virtual network location
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * ReplicaSet Id
     * 
     */
    @Import(name="replicaSetId", required=true)
    private String replicaSetId;

    public String replicaSetId() {
        return this.replicaSetId;
    }

    /**
     * Status of Domain Service instance
     * 
     */
    @Import(name="serviceStatus", required=true)
    private String serviceStatus;

    public String serviceStatus() {
        return this.serviceStatus;
    }

    /**
     * The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
     * 
     */
    @Import(name="subnetId")
    private @Nullable String subnetId;

    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * Virtual network site id
     * 
     */
    @Import(name="vnetSiteId", required=true)
    private String vnetSiteId;

    public String vnetSiteId() {
        return this.vnetSiteId;
    }

    private ReplicaSetResponse() {}

    private ReplicaSetResponse(ReplicaSetResponse $) {
        this.domainControllerIpAddress = $.domainControllerIpAddress;
        this.externalAccessIpAddress = $.externalAccessIpAddress;
        this.healthAlerts = $.healthAlerts;
        this.healthLastEvaluated = $.healthLastEvaluated;
        this.healthMonitors = $.healthMonitors;
        this.location = $.location;
        this.replicaSetId = $.replicaSetId;
        this.serviceStatus = $.serviceStatus;
        this.subnetId = $.subnetId;
        this.vnetSiteId = $.vnetSiteId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicaSetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicaSetResponse $;

        public Builder() {
            $ = new ReplicaSetResponse();
        }

        public Builder(ReplicaSetResponse defaults) {
            $ = new ReplicaSetResponse(Objects.requireNonNull(defaults));
        }

        public Builder domainControllerIpAddress(List<String> domainControllerIpAddress) {
            $.domainControllerIpAddress = domainControllerIpAddress;
            return this;
        }

        public Builder domainControllerIpAddress(String... domainControllerIpAddress) {
            return domainControllerIpAddress(List.of(domainControllerIpAddress));
        }

        public Builder externalAccessIpAddress(String externalAccessIpAddress) {
            $.externalAccessIpAddress = externalAccessIpAddress;
            return this;
        }

        public Builder healthAlerts(List<HealthAlertResponse> healthAlerts) {
            $.healthAlerts = healthAlerts;
            return this;
        }

        public Builder healthAlerts(HealthAlertResponse... healthAlerts) {
            return healthAlerts(List.of(healthAlerts));
        }

        public Builder healthLastEvaluated(String healthLastEvaluated) {
            $.healthLastEvaluated = healthLastEvaluated;
            return this;
        }

        public Builder healthMonitors(List<HealthMonitorResponse> healthMonitors) {
            $.healthMonitors = healthMonitors;
            return this;
        }

        public Builder healthMonitors(HealthMonitorResponse... healthMonitors) {
            return healthMonitors(List.of(healthMonitors));
        }

        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        public Builder replicaSetId(String replicaSetId) {
            $.replicaSetId = replicaSetId;
            return this;
        }

        public Builder serviceStatus(String serviceStatus) {
            $.serviceStatus = serviceStatus;
            return this;
        }

        public Builder subnetId(@Nullable String subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        public Builder vnetSiteId(String vnetSiteId) {
            $.vnetSiteId = vnetSiteId;
            return this;
        }

        public ReplicaSetResponse build() {
            $.domainControllerIpAddress = Objects.requireNonNull($.domainControllerIpAddress, "expected parameter 'domainControllerIpAddress' to be non-null");
            $.externalAccessIpAddress = Objects.requireNonNull($.externalAccessIpAddress, "expected parameter 'externalAccessIpAddress' to be non-null");
            $.healthAlerts = Objects.requireNonNull($.healthAlerts, "expected parameter 'healthAlerts' to be non-null");
            $.healthLastEvaluated = Objects.requireNonNull($.healthLastEvaluated, "expected parameter 'healthLastEvaluated' to be non-null");
            $.healthMonitors = Objects.requireNonNull($.healthMonitors, "expected parameter 'healthMonitors' to be non-null");
            $.replicaSetId = Objects.requireNonNull($.replicaSetId, "expected parameter 'replicaSetId' to be non-null");
            $.serviceStatus = Objects.requireNonNull($.serviceStatus, "expected parameter 'serviceStatus' to be non-null");
            $.vnetSiteId = Objects.requireNonNull($.vnetSiteId, "expected parameter 'vnetSiteId' to be non-null");
            return $;
        }
    }

}
