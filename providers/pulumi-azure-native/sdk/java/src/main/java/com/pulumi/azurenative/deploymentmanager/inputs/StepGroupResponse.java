// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.deploymentmanager.inputs;

import com.pulumi.azurenative.deploymentmanager.inputs.PrePostStepResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties that define a Step group in a rollout.
 * 
 */
public final class StepGroupResponse extends com.pulumi.resources.InvokeArgs {

    public static final StepGroupResponse Empty = new StepGroupResponse();

    /**
     * The list of step group names on which this step group depends on.
     * 
     */
    @Import(name="dependsOnStepGroups")
    private @Nullable List<String> dependsOnStepGroups;

    /**
     * @return The list of step group names on which this step group depends on.
     * 
     */
    public Optional<List<String>> dependsOnStepGroups() {
        return Optional.ofNullable(this.dependsOnStepGroups);
    }

    /**
     * The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
     * 
     */
    @Import(name="deploymentTargetId", required=true)
    private String deploymentTargetId;

    /**
     * @return The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
     * 
     */
    public String deploymentTargetId() {
        return this.deploymentTargetId;
    }

    /**
     * The name of the step group.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the step group.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The list of steps to be run after deploying the target.
     * 
     */
    @Import(name="postDeploymentSteps")
    private @Nullable List<PrePostStepResponse> postDeploymentSteps;

    /**
     * @return The list of steps to be run after deploying the target.
     * 
     */
    public Optional<List<PrePostStepResponse>> postDeploymentSteps() {
        return Optional.ofNullable(this.postDeploymentSteps);
    }

    /**
     * The list of steps to be run before deploying the target.
     * 
     */
    @Import(name="preDeploymentSteps")
    private @Nullable List<PrePostStepResponse> preDeploymentSteps;

    /**
     * @return The list of steps to be run before deploying the target.
     * 
     */
    public Optional<List<PrePostStepResponse>> preDeploymentSteps() {
        return Optional.ofNullable(this.preDeploymentSteps);
    }

    private StepGroupResponse() {}

    private StepGroupResponse(StepGroupResponse $) {
        this.dependsOnStepGroups = $.dependsOnStepGroups;
        this.deploymentTargetId = $.deploymentTargetId;
        this.name = $.name;
        this.postDeploymentSteps = $.postDeploymentSteps;
        this.preDeploymentSteps = $.preDeploymentSteps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StepGroupResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StepGroupResponse $;

        public Builder() {
            $ = new StepGroupResponse();
        }

        public Builder(StepGroupResponse defaults) {
            $ = new StepGroupResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dependsOnStepGroups The list of step group names on which this step group depends on.
         * 
         * @return builder
         * 
         */
        public Builder dependsOnStepGroups(@Nullable List<String> dependsOnStepGroups) {
            $.dependsOnStepGroups = dependsOnStepGroups;
            return this;
        }

        /**
         * @param dependsOnStepGroups The list of step group names on which this step group depends on.
         * 
         * @return builder
         * 
         */
        public Builder dependsOnStepGroups(String... dependsOnStepGroups) {
            return dependsOnStepGroups(List.of(dependsOnStepGroups));
        }

        /**
         * @param deploymentTargetId The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
         * 
         * @return builder
         * 
         */
        public Builder deploymentTargetId(String deploymentTargetId) {
            $.deploymentTargetId = deploymentTargetId;
            return this;
        }

        /**
         * @param name The name of the step group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param postDeploymentSteps The list of steps to be run after deploying the target.
         * 
         * @return builder
         * 
         */
        public Builder postDeploymentSteps(@Nullable List<PrePostStepResponse> postDeploymentSteps) {
            $.postDeploymentSteps = postDeploymentSteps;
            return this;
        }

        /**
         * @param postDeploymentSteps The list of steps to be run after deploying the target.
         * 
         * @return builder
         * 
         */
        public Builder postDeploymentSteps(PrePostStepResponse... postDeploymentSteps) {
            return postDeploymentSteps(List.of(postDeploymentSteps));
        }

        /**
         * @param preDeploymentSteps The list of steps to be run before deploying the target.
         * 
         * @return builder
         * 
         */
        public Builder preDeploymentSteps(@Nullable List<PrePostStepResponse> preDeploymentSteps) {
            $.preDeploymentSteps = preDeploymentSteps;
            return this;
        }

        /**
         * @param preDeploymentSteps The list of steps to be run before deploying the target.
         * 
         * @return builder
         * 
         */
        public Builder preDeploymentSteps(PrePostStepResponse... preDeploymentSteps) {
            return preDeploymentSteps(List.of(preDeploymentSteps));
        }

        public StepGroupResponse build() {
            $.deploymentTargetId = Objects.requireNonNull($.deploymentTargetId, "expected parameter 'deploymentTargetId' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
