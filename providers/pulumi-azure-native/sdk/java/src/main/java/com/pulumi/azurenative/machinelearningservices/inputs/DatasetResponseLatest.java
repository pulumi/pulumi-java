// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.DatasetResponseDataPath;
import com.pulumi.azurenative.machinelearningservices.inputs.DatasetStateResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.UserInfoResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Last created Dataset definition.
 * 
 */
public final class DatasetResponseLatest extends com.pulumi.resources.InvokeArgs {

    public static final DatasetResponseLatest Empty = new DatasetResponseLatest();

    /**
     * User who created.
     * 
     */
    @Import(name="createdBy")
    private @Nullable UserInfoResponse createdBy;

    /**
     * @return User who created.
     * 
     */
    public Optional<UserInfoResponse> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The dataset creation time (UTC).
     * 
     */
    @Import(name="createdTime", required=true)
    private String createdTime;

    /**
     * @return The dataset creation time (UTC).
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }

    /**
     *  Datastore and reference to location of data such as relativePath, Sql Query and etc.
     * 
     */
    @Import(name="dataPath")
    private @Nullable DatasetResponseDataPath dataPath;

    /**
     * @return  Datastore and reference to location of data such as relativePath, Sql Query and etc.
     * 
     */
    public Optional<DatasetResponseDataPath> dataPath() {
        return Optional.ofNullable(this.dataPath);
    }

    /**
     * Dataflow Json
     * 
     */
    @Import(name="dataflow", required=true)
    private String dataflow;

    /**
     * @return Dataflow Json
     * 
     */
    public String dataflow() {
        return this.dataflow;
    }

    /**
     * Dataset state
     * 
     */
    @Import(name="datasetDefinitionState")
    private @Nullable DatasetStateResponse datasetDefinitionState;

    /**
     * @return Dataset state
     * 
     */
    public Optional<DatasetStateResponse> datasetDefinitionState() {
        return Optional.ofNullable(this.datasetDefinitionState);
    }

    /**
     * Unique Dataset identifier.
     * 
     */
    @Import(name="datasetId", required=true)
    private String datasetId;

    /**
     * @return Unique Dataset identifier.
     * 
     */
    public String datasetId() {
        return this.datasetId;
    }

    /**
     * Description about the dataset.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return Description about the dataset.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * eTag description
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return eTag description
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Dataset FileType, specified by user.
     * 
     */
    @Import(name="fileType", required=true)
    private String fileType;

    /**
     * @return Dataset FileType, specified by user.
     * 
     */
    public String fileType() {
        return this.fileType;
    }

    /**
     * The dataset last modified time (UTC).
     * 
     */
    @Import(name="modifiedTime", required=true)
    private String modifiedTime;

    /**
     * @return The dataset last modified time (UTC).
     * 
     */
    public String modifiedTime() {
        return this.modifiedTime;
    }

    /**
     * Summary of Definition changes.
     * 
     */
    @Import(name="notes", required=true)
    private String notes;

    /**
     * @return Summary of Definition changes.
     * 
     */
    public String notes() {
        return this.notes;
    }

    /**
     * Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
     * 
     */
    @Import(name="partitionFormatInPath", required=true)
    private Boolean partitionFormatInPath;

    /**
     * @return Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
     * 
     */
    public Boolean partitionFormatInPath() {
        return this.partitionFormatInPath;
    }

    /**
     * Properties stores information like name of time series column for time series dataset.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,Object> properties;

    /**
     * @return Properties stores information like name of time series column for time series dataset.
     * 
     */
    public Optional<Map<String,Object>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Indicates the saved dataset this definition is mapping to, populated on Get.
     * 
     */
    @Import(name="savedDatasetId", required=true)
    private String savedDatasetId;

    /**
     * @return Indicates the saved dataset this definition is mapping to, populated on Get.
     * 
     */
    public String savedDatasetId() {
        return this.savedDatasetId;
    }

    /**
     * Tags associated with the dataset.
     * 
     */
    @Import(name="tags", required=true)
    private Map<String,String> tags;

    /**
     * @return Tags associated with the dataset.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    /**
     *  Telemetry information about the dataset including information like which service the dataset was created from.
     * 
     */
    @Import(name="telemetryInfo", required=true)
    private Map<String,String> telemetryInfo;

    /**
     * @return  Telemetry information about the dataset including information like which service the dataset was created from.
     * 
     */
    public Map<String,String> telemetryInfo() {
        return this.telemetryInfo;
    }

    /**
     *  Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
     * 
     */
    @Import(name="useDescriptionTagsFromDefinition", required=true)
    private Boolean useDescriptionTagsFromDefinition;

    /**
     * @return  Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
     * 
     */
    public Boolean useDescriptionTagsFromDefinition() {
        return this.useDescriptionTagsFromDefinition;
    }

    /**
     * An identifier uniquely identifies a definition change.
     * 
     */
    @Import(name="versionId", required=true)
    private String versionId;

    /**
     * @return An identifier uniquely identifies a definition change.
     * 
     */
    public String versionId() {
        return this.versionId;
    }

    private DatasetResponseLatest() {}

    private DatasetResponseLatest(DatasetResponseLatest $) {
        this.createdBy = $.createdBy;
        this.createdTime = $.createdTime;
        this.dataPath = $.dataPath;
        this.dataflow = $.dataflow;
        this.datasetDefinitionState = $.datasetDefinitionState;
        this.datasetId = $.datasetId;
        this.description = $.description;
        this.etag = $.etag;
        this.fileType = $.fileType;
        this.modifiedTime = $.modifiedTime;
        this.notes = $.notes;
        this.partitionFormatInPath = $.partitionFormatInPath;
        this.properties = $.properties;
        this.savedDatasetId = $.savedDatasetId;
        this.tags = $.tags;
        this.telemetryInfo = $.telemetryInfo;
        this.useDescriptionTagsFromDefinition = $.useDescriptionTagsFromDefinition;
        this.versionId = $.versionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetResponseLatest defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetResponseLatest $;

        public Builder() {
            $ = new DatasetResponseLatest();
        }

        public Builder(DatasetResponseLatest defaults) {
            $ = new DatasetResponseLatest(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBy User who created.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable UserInfoResponse createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdTime The dataset creation time (UTC).
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param dataPath  Datastore and reference to location of data such as relativePath, Sql Query and etc.
         * 
         * @return builder
         * 
         */
        public Builder dataPath(@Nullable DatasetResponseDataPath dataPath) {
            $.dataPath = dataPath;
            return this;
        }

        /**
         * @param dataflow Dataflow Json
         * 
         * @return builder
         * 
         */
        public Builder dataflow(String dataflow) {
            $.dataflow = dataflow;
            return this;
        }

        /**
         * @param datasetDefinitionState Dataset state
         * 
         * @return builder
         * 
         */
        public Builder datasetDefinitionState(@Nullable DatasetStateResponse datasetDefinitionState) {
            $.datasetDefinitionState = datasetDefinitionState;
            return this;
        }

        /**
         * @param datasetId Unique Dataset identifier.
         * 
         * @return builder
         * 
         */
        public Builder datasetId(String datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        /**
         * @param description Description about the dataset.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param etag eTag description
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param fileType Dataset FileType, specified by user.
         * 
         * @return builder
         * 
         */
        public Builder fileType(String fileType) {
            $.fileType = fileType;
            return this;
        }

        /**
         * @param modifiedTime The dataset last modified time (UTC).
         * 
         * @return builder
         * 
         */
        public Builder modifiedTime(String modifiedTime) {
            $.modifiedTime = modifiedTime;
            return this;
        }

        /**
         * @param notes Summary of Definition changes.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param partitionFormatInPath Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
         * 
         * @return builder
         * 
         */
        public Builder partitionFormatInPath(Boolean partitionFormatInPath) {
            $.partitionFormatInPath = partitionFormatInPath;
            return this;
        }

        /**
         * @param properties Properties stores information like name of time series column for time series dataset.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Map<String,Object> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param savedDatasetId Indicates the saved dataset this definition is mapping to, populated on Get.
         * 
         * @return builder
         * 
         */
        public Builder savedDatasetId(String savedDatasetId) {
            $.savedDatasetId = savedDatasetId;
            return this;
        }

        /**
         * @param tags Tags associated with the dataset.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param telemetryInfo  Telemetry information about the dataset including information like which service the dataset was created from.
         * 
         * @return builder
         * 
         */
        public Builder telemetryInfo(Map<String,String> telemetryInfo) {
            $.telemetryInfo = telemetryInfo;
            return this;
        }

        /**
         * @param useDescriptionTagsFromDefinition  Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
         * 
         * @return builder
         * 
         */
        public Builder useDescriptionTagsFromDefinition(Boolean useDescriptionTagsFromDefinition) {
            $.useDescriptionTagsFromDefinition = useDescriptionTagsFromDefinition;
            return this;
        }

        /**
         * @param versionId An identifier uniquely identifies a definition change.
         * 
         * @return builder
         * 
         */
        public Builder versionId(String versionId) {
            $.versionId = versionId;
            return this;
        }

        public DatasetResponseLatest build() {
            $.createdTime = Objects.requireNonNull($.createdTime, "expected parameter 'createdTime' to be non-null");
            $.dataflow = Objects.requireNonNull($.dataflow, "expected parameter 'dataflow' to be non-null");
            $.datasetId = Objects.requireNonNull($.datasetId, "expected parameter 'datasetId' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.fileType = Objects.requireNonNull($.fileType, "expected parameter 'fileType' to be non-null");
            $.modifiedTime = Objects.requireNonNull($.modifiedTime, "expected parameter 'modifiedTime' to be non-null");
            $.notes = Objects.requireNonNull($.notes, "expected parameter 'notes' to be non-null");
            $.partitionFormatInPath = Objects.requireNonNull($.partitionFormatInPath, "expected parameter 'partitionFormatInPath' to be non-null");
            $.savedDatasetId = Objects.requireNonNull($.savedDatasetId, "expected parameter 'savedDatasetId' to be non-null");
            $.tags = Objects.requireNonNull($.tags, "expected parameter 'tags' to be non-null");
            $.telemetryInfo = Objects.requireNonNull($.telemetryInfo, "expected parameter 'telemetryInfo' to be non-null");
            $.useDescriptionTagsFromDefinition = Objects.requireNonNull($.useDescriptionTagsFromDefinition, "expected parameter 'useDescriptionTagsFromDefinition' to be non-null");
            $.versionId = Objects.requireNonNull($.versionId, "expected parameter 'versionId' to be non-null");
            return $;
        }
    }

}
