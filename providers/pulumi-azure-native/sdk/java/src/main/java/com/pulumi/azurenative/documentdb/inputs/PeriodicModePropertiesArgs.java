// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration values for periodic mode backup
 * 
 */
public final class PeriodicModePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final PeriodicModePropertiesArgs Empty = new PeriodicModePropertiesArgs();

    /**
     * An integer representing the interval in minutes between two backups
     * 
     */
    @Import(name="backupIntervalInMinutes")
    private @Nullable Output<Integer> backupIntervalInMinutes;

    /**
     * @return An integer representing the interval in minutes between two backups
     * 
     */
    public Optional<Output<Integer>> backupIntervalInMinutes() {
        return Optional.ofNullable(this.backupIntervalInMinutes);
    }

    /**
     * An integer representing the time (in hours) that each backup is retained
     * 
     */
    @Import(name="backupRetentionIntervalInHours")
    private @Nullable Output<Integer> backupRetentionIntervalInHours;

    /**
     * @return An integer representing the time (in hours) that each backup is retained
     * 
     */
    public Optional<Output<Integer>> backupRetentionIntervalInHours() {
        return Optional.ofNullable(this.backupRetentionIntervalInHours);
    }

    private PeriodicModePropertiesArgs() {}

    private PeriodicModePropertiesArgs(PeriodicModePropertiesArgs $) {
        this.backupIntervalInMinutes = $.backupIntervalInMinutes;
        this.backupRetentionIntervalInHours = $.backupRetentionIntervalInHours;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PeriodicModePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PeriodicModePropertiesArgs $;

        public Builder() {
            $ = new PeriodicModePropertiesArgs();
        }

        public Builder(PeriodicModePropertiesArgs defaults) {
            $ = new PeriodicModePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupIntervalInMinutes An integer representing the interval in minutes between two backups
         * 
         * @return builder
         * 
         */
        public Builder backupIntervalInMinutes(@Nullable Output<Integer> backupIntervalInMinutes) {
            $.backupIntervalInMinutes = backupIntervalInMinutes;
            return this;
        }

        /**
         * @param backupIntervalInMinutes An integer representing the interval in minutes between two backups
         * 
         * @return builder
         * 
         */
        public Builder backupIntervalInMinutes(Integer backupIntervalInMinutes) {
            return backupIntervalInMinutes(Output.of(backupIntervalInMinutes));
        }

        /**
         * @param backupRetentionIntervalInHours An integer representing the time (in hours) that each backup is retained
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionIntervalInHours(@Nullable Output<Integer> backupRetentionIntervalInHours) {
            $.backupRetentionIntervalInHours = backupRetentionIntervalInHours;
            return this;
        }

        /**
         * @param backupRetentionIntervalInHours An integer representing the time (in hours) that each backup is retained
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionIntervalInHours(Integer backupRetentionIntervalInHours) {
            return backupRetentionIntervalInHours(Output.of(backupRetentionIntervalInHours));
        }

        public PeriodicModePropertiesArgs build() {
            return $;
        }
    }

}
