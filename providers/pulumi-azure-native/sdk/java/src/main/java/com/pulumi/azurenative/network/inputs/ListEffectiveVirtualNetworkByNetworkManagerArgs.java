// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListEffectiveVirtualNetworkByNetworkManagerArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListEffectiveVirtualNetworkByNetworkManagerArgs Empty = new ListEffectiveVirtualNetworkByNetworkManagerArgs();

    /**
     * Conditional Members.
     * 
     */
    @Import(name="conditionalMembers")
    private @Nullable String conditionalMembers;

    public Optional<String> conditionalMembers() {
        return Optional.ofNullable(this.conditionalMembers);
    }

    /**
     * The name of the network manager.
     * 
     */
    @Import(name="networkManagerName", required=true)
    private String networkManagerName;

    public String networkManagerName() {
        return this.networkManagerName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.
     * 
     */
    @Import(name="skipToken")
    private @Nullable String skipToken;

    public Optional<String> skipToken() {
        return Optional.ofNullable(this.skipToken);
    }

    /**
     * An optional query parameter which specifies the maximum number of records to be returned by the server.
     * 
     */
    @Import(name="top")
    private @Nullable Integer top;

    public Optional<Integer> top() {
        return Optional.ofNullable(this.top);
    }

    private ListEffectiveVirtualNetworkByNetworkManagerArgs() {}

    private ListEffectiveVirtualNetworkByNetworkManagerArgs(ListEffectiveVirtualNetworkByNetworkManagerArgs $) {
        this.conditionalMembers = $.conditionalMembers;
        this.networkManagerName = $.networkManagerName;
        this.resourceGroupName = $.resourceGroupName;
        this.skipToken = $.skipToken;
        this.top = $.top;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListEffectiveVirtualNetworkByNetworkManagerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListEffectiveVirtualNetworkByNetworkManagerArgs $;

        public Builder() {
            $ = new ListEffectiveVirtualNetworkByNetworkManagerArgs();
        }

        public Builder(ListEffectiveVirtualNetworkByNetworkManagerArgs defaults) {
            $ = new ListEffectiveVirtualNetworkByNetworkManagerArgs(Objects.requireNonNull(defaults));
        }

        public Builder conditionalMembers(@Nullable String conditionalMembers) {
            $.conditionalMembers = conditionalMembers;
            return this;
        }

        public Builder networkManagerName(String networkManagerName) {
            $.networkManagerName = networkManagerName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder skipToken(@Nullable String skipToken) {
            $.skipToken = skipToken;
            return this;
        }

        public Builder top(@Nullable Integer top) {
            $.top = top;
            return this;
        }

        public ListEffectiveVirtualNetworkByNetworkManagerArgs build() {
            $.networkManagerName = Objects.requireNonNull($.networkManagerName, "expected parameter 'networkManagerName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
