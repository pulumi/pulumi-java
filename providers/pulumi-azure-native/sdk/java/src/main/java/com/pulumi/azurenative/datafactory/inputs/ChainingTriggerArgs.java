// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.PipelineReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.TriggerPipelineReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
 * 
 */
public final class ChainingTriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChainingTriggerArgs Empty = new ChainingTriggerArgs();

    /**
     * List of tags that can be used for describing the trigger.
     * 
     */
    @Import(name="annotations")
      private final @Nullable Output<List<Object>> annotations;

    public Output<List<Object>> annotations() {
        return this.annotations == null ? Codegen.empty() : this.annotations;
    }

    /**
     * Upstream Pipelines.
     * 
     */
    @Import(name="dependsOn", required=true)
      private final Output<List<PipelineReferenceArgs>> dependsOn;

    public Output<List<PipelineReferenceArgs>> dependsOn() {
        return this.dependsOn;
    }

    /**
     * Trigger description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Pipeline for which runs are created when all upstream pipelines complete successfully.
     * 
     */
    @Import(name="pipeline", required=true)
      private final Output<TriggerPipelineReferenceArgs> pipeline;

    public Output<TriggerPipelineReferenceArgs> pipeline() {
        return this.pipeline;
    }

    /**
     * Run Dimension property that needs to be emitted by upstream pipelines.
     * 
     */
    @Import(name="runDimension", required=true)
      private final Output<String> runDimension;

    public Output<String> runDimension() {
        return this.runDimension;
    }

    /**
     * Trigger type.
     * Expected value is &#39;ChainingTrigger&#39;.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public ChainingTriggerArgs(
        @Nullable Output<List<Object>> annotations,
        Output<List<PipelineReferenceArgs>> dependsOn,
        @Nullable Output<String> description,
        Output<TriggerPipelineReferenceArgs> pipeline,
        Output<String> runDimension,
        Output<String> type) {
        this.annotations = annotations;
        this.dependsOn = Objects.requireNonNull(dependsOn, "expected parameter 'dependsOn' to be non-null");
        this.description = description;
        this.pipeline = Objects.requireNonNull(pipeline, "expected parameter 'pipeline' to be non-null");
        this.runDimension = Objects.requireNonNull(runDimension, "expected parameter 'runDimension' to be non-null");
        this.type = Codegen.stringProp("type").output().arg(type).require();
    }

    private ChainingTriggerArgs() {
        this.annotations = Codegen.empty();
        this.dependsOn = Codegen.empty();
        this.description = Codegen.empty();
        this.pipeline = Codegen.empty();
        this.runDimension = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChainingTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Object>> annotations;
        private Output<List<PipelineReferenceArgs>> dependsOn;
        private @Nullable Output<String> description;
        private Output<TriggerPipelineReferenceArgs> pipeline;
        private Output<String> runDimension;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ChainingTriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.pipeline = defaults.pipeline;
    	      this.runDimension = defaults.runDimension;
    	      this.type = defaults.type;
        }

        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = Codegen.ofNullable(annotations);
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        public Builder dependsOn(Output<List<PipelineReferenceArgs>> dependsOn) {
            this.dependsOn = Objects.requireNonNull(dependsOn);
            return this;
        }
        public Builder dependsOn(List<PipelineReferenceArgs> dependsOn) {
            this.dependsOn = Output.of(Objects.requireNonNull(dependsOn));
            return this;
        }
        public Builder dependsOn(PipelineReferenceArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder pipeline(Output<TriggerPipelineReferenceArgs> pipeline) {
            this.pipeline = Objects.requireNonNull(pipeline);
            return this;
        }
        public Builder pipeline(TriggerPipelineReferenceArgs pipeline) {
            this.pipeline = Output.of(Objects.requireNonNull(pipeline));
            return this;
        }
        public Builder runDimension(Output<String> runDimension) {
            this.runDimension = Objects.requireNonNull(runDimension);
            return this;
        }
        public Builder runDimension(String runDimension) {
            this.runDimension = Output.of(Objects.requireNonNull(runDimension));
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ChainingTriggerArgs build() {
            return new ChainingTriggerArgs(annotations, dependsOn, description, pipeline, runDimension, type);
        }
    }
}
