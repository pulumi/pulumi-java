// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cache.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetFirewallRuleArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFirewallRuleArgs Empty = new GetFirewallRuleArgs();

    /**
     * The name of the Redis cache.
     * 
     */
    @Import(name="cacheName", required=true)
    private Output<String> cacheName;

    /**
     * @return The name of the Redis cache.
     * 
     */
    public Output<String> cacheName() {
        return this.cacheName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the firewall rule.
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return The name of the firewall rule.
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    private GetFirewallRuleArgs() {}

    private GetFirewallRuleArgs(GetFirewallRuleArgs $) {
        this.cacheName = $.cacheName;
        this.resourceGroupName = $.resourceGroupName;
        this.ruleName = $.ruleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFirewallRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFirewallRuleArgs $;

        public Builder() {
            $ = new GetFirewallRuleArgs();
        }

        public Builder(GetFirewallRuleArgs defaults) {
            $ = new GetFirewallRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheName The name of the Redis cache.
         * 
         * @return builder
         * 
         */
        public Builder cacheName(Output<String> cacheName) {
            $.cacheName = cacheName;
            return this;
        }

        /**
         * @param cacheName The name of the Redis cache.
         * 
         * @return builder
         * 
         */
        public Builder cacheName(String cacheName) {
            return cacheName(Output.of(cacheName));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param ruleName The name of the firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName The name of the firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        public GetFirewallRuleArgs build() {
            $.cacheName = Objects.requireNonNull($.cacheName, "expected parameter 'cacheName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            return $;
        }
    }

}
