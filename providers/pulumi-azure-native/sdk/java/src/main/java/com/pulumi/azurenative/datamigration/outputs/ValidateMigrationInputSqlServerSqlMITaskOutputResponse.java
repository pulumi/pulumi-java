// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.DatabaseBackupInfoResponse;
import com.pulumi.azurenative.datamigration.outputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
    /**
     * Errors associated with the BackupFolder path
     * 
     */
    private final List<ReportableExceptionResponse> backupFolderErrors;
    /**
     * Errors associated with backup share user name and password credentials
     * 
     */
    private final List<ReportableExceptionResponse> backupShareCredentialsErrors;
    /**
     * Errors associated with the storage account provided.
     * 
     */
    private final List<ReportableExceptionResponse> backupStorageAccountErrors;
    /**
     * Information about backup files when existing backup mode is used.
     * 
     */
    private final @Nullable DatabaseBackupInfoResponse databaseBackupInfo;
    /**
     * Errors associated with existing backup files.
     * 
     */
    private final List<ReportableExceptionResponse> existingBackupErrors;
    /**
     * Result identifier
     * 
     */
    private final String id;
    /**
     * Name of database
     * 
     */
    private final String name;
    /**
     * Errors associated with the RestoreDatabaseName
     * 
     */
    private final List<ReportableExceptionResponse> restoreDatabaseNameErrors;

    @CustomType.Constructor
    private ValidateMigrationInputSqlServerSqlMITaskOutputResponse(
        @CustomType.Parameter("backupFolderErrors") List<ReportableExceptionResponse> backupFolderErrors,
        @CustomType.Parameter("backupShareCredentialsErrors") List<ReportableExceptionResponse> backupShareCredentialsErrors,
        @CustomType.Parameter("backupStorageAccountErrors") List<ReportableExceptionResponse> backupStorageAccountErrors,
        @CustomType.Parameter("databaseBackupInfo") @Nullable DatabaseBackupInfoResponse databaseBackupInfo,
        @CustomType.Parameter("existingBackupErrors") List<ReportableExceptionResponse> existingBackupErrors,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("restoreDatabaseNameErrors") List<ReportableExceptionResponse> restoreDatabaseNameErrors) {
        this.backupFolderErrors = backupFolderErrors;
        this.backupShareCredentialsErrors = backupShareCredentialsErrors;
        this.backupStorageAccountErrors = backupStorageAccountErrors;
        this.databaseBackupInfo = databaseBackupInfo;
        this.existingBackupErrors = existingBackupErrors;
        this.id = id;
        this.name = name;
        this.restoreDatabaseNameErrors = restoreDatabaseNameErrors;
    }

    /**
     * Errors associated with the BackupFolder path
     * 
    */
    public List<ReportableExceptionResponse> backupFolderErrors() {
        return this.backupFolderErrors;
    }
    /**
     * Errors associated with backup share user name and password credentials
     * 
    */
    public List<ReportableExceptionResponse> backupShareCredentialsErrors() {
        return this.backupShareCredentialsErrors;
    }
    /**
     * Errors associated with the storage account provided.
     * 
    */
    public List<ReportableExceptionResponse> backupStorageAccountErrors() {
        return this.backupStorageAccountErrors;
    }
    /**
     * Information about backup files when existing backup mode is used.
     * 
    */
    public Optional<DatabaseBackupInfoResponse> databaseBackupInfo() {
        return Optional.ofNullable(this.databaseBackupInfo);
    }
    /**
     * Errors associated with existing backup files.
     * 
    */
    public List<ReportableExceptionResponse> existingBackupErrors() {
        return this.existingBackupErrors;
    }
    /**
     * Result identifier
     * 
    */
    public String id() {
        return this.id;
    }
    /**
     * Name of database
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * Errors associated with the RestoreDatabaseName
     * 
    */
    public List<ReportableExceptionResponse> restoreDatabaseNameErrors() {
        return this.restoreDatabaseNameErrors;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ValidateMigrationInputSqlServerSqlMITaskOutputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<ReportableExceptionResponse> backupFolderErrors;
        private List<ReportableExceptionResponse> backupShareCredentialsErrors;
        private List<ReportableExceptionResponse> backupStorageAccountErrors;
        private @Nullable DatabaseBackupInfoResponse databaseBackupInfo;
        private List<ReportableExceptionResponse> existingBackupErrors;
        private String id;
        private String name;
        private List<ReportableExceptionResponse> restoreDatabaseNameErrors;

        public Builder() {
    	      // Empty
        }

        public Builder(ValidateMigrationInputSqlServerSqlMITaskOutputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupFolderErrors = defaults.backupFolderErrors;
    	      this.backupShareCredentialsErrors = defaults.backupShareCredentialsErrors;
    	      this.backupStorageAccountErrors = defaults.backupStorageAccountErrors;
    	      this.databaseBackupInfo = defaults.databaseBackupInfo;
    	      this.existingBackupErrors = defaults.existingBackupErrors;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.restoreDatabaseNameErrors = defaults.restoreDatabaseNameErrors;
        }

        public Builder backupFolderErrors(List<ReportableExceptionResponse> backupFolderErrors) {
            this.backupFolderErrors = Objects.requireNonNull(backupFolderErrors);
            return this;
        }
        public Builder backupFolderErrors(ReportableExceptionResponse... backupFolderErrors) {
            return backupFolderErrors(List.of(backupFolderErrors));
        }
        public Builder backupShareCredentialsErrors(List<ReportableExceptionResponse> backupShareCredentialsErrors) {
            this.backupShareCredentialsErrors = Objects.requireNonNull(backupShareCredentialsErrors);
            return this;
        }
        public Builder backupShareCredentialsErrors(ReportableExceptionResponse... backupShareCredentialsErrors) {
            return backupShareCredentialsErrors(List.of(backupShareCredentialsErrors));
        }
        public Builder backupStorageAccountErrors(List<ReportableExceptionResponse> backupStorageAccountErrors) {
            this.backupStorageAccountErrors = Objects.requireNonNull(backupStorageAccountErrors);
            return this;
        }
        public Builder backupStorageAccountErrors(ReportableExceptionResponse... backupStorageAccountErrors) {
            return backupStorageAccountErrors(List.of(backupStorageAccountErrors));
        }
        public Builder databaseBackupInfo(@Nullable DatabaseBackupInfoResponse databaseBackupInfo) {
            this.databaseBackupInfo = databaseBackupInfo;
            return this;
        }
        public Builder existingBackupErrors(List<ReportableExceptionResponse> existingBackupErrors) {
            this.existingBackupErrors = Objects.requireNonNull(existingBackupErrors);
            return this;
        }
        public Builder existingBackupErrors(ReportableExceptionResponse... existingBackupErrors) {
            return existingBackupErrors(List.of(existingBackupErrors));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder restoreDatabaseNameErrors(List<ReportableExceptionResponse> restoreDatabaseNameErrors) {
            this.restoreDatabaseNameErrors = Objects.requireNonNull(restoreDatabaseNameErrors);
            return this;
        }
        public Builder restoreDatabaseNameErrors(ReportableExceptionResponse... restoreDatabaseNameErrors) {
            return restoreDatabaseNameErrors(List.of(restoreDatabaseNameErrors));
        }        public ValidateMigrationInputSqlServerSqlMITaskOutputResponse build() {
            return new ValidateMigrationInputSqlServerSqlMITaskOutputResponse(backupFolderErrors, backupShareCredentialsErrors, backupStorageAccountErrors, databaseBackupInfo, existingBackupErrors, id, name, restoreDatabaseNameErrors);
        }
    }
}
