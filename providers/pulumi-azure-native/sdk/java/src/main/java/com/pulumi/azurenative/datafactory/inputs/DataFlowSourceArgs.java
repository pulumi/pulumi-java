// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.DataFlowReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.DatasetReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Transformation for data flow source.
 * 
 */
public final class DataFlowSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataFlowSourceArgs Empty = new DataFlowSourceArgs();

    /**
     * Dataset reference.
     * 
     */
    @Import(name="dataset")
    private @Nullable Output<DatasetReferenceArgs> dataset;

    /**
     * @return Dataset reference.
     * 
     */
    public Optional<Output<DatasetReferenceArgs>> dataset() {
        return Optional.ofNullable(this.dataset);
    }

    /**
     * Transformation description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Transformation description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Flowlet Reference
     * 
     */
    @Import(name="flowlet")
    private @Nullable Output<DataFlowReferenceArgs> flowlet;

    /**
     * @return Flowlet Reference
     * 
     */
    public Optional<Output<DataFlowReferenceArgs>> flowlet() {
        return Optional.ofNullable(this.flowlet);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedService")
    private @Nullable Output<LinkedServiceReferenceArgs> linkedService;

    /**
     * @return Linked service reference.
     * 
     */
    public Optional<Output<LinkedServiceReferenceArgs>> linkedService() {
        return Optional.ofNullable(this.linkedService);
    }

    /**
     * Transformation name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Transformation name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Schema linked service reference.
     * 
     */
    @Import(name="schemaLinkedService")
    private @Nullable Output<LinkedServiceReferenceArgs> schemaLinkedService;

    /**
     * @return Schema linked service reference.
     * 
     */
    public Optional<Output<LinkedServiceReferenceArgs>> schemaLinkedService() {
        return Optional.ofNullable(this.schemaLinkedService);
    }

    private DataFlowSourceArgs() {}

    private DataFlowSourceArgs(DataFlowSourceArgs $) {
        this.dataset = $.dataset;
        this.description = $.description;
        this.flowlet = $.flowlet;
        this.linkedService = $.linkedService;
        this.name = $.name;
        this.schemaLinkedService = $.schemaLinkedService;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataFlowSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataFlowSourceArgs $;

        public Builder() {
            $ = new DataFlowSourceArgs();
        }

        public Builder(DataFlowSourceArgs defaults) {
            $ = new DataFlowSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataset Dataset reference.
         * 
         * @return builder
         * 
         */
        public Builder dataset(@Nullable Output<DatasetReferenceArgs> dataset) {
            $.dataset = dataset;
            return this;
        }

        /**
         * @param dataset Dataset reference.
         * 
         * @return builder
         * 
         */
        public Builder dataset(DatasetReferenceArgs dataset) {
            return dataset(Output.of(dataset));
        }

        /**
         * @param description Transformation description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Transformation description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param flowlet Flowlet Reference
         * 
         * @return builder
         * 
         */
        public Builder flowlet(@Nullable Output<DataFlowReferenceArgs> flowlet) {
            $.flowlet = flowlet;
            return this;
        }

        /**
         * @param flowlet Flowlet Reference
         * 
         * @return builder
         * 
         */
        public Builder flowlet(DataFlowReferenceArgs flowlet) {
            return flowlet(Output.of(flowlet));
        }

        /**
         * @param linkedService Linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedService(@Nullable Output<LinkedServiceReferenceArgs> linkedService) {
            $.linkedService = linkedService;
            return this;
        }

        /**
         * @param linkedService Linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedService(LinkedServiceReferenceArgs linkedService) {
            return linkedService(Output.of(linkedService));
        }

        /**
         * @param name Transformation name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Transformation name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schemaLinkedService Schema linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder schemaLinkedService(@Nullable Output<LinkedServiceReferenceArgs> schemaLinkedService) {
            $.schemaLinkedService = schemaLinkedService;
            return this;
        }

        /**
         * @param schemaLinkedService Schema linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder schemaLinkedService(LinkedServiceReferenceArgs schemaLinkedService) {
            return schemaLinkedService(Output.of(schemaLinkedService));
        }

        public DataFlowSourceArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
