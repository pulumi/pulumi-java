// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.LiveEventInputTrackSelectionResponse;
import com.pulumi.azurenative.media.inputs.LiveEventOutputTranscriptionTrackResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
 * 
 */
public final class LiveEventTranscriptionResponse extends com.pulumi.resources.InvokeArgs {

    public static final LiveEventTranscriptionResponse Empty = new LiveEventTranscriptionResponse();

    /**
     * Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
     * 
     */
    @Import(name="inputTrackSelection")
    private @Nullable List<LiveEventInputTrackSelectionResponse> inputTrackSelection;

    public Optional<List<LiveEventInputTrackSelectionResponse>> inputTrackSelection() {
        return Optional.ofNullable(this.inputTrackSelection);
    }

    /**
     * Specifies the language (locale) to be used for speech-to-text transcription â€“ it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: &#39;en-US&#39;). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
     * 
     */
    @Import(name="language")
    private @Nullable String language;

    public Optional<String> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
     * 
     */
    @Import(name="outputTranscriptionTrack")
    private @Nullable LiveEventOutputTranscriptionTrackResponse outputTranscriptionTrack;

    public Optional<LiveEventOutputTranscriptionTrackResponse> outputTranscriptionTrack() {
        return Optional.ofNullable(this.outputTranscriptionTrack);
    }

    private LiveEventTranscriptionResponse() {}

    private LiveEventTranscriptionResponse(LiveEventTranscriptionResponse $) {
        this.inputTrackSelection = $.inputTrackSelection;
        this.language = $.language;
        this.outputTranscriptionTrack = $.outputTranscriptionTrack;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LiveEventTranscriptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LiveEventTranscriptionResponse $;

        public Builder() {
            $ = new LiveEventTranscriptionResponse();
        }

        public Builder(LiveEventTranscriptionResponse defaults) {
            $ = new LiveEventTranscriptionResponse(Objects.requireNonNull(defaults));
        }

        public Builder inputTrackSelection(@Nullable List<LiveEventInputTrackSelectionResponse> inputTrackSelection) {
            $.inputTrackSelection = inputTrackSelection;
            return this;
        }

        public Builder inputTrackSelection(LiveEventInputTrackSelectionResponse... inputTrackSelection) {
            return inputTrackSelection(List.of(inputTrackSelection));
        }

        public Builder language(@Nullable String language) {
            $.language = language;
            return this;
        }

        public Builder outputTranscriptionTrack(@Nullable LiveEventOutputTranscriptionTrackResponse outputTranscriptionTrack) {
            $.outputTranscriptionTrack = outputTranscriptionTrack;
            return this;
        }

        public LiveEventTranscriptionResponse build() {
            return $;
        }
    }

}
