// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.DatabaseFileInfoResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Database level output for the task that validates connection to SQL Server and also validates source server requirements
 * 
 */
public final class ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse Empty = new ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse();

    /**
     * SQL Server compatibility level of database
     * 
     */
    @Import(name="compatibilityLevel", required=true)
    private String compatibilityLevel;

    /**
     * @return SQL Server compatibility level of database
     * 
     */
    public String compatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * The list of database files
     * 
     */
    @Import(name="databaseFiles", required=true)
    private List<DatabaseFileInfoResponse> databaseFiles;

    /**
     * @return The list of database files
     * 
     */
    public List<DatabaseFileInfoResponse> databaseFiles() {
        return this.databaseFiles;
    }

    /**
     * State of the database
     * 
     */
    @Import(name="databaseState", required=true)
    private String databaseState;

    /**
     * @return State of the database
     * 
     */
    public String databaseState() {
        return this.databaseState;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Database name
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Database name
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Type of result - database level or task level
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    /**
     * @return Type of result - database level or task level
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }

    /**
     * Size of the file in megabytes
     * 
     */
    @Import(name="sizeMB", required=true)
    private Double sizeMB;

    /**
     * @return Size of the file in megabytes
     * 
     */
    public Double sizeMB() {
        return this.sizeMB;
    }

    private ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse() {}

    private ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse $) {
        this.compatibilityLevel = $.compatibilityLevel;
        this.databaseFiles = $.databaseFiles;
        this.databaseState = $.databaseState;
        this.id = $.id;
        this.name = $.name;
        this.resultType = $.resultType;
        this.sizeMB = $.sizeMB;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse $;

        public Builder() {
            $ = new ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse();
        }

        public Builder(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse defaults) {
            $ = new ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param compatibilityLevel SQL Server compatibility level of database
         * 
         * @return builder
         * 
         */
        public Builder compatibilityLevel(String compatibilityLevel) {
            $.compatibilityLevel = compatibilityLevel;
            return this;
        }

        /**
         * @param databaseFiles The list of database files
         * 
         * @return builder
         * 
         */
        public Builder databaseFiles(List<DatabaseFileInfoResponse> databaseFiles) {
            $.databaseFiles = databaseFiles;
            return this;
        }

        /**
         * @param databaseFiles The list of database files
         * 
         * @return builder
         * 
         */
        public Builder databaseFiles(DatabaseFileInfoResponse... databaseFiles) {
            return databaseFiles(List.of(databaseFiles));
        }

        /**
         * @param databaseState State of the database
         * 
         * @return builder
         * 
         */
        public Builder databaseState(String databaseState) {
            $.databaseState = databaseState;
            return this;
        }

        /**
         * @param id Result identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Database name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param resultType Type of result - database level or task level
         * Expected value is &#39;DatabaseLevelOutput&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        /**
         * @param sizeMB Size of the file in megabytes
         * 
         * @return builder
         * 
         */
        public Builder sizeMB(Double sizeMB) {
            $.sizeMB = sizeMB;
            return this;
        }

        public ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse build() {
            $.compatibilityLevel = Objects.requireNonNull($.compatibilityLevel, "expected parameter 'compatibilityLevel' to be non-null");
            $.databaseFiles = Objects.requireNonNull($.databaseFiles, "expected parameter 'databaseFiles' to be non-null");
            $.databaseState = Objects.requireNonNull($.databaseState, "expected parameter 'databaseState' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            $.sizeMB = Objects.requireNonNull($.sizeMB, "expected parameter 'sizeMB' to be non-null");
            return $;
        }
    }

}
