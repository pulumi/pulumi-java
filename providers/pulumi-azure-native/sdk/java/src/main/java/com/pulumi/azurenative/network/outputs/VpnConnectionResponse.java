// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.IpsecPolicyResponse;
import com.pulumi.azurenative.network.outputs.RoutingConfigurationResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.azurenative.network.outputs.TrafficSelectorPolicyResponse;
import com.pulumi.azurenative.network.outputs.VpnSiteLinkConnectionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VpnConnectionResponse {
    /**
     * @return Expected bandwidth in MBPS.
     * 
     */
    private final @Nullable Integer connectionBandwidth;
    /**
     * @return The connection status.
     * 
     */
    private final String connectionStatus;
    /**
     * @return DPD timeout in seconds for vpn connection.
     * 
     */
    private final @Nullable Integer dpdTimeoutSeconds;
    /**
     * @return Egress bytes transferred.
     * 
     */
    private final Double egressBytesTransferred;
    /**
     * @return EnableBgp flag.
     * 
     */
    private final @Nullable Boolean enableBgp;
    /**
     * @return Enable internet security.
     * 
     */
    private final @Nullable Boolean enableInternetSecurity;
    /**
     * @return EnableBgp flag.
     * 
     */
    private final @Nullable Boolean enableRateLimiting;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private final String etag;
    /**
     * @return Resource ID.
     * 
     */
    private final @Nullable String id;
    /**
     * @return Ingress bytes transferred.
     * 
     */
    private final Double ingressBytesTransferred;
    /**
     * @return The IPSec Policies to be considered by this connection.
     * 
     */
    private final @Nullable List<IpsecPolicyResponse> ipsecPolicies;
    /**
     * @return The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    private final @Nullable String name;
    /**
     * @return The provisioning state of the VPN connection resource.
     * 
     */
    private final String provisioningState;
    /**
     * @return Id of the connected vpn site.
     * 
     */
    private final @Nullable SubResourceResponse remoteVpnSite;
    /**
     * @return The Routing Configuration indicating the associated and propagated route tables on this connection.
     * 
     */
    private final @Nullable RoutingConfigurationResponse routingConfiguration;
    /**
     * @return Routing weight for vpn connection.
     * 
     */
    private final @Nullable Integer routingWeight;
    /**
     * @return SharedKey for the vpn connection.
     * 
     */
    private final @Nullable String sharedKey;
    /**
     * @return The Traffic Selector Policies to be considered by this connection.
     * 
     */
    private final @Nullable List<TrafficSelectorPolicyResponse> trafficSelectorPolicies;
    /**
     * @return Use local azure ip to initiate connection.
     * 
     */
    private final @Nullable Boolean useLocalAzureIpAddress;
    /**
     * @return Enable policy-based traffic selectors.
     * 
     */
    private final @Nullable Boolean usePolicyBasedTrafficSelectors;
    /**
     * @return Connection protocol used for this connection.
     * 
     */
    private final @Nullable String vpnConnectionProtocolType;
    /**
     * @return List of all vpn site link connections to the gateway.
     * 
     */
    private final @Nullable List<VpnSiteLinkConnectionResponse> vpnLinkConnections;

    @CustomType.Constructor
    private VpnConnectionResponse(
        @CustomType.Parameter("connectionBandwidth") @Nullable Integer connectionBandwidth,
        @CustomType.Parameter("connectionStatus") String connectionStatus,
        @CustomType.Parameter("dpdTimeoutSeconds") @Nullable Integer dpdTimeoutSeconds,
        @CustomType.Parameter("egressBytesTransferred") Double egressBytesTransferred,
        @CustomType.Parameter("enableBgp") @Nullable Boolean enableBgp,
        @CustomType.Parameter("enableInternetSecurity") @Nullable Boolean enableInternetSecurity,
        @CustomType.Parameter("enableRateLimiting") @Nullable Boolean enableRateLimiting,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("ingressBytesTransferred") Double ingressBytesTransferred,
        @CustomType.Parameter("ipsecPolicies") @Nullable List<IpsecPolicyResponse> ipsecPolicies,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("remoteVpnSite") @Nullable SubResourceResponse remoteVpnSite,
        @CustomType.Parameter("routingConfiguration") @Nullable RoutingConfigurationResponse routingConfiguration,
        @CustomType.Parameter("routingWeight") @Nullable Integer routingWeight,
        @CustomType.Parameter("sharedKey") @Nullable String sharedKey,
        @CustomType.Parameter("trafficSelectorPolicies") @Nullable List<TrafficSelectorPolicyResponse> trafficSelectorPolicies,
        @CustomType.Parameter("useLocalAzureIpAddress") @Nullable Boolean useLocalAzureIpAddress,
        @CustomType.Parameter("usePolicyBasedTrafficSelectors") @Nullable Boolean usePolicyBasedTrafficSelectors,
        @CustomType.Parameter("vpnConnectionProtocolType") @Nullable String vpnConnectionProtocolType,
        @CustomType.Parameter("vpnLinkConnections") @Nullable List<VpnSiteLinkConnectionResponse> vpnLinkConnections) {
        this.connectionBandwidth = connectionBandwidth;
        this.connectionStatus = connectionStatus;
        this.dpdTimeoutSeconds = dpdTimeoutSeconds;
        this.egressBytesTransferred = egressBytesTransferred;
        this.enableBgp = enableBgp;
        this.enableInternetSecurity = enableInternetSecurity;
        this.enableRateLimiting = enableRateLimiting;
        this.etag = etag;
        this.id = id;
        this.ingressBytesTransferred = ingressBytesTransferred;
        this.ipsecPolicies = ipsecPolicies;
        this.name = name;
        this.provisioningState = provisioningState;
        this.remoteVpnSite = remoteVpnSite;
        this.routingConfiguration = routingConfiguration;
        this.routingWeight = routingWeight;
        this.sharedKey = sharedKey;
        this.trafficSelectorPolicies = trafficSelectorPolicies;
        this.useLocalAzureIpAddress = useLocalAzureIpAddress;
        this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
        this.vpnConnectionProtocolType = vpnConnectionProtocolType;
        this.vpnLinkConnections = vpnLinkConnections;
    }

    /**
     * @return Expected bandwidth in MBPS.
     * 
     */
    public Optional<Integer> connectionBandwidth() {
        return Optional.ofNullable(this.connectionBandwidth);
    }
    /**
     * @return The connection status.
     * 
     */
    public String connectionStatus() {
        return this.connectionStatus;
    }
    /**
     * @return DPD timeout in seconds for vpn connection.
     * 
     */
    public Optional<Integer> dpdTimeoutSeconds() {
        return Optional.ofNullable(this.dpdTimeoutSeconds);
    }
    /**
     * @return Egress bytes transferred.
     * 
     */
    public Double egressBytesTransferred() {
        return this.egressBytesTransferred;
    }
    /**
     * @return EnableBgp flag.
     * 
     */
    public Optional<Boolean> enableBgp() {
        return Optional.ofNullable(this.enableBgp);
    }
    /**
     * @return Enable internet security.
     * 
     */
    public Optional<Boolean> enableInternetSecurity() {
        return Optional.ofNullable(this.enableInternetSecurity);
    }
    /**
     * @return EnableBgp flag.
     * 
     */
    public Optional<Boolean> enableRateLimiting() {
        return Optional.ofNullable(this.enableRateLimiting);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Ingress bytes transferred.
     * 
     */
    public Double ingressBytesTransferred() {
        return this.ingressBytesTransferred;
    }
    /**
     * @return The IPSec Policies to be considered by this connection.
     * 
     */
    public List<IpsecPolicyResponse> ipsecPolicies() {
        return this.ipsecPolicies == null ? List.of() : this.ipsecPolicies;
    }
    /**
     * @return The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The provisioning state of the VPN connection resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Id of the connected vpn site.
     * 
     */
    public Optional<SubResourceResponse> remoteVpnSite() {
        return Optional.ofNullable(this.remoteVpnSite);
    }
    /**
     * @return The Routing Configuration indicating the associated and propagated route tables on this connection.
     * 
     */
    public Optional<RoutingConfigurationResponse> routingConfiguration() {
        return Optional.ofNullable(this.routingConfiguration);
    }
    /**
     * @return Routing weight for vpn connection.
     * 
     */
    public Optional<Integer> routingWeight() {
        return Optional.ofNullable(this.routingWeight);
    }
    /**
     * @return SharedKey for the vpn connection.
     * 
     */
    public Optional<String> sharedKey() {
        return Optional.ofNullable(this.sharedKey);
    }
    /**
     * @return The Traffic Selector Policies to be considered by this connection.
     * 
     */
    public List<TrafficSelectorPolicyResponse> trafficSelectorPolicies() {
        return this.trafficSelectorPolicies == null ? List.of() : this.trafficSelectorPolicies;
    }
    /**
     * @return Use local azure ip to initiate connection.
     * 
     */
    public Optional<Boolean> useLocalAzureIpAddress() {
        return Optional.ofNullable(this.useLocalAzureIpAddress);
    }
    /**
     * @return Enable policy-based traffic selectors.
     * 
     */
    public Optional<Boolean> usePolicyBasedTrafficSelectors() {
        return Optional.ofNullable(this.usePolicyBasedTrafficSelectors);
    }
    /**
     * @return Connection protocol used for this connection.
     * 
     */
    public Optional<String> vpnConnectionProtocolType() {
        return Optional.ofNullable(this.vpnConnectionProtocolType);
    }
    /**
     * @return List of all vpn site link connections to the gateway.
     * 
     */
    public List<VpnSiteLinkConnectionResponse> vpnLinkConnections() {
        return this.vpnLinkConnections == null ? List.of() : this.vpnLinkConnections;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnConnectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer connectionBandwidth;
        private String connectionStatus;
        private @Nullable Integer dpdTimeoutSeconds;
        private Double egressBytesTransferred;
        private @Nullable Boolean enableBgp;
        private @Nullable Boolean enableInternetSecurity;
        private @Nullable Boolean enableRateLimiting;
        private String etag;
        private @Nullable String id;
        private Double ingressBytesTransferred;
        private @Nullable List<IpsecPolicyResponse> ipsecPolicies;
        private @Nullable String name;
        private String provisioningState;
        private @Nullable SubResourceResponse remoteVpnSite;
        private @Nullable RoutingConfigurationResponse routingConfiguration;
        private @Nullable Integer routingWeight;
        private @Nullable String sharedKey;
        private @Nullable List<TrafficSelectorPolicyResponse> trafficSelectorPolicies;
        private @Nullable Boolean useLocalAzureIpAddress;
        private @Nullable Boolean usePolicyBasedTrafficSelectors;
        private @Nullable String vpnConnectionProtocolType;
        private @Nullable List<VpnSiteLinkConnectionResponse> vpnLinkConnections;

        public Builder() {
    	      // Empty
        }

        public Builder(VpnConnectionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionBandwidth = defaults.connectionBandwidth;
    	      this.connectionStatus = defaults.connectionStatus;
    	      this.dpdTimeoutSeconds = defaults.dpdTimeoutSeconds;
    	      this.egressBytesTransferred = defaults.egressBytesTransferred;
    	      this.enableBgp = defaults.enableBgp;
    	      this.enableInternetSecurity = defaults.enableInternetSecurity;
    	      this.enableRateLimiting = defaults.enableRateLimiting;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.ingressBytesTransferred = defaults.ingressBytesTransferred;
    	      this.ipsecPolicies = defaults.ipsecPolicies;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.remoteVpnSite = defaults.remoteVpnSite;
    	      this.routingConfiguration = defaults.routingConfiguration;
    	      this.routingWeight = defaults.routingWeight;
    	      this.sharedKey = defaults.sharedKey;
    	      this.trafficSelectorPolicies = defaults.trafficSelectorPolicies;
    	      this.useLocalAzureIpAddress = defaults.useLocalAzureIpAddress;
    	      this.usePolicyBasedTrafficSelectors = defaults.usePolicyBasedTrafficSelectors;
    	      this.vpnConnectionProtocolType = defaults.vpnConnectionProtocolType;
    	      this.vpnLinkConnections = defaults.vpnLinkConnections;
        }

        public Builder connectionBandwidth(@Nullable Integer connectionBandwidth) {
            this.connectionBandwidth = connectionBandwidth;
            return this;
        }
        public Builder connectionStatus(String connectionStatus) {
            this.connectionStatus = Objects.requireNonNull(connectionStatus);
            return this;
        }
        public Builder dpdTimeoutSeconds(@Nullable Integer dpdTimeoutSeconds) {
            this.dpdTimeoutSeconds = dpdTimeoutSeconds;
            return this;
        }
        public Builder egressBytesTransferred(Double egressBytesTransferred) {
            this.egressBytesTransferred = Objects.requireNonNull(egressBytesTransferred);
            return this;
        }
        public Builder enableBgp(@Nullable Boolean enableBgp) {
            this.enableBgp = enableBgp;
            return this;
        }
        public Builder enableInternetSecurity(@Nullable Boolean enableInternetSecurity) {
            this.enableInternetSecurity = enableInternetSecurity;
            return this;
        }
        public Builder enableRateLimiting(@Nullable Boolean enableRateLimiting) {
            this.enableRateLimiting = enableRateLimiting;
            return this;
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder ingressBytesTransferred(Double ingressBytesTransferred) {
            this.ingressBytesTransferred = Objects.requireNonNull(ingressBytesTransferred);
            return this;
        }
        public Builder ipsecPolicies(@Nullable List<IpsecPolicyResponse> ipsecPolicies) {
            this.ipsecPolicies = ipsecPolicies;
            return this;
        }
        public Builder ipsecPolicies(IpsecPolicyResponse... ipsecPolicies) {
            return ipsecPolicies(List.of(ipsecPolicies));
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder remoteVpnSite(@Nullable SubResourceResponse remoteVpnSite) {
            this.remoteVpnSite = remoteVpnSite;
            return this;
        }
        public Builder routingConfiguration(@Nullable RoutingConfigurationResponse routingConfiguration) {
            this.routingConfiguration = routingConfiguration;
            return this;
        }
        public Builder routingWeight(@Nullable Integer routingWeight) {
            this.routingWeight = routingWeight;
            return this;
        }
        public Builder sharedKey(@Nullable String sharedKey) {
            this.sharedKey = sharedKey;
            return this;
        }
        public Builder trafficSelectorPolicies(@Nullable List<TrafficSelectorPolicyResponse> trafficSelectorPolicies) {
            this.trafficSelectorPolicies = trafficSelectorPolicies;
            return this;
        }
        public Builder trafficSelectorPolicies(TrafficSelectorPolicyResponse... trafficSelectorPolicies) {
            return trafficSelectorPolicies(List.of(trafficSelectorPolicies));
        }
        public Builder useLocalAzureIpAddress(@Nullable Boolean useLocalAzureIpAddress) {
            this.useLocalAzureIpAddress = useLocalAzureIpAddress;
            return this;
        }
        public Builder usePolicyBasedTrafficSelectors(@Nullable Boolean usePolicyBasedTrafficSelectors) {
            this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            return this;
        }
        public Builder vpnConnectionProtocolType(@Nullable String vpnConnectionProtocolType) {
            this.vpnConnectionProtocolType = vpnConnectionProtocolType;
            return this;
        }
        public Builder vpnLinkConnections(@Nullable List<VpnSiteLinkConnectionResponse> vpnLinkConnections) {
            this.vpnLinkConnections = vpnLinkConnections;
            return this;
        }
        public Builder vpnLinkConnections(VpnSiteLinkConnectionResponse... vpnLinkConnections) {
            return vpnLinkConnections(List.of(vpnLinkConnections));
        }        public VpnConnectionResponse build() {
            return new VpnConnectionResponse(connectionBandwidth, connectionStatus, dpdTimeoutSeconds, egressBytesTransferred, enableBgp, enableInternetSecurity, enableRateLimiting, etag, id, ingressBytesTransferred, ipsecPolicies, name, provisioningState, remoteVpnSite, routingConfiguration, routingWeight, sharedKey, trafficSelectorPolicies, useLocalAzureIpAddress, usePolicyBasedTrafficSelectors, vpnConnectionProtocolType, vpnLinkConnections);
        }
    }
}
