// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.management.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetEntityArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEntityArgs Empty = new GetEntityArgs();

    /**
     * The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq &#39;{entityName}&#39;)  and you can check for substrings on either the name or display name fields(e.g. contains(name, &#39;{substringToSearch}&#39;), contains(displayName, &#39;{substringToSearch&#39;)). Note that the &#39;{entityName}&#39; and &#39;{substringToSearch}&#39; fields are checked case insensitively.
     * 
     */
    @Import(name="filter")
    private Output</* @Nullable */ String> filter;

    /**
     * @return The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq &#39;{entityName}&#39;)  and you can check for substrings on either the name or display name fields(e.g. contains(name, &#39;{substringToSearch}&#39;), contains(displayName, &#39;{substringToSearch&#39;)). Note that the &#39;{entityName}&#39; and &#39;{substringToSearch}&#39; fields are checked case insensitively.
     * 
     */
    public Output</* @Nullable */ String> filter() {
        return this.filter;
    }

    /**
     * A filter which allows the get entities call to focus on a particular group (i.e. &#34;$filter=name eq &#39;groupName&#39;&#34;)
     * 
     */
    @Import(name="groupName")
    private Output</* @Nullable */ String> groupName;

    /**
     * @return A filter which allows the get entities call to focus on a particular group (i.e. &#34;$filter=name eq &#39;groupName&#39;&#34;)
     * 
     */
    public Output</* @Nullable */ String> groupName() {
        return this.groupName;
    }

    /**
     * The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
     * With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user&#39;s permissions.
     * With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
     * With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
     * With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
     * With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.  The user must have direct access to the children entities or one of it&#39;s descendants for it to show up in the results.
     * 
     */
    @Import(name="search")
    private Output</* @Nullable */ String> search;

    /**
     * @return The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
     * With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user&#39;s permissions.
     * With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
     * With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
     * With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
     * With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.  The user must have direct access to the children entities or one of it&#39;s descendants for it to show up in the results.
     * 
     */
    public Output</* @Nullable */ String> search() {
        return this.search;
    }

    /**
     * This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. &#39;$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain&#39;. When specified the $select parameter can override select in $skipToken.
     * 
     */
    @Import(name="select")
    private Output</* @Nullable */ String> select;

    /**
     * @return This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. &#39;$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain&#39;. When specified the $select parameter can override select in $skipToken.
     * 
     */
    public Output</* @Nullable */ String> select() {
        return this.select;
    }

    /**
     * Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
     * 
     */
    @Import(name="skip")
    private Output</* @Nullable */ Integer> skip;

    /**
     * @return Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
     * 
     */
    public Output</* @Nullable */ Integer> skip() {
        return this.skip;
    }

    /**
     * Page continuation token is only used if a previous operation returned a partial result.
     * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * 
     */
    @Import(name="skiptoken")
    private Output</* @Nullable */ String> skiptoken;

    /**
     * @return Page continuation token is only used if a previous operation returned a partial result.
     * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * 
     */
    public Output</* @Nullable */ String> skiptoken() {
        return this.skiptoken;
    }

    /**
     * Number of elements to return when retrieving results. Passing this in will override $skipToken.
     * 
     */
    @Import(name="top")
    private Output</* @Nullable */ Integer> top;

    /**
     * @return Number of elements to return when retrieving results. Passing this in will override $skipToken.
     * 
     */
    public Output</* @Nullable */ Integer> top() {
        return this.top;
    }

    /**
     * The view parameter allows clients to filter the type of data that is returned by the getEntities call.
     * 
     */
    @Import(name="view")
    private Output</* @Nullable */ String> view;

    /**
     * @return The view parameter allows clients to filter the type of data that is returned by the getEntities call.
     * 
     */
    public Output</* @Nullable */ String> view() {
        return this.view;
    }

    private GetEntityArgs() {}

    private GetEntityArgs(GetEntityArgs $) {
        this.filter = $.filter;
        this.groupName = $.groupName;
        this.search = $.search;
        this.select = $.select;
        this.skip = $.skip;
        this.skiptoken = $.skiptoken;
        this.top = $.top;
        this.view = $.view;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEntityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEntityArgs $;

        public Builder() {
            $ = new GetEntityArgs();
        }

        public Builder(GetEntityArgs defaults) {
            $ = new GetEntityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq &#39;{entityName}&#39;)  and you can check for substrings on either the name or display name fields(e.g. contains(name, &#39;{substringToSearch}&#39;), contains(displayName, &#39;{substringToSearch&#39;)). Note that the &#39;{entityName}&#39; and &#39;{substringToSearch}&#39; fields are checked case insensitively.
         * 
         * @return builder
         * 
         */
        public Builder filter(Output</* @Nullable */ String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq &#39;{entityName}&#39;)  and you can check for substrings on either the name or display name fields(e.g. contains(name, &#39;{substringToSearch}&#39;), contains(displayName, &#39;{substringToSearch&#39;)). Note that the &#39;{entityName}&#39; and &#39;{substringToSearch}&#39; fields are checked case insensitively.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param groupName A filter which allows the get entities call to focus on a particular group (i.e. &#34;$filter=name eq &#39;groupName&#39;&#34;)
         * 
         * @return builder
         * 
         */
        public Builder groupName(Output</* @Nullable */ String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName A filter which allows the get entities call to focus on a particular group (i.e. &#34;$filter=name eq &#39;groupName&#39;&#34;)
         * 
         * @return builder
         * 
         */
        public Builder groupName(@Nullable String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param search The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
         * With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user&#39;s permissions.
         * With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
         * With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
         * With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
         * With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.  The user must have direct access to the children entities or one of it&#39;s descendants for it to show up in the results.
         * 
         * @return builder
         * 
         */
        public Builder search(Output</* @Nullable */ String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
         * With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user&#39;s permissions.
         * With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
         * With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
         * With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
         * With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.  The user must have direct access to the children entities or one of it&#39;s descendants for it to show up in the results.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable String search) {
            return search(Output.of(search));
        }

        /**
         * @param select This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. &#39;$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain&#39;. When specified the $select parameter can override select in $skipToken.
         * 
         * @return builder
         * 
         */
        public Builder select(Output</* @Nullable */ String> select) {
            $.select = select;
            return this;
        }

        /**
         * @param select This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. &#39;$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain&#39;. When specified the $select parameter can override select in $skipToken.
         * 
         * @return builder
         * 
         */
        public Builder select(@Nullable String select) {
            return select(Output.of(select));
        }

        /**
         * @param skip Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
         * 
         * @return builder
         * 
         */
        public Builder skip(Output</* @Nullable */ Integer> skip) {
            $.skip = skip;
            return this;
        }

        /**
         * @param skip Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
         * 
         * @return builder
         * 
         */
        public Builder skip(@Nullable Integer skip) {
            return skip(Output.of(skip));
        }

        /**
         * @param skiptoken Page continuation token is only used if a previous operation returned a partial result.
         * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
         * 
         * @return builder
         * 
         */
        public Builder skiptoken(Output</* @Nullable */ String> skiptoken) {
            $.skiptoken = skiptoken;
            return this;
        }

        /**
         * @param skiptoken Page continuation token is only used if a previous operation returned a partial result.
         * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
         * 
         * @return builder
         * 
         */
        public Builder skiptoken(@Nullable String skiptoken) {
            return skiptoken(Output.of(skiptoken));
        }

        /**
         * @param top Number of elements to return when retrieving results. Passing this in will override $skipToken.
         * 
         * @return builder
         * 
         */
        public Builder top(Output</* @Nullable */ Integer> top) {
            $.top = top;
            return this;
        }

        /**
         * @param top Number of elements to return when retrieving results. Passing this in will override $skipToken.
         * 
         * @return builder
         * 
         */
        public Builder top(@Nullable Integer top) {
            return top(Output.of(top));
        }

        /**
         * @param view The view parameter allows clients to filter the type of data that is returned by the getEntities call.
         * 
         * @return builder
         * 
         */
        public Builder view(Output</* @Nullable */ String> view) {
            $.view = view;
            return this;
        }

        /**
         * @param view The view parameter allows clients to filter the type of data that is returned by the getEntities call.
         * 
         * @return builder
         * 
         */
        public Builder view(@Nullable String view) {
            return view(Output.of(view));
        }

        public GetEntityArgs build() {
            return $;
        }
    }

}
