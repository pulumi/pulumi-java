// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An API Version Set contains the common configuration for a set of API Versions relating
 * 
 */
public final class ApiVersionSetContractDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApiVersionSetContractDetailsResponse Empty = new ApiVersionSetContractDetailsResponse();

    /**
     * Description of API Version Set.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of API Version Set.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Identifier for existing API Version Set. Omit this value to create a new Version Set.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Identifier for existing API Version Set. Omit this value to create a new Version Set.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The display Name of the API Version Set.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The display Name of the API Version Set.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
     * 
     */
    @Import(name="versionHeaderName")
    private @Nullable String versionHeaderName;

    /**
     * @return Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
     * 
     */
    public Optional<String> versionHeaderName() {
        return Optional.ofNullable(this.versionHeaderName);
    }

    /**
     * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
     * 
     */
    @Import(name="versionQueryName")
    private @Nullable String versionQueryName;

    /**
     * @return Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
     * 
     */
    public Optional<String> versionQueryName() {
        return Optional.ofNullable(this.versionQueryName);
    }

    /**
     * An value that determines where the API Version identifier will be located in a HTTP request.
     * 
     */
    @Import(name="versioningScheme")
    private @Nullable String versioningScheme;

    /**
     * @return An value that determines where the API Version identifier will be located in a HTTP request.
     * 
     */
    public Optional<String> versioningScheme() {
        return Optional.ofNullable(this.versioningScheme);
    }

    private ApiVersionSetContractDetailsResponse() {}

    private ApiVersionSetContractDetailsResponse(ApiVersionSetContractDetailsResponse $) {
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.versionHeaderName = $.versionHeaderName;
        this.versionQueryName = $.versionQueryName;
        this.versioningScheme = $.versioningScheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiVersionSetContractDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiVersionSetContractDetailsResponse $;

        public Builder() {
            $ = new ApiVersionSetContractDetailsResponse();
        }

        public Builder(ApiVersionSetContractDetailsResponse defaults) {
            $ = new ApiVersionSetContractDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of API Version Set.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param id Identifier for existing API Version Set. Omit this value to create a new Version Set.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name The display Name of the API Version Set.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param versionHeaderName Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
         * 
         * @return builder
         * 
         */
        public Builder versionHeaderName(@Nullable String versionHeaderName) {
            $.versionHeaderName = versionHeaderName;
            return this;
        }

        /**
         * @param versionQueryName Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
         * 
         * @return builder
         * 
         */
        public Builder versionQueryName(@Nullable String versionQueryName) {
            $.versionQueryName = versionQueryName;
            return this;
        }

        /**
         * @param versioningScheme An value that determines where the API Version identifier will be located in a HTTP request.
         * 
         * @return builder
         * 
         */
        public Builder versioningScheme(@Nullable String versioningScheme) {
            $.versioningScheme = versioningScheme;
            return this;
        }

        public ApiVersionSetContractDetailsResponse build() {
            return $;
        }
    }

}
