// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ApplicationGatewayPathRuleResponse;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
 * 
 */
public final class ApplicationGatewayUrlPathMapResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApplicationGatewayUrlPathMapResponse Empty = new ApplicationGatewayUrlPathMapResponse();

    /**
     * Default backend address pool resource of URL path map.
     * 
     */
    @Import(name="defaultBackendAddressPool")
    private @Nullable SubResourceResponse defaultBackendAddressPool;

    public Optional<SubResourceResponse> defaultBackendAddressPool() {
        return Optional.ofNullable(this.defaultBackendAddressPool);
    }

    /**
     * Default backend http settings resource of URL path map.
     * 
     */
    @Import(name="defaultBackendHttpSettings")
    private @Nullable SubResourceResponse defaultBackendHttpSettings;

    public Optional<SubResourceResponse> defaultBackendHttpSettings() {
        return Optional.ofNullable(this.defaultBackendHttpSettings);
    }

    /**
     * Default redirect configuration resource of URL path map.
     * 
     */
    @Import(name="defaultRedirectConfiguration")
    private @Nullable SubResourceResponse defaultRedirectConfiguration;

    public Optional<SubResourceResponse> defaultRedirectConfiguration() {
        return Optional.ofNullable(this.defaultRedirectConfiguration);
    }

    /**
     * Default Rewrite rule set resource of URL path map.
     * 
     */
    @Import(name="defaultRewriteRuleSet")
    private @Nullable SubResourceResponse defaultRewriteRuleSet;

    public Optional<SubResourceResponse> defaultRewriteRuleSet() {
        return Optional.ofNullable(this.defaultRewriteRuleSet);
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the URL path map that is unique within an Application Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Path rule of URL path map resource.
     * 
     */
    @Import(name="pathRules")
    private @Nullable List<ApplicationGatewayPathRuleResponse> pathRules;

    public Optional<List<ApplicationGatewayPathRuleResponse>> pathRules() {
        return Optional.ofNullable(this.pathRules);
    }

    /**
     * The provisioning state of the URL path map resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Type of the resource.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ApplicationGatewayUrlPathMapResponse() {}

    private ApplicationGatewayUrlPathMapResponse(ApplicationGatewayUrlPathMapResponse $) {
        this.defaultBackendAddressPool = $.defaultBackendAddressPool;
        this.defaultBackendHttpSettings = $.defaultBackendHttpSettings;
        this.defaultRedirectConfiguration = $.defaultRedirectConfiguration;
        this.defaultRewriteRuleSet = $.defaultRewriteRuleSet;
        this.etag = $.etag;
        this.id = $.id;
        this.name = $.name;
        this.pathRules = $.pathRules;
        this.provisioningState = $.provisioningState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGatewayUrlPathMapResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGatewayUrlPathMapResponse $;

        public Builder() {
            $ = new ApplicationGatewayUrlPathMapResponse();
        }

        public Builder(ApplicationGatewayUrlPathMapResponse defaults) {
            $ = new ApplicationGatewayUrlPathMapResponse(Objects.requireNonNull(defaults));
        }

        public Builder defaultBackendAddressPool(@Nullable SubResourceResponse defaultBackendAddressPool) {
            $.defaultBackendAddressPool = defaultBackendAddressPool;
            return this;
        }

        public Builder defaultBackendHttpSettings(@Nullable SubResourceResponse defaultBackendHttpSettings) {
            $.defaultBackendHttpSettings = defaultBackendHttpSettings;
            return this;
        }

        public Builder defaultRedirectConfiguration(@Nullable SubResourceResponse defaultRedirectConfiguration) {
            $.defaultRedirectConfiguration = defaultRedirectConfiguration;
            return this;
        }

        public Builder defaultRewriteRuleSet(@Nullable SubResourceResponse defaultRewriteRuleSet) {
            $.defaultRewriteRuleSet = defaultRewriteRuleSet;
            return this;
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder pathRules(@Nullable List<ApplicationGatewayPathRuleResponse> pathRules) {
            $.pathRules = pathRules;
            return this;
        }

        public Builder pathRules(ApplicationGatewayPathRuleResponse... pathRules) {
            return pathRules(List.of(pathRules));
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ApplicationGatewayUrlPathMapResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
