// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.AgentPropertiesResponse;
import com.pulumi.azurenative.containerregistry.inputs.ImageDescriptorResponse;
import com.pulumi.azurenative.containerregistry.inputs.ImageUpdateTriggerResponse;
import com.pulumi.azurenative.containerregistry.inputs.PlatformPropertiesResponse;
import com.pulumi.azurenative.containerregistry.inputs.SourceTriggerDescriptorResponse;
import com.pulumi.azurenative.containerregistry.inputs.SystemDataResponse;
import com.pulumi.azurenative.containerregistry.inputs.TimerTriggerDescriptorResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Run resource properties
 * 
 */
public final class RunResponse extends com.pulumi.resources.InvokeArgs {

    public static final RunResponse Empty = new RunResponse();

    /**
     * The machine configuration of the run agent.
     * 
     */
    @Import(name="agentConfiguration")
    private @Nullable AgentPropertiesResponse agentConfiguration;

    /**
     * @return The machine configuration of the run agent.
     * 
     */
    public Optional<AgentPropertiesResponse> agentConfiguration() {
        return Optional.ofNullable(this.agentConfiguration);
    }

    /**
     * The dedicated agent pool for the run.
     * 
     */
    @Import(name="agentPoolName")
    private @Nullable String agentPoolName;

    /**
     * @return The dedicated agent pool for the run.
     * 
     */
    public Optional<String> agentPoolName() {
        return Optional.ofNullable(this.agentPoolName);
    }

    /**
     * The time the run was scheduled.
     * 
     */
    @Import(name="createTime")
    private @Nullable String createTime;

    /**
     * @return The time the run was scheduled.
     * 
     */
    public Optional<String> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The list of custom registries that were logged in during this run.
     * 
     */
    @Import(name="customRegistries")
    private @Nullable List<String> customRegistries;

    /**
     * @return The list of custom registries that were logged in during this run.
     * 
     */
    public Optional<List<String>> customRegistries() {
        return Optional.ofNullable(this.customRegistries);
    }

    /**
     * The time the run finished.
     * 
     */
    @Import(name="finishTime")
    private @Nullable String finishTime;

    /**
     * @return The time the run finished.
     * 
     */
    public Optional<String> finishTime() {
        return Optional.ofNullable(this.finishTime);
    }

    /**
     * The resource ID.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The resource ID.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The image update trigger that caused the run. This is applicable if the task has base image trigger configured.
     * 
     */
    @Import(name="imageUpdateTrigger")
    private @Nullable ImageUpdateTriggerResponse imageUpdateTrigger;

    /**
     * @return The image update trigger that caused the run. This is applicable if the task has base image trigger configured.
     * 
     */
    public Optional<ImageUpdateTriggerResponse> imageUpdateTrigger() {
        return Optional.ofNullable(this.imageUpdateTrigger);
    }

    /**
     * The value that indicates whether archiving is enabled or not.
     * 
     */
    @Import(name="isArchiveEnabled")
    private @Nullable Boolean isArchiveEnabled;

    /**
     * @return The value that indicates whether archiving is enabled or not.
     * 
     */
    public Optional<Boolean> isArchiveEnabled() {
        return Optional.ofNullable(this.isArchiveEnabled);
    }

    /**
     * The last updated time for the run.
     * 
     */
    @Import(name="lastUpdatedTime")
    private @Nullable String lastUpdatedTime;

    /**
     * @return The last updated time for the run.
     * 
     */
    public Optional<String> lastUpdatedTime() {
        return Optional.ofNullable(this.lastUpdatedTime);
    }

    /**
     * The image description for the log artifact.
     * 
     */
    @Import(name="logArtifact", required=true)
    private ImageDescriptorResponse logArtifact;

    /**
     * @return The image description for the log artifact.
     * 
     */
    public ImageDescriptorResponse logArtifact() {
        return this.logArtifact;
    }

    /**
     * The name of the resource.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
     * 
     */
    @Import(name="outputImages")
    private @Nullable List<ImageDescriptorResponse> outputImages;

    /**
     * @return The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
     * 
     */
    public Optional<List<ImageDescriptorResponse>> outputImages() {
        return Optional.ofNullable(this.outputImages);
    }

    /**
     * The platform properties against which the run will happen.
     * 
     */
    @Import(name="platform")
    private @Nullable PlatformPropertiesResponse platform;

    /**
     * @return The platform properties against which the run will happen.
     * 
     */
    public Optional<PlatformPropertiesResponse> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * The provisioning state of a run.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable String provisioningState;

    /**
     * @return The provisioning state of a run.
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * The error message received from backend systems after the run is scheduled.
     * 
     */
    @Import(name="runErrorMessage", required=true)
    private String runErrorMessage;

    /**
     * @return The error message received from backend systems after the run is scheduled.
     * 
     */
    public String runErrorMessage() {
        return this.runErrorMessage;
    }

    /**
     * The unique identifier for the run.
     * 
     */
    @Import(name="runId")
    private @Nullable String runId;

    /**
     * @return The unique identifier for the run.
     * 
     */
    public Optional<String> runId() {
        return Optional.ofNullable(this.runId);
    }

    /**
     * The type of run.
     * 
     */
    @Import(name="runType")
    private @Nullable String runType;

    /**
     * @return The type of run.
     * 
     */
    public Optional<String> runType() {
        return Optional.ofNullable(this.runType);
    }

    /**
     * The scope of the credentials that were used to login to the source registry during this run.
     * 
     */
    @Import(name="sourceRegistryAuth")
    private @Nullable String sourceRegistryAuth;

    /**
     * @return The scope of the credentials that were used to login to the source registry during this run.
     * 
     */
    public Optional<String> sourceRegistryAuth() {
        return Optional.ofNullable(this.sourceRegistryAuth);
    }

    /**
     * The source trigger that caused the run.
     * 
     */
    @Import(name="sourceTrigger")
    private @Nullable SourceTriggerDescriptorResponse sourceTrigger;

    /**
     * @return The source trigger that caused the run.
     * 
     */
    public Optional<SourceTriggerDescriptorResponse> sourceTrigger() {
        return Optional.ofNullable(this.sourceTrigger);
    }

    /**
     * The time the run started.
     * 
     */
    @Import(name="startTime")
    private @Nullable String startTime;

    /**
     * @return The time the run started.
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The current status of the run.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The current status of the run.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Metadata pertaining to creation and last modification of the resource.
     * 
     */
    @Import(name="systemData", required=true)
    private SystemDataResponse systemData;

    /**
     * @return Metadata pertaining to creation and last modification of the resource.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }

    /**
     * The task against which run was scheduled.
     * 
     */
    @Import(name="task")
    private @Nullable String task;

    /**
     * @return The task against which run was scheduled.
     * 
     */
    public Optional<String> task() {
        return Optional.ofNullable(this.task);
    }

    /**
     * The timer trigger that caused the run.
     * 
     */
    @Import(name="timerTrigger")
    private @Nullable TimerTriggerDescriptorResponse timerTrigger;

    /**
     * @return The timer trigger that caused the run.
     * 
     */
    public Optional<TimerTriggerDescriptorResponse> timerTrigger() {
        return Optional.ofNullable(this.timerTrigger);
    }

    /**
     * The type of the resource.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * The update trigger token passed for the Run.
     * 
     */
    @Import(name="updateTriggerToken")
    private @Nullable String updateTriggerToken;

    /**
     * @return The update trigger token passed for the Run.
     * 
     */
    public Optional<String> updateTriggerToken() {
        return Optional.ofNullable(this.updateTriggerToken);
    }

    private RunResponse() {}

    private RunResponse(RunResponse $) {
        this.agentConfiguration = $.agentConfiguration;
        this.agentPoolName = $.agentPoolName;
        this.createTime = $.createTime;
        this.customRegistries = $.customRegistries;
        this.finishTime = $.finishTime;
        this.id = $.id;
        this.imageUpdateTrigger = $.imageUpdateTrigger;
        this.isArchiveEnabled = $.isArchiveEnabled;
        this.lastUpdatedTime = $.lastUpdatedTime;
        this.logArtifact = $.logArtifact;
        this.name = $.name;
        this.outputImages = $.outputImages;
        this.platform = $.platform;
        this.provisioningState = $.provisioningState;
        this.runErrorMessage = $.runErrorMessage;
        this.runId = $.runId;
        this.runType = $.runType;
        this.sourceRegistryAuth = $.sourceRegistryAuth;
        this.sourceTrigger = $.sourceTrigger;
        this.startTime = $.startTime;
        this.status = $.status;
        this.systemData = $.systemData;
        this.task = $.task;
        this.timerTrigger = $.timerTrigger;
        this.type = $.type;
        this.updateTriggerToken = $.updateTriggerToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RunResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RunResponse $;

        public Builder() {
            $ = new RunResponse();
        }

        public Builder(RunResponse defaults) {
            $ = new RunResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentConfiguration The machine configuration of the run agent.
         * 
         * @return builder
         * 
         */
        public Builder agentConfiguration(@Nullable AgentPropertiesResponse agentConfiguration) {
            $.agentConfiguration = agentConfiguration;
            return this;
        }

        /**
         * @param agentPoolName The dedicated agent pool for the run.
         * 
         * @return builder
         * 
         */
        public Builder agentPoolName(@Nullable String agentPoolName) {
            $.agentPoolName = agentPoolName;
            return this;
        }

        /**
         * @param createTime The time the run was scheduled.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param customRegistries The list of custom registries that were logged in during this run.
         * 
         * @return builder
         * 
         */
        public Builder customRegistries(@Nullable List<String> customRegistries) {
            $.customRegistries = customRegistries;
            return this;
        }

        /**
         * @param customRegistries The list of custom registries that were logged in during this run.
         * 
         * @return builder
         * 
         */
        public Builder customRegistries(String... customRegistries) {
            return customRegistries(List.of(customRegistries));
        }

        /**
         * @param finishTime The time the run finished.
         * 
         * @return builder
         * 
         */
        public Builder finishTime(@Nullable String finishTime) {
            $.finishTime = finishTime;
            return this;
        }

        /**
         * @param id The resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param imageUpdateTrigger The image update trigger that caused the run. This is applicable if the task has base image trigger configured.
         * 
         * @return builder
         * 
         */
        public Builder imageUpdateTrigger(@Nullable ImageUpdateTriggerResponse imageUpdateTrigger) {
            $.imageUpdateTrigger = imageUpdateTrigger;
            return this;
        }

        /**
         * @param isArchiveEnabled The value that indicates whether archiving is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder isArchiveEnabled(@Nullable Boolean isArchiveEnabled) {
            $.isArchiveEnabled = isArchiveEnabled;
            return this;
        }

        /**
         * @param lastUpdatedTime The last updated time for the run.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedTime(@Nullable String lastUpdatedTime) {
            $.lastUpdatedTime = lastUpdatedTime;
            return this;
        }

        /**
         * @param logArtifact The image description for the log artifact.
         * 
         * @return builder
         * 
         */
        public Builder logArtifact(ImageDescriptorResponse logArtifact) {
            $.logArtifact = logArtifact;
            return this;
        }

        /**
         * @param name The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param outputImages The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
         * 
         * @return builder
         * 
         */
        public Builder outputImages(@Nullable List<ImageDescriptorResponse> outputImages) {
            $.outputImages = outputImages;
            return this;
        }

        /**
         * @param outputImages The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
         * 
         * @return builder
         * 
         */
        public Builder outputImages(ImageDescriptorResponse... outputImages) {
            return outputImages(List.of(outputImages));
        }

        /**
         * @param platform The platform properties against which the run will happen.
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable PlatformPropertiesResponse platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param provisioningState The provisioning state of a run.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(@Nullable String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param runErrorMessage The error message received from backend systems after the run is scheduled.
         * 
         * @return builder
         * 
         */
        public Builder runErrorMessage(String runErrorMessage) {
            $.runErrorMessage = runErrorMessage;
            return this;
        }

        /**
         * @param runId The unique identifier for the run.
         * 
         * @return builder
         * 
         */
        public Builder runId(@Nullable String runId) {
            $.runId = runId;
            return this;
        }

        /**
         * @param runType The type of run.
         * 
         * @return builder
         * 
         */
        public Builder runType(@Nullable String runType) {
            $.runType = runType;
            return this;
        }

        /**
         * @param sourceRegistryAuth The scope of the credentials that were used to login to the source registry during this run.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegistryAuth(@Nullable String sourceRegistryAuth) {
            $.sourceRegistryAuth = sourceRegistryAuth;
            return this;
        }

        /**
         * @param sourceTrigger The source trigger that caused the run.
         * 
         * @return builder
         * 
         */
        public Builder sourceTrigger(@Nullable SourceTriggerDescriptorResponse sourceTrigger) {
            $.sourceTrigger = sourceTrigger;
            return this;
        }

        /**
         * @param startTime The time the run started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param status The current status of the run.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param systemData Metadata pertaining to creation and last modification of the resource.
         * 
         * @return builder
         * 
         */
        public Builder systemData(SystemDataResponse systemData) {
            $.systemData = systemData;
            return this;
        }

        /**
         * @param task The task against which run was scheduled.
         * 
         * @return builder
         * 
         */
        public Builder task(@Nullable String task) {
            $.task = task;
            return this;
        }

        /**
         * @param timerTrigger The timer trigger that caused the run.
         * 
         * @return builder
         * 
         */
        public Builder timerTrigger(@Nullable TimerTriggerDescriptorResponse timerTrigger) {
            $.timerTrigger = timerTrigger;
            return this;
        }

        /**
         * @param type The type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param updateTriggerToken The update trigger token passed for the Run.
         * 
         * @return builder
         * 
         */
        public Builder updateTriggerToken(@Nullable String updateTriggerToken) {
            $.updateTriggerToken = updateTriggerToken;
            return this;
        }

        public RunResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.isArchiveEnabled = Codegen.booleanProp("isArchiveEnabled").arg($.isArchiveEnabled).def(false).getNullable();
            $.logArtifact = Objects.requireNonNull($.logArtifact, "expected parameter 'logArtifact' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.runErrorMessage = Objects.requireNonNull($.runErrorMessage, "expected parameter 'runErrorMessage' to be non-null");
            $.systemData = Objects.requireNonNull($.systemData, "expected parameter 'systemData' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
