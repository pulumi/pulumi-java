// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering.outputs;

import com.pulumi.azurenative.peering.outputs.BgpSessionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DirectConnectionResponse {
    /**
     * The bandwidth of the connection.
     * 
     */
    private final @Nullable Integer bandwidthInMbps;
    /**
     * The BGP session associated with the connection.
     * 
     */
    private final @Nullable BgpSessionResponse bgpSession;
    /**
     * The unique identifier (GUID) for the connection.
     * 
     */
    private final @Nullable String connectionIdentifier;
    /**
     * The state of the connection.
     * 
     */
    private final String connectionState;
    /**
     * The error message related to the connection state, if any.
     * 
     */
    private final String errorMessage;
    /**
     * The ID used within Microsoft's peering provisioning system to track the connection
     * 
     */
    private final String microsoftTrackingId;
    /**
     * The PeeringDB.com ID of the facility at which the connection has to be set up.
     * 
     */
    private final @Nullable Integer peeringDBFacilityId;
    /**
     * The bandwidth that is actually provisioned.
     * 
     */
    private final Integer provisionedBandwidthInMbps;
    /**
     * The field indicating if Microsoft provides session ip addresses.
     * 
     */
    private final @Nullable String sessionAddressProvider;
    /**
     * The flag that indicates whether or not the connection is used for peering service.
     * 
     */
    private final @Nullable Boolean useForPeeringService;

    @CustomType.Constructor
    private DirectConnectionResponse(
        @CustomType.Parameter("bandwidthInMbps") @Nullable Integer bandwidthInMbps,
        @CustomType.Parameter("bgpSession") @Nullable BgpSessionResponse bgpSession,
        @CustomType.Parameter("connectionIdentifier") @Nullable String connectionIdentifier,
        @CustomType.Parameter("connectionState") String connectionState,
        @CustomType.Parameter("errorMessage") String errorMessage,
        @CustomType.Parameter("microsoftTrackingId") String microsoftTrackingId,
        @CustomType.Parameter("peeringDBFacilityId") @Nullable Integer peeringDBFacilityId,
        @CustomType.Parameter("provisionedBandwidthInMbps") Integer provisionedBandwidthInMbps,
        @CustomType.Parameter("sessionAddressProvider") @Nullable String sessionAddressProvider,
        @CustomType.Parameter("useForPeeringService") @Nullable Boolean useForPeeringService) {
        this.bandwidthInMbps = bandwidthInMbps;
        this.bgpSession = bgpSession;
        this.connectionIdentifier = connectionIdentifier;
        this.connectionState = connectionState;
        this.errorMessage = errorMessage;
        this.microsoftTrackingId = microsoftTrackingId;
        this.peeringDBFacilityId = peeringDBFacilityId;
        this.provisionedBandwidthInMbps = provisionedBandwidthInMbps;
        this.sessionAddressProvider = sessionAddressProvider;
        this.useForPeeringService = useForPeeringService;
    }

    /**
     * The bandwidth of the connection.
     * 
    */
    public Optional<Integer> bandwidthInMbps() {
        return Optional.ofNullable(this.bandwidthInMbps);
    }
    /**
     * The BGP session associated with the connection.
     * 
    */
    public Optional<BgpSessionResponse> bgpSession() {
        return Optional.ofNullable(this.bgpSession);
    }
    /**
     * The unique identifier (GUID) for the connection.
     * 
    */
    public Optional<String> connectionIdentifier() {
        return Optional.ofNullable(this.connectionIdentifier);
    }
    /**
     * The state of the connection.
     * 
    */
    public String connectionState() {
        return this.connectionState;
    }
    /**
     * The error message related to the connection state, if any.
     * 
    */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * The ID used within Microsoft's peering provisioning system to track the connection
     * 
    */
    public String microsoftTrackingId() {
        return this.microsoftTrackingId;
    }
    /**
     * The PeeringDB.com ID of the facility at which the connection has to be set up.
     * 
    */
    public Optional<Integer> peeringDBFacilityId() {
        return Optional.ofNullable(this.peeringDBFacilityId);
    }
    /**
     * The bandwidth that is actually provisioned.
     * 
    */
    public Integer provisionedBandwidthInMbps() {
        return this.provisionedBandwidthInMbps;
    }
    /**
     * The field indicating if Microsoft provides session ip addresses.
     * 
    */
    public Optional<String> sessionAddressProvider() {
        return Optional.ofNullable(this.sessionAddressProvider);
    }
    /**
     * The flag that indicates whether or not the connection is used for peering service.
     * 
    */
    public Optional<Boolean> useForPeeringService() {
        return Optional.ofNullable(this.useForPeeringService);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DirectConnectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer bandwidthInMbps;
        private @Nullable BgpSessionResponse bgpSession;
        private @Nullable String connectionIdentifier;
        private String connectionState;
        private String errorMessage;
        private String microsoftTrackingId;
        private @Nullable Integer peeringDBFacilityId;
        private Integer provisionedBandwidthInMbps;
        private @Nullable String sessionAddressProvider;
        private @Nullable Boolean useForPeeringService;

        public Builder() {
    	      // Empty
        }

        public Builder(DirectConnectionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidthInMbps = defaults.bandwidthInMbps;
    	      this.bgpSession = defaults.bgpSession;
    	      this.connectionIdentifier = defaults.connectionIdentifier;
    	      this.connectionState = defaults.connectionState;
    	      this.errorMessage = defaults.errorMessage;
    	      this.microsoftTrackingId = defaults.microsoftTrackingId;
    	      this.peeringDBFacilityId = defaults.peeringDBFacilityId;
    	      this.provisionedBandwidthInMbps = defaults.provisionedBandwidthInMbps;
    	      this.sessionAddressProvider = defaults.sessionAddressProvider;
    	      this.useForPeeringService = defaults.useForPeeringService;
        }

        public Builder bandwidthInMbps(@Nullable Integer bandwidthInMbps) {
            this.bandwidthInMbps = bandwidthInMbps;
            return this;
        }
        public Builder bgpSession(@Nullable BgpSessionResponse bgpSession) {
            this.bgpSession = bgpSession;
            return this;
        }
        public Builder connectionIdentifier(@Nullable String connectionIdentifier) {
            this.connectionIdentifier = connectionIdentifier;
            return this;
        }
        public Builder connectionState(String connectionState) {
            this.connectionState = Objects.requireNonNull(connectionState);
            return this;
        }
        public Builder errorMessage(String errorMessage) {
            this.errorMessage = Objects.requireNonNull(errorMessage);
            return this;
        }
        public Builder microsoftTrackingId(String microsoftTrackingId) {
            this.microsoftTrackingId = Objects.requireNonNull(microsoftTrackingId);
            return this;
        }
        public Builder peeringDBFacilityId(@Nullable Integer peeringDBFacilityId) {
            this.peeringDBFacilityId = peeringDBFacilityId;
            return this;
        }
        public Builder provisionedBandwidthInMbps(Integer provisionedBandwidthInMbps) {
            this.provisionedBandwidthInMbps = Objects.requireNonNull(provisionedBandwidthInMbps);
            return this;
        }
        public Builder sessionAddressProvider(@Nullable String sessionAddressProvider) {
            this.sessionAddressProvider = sessionAddressProvider;
            return this;
        }
        public Builder useForPeeringService(@Nullable Boolean useForPeeringService) {
            this.useForPeeringService = useForPeeringService;
            return this;
        }        public DirectConnectionResponse build() {
            return new DirectConnectionResponse(bandwidthInMbps, bgpSession, connectionIdentifier, connectionState, errorMessage, microsoftTrackingId, peeringDBFacilityId, provisionedBandwidthInMbps, sessionAddressProvider, useForPeeringService);
        }
    }
}
