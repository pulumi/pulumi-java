// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Cursor methods for Mongodb query
 * 
 */
public final class MongoDbCursorMethodsPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final MongoDbCursorMethodsPropertiesResponse Empty = new MongoDbCursorMethodsPropertiesResponse();

    /**
     * Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="limit")
    private @Nullable Object limit;

    public Optional<Object> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="project")
    private @Nullable Object project;

    public Optional<Object> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="skip")
    private @Nullable Object skip;

    public Optional<Object> skip() {
        return Optional.ofNullable(this.skip);
    }

    /**
     * Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sort")
    private @Nullable Object sort;

    public Optional<Object> sort() {
        return Optional.ofNullable(this.sort);
    }

    private MongoDbCursorMethodsPropertiesResponse() {}

    private MongoDbCursorMethodsPropertiesResponse(MongoDbCursorMethodsPropertiesResponse $) {
        this.limit = $.limit;
        this.project = $.project;
        this.skip = $.skip;
        this.sort = $.sort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoDbCursorMethodsPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoDbCursorMethodsPropertiesResponse $;

        public Builder() {
            $ = new MongoDbCursorMethodsPropertiesResponse();
        }

        public Builder(MongoDbCursorMethodsPropertiesResponse defaults) {
            $ = new MongoDbCursorMethodsPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder limit(@Nullable Object limit) {
            $.limit = limit;
            return this;
        }

        public Builder project(@Nullable Object project) {
            $.project = project;
            return this;
        }

        public Builder skip(@Nullable Object skip) {
            $.skip = skip;
            return this;
        }

        public Builder sort(@Nullable Object sort) {
            $.sort = sort;
            return this;
        }

        public MongoDbCursorMethodsPropertiesResponse build() {
            return $;
        }
    }

}
