// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scheduler.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OAuthAuthenticationResponse extends com.pulumi.resources.InvokeArgs {

    public static final OAuthAuthenticationResponse Empty = new OAuthAuthenticationResponse();

    /**
     * Gets or sets the audience.
     * 
     */
    @Import(name="audience")
      private final @Nullable String audience;

    public Optional<String> audience() {
        return this.audience == null ? Optional.empty() : Optional.ofNullable(this.audience);
    }

    /**
     * Gets or sets the client identifier.
     * 
     */
    @Import(name="clientId")
      private final @Nullable String clientId;

    public Optional<String> clientId() {
        return this.clientId == null ? Optional.empty() : Optional.ofNullable(this.clientId);
    }

    /**
     * Gets or sets the secret, return value will always be empty.
     * 
     */
    @Import(name="secret")
      private final @Nullable String secret;

    public Optional<String> secret() {
        return this.secret == null ? Optional.empty() : Optional.ofNullable(this.secret);
    }

    /**
     * Gets or sets the tenant.
     * 
     */
    @Import(name="tenant")
      private final @Nullable String tenant;

    public Optional<String> tenant() {
        return this.tenant == null ? Optional.empty() : Optional.ofNullable(this.tenant);
    }

    /**
     * Gets or sets the HTTP authentication type.
     * Expected value is &#39;ActiveDirectoryOAuth&#39;.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public OAuthAuthenticationResponse(
        @Nullable String audience,
        @Nullable String clientId,
        @Nullable String secret,
        @Nullable String tenant,
        String type) {
        this.audience = audience;
        this.clientId = clientId;
        this.secret = secret;
        this.tenant = tenant;
        this.type = Codegen.stringProp("type").arg(type).require();
    }

    private OAuthAuthenticationResponse() {
        this.audience = null;
        this.clientId = null;
        this.secret = null;
        this.tenant = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OAuthAuthenticationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String audience;
        private @Nullable String clientId;
        private @Nullable String secret;
        private @Nullable String tenant;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(OAuthAuthenticationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audience = defaults.audience;
    	      this.clientId = defaults.clientId;
    	      this.secret = defaults.secret;
    	      this.tenant = defaults.tenant;
    	      this.type = defaults.type;
        }

        public Builder audience(@Nullable String audience) {
            this.audience = audience;
            return this;
        }
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        public Builder secret(@Nullable String secret) {
            this.secret = secret;
            return this;
        }
        public Builder tenant(@Nullable String tenant) {
            this.tenant = tenant;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public OAuthAuthenticationResponse build() {
            return new OAuthAuthenticationResponse(audience, clientId, secret, tenant, type);
        }
    }
}
