// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.SystemDataResponse;
import com.pulumi.azurenative.network.outputs.TargetDnsServerResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetForwardingRuleResult {
    /**
     * @return The domain name for the forwarding rule.
     * 
     */
    private final String domainName;
    /**
     * @return ETag of the forwarding rule.
     * 
     */
    private final String etag;
    /**
     * @return The state of forwarding rule.
     * 
     */
    private final @Nullable String forwardingRuleState;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * @return Metadata attached to the forwarding rule.
     * 
     */
    private final @Nullable Map<String,String> metadata;
    /**
     * @return The name of the resource
     * 
     */
    private final String name;
    /**
     * @return The current provisioning state of the forwarding rule. This is a read-only property and any attempt to set this value will be ignored.
     * 
     */
    private final String provisioningState;
    /**
     * @return Metadata pertaining to creation and last modification of the resource.
     * 
     */
    private final SystemDataResponse systemData;
    /**
     * @return DNS servers to forward the DNS query to.
     * 
     */
    private final List<TargetDnsServerResponse> targetDnsServers;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetForwardingRuleResult(
        @CustomType.Parameter("domainName") String domainName,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("forwardingRuleState") @Nullable String forwardingRuleState,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("metadata") @Nullable Map<String,String> metadata,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("systemData") SystemDataResponse systemData,
        @CustomType.Parameter("targetDnsServers") List<TargetDnsServerResponse> targetDnsServers,
        @CustomType.Parameter("type") String type) {
        this.domainName = domainName;
        this.etag = etag;
        this.forwardingRuleState = forwardingRuleState;
        this.id = id;
        this.metadata = metadata;
        this.name = name;
        this.provisioningState = provisioningState;
        this.systemData = systemData;
        this.targetDnsServers = targetDnsServers;
        this.type = type;
    }

    /**
     * @return The domain name for the forwarding rule.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return ETag of the forwarding rule.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The state of forwarding rule.
     * 
     */
    public Optional<String> forwardingRuleState() {
        return Optional.ofNullable(this.forwardingRuleState);
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Metadata attached to the forwarding rule.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata == null ? Map.of() : this.metadata;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The current provisioning state of the forwarding rule. This is a read-only property and any attempt to set this value will be ignored.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Metadata pertaining to creation and last modification of the resource.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return DNS servers to forward the DNS query to.
     * 
     */
    public List<TargetDnsServerResponse> targetDnsServers() {
        return this.targetDnsServers;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetForwardingRuleResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String domainName;
        private String etag;
        private @Nullable String forwardingRuleState;
        private String id;
        private @Nullable Map<String,String> metadata;
        private String name;
        private String provisioningState;
        private SystemDataResponse systemData;
        private List<TargetDnsServerResponse> targetDnsServers;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetForwardingRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.etag = defaults.etag;
    	      this.forwardingRuleState = defaults.forwardingRuleState;
    	      this.id = defaults.id;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.systemData = defaults.systemData;
    	      this.targetDnsServers = defaults.targetDnsServers;
    	      this.type = defaults.type;
        }

        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder forwardingRuleState(@Nullable String forwardingRuleState) {
            this.forwardingRuleState = forwardingRuleState;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder metadata(@Nullable Map<String,String> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        public Builder targetDnsServers(List<TargetDnsServerResponse> targetDnsServers) {
            this.targetDnsServers = Objects.requireNonNull(targetDnsServers);
            return this;
        }
        public Builder targetDnsServers(TargetDnsServerResponse... targetDnsServers) {
            return targetDnsServers(List.of(targetDnsServers));
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetForwardingRuleResult build() {
            return new GetForwardingRuleResult(domainName, etag, forwardingRuleState, id, metadata, name, provisioningState, systemData, targetDnsServers, type);
        }
    }
}
