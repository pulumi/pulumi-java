// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.deploymentmanager.inputs;

import com.pulumi.azurenative.deploymentmanager.inputs.RestHealthCheckArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the REST health check step properties.
 * 
 */
public final class RestHealthCheckStepAttributesArgs extends com.pulumi.resources.ResourceArgs {

    public static final RestHealthCheckStepAttributesArgs Empty = new RestHealthCheckStepAttributesArgs();

    /**
     * The list of checks that form the health check step.
     * 
     */
    @Import(name="healthChecks", required=true)
    private Output<List<RestHealthCheckArgs>> healthChecks;

    /**
     * @return The list of checks that form the health check step.
     * 
     */
    public Output<List<RestHealthCheckArgs>> healthChecks() {
        return this.healthChecks;
    }

    /**
     * The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.
     * 
     */
    @Import(name="healthyStateDuration", required=true)
    private Output<String> healthyStateDuration;

    /**
     * @return The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.
     * 
     */
    public Output<String> healthyStateDuration() {
        return this.healthyStateDuration;
    }

    /**
     * The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn&#39;t. Health check starts to enforce healthyStateDuration once resource becomes healthy.
     * 
     */
    @Import(name="maxElasticDuration")
    private @Nullable Output<String> maxElasticDuration;

    /**
     * @return The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn&#39;t. Health check starts to enforce healthyStateDuration once resource becomes healthy.
     * 
     */
    public Optional<Output<String>> maxElasticDuration() {
        return Optional.ofNullable(this.maxElasticDuration);
    }

    /**
     * The type of health check.
     * Expected value is &#39;REST&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of health check.
     * Expected value is &#39;REST&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The duration in ISO 8601 format for which health check waits idly without any checks.
     * 
     */
    @Import(name="waitDuration")
    private @Nullable Output<String> waitDuration;

    /**
     * @return The duration in ISO 8601 format for which health check waits idly without any checks.
     * 
     */
    public Optional<Output<String>> waitDuration() {
        return Optional.ofNullable(this.waitDuration);
    }

    private RestHealthCheckStepAttributesArgs() {}

    private RestHealthCheckStepAttributesArgs(RestHealthCheckStepAttributesArgs $) {
        this.healthChecks = $.healthChecks;
        this.healthyStateDuration = $.healthyStateDuration;
        this.maxElasticDuration = $.maxElasticDuration;
        this.type = $.type;
        this.waitDuration = $.waitDuration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RestHealthCheckStepAttributesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RestHealthCheckStepAttributesArgs $;

        public Builder() {
            $ = new RestHealthCheckStepAttributesArgs();
        }

        public Builder(RestHealthCheckStepAttributesArgs defaults) {
            $ = new RestHealthCheckStepAttributesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param healthChecks The list of checks that form the health check step.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(Output<List<RestHealthCheckArgs>> healthChecks) {
            $.healthChecks = healthChecks;
            return this;
        }

        /**
         * @param healthChecks The list of checks that form the health check step.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(List<RestHealthCheckArgs> healthChecks) {
            return healthChecks(Output.of(healthChecks));
        }

        /**
         * @param healthChecks The list of checks that form the health check step.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(RestHealthCheckArgs... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }

        /**
         * @param healthyStateDuration The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.
         * 
         * @return builder
         * 
         */
        public Builder healthyStateDuration(Output<String> healthyStateDuration) {
            $.healthyStateDuration = healthyStateDuration;
            return this;
        }

        /**
         * @param healthyStateDuration The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.
         * 
         * @return builder
         * 
         */
        public Builder healthyStateDuration(String healthyStateDuration) {
            return healthyStateDuration(Output.of(healthyStateDuration));
        }

        /**
         * @param maxElasticDuration The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn&#39;t. Health check starts to enforce healthyStateDuration once resource becomes healthy.
         * 
         * @return builder
         * 
         */
        public Builder maxElasticDuration(@Nullable Output<String> maxElasticDuration) {
            $.maxElasticDuration = maxElasticDuration;
            return this;
        }

        /**
         * @param maxElasticDuration The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn&#39;t. Health check starts to enforce healthyStateDuration once resource becomes healthy.
         * 
         * @return builder
         * 
         */
        public Builder maxElasticDuration(String maxElasticDuration) {
            return maxElasticDuration(Output.of(maxElasticDuration));
        }

        /**
         * @param type The type of health check.
         * Expected value is &#39;REST&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of health check.
         * Expected value is &#39;REST&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param waitDuration The duration in ISO 8601 format for which health check waits idly without any checks.
         * 
         * @return builder
         * 
         */
        public Builder waitDuration(@Nullable Output<String> waitDuration) {
            $.waitDuration = waitDuration;
            return this;
        }

        /**
         * @param waitDuration The duration in ISO 8601 format for which health check waits idly without any checks.
         * 
         * @return builder
         * 
         */
        public Builder waitDuration(String waitDuration) {
            return waitDuration(Output.of(waitDuration));
        }

        public RestHealthCheckStepAttributesArgs build() {
            $.healthChecks = Objects.requireNonNull($.healthChecks, "expected parameter 'healthChecks' to be non-null");
            $.healthyStateDuration = Objects.requireNonNull($.healthyStateDuration, "expected parameter 'healthyStateDuration' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
