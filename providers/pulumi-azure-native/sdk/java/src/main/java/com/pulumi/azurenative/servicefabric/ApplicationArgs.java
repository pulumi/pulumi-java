// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric;

import com.pulumi.azurenative.servicefabric.inputs.ApplicationMetricDescriptionArgs;
import com.pulumi.azurenative.servicefabric.inputs.ApplicationUpgradePolicyArgs;
import com.pulumi.azurenative.servicefabric.inputs.ApplicationUserAssignedIdentityArgs;
import com.pulumi.azurenative.servicefabric.inputs.ManagedIdentityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    /**
     * The name of the application resource.
     * 
     */
    @Import(name="applicationName")
    private @Nullable Output<String> applicationName;

    /**
     * @return The name of the application resource.
     * 
     */
    public Optional<Output<String>> applicationName() {
        return Optional.ofNullable(this.applicationName);
    }

    /**
     * The name of the cluster resource.
     * 
     */
    @Import(name="clusterName", required=true)
    private Output<String> clusterName;

    /**
     * @return The name of the cluster resource.
     * 
     */
    public Output<String> clusterName() {
        return this.clusterName;
    }

    /**
     * Describes the managed identities for an Azure resource.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<ManagedIdentityArgs> identity;

    /**
     * @return Describes the managed identities for an Azure resource.
     * 
     */
    public Optional<Output<ManagedIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * It will be deprecated in New API, resource location depends on the parent resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return It will be deprecated in New API, resource location depends on the parent resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * List of user assigned identities for the application, each mapped to a friendly name.
     * 
     */
    @Import(name="managedIdentities")
    private @Nullable Output<List<ApplicationUserAssignedIdentityArgs>> managedIdentities;

    /**
     * @return List of user assigned identities for the application, each mapped to a friendly name.
     * 
     */
    public Optional<Output<List<ApplicationUserAssignedIdentityArgs>>> managedIdentities() {
        return Optional.ofNullable(this.managedIdentities);
    }

    /**
     * The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
     * 
     */
    @Import(name="maximumNodes")
    private @Nullable Output<Double> maximumNodes;

    /**
     * @return The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
     * 
     */
    public Optional<Output<Double>> maximumNodes() {
        return Optional.ofNullable(this.maximumNodes);
    }

    /**
     * List of application capacity metric description.
     * 
     */
    @Import(name="metrics")
    private @Nullable Output<List<ApplicationMetricDescriptionArgs>> metrics;

    /**
     * @return List of application capacity metric description.
     * 
     */
    public Optional<Output<List<ApplicationMetricDescriptionArgs>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    /**
     * The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
     * 
     */
    @Import(name="minimumNodes")
    private @Nullable Output<Double> minimumNodes;

    /**
     * @return The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
     * 
     */
    public Optional<Output<Double>> minimumNodes() {
        return Optional.ofNullable(this.minimumNodes);
    }

    /**
     * List of application parameters with overridden values from their default values specified in the application manifest.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return List of application parameters with overridden values from their default values specified in the application manifest.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Remove the current application capacity settings.
     * 
     */
    @Import(name="removeApplicationCapacity")
    private @Nullable Output<Boolean> removeApplicationCapacity;

    /**
     * @return Remove the current application capacity settings.
     * 
     */
    public Optional<Output<Boolean>> removeApplicationCapacity() {
        return Optional.ofNullable(this.removeApplicationCapacity);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Azure resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Azure resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The application type name as defined in the application manifest.
     * 
     */
    @Import(name="typeName")
    private @Nullable Output<String> typeName;

    /**
     * @return The application type name as defined in the application manifest.
     * 
     */
    public Optional<Output<String>> typeName() {
        return Optional.ofNullable(this.typeName);
    }

    /**
     * The version of the application type as defined in the application manifest.
     * 
     */
    @Import(name="typeVersion")
    private @Nullable Output<String> typeVersion;

    /**
     * @return The version of the application type as defined in the application manifest.
     * 
     */
    public Optional<Output<String>> typeVersion() {
        return Optional.ofNullable(this.typeVersion);
    }

    /**
     * Describes the policy for a monitored application upgrade.
     * 
     */
    @Import(name="upgradePolicy")
    private @Nullable Output<ApplicationUpgradePolicyArgs> upgradePolicy;

    /**
     * @return Describes the policy for a monitored application upgrade.
     * 
     */
    public Optional<Output<ApplicationUpgradePolicyArgs>> upgradePolicy() {
        return Optional.ofNullable(this.upgradePolicy);
    }

    private ApplicationArgs() {}

    private ApplicationArgs(ApplicationArgs $) {
        this.applicationName = $.applicationName;
        this.clusterName = $.clusterName;
        this.identity = $.identity;
        this.location = $.location;
        this.managedIdentities = $.managedIdentities;
        this.maximumNodes = $.maximumNodes;
        this.metrics = $.metrics;
        this.minimumNodes = $.minimumNodes;
        this.parameters = $.parameters;
        this.removeApplicationCapacity = $.removeApplicationCapacity;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.typeName = $.typeName;
        this.typeVersion = $.typeVersion;
        this.upgradePolicy = $.upgradePolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationArgs $;

        public Builder() {
            $ = new ApplicationArgs();
        }

        public Builder(ApplicationArgs defaults) {
            $ = new ApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationName The name of the application resource.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(@Nullable Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param applicationName The name of the application resource.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        /**
         * @param clusterName The name of the cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName The name of the cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param identity Describes the managed identities for an Azure resource.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<ManagedIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity Describes the managed identities for an Azure resource.
         * 
         * @return builder
         * 
         */
        public Builder identity(ManagedIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location It will be deprecated in New API, resource location depends on the parent resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location It will be deprecated in New API, resource location depends on the parent resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managedIdentities List of user assigned identities for the application, each mapped to a friendly name.
         * 
         * @return builder
         * 
         */
        public Builder managedIdentities(@Nullable Output<List<ApplicationUserAssignedIdentityArgs>> managedIdentities) {
            $.managedIdentities = managedIdentities;
            return this;
        }

        /**
         * @param managedIdentities List of user assigned identities for the application, each mapped to a friendly name.
         * 
         * @return builder
         * 
         */
        public Builder managedIdentities(List<ApplicationUserAssignedIdentityArgs> managedIdentities) {
            return managedIdentities(Output.of(managedIdentities));
        }

        /**
         * @param managedIdentities List of user assigned identities for the application, each mapped to a friendly name.
         * 
         * @return builder
         * 
         */
        public Builder managedIdentities(ApplicationUserAssignedIdentityArgs... managedIdentities) {
            return managedIdentities(List.of(managedIdentities));
        }

        /**
         * @param maximumNodes The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
         * 
         * @return builder
         * 
         */
        public Builder maximumNodes(@Nullable Output<Double> maximumNodes) {
            $.maximumNodes = maximumNodes;
            return this;
        }

        /**
         * @param maximumNodes The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
         * 
         * @return builder
         * 
         */
        public Builder maximumNodes(Double maximumNodes) {
            return maximumNodes(Output.of(maximumNodes));
        }

        /**
         * @param metrics List of application capacity metric description.
         * 
         * @return builder
         * 
         */
        public Builder metrics(@Nullable Output<List<ApplicationMetricDescriptionArgs>> metrics) {
            $.metrics = metrics;
            return this;
        }

        /**
         * @param metrics List of application capacity metric description.
         * 
         * @return builder
         * 
         */
        public Builder metrics(List<ApplicationMetricDescriptionArgs> metrics) {
            return metrics(Output.of(metrics));
        }

        /**
         * @param metrics List of application capacity metric description.
         * 
         * @return builder
         * 
         */
        public Builder metrics(ApplicationMetricDescriptionArgs... metrics) {
            return metrics(List.of(metrics));
        }

        /**
         * @param minimumNodes The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
         * 
         * @return builder
         * 
         */
        public Builder minimumNodes(@Nullable Output<Double> minimumNodes) {
            $.minimumNodes = minimumNodes;
            return this;
        }

        /**
         * @param minimumNodes The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
         * 
         * @return builder
         * 
         */
        public Builder minimumNodes(Double minimumNodes) {
            return minimumNodes(Output.of(minimumNodes));
        }

        /**
         * @param parameters List of application parameters with overridden values from their default values specified in the application manifest.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters List of application parameters with overridden values from their default values specified in the application manifest.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param removeApplicationCapacity Remove the current application capacity settings.
         * 
         * @return builder
         * 
         */
        public Builder removeApplicationCapacity(@Nullable Output<Boolean> removeApplicationCapacity) {
            $.removeApplicationCapacity = removeApplicationCapacity;
            return this;
        }

        /**
         * @param removeApplicationCapacity Remove the current application capacity settings.
         * 
         * @return builder
         * 
         */
        public Builder removeApplicationCapacity(Boolean removeApplicationCapacity) {
            return removeApplicationCapacity(Output.of(removeApplicationCapacity));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Azure resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Azure resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param typeName The application type name as defined in the application manifest.
         * 
         * @return builder
         * 
         */
        public Builder typeName(@Nullable Output<String> typeName) {
            $.typeName = typeName;
            return this;
        }

        /**
         * @param typeName The application type name as defined in the application manifest.
         * 
         * @return builder
         * 
         */
        public Builder typeName(String typeName) {
            return typeName(Output.of(typeName));
        }

        /**
         * @param typeVersion The version of the application type as defined in the application manifest.
         * 
         * @return builder
         * 
         */
        public Builder typeVersion(@Nullable Output<String> typeVersion) {
            $.typeVersion = typeVersion;
            return this;
        }

        /**
         * @param typeVersion The version of the application type as defined in the application manifest.
         * 
         * @return builder
         * 
         */
        public Builder typeVersion(String typeVersion) {
            return typeVersion(Output.of(typeVersion));
        }

        /**
         * @param upgradePolicy Describes the policy for a monitored application upgrade.
         * 
         * @return builder
         * 
         */
        public Builder upgradePolicy(@Nullable Output<ApplicationUpgradePolicyArgs> upgradePolicy) {
            $.upgradePolicy = upgradePolicy;
            return this;
        }

        /**
         * @param upgradePolicy Describes the policy for a monitored application upgrade.
         * 
         * @return builder
         * 
         */
        public Builder upgradePolicy(ApplicationUpgradePolicyArgs upgradePolicy) {
            return upgradePolicy(Output.of(upgradePolicy));
        }

        public ApplicationArgs build() {
            $.clusterName = Objects.requireNonNull($.clusterName, "expected parameter 'clusterName' to be non-null");
            $.maximumNodes = Codegen.doubleProp("maximumNodes").output().arg($.maximumNodes).def(0e+00).getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
