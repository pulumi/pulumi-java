// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn;

import com.pulumi.azurenative.cdn.enums.AFDEndpointProtocols;
import com.pulumi.azurenative.cdn.enums.AfdQueryStringCachingBehavior;
import com.pulumi.azurenative.cdn.enums.EnabledState;
import com.pulumi.azurenative.cdn.enums.ForwardingProtocol;
import com.pulumi.azurenative.cdn.enums.HttpsRedirect;
import com.pulumi.azurenative.cdn.enums.LinkToDefaultDomain;
import com.pulumi.azurenative.cdn.inputs.CompressionSettingsArgs;
import com.pulumi.azurenative.cdn.inputs.ResourceReferenceArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteArgs Empty = new RouteArgs();

    /**
     * compression settings.
     * 
     */
    @Import(name="compressionSettings")
    private @Nullable Output<CompressionSettingsArgs> compressionSettings;

    public Optional<Output<CompressionSettingsArgs>> compressionSettings() {
        return Optional.ofNullable(this.compressionSettings);
    }

    /**
     * Domains referenced by this endpoint.
     * 
     */
    @Import(name="customDomains")
    private @Nullable Output<List<ResourceReferenceArgs>> customDomains;

    public Optional<Output<List<ResourceReferenceArgs>>> customDomains() {
        return Optional.ofNullable(this.customDomains);
    }

    /**
     * Whether to enable use of this rule. Permitted values are &#39;Enabled&#39; or &#39;Disabled&#39;
     * 
     */
    @Import(name="enabledState")
    private @Nullable Output<Either<String,EnabledState>> enabledState;

    public Optional<Output<Either<String,EnabledState>>> enabledState() {
        return Optional.ofNullable(this.enabledState);
    }

    /**
     * Name of the endpoint under the profile which is unique globally.
     * 
     */
    @Import(name="endpointName", required=true)
    private Output<String> endpointName;

    public Output<String> endpointName() {
        return this.endpointName;
    }

    /**
     * Protocol this rule will use when forwarding traffic to backends.
     * 
     */
    @Import(name="forwardingProtocol")
    private @Nullable Output<Either<String,ForwardingProtocol>> forwardingProtocol;

    public Optional<Output<Either<String,ForwardingProtocol>>> forwardingProtocol() {
        return Optional.ofNullable(this.forwardingProtocol);
    }

    /**
     * Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
     * 
     */
    @Import(name="httpsRedirect")
    private @Nullable Output<Either<String,HttpsRedirect>> httpsRedirect;

    public Optional<Output<Either<String,HttpsRedirect>>> httpsRedirect() {
        return Optional.ofNullable(this.httpsRedirect);
    }

    /**
     * whether this route will be linked to the default endpoint domain.
     * 
     */
    @Import(name="linkToDefaultDomain")
    private @Nullable Output<Either<String,LinkToDefaultDomain>> linkToDefaultDomain;

    public Optional<Output<Either<String,LinkToDefaultDomain>>> linkToDefaultDomain() {
        return Optional.ofNullable(this.linkToDefaultDomain);
    }

    /**
     * A reference to the origin group.
     * 
     */
    @Import(name="originGroup", required=true)
    private Output<ResourceReferenceArgs> originGroup;

    public Output<ResourceReferenceArgs> originGroup() {
        return this.originGroup;
    }

    /**
     * A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
     * 
     */
    @Import(name="originPath")
    private @Nullable Output<String> originPath;

    public Optional<Output<String>> originPath() {
        return Optional.ofNullable(this.originPath);
    }

    /**
     * The route patterns of the rule.
     * 
     */
    @Import(name="patternsToMatch")
    private @Nullable Output<List<String>> patternsToMatch;

    public Optional<Output<List<String>>> patternsToMatch() {
        return Optional.ofNullable(this.patternsToMatch);
    }

    /**
     * Name of the CDN profile which is unique within the resource group.
     * 
     */
    @Import(name="profileName", required=true)
    private Output<String> profileName;

    public Output<String> profileName() {
        return this.profileName;
    }

    /**
     * Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
     * 
     */
    @Import(name="queryStringCachingBehavior")
    private @Nullable Output<AfdQueryStringCachingBehavior> queryStringCachingBehavior;

    public Optional<Output<AfdQueryStringCachingBehavior>> queryStringCachingBehavior() {
        return Optional.ofNullable(this.queryStringCachingBehavior);
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the routing rule.
     * 
     */
    @Import(name="routeName")
    private @Nullable Output<String> routeName;

    public Optional<Output<String>> routeName() {
        return Optional.ofNullable(this.routeName);
    }

    /**
     * rule sets referenced by this endpoint.
     * 
     */
    @Import(name="ruleSets")
    private @Nullable Output<List<ResourceReferenceArgs>> ruleSets;

    public Optional<Output<List<ResourceReferenceArgs>>> ruleSets() {
        return Optional.ofNullable(this.ruleSets);
    }

    /**
     * List of supported protocols for this route.
     * 
     */
    @Import(name="supportedProtocols")
    private @Nullable Output<List<Either<String,AFDEndpointProtocols>>> supportedProtocols;

    public Optional<Output<List<Either<String,AFDEndpointProtocols>>>> supportedProtocols() {
        return Optional.ofNullable(this.supportedProtocols);
    }

    private RouteArgs() {}

    private RouteArgs(RouteArgs $) {
        this.compressionSettings = $.compressionSettings;
        this.customDomains = $.customDomains;
        this.enabledState = $.enabledState;
        this.endpointName = $.endpointName;
        this.forwardingProtocol = $.forwardingProtocol;
        this.httpsRedirect = $.httpsRedirect;
        this.linkToDefaultDomain = $.linkToDefaultDomain;
        this.originGroup = $.originGroup;
        this.originPath = $.originPath;
        this.patternsToMatch = $.patternsToMatch;
        this.profileName = $.profileName;
        this.queryStringCachingBehavior = $.queryStringCachingBehavior;
        this.resourceGroupName = $.resourceGroupName;
        this.routeName = $.routeName;
        this.ruleSets = $.ruleSets;
        this.supportedProtocols = $.supportedProtocols;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteArgs $;

        public Builder() {
            $ = new RouteArgs();
        }

        public Builder(RouteArgs defaults) {
            $ = new RouteArgs(Objects.requireNonNull(defaults));
        }

        public Builder compressionSettings(@Nullable Output<CompressionSettingsArgs> compressionSettings) {
            $.compressionSettings = compressionSettings;
            return this;
        }

        public Builder compressionSettings(CompressionSettingsArgs compressionSettings) {
            return compressionSettings(Output.of(compressionSettings));
        }

        public Builder customDomains(@Nullable Output<List<ResourceReferenceArgs>> customDomains) {
            $.customDomains = customDomains;
            return this;
        }

        public Builder customDomains(List<ResourceReferenceArgs> customDomains) {
            return customDomains(Output.of(customDomains));
        }

        public Builder customDomains(ResourceReferenceArgs... customDomains) {
            return customDomains(List.of(customDomains));
        }

        public Builder enabledState(@Nullable Output<Either<String,EnabledState>> enabledState) {
            $.enabledState = enabledState;
            return this;
        }

        public Builder enabledState(Either<String,EnabledState> enabledState) {
            return enabledState(Output.of(enabledState));
        }

        public Builder endpointName(Output<String> endpointName) {
            $.endpointName = endpointName;
            return this;
        }

        public Builder endpointName(String endpointName) {
            return endpointName(Output.of(endpointName));
        }

        public Builder forwardingProtocol(@Nullable Output<Either<String,ForwardingProtocol>> forwardingProtocol) {
            $.forwardingProtocol = forwardingProtocol;
            return this;
        }

        public Builder forwardingProtocol(Either<String,ForwardingProtocol> forwardingProtocol) {
            return forwardingProtocol(Output.of(forwardingProtocol));
        }

        public Builder httpsRedirect(@Nullable Output<Either<String,HttpsRedirect>> httpsRedirect) {
            $.httpsRedirect = httpsRedirect;
            return this;
        }

        public Builder httpsRedirect(Either<String,HttpsRedirect> httpsRedirect) {
            return httpsRedirect(Output.of(httpsRedirect));
        }

        public Builder linkToDefaultDomain(@Nullable Output<Either<String,LinkToDefaultDomain>> linkToDefaultDomain) {
            $.linkToDefaultDomain = linkToDefaultDomain;
            return this;
        }

        public Builder linkToDefaultDomain(Either<String,LinkToDefaultDomain> linkToDefaultDomain) {
            return linkToDefaultDomain(Output.of(linkToDefaultDomain));
        }

        public Builder originGroup(Output<ResourceReferenceArgs> originGroup) {
            $.originGroup = originGroup;
            return this;
        }

        public Builder originGroup(ResourceReferenceArgs originGroup) {
            return originGroup(Output.of(originGroup));
        }

        public Builder originPath(@Nullable Output<String> originPath) {
            $.originPath = originPath;
            return this;
        }

        public Builder originPath(String originPath) {
            return originPath(Output.of(originPath));
        }

        public Builder patternsToMatch(@Nullable Output<List<String>> patternsToMatch) {
            $.patternsToMatch = patternsToMatch;
            return this;
        }

        public Builder patternsToMatch(List<String> patternsToMatch) {
            return patternsToMatch(Output.of(patternsToMatch));
        }

        public Builder patternsToMatch(String... patternsToMatch) {
            return patternsToMatch(List.of(patternsToMatch));
        }

        public Builder profileName(Output<String> profileName) {
            $.profileName = profileName;
            return this;
        }

        public Builder profileName(String profileName) {
            return profileName(Output.of(profileName));
        }

        public Builder queryStringCachingBehavior(@Nullable Output<AfdQueryStringCachingBehavior> queryStringCachingBehavior) {
            $.queryStringCachingBehavior = queryStringCachingBehavior;
            return this;
        }

        public Builder queryStringCachingBehavior(AfdQueryStringCachingBehavior queryStringCachingBehavior) {
            return queryStringCachingBehavior(Output.of(queryStringCachingBehavior));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder routeName(@Nullable Output<String> routeName) {
            $.routeName = routeName;
            return this;
        }

        public Builder routeName(String routeName) {
            return routeName(Output.of(routeName));
        }

        public Builder ruleSets(@Nullable Output<List<ResourceReferenceArgs>> ruleSets) {
            $.ruleSets = ruleSets;
            return this;
        }

        public Builder ruleSets(List<ResourceReferenceArgs> ruleSets) {
            return ruleSets(Output.of(ruleSets));
        }

        public Builder ruleSets(ResourceReferenceArgs... ruleSets) {
            return ruleSets(List.of(ruleSets));
        }

        public Builder supportedProtocols(@Nullable Output<List<Either<String,AFDEndpointProtocols>>> supportedProtocols) {
            $.supportedProtocols = supportedProtocols;
            return this;
        }

        public Builder supportedProtocols(List<Either<String,AFDEndpointProtocols>> supportedProtocols) {
            return supportedProtocols(Output.of(supportedProtocols));
        }

        public Builder supportedProtocols(Either<String,AFDEndpointProtocols>... supportedProtocols) {
            return supportedProtocols(List.of(supportedProtocols));
        }

        public RouteArgs build() {
            $.endpointName = Objects.requireNonNull($.endpointName, "expected parameter 'endpointName' to be non-null");
            $.originGroup = Objects.requireNonNull($.originGroup, "expected parameter 'originGroup' to be non-null");
            $.profileName = Objects.requireNonNull($.profileName, "expected parameter 'profileName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
