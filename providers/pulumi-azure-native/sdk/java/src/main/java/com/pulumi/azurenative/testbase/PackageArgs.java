// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.testbase;

import com.pulumi.azurenative.testbase.inputs.TargetOSInfoArgs;
import com.pulumi.azurenative.testbase.inputs.TestArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PackageArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackageArgs Empty = new PackageArgs();

    /**
     * Application name
     * 
     */
    @Import(name="applicationName", required=true)
    private Output<String> applicationName;

    public Output<String> applicationName() {
        return this.applicationName;
    }

    /**
     * The file path of the package.
     * 
     */
    @Import(name="blobPath", required=true)
    private Output<String> blobPath;

    public Output<String> blobPath() {
        return this.blobPath;
    }

    /**
     * The flighting ring for feature update.
     * 
     */
    @Import(name="flightingRing", required=true)
    private Output<String> flightingRing;

    public Output<String> flightingRing() {
        return this.flightingRing;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the Test Base Package.
     * 
     */
    @Import(name="packageName")
    private @Nullable Output<String> packageName;

    public Optional<Output<String>> packageName() {
        return Optional.ofNullable(this.packageName);
    }

    /**
     * The name of the resource group that contains the resource.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies the target OSs of specific OS Update types.
     * 
     */
    @Import(name="targetOSList", required=true)
    private Output<List<TargetOSInfoArgs>> targetOSList;

    public Output<List<TargetOSInfoArgs>> targetOSList() {
        return this.targetOSList;
    }

    /**
     * The resource name of the Test Base Account.
     * 
     */
    @Import(name="testBaseAccountName", required=true)
    private Output<String> testBaseAccountName;

    public Output<String> testBaseAccountName() {
        return this.testBaseAccountName;
    }

    /**
     * The detailed test information.
     * 
     */
    @Import(name="tests", required=true)
    private Output<List<TestArgs>> tests;

    public Output<List<TestArgs>> tests() {
        return this.tests;
    }

    /**
     * Application version
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    public Output<String> version() {
        return this.version;
    }

    private PackageArgs() {}

    private PackageArgs(PackageArgs $) {
        this.applicationName = $.applicationName;
        this.blobPath = $.blobPath;
        this.flightingRing = $.flightingRing;
        this.location = $.location;
        this.packageName = $.packageName;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.targetOSList = $.targetOSList;
        this.testBaseAccountName = $.testBaseAccountName;
        this.tests = $.tests;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageArgs $;

        public Builder() {
            $ = new PackageArgs();
        }

        public Builder(PackageArgs defaults) {
            $ = new PackageArgs(Objects.requireNonNull(defaults));
        }

        public Builder applicationName(Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        public Builder blobPath(Output<String> blobPath) {
            $.blobPath = blobPath;
            return this;
        }

        public Builder blobPath(String blobPath) {
            return blobPath(Output.of(blobPath));
        }

        public Builder flightingRing(Output<String> flightingRing) {
            $.flightingRing = flightingRing;
            return this;
        }

        public Builder flightingRing(String flightingRing) {
            return flightingRing(Output.of(flightingRing));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder packageName(@Nullable Output<String> packageName) {
            $.packageName = packageName;
            return this;
        }

        public Builder packageName(String packageName) {
            return packageName(Output.of(packageName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder targetOSList(Output<List<TargetOSInfoArgs>> targetOSList) {
            $.targetOSList = targetOSList;
            return this;
        }

        public Builder targetOSList(List<TargetOSInfoArgs> targetOSList) {
            return targetOSList(Output.of(targetOSList));
        }

        public Builder targetOSList(TargetOSInfoArgs... targetOSList) {
            return targetOSList(List.of(targetOSList));
        }

        public Builder testBaseAccountName(Output<String> testBaseAccountName) {
            $.testBaseAccountName = testBaseAccountName;
            return this;
        }

        public Builder testBaseAccountName(String testBaseAccountName) {
            return testBaseAccountName(Output.of(testBaseAccountName));
        }

        public Builder tests(Output<List<TestArgs>> tests) {
            $.tests = tests;
            return this;
        }

        public Builder tests(List<TestArgs> tests) {
            return tests(Output.of(tests));
        }

        public Builder tests(TestArgs... tests) {
            return tests(List.of(tests));
        }

        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public PackageArgs build() {
            $.applicationName = Objects.requireNonNull($.applicationName, "expected parameter 'applicationName' to be non-null");
            $.blobPath = Objects.requireNonNull($.blobPath, "expected parameter 'blobPath' to be non-null");
            $.flightingRing = Objects.requireNonNull($.flightingRing, "expected parameter 'flightingRing' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.targetOSList = Objects.requireNonNull($.targetOSList, "expected parameter 'targetOSList' to be non-null");
            $.testBaseAccountName = Objects.requireNonNull($.testBaseAccountName, "expected parameter 'testBaseAccountName' to be non-null");
            $.tests = Objects.requireNonNull($.tests, "expected parameter 'tests' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
