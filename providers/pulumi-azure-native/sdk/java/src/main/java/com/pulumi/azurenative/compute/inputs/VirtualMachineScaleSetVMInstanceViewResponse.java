// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.BootDiagnosticsInstanceViewResponse;
import com.pulumi.azurenative.compute.inputs.DiskInstanceViewResponse;
import com.pulumi.azurenative.compute.inputs.InstanceViewStatusResponse;
import com.pulumi.azurenative.compute.inputs.MaintenanceRedeployStatusResponse;
import com.pulumi.azurenative.compute.inputs.VirtualMachineAgentInstanceViewResponse;
import com.pulumi.azurenative.compute.inputs.VirtualMachineExtensionInstanceViewResponse;
import com.pulumi.azurenative.compute.inputs.VirtualMachineHealthStatusResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The instance view of a virtual machine scale set VM.
 * 
 */
public final class VirtualMachineScaleSetVMInstanceViewResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualMachineScaleSetVMInstanceViewResponse Empty = new VirtualMachineScaleSetVMInstanceViewResponse();

    /**
     * Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
     * 
     */
    @Import(name="assignedHost", required=true)
    private String assignedHost;

    public String assignedHost() {
        return this.assignedHost;
    }

    /**
     * Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. &lt;br&gt;&lt;br&gt; You can easily view the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you to see a screenshot of the VM from the hypervisor.
     * 
     */
    @Import(name="bootDiagnostics")
    private @Nullable BootDiagnosticsInstanceViewResponse bootDiagnostics;

    public Optional<BootDiagnosticsInstanceViewResponse> bootDiagnostics() {
        return Optional.ofNullable(this.bootDiagnostics);
    }

    /**
     * The disks information.
     * 
     */
    @Import(name="disks")
    private @Nullable List<DiskInstanceViewResponse> disks;

    public Optional<List<DiskInstanceViewResponse>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * The extensions information.
     * 
     */
    @Import(name="extensions")
    private @Nullable List<VirtualMachineExtensionInstanceViewResponse> extensions;

    public Optional<List<VirtualMachineExtensionInstanceViewResponse>> extensions() {
        return Optional.ofNullable(this.extensions);
    }

    /**
     * The Maintenance Operation status on the virtual machine.
     * 
     */
    @Import(name="maintenanceRedeployStatus")
    private @Nullable MaintenanceRedeployStatusResponse maintenanceRedeployStatus;

    public Optional<MaintenanceRedeployStatusResponse> maintenanceRedeployStatus() {
        return Optional.ofNullable(this.maintenanceRedeployStatus);
    }

    /**
     * The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
     * 
     */
    @Import(name="placementGroupId")
    private @Nullable String placementGroupId;

    public Optional<String> placementGroupId() {
        return Optional.ofNullable(this.placementGroupId);
    }

    /**
     * The Fault Domain count.
     * 
     */
    @Import(name="platformFaultDomain")
    private @Nullable Integer platformFaultDomain;

    public Optional<Integer> platformFaultDomain() {
        return Optional.ofNullable(this.platformFaultDomain);
    }

    /**
     * The Update Domain count.
     * 
     */
    @Import(name="platformUpdateDomain")
    private @Nullable Integer platformUpdateDomain;

    public Optional<Integer> platformUpdateDomain() {
        return Optional.ofNullable(this.platformUpdateDomain);
    }

    /**
     * The Remote desktop certificate thumbprint.
     * 
     */
    @Import(name="rdpThumbPrint")
    private @Nullable String rdpThumbPrint;

    public Optional<String> rdpThumbPrint() {
        return Optional.ofNullable(this.rdpThumbPrint);
    }

    /**
     * The resource status information.
     * 
     */
    @Import(name="statuses")
    private @Nullable List<InstanceViewStatusResponse> statuses;

    public Optional<List<InstanceViewStatusResponse>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * The VM Agent running on the virtual machine.
     * 
     */
    @Import(name="vmAgent")
    private @Nullable VirtualMachineAgentInstanceViewResponse vmAgent;

    public Optional<VirtualMachineAgentInstanceViewResponse> vmAgent() {
        return Optional.ofNullable(this.vmAgent);
    }

    /**
     * The health status for the VM.
     * 
     */
    @Import(name="vmHealth", required=true)
    private VirtualMachineHealthStatusResponse vmHealth;

    public VirtualMachineHealthStatusResponse vmHealth() {
        return this.vmHealth;
    }

    private VirtualMachineScaleSetVMInstanceViewResponse() {}

    private VirtualMachineScaleSetVMInstanceViewResponse(VirtualMachineScaleSetVMInstanceViewResponse $) {
        this.assignedHost = $.assignedHost;
        this.bootDiagnostics = $.bootDiagnostics;
        this.disks = $.disks;
        this.extensions = $.extensions;
        this.maintenanceRedeployStatus = $.maintenanceRedeployStatus;
        this.placementGroupId = $.placementGroupId;
        this.platformFaultDomain = $.platformFaultDomain;
        this.platformUpdateDomain = $.platformUpdateDomain;
        this.rdpThumbPrint = $.rdpThumbPrint;
        this.statuses = $.statuses;
        this.vmAgent = $.vmAgent;
        this.vmHealth = $.vmHealth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineScaleSetVMInstanceViewResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineScaleSetVMInstanceViewResponse $;

        public Builder() {
            $ = new VirtualMachineScaleSetVMInstanceViewResponse();
        }

        public Builder(VirtualMachineScaleSetVMInstanceViewResponse defaults) {
            $ = new VirtualMachineScaleSetVMInstanceViewResponse(Objects.requireNonNull(defaults));
        }

        public Builder assignedHost(String assignedHost) {
            $.assignedHost = assignedHost;
            return this;
        }

        public Builder bootDiagnostics(@Nullable BootDiagnosticsInstanceViewResponse bootDiagnostics) {
            $.bootDiagnostics = bootDiagnostics;
            return this;
        }

        public Builder disks(@Nullable List<DiskInstanceViewResponse> disks) {
            $.disks = disks;
            return this;
        }

        public Builder disks(DiskInstanceViewResponse... disks) {
            return disks(List.of(disks));
        }

        public Builder extensions(@Nullable List<VirtualMachineExtensionInstanceViewResponse> extensions) {
            $.extensions = extensions;
            return this;
        }

        public Builder extensions(VirtualMachineExtensionInstanceViewResponse... extensions) {
            return extensions(List.of(extensions));
        }

        public Builder maintenanceRedeployStatus(@Nullable MaintenanceRedeployStatusResponse maintenanceRedeployStatus) {
            $.maintenanceRedeployStatus = maintenanceRedeployStatus;
            return this;
        }

        public Builder placementGroupId(@Nullable String placementGroupId) {
            $.placementGroupId = placementGroupId;
            return this;
        }

        public Builder platformFaultDomain(@Nullable Integer platformFaultDomain) {
            $.platformFaultDomain = platformFaultDomain;
            return this;
        }

        public Builder platformUpdateDomain(@Nullable Integer platformUpdateDomain) {
            $.platformUpdateDomain = platformUpdateDomain;
            return this;
        }

        public Builder rdpThumbPrint(@Nullable String rdpThumbPrint) {
            $.rdpThumbPrint = rdpThumbPrint;
            return this;
        }

        public Builder statuses(@Nullable List<InstanceViewStatusResponse> statuses) {
            $.statuses = statuses;
            return this;
        }

        public Builder statuses(InstanceViewStatusResponse... statuses) {
            return statuses(List.of(statuses));
        }

        public Builder vmAgent(@Nullable VirtualMachineAgentInstanceViewResponse vmAgent) {
            $.vmAgent = vmAgent;
            return this;
        }

        public Builder vmHealth(VirtualMachineHealthStatusResponse vmHealth) {
            $.vmHealth = vmHealth;
            return this;
        }

        public VirtualMachineScaleSetVMInstanceViewResponse build() {
            $.assignedHost = Objects.requireNonNull($.assignedHost, "expected parameter 'assignedHost' to be non-null");
            $.vmHealth = Objects.requireNonNull($.vmHealth, "expected parameter 'vmHealth' to be non-null");
            return $;
        }
    }

}
