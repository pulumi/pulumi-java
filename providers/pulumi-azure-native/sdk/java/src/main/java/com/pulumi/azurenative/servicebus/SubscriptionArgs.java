// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicebus;

import com.pulumi.azurenative.servicebus.enums.EntityStatus;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionArgs Empty = new SubscriptionArgs();

    /**
     * ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
     * 
     */
    @Import(name="autoDeleteOnIdle")
    private @Nullable Output<String> autoDeleteOnIdle;

    public Optional<Output<String>> autoDeleteOnIdle() {
        return Optional.ofNullable(this.autoDeleteOnIdle);
    }

    /**
     * Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
     * 
     */
    @Import(name="deadLetteringOnFilterEvaluationExceptions")
    private @Nullable Output<Boolean> deadLetteringOnFilterEvaluationExceptions;

    public Optional<Output<Boolean>> deadLetteringOnFilterEvaluationExceptions() {
        return Optional.ofNullable(this.deadLetteringOnFilterEvaluationExceptions);
    }

    /**
     * Value that indicates whether a subscription has dead letter support when a message expires.
     * 
     */
    @Import(name="deadLetteringOnMessageExpiration")
    private @Nullable Output<Boolean> deadLetteringOnMessageExpiration;

    public Optional<Output<Boolean>> deadLetteringOnMessageExpiration() {
        return Optional.ofNullable(this.deadLetteringOnMessageExpiration);
    }

    /**
     * ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
     */
    @Import(name="defaultMessageTimeToLive")
    private @Nullable Output<String> defaultMessageTimeToLive;

    public Optional<Output<String>> defaultMessageTimeToLive() {
        return Optional.ofNullable(this.defaultMessageTimeToLive);
    }

    /**
     * ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
     * 
     */
    @Import(name="duplicateDetectionHistoryTimeWindow")
    private @Nullable Output<String> duplicateDetectionHistoryTimeWindow;

    public Optional<Output<String>> duplicateDetectionHistoryTimeWindow() {
        return Optional.ofNullable(this.duplicateDetectionHistoryTimeWindow);
    }

    /**
     * Value that indicates whether server-side batched operations are enabled.
     * 
     */
    @Import(name="enableBatchedOperations")
    private @Nullable Output<Boolean> enableBatchedOperations;

    public Optional<Output<Boolean>> enableBatchedOperations() {
        return Optional.ofNullable(this.enableBatchedOperations);
    }

    /**
     * Queue/Topic name to forward the Dead Letter message
     * 
     */
    @Import(name="forwardDeadLetteredMessagesTo")
    private @Nullable Output<String> forwardDeadLetteredMessagesTo;

    public Optional<Output<String>> forwardDeadLetteredMessagesTo() {
        return Optional.ofNullable(this.forwardDeadLetteredMessagesTo);
    }

    /**
     * Queue/Topic name to forward the messages
     * 
     */
    @Import(name="forwardTo")
    private @Nullable Output<String> forwardTo;

    public Optional<Output<String>> forwardTo() {
        return Optional.ofNullable(this.forwardTo);
    }

    /**
     * ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
     * 
     */
    @Import(name="lockDuration")
    private @Nullable Output<String> lockDuration;

    public Optional<Output<String>> lockDuration() {
        return Optional.ofNullable(this.lockDuration);
    }

    /**
     * Number of maximum deliveries.
     * 
     */
    @Import(name="maxDeliveryCount")
    private @Nullable Output<Integer> maxDeliveryCount;

    public Optional<Output<Integer>> maxDeliveryCount() {
        return Optional.ofNullable(this.maxDeliveryCount);
    }

    /**
     * The namespace name
     * 
     */
    @Import(name="namespaceName", required=true)
    private Output<String> namespaceName;

    public Output<String> namespaceName() {
        return this.namespaceName;
    }

    /**
     * Value indicating if a subscription supports the concept of sessions.
     * 
     */
    @Import(name="requiresSession")
    private @Nullable Output<Boolean> requiresSession;

    public Optional<Output<Boolean>> requiresSession() {
        return Optional.ofNullable(this.requiresSession);
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Enumerates the possible values for the status of a messaging entity.
     * 
     */
    @Import(name="status")
    private @Nullable Output<EntityStatus> status;

    public Optional<Output<EntityStatus>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The subscription name.
     * 
     */
    @Import(name="subscriptionName")
    private @Nullable Output<String> subscriptionName;

    public Optional<Output<String>> subscriptionName() {
        return Optional.ofNullable(this.subscriptionName);
    }

    /**
     * The topic name.
     * 
     */
    @Import(name="topicName", required=true)
    private Output<String> topicName;

    public Output<String> topicName() {
        return this.topicName;
    }

    private SubscriptionArgs() {}

    private SubscriptionArgs(SubscriptionArgs $) {
        this.autoDeleteOnIdle = $.autoDeleteOnIdle;
        this.deadLetteringOnFilterEvaluationExceptions = $.deadLetteringOnFilterEvaluationExceptions;
        this.deadLetteringOnMessageExpiration = $.deadLetteringOnMessageExpiration;
        this.defaultMessageTimeToLive = $.defaultMessageTimeToLive;
        this.duplicateDetectionHistoryTimeWindow = $.duplicateDetectionHistoryTimeWindow;
        this.enableBatchedOperations = $.enableBatchedOperations;
        this.forwardDeadLetteredMessagesTo = $.forwardDeadLetteredMessagesTo;
        this.forwardTo = $.forwardTo;
        this.lockDuration = $.lockDuration;
        this.maxDeliveryCount = $.maxDeliveryCount;
        this.namespaceName = $.namespaceName;
        this.requiresSession = $.requiresSession;
        this.resourceGroupName = $.resourceGroupName;
        this.status = $.status;
        this.subscriptionName = $.subscriptionName;
        this.topicName = $.topicName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionArgs $;

        public Builder() {
            $ = new SubscriptionArgs();
        }

        public Builder(SubscriptionArgs defaults) {
            $ = new SubscriptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoDeleteOnIdle(@Nullable Output<String> autoDeleteOnIdle) {
            $.autoDeleteOnIdle = autoDeleteOnIdle;
            return this;
        }

        public Builder autoDeleteOnIdle(String autoDeleteOnIdle) {
            return autoDeleteOnIdle(Output.of(autoDeleteOnIdle));
        }

        public Builder deadLetteringOnFilterEvaluationExceptions(@Nullable Output<Boolean> deadLetteringOnFilterEvaluationExceptions) {
            $.deadLetteringOnFilterEvaluationExceptions = deadLetteringOnFilterEvaluationExceptions;
            return this;
        }

        public Builder deadLetteringOnFilterEvaluationExceptions(Boolean deadLetteringOnFilterEvaluationExceptions) {
            return deadLetteringOnFilterEvaluationExceptions(Output.of(deadLetteringOnFilterEvaluationExceptions));
        }

        public Builder deadLetteringOnMessageExpiration(@Nullable Output<Boolean> deadLetteringOnMessageExpiration) {
            $.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
            return this;
        }

        public Builder deadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration) {
            return deadLetteringOnMessageExpiration(Output.of(deadLetteringOnMessageExpiration));
        }

        public Builder defaultMessageTimeToLive(@Nullable Output<String> defaultMessageTimeToLive) {
            $.defaultMessageTimeToLive = defaultMessageTimeToLive;
            return this;
        }

        public Builder defaultMessageTimeToLive(String defaultMessageTimeToLive) {
            return defaultMessageTimeToLive(Output.of(defaultMessageTimeToLive));
        }

        public Builder duplicateDetectionHistoryTimeWindow(@Nullable Output<String> duplicateDetectionHistoryTimeWindow) {
            $.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            return this;
        }

        public Builder duplicateDetectionHistoryTimeWindow(String duplicateDetectionHistoryTimeWindow) {
            return duplicateDetectionHistoryTimeWindow(Output.of(duplicateDetectionHistoryTimeWindow));
        }

        public Builder enableBatchedOperations(@Nullable Output<Boolean> enableBatchedOperations) {
            $.enableBatchedOperations = enableBatchedOperations;
            return this;
        }

        public Builder enableBatchedOperations(Boolean enableBatchedOperations) {
            return enableBatchedOperations(Output.of(enableBatchedOperations));
        }

        public Builder forwardDeadLetteredMessagesTo(@Nullable Output<String> forwardDeadLetteredMessagesTo) {
            $.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
            return this;
        }

        public Builder forwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo) {
            return forwardDeadLetteredMessagesTo(Output.of(forwardDeadLetteredMessagesTo));
        }

        public Builder forwardTo(@Nullable Output<String> forwardTo) {
            $.forwardTo = forwardTo;
            return this;
        }

        public Builder forwardTo(String forwardTo) {
            return forwardTo(Output.of(forwardTo));
        }

        public Builder lockDuration(@Nullable Output<String> lockDuration) {
            $.lockDuration = lockDuration;
            return this;
        }

        public Builder lockDuration(String lockDuration) {
            return lockDuration(Output.of(lockDuration));
        }

        public Builder maxDeliveryCount(@Nullable Output<Integer> maxDeliveryCount) {
            $.maxDeliveryCount = maxDeliveryCount;
            return this;
        }

        public Builder maxDeliveryCount(Integer maxDeliveryCount) {
            return maxDeliveryCount(Output.of(maxDeliveryCount));
        }

        public Builder namespaceName(Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        public Builder requiresSession(@Nullable Output<Boolean> requiresSession) {
            $.requiresSession = requiresSession;
            return this;
        }

        public Builder requiresSession(Boolean requiresSession) {
            return requiresSession(Output.of(requiresSession));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder status(@Nullable Output<EntityStatus> status) {
            $.status = status;
            return this;
        }

        public Builder status(EntityStatus status) {
            return status(Output.of(status));
        }

        public Builder subscriptionName(@Nullable Output<String> subscriptionName) {
            $.subscriptionName = subscriptionName;
            return this;
        }

        public Builder subscriptionName(String subscriptionName) {
            return subscriptionName(Output.of(subscriptionName));
        }

        public Builder topicName(Output<String> topicName) {
            $.topicName = topicName;
            return this;
        }

        public Builder topicName(String topicName) {
            return topicName(Output.of(topicName));
        }

        public SubscriptionArgs build() {
            $.namespaceName = Objects.requireNonNull($.namespaceName, "expected parameter 'namespaceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.topicName = Objects.requireNonNull($.topicName, "expected parameter 'topicName' to be non-null");
            return $;
        }
    }

}
