// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.LabelClassResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a category of labels in a labeling job.
 * 
 */
public final class LabelCategoryResponse extends com.pulumi.resources.InvokeArgs {

    public static final LabelCategoryResponse Empty = new LabelCategoryResponse();

    /**
     * Indicates whether it is allowed to select multiple classes in this category.
     * 
     */
    @Import(name="allowMultiSelect")
    private @Nullable Boolean allowMultiSelect;

    /**
     * @return Indicates whether it is allowed to select multiple classes in this category.
     * 
     */
    public Optional<Boolean> allowMultiSelect() {
        return Optional.ofNullable(this.allowMultiSelect);
    }

    /**
     * Dictionary of label classes in this category.
     * 
     */
    @Import(name="classes", required=true)
    private Map<String,LabelClassResponse> classes;

    /**
     * @return Dictionary of label classes in this category.
     * 
     */
    public Map<String,LabelClassResponse> classes() {
        return this.classes;
    }

    /**
     * Display name of the label category.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return Display name of the label category.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    private LabelCategoryResponse() {}

    private LabelCategoryResponse(LabelCategoryResponse $) {
        this.allowMultiSelect = $.allowMultiSelect;
        this.classes = $.classes;
        this.displayName = $.displayName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LabelCategoryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LabelCategoryResponse $;

        public Builder() {
            $ = new LabelCategoryResponse();
        }

        public Builder(LabelCategoryResponse defaults) {
            $ = new LabelCategoryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowMultiSelect Indicates whether it is allowed to select multiple classes in this category.
         * 
         * @return builder
         * 
         */
        public Builder allowMultiSelect(@Nullable Boolean allowMultiSelect) {
            $.allowMultiSelect = allowMultiSelect;
            return this;
        }

        /**
         * @param classes Dictionary of label classes in this category.
         * 
         * @return builder
         * 
         */
        public Builder classes(Map<String,LabelClassResponse> classes) {
            $.classes = classes;
            return this;
        }

        /**
         * @param displayName Display name of the label category.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public LabelCategoryResponse build() {
            $.classes = Objects.requireNonNull($.classes, "expected parameter 'classes' to be non-null");
            return $;
        }
    }

}
