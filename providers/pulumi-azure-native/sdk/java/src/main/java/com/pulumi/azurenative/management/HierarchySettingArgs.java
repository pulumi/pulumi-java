// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.management;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HierarchySettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final HierarchySettingArgs Empty = new HierarchySettingArgs();

    /**
     * Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup
     * 
     */
    @Import(name="defaultManagementGroup")
      private final @Nullable Output<String> defaultManagementGroup;

    public Output<String> defaultManagementGroup() {
        return this.defaultManagementGroup == null ? Codegen.empty() : this.defaultManagementGroup;
    }

    /**
     * Management Group ID.
     * 
     */
    @Import(name="groupId", required=true)
      private final Output<String> groupId;

    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access.
     * 
     */
    @Import(name="requireAuthorizationForGroupCreation")
      private final @Nullable Output<Boolean> requireAuthorizationForGroupCreation;

    public Output<Boolean> requireAuthorizationForGroupCreation() {
        return this.requireAuthorizationForGroupCreation == null ? Codegen.empty() : this.requireAuthorizationForGroupCreation;
    }

    public HierarchySettingArgs(
        @Nullable Output<String> defaultManagementGroup,
        Output<String> groupId,
        @Nullable Output<Boolean> requireAuthorizationForGroupCreation) {
        this.defaultManagementGroup = defaultManagementGroup;
        this.groupId = Objects.requireNonNull(groupId, "expected parameter 'groupId' to be non-null");
        this.requireAuthorizationForGroupCreation = requireAuthorizationForGroupCreation;
    }

    private HierarchySettingArgs() {
        this.defaultManagementGroup = Codegen.empty();
        this.groupId = Codegen.empty();
        this.requireAuthorizationForGroupCreation = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HierarchySettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> defaultManagementGroup;
        private Output<String> groupId;
        private @Nullable Output<Boolean> requireAuthorizationForGroupCreation;

        public Builder() {
    	      // Empty
        }

        public Builder(HierarchySettingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultManagementGroup = defaults.defaultManagementGroup;
    	      this.groupId = defaults.groupId;
    	      this.requireAuthorizationForGroupCreation = defaults.requireAuthorizationForGroupCreation;
        }

        public Builder defaultManagementGroup(@Nullable Output<String> defaultManagementGroup) {
            this.defaultManagementGroup = defaultManagementGroup;
            return this;
        }
        public Builder defaultManagementGroup(@Nullable String defaultManagementGroup) {
            this.defaultManagementGroup = Codegen.ofNullable(defaultManagementGroup);
            return this;
        }
        public Builder groupId(Output<String> groupId) {
            this.groupId = Objects.requireNonNull(groupId);
            return this;
        }
        public Builder groupId(String groupId) {
            this.groupId = Output.of(Objects.requireNonNull(groupId));
            return this;
        }
        public Builder requireAuthorizationForGroupCreation(@Nullable Output<Boolean> requireAuthorizationForGroupCreation) {
            this.requireAuthorizationForGroupCreation = requireAuthorizationForGroupCreation;
            return this;
        }
        public Builder requireAuthorizationForGroupCreation(@Nullable Boolean requireAuthorizationForGroupCreation) {
            this.requireAuthorizationForGroupCreation = Codegen.ofNullable(requireAuthorizationForGroupCreation);
            return this;
        }        public HierarchySettingArgs build() {
            return new HierarchySettingArgs(defaultManagementGroup, groupId, requireAuthorizationForGroupCreation);
        }
    }
}
