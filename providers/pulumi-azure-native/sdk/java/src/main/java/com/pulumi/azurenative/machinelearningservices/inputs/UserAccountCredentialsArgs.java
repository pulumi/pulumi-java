// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Settings for user account that gets created on each on the nodes of a compute.
 * 
 */
public final class UserAccountCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserAccountCredentialsArgs Empty = new UserAccountCredentialsArgs();

    /**
     * Name of the administrator user account which can be used to SSH to nodes.
     * 
     */
    @Import(name="adminUserName", required=true)
    private Output<String> adminUserName;

    /**
     * @return Name of the administrator user account which can be used to SSH to nodes.
     * 
     */
    public Output<String> adminUserName() {
        return this.adminUserName;
    }

    /**
     * Password of the administrator user account.
     * 
     */
    @Import(name="adminUserPassword")
    private @Nullable Output<String> adminUserPassword;

    /**
     * @return Password of the administrator user account.
     * 
     */
    public Optional<Output<String>> adminUserPassword() {
        return Optional.ofNullable(this.adminUserPassword);
    }

    /**
     * SSH public key of the administrator user account.
     * 
     */
    @Import(name="adminUserSshPublicKey")
    private @Nullable Output<String> adminUserSshPublicKey;

    /**
     * @return SSH public key of the administrator user account.
     * 
     */
    public Optional<Output<String>> adminUserSshPublicKey() {
        return Optional.ofNullable(this.adminUserSshPublicKey);
    }

    private UserAccountCredentialsArgs() {}

    private UserAccountCredentialsArgs(UserAccountCredentialsArgs $) {
        this.adminUserName = $.adminUserName;
        this.adminUserPassword = $.adminUserPassword;
        this.adminUserSshPublicKey = $.adminUserSshPublicKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserAccountCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserAccountCredentialsArgs $;

        public Builder() {
            $ = new UserAccountCredentialsArgs();
        }

        public Builder(UserAccountCredentialsArgs defaults) {
            $ = new UserAccountCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminUserName Name of the administrator user account which can be used to SSH to nodes.
         * 
         * @return builder
         * 
         */
        public Builder adminUserName(Output<String> adminUserName) {
            $.adminUserName = adminUserName;
            return this;
        }

        /**
         * @param adminUserName Name of the administrator user account which can be used to SSH to nodes.
         * 
         * @return builder
         * 
         */
        public Builder adminUserName(String adminUserName) {
            return adminUserName(Output.of(adminUserName));
        }

        /**
         * @param adminUserPassword Password of the administrator user account.
         * 
         * @return builder
         * 
         */
        public Builder adminUserPassword(@Nullable Output<String> adminUserPassword) {
            $.adminUserPassword = adminUserPassword;
            return this;
        }

        /**
         * @param adminUserPassword Password of the administrator user account.
         * 
         * @return builder
         * 
         */
        public Builder adminUserPassword(String adminUserPassword) {
            return adminUserPassword(Output.of(adminUserPassword));
        }

        /**
         * @param adminUserSshPublicKey SSH public key of the administrator user account.
         * 
         * @return builder
         * 
         */
        public Builder adminUserSshPublicKey(@Nullable Output<String> adminUserSshPublicKey) {
            $.adminUserSshPublicKey = adminUserSshPublicKey;
            return this;
        }

        /**
         * @param adminUserSshPublicKey SSH public key of the administrator user account.
         * 
         * @return builder
         * 
         */
        public Builder adminUserSshPublicKey(String adminUserSshPublicKey) {
            return adminUserSshPublicKey(Output.of(adminUserSshPublicKey));
        }

        public UserAccountCredentialsArgs build() {
            $.adminUserName = Objects.requireNonNull($.adminUserName, "expected parameter 'adminUserName' to be non-null");
            return $;
        }
    }

}
