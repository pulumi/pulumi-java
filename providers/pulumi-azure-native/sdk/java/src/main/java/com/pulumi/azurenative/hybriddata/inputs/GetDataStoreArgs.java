// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybriddata.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetDataStoreArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDataStoreArgs Empty = new GetDataStoreArgs();

    /**
     * The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * 
     */
    @Import(name="dataManagerName", required=true)
    private Output<String> dataManagerName;

    /**
     * @return The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * 
     */
    public Output<String> dataManagerName() {
        return this.dataManagerName;
    }

    /**
     * The data store/repository name queried.
     * 
     */
    @Import(name="dataStoreName", required=true)
    private Output<String> dataStoreName;

    /**
     * @return The data store/repository name queried.
     * 
     */
    public Output<String> dataStoreName() {
        return this.dataStoreName;
    }

    /**
     * The Resource Group Name
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The Resource Group Name
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private GetDataStoreArgs() {}

    private GetDataStoreArgs(GetDataStoreArgs $) {
        this.dataManagerName = $.dataManagerName;
        this.dataStoreName = $.dataStoreName;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDataStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDataStoreArgs $;

        public Builder() {
            $ = new GetDataStoreArgs();
        }

        public Builder(GetDataStoreArgs defaults) {
            $ = new GetDataStoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
         * 
         * @return builder
         * 
         */
        public Builder dataManagerName(Output<String> dataManagerName) {
            $.dataManagerName = dataManagerName;
            return this;
        }

        /**
         * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
         * 
         * @return builder
         * 
         */
        public Builder dataManagerName(String dataManagerName) {
            return dataManagerName(Output.of(dataManagerName));
        }

        /**
         * @param dataStoreName The data store/repository name queried.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreName(Output<String> dataStoreName) {
            $.dataStoreName = dataStoreName;
            return this;
        }

        /**
         * @param dataStoreName The data store/repository name queried.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreName(String dataStoreName) {
            return dataStoreName(Output.of(dataStoreName));
        }

        /**
         * @param resourceGroupName The Resource Group Name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The Resource Group Name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public GetDataStoreArgs build() {
            $.dataManagerName = Objects.requireNonNull($.dataManagerName, "expected parameter 'dataManagerName' to be non-null");
            $.dataStoreName = Objects.requireNonNull($.dataStoreName, "expected parameter 'dataStoreName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
