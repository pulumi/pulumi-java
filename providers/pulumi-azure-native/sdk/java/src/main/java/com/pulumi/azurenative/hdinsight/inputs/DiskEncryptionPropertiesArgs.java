// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hdinsight.inputs;

import com.pulumi.azurenative.hdinsight.enums.JsonWebKeyEncryptionAlgorithm;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The disk encryption properties
 * 
 */
public final class DiskEncryptionPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskEncryptionPropertiesArgs Empty = new DiskEncryptionPropertiesArgs();

    /**
     * Algorithm identifier for encryption, default RSA-OAEP.
     * 
     */
    @Import(name="encryptionAlgorithm")
    private @Nullable Output<Either<String,JsonWebKeyEncryptionAlgorithm>> encryptionAlgorithm;

    /**
     * @return Algorithm identifier for encryption, default RSA-OAEP.
     * 
     */
    public Optional<Output<Either<String,JsonWebKeyEncryptionAlgorithm>>> encryptionAlgorithm() {
        return Optional.ofNullable(this.encryptionAlgorithm);
    }

    /**
     * Indicates whether or not resource disk encryption is enabled.
     * 
     */
    @Import(name="encryptionAtHost")
    private @Nullable Output<Boolean> encryptionAtHost;

    /**
     * @return Indicates whether or not resource disk encryption is enabled.
     * 
     */
    public Optional<Output<Boolean>> encryptionAtHost() {
        return Optional.ofNullable(this.encryptionAtHost);
    }

    /**
     * Key name that is used for enabling disk encryption.
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return Key name that is used for enabling disk encryption.
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * Specific key version that is used for enabling disk encryption.
     * 
     */
    @Import(name="keyVersion")
    private @Nullable Output<String> keyVersion;

    /**
     * @return Specific key version that is used for enabling disk encryption.
     * 
     */
    public Optional<Output<String>> keyVersion() {
        return Optional.ofNullable(this.keyVersion);
    }

    /**
     * Resource ID of Managed Identity that is used to access the key vault.
     * 
     */
    @Import(name="msiResourceId")
    private @Nullable Output<String> msiResourceId;

    /**
     * @return Resource ID of Managed Identity that is used to access the key vault.
     * 
     */
    public Optional<Output<String>> msiResourceId() {
        return Optional.ofNullable(this.msiResourceId);
    }

    /**
     * Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
     * 
     */
    @Import(name="vaultUri")
    private @Nullable Output<String> vaultUri;

    /**
     * @return Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
     * 
     */
    public Optional<Output<String>> vaultUri() {
        return Optional.ofNullable(this.vaultUri);
    }

    private DiskEncryptionPropertiesArgs() {}

    private DiskEncryptionPropertiesArgs(DiskEncryptionPropertiesArgs $) {
        this.encryptionAlgorithm = $.encryptionAlgorithm;
        this.encryptionAtHost = $.encryptionAtHost;
        this.keyName = $.keyName;
        this.keyVersion = $.keyVersion;
        this.msiResourceId = $.msiResourceId;
        this.vaultUri = $.vaultUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskEncryptionPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskEncryptionPropertiesArgs $;

        public Builder() {
            $ = new DiskEncryptionPropertiesArgs();
        }

        public Builder(DiskEncryptionPropertiesArgs defaults) {
            $ = new DiskEncryptionPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encryptionAlgorithm Algorithm identifier for encryption, default RSA-OAEP.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(@Nullable Output<Either<String,JsonWebKeyEncryptionAlgorithm>> encryptionAlgorithm) {
            $.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }

        /**
         * @param encryptionAlgorithm Algorithm identifier for encryption, default RSA-OAEP.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(Either<String,JsonWebKeyEncryptionAlgorithm> encryptionAlgorithm) {
            return encryptionAlgorithm(Output.of(encryptionAlgorithm));
        }

        /**
         * @param encryptionAlgorithm Algorithm identifier for encryption, default RSA-OAEP.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(String encryptionAlgorithm) {
            return encryptionAlgorithm(Either.ofLeft(encryptionAlgorithm));
        }

        /**
         * @param encryptionAlgorithm Algorithm identifier for encryption, default RSA-OAEP.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(JsonWebKeyEncryptionAlgorithm encryptionAlgorithm) {
            return encryptionAlgorithm(Either.ofRight(encryptionAlgorithm));
        }

        /**
         * @param encryptionAtHost Indicates whether or not resource disk encryption is enabled.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAtHost(@Nullable Output<Boolean> encryptionAtHost) {
            $.encryptionAtHost = encryptionAtHost;
            return this;
        }

        /**
         * @param encryptionAtHost Indicates whether or not resource disk encryption is enabled.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAtHost(Boolean encryptionAtHost) {
            return encryptionAtHost(Output.of(encryptionAtHost));
        }

        /**
         * @param keyName Key name that is used for enabling disk encryption.
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName Key name that is used for enabling disk encryption.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param keyVersion Specific key version that is used for enabling disk encryption.
         * 
         * @return builder
         * 
         */
        public Builder keyVersion(@Nullable Output<String> keyVersion) {
            $.keyVersion = keyVersion;
            return this;
        }

        /**
         * @param keyVersion Specific key version that is used for enabling disk encryption.
         * 
         * @return builder
         * 
         */
        public Builder keyVersion(String keyVersion) {
            return keyVersion(Output.of(keyVersion));
        }

        /**
         * @param msiResourceId Resource ID of Managed Identity that is used to access the key vault.
         * 
         * @return builder
         * 
         */
        public Builder msiResourceId(@Nullable Output<String> msiResourceId) {
            $.msiResourceId = msiResourceId;
            return this;
        }

        /**
         * @param msiResourceId Resource ID of Managed Identity that is used to access the key vault.
         * 
         * @return builder
         * 
         */
        public Builder msiResourceId(String msiResourceId) {
            return msiResourceId(Output.of(msiResourceId));
        }

        /**
         * @param vaultUri Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
         * 
         * @return builder
         * 
         */
        public Builder vaultUri(@Nullable Output<String> vaultUri) {
            $.vaultUri = vaultUri;
            return this;
        }

        /**
         * @param vaultUri Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
         * 
         * @return builder
         * 
         */
        public Builder vaultUri(String vaultUri) {
            return vaultUri(Output.of(vaultUri));
        }

        public DiskEncryptionPropertiesArgs build() {
            $.encryptionAtHost = Codegen.booleanProp("encryptionAtHost").output().arg($.encryptionAtHost).def(false).getNullable();
            return $;
        }
    }

}
