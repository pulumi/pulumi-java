// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.enums.AuthenticationType;
import com.pulumi.azurenative.datamigration.enums.SqlSourcePlatform;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information for connecting to SQL database server
 * 
 */
public final class SqlConnectionInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlConnectionInfoArgs Empty = new SqlConnectionInfoArgs();

    /**
     * Additional connection settings
     * 
     */
    @Import(name="additionalSettings")
    private @Nullable Output<String> additionalSettings;

    /**
     * @return Additional connection settings
     * 
     */
    public Optional<Output<String>> additionalSettings() {
        return Optional.ofNullable(this.additionalSettings);
    }

    /**
     * Authentication type to use for connection
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<Either<String,AuthenticationType>> authentication;

    /**
     * @return Authentication type to use for connection
     * 
     */
    public Optional<Output<Either<String,AuthenticationType>>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
     * 
     */
    @Import(name="dataSource", required=true)
    private Output<String> dataSource;

    /**
     * @return Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
     * 
     */
    public Output<String> dataSource() {
        return this.dataSource;
    }

    /**
     * Whether to encrypt the connection
     * 
     */
    @Import(name="encryptConnection")
    private @Nullable Output<Boolean> encryptConnection;

    /**
     * @return Whether to encrypt the connection
     * 
     */
    public Optional<Output<Boolean>> encryptConnection() {
        return Optional.ofNullable(this.encryptConnection);
    }

    /**
     * Password credential.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password credential.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Server platform type for connection
     * 
     */
    @Import(name="platform")
    private @Nullable Output<Either<String,SqlSourcePlatform>> platform;

    /**
     * @return Server platform type for connection
     * 
     */
    public Optional<Output<Either<String,SqlSourcePlatform>>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * Whether to trust the server certificate
     * 
     */
    @Import(name="trustServerCertificate")
    private @Nullable Output<Boolean> trustServerCertificate;

    /**
     * @return Whether to trust the server certificate
     * 
     */
    public Optional<Output<Boolean>> trustServerCertificate() {
        return Optional.ofNullable(this.trustServerCertificate);
    }

    /**
     * Type of connection info
     * Expected value is &#39;SqlConnectionInfo&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of connection info
     * Expected value is &#39;SqlConnectionInfo&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * User name
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return User name
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private SqlConnectionInfoArgs() {}

    private SqlConnectionInfoArgs(SqlConnectionInfoArgs $) {
        this.additionalSettings = $.additionalSettings;
        this.authentication = $.authentication;
        this.dataSource = $.dataSource;
        this.encryptConnection = $.encryptConnection;
        this.password = $.password;
        this.platform = $.platform;
        this.trustServerCertificate = $.trustServerCertificate;
        this.type = $.type;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlConnectionInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlConnectionInfoArgs $;

        public Builder() {
            $ = new SqlConnectionInfoArgs();
        }

        public Builder(SqlConnectionInfoArgs defaults) {
            $ = new SqlConnectionInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalSettings Additional connection settings
         * 
         * @return builder
         * 
         */
        public Builder additionalSettings(@Nullable Output<String> additionalSettings) {
            $.additionalSettings = additionalSettings;
            return this;
        }

        /**
         * @param additionalSettings Additional connection settings
         * 
         * @return builder
         * 
         */
        public Builder additionalSettings(String additionalSettings) {
            return additionalSettings(Output.of(additionalSettings));
        }

        /**
         * @param authentication Authentication type to use for connection
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable Output<Either<String,AuthenticationType>> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication Authentication type to use for connection
         * 
         * @return builder
         * 
         */
        public Builder authentication(Either<String,AuthenticationType> authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param authentication Authentication type to use for connection
         * 
         * @return builder
         * 
         */
        public Builder authentication(String authentication) {
            return authentication(Either.ofLeft(authentication));
        }

        /**
         * @param authentication Authentication type to use for connection
         * 
         * @return builder
         * 
         */
        public Builder authentication(AuthenticationType authentication) {
            return authentication(Either.ofRight(authentication));
        }

        /**
         * @param dataSource Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
         * 
         * @return builder
         * 
         */
        public Builder dataSource(Output<String> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        /**
         * @param dataSource Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
         * 
         * @return builder
         * 
         */
        public Builder dataSource(String dataSource) {
            return dataSource(Output.of(dataSource));
        }

        /**
         * @param encryptConnection Whether to encrypt the connection
         * 
         * @return builder
         * 
         */
        public Builder encryptConnection(@Nullable Output<Boolean> encryptConnection) {
            $.encryptConnection = encryptConnection;
            return this;
        }

        /**
         * @param encryptConnection Whether to encrypt the connection
         * 
         * @return builder
         * 
         */
        public Builder encryptConnection(Boolean encryptConnection) {
            return encryptConnection(Output.of(encryptConnection));
        }

        /**
         * @param password Password credential.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password credential.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param platform Server platform type for connection
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<Either<String,SqlSourcePlatform>> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform Server platform type for connection
         * 
         * @return builder
         * 
         */
        public Builder platform(Either<String,SqlSourcePlatform> platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param platform Server platform type for connection
         * 
         * @return builder
         * 
         */
        public Builder platform(String platform) {
            return platform(Either.ofLeft(platform));
        }

        /**
         * @param platform Server platform type for connection
         * 
         * @return builder
         * 
         */
        public Builder platform(SqlSourcePlatform platform) {
            return platform(Either.ofRight(platform));
        }

        /**
         * @param trustServerCertificate Whether to trust the server certificate
         * 
         * @return builder
         * 
         */
        public Builder trustServerCertificate(@Nullable Output<Boolean> trustServerCertificate) {
            $.trustServerCertificate = trustServerCertificate;
            return this;
        }

        /**
         * @param trustServerCertificate Whether to trust the server certificate
         * 
         * @return builder
         * 
         */
        public Builder trustServerCertificate(Boolean trustServerCertificate) {
            return trustServerCertificate(Output.of(trustServerCertificate));
        }

        /**
         * @param type Type of connection info
         * Expected value is &#39;SqlConnectionInfo&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of connection info
         * Expected value is &#39;SqlConnectionInfo&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userName User name
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName User name
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public SqlConnectionInfoArgs build() {
            $.dataSource = Objects.requireNonNull($.dataSource, "expected parameter 'dataSource' to be non-null");
            $.encryptConnection = Codegen.booleanProp("encryptConnection").output().arg($.encryptConnection).def(true).getNullable();
            $.trustServerCertificate = Codegen.booleanProp("trustServerCertificate").output().arg($.trustServerCertificate).def(false).getNullable();
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
