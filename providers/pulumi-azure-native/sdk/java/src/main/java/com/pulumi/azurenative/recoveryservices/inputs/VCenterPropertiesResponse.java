// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.HealthErrorResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * vCenter properties.
 * 
 */
public final class VCenterPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final VCenterPropertiesResponse Empty = new VCenterPropertiesResponse();

    /**
     * The VCenter discovery status.
     * 
     */
    @Import(name="discoveryStatus")
    private @Nullable String discoveryStatus;

    /**
     * @return The VCenter discovery status.
     * 
     */
    public Optional<String> discoveryStatus() {
        return Optional.ofNullable(this.discoveryStatus);
    }

    /**
     * The ARM resource name of the fabric containing this VCenter.
     * 
     */
    @Import(name="fabricArmResourceName")
    private @Nullable String fabricArmResourceName;

    /**
     * @return The ARM resource name of the fabric containing this VCenter.
     * 
     */
    public Optional<String> fabricArmResourceName() {
        return Optional.ofNullable(this.fabricArmResourceName);
    }

    /**
     * Friendly name of the vCenter.
     * 
     */
    @Import(name="friendlyName")
    private @Nullable String friendlyName;

    /**
     * @return Friendly name of the vCenter.
     * 
     */
    public Optional<String> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }

    /**
     * The health errors for this VCenter.
     * 
     */
    @Import(name="healthErrors")
    private @Nullable List<HealthErrorResponse> healthErrors;

    /**
     * @return The health errors for this VCenter.
     * 
     */
    public Optional<List<HealthErrorResponse>> healthErrors() {
        return Optional.ofNullable(this.healthErrors);
    }

    /**
     * The infrastructure Id of vCenter.
     * 
     */
    @Import(name="infrastructureId")
    private @Nullable String infrastructureId;

    /**
     * @return The infrastructure Id of vCenter.
     * 
     */
    public Optional<String> infrastructureId() {
        return Optional.ofNullable(this.infrastructureId);
    }

    /**
     * VCenter internal ID.
     * 
     */
    @Import(name="internalId")
    private @Nullable String internalId;

    /**
     * @return VCenter internal ID.
     * 
     */
    public Optional<String> internalId() {
        return Optional.ofNullable(this.internalId);
    }

    /**
     * The IP address of the vCenter.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable String ipAddress;

    /**
     * @return The IP address of the vCenter.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The time when the last heartbeat was received by vCenter.
     * 
     */
    @Import(name="lastHeartbeat")
    private @Nullable String lastHeartbeat;

    /**
     * @return The time when the last heartbeat was received by vCenter.
     * 
     */
    public Optional<String> lastHeartbeat() {
        return Optional.ofNullable(this.lastHeartbeat);
    }

    /**
     * The port number for discovery.
     * 
     */
    @Import(name="port")
    private @Nullable String port;

    /**
     * @return The port number for discovery.
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The process server Id.
     * 
     */
    @Import(name="processServerId")
    private @Nullable String processServerId;

    /**
     * @return The process server Id.
     * 
     */
    public Optional<String> processServerId() {
        return Optional.ofNullable(this.processServerId);
    }

    /**
     * The account Id which has privileges to discover the vCenter.
     * 
     */
    @Import(name="runAsAccountId")
    private @Nullable String runAsAccountId;

    /**
     * @return The account Id which has privileges to discover the vCenter.
     * 
     */
    public Optional<String> runAsAccountId() {
        return Optional.ofNullable(this.runAsAccountId);
    }

    private VCenterPropertiesResponse() {}

    private VCenterPropertiesResponse(VCenterPropertiesResponse $) {
        this.discoveryStatus = $.discoveryStatus;
        this.fabricArmResourceName = $.fabricArmResourceName;
        this.friendlyName = $.friendlyName;
        this.healthErrors = $.healthErrors;
        this.infrastructureId = $.infrastructureId;
        this.internalId = $.internalId;
        this.ipAddress = $.ipAddress;
        this.lastHeartbeat = $.lastHeartbeat;
        this.port = $.port;
        this.processServerId = $.processServerId;
        this.runAsAccountId = $.runAsAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VCenterPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VCenterPropertiesResponse $;

        public Builder() {
            $ = new VCenterPropertiesResponse();
        }

        public Builder(VCenterPropertiesResponse defaults) {
            $ = new VCenterPropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param discoveryStatus The VCenter discovery status.
         * 
         * @return builder
         * 
         */
        public Builder discoveryStatus(@Nullable String discoveryStatus) {
            $.discoveryStatus = discoveryStatus;
            return this;
        }

        /**
         * @param fabricArmResourceName The ARM resource name of the fabric containing this VCenter.
         * 
         * @return builder
         * 
         */
        public Builder fabricArmResourceName(@Nullable String fabricArmResourceName) {
            $.fabricArmResourceName = fabricArmResourceName;
            return this;
        }

        /**
         * @param friendlyName Friendly name of the vCenter.
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(@Nullable String friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        /**
         * @param healthErrors The health errors for this VCenter.
         * 
         * @return builder
         * 
         */
        public Builder healthErrors(@Nullable List<HealthErrorResponse> healthErrors) {
            $.healthErrors = healthErrors;
            return this;
        }

        /**
         * @param healthErrors The health errors for this VCenter.
         * 
         * @return builder
         * 
         */
        public Builder healthErrors(HealthErrorResponse... healthErrors) {
            return healthErrors(List.of(healthErrors));
        }

        /**
         * @param infrastructureId The infrastructure Id of vCenter.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureId(@Nullable String infrastructureId) {
            $.infrastructureId = infrastructureId;
            return this;
        }

        /**
         * @param internalId VCenter internal ID.
         * 
         * @return builder
         * 
         */
        public Builder internalId(@Nullable String internalId) {
            $.internalId = internalId;
            return this;
        }

        /**
         * @param ipAddress The IP address of the vCenter.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param lastHeartbeat The time when the last heartbeat was received by vCenter.
         * 
         * @return builder
         * 
         */
        public Builder lastHeartbeat(@Nullable String lastHeartbeat) {
            $.lastHeartbeat = lastHeartbeat;
            return this;
        }

        /**
         * @param port The port number for discovery.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable String port) {
            $.port = port;
            return this;
        }

        /**
         * @param processServerId The process server Id.
         * 
         * @return builder
         * 
         */
        public Builder processServerId(@Nullable String processServerId) {
            $.processServerId = processServerId;
            return this;
        }

        /**
         * @param runAsAccountId The account Id which has privileges to discover the vCenter.
         * 
         * @return builder
         * 
         */
        public Builder runAsAccountId(@Nullable String runAsAccountId) {
            $.runAsAccountId = runAsAccountId;
            return this;
        }

        public VCenterPropertiesResponse build() {
            return $;
        }
    }

}
