// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.azurenative.costmanagement.enums.DaysOfWeek;
import com.pulumi.azurenative.costmanagement.enums.ScheduleFrequency;
import com.pulumi.azurenative.costmanagement.enums.WeeksOfMonth;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of the schedule.
 * 
 */
public final class SchedulePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchedulePropertiesArgs Empty = new SchedulePropertiesArgs();

    /**
     * UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek.
     * 
     */
    @Import(name="dayOfMonth")
    private @Nullable Output<Integer> dayOfMonth;

    /**
     * @return UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek.
     * 
     */
    public Optional<Output<Integer>> dayOfMonth() {
        return Optional.ofNullable(this.dayOfMonth);
    }

    /**
     * Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.
     * 
     */
    @Import(name="daysOfWeek")
    private @Nullable Output<List<Either<String,DaysOfWeek>>> daysOfWeek;

    /**
     * @return Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.
     * 
     */
    public Optional<Output<List<Either<String,DaysOfWeek>>>> daysOfWeek() {
        return Optional.ofNullable(this.daysOfWeek);
    }

    /**
     * The end date and time of the scheduled action (UTC).
     * 
     */
    @Import(name="endDate", required=true)
    private Output<String> endDate;

    /**
     * @return The end date and time of the scheduled action (UTC).
     * 
     */
    public Output<String> endDate() {
        return this.endDate;
    }

    /**
     * Frequency of the schedule.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<Either<String,ScheduleFrequency>> frequency;

    /**
     * @return Frequency of the schedule.
     * 
     */
    public Output<Either<String,ScheduleFrequency>> frequency() {
        return this.frequency;
    }

    /**
     * UTC time at which cost analysis data will be emailed.
     * 
     */
    @Import(name="hourOfDay")
    private @Nullable Output<Integer> hourOfDay;

    /**
     * @return UTC time at which cost analysis data will be emailed.
     * 
     */
    public Optional<Output<Integer>> hourOfDay() {
        return Optional.ofNullable(this.hourOfDay);
    }

    /**
     * The start date and time of the scheduled action (UTC).
     * 
     */
    @Import(name="startDate", required=true)
    private Output<String> startDate;

    /**
     * @return The start date and time of the scheduled action (UTC).
     * 
     */
    public Output<String> startDate() {
        return this.startDate;
    }

    /**
     * Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.
     * 
     */
    @Import(name="weeksOfMonth")
    private @Nullable Output<List<Either<String,WeeksOfMonth>>> weeksOfMonth;

    /**
     * @return Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.
     * 
     */
    public Optional<Output<List<Either<String,WeeksOfMonth>>>> weeksOfMonth() {
        return Optional.ofNullable(this.weeksOfMonth);
    }

    private SchedulePropertiesArgs() {}

    private SchedulePropertiesArgs(SchedulePropertiesArgs $) {
        this.dayOfMonth = $.dayOfMonth;
        this.daysOfWeek = $.daysOfWeek;
        this.endDate = $.endDate;
        this.frequency = $.frequency;
        this.hourOfDay = $.hourOfDay;
        this.startDate = $.startDate;
        this.weeksOfMonth = $.weeksOfMonth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchedulePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchedulePropertiesArgs $;

        public Builder() {
            $ = new SchedulePropertiesArgs();
        }

        public Builder(SchedulePropertiesArgs defaults) {
            $ = new SchedulePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dayOfMonth UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(@Nullable Output<Integer> dayOfMonth) {
            $.dayOfMonth = dayOfMonth;
            return this;
        }

        /**
         * @param dayOfMonth UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(Integer dayOfMonth) {
            return dayOfMonth(Output.of(dayOfMonth));
        }

        /**
         * @param daysOfWeek Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeek(@Nullable Output<List<Either<String,DaysOfWeek>>> daysOfWeek) {
            $.daysOfWeek = daysOfWeek;
            return this;
        }

        /**
         * @param daysOfWeek Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeek(List<Either<String,DaysOfWeek>> daysOfWeek) {
            return daysOfWeek(Output.of(daysOfWeek));
        }

        /**
         * @param daysOfWeek Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeek(Either<String,DaysOfWeek>... daysOfWeek) {
            return daysOfWeek(List.of(daysOfWeek));
        }

        /**
         * @param endDate The end date and time of the scheduled action (UTC).
         * 
         * @return builder
         * 
         */
        public Builder endDate(Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate The end date and time of the scheduled action (UTC).
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param frequency Frequency of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<Either<String,ScheduleFrequency>> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency Frequency of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Either<String,ScheduleFrequency> frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param frequency Frequency of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Either.ofLeft(frequency));
        }

        /**
         * @param frequency Frequency of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder frequency(ScheduleFrequency frequency) {
            return frequency(Either.ofRight(frequency));
        }

        /**
         * @param hourOfDay UTC time at which cost analysis data will be emailed.
         * 
         * @return builder
         * 
         */
        public Builder hourOfDay(@Nullable Output<Integer> hourOfDay) {
            $.hourOfDay = hourOfDay;
            return this;
        }

        /**
         * @param hourOfDay UTC time at which cost analysis data will be emailed.
         * 
         * @return builder
         * 
         */
        public Builder hourOfDay(Integer hourOfDay) {
            return hourOfDay(Output.of(hourOfDay));
        }

        /**
         * @param startDate The start date and time of the scheduled action (UTC).
         * 
         * @return builder
         * 
         */
        public Builder startDate(Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate The start date and time of the scheduled action (UTC).
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param weeksOfMonth Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonth(@Nullable Output<List<Either<String,WeeksOfMonth>>> weeksOfMonth) {
            $.weeksOfMonth = weeksOfMonth;
            return this;
        }

        /**
         * @param weeksOfMonth Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonth(List<Either<String,WeeksOfMonth>> weeksOfMonth) {
            return weeksOfMonth(Output.of(weeksOfMonth));
        }

        /**
         * @param weeksOfMonth Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonth(Either<String,WeeksOfMonth>... weeksOfMonth) {
            return weeksOfMonth(List.of(weeksOfMonth));
        }

        public SchedulePropertiesArgs build() {
            $.endDate = Objects.requireNonNull($.endDate, "expected parameter 'endDate' to be non-null");
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            $.startDate = Objects.requireNonNull($.startDate, "expected parameter 'startDate' to be non-null");
            return $;
        }
    }

}
