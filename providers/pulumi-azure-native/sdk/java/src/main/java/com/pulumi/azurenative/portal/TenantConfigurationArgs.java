// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.portal;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TenantConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TenantConfigurationArgs Empty = new TenantConfigurationArgs();

    /**
     * The configuration name. Value must be &#39;default&#39;
     * 
     */
    @Import(name="configurationName")
    private @Nullable Output<String> configurationName;

    /**
     * @return The configuration name. Value must be &#39;default&#39;
     * 
     */
    public Optional<Output<String>> configurationName() {
        return Optional.ofNullable(this.configurationName);
    }

    /**
     * When flag is set to true Markdown tile will require external storage configuration (URI). The inline content configuration will be prohibited.
     * 
     */
    @Import(name="enforcePrivateMarkdownStorage")
    private @Nullable Output<Boolean> enforcePrivateMarkdownStorage;

    /**
     * @return When flag is set to true Markdown tile will require external storage configuration (URI). The inline content configuration will be prohibited.
     * 
     */
    public Optional<Output<Boolean>> enforcePrivateMarkdownStorage() {
        return Optional.ofNullable(this.enforcePrivateMarkdownStorage);
    }

    private TenantConfigurationArgs() {}

    private TenantConfigurationArgs(TenantConfigurationArgs $) {
        this.configurationName = $.configurationName;
        this.enforcePrivateMarkdownStorage = $.enforcePrivateMarkdownStorage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TenantConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TenantConfigurationArgs $;

        public Builder() {
            $ = new TenantConfigurationArgs();
        }

        public Builder(TenantConfigurationArgs defaults) {
            $ = new TenantConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationName The configuration name. Value must be &#39;default&#39;
         * 
         * @return builder
         * 
         */
        public Builder configurationName(@Nullable Output<String> configurationName) {
            $.configurationName = configurationName;
            return this;
        }

        /**
         * @param configurationName The configuration name. Value must be &#39;default&#39;
         * 
         * @return builder
         * 
         */
        public Builder configurationName(String configurationName) {
            return configurationName(Output.of(configurationName));
        }

        /**
         * @param enforcePrivateMarkdownStorage When flag is set to true Markdown tile will require external storage configuration (URI). The inline content configuration will be prohibited.
         * 
         * @return builder
         * 
         */
        public Builder enforcePrivateMarkdownStorage(@Nullable Output<Boolean> enforcePrivateMarkdownStorage) {
            $.enforcePrivateMarkdownStorage = enforcePrivateMarkdownStorage;
            return this;
        }

        /**
         * @param enforcePrivateMarkdownStorage When flag is set to true Markdown tile will require external storage configuration (URI). The inline content configuration will be prohibited.
         * 
         * @return builder
         * 
         */
        public Builder enforcePrivateMarkdownStorage(Boolean enforcePrivateMarkdownStorage) {
            return enforcePrivateMarkdownStorage(Output.of(enforcePrivateMarkdownStorage));
        }

        public TenantConfigurationArgs build() {
            return $;
        }
    }

}
