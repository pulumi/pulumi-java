// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.resources.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetResourcePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetResourcePlainArgs Empty = new GetResourcePlainArgs();

    /**
     * The parent resource identity.
     * 
     */
    @Import(name="parentResourcePath", required=true)
    private String parentResourcePath;

    /**
     * @return The parent resource identity.
     * 
     */
    public String parentResourcePath() {
        return this.parentResourcePath;
    }

    /**
     * The name of the resource group containing the resource to get. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    /**
     * @return The name of the resource group containing the resource to get. The name is case insensitive.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the resource to get.
     * 
     */
    @Import(name="resourceName", required=true)
    private String resourceName;

    /**
     * @return The name of the resource to get.
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * The namespace of the resource provider.
     * 
     */
    @Import(name="resourceProviderNamespace", required=true)
    private String resourceProviderNamespace;

    /**
     * @return The namespace of the resource provider.
     * 
     */
    public String resourceProviderNamespace() {
        return this.resourceProviderNamespace;
    }

    /**
     * The resource type of the resource.
     * 
     */
    @Import(name="resourceType", required=true)
    private String resourceType;

    /**
     * @return The resource type of the resource.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }

    private GetResourcePlainArgs() {}

    private GetResourcePlainArgs(GetResourcePlainArgs $) {
        this.parentResourcePath = $.parentResourcePath;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceName = $.resourceName;
        this.resourceProviderNamespace = $.resourceProviderNamespace;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetResourcePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetResourcePlainArgs $;

        public Builder() {
            $ = new GetResourcePlainArgs();
        }

        public Builder(GetResourcePlainArgs defaults) {
            $ = new GetResourcePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param parentResourcePath The parent resource identity.
         * 
         * @return builder
         * 
         */
        public Builder parentResourcePath(String parentResourcePath) {
            $.parentResourcePath = parentResourcePath;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group containing the resource to get. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceName The name of the resource to get.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceProviderNamespace The namespace of the resource provider.
         * 
         * @return builder
         * 
         */
        public Builder resourceProviderNamespace(String resourceProviderNamespace) {
            $.resourceProviderNamespace = resourceProviderNamespace;
            return this;
        }

        /**
         * @param resourceType The resource type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        public GetResourcePlainArgs build() {
            $.parentResourcePath = Objects.requireNonNull($.parentResourcePath, "expected parameter 'parentResourcePath' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.resourceName = Objects.requireNonNull($.resourceName, "expected parameter 'resourceName' to be non-null");
            $.resourceProviderNamespace = Objects.requireNonNull($.resourceProviderNamespace, "expected parameter 'resourceProviderNamespace' to be non-null");
            $.resourceType = Objects.requireNonNull($.resourceType, "expected parameter 'resourceType' to be non-null");
            return $;
        }
    }

}
