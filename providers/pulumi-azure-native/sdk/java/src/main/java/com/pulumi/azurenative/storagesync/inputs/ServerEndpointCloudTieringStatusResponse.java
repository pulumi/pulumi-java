// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagesync.inputs;

import com.pulumi.azurenative.storagesync.inputs.CloudTieringCachePerformanceResponse;
import com.pulumi.azurenative.storagesync.inputs.CloudTieringDatePolicyStatusResponse;
import com.pulumi.azurenative.storagesync.inputs.CloudTieringFilesNotTieringResponse;
import com.pulumi.azurenative.storagesync.inputs.CloudTieringSpaceSavingsResponse;
import com.pulumi.azurenative.storagesync.inputs.CloudTieringVolumeFreeSpacePolicyStatusResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Server endpoint cloud tiering status object.
 * 
 */
public final class ServerEndpointCloudTieringStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServerEndpointCloudTieringStatusResponse Empty = new ServerEndpointCloudTieringStatusResponse();

    /**
     * Information regarding how well the local cache on the server is performing.
     * 
     */
    @Import(name="cachePerformance", required=true)
    private CloudTieringCachePerformanceResponse cachePerformance;

    public CloudTieringCachePerformanceResponse cachePerformance() {
        return this.cachePerformance;
    }

    /**
     * Status of the date policy
     * 
     */
    @Import(name="datePolicyStatus", required=true)
    private CloudTieringDatePolicyStatusResponse datePolicyStatus;

    public CloudTieringDatePolicyStatusResponse datePolicyStatus() {
        return this.datePolicyStatus;
    }

    /**
     * Information regarding files that failed to be tiered
     * 
     */
    @Import(name="filesNotTiering", required=true)
    private CloudTieringFilesNotTieringResponse filesNotTiering;

    public CloudTieringFilesNotTieringResponse filesNotTiering() {
        return this.filesNotTiering;
    }

    /**
     * Cloud tiering health state.
     * 
     */
    @Import(name="health", required=true)
    private String health;

    public String health() {
        return this.health;
    }

    /**
     * The last updated timestamp of health state
     * 
     */
    @Import(name="healthLastUpdatedTimestamp", required=true)
    private String healthLastUpdatedTimestamp;

    public String healthLastUpdatedTimestamp() {
        return this.healthLastUpdatedTimestamp;
    }

    /**
     * Last cloud tiering result (HResult)
     * 
     */
    @Import(name="lastCloudTieringResult", required=true)
    private Integer lastCloudTieringResult;

    public Integer lastCloudTieringResult() {
        return this.lastCloudTieringResult;
    }

    /**
     * Last cloud tiering success timestamp
     * 
     */
    @Import(name="lastSuccessTimestamp", required=true)
    private String lastSuccessTimestamp;

    public String lastSuccessTimestamp() {
        return this.lastSuccessTimestamp;
    }

    /**
     * Last updated timestamp
     * 
     */
    @Import(name="lastUpdatedTimestamp", required=true)
    private String lastUpdatedTimestamp;

    public String lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Information regarding how much local space cloud tiering is saving.
     * 
     */
    @Import(name="spaceSavings", required=true)
    private CloudTieringSpaceSavingsResponse spaceSavings;

    public CloudTieringSpaceSavingsResponse spaceSavings() {
        return this.spaceSavings;
    }

    /**
     * Status of the volume free space policy
     * 
     */
    @Import(name="volumeFreeSpacePolicyStatus", required=true)
    private CloudTieringVolumeFreeSpacePolicyStatusResponse volumeFreeSpacePolicyStatus;

    public CloudTieringVolumeFreeSpacePolicyStatusResponse volumeFreeSpacePolicyStatus() {
        return this.volumeFreeSpacePolicyStatus;
    }

    private ServerEndpointCloudTieringStatusResponse() {}

    private ServerEndpointCloudTieringStatusResponse(ServerEndpointCloudTieringStatusResponse $) {
        this.cachePerformance = $.cachePerformance;
        this.datePolicyStatus = $.datePolicyStatus;
        this.filesNotTiering = $.filesNotTiering;
        this.health = $.health;
        this.healthLastUpdatedTimestamp = $.healthLastUpdatedTimestamp;
        this.lastCloudTieringResult = $.lastCloudTieringResult;
        this.lastSuccessTimestamp = $.lastSuccessTimestamp;
        this.lastUpdatedTimestamp = $.lastUpdatedTimestamp;
        this.spaceSavings = $.spaceSavings;
        this.volumeFreeSpacePolicyStatus = $.volumeFreeSpacePolicyStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerEndpointCloudTieringStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerEndpointCloudTieringStatusResponse $;

        public Builder() {
            $ = new ServerEndpointCloudTieringStatusResponse();
        }

        public Builder(ServerEndpointCloudTieringStatusResponse defaults) {
            $ = new ServerEndpointCloudTieringStatusResponse(Objects.requireNonNull(defaults));
        }

        public Builder cachePerformance(CloudTieringCachePerformanceResponse cachePerformance) {
            $.cachePerformance = cachePerformance;
            return this;
        }

        public Builder datePolicyStatus(CloudTieringDatePolicyStatusResponse datePolicyStatus) {
            $.datePolicyStatus = datePolicyStatus;
            return this;
        }

        public Builder filesNotTiering(CloudTieringFilesNotTieringResponse filesNotTiering) {
            $.filesNotTiering = filesNotTiering;
            return this;
        }

        public Builder health(String health) {
            $.health = health;
            return this;
        }

        public Builder healthLastUpdatedTimestamp(String healthLastUpdatedTimestamp) {
            $.healthLastUpdatedTimestamp = healthLastUpdatedTimestamp;
            return this;
        }

        public Builder lastCloudTieringResult(Integer lastCloudTieringResult) {
            $.lastCloudTieringResult = lastCloudTieringResult;
            return this;
        }

        public Builder lastSuccessTimestamp(String lastSuccessTimestamp) {
            $.lastSuccessTimestamp = lastSuccessTimestamp;
            return this;
        }

        public Builder lastUpdatedTimestamp(String lastUpdatedTimestamp) {
            $.lastUpdatedTimestamp = lastUpdatedTimestamp;
            return this;
        }

        public Builder spaceSavings(CloudTieringSpaceSavingsResponse spaceSavings) {
            $.spaceSavings = spaceSavings;
            return this;
        }

        public Builder volumeFreeSpacePolicyStatus(CloudTieringVolumeFreeSpacePolicyStatusResponse volumeFreeSpacePolicyStatus) {
            $.volumeFreeSpacePolicyStatus = volumeFreeSpacePolicyStatus;
            return this;
        }

        public ServerEndpointCloudTieringStatusResponse build() {
            $.cachePerformance = Objects.requireNonNull($.cachePerformance, "expected parameter 'cachePerformance' to be non-null");
            $.datePolicyStatus = Objects.requireNonNull($.datePolicyStatus, "expected parameter 'datePolicyStatus' to be non-null");
            $.filesNotTiering = Objects.requireNonNull($.filesNotTiering, "expected parameter 'filesNotTiering' to be non-null");
            $.health = Objects.requireNonNull($.health, "expected parameter 'health' to be non-null");
            $.healthLastUpdatedTimestamp = Objects.requireNonNull($.healthLastUpdatedTimestamp, "expected parameter 'healthLastUpdatedTimestamp' to be non-null");
            $.lastCloudTieringResult = Objects.requireNonNull($.lastCloudTieringResult, "expected parameter 'lastCloudTieringResult' to be non-null");
            $.lastSuccessTimestamp = Objects.requireNonNull($.lastSuccessTimestamp, "expected parameter 'lastSuccessTimestamp' to be non-null");
            $.lastUpdatedTimestamp = Objects.requireNonNull($.lastUpdatedTimestamp, "expected parameter 'lastUpdatedTimestamp' to be non-null");
            $.spaceSavings = Objects.requireNonNull($.spaceSavings, "expected parameter 'spaceSavings' to be non-null");
            $.volumeFreeSpacePolicyStatus = Objects.requireNonNull($.volumeFreeSpacePolicyStatus, "expected parameter 'volumeFreeSpacePolicyStatus' to be non-null");
            return $;
        }
    }

}
