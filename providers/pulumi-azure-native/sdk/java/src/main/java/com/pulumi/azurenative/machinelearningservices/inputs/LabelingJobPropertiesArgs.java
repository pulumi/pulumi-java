// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.LabelCategoryArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.LabelingDatasetConfigurationArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.LabelingJobImagePropertiesArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.LabelingJobInstructionsArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.MLAssistConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Definition of a labeling job.
 * 
 */
public final class LabelingJobPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final LabelingJobPropertiesArgs Empty = new LabelingJobPropertiesArgs();

    /**
     * Dataset configuration for the job.
     * 
     */
    @Import(name="datasetConfiguration", required=true)
    private Output<LabelingDatasetConfigurationArgs> datasetConfiguration;

    /**
     * @return Dataset configuration for the job.
     * 
     */
    public Output<LabelingDatasetConfigurationArgs> datasetConfiguration() {
        return this.datasetConfiguration;
    }

    /**
     * Instructions for the job.
     * 
     */
    @Import(name="jobInstructions", required=true)
    private Output<LabelingJobInstructionsArgs> jobInstructions;

    /**
     * @return Instructions for the job.
     * 
     */
    public Output<LabelingJobInstructionsArgs> jobInstructions() {
        return this.jobInstructions;
    }

    /**
     * Label categories of the job.
     * 
     */
    @Import(name="labelCategories", required=true)
    private Output<Map<String,LabelCategoryArgs>> labelCategories;

    /**
     * @return Label categories of the job.
     * 
     */
    public Output<Map<String,LabelCategoryArgs>> labelCategories() {
        return this.labelCategories;
    }

    /**
     * Media specific properties in a labeling job.
     * 
     */
    @Import(name="labelingJobMediaProperties", required=true)
    private Output<LabelingJobImagePropertiesArgs> labelingJobMediaProperties;

    /**
     * @return Media specific properties in a labeling job.
     * 
     */
    public Output<LabelingJobImagePropertiesArgs> labelingJobMediaProperties() {
        return this.labelingJobMediaProperties;
    }

    /**
     * Machine learning assisted configuration for the job.
     * 
     */
    @Import(name="mlAssistConfiguration")
    private @Nullable Output<MLAssistConfigurationArgs> mlAssistConfiguration;

    /**
     * @return Machine learning assisted configuration for the job.
     * 
     */
    public Optional<Output<MLAssistConfigurationArgs>> mlAssistConfiguration() {
        return Optional.ofNullable(this.mlAssistConfiguration);
    }

    /**
     * The job property dictionary. Properties can be added, but not removed or altered.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    /**
     * @return The job property dictionary. Properties can be added, but not removed or altered.
     * 
     */
    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The job tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The job tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LabelingJobPropertiesArgs() {}

    private LabelingJobPropertiesArgs(LabelingJobPropertiesArgs $) {
        this.datasetConfiguration = $.datasetConfiguration;
        this.jobInstructions = $.jobInstructions;
        this.labelCategories = $.labelCategories;
        this.labelingJobMediaProperties = $.labelingJobMediaProperties;
        this.mlAssistConfiguration = $.mlAssistConfiguration;
        this.properties = $.properties;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LabelingJobPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LabelingJobPropertiesArgs $;

        public Builder() {
            $ = new LabelingJobPropertiesArgs();
        }

        public Builder(LabelingJobPropertiesArgs defaults) {
            $ = new LabelingJobPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datasetConfiguration Dataset configuration for the job.
         * 
         * @return builder
         * 
         */
        public Builder datasetConfiguration(Output<LabelingDatasetConfigurationArgs> datasetConfiguration) {
            $.datasetConfiguration = datasetConfiguration;
            return this;
        }

        /**
         * @param datasetConfiguration Dataset configuration for the job.
         * 
         * @return builder
         * 
         */
        public Builder datasetConfiguration(LabelingDatasetConfigurationArgs datasetConfiguration) {
            return datasetConfiguration(Output.of(datasetConfiguration));
        }

        /**
         * @param jobInstructions Instructions for the job.
         * 
         * @return builder
         * 
         */
        public Builder jobInstructions(Output<LabelingJobInstructionsArgs> jobInstructions) {
            $.jobInstructions = jobInstructions;
            return this;
        }

        /**
         * @param jobInstructions Instructions for the job.
         * 
         * @return builder
         * 
         */
        public Builder jobInstructions(LabelingJobInstructionsArgs jobInstructions) {
            return jobInstructions(Output.of(jobInstructions));
        }

        /**
         * @param labelCategories Label categories of the job.
         * 
         * @return builder
         * 
         */
        public Builder labelCategories(Output<Map<String,LabelCategoryArgs>> labelCategories) {
            $.labelCategories = labelCategories;
            return this;
        }

        /**
         * @param labelCategories Label categories of the job.
         * 
         * @return builder
         * 
         */
        public Builder labelCategories(Map<String,LabelCategoryArgs> labelCategories) {
            return labelCategories(Output.of(labelCategories));
        }

        /**
         * @param labelingJobMediaProperties Media specific properties in a labeling job.
         * 
         * @return builder
         * 
         */
        public Builder labelingJobMediaProperties(Output<LabelingJobImagePropertiesArgs> labelingJobMediaProperties) {
            $.labelingJobMediaProperties = labelingJobMediaProperties;
            return this;
        }

        /**
         * @param labelingJobMediaProperties Media specific properties in a labeling job.
         * 
         * @return builder
         * 
         */
        public Builder labelingJobMediaProperties(LabelingJobImagePropertiesArgs labelingJobMediaProperties) {
            return labelingJobMediaProperties(Output.of(labelingJobMediaProperties));
        }

        /**
         * @param mlAssistConfiguration Machine learning assisted configuration for the job.
         * 
         * @return builder
         * 
         */
        public Builder mlAssistConfiguration(@Nullable Output<MLAssistConfigurationArgs> mlAssistConfiguration) {
            $.mlAssistConfiguration = mlAssistConfiguration;
            return this;
        }

        /**
         * @param mlAssistConfiguration Machine learning assisted configuration for the job.
         * 
         * @return builder
         * 
         */
        public Builder mlAssistConfiguration(MLAssistConfigurationArgs mlAssistConfiguration) {
            return mlAssistConfiguration(Output.of(mlAssistConfiguration));
        }

        /**
         * @param properties The job property dictionary. Properties can be added, but not removed or altered.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties The job property dictionary. Properties can be added, but not removed or altered.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param tags The job tag dictionary. Tags can be added, removed, and updated.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The job tag dictionary. Tags can be added, removed, and updated.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public LabelingJobPropertiesArgs build() {
            $.datasetConfiguration = Objects.requireNonNull($.datasetConfiguration, "expected parameter 'datasetConfiguration' to be non-null");
            $.jobInstructions = Objects.requireNonNull($.jobInstructions, "expected parameter 'jobInstructions' to be non-null");
            $.labelCategories = Objects.requireNonNull($.labelCategories, "expected parameter 'labelCategories' to be non-null");
            $.labelingJobMediaProperties = Objects.requireNonNull($.labelingJobMediaProperties, "expected parameter 'labelingJobMediaProperties' to be non-null");
            return $;
        }
    }

}
