// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.PowerQuerySinkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Map Power Query mashup query to sink dataset(s).
 * 
 */
public final class PowerQuerySinkMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final PowerQuerySinkMappingArgs Empty = new PowerQuerySinkMappingArgs();

    /**
     * List of sinks mapped to Power Query mashup query.
     * 
     */
    @Import(name="dataflowSinks")
    private @Nullable Output<List<PowerQuerySinkArgs>> dataflowSinks;

    /**
     * @return List of sinks mapped to Power Query mashup query.
     * 
     */
    public Optional<Output<List<PowerQuerySinkArgs>>> dataflowSinks() {
        return Optional.ofNullable(this.dataflowSinks);
    }

    /**
     * Name of the query in Power Query mashup document.
     * 
     */
    @Import(name="queryName")
    private @Nullable Output<String> queryName;

    /**
     * @return Name of the query in Power Query mashup document.
     * 
     */
    public Optional<Output<String>> queryName() {
        return Optional.ofNullable(this.queryName);
    }

    private PowerQuerySinkMappingArgs() {}

    private PowerQuerySinkMappingArgs(PowerQuerySinkMappingArgs $) {
        this.dataflowSinks = $.dataflowSinks;
        this.queryName = $.queryName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PowerQuerySinkMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PowerQuerySinkMappingArgs $;

        public Builder() {
            $ = new PowerQuerySinkMappingArgs();
        }

        public Builder(PowerQuerySinkMappingArgs defaults) {
            $ = new PowerQuerySinkMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataflowSinks List of sinks mapped to Power Query mashup query.
         * 
         * @return builder
         * 
         */
        public Builder dataflowSinks(@Nullable Output<List<PowerQuerySinkArgs>> dataflowSinks) {
            $.dataflowSinks = dataflowSinks;
            return this;
        }

        /**
         * @param dataflowSinks List of sinks mapped to Power Query mashup query.
         * 
         * @return builder
         * 
         */
        public Builder dataflowSinks(List<PowerQuerySinkArgs> dataflowSinks) {
            return dataflowSinks(Output.of(dataflowSinks));
        }

        /**
         * @param dataflowSinks List of sinks mapped to Power Query mashup query.
         * 
         * @return builder
         * 
         */
        public Builder dataflowSinks(PowerQuerySinkArgs... dataflowSinks) {
            return dataflowSinks(List.of(dataflowSinks));
        }

        /**
         * @param queryName Name of the query in Power Query mashup document.
         * 
         * @return builder
         * 
         */
        public Builder queryName(@Nullable Output<String> queryName) {
            $.queryName = queryName;
            return this;
        }

        /**
         * @param queryName Name of the query in Power Query mashup document.
         * 
         * @return builder
         * 
         */
        public Builder queryName(String queryName) {
            return queryName(Output.of(queryName));
        }

        public PowerQuerySinkMappingArgs build() {
            return $;
        }
    }

}
