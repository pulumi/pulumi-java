// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.azurenative.sql.enums.DataMaskingState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DataMaskingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataMaskingPolicyArgs Empty = new DataMaskingPolicyArgs();

    /**
     * The name of the database for which the data masking rule applies.
     * 
     */
    @Import(name="dataMaskingPolicyName")
      private final @Nullable Output<String> dataMaskingPolicyName;

    public Output<String> dataMaskingPolicyName() {
        return this.dataMaskingPolicyName == null ? Codegen.empty() : this.dataMaskingPolicyName;
    }

    /**
     * The state of the data masking policy.
     * 
     */
    @Import(name="dataMaskingState", required=true)
      private final Output<DataMaskingState> dataMaskingState;

    public Output<DataMaskingState> dataMaskingState() {
        return this.dataMaskingState;
    }

    /**
     * The name of the database.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries.
     * 
     */
    @Import(name="exemptPrincipals")
      private final @Nullable Output<String> exemptPrincipals;

    public Output<String> exemptPrincipals() {
        return this.exemptPrincipals == null ? Codegen.empty() : this.exemptPrincipals;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
      private final Output<String> serverName;

    public Output<String> serverName() {
        return this.serverName;
    }

    public DataMaskingPolicyArgs(
        @Nullable Output<String> dataMaskingPolicyName,
        Output<DataMaskingState> dataMaskingState,
        Output<String> databaseName,
        @Nullable Output<String> exemptPrincipals,
        Output<String> resourceGroupName,
        Output<String> serverName) {
        this.dataMaskingPolicyName = dataMaskingPolicyName;
        this.dataMaskingState = Objects.requireNonNull(dataMaskingState, "expected parameter 'dataMaskingState' to be non-null");
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.exemptPrincipals = exemptPrincipals;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
    }

    private DataMaskingPolicyArgs() {
        this.dataMaskingPolicyName = Codegen.empty();
        this.dataMaskingState = Codegen.empty();
        this.databaseName = Codegen.empty();
        this.exemptPrincipals = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.serverName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataMaskingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> dataMaskingPolicyName;
        private Output<DataMaskingState> dataMaskingState;
        private Output<String> databaseName;
        private @Nullable Output<String> exemptPrincipals;
        private Output<String> resourceGroupName;
        private Output<String> serverName;

        public Builder() {
    	      // Empty
        }

        public Builder(DataMaskingPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataMaskingPolicyName = defaults.dataMaskingPolicyName;
    	      this.dataMaskingState = defaults.dataMaskingState;
    	      this.databaseName = defaults.databaseName;
    	      this.exemptPrincipals = defaults.exemptPrincipals;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
        }

        public Builder dataMaskingPolicyName(@Nullable Output<String> dataMaskingPolicyName) {
            this.dataMaskingPolicyName = dataMaskingPolicyName;
            return this;
        }
        public Builder dataMaskingPolicyName(@Nullable String dataMaskingPolicyName) {
            this.dataMaskingPolicyName = Codegen.ofNullable(dataMaskingPolicyName);
            return this;
        }
        public Builder dataMaskingState(Output<DataMaskingState> dataMaskingState) {
            this.dataMaskingState = Objects.requireNonNull(dataMaskingState);
            return this;
        }
        public Builder dataMaskingState(DataMaskingState dataMaskingState) {
            this.dataMaskingState = Output.of(Objects.requireNonNull(dataMaskingState));
            return this;
        }
        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder exemptPrincipals(@Nullable Output<String> exemptPrincipals) {
            this.exemptPrincipals = exemptPrincipals;
            return this;
        }
        public Builder exemptPrincipals(@Nullable String exemptPrincipals) {
            this.exemptPrincipals = Codegen.ofNullable(exemptPrincipals);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serverName(Output<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }
        public Builder serverName(String serverName) {
            this.serverName = Output.of(Objects.requireNonNull(serverName));
            return this;
        }        public DataMaskingPolicyArgs build() {
            return new DataMaskingPolicyArgs(dataMaskingPolicyName, dataMaskingState, databaseName, exemptPrincipals, resourceGroupName, serverName);
        }
    }
}
