// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.StretchMode;
import com.pulumi.azurenative.media.enums.VideoSyncMode;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the basic properties for encoding the input video.
 * 
 */
public final class VideoArgs extends com.pulumi.resources.ResourceArgs {

    public static final VideoArgs Empty = new VideoArgs();

    /**
     * The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
     * 
     */
    @Import(name="keyFrameInterval")
    private @Nullable Output<String> keyFrameInterval;

    /**
     * @return The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
     * 
     */
    public Optional<Output<String>> keyFrameInterval() {
        return Optional.ofNullable(this.keyFrameInterval);
    }

    /**
     * An optional label for the codec. The label can be used to control muxing behavior.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return An optional label for the codec. The label can be used to control muxing behavior.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.Video&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private Output<String> odataType;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.Video&#39;.
     * 
     */
    public Output<String> odataType() {
        return this.odataType;
    }

    /**
     * The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
     * 
     */
    @Import(name="stretchMode")
    private @Nullable Output<Either<String,StretchMode>> stretchMode;

    /**
     * @return The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
     * 
     */
    public Optional<Output<Either<String,StretchMode>>> stretchMode() {
        return Optional.ofNullable(this.stretchMode);
    }

    /**
     * The Video Sync Mode
     * 
     */
    @Import(name="syncMode")
    private @Nullable Output<Either<String,VideoSyncMode>> syncMode;

    /**
     * @return The Video Sync Mode
     * 
     */
    public Optional<Output<Either<String,VideoSyncMode>>> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }

    private VideoArgs() {}

    private VideoArgs(VideoArgs $) {
        this.keyFrameInterval = $.keyFrameInterval;
        this.label = $.label;
        this.odataType = $.odataType;
        this.stretchMode = $.stretchMode;
        this.syncMode = $.syncMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VideoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VideoArgs $;

        public Builder() {
            $ = new VideoArgs();
        }

        public Builder(VideoArgs defaults) {
            $ = new VideoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyFrameInterval The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
         * 
         * @return builder
         * 
         */
        public Builder keyFrameInterval(@Nullable Output<String> keyFrameInterval) {
            $.keyFrameInterval = keyFrameInterval;
            return this;
        }

        /**
         * @param keyFrameInterval The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
         * 
         * @return builder
         * 
         */
        public Builder keyFrameInterval(String keyFrameInterval) {
            return keyFrameInterval(Output.of(keyFrameInterval));
        }

        /**
         * @param label An optional label for the codec. The label can be used to control muxing behavior.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label An optional label for the codec. The label can be used to control muxing behavior.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param odataType The discriminator for derived types.
         * Expected value is &#39;#Microsoft.Media.Video&#39;.
         * 
         * @return builder
         * 
         */
        public Builder odataType(Output<String> odataType) {
            $.odataType = odataType;
            return this;
        }

        /**
         * @param odataType The discriminator for derived types.
         * Expected value is &#39;#Microsoft.Media.Video&#39;.
         * 
         * @return builder
         * 
         */
        public Builder odataType(String odataType) {
            return odataType(Output.of(odataType));
        }

        /**
         * @param stretchMode The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
         * 
         * @return builder
         * 
         */
        public Builder stretchMode(@Nullable Output<Either<String,StretchMode>> stretchMode) {
            $.stretchMode = stretchMode;
            return this;
        }

        /**
         * @param stretchMode The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
         * 
         * @return builder
         * 
         */
        public Builder stretchMode(Either<String,StretchMode> stretchMode) {
            return stretchMode(Output.of(stretchMode));
        }

        /**
         * @param stretchMode The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
         * 
         * @return builder
         * 
         */
        public Builder stretchMode(String stretchMode) {
            return stretchMode(Either.ofLeft(stretchMode));
        }

        /**
         * @param stretchMode The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
         * 
         * @return builder
         * 
         */
        public Builder stretchMode(StretchMode stretchMode) {
            return stretchMode(Either.ofRight(stretchMode));
        }

        /**
         * @param syncMode The Video Sync Mode
         * 
         * @return builder
         * 
         */
        public Builder syncMode(@Nullable Output<Either<String,VideoSyncMode>> syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        /**
         * @param syncMode The Video Sync Mode
         * 
         * @return builder
         * 
         */
        public Builder syncMode(Either<String,VideoSyncMode> syncMode) {
            return syncMode(Output.of(syncMode));
        }

        /**
         * @param syncMode The Video Sync Mode
         * 
         * @return builder
         * 
         */
        public Builder syncMode(String syncMode) {
            return syncMode(Either.ofLeft(syncMode));
        }

        /**
         * @param syncMode The Video Sync Mode
         * 
         * @return builder
         * 
         */
        public Builder syncMode(VideoSyncMode syncMode) {
            return syncMode(Either.ofRight(syncMode));
        }

        public VideoArgs build() {
            $.odataType = Codegen.stringProp("odataType").output().arg($.odataType).require();
            return $;
        }
    }

}
