// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.TrackSelectionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class for content key in Streaming Locator
 * 
 */
public final class StreamingLocatorContentKeyResponse extends com.pulumi.resources.InvokeArgs {

    public static final StreamingLocatorContentKeyResponse Empty = new StreamingLocatorContentKeyResponse();

    /**
     * ID of Content Key
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return ID of Content Key
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Label of Content Key as specified in the Streaming Policy
     * 
     */
    @Import(name="labelReferenceInStreamingPolicy")
    private @Nullable String labelReferenceInStreamingPolicy;

    /**
     * @return Label of Content Key as specified in the Streaming Policy
     * 
     */
    public Optional<String> labelReferenceInStreamingPolicy() {
        return Optional.ofNullable(this.labelReferenceInStreamingPolicy);
    }

    /**
     * ContentKeyPolicy used by Content Key
     * 
     */
    @Import(name="policyName", required=true)
    private String policyName;

    /**
     * @return ContentKeyPolicy used by Content Key
     * 
     */
    public String policyName() {
        return this.policyName;
    }

    /**
     * Tracks which use this Content Key
     * 
     */
    @Import(name="tracks", required=true)
    private List<TrackSelectionResponse> tracks;

    /**
     * @return Tracks which use this Content Key
     * 
     */
    public List<TrackSelectionResponse> tracks() {
        return this.tracks;
    }

    /**
     * Encryption type of Content Key
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Encryption type of Content Key
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Value of Content Key
     * 
     */
    @Import(name="value")
    private @Nullable String value;

    /**
     * @return Value of Content Key
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    private StreamingLocatorContentKeyResponse() {}

    private StreamingLocatorContentKeyResponse(StreamingLocatorContentKeyResponse $) {
        this.id = $.id;
        this.labelReferenceInStreamingPolicy = $.labelReferenceInStreamingPolicy;
        this.policyName = $.policyName;
        this.tracks = $.tracks;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingLocatorContentKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingLocatorContentKeyResponse $;

        public Builder() {
            $ = new StreamingLocatorContentKeyResponse();
        }

        public Builder(StreamingLocatorContentKeyResponse defaults) {
            $ = new StreamingLocatorContentKeyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param id ID of Content Key
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param labelReferenceInStreamingPolicy Label of Content Key as specified in the Streaming Policy
         * 
         * @return builder
         * 
         */
        public Builder labelReferenceInStreamingPolicy(@Nullable String labelReferenceInStreamingPolicy) {
            $.labelReferenceInStreamingPolicy = labelReferenceInStreamingPolicy;
            return this;
        }

        /**
         * @param policyName ContentKeyPolicy used by Content Key
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param tracks Tracks which use this Content Key
         * 
         * @return builder
         * 
         */
        public Builder tracks(List<TrackSelectionResponse> tracks) {
            $.tracks = tracks;
            return this;
        }

        /**
         * @param tracks Tracks which use this Content Key
         * 
         * @return builder
         * 
         */
        public Builder tracks(TrackSelectionResponse... tracks) {
            return tracks(List.of(tracks));
        }

        /**
         * @param type Encryption type of Content Key
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param value Value of Content Key
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable String value) {
            $.value = value;
            return this;
        }

        public StreamingLocatorContentKeyResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.policyName = Objects.requireNonNull($.policyName, "expected parameter 'policyName' to be non-null");
            $.tracks = Objects.requireNonNull($.tracks, "expected parameter 'tracks' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
