// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.azurenative.costmanagement.enums.KpiTypeType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Each KPI must contain a &#39;type&#39; and &#39;enabled&#39; key.
 * 
 */
public final class KpiPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final KpiPropertiesArgs Empty = new KpiPropertiesArgs();

    /**
     * show the KPI in the UI?
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return show the KPI in the UI?
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * ID of resource related to metric (budget).
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of resource related to metric (budget).
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * KPI type (Forecast, Budget).
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,KpiTypeType>> type;

    /**
     * @return KPI type (Forecast, Budget).
     * 
     */
    public Optional<Output<Either<String,KpiTypeType>>> type() {
        return Optional.ofNullable(this.type);
    }

    private KpiPropertiesArgs() {}

    private KpiPropertiesArgs(KpiPropertiesArgs $) {
        this.enabled = $.enabled;
        this.id = $.id;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KpiPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KpiPropertiesArgs $;

        public Builder() {
            $ = new KpiPropertiesArgs();
        }

        public Builder(KpiPropertiesArgs defaults) {
            $ = new KpiPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled show the KPI in the UI?
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled show the KPI in the UI?
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param id ID of resource related to metric (budget).
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of resource related to metric (budget).
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param type KPI type (Forecast, Budget).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,KpiTypeType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type KPI type (Forecast, Budget).
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,KpiTypeType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type KPI type (Forecast, Budget).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type KPI type (Forecast, Budget).
         * 
         * @return builder
         * 
         */
        public Builder type(KpiTypeType type) {
            return type(Either.ofRight(type));
        }

        public KpiPropertiesArgs build() {
            return $;
        }
    }

}
