// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Connector mapping property structure.
 * 
 */
public final class ConnectorMappingStructureResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectorMappingStructureResponse Empty = new ConnectorMappingStructureResponse();

    /**
     * The column name of the import file.
     * 
     */
    @Import(name="columnName", required=true)
    private String columnName;

    /**
     * @return The column name of the import file.
     * 
     */
    public String columnName() {
        return this.columnName;
    }

    /**
     * Custom format specifier for input parsing.
     * 
     */
    @Import(name="customFormatSpecifier")
    private @Nullable String customFormatSpecifier;

    /**
     * @return Custom format specifier for input parsing.
     * 
     */
    public Optional<String> customFormatSpecifier() {
        return Optional.ofNullable(this.customFormatSpecifier);
    }

    /**
     * Indicates if the column is encrypted.
     * 
     */
    @Import(name="isEncrypted")
    private @Nullable Boolean isEncrypted;

    /**
     * @return Indicates if the column is encrypted.
     * 
     */
    public Optional<Boolean> isEncrypted() {
        return Optional.ofNullable(this.isEncrypted);
    }

    /**
     * The property name of the mapping entity.
     * 
     */
    @Import(name="propertyName", required=true)
    private String propertyName;

    /**
     * @return The property name of the mapping entity.
     * 
     */
    public String propertyName() {
        return this.propertyName;
    }

    private ConnectorMappingStructureResponse() {}

    private ConnectorMappingStructureResponse(ConnectorMappingStructureResponse $) {
        this.columnName = $.columnName;
        this.customFormatSpecifier = $.customFormatSpecifier;
        this.isEncrypted = $.isEncrypted;
        this.propertyName = $.propertyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorMappingStructureResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorMappingStructureResponse $;

        public Builder() {
            $ = new ConnectorMappingStructureResponse();
        }

        public Builder(ConnectorMappingStructureResponse defaults) {
            $ = new ConnectorMappingStructureResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnName The column name of the import file.
         * 
         * @return builder
         * 
         */
        public Builder columnName(String columnName) {
            $.columnName = columnName;
            return this;
        }

        /**
         * @param customFormatSpecifier Custom format specifier for input parsing.
         * 
         * @return builder
         * 
         */
        public Builder customFormatSpecifier(@Nullable String customFormatSpecifier) {
            $.customFormatSpecifier = customFormatSpecifier;
            return this;
        }

        /**
         * @param isEncrypted Indicates if the column is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder isEncrypted(@Nullable Boolean isEncrypted) {
            $.isEncrypted = isEncrypted;
            return this;
        }

        /**
         * @param propertyName The property name of the mapping entity.
         * 
         * @return builder
         * 
         */
        public Builder propertyName(String propertyName) {
            $.propertyName = propertyName;
            return this;
        }

        public ConnectorMappingStructureResponse build() {
            $.columnName = Objects.requireNonNull($.columnName, "expected parameter 'columnName' to be non-null");
            $.propertyName = Objects.requireNonNull($.propertyName, "expected parameter 'propertyName' to be non-null");
            return $;
        }
    }

}
