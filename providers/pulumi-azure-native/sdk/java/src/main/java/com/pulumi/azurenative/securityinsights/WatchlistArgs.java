// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights;

import com.pulumi.azurenative.securityinsights.enums.Source;
import com.pulumi.azurenative.securityinsights.inputs.WatchlistUserInfoArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WatchlistArgs extends com.pulumi.resources.ResourceArgs {

    public static final WatchlistArgs Empty = new WatchlistArgs();

    /**
     * The content type of the raw content. Example : text/csv or text/tsv
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * The time the watchlist was created
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Describes a user that created the watchlist
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<WatchlistUserInfoArgs> createdBy;

    public Optional<Output<WatchlistUserInfoArgs>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The default duration of a watchlist (in ISO 8601 duration format)
     * 
     */
    @Import(name="defaultDuration")
    private @Nullable Output<String> defaultDuration;

    public Optional<Output<String>> defaultDuration() {
        return Optional.ofNullable(this.defaultDuration);
    }

    /**
     * A description of the watchlist
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the watchlist
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * A flag that indicates if the watchlist is deleted or not
     * 
     */
    @Import(name="isDeleted")
    private @Nullable Output<Boolean> isDeleted;

    public Optional<Output<Boolean>> isDeleted() {
        return Optional.ofNullable(this.isDeleted);
    }

    /**
     * The search key is used to optimize query performance when using watchlists for joins with other data. For example, enable a column with IP addresses to be the designated SearchKey field, then use this field as the key field when joining to other event data by IP address.
     * 
     */
    @Import(name="itemsSearchKey", required=true)
    private Output<String> itemsSearchKey;

    public Output<String> itemsSearchKey() {
        return this.itemsSearchKey;
    }

    /**
     * List of labels relevant to this watchlist
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The number of lines in a csv/tsv content to skip before the header
     * 
     */
    @Import(name="numberOfLinesToSkip")
    private @Nullable Output<Integer> numberOfLinesToSkip;

    public Optional<Output<Integer>> numberOfLinesToSkip() {
        return Optional.ofNullable(this.numberOfLinesToSkip);
    }

    /**
     * The namespace of workspaces resource provider- Microsoft.OperationalInsights.
     * 
     */
    @Import(name="operationalInsightsResourceProvider", required=true)
    private Output<String> operationalInsightsResourceProvider;

    public Output<String> operationalInsightsResourceProvider() {
        return this.operationalInsightsResourceProvider;
    }

    /**
     * The provider of the watchlist
     * 
     */
    @Import(name="provider", required=true)
    private Output<String> provider;

    public Output<String> provider() {
        return this.provider;
    }

    /**
     * The raw content that represents to watchlist items to create. In case of csv/tsv content type, it&#39;s the content of the file that will parsed by the endpoint
     * 
     */
    @Import(name="rawContent")
    private @Nullable Output<String> rawContent;

    public Optional<Output<String>> rawContent() {
        return Optional.ofNullable(this.rawContent);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The source of the watchlist
     * 
     */
    @Import(name="source", required=true)
    private Output<Either<String,Source>> source;

    public Output<Either<String,Source>> source() {
        return this.source;
    }

    /**
     * The tenantId where the watchlist belongs to
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * The last time the watchlist was updated
     * 
     */
    @Import(name="updated")
    private @Nullable Output<String> updated;

    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    /**
     * Describes a user that updated the watchlist
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<WatchlistUserInfoArgs> updatedBy;

    public Optional<Output<WatchlistUserInfoArgs>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    /**
     * The status of the Watchlist upload : New, InProgress or Complete. Pls note : When a Watchlist upload status is equal to InProgress, the Watchlist cannot be deleted
     * 
     */
    @Import(name="uploadStatus")
    private @Nullable Output<String> uploadStatus;

    public Optional<Output<String>> uploadStatus() {
        return Optional.ofNullable(this.uploadStatus);
    }

    /**
     * The alias of the watchlist
     * 
     */
    @Import(name="watchlistAlias")
    private @Nullable Output<String> watchlistAlias;

    public Optional<Output<String>> watchlistAlias() {
        return Optional.ofNullable(this.watchlistAlias);
    }

    /**
     * The id (a Guid) of the watchlist
     * 
     */
    @Import(name="watchlistId")
    private @Nullable Output<String> watchlistId;

    public Optional<Output<String>> watchlistId() {
        return Optional.ofNullable(this.watchlistId);
    }

    /**
     * The number of Watchlist Items in the Watchlist
     * 
     */
    @Import(name="watchlistItemsCount")
    private @Nullable Output<Integer> watchlistItemsCount;

    public Optional<Output<Integer>> watchlistItemsCount() {
        return Optional.ofNullable(this.watchlistItemsCount);
    }

    /**
     * The type of the watchlist
     * 
     */
    @Import(name="watchlistType")
    private @Nullable Output<String> watchlistType;

    public Optional<Output<String>> watchlistType() {
        return Optional.ofNullable(this.watchlistType);
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private WatchlistArgs() {}

    private WatchlistArgs(WatchlistArgs $) {
        this.contentType = $.contentType;
        this.created = $.created;
        this.createdBy = $.createdBy;
        this.defaultDuration = $.defaultDuration;
        this.description = $.description;
        this.displayName = $.displayName;
        this.isDeleted = $.isDeleted;
        this.itemsSearchKey = $.itemsSearchKey;
        this.labels = $.labels;
        this.numberOfLinesToSkip = $.numberOfLinesToSkip;
        this.operationalInsightsResourceProvider = $.operationalInsightsResourceProvider;
        this.provider = $.provider;
        this.rawContent = $.rawContent;
        this.resourceGroupName = $.resourceGroupName;
        this.source = $.source;
        this.tenantId = $.tenantId;
        this.updated = $.updated;
        this.updatedBy = $.updatedBy;
        this.uploadStatus = $.uploadStatus;
        this.watchlistAlias = $.watchlistAlias;
        this.watchlistId = $.watchlistId;
        this.watchlistItemsCount = $.watchlistItemsCount;
        this.watchlistType = $.watchlistType;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WatchlistArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WatchlistArgs $;

        public Builder() {
            $ = new WatchlistArgs();
        }

        public Builder(WatchlistArgs defaults) {
            $ = new WatchlistArgs(Objects.requireNonNull(defaults));
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        public Builder created(String created) {
            return created(Output.of(created));
        }

        public Builder createdBy(@Nullable Output<WatchlistUserInfoArgs> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(WatchlistUserInfoArgs createdBy) {
            return createdBy(Output.of(createdBy));
        }

        public Builder defaultDuration(@Nullable Output<String> defaultDuration) {
            $.defaultDuration = defaultDuration;
            return this;
        }

        public Builder defaultDuration(String defaultDuration) {
            return defaultDuration(Output.of(defaultDuration));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder isDeleted(@Nullable Output<Boolean> isDeleted) {
            $.isDeleted = isDeleted;
            return this;
        }

        public Builder isDeleted(Boolean isDeleted) {
            return isDeleted(Output.of(isDeleted));
        }

        public Builder itemsSearchKey(Output<String> itemsSearchKey) {
            $.itemsSearchKey = itemsSearchKey;
            return this;
        }

        public Builder itemsSearchKey(String itemsSearchKey) {
            return itemsSearchKey(Output.of(itemsSearchKey));
        }

        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        public Builder numberOfLinesToSkip(@Nullable Output<Integer> numberOfLinesToSkip) {
            $.numberOfLinesToSkip = numberOfLinesToSkip;
            return this;
        }

        public Builder numberOfLinesToSkip(Integer numberOfLinesToSkip) {
            return numberOfLinesToSkip(Output.of(numberOfLinesToSkip));
        }

        public Builder operationalInsightsResourceProvider(Output<String> operationalInsightsResourceProvider) {
            $.operationalInsightsResourceProvider = operationalInsightsResourceProvider;
            return this;
        }

        public Builder operationalInsightsResourceProvider(String operationalInsightsResourceProvider) {
            return operationalInsightsResourceProvider(Output.of(operationalInsightsResourceProvider));
        }

        public Builder provider(Output<String> provider) {
            $.provider = provider;
            return this;
        }

        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        public Builder rawContent(@Nullable Output<String> rawContent) {
            $.rawContent = rawContent;
            return this;
        }

        public Builder rawContent(String rawContent) {
            return rawContent(Output.of(rawContent));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder source(Output<Either<String,Source>> source) {
            $.source = source;
            return this;
        }

        public Builder source(Either<String,Source> source) {
            return source(Output.of(source));
        }

        public Builder source(String source) {
            return source(Either.ofLeft(source));
        }

        public Builder source(Source source) {
            return source(Either.ofRight(source));
        }

        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public Builder updatedBy(@Nullable Output<WatchlistUserInfoArgs> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        public Builder updatedBy(WatchlistUserInfoArgs updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        public Builder uploadStatus(@Nullable Output<String> uploadStatus) {
            $.uploadStatus = uploadStatus;
            return this;
        }

        public Builder uploadStatus(String uploadStatus) {
            return uploadStatus(Output.of(uploadStatus));
        }

        public Builder watchlistAlias(@Nullable Output<String> watchlistAlias) {
            $.watchlistAlias = watchlistAlias;
            return this;
        }

        public Builder watchlistAlias(String watchlistAlias) {
            return watchlistAlias(Output.of(watchlistAlias));
        }

        public Builder watchlistId(@Nullable Output<String> watchlistId) {
            $.watchlistId = watchlistId;
            return this;
        }

        public Builder watchlistId(String watchlistId) {
            return watchlistId(Output.of(watchlistId));
        }

        public Builder watchlistItemsCount(@Nullable Output<Integer> watchlistItemsCount) {
            $.watchlistItemsCount = watchlistItemsCount;
            return this;
        }

        public Builder watchlistItemsCount(Integer watchlistItemsCount) {
            return watchlistItemsCount(Output.of(watchlistItemsCount));
        }

        public Builder watchlistType(@Nullable Output<String> watchlistType) {
            $.watchlistType = watchlistType;
            return this;
        }

        public Builder watchlistType(String watchlistType) {
            return watchlistType(Output.of(watchlistType));
        }

        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public WatchlistArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.itemsSearchKey = Objects.requireNonNull($.itemsSearchKey, "expected parameter 'itemsSearchKey' to be non-null");
            $.operationalInsightsResourceProvider = Objects.requireNonNull($.operationalInsightsResourceProvider, "expected parameter 'operationalInsightsResourceProvider' to be non-null");
            $.provider = Objects.requireNonNull($.provider, "expected parameter 'provider' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
