// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.inputs;

import com.pulumi.azurenative.migrate.enums.ProvisioningState;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class for migrate project properties.
 * 
 */
public final class MigrateProjectPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrateProjectPropertiesArgs Empty = new MigrateProjectPropertiesArgs();

    /**
     * Provisioning state of the migrate project.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable Output<Either<String,ProvisioningState>> provisioningState;

    /**
     * @return Provisioning state of the migrate project.
     * 
     */
    public Optional<Output<Either<String,ProvisioningState>>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * Gets or sets the list of tools registered with the migrate project.
     * 
     */
    @Import(name="registeredTools")
    private @Nullable Output<List<String>> registeredTools;

    /**
     * @return Gets or sets the list of tools registered with the migrate project.
     * 
     */
    public Optional<Output<List<String>>> registeredTools() {
        return Optional.ofNullable(this.registeredTools);
    }

    private MigrateProjectPropertiesArgs() {}

    private MigrateProjectPropertiesArgs(MigrateProjectPropertiesArgs $) {
        this.provisioningState = $.provisioningState;
        this.registeredTools = $.registeredTools;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateProjectPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateProjectPropertiesArgs $;

        public Builder() {
            $ = new MigrateProjectPropertiesArgs();
        }

        public Builder(MigrateProjectPropertiesArgs defaults) {
            $ = new MigrateProjectPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param provisioningState Provisioning state of the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(@Nullable Output<Either<String,ProvisioningState>> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param provisioningState Provisioning state of the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(Either<String,ProvisioningState> provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        /**
         * @param provisioningState Provisioning state of the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            return provisioningState(Either.ofLeft(provisioningState));
        }

        /**
         * @param provisioningState Provisioning state of the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(ProvisioningState provisioningState) {
            return provisioningState(Either.ofRight(provisioningState));
        }

        /**
         * @param registeredTools Gets or sets the list of tools registered with the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder registeredTools(@Nullable Output<List<String>> registeredTools) {
            $.registeredTools = registeredTools;
            return this;
        }

        /**
         * @param registeredTools Gets or sets the list of tools registered with the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder registeredTools(List<String> registeredTools) {
            return registeredTools(Output.of(registeredTools));
        }

        /**
         * @param registeredTools Gets or sets the list of tools registered with the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder registeredTools(String... registeredTools) {
            return registeredTools(List.of(registeredTools));
        }

        public MigrateProjectPropertiesArgs build() {
            return $;
        }
    }

}
