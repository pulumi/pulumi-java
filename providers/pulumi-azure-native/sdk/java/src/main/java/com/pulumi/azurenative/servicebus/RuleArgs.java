// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicebus;

import com.pulumi.azurenative.servicebus.enums.FilterType;
import com.pulumi.azurenative.servicebus.inputs.ActionArgs;
import com.pulumi.azurenative.servicebus.inputs.CorrelationFilterArgs;
import com.pulumi.azurenative.servicebus.inputs.SqlFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleArgs Empty = new RuleArgs();

    /**
     * Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
     * 
     */
    @Import(name="action")
    private @Nullable Output<ActionArgs> action;

    public Optional<Output<ActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Properties of correlationFilter
     * 
     */
    @Import(name="correlationFilter")
    private @Nullable Output<CorrelationFilterArgs> correlationFilter;

    public Optional<Output<CorrelationFilterArgs>> correlationFilter() {
        return Optional.ofNullable(this.correlationFilter);
    }

    /**
     * Filter type that is evaluated against a BrokeredMessage.
     * 
     */
    @Import(name="filterType")
    private @Nullable Output<FilterType> filterType;

    public Optional<Output<FilterType>> filterType() {
        return Optional.ofNullable(this.filterType);
    }

    /**
     * The namespace name
     * 
     */
    @Import(name="namespaceName", required=true)
    private Output<String> namespaceName;

    public Output<String> namespaceName() {
        return this.namespaceName;
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The rule name.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * Properties of sqlFilter
     * 
     */
    @Import(name="sqlFilter")
    private @Nullable Output<SqlFilterArgs> sqlFilter;

    public Optional<Output<SqlFilterArgs>> sqlFilter() {
        return Optional.ofNullable(this.sqlFilter);
    }

    /**
     * The subscription name.
     * 
     */
    @Import(name="subscriptionName", required=true)
    private Output<String> subscriptionName;

    public Output<String> subscriptionName() {
        return this.subscriptionName;
    }

    /**
     * The topic name.
     * 
     */
    @Import(name="topicName", required=true)
    private Output<String> topicName;

    public Output<String> topicName() {
        return this.topicName;
    }

    private RuleArgs() {}

    private RuleArgs(RuleArgs $) {
        this.action = $.action;
        this.correlationFilter = $.correlationFilter;
        this.filterType = $.filterType;
        this.namespaceName = $.namespaceName;
        this.resourceGroupName = $.resourceGroupName;
        this.ruleName = $.ruleName;
        this.sqlFilter = $.sqlFilter;
        this.subscriptionName = $.subscriptionName;
        this.topicName = $.topicName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleArgs $;

        public Builder() {
            $ = new RuleArgs();
        }

        public Builder(RuleArgs defaults) {
            $ = new RuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder action(@Nullable Output<ActionArgs> action) {
            $.action = action;
            return this;
        }

        public Builder action(ActionArgs action) {
            return action(Output.of(action));
        }

        public Builder correlationFilter(@Nullable Output<CorrelationFilterArgs> correlationFilter) {
            $.correlationFilter = correlationFilter;
            return this;
        }

        public Builder correlationFilter(CorrelationFilterArgs correlationFilter) {
            return correlationFilter(Output.of(correlationFilter));
        }

        public Builder filterType(@Nullable Output<FilterType> filterType) {
            $.filterType = filterType;
            return this;
        }

        public Builder filterType(FilterType filterType) {
            return filterType(Output.of(filterType));
        }

        public Builder namespaceName(Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        public Builder sqlFilter(@Nullable Output<SqlFilterArgs> sqlFilter) {
            $.sqlFilter = sqlFilter;
            return this;
        }

        public Builder sqlFilter(SqlFilterArgs sqlFilter) {
            return sqlFilter(Output.of(sqlFilter));
        }

        public Builder subscriptionName(Output<String> subscriptionName) {
            $.subscriptionName = subscriptionName;
            return this;
        }

        public Builder subscriptionName(String subscriptionName) {
            return subscriptionName(Output.of(subscriptionName));
        }

        public Builder topicName(Output<String> topicName) {
            $.topicName = topicName;
            return this;
        }

        public Builder topicName(String topicName) {
            return topicName(Output.of(topicName));
        }

        public RuleArgs build() {
            $.namespaceName = Objects.requireNonNull($.namespaceName, "expected parameter 'namespaceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.subscriptionName = Objects.requireNonNull($.subscriptionName, "expected parameter 'subscriptionName' to be non-null");
            $.topicName = Objects.requireNonNull($.topicName, "expected parameter 'topicName' to be non-null");
            return $;
        }
    }

}
