// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.keyvault;

import com.pulumi.azurenative.keyvault.inputs.SecretPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretArgs Empty = new SecretArgs();

    /**
     * Properties of the secret
     * 
     */
    @Import(name="properties", required=true)
      private final Output<SecretPropertiesArgs> properties;

    public Output<SecretPropertiesArgs> properties() {
        return this.properties;
    }

    /**
     * The name of the Resource Group to which the vault belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the secret
     * 
     */
    @Import(name="secretName")
      private final @Nullable Output<String> secretName;

    public Output<String> secretName() {
        return this.secretName == null ? Codegen.empty() : this.secretName;
    }

    /**
     * The tags that will be assigned to the secret.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Name of the vault
     * 
     */
    @Import(name="vaultName", required=true)
      private final Output<String> vaultName;

    public Output<String> vaultName() {
        return this.vaultName;
    }

    public SecretArgs(
        Output<SecretPropertiesArgs> properties,
        Output<String> resourceGroupName,
        @Nullable Output<String> secretName,
        @Nullable Output<Map<String,String>> tags,
        Output<String> vaultName) {
        this.properties = Objects.requireNonNull(properties, "expected parameter 'properties' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.secretName = secretName;
        this.tags = tags;
        this.vaultName = Objects.requireNonNull(vaultName, "expected parameter 'vaultName' to be non-null");
    }

    private SecretArgs() {
        this.properties = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.secretName = Codegen.empty();
        this.tags = Codegen.empty();
        this.vaultName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<SecretPropertiesArgs> properties;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> secretName;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> vaultName;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.properties = defaults.properties;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secretName = defaults.secretName;
    	      this.tags = defaults.tags;
    	      this.vaultName = defaults.vaultName;
        }

        public Builder properties(Output<SecretPropertiesArgs> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        public Builder properties(SecretPropertiesArgs properties) {
            this.properties = Output.of(Objects.requireNonNull(properties));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder secretName(@Nullable Output<String> secretName) {
            this.secretName = secretName;
            return this;
        }
        public Builder secretName(@Nullable String secretName) {
            this.secretName = Codegen.ofNullable(secretName);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder vaultName(Output<String> vaultName) {
            this.vaultName = Objects.requireNonNull(vaultName);
            return this;
        }
        public Builder vaultName(String vaultName) {
            this.vaultName = Output.of(Objects.requireNonNull(vaultName));
            return this;
        }        public SecretArgs build() {
            return new SecretArgs(properties, resourceGroupName, secretName, tags, vaultName);
        }
    }
}
