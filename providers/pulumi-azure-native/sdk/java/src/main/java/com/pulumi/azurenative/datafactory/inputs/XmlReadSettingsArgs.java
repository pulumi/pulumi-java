// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.TarGZipReadSettingsArgs;
import com.pulumi.azurenative.datafactory.inputs.TarReadSettingsArgs;
import com.pulumi.azurenative.datafactory.inputs.ZipDeflateReadSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Xml read settings.
 * 
 */
public final class XmlReadSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final XmlReadSettingsArgs Empty = new XmlReadSettingsArgs();

    /**
     * Compression settings.
     * 
     */
    @Import(name="compressionProperties")
    private @Nullable Output<Object> compressionProperties;

    public Optional<Output<Object>> compressionProperties() {
        return Optional.ofNullable(this.compressionProperties);
    }

    /**
     * Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="detectDataType")
    private @Nullable Output<Object> detectDataType;

    public Optional<Output<Object>> detectDataType() {
        return Optional.ofNullable(this.detectDataType);
    }

    /**
     * Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: &#34;{&#34;http://www.example.com/xml&#34;:&#34;prefix&#34;}&#34; Type: object (or Expression with resultType object).
     * 
     */
    @Import(name="namespacePrefixes")
    private @Nullable Output<Object> namespacePrefixes;

    public Optional<Output<Object>> namespacePrefixes() {
        return Optional.ofNullable(this.namespacePrefixes);
    }

    /**
     * Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="namespaces")
    private @Nullable Output<Object> namespaces;

    public Optional<Output<Object>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    /**
     * The read setting type.
     * Expected value is &#39;XmlReadSettings&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * Indicates what validation method is used when reading the xml files. Allowed values: &#39;none&#39;, &#39;xsd&#39;, or &#39;dtd&#39;. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="validationMode")
    private @Nullable Output<Object> validationMode;

    public Optional<Output<Object>> validationMode() {
        return Optional.ofNullable(this.validationMode);
    }

    private XmlReadSettingsArgs() {}

    private XmlReadSettingsArgs(XmlReadSettingsArgs $) {
        this.compressionProperties = $.compressionProperties;
        this.detectDataType = $.detectDataType;
        this.namespacePrefixes = $.namespacePrefixes;
        this.namespaces = $.namespaces;
        this.type = $.type;
        this.validationMode = $.validationMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(XmlReadSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private XmlReadSettingsArgs $;

        public Builder() {
            $ = new XmlReadSettingsArgs();
        }

        public Builder(XmlReadSettingsArgs defaults) {
            $ = new XmlReadSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder compressionProperties(@Nullable Output<Object> compressionProperties) {
            $.compressionProperties = compressionProperties;
            return this;
        }

        public Builder compressionProperties(Object compressionProperties) {
            return compressionProperties(Output.of(compressionProperties));
        }

        public Builder detectDataType(@Nullable Output<Object> detectDataType) {
            $.detectDataType = detectDataType;
            return this;
        }

        public Builder detectDataType(Object detectDataType) {
            return detectDataType(Output.of(detectDataType));
        }

        public Builder namespacePrefixes(@Nullable Output<Object> namespacePrefixes) {
            $.namespacePrefixes = namespacePrefixes;
            return this;
        }

        public Builder namespacePrefixes(Object namespacePrefixes) {
            return namespacePrefixes(Output.of(namespacePrefixes));
        }

        public Builder namespaces(@Nullable Output<Object> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        public Builder namespaces(Object namespaces) {
            return namespaces(Output.of(namespaces));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder validationMode(@Nullable Output<Object> validationMode) {
            $.validationMode = validationMode;
            return this;
        }

        public Builder validationMode(Object validationMode) {
            return validationMode(Output.of(validationMode));
        }

        public XmlReadSettingsArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
