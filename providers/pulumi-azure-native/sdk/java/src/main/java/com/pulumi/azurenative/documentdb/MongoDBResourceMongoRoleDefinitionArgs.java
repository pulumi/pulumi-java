// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb;

import com.pulumi.azurenative.documentdb.enums.MongoRoleDefinitionType;
import com.pulumi.azurenative.documentdb.inputs.PrivilegeArgs;
import com.pulumi.azurenative.documentdb.inputs.RoleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoDBResourceMongoRoleDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MongoDBResourceMongoRoleDefinitionArgs Empty = new MongoDBResourceMongoRoleDefinitionArgs();

    /**
     * Cosmos DB database account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The database name for which access is being granted for this Role Definition.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * The ID for the Role Definition {dbName.roleName}.
     * 
     */
    @Import(name="mongoRoleDefinitionId")
    private @Nullable Output<String> mongoRoleDefinitionId;

    public Optional<Output<String>> mongoRoleDefinitionId() {
        return Optional.ofNullable(this.mongoRoleDefinitionId);
    }

    /**
     * A set of privileges contained by the Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Scopes higher than Database are not enforceable as privilege.
     * 
     */
    @Import(name="privileges")
    private @Nullable Output<List<PrivilegeArgs>> privileges;

    public Optional<Output<List<PrivilegeArgs>>> privileges() {
        return Optional.ofNullable(this.privileges);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A user-friendly name for the Role Definition. Must be unique for the database account.
     * 
     */
    @Import(name="roleName")
    private @Nullable Output<String> roleName;

    public Optional<Output<String>> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    /**
     * The set of roles inherited by this Role Definition.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<RoleArgs>> roles;

    public Optional<Output<List<RoleArgs>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * Indicates whether the Role Definition was built-in or user created.
     * 
     */
    @Import(name="type")
    private @Nullable Output<MongoRoleDefinitionType> type;

    public Optional<Output<MongoRoleDefinitionType>> type() {
        return Optional.ofNullable(this.type);
    }

    private MongoDBResourceMongoRoleDefinitionArgs() {}

    private MongoDBResourceMongoRoleDefinitionArgs(MongoDBResourceMongoRoleDefinitionArgs $) {
        this.accountName = $.accountName;
        this.databaseName = $.databaseName;
        this.mongoRoleDefinitionId = $.mongoRoleDefinitionId;
        this.privileges = $.privileges;
        this.resourceGroupName = $.resourceGroupName;
        this.roleName = $.roleName;
        this.roles = $.roles;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoDBResourceMongoRoleDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoDBResourceMongoRoleDefinitionArgs $;

        public Builder() {
            $ = new MongoDBResourceMongoRoleDefinitionArgs();
        }

        public Builder(MongoDBResourceMongoRoleDefinitionArgs defaults) {
            $ = new MongoDBResourceMongoRoleDefinitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder mongoRoleDefinitionId(@Nullable Output<String> mongoRoleDefinitionId) {
            $.mongoRoleDefinitionId = mongoRoleDefinitionId;
            return this;
        }

        public Builder mongoRoleDefinitionId(String mongoRoleDefinitionId) {
            return mongoRoleDefinitionId(Output.of(mongoRoleDefinitionId));
        }

        public Builder privileges(@Nullable Output<List<PrivilegeArgs>> privileges) {
            $.privileges = privileges;
            return this;
        }

        public Builder privileges(List<PrivilegeArgs> privileges) {
            return privileges(Output.of(privileges));
        }

        public Builder privileges(PrivilegeArgs... privileges) {
            return privileges(List.of(privileges));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder roleName(@Nullable Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        public Builder roles(@Nullable Output<List<RoleArgs>> roles) {
            $.roles = roles;
            return this;
        }

        public Builder roles(List<RoleArgs> roles) {
            return roles(Output.of(roles));
        }

        public Builder roles(RoleArgs... roles) {
            return roles(List.of(roles));
        }

        public Builder type(@Nullable Output<MongoRoleDefinitionType> type) {
            $.type = type;
            return this;
        }

        public Builder type(MongoRoleDefinitionType type) {
            return type(Output.of(type));
        }

        public MongoDBResourceMongoRoleDefinitionArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
