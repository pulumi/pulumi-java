// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.azurearcdata.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of SqlServerInstance.
 * 
 */
public final class SqlServerInstancePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlServerInstancePropertiesArgs Empty = new SqlServerInstancePropertiesArgs();

    /**
     * SQL Server collation.
     * 
     */
    @Import(name="collation")
    private @Nullable Output<String> collation;

    public Optional<Output<String>> collation() {
        return Optional.ofNullable(this.collation);
    }

    /**
     * ARM Resource id of the container resource (Azure Arc for Servers).
     * 
     */
    @Import(name="containerResourceId", required=true)
    private Output<String> containerResourceId;

    public Output<String> containerResourceId() {
        return this.containerResourceId;
    }

    /**
     * SQL Server current version.
     * 
     */
    @Import(name="currentVersion")
    private @Nullable Output<String> currentVersion;

    public Optional<Output<String>> currentVersion() {
        return Optional.ofNullable(this.currentVersion);
    }

    /**
     * SQL Server edition.
     * 
     */
    @Import(name="edition")
    private @Nullable Output<String> edition;

    public Optional<Output<String>> edition() {
        return Optional.ofNullable(this.edition);
    }

    /**
     * SQL Server instance name.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * SQL Server license type.
     * 
     */
    @Import(name="licenseType")
    private @Nullable Output<String> licenseType;

    public Optional<Output<String>> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * SQL Server update level.
     * 
     */
    @Import(name="patchLevel")
    private @Nullable Output<String> patchLevel;

    public Optional<Output<String>> patchLevel() {
        return Optional.ofNullable(this.patchLevel);
    }

    /**
     * SQL Server product ID.
     * 
     */
    @Import(name="productId")
    private @Nullable Output<String> productId;

    public Optional<Output<String>> productId() {
        return Optional.ofNullable(this.productId);
    }

    /**
     * The cloud connectivity status.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    public Output<String> status() {
        return this.status;
    }

    /**
     * Dynamic TCP ports used by SQL Server.
     * 
     */
    @Import(name="tcpDynamicPorts")
    private @Nullable Output<String> tcpDynamicPorts;

    public Optional<Output<String>> tcpDynamicPorts() {
        return Optional.ofNullable(this.tcpDynamicPorts);
    }

    /**
     * Static TCP ports used by SQL Server.
     * 
     */
    @Import(name="tcpStaticPorts")
    private @Nullable Output<String> tcpStaticPorts;

    public Optional<Output<String>> tcpStaticPorts() {
        return Optional.ofNullable(this.tcpStaticPorts);
    }

    /**
     * The number of logical processors used by the SQL Server instance.
     * 
     */
    @Import(name="vCore")
    private @Nullable Output<String> vCore;

    public Optional<Output<String>> vCore() {
        return Optional.ofNullable(this.vCore);
    }

    /**
     * SQL Server version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private SqlServerInstancePropertiesArgs() {}

    private SqlServerInstancePropertiesArgs(SqlServerInstancePropertiesArgs $) {
        this.collation = $.collation;
        this.containerResourceId = $.containerResourceId;
        this.currentVersion = $.currentVersion;
        this.edition = $.edition;
        this.instanceName = $.instanceName;
        this.licenseType = $.licenseType;
        this.patchLevel = $.patchLevel;
        this.productId = $.productId;
        this.status = $.status;
        this.tcpDynamicPorts = $.tcpDynamicPorts;
        this.tcpStaticPorts = $.tcpStaticPorts;
        this.vCore = $.vCore;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlServerInstancePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlServerInstancePropertiesArgs $;

        public Builder() {
            $ = new SqlServerInstancePropertiesArgs();
        }

        public Builder(SqlServerInstancePropertiesArgs defaults) {
            $ = new SqlServerInstancePropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder collation(@Nullable Output<String> collation) {
            $.collation = collation;
            return this;
        }

        public Builder collation(String collation) {
            return collation(Output.of(collation));
        }

        public Builder containerResourceId(Output<String> containerResourceId) {
            $.containerResourceId = containerResourceId;
            return this;
        }

        public Builder containerResourceId(String containerResourceId) {
            return containerResourceId(Output.of(containerResourceId));
        }

        public Builder currentVersion(@Nullable Output<String> currentVersion) {
            $.currentVersion = currentVersion;
            return this;
        }

        public Builder currentVersion(String currentVersion) {
            return currentVersion(Output.of(currentVersion));
        }

        public Builder edition(@Nullable Output<String> edition) {
            $.edition = edition;
            return this;
        }

        public Builder edition(String edition) {
            return edition(Output.of(edition));
        }

        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        public Builder licenseType(@Nullable Output<String> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        public Builder licenseType(String licenseType) {
            return licenseType(Output.of(licenseType));
        }

        public Builder patchLevel(@Nullable Output<String> patchLevel) {
            $.patchLevel = patchLevel;
            return this;
        }

        public Builder patchLevel(String patchLevel) {
            return patchLevel(Output.of(patchLevel));
        }

        public Builder productId(@Nullable Output<String> productId) {
            $.productId = productId;
            return this;
        }

        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tcpDynamicPorts(@Nullable Output<String> tcpDynamicPorts) {
            $.tcpDynamicPorts = tcpDynamicPorts;
            return this;
        }

        public Builder tcpDynamicPorts(String tcpDynamicPorts) {
            return tcpDynamicPorts(Output.of(tcpDynamicPorts));
        }

        public Builder tcpStaticPorts(@Nullable Output<String> tcpStaticPorts) {
            $.tcpStaticPorts = tcpStaticPorts;
            return this;
        }

        public Builder tcpStaticPorts(String tcpStaticPorts) {
            return tcpStaticPorts(Output.of(tcpStaticPorts));
        }

        public Builder vCore(@Nullable Output<String> vCore) {
            $.vCore = vCore;
            return this;
        }

        public Builder vCore(String vCore) {
            return vCore(Output.of(vCore));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public SqlServerInstancePropertiesArgs build() {
            $.containerResourceId = Objects.requireNonNull($.containerResourceId, "expected parameter 'containerResourceId' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
