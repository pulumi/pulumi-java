// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.education;

import com.pulumi.azurenative.education.inputs.AmountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLabArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetLabArgs Empty = new GetLabArgs();

    /**
     * Billing account name.
     * 
     */
    @Import(name="billingAccountName", required=true)
    private Output<String> billingAccountName;

    /**
     * @return Billing account name.
     * 
     */
    public Output<String> billingAccountName() {
        return this.billingAccountName;
    }

    /**
     * Billing profile name.
     * 
     */
    @Import(name="billingProfileName", required=true)
    private Output<String> billingProfileName;

    /**
     * @return Billing profile name.
     * 
     */
    public Output<String> billingProfileName() {
        return this.billingProfileName;
    }

    /**
     * Default monetary cap for each student in this lab
     * 
     */
    @Import(name="budgetPerStudent", required=true)
    private Output<AmountArgs> budgetPerStudent;

    /**
     * @return Default monetary cap for each student in this lab
     * 
     */
    public Output<AmountArgs> budgetPerStudent() {
        return this.budgetPerStudent;
    }

    /**
     * The type of currency being used for the value.
     * 
     */
    @Import(name="currency")
    private @Nullable Output<String> currency;

    /**
     * @return The type of currency being used for the value.
     * 
     */
    public Optional<Output<String>> currency() {
        return Optional.ofNullable(this.currency);
    }

    /**
     * Detail description of this lab
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Detail description of this lab
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Lab Display Name
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Lab Display Name
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Default expiration date for each student in this lab
     * 
     */
    @Import(name="expirationDate", required=true)
    private Output<String> expirationDate;

    /**
     * @return Default expiration date for each student in this lab
     * 
     */
    public Output<String> expirationDate() {
        return this.expirationDate;
    }

    /**
     * Invoice section name.
     * 
     */
    @Import(name="invoiceSectionName", required=true)
    private Output<String> invoiceSectionName;

    /**
     * @return Invoice section name.
     * 
     */
    public Output<String> invoiceSectionName() {
        return this.invoiceSectionName;
    }

    /**
     * Amount value.
     * 
     */
    @Import(name="value")
    private @Nullable Output<Double> value;

    /**
     * @return Amount value.
     * 
     */
    public Optional<Output<Double>> value() {
        return Optional.ofNullable(this.value);
    }

    private GetLabArgs() {}

    private GetLabArgs(GetLabArgs $) {
        this.billingAccountName = $.billingAccountName;
        this.billingProfileName = $.billingProfileName;
        this.budgetPerStudent = $.budgetPerStudent;
        this.currency = $.currency;
        this.description = $.description;
        this.displayName = $.displayName;
        this.expirationDate = $.expirationDate;
        this.invoiceSectionName = $.invoiceSectionName;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLabArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLabArgs $;

        public Builder() {
            $ = new GetLabArgs();
        }

        public Builder(GetLabArgs defaults) {
            $ = new GetLabArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param billingAccountName Billing account name.
         * 
         * @return builder
         * 
         */
        public Builder billingAccountName(Output<String> billingAccountName) {
            $.billingAccountName = billingAccountName;
            return this;
        }

        /**
         * @param billingAccountName Billing account name.
         * 
         * @return builder
         * 
         */
        public Builder billingAccountName(String billingAccountName) {
            return billingAccountName(Output.of(billingAccountName));
        }

        /**
         * @param billingProfileName Billing profile name.
         * 
         * @return builder
         * 
         */
        public Builder billingProfileName(Output<String> billingProfileName) {
            $.billingProfileName = billingProfileName;
            return this;
        }

        /**
         * @param billingProfileName Billing profile name.
         * 
         * @return builder
         * 
         */
        public Builder billingProfileName(String billingProfileName) {
            return billingProfileName(Output.of(billingProfileName));
        }

        /**
         * @param budgetPerStudent Default monetary cap for each student in this lab
         * 
         * @return builder
         * 
         */
        public Builder budgetPerStudent(Output<AmountArgs> budgetPerStudent) {
            $.budgetPerStudent = budgetPerStudent;
            return this;
        }

        /**
         * @param budgetPerStudent Default monetary cap for each student in this lab
         * 
         * @return builder
         * 
         */
        public Builder budgetPerStudent(AmountArgs budgetPerStudent) {
            return budgetPerStudent(Output.of(budgetPerStudent));
        }

        /**
         * @param currency The type of currency being used for the value.
         * 
         * @return builder
         * 
         */
        public Builder currency(@Nullable Output<String> currency) {
            $.currency = currency;
            return this;
        }

        /**
         * @param currency The type of currency being used for the value.
         * 
         * @return builder
         * 
         */
        public Builder currency(String currency) {
            return currency(Output.of(currency));
        }

        /**
         * @param description Detail description of this lab
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Detail description of this lab
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Lab Display Name
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Lab Display Name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param expirationDate Default expiration date for each student in this lab
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate Default expiration date for each student in this lab
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param invoiceSectionName Invoice section name.
         * 
         * @return builder
         * 
         */
        public Builder invoiceSectionName(Output<String> invoiceSectionName) {
            $.invoiceSectionName = invoiceSectionName;
            return this;
        }

        /**
         * @param invoiceSectionName Invoice section name.
         * 
         * @return builder
         * 
         */
        public Builder invoiceSectionName(String invoiceSectionName) {
            return invoiceSectionName(Output.of(invoiceSectionName));
        }

        /**
         * @param value Amount value.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Double> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Amount value.
         * 
         * @return builder
         * 
         */
        public Builder value(Double value) {
            return value(Output.of(value));
        }

        public GetLabArgs build() {
            $.billingAccountName = Objects.requireNonNull($.billingAccountName, "expected parameter 'billingAccountName' to be non-null");
            $.billingProfileName = Objects.requireNonNull($.billingProfileName, "expected parameter 'billingProfileName' to be non-null");
            $.budgetPerStudent = Objects.requireNonNull($.budgetPerStudent, "expected parameter 'budgetPerStudent' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.expirationDate = Objects.requireNonNull($.expirationDate, "expected parameter 'expirationDate' to be non-null");
            $.invoiceSectionName = Objects.requireNonNull($.invoiceSectionName, "expected parameter 'invoiceSectionName' to be non-null");
            return $;
        }
    }

}
