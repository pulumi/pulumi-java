// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.ChannelMapping;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A TrackSelection to select audio tracks.
 * 
 */
public final class AudioTrackDescriptorArgs extends com.pulumi.resources.ResourceArgs {

    public static final AudioTrackDescriptorArgs Empty = new AudioTrackDescriptorArgs();

    /**
     * Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
     * 
     */
    @Import(name="channelMapping")
    private @Nullable Output<Either<String,ChannelMapping>> channelMapping;

    /**
     * @return Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
     * 
     */
    public Optional<Output<Either<String,ChannelMapping>>> channelMapping() {
        return Optional.ofNullable(this.channelMapping);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.AudioTrackDescriptor&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private Output<String> odataType;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.AudioTrackDescriptor&#39;.
     * 
     */
    public Output<String> odataType() {
        return this.odataType;
    }

    private AudioTrackDescriptorArgs() {}

    private AudioTrackDescriptorArgs(AudioTrackDescriptorArgs $) {
        this.channelMapping = $.channelMapping;
        this.odataType = $.odataType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AudioTrackDescriptorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AudioTrackDescriptorArgs $;

        public Builder() {
            $ = new AudioTrackDescriptorArgs();
        }

        public Builder(AudioTrackDescriptorArgs defaults) {
            $ = new AudioTrackDescriptorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param channelMapping Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
         * 
         * @return builder
         * 
         */
        public Builder channelMapping(@Nullable Output<Either<String,ChannelMapping>> channelMapping) {
            $.channelMapping = channelMapping;
            return this;
        }

        /**
         * @param channelMapping Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
         * 
         * @return builder
         * 
         */
        public Builder channelMapping(Either<String,ChannelMapping> channelMapping) {
            return channelMapping(Output.of(channelMapping));
        }

        /**
         * @param channelMapping Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
         * 
         * @return builder
         * 
         */
        public Builder channelMapping(String channelMapping) {
            return channelMapping(Either.ofLeft(channelMapping));
        }

        /**
         * @param channelMapping Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
         * 
         * @return builder
         * 
         */
        public Builder channelMapping(ChannelMapping channelMapping) {
            return channelMapping(Either.ofRight(channelMapping));
        }

        /**
         * @param odataType The discriminator for derived types.
         * Expected value is &#39;#Microsoft.Media.AudioTrackDescriptor&#39;.
         * 
         * @return builder
         * 
         */
        public Builder odataType(Output<String> odataType) {
            $.odataType = odataType;
            return this;
        }

        /**
         * @param odataType The discriminator for derived types.
         * Expected value is &#39;#Microsoft.Media.AudioTrackDescriptor&#39;.
         * 
         * @return builder
         * 
         */
        public Builder odataType(String odataType) {
            return odataType(Output.of(odataType));
        }

        public AudioTrackDescriptorArgs build() {
            $.odataType = Codegen.stringProp("odataType").output().arg($.odataType).require();
            return $;
        }
    }

}
