// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.orbital.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Spacecraft Link
 * 
 */
public final class SpacecraftLinkResponse extends com.pulumi.resources.InvokeArgs {

    public static final SpacecraftLinkResponse Empty = new SpacecraftLinkResponse();

    /**
     * Bandwidth in MHz
     * 
     */
    @Import(name="bandwidthMHz", required=true)
    private Double bandwidthMHz;

    /**
     * @return Bandwidth in MHz
     * 
     */
    public Double bandwidthMHz() {
        return this.bandwidthMHz;
    }

    /**
     * Center Frequency in MHz
     * 
     */
    @Import(name="centerFrequencyMHz", required=true)
    private Double centerFrequencyMHz;

    /**
     * @return Center Frequency in MHz
     * 
     */
    public Double centerFrequencyMHz() {
        return this.centerFrequencyMHz;
    }

    /**
     * Direction (uplink or downlink)
     * 
     */
    @Import(name="direction", required=true)
    private String direction;

    /**
     * @return Direction (uplink or downlink)
     * 
     */
    public String direction() {
        return this.direction;
    }

    /**
     * polarization. eg (RHCP, LHCP)
     * 
     */
    @Import(name="polarization", required=true)
    private String polarization;

    /**
     * @return polarization. eg (RHCP, LHCP)
     * 
     */
    public String polarization() {
        return this.polarization;
    }

    private SpacecraftLinkResponse() {}

    private SpacecraftLinkResponse(SpacecraftLinkResponse $) {
        this.bandwidthMHz = $.bandwidthMHz;
        this.centerFrequencyMHz = $.centerFrequencyMHz;
        this.direction = $.direction;
        this.polarization = $.polarization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpacecraftLinkResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpacecraftLinkResponse $;

        public Builder() {
            $ = new SpacecraftLinkResponse();
        }

        public Builder(SpacecraftLinkResponse defaults) {
            $ = new SpacecraftLinkResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidthMHz Bandwidth in MHz
         * 
         * @return builder
         * 
         */
        public Builder bandwidthMHz(Double bandwidthMHz) {
            $.bandwidthMHz = bandwidthMHz;
            return this;
        }

        /**
         * @param centerFrequencyMHz Center Frequency in MHz
         * 
         * @return builder
         * 
         */
        public Builder centerFrequencyMHz(Double centerFrequencyMHz) {
            $.centerFrequencyMHz = centerFrequencyMHz;
            return this;
        }

        /**
         * @param direction Direction (uplink or downlink)
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param polarization polarization. eg (RHCP, LHCP)
         * 
         * @return builder
         * 
         */
        public Builder polarization(String polarization) {
            $.polarization = polarization;
            return this;
        }

        public SpacecraftLinkResponse build() {
            $.bandwidthMHz = Objects.requireNonNull($.bandwidthMHz, "expected parameter 'bandwidthMHz' to be non-null");
            $.centerFrequencyMHz = Objects.requireNonNull($.centerFrequencyMHz, "expected parameter 'centerFrequencyMHz' to be non-null");
            $.direction = Objects.requireNonNull($.direction, "expected parameter 'direction' to be non-null");
            $.polarization = Objects.requireNonNull($.polarization, "expected parameter 'polarization' to be non-null");
            return $;
        }
    }

}
