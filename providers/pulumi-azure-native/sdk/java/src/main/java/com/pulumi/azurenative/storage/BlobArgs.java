// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage;

import com.pulumi.asset.AssetOrArchive;
import com.pulumi.azurenative.storage.enums.BlobAccessTier;
import com.pulumi.azurenative.storage.enums.BlobType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlobArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlobArgs Empty = new BlobArgs();

    /**
     * The access tier of the storage blob.
     * 
     */
    @Import(name="accessTier")
    private @Nullable Output<BlobAccessTier> accessTier;

    public Optional<Output<BlobAccessTier>> accessTier() {
        return Optional.ofNullable(this.accessTier);
    }

    /**
     * Specifies the storage account in which to create the storage container.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The name of the storage blob. Must be unique within the storage container the blob is located.
     * 
     */
    @Import(name="blobName")
    private @Nullable Output<String> blobName;

    public Optional<Output<String>> blobName() {
        return Optional.ofNullable(this.blobName);
    }

    /**
     * The name of the storage container in which this blob should be created.
     * 
     */
    @Import(name="containerName", required=true)
    private Output<String> containerName;

    public Output<String> containerName() {
        return this.containerName;
    }

    /**
     * The MD5 sum of the blob contents. Cannot be defined if blob type is Append.
     * 
     */
    @Import(name="contentMd5")
    private @Nullable Output<String> contentMd5;

    public Optional<Output<String>> contentMd5() {
        return Optional.ofNullable(this.contentMd5);
    }

    /**
     * The content type of the storage blob. Defaults to `application/octet-stream`.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * A map of custom blob metadata.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The name of the resource group within the user&#39;s subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * An asset to copy to the blob contents. This field cannot be specified for Append blobs.
     * 
     */
    @Import(name="source")
    private @Nullable Output<AssetOrArchive> source;

    public Optional<Output<AssetOrArchive>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The type of the storage blob to be created. Defaults to &#39;Block&#39;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<BlobType> type;

    public Optional<Output<BlobType>> type() {
        return Optional.ofNullable(this.type);
    }

    private BlobArgs() {}

    private BlobArgs(BlobArgs $) {
        this.accessTier = $.accessTier;
        this.accountName = $.accountName;
        this.blobName = $.blobName;
        this.containerName = $.containerName;
        this.contentMd5 = $.contentMd5;
        this.contentType = $.contentType;
        this.metadata = $.metadata;
        this.resourceGroupName = $.resourceGroupName;
        this.source = $.source;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlobArgs $;

        public Builder() {
            $ = new BlobArgs();
        }

        public Builder(BlobArgs defaults) {
            $ = new BlobArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessTier(@Nullable Output<BlobAccessTier> accessTier) {
            $.accessTier = accessTier;
            return this;
        }

        public Builder accessTier(BlobAccessTier accessTier) {
            return accessTier(Output.of(accessTier));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder blobName(@Nullable Output<String> blobName) {
            $.blobName = blobName;
            return this;
        }

        public Builder blobName(String blobName) {
            return blobName(Output.of(blobName));
        }

        public Builder containerName(Output<String> containerName) {
            $.containerName = containerName;
            return this;
        }

        public Builder containerName(String containerName) {
            return containerName(Output.of(containerName));
        }

        public Builder contentMd5(@Nullable Output<String> contentMd5) {
            $.contentMd5 = contentMd5;
            return this;
        }

        public Builder contentMd5(String contentMd5) {
            return contentMd5(Output.of(contentMd5));
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder source(@Nullable Output<AssetOrArchive> source) {
            $.source = source;
            return this;
        }

        public Builder source(AssetOrArchive source) {
            return source(Output.of(source));
        }

        public Builder type(@Nullable Output<BlobType> type) {
            $.type = type;
            return this;
        }

        public Builder type(BlobType type) {
            return type(Output.of(type));
        }

        public BlobArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.containerName = Objects.requireNonNull($.containerName, "expected parameter 'containerName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.type = Codegen.objectProp("type", BlobType.class).output().arg($.type).def(BlobType.Block).getNullable();
            return $;
        }
    }

}
