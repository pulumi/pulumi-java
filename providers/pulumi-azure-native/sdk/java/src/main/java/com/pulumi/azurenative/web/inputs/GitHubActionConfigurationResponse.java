// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.GitHubActionCodeConfigurationResponse;
import com.pulumi.azurenative.web.inputs.GitHubActionContainerConfigurationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The GitHub action configuration.
 * 
 */
public final class GitHubActionConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final GitHubActionConfigurationResponse Empty = new GitHubActionConfigurationResponse();

    /**
     * GitHub Action code configuration.
     * 
     */
    @Import(name="codeConfiguration")
    private @Nullable GitHubActionCodeConfigurationResponse codeConfiguration;

    public Optional<GitHubActionCodeConfigurationResponse> codeConfiguration() {
        return Optional.ofNullable(this.codeConfiguration);
    }

    /**
     * GitHub Action container configuration.
     * 
     */
    @Import(name="containerConfiguration")
    private @Nullable GitHubActionContainerConfigurationResponse containerConfiguration;

    public Optional<GitHubActionContainerConfigurationResponse> containerConfiguration() {
        return Optional.ofNullable(this.containerConfiguration);
    }

    /**
     * Workflow option to determine whether the workflow file should be generated and written to the repository.
     * 
     */
    @Import(name="generateWorkflowFile")
    private @Nullable Boolean generateWorkflowFile;

    public Optional<Boolean> generateWorkflowFile() {
        return Optional.ofNullable(this.generateWorkflowFile);
    }

    /**
     * This will help determine the workflow configuration to select.
     * 
     */
    @Import(name="isLinux")
    private @Nullable Boolean isLinux;

    public Optional<Boolean> isLinux() {
        return Optional.ofNullable(this.isLinux);
    }

    private GitHubActionConfigurationResponse() {}

    private GitHubActionConfigurationResponse(GitHubActionConfigurationResponse $) {
        this.codeConfiguration = $.codeConfiguration;
        this.containerConfiguration = $.containerConfiguration;
        this.generateWorkflowFile = $.generateWorkflowFile;
        this.isLinux = $.isLinux;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitHubActionConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitHubActionConfigurationResponse $;

        public Builder() {
            $ = new GitHubActionConfigurationResponse();
        }

        public Builder(GitHubActionConfigurationResponse defaults) {
            $ = new GitHubActionConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder codeConfiguration(@Nullable GitHubActionCodeConfigurationResponse codeConfiguration) {
            $.codeConfiguration = codeConfiguration;
            return this;
        }

        public Builder containerConfiguration(@Nullable GitHubActionContainerConfigurationResponse containerConfiguration) {
            $.containerConfiguration = containerConfiguration;
            return this;
        }

        public Builder generateWorkflowFile(@Nullable Boolean generateWorkflowFile) {
            $.generateWorkflowFile = generateWorkflowFile;
            return this;
        }

        public Builder isLinux(@Nullable Boolean isLinux) {
            $.isLinux = isLinux;
            return this;
        }

        public GitHubActionConfigurationResponse build() {
            return $;
        }
    }

}
