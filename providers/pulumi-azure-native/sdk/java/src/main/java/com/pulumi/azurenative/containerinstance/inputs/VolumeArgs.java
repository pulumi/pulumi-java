// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.azurenative.containerinstance.inputs.AzureFileVolumeArgs;
import com.pulumi.azurenative.containerinstance.inputs.GitRepoVolumeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of the volume.
 * 
 */
public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * The Azure File volume.
     * 
     */
    @Import(name="azureFile")
    private @Nullable Output<AzureFileVolumeArgs> azureFile;

    /**
     * @return The Azure File volume.
     * 
     */
    public Optional<Output<AzureFileVolumeArgs>> azureFile() {
        return Optional.ofNullable(this.azureFile);
    }

    /**
     * The empty directory volume.
     * 
     */
    @Import(name="emptyDir")
    private @Nullable Output<Object> emptyDir;

    /**
     * @return The empty directory volume.
     * 
     */
    public Optional<Output<Object>> emptyDir() {
        return Optional.ofNullable(this.emptyDir);
    }

    /**
     * The git repo volume.
     * 
     */
    @Import(name="gitRepo")
    private @Nullable Output<GitRepoVolumeArgs> gitRepo;

    /**
     * @return The git repo volume.
     * 
     */
    public Optional<Output<GitRepoVolumeArgs>> gitRepo() {
        return Optional.ofNullable(this.gitRepo);
    }

    /**
     * The name of the volume.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the volume.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The secret volume.
     * 
     */
    @Import(name="secret")
    private @Nullable Output<Map<String,String>> secret;

    /**
     * @return The secret volume.
     * 
     */
    public Optional<Output<Map<String,String>>> secret() {
        return Optional.ofNullable(this.secret);
    }

    private VolumeArgs() {}

    private VolumeArgs(VolumeArgs $) {
        this.azureFile = $.azureFile;
        this.emptyDir = $.emptyDir;
        this.gitRepo = $.gitRepo;
        this.name = $.name;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeArgs $;

        public Builder() {
            $ = new VolumeArgs();
        }

        public Builder(VolumeArgs defaults) {
            $ = new VolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureFile The Azure File volume.
         * 
         * @return builder
         * 
         */
        public Builder azureFile(@Nullable Output<AzureFileVolumeArgs> azureFile) {
            $.azureFile = azureFile;
            return this;
        }

        /**
         * @param azureFile The Azure File volume.
         * 
         * @return builder
         * 
         */
        public Builder azureFile(AzureFileVolumeArgs azureFile) {
            return azureFile(Output.of(azureFile));
        }

        /**
         * @param emptyDir The empty directory volume.
         * 
         * @return builder
         * 
         */
        public Builder emptyDir(@Nullable Output<Object> emptyDir) {
            $.emptyDir = emptyDir;
            return this;
        }

        /**
         * @param emptyDir The empty directory volume.
         * 
         * @return builder
         * 
         */
        public Builder emptyDir(Object emptyDir) {
            return emptyDir(Output.of(emptyDir));
        }

        /**
         * @param gitRepo The git repo volume.
         * 
         * @return builder
         * 
         */
        public Builder gitRepo(@Nullable Output<GitRepoVolumeArgs> gitRepo) {
            $.gitRepo = gitRepo;
            return this;
        }

        /**
         * @param gitRepo The git repo volume.
         * 
         * @return builder
         * 
         */
        public Builder gitRepo(GitRepoVolumeArgs gitRepo) {
            return gitRepo(Output.of(gitRepo));
        }

        /**
         * @param name The name of the volume.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the volume.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secret The secret volume.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<Map<String,String>> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret The secret volume.
         * 
         * @return builder
         * 
         */
        public Builder secret(Map<String,String> secret) {
            return secret(Output.of(secret));
        }

        public VolumeArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
