// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The data stored in text format.
 * 
 */
public final class TextFormatResponse extends com.pulumi.resources.InvokeArgs {

    public static final TextFormatResponse Empty = new TextFormatResponse();

    /**
     * The column delimiter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="columnDelimiter")
      private final @Nullable Object columnDelimiter;

    public Optional<Object> columnDelimiter() {
        return this.columnDelimiter == null ? Optional.empty() : Optional.ofNullable(this.columnDelimiter);
    }

    /**
     * Deserializer. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="deserializer")
      private final @Nullable Object deserializer;

    public Optional<Object> deserializer() {
        return this.deserializer == null ? Optional.empty() : Optional.ofNullable(this.deserializer);
    }

    /**
     * The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encodingName")
      private final @Nullable Object encodingName;

    public Optional<Object> encodingName() {
        return this.encodingName == null ? Optional.empty() : Optional.ofNullable(this.encodingName);
    }

    /**
     * The escape character. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="escapeChar")
      private final @Nullable Object escapeChar;

    public Optional<Object> escapeChar() {
        return this.escapeChar == null ? Optional.empty() : Optional.ofNullable(this.escapeChar);
    }

    /**
     * When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="firstRowAsHeader")
      private final @Nullable Object firstRowAsHeader;

    public Optional<Object> firstRowAsHeader() {
        return this.firstRowAsHeader == null ? Optional.empty() : Optional.ofNullable(this.firstRowAsHeader);
    }

    /**
     * The null value string. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="nullValue")
      private final @Nullable Object nullValue;

    public Optional<Object> nullValue() {
        return this.nullValue == null ? Optional.empty() : Optional.ofNullable(this.nullValue);
    }

    /**
     * The quote character. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="quoteChar")
      private final @Nullable Object quoteChar;

    public Optional<Object> quoteChar() {
        return this.quoteChar == null ? Optional.empty() : Optional.ofNullable(this.quoteChar);
    }

    /**
     * The row delimiter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="rowDelimiter")
      private final @Nullable Object rowDelimiter;

    public Optional<Object> rowDelimiter() {
        return this.rowDelimiter == null ? Optional.empty() : Optional.ofNullable(this.rowDelimiter);
    }

    /**
     * Serializer. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="serializer")
      private final @Nullable Object serializer;

    public Optional<Object> serializer() {
        return this.serializer == null ? Optional.empty() : Optional.ofNullable(this.serializer);
    }

    /**
     * The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="skipLineCount")
      private final @Nullable Object skipLineCount;

    public Optional<Object> skipLineCount() {
        return this.skipLineCount == null ? Optional.empty() : Optional.ofNullable(this.skipLineCount);
    }

    /**
     * Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="treatEmptyAsNull")
      private final @Nullable Object treatEmptyAsNull;

    public Optional<Object> treatEmptyAsNull() {
        return this.treatEmptyAsNull == null ? Optional.empty() : Optional.ofNullable(this.treatEmptyAsNull);
    }

    /**
     * Type of dataset storage format.
     * Expected value is 'TextFormat'.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public TextFormatResponse(
        @Nullable Object columnDelimiter,
        @Nullable Object deserializer,
        @Nullable Object encodingName,
        @Nullable Object escapeChar,
        @Nullable Object firstRowAsHeader,
        @Nullable Object nullValue,
        @Nullable Object quoteChar,
        @Nullable Object rowDelimiter,
        @Nullable Object serializer,
        @Nullable Object skipLineCount,
        @Nullable Object treatEmptyAsNull,
        String type) {
        this.columnDelimiter = columnDelimiter;
        this.deserializer = deserializer;
        this.encodingName = encodingName;
        this.escapeChar = escapeChar;
        this.firstRowAsHeader = firstRowAsHeader;
        this.nullValue = nullValue;
        this.quoteChar = quoteChar;
        this.rowDelimiter = rowDelimiter;
        this.serializer = serializer;
        this.skipLineCount = skipLineCount;
        this.treatEmptyAsNull = treatEmptyAsNull;
        this.type = Codegen.stringProp("type").arg(type).require();
    }

    private TextFormatResponse() {
        this.columnDelimiter = null;
        this.deserializer = null;
        this.encodingName = null;
        this.escapeChar = null;
        this.firstRowAsHeader = null;
        this.nullValue = null;
        this.quoteChar = null;
        this.rowDelimiter = null;
        this.serializer = null;
        this.skipLineCount = null;
        this.treatEmptyAsNull = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TextFormatResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Object columnDelimiter;
        private @Nullable Object deserializer;
        private @Nullable Object encodingName;
        private @Nullable Object escapeChar;
        private @Nullable Object firstRowAsHeader;
        private @Nullable Object nullValue;
        private @Nullable Object quoteChar;
        private @Nullable Object rowDelimiter;
        private @Nullable Object serializer;
        private @Nullable Object skipLineCount;
        private @Nullable Object treatEmptyAsNull;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(TextFormatResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnDelimiter = defaults.columnDelimiter;
    	      this.deserializer = defaults.deserializer;
    	      this.encodingName = defaults.encodingName;
    	      this.escapeChar = defaults.escapeChar;
    	      this.firstRowAsHeader = defaults.firstRowAsHeader;
    	      this.nullValue = defaults.nullValue;
    	      this.quoteChar = defaults.quoteChar;
    	      this.rowDelimiter = defaults.rowDelimiter;
    	      this.serializer = defaults.serializer;
    	      this.skipLineCount = defaults.skipLineCount;
    	      this.treatEmptyAsNull = defaults.treatEmptyAsNull;
    	      this.type = defaults.type;
        }

        public Builder columnDelimiter(@Nullable Object columnDelimiter) {
            this.columnDelimiter = columnDelimiter;
            return this;
        }
        public Builder deserializer(@Nullable Object deserializer) {
            this.deserializer = deserializer;
            return this;
        }
        public Builder encodingName(@Nullable Object encodingName) {
            this.encodingName = encodingName;
            return this;
        }
        public Builder escapeChar(@Nullable Object escapeChar) {
            this.escapeChar = escapeChar;
            return this;
        }
        public Builder firstRowAsHeader(@Nullable Object firstRowAsHeader) {
            this.firstRowAsHeader = firstRowAsHeader;
            return this;
        }
        public Builder nullValue(@Nullable Object nullValue) {
            this.nullValue = nullValue;
            return this;
        }
        public Builder quoteChar(@Nullable Object quoteChar) {
            this.quoteChar = quoteChar;
            return this;
        }
        public Builder rowDelimiter(@Nullable Object rowDelimiter) {
            this.rowDelimiter = rowDelimiter;
            return this;
        }
        public Builder serializer(@Nullable Object serializer) {
            this.serializer = serializer;
            return this;
        }
        public Builder skipLineCount(@Nullable Object skipLineCount) {
            this.skipLineCount = skipLineCount;
            return this;
        }
        public Builder treatEmptyAsNull(@Nullable Object treatEmptyAsNull) {
            this.treatEmptyAsNull = treatEmptyAsNull;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public TextFormatResponse build() {
            return new TextFormatResponse(columnDelimiter, deserializer, encodingName, escapeChar, firstRowAsHeader, nullValue, quoteChar, rowDelimiter, serializer, skipLineCount, treatEmptyAsNull, type);
        }
    }
}
