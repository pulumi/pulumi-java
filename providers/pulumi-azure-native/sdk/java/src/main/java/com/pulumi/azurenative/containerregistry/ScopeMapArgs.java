// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScopeMapArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScopeMapArgs Empty = new ScopeMapArgs();

    /**
     * The list of scoped permissions for registry artifacts.
     * E.g. repositories/repository-name/content/read,
     * repositories/repository-name/metadata/write
     * 
     */
    @Import(name="actions", required=true)
      private final Output<List<String>> actions;

    public Output<List<String>> actions() {
        return this.actions;
    }

    /**
     * The user friendly description of the scope map.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName", required=true)
      private final Output<String> registryName;

    public Output<String> registryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the scope map.
     * 
     */
    @Import(name="scopeMapName")
      private final @Nullable Output<String> scopeMapName;

    public Output<String> scopeMapName() {
        return this.scopeMapName == null ? Codegen.empty() : this.scopeMapName;
    }

    public ScopeMapArgs(
        Output<List<String>> actions,
        @Nullable Output<String> description,
        Output<String> registryName,
        Output<String> resourceGroupName,
        @Nullable Output<String> scopeMapName) {
        this.actions = Objects.requireNonNull(actions, "expected parameter 'actions' to be non-null");
        this.description = description;
        this.registryName = Objects.requireNonNull(registryName, "expected parameter 'registryName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scopeMapName = scopeMapName;
    }

    private ScopeMapArgs() {
        this.actions = Codegen.empty();
        this.description = Codegen.empty();
        this.registryName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.scopeMapName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScopeMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> actions;
        private @Nullable Output<String> description;
        private Output<String> registryName;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> scopeMapName;

        public Builder() {
    	      // Empty
        }

        public Builder(ScopeMapArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.description = defaults.description;
    	      this.registryName = defaults.registryName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scopeMapName = defaults.scopeMapName;
        }

        public Builder actions(Output<List<String>> actions) {
            this.actions = Objects.requireNonNull(actions);
            return this;
        }
        public Builder actions(List<String> actions) {
            this.actions = Output.of(Objects.requireNonNull(actions));
            return this;
        }
        public Builder actions(String... actions) {
            return actions(List.of(actions));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder registryName(Output<String> registryName) {
            this.registryName = Objects.requireNonNull(registryName);
            return this;
        }
        public Builder registryName(String registryName) {
            this.registryName = Output.of(Objects.requireNonNull(registryName));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder scopeMapName(@Nullable Output<String> scopeMapName) {
            this.scopeMapName = scopeMapName;
            return this;
        }
        public Builder scopeMapName(@Nullable String scopeMapName) {
            this.scopeMapName = Codegen.ofNullable(scopeMapName);
            return this;
        }        public ScopeMapArgs build() {
            return new ScopeMapArgs(actions, description, registryName, resourceGroupName, scopeMapName);
        }
    }
}
