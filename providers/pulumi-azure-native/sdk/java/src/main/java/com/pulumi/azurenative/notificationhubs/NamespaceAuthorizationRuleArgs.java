// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.notificationhubs;

import com.pulumi.azurenative.notificationhubs.inputs.SharedAccessAuthorizationRulePropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceAuthorizationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceAuthorizationRuleArgs Empty = new NamespaceAuthorizationRuleArgs();

    /**
     * Authorization Rule Name.
     * 
     */
    @Import(name="authorizationRuleName")
    private @Nullable Output<String> authorizationRuleName;

    public Optional<Output<String>> authorizationRuleName() {
        return Optional.ofNullable(this.authorizationRuleName);
    }

    /**
     * The namespace name.
     * 
     */
    @Import(name="namespaceName", required=true)
    private Output<String> namespaceName;

    public Output<String> namespaceName() {
        return this.namespaceName;
    }

    /**
     * Properties of the Namespace AuthorizationRules.
     * 
     */
    @Import(name="properties", required=true)
    private Output<SharedAccessAuthorizationRulePropertiesArgs> properties;

    public Output<SharedAccessAuthorizationRulePropertiesArgs> properties() {
        return this.properties;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private NamespaceAuthorizationRuleArgs() {}

    private NamespaceAuthorizationRuleArgs(NamespaceAuthorizationRuleArgs $) {
        this.authorizationRuleName = $.authorizationRuleName;
        this.namespaceName = $.namespaceName;
        this.properties = $.properties;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceAuthorizationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceAuthorizationRuleArgs $;

        public Builder() {
            $ = new NamespaceAuthorizationRuleArgs();
        }

        public Builder(NamespaceAuthorizationRuleArgs defaults) {
            $ = new NamespaceAuthorizationRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder authorizationRuleName(@Nullable Output<String> authorizationRuleName) {
            $.authorizationRuleName = authorizationRuleName;
            return this;
        }

        public Builder authorizationRuleName(String authorizationRuleName) {
            return authorizationRuleName(Output.of(authorizationRuleName));
        }

        public Builder namespaceName(Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        public Builder properties(Output<SharedAccessAuthorizationRulePropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(SharedAccessAuthorizationRulePropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public NamespaceAuthorizationRuleArgs build() {
            $.namespaceName = Objects.requireNonNull($.namespaceName, "expected parameter 'namespaceName' to be non-null");
            $.properties = Objects.requireNonNull($.properties, "expected parameter 'properties' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
