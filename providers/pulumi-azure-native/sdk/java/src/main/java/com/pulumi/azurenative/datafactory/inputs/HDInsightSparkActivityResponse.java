// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * HDInsight Spark activity.
 * 
 */
public final class HDInsightSparkActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final HDInsightSparkActivityResponse Empty = new HDInsightSparkActivityResponse();

    /**
     * The user-specified arguments to HDInsightSparkActivity.
     * 
     */
    @Import(name="arguments")
    private @Nullable List<Object> arguments;

    public Optional<List<Object>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * The application&#39;s Java/Spark main class.
     * 
     */
    @Import(name="className")
    private @Nullable String className;

    public Optional<String> className() {
        return Optional.ofNullable(this.className);
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="entryFilePath", required=true)
    private Object entryFilePath;

    public Object entryFilePath() {
        return this.entryFilePath;
    }

    /**
     * Debug info option.
     * 
     */
    @Import(name="getDebugInfo")
    private @Nullable String getDebugInfo;

    public Optional<String> getDebugInfo() {
        return Optional.ofNullable(this.getDebugInfo);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;

    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable ActivityPolicyResponse policy;

    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="proxyUser")
    private @Nullable Object proxyUser;

    public Optional<Object> proxyUser() {
        return Optional.ofNullable(this.proxyUser);
    }

    /**
     * The root path in &#39;sparkJobLinkedService&#39; for all the jobâ€™s files. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="rootPath", required=true)
    private Object rootPath;

    public Object rootPath() {
        return this.rootPath;
    }

    /**
     * Spark configuration property.
     * 
     */
    @Import(name="sparkConfig")
    private @Nullable Map<String,Object> sparkConfig;

    public Optional<Map<String,Object>> sparkConfig() {
        return Optional.ofNullable(this.sparkConfig);
    }

    /**
     * The storage linked service for uploading the entry file and dependencies, and for receiving logs.
     * 
     */
    @Import(name="sparkJobLinkedService")
    private @Nullable LinkedServiceReferenceResponse sparkJobLinkedService;

    public Optional<LinkedServiceReferenceResponse> sparkJobLinkedService() {
        return Optional.ofNullable(this.sparkJobLinkedService);
    }

    /**
     * Type of activity.
     * Expected value is &#39;HDInsightSpark&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private HDInsightSparkActivityResponse() {}

    private HDInsightSparkActivityResponse(HDInsightSparkActivityResponse $) {
        this.arguments = $.arguments;
        this.className = $.className;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.entryFilePath = $.entryFilePath;
        this.getDebugInfo = $.getDebugInfo;
        this.linkedServiceName = $.linkedServiceName;
        this.name = $.name;
        this.policy = $.policy;
        this.proxyUser = $.proxyUser;
        this.rootPath = $.rootPath;
        this.sparkConfig = $.sparkConfig;
        this.sparkJobLinkedService = $.sparkJobLinkedService;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HDInsightSparkActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HDInsightSparkActivityResponse $;

        public Builder() {
            $ = new HDInsightSparkActivityResponse();
        }

        public Builder(HDInsightSparkActivityResponse defaults) {
            $ = new HDInsightSparkActivityResponse(Objects.requireNonNull(defaults));
        }

        public Builder arguments(@Nullable List<Object> arguments) {
            $.arguments = arguments;
            return this;
        }

        public Builder arguments(Object... arguments) {
            return arguments(List.of(arguments));
        }

        public Builder className(@Nullable String className) {
            $.className = className;
            return this;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder entryFilePath(Object entryFilePath) {
            $.entryFilePath = entryFilePath;
            return this;
        }

        public Builder getDebugInfo(@Nullable String getDebugInfo) {
            $.getDebugInfo = getDebugInfo;
            return this;
        }

        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            $.policy = policy;
            return this;
        }

        public Builder proxyUser(@Nullable Object proxyUser) {
            $.proxyUser = proxyUser;
            return this;
        }

        public Builder rootPath(Object rootPath) {
            $.rootPath = rootPath;
            return this;
        }

        public Builder sparkConfig(@Nullable Map<String,Object> sparkConfig) {
            $.sparkConfig = sparkConfig;
            return this;
        }

        public Builder sparkJobLinkedService(@Nullable LinkedServiceReferenceResponse sparkJobLinkedService) {
            $.sparkJobLinkedService = sparkJobLinkedService;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public HDInsightSparkActivityResponse build() {
            $.entryFilePath = Objects.requireNonNull($.entryFilePath, "expected parameter 'entryFilePath' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.rootPath = Objects.requireNonNull($.rootPath, "expected parameter 'rootPath' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
