// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement;

import com.pulumi.azurenative.apimanagement.enums.LoggerType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoggerArgs Empty = new LoggerArgs();

    /**
     * The name and SendRule connection string of the event hub for azureEventHub logger.
     * Instrumentation key for applicationInsights logger.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<Map<String,String>> credentials;

    public Optional<Output<Map<String,String>>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * Logger description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether records are buffered in the logger before publishing. Default is assumed to be true.
     * 
     */
    @Import(name="isBuffered")
    private @Nullable Output<Boolean> isBuffered;

    public Optional<Output<Boolean>> isBuffered() {
        return Optional.ofNullable(this.isBuffered);
    }

    /**
     * Logger identifier. Must be unique in the API Management service instance.
     * 
     */
    @Import(name="loggerId")
    private @Nullable Output<String> loggerId;

    public Optional<Output<String>> loggerId() {
        return Optional.ofNullable(this.loggerId);
    }

    /**
     * Logger type.
     * 
     */
    @Import(name="loggerType", required=true)
    private Output<Either<String,LoggerType>> loggerType;

    public Output<Either<String,LoggerType>> loggerType() {
        return this.loggerType;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource).
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    private LoggerArgs() {}

    private LoggerArgs(LoggerArgs $) {
        this.credentials = $.credentials;
        this.description = $.description;
        this.isBuffered = $.isBuffered;
        this.loggerId = $.loggerId;
        this.loggerType = $.loggerType;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceId = $.resourceId;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoggerArgs $;

        public Builder() {
            $ = new LoggerArgs();
        }

        public Builder(LoggerArgs defaults) {
            $ = new LoggerArgs(Objects.requireNonNull(defaults));
        }

        public Builder credentials(@Nullable Output<Map<String,String>> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(Map<String,String> credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder isBuffered(@Nullable Output<Boolean> isBuffered) {
            $.isBuffered = isBuffered;
            return this;
        }

        public Builder isBuffered(Boolean isBuffered) {
            return isBuffered(Output.of(isBuffered));
        }

        public Builder loggerId(@Nullable Output<String> loggerId) {
            $.loggerId = loggerId;
            return this;
        }

        public Builder loggerId(String loggerId) {
            return loggerId(Output.of(loggerId));
        }

        public Builder loggerType(Output<Either<String,LoggerType>> loggerType) {
            $.loggerType = loggerType;
            return this;
        }

        public Builder loggerType(Either<String,LoggerType> loggerType) {
            return loggerType(Output.of(loggerType));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public LoggerArgs build() {
            $.loggerType = Objects.requireNonNull($.loggerType, "expected parameter 'loggerType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
