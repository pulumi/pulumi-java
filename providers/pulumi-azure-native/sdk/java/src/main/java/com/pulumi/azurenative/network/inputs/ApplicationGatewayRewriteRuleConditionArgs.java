// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Set of conditions in the Rewrite Rule in Application Gateway.
 * 
 */
public final class ApplicationGatewayRewriteRuleConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayRewriteRuleConditionArgs Empty = new ApplicationGatewayRewriteRuleConditionArgs();

    /**
     * Setting this parameter to truth value with force the pattern to do a case in-sensitive comparison.
     * 
     */
    @Import(name="ignoreCase")
      private final @Nullable Output<Boolean> ignoreCase;

    public Output<Boolean> ignoreCase() {
        return this.ignoreCase == null ? Codegen.empty() : this.ignoreCase;
    }

    /**
     * Setting this value as truth will force to check the negation of the condition given by the user.
     * 
     */
    @Import(name="negate")
      private final @Nullable Output<Boolean> negate;

    public Output<Boolean> negate() {
        return this.negate == null ? Codegen.empty() : this.negate;
    }

    /**
     * The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
     * 
     */
    @Import(name="pattern")
      private final @Nullable Output<String> pattern;

    public Output<String> pattern() {
        return this.pattern == null ? Codegen.empty() : this.pattern;
    }

    /**
     * The condition parameter of the RewriteRuleCondition.
     * 
     */
    @Import(name="variable")
      private final @Nullable Output<String> variable;

    public Output<String> variable() {
        return this.variable == null ? Codegen.empty() : this.variable;
    }

    public ApplicationGatewayRewriteRuleConditionArgs(
        @Nullable Output<Boolean> ignoreCase,
        @Nullable Output<Boolean> negate,
        @Nullable Output<String> pattern,
        @Nullable Output<String> variable) {
        this.ignoreCase = ignoreCase;
        this.negate = negate;
        this.pattern = pattern;
        this.variable = variable;
    }

    private ApplicationGatewayRewriteRuleConditionArgs() {
        this.ignoreCase = Codegen.empty();
        this.negate = Codegen.empty();
        this.pattern = Codegen.empty();
        this.variable = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayRewriteRuleConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> ignoreCase;
        private @Nullable Output<Boolean> negate;
        private @Nullable Output<String> pattern;
        private @Nullable Output<String> variable;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGatewayRewriteRuleConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.negate = defaults.negate;
    	      this.pattern = defaults.pattern;
    	      this.variable = defaults.variable;
        }

        public Builder ignoreCase(@Nullable Output<Boolean> ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }
        public Builder ignoreCase(@Nullable Boolean ignoreCase) {
            this.ignoreCase = Codegen.ofNullable(ignoreCase);
            return this;
        }
        public Builder negate(@Nullable Output<Boolean> negate) {
            this.negate = negate;
            return this;
        }
        public Builder negate(@Nullable Boolean negate) {
            this.negate = Codegen.ofNullable(negate);
            return this;
        }
        public Builder pattern(@Nullable Output<String> pattern) {
            this.pattern = pattern;
            return this;
        }
        public Builder pattern(@Nullable String pattern) {
            this.pattern = Codegen.ofNullable(pattern);
            return this;
        }
        public Builder variable(@Nullable Output<String> variable) {
            this.variable = variable;
            return this;
        }
        public Builder variable(@Nullable String variable) {
            this.variable = Codegen.ofNullable(variable);
            return this;
        }        public ApplicationGatewayRewriteRuleConditionArgs build() {
            return new ApplicationGatewayRewriteRuleConditionArgs(ignoreCase, negate, pattern, variable);
        }
    }
}
