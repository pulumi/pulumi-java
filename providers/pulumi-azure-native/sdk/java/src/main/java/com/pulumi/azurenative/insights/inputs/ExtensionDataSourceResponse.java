// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
 * Collected from either Windows and Linux machines, depending on which extension is defined.
 * 
 */
public final class ExtensionDataSourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExtensionDataSourceResponse Empty = new ExtensionDataSourceResponse();

    /**
     * The name of the VM extension.
     * 
     */
    @Import(name="extensionName", required=true)
    private String extensionName;

    public String extensionName() {
        return this.extensionName;
    }

    /**
     * The extension settings. The format is specific for particular extension.
     * 
     */
    @Import(name="extensionSettings")
    private @Nullable Object extensionSettings;

    public Optional<Object> extensionSettings() {
        return Optional.ofNullable(this.extensionSettings);
    }

    /**
     * The list of data sources this extension needs data from.
     * 
     */
    @Import(name="inputDataSources")
    private @Nullable List<String> inputDataSources;

    public Optional<List<String>> inputDataSources() {
        return Optional.ofNullable(this.inputDataSources);
    }

    /**
     * A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     * 
     */
    @Import(name="streams")
    private @Nullable List<String> streams;

    public Optional<List<String>> streams() {
        return Optional.ofNullable(this.streams);
    }

    private ExtensionDataSourceResponse() {}

    private ExtensionDataSourceResponse(ExtensionDataSourceResponse $) {
        this.extensionName = $.extensionName;
        this.extensionSettings = $.extensionSettings;
        this.inputDataSources = $.inputDataSources;
        this.name = $.name;
        this.streams = $.streams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtensionDataSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtensionDataSourceResponse $;

        public Builder() {
            $ = new ExtensionDataSourceResponse();
        }

        public Builder(ExtensionDataSourceResponse defaults) {
            $ = new ExtensionDataSourceResponse(Objects.requireNonNull(defaults));
        }

        public Builder extensionName(String extensionName) {
            $.extensionName = extensionName;
            return this;
        }

        public Builder extensionSettings(@Nullable Object extensionSettings) {
            $.extensionSettings = extensionSettings;
            return this;
        }

        public Builder inputDataSources(@Nullable List<String> inputDataSources) {
            $.inputDataSources = inputDataSources;
            return this;
        }

        public Builder inputDataSources(String... inputDataSources) {
            return inputDataSources(List.of(inputDataSources));
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder streams(@Nullable List<String> streams) {
            $.streams = streams;
            return this;
        }

        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }

        public ExtensionDataSourceResponse build() {
            $.extensionName = Objects.requireNonNull($.extensionName, "expected parameter 'extensionName' to be non-null");
            return $;
        }
    }

}
