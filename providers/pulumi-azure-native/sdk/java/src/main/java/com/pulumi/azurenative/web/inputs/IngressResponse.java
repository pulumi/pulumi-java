// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.TrafficWeightResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Container App Ingress configuration.
 * 
 */
public final class IngressResponse extends com.pulumi.resources.InvokeArgs {

    public static final IngressResponse Empty = new IngressResponse();

    /**
     * Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
     * 
     */
    @Import(name="allowInsecure")
    private @Nullable Boolean allowInsecure;

    public Optional<Boolean> allowInsecure() {
        return Optional.ofNullable(this.allowInsecure);
    }

    /**
     * Bool indicating if app exposes an external http endpoint
     * 
     */
    @Import(name="external")
    private @Nullable Boolean external;

    public Optional<Boolean> external() {
        return Optional.ofNullable(this.external);
    }

    /**
     * Hostname.
     * 
     */
    @Import(name="fqdn", required=true)
    private String fqdn;

    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Target Port in containers for traffic from ingress
     * 
     */
    @Import(name="targetPort")
    private @Nullable Integer targetPort;

    public Optional<Integer> targetPort() {
        return Optional.ofNullable(this.targetPort);
    }

    @Import(name="traffic")
    private @Nullable List<TrafficWeightResponse> traffic;

    public Optional<List<TrafficWeightResponse>> traffic() {
        return Optional.ofNullable(this.traffic);
    }

    /**
     * Ingress transport protocol
     * 
     */
    @Import(name="transport")
    private @Nullable String transport;

    public Optional<String> transport() {
        return Optional.ofNullable(this.transport);
    }

    private IngressResponse() {}

    private IngressResponse(IngressResponse $) {
        this.allowInsecure = $.allowInsecure;
        this.external = $.external;
        this.fqdn = $.fqdn;
        this.targetPort = $.targetPort;
        this.traffic = $.traffic;
        this.transport = $.transport;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngressResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngressResponse $;

        public Builder() {
            $ = new IngressResponse();
        }

        public Builder(IngressResponse defaults) {
            $ = new IngressResponse(Objects.requireNonNull(defaults));
        }

        public Builder allowInsecure(@Nullable Boolean allowInsecure) {
            $.allowInsecure = allowInsecure;
            return this;
        }

        public Builder external(@Nullable Boolean external) {
            $.external = external;
            return this;
        }

        public Builder fqdn(String fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        public Builder targetPort(@Nullable Integer targetPort) {
            $.targetPort = targetPort;
            return this;
        }

        public Builder traffic(@Nullable List<TrafficWeightResponse> traffic) {
            $.traffic = traffic;
            return this;
        }

        public Builder traffic(TrafficWeightResponse... traffic) {
            return traffic(List.of(traffic));
        }

        public Builder transport(@Nullable String transport) {
            $.transport = transport;
            return this;
        }

        public IngressResponse build() {
            $.external = Codegen.booleanProp("external").arg($.external).def(false).getNullable();
            $.fqdn = Objects.requireNonNull($.fqdn, "expected parameter 'fqdn' to be non-null");
            return $;
        }
    }

}
