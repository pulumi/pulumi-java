// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.outputs;

import com.pulumi.azurenative.devtestlab.outputs.ApplicableScheduleResponse;
import com.pulumi.azurenative.devtestlab.outputs.ArtifactDeploymentStatusPropertiesResponse;
import com.pulumi.azurenative.devtestlab.outputs.ArtifactInstallPropertiesResponse;
import com.pulumi.azurenative.devtestlab.outputs.ComputeVmPropertiesResponse;
import com.pulumi.azurenative.devtestlab.outputs.DataDiskPropertiesResponse;
import com.pulumi.azurenative.devtestlab.outputs.GalleryImageReferenceResponse;
import com.pulumi.azurenative.devtestlab.outputs.NetworkInterfacePropertiesResponse;
import com.pulumi.azurenative.devtestlab.outputs.ScheduleCreationParameterResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualMachineResult {
    /**
     * @return Indicates whether another user can take ownership of the virtual machine
     * 
     */
    private final @Nullable Boolean allowClaim;
    /**
     * @return The applicable schedule for the virtual machine.
     * 
     */
    private final ApplicableScheduleResponse applicableSchedule;
    /**
     * @return The artifact deployment status for the virtual machine.
     * 
     */
    private final ArtifactDeploymentStatusPropertiesResponse artifactDeploymentStatus;
    /**
     * @return The artifacts to be installed on the virtual machine.
     * 
     */
    private final @Nullable List<ArtifactInstallPropertiesResponse> artifacts;
    /**
     * @return The resource identifier (Microsoft.Compute) of the virtual machine.
     * 
     */
    private final String computeId;
    /**
     * @return The compute virtual machine properties.
     * 
     */
    private final ComputeVmPropertiesResponse computeVm;
    /**
     * @return The email address of creator of the virtual machine.
     * 
     */
    private final String createdByUser;
    /**
     * @return The object identifier of the creator of the virtual machine.
     * 
     */
    private final String createdByUserId;
    /**
     * @return The creation date of the virtual machine.
     * 
     */
    private final @Nullable String createdDate;
    /**
     * @return The custom image identifier of the virtual machine.
     * 
     */
    private final @Nullable String customImageId;
    /**
     * @return New or existing data disks to attach to the virtual machine after creation
     * 
     */
    private final @Nullable List<DataDiskPropertiesResponse> dataDiskParameters;
    /**
     * @return Indicates whether the virtual machine is to be created without a public IP address.
     * 
     */
    private final @Nullable Boolean disallowPublicIpAddress;
    /**
     * @return The resource ID of the environment that contains this virtual machine, if any.
     * 
     */
    private final @Nullable String environmentId;
    /**
     * @return The expiration date for VM.
     * 
     */
    private final @Nullable String expirationDate;
    /**
     * @return The fully-qualified domain name of the virtual machine.
     * 
     */
    private final String fqdn;
    /**
     * @return The Microsoft Azure Marketplace image reference of the virtual machine.
     * 
     */
    private final @Nullable GalleryImageReferenceResponse galleryImageReference;
    /**
     * @return The identifier of the resource.
     * 
     */
    private final String id;
    /**
     * @return Indicates whether this virtual machine uses an SSH key for authentication.
     * 
     */
    private final @Nullable Boolean isAuthenticationWithSshKey;
    /**
     * @return The lab subnet name of the virtual machine.
     * 
     */
    private final @Nullable String labSubnetName;
    /**
     * @return The lab virtual network identifier of the virtual machine.
     * 
     */
    private final @Nullable String labVirtualNetworkId;
    /**
     * @return Last known compute power state captured in DTL
     * 
     */
    private final String lastKnownPowerState;
    /**
     * @return The location of the resource.
     * 
     */
    private final @Nullable String location;
    /**
     * @return The name of the resource.
     * 
     */
    private final String name;
    /**
     * @return The network interface properties.
     * 
     */
    private final @Nullable NetworkInterfacePropertiesResponse networkInterface;
    /**
     * @return The notes of the virtual machine.
     * 
     */
    private final @Nullable String notes;
    /**
     * @return The OS type of the virtual machine.
     * 
     */
    private final String osType;
    /**
     * @return The object identifier of the owner of the virtual machine.
     * 
     */
    private final @Nullable String ownerObjectId;
    /**
     * @return The user principal name of the virtual machine owner.
     * 
     */
    private final @Nullable String ownerUserPrincipalName;
    /**
     * @return The password of the virtual machine administrator.
     * 
     */
    private final @Nullable String password;
    /**
     * @return The id of the plan associated with the virtual machine image
     * 
     */
    private final @Nullable String planId;
    /**
     * @return The provisioning status of the resource.
     * 
     */
    private final String provisioningState;
    /**
     * @return Virtual Machine schedules to be created
     * 
     */
    private final @Nullable List<ScheduleCreationParameterResponse> scheduleParameters;
    /**
     * @return The size of the virtual machine.
     * 
     */
    private final @Nullable String size;
    /**
     * @return The SSH key of the virtual machine administrator.
     * 
     */
    private final @Nullable String sshKey;
    /**
     * @return Storage type to use for virtual machine (i.e. Standard, Premium).
     * 
     */
    private final @Nullable String storageType;
    /**
     * @return The tags of the resource.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource.
     * 
     */
    private final String type;
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    private final String uniqueIdentifier;
    /**
     * @return The user name of the virtual machine.
     * 
     */
    private final @Nullable String userName;
    /**
     * @return Tells source of creation of lab virtual machine. Output property only.
     * 
     */
    private final String virtualMachineCreationSource;

    @CustomType.Constructor
    private GetVirtualMachineResult(
        @CustomType.Parameter("allowClaim") @Nullable Boolean allowClaim,
        @CustomType.Parameter("applicableSchedule") ApplicableScheduleResponse applicableSchedule,
        @CustomType.Parameter("artifactDeploymentStatus") ArtifactDeploymentStatusPropertiesResponse artifactDeploymentStatus,
        @CustomType.Parameter("artifacts") @Nullable List<ArtifactInstallPropertiesResponse> artifacts,
        @CustomType.Parameter("computeId") String computeId,
        @CustomType.Parameter("computeVm") ComputeVmPropertiesResponse computeVm,
        @CustomType.Parameter("createdByUser") String createdByUser,
        @CustomType.Parameter("createdByUserId") String createdByUserId,
        @CustomType.Parameter("createdDate") @Nullable String createdDate,
        @CustomType.Parameter("customImageId") @Nullable String customImageId,
        @CustomType.Parameter("dataDiskParameters") @Nullable List<DataDiskPropertiesResponse> dataDiskParameters,
        @CustomType.Parameter("disallowPublicIpAddress") @Nullable Boolean disallowPublicIpAddress,
        @CustomType.Parameter("environmentId") @Nullable String environmentId,
        @CustomType.Parameter("expirationDate") @Nullable String expirationDate,
        @CustomType.Parameter("fqdn") String fqdn,
        @CustomType.Parameter("galleryImageReference") @Nullable GalleryImageReferenceResponse galleryImageReference,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isAuthenticationWithSshKey") @Nullable Boolean isAuthenticationWithSshKey,
        @CustomType.Parameter("labSubnetName") @Nullable String labSubnetName,
        @CustomType.Parameter("labVirtualNetworkId") @Nullable String labVirtualNetworkId,
        @CustomType.Parameter("lastKnownPowerState") String lastKnownPowerState,
        @CustomType.Parameter("location") @Nullable String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networkInterface") @Nullable NetworkInterfacePropertiesResponse networkInterface,
        @CustomType.Parameter("notes") @Nullable String notes,
        @CustomType.Parameter("osType") String osType,
        @CustomType.Parameter("ownerObjectId") @Nullable String ownerObjectId,
        @CustomType.Parameter("ownerUserPrincipalName") @Nullable String ownerUserPrincipalName,
        @CustomType.Parameter("password") @Nullable String password,
        @CustomType.Parameter("planId") @Nullable String planId,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("scheduleParameters") @Nullable List<ScheduleCreationParameterResponse> scheduleParameters,
        @CustomType.Parameter("size") @Nullable String size,
        @CustomType.Parameter("sshKey") @Nullable String sshKey,
        @CustomType.Parameter("storageType") @Nullable String storageType,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("uniqueIdentifier") String uniqueIdentifier,
        @CustomType.Parameter("userName") @Nullable String userName,
        @CustomType.Parameter("virtualMachineCreationSource") String virtualMachineCreationSource) {
        this.allowClaim = allowClaim;
        this.applicableSchedule = applicableSchedule;
        this.artifactDeploymentStatus = artifactDeploymentStatus;
        this.artifacts = artifacts;
        this.computeId = computeId;
        this.computeVm = computeVm;
        this.createdByUser = createdByUser;
        this.createdByUserId = createdByUserId;
        this.createdDate = createdDate;
        this.customImageId = customImageId;
        this.dataDiskParameters = dataDiskParameters;
        this.disallowPublicIpAddress = disallowPublicIpAddress;
        this.environmentId = environmentId;
        this.expirationDate = expirationDate;
        this.fqdn = fqdn;
        this.galleryImageReference = galleryImageReference;
        this.id = id;
        this.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
        this.labSubnetName = labSubnetName;
        this.labVirtualNetworkId = labVirtualNetworkId;
        this.lastKnownPowerState = lastKnownPowerState;
        this.location = location;
        this.name = name;
        this.networkInterface = networkInterface;
        this.notes = notes;
        this.osType = osType;
        this.ownerObjectId = ownerObjectId;
        this.ownerUserPrincipalName = ownerUserPrincipalName;
        this.password = password;
        this.planId = planId;
        this.provisioningState = provisioningState;
        this.scheduleParameters = scheduleParameters;
        this.size = size;
        this.sshKey = sshKey;
        this.storageType = storageType;
        this.tags = tags;
        this.type = type;
        this.uniqueIdentifier = uniqueIdentifier;
        this.userName = userName;
        this.virtualMachineCreationSource = virtualMachineCreationSource;
    }

    /**
     * @return Indicates whether another user can take ownership of the virtual machine
     * 
     */
    public Optional<Boolean> allowClaim() {
        return Optional.ofNullable(this.allowClaim);
    }
    /**
     * @return The applicable schedule for the virtual machine.
     * 
     */
    public ApplicableScheduleResponse applicableSchedule() {
        return this.applicableSchedule;
    }
    /**
     * @return The artifact deployment status for the virtual machine.
     * 
     */
    public ArtifactDeploymentStatusPropertiesResponse artifactDeploymentStatus() {
        return this.artifactDeploymentStatus;
    }
    /**
     * @return The artifacts to be installed on the virtual machine.
     * 
     */
    public List<ArtifactInstallPropertiesResponse> artifacts() {
        return this.artifacts == null ? List.of() : this.artifacts;
    }
    /**
     * @return The resource identifier (Microsoft.Compute) of the virtual machine.
     * 
     */
    public String computeId() {
        return this.computeId;
    }
    /**
     * @return The compute virtual machine properties.
     * 
     */
    public ComputeVmPropertiesResponse computeVm() {
        return this.computeVm;
    }
    /**
     * @return The email address of creator of the virtual machine.
     * 
     */
    public String createdByUser() {
        return this.createdByUser;
    }
    /**
     * @return The object identifier of the creator of the virtual machine.
     * 
     */
    public String createdByUserId() {
        return this.createdByUserId;
    }
    /**
     * @return The creation date of the virtual machine.
     * 
     */
    public Optional<String> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }
    /**
     * @return The custom image identifier of the virtual machine.
     * 
     */
    public Optional<String> customImageId() {
        return Optional.ofNullable(this.customImageId);
    }
    /**
     * @return New or existing data disks to attach to the virtual machine after creation
     * 
     */
    public List<DataDiskPropertiesResponse> dataDiskParameters() {
        return this.dataDiskParameters == null ? List.of() : this.dataDiskParameters;
    }
    /**
     * @return Indicates whether the virtual machine is to be created without a public IP address.
     * 
     */
    public Optional<Boolean> disallowPublicIpAddress() {
        return Optional.ofNullable(this.disallowPublicIpAddress);
    }
    /**
     * @return The resource ID of the environment that contains this virtual machine, if any.
     * 
     */
    public Optional<String> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }
    /**
     * @return The expiration date for VM.
     * 
     */
    public Optional<String> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }
    /**
     * @return The fully-qualified domain name of the virtual machine.
     * 
     */
    public String fqdn() {
        return this.fqdn;
    }
    /**
     * @return The Microsoft Azure Marketplace image reference of the virtual machine.
     * 
     */
    public Optional<GalleryImageReferenceResponse> galleryImageReference() {
        return Optional.ofNullable(this.galleryImageReference);
    }
    /**
     * @return The identifier of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether this virtual machine uses an SSH key for authentication.
     * 
     */
    public Optional<Boolean> isAuthenticationWithSshKey() {
        return Optional.ofNullable(this.isAuthenticationWithSshKey);
    }
    /**
     * @return The lab subnet name of the virtual machine.
     * 
     */
    public Optional<String> labSubnetName() {
        return Optional.ofNullable(this.labSubnetName);
    }
    /**
     * @return The lab virtual network identifier of the virtual machine.
     * 
     */
    public Optional<String> labVirtualNetworkId() {
        return Optional.ofNullable(this.labVirtualNetworkId);
    }
    /**
     * @return Last known compute power state captured in DTL
     * 
     */
    public String lastKnownPowerState() {
        return this.lastKnownPowerState;
    }
    /**
     * @return The location of the resource.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The network interface properties.
     * 
     */
    public Optional<NetworkInterfacePropertiesResponse> networkInterface() {
        return Optional.ofNullable(this.networkInterface);
    }
    /**
     * @return The notes of the virtual machine.
     * 
     */
    public Optional<String> notes() {
        return Optional.ofNullable(this.notes);
    }
    /**
     * @return The OS type of the virtual machine.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return The object identifier of the owner of the virtual machine.
     * 
     */
    public Optional<String> ownerObjectId() {
        return Optional.ofNullable(this.ownerObjectId);
    }
    /**
     * @return The user principal name of the virtual machine owner.
     * 
     */
    public Optional<String> ownerUserPrincipalName() {
        return Optional.ofNullable(this.ownerUserPrincipalName);
    }
    /**
     * @return The password of the virtual machine administrator.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The id of the plan associated with the virtual machine image
     * 
     */
    public Optional<String> planId() {
        return Optional.ofNullable(this.planId);
    }
    /**
     * @return The provisioning status of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Virtual Machine schedules to be created
     * 
     */
    public List<ScheduleCreationParameterResponse> scheduleParameters() {
        return this.scheduleParameters == null ? List.of() : this.scheduleParameters;
    }
    /**
     * @return The size of the virtual machine.
     * 
     */
    public Optional<String> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return The SSH key of the virtual machine administrator.
     * 
     */
    public Optional<String> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }
    /**
     * @return Storage type to use for virtual machine (i.e. Standard, Premium).
     * 
     */
    public Optional<String> storageType() {
        return Optional.ofNullable(this.storageType);
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }
    /**
     * @return The user name of the virtual machine.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }
    /**
     * @return Tells source of creation of lab virtual machine. Output property only.
     * 
     */
    public String virtualMachineCreationSource() {
        return this.virtualMachineCreationSource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualMachineResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean allowClaim;
        private ApplicableScheduleResponse applicableSchedule;
        private ArtifactDeploymentStatusPropertiesResponse artifactDeploymentStatus;
        private @Nullable List<ArtifactInstallPropertiesResponse> artifacts;
        private String computeId;
        private ComputeVmPropertiesResponse computeVm;
        private String createdByUser;
        private String createdByUserId;
        private @Nullable String createdDate;
        private @Nullable String customImageId;
        private @Nullable List<DataDiskPropertiesResponse> dataDiskParameters;
        private @Nullable Boolean disallowPublicIpAddress;
        private @Nullable String environmentId;
        private @Nullable String expirationDate;
        private String fqdn;
        private @Nullable GalleryImageReferenceResponse galleryImageReference;
        private String id;
        private @Nullable Boolean isAuthenticationWithSshKey;
        private @Nullable String labSubnetName;
        private @Nullable String labVirtualNetworkId;
        private String lastKnownPowerState;
        private @Nullable String location;
        private String name;
        private @Nullable NetworkInterfacePropertiesResponse networkInterface;
        private @Nullable String notes;
        private String osType;
        private @Nullable String ownerObjectId;
        private @Nullable String ownerUserPrincipalName;
        private @Nullable String password;
        private @Nullable String planId;
        private String provisioningState;
        private @Nullable List<ScheduleCreationParameterResponse> scheduleParameters;
        private @Nullable String size;
        private @Nullable String sshKey;
        private @Nullable String storageType;
        private @Nullable Map<String,String> tags;
        private String type;
        private String uniqueIdentifier;
        private @Nullable String userName;
        private String virtualMachineCreationSource;

        public Builder() {
    	      // Empty
        }

        public Builder(GetVirtualMachineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowClaim = defaults.allowClaim;
    	      this.applicableSchedule = defaults.applicableSchedule;
    	      this.artifactDeploymentStatus = defaults.artifactDeploymentStatus;
    	      this.artifacts = defaults.artifacts;
    	      this.computeId = defaults.computeId;
    	      this.computeVm = defaults.computeVm;
    	      this.createdByUser = defaults.createdByUser;
    	      this.createdByUserId = defaults.createdByUserId;
    	      this.createdDate = defaults.createdDate;
    	      this.customImageId = defaults.customImageId;
    	      this.dataDiskParameters = defaults.dataDiskParameters;
    	      this.disallowPublicIpAddress = defaults.disallowPublicIpAddress;
    	      this.environmentId = defaults.environmentId;
    	      this.expirationDate = defaults.expirationDate;
    	      this.fqdn = defaults.fqdn;
    	      this.galleryImageReference = defaults.galleryImageReference;
    	      this.id = defaults.id;
    	      this.isAuthenticationWithSshKey = defaults.isAuthenticationWithSshKey;
    	      this.labSubnetName = defaults.labSubnetName;
    	      this.labVirtualNetworkId = defaults.labVirtualNetworkId;
    	      this.lastKnownPowerState = defaults.lastKnownPowerState;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.networkInterface = defaults.networkInterface;
    	      this.notes = defaults.notes;
    	      this.osType = defaults.osType;
    	      this.ownerObjectId = defaults.ownerObjectId;
    	      this.ownerUserPrincipalName = defaults.ownerUserPrincipalName;
    	      this.password = defaults.password;
    	      this.planId = defaults.planId;
    	      this.provisioningState = defaults.provisioningState;
    	      this.scheduleParameters = defaults.scheduleParameters;
    	      this.size = defaults.size;
    	      this.sshKey = defaults.sshKey;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
    	      this.userName = defaults.userName;
    	      this.virtualMachineCreationSource = defaults.virtualMachineCreationSource;
        }

        public Builder allowClaim(@Nullable Boolean allowClaim) {
            this.allowClaim = allowClaim;
            return this;
        }
        public Builder applicableSchedule(ApplicableScheduleResponse applicableSchedule) {
            this.applicableSchedule = Objects.requireNonNull(applicableSchedule);
            return this;
        }
        public Builder artifactDeploymentStatus(ArtifactDeploymentStatusPropertiesResponse artifactDeploymentStatus) {
            this.artifactDeploymentStatus = Objects.requireNonNull(artifactDeploymentStatus);
            return this;
        }
        public Builder artifacts(@Nullable List<ArtifactInstallPropertiesResponse> artifacts) {
            this.artifacts = artifacts;
            return this;
        }
        public Builder artifacts(ArtifactInstallPropertiesResponse... artifacts) {
            return artifacts(List.of(artifacts));
        }
        public Builder computeId(String computeId) {
            this.computeId = Objects.requireNonNull(computeId);
            return this;
        }
        public Builder computeVm(ComputeVmPropertiesResponse computeVm) {
            this.computeVm = Objects.requireNonNull(computeVm);
            return this;
        }
        public Builder createdByUser(String createdByUser) {
            this.createdByUser = Objects.requireNonNull(createdByUser);
            return this;
        }
        public Builder createdByUserId(String createdByUserId) {
            this.createdByUserId = Objects.requireNonNull(createdByUserId);
            return this;
        }
        public Builder createdDate(@Nullable String createdDate) {
            this.createdDate = createdDate;
            return this;
        }
        public Builder customImageId(@Nullable String customImageId) {
            this.customImageId = customImageId;
            return this;
        }
        public Builder dataDiskParameters(@Nullable List<DataDiskPropertiesResponse> dataDiskParameters) {
            this.dataDiskParameters = dataDiskParameters;
            return this;
        }
        public Builder dataDiskParameters(DataDiskPropertiesResponse... dataDiskParameters) {
            return dataDiskParameters(List.of(dataDiskParameters));
        }
        public Builder disallowPublicIpAddress(@Nullable Boolean disallowPublicIpAddress) {
            this.disallowPublicIpAddress = disallowPublicIpAddress;
            return this;
        }
        public Builder environmentId(@Nullable String environmentId) {
            this.environmentId = environmentId;
            return this;
        }
        public Builder expirationDate(@Nullable String expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        public Builder fqdn(String fqdn) {
            this.fqdn = Objects.requireNonNull(fqdn);
            return this;
        }
        public Builder galleryImageReference(@Nullable GalleryImageReferenceResponse galleryImageReference) {
            this.galleryImageReference = galleryImageReference;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isAuthenticationWithSshKey(@Nullable Boolean isAuthenticationWithSshKey) {
            this.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
            return this;
        }
        public Builder labSubnetName(@Nullable String labSubnetName) {
            this.labSubnetName = labSubnetName;
            return this;
        }
        public Builder labVirtualNetworkId(@Nullable String labVirtualNetworkId) {
            this.labVirtualNetworkId = labVirtualNetworkId;
            return this;
        }
        public Builder lastKnownPowerState(String lastKnownPowerState) {
            this.lastKnownPowerState = Objects.requireNonNull(lastKnownPowerState);
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networkInterface(@Nullable NetworkInterfacePropertiesResponse networkInterface) {
            this.networkInterface = networkInterface;
            return this;
        }
        public Builder notes(@Nullable String notes) {
            this.notes = notes;
            return this;
        }
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        public Builder ownerObjectId(@Nullable String ownerObjectId) {
            this.ownerObjectId = ownerObjectId;
            return this;
        }
        public Builder ownerUserPrincipalName(@Nullable String ownerUserPrincipalName) {
            this.ownerUserPrincipalName = ownerUserPrincipalName;
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        public Builder planId(@Nullable String planId) {
            this.planId = planId;
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder scheduleParameters(@Nullable List<ScheduleCreationParameterResponse> scheduleParameters) {
            this.scheduleParameters = scheduleParameters;
            return this;
        }
        public Builder scheduleParameters(ScheduleCreationParameterResponse... scheduleParameters) {
            return scheduleParameters(List.of(scheduleParameters));
        }
        public Builder size(@Nullable String size) {
            this.size = size;
            return this;
        }
        public Builder sshKey(@Nullable String sshKey) {
            this.sshKey = sshKey;
            return this;
        }
        public Builder storageType(@Nullable String storageType) {
            this.storageType = storageType;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder uniqueIdentifier(String uniqueIdentifier) {
            this.uniqueIdentifier = Objects.requireNonNull(uniqueIdentifier);
            return this;
        }
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        public Builder virtualMachineCreationSource(String virtualMachineCreationSource) {
            this.virtualMachineCreationSource = Objects.requireNonNull(virtualMachineCreationSource);
            return this;
        }        public GetVirtualMachineResult build() {
            return new GetVirtualMachineResult(allowClaim, applicableSchedule, artifactDeploymentStatus, artifacts, computeId, computeVm, createdByUser, createdByUserId, createdDate, customImageId, dataDiskParameters, disallowPublicIpAddress, environmentId, expirationDate, fqdn, galleryImageReference, id, isAuthenticationWithSshKey, labSubnetName, labVirtualNetworkId, lastKnownPowerState, location, name, networkInterface, notes, osType, ownerObjectId, ownerUserPrincipalName, password, planId, provisioningState, scheduleParameters, size, sshKey, storageType, tags, type, uniqueIdentifier, userName, virtualMachineCreationSource);
        }
    }
}
