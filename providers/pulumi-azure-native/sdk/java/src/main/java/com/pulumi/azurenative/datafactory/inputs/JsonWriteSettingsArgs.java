// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Json write settings.
 * 
 */
public final class JsonWriteSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final JsonWriteSettingsArgs Empty = new JsonWriteSettingsArgs();

    /**
     * File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is &#39;setOfObjects&#39;. It is case-sensitive.
     * 
     */
    @Import(name="filePattern")
    private @Nullable Output<Object> filePattern;

    /**
     * @return File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is &#39;setOfObjects&#39;. It is case-sensitive.
     * 
     */
    public Optional<Output<Object>> filePattern() {
        return Optional.ofNullable(this.filePattern);
    }

    /**
     * The write setting type.
     * Expected value is &#39;JsonWriteSettings&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The write setting type.
     * Expected value is &#39;JsonWriteSettings&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private JsonWriteSettingsArgs() {}

    private JsonWriteSettingsArgs(JsonWriteSettingsArgs $) {
        this.filePattern = $.filePattern;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JsonWriteSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JsonWriteSettingsArgs $;

        public Builder() {
            $ = new JsonWriteSettingsArgs();
        }

        public Builder(JsonWriteSettingsArgs defaults) {
            $ = new JsonWriteSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filePattern File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is &#39;setOfObjects&#39;. It is case-sensitive.
         * 
         * @return builder
         * 
         */
        public Builder filePattern(@Nullable Output<Object> filePattern) {
            $.filePattern = filePattern;
            return this;
        }

        /**
         * @param filePattern File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is &#39;setOfObjects&#39;. It is case-sensitive.
         * 
         * @return builder
         * 
         */
        public Builder filePattern(Object filePattern) {
            return filePattern(Output.of(filePattern));
        }

        /**
         * @param type The write setting type.
         * Expected value is &#39;JsonWriteSettings&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The write setting type.
         * Expected value is &#39;JsonWriteSettings&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public JsonWriteSettingsArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
