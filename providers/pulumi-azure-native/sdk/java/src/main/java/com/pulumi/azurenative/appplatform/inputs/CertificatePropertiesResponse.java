// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appplatform.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Certificate resource payload.
 * 
 */
public final class CertificatePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertificatePropertiesResponse Empty = new CertificatePropertiesResponse();

    /**
     * The activate date of certificate.
     * 
     */
    @Import(name="activateDate", required=true)
    private String activateDate;

    public String activateDate() {
        return this.activateDate;
    }

    /**
     * The certificate version of key vault.
     * 
     */
    @Import(name="certVersion")
    private @Nullable String certVersion;

    public Optional<String> certVersion() {
        return Optional.ofNullable(this.certVersion);
    }

    /**
     * The domain list of certificate.
     * 
     */
    @Import(name="dnsNames", required=true)
    private List<String> dnsNames;

    public List<String> dnsNames() {
        return this.dnsNames;
    }

    /**
     * The expiration date of certificate.
     * 
     */
    @Import(name="expirationDate", required=true)
    private String expirationDate;

    public String expirationDate() {
        return this.expirationDate;
    }

    /**
     * The issue date of certificate.
     * 
     */
    @Import(name="issuedDate", required=true)
    private String issuedDate;

    public String issuedDate() {
        return this.issuedDate;
    }

    /**
     * The issuer of certificate.
     * 
     */
    @Import(name="issuer", required=true)
    private String issuer;

    public String issuer() {
        return this.issuer;
    }

    /**
     * The certificate name of key vault.
     * 
     */
    @Import(name="keyVaultCertName", required=true)
    private String keyVaultCertName;

    public String keyVaultCertName() {
        return this.keyVaultCertName;
    }

    /**
     * The subject name of certificate.
     * 
     */
    @Import(name="subjectName", required=true)
    private String subjectName;

    public String subjectName() {
        return this.subjectName;
    }

    /**
     * The thumbprint of certificate.
     * 
     */
    @Import(name="thumbprint", required=true)
    private String thumbprint;

    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * The vault uri of user key vault.
     * 
     */
    @Import(name="vaultUri", required=true)
    private String vaultUri;

    public String vaultUri() {
        return this.vaultUri;
    }

    private CertificatePropertiesResponse() {}

    private CertificatePropertiesResponse(CertificatePropertiesResponse $) {
        this.activateDate = $.activateDate;
        this.certVersion = $.certVersion;
        this.dnsNames = $.dnsNames;
        this.expirationDate = $.expirationDate;
        this.issuedDate = $.issuedDate;
        this.issuer = $.issuer;
        this.keyVaultCertName = $.keyVaultCertName;
        this.subjectName = $.subjectName;
        this.thumbprint = $.thumbprint;
        this.vaultUri = $.vaultUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificatePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificatePropertiesResponse $;

        public Builder() {
            $ = new CertificatePropertiesResponse();
        }

        public Builder(CertificatePropertiesResponse defaults) {
            $ = new CertificatePropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder activateDate(String activateDate) {
            $.activateDate = activateDate;
            return this;
        }

        public Builder certVersion(@Nullable String certVersion) {
            $.certVersion = certVersion;
            return this;
        }

        public Builder dnsNames(List<String> dnsNames) {
            $.dnsNames = dnsNames;
            return this;
        }

        public Builder dnsNames(String... dnsNames) {
            return dnsNames(List.of(dnsNames));
        }

        public Builder expirationDate(String expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        public Builder issuedDate(String issuedDate) {
            $.issuedDate = issuedDate;
            return this;
        }

        public Builder issuer(String issuer) {
            $.issuer = issuer;
            return this;
        }

        public Builder keyVaultCertName(String keyVaultCertName) {
            $.keyVaultCertName = keyVaultCertName;
            return this;
        }

        public Builder subjectName(String subjectName) {
            $.subjectName = subjectName;
            return this;
        }

        public Builder thumbprint(String thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        public Builder vaultUri(String vaultUri) {
            $.vaultUri = vaultUri;
            return this;
        }

        public CertificatePropertiesResponse build() {
            $.activateDate = Objects.requireNonNull($.activateDate, "expected parameter 'activateDate' to be non-null");
            $.dnsNames = Objects.requireNonNull($.dnsNames, "expected parameter 'dnsNames' to be non-null");
            $.expirationDate = Objects.requireNonNull($.expirationDate, "expected parameter 'expirationDate' to be non-null");
            $.issuedDate = Objects.requireNonNull($.issuedDate, "expected parameter 'issuedDate' to be non-null");
            $.issuer = Objects.requireNonNull($.issuer, "expected parameter 'issuer' to be non-null");
            $.keyVaultCertName = Objects.requireNonNull($.keyVaultCertName, "expected parameter 'keyVaultCertName' to be non-null");
            $.subjectName = Objects.requireNonNull($.subjectName, "expected parameter 'subjectName' to be non-null");
            $.thumbprint = Objects.requireNonNull($.thumbprint, "expected parameter 'thumbprint' to be non-null");
            $.vaultUri = Objects.requireNonNull($.vaultUri, "expected parameter 'vaultUri' to be non-null");
            return $;
        }
    }

}
