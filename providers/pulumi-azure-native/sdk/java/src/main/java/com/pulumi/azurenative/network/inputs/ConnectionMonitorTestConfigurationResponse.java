// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ConnectionMonitorHttpConfigurationResponse;
import com.pulumi.azurenative.network.inputs.ConnectionMonitorIcmpConfigurationResponse;
import com.pulumi.azurenative.network.inputs.ConnectionMonitorSuccessThresholdResponse;
import com.pulumi.azurenative.network.inputs.ConnectionMonitorTcpConfigurationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a connection monitor test configuration.
 * 
 */
public final class ConnectionMonitorTestConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectionMonitorTestConfigurationResponse Empty = new ConnectionMonitorTestConfigurationResponse();

    /**
     * The parameters used to perform test evaluation over HTTP.
     * 
     */
    @Import(name="httpConfiguration")
    private @Nullable ConnectionMonitorHttpConfigurationResponse httpConfiguration;

    public Optional<ConnectionMonitorHttpConfigurationResponse> httpConfiguration() {
        return Optional.ofNullable(this.httpConfiguration);
    }

    /**
     * The parameters used to perform test evaluation over ICMP.
     * 
     */
    @Import(name="icmpConfiguration")
    private @Nullable ConnectionMonitorIcmpConfigurationResponse icmpConfiguration;

    public Optional<ConnectionMonitorIcmpConfigurationResponse> icmpConfiguration() {
        return Optional.ofNullable(this.icmpConfiguration);
    }

    /**
     * The name of the connection monitor test configuration.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
     * 
     */
    @Import(name="preferredIPVersion")
    private @Nullable String preferredIPVersion;

    public Optional<String> preferredIPVersion() {
        return Optional.ofNullable(this.preferredIPVersion);
    }

    /**
     * The protocol to use in test evaluation.
     * 
     */
    @Import(name="protocol", required=true)
    private String protocol;

    public String protocol() {
        return this.protocol;
    }

    /**
     * The threshold for declaring a test successful.
     * 
     */
    @Import(name="successThreshold")
    private @Nullable ConnectionMonitorSuccessThresholdResponse successThreshold;

    public Optional<ConnectionMonitorSuccessThresholdResponse> successThreshold() {
        return Optional.ofNullable(this.successThreshold);
    }

    /**
     * The parameters used to perform test evaluation over TCP.
     * 
     */
    @Import(name="tcpConfiguration")
    private @Nullable ConnectionMonitorTcpConfigurationResponse tcpConfiguration;

    public Optional<ConnectionMonitorTcpConfigurationResponse> tcpConfiguration() {
        return Optional.ofNullable(this.tcpConfiguration);
    }

    /**
     * The frequency of test evaluation, in seconds.
     * 
     */
    @Import(name="testFrequencySec")
    private @Nullable Integer testFrequencySec;

    public Optional<Integer> testFrequencySec() {
        return Optional.ofNullable(this.testFrequencySec);
    }

    private ConnectionMonitorTestConfigurationResponse() {}

    private ConnectionMonitorTestConfigurationResponse(ConnectionMonitorTestConfigurationResponse $) {
        this.httpConfiguration = $.httpConfiguration;
        this.icmpConfiguration = $.icmpConfiguration;
        this.name = $.name;
        this.preferredIPVersion = $.preferredIPVersion;
        this.protocol = $.protocol;
        this.successThreshold = $.successThreshold;
        this.tcpConfiguration = $.tcpConfiguration;
        this.testFrequencySec = $.testFrequencySec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionMonitorTestConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionMonitorTestConfigurationResponse $;

        public Builder() {
            $ = new ConnectionMonitorTestConfigurationResponse();
        }

        public Builder(ConnectionMonitorTestConfigurationResponse defaults) {
            $ = new ConnectionMonitorTestConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder httpConfiguration(@Nullable ConnectionMonitorHttpConfigurationResponse httpConfiguration) {
            $.httpConfiguration = httpConfiguration;
            return this;
        }

        public Builder icmpConfiguration(@Nullable ConnectionMonitorIcmpConfigurationResponse icmpConfiguration) {
            $.icmpConfiguration = icmpConfiguration;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder preferredIPVersion(@Nullable String preferredIPVersion) {
            $.preferredIPVersion = preferredIPVersion;
            return this;
        }

        public Builder protocol(String protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder successThreshold(@Nullable ConnectionMonitorSuccessThresholdResponse successThreshold) {
            $.successThreshold = successThreshold;
            return this;
        }

        public Builder tcpConfiguration(@Nullable ConnectionMonitorTcpConfigurationResponse tcpConfiguration) {
            $.tcpConfiguration = tcpConfiguration;
            return this;
        }

        public Builder testFrequencySec(@Nullable Integer testFrequencySec) {
            $.testFrequencySec = testFrequencySec;
            return this;
        }

        public ConnectionMonitorTestConfigurationResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            return $;
        }
    }

}
