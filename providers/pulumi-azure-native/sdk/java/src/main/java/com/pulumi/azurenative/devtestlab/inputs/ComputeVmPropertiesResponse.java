// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.azurenative.devtestlab.inputs.ComputeDataDiskResponse;
import com.pulumi.azurenative.devtestlab.inputs.ComputeVmInstanceViewStatusResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of a virtual machine returned by the Microsoft.Compute API.
 * 
 */
public final class ComputeVmPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final ComputeVmPropertiesResponse Empty = new ComputeVmPropertiesResponse();

    /**
     * Gets data disks blob uri for the virtual machine.
     * 
     */
    @Import(name="dataDiskIds")
    private @Nullable List<String> dataDiskIds;

    /**
     * @return Gets data disks blob uri for the virtual machine.
     * 
     */
    public Optional<List<String>> dataDiskIds() {
        return Optional.ofNullable(this.dataDiskIds);
    }

    /**
     * Gets all data disks attached to the virtual machine.
     * 
     */
    @Import(name="dataDisks")
    private @Nullable List<ComputeDataDiskResponse> dataDisks;

    /**
     * @return Gets all data disks attached to the virtual machine.
     * 
     */
    public Optional<List<ComputeDataDiskResponse>> dataDisks() {
        return Optional.ofNullable(this.dataDisks);
    }

    /**
     * Gets the network interface ID of the virtual machine.
     * 
     */
    @Import(name="networkInterfaceId")
    private @Nullable String networkInterfaceId;

    /**
     * @return Gets the network interface ID of the virtual machine.
     * 
     */
    public Optional<String> networkInterfaceId() {
        return Optional.ofNullable(this.networkInterfaceId);
    }

    /**
     * Gets OS disk blob uri for the virtual machine.
     * 
     */
    @Import(name="osDiskId")
    private @Nullable String osDiskId;

    /**
     * @return Gets OS disk blob uri for the virtual machine.
     * 
     */
    public Optional<String> osDiskId() {
        return Optional.ofNullable(this.osDiskId);
    }

    /**
     * Gets the OS type of the virtual machine.
     * 
     */
    @Import(name="osType")
    private @Nullable String osType;

    /**
     * @return Gets the OS type of the virtual machine.
     * 
     */
    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * Gets the statuses of the virtual machine.
     * 
     */
    @Import(name="statuses")
    private @Nullable List<ComputeVmInstanceViewStatusResponse> statuses;

    /**
     * @return Gets the statuses of the virtual machine.
     * 
     */
    public Optional<List<ComputeVmInstanceViewStatusResponse>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * Gets the size of the virtual machine.
     * 
     */
    @Import(name="vmSize")
    private @Nullable String vmSize;

    /**
     * @return Gets the size of the virtual machine.
     * 
     */
    public Optional<String> vmSize() {
        return Optional.ofNullable(this.vmSize);
    }

    private ComputeVmPropertiesResponse() {}

    private ComputeVmPropertiesResponse(ComputeVmPropertiesResponse $) {
        this.dataDiskIds = $.dataDiskIds;
        this.dataDisks = $.dataDisks;
        this.networkInterfaceId = $.networkInterfaceId;
        this.osDiskId = $.osDiskId;
        this.osType = $.osType;
        this.statuses = $.statuses;
        this.vmSize = $.vmSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeVmPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeVmPropertiesResponse $;

        public Builder() {
            $ = new ComputeVmPropertiesResponse();
        }

        public Builder(ComputeVmPropertiesResponse defaults) {
            $ = new ComputeVmPropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataDiskIds Gets data disks blob uri for the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder dataDiskIds(@Nullable List<String> dataDiskIds) {
            $.dataDiskIds = dataDiskIds;
            return this;
        }

        /**
         * @param dataDiskIds Gets data disks blob uri for the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder dataDiskIds(String... dataDiskIds) {
            return dataDiskIds(List.of(dataDiskIds));
        }

        /**
         * @param dataDisks Gets all data disks attached to the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(@Nullable List<ComputeDataDiskResponse> dataDisks) {
            $.dataDisks = dataDisks;
            return this;
        }

        /**
         * @param dataDisks Gets all data disks attached to the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(ComputeDataDiskResponse... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }

        /**
         * @param networkInterfaceId Gets the network interface ID of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceId(@Nullable String networkInterfaceId) {
            $.networkInterfaceId = networkInterfaceId;
            return this;
        }

        /**
         * @param osDiskId Gets OS disk blob uri for the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder osDiskId(@Nullable String osDiskId) {
            $.osDiskId = osDiskId;
            return this;
        }

        /**
         * @param osType Gets the OS type of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable String osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param statuses Gets the statuses of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable List<ComputeVmInstanceViewStatusResponse> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses Gets the statuses of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder statuses(ComputeVmInstanceViewStatusResponse... statuses) {
            return statuses(List.of(statuses));
        }

        /**
         * @param vmSize Gets the size of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder vmSize(@Nullable String vmSize) {
            $.vmSize = vmSize;
            return this;
        }

        public ComputeVmPropertiesResponse build() {
            return $;
        }
    }

}
