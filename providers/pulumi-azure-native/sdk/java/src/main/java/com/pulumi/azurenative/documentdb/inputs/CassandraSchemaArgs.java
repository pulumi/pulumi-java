// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.azurenative.documentdb.inputs.CassandraPartitionKeyArgs;
import com.pulumi.azurenative.documentdb.inputs.ClusterKeyArgs;
import com.pulumi.azurenative.documentdb.inputs.ColumnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Cosmos DB Cassandra table schema
 * 
 */
public final class CassandraSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final CassandraSchemaArgs Empty = new CassandraSchemaArgs();

    /**
     * List of cluster key.
     * 
     */
    @Import(name="clusterKeys")
    private @Nullable Output<List<ClusterKeyArgs>> clusterKeys;

    /**
     * @return List of cluster key.
     * 
     */
    public Optional<Output<List<ClusterKeyArgs>>> clusterKeys() {
        return Optional.ofNullable(this.clusterKeys);
    }

    /**
     * List of Cassandra table columns.
     * 
     */
    @Import(name="columns")
    private @Nullable Output<List<ColumnArgs>> columns;

    /**
     * @return List of Cassandra table columns.
     * 
     */
    public Optional<Output<List<ColumnArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * List of partition key.
     * 
     */
    @Import(name="partitionKeys")
    private @Nullable Output<List<CassandraPartitionKeyArgs>> partitionKeys;

    /**
     * @return List of partition key.
     * 
     */
    public Optional<Output<List<CassandraPartitionKeyArgs>>> partitionKeys() {
        return Optional.ofNullable(this.partitionKeys);
    }

    private CassandraSchemaArgs() {}

    private CassandraSchemaArgs(CassandraSchemaArgs $) {
        this.clusterKeys = $.clusterKeys;
        this.columns = $.columns;
        this.partitionKeys = $.partitionKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CassandraSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CassandraSchemaArgs $;

        public Builder() {
            $ = new CassandraSchemaArgs();
        }

        public Builder(CassandraSchemaArgs defaults) {
            $ = new CassandraSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterKeys List of cluster key.
         * 
         * @return builder
         * 
         */
        public Builder clusterKeys(@Nullable Output<List<ClusterKeyArgs>> clusterKeys) {
            $.clusterKeys = clusterKeys;
            return this;
        }

        /**
         * @param clusterKeys List of cluster key.
         * 
         * @return builder
         * 
         */
        public Builder clusterKeys(List<ClusterKeyArgs> clusterKeys) {
            return clusterKeys(Output.of(clusterKeys));
        }

        /**
         * @param clusterKeys List of cluster key.
         * 
         * @return builder
         * 
         */
        public Builder clusterKeys(ClusterKeyArgs... clusterKeys) {
            return clusterKeys(List.of(clusterKeys));
        }

        /**
         * @param columns List of Cassandra table columns.
         * 
         * @return builder
         * 
         */
        public Builder columns(@Nullable Output<List<ColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns List of Cassandra table columns.
         * 
         * @return builder
         * 
         */
        public Builder columns(List<ColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns List of Cassandra table columns.
         * 
         * @return builder
         * 
         */
        public Builder columns(ColumnArgs... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param partitionKeys List of partition key.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(@Nullable Output<List<CassandraPartitionKeyArgs>> partitionKeys) {
            $.partitionKeys = partitionKeys;
            return this;
        }

        /**
         * @param partitionKeys List of partition key.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(List<CassandraPartitionKeyArgs> partitionKeys) {
            return partitionKeys(Output.of(partitionKeys));
        }

        /**
         * @param partitionKeys List of partition key.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(CassandraPartitionKeyArgs... partitionKeys) {
            return partitionKeys(List.of(partitionKeys));
        }

        public CassandraSchemaArgs build() {
            return $;
        }
    }

}
