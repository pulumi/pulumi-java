// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the TCP configuration.
 * 
 */
public final class ConnectionMonitorTcpConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectionMonitorTcpConfigurationResponse Empty = new ConnectionMonitorTcpConfigurationResponse();

    /**
     * Destination port behavior.
     * 
     */
    @Import(name="destinationPortBehavior")
    private @Nullable String destinationPortBehavior;

    /**
     * @return Destination port behavior.
     * 
     */
    public Optional<String> destinationPortBehavior() {
        return Optional.ofNullable(this.destinationPortBehavior);
    }

    /**
     * Value indicating whether path evaluation with trace route should be disabled.
     * 
     */
    @Import(name="disableTraceRoute")
    private @Nullable Boolean disableTraceRoute;

    /**
     * @return Value indicating whether path evaluation with trace route should be disabled.
     * 
     */
    public Optional<Boolean> disableTraceRoute() {
        return Optional.ofNullable(this.disableTraceRoute);
    }

    /**
     * The port to connect to.
     * 
     */
    @Import(name="port")
    private @Nullable Integer port;

    /**
     * @return The port to connect to.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }

    private ConnectionMonitorTcpConfigurationResponse() {}

    private ConnectionMonitorTcpConfigurationResponse(ConnectionMonitorTcpConfigurationResponse $) {
        this.destinationPortBehavior = $.destinationPortBehavior;
        this.disableTraceRoute = $.disableTraceRoute;
        this.port = $.port;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionMonitorTcpConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionMonitorTcpConfigurationResponse $;

        public Builder() {
            $ = new ConnectionMonitorTcpConfigurationResponse();
        }

        public Builder(ConnectionMonitorTcpConfigurationResponse defaults) {
            $ = new ConnectionMonitorTcpConfigurationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationPortBehavior Destination port behavior.
         * 
         * @return builder
         * 
         */
        public Builder destinationPortBehavior(@Nullable String destinationPortBehavior) {
            $.destinationPortBehavior = destinationPortBehavior;
            return this;
        }

        /**
         * @param disableTraceRoute Value indicating whether path evaluation with trace route should be disabled.
         * 
         * @return builder
         * 
         */
        public Builder disableTraceRoute(@Nullable Boolean disableTraceRoute) {
            $.disableTraceRoute = disableTraceRoute;
            return this;
        }

        /**
         * @param port The port to connect to.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Integer port) {
            $.port = port;
            return this;
        }

        public ConnectionMonitorTcpConfigurationResponse build() {
            return $;
        }
    }

}
