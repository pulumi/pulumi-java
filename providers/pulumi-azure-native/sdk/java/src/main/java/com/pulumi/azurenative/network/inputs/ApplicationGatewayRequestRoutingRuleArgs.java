// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.ApplicationGatewayRequestRoutingRuleType;
import com.pulumi.azurenative.network.inputs.SubResourceArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Request routing rule of an application gateway.
 * 
 */
public final class ApplicationGatewayRequestRoutingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayRequestRoutingRuleArgs Empty = new ApplicationGatewayRequestRoutingRuleArgs();

    /**
     * Backend address pool resource of the application gateway.
     * 
     */
    @Import(name="backendAddressPool")
    private @Nullable Output<SubResourceArgs> backendAddressPool;

    public Optional<Output<SubResourceArgs>> backendAddressPool() {
        return Optional.ofNullable(this.backendAddressPool);
    }

    /**
     * Backend http settings resource of the application gateway.
     * 
     */
    @Import(name="backendHttpSettings")
    private @Nullable Output<SubResourceArgs> backendHttpSettings;

    public Optional<Output<SubResourceArgs>> backendHttpSettings() {
        return Optional.ofNullable(this.backendHttpSettings);
    }

    /**
     * Http listener resource of the application gateway.
     * 
     */
    @Import(name="httpListener")
    private @Nullable Output<SubResourceArgs> httpListener;

    public Optional<Output<SubResourceArgs>> httpListener() {
        return Optional.ofNullable(this.httpListener);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the request routing rule that is unique within an Application Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Priority of the request routing rule.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Redirect configuration resource of the application gateway.
     * 
     */
    @Import(name="redirectConfiguration")
    private @Nullable Output<SubResourceArgs> redirectConfiguration;

    public Optional<Output<SubResourceArgs>> redirectConfiguration() {
        return Optional.ofNullable(this.redirectConfiguration);
    }

    /**
     * Rewrite Rule Set resource in Basic rule of the application gateway.
     * 
     */
    @Import(name="rewriteRuleSet")
    private @Nullable Output<SubResourceArgs> rewriteRuleSet;

    public Optional<Output<SubResourceArgs>> rewriteRuleSet() {
        return Optional.ofNullable(this.rewriteRuleSet);
    }

    /**
     * Rule type.
     * 
     */
    @Import(name="ruleType")
    private @Nullable Output<Either<String,ApplicationGatewayRequestRoutingRuleType>> ruleType;

    public Optional<Output<Either<String,ApplicationGatewayRequestRoutingRuleType>>> ruleType() {
        return Optional.ofNullable(this.ruleType);
    }

    /**
     * URL path map resource of the application gateway.
     * 
     */
    @Import(name="urlPathMap")
    private @Nullable Output<SubResourceArgs> urlPathMap;

    public Optional<Output<SubResourceArgs>> urlPathMap() {
        return Optional.ofNullable(this.urlPathMap);
    }

    private ApplicationGatewayRequestRoutingRuleArgs() {}

    private ApplicationGatewayRequestRoutingRuleArgs(ApplicationGatewayRequestRoutingRuleArgs $) {
        this.backendAddressPool = $.backendAddressPool;
        this.backendHttpSettings = $.backendHttpSettings;
        this.httpListener = $.httpListener;
        this.id = $.id;
        this.name = $.name;
        this.priority = $.priority;
        this.redirectConfiguration = $.redirectConfiguration;
        this.rewriteRuleSet = $.rewriteRuleSet;
        this.ruleType = $.ruleType;
        this.urlPathMap = $.urlPathMap;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGatewayRequestRoutingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGatewayRequestRoutingRuleArgs $;

        public Builder() {
            $ = new ApplicationGatewayRequestRoutingRuleArgs();
        }

        public Builder(ApplicationGatewayRequestRoutingRuleArgs defaults) {
            $ = new ApplicationGatewayRequestRoutingRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder backendAddressPool(@Nullable Output<SubResourceArgs> backendAddressPool) {
            $.backendAddressPool = backendAddressPool;
            return this;
        }

        public Builder backendAddressPool(SubResourceArgs backendAddressPool) {
            return backendAddressPool(Output.of(backendAddressPool));
        }

        public Builder backendHttpSettings(@Nullable Output<SubResourceArgs> backendHttpSettings) {
            $.backendHttpSettings = backendHttpSettings;
            return this;
        }

        public Builder backendHttpSettings(SubResourceArgs backendHttpSettings) {
            return backendHttpSettings(Output.of(backendHttpSettings));
        }

        public Builder httpListener(@Nullable Output<SubResourceArgs> httpListener) {
            $.httpListener = httpListener;
            return this;
        }

        public Builder httpListener(SubResourceArgs httpListener) {
            return httpListener(Output.of(httpListener));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder redirectConfiguration(@Nullable Output<SubResourceArgs> redirectConfiguration) {
            $.redirectConfiguration = redirectConfiguration;
            return this;
        }

        public Builder redirectConfiguration(SubResourceArgs redirectConfiguration) {
            return redirectConfiguration(Output.of(redirectConfiguration));
        }

        public Builder rewriteRuleSet(@Nullable Output<SubResourceArgs> rewriteRuleSet) {
            $.rewriteRuleSet = rewriteRuleSet;
            return this;
        }

        public Builder rewriteRuleSet(SubResourceArgs rewriteRuleSet) {
            return rewriteRuleSet(Output.of(rewriteRuleSet));
        }

        public Builder ruleType(@Nullable Output<Either<String,ApplicationGatewayRequestRoutingRuleType>> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        public Builder ruleType(Either<String,ApplicationGatewayRequestRoutingRuleType> ruleType) {
            return ruleType(Output.of(ruleType));
        }

        public Builder ruleType(String ruleType) {
            return ruleType(Either.ofLeft(ruleType));
        }

        public Builder ruleType(ApplicationGatewayRequestRoutingRuleType ruleType) {
            return ruleType(Either.ofRight(ruleType));
        }

        public Builder urlPathMap(@Nullable Output<SubResourceArgs> urlPathMap) {
            $.urlPathMap = urlPathMap;
            return this;
        }

        public Builder urlPathMap(SubResourceArgs urlPathMap) {
            return urlPathMap(Output.of(urlPathMap));
        }

        public ApplicationGatewayRequestRoutingRuleArgs build() {
            return $;
        }
    }

}
