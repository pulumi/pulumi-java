// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.edgeorder.inputs;

import com.pulumi.azurenative.edgeorder.inputs.DeviceDetailsResponse;
import com.pulumi.azurenative.edgeorder.inputs.DisplayInfoResponse;
import com.pulumi.azurenative.edgeorder.inputs.HierarchyInformationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents product details
 * 
 */
public final class ProductDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ProductDetailsResponse Empty = new ProductDetailsResponse();

    /**
     * Quantity of the product
     * 
     */
    @Import(name="count", required=true)
    private Integer count;

    /**
     * @return Quantity of the product
     * 
     */
    public Integer count() {
        return this.count;
    }

    /**
     * list of device details
     * 
     */
    @Import(name="deviceDetails", required=true)
    private List<DeviceDetailsResponse> deviceDetails;

    /**
     * @return list of device details
     * 
     */
    public List<DeviceDetailsResponse> deviceDetails() {
        return this.deviceDetails;
    }

    /**
     * Display details of the product
     * 
     */
    @Import(name="displayInfo")
    private @Nullable DisplayInfoResponse displayInfo;

    /**
     * @return Display details of the product
     * 
     */
    public Optional<DisplayInfoResponse> displayInfo() {
        return Optional.ofNullable(this.displayInfo);
    }

    /**
     * Hierarchy of the product which uniquely identifies the product
     * 
     */
    @Import(name="hierarchyInformation", required=true)
    private HierarchyInformationResponse hierarchyInformation;

    /**
     * @return Hierarchy of the product which uniquely identifies the product
     * 
     */
    public HierarchyInformationResponse hierarchyInformation() {
        return this.hierarchyInformation;
    }

    /**
     * Double encryption status of the configuration. Read-only field.
     * 
     */
    @Import(name="productDoubleEncryptionStatus", required=true)
    private String productDoubleEncryptionStatus;

    /**
     * @return Double encryption status of the configuration. Read-only field.
     * 
     */
    public String productDoubleEncryptionStatus() {
        return this.productDoubleEncryptionStatus;
    }

    private ProductDetailsResponse() {}

    private ProductDetailsResponse(ProductDetailsResponse $) {
        this.count = $.count;
        this.deviceDetails = $.deviceDetails;
        this.displayInfo = $.displayInfo;
        this.hierarchyInformation = $.hierarchyInformation;
        this.productDoubleEncryptionStatus = $.productDoubleEncryptionStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProductDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProductDetailsResponse $;

        public Builder() {
            $ = new ProductDetailsResponse();
        }

        public Builder(ProductDetailsResponse defaults) {
            $ = new ProductDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param count Quantity of the product
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            $.count = count;
            return this;
        }

        /**
         * @param deviceDetails list of device details
         * 
         * @return builder
         * 
         */
        public Builder deviceDetails(List<DeviceDetailsResponse> deviceDetails) {
            $.deviceDetails = deviceDetails;
            return this;
        }

        /**
         * @param deviceDetails list of device details
         * 
         * @return builder
         * 
         */
        public Builder deviceDetails(DeviceDetailsResponse... deviceDetails) {
            return deviceDetails(List.of(deviceDetails));
        }

        /**
         * @param displayInfo Display details of the product
         * 
         * @return builder
         * 
         */
        public Builder displayInfo(@Nullable DisplayInfoResponse displayInfo) {
            $.displayInfo = displayInfo;
            return this;
        }

        /**
         * @param hierarchyInformation Hierarchy of the product which uniquely identifies the product
         * 
         * @return builder
         * 
         */
        public Builder hierarchyInformation(HierarchyInformationResponse hierarchyInformation) {
            $.hierarchyInformation = hierarchyInformation;
            return this;
        }

        /**
         * @param productDoubleEncryptionStatus Double encryption status of the configuration. Read-only field.
         * 
         * @return builder
         * 
         */
        public Builder productDoubleEncryptionStatus(String productDoubleEncryptionStatus) {
            $.productDoubleEncryptionStatus = productDoubleEncryptionStatus;
            return this;
        }

        public ProductDetailsResponse build() {
            $.count = Objects.requireNonNull($.count, "expected parameter 'count' to be non-null");
            $.deviceDetails = Objects.requireNonNull($.deviceDetails, "expected parameter 'deviceDetails' to be non-null");
            $.hierarchyInformation = Objects.requireNonNull($.hierarchyInformation, "expected parameter 'hierarchyInformation' to be non-null");
            $.productDoubleEncryptionStatus = Objects.requireNonNull($.productDoubleEncryptionStatus, "expected parameter 'productDoubleEncryptionStatus' to be non-null");
            return $;
        }
    }

}
