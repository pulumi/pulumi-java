// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.confidentialledger.inputs;

import com.pulumi.azurenative.confidentialledger.inputs.AADBasedSecurityPrincipalResponse;
import com.pulumi.azurenative.confidentialledger.inputs.CertBasedSecurityPrincipalResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Additional Confidential Ledger properties.
 * 
 */
public final class LedgerPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final LedgerPropertiesResponse Empty = new LedgerPropertiesResponse();

    /**
     * Array of all AAD based Security Principals.
     * 
     */
    @Import(name="aadBasedSecurityPrincipals")
    private @Nullable List<AADBasedSecurityPrincipalResponse> aadBasedSecurityPrincipals;

    /**
     * @return Array of all AAD based Security Principals.
     * 
     */
    public Optional<List<AADBasedSecurityPrincipalResponse>> aadBasedSecurityPrincipals() {
        return Optional.ofNullable(this.aadBasedSecurityPrincipals);
    }

    /**
     * Array of all cert based Security Principals.
     * 
     */
    @Import(name="certBasedSecurityPrincipals")
    private @Nullable List<CertBasedSecurityPrincipalResponse> certBasedSecurityPrincipals;

    /**
     * @return Array of all cert based Security Principals.
     * 
     */
    public Optional<List<CertBasedSecurityPrincipalResponse>> certBasedSecurityPrincipals() {
        return Optional.ofNullable(this.certBasedSecurityPrincipals);
    }

    /**
     * Endpoint for accessing network identity.
     * 
     */
    @Import(name="identityServiceUri", required=true)
    private String identityServiceUri;

    /**
     * @return Endpoint for accessing network identity.
     * 
     */
    public String identityServiceUri() {
        return this.identityServiceUri;
    }

    /**
     * Internal namespace for the Ledger
     * 
     */
    @Import(name="ledgerInternalNamespace", required=true)
    private String ledgerInternalNamespace;

    /**
     * @return Internal namespace for the Ledger
     * 
     */
    public String ledgerInternalNamespace() {
        return this.ledgerInternalNamespace;
    }

    /**
     * Unique name for the Confidential Ledger.
     * 
     */
    @Import(name="ledgerName", required=true)
    private String ledgerName;

    /**
     * @return Unique name for the Confidential Ledger.
     * 
     */
    public String ledgerName() {
        return this.ledgerName;
    }

    /**
     * Name of the Blob Storage Account for saving ledger files
     * 
     */
    @Import(name="ledgerStorageAccount")
    private @Nullable String ledgerStorageAccount;

    /**
     * @return Name of the Blob Storage Account for saving ledger files
     * 
     */
    public Optional<String> ledgerStorageAccount() {
        return Optional.ofNullable(this.ledgerStorageAccount);
    }

    /**
     * Type of Confidential Ledger
     * 
     */
    @Import(name="ledgerType")
    private @Nullable String ledgerType;

    /**
     * @return Type of Confidential Ledger
     * 
     */
    public Optional<String> ledgerType() {
        return Optional.ofNullable(this.ledgerType);
    }

    /**
     * Endpoint for calling Ledger Service.
     * 
     */
    @Import(name="ledgerUri", required=true)
    private String ledgerUri;

    /**
     * @return Endpoint for calling Ledger Service.
     * 
     */
    public String ledgerUri() {
        return this.ledgerUri;
    }

    /**
     * Provisioning state of Ledger Resource
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return Provisioning state of Ledger Resource
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    private LedgerPropertiesResponse() {}

    private LedgerPropertiesResponse(LedgerPropertiesResponse $) {
        this.aadBasedSecurityPrincipals = $.aadBasedSecurityPrincipals;
        this.certBasedSecurityPrincipals = $.certBasedSecurityPrincipals;
        this.identityServiceUri = $.identityServiceUri;
        this.ledgerInternalNamespace = $.ledgerInternalNamespace;
        this.ledgerName = $.ledgerName;
        this.ledgerStorageAccount = $.ledgerStorageAccount;
        this.ledgerType = $.ledgerType;
        this.ledgerUri = $.ledgerUri;
        this.provisioningState = $.provisioningState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LedgerPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LedgerPropertiesResponse $;

        public Builder() {
            $ = new LedgerPropertiesResponse();
        }

        public Builder(LedgerPropertiesResponse defaults) {
            $ = new LedgerPropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param aadBasedSecurityPrincipals Array of all AAD based Security Principals.
         * 
         * @return builder
         * 
         */
        public Builder aadBasedSecurityPrincipals(@Nullable List<AADBasedSecurityPrincipalResponse> aadBasedSecurityPrincipals) {
            $.aadBasedSecurityPrincipals = aadBasedSecurityPrincipals;
            return this;
        }

        /**
         * @param aadBasedSecurityPrincipals Array of all AAD based Security Principals.
         * 
         * @return builder
         * 
         */
        public Builder aadBasedSecurityPrincipals(AADBasedSecurityPrincipalResponse... aadBasedSecurityPrincipals) {
            return aadBasedSecurityPrincipals(List.of(aadBasedSecurityPrincipals));
        }

        /**
         * @param certBasedSecurityPrincipals Array of all cert based Security Principals.
         * 
         * @return builder
         * 
         */
        public Builder certBasedSecurityPrincipals(@Nullable List<CertBasedSecurityPrincipalResponse> certBasedSecurityPrincipals) {
            $.certBasedSecurityPrincipals = certBasedSecurityPrincipals;
            return this;
        }

        /**
         * @param certBasedSecurityPrincipals Array of all cert based Security Principals.
         * 
         * @return builder
         * 
         */
        public Builder certBasedSecurityPrincipals(CertBasedSecurityPrincipalResponse... certBasedSecurityPrincipals) {
            return certBasedSecurityPrincipals(List.of(certBasedSecurityPrincipals));
        }

        /**
         * @param identityServiceUri Endpoint for accessing network identity.
         * 
         * @return builder
         * 
         */
        public Builder identityServiceUri(String identityServiceUri) {
            $.identityServiceUri = identityServiceUri;
            return this;
        }

        /**
         * @param ledgerInternalNamespace Internal namespace for the Ledger
         * 
         * @return builder
         * 
         */
        public Builder ledgerInternalNamespace(String ledgerInternalNamespace) {
            $.ledgerInternalNamespace = ledgerInternalNamespace;
            return this;
        }

        /**
         * @param ledgerName Unique name for the Confidential Ledger.
         * 
         * @return builder
         * 
         */
        public Builder ledgerName(String ledgerName) {
            $.ledgerName = ledgerName;
            return this;
        }

        /**
         * @param ledgerStorageAccount Name of the Blob Storage Account for saving ledger files
         * 
         * @return builder
         * 
         */
        public Builder ledgerStorageAccount(@Nullable String ledgerStorageAccount) {
            $.ledgerStorageAccount = ledgerStorageAccount;
            return this;
        }

        /**
         * @param ledgerType Type of Confidential Ledger
         * 
         * @return builder
         * 
         */
        public Builder ledgerType(@Nullable String ledgerType) {
            $.ledgerType = ledgerType;
            return this;
        }

        /**
         * @param ledgerUri Endpoint for calling Ledger Service.
         * 
         * @return builder
         * 
         */
        public Builder ledgerUri(String ledgerUri) {
            $.ledgerUri = ledgerUri;
            return this;
        }

        /**
         * @param provisioningState Provisioning state of Ledger Resource
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public LedgerPropertiesResponse build() {
            $.identityServiceUri = Objects.requireNonNull($.identityServiceUri, "expected parameter 'identityServiceUri' to be non-null");
            $.ledgerInternalNamespace = Objects.requireNonNull($.ledgerInternalNamespace, "expected parameter 'ledgerInternalNamespace' to be non-null");
            $.ledgerName = Objects.requireNonNull($.ledgerName, "expected parameter 'ledgerName' to be non-null");
            $.ledgerUri = Objects.requireNonNull($.ledgerUri, "expected parameter 'ledgerUri' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
