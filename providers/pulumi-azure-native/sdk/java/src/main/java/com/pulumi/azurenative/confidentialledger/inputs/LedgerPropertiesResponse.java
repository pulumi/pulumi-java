// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.confidentialledger.inputs;

import com.pulumi.azurenative.confidentialledger.inputs.AADBasedSecurityPrincipalResponse;
import com.pulumi.azurenative.confidentialledger.inputs.CertBasedSecurityPrincipalResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Additional Confidential Ledger properties.
 * 
 */
public final class LedgerPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final LedgerPropertiesResponse Empty = new LedgerPropertiesResponse();

    /**
     * Array of all AAD based Security Principals.
     * 
     */
    @Import(name="aadBasedSecurityPrincipals")
      private final @Nullable List<AADBasedSecurityPrincipalResponse> aadBasedSecurityPrincipals;

    public List<AADBasedSecurityPrincipalResponse> aadBasedSecurityPrincipals() {
        return this.aadBasedSecurityPrincipals == null ? List.of() : this.aadBasedSecurityPrincipals;
    }

    /**
     * Array of all cert based Security Principals.
     * 
     */
    @Import(name="certBasedSecurityPrincipals")
      private final @Nullable List<CertBasedSecurityPrincipalResponse> certBasedSecurityPrincipals;

    public List<CertBasedSecurityPrincipalResponse> certBasedSecurityPrincipals() {
        return this.certBasedSecurityPrincipals == null ? List.of() : this.certBasedSecurityPrincipals;
    }

    /**
     * Endpoint for accessing network identity.
     * 
     */
    @Import(name="identityServiceUri", required=true)
      private final String identityServiceUri;

    public String identityServiceUri() {
        return this.identityServiceUri;
    }

    /**
     * Internal namespace for the Ledger
     * 
     */
    @Import(name="ledgerInternalNamespace", required=true)
      private final String ledgerInternalNamespace;

    public String ledgerInternalNamespace() {
        return this.ledgerInternalNamespace;
    }

    /**
     * Unique name for the Confidential Ledger.
     * 
     */
    @Import(name="ledgerName", required=true)
      private final String ledgerName;

    public String ledgerName() {
        return this.ledgerName;
    }

    /**
     * Name of the Blob Storage Account for saving ledger files
     * 
     */
    @Import(name="ledgerStorageAccount")
      private final @Nullable String ledgerStorageAccount;

    public Optional<String> ledgerStorageAccount() {
        return this.ledgerStorageAccount == null ? Optional.empty() : Optional.ofNullable(this.ledgerStorageAccount);
    }

    /**
     * Type of Confidential Ledger
     * 
     */
    @Import(name="ledgerType")
      private final @Nullable String ledgerType;

    public Optional<String> ledgerType() {
        return this.ledgerType == null ? Optional.empty() : Optional.ofNullable(this.ledgerType);
    }

    /**
     * Endpoint for calling Ledger Service.
     * 
     */
    @Import(name="ledgerUri", required=true)
      private final String ledgerUri;

    public String ledgerUri() {
        return this.ledgerUri;
    }

    /**
     * Provisioning state of Ledger Resource
     * 
     */
    @Import(name="provisioningState", required=true)
      private final String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    public LedgerPropertiesResponse(
        @Nullable List<AADBasedSecurityPrincipalResponse> aadBasedSecurityPrincipals,
        @Nullable List<CertBasedSecurityPrincipalResponse> certBasedSecurityPrincipals,
        String identityServiceUri,
        String ledgerInternalNamespace,
        String ledgerName,
        @Nullable String ledgerStorageAccount,
        @Nullable String ledgerType,
        String ledgerUri,
        String provisioningState) {
        this.aadBasedSecurityPrincipals = aadBasedSecurityPrincipals;
        this.certBasedSecurityPrincipals = certBasedSecurityPrincipals;
        this.identityServiceUri = Objects.requireNonNull(identityServiceUri, "expected parameter 'identityServiceUri' to be non-null");
        this.ledgerInternalNamespace = Objects.requireNonNull(ledgerInternalNamespace, "expected parameter 'ledgerInternalNamespace' to be non-null");
        this.ledgerName = Objects.requireNonNull(ledgerName, "expected parameter 'ledgerName' to be non-null");
        this.ledgerStorageAccount = ledgerStorageAccount;
        this.ledgerType = ledgerType;
        this.ledgerUri = Objects.requireNonNull(ledgerUri, "expected parameter 'ledgerUri' to be non-null");
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
    }

    private LedgerPropertiesResponse() {
        this.aadBasedSecurityPrincipals = List.of();
        this.certBasedSecurityPrincipals = List.of();
        this.identityServiceUri = null;
        this.ledgerInternalNamespace = null;
        this.ledgerName = null;
        this.ledgerStorageAccount = null;
        this.ledgerType = null;
        this.ledgerUri = null;
        this.provisioningState = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LedgerPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<AADBasedSecurityPrincipalResponse> aadBasedSecurityPrincipals;
        private @Nullable List<CertBasedSecurityPrincipalResponse> certBasedSecurityPrincipals;
        private String identityServiceUri;
        private String ledgerInternalNamespace;
        private String ledgerName;
        private @Nullable String ledgerStorageAccount;
        private @Nullable String ledgerType;
        private String ledgerUri;
        private String provisioningState;

        public Builder() {
    	      // Empty
        }

        public Builder(LedgerPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aadBasedSecurityPrincipals = defaults.aadBasedSecurityPrincipals;
    	      this.certBasedSecurityPrincipals = defaults.certBasedSecurityPrincipals;
    	      this.identityServiceUri = defaults.identityServiceUri;
    	      this.ledgerInternalNamespace = defaults.ledgerInternalNamespace;
    	      this.ledgerName = defaults.ledgerName;
    	      this.ledgerStorageAccount = defaults.ledgerStorageAccount;
    	      this.ledgerType = defaults.ledgerType;
    	      this.ledgerUri = defaults.ledgerUri;
    	      this.provisioningState = defaults.provisioningState;
        }

        public Builder aadBasedSecurityPrincipals(@Nullable List<AADBasedSecurityPrincipalResponse> aadBasedSecurityPrincipals) {
            this.aadBasedSecurityPrincipals = aadBasedSecurityPrincipals;
            return this;
        }
        public Builder aadBasedSecurityPrincipals(AADBasedSecurityPrincipalResponse... aadBasedSecurityPrincipals) {
            return aadBasedSecurityPrincipals(List.of(aadBasedSecurityPrincipals));
        }
        public Builder certBasedSecurityPrincipals(@Nullable List<CertBasedSecurityPrincipalResponse> certBasedSecurityPrincipals) {
            this.certBasedSecurityPrincipals = certBasedSecurityPrincipals;
            return this;
        }
        public Builder certBasedSecurityPrincipals(CertBasedSecurityPrincipalResponse... certBasedSecurityPrincipals) {
            return certBasedSecurityPrincipals(List.of(certBasedSecurityPrincipals));
        }
        public Builder identityServiceUri(String identityServiceUri) {
            this.identityServiceUri = Objects.requireNonNull(identityServiceUri);
            return this;
        }
        public Builder ledgerInternalNamespace(String ledgerInternalNamespace) {
            this.ledgerInternalNamespace = Objects.requireNonNull(ledgerInternalNamespace);
            return this;
        }
        public Builder ledgerName(String ledgerName) {
            this.ledgerName = Objects.requireNonNull(ledgerName);
            return this;
        }
        public Builder ledgerStorageAccount(@Nullable String ledgerStorageAccount) {
            this.ledgerStorageAccount = ledgerStorageAccount;
            return this;
        }
        public Builder ledgerType(@Nullable String ledgerType) {
            this.ledgerType = ledgerType;
            return this;
        }
        public Builder ledgerUri(String ledgerUri) {
            this.ledgerUri = Objects.requireNonNull(ledgerUri);
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }        public LedgerPropertiesResponse build() {
            return new LedgerPropertiesResponse(aadBasedSecurityPrincipals, certBasedSecurityPrincipals, identityServiceUri, ledgerInternalNamespace, ledgerName, ledgerStorageAccount, ledgerType, ledgerUri, provisioningState);
        }
    }
}
