// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.DataFlowResponseFolder;
import com.pulumi.azurenative.datafactory.inputs.DataFlowSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.DataFlowSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.TransformationResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Data flow flowlet
 * 
 */
public final class FlowletResponse extends com.pulumi.resources.InvokeArgs {

    public static final FlowletResponse Empty = new FlowletResponse();

    /**
     * List of tags that can be used for describing the data flow.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The description of the data flow.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The folder that this data flow is in. If not specified, Data flow will appear at the root level.
     * 
     */
    @Import(name="folder")
    private @Nullable DataFlowResponseFolder folder;

    public Optional<DataFlowResponseFolder> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Flowlet script.
     * 
     */
    @Import(name="script")
    private @Nullable String script;

    public Optional<String> script() {
        return Optional.ofNullable(this.script);
    }

    /**
     * Flowlet script lines.
     * 
     */
    @Import(name="scriptLines")
    private @Nullable List<String> scriptLines;

    public Optional<List<String>> scriptLines() {
        return Optional.ofNullable(this.scriptLines);
    }

    /**
     * List of sinks in Flowlet.
     * 
     */
    @Import(name="sinks")
    private @Nullable List<DataFlowSinkResponse> sinks;

    public Optional<List<DataFlowSinkResponse>> sinks() {
        return Optional.ofNullable(this.sinks);
    }

    /**
     * List of sources in Flowlet.
     * 
     */
    @Import(name="sources")
    private @Nullable List<DataFlowSourceResponse> sources;

    public Optional<List<DataFlowSourceResponse>> sources() {
        return Optional.ofNullable(this.sources);
    }

    /**
     * List of transformations in Flowlet.
     * 
     */
    @Import(name="transformations")
    private @Nullable List<TransformationResponse> transformations;

    public Optional<List<TransformationResponse>> transformations() {
        return Optional.ofNullable(this.transformations);
    }

    /**
     * Type of data flow.
     * Expected value is &#39;Flowlet&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private FlowletResponse() {}

    private FlowletResponse(FlowletResponse $) {
        this.annotations = $.annotations;
        this.description = $.description;
        this.folder = $.folder;
        this.script = $.script;
        this.scriptLines = $.scriptLines;
        this.sinks = $.sinks;
        this.sources = $.sources;
        this.transformations = $.transformations;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowletResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowletResponse $;

        public Builder() {
            $ = new FlowletResponse();
        }

        public Builder(FlowletResponse defaults) {
            $ = new FlowletResponse(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder folder(@Nullable DataFlowResponseFolder folder) {
            $.folder = folder;
            return this;
        }

        public Builder script(@Nullable String script) {
            $.script = script;
            return this;
        }

        public Builder scriptLines(@Nullable List<String> scriptLines) {
            $.scriptLines = scriptLines;
            return this;
        }

        public Builder scriptLines(String... scriptLines) {
            return scriptLines(List.of(scriptLines));
        }

        public Builder sinks(@Nullable List<DataFlowSinkResponse> sinks) {
            $.sinks = sinks;
            return this;
        }

        public Builder sinks(DataFlowSinkResponse... sinks) {
            return sinks(List.of(sinks));
        }

        public Builder sources(@Nullable List<DataFlowSourceResponse> sources) {
            $.sources = sources;
            return this;
        }

        public Builder sources(DataFlowSourceResponse... sources) {
            return sources(List.of(sources));
        }

        public Builder transformations(@Nullable List<TransformationResponse> transformations) {
            $.transformations = transformations;
            return this;
        }

        public Builder transformations(TransformationResponse... transformations) {
            return transformations(List.of(transformations));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public FlowletResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
