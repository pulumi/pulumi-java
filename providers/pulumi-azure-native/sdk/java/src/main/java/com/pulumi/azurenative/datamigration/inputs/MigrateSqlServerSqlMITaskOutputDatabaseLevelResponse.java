// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse Empty = new MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse();

    /**
     * Name of the database
     * 
     */
    @Import(name="databaseName", required=true)
    private String databaseName;

    /**
     * @return Name of the database
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Migration end time
     * 
     */
    @Import(name="endedOn", required=true)
    private String endedOn;

    /**
     * @return Migration end time
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }

    /**
     * Migration exceptions and warnings
     * 
     */
    @Import(name="exceptionsAndWarnings", required=true)
    private List<ReportableExceptionResponse> exceptionsAndWarnings;

    /**
     * @return Migration exceptions and warnings
     * 
     */
    public List<ReportableExceptionResponse> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Migration progress message
     * 
     */
    @Import(name="message", required=true)
    private String message;

    /**
     * @return Migration progress message
     * 
     */
    public String message() {
        return this.message;
    }

    /**
     * Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    /**
     * @return Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }

    /**
     * Size of the database in megabytes
     * 
     */
    @Import(name="sizeMB", required=true)
    private Double sizeMB;

    /**
     * @return Size of the database in megabytes
     * 
     */
    public Double sizeMB() {
        return this.sizeMB;
    }

    /**
     * Current stage of migration
     * 
     */
    @Import(name="stage", required=true)
    private String stage;

    /**
     * @return Current stage of migration
     * 
     */
    public String stage() {
        return this.stage;
    }

    /**
     * Migration start time
     * 
     */
    @Import(name="startedOn", required=true)
    private String startedOn;

    /**
     * @return Migration start time
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }

    /**
     * Current state of migration
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return Current state of migration
     * 
     */
    public String state() {
        return this.state;
    }

    private MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse() {}

    private MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse(MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse $) {
        this.databaseName = $.databaseName;
        this.endedOn = $.endedOn;
        this.exceptionsAndWarnings = $.exceptionsAndWarnings;
        this.id = $.id;
        this.message = $.message;
        this.resultType = $.resultType;
        this.sizeMB = $.sizeMB;
        this.stage = $.stage;
        this.startedOn = $.startedOn;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse $;

        public Builder() {
            $ = new MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse();
        }

        public Builder(MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse defaults) {
            $ = new MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName Name of the database
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param endedOn Migration end time
         * 
         * @return builder
         * 
         */
        public Builder endedOn(String endedOn) {
            $.endedOn = endedOn;
            return this;
        }

        /**
         * @param exceptionsAndWarnings Migration exceptions and warnings
         * 
         * @return builder
         * 
         */
        public Builder exceptionsAndWarnings(List<ReportableExceptionResponse> exceptionsAndWarnings) {
            $.exceptionsAndWarnings = exceptionsAndWarnings;
            return this;
        }

        /**
         * @param exceptionsAndWarnings Migration exceptions and warnings
         * 
         * @return builder
         * 
         */
        public Builder exceptionsAndWarnings(ReportableExceptionResponse... exceptionsAndWarnings) {
            return exceptionsAndWarnings(List.of(exceptionsAndWarnings));
        }

        /**
         * @param id Result identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param message Migration progress message
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            $.message = message;
            return this;
        }

        /**
         * @param resultType Result type
         * Expected value is &#39;DatabaseLevelOutput&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        /**
         * @param sizeMB Size of the database in megabytes
         * 
         * @return builder
         * 
         */
        public Builder sizeMB(Double sizeMB) {
            $.sizeMB = sizeMB;
            return this;
        }

        /**
         * @param stage Current stage of migration
         * 
         * @return builder
         * 
         */
        public Builder stage(String stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param startedOn Migration start time
         * 
         * @return builder
         * 
         */
        public Builder startedOn(String startedOn) {
            $.startedOn = startedOn;
            return this;
        }

        /**
         * @param state Current state of migration
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.endedOn = Objects.requireNonNull($.endedOn, "expected parameter 'endedOn' to be non-null");
            $.exceptionsAndWarnings = Objects.requireNonNull($.exceptionsAndWarnings, "expected parameter 'exceptionsAndWarnings' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.message = Objects.requireNonNull($.message, "expected parameter 'message' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            $.sizeMB = Objects.requireNonNull($.sizeMB, "expected parameter 'sizeMB' to be non-null");
            $.stage = Objects.requireNonNull($.stage, "expected parameter 'stage' to be non-null");
            $.startedOn = Objects.requireNonNull($.startedOn, "expected parameter 'startedOn' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
