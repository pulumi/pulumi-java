// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.HealthErrorResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InMageAgentDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InMageProtectedDiskDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InitialReplicationDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.OSDiskDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.VMNicDetailsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * InMage provider specific settings
 * 
 */
public final class InMageReplicationDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final InMageReplicationDetailsResponse Empty = new InMageReplicationDetailsResponse();

    /**
     * The active location of the VM. If the VM is being protected from Azure, this field will take values from { Azure, OnPrem }. If the VM is being protected between two data-centers, this field will be OnPrem always.
     * 
     */
    @Import(name="activeSiteType")
    private @Nullable String activeSiteType;

    public Optional<String> activeSiteType() {
        return Optional.ofNullable(this.activeSiteType);
    }

    /**
     * The agent details.
     * 
     */
    @Import(name="agentDetails")
    private @Nullable InMageAgentDetailsResponse agentDetails;

    public Optional<InMageAgentDetailsResponse> agentDetails() {
        return Optional.ofNullable(this.agentDetails);
    }

    /**
     * A value indicating the underlying Azure storage account. If the VM is not running in Azure, this value shall be set to null.
     * 
     */
    @Import(name="azureStorageAccountId")
    private @Nullable String azureStorageAccountId;

    public Optional<String> azureStorageAccountId() {
        return Optional.ofNullable(this.azureStorageAccountId);
    }

    /**
     * The compressed data change rate in MB.
     * 
     */
    @Import(name="compressedDataRateInMB")
    private @Nullable Double compressedDataRateInMB;

    public Optional<Double> compressedDataRateInMB() {
        return Optional.ofNullable(this.compressedDataRateInMB);
    }

    /**
     * The collection of Consistency points.
     * 
     */
    @Import(name="consistencyPoints")
    private @Nullable Map<String,String> consistencyPoints;

    public Optional<Map<String,String>> consistencyPoints() {
        return Optional.ofNullable(this.consistencyPoints);
    }

    /**
     * The data stores of the on-premise machine Value can be list of strings that contain data store names
     * 
     */
    @Import(name="datastores")
    private @Nullable List<String> datastores;

    public Optional<List<String>> datastores() {
        return Optional.ofNullable(this.datastores);
    }

    /**
     * A value indicating the discovery type of the machine.
     * 
     */
    @Import(name="discoveryType")
    private @Nullable String discoveryType;

    public Optional<String> discoveryType() {
        return Optional.ofNullable(this.discoveryType);
    }

    /**
     * A value indicating whether any disk is resized for this VM.
     * 
     */
    @Import(name="diskResized")
    private @Nullable String diskResized;

    public Optional<String> diskResized() {
        return Optional.ofNullable(this.diskResized);
    }

    /**
     * The infrastructure VM Id.
     * 
     */
    @Import(name="infrastructureVmId")
    private @Nullable String infrastructureVmId;

    public Optional<String> infrastructureVmId() {
        return Optional.ofNullable(this.infrastructureVmId);
    }

    /**
     * Gets the Instance type.
     * Expected value is &#39;InMage&#39;.
     * 
     */
    @Import(name="instanceType", required=true)
    private String instanceType;

    public String instanceType() {
        return this.instanceType;
    }

    /**
     * The source IP address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable String ipAddress;

    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The last heartbeat received from the source server.
     * 
     */
    @Import(name="lastHeartbeat")
    private @Nullable String lastHeartbeat;

    public Optional<String> lastHeartbeat() {
        return Optional.ofNullable(this.lastHeartbeat);
    }

    /**
     * The last RPO calculated time.
     * 
     */
    @Import(name="lastRpoCalculatedTime")
    private @Nullable String lastRpoCalculatedTime;

    public Optional<String> lastRpoCalculatedTime() {
        return Optional.ofNullable(this.lastRpoCalculatedTime);
    }

    /**
     * The last update time received from on-prem components.
     * 
     */
    @Import(name="lastUpdateReceivedTime")
    private @Nullable String lastUpdateReceivedTime;

    public Optional<String> lastUpdateReceivedTime() {
        return Optional.ofNullable(this.lastUpdateReceivedTime);
    }

    /**
     * The master target Id.
     * 
     */
    @Import(name="masterTargetId")
    private @Nullable String masterTargetId;

    public Optional<String> masterTargetId() {
        return Optional.ofNullable(this.masterTargetId);
    }

    /**
     * The multi vm group Id, if any.
     * 
     */
    @Import(name="multiVmGroupId")
    private @Nullable String multiVmGroupId;

    public Optional<String> multiVmGroupId() {
        return Optional.ofNullable(this.multiVmGroupId);
    }

    /**
     * The multi vm group name, if any.
     * 
     */
    @Import(name="multiVmGroupName")
    private @Nullable String multiVmGroupName;

    public Optional<String> multiVmGroupName() {
        return Optional.ofNullable(this.multiVmGroupName);
    }

    /**
     * A value indicating whether the multi vm sync is enabled or disabled.
     * 
     */
    @Import(name="multiVmSyncStatus")
    private @Nullable String multiVmSyncStatus;

    public Optional<String> multiVmSyncStatus() {
        return Optional.ofNullable(this.multiVmSyncStatus);
    }

    /**
     * The OS details.
     * 
     */
    @Import(name="osDetails")
    private @Nullable OSDiskDetailsResponse osDetails;

    public Optional<OSDiskDetailsResponse> osDetails() {
        return Optional.ofNullable(this.osDetails);
    }

    /**
     * The OS Version of the protected item.
     * 
     */
    @Import(name="osVersion")
    private @Nullable String osVersion;

    public Optional<String> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }

    /**
     * The process server Id.
     * 
     */
    @Import(name="processServerId")
    private @Nullable String processServerId;

    public Optional<String> processServerId() {
        return Optional.ofNullable(this.processServerId);
    }

    /**
     * The list of protected disks.
     * 
     */
    @Import(name="protectedDisks")
    private @Nullable List<InMageProtectedDiskDetailsResponse> protectedDisks;

    public Optional<List<InMageProtectedDiskDetailsResponse>> protectedDisks() {
        return Optional.ofNullable(this.protectedDisks);
    }

    /**
     * The protection stage.
     * 
     */
    @Import(name="protectionStage")
    private @Nullable String protectionStage;

    public Optional<String> protectionStage() {
        return Optional.ofNullable(this.protectionStage);
    }

    /**
     * A value indicating whether the source server requires a restart after update.
     * 
     */
    @Import(name="rebootAfterUpdateStatus")
    private @Nullable String rebootAfterUpdateStatus;

    public Optional<String> rebootAfterUpdateStatus() {
        return Optional.ofNullable(this.rebootAfterUpdateStatus);
    }

    /**
     * The replica id of the protected item.
     * 
     */
    @Import(name="replicaId")
    private @Nullable String replicaId;

    public Optional<String> replicaId() {
        return Optional.ofNullable(this.replicaId);
    }

    /**
     * The resync details of the machine
     * 
     */
    @Import(name="resyncDetails")
    private @Nullable InitialReplicationDetailsResponse resyncDetails;

    public Optional<InitialReplicationDetailsResponse> resyncDetails() {
        return Optional.ofNullable(this.resyncDetails);
    }

    /**
     * The retention window end time.
     * 
     */
    @Import(name="retentionWindowEnd")
    private @Nullable String retentionWindowEnd;

    public Optional<String> retentionWindowEnd() {
        return Optional.ofNullable(this.retentionWindowEnd);
    }

    /**
     * The retention window start time.
     * 
     */
    @Import(name="retentionWindowStart")
    private @Nullable String retentionWindowStart;

    public Optional<String> retentionWindowStart() {
        return Optional.ofNullable(this.retentionWindowStart);
    }

    /**
     * The RPO in seconds.
     * 
     */
    @Import(name="rpoInSeconds")
    private @Nullable Double rpoInSeconds;

    public Optional<Double> rpoInSeconds() {
        return Optional.ofNullable(this.rpoInSeconds);
    }

    /**
     * The CPU count of the VM on the primary side.
     * 
     */
    @Import(name="sourceVmCpuCount")
    private @Nullable Integer sourceVmCpuCount;

    public Optional<Integer> sourceVmCpuCount() {
        return Optional.ofNullable(this.sourceVmCpuCount);
    }

    /**
     * The RAM size of the VM on the primary side.
     * 
     */
    @Import(name="sourceVmRamSizeInMB")
    private @Nullable Integer sourceVmRamSizeInMB;

    public Optional<Integer> sourceVmRamSizeInMB() {
        return Optional.ofNullable(this.sourceVmRamSizeInMB);
    }

    /**
     * The uncompressed data change rate in MB.
     * 
     */
    @Import(name="uncompressedDataRateInMB")
    private @Nullable Double uncompressedDataRateInMB;

    public Optional<Double> uncompressedDataRateInMB() {
        return Optional.ofNullable(this.uncompressedDataRateInMB);
    }

    /**
     * The vCenter infrastructure Id.
     * 
     */
    @Import(name="vCenterInfrastructureId")
    private @Nullable String vCenterInfrastructureId;

    public Optional<String> vCenterInfrastructureId() {
        return Optional.ofNullable(this.vCenterInfrastructureId);
    }

    /**
     * The validation errors of the on-premise machine Value can be list of validation errors
     * 
     */
    @Import(name="validationErrors")
    private @Nullable List<HealthErrorResponse> validationErrors;

    public Optional<List<HealthErrorResponse>> validationErrors() {
        return Optional.ofNullable(this.validationErrors);
    }

    /**
     * The virtual machine Id.
     * 
     */
    @Import(name="vmId")
    private @Nullable String vmId;

    public Optional<String> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    /**
     * The PE Network details.
     * 
     */
    @Import(name="vmNics")
    private @Nullable List<VMNicDetailsResponse> vmNics;

    public Optional<List<VMNicDetailsResponse>> vmNics() {
        return Optional.ofNullable(this.vmNics);
    }

    /**
     * The protection state for the vm.
     * 
     */
    @Import(name="vmProtectionState")
    private @Nullable String vmProtectionState;

    public Optional<String> vmProtectionState() {
        return Optional.ofNullable(this.vmProtectionState);
    }

    /**
     * The protection state description for the vm.
     * 
     */
    @Import(name="vmProtectionStateDescription")
    private @Nullable String vmProtectionStateDescription;

    public Optional<String> vmProtectionStateDescription() {
        return Optional.ofNullable(this.vmProtectionStateDescription);
    }

    private InMageReplicationDetailsResponse() {}

    private InMageReplicationDetailsResponse(InMageReplicationDetailsResponse $) {
        this.activeSiteType = $.activeSiteType;
        this.agentDetails = $.agentDetails;
        this.azureStorageAccountId = $.azureStorageAccountId;
        this.compressedDataRateInMB = $.compressedDataRateInMB;
        this.consistencyPoints = $.consistencyPoints;
        this.datastores = $.datastores;
        this.discoveryType = $.discoveryType;
        this.diskResized = $.diskResized;
        this.infrastructureVmId = $.infrastructureVmId;
        this.instanceType = $.instanceType;
        this.ipAddress = $.ipAddress;
        this.lastHeartbeat = $.lastHeartbeat;
        this.lastRpoCalculatedTime = $.lastRpoCalculatedTime;
        this.lastUpdateReceivedTime = $.lastUpdateReceivedTime;
        this.masterTargetId = $.masterTargetId;
        this.multiVmGroupId = $.multiVmGroupId;
        this.multiVmGroupName = $.multiVmGroupName;
        this.multiVmSyncStatus = $.multiVmSyncStatus;
        this.osDetails = $.osDetails;
        this.osVersion = $.osVersion;
        this.processServerId = $.processServerId;
        this.protectedDisks = $.protectedDisks;
        this.protectionStage = $.protectionStage;
        this.rebootAfterUpdateStatus = $.rebootAfterUpdateStatus;
        this.replicaId = $.replicaId;
        this.resyncDetails = $.resyncDetails;
        this.retentionWindowEnd = $.retentionWindowEnd;
        this.retentionWindowStart = $.retentionWindowStart;
        this.rpoInSeconds = $.rpoInSeconds;
        this.sourceVmCpuCount = $.sourceVmCpuCount;
        this.sourceVmRamSizeInMB = $.sourceVmRamSizeInMB;
        this.uncompressedDataRateInMB = $.uncompressedDataRateInMB;
        this.vCenterInfrastructureId = $.vCenterInfrastructureId;
        this.validationErrors = $.validationErrors;
        this.vmId = $.vmId;
        this.vmNics = $.vmNics;
        this.vmProtectionState = $.vmProtectionState;
        this.vmProtectionStateDescription = $.vmProtectionStateDescription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InMageReplicationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InMageReplicationDetailsResponse $;

        public Builder() {
            $ = new InMageReplicationDetailsResponse();
        }

        public Builder(InMageReplicationDetailsResponse defaults) {
            $ = new InMageReplicationDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder activeSiteType(@Nullable String activeSiteType) {
            $.activeSiteType = activeSiteType;
            return this;
        }

        public Builder agentDetails(@Nullable InMageAgentDetailsResponse agentDetails) {
            $.agentDetails = agentDetails;
            return this;
        }

        public Builder azureStorageAccountId(@Nullable String azureStorageAccountId) {
            $.azureStorageAccountId = azureStorageAccountId;
            return this;
        }

        public Builder compressedDataRateInMB(@Nullable Double compressedDataRateInMB) {
            $.compressedDataRateInMB = compressedDataRateInMB;
            return this;
        }

        public Builder consistencyPoints(@Nullable Map<String,String> consistencyPoints) {
            $.consistencyPoints = consistencyPoints;
            return this;
        }

        public Builder datastores(@Nullable List<String> datastores) {
            $.datastores = datastores;
            return this;
        }

        public Builder datastores(String... datastores) {
            return datastores(List.of(datastores));
        }

        public Builder discoveryType(@Nullable String discoveryType) {
            $.discoveryType = discoveryType;
            return this;
        }

        public Builder diskResized(@Nullable String diskResized) {
            $.diskResized = diskResized;
            return this;
        }

        public Builder infrastructureVmId(@Nullable String infrastructureVmId) {
            $.infrastructureVmId = infrastructureVmId;
            return this;
        }

        public Builder instanceType(String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        public Builder ipAddress(@Nullable String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder lastHeartbeat(@Nullable String lastHeartbeat) {
            $.lastHeartbeat = lastHeartbeat;
            return this;
        }

        public Builder lastRpoCalculatedTime(@Nullable String lastRpoCalculatedTime) {
            $.lastRpoCalculatedTime = lastRpoCalculatedTime;
            return this;
        }

        public Builder lastUpdateReceivedTime(@Nullable String lastUpdateReceivedTime) {
            $.lastUpdateReceivedTime = lastUpdateReceivedTime;
            return this;
        }

        public Builder masterTargetId(@Nullable String masterTargetId) {
            $.masterTargetId = masterTargetId;
            return this;
        }

        public Builder multiVmGroupId(@Nullable String multiVmGroupId) {
            $.multiVmGroupId = multiVmGroupId;
            return this;
        }

        public Builder multiVmGroupName(@Nullable String multiVmGroupName) {
            $.multiVmGroupName = multiVmGroupName;
            return this;
        }

        public Builder multiVmSyncStatus(@Nullable String multiVmSyncStatus) {
            $.multiVmSyncStatus = multiVmSyncStatus;
            return this;
        }

        public Builder osDetails(@Nullable OSDiskDetailsResponse osDetails) {
            $.osDetails = osDetails;
            return this;
        }

        public Builder osVersion(@Nullable String osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        public Builder processServerId(@Nullable String processServerId) {
            $.processServerId = processServerId;
            return this;
        }

        public Builder protectedDisks(@Nullable List<InMageProtectedDiskDetailsResponse> protectedDisks) {
            $.protectedDisks = protectedDisks;
            return this;
        }

        public Builder protectedDisks(InMageProtectedDiskDetailsResponse... protectedDisks) {
            return protectedDisks(List.of(protectedDisks));
        }

        public Builder protectionStage(@Nullable String protectionStage) {
            $.protectionStage = protectionStage;
            return this;
        }

        public Builder rebootAfterUpdateStatus(@Nullable String rebootAfterUpdateStatus) {
            $.rebootAfterUpdateStatus = rebootAfterUpdateStatus;
            return this;
        }

        public Builder replicaId(@Nullable String replicaId) {
            $.replicaId = replicaId;
            return this;
        }

        public Builder resyncDetails(@Nullable InitialReplicationDetailsResponse resyncDetails) {
            $.resyncDetails = resyncDetails;
            return this;
        }

        public Builder retentionWindowEnd(@Nullable String retentionWindowEnd) {
            $.retentionWindowEnd = retentionWindowEnd;
            return this;
        }

        public Builder retentionWindowStart(@Nullable String retentionWindowStart) {
            $.retentionWindowStart = retentionWindowStart;
            return this;
        }

        public Builder rpoInSeconds(@Nullable Double rpoInSeconds) {
            $.rpoInSeconds = rpoInSeconds;
            return this;
        }

        public Builder sourceVmCpuCount(@Nullable Integer sourceVmCpuCount) {
            $.sourceVmCpuCount = sourceVmCpuCount;
            return this;
        }

        public Builder sourceVmRamSizeInMB(@Nullable Integer sourceVmRamSizeInMB) {
            $.sourceVmRamSizeInMB = sourceVmRamSizeInMB;
            return this;
        }

        public Builder uncompressedDataRateInMB(@Nullable Double uncompressedDataRateInMB) {
            $.uncompressedDataRateInMB = uncompressedDataRateInMB;
            return this;
        }

        public Builder vCenterInfrastructureId(@Nullable String vCenterInfrastructureId) {
            $.vCenterInfrastructureId = vCenterInfrastructureId;
            return this;
        }

        public Builder validationErrors(@Nullable List<HealthErrorResponse> validationErrors) {
            $.validationErrors = validationErrors;
            return this;
        }

        public Builder validationErrors(HealthErrorResponse... validationErrors) {
            return validationErrors(List.of(validationErrors));
        }

        public Builder vmId(@Nullable String vmId) {
            $.vmId = vmId;
            return this;
        }

        public Builder vmNics(@Nullable List<VMNicDetailsResponse> vmNics) {
            $.vmNics = vmNics;
            return this;
        }

        public Builder vmNics(VMNicDetailsResponse... vmNics) {
            return vmNics(List.of(vmNics));
        }

        public Builder vmProtectionState(@Nullable String vmProtectionState) {
            $.vmProtectionState = vmProtectionState;
            return this;
        }

        public Builder vmProtectionStateDescription(@Nullable String vmProtectionStateDescription) {
            $.vmProtectionStateDescription = vmProtectionStateDescription;
            return this;
        }

        public InMageReplicationDetailsResponse build() {
            $.instanceType = Codegen.stringProp("instanceType").arg($.instanceType).require();
            return $;
        }
    }

}
