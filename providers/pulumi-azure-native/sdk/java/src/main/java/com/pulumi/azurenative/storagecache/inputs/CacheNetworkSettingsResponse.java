// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagecache.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Cache network settings.
 * 
 */
public final class CacheNetworkSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final CacheNetworkSettingsResponse Empty = new CacheNetworkSettingsResponse();

    /**
     * DNS search domain
     * 
     */
    @Import(name="dnsSearchDomain")
    private @Nullable String dnsSearchDomain;

    /**
     * @return DNS search domain
     * 
     */
    public Optional<String> dnsSearchDomain() {
        return Optional.ofNullable(this.dnsSearchDomain);
    }

    /**
     * DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
     * 
     */
    @Import(name="dnsServers")
    private @Nullable List<String> dnsServers;

    /**
     * @return DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
     * 
     */
    public Optional<List<String>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * The IPv4 maximum transmission unit configured for the subnet.
     * 
     */
    @Import(name="mtu")
    private @Nullable Integer mtu;

    /**
     * @return The IPv4 maximum transmission unit configured for the subnet.
     * 
     */
    public Optional<Integer> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
     * 
     */
    @Import(name="ntpServer")
    private @Nullable String ntpServer;

    /**
     * @return NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
     * 
     */
    public Optional<String> ntpServer() {
        return Optional.ofNullable(this.ntpServer);
    }

    /**
     * Array of additional IP addresses used by this Cache.
     * 
     */
    @Import(name="utilityAddresses", required=true)
    private List<String> utilityAddresses;

    /**
     * @return Array of additional IP addresses used by this Cache.
     * 
     */
    public List<String> utilityAddresses() {
        return this.utilityAddresses;
    }

    private CacheNetworkSettingsResponse() {}

    private CacheNetworkSettingsResponse(CacheNetworkSettingsResponse $) {
        this.dnsSearchDomain = $.dnsSearchDomain;
        this.dnsServers = $.dnsServers;
        this.mtu = $.mtu;
        this.ntpServer = $.ntpServer;
        this.utilityAddresses = $.utilityAddresses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheNetworkSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheNetworkSettingsResponse $;

        public Builder() {
            $ = new CacheNetworkSettingsResponse();
        }

        public Builder(CacheNetworkSettingsResponse defaults) {
            $ = new CacheNetworkSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsSearchDomain DNS search domain
         * 
         * @return builder
         * 
         */
        public Builder dnsSearchDomain(@Nullable String dnsSearchDomain) {
            $.dnsSearchDomain = dnsSearchDomain;
            return this;
        }

        /**
         * @param dnsServers DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(@Nullable List<String> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param mtu The IPv4 maximum transmission unit configured for the subnet.
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Integer mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param ntpServer NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
         * 
         * @return builder
         * 
         */
        public Builder ntpServer(@Nullable String ntpServer) {
            $.ntpServer = ntpServer;
            return this;
        }

        /**
         * @param utilityAddresses Array of additional IP addresses used by this Cache.
         * 
         * @return builder
         * 
         */
        public Builder utilityAddresses(List<String> utilityAddresses) {
            $.utilityAddresses = utilityAddresses;
            return this;
        }

        /**
         * @param utilityAddresses Array of additional IP addresses used by this Cache.
         * 
         * @return builder
         * 
         */
        public Builder utilityAddresses(String... utilityAddresses) {
            return utilityAddresses(List.of(utilityAddresses));
        }

        public CacheNetworkSettingsResponse build() {
            $.mtu = Codegen.integerProp("mtu").arg($.mtu).def(1500).getNullable();
            $.ntpServer = Codegen.stringProp("ntpServer").arg($.ntpServer).def("time.windows.com").getNullable();
            $.utilityAddresses = Objects.requireNonNull($.utilityAddresses, "expected parameter 'utilityAddresses' to be non-null");
            return $;
        }
    }

}
