// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managednetwork.inputs;

import com.pulumi.azurenative.managednetwork.inputs.ResourceIdResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The Managed Network Group resource
 * 
 */
public final class ManagedNetworkGroupResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagedNetworkGroupResponse Empty = new ManagedNetworkGroupResponse();

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Responsibility role under which this Managed Network Group will be created
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The collection of management groups covered by the Managed Network
     * 
     */
    @Import(name="managementGroups")
    private @Nullable List<ResourceIdResponse> managementGroups;

    public Optional<List<ResourceIdResponse>> managementGroups() {
        return Optional.ofNullable(this.managementGroups);
    }

    /**
     * The name of the resource
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Provisioning state of the ManagedNetwork resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The collection of  subnets covered by the Managed Network
     * 
     */
    @Import(name="subnets")
    private @Nullable List<ResourceIdResponse> subnets;

    public Optional<List<ResourceIdResponse>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    /**
     * The collection of subscriptions covered by the Managed Network
     * 
     */
    @Import(name="subscriptions")
    private @Nullable List<ResourceIdResponse> subscriptions;

    public Optional<List<ResourceIdResponse>> subscriptions() {
        return Optional.ofNullable(this.subscriptions);
    }

    /**
     * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * The collection of virtual nets covered by the Managed Network
     * 
     */
    @Import(name="virtualNetworks")
    private @Nullable List<ResourceIdResponse> virtualNetworks;

    public Optional<List<ResourceIdResponse>> virtualNetworks() {
        return Optional.ofNullable(this.virtualNetworks);
    }

    private ManagedNetworkGroupResponse() {}

    private ManagedNetworkGroupResponse(ManagedNetworkGroupResponse $) {
        this.etag = $.etag;
        this.id = $.id;
        this.kind = $.kind;
        this.location = $.location;
        this.managementGroups = $.managementGroups;
        this.name = $.name;
        this.provisioningState = $.provisioningState;
        this.subnets = $.subnets;
        this.subscriptions = $.subscriptions;
        this.type = $.type;
        this.virtualNetworks = $.virtualNetworks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedNetworkGroupResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedNetworkGroupResponse $;

        public Builder() {
            $ = new ManagedNetworkGroupResponse();
        }

        public Builder(ManagedNetworkGroupResponse defaults) {
            $ = new ManagedNetworkGroupResponse(Objects.requireNonNull(defaults));
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        public Builder managementGroups(@Nullable List<ResourceIdResponse> managementGroups) {
            $.managementGroups = managementGroups;
            return this;
        }

        public Builder managementGroups(ResourceIdResponse... managementGroups) {
            return managementGroups(List.of(managementGroups));
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder subnets(@Nullable List<ResourceIdResponse> subnets) {
            $.subnets = subnets;
            return this;
        }

        public Builder subnets(ResourceIdResponse... subnets) {
            return subnets(List.of(subnets));
        }

        public Builder subscriptions(@Nullable List<ResourceIdResponse> subscriptions) {
            $.subscriptions = subscriptions;
            return this;
        }

        public Builder subscriptions(ResourceIdResponse... subscriptions) {
            return subscriptions(List.of(subscriptions));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder virtualNetworks(@Nullable List<ResourceIdResponse> virtualNetworks) {
            $.virtualNetworks = virtualNetworks;
            return this;
        }

        public Builder virtualNetworks(ResourceIdResponse... virtualNetworks) {
            return virtualNetworks(List.of(virtualNetworks));
        }

        public ManagedNetworkGroupResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
