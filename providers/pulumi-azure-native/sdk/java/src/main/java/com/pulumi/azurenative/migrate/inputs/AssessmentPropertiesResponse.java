// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.inputs;

import com.pulumi.azurenative.migrate.inputs.VmUptimeResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Properties of an assessment.
 * 
 */
public final class AssessmentPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final AssessmentPropertiesResponse Empty = new AssessmentPropertiesResponse();

    /**
     * Storage type selected for this disk.
     * 
     */
    @Import(name="azureDiskType", required=true)
    private String azureDiskType;

    public String azureDiskType() {
        return this.azureDiskType;
    }

    /**
     * AHUB discount on windows virtual machines.
     * 
     */
    @Import(name="azureHybridUseBenefit", required=true)
    private String azureHybridUseBenefit;

    public String azureHybridUseBenefit() {
        return this.azureHybridUseBenefit;
    }

    /**
     * Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
     * 
     */
    @Import(name="azureLocation", required=true)
    private String azureLocation;

    public String azureLocation() {
        return this.azureLocation;
    }

    /**
     * Offer code according to which cost estimation is done.
     * 
     */
    @Import(name="azureOfferCode", required=true)
    private String azureOfferCode;

    public String azureOfferCode() {
        return this.azureOfferCode;
    }

    /**
     * Pricing tier for Size evaluation.
     * 
     */
    @Import(name="azurePricingTier", required=true)
    private String azurePricingTier;

    public String azurePricingTier() {
        return this.azurePricingTier;
    }

    /**
     * Storage Redundancy type offered by Azure.
     * 
     */
    @Import(name="azureStorageRedundancy", required=true)
    private String azureStorageRedundancy;

    public String azureStorageRedundancy() {
        return this.azureStorageRedundancy;
    }

    /**
     * List of azure VM families.
     * 
     */
    @Import(name="azureVmFamilies", required=true)
    private List<String> azureVmFamilies;

    public List<String> azureVmFamilies() {
        return this.azureVmFamilies;
    }

    /**
     * Confidence rating percentage for assessment. Can be in the range [0, 100].
     * 
     */
    @Import(name="confidenceRatingInPercentage", required=true)
    private Double confidenceRatingInPercentage;

    public Double confidenceRatingInPercentage() {
        return this.confidenceRatingInPercentage;
    }

    /**
     * Time when this project was created. Date-Time represented in ISO-8601 format.
     * 
     */
    @Import(name="createdTimestamp", required=true)
    private String createdTimestamp;

    public String createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Currency to report prices in.
     * 
     */
    @Import(name="currency", required=true)
    private String currency;

    public String currency() {
        return this.currency;
    }

    /**
     * Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
     * 
     */
    @Import(name="discountPercentage", required=true)
    private Double discountPercentage;

    public Double discountPercentage() {
        return this.discountPercentage;
    }

    /**
     * Enterprise agreement subscription arm id.
     * 
     */
    @Import(name="eaSubscriptionId", required=true)
    private String eaSubscriptionId;

    public String eaSubscriptionId() {
        return this.eaSubscriptionId;
    }

    /**
     * Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
     * 
     */
    @Import(name="monthlyBandwidthCost", required=true)
    private Double monthlyBandwidthCost;

    public Double monthlyBandwidthCost() {
        return this.monthlyBandwidthCost;
    }

    /**
     * Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
     * 
     */
    @Import(name="monthlyComputeCost", required=true)
    private Double monthlyComputeCost;

    public Double monthlyComputeCost() {
        return this.monthlyComputeCost;
    }

    /**
     * Monthly premium storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
     * 
     */
    @Import(name="monthlyPremiumStorageCost", required=true)
    private Double monthlyPremiumStorageCost;

    public Double monthlyPremiumStorageCost() {
        return this.monthlyPremiumStorageCost;
    }

    /**
     * Monthly standard SSD storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
     * 
     */
    @Import(name="monthlyStandardSSDStorageCost", required=true)
    private Double monthlyStandardSSDStorageCost;

    public Double monthlyStandardSSDStorageCost() {
        return this.monthlyStandardSSDStorageCost;
    }

    /**
     * Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
     * 
     */
    @Import(name="monthlyStorageCost", required=true)
    private Double monthlyStorageCost;

    public Double monthlyStorageCost() {
        return this.monthlyStorageCost;
    }

    /**
     * Number of assessed machines part of this assessment.
     * 
     */
    @Import(name="numberOfMachines", required=true)
    private Integer numberOfMachines;

    public Integer numberOfMachines() {
        return this.numberOfMachines;
    }

    /**
     * Percentile of performance data used to recommend Azure size.
     * 
     */
    @Import(name="percentile", required=true)
    private String percentile;

    public String percentile() {
        return this.percentile;
    }

    /**
     * End time to consider performance data for assessment
     * 
     */
    @Import(name="perfDataEndTime", required=true)
    private String perfDataEndTime;

    public String perfDataEndTime() {
        return this.perfDataEndTime;
    }

    /**
     * Start time to consider performance data for assessment
     * 
     */
    @Import(name="perfDataStartTime", required=true)
    private String perfDataStartTime;

    public String perfDataStartTime() {
        return this.perfDataStartTime;
    }

    /**
     * Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.
     * 
     */
    @Import(name="pricesTimestamp", required=true)
    private String pricesTimestamp;

    public String pricesTimestamp() {
        return this.pricesTimestamp;
    }

    /**
     * Azure reserved instance.
     * 
     */
    @Import(name="reservedInstance", required=true)
    private String reservedInstance;

    public String reservedInstance() {
        return this.reservedInstance;
    }

    /**
     * Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
     * 
     */
    @Import(name="scalingFactor", required=true)
    private Double scalingFactor;

    public Double scalingFactor() {
        return this.scalingFactor;
    }

    /**
     * Assessment sizing criterion.
     * 
     */
    @Import(name="sizingCriterion", required=true)
    private String sizingCriterion;

    public String sizingCriterion() {
        return this.sizingCriterion;
    }

    /**
     * User configurable setting that describes the status of the assessment.
     * 
     */
    @Import(name="stage", required=true)
    private String stage;

    public String stage() {
        return this.stage;
    }

    /**
     * Whether the assessment has been created and is valid.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    /**
     * Time range of performance data used to recommend a size.
     * 
     */
    @Import(name="timeRange", required=true)
    private String timeRange;

    public String timeRange() {
        return this.timeRange;
    }

    /**
     * Time when this project was last updated. Date-Time represented in ISO-8601 format.
     * 
     */
    @Import(name="updatedTimestamp", required=true)
    private String updatedTimestamp;

    public String updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Specify the duration for which the VMs are up in the on-premises environment.
     * 
     */
    @Import(name="vmUptime", required=true)
    private VmUptimeResponse vmUptime;

    public VmUptimeResponse vmUptime() {
        return this.vmUptime;
    }

    private AssessmentPropertiesResponse() {}

    private AssessmentPropertiesResponse(AssessmentPropertiesResponse $) {
        this.azureDiskType = $.azureDiskType;
        this.azureHybridUseBenefit = $.azureHybridUseBenefit;
        this.azureLocation = $.azureLocation;
        this.azureOfferCode = $.azureOfferCode;
        this.azurePricingTier = $.azurePricingTier;
        this.azureStorageRedundancy = $.azureStorageRedundancy;
        this.azureVmFamilies = $.azureVmFamilies;
        this.confidenceRatingInPercentage = $.confidenceRatingInPercentage;
        this.createdTimestamp = $.createdTimestamp;
        this.currency = $.currency;
        this.discountPercentage = $.discountPercentage;
        this.eaSubscriptionId = $.eaSubscriptionId;
        this.monthlyBandwidthCost = $.monthlyBandwidthCost;
        this.monthlyComputeCost = $.monthlyComputeCost;
        this.monthlyPremiumStorageCost = $.monthlyPremiumStorageCost;
        this.monthlyStandardSSDStorageCost = $.monthlyStandardSSDStorageCost;
        this.monthlyStorageCost = $.monthlyStorageCost;
        this.numberOfMachines = $.numberOfMachines;
        this.percentile = $.percentile;
        this.perfDataEndTime = $.perfDataEndTime;
        this.perfDataStartTime = $.perfDataStartTime;
        this.pricesTimestamp = $.pricesTimestamp;
        this.reservedInstance = $.reservedInstance;
        this.scalingFactor = $.scalingFactor;
        this.sizingCriterion = $.sizingCriterion;
        this.stage = $.stage;
        this.status = $.status;
        this.timeRange = $.timeRange;
        this.updatedTimestamp = $.updatedTimestamp;
        this.vmUptime = $.vmUptime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssessmentPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssessmentPropertiesResponse $;

        public Builder() {
            $ = new AssessmentPropertiesResponse();
        }

        public Builder(AssessmentPropertiesResponse defaults) {
            $ = new AssessmentPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder azureDiskType(String azureDiskType) {
            $.azureDiskType = azureDiskType;
            return this;
        }

        public Builder azureHybridUseBenefit(String azureHybridUseBenefit) {
            $.azureHybridUseBenefit = azureHybridUseBenefit;
            return this;
        }

        public Builder azureLocation(String azureLocation) {
            $.azureLocation = azureLocation;
            return this;
        }

        public Builder azureOfferCode(String azureOfferCode) {
            $.azureOfferCode = azureOfferCode;
            return this;
        }

        public Builder azurePricingTier(String azurePricingTier) {
            $.azurePricingTier = azurePricingTier;
            return this;
        }

        public Builder azureStorageRedundancy(String azureStorageRedundancy) {
            $.azureStorageRedundancy = azureStorageRedundancy;
            return this;
        }

        public Builder azureVmFamilies(List<String> azureVmFamilies) {
            $.azureVmFamilies = azureVmFamilies;
            return this;
        }

        public Builder azureVmFamilies(String... azureVmFamilies) {
            return azureVmFamilies(List.of(azureVmFamilies));
        }

        public Builder confidenceRatingInPercentage(Double confidenceRatingInPercentage) {
            $.confidenceRatingInPercentage = confidenceRatingInPercentage;
            return this;
        }

        public Builder createdTimestamp(String createdTimestamp) {
            $.createdTimestamp = createdTimestamp;
            return this;
        }

        public Builder currency(String currency) {
            $.currency = currency;
            return this;
        }

        public Builder discountPercentage(Double discountPercentage) {
            $.discountPercentage = discountPercentage;
            return this;
        }

        public Builder eaSubscriptionId(String eaSubscriptionId) {
            $.eaSubscriptionId = eaSubscriptionId;
            return this;
        }

        public Builder monthlyBandwidthCost(Double monthlyBandwidthCost) {
            $.monthlyBandwidthCost = monthlyBandwidthCost;
            return this;
        }

        public Builder monthlyComputeCost(Double monthlyComputeCost) {
            $.monthlyComputeCost = monthlyComputeCost;
            return this;
        }

        public Builder monthlyPremiumStorageCost(Double monthlyPremiumStorageCost) {
            $.monthlyPremiumStorageCost = monthlyPremiumStorageCost;
            return this;
        }

        public Builder monthlyStandardSSDStorageCost(Double monthlyStandardSSDStorageCost) {
            $.monthlyStandardSSDStorageCost = monthlyStandardSSDStorageCost;
            return this;
        }

        public Builder monthlyStorageCost(Double monthlyStorageCost) {
            $.monthlyStorageCost = monthlyStorageCost;
            return this;
        }

        public Builder numberOfMachines(Integer numberOfMachines) {
            $.numberOfMachines = numberOfMachines;
            return this;
        }

        public Builder percentile(String percentile) {
            $.percentile = percentile;
            return this;
        }

        public Builder perfDataEndTime(String perfDataEndTime) {
            $.perfDataEndTime = perfDataEndTime;
            return this;
        }

        public Builder perfDataStartTime(String perfDataStartTime) {
            $.perfDataStartTime = perfDataStartTime;
            return this;
        }

        public Builder pricesTimestamp(String pricesTimestamp) {
            $.pricesTimestamp = pricesTimestamp;
            return this;
        }

        public Builder reservedInstance(String reservedInstance) {
            $.reservedInstance = reservedInstance;
            return this;
        }

        public Builder scalingFactor(Double scalingFactor) {
            $.scalingFactor = scalingFactor;
            return this;
        }

        public Builder sizingCriterion(String sizingCriterion) {
            $.sizingCriterion = sizingCriterion;
            return this;
        }

        public Builder stage(String stage) {
            $.stage = stage;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder timeRange(String timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        public Builder updatedTimestamp(String updatedTimestamp) {
            $.updatedTimestamp = updatedTimestamp;
            return this;
        }

        public Builder vmUptime(VmUptimeResponse vmUptime) {
            $.vmUptime = vmUptime;
            return this;
        }

        public AssessmentPropertiesResponse build() {
            $.azureDiskType = Objects.requireNonNull($.azureDiskType, "expected parameter 'azureDiskType' to be non-null");
            $.azureHybridUseBenefit = Objects.requireNonNull($.azureHybridUseBenefit, "expected parameter 'azureHybridUseBenefit' to be non-null");
            $.azureLocation = Objects.requireNonNull($.azureLocation, "expected parameter 'azureLocation' to be non-null");
            $.azureOfferCode = Objects.requireNonNull($.azureOfferCode, "expected parameter 'azureOfferCode' to be non-null");
            $.azurePricingTier = Objects.requireNonNull($.azurePricingTier, "expected parameter 'azurePricingTier' to be non-null");
            $.azureStorageRedundancy = Objects.requireNonNull($.azureStorageRedundancy, "expected parameter 'azureStorageRedundancy' to be non-null");
            $.azureVmFamilies = Objects.requireNonNull($.azureVmFamilies, "expected parameter 'azureVmFamilies' to be non-null");
            $.confidenceRatingInPercentage = Objects.requireNonNull($.confidenceRatingInPercentage, "expected parameter 'confidenceRatingInPercentage' to be non-null");
            $.createdTimestamp = Objects.requireNonNull($.createdTimestamp, "expected parameter 'createdTimestamp' to be non-null");
            $.currency = Objects.requireNonNull($.currency, "expected parameter 'currency' to be non-null");
            $.discountPercentage = Objects.requireNonNull($.discountPercentage, "expected parameter 'discountPercentage' to be non-null");
            $.eaSubscriptionId = Objects.requireNonNull($.eaSubscriptionId, "expected parameter 'eaSubscriptionId' to be non-null");
            $.monthlyBandwidthCost = Objects.requireNonNull($.monthlyBandwidthCost, "expected parameter 'monthlyBandwidthCost' to be non-null");
            $.monthlyComputeCost = Objects.requireNonNull($.monthlyComputeCost, "expected parameter 'monthlyComputeCost' to be non-null");
            $.monthlyPremiumStorageCost = Objects.requireNonNull($.monthlyPremiumStorageCost, "expected parameter 'monthlyPremiumStorageCost' to be non-null");
            $.monthlyStandardSSDStorageCost = Objects.requireNonNull($.monthlyStandardSSDStorageCost, "expected parameter 'monthlyStandardSSDStorageCost' to be non-null");
            $.monthlyStorageCost = Objects.requireNonNull($.monthlyStorageCost, "expected parameter 'monthlyStorageCost' to be non-null");
            $.numberOfMachines = Objects.requireNonNull($.numberOfMachines, "expected parameter 'numberOfMachines' to be non-null");
            $.percentile = Objects.requireNonNull($.percentile, "expected parameter 'percentile' to be non-null");
            $.perfDataEndTime = Objects.requireNonNull($.perfDataEndTime, "expected parameter 'perfDataEndTime' to be non-null");
            $.perfDataStartTime = Objects.requireNonNull($.perfDataStartTime, "expected parameter 'perfDataStartTime' to be non-null");
            $.pricesTimestamp = Objects.requireNonNull($.pricesTimestamp, "expected parameter 'pricesTimestamp' to be non-null");
            $.reservedInstance = Objects.requireNonNull($.reservedInstance, "expected parameter 'reservedInstance' to be non-null");
            $.scalingFactor = Objects.requireNonNull($.scalingFactor, "expected parameter 'scalingFactor' to be non-null");
            $.sizingCriterion = Objects.requireNonNull($.sizingCriterion, "expected parameter 'sizingCriterion' to be non-null");
            $.stage = Objects.requireNonNull($.stage, "expected parameter 'stage' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.timeRange = Objects.requireNonNull($.timeRange, "expected parameter 'timeRange' to be non-null");
            $.updatedTimestamp = Objects.requireNonNull($.updatedTimestamp, "expected parameter 'updatedTimestamp' to be non-null");
            $.vmUptime = Objects.requireNonNull($.vmUptime, "expected parameter 'vmUptime' to be non-null");
            return $;
        }
    }

}
