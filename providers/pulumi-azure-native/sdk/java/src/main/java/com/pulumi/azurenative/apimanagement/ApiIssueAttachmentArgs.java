// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiIssueAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiIssueAttachmentArgs Empty = new ApiIssueAttachmentArgs();

    /**
     * API identifier. Must be unique in the current API Management service instance.
     * 
     */
    @Import(name="apiId", required=true)
    private Output<String> apiId;

    /**
     * @return API identifier. Must be unique in the current API Management service instance.
     * 
     */
    public Output<String> apiId() {
        return this.apiId;
    }

    /**
     * Attachment identifier within an Issue. Must be unique in the current Issue.
     * 
     */
    @Import(name="attachmentId")
    private @Nullable Output<String> attachmentId;

    /**
     * @return Attachment identifier within an Issue. Must be unique in the current Issue.
     * 
     */
    public Optional<Output<String>> attachmentId() {
        return Optional.ofNullable(this.attachmentId);
    }

    /**
     * An HTTP link or Base64-encoded binary data.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return An HTTP link or Base64-encoded binary data.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * Either &#39;link&#39; if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the &#39;content&#39; property.
     * 
     */
    @Import(name="contentFormat", required=true)
    private Output<String> contentFormat;

    /**
     * @return Either &#39;link&#39; if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the &#39;content&#39; property.
     * 
     */
    public Output<String> contentFormat() {
        return this.contentFormat;
    }

    /**
     * Issue identifier. Must be unique in the current API Management service instance.
     * 
     */
    @Import(name="issueId", required=true)
    private Output<String> issueId;

    /**
     * @return Issue identifier. Must be unique in the current API Management service instance.
     * 
     */
    public Output<String> issueId() {
        return this.issueId;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The name of the API Management service.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Filename by which the binary data will be saved.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return Filename by which the binary data will be saved.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    private ApiIssueAttachmentArgs() {}

    private ApiIssueAttachmentArgs(ApiIssueAttachmentArgs $) {
        this.apiId = $.apiId;
        this.attachmentId = $.attachmentId;
        this.content = $.content;
        this.contentFormat = $.contentFormat;
        this.issueId = $.issueId;
        this.resourceGroupName = $.resourceGroupName;
        this.serviceName = $.serviceName;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiIssueAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiIssueAttachmentArgs $;

        public Builder() {
            $ = new ApiIssueAttachmentArgs();
        }

        public Builder(ApiIssueAttachmentArgs defaults) {
            $ = new ApiIssueAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiId API identifier. Must be unique in the current API Management service instance.
         * 
         * @return builder
         * 
         */
        public Builder apiId(Output<String> apiId) {
            $.apiId = apiId;
            return this;
        }

        /**
         * @param apiId API identifier. Must be unique in the current API Management service instance.
         * 
         * @return builder
         * 
         */
        public Builder apiId(String apiId) {
            return apiId(Output.of(apiId));
        }

        /**
         * @param attachmentId Attachment identifier within an Issue. Must be unique in the current Issue.
         * 
         * @return builder
         * 
         */
        public Builder attachmentId(@Nullable Output<String> attachmentId) {
            $.attachmentId = attachmentId;
            return this;
        }

        /**
         * @param attachmentId Attachment identifier within an Issue. Must be unique in the current Issue.
         * 
         * @return builder
         * 
         */
        public Builder attachmentId(String attachmentId) {
            return attachmentId(Output.of(attachmentId));
        }

        /**
         * @param content An HTTP link or Base64-encoded binary data.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content An HTTP link or Base64-encoded binary data.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param contentFormat Either &#39;link&#39; if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the &#39;content&#39; property.
         * 
         * @return builder
         * 
         */
        public Builder contentFormat(Output<String> contentFormat) {
            $.contentFormat = contentFormat;
            return this;
        }

        /**
         * @param contentFormat Either &#39;link&#39; if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the &#39;content&#39; property.
         * 
         * @return builder
         * 
         */
        public Builder contentFormat(String contentFormat) {
            return contentFormat(Output.of(contentFormat));
        }

        /**
         * @param issueId Issue identifier. Must be unique in the current API Management service instance.
         * 
         * @return builder
         * 
         */
        public Builder issueId(Output<String> issueId) {
            $.issueId = issueId;
            return this;
        }

        /**
         * @param issueId Issue identifier. Must be unique in the current API Management service instance.
         * 
         * @return builder
         * 
         */
        public Builder issueId(String issueId) {
            return issueId(Output.of(issueId));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param serviceName The name of the API Management service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the API Management service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param title Filename by which the binary data will be saved.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Filename by which the binary data will be saved.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public ApiIssueAttachmentArgs build() {
            $.apiId = Objects.requireNonNull($.apiId, "expected parameter 'apiId' to be non-null");
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.contentFormat = Objects.requireNonNull($.contentFormat, "expected parameter 'contentFormat' to be non-null");
            $.issueId = Objects.requireNonNull($.issueId, "expected parameter 'issueId' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            return $;
        }
    }

}
