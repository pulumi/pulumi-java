// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.BackupSetInfoResponse;
import com.pulumi.azurenative.datamigration.inputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse Empty = new MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse();

    /**
     * Backup sets that are currently active (Either being uploaded or getting restored)
     * 
     */
    @Import(name="activeBackupSets", required=true)
    private List<BackupSetInfoResponse> activeBackupSets;

    public List<BackupSetInfoResponse> activeBackupSets() {
        return this.activeBackupSets;
    }

    /**
     * Name of container created in the Azure Storage account where backups are copied to
     * 
     */
    @Import(name="containerName", required=true)
    private String containerName;

    public String containerName() {
        return this.containerName;
    }

    /**
     * Database migration end time
     * 
     */
    @Import(name="endedOn", required=true)
    private String endedOn;

    public String endedOn() {
        return this.endedOn;
    }

    /**
     * prefix string to use for querying errors for this database
     * 
     */
    @Import(name="errorPrefix", required=true)
    private String errorPrefix;

    public String errorPrefix() {
        return this.errorPrefix;
    }

    /**
     * Migration exceptions and warnings
     * 
     */
    @Import(name="exceptionsAndWarnings", required=true)
    private List<ReportableExceptionResponse> exceptionsAndWarnings;

    public List<ReportableExceptionResponse> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }

    /**
     * Details of full backup set
     * 
     */
    @Import(name="fullBackupSetInfo", required=true)
    private BackupSetInfoResponse fullBackupSetInfo;

    public BackupSetInfoResponse fullBackupSetInfo() {
        return this.fullBackupSetInfo;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Whether full backup has been applied to the target database or not
     * 
     */
    @Import(name="isFullBackupRestored", required=true)
    private Boolean isFullBackupRestored;

    public Boolean isFullBackupRestored() {
        return this.isFullBackupRestored;
    }

    /**
     * Last applied backup set information
     * 
     */
    @Import(name="lastRestoredBackupSetInfo", required=true)
    private BackupSetInfoResponse lastRestoredBackupSetInfo;

    public BackupSetInfoResponse lastRestoredBackupSetInfo() {
        return this.lastRestoredBackupSetInfo;
    }

    /**
     * Current state of database
     * 
     */
    @Import(name="migrationState", required=true)
    private String migrationState;

    public String migrationState() {
        return this.migrationState;
    }

    /**
     * Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    public String resultType() {
        return this.resultType;
    }

    /**
     * Name of the database
     * 
     */
    @Import(name="sourceDatabaseName", required=true)
    private String sourceDatabaseName;

    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Database migration start time
     * 
     */
    @Import(name="startedOn", required=true)
    private String startedOn;

    public String startedOn() {
        return this.startedOn;
    }

    private MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse() {}

    private MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse(MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse $) {
        this.activeBackupSets = $.activeBackupSets;
        this.containerName = $.containerName;
        this.endedOn = $.endedOn;
        this.errorPrefix = $.errorPrefix;
        this.exceptionsAndWarnings = $.exceptionsAndWarnings;
        this.fullBackupSetInfo = $.fullBackupSetInfo;
        this.id = $.id;
        this.isFullBackupRestored = $.isFullBackupRestored;
        this.lastRestoredBackupSetInfo = $.lastRestoredBackupSetInfo;
        this.migrationState = $.migrationState;
        this.resultType = $.resultType;
        this.sourceDatabaseName = $.sourceDatabaseName;
        this.startedOn = $.startedOn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse $;

        public Builder() {
            $ = new MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse();
        }

        public Builder(MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse defaults) {
            $ = new MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse(Objects.requireNonNull(defaults));
        }

        public Builder activeBackupSets(List<BackupSetInfoResponse> activeBackupSets) {
            $.activeBackupSets = activeBackupSets;
            return this;
        }

        public Builder activeBackupSets(BackupSetInfoResponse... activeBackupSets) {
            return activeBackupSets(List.of(activeBackupSets));
        }

        public Builder containerName(String containerName) {
            $.containerName = containerName;
            return this;
        }

        public Builder endedOn(String endedOn) {
            $.endedOn = endedOn;
            return this;
        }

        public Builder errorPrefix(String errorPrefix) {
            $.errorPrefix = errorPrefix;
            return this;
        }

        public Builder exceptionsAndWarnings(List<ReportableExceptionResponse> exceptionsAndWarnings) {
            $.exceptionsAndWarnings = exceptionsAndWarnings;
            return this;
        }

        public Builder exceptionsAndWarnings(ReportableExceptionResponse... exceptionsAndWarnings) {
            return exceptionsAndWarnings(List.of(exceptionsAndWarnings));
        }

        public Builder fullBackupSetInfo(BackupSetInfoResponse fullBackupSetInfo) {
            $.fullBackupSetInfo = fullBackupSetInfo;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder isFullBackupRestored(Boolean isFullBackupRestored) {
            $.isFullBackupRestored = isFullBackupRestored;
            return this;
        }

        public Builder lastRestoredBackupSetInfo(BackupSetInfoResponse lastRestoredBackupSetInfo) {
            $.lastRestoredBackupSetInfo = lastRestoredBackupSetInfo;
            return this;
        }

        public Builder migrationState(String migrationState) {
            $.migrationState = migrationState;
            return this;
        }

        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        public Builder sourceDatabaseName(String sourceDatabaseName) {
            $.sourceDatabaseName = sourceDatabaseName;
            return this;
        }

        public Builder startedOn(String startedOn) {
            $.startedOn = startedOn;
            return this;
        }

        public MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse build() {
            $.activeBackupSets = Objects.requireNonNull($.activeBackupSets, "expected parameter 'activeBackupSets' to be non-null");
            $.containerName = Objects.requireNonNull($.containerName, "expected parameter 'containerName' to be non-null");
            $.endedOn = Objects.requireNonNull($.endedOn, "expected parameter 'endedOn' to be non-null");
            $.errorPrefix = Objects.requireNonNull($.errorPrefix, "expected parameter 'errorPrefix' to be non-null");
            $.exceptionsAndWarnings = Objects.requireNonNull($.exceptionsAndWarnings, "expected parameter 'exceptionsAndWarnings' to be non-null");
            $.fullBackupSetInfo = Objects.requireNonNull($.fullBackupSetInfo, "expected parameter 'fullBackupSetInfo' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.isFullBackupRestored = Objects.requireNonNull($.isFullBackupRestored, "expected parameter 'isFullBackupRestored' to be non-null");
            $.lastRestoredBackupSetInfo = Objects.requireNonNull($.lastRestoredBackupSetInfo, "expected parameter 'lastRestoredBackupSetInfo' to be non-null");
            $.migrationState = Objects.requireNonNull($.migrationState, "expected parameter 'migrationState' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            $.sourceDatabaseName = Objects.requireNonNull($.sourceDatabaseName, "expected parameter 'sourceDatabaseName' to be non-null");
            $.startedOn = Objects.requireNonNull($.startedOn, "expected parameter 'startedOn' to be non-null");
            return $;
        }
    }

}
