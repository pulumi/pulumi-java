// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.inputs;

import com.pulumi.azurenative.sql.inputs.RecommendedActionErrorInfoResponse;
import com.pulumi.azurenative.sql.inputs.RecommendedActionImpactRecordResponse;
import com.pulumi.azurenative.sql.inputs.RecommendedActionImplementationInfoResponse;
import com.pulumi.azurenative.sql.inputs.RecommendedActionMetricInfoResponse;
import com.pulumi.azurenative.sql.inputs.RecommendedActionStateInfoResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Database, Server or Elastic Pool Recommended Action.
 * 
 */
public final class RecommendedActionResponse extends com.pulumi.resources.InvokeArgs {

    public static final RecommendedActionResponse Empty = new RecommendedActionResponse();

    /**
     * Gets additional details specific to this recommended action.
     * 
     */
    @Import(name="details", required=true)
    private Map<String,Object> details;

    public Map<String,Object> details() {
        return this.details;
    }

    /**
     * Gets the error details if and why this recommended action is put to error state.
     * 
     */
    @Import(name="errorDetails", required=true)
    private RecommendedActionErrorInfoResponse errorDetails;

    public RecommendedActionErrorInfoResponse errorDetails() {
        return this.errorDetails;
    }

    /**
     * Gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change
     * 
     */
    @Import(name="estimatedImpact", required=true)
    private List<RecommendedActionImpactRecordResponse> estimatedImpact;

    public List<RecommendedActionImpactRecordResponse> estimatedImpact() {
        return this.estimatedImpact;
    }

    /**
     * Gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation
     * 
     */
    @Import(name="executeActionDuration", required=true)
    private String executeActionDuration;

    public String executeActionDuration() {
        return this.executeActionDuration;
    }

    /**
     * Gets if approval for applying this recommended action was given by user/system.
     * 
     */
    @Import(name="executeActionInitiatedBy", required=true)
    private String executeActionInitiatedBy;

    public String executeActionInitiatedBy() {
        return this.executeActionInitiatedBy;
    }

    /**
     * Gets the time when this recommended action was approved for execution.
     * 
     */
    @Import(name="executeActionInitiatedTime", required=true)
    private String executeActionInitiatedTime;

    public String executeActionInitiatedTime() {
        return this.executeActionInitiatedTime;
    }

    /**
     * Gets the time when system started applying this recommended action on the user resource. e.g., index creation start time
     * 
     */
    @Import(name="executeActionStartTime", required=true)
    private String executeActionStartTime;

    public String executeActionStartTime() {
        return this.executeActionStartTime;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Gets the implementation details of this recommended action for user to apply it manually.
     * 
     */
    @Import(name="implementationDetails", required=true)
    private RecommendedActionImplementationInfoResponse implementationDetails;

    public RecommendedActionImplementationInfoResponse implementationDetails() {
        return this.implementationDetails;
    }

    /**
     * Gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.
     * 
     */
    @Import(name="isArchivedAction", required=true)
    private Boolean isArchivedAction;

    public Boolean isArchivedAction() {
        return this.isArchivedAction;
    }

    /**
     * Gets if this recommended action is actionable by user
     * 
     */
    @Import(name="isExecutableAction", required=true)
    private Boolean isExecutableAction;

    public Boolean isExecutableAction() {
        return this.isExecutableAction;
    }

    /**
     * Gets if changes applied by this recommended action can be reverted by user
     * 
     */
    @Import(name="isRevertableAction", required=true)
    private Boolean isRevertableAction;

    public Boolean isRevertableAction() {
        return this.isRevertableAction;
    }

    /**
     * Resource kind.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * Gets time when this recommended action was last refreshed.
     * 
     */
    @Import(name="lastRefresh", required=true)
    private String lastRefresh;

    public String lastRefresh() {
        return this.lastRefresh;
    }

    /**
     * Gets the linked objects, if any.
     * 
     */
    @Import(name="linkedObjects", required=true)
    private List<String> linkedObjects;

    public List<String> linkedObjects() {
        return this.linkedObjects;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    public String location() {
        return this.location;
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change
     * 
     */
    @Import(name="observedImpact", required=true)
    private List<RecommendedActionImpactRecordResponse> observedImpact;

    public List<RecommendedActionImpactRecordResponse> observedImpact() {
        return this.observedImpact;
    }

    /**
     * Gets the reason for recommending this action. e.g., DuplicateIndex
     * 
     */
    @Import(name="recommendationReason", required=true)
    private String recommendationReason;

    public String recommendationReason() {
        return this.recommendationReason;
    }

    /**
     * Gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.
     * 
     */
    @Import(name="revertActionDuration", required=true)
    private String revertActionDuration;

    public String revertActionDuration() {
        return this.revertActionDuration;
    }

    /**
     * Gets if approval for reverting this recommended action was given by user/system.
     * 
     */
    @Import(name="revertActionInitiatedBy", required=true)
    private String revertActionInitiatedBy;

    public String revertActionInitiatedBy() {
        return this.revertActionInitiatedBy;
    }

    /**
     * Gets the time when this recommended action was approved for revert.
     * 
     */
    @Import(name="revertActionInitiatedTime", required=true)
    private String revertActionInitiatedTime;

    public String revertActionInitiatedTime() {
        return this.revertActionInitiatedTime;
    }

    /**
     * Gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.
     * 
     */
    @Import(name="revertActionStartTime", required=true)
    private String revertActionStartTime;

    public String revertActionStartTime() {
        return this.revertActionStartTime;
    }

    /**
     * Gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact
     * 
     */
    @Import(name="score", required=true)
    private Integer score;

    public Integer score() {
        return this.score;
    }

    /**
     * Gets the info of the current state the recommended action is in.
     * 
     */
    @Import(name="state", required=true)
    private RecommendedActionStateInfoResponse state;

    public RecommendedActionStateInfoResponse state() {
        return this.state;
    }

    /**
     * Gets the time series info of metrics for this recommended action e.g., CPU consumption time series
     * 
     */
    @Import(name="timeSeries", required=true)
    private List<RecommendedActionMetricInfoResponse> timeSeries;

    public List<RecommendedActionMetricInfoResponse> timeSeries() {
        return this.timeSeries;
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Gets the time since when this recommended action is valid.
     * 
     */
    @Import(name="validSince", required=true)
    private String validSince;

    public String validSince() {
        return this.validSince;
    }

    private RecommendedActionResponse() {}

    private RecommendedActionResponse(RecommendedActionResponse $) {
        this.details = $.details;
        this.errorDetails = $.errorDetails;
        this.estimatedImpact = $.estimatedImpact;
        this.executeActionDuration = $.executeActionDuration;
        this.executeActionInitiatedBy = $.executeActionInitiatedBy;
        this.executeActionInitiatedTime = $.executeActionInitiatedTime;
        this.executeActionStartTime = $.executeActionStartTime;
        this.id = $.id;
        this.implementationDetails = $.implementationDetails;
        this.isArchivedAction = $.isArchivedAction;
        this.isExecutableAction = $.isExecutableAction;
        this.isRevertableAction = $.isRevertableAction;
        this.kind = $.kind;
        this.lastRefresh = $.lastRefresh;
        this.linkedObjects = $.linkedObjects;
        this.location = $.location;
        this.name = $.name;
        this.observedImpact = $.observedImpact;
        this.recommendationReason = $.recommendationReason;
        this.revertActionDuration = $.revertActionDuration;
        this.revertActionInitiatedBy = $.revertActionInitiatedBy;
        this.revertActionInitiatedTime = $.revertActionInitiatedTime;
        this.revertActionStartTime = $.revertActionStartTime;
        this.score = $.score;
        this.state = $.state;
        this.timeSeries = $.timeSeries;
        this.type = $.type;
        this.validSince = $.validSince;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecommendedActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecommendedActionResponse $;

        public Builder() {
            $ = new RecommendedActionResponse();
        }

        public Builder(RecommendedActionResponse defaults) {
            $ = new RecommendedActionResponse(Objects.requireNonNull(defaults));
        }

        public Builder details(Map<String,Object> details) {
            $.details = details;
            return this;
        }

        public Builder errorDetails(RecommendedActionErrorInfoResponse errorDetails) {
            $.errorDetails = errorDetails;
            return this;
        }

        public Builder estimatedImpact(List<RecommendedActionImpactRecordResponse> estimatedImpact) {
            $.estimatedImpact = estimatedImpact;
            return this;
        }

        public Builder estimatedImpact(RecommendedActionImpactRecordResponse... estimatedImpact) {
            return estimatedImpact(List.of(estimatedImpact));
        }

        public Builder executeActionDuration(String executeActionDuration) {
            $.executeActionDuration = executeActionDuration;
            return this;
        }

        public Builder executeActionInitiatedBy(String executeActionInitiatedBy) {
            $.executeActionInitiatedBy = executeActionInitiatedBy;
            return this;
        }

        public Builder executeActionInitiatedTime(String executeActionInitiatedTime) {
            $.executeActionInitiatedTime = executeActionInitiatedTime;
            return this;
        }

        public Builder executeActionStartTime(String executeActionStartTime) {
            $.executeActionStartTime = executeActionStartTime;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder implementationDetails(RecommendedActionImplementationInfoResponse implementationDetails) {
            $.implementationDetails = implementationDetails;
            return this;
        }

        public Builder isArchivedAction(Boolean isArchivedAction) {
            $.isArchivedAction = isArchivedAction;
            return this;
        }

        public Builder isExecutableAction(Boolean isExecutableAction) {
            $.isExecutableAction = isExecutableAction;
            return this;
        }

        public Builder isRevertableAction(Boolean isRevertableAction) {
            $.isRevertableAction = isRevertableAction;
            return this;
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public Builder lastRefresh(String lastRefresh) {
            $.lastRefresh = lastRefresh;
            return this;
        }

        public Builder linkedObjects(List<String> linkedObjects) {
            $.linkedObjects = linkedObjects;
            return this;
        }

        public Builder linkedObjects(String... linkedObjects) {
            return linkedObjects(List.of(linkedObjects));
        }

        public Builder location(String location) {
            $.location = location;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder observedImpact(List<RecommendedActionImpactRecordResponse> observedImpact) {
            $.observedImpact = observedImpact;
            return this;
        }

        public Builder observedImpact(RecommendedActionImpactRecordResponse... observedImpact) {
            return observedImpact(List.of(observedImpact));
        }

        public Builder recommendationReason(String recommendationReason) {
            $.recommendationReason = recommendationReason;
            return this;
        }

        public Builder revertActionDuration(String revertActionDuration) {
            $.revertActionDuration = revertActionDuration;
            return this;
        }

        public Builder revertActionInitiatedBy(String revertActionInitiatedBy) {
            $.revertActionInitiatedBy = revertActionInitiatedBy;
            return this;
        }

        public Builder revertActionInitiatedTime(String revertActionInitiatedTime) {
            $.revertActionInitiatedTime = revertActionInitiatedTime;
            return this;
        }

        public Builder revertActionStartTime(String revertActionStartTime) {
            $.revertActionStartTime = revertActionStartTime;
            return this;
        }

        public Builder score(Integer score) {
            $.score = score;
            return this;
        }

        public Builder state(RecommendedActionStateInfoResponse state) {
            $.state = state;
            return this;
        }

        public Builder timeSeries(List<RecommendedActionMetricInfoResponse> timeSeries) {
            $.timeSeries = timeSeries;
            return this;
        }

        public Builder timeSeries(RecommendedActionMetricInfoResponse... timeSeries) {
            return timeSeries(List.of(timeSeries));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder validSince(String validSince) {
            $.validSince = validSince;
            return this;
        }

        public RecommendedActionResponse build() {
            $.details = Objects.requireNonNull($.details, "expected parameter 'details' to be non-null");
            $.errorDetails = Objects.requireNonNull($.errorDetails, "expected parameter 'errorDetails' to be non-null");
            $.estimatedImpact = Objects.requireNonNull($.estimatedImpact, "expected parameter 'estimatedImpact' to be non-null");
            $.executeActionDuration = Objects.requireNonNull($.executeActionDuration, "expected parameter 'executeActionDuration' to be non-null");
            $.executeActionInitiatedBy = Objects.requireNonNull($.executeActionInitiatedBy, "expected parameter 'executeActionInitiatedBy' to be non-null");
            $.executeActionInitiatedTime = Objects.requireNonNull($.executeActionInitiatedTime, "expected parameter 'executeActionInitiatedTime' to be non-null");
            $.executeActionStartTime = Objects.requireNonNull($.executeActionStartTime, "expected parameter 'executeActionStartTime' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.implementationDetails = Objects.requireNonNull($.implementationDetails, "expected parameter 'implementationDetails' to be non-null");
            $.isArchivedAction = Objects.requireNonNull($.isArchivedAction, "expected parameter 'isArchivedAction' to be non-null");
            $.isExecutableAction = Objects.requireNonNull($.isExecutableAction, "expected parameter 'isExecutableAction' to be non-null");
            $.isRevertableAction = Objects.requireNonNull($.isRevertableAction, "expected parameter 'isRevertableAction' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.lastRefresh = Objects.requireNonNull($.lastRefresh, "expected parameter 'lastRefresh' to be non-null");
            $.linkedObjects = Objects.requireNonNull($.linkedObjects, "expected parameter 'linkedObjects' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.observedImpact = Objects.requireNonNull($.observedImpact, "expected parameter 'observedImpact' to be non-null");
            $.recommendationReason = Objects.requireNonNull($.recommendationReason, "expected parameter 'recommendationReason' to be non-null");
            $.revertActionDuration = Objects.requireNonNull($.revertActionDuration, "expected parameter 'revertActionDuration' to be non-null");
            $.revertActionInitiatedBy = Objects.requireNonNull($.revertActionInitiatedBy, "expected parameter 'revertActionInitiatedBy' to be non-null");
            $.revertActionInitiatedTime = Objects.requireNonNull($.revertActionInitiatedTime, "expected parameter 'revertActionInitiatedTime' to be non-null");
            $.revertActionStartTime = Objects.requireNonNull($.revertActionStartTime, "expected parameter 'revertActionStartTime' to be non-null");
            $.score = Objects.requireNonNull($.score, "expected parameter 'score' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.timeSeries = Objects.requireNonNull($.timeSeries, "expected parameter 'timeSeries' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.validSince = Objects.requireNonNull($.validSince, "expected parameter 'validSince' to be non-null");
            return $;
        }
    }

}
