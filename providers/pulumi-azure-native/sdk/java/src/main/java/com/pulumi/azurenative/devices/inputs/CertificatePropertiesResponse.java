// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The description of an X509 CA Certificate.
 * 
 */
public final class CertificatePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertificatePropertiesResponse Empty = new CertificatePropertiesResponse();

    /**
     * base-64 representation of X509 certificate .cer file or just .pem file content.
     * 
     */
    @Import(name="certificate", required=true)
      private final String certificate;

    public String certificate() {
        return this.certificate;
    }

    /**
     * The certificate&#39;s creation date and time.
     * 
     */
    @Import(name="created", required=true)
      private final String created;

    public String created() {
        return this.created;
    }

    /**
     * The certificate&#39;s expiration date and time.
     * 
     */
    @Import(name="expiry", required=true)
      private final String expiry;

    public String expiry() {
        return this.expiry;
    }

    /**
     * Determines whether certificate has been verified.
     * 
     */
    @Import(name="isVerified", required=true)
      private final Boolean isVerified;

    public Boolean isVerified() {
        return this.isVerified;
    }

    /**
     * The certificate&#39;s subject name.
     * 
     */
    @Import(name="subject", required=true)
      private final String subject;

    public String subject() {
        return this.subject;
    }

    /**
     * The certificate&#39;s thumbprint.
     * 
     */
    @Import(name="thumbprint", required=true)
      private final String thumbprint;

    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * The certificate&#39;s last update date and time.
     * 
     */
    @Import(name="updated", required=true)
      private final String updated;

    public String updated() {
        return this.updated;
    }

    public CertificatePropertiesResponse(
        String certificate,
        String created,
        String expiry,
        Boolean isVerified,
        String subject,
        String thumbprint,
        String updated) {
        this.certificate = Objects.requireNonNull(certificate, "expected parameter 'certificate' to be non-null");
        this.created = Objects.requireNonNull(created, "expected parameter 'created' to be non-null");
        this.expiry = Objects.requireNonNull(expiry, "expected parameter 'expiry' to be non-null");
        this.isVerified = Objects.requireNonNull(isVerified, "expected parameter 'isVerified' to be non-null");
        this.subject = Objects.requireNonNull(subject, "expected parameter 'subject' to be non-null");
        this.thumbprint = Objects.requireNonNull(thumbprint, "expected parameter 'thumbprint' to be non-null");
        this.updated = Objects.requireNonNull(updated, "expected parameter 'updated' to be non-null");
    }

    private CertificatePropertiesResponse() {
        this.certificate = null;
        this.created = null;
        this.expiry = null;
        this.isVerified = null;
        this.subject = null;
        this.thumbprint = null;
        this.updated = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificatePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String certificate;
        private String created;
        private String expiry;
        private Boolean isVerified;
        private String subject;
        private String thumbprint;
        private String updated;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificatePropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificate = defaults.certificate;
    	      this.created = defaults.created;
    	      this.expiry = defaults.expiry;
    	      this.isVerified = defaults.isVerified;
    	      this.subject = defaults.subject;
    	      this.thumbprint = defaults.thumbprint;
    	      this.updated = defaults.updated;
        }

        public Builder certificate(String certificate) {
            this.certificate = Objects.requireNonNull(certificate);
            return this;
        }
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        public Builder expiry(String expiry) {
            this.expiry = Objects.requireNonNull(expiry);
            return this;
        }
        public Builder isVerified(Boolean isVerified) {
            this.isVerified = Objects.requireNonNull(isVerified);
            return this;
        }
        public Builder subject(String subject) {
            this.subject = Objects.requireNonNull(subject);
            return this;
        }
        public Builder thumbprint(String thumbprint) {
            this.thumbprint = Objects.requireNonNull(thumbprint);
            return this;
        }
        public Builder updated(String updated) {
            this.updated = Objects.requireNonNull(updated);
            return this;
        }        public CertificatePropertiesResponse build() {
            return new CertificatePropertiesResponse(certificate, created, expiry, isVerified, subject, thumbprint, updated);
        }
    }
}
