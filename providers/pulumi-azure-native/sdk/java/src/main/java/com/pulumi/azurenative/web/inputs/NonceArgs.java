// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration settings of the nonce used in the login flow.
 * 
 */
public final class NonceArgs extends com.pulumi.resources.ResourceArgs {

    public static final NonceArgs Empty = new NonceArgs();

    /**
     * The time after the request is made when the nonce should expire.
     * 
     */
    @Import(name="nonceExpirationInterval")
    private @Nullable Output<String> nonceExpirationInterval;

    /**
     * @return The time after the request is made when the nonce should expire.
     * 
     */
    public Optional<Output<String>> nonceExpirationInterval() {
        return Optional.ofNullable(this.nonceExpirationInterval);
    }

    /**
     * &lt;code&gt;false&lt;/code&gt; if the nonce should not be validated while completing the login flow; otherwise, &lt;code&gt;true&lt;/code&gt;.
     * 
     */
    @Import(name="validateNonce")
    private @Nullable Output<Boolean> validateNonce;

    /**
     * @return &lt;code&gt;false&lt;/code&gt; if the nonce should not be validated while completing the login flow; otherwise, &lt;code&gt;true&lt;/code&gt;.
     * 
     */
    public Optional<Output<Boolean>> validateNonce() {
        return Optional.ofNullable(this.validateNonce);
    }

    private NonceArgs() {}

    private NonceArgs(NonceArgs $) {
        this.nonceExpirationInterval = $.nonceExpirationInterval;
        this.validateNonce = $.validateNonce;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NonceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NonceArgs $;

        public Builder() {
            $ = new NonceArgs();
        }

        public Builder(NonceArgs defaults) {
            $ = new NonceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nonceExpirationInterval The time after the request is made when the nonce should expire.
         * 
         * @return builder
         * 
         */
        public Builder nonceExpirationInterval(@Nullable Output<String> nonceExpirationInterval) {
            $.nonceExpirationInterval = nonceExpirationInterval;
            return this;
        }

        /**
         * @param nonceExpirationInterval The time after the request is made when the nonce should expire.
         * 
         * @return builder
         * 
         */
        public Builder nonceExpirationInterval(String nonceExpirationInterval) {
            return nonceExpirationInterval(Output.of(nonceExpirationInterval));
        }

        /**
         * @param validateNonce &lt;code&gt;false&lt;/code&gt; if the nonce should not be validated while completing the login flow; otherwise, &lt;code&gt;true&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder validateNonce(@Nullable Output<Boolean> validateNonce) {
            $.validateNonce = validateNonce;
            return this;
        }

        /**
         * @param validateNonce &lt;code&gt;false&lt;/code&gt; if the nonce should not be validated while completing the login flow; otherwise, &lt;code&gt;true&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder validateNonce(Boolean validateNonce) {
            return validateNonce(Output.of(validateNonce));
        }

        public NonceArgs build() {
            return $;
        }
    }

}
