// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BanditPolicyResponse {
    /**
     * Number of intervals by which to delay the first evaluation.
     * 
     */
    private final @Nullable Integer delayEvaluation;
    /**
     * Interval (number of runs) between policy evaluations.
     * 
     */
    private final @Nullable Integer evaluationInterval;
    /**
     * Expected value is &#39;Bandit&#39;.
     * 
     */
    private final String policyType;
    /**
     * Absolute distance allowed from the best performing run.
     * 
     */
    private final @Nullable Double slackAmount;
    /**
     * Ratio of the allowed distance from the best performing run.
     * 
     */
    private final @Nullable Double slackFactor;

    @CustomType.Constructor
    private BanditPolicyResponse(
        @CustomType.Parameter("delayEvaluation") @Nullable Integer delayEvaluation,
        @CustomType.Parameter("evaluationInterval") @Nullable Integer evaluationInterval,
        @CustomType.Parameter("policyType") String policyType,
        @CustomType.Parameter("slackAmount") @Nullable Double slackAmount,
        @CustomType.Parameter("slackFactor") @Nullable Double slackFactor) {
        this.delayEvaluation = delayEvaluation;
        this.evaluationInterval = evaluationInterval;
        this.policyType = policyType;
        this.slackAmount = slackAmount;
        this.slackFactor = slackFactor;
    }

    /**
     * Number of intervals by which to delay the first evaluation.
     * 
    */
    public Optional<Integer> delayEvaluation() {
        return Optional.ofNullable(this.delayEvaluation);
    }
    /**
     * Interval (number of runs) between policy evaluations.
     * 
    */
    public Optional<Integer> evaluationInterval() {
        return Optional.ofNullable(this.evaluationInterval);
    }
    /**
     * Expected value is &#39;Bandit&#39;.
     * 
    */
    public String policyType() {
        return this.policyType;
    }
    /**
     * Absolute distance allowed from the best performing run.
     * 
    */
    public Optional<Double> slackAmount() {
        return Optional.ofNullable(this.slackAmount);
    }
    /**
     * Ratio of the allowed distance from the best performing run.
     * 
    */
    public Optional<Double> slackFactor() {
        return Optional.ofNullable(this.slackFactor);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BanditPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer delayEvaluation;
        private @Nullable Integer evaluationInterval;
        private String policyType;
        private @Nullable Double slackAmount;
        private @Nullable Double slackFactor;

        public Builder() {
    	      // Empty
        }

        public Builder(BanditPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.delayEvaluation = defaults.delayEvaluation;
    	      this.evaluationInterval = defaults.evaluationInterval;
    	      this.policyType = defaults.policyType;
    	      this.slackAmount = defaults.slackAmount;
    	      this.slackFactor = defaults.slackFactor;
        }

        public Builder delayEvaluation(@Nullable Integer delayEvaluation) {
            this.delayEvaluation = delayEvaluation;
            return this;
        }
        public Builder evaluationInterval(@Nullable Integer evaluationInterval) {
            this.evaluationInterval = evaluationInterval;
            return this;
        }
        public Builder policyType(String policyType) {
            this.policyType = Objects.requireNonNull(policyType);
            return this;
        }
        public Builder slackAmount(@Nullable Double slackAmount) {
            this.slackAmount = slackAmount;
            return this;
        }
        public Builder slackFactor(@Nullable Double slackFactor) {
            this.slackFactor = slackFactor;
            return this;
        }        public BanditPolicyResponse build() {
            return new BanditPolicyResponse(delayEvaluation, evaluationInterval, policyType, slackAmount, slackFactor);
        }
    }
}
