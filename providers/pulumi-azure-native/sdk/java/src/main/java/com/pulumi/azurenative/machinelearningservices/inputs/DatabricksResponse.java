// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.DatabricksResponseProperties;
import com.pulumi.azurenative.machinelearningservices.inputs.MachineLearningServiceErrorResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A DataFactory compute.
 * 
 */
public final class DatabricksResponse extends com.pulumi.resources.InvokeArgs {

    public static final DatabricksResponse Empty = new DatabricksResponse();

    /**
     * Location for the underlying compute
     * 
     */
    @Import(name="computeLocation")
    private @Nullable String computeLocation;

    /**
     * @return Location for the underlying compute
     * 
     */
    public Optional<String> computeLocation() {
        return Optional.ofNullable(this.computeLocation);
    }

    /**
     * The type of compute
     * Expected value is &#39;Databricks&#39;.
     * 
     */
    @Import(name="computeType", required=true)
    private String computeType;

    /**
     * @return The type of compute
     * Expected value is &#39;Databricks&#39;.
     * 
     */
    public String computeType() {
        return this.computeType;
    }

    /**
     * The description of the Machine Learning compute.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The description of the Machine Learning compute.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     * 
     */
    @Import(name="isAttachedCompute", required=true)
    private Boolean isAttachedCompute;

    /**
     * @return Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     * 
     */
    public Boolean isAttachedCompute() {
        return this.isAttachedCompute;
    }

    @Import(name="properties")
    private @Nullable DatabricksResponseProperties properties;

    public Optional<DatabricksResponseProperties> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Errors during provisioning
     * 
     */
    @Import(name="provisioningErrors", required=true)
    private List<MachineLearningServiceErrorResponse> provisioningErrors;

    /**
     * @return Errors during provisioning
     * 
     */
    public List<MachineLearningServiceErrorResponse> provisioningErrors() {
        return this.provisioningErrors;
    }

    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * ARM resource id of the underlying compute
     * 
     */
    @Import(name="resourceId")
    private @Nullable String resourceId;

    /**
     * @return ARM resource id of the underlying compute
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    private DatabricksResponse() {}

    private DatabricksResponse(DatabricksResponse $) {
        this.computeLocation = $.computeLocation;
        this.computeType = $.computeType;
        this.description = $.description;
        this.isAttachedCompute = $.isAttachedCompute;
        this.properties = $.properties;
        this.provisioningErrors = $.provisioningErrors;
        this.provisioningState = $.provisioningState;
        this.resourceId = $.resourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabricksResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabricksResponse $;

        public Builder() {
            $ = new DatabricksResponse();
        }

        public Builder(DatabricksResponse defaults) {
            $ = new DatabricksResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeLocation Location for the underlying compute
         * 
         * @return builder
         * 
         */
        public Builder computeLocation(@Nullable String computeLocation) {
            $.computeLocation = computeLocation;
            return this;
        }

        /**
         * @param computeType The type of compute
         * Expected value is &#39;Databricks&#39;.
         * 
         * @return builder
         * 
         */
        public Builder computeType(String computeType) {
            $.computeType = computeType;
            return this;
        }

        /**
         * @param description The description of the Machine Learning compute.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param isAttachedCompute Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
         * 
         * @return builder
         * 
         */
        public Builder isAttachedCompute(Boolean isAttachedCompute) {
            $.isAttachedCompute = isAttachedCompute;
            return this;
        }

        public Builder properties(@Nullable DatabricksResponseProperties properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param provisioningErrors Errors during provisioning
         * 
         * @return builder
         * 
         */
        public Builder provisioningErrors(List<MachineLearningServiceErrorResponse> provisioningErrors) {
            $.provisioningErrors = provisioningErrors;
            return this;
        }

        /**
         * @param provisioningErrors Errors during provisioning
         * 
         * @return builder
         * 
         */
        public Builder provisioningErrors(MachineLearningServiceErrorResponse... provisioningErrors) {
            return provisioningErrors(List.of(provisioningErrors));
        }

        /**
         * @param provisioningState The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param resourceId ARM resource id of the underlying compute
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        public DatabricksResponse build() {
            $.computeType = Codegen.stringProp("computeType").arg($.computeType).require();
            $.isAttachedCompute = Objects.requireNonNull($.isAttachedCompute, "expected parameter 'isAttachedCompute' to be non-null");
            $.provisioningErrors = Objects.requireNonNull($.provisioningErrors, "expected parameter 'provisioningErrors' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
