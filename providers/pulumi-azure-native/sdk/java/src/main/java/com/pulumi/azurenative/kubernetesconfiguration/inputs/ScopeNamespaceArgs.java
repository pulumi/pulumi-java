// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kubernetesconfiguration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies that the scope of the extensionInstance is Namespace
 * 
 */
public final class ScopeNamespaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScopeNamespaceArgs Empty = new ScopeNamespaceArgs();

    /**
     * Namespace where the extensionInstance will be created for an Namespace scoped extensionInstance.  If this namespace does not exist, it will be created
     * 
     */
    @Import(name="targetNamespace")
    private @Nullable Output<String> targetNamespace;

    /**
     * @return Namespace where the extensionInstance will be created for an Namespace scoped extensionInstance.  If this namespace does not exist, it will be created
     * 
     */
    public Optional<Output<String>> targetNamespace() {
        return Optional.ofNullable(this.targetNamespace);
    }

    private ScopeNamespaceArgs() {}

    private ScopeNamespaceArgs(ScopeNamespaceArgs $) {
        this.targetNamespace = $.targetNamespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScopeNamespaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScopeNamespaceArgs $;

        public Builder() {
            $ = new ScopeNamespaceArgs();
        }

        public Builder(ScopeNamespaceArgs defaults) {
            $ = new ScopeNamespaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param targetNamespace Namespace where the extensionInstance will be created for an Namespace scoped extensionInstance.  If this namespace does not exist, it will be created
         * 
         * @return builder
         * 
         */
        public Builder targetNamespace(@Nullable Output<String> targetNamespace) {
            $.targetNamespace = targetNamespace;
            return this;
        }

        /**
         * @param targetNamespace Namespace where the extensionInstance will be created for an Namespace scoped extensionInstance.  If this namespace does not exist, it will be created
         * 
         * @return builder
         * 
         */
        public Builder targetNamespace(String targetNamespace) {
            return targetNamespace(Output.of(targetNamespace));
        }

        public ScopeNamespaceArgs build() {
            return $;
        }
    }

}
