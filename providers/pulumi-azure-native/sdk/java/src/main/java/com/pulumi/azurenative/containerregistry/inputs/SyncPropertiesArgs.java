// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The sync properties of the connected registry with its parent.
 * 
 */
public final class SyncPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyncPropertiesArgs Empty = new SyncPropertiesArgs();

    /**
     * The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     * 
     */
    @Import(name="messageTtl", required=true)
    private Output<String> messageTtl;

    /**
     * @return The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     * 
     */
    public Output<String> messageTtl() {
        return this.messageTtl;
    }

    /**
     * The cron expression indicating the schedule that the connected registry will sync with its parent.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    /**
     * @return The cron expression indicating the schedule that the connected registry will sync with its parent.
     * 
     */
    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     * 
     */
    @Import(name="syncWindow")
    private @Nullable Output<String> syncWindow;

    /**
     * @return The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     * 
     */
    public Optional<Output<String>> syncWindow() {
        return Optional.ofNullable(this.syncWindow);
    }

    /**
     * The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
     * 
     */
    @Import(name="tokenId", required=true)
    private Output<String> tokenId;

    /**
     * @return The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
     * 
     */
    public Output<String> tokenId() {
        return this.tokenId;
    }

    private SyncPropertiesArgs() {}

    private SyncPropertiesArgs(SyncPropertiesArgs $) {
        this.messageTtl = $.messageTtl;
        this.schedule = $.schedule;
        this.syncWindow = $.syncWindow;
        this.tokenId = $.tokenId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyncPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyncPropertiesArgs $;

        public Builder() {
            $ = new SyncPropertiesArgs();
        }

        public Builder(SyncPropertiesArgs defaults) {
            $ = new SyncPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param messageTtl The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
         * 
         * @return builder
         * 
         */
        public Builder messageTtl(Output<String> messageTtl) {
            $.messageTtl = messageTtl;
            return this;
        }

        /**
         * @param messageTtl The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
         * 
         * @return builder
         * 
         */
        public Builder messageTtl(String messageTtl) {
            return messageTtl(Output.of(messageTtl));
        }

        /**
         * @param schedule The cron expression indicating the schedule that the connected registry will sync with its parent.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule The cron expression indicating the schedule that the connected registry will sync with its parent.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param syncWindow The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
         * 
         * @return builder
         * 
         */
        public Builder syncWindow(@Nullable Output<String> syncWindow) {
            $.syncWindow = syncWindow;
            return this;
        }

        /**
         * @param syncWindow The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
         * 
         * @return builder
         * 
         */
        public Builder syncWindow(String syncWindow) {
            return syncWindow(Output.of(syncWindow));
        }

        /**
         * @param tokenId The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
         * 
         * @return builder
         * 
         */
        public Builder tokenId(Output<String> tokenId) {
            $.tokenId = tokenId;
            return this;
        }

        /**
         * @param tokenId The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
         * 
         * @return builder
         * 
         */
        public Builder tokenId(String tokenId) {
            return tokenId(Output.of(tokenId));
        }

        public SyncPropertiesArgs build() {
            $.messageTtl = Objects.requireNonNull($.messageTtl, "expected parameter 'messageTtl' to be non-null");
            $.tokenId = Objects.requireNonNull($.tokenId, "expected parameter 'tokenId' to be non-null");
            return $;
        }
    }

}
