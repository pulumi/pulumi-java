// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.ContainerResourceRequirementsResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.DatasetReferenceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An Azure Machine Learning Model.
 * 
 */
public final class ModelResponse extends com.pulumi.resources.InvokeArgs {

    public static final ModelResponse Empty = new ModelResponse();

    /**
     * The Model creation time (UTC).
     * 
     */
    @Import(name="createdTime")
    private @Nullable String createdTime;

    public Optional<String> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * The list of datasets associated with the model.
     * 
     */
    @Import(name="datasets")
    private @Nullable List<DatasetReferenceResponse> datasets;

    public Optional<List<DatasetReferenceResponse>> datasets() {
        return Optional.ofNullable(this.datasets);
    }

    /**
     * Models derived from this model
     * 
     */
    @Import(name="derivedModelIds")
    private @Nullable List<String> derivedModelIds;

    public Optional<List<String>> derivedModelIds() {
        return Optional.ofNullable(this.derivedModelIds);
    }

    /**
     * The Model description text.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the experiment where this model was created.
     * 
     */
    @Import(name="experimentName")
    private @Nullable String experimentName;

    public Optional<String> experimentName() {
        return Optional.ofNullable(this.experimentName);
    }

    /**
     * The Model framework.
     * 
     */
    @Import(name="framework")
    private @Nullable String framework;

    public Optional<String> framework() {
        return Optional.ofNullable(this.framework);
    }

    /**
     * The Model framework version.
     * 
     */
    @Import(name="frameworkVersion")
    private @Nullable String frameworkVersion;

    public Optional<String> frameworkVersion() {
        return Optional.ofNullable(this.frameworkVersion);
    }

    /**
     * The Model Id.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The Model tag dictionary. Items are mutable.
     * 
     */
    @Import(name="kvTags")
    private @Nullable Map<String,String> kvTags;

    public Optional<Map<String,String>> kvTags() {
        return Optional.ofNullable(this.kvTags);
    }

    /**
     * The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml
     * 
     */
    @Import(name="mimeType", required=true)
    private String mimeType;

    public String mimeType() {
        return this.mimeType;
    }

    /**
     * The Model last modified time (UTC).
     * 
     */
    @Import(name="modifiedTime")
    private @Nullable String modifiedTime;

    public Optional<String> modifiedTime() {
        return Optional.ofNullable(this.modifiedTime);
    }

    /**
     * The Model name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The Parent Model Id.
     * 
     */
    @Import(name="parentModelId")
    private @Nullable String parentModelId;

    public Optional<String> parentModelId() {
        return Optional.ofNullable(this.parentModelId);
    }

    /**
     * The Model property dictionary. Properties are immutable.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Resource requirements for the model
     * 
     */
    @Import(name="resourceRequirements")
    private @Nullable ContainerResourceRequirementsResponse resourceRequirements;

    public Optional<ContainerResourceRequirementsResponse> resourceRequirements() {
        return Optional.ofNullable(this.resourceRequirements);
    }

    /**
     * The RunId that created this model.
     * 
     */
    @Import(name="runId")
    private @Nullable String runId;

    public Optional<String> runId() {
        return Optional.ofNullable(this.runId);
    }

    /**
     * Sample Input Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}
     * 
     */
    @Import(name="sampleInputData")
    private @Nullable String sampleInputData;

    public Optional<String> sampleInputData() {
        return Optional.ofNullable(this.sampleInputData);
    }

    /**
     * Sample Output Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}
     * 
     */
    @Import(name="sampleOutputData")
    private @Nullable String sampleOutputData;

    public Optional<String> sampleOutputData() {
        return Optional.ofNullable(this.sampleOutputData);
    }

    /**
     * Indicates whether we need to unpack the Model during docker Image creation.
     * 
     */
    @Import(name="unpack")
    private @Nullable Boolean unpack;

    public Optional<Boolean> unpack() {
        return Optional.ofNullable(this.unpack);
    }

    /**
     * The URL of the Model. Usually a SAS URL.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    public String url() {
        return this.url;
    }

    /**
     * The Model version assigned by Model Management Service.
     * 
     */
    @Import(name="version")
    private @Nullable Double version;

    public Optional<Double> version() {
        return Optional.ofNullable(this.version);
    }

    private ModelResponse() {}

    private ModelResponse(ModelResponse $) {
        this.createdTime = $.createdTime;
        this.datasets = $.datasets;
        this.derivedModelIds = $.derivedModelIds;
        this.description = $.description;
        this.experimentName = $.experimentName;
        this.framework = $.framework;
        this.frameworkVersion = $.frameworkVersion;
        this.id = $.id;
        this.kvTags = $.kvTags;
        this.mimeType = $.mimeType;
        this.modifiedTime = $.modifiedTime;
        this.name = $.name;
        this.parentModelId = $.parentModelId;
        this.properties = $.properties;
        this.resourceRequirements = $.resourceRequirements;
        this.runId = $.runId;
        this.sampleInputData = $.sampleInputData;
        this.sampleOutputData = $.sampleOutputData;
        this.unpack = $.unpack;
        this.url = $.url;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelResponse $;

        public Builder() {
            $ = new ModelResponse();
        }

        public Builder(ModelResponse defaults) {
            $ = new ModelResponse(Objects.requireNonNull(defaults));
        }

        public Builder createdTime(@Nullable String createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        public Builder datasets(@Nullable List<DatasetReferenceResponse> datasets) {
            $.datasets = datasets;
            return this;
        }

        public Builder datasets(DatasetReferenceResponse... datasets) {
            return datasets(List.of(datasets));
        }

        public Builder derivedModelIds(@Nullable List<String> derivedModelIds) {
            $.derivedModelIds = derivedModelIds;
            return this;
        }

        public Builder derivedModelIds(String... derivedModelIds) {
            return derivedModelIds(List.of(derivedModelIds));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder experimentName(@Nullable String experimentName) {
            $.experimentName = experimentName;
            return this;
        }

        public Builder framework(@Nullable String framework) {
            $.framework = framework;
            return this;
        }

        public Builder frameworkVersion(@Nullable String frameworkVersion) {
            $.frameworkVersion = frameworkVersion;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder kvTags(@Nullable Map<String,String> kvTags) {
            $.kvTags = kvTags;
            return this;
        }

        public Builder mimeType(String mimeType) {
            $.mimeType = mimeType;
            return this;
        }

        public Builder modifiedTime(@Nullable String modifiedTime) {
            $.modifiedTime = modifiedTime;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder parentModelId(@Nullable String parentModelId) {
            $.parentModelId = parentModelId;
            return this;
        }

        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        public Builder resourceRequirements(@Nullable ContainerResourceRequirementsResponse resourceRequirements) {
            $.resourceRequirements = resourceRequirements;
            return this;
        }

        public Builder runId(@Nullable String runId) {
            $.runId = runId;
            return this;
        }

        public Builder sampleInputData(@Nullable String sampleInputData) {
            $.sampleInputData = sampleInputData;
            return this;
        }

        public Builder sampleOutputData(@Nullable String sampleOutputData) {
            $.sampleOutputData = sampleOutputData;
            return this;
        }

        public Builder unpack(@Nullable Boolean unpack) {
            $.unpack = unpack;
            return this;
        }

        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public Builder version(@Nullable Double version) {
            $.version = version;
            return this;
        }

        public ModelResponse build() {
            $.mimeType = Objects.requireNonNull($.mimeType, "expected parameter 'mimeType' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
