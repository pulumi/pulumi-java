// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.streamanalytics.inputs;

import com.pulumi.azurenative.streamanalytics.inputs.ScalarFunctionPropertiesResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A function object, containing all information associated with the named function. All functions are contained under a streaming job.
 * 
 */
public final class FunctionResponse extends com.pulumi.resources.InvokeArgs {

    public static final FunctionResponse Empty = new FunctionResponse();

    /**
     * Resource Id
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Resource name
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Resource name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The properties that are associated with a function.
     * 
     */
    @Import(name="properties")
    private @Nullable ScalarFunctionPropertiesResponse properties;

    /**
     * @return The properties that are associated with a function.
     * 
     */
    public Optional<ScalarFunctionPropertiesResponse> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Resource type
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }

    private FunctionResponse() {}

    private FunctionResponse(FunctionResponse $) {
        this.id = $.id;
        this.name = $.name;
        this.properties = $.properties;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionResponse $;

        public Builder() {
            $ = new FunctionResponse();
        }

        public Builder(FunctionResponse defaults) {
            $ = new FunctionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param id Resource Id
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Resource name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param properties The properties that are associated with a function.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable ScalarFunctionPropertiesResponse properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param type Resource type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public FunctionResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
