// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Static Site User ARM resource.
 * 
 */
public final class StaticSiteUserARMResourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final StaticSiteUserARMResourceResponse Empty = new StaticSiteUserARMResourceResponse();

    /**
     * The display name for the static site user.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    public String displayName() {
        return this.displayName;
    }

    /**
     * Resource Id.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Resource Name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The identity provider for the static site user.
     * 
     */
    @Import(name="provider", required=true)
    private String provider;

    public String provider() {
        return this.provider;
    }

    /**
     * The roles for the static site user, in free-form string format
     * 
     */
    @Import(name="roles")
    private @Nullable String roles;

    public Optional<String> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * The user id for the static site user.
     * 
     */
    @Import(name="userId", required=true)
    private String userId;

    public String userId() {
        return this.userId;
    }

    private StaticSiteUserARMResourceResponse() {}

    private StaticSiteUserARMResourceResponse(StaticSiteUserARMResourceResponse $) {
        this.displayName = $.displayName;
        this.id = $.id;
        this.kind = $.kind;
        this.name = $.name;
        this.provider = $.provider;
        this.roles = $.roles;
        this.type = $.type;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StaticSiteUserARMResourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StaticSiteUserARMResourceResponse $;

        public Builder() {
            $ = new StaticSiteUserARMResourceResponse();
        }

        public Builder(StaticSiteUserARMResourceResponse defaults) {
            $ = new StaticSiteUserARMResourceResponse(Objects.requireNonNull(defaults));
        }

        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder provider(String provider) {
            $.provider = provider;
            return this;
        }

        public Builder roles(@Nullable String roles) {
            $.roles = roles;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userId(String userId) {
            $.userId = userId;
            return this;
        }

        public StaticSiteUserARMResourceResponse build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provider = Objects.requireNonNull($.provider, "expected parameter 'provider' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.userId = Objects.requireNonNull($.userId, "expected parameter 'userId' to be non-null");
            return $;
        }
    }

}
