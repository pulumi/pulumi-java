// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devops.inputs;

import com.pulumi.azurenative.devops.enums.CodeRepositoryType;
import com.pulumi.azurenative.devops.inputs.AuthorizationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Repository containing the source code for a pipeline.
 * 
 */
public final class CodeRepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final CodeRepositoryArgs Empty = new CodeRepositoryArgs();

    /**
     * Authorization info to access the code repository.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<AuthorizationArgs> authorization;

    public Optional<Output<AuthorizationArgs>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * Default branch used to configure Continuous Integration (CI) in the pipeline.
     * 
     */
    @Import(name="defaultBranch", required=true)
    private Output<String> defaultBranch;

    public Output<String> defaultBranch() {
        return this.defaultBranch;
    }

    /**
     * Unique immutable identifier of the code repository.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    /**
     * Repository-specific properties.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Type of code repository.
     * 
     */
    @Import(name="repositoryType", required=true)
    private Output<Either<String,CodeRepositoryType>> repositoryType;

    public Output<Either<String,CodeRepositoryType>> repositoryType() {
        return this.repositoryType;
    }

    private CodeRepositoryArgs() {}

    private CodeRepositoryArgs(CodeRepositoryArgs $) {
        this.authorization = $.authorization;
        this.defaultBranch = $.defaultBranch;
        this.id = $.id;
        this.properties = $.properties;
        this.repositoryType = $.repositoryType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CodeRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CodeRepositoryArgs $;

        public Builder() {
            $ = new CodeRepositoryArgs();
        }

        public Builder(CodeRepositoryArgs defaults) {
            $ = new CodeRepositoryArgs(Objects.requireNonNull(defaults));
        }

        public Builder authorization(@Nullable Output<AuthorizationArgs> authorization) {
            $.authorization = authorization;
            return this;
        }

        public Builder authorization(AuthorizationArgs authorization) {
            return authorization(Output.of(authorization));
        }

        public Builder defaultBranch(Output<String> defaultBranch) {
            $.defaultBranch = defaultBranch;
            return this;
        }

        public Builder defaultBranch(String defaultBranch) {
            return defaultBranch(Output.of(defaultBranch));
        }

        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        public Builder repositoryType(Output<Either<String,CodeRepositoryType>> repositoryType) {
            $.repositoryType = repositoryType;
            return this;
        }

        public Builder repositoryType(Either<String,CodeRepositoryType> repositoryType) {
            return repositoryType(Output.of(repositoryType));
        }

        public CodeRepositoryArgs build() {
            $.defaultBranch = Objects.requireNonNull($.defaultBranch, "expected parameter 'defaultBranch' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.repositoryType = Objects.requireNonNull($.repositoryType, "expected parameter 'repositoryType' to be non-null");
            return $;
        }
    }

}
