// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The compression method used on a dataset.
 * 
 */
public final class DatasetCompressionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatasetCompressionArgs Empty = new DatasetCompressionArgs();

    /**
     * The dataset compression level. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="level")
    private @Nullable Output<Object> level;

    /**
     * @return The dataset compression level. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> level() {
        return Optional.ofNullable(this.level);
    }

    /**
     * Type of dataset compression. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="type", required=true)
    private Output<Object> type;

    /**
     * @return Type of dataset compression. Type: string (or Expression with resultType string).
     * 
     */
    public Output<Object> type() {
        return this.type;
    }

    private DatasetCompressionArgs() {}

    private DatasetCompressionArgs(DatasetCompressionArgs $) {
        this.level = $.level;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetCompressionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetCompressionArgs $;

        public Builder() {
            $ = new DatasetCompressionArgs();
        }

        public Builder(DatasetCompressionArgs defaults) {
            $ = new DatasetCompressionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param level The dataset compression level. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder level(@Nullable Output<Object> level) {
            $.level = level;
            return this;
        }

        /**
         * @param level The dataset compression level. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder level(Object level) {
            return level(Output.of(level));
        }

        /**
         * @param type Type of dataset compression. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Object> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of dataset compression. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder type(Object type) {
            return type(Output.of(type));
        }

        public DatasetCompressionArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
