// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the parameters for using a user&#39;s KeyVault certificate for securing custom domain.
 * 
 */
public final class KeyVaultCertificateSourceParametersResponse extends com.pulumi.resources.InvokeArgs {

    public static final KeyVaultCertificateSourceParametersResponse Empty = new KeyVaultCertificateSourceParametersResponse();

    /**
     * Describes the action that shall be taken when the certificate is removed from Key Vault.
     * 
     */
    @Import(name="deleteRule", required=true)
    private String deleteRule;

    public String deleteRule() {
        return this.deleteRule;
    }

    @Import(name="odataType", required=true)
    private String odataType;

    public String odataType() {
        return this.odataType;
    }

    /**
     * Resource group of the user&#39;s Key Vault containing the SSL certificate
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.
     * 
     */
    @Import(name="secretName", required=true)
    private String secretName;

    public String secretName() {
        return this.secretName;
    }

    /**
     * The version(GUID) of Key Vault Secret in Key Vault.
     * 
     */
    @Import(name="secretVersion")
    private @Nullable String secretVersion;

    public Optional<String> secretVersion() {
        return Optional.ofNullable(this.secretVersion);
    }

    /**
     * Subscription Id of the user&#39;s Key Vault containing the SSL certificate
     * 
     */
    @Import(name="subscriptionId", required=true)
    private String subscriptionId;

    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Describes the action that shall be taken when the certificate is updated in Key Vault.
     * 
     */
    @Import(name="updateRule", required=true)
    private String updateRule;

    public String updateRule() {
        return this.updateRule;
    }

    /**
     * The name of the user&#39;s Key Vault containing the SSL certificate
     * 
     */
    @Import(name="vaultName", required=true)
    private String vaultName;

    public String vaultName() {
        return this.vaultName;
    }

    private KeyVaultCertificateSourceParametersResponse() {}

    private KeyVaultCertificateSourceParametersResponse(KeyVaultCertificateSourceParametersResponse $) {
        this.deleteRule = $.deleteRule;
        this.odataType = $.odataType;
        this.resourceGroupName = $.resourceGroupName;
        this.secretName = $.secretName;
        this.secretVersion = $.secretVersion;
        this.subscriptionId = $.subscriptionId;
        this.updateRule = $.updateRule;
        this.vaultName = $.vaultName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyVaultCertificateSourceParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyVaultCertificateSourceParametersResponse $;

        public Builder() {
            $ = new KeyVaultCertificateSourceParametersResponse();
        }

        public Builder(KeyVaultCertificateSourceParametersResponse defaults) {
            $ = new KeyVaultCertificateSourceParametersResponse(Objects.requireNonNull(defaults));
        }

        public Builder deleteRule(String deleteRule) {
            $.deleteRule = deleteRule;
            return this;
        }

        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder secretName(String secretName) {
            $.secretName = secretName;
            return this;
        }

        public Builder secretVersion(@Nullable String secretVersion) {
            $.secretVersion = secretVersion;
            return this;
        }

        public Builder subscriptionId(String subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        public Builder updateRule(String updateRule) {
            $.updateRule = updateRule;
            return this;
        }

        public Builder vaultName(String vaultName) {
            $.vaultName = vaultName;
            return this;
        }

        public KeyVaultCertificateSourceParametersResponse build() {
            $.deleteRule = Objects.requireNonNull($.deleteRule, "expected parameter 'deleteRule' to be non-null");
            $.odataType = Objects.requireNonNull($.odataType, "expected parameter 'odataType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.secretName = Objects.requireNonNull($.secretName, "expected parameter 'secretName' to be non-null");
            $.subscriptionId = Objects.requireNonNull($.subscriptionId, "expected parameter 'subscriptionId' to be non-null");
            $.updateRule = Objects.requireNonNull($.updateRule, "expected parameter 'updateRule' to be non-null");
            $.vaultName = Objects.requireNonNull($.vaultName, "expected parameter 'vaultName' to be non-null");
            return $;
        }
    }

}
