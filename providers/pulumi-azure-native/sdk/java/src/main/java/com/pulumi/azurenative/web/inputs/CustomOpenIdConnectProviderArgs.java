// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.OpenIdConnectLoginArgs;
import com.pulumi.azurenative.web.inputs.OpenIdConnectRegistrationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration settings of the custom Open ID Connect provider.
 * 
 */
public final class CustomOpenIdConnectProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomOpenIdConnectProviderArgs Empty = new CustomOpenIdConnectProviderArgs();

    /**
     * &lt;code&gt;false&lt;/code&gt; if the custom Open ID provider provider should not be enabled; otherwise, &lt;code&gt;true&lt;/code&gt;.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The configuration settings of the login flow of the custom Open ID Connect provider.
     * 
     */
    @Import(name="login")
    private @Nullable Output<OpenIdConnectLoginArgs> login;

    public Optional<Output<OpenIdConnectLoginArgs>> login() {
        return Optional.ofNullable(this.login);
    }

    /**
     * The configuration settings of the app registration for the custom Open ID Connect provider.
     * 
     */
    @Import(name="registration")
    private @Nullable Output<OpenIdConnectRegistrationArgs> registration;

    public Optional<Output<OpenIdConnectRegistrationArgs>> registration() {
        return Optional.ofNullable(this.registration);
    }

    private CustomOpenIdConnectProviderArgs() {}

    private CustomOpenIdConnectProviderArgs(CustomOpenIdConnectProviderArgs $) {
        this.enabled = $.enabled;
        this.login = $.login;
        this.registration = $.registration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomOpenIdConnectProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomOpenIdConnectProviderArgs $;

        public Builder() {
            $ = new CustomOpenIdConnectProviderArgs();
        }

        public Builder(CustomOpenIdConnectProviderArgs defaults) {
            $ = new CustomOpenIdConnectProviderArgs(Objects.requireNonNull(defaults));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder login(@Nullable Output<OpenIdConnectLoginArgs> login) {
            $.login = login;
            return this;
        }

        public Builder login(OpenIdConnectLoginArgs login) {
            return login(Output.of(login));
        }

        public Builder registration(@Nullable Output<OpenIdConnectRegistrationArgs> registration) {
            $.registration = registration;
            return this;
        }

        public Builder registration(OpenIdConnectRegistrationArgs registration) {
            return registration(Output.of(registration));
        }

        public CustomOpenIdConnectProviderArgs build() {
            return $;
        }
    }

}
