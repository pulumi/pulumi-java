// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.HealthErrorResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Replication agent details.
 * 
 */
public final class ReplicationAgentDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ReplicationAgentDetailsResponse Empty = new ReplicationAgentDetailsResponse();

    /**
     * The health of the replication agent.
     * 
     */
    @Import(name="health", required=true)
    private String health;

    public String health() {
        return this.health;
    }

    /**
     * The health errors.
     * 
     */
    @Import(name="healthErrors", required=true)
    private List<HealthErrorResponse> healthErrors;

    public List<HealthErrorResponse> healthErrors() {
        return this.healthErrors;
    }

    /**
     * The replication agent Id.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * The last heartbeat received from the replication agent.
     * 
     */
    @Import(name="lastHeartbeatUtc", required=true)
    private String lastHeartbeatUtc;

    public String lastHeartbeatUtc() {
        return this.lastHeartbeatUtc;
    }

    /**
     * The replication agent name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The replication agent version.
     * 
     */
    @Import(name="version", required=true)
    private String version;

    public String version() {
        return this.version;
    }

    private ReplicationAgentDetailsResponse() {}

    private ReplicationAgentDetailsResponse(ReplicationAgentDetailsResponse $) {
        this.health = $.health;
        this.healthErrors = $.healthErrors;
        this.id = $.id;
        this.lastHeartbeatUtc = $.lastHeartbeatUtc;
        this.name = $.name;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationAgentDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationAgentDetailsResponse $;

        public Builder() {
            $ = new ReplicationAgentDetailsResponse();
        }

        public Builder(ReplicationAgentDetailsResponse defaults) {
            $ = new ReplicationAgentDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder health(String health) {
            $.health = health;
            return this;
        }

        public Builder healthErrors(List<HealthErrorResponse> healthErrors) {
            $.healthErrors = healthErrors;
            return this;
        }

        public Builder healthErrors(HealthErrorResponse... healthErrors) {
            return healthErrors(List.of(healthErrors));
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder lastHeartbeatUtc(String lastHeartbeatUtc) {
            $.lastHeartbeatUtc = lastHeartbeatUtc;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder version(String version) {
            $.version = version;
            return this;
        }

        public ReplicationAgentDetailsResponse build() {
            $.health = Objects.requireNonNull($.health, "expected parameter 'health' to be non-null");
            $.healthErrors = Objects.requireNonNull($.healthErrors, "expected parameter 'healthErrors' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.lastHeartbeatUtc = Objects.requireNonNull($.lastHeartbeatUtc, "expected parameter 'lastHeartbeatUtc' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
