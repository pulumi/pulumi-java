// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.inputs.ARecordArgs;
import com.pulumi.azurenative.network.inputs.AaaaRecordArgs;
import com.pulumi.azurenative.network.inputs.CnameRecordArgs;
import com.pulumi.azurenative.network.inputs.MxRecordArgs;
import com.pulumi.azurenative.network.inputs.PtrRecordArgs;
import com.pulumi.azurenative.network.inputs.SoaRecordArgs;
import com.pulumi.azurenative.network.inputs.SrvRecordArgs;
import com.pulumi.azurenative.network.inputs.TxtRecordArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PrivateRecordSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrivateRecordSetArgs Empty = new PrivateRecordSetArgs();

    /**
     * The list of A records in the record set.
     * 
     */
    @Import(name="aRecords")
      private final @Nullable Output<List<ARecordArgs>> aRecords;

    public Output<List<ARecordArgs>> aRecords() {
        return this.aRecords == null ? Codegen.empty() : this.aRecords;
    }

    /**
     * The list of AAAA records in the record set.
     * 
     */
    @Import(name="aaaaRecords")
      private final @Nullable Output<List<AaaaRecordArgs>> aaaaRecords;

    public Output<List<AaaaRecordArgs>> aaaaRecords() {
        return this.aaaaRecords == null ? Codegen.empty() : this.aaaaRecords;
    }

    /**
     * The CNAME record in the record set.
     * 
     */
    @Import(name="cnameRecord")
      private final @Nullable Output<CnameRecordArgs> cnameRecord;

    public Output<CnameRecordArgs> cnameRecord() {
        return this.cnameRecord == null ? Codegen.empty() : this.cnameRecord;
    }

    /**
     * The metadata attached to the record set.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<Map<String,String>> metadata;

    public Output<Map<String,String>> metadata() {
        return this.metadata == null ? Codegen.empty() : this.metadata;
    }

    /**
     * The list of MX records in the record set.
     * 
     */
    @Import(name="mxRecords")
      private final @Nullable Output<List<MxRecordArgs>> mxRecords;

    public Output<List<MxRecordArgs>> mxRecords() {
        return this.mxRecords == null ? Codegen.empty() : this.mxRecords;
    }

    /**
     * The name of the Private DNS zone (without a terminating dot).
     * 
     */
    @Import(name="privateZoneName", required=true)
      private final Output<String> privateZoneName;

    public Output<String> privateZoneName() {
        return this.privateZoneName;
    }

    /**
     * The list of PTR records in the record set.
     * 
     */
    @Import(name="ptrRecords")
      private final @Nullable Output<List<PtrRecordArgs>> ptrRecords;

    public Output<List<PtrRecordArgs>> ptrRecords() {
        return this.ptrRecords == null ? Codegen.empty() : this.ptrRecords;
    }

    /**
     * The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the Private DNS zone is created).
     * 
     */
    @Import(name="recordType", required=true)
      private final Output<String> recordType;

    public Output<String> recordType() {
        return this.recordType;
    }

    /**
     * The name of the record set, relative to the name of the zone.
     * 
     */
    @Import(name="relativeRecordSetName")
      private final @Nullable Output<String> relativeRecordSetName;

    public Output<String> relativeRecordSetName() {
        return this.relativeRecordSetName == null ? Codegen.empty() : this.relativeRecordSetName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SOA record in the record set.
     * 
     */
    @Import(name="soaRecord")
      private final @Nullable Output<SoaRecordArgs> soaRecord;

    public Output<SoaRecordArgs> soaRecord() {
        return this.soaRecord == null ? Codegen.empty() : this.soaRecord;
    }

    /**
     * The list of SRV records in the record set.
     * 
     */
    @Import(name="srvRecords")
      private final @Nullable Output<List<SrvRecordArgs>> srvRecords;

    public Output<List<SrvRecordArgs>> srvRecords() {
        return this.srvRecords == null ? Codegen.empty() : this.srvRecords;
    }

    /**
     * The TTL (time-to-live) of the records in the record set.
     * 
     */
    @Import(name="ttl")
      private final @Nullable Output<Double> ttl;

    public Output<Double> ttl() {
        return this.ttl == null ? Codegen.empty() : this.ttl;
    }

    /**
     * The list of TXT records in the record set.
     * 
     */
    @Import(name="txtRecords")
      private final @Nullable Output<List<TxtRecordArgs>> txtRecords;

    public Output<List<TxtRecordArgs>> txtRecords() {
        return this.txtRecords == null ? Codegen.empty() : this.txtRecords;
    }

    public PrivateRecordSetArgs(
        @Nullable Output<List<ARecordArgs>> aRecords,
        @Nullable Output<List<AaaaRecordArgs>> aaaaRecords,
        @Nullable Output<CnameRecordArgs> cnameRecord,
        @Nullable Output<Map<String,String>> metadata,
        @Nullable Output<List<MxRecordArgs>> mxRecords,
        Output<String> privateZoneName,
        @Nullable Output<List<PtrRecordArgs>> ptrRecords,
        Output<String> recordType,
        @Nullable Output<String> relativeRecordSetName,
        Output<String> resourceGroupName,
        @Nullable Output<SoaRecordArgs> soaRecord,
        @Nullable Output<List<SrvRecordArgs>> srvRecords,
        @Nullable Output<Double> ttl,
        @Nullable Output<List<TxtRecordArgs>> txtRecords) {
        this.aRecords = aRecords;
        this.aaaaRecords = aaaaRecords;
        this.cnameRecord = cnameRecord;
        this.metadata = metadata;
        this.mxRecords = mxRecords;
        this.privateZoneName = Objects.requireNonNull(privateZoneName, "expected parameter 'privateZoneName' to be non-null");
        this.ptrRecords = ptrRecords;
        this.recordType = Objects.requireNonNull(recordType, "expected parameter 'recordType' to be non-null");
        this.relativeRecordSetName = relativeRecordSetName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.soaRecord = soaRecord;
        this.srvRecords = srvRecords;
        this.ttl = ttl;
        this.txtRecords = txtRecords;
    }

    private PrivateRecordSetArgs() {
        this.aRecords = Codegen.empty();
        this.aaaaRecords = Codegen.empty();
        this.cnameRecord = Codegen.empty();
        this.metadata = Codegen.empty();
        this.mxRecords = Codegen.empty();
        this.privateZoneName = Codegen.empty();
        this.ptrRecords = Codegen.empty();
        this.recordType = Codegen.empty();
        this.relativeRecordSetName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.soaRecord = Codegen.empty();
        this.srvRecords = Codegen.empty();
        this.ttl = Codegen.empty();
        this.txtRecords = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PrivateRecordSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<ARecordArgs>> aRecords;
        private @Nullable Output<List<AaaaRecordArgs>> aaaaRecords;
        private @Nullable Output<CnameRecordArgs> cnameRecord;
        private @Nullable Output<Map<String,String>> metadata;
        private @Nullable Output<List<MxRecordArgs>> mxRecords;
        private Output<String> privateZoneName;
        private @Nullable Output<List<PtrRecordArgs>> ptrRecords;
        private Output<String> recordType;
        private @Nullable Output<String> relativeRecordSetName;
        private Output<String> resourceGroupName;
        private @Nullable Output<SoaRecordArgs> soaRecord;
        private @Nullable Output<List<SrvRecordArgs>> srvRecords;
        private @Nullable Output<Double> ttl;
        private @Nullable Output<List<TxtRecordArgs>> txtRecords;

        public Builder() {
    	      // Empty
        }

        public Builder(PrivateRecordSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aRecords = defaults.aRecords;
    	      this.aaaaRecords = defaults.aaaaRecords;
    	      this.cnameRecord = defaults.cnameRecord;
    	      this.metadata = defaults.metadata;
    	      this.mxRecords = defaults.mxRecords;
    	      this.privateZoneName = defaults.privateZoneName;
    	      this.ptrRecords = defaults.ptrRecords;
    	      this.recordType = defaults.recordType;
    	      this.relativeRecordSetName = defaults.relativeRecordSetName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.soaRecord = defaults.soaRecord;
    	      this.srvRecords = defaults.srvRecords;
    	      this.ttl = defaults.ttl;
    	      this.txtRecords = defaults.txtRecords;
        }

        public Builder aRecords(@Nullable Output<List<ARecordArgs>> aRecords) {
            this.aRecords = aRecords;
            return this;
        }
        public Builder aRecords(@Nullable List<ARecordArgs> aRecords) {
            this.aRecords = Codegen.ofNullable(aRecords);
            return this;
        }
        public Builder aRecords(ARecordArgs... aRecords) {
            return aRecords(List.of(aRecords));
        }
        public Builder aaaaRecords(@Nullable Output<List<AaaaRecordArgs>> aaaaRecords) {
            this.aaaaRecords = aaaaRecords;
            return this;
        }
        public Builder aaaaRecords(@Nullable List<AaaaRecordArgs> aaaaRecords) {
            this.aaaaRecords = Codegen.ofNullable(aaaaRecords);
            return this;
        }
        public Builder aaaaRecords(AaaaRecordArgs... aaaaRecords) {
            return aaaaRecords(List.of(aaaaRecords));
        }
        public Builder cnameRecord(@Nullable Output<CnameRecordArgs> cnameRecord) {
            this.cnameRecord = cnameRecord;
            return this;
        }
        public Builder cnameRecord(@Nullable CnameRecordArgs cnameRecord) {
            this.cnameRecord = Codegen.ofNullable(cnameRecord);
            return this;
        }
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable Map<String,String> metadata) {
            this.metadata = Codegen.ofNullable(metadata);
            return this;
        }
        public Builder mxRecords(@Nullable Output<List<MxRecordArgs>> mxRecords) {
            this.mxRecords = mxRecords;
            return this;
        }
        public Builder mxRecords(@Nullable List<MxRecordArgs> mxRecords) {
            this.mxRecords = Codegen.ofNullable(mxRecords);
            return this;
        }
        public Builder mxRecords(MxRecordArgs... mxRecords) {
            return mxRecords(List.of(mxRecords));
        }
        public Builder privateZoneName(Output<String> privateZoneName) {
            this.privateZoneName = Objects.requireNonNull(privateZoneName);
            return this;
        }
        public Builder privateZoneName(String privateZoneName) {
            this.privateZoneName = Output.of(Objects.requireNonNull(privateZoneName));
            return this;
        }
        public Builder ptrRecords(@Nullable Output<List<PtrRecordArgs>> ptrRecords) {
            this.ptrRecords = ptrRecords;
            return this;
        }
        public Builder ptrRecords(@Nullable List<PtrRecordArgs> ptrRecords) {
            this.ptrRecords = Codegen.ofNullable(ptrRecords);
            return this;
        }
        public Builder ptrRecords(PtrRecordArgs... ptrRecords) {
            return ptrRecords(List.of(ptrRecords));
        }
        public Builder recordType(Output<String> recordType) {
            this.recordType = Objects.requireNonNull(recordType);
            return this;
        }
        public Builder recordType(String recordType) {
            this.recordType = Output.of(Objects.requireNonNull(recordType));
            return this;
        }
        public Builder relativeRecordSetName(@Nullable Output<String> relativeRecordSetName) {
            this.relativeRecordSetName = relativeRecordSetName;
            return this;
        }
        public Builder relativeRecordSetName(@Nullable String relativeRecordSetName) {
            this.relativeRecordSetName = Codegen.ofNullable(relativeRecordSetName);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder soaRecord(@Nullable Output<SoaRecordArgs> soaRecord) {
            this.soaRecord = soaRecord;
            return this;
        }
        public Builder soaRecord(@Nullable SoaRecordArgs soaRecord) {
            this.soaRecord = Codegen.ofNullable(soaRecord);
            return this;
        }
        public Builder srvRecords(@Nullable Output<List<SrvRecordArgs>> srvRecords) {
            this.srvRecords = srvRecords;
            return this;
        }
        public Builder srvRecords(@Nullable List<SrvRecordArgs> srvRecords) {
            this.srvRecords = Codegen.ofNullable(srvRecords);
            return this;
        }
        public Builder srvRecords(SrvRecordArgs... srvRecords) {
            return srvRecords(List.of(srvRecords));
        }
        public Builder ttl(@Nullable Output<Double> ttl) {
            this.ttl = ttl;
            return this;
        }
        public Builder ttl(@Nullable Double ttl) {
            this.ttl = Codegen.ofNullable(ttl);
            return this;
        }
        public Builder txtRecords(@Nullable Output<List<TxtRecordArgs>> txtRecords) {
            this.txtRecords = txtRecords;
            return this;
        }
        public Builder txtRecords(@Nullable List<TxtRecordArgs> txtRecords) {
            this.txtRecords = Codegen.ofNullable(txtRecords);
            return this;
        }
        public Builder txtRecords(TxtRecordArgs... txtRecords) {
            return txtRecords(List.of(txtRecords));
        }        public PrivateRecordSetArgs build() {
            return new PrivateRecordSetArgs(aRecords, aaaaRecords, cnameRecord, metadata, mxRecords, privateZoneName, ptrRecords, recordType, relativeRecordSetName, resourceGroupName, soaRecord, srvRecords, ttl, txtRecords);
        }
    }
}
