// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.testbase.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The validation results. There&#39;s validation on package when it&#39;s created or updated.
 * 
 */
public final class PackageValidationResultResponse extends com.pulumi.resources.InvokeArgs {

    public static final PackageValidationResultResponse Empty = new PackageValidationResultResponse();

    /**
     * Error information.
     * 
     */
    @Import(name="errors", required=true)
    private List<String> errors;

    public List<String> errors() {
        return this.errors;
    }

    /**
     * Indicates whether the package passed the validation.
     * 
     */
    @Import(name="isValid", required=true)
    private Boolean isValid;

    public Boolean isValid() {
        return this.isValid;
    }

    /**
     * Validation name.
     * 
     */
    @Import(name="validationName", required=true)
    private String validationName;

    public String validationName() {
        return this.validationName;
    }

    private PackageValidationResultResponse() {}

    private PackageValidationResultResponse(PackageValidationResultResponse $) {
        this.errors = $.errors;
        this.isValid = $.isValid;
        this.validationName = $.validationName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageValidationResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageValidationResultResponse $;

        public Builder() {
            $ = new PackageValidationResultResponse();
        }

        public Builder(PackageValidationResultResponse defaults) {
            $ = new PackageValidationResultResponse(Objects.requireNonNull(defaults));
        }

        public Builder errors(List<String> errors) {
            $.errors = errors;
            return this;
        }

        public Builder errors(String... errors) {
            return errors(List.of(errors));
        }

        public Builder isValid(Boolean isValid) {
            $.isValid = isValid;
            return this;
        }

        public Builder validationName(String validationName) {
            $.validationName = validationName;
            return this;
        }

        public PackageValidationResultResponse build() {
            $.errors = Objects.requireNonNull($.errors, "expected parameter 'errors' to be non-null");
            $.isValid = Objects.requireNonNull($.isValid, "expected parameter 'isValid' to be non-null");
            $.validationName = Objects.requireNonNull($.validationName, "expected parameter 'validationName' to be non-null");
            return $;
        }
    }

}
