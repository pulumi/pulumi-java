// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
 * 
 */
public final class VaultCertificateResponse extends com.pulumi.resources.InvokeArgs {

    public static final VaultCertificateResponse Empty = new VaultCertificateResponse();

    /**
     * For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. &lt;br&gt;&lt;br&gt;For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
     * 
     */
    @Import(name="certificateStore", required=true)
      private final String certificateStore;

    public String certificateStore() {
        return this.certificateStore;
    }

    /**
     * This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: &lt;br&gt;&lt;br&gt; {&lt;br&gt;  &#34;data&#34;:&#34;&lt;Base64-encoded-certificate&gt;&#34;,&lt;br&gt;  &#34;dataType&#34;:&#34;pfx&#34;,&lt;br&gt;  &#34;password&#34;:&#34;&lt;pfx-file-password&gt;&#34;&lt;br&gt;}
     * 
     */
    @Import(name="certificateUrl", required=true)
      private final String certificateUrl;

    public String certificateUrl() {
        return this.certificateUrl;
    }

    public VaultCertificateResponse(
        String certificateStore,
        String certificateUrl) {
        this.certificateStore = Objects.requireNonNull(certificateStore, "expected parameter 'certificateStore' to be non-null");
        this.certificateUrl = Objects.requireNonNull(certificateUrl, "expected parameter 'certificateUrl' to be non-null");
    }

    private VaultCertificateResponse() {
        this.certificateStore = null;
        this.certificateUrl = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VaultCertificateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String certificateStore;
        private String certificateUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(VaultCertificateResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateStore = defaults.certificateStore;
    	      this.certificateUrl = defaults.certificateUrl;
        }

        public Builder certificateStore(String certificateStore) {
            this.certificateStore = Objects.requireNonNull(certificateStore);
            return this;
        }
        public Builder certificateUrl(String certificateUrl) {
            this.certificateUrl = Objects.requireNonNull(certificateUrl);
            return this;
        }        public VaultCertificateResponse build() {
            return new VaultCertificateResponse(certificateStore, certificateUrl);
        }
    }
}
