// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Database specific information for SQL to Azure SQL DB sync migration task inputs
 * 
 */
public final class MigrateSqlServerSqlDbSyncDatabaseInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrateSqlServerSqlDbSyncDatabaseInputArgs Empty = new MigrateSqlServerSqlDbSyncDatabaseInputArgs();

    /**
     * Unique identifier for database
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Migration settings which tune the migration behavior
     * 
     */
    @Import(name="migrationSetting")
    private @Nullable Output<Map<String,String>> migrationSetting;

    public Optional<Output<Map<String,String>>> migrationSetting() {
        return Optional.ofNullable(this.migrationSetting);
    }

    /**
     * Name of database
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Schema name to be migrated
     * 
     */
    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    /**
     * Source settings to tune source endpoint migration behavior
     * 
     */
    @Import(name="sourceSetting")
    private @Nullable Output<Map<String,String>> sourceSetting;

    public Optional<Output<Map<String,String>>> sourceSetting() {
        return Optional.ofNullable(this.sourceSetting);
    }

    /**
     * Mapping of source to target tables
     * 
     */
    @Import(name="tableMap")
    private @Nullable Output<Map<String,String>> tableMap;

    public Optional<Output<Map<String,String>>> tableMap() {
        return Optional.ofNullable(this.tableMap);
    }

    /**
     * Target database name
     * 
     */
    @Import(name="targetDatabaseName")
    private @Nullable Output<String> targetDatabaseName;

    public Optional<Output<String>> targetDatabaseName() {
        return Optional.ofNullable(this.targetDatabaseName);
    }

    /**
     * Target settings to tune target endpoint migration behavior
     * 
     */
    @Import(name="targetSetting")
    private @Nullable Output<Map<String,String>> targetSetting;

    public Optional<Output<Map<String,String>>> targetSetting() {
        return Optional.ofNullable(this.targetSetting);
    }

    private MigrateSqlServerSqlDbSyncDatabaseInputArgs() {}

    private MigrateSqlServerSqlDbSyncDatabaseInputArgs(MigrateSqlServerSqlDbSyncDatabaseInputArgs $) {
        this.id = $.id;
        this.migrationSetting = $.migrationSetting;
        this.name = $.name;
        this.schemaName = $.schemaName;
        this.sourceSetting = $.sourceSetting;
        this.tableMap = $.tableMap;
        this.targetDatabaseName = $.targetDatabaseName;
        this.targetSetting = $.targetSetting;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlDbSyncDatabaseInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlDbSyncDatabaseInputArgs $;

        public Builder() {
            $ = new MigrateSqlServerSqlDbSyncDatabaseInputArgs();
        }

        public Builder(MigrateSqlServerSqlDbSyncDatabaseInputArgs defaults) {
            $ = new MigrateSqlServerSqlDbSyncDatabaseInputArgs(Objects.requireNonNull(defaults));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder migrationSetting(@Nullable Output<Map<String,String>> migrationSetting) {
            $.migrationSetting = migrationSetting;
            return this;
        }

        public Builder migrationSetting(Map<String,String> migrationSetting) {
            return migrationSetting(Output.of(migrationSetting));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder sourceSetting(@Nullable Output<Map<String,String>> sourceSetting) {
            $.sourceSetting = sourceSetting;
            return this;
        }

        public Builder sourceSetting(Map<String,String> sourceSetting) {
            return sourceSetting(Output.of(sourceSetting));
        }

        public Builder tableMap(@Nullable Output<Map<String,String>> tableMap) {
            $.tableMap = tableMap;
            return this;
        }

        public Builder tableMap(Map<String,String> tableMap) {
            return tableMap(Output.of(tableMap));
        }

        public Builder targetDatabaseName(@Nullable Output<String> targetDatabaseName) {
            $.targetDatabaseName = targetDatabaseName;
            return this;
        }

        public Builder targetDatabaseName(String targetDatabaseName) {
            return targetDatabaseName(Output.of(targetDatabaseName));
        }

        public Builder targetSetting(@Nullable Output<Map<String,String>> targetSetting) {
            $.targetSetting = targetSetting;
            return this;
        }

        public Builder targetSetting(Map<String,String> targetSetting) {
            return targetSetting(Output.of(targetSetting));
        }

        public MigrateSqlServerSqlDbSyncDatabaseInputArgs build() {
            return $;
        }
    }

}
