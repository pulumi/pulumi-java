// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databox.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Details of the managed disks.
 * 
 */
public final class ManagedDiskDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagedDiskDetailsResponse Empty = new ManagedDiskDetailsResponse();

    /**
     * Account Type of the data to be transferred.
     * Expected value is &#39;ManagedDisk&#39;.
     * 
     */
    @Import(name="dataAccountType", required=true)
    private String dataAccountType;

    /**
     * @return Account Type of the data to be transferred.
     * Expected value is &#39;ManagedDisk&#39;.
     * 
     */
    public String dataAccountType() {
        return this.dataAccountType;
    }

    /**
     * Resource Group Id of the compute disks.
     * 
     */
    @Import(name="resourceGroupId", required=true)
    private String resourceGroupId;

    /**
     * @return Resource Group Id of the compute disks.
     * 
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }

    /**
     * Resource Id of the storage account that can be used to copy the vhd for staging.
     * 
     */
    @Import(name="stagingStorageAccountId", required=true)
    private String stagingStorageAccountId;

    /**
     * @return Resource Id of the storage account that can be used to copy the vhd for staging.
     * 
     */
    public String stagingStorageAccountId() {
        return this.stagingStorageAccountId;
    }

    private ManagedDiskDetailsResponse() {}

    private ManagedDiskDetailsResponse(ManagedDiskDetailsResponse $) {
        this.dataAccountType = $.dataAccountType;
        this.resourceGroupId = $.resourceGroupId;
        this.stagingStorageAccountId = $.stagingStorageAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDiskDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDiskDetailsResponse $;

        public Builder() {
            $ = new ManagedDiskDetailsResponse();
        }

        public Builder(ManagedDiskDetailsResponse defaults) {
            $ = new ManagedDiskDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataAccountType Account Type of the data to be transferred.
         * Expected value is &#39;ManagedDisk&#39;.
         * 
         * @return builder
         * 
         */
        public Builder dataAccountType(String dataAccountType) {
            $.dataAccountType = dataAccountType;
            return this;
        }

        /**
         * @param resourceGroupId Resource Group Id of the compute disks.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param stagingStorageAccountId Resource Id of the storage account that can be used to copy the vhd for staging.
         * 
         * @return builder
         * 
         */
        public Builder stagingStorageAccountId(String stagingStorageAccountId) {
            $.stagingStorageAccountId = stagingStorageAccountId;
            return this;
        }

        public ManagedDiskDetailsResponse build() {
            $.dataAccountType = Codegen.stringProp("dataAccountType").arg($.dataAccountType).def("StorageAccount").require();
            $.resourceGroupId = Objects.requireNonNull($.resourceGroupId, "expected parameter 'resourceGroupId' to be non-null");
            $.stagingStorageAccountId = Objects.requireNonNull($.stagingStorageAccountId, "expected parameter 'stagingStorageAccountId' to be non-null");
            return $;
        }
    }

}
