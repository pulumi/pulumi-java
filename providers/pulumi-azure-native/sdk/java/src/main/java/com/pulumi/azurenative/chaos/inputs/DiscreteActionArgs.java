// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.chaos.inputs;

import com.pulumi.azurenative.chaos.inputs.KeyValuePairArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Model that represents a discrete action.
 * 
 */
public final class DiscreteActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiscreteActionArgs Empty = new DiscreteActionArgs();

    /**
     * String that represents a Capability URN.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return String that represents a Capability URN.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * List of key value pairs.
     * 
     */
    @Import(name="parameters", required=true)
    private Output<List<KeyValuePairArgs>> parameters;

    /**
     * @return List of key value pairs.
     * 
     */
    public Output<List<KeyValuePairArgs>> parameters() {
        return this.parameters;
    }

    /**
     * String that represents a selector.
     * 
     */
    @Import(name="selectorId", required=true)
    private Output<String> selectorId;

    /**
     * @return String that represents a selector.
     * 
     */
    public Output<String> selectorId() {
        return this.selectorId;
    }

    /**
     * Enum that discriminates between action models.
     * Expected value is &#39;discrete&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Enum that discriminates between action models.
     * Expected value is &#39;discrete&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private DiscreteActionArgs() {}

    private DiscreteActionArgs(DiscreteActionArgs $) {
        this.name = $.name;
        this.parameters = $.parameters;
        this.selectorId = $.selectorId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiscreteActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiscreteActionArgs $;

        public Builder() {
            $ = new DiscreteActionArgs();
        }

        public Builder(DiscreteActionArgs defaults) {
            $ = new DiscreteActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name String that represents a Capability URN.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name String that represents a Capability URN.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parameters List of key value pairs.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Output<List<KeyValuePairArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters List of key value pairs.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<KeyValuePairArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters List of key value pairs.
         * 
         * @return builder
         * 
         */
        public Builder parameters(KeyValuePairArgs... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param selectorId String that represents a selector.
         * 
         * @return builder
         * 
         */
        public Builder selectorId(Output<String> selectorId) {
            $.selectorId = selectorId;
            return this;
        }

        /**
         * @param selectorId String that represents a selector.
         * 
         * @return builder
         * 
         */
        public Builder selectorId(String selectorId) {
            return selectorId(Output.of(selectorId));
        }

        /**
         * @param type Enum that discriminates between action models.
         * Expected value is &#39;discrete&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Enum that discriminates between action models.
         * Expected value is &#39;discrete&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DiscreteActionArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.parameters = Objects.requireNonNull($.parameters, "expected parameter 'parameters' to be non-null");
            $.selectorId = Objects.requireNonNull($.selectorId, "expected parameter 'selectorId' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
