// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.azurenative.documentdb.enums.DataType;
import com.pulumi.azurenative.documentdb.enums.IndexKind;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The indexes for the path.
 * 
 */
public final class IndexesArgs extends com.pulumi.resources.ResourceArgs {

    public static final IndexesArgs Empty = new IndexesArgs();

    /**
     * The datatype for which the indexing behavior is applied to.
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<Either<String,DataType>> dataType;

    /**
     * @return The datatype for which the indexing behavior is applied to.
     * 
     */
    public Optional<Output<Either<String,DataType>>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * Indicates the type of index.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<Either<String,IndexKind>> kind;

    /**
     * @return Indicates the type of index.
     * 
     */
    public Optional<Output<Either<String,IndexKind>>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The precision of the index. -1 is maximum precision.
     * 
     */
    @Import(name="precision")
    private @Nullable Output<Integer> precision;

    /**
     * @return The precision of the index. -1 is maximum precision.
     * 
     */
    public Optional<Output<Integer>> precision() {
        return Optional.ofNullable(this.precision);
    }

    private IndexesArgs() {}

    private IndexesArgs(IndexesArgs $) {
        this.dataType = $.dataType;
        this.kind = $.kind;
        this.precision = $.precision;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndexesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndexesArgs $;

        public Builder() {
            $ = new IndexesArgs();
        }

        public Builder(IndexesArgs defaults) {
            $ = new IndexesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataType The datatype for which the indexing behavior is applied to.
         * 
         * @return builder
         * 
         */
        public Builder dataType(@Nullable Output<Either<String,DataType>> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType The datatype for which the indexing behavior is applied to.
         * 
         * @return builder
         * 
         */
        public Builder dataType(Either<String,DataType> dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param dataType The datatype for which the indexing behavior is applied to.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Either.ofLeft(dataType));
        }

        /**
         * @param dataType The datatype for which the indexing behavior is applied to.
         * 
         * @return builder
         * 
         */
        public Builder dataType(DataType dataType) {
            return dataType(Either.ofRight(dataType));
        }

        /**
         * @param kind Indicates the type of index.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<Either<String,IndexKind>> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Indicates the type of index.
         * 
         * @return builder
         * 
         */
        public Builder kind(Either<String,IndexKind> kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param kind Indicates the type of index.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Either.ofLeft(kind));
        }

        /**
         * @param kind Indicates the type of index.
         * 
         * @return builder
         * 
         */
        public Builder kind(IndexKind kind) {
            return kind(Either.ofRight(kind));
        }

        /**
         * @param precision The precision of the index. -1 is maximum precision.
         * 
         * @return builder
         * 
         */
        public Builder precision(@Nullable Output<Integer> precision) {
            $.precision = precision;
            return this;
        }

        /**
         * @param precision The precision of the index. -1 is maximum precision.
         * 
         * @return builder
         * 
         */
        public Builder precision(Integer precision) {
            return precision(Output.of(precision));
        }

        public IndexesArgs build() {
            $.dataType = Codegen.stringProp("dataType").left(DataType.class).output().arg($.dataType).def("String").getNullable();
            $.kind = Codegen.stringProp("kind").left(IndexKind.class).output().arg($.kind).def("Hash").getNullable();
            return $;
        }
    }

}
