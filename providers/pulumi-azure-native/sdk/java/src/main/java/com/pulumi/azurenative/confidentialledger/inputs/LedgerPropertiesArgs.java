// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.confidentialledger.inputs;

import com.pulumi.azurenative.confidentialledger.enums.LedgerType;
import com.pulumi.azurenative.confidentialledger.inputs.AADBasedSecurityPrincipalArgs;
import com.pulumi.azurenative.confidentialledger.inputs.CertBasedSecurityPrincipalArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Additional Confidential Ledger properties.
 * 
 */
public final class LedgerPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final LedgerPropertiesArgs Empty = new LedgerPropertiesArgs();

    /**
     * Array of all AAD based Security Principals.
     * 
     */
    @Import(name="aadBasedSecurityPrincipals")
    private @Nullable Output<List<AADBasedSecurityPrincipalArgs>> aadBasedSecurityPrincipals;

    /**
     * @return Array of all AAD based Security Principals.
     * 
     */
    public Optional<Output<List<AADBasedSecurityPrincipalArgs>>> aadBasedSecurityPrincipals() {
        return Optional.ofNullable(this.aadBasedSecurityPrincipals);
    }

    /**
     * Array of all cert based Security Principals.
     * 
     */
    @Import(name="certBasedSecurityPrincipals")
    private @Nullable Output<List<CertBasedSecurityPrincipalArgs>> certBasedSecurityPrincipals;

    /**
     * @return Array of all cert based Security Principals.
     * 
     */
    public Optional<Output<List<CertBasedSecurityPrincipalArgs>>> certBasedSecurityPrincipals() {
        return Optional.ofNullable(this.certBasedSecurityPrincipals);
    }

    /**
     * Name of the Blob Storage Account for saving ledger files
     * 
     */
    @Import(name="ledgerStorageAccount")
    private @Nullable Output<String> ledgerStorageAccount;

    /**
     * @return Name of the Blob Storage Account for saving ledger files
     * 
     */
    public Optional<Output<String>> ledgerStorageAccount() {
        return Optional.ofNullable(this.ledgerStorageAccount);
    }

    /**
     * Type of Confidential Ledger
     * 
     */
    @Import(name="ledgerType")
    private @Nullable Output<Either<String,LedgerType>> ledgerType;

    /**
     * @return Type of Confidential Ledger
     * 
     */
    public Optional<Output<Either<String,LedgerType>>> ledgerType() {
        return Optional.ofNullable(this.ledgerType);
    }

    private LedgerPropertiesArgs() {}

    private LedgerPropertiesArgs(LedgerPropertiesArgs $) {
        this.aadBasedSecurityPrincipals = $.aadBasedSecurityPrincipals;
        this.certBasedSecurityPrincipals = $.certBasedSecurityPrincipals;
        this.ledgerStorageAccount = $.ledgerStorageAccount;
        this.ledgerType = $.ledgerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LedgerPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LedgerPropertiesArgs $;

        public Builder() {
            $ = new LedgerPropertiesArgs();
        }

        public Builder(LedgerPropertiesArgs defaults) {
            $ = new LedgerPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aadBasedSecurityPrincipals Array of all AAD based Security Principals.
         * 
         * @return builder
         * 
         */
        public Builder aadBasedSecurityPrincipals(@Nullable Output<List<AADBasedSecurityPrincipalArgs>> aadBasedSecurityPrincipals) {
            $.aadBasedSecurityPrincipals = aadBasedSecurityPrincipals;
            return this;
        }

        /**
         * @param aadBasedSecurityPrincipals Array of all AAD based Security Principals.
         * 
         * @return builder
         * 
         */
        public Builder aadBasedSecurityPrincipals(List<AADBasedSecurityPrincipalArgs> aadBasedSecurityPrincipals) {
            return aadBasedSecurityPrincipals(Output.of(aadBasedSecurityPrincipals));
        }

        /**
         * @param aadBasedSecurityPrincipals Array of all AAD based Security Principals.
         * 
         * @return builder
         * 
         */
        public Builder aadBasedSecurityPrincipals(AADBasedSecurityPrincipalArgs... aadBasedSecurityPrincipals) {
            return aadBasedSecurityPrincipals(List.of(aadBasedSecurityPrincipals));
        }

        /**
         * @param certBasedSecurityPrincipals Array of all cert based Security Principals.
         * 
         * @return builder
         * 
         */
        public Builder certBasedSecurityPrincipals(@Nullable Output<List<CertBasedSecurityPrincipalArgs>> certBasedSecurityPrincipals) {
            $.certBasedSecurityPrincipals = certBasedSecurityPrincipals;
            return this;
        }

        /**
         * @param certBasedSecurityPrincipals Array of all cert based Security Principals.
         * 
         * @return builder
         * 
         */
        public Builder certBasedSecurityPrincipals(List<CertBasedSecurityPrincipalArgs> certBasedSecurityPrincipals) {
            return certBasedSecurityPrincipals(Output.of(certBasedSecurityPrincipals));
        }

        /**
         * @param certBasedSecurityPrincipals Array of all cert based Security Principals.
         * 
         * @return builder
         * 
         */
        public Builder certBasedSecurityPrincipals(CertBasedSecurityPrincipalArgs... certBasedSecurityPrincipals) {
            return certBasedSecurityPrincipals(List.of(certBasedSecurityPrincipals));
        }

        /**
         * @param ledgerStorageAccount Name of the Blob Storage Account for saving ledger files
         * 
         * @return builder
         * 
         */
        public Builder ledgerStorageAccount(@Nullable Output<String> ledgerStorageAccount) {
            $.ledgerStorageAccount = ledgerStorageAccount;
            return this;
        }

        /**
         * @param ledgerStorageAccount Name of the Blob Storage Account for saving ledger files
         * 
         * @return builder
         * 
         */
        public Builder ledgerStorageAccount(String ledgerStorageAccount) {
            return ledgerStorageAccount(Output.of(ledgerStorageAccount));
        }

        /**
         * @param ledgerType Type of Confidential Ledger
         * 
         * @return builder
         * 
         */
        public Builder ledgerType(@Nullable Output<Either<String,LedgerType>> ledgerType) {
            $.ledgerType = ledgerType;
            return this;
        }

        /**
         * @param ledgerType Type of Confidential Ledger
         * 
         * @return builder
         * 
         */
        public Builder ledgerType(Either<String,LedgerType> ledgerType) {
            return ledgerType(Output.of(ledgerType));
        }

        /**
         * @param ledgerType Type of Confidential Ledger
         * 
         * @return builder
         * 
         */
        public Builder ledgerType(String ledgerType) {
            return ledgerType(Either.ofLeft(ledgerType));
        }

        /**
         * @param ledgerType Type of Confidential Ledger
         * 
         * @return builder
         * 
         */
        public Builder ledgerType(LedgerType ledgerType) {
            return ledgerType(Either.ofRight(ledgerType));
        }

        public LedgerPropertiesArgs build() {
            return $;
        }
    }

}
