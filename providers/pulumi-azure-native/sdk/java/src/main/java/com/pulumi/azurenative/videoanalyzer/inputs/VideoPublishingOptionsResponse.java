// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Optional flags used to change how video is published. These are only allowed for topologies where &#34;kind&#34; is set to &#34;live&#34;.
 * 
 */
public final class VideoPublishingOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final VideoPublishingOptionsResponse Empty = new VideoPublishingOptionsResponse();

    /**
     * When set to &#39;true&#39; content will not be archived or recorded. This is used, for example, when the topology is used only for low latency video streaming. Default is &#39;false&#39;.  If set to &#39;true&#39;, then &#34;disableRtspPublishing&#34; must be set to &#39;false&#39;.
     * 
     */
    @Import(name="disableArchive")
      private final @Nullable String disableArchive;

    public Optional<String> disableArchive() {
        return this.disableArchive == null ? Optional.empty() : Optional.ofNullable(this.disableArchive);
    }

    /**
     * When set to &#39;true&#39; the RTSP playback URL will not be published, disabling low latency streaming. This is used, for example, when the topology is used only for archiving content. Default is &#39;false&#39;.  If set to &#39;true&#39;, then &#34;disableArchive&#34; must be set to &#39;false&#39;.
     * 
     */
    @Import(name="disableRtspPublishing")
      private final @Nullable String disableRtspPublishing;

    public Optional<String> disableRtspPublishing() {
        return this.disableRtspPublishing == null ? Optional.empty() : Optional.ofNullable(this.disableRtspPublishing);
    }

    public VideoPublishingOptionsResponse(
        @Nullable String disableArchive,
        @Nullable String disableRtspPublishing) {
        this.disableArchive = disableArchive;
        this.disableRtspPublishing = disableRtspPublishing;
    }

    private VideoPublishingOptionsResponse() {
        this.disableArchive = null;
        this.disableRtspPublishing = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VideoPublishingOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String disableArchive;
        private @Nullable String disableRtspPublishing;

        public Builder() {
    	      // Empty
        }

        public Builder(VideoPublishingOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disableArchive = defaults.disableArchive;
    	      this.disableRtspPublishing = defaults.disableRtspPublishing;
        }

        public Builder disableArchive(@Nullable String disableArchive) {
            this.disableArchive = disableArchive;
            return this;
        }
        public Builder disableRtspPublishing(@Nullable String disableRtspPublishing) {
            this.disableRtspPublishing = disableRtspPublishing;
            return this;
        }        public VideoPublishingOptionsResponse build() {
            return new VideoPublishingOptionsResponse(disableArchive, disableRtspPublishing);
        }
    }
}
