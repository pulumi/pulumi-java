// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.desktopvirtualization.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Schema for MSIX Package Dependencies properties.
 * 
 */
public final class MsixPackageDependenciesResponse extends com.pulumi.resources.InvokeArgs {

    public static final MsixPackageDependenciesResponse Empty = new MsixPackageDependenciesResponse();

    /**
     * Name of package dependency.
     * 
     */
    @Import(name="dependencyName")
    private @Nullable String dependencyName;

    /**
     * @return Name of package dependency.
     * 
     */
    public Optional<String> dependencyName() {
        return Optional.ofNullable(this.dependencyName);
    }

    /**
     * Dependency version required.
     * 
     */
    @Import(name="minVersion")
    private @Nullable String minVersion;

    /**
     * @return Dependency version required.
     * 
     */
    public Optional<String> minVersion() {
        return Optional.ofNullable(this.minVersion);
    }

    /**
     * Name of dependency publisher.
     * 
     */
    @Import(name="publisher")
    private @Nullable String publisher;

    /**
     * @return Name of dependency publisher.
     * 
     */
    public Optional<String> publisher() {
        return Optional.ofNullable(this.publisher);
    }

    private MsixPackageDependenciesResponse() {}

    private MsixPackageDependenciesResponse(MsixPackageDependenciesResponse $) {
        this.dependencyName = $.dependencyName;
        this.minVersion = $.minVersion;
        this.publisher = $.publisher;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MsixPackageDependenciesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MsixPackageDependenciesResponse $;

        public Builder() {
            $ = new MsixPackageDependenciesResponse();
        }

        public Builder(MsixPackageDependenciesResponse defaults) {
            $ = new MsixPackageDependenciesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dependencyName Name of package dependency.
         * 
         * @return builder
         * 
         */
        public Builder dependencyName(@Nullable String dependencyName) {
            $.dependencyName = dependencyName;
            return this;
        }

        /**
         * @param minVersion Dependency version required.
         * 
         * @return builder
         * 
         */
        public Builder minVersion(@Nullable String minVersion) {
            $.minVersion = minVersion;
            return this;
        }

        /**
         * @param publisher Name of dependency publisher.
         * 
         * @return builder
         * 
         */
        public Builder publisher(@Nullable String publisher) {
            $.publisher = publisher;
            return this;
        }

        public MsixPackageDependenciesResponse build() {
            return $;
        }
    }

}
