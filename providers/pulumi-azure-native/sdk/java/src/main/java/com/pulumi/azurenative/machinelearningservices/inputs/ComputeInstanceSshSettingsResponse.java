// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies policy and settings for SSH access.
 * 
 */
public final class ComputeInstanceSshSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ComputeInstanceSshSettingsResponse Empty = new ComputeInstanceSshSettingsResponse();

    /**
     * Specifies the SSH rsa public key file as a string. Use &#34;ssh-keygen -t rsa -b 2048&#34; to generate your SSH key pairs.
     * 
     */
    @Import(name="adminPublicKey")
    private @Nullable String adminPublicKey;

    /**
     * @return Specifies the SSH rsa public key file as a string. Use &#34;ssh-keygen -t rsa -b 2048&#34; to generate your SSH key pairs.
     * 
     */
    public Optional<String> adminPublicKey() {
        return Optional.ofNullable(this.adminPublicKey);
    }

    /**
     * Describes the admin user name.
     * 
     */
    @Import(name="adminUserName", required=true)
    private String adminUserName;

    /**
     * @return Describes the admin user name.
     * 
     */
    public String adminUserName() {
        return this.adminUserName;
    }

    /**
     * Describes the port for connecting through SSH.
     * 
     */
    @Import(name="sshPort", required=true)
    private Integer sshPort;

    /**
     * @return Describes the port for connecting through SSH.
     * 
     */
    public Integer sshPort() {
        return this.sshPort;
    }

    /**
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
     * 
     */
    @Import(name="sshPublicAccess")
    private @Nullable String sshPublicAccess;

    /**
     * @return State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
     * 
     */
    public Optional<String> sshPublicAccess() {
        return Optional.ofNullable(this.sshPublicAccess);
    }

    private ComputeInstanceSshSettingsResponse() {}

    private ComputeInstanceSshSettingsResponse(ComputeInstanceSshSettingsResponse $) {
        this.adminPublicKey = $.adminPublicKey;
        this.adminUserName = $.adminUserName;
        this.sshPort = $.sshPort;
        this.sshPublicAccess = $.sshPublicAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeInstanceSshSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeInstanceSshSettingsResponse $;

        public Builder() {
            $ = new ComputeInstanceSshSettingsResponse();
        }

        public Builder(ComputeInstanceSshSettingsResponse defaults) {
            $ = new ComputeInstanceSshSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPublicKey Specifies the SSH rsa public key file as a string. Use &#34;ssh-keygen -t rsa -b 2048&#34; to generate your SSH key pairs.
         * 
         * @return builder
         * 
         */
        public Builder adminPublicKey(@Nullable String adminPublicKey) {
            $.adminPublicKey = adminPublicKey;
            return this;
        }

        /**
         * @param adminUserName Describes the admin user name.
         * 
         * @return builder
         * 
         */
        public Builder adminUserName(String adminUserName) {
            $.adminUserName = adminUserName;
            return this;
        }

        /**
         * @param sshPort Describes the port for connecting through SSH.
         * 
         * @return builder
         * 
         */
        public Builder sshPort(Integer sshPort) {
            $.sshPort = sshPort;
            return this;
        }

        /**
         * @param sshPublicAccess State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
         * 
         * @return builder
         * 
         */
        public Builder sshPublicAccess(@Nullable String sshPublicAccess) {
            $.sshPublicAccess = sshPublicAccess;
            return this;
        }

        public ComputeInstanceSshSettingsResponse build() {
            $.adminUserName = Objects.requireNonNull($.adminUserName, "expected parameter 'adminUserName' to be non-null");
            $.sshPort = Objects.requireNonNull($.sshPort, "expected parameter 'sshPort' to be non-null");
            $.sshPublicAccess = Codegen.stringProp("sshPublicAccess").arg($.sshPublicAccess).def("Disabled").getNullable();
            return $;
        }
    }

}
