// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.dataprotection.inputs;

import com.pulumi.azurenative.dataprotection.inputs.CopyOnExpiryOptionResponse;
import com.pulumi.azurenative.dataprotection.inputs.CustomCopyOptionResponse;
import com.pulumi.azurenative.dataprotection.inputs.DataStoreInfoBaseResponse;
import com.pulumi.azurenative.dataprotection.inputs.ImmediateCopyOptionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.util.Objects;


/**
 * Target copy settings
 * 
 */
public final class TargetCopySettingResponse extends com.pulumi.resources.InvokeArgs {

    public static final TargetCopySettingResponse Empty = new TargetCopySettingResponse();

    /**
     * It can be CustomCopyOption or ImmediateCopyOption.
     * 
     */
    @Import(name="copyAfter", required=true)
    private Object copyAfter;

    public Object copyAfter() {
        return this.copyAfter;
    }

    /**
     * Info of target datastore
     * 
     */
    @Import(name="dataStore", required=true)
    private DataStoreInfoBaseResponse dataStore;

    public DataStoreInfoBaseResponse dataStore() {
        return this.dataStore;
    }

    private TargetCopySettingResponse() {}

    private TargetCopySettingResponse(TargetCopySettingResponse $) {
        this.copyAfter = $.copyAfter;
        this.dataStore = $.dataStore;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetCopySettingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetCopySettingResponse $;

        public Builder() {
            $ = new TargetCopySettingResponse();
        }

        public Builder(TargetCopySettingResponse defaults) {
            $ = new TargetCopySettingResponse(Objects.requireNonNull(defaults));
        }

        public Builder copyAfter(Object copyAfter) {
            $.copyAfter = copyAfter;
            return this;
        }

        public Builder dataStore(DataStoreInfoBaseResponse dataStore) {
            $.dataStore = dataStore;
            return this;
        }

        public TargetCopySettingResponse build() {
            $.copyAfter = Objects.requireNonNull($.copyAfter, "expected parameter 'copyAfter' to be non-null");
            $.dataStore = Objects.requireNonNull($.dataStore, "expected parameter 'dataStore' to be non-null");
            return $;
        }
    }

}
