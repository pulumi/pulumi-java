// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.streamanalytics.inputs;

import com.pulumi.azurenative.streamanalytics.inputs.AvroSerializationResponse;
import com.pulumi.azurenative.streamanalytics.inputs.AzureDataLakeStoreOutputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.AzureSqlDatabaseOutputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.AzureTableOutputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.BlobOutputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.CsvSerializationResponse;
import com.pulumi.azurenative.streamanalytics.inputs.DiagnosticsResponse;
import com.pulumi.azurenative.streamanalytics.inputs.DocumentDbOutputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.EventHubOutputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.JsonSerializationResponse;
import com.pulumi.azurenative.streamanalytics.inputs.PowerBIOutputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.ServiceBusQueueOutputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.ServiceBusTopicOutputDataSourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
 * 
 */
public final class OutputResponse extends com.pulumi.resources.InvokeArgs {

    public static final OutputResponse Empty = new OutputResponse();

    /**
     * Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="datasource")
    private @Nullable Object datasource;

    public Optional<Object> datasource() {
        return Optional.ofNullable(this.datasource);
    }

    /**
     * Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
     * 
     */
    @Import(name="diagnostics", required=true)
    private DiagnosticsResponse diagnostics;

    public DiagnosticsResponse diagnostics() {
        return this.diagnostics;
    }

    /**
     * The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Resource Id
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Resource name
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="serialization")
    private @Nullable Object serialization;

    public Optional<Object> serialization() {
        return Optional.ofNullable(this.serialization);
    }

    /**
     * Resource type
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private OutputResponse() {}

    private OutputResponse(OutputResponse $) {
        this.datasource = $.datasource;
        this.diagnostics = $.diagnostics;
        this.etag = $.etag;
        this.id = $.id;
        this.name = $.name;
        this.serialization = $.serialization;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OutputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OutputResponse $;

        public Builder() {
            $ = new OutputResponse();
        }

        public Builder(OutputResponse defaults) {
            $ = new OutputResponse(Objects.requireNonNull(defaults));
        }

        public Builder datasource(@Nullable Object datasource) {
            $.datasource = datasource;
            return this;
        }

        public Builder diagnostics(DiagnosticsResponse diagnostics) {
            $.diagnostics = diagnostics;
            return this;
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder serialization(@Nullable Object serialization) {
            $.serialization = serialization;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public OutputResponse build() {
            $.diagnostics = Objects.requireNonNull($.diagnostics, "expected parameter 'diagnostics' to be non-null");
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
