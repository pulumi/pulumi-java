// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.keyvault.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The secret management attributes.
 * 
 */
public final class SecretAttributesResponse extends com.pulumi.resources.InvokeArgs {

    public static final SecretAttributesResponse Empty = new SecretAttributesResponse();

    /**
     * Creation time in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    @Import(name="created", required=true)
    private Integer created;

    /**
     * @return Creation time in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    public Integer created() {
        return this.created;
    }

    /**
     * Determines whether the object is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Determines whether the object is enabled.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Expiry date in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    @Import(name="expires")
    private @Nullable Integer expires;

    /**
     * @return Expiry date in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    public Optional<Integer> expires() {
        return Optional.ofNullable(this.expires);
    }

    /**
     * Not before date in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    @Import(name="notBefore")
    private @Nullable Integer notBefore;

    /**
     * @return Not before date in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    public Optional<Integer> notBefore() {
        return Optional.ofNullable(this.notBefore);
    }

    /**
     * Last updated time in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    @Import(name="updated", required=true)
    private Integer updated;

    /**
     * @return Last updated time in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    public Integer updated() {
        return this.updated;
    }

    private SecretAttributesResponse() {}

    private SecretAttributesResponse(SecretAttributesResponse $) {
        this.created = $.created;
        this.enabled = $.enabled;
        this.expires = $.expires;
        this.notBefore = $.notBefore;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretAttributesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretAttributesResponse $;

        public Builder() {
            $ = new SecretAttributesResponse();
        }

        public Builder(SecretAttributesResponse defaults) {
            $ = new SecretAttributesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param created Creation time in seconds since 1970-01-01T00:00:00Z.
         * 
         * @return builder
         * 
         */
        public Builder created(Integer created) {
            $.created = created;
            return this;
        }

        /**
         * @param enabled Determines whether the object is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param expires Expiry date in seconds since 1970-01-01T00:00:00Z.
         * 
         * @return builder
         * 
         */
        public Builder expires(@Nullable Integer expires) {
            $.expires = expires;
            return this;
        }

        /**
         * @param notBefore Not before date in seconds since 1970-01-01T00:00:00Z.
         * 
         * @return builder
         * 
         */
        public Builder notBefore(@Nullable Integer notBefore) {
            $.notBefore = notBefore;
            return this;
        }

        /**
         * @param updated Last updated time in seconds since 1970-01-01T00:00:00Z.
         * 
         * @return builder
         * 
         */
        public Builder updated(Integer updated) {
            $.updated = updated;
            return this;
        }

        public SecretAttributesResponse build() {
            $.created = Objects.requireNonNull($.created, "expected parameter 'created' to be non-null");
            $.updated = Objects.requireNonNull($.updated, "expected parameter 'updated' to be non-null");
            return $;
        }
    }

}
