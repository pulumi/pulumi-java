// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.azurenative.customerinsights.inputs.RelationshipTypeFieldMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;


/**
 * Maps fields in Profile to their corresponding StrongIds in Related Profile.
 * 
 */
public final class RelationshipTypeMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final RelationshipTypeMappingArgs Empty = new RelationshipTypeMappingArgs();

    /**
     * Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
     * 
     */
    @Import(name="fieldMappings", required=true)
    private Output<List<RelationshipTypeFieldMappingArgs>> fieldMappings;

    /**
     * @return Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
     * 
     */
    public Output<List<RelationshipTypeFieldMappingArgs>> fieldMappings() {
        return this.fieldMappings;
    }

    private RelationshipTypeMappingArgs() {}

    private RelationshipTypeMappingArgs(RelationshipTypeMappingArgs $) {
        this.fieldMappings = $.fieldMappings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RelationshipTypeMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RelationshipTypeMappingArgs $;

        public Builder() {
            $ = new RelationshipTypeMappingArgs();
        }

        public Builder(RelationshipTypeMappingArgs defaults) {
            $ = new RelationshipTypeMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fieldMappings Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
         * 
         * @return builder
         * 
         */
        public Builder fieldMappings(Output<List<RelationshipTypeFieldMappingArgs>> fieldMappings) {
            $.fieldMappings = fieldMappings;
            return this;
        }

        /**
         * @param fieldMappings Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
         * 
         * @return builder
         * 
         */
        public Builder fieldMappings(List<RelationshipTypeFieldMappingArgs> fieldMappings) {
            return fieldMappings(Output.of(fieldMappings));
        }

        /**
         * @param fieldMappings Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
         * 
         * @return builder
         * 
         */
        public Builder fieldMappings(RelationshipTypeFieldMappingArgs... fieldMappings) {
            return fieldMappings(List.of(fieldMappings));
        }

        public RelationshipTypeMappingArgs build() {
            $.fieldMappings = Objects.requireNonNull($.fieldMappings, "expected parameter 'fieldMappings' to be non-null");
            return $;
        }
    }

}
