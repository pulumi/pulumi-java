// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateReferenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertificateReferenceResponse Empty = new CertificateReferenceResponse();

    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of &#39;remoteUser&#39;, a &#39;certs&#39; directory is created in the user&#39;s home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
     * 
     */
    @Import(name="storeLocation")
    private @Nullable String storeLocation;

    public Optional<String> storeLocation() {
        return Optional.ofNullable(this.storeLocation);
    }

    /**
     * This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
     * 
     */
    @Import(name="storeName")
    private @Nullable String storeName;

    public Optional<String> storeName() {
        return Optional.ofNullable(this.storeName);
    }

    @Import(name="visibility")
    private @Nullable List<String> visibility;

    public Optional<List<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private CertificateReferenceResponse() {}

    private CertificateReferenceResponse(CertificateReferenceResponse $) {
        this.id = $.id;
        this.storeLocation = $.storeLocation;
        this.storeName = $.storeName;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateReferenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateReferenceResponse $;

        public Builder() {
            $ = new CertificateReferenceResponse();
        }

        public Builder(CertificateReferenceResponse defaults) {
            $ = new CertificateReferenceResponse(Objects.requireNonNull(defaults));
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder storeLocation(@Nullable String storeLocation) {
            $.storeLocation = storeLocation;
            return this;
        }

        public Builder storeName(@Nullable String storeName) {
            $.storeName = storeName;
            return this;
        }

        public Builder visibility(@Nullable List<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        public Builder visibility(String... visibility) {
            return visibility(List.of(visibility));
        }

        public CertificateReferenceResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            return $;
        }
    }

}
