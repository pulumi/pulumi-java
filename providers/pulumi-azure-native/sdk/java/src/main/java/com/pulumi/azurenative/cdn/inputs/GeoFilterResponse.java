// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Rules defining user&#39;s geo access within a CDN endpoint.
 * 
 */
public final class GeoFilterResponse extends com.pulumi.resources.InvokeArgs {

    public static final GeoFilterResponse Empty = new GeoFilterResponse();

    /**
     * Action of the geo filter, i.e. allow or block access.
     * 
     */
    @Import(name="action", required=true)
      private final String action;

    public String action() {
        return this.action;
    }

    /**
     * Two letter country codes defining user country access in a geo filter, e.g. AU, MX, US.
     * 
     */
    @Import(name="countryCodes", required=true)
      private final List<String> countryCodes;

    public List<String> countryCodes() {
        return this.countryCodes;
    }

    /**
     * Relative path applicable to geo filter. (e.g. &#39;/mypictures&#39;, &#39;/mypicture/kitty.jpg&#39;, and etc.)
     * 
     */
    @Import(name="relativePath", required=true)
      private final String relativePath;

    public String relativePath() {
        return this.relativePath;
    }

    public GeoFilterResponse(
        String action,
        List<String> countryCodes,
        String relativePath) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.countryCodes = Objects.requireNonNull(countryCodes, "expected parameter 'countryCodes' to be non-null");
        this.relativePath = Objects.requireNonNull(relativePath, "expected parameter 'relativePath' to be non-null");
    }

    private GeoFilterResponse() {
        this.action = null;
        this.countryCodes = List.of();
        this.relativePath = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GeoFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String action;
        private List<String> countryCodes;
        private String relativePath;

        public Builder() {
    	      // Empty
        }

        public Builder(GeoFilterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.countryCodes = defaults.countryCodes;
    	      this.relativePath = defaults.relativePath;
        }

        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder countryCodes(List<String> countryCodes) {
            this.countryCodes = Objects.requireNonNull(countryCodes);
            return this;
        }
        public Builder countryCodes(String... countryCodes) {
            return countryCodes(List.of(countryCodes));
        }
        public Builder relativePath(String relativePath) {
            this.relativePath = Objects.requireNonNull(relativePath);
            return this;
        }        public GeoFilterResponse build() {
            return new GeoFilterResponse(action, countryCodes, relativePath);
        }
    }
}
