// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Load balancer backend addresses.
 * 
 */
public final class LoadBalancerBackendAddressResponse extends com.pulumi.resources.InvokeArgs {

    public static final LoadBalancerBackendAddressResponse Empty = new LoadBalancerBackendAddressResponse();

    /**
     * IP Address belonging to the referenced virtual network.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable String ipAddress;

    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Reference to the frontend ip address configuration defined in regional loadbalancer.
     * 
     */
    @Import(name="loadBalancerFrontendIPConfiguration")
    private @Nullable SubResourceResponse loadBalancerFrontendIPConfiguration;

    public Optional<SubResourceResponse> loadBalancerFrontendIPConfiguration() {
        return Optional.ofNullable(this.loadBalancerFrontendIPConfiguration);
    }

    /**
     * Name of the backend address.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Reference to IP address defined in network interfaces.
     * 
     */
    @Import(name="networkInterfaceIPConfiguration", required=true)
    private SubResourceResponse networkInterfaceIPConfiguration;

    public SubResourceResponse networkInterfaceIPConfiguration() {
        return this.networkInterfaceIPConfiguration;
    }

    /**
     * Reference to an existing subnet.
     * 
     */
    @Import(name="subnet")
    private @Nullable SubResourceResponse subnet;

    public Optional<SubResourceResponse> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * Reference to an existing virtual network.
     * 
     */
    @Import(name="virtualNetwork")
    private @Nullable SubResourceResponse virtualNetwork;

    public Optional<SubResourceResponse> virtualNetwork() {
        return Optional.ofNullable(this.virtualNetwork);
    }

    private LoadBalancerBackendAddressResponse() {}

    private LoadBalancerBackendAddressResponse(LoadBalancerBackendAddressResponse $) {
        this.ipAddress = $.ipAddress;
        this.loadBalancerFrontendIPConfiguration = $.loadBalancerFrontendIPConfiguration;
        this.name = $.name;
        this.networkInterfaceIPConfiguration = $.networkInterfaceIPConfiguration;
        this.subnet = $.subnet;
        this.virtualNetwork = $.virtualNetwork;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerBackendAddressResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerBackendAddressResponse $;

        public Builder() {
            $ = new LoadBalancerBackendAddressResponse();
        }

        public Builder(LoadBalancerBackendAddressResponse defaults) {
            $ = new LoadBalancerBackendAddressResponse(Objects.requireNonNull(defaults));
        }

        public Builder ipAddress(@Nullable String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder loadBalancerFrontendIPConfiguration(@Nullable SubResourceResponse loadBalancerFrontendIPConfiguration) {
            $.loadBalancerFrontendIPConfiguration = loadBalancerFrontendIPConfiguration;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder networkInterfaceIPConfiguration(SubResourceResponse networkInterfaceIPConfiguration) {
            $.networkInterfaceIPConfiguration = networkInterfaceIPConfiguration;
            return this;
        }

        public Builder subnet(@Nullable SubResourceResponse subnet) {
            $.subnet = subnet;
            return this;
        }

        public Builder virtualNetwork(@Nullable SubResourceResponse virtualNetwork) {
            $.virtualNetwork = virtualNetwork;
            return this;
        }

        public LoadBalancerBackendAddressResponse build() {
            $.networkInterfaceIPConfiguration = Objects.requireNonNull($.networkInterfaceIPConfiguration, "expected parameter 'networkInterfaceIPConfiguration' to be non-null");
            return $;
        }
    }

}
