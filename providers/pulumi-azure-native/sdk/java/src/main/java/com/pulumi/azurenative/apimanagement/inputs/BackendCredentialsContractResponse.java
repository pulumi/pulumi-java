// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.azurenative.apimanagement.inputs.BackendAuthorizationHeaderCredentialsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Details of the Credentials used to connect to Backend.
 * 
 */
public final class BackendCredentialsContractResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackendCredentialsContractResponse Empty = new BackendCredentialsContractResponse();

    /**
     * Authorization header authentication
     * 
     */
    @Import(name="authorization")
    private @Nullable BackendAuthorizationHeaderCredentialsResponse authorization;

    /**
     * @return Authorization header authentication
     * 
     */
    public Optional<BackendAuthorizationHeaderCredentialsResponse> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.
     * 
     */
    @Import(name="certificate")
    private @Nullable List<String> certificate;

    /**
     * @return List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.
     * 
     */
    public Optional<List<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * List of Client Certificate Ids.
     * 
     */
    @Import(name="certificateIds")
    private @Nullable List<String> certificateIds;

    /**
     * @return List of Client Certificate Ids.
     * 
     */
    public Optional<List<String>> certificateIds() {
        return Optional.ofNullable(this.certificateIds);
    }

    /**
     * Header Parameter description.
     * 
     */
    @Import(name="header")
    private @Nullable Map<String,List<String>> header;

    /**
     * @return Header Parameter description.
     * 
     */
    public Optional<Map<String,List<String>>> header() {
        return Optional.ofNullable(this.header);
    }

    /**
     * Query Parameter description.
     * 
     */
    @Import(name="query")
    private @Nullable Map<String,List<String>> query;

    /**
     * @return Query Parameter description.
     * 
     */
    public Optional<Map<String,List<String>>> query() {
        return Optional.ofNullable(this.query);
    }

    private BackendCredentialsContractResponse() {}

    private BackendCredentialsContractResponse(BackendCredentialsContractResponse $) {
        this.authorization = $.authorization;
        this.certificate = $.certificate;
        this.certificateIds = $.certificateIds;
        this.header = $.header;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendCredentialsContractResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendCredentialsContractResponse $;

        public Builder() {
            $ = new BackendCredentialsContractResponse();
        }

        public Builder(BackendCredentialsContractResponse defaults) {
            $ = new BackendCredentialsContractResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorization Authorization header authentication
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable BackendAuthorizationHeaderCredentialsResponse authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param certificate List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable List<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String... certificate) {
            return certificate(List.of(certificate));
        }

        /**
         * @param certificateIds List of Client Certificate Ids.
         * 
         * @return builder
         * 
         */
        public Builder certificateIds(@Nullable List<String> certificateIds) {
            $.certificateIds = certificateIds;
            return this;
        }

        /**
         * @param certificateIds List of Client Certificate Ids.
         * 
         * @return builder
         * 
         */
        public Builder certificateIds(String... certificateIds) {
            return certificateIds(List.of(certificateIds));
        }

        /**
         * @param header Header Parameter description.
         * 
         * @return builder
         * 
         */
        public Builder header(@Nullable Map<String,List<String>> header) {
            $.header = header;
            return this;
        }

        /**
         * @param query Query Parameter description.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Map<String,List<String>> query) {
            $.query = query;
            return this;
        }

        public BackendCredentialsContractResponse build() {
            return $;
        }
    }

}
