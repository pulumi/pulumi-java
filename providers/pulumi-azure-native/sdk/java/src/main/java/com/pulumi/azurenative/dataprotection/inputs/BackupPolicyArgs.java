// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.dataprotection.inputs;

import com.pulumi.azurenative.dataprotection.inputs.AzureBackupRuleArgs;
import com.pulumi.azurenative.dataprotection.inputs.AzureRetentionRuleArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Rule based backup policy
 * 
 */
public final class BackupPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupPolicyArgs Empty = new BackupPolicyArgs();

    /**
     * Type of datasource for the backup management
     * 
     */
    @Import(name="datasourceTypes", required=true)
      private final Output<List<String>> datasourceTypes;

    public Output<List<String>> datasourceTypes() {
        return this.datasourceTypes;
    }

    /**
     * Expected value is &#39;BackupPolicy&#39;.
     * 
     */
    @Import(name="objectType", required=true)
      private final Output<String> objectType;

    public Output<String> objectType() {
        return this.objectType;
    }

    /**
     * Policy rule dictionary that contains rules for each backuptype i.e Full/Incremental/Logs etc
     * 
     */
    @Import(name="policyRules", required=true)
      private final Output<List<Either<AzureBackupRuleArgs,AzureRetentionRuleArgs>>> policyRules;

    public Output<List<Either<AzureBackupRuleArgs,AzureRetentionRuleArgs>>> policyRules() {
        return this.policyRules;
    }

    public BackupPolicyArgs(
        Output<List<String>> datasourceTypes,
        Output<String> objectType,
        Output<List<Either<AzureBackupRuleArgs,AzureRetentionRuleArgs>>> policyRules) {
        this.datasourceTypes = Objects.requireNonNull(datasourceTypes, "expected parameter 'datasourceTypes' to be non-null");
        this.objectType = Codegen.stringProp("objectType").output().arg(objectType).require();
        this.policyRules = Objects.requireNonNull(policyRules, "expected parameter 'policyRules' to be non-null");
    }

    private BackupPolicyArgs() {
        this.datasourceTypes = Codegen.empty();
        this.objectType = Codegen.empty();
        this.policyRules = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> datasourceTypes;
        private Output<String> objectType;
        private Output<List<Either<AzureBackupRuleArgs,AzureRetentionRuleArgs>>> policyRules;

        public Builder() {
    	      // Empty
        }

        public Builder(BackupPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasourceTypes = defaults.datasourceTypes;
    	      this.objectType = defaults.objectType;
    	      this.policyRules = defaults.policyRules;
        }

        public Builder datasourceTypes(Output<List<String>> datasourceTypes) {
            this.datasourceTypes = Objects.requireNonNull(datasourceTypes);
            return this;
        }
        public Builder datasourceTypes(List<String> datasourceTypes) {
            this.datasourceTypes = Output.of(Objects.requireNonNull(datasourceTypes));
            return this;
        }
        public Builder datasourceTypes(String... datasourceTypes) {
            return datasourceTypes(List.of(datasourceTypes));
        }
        public Builder objectType(Output<String> objectType) {
            this.objectType = Objects.requireNonNull(objectType);
            return this;
        }
        public Builder objectType(String objectType) {
            this.objectType = Output.of(Objects.requireNonNull(objectType));
            return this;
        }
        public Builder policyRules(Output<List<Either<AzureBackupRuleArgs,AzureRetentionRuleArgs>>> policyRules) {
            this.policyRules = Objects.requireNonNull(policyRules);
            return this;
        }
        public Builder policyRules(List<Either<AzureBackupRuleArgs,AzureRetentionRuleArgs>> policyRules) {
            this.policyRules = Output.of(Objects.requireNonNull(policyRules));
            return this;
        }
        public Builder policyRules(Either<AzureBackupRuleArgs,AzureRetentionRuleArgs>... policyRules) {
            return policyRules(List.of(policyRules));
        }        public BackupPolicyArgs build() {
            return new BackupPolicyArgs(datasourceTypes, objectType, policyRules);
        }
    }
}
