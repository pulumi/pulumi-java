// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security;

import com.pulumi.azurenative.security.inputs.AutomationActionEventHubArgs;
import com.pulumi.azurenative.security.inputs.AutomationActionLogicAppArgs;
import com.pulumi.azurenative.security.inputs.AutomationActionWorkspaceArgs;
import com.pulumi.azurenative.security.inputs.AutomationScopeArgs;
import com.pulumi.azurenative.security.inputs.AutomationSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutomationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutomationArgs Empty = new AutomationArgs();

    /**
     * A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<Object>> actions;

    /**
     * @return A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
     * 
     */
    public Optional<Output<List<Object>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * The security automation name.
     * 
     */
    @Import(name="automationName")
    private @Nullable Output<String> automationName;

    /**
     * @return The security automation name.
     * 
     */
    public Optional<Output<String>> automationName() {
        return Optional.ofNullable(this.automationName);
    }

    /**
     * The security automation description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The security automation description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Indicates whether the security automation is enabled.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return Indicates whether the security automation is enabled.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * Kind of the resource
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return Kind of the resource
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Location where the resource is stored
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location where the resource is stored
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<AutomationScopeArgs>> scopes;

    /**
     * @return A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
     * 
     */
    public Optional<Output<List<AutomationScopeArgs>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * A collection of the source event types which evaluate the security automation set of rules.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<AutomationSourceArgs>> sources;

    /**
     * @return A collection of the source event types which evaluate the security automation set of rules.
     * 
     */
    public Optional<Output<List<AutomationSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    /**
     * A list of key value pairs that describe the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A list of key value pairs that describe the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AutomationArgs() {}

    private AutomationArgs(AutomationArgs $) {
        this.actions = $.actions;
        this.automationName = $.automationName;
        this.description = $.description;
        this.isEnabled = $.isEnabled;
        this.kind = $.kind;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.scopes = $.scopes;
        this.sources = $.sources;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationArgs $;

        public Builder() {
            $ = new AutomationArgs();
        }

        public Builder(AutomationArgs defaults) {
            $ = new AutomationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<Object>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<Object> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
         * 
         * @return builder
         * 
         */
        public Builder actions(Object... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param automationName The security automation name.
         * 
         * @return builder
         * 
         */
        public Builder automationName(@Nullable Output<String> automationName) {
            $.automationName = automationName;
            return this;
        }

        /**
         * @param automationName The security automation name.
         * 
         * @return builder
         * 
         */
        public Builder automationName(String automationName) {
            return automationName(Output.of(automationName));
        }

        /**
         * @param description The security automation description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The security automation description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isEnabled Indicates whether the security automation is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Indicates whether the security automation is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param kind Kind of the resource
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of the resource
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param location Location where the resource is stored
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location where the resource is stored
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param scopes A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<AutomationScopeArgs>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<AutomationScopeArgs> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
         * 
         * @return builder
         * 
         */
        public Builder scopes(AutomationScopeArgs... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param sources A collection of the source event types which evaluate the security automation set of rules.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<AutomationSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources A collection of the source event types which evaluate the security automation set of rules.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<AutomationSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources A collection of the source event types which evaluate the security automation set of rules.
         * 
         * @return builder
         * 
         */
        public Builder sources(AutomationSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param tags A list of key value pairs that describe the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of key value pairs that describe the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public AutomationArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
