// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.app.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Volume mount for the Container App.
 * 
 */
public final class VolumeMountArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeMountArgs Empty = new VolumeMountArgs();

    /**
     * Path within the container at which the volume should be mounted.Must not contain &#39;:&#39;.
     * 
     */
    @Import(name="mountPath")
    private @Nullable Output<String> mountPath;

    /**
     * @return Path within the container at which the volume should be mounted.Must not contain &#39;:&#39;.
     * 
     */
    public Optional<Output<String>> mountPath() {
        return Optional.ofNullable(this.mountPath);
    }

    /**
     * This must match the Name of a Volume.
     * 
     */
    @Import(name="volumeName")
    private @Nullable Output<String> volumeName;

    /**
     * @return This must match the Name of a Volume.
     * 
     */
    public Optional<Output<String>> volumeName() {
        return Optional.ofNullable(this.volumeName);
    }

    private VolumeMountArgs() {}

    private VolumeMountArgs(VolumeMountArgs $) {
        this.mountPath = $.mountPath;
        this.volumeName = $.volumeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeMountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeMountArgs $;

        public Builder() {
            $ = new VolumeMountArgs();
        }

        public Builder(VolumeMountArgs defaults) {
            $ = new VolumeMountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mountPath Path within the container at which the volume should be mounted.Must not contain &#39;:&#39;.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(@Nullable Output<String> mountPath) {
            $.mountPath = mountPath;
            return this;
        }

        /**
         * @param mountPath Path within the container at which the volume should be mounted.Must not contain &#39;:&#39;.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(String mountPath) {
            return mountPath(Output.of(mountPath));
        }

        /**
         * @param volumeName This must match the Name of a Volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeName(@Nullable Output<String> volumeName) {
            $.volumeName = volumeName;
            return this;
        }

        /**
         * @param volumeName This must match the Name of a Volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeName(String volumeName) {
            return volumeName(Output.of(volumeName));
        }

        public VolumeMountArgs build() {
            return $;
        }
    }

}
