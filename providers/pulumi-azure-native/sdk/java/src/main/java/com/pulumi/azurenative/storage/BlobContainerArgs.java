// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage;

import com.pulumi.azurenative.storage.enums.PublicAccess;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BlobContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlobContainerArgs Empty = new BlobContainerArgs();

    /**
     * The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * 
     */
    @Import(name="containerName")
      private final @Nullable Output<String> containerName;

    public Output<String> containerName() {
        return this.containerName == null ? Codegen.empty() : this.containerName;
    }

    /**
     * Default the container to use specified encryption scope for all writes.
     * 
     */
    @Import(name="defaultEncryptionScope")
      private final @Nullable Output<String> defaultEncryptionScope;

    public Output<String> defaultEncryptionScope() {
        return this.defaultEncryptionScope == null ? Codegen.empty() : this.defaultEncryptionScope;
    }

    /**
     * Block override of encryption scope from the container default.
     * 
     */
    @Import(name="denyEncryptionScopeOverride")
      private final @Nullable Output<Boolean> denyEncryptionScopeOverride;

    public Output<Boolean> denyEncryptionScopeOverride() {
        return this.denyEncryptionScopeOverride == null ? Codegen.empty() : this.denyEncryptionScopeOverride;
    }

    /**
     * A name-value pair to associate with the container as metadata.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<Map<String,String>> metadata;

    public Output<Map<String,String>> metadata() {
        return this.metadata == null ? Codegen.empty() : this.metadata;
    }

    /**
     * Specifies whether data in the container may be accessed publicly and the level of access.
     * 
     */
    @Import(name="publicAccess")
      private final @Nullable Output<PublicAccess> publicAccess;

    public Output<PublicAccess> publicAccess() {
        return this.publicAccess == null ? Codegen.empty() : this.publicAccess;
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    public BlobContainerArgs(
        Output<String> accountName,
        @Nullable Output<String> containerName,
        @Nullable Output<String> defaultEncryptionScope,
        @Nullable Output<Boolean> denyEncryptionScopeOverride,
        @Nullable Output<Map<String,String>> metadata,
        @Nullable Output<PublicAccess> publicAccess,
        Output<String> resourceGroupName) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.containerName = containerName;
        this.defaultEncryptionScope = defaultEncryptionScope;
        this.denyEncryptionScopeOverride = denyEncryptionScopeOverride;
        this.metadata = metadata;
        this.publicAccess = publicAccess;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private BlobContainerArgs() {
        this.accountName = Codegen.empty();
        this.containerName = Codegen.empty();
        this.defaultEncryptionScope = Codegen.empty();
        this.denyEncryptionScopeOverride = Codegen.empty();
        this.metadata = Codegen.empty();
        this.publicAccess = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlobContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private @Nullable Output<String> containerName;
        private @Nullable Output<String> defaultEncryptionScope;
        private @Nullable Output<Boolean> denyEncryptionScopeOverride;
        private @Nullable Output<Map<String,String>> metadata;
        private @Nullable Output<PublicAccess> publicAccess;
        private Output<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(BlobContainerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.containerName = defaults.containerName;
    	      this.defaultEncryptionScope = defaults.defaultEncryptionScope;
    	      this.denyEncryptionScopeOverride = defaults.denyEncryptionScopeOverride;
    	      this.metadata = defaults.metadata;
    	      this.publicAccess = defaults.publicAccess;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }
        public Builder containerName(@Nullable Output<String> containerName) {
            this.containerName = containerName;
            return this;
        }
        public Builder containerName(@Nullable String containerName) {
            this.containerName = Codegen.ofNullable(containerName);
            return this;
        }
        public Builder defaultEncryptionScope(@Nullable Output<String> defaultEncryptionScope) {
            this.defaultEncryptionScope = defaultEncryptionScope;
            return this;
        }
        public Builder defaultEncryptionScope(@Nullable String defaultEncryptionScope) {
            this.defaultEncryptionScope = Codegen.ofNullable(defaultEncryptionScope);
            return this;
        }
        public Builder denyEncryptionScopeOverride(@Nullable Output<Boolean> denyEncryptionScopeOverride) {
            this.denyEncryptionScopeOverride = denyEncryptionScopeOverride;
            return this;
        }
        public Builder denyEncryptionScopeOverride(@Nullable Boolean denyEncryptionScopeOverride) {
            this.denyEncryptionScopeOverride = Codegen.ofNullable(denyEncryptionScopeOverride);
            return this;
        }
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable Map<String,String> metadata) {
            this.metadata = Codegen.ofNullable(metadata);
            return this;
        }
        public Builder publicAccess(@Nullable Output<PublicAccess> publicAccess) {
            this.publicAccess = publicAccess;
            return this;
        }
        public Builder publicAccess(@Nullable PublicAccess publicAccess) {
            this.publicAccess = Codegen.ofNullable(publicAccess);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }        public BlobContainerArgs build() {
            return new BlobContainerArgs(accountName, containerName, defaultEncryptionScope, denyEncryptionScopeOverride, metadata, publicAccess, resourceGroupName);
        }
    }
}
