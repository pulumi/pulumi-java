// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scheduler.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientCertAuthenticationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ClientCertAuthenticationResponse Empty = new ClientCertAuthenticationResponse();

    /**
     * Gets or sets the certificate expiration date.
     * 
     */
    @Import(name="certificateExpirationDate")
    private @Nullable String certificateExpirationDate;

    public Optional<String> certificateExpirationDate() {
        return Optional.ofNullable(this.certificateExpirationDate);
    }

    /**
     * Gets or sets the certificate subject name.
     * 
     */
    @Import(name="certificateSubjectName")
    private @Nullable String certificateSubjectName;

    public Optional<String> certificateSubjectName() {
        return Optional.ofNullable(this.certificateSubjectName);
    }

    /**
     * Gets or sets the certificate thumbprint.
     * 
     */
    @Import(name="certificateThumbprint")
    private @Nullable String certificateThumbprint;

    public Optional<String> certificateThumbprint() {
        return Optional.ofNullable(this.certificateThumbprint);
    }

    /**
     * Gets or sets the certificate password, return value will always be empty.
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Gets or sets the pfx certificate. Accepts certification in base64 encoding, return value will always be empty.
     * 
     */
    @Import(name="pfx")
    private @Nullable String pfx;

    public Optional<String> pfx() {
        return Optional.ofNullable(this.pfx);
    }

    /**
     * Gets or sets the HTTP authentication type.
     * Expected value is &#39;ClientCertificate&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ClientCertAuthenticationResponse() {}

    private ClientCertAuthenticationResponse(ClientCertAuthenticationResponse $) {
        this.certificateExpirationDate = $.certificateExpirationDate;
        this.certificateSubjectName = $.certificateSubjectName;
        this.certificateThumbprint = $.certificateThumbprint;
        this.password = $.password;
        this.pfx = $.pfx;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientCertAuthenticationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientCertAuthenticationResponse $;

        public Builder() {
            $ = new ClientCertAuthenticationResponse();
        }

        public Builder(ClientCertAuthenticationResponse defaults) {
            $ = new ClientCertAuthenticationResponse(Objects.requireNonNull(defaults));
        }

        public Builder certificateExpirationDate(@Nullable String certificateExpirationDate) {
            $.certificateExpirationDate = certificateExpirationDate;
            return this;
        }

        public Builder certificateSubjectName(@Nullable String certificateSubjectName) {
            $.certificateSubjectName = certificateSubjectName;
            return this;
        }

        public Builder certificateThumbprint(@Nullable String certificateThumbprint) {
            $.certificateThumbprint = certificateThumbprint;
            return this;
        }

        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        public Builder pfx(@Nullable String pfx) {
            $.pfx = pfx;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ClientCertAuthenticationResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
