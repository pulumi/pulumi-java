// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * RouteTable route.
 * 
 */
public final class HubRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final HubRouteArgs Empty = new HubRouteArgs();

    /**
     * The type of destinations (eg: CIDR, ResourceId, Service).
     * 
     */
    @Import(name="destinationType", required=true)
    private Output<String> destinationType;

    /**
     * @return The type of destinations (eg: CIDR, ResourceId, Service).
     * 
     */
    public Output<String> destinationType() {
        return this.destinationType;
    }

    /**
     * List of all destinations.
     * 
     */
    @Import(name="destinations", required=true)
    private Output<List<String>> destinations;

    /**
     * @return List of all destinations.
     * 
     */
    public Output<List<String>> destinations() {
        return this.destinations;
    }

    /**
     * The name of the Route that is unique within a RouteTable. This name can be used to access this route.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Route that is unique within a RouteTable. This name can be used to access this route.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * NextHop resource ID.
     * 
     */
    @Import(name="nextHop", required=true)
    private Output<String> nextHop;

    /**
     * @return NextHop resource ID.
     * 
     */
    public Output<String> nextHop() {
        return this.nextHop;
    }

    /**
     * The type of next hop (eg: ResourceId).
     * 
     */
    @Import(name="nextHopType", required=true)
    private Output<String> nextHopType;

    /**
     * @return The type of next hop (eg: ResourceId).
     * 
     */
    public Output<String> nextHopType() {
        return this.nextHopType;
    }

    private HubRouteArgs() {}

    private HubRouteArgs(HubRouteArgs $) {
        this.destinationType = $.destinationType;
        this.destinations = $.destinations;
        this.name = $.name;
        this.nextHop = $.nextHop;
        this.nextHopType = $.nextHopType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HubRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HubRouteArgs $;

        public Builder() {
            $ = new HubRouteArgs();
        }

        public Builder(HubRouteArgs defaults) {
            $ = new HubRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationType The type of destinations (eg: CIDR, ResourceId, Service).
         * 
         * @return builder
         * 
         */
        public Builder destinationType(Output<String> destinationType) {
            $.destinationType = destinationType;
            return this;
        }

        /**
         * @param destinationType The type of destinations (eg: CIDR, ResourceId, Service).
         * 
         * @return builder
         * 
         */
        public Builder destinationType(String destinationType) {
            return destinationType(Output.of(destinationType));
        }

        /**
         * @param destinations List of all destinations.
         * 
         * @return builder
         * 
         */
        public Builder destinations(Output<List<String>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations List of all destinations.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<String> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations List of all destinations.
         * 
         * @return builder
         * 
         */
        public Builder destinations(String... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param name The name of the Route that is unique within a RouteTable. This name can be used to access this route.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Route that is unique within a RouteTable. This name can be used to access this route.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nextHop NextHop resource ID.
         * 
         * @return builder
         * 
         */
        public Builder nextHop(Output<String> nextHop) {
            $.nextHop = nextHop;
            return this;
        }

        /**
         * @param nextHop NextHop resource ID.
         * 
         * @return builder
         * 
         */
        public Builder nextHop(String nextHop) {
            return nextHop(Output.of(nextHop));
        }

        /**
         * @param nextHopType The type of next hop (eg: ResourceId).
         * 
         * @return builder
         * 
         */
        public Builder nextHopType(Output<String> nextHopType) {
            $.nextHopType = nextHopType;
            return this;
        }

        /**
         * @param nextHopType The type of next hop (eg: ResourceId).
         * 
         * @return builder
         * 
         */
        public Builder nextHopType(String nextHopType) {
            return nextHopType(Output.of(nextHopType));
        }

        public HubRouteArgs build() {
            $.destinationType = Objects.requireNonNull($.destinationType, "expected parameter 'destinationType' to be non-null");
            $.destinations = Objects.requireNonNull($.destinations, "expected parameter 'destinations' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.nextHop = Objects.requireNonNull($.nextHop, "expected parameter 'nextHop' to be non-null");
            $.nextHopType = Objects.requireNonNull($.nextHopType, "expected parameter 'nextHopType' to be non-null");
            return $;
        }
    }

}
