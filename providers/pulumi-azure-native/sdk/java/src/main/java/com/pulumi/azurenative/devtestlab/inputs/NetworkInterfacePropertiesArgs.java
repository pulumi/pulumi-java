// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.azurenative.devtestlab.inputs.SharedPublicIpAddressConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of a network interface.
 * 
 */
public final class NetworkInterfacePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkInterfacePropertiesArgs Empty = new NetworkInterfacePropertiesArgs();

    /**
     * The DNS name.
     * 
     */
    @Import(name="dnsName")
    private @Nullable Output<String> dnsName;

    /**
     * @return The DNS name.
     * 
     */
    public Optional<Output<String>> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * The private IP address.
     * 
     */
    @Import(name="privateIpAddress")
    private @Nullable Output<String> privateIpAddress;

    /**
     * @return The private IP address.
     * 
     */
    public Optional<Output<String>> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * The public IP address.
     * 
     */
    @Import(name="publicIpAddress")
    private @Nullable Output<String> publicIpAddress;

    /**
     * @return The public IP address.
     * 
     */
    public Optional<Output<String>> publicIpAddress() {
        return Optional.ofNullable(this.publicIpAddress);
    }

    /**
     * The resource ID of the public IP address.
     * 
     */
    @Import(name="publicIpAddressId")
    private @Nullable Output<String> publicIpAddressId;

    /**
     * @return The resource ID of the public IP address.
     * 
     */
    public Optional<Output<String>> publicIpAddressId() {
        return Optional.ofNullable(this.publicIpAddressId);
    }

    /**
     * The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
     * 
     */
    @Import(name="rdpAuthority")
    private @Nullable Output<String> rdpAuthority;

    /**
     * @return The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
     * 
     */
    public Optional<Output<String>> rdpAuthority() {
        return Optional.ofNullable(this.rdpAuthority);
    }

    /**
     * The configuration for sharing a public IP address across multiple virtual machines.
     * 
     */
    @Import(name="sharedPublicIpAddressConfiguration")
    private @Nullable Output<SharedPublicIpAddressConfigurationArgs> sharedPublicIpAddressConfiguration;

    /**
     * @return The configuration for sharing a public IP address across multiple virtual machines.
     * 
     */
    public Optional<Output<SharedPublicIpAddressConfigurationArgs>> sharedPublicIpAddressConfiguration() {
        return Optional.ofNullable(this.sharedPublicIpAddressConfiguration);
    }

    /**
     * The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
     * 
     */
    @Import(name="sshAuthority")
    private @Nullable Output<String> sshAuthority;

    /**
     * @return The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
     * 
     */
    public Optional<Output<String>> sshAuthority() {
        return Optional.ofNullable(this.sshAuthority);
    }

    /**
     * The resource ID of the sub net.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The resource ID of the sub net.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The resource ID of the virtual network.
     * 
     */
    @Import(name="virtualNetworkId")
    private @Nullable Output<String> virtualNetworkId;

    /**
     * @return The resource ID of the virtual network.
     * 
     */
    public Optional<Output<String>> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }

    private NetworkInterfacePropertiesArgs() {}

    private NetworkInterfacePropertiesArgs(NetworkInterfacePropertiesArgs $) {
        this.dnsName = $.dnsName;
        this.privateIpAddress = $.privateIpAddress;
        this.publicIpAddress = $.publicIpAddress;
        this.publicIpAddressId = $.publicIpAddressId;
        this.rdpAuthority = $.rdpAuthority;
        this.sharedPublicIpAddressConfiguration = $.sharedPublicIpAddressConfiguration;
        this.sshAuthority = $.sshAuthority;
        this.subnetId = $.subnetId;
        this.virtualNetworkId = $.virtualNetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInterfacePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInterfacePropertiesArgs $;

        public Builder() {
            $ = new NetworkInterfacePropertiesArgs();
        }

        public Builder(NetworkInterfacePropertiesArgs defaults) {
            $ = new NetworkInterfacePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsName The DNS name.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(@Nullable Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param dnsName The DNS name.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        /**
         * @param privateIpAddress The private IP address.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        /**
         * @param privateIpAddress The private IP address.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(String privateIpAddress) {
            return privateIpAddress(Output.of(privateIpAddress));
        }

        /**
         * @param publicIpAddress The public IP address.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddress(@Nullable Output<String> publicIpAddress) {
            $.publicIpAddress = publicIpAddress;
            return this;
        }

        /**
         * @param publicIpAddress The public IP address.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddress(String publicIpAddress) {
            return publicIpAddress(Output.of(publicIpAddress));
        }

        /**
         * @param publicIpAddressId The resource ID of the public IP address.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddressId(@Nullable Output<String> publicIpAddressId) {
            $.publicIpAddressId = publicIpAddressId;
            return this;
        }

        /**
         * @param publicIpAddressId The resource ID of the public IP address.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddressId(String publicIpAddressId) {
            return publicIpAddressId(Output.of(publicIpAddressId));
        }

        /**
         * @param rdpAuthority The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
         * 
         * @return builder
         * 
         */
        public Builder rdpAuthority(@Nullable Output<String> rdpAuthority) {
            $.rdpAuthority = rdpAuthority;
            return this;
        }

        /**
         * @param rdpAuthority The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
         * 
         * @return builder
         * 
         */
        public Builder rdpAuthority(String rdpAuthority) {
            return rdpAuthority(Output.of(rdpAuthority));
        }

        /**
         * @param sharedPublicIpAddressConfiguration The configuration for sharing a public IP address across multiple virtual machines.
         * 
         * @return builder
         * 
         */
        public Builder sharedPublicIpAddressConfiguration(@Nullable Output<SharedPublicIpAddressConfigurationArgs> sharedPublicIpAddressConfiguration) {
            $.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
            return this;
        }

        /**
         * @param sharedPublicIpAddressConfiguration The configuration for sharing a public IP address across multiple virtual machines.
         * 
         * @return builder
         * 
         */
        public Builder sharedPublicIpAddressConfiguration(SharedPublicIpAddressConfigurationArgs sharedPublicIpAddressConfiguration) {
            return sharedPublicIpAddressConfiguration(Output.of(sharedPublicIpAddressConfiguration));
        }

        /**
         * @param sshAuthority The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
         * 
         * @return builder
         * 
         */
        public Builder sshAuthority(@Nullable Output<String> sshAuthority) {
            $.sshAuthority = sshAuthority;
            return this;
        }

        /**
         * @param sshAuthority The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
         * 
         * @return builder
         * 
         */
        public Builder sshAuthority(String sshAuthority) {
            return sshAuthority(Output.of(sshAuthority));
        }

        /**
         * @param subnetId The resource ID of the sub net.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The resource ID of the sub net.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param virtualNetworkId The resource ID of the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(@Nullable Output<String> virtualNetworkId) {
            $.virtualNetworkId = virtualNetworkId;
            return this;
        }

        /**
         * @param virtualNetworkId The resource ID of the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(String virtualNetworkId) {
            return virtualNetworkId(Output.of(virtualNetworkId));
        }

        public NetworkInterfacePropertiesArgs build() {
            return $;
        }
    }

}
