// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.dataprotection.inputs;

import com.pulumi.azurenative.dataprotection.inputs.AdhocBasedTriggerContextResponse;
import com.pulumi.azurenative.dataprotection.inputs.AzureBackupParamsResponse;
import com.pulumi.azurenative.dataprotection.inputs.DataStoreInfoBaseResponse;
import com.pulumi.azurenative.dataprotection.inputs.ScheduleBasedTriggerContextResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Azure backup rule
 * 
 */
public final class AzureBackupRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzureBackupRuleResponse Empty = new AzureBackupRuleResponse();

    /**
     * BackupParameters base
     * 
     */
    @Import(name="backupParameters")
    private @Nullable AzureBackupParamsResponse backupParameters;

    public Optional<AzureBackupParamsResponse> backupParameters() {
        return Optional.ofNullable(this.backupParameters);
    }

    /**
     * DataStoreInfo base
     * 
     */
    @Import(name="dataStore", required=true)
    private DataStoreInfoBaseResponse dataStore;

    public DataStoreInfoBaseResponse dataStore() {
        return this.dataStore;
    }

    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Expected value is &#39;AzureBackupRule&#39;.
     * 
     */
    @Import(name="objectType", required=true)
    private String objectType;

    public String objectType() {
        return this.objectType;
    }

    /**
     * Trigger context
     * 
     */
    @Import(name="trigger", required=true)
    private Either<AdhocBasedTriggerContextResponse,ScheduleBasedTriggerContextResponse> trigger;

    public Either<AdhocBasedTriggerContextResponse,ScheduleBasedTriggerContextResponse> trigger() {
        return this.trigger;
    }

    private AzureBackupRuleResponse() {}

    private AzureBackupRuleResponse(AzureBackupRuleResponse $) {
        this.backupParameters = $.backupParameters;
        this.dataStore = $.dataStore;
        this.name = $.name;
        this.objectType = $.objectType;
        this.trigger = $.trigger;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureBackupRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureBackupRuleResponse $;

        public Builder() {
            $ = new AzureBackupRuleResponse();
        }

        public Builder(AzureBackupRuleResponse defaults) {
            $ = new AzureBackupRuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder backupParameters(@Nullable AzureBackupParamsResponse backupParameters) {
            $.backupParameters = backupParameters;
            return this;
        }

        public Builder dataStore(DataStoreInfoBaseResponse dataStore) {
            $.dataStore = dataStore;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder objectType(String objectType) {
            $.objectType = objectType;
            return this;
        }

        public Builder trigger(Either<AdhocBasedTriggerContextResponse,ScheduleBasedTriggerContextResponse> trigger) {
            $.trigger = trigger;
            return this;
        }

        public Builder trigger(AdhocBasedTriggerContextResponse trigger) {
            return trigger(Either.ofLeft(trigger));
        }

        public Builder trigger(ScheduleBasedTriggerContextResponse trigger) {
            return trigger(Either.ofRight(trigger));
        }

        public AzureBackupRuleResponse build() {
            $.dataStore = Objects.requireNonNull($.dataStore, "expected parameter 'dataStore' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.objectType = Codegen.stringProp("objectType").arg($.objectType).require();
            $.trigger = Objects.requireNonNull($.trigger, "expected parameter 'trigger' to be non-null");
            return $;
        }
    }

}
