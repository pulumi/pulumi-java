// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerservice;

import com.pulumi.azurenative.containerservice.enums.SnapshotType;
import com.pulumi.azurenative.containerservice.inputs.CreationDataArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotArgs Empty = new SnapshotArgs();

    /**
     * CreationData to be used to specify the source agent pool resource ID to create this snapshot.
     * 
     */
    @Import(name="creationData")
    private @Nullable Output<CreationDataArgs> creationData;

    public Optional<Output<CreationDataArgs>> creationData() {
        return Optional.ofNullable(this.creationData);
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the managed cluster resource.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * The type of a snapshot. The default is NodePool.
     * 
     */
    @Import(name="snapshotType")
    private @Nullable Output<Either<String,SnapshotType>> snapshotType;

    public Optional<Output<Either<String,SnapshotType>>> snapshotType() {
        return Optional.ofNullable(this.snapshotType);
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SnapshotArgs() {}

    private SnapshotArgs(SnapshotArgs $) {
        this.creationData = $.creationData;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceName = $.resourceName;
        this.snapshotType = $.snapshotType;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotArgs $;

        public Builder() {
            $ = new SnapshotArgs();
        }

        public Builder(SnapshotArgs defaults) {
            $ = new SnapshotArgs(Objects.requireNonNull(defaults));
        }

        public Builder creationData(@Nullable Output<CreationDataArgs> creationData) {
            $.creationData = creationData;
            return this;
        }

        public Builder creationData(CreationDataArgs creationData) {
            return creationData(Output.of(creationData));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        public Builder snapshotType(@Nullable Output<Either<String,SnapshotType>> snapshotType) {
            $.snapshotType = snapshotType;
            return this;
        }

        public Builder snapshotType(Either<String,SnapshotType> snapshotType) {
            return snapshotType(Output.of(snapshotType));
        }

        public Builder snapshotType(String snapshotType) {
            return snapshotType(Either.ofLeft(snapshotType));
        }

        public Builder snapshotType(SnapshotType snapshotType) {
            return snapshotType(Either.ofRight(snapshotType));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public SnapshotArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
