// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.importexport.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the return address information for the job.
 * 
 */
public final class ReturnAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReturnAddressArgs Empty = new ReturnAddressArgs();

    /**
     * The city name to use when returning the drives.
     * 
     */
    @Import(name="city", required=true)
    private Output<String> city;

    /**
     * @return The city name to use when returning the drives.
     * 
     */
    public Output<String> city() {
        return this.city;
    }

    /**
     * The country or region to use when returning the drives.
     * 
     */
    @Import(name="countryOrRegion", required=true)
    private Output<String> countryOrRegion;

    /**
     * @return The country or region to use when returning the drives.
     * 
     */
    public Output<String> countryOrRegion() {
        return this.countryOrRegion;
    }

    /**
     * Email address of the recipient of the returned drives.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return Email address of the recipient of the returned drives.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * Phone number of the recipient of the returned drives.
     * 
     */
    @Import(name="phone", required=true)
    private Output<String> phone;

    /**
     * @return Phone number of the recipient of the returned drives.
     * 
     */
    public Output<String> phone() {
        return this.phone;
    }

    /**
     * The postal code to use when returning the drives.
     * 
     */
    @Import(name="postalCode", required=true)
    private Output<String> postalCode;

    /**
     * @return The postal code to use when returning the drives.
     * 
     */
    public Output<String> postalCode() {
        return this.postalCode;
    }

    /**
     * The name of the recipient who will receive the hard drives when they are returned.
     * 
     */
    @Import(name="recipientName", required=true)
    private Output<String> recipientName;

    /**
     * @return The name of the recipient who will receive the hard drives when they are returned.
     * 
     */
    public Output<String> recipientName() {
        return this.recipientName;
    }

    /**
     * The state or province to use when returning the drives.
     * 
     */
    @Import(name="stateOrProvince")
    private @Nullable Output<String> stateOrProvince;

    /**
     * @return The state or province to use when returning the drives.
     * 
     */
    public Optional<Output<String>> stateOrProvince() {
        return Optional.ofNullable(this.stateOrProvince);
    }

    /**
     * The first line of the street address to use when returning the drives.
     * 
     */
    @Import(name="streetAddress1", required=true)
    private Output<String> streetAddress1;

    /**
     * @return The first line of the street address to use when returning the drives.
     * 
     */
    public Output<String> streetAddress1() {
        return this.streetAddress1;
    }

    /**
     * The second line of the street address to use when returning the drives.
     * 
     */
    @Import(name="streetAddress2")
    private @Nullable Output<String> streetAddress2;

    /**
     * @return The second line of the street address to use when returning the drives.
     * 
     */
    public Optional<Output<String>> streetAddress2() {
        return Optional.ofNullable(this.streetAddress2);
    }

    private ReturnAddressArgs() {}

    private ReturnAddressArgs(ReturnAddressArgs $) {
        this.city = $.city;
        this.countryOrRegion = $.countryOrRegion;
        this.email = $.email;
        this.phone = $.phone;
        this.postalCode = $.postalCode;
        this.recipientName = $.recipientName;
        this.stateOrProvince = $.stateOrProvince;
        this.streetAddress1 = $.streetAddress1;
        this.streetAddress2 = $.streetAddress2;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReturnAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReturnAddressArgs $;

        public Builder() {
            $ = new ReturnAddressArgs();
        }

        public Builder(ReturnAddressArgs defaults) {
            $ = new ReturnAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param city The city name to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder city(Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city The city name to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param countryOrRegion The country or region to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder countryOrRegion(Output<String> countryOrRegion) {
            $.countryOrRegion = countryOrRegion;
            return this;
        }

        /**
         * @param countryOrRegion The country or region to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder countryOrRegion(String countryOrRegion) {
            return countryOrRegion(Output.of(countryOrRegion));
        }

        /**
         * @param email Email address of the recipient of the returned drives.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address of the recipient of the returned drives.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param phone Phone number of the recipient of the returned drives.
         * 
         * @return builder
         * 
         */
        public Builder phone(Output<String> phone) {
            $.phone = phone;
            return this;
        }

        /**
         * @param phone Phone number of the recipient of the returned drives.
         * 
         * @return builder
         * 
         */
        public Builder phone(String phone) {
            return phone(Output.of(phone));
        }

        /**
         * @param postalCode The postal code to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder postalCode(Output<String> postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        /**
         * @param postalCode The postal code to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder postalCode(String postalCode) {
            return postalCode(Output.of(postalCode));
        }

        /**
         * @param recipientName The name of the recipient who will receive the hard drives when they are returned.
         * 
         * @return builder
         * 
         */
        public Builder recipientName(Output<String> recipientName) {
            $.recipientName = recipientName;
            return this;
        }

        /**
         * @param recipientName The name of the recipient who will receive the hard drives when they are returned.
         * 
         * @return builder
         * 
         */
        public Builder recipientName(String recipientName) {
            return recipientName(Output.of(recipientName));
        }

        /**
         * @param stateOrProvince The state or province to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder stateOrProvince(@Nullable Output<String> stateOrProvince) {
            $.stateOrProvince = stateOrProvince;
            return this;
        }

        /**
         * @param stateOrProvince The state or province to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder stateOrProvince(String stateOrProvince) {
            return stateOrProvince(Output.of(stateOrProvince));
        }

        /**
         * @param streetAddress1 The first line of the street address to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress1(Output<String> streetAddress1) {
            $.streetAddress1 = streetAddress1;
            return this;
        }

        /**
         * @param streetAddress1 The first line of the street address to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress1(String streetAddress1) {
            return streetAddress1(Output.of(streetAddress1));
        }

        /**
         * @param streetAddress2 The second line of the street address to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress2(@Nullable Output<String> streetAddress2) {
            $.streetAddress2 = streetAddress2;
            return this;
        }

        /**
         * @param streetAddress2 The second line of the street address to use when returning the drives.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress2(String streetAddress2) {
            return streetAddress2(Output.of(streetAddress2));
        }

        public ReturnAddressArgs build() {
            $.city = Objects.requireNonNull($.city, "expected parameter 'city' to be non-null");
            $.countryOrRegion = Objects.requireNonNull($.countryOrRegion, "expected parameter 'countryOrRegion' to be non-null");
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.phone = Objects.requireNonNull($.phone, "expected parameter 'phone' to be non-null");
            $.postalCode = Objects.requireNonNull($.postalCode, "expected parameter 'postalCode' to be non-null");
            $.recipientName = Objects.requireNonNull($.recipientName, "expected parameter 'recipientName' to be non-null");
            $.streetAddress1 = Objects.requireNonNull($.streetAddress1, "expected parameter 'streetAddress1' to be non-null");
            return $;
        }
    }

}
