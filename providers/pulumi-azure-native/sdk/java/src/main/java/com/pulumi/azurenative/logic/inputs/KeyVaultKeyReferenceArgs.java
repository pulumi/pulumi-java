// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.azurenative.logic.inputs.KeyVaultKeyReferenceKeyVaultArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The reference to the key vault key.
 * 
 */
public final class KeyVaultKeyReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyVaultKeyReferenceArgs Empty = new KeyVaultKeyReferenceArgs();

    /**
     * The private key name in key vault.
     * 
     */
    @Import(name="keyName", required=true)
    private Output<String> keyName;

    /**
     * @return The private key name in key vault.
     * 
     */
    public Output<String> keyName() {
        return this.keyName;
    }

    /**
     * The key vault reference.
     * 
     */
    @Import(name="keyVault", required=true)
    private Output<KeyVaultKeyReferenceKeyVaultArgs> keyVault;

    /**
     * @return The key vault reference.
     * 
     */
    public Output<KeyVaultKeyReferenceKeyVaultArgs> keyVault() {
        return this.keyVault;
    }

    /**
     * The private key version in key vault.
     * 
     */
    @Import(name="keyVersion")
    private @Nullable Output<String> keyVersion;

    /**
     * @return The private key version in key vault.
     * 
     */
    public Optional<Output<String>> keyVersion() {
        return Optional.ofNullable(this.keyVersion);
    }

    private KeyVaultKeyReferenceArgs() {}

    private KeyVaultKeyReferenceArgs(KeyVaultKeyReferenceArgs $) {
        this.keyName = $.keyName;
        this.keyVault = $.keyVault;
        this.keyVersion = $.keyVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyVaultKeyReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyVaultKeyReferenceArgs $;

        public Builder() {
            $ = new KeyVaultKeyReferenceArgs();
        }

        public Builder(KeyVaultKeyReferenceArgs defaults) {
            $ = new KeyVaultKeyReferenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyName The private key name in key vault.
         * 
         * @return builder
         * 
         */
        public Builder keyName(Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName The private key name in key vault.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param keyVault The key vault reference.
         * 
         * @return builder
         * 
         */
        public Builder keyVault(Output<KeyVaultKeyReferenceKeyVaultArgs> keyVault) {
            $.keyVault = keyVault;
            return this;
        }

        /**
         * @param keyVault The key vault reference.
         * 
         * @return builder
         * 
         */
        public Builder keyVault(KeyVaultKeyReferenceKeyVaultArgs keyVault) {
            return keyVault(Output.of(keyVault));
        }

        /**
         * @param keyVersion The private key version in key vault.
         * 
         * @return builder
         * 
         */
        public Builder keyVersion(@Nullable Output<String> keyVersion) {
            $.keyVersion = keyVersion;
            return this;
        }

        /**
         * @param keyVersion The private key version in key vault.
         * 
         * @return builder
         * 
         */
        public Builder keyVersion(String keyVersion) {
            return keyVersion(Output.of(keyVersion));
        }

        public KeyVaultKeyReferenceArgs build() {
            $.keyName = Objects.requireNonNull($.keyName, "expected parameter 'keyName' to be non-null");
            $.keyVault = Objects.requireNonNull($.keyVault, "expected parameter 'keyVault' to be non-null");
            return $;
        }
    }

}
