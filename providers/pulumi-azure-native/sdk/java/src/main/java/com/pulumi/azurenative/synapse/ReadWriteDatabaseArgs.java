// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReadWriteDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReadWriteDatabaseArgs Empty = new ReadWriteDatabaseArgs();

    /**
     * The name of the database in the Kusto pool.
     * 
     */
    @Import(name="databaseName")
      private final @Nullable Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName == null ? Codegen.empty() : this.databaseName;
    }

    /**
     * The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     */
    @Import(name="hotCachePeriod")
      private final @Nullable Output<String> hotCachePeriod;

    public Output<String> hotCachePeriod() {
        return this.hotCachePeriod == null ? Codegen.empty() : this.hotCachePeriod;
    }

    /**
     * Kind of the database
     * Expected value is 'ReadWrite'.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<String> kind;

    public Output<String> kind() {
        return this.kind;
    }

    /**
     * The name of the Kusto pool.
     * 
     */
    @Import(name="kustoPoolName", required=true)
      private final Output<String> kustoPoolName;

    public Output<String> kustoPoolName() {
        return this.kustoPoolName;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The time the data should be kept before it stops being accessible to queries in TimeSpan.
     * 
     */
    @Import(name="softDeletePeriod")
      private final @Nullable Output<String> softDeletePeriod;

    public Output<String> softDeletePeriod() {
        return this.softDeletePeriod == null ? Codegen.empty() : this.softDeletePeriod;
    }

    /**
     * The name of the workspace
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    public ReadWriteDatabaseArgs(
        @Nullable Output<String> databaseName,
        @Nullable Output<String> hotCachePeriod,
        Output<String> kind,
        Output<String> kustoPoolName,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<String> softDeletePeriod,
        Output<String> workspaceName) {
        this.databaseName = databaseName;
        this.hotCachePeriod = hotCachePeriod;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.kustoPoolName = Objects.requireNonNull(kustoPoolName, "expected parameter 'kustoPoolName' to be non-null");
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.softDeletePeriod = softDeletePeriod;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private ReadWriteDatabaseArgs() {
        this.databaseName = Codegen.empty();
        this.hotCachePeriod = Codegen.empty();
        this.kind = Codegen.empty();
        this.kustoPoolName = Codegen.empty();
        this.location = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.softDeletePeriod = Codegen.empty();
        this.workspaceName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReadWriteDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> databaseName;
        private @Nullable Output<String> hotCachePeriod;
        private Output<String> kind;
        private Output<String> kustoPoolName;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> softDeletePeriod;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(ReadWriteDatabaseArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.hotCachePeriod = defaults.hotCachePeriod;
    	      this.kind = defaults.kind;
    	      this.kustoPoolName = defaults.kustoPoolName;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.softDeletePeriod = defaults.softDeletePeriod;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            this.databaseName = databaseName;
            return this;
        }
        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = Codegen.ofNullable(databaseName);
            return this;
        }
        public Builder hotCachePeriod(@Nullable Output<String> hotCachePeriod) {
            this.hotCachePeriod = hotCachePeriod;
            return this;
        }
        public Builder hotCachePeriod(@Nullable String hotCachePeriod) {
            this.hotCachePeriod = Codegen.ofNullable(hotCachePeriod);
            return this;
        }
        public Builder kind(Output<String> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }
        public Builder kustoPoolName(Output<String> kustoPoolName) {
            this.kustoPoolName = Objects.requireNonNull(kustoPoolName);
            return this;
        }
        public Builder kustoPoolName(String kustoPoolName) {
            this.kustoPoolName = Output.of(Objects.requireNonNull(kustoPoolName));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder softDeletePeriod(@Nullable Output<String> softDeletePeriod) {
            this.softDeletePeriod = softDeletePeriod;
            return this;
        }
        public Builder softDeletePeriod(@Nullable String softDeletePeriod) {
            this.softDeletePeriod = Codegen.ofNullable(softDeletePeriod);
            return this;
        }
        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }
        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }        public ReadWriteDatabaseArgs build() {
            return new ReadWriteDatabaseArgs(databaseName, hotCachePeriod, kind, kustoPoolName, location, resourceGroupName, softDeletePeriod, workspaceName);
        }
    }
}
