// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReadWriteDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReadWriteDatabaseArgs Empty = new ReadWriteDatabaseArgs();

    /**
     * The name of the database in the Kusto pool.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return The name of the database in the Kusto pool.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     */
    @Import(name="hotCachePeriod")
    private @Nullable Output<String> hotCachePeriod;

    /**
     * @return The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     */
    public Optional<Output<String>> hotCachePeriod() {
        return Optional.ofNullable(this.hotCachePeriod);
    }

    /**
     * Kind of the database
     * Expected value is &#39;ReadWrite&#39;.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    /**
     * @return Kind of the database
     * Expected value is &#39;ReadWrite&#39;.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }

    /**
     * The name of the Kusto pool.
     * 
     */
    @Import(name="kustoPoolName", required=true)
    private Output<String> kustoPoolName;

    /**
     * @return The name of the Kusto pool.
     * 
     */
    public Output<String> kustoPoolName() {
        return this.kustoPoolName;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The time the data should be kept before it stops being accessible to queries in TimeSpan.
     * 
     */
    @Import(name="softDeletePeriod")
    private @Nullable Output<String> softDeletePeriod;

    /**
     * @return The time the data should be kept before it stops being accessible to queries in TimeSpan.
     * 
     */
    public Optional<Output<String>> softDeletePeriod() {
        return Optional.ofNullable(this.softDeletePeriod);
    }

    /**
     * The name of the workspace
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    /**
     * @return The name of the workspace
     * 
     */
    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private ReadWriteDatabaseArgs() {}

    private ReadWriteDatabaseArgs(ReadWriteDatabaseArgs $) {
        this.databaseName = $.databaseName;
        this.hotCachePeriod = $.hotCachePeriod;
        this.kind = $.kind;
        this.kustoPoolName = $.kustoPoolName;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.softDeletePeriod = $.softDeletePeriod;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReadWriteDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReadWriteDatabaseArgs $;

        public Builder() {
            $ = new ReadWriteDatabaseArgs();
        }

        public Builder(ReadWriteDatabaseArgs defaults) {
            $ = new ReadWriteDatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName The name of the database in the Kusto pool.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database in the Kusto pool.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param hotCachePeriod The time the data should be kept in cache for fast queries in TimeSpan.
         * 
         * @return builder
         * 
         */
        public Builder hotCachePeriod(@Nullable Output<String> hotCachePeriod) {
            $.hotCachePeriod = hotCachePeriod;
            return this;
        }

        /**
         * @param hotCachePeriod The time the data should be kept in cache for fast queries in TimeSpan.
         * 
         * @return builder
         * 
         */
        public Builder hotCachePeriod(String hotCachePeriod) {
            return hotCachePeriod(Output.of(hotCachePeriod));
        }

        /**
         * @param kind Kind of the database
         * Expected value is &#39;ReadWrite&#39;.
         * 
         * @return builder
         * 
         */
        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of the database
         * Expected value is &#39;ReadWrite&#39;.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param kustoPoolName The name of the Kusto pool.
         * 
         * @return builder
         * 
         */
        public Builder kustoPoolName(Output<String> kustoPoolName) {
            $.kustoPoolName = kustoPoolName;
            return this;
        }

        /**
         * @param kustoPoolName The name of the Kusto pool.
         * 
         * @return builder
         * 
         */
        public Builder kustoPoolName(String kustoPoolName) {
            return kustoPoolName(Output.of(kustoPoolName));
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param softDeletePeriod The time the data should be kept before it stops being accessible to queries in TimeSpan.
         * 
         * @return builder
         * 
         */
        public Builder softDeletePeriod(@Nullable Output<String> softDeletePeriod) {
            $.softDeletePeriod = softDeletePeriod;
            return this;
        }

        /**
         * @param softDeletePeriod The time the data should be kept before it stops being accessible to queries in TimeSpan.
         * 
         * @return builder
         * 
         */
        public Builder softDeletePeriod(String softDeletePeriod) {
            return softDeletePeriod(Output.of(softDeletePeriod));
        }

        /**
         * @param workspaceName The name of the workspace
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        /**
         * @param workspaceName The name of the workspace
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public ReadWriteDatabaseArgs build() {
            $.kind = Codegen.stringProp("kind").output().arg($.kind).require();
            $.kustoPoolName = Objects.requireNonNull($.kustoPoolName, "expected parameter 'kustoPoolName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
