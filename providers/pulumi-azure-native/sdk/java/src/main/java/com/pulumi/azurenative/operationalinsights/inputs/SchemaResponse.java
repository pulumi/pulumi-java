// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights.inputs;

import com.pulumi.azurenative.operationalinsights.inputs.ColumnResponse;
import com.pulumi.azurenative.operationalinsights.inputs.RestoredLogsResponse;
import com.pulumi.azurenative.operationalinsights.inputs.SearchResultsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Table&#39;s schema.
 * 
 */
public final class SchemaResponse extends com.pulumi.resources.InvokeArgs {

    public static final SchemaResponse Empty = new SchemaResponse();

    /**
     * Table category.
     * 
     */
    @Import(name="categories", required=true)
    private List<String> categories;

    public List<String> categories() {
        return this.categories;
    }

    /**
     * A list of table custom columns.
     * 
     */
    @Import(name="columns")
    private @Nullable List<ColumnResponse> columns;

    public Optional<List<ColumnResponse>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * Table description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Table display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Table labels.
     * 
     */
    @Import(name="labels", required=true)
    private List<String> labels;

    public List<String> labels() {
        return this.labels;
    }

    /**
     * Table name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Parameters of the restore operation that initiated this table.
     * 
     */
    @Import(name="restoredLogs", required=true)
    private RestoredLogsResponse restoredLogs;

    public RestoredLogsResponse restoredLogs() {
        return this.restoredLogs;
    }

    /**
     * Parameters of the search job that initiated this table.
     * 
     */
    @Import(name="searchResults", required=true)
    private SearchResultsResponse searchResults;

    public SearchResultsResponse searchResults() {
        return this.searchResults;
    }

    /**
     * List of solutions the table is affiliated with
     * 
     */
    @Import(name="solutions", required=true)
    private List<String> solutions;

    public List<String> solutions() {
        return this.solutions;
    }

    /**
     * Table&#39;s creator.
     * 
     */
    @Import(name="source", required=true)
    private String source;

    public String source() {
        return this.source;
    }

    /**
     * A list of table standard columns.
     * 
     */
    @Import(name="standardColumns", required=true)
    private List<ColumnResponse> standardColumns;

    public List<ColumnResponse> standardColumns() {
        return this.standardColumns;
    }

    /**
     * The subtype describes what APIs can be used to interact with the table, and what features are available against it.
     * 
     */
    @Import(name="tableSubType", required=true)
    private String tableSubType;

    public String tableSubType() {
        return this.tableSubType;
    }

    /**
     * Table&#39;s creator.
     * 
     */
    @Import(name="tableType", required=true)
    private String tableType;

    public String tableType() {
        return this.tableType;
    }

    private SchemaResponse() {}

    private SchemaResponse(SchemaResponse $) {
        this.categories = $.categories;
        this.columns = $.columns;
        this.description = $.description;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.name = $.name;
        this.restoredLogs = $.restoredLogs;
        this.searchResults = $.searchResults;
        this.solutions = $.solutions;
        this.source = $.source;
        this.standardColumns = $.standardColumns;
        this.tableSubType = $.tableSubType;
        this.tableType = $.tableType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaResponse $;

        public Builder() {
            $ = new SchemaResponse();
        }

        public Builder(SchemaResponse defaults) {
            $ = new SchemaResponse(Objects.requireNonNull(defaults));
        }

        public Builder categories(List<String> categories) {
            $.categories = categories;
            return this;
        }

        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }

        public Builder columns(@Nullable List<ColumnResponse> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(ColumnResponse... columns) {
            return columns(List.of(columns));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder labels(List<String> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder restoredLogs(RestoredLogsResponse restoredLogs) {
            $.restoredLogs = restoredLogs;
            return this;
        }

        public Builder searchResults(SearchResultsResponse searchResults) {
            $.searchResults = searchResults;
            return this;
        }

        public Builder solutions(List<String> solutions) {
            $.solutions = solutions;
            return this;
        }

        public Builder solutions(String... solutions) {
            return solutions(List.of(solutions));
        }

        public Builder source(String source) {
            $.source = source;
            return this;
        }

        public Builder standardColumns(List<ColumnResponse> standardColumns) {
            $.standardColumns = standardColumns;
            return this;
        }

        public Builder standardColumns(ColumnResponse... standardColumns) {
            return standardColumns(List.of(standardColumns));
        }

        public Builder tableSubType(String tableSubType) {
            $.tableSubType = tableSubType;
            return this;
        }

        public Builder tableType(String tableType) {
            $.tableType = tableType;
            return this;
        }

        public SchemaResponse build() {
            $.categories = Objects.requireNonNull($.categories, "expected parameter 'categories' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.restoredLogs = Objects.requireNonNull($.restoredLogs, "expected parameter 'restoredLogs' to be non-null");
            $.searchResults = Objects.requireNonNull($.searchResults, "expected parameter 'searchResults' to be non-null");
            $.solutions = Objects.requireNonNull($.solutions, "expected parameter 'solutions' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.standardColumns = Objects.requireNonNull($.standardColumns, "expected parameter 'standardColumns' to be non-null");
            $.tableSubType = Objects.requireNonNull($.tableSubType, "expected parameter 'tableSubType' to be non-null");
            $.tableType = Objects.requireNonNull($.tableType, "expected parameter 'tableType' to be non-null");
            return $;
        }
    }

}
