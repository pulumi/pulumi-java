// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.OnErrorType;
import com.pulumi.azurenative.media.enums.Priority;
import com.pulumi.azurenative.media.inputs.AudioAnalyzerPresetArgs;
import com.pulumi.azurenative.media.inputs.BuiltInStandardEncoderPresetArgs;
import com.pulumi.azurenative.media.inputs.FaceDetectorPresetArgs;
import com.pulumi.azurenative.media.inputs.StandardEncoderPresetArgs;
import com.pulumi.azurenative.media.inputs.VideoAnalyzerPresetArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
 * 
 */
public final class TransformOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputArgs Empty = new TransformOutputArgs();

    /**
     * A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
     * 
     */
    @Import(name="onError")
      private final @Nullable Output<Either<String,OnErrorType>> onError;

    public Output<Either<String,OnErrorType>> onError() {
        return this.onError == null ? Codegen.empty() : this.onError;
    }

    /**
     * Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
     * 
     */
    @Import(name="preset", required=true)
      private final Output<Object> preset;

    public Output<Object> preset() {
        return this.preset;
    }

    /**
     * Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
     * 
     */
    @Import(name="relativePriority")
      private final @Nullable Output<Either<String,Priority>> relativePriority;

    public Output<Either<String,Priority>> relativePriority() {
        return this.relativePriority == null ? Codegen.empty() : this.relativePriority;
    }

    public TransformOutputArgs(
        @Nullable Output<Either<String,OnErrorType>> onError,
        Output<Object> preset,
        @Nullable Output<Either<String,Priority>> relativePriority) {
        this.onError = onError;
        this.preset = Objects.requireNonNull(preset, "expected parameter 'preset' to be non-null");
        this.relativePriority = relativePriority;
    }

    private TransformOutputArgs() {
        this.onError = Codegen.empty();
        this.preset = Codegen.empty();
        this.relativePriority = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransformOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,OnErrorType>> onError;
        private Output<Object> preset;
        private @Nullable Output<Either<String,Priority>> relativePriority;

        public Builder() {
    	      // Empty
        }

        public Builder(TransformOutputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.onError = defaults.onError;
    	      this.preset = defaults.preset;
    	      this.relativePriority = defaults.relativePriority;
        }

        public Builder onError(@Nullable Output<Either<String,OnErrorType>> onError) {
            this.onError = onError;
            return this;
        }
        public Builder onError(@Nullable Either<String,OnErrorType> onError) {
            this.onError = Codegen.ofNullable(onError);
            return this;
        }
        public Builder preset(Output<Object> preset) {
            this.preset = Objects.requireNonNull(preset);
            return this;
        }
        public Builder preset(Object preset) {
            this.preset = Output.of(Objects.requireNonNull(preset));
            return this;
        }
        public Builder relativePriority(@Nullable Output<Either<String,Priority>> relativePriority) {
            this.relativePriority = relativePriority;
            return this;
        }
        public Builder relativePriority(@Nullable Either<String,Priority> relativePriority) {
            this.relativePriority = Codegen.ofNullable(relativePriority);
            return this;
        }        public TransformOutputArgs build() {
            return new TransformOutputArgs(onError, preset, relativePriority);
        }
    }
}
