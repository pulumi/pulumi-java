// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.inputs.RuleManagementEventDataSourceResponse;
import com.pulumi.azurenative.insights.inputs.RuleMetricDataSourceResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A rule condition based on a certain number of locations failing.
 * 
 */
public final class LocationThresholdRuleConditionResponse extends com.pulumi.resources.InvokeArgs {

    public static final LocationThresholdRuleConditionResponse Empty = new LocationThresholdRuleConditionResponse();

    /**
     * the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
     * 
     */
    @Import(name="dataSource")
    private @Nullable Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> dataSource;

    public Optional<Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse>> dataSource() {
        return Optional.ofNullable(this.dataSource);
    }

    /**
     * the number of locations that must fail to activate the alert.
     * 
     */
    @Import(name="failedLocationCount", required=true)
    private Integer failedLocationCount;

    public Integer failedLocationCount() {
        return this.failedLocationCount;
    }

    /**
     * specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
     * Expected value is &#39;Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private String odataType;

    public String odataType() {
        return this.odataType;
    }

    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
     * 
     */
    @Import(name="windowSize")
    private @Nullable String windowSize;

    public Optional<String> windowSize() {
        return Optional.ofNullable(this.windowSize);
    }

    private LocationThresholdRuleConditionResponse() {}

    private LocationThresholdRuleConditionResponse(LocationThresholdRuleConditionResponse $) {
        this.dataSource = $.dataSource;
        this.failedLocationCount = $.failedLocationCount;
        this.odataType = $.odataType;
        this.windowSize = $.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LocationThresholdRuleConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LocationThresholdRuleConditionResponse $;

        public Builder() {
            $ = new LocationThresholdRuleConditionResponse();
        }

        public Builder(LocationThresholdRuleConditionResponse defaults) {
            $ = new LocationThresholdRuleConditionResponse(Objects.requireNonNull(defaults));
        }

        public Builder dataSource(@Nullable Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        public Builder failedLocationCount(Integer failedLocationCount) {
            $.failedLocationCount = failedLocationCount;
            return this;
        }

        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder windowSize(@Nullable String windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        public LocationThresholdRuleConditionResponse build() {
            $.failedLocationCount = Objects.requireNonNull($.failedLocationCount, "expected parameter 'failedLocationCount' to be non-null");
            $.odataType = Codegen.stringProp("odataType").arg($.odataType).require();
            return $;
        }
    }

}
