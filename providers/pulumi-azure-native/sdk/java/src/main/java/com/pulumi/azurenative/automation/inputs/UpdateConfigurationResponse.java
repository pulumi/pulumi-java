// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.automation.inputs;

import com.pulumi.azurenative.automation.inputs.LinuxPropertiesResponse;
import com.pulumi.azurenative.automation.inputs.TargetPropertiesResponse;
import com.pulumi.azurenative.automation.inputs.WindowsPropertiesResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Update specific properties of the software update configuration.
 * 
 */
public final class UpdateConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final UpdateConfigurationResponse Empty = new UpdateConfigurationResponse();

    /**
     * List of azure resource Ids for azure virtual machines targeted by the software update configuration.
     * 
     */
    @Import(name="azureVirtualMachines")
      private final @Nullable List<String> azureVirtualMachines;

    public List<String> azureVirtualMachines() {
        return this.azureVirtualMachines == null ? List.of() : this.azureVirtualMachines;
    }

    /**
     * Maximum time allowed for the software update configuration run. Duration needs to be specified using the format PT[n]H[n]M[n]S as per ISO8601
     * 
     */
    @Import(name="duration")
      private final @Nullable String duration;

    public Optional<String> duration() {
        return this.duration == null ? Optional.empty() : Optional.ofNullable(this.duration);
    }

    /**
     * Linux specific update configuration.
     * 
     */
    @Import(name="linux")
      private final @Nullable LinuxPropertiesResponse linux;

    public Optional<LinuxPropertiesResponse> linux() {
        return this.linux == null ? Optional.empty() : Optional.ofNullable(this.linux);
    }

    /**
     * List of names of non-azure machines targeted by the software update configuration.
     * 
     */
    @Import(name="nonAzureComputerNames")
      private final @Nullable List<String> nonAzureComputerNames;

    public List<String> nonAzureComputerNames() {
        return this.nonAzureComputerNames == null ? List.of() : this.nonAzureComputerNames;
    }

    /**
     * operating system of target machines
     * 
     */
    @Import(name="operatingSystem", required=true)
      private final String operatingSystem;

    public String operatingSystem() {
        return this.operatingSystem;
    }

    /**
     * Group targets for the software update configuration.
     * 
     */
    @Import(name="targets")
      private final @Nullable TargetPropertiesResponse targets;

    public Optional<TargetPropertiesResponse> targets() {
        return this.targets == null ? Optional.empty() : Optional.ofNullable(this.targets);
    }

    /**
     * Windows specific update configuration.
     * 
     */
    @Import(name="windows")
      private final @Nullable WindowsPropertiesResponse windows;

    public Optional<WindowsPropertiesResponse> windows() {
        return this.windows == null ? Optional.empty() : Optional.ofNullable(this.windows);
    }

    public UpdateConfigurationResponse(
        @Nullable List<String> azureVirtualMachines,
        @Nullable String duration,
        @Nullable LinuxPropertiesResponse linux,
        @Nullable List<String> nonAzureComputerNames,
        String operatingSystem,
        @Nullable TargetPropertiesResponse targets,
        @Nullable WindowsPropertiesResponse windows) {
        this.azureVirtualMachines = azureVirtualMachines;
        this.duration = duration;
        this.linux = linux;
        this.nonAzureComputerNames = nonAzureComputerNames;
        this.operatingSystem = Objects.requireNonNull(operatingSystem, "expected parameter 'operatingSystem' to be non-null");
        this.targets = targets;
        this.windows = windows;
    }

    private UpdateConfigurationResponse() {
        this.azureVirtualMachines = List.of();
        this.duration = null;
        this.linux = null;
        this.nonAzureComputerNames = List.of();
        this.operatingSystem = null;
        this.targets = null;
        this.windows = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UpdateConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> azureVirtualMachines;
        private @Nullable String duration;
        private @Nullable LinuxPropertiesResponse linux;
        private @Nullable List<String> nonAzureComputerNames;
        private String operatingSystem;
        private @Nullable TargetPropertiesResponse targets;
        private @Nullable WindowsPropertiesResponse windows;

        public Builder() {
    	      // Empty
        }

        public Builder(UpdateConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureVirtualMachines = defaults.azureVirtualMachines;
    	      this.duration = defaults.duration;
    	      this.linux = defaults.linux;
    	      this.nonAzureComputerNames = defaults.nonAzureComputerNames;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.targets = defaults.targets;
    	      this.windows = defaults.windows;
        }

        public Builder azureVirtualMachines(@Nullable List<String> azureVirtualMachines) {
            this.azureVirtualMachines = azureVirtualMachines;
            return this;
        }
        public Builder azureVirtualMachines(String... azureVirtualMachines) {
            return azureVirtualMachines(List.of(azureVirtualMachines));
        }
        public Builder duration(@Nullable String duration) {
            this.duration = duration;
            return this;
        }
        public Builder linux(@Nullable LinuxPropertiesResponse linux) {
            this.linux = linux;
            return this;
        }
        public Builder nonAzureComputerNames(@Nullable List<String> nonAzureComputerNames) {
            this.nonAzureComputerNames = nonAzureComputerNames;
            return this;
        }
        public Builder nonAzureComputerNames(String... nonAzureComputerNames) {
            return nonAzureComputerNames(List.of(nonAzureComputerNames));
        }
        public Builder operatingSystem(String operatingSystem) {
            this.operatingSystem = Objects.requireNonNull(operatingSystem);
            return this;
        }
        public Builder targets(@Nullable TargetPropertiesResponse targets) {
            this.targets = targets;
            return this;
        }
        public Builder windows(@Nullable WindowsPropertiesResponse windows) {
            this.windows = windows;
            return this;
        }        public UpdateConfigurationResponse build() {
            return new UpdateConfigurationResponse(azureVirtualMachines, duration, linux, nonAzureComputerNames, operatingSystem, targets, windows);
        }
    }
}
