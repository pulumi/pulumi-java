// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights;

import com.pulumi.azurenative.insights.inputs.ActionListArgs;
import com.pulumi.azurenative.insights.inputs.AlertRuleAllOfConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActivityLogAlertArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActivityLogAlertArgs Empty = new ActivityLogAlertArgs();

    /**
     * The actions that will activate when the condition is met.
     * 
     */
    @Import(name="actions", required=true)
    private Output<ActionListArgs> actions;

    public Output<ActionListArgs> actions() {
        return this.actions;
    }

    /**
     * The name of the Activity Log Alert rule.
     * 
     */
    @Import(name="activityLogAlertName")
    private @Nullable Output<String> activityLogAlertName;

    public Optional<Output<String>> activityLogAlertName() {
        return Optional.ofNullable(this.activityLogAlertName);
    }

    /**
     * The condition that will cause this alert to activate.
     * 
     */
    @Import(name="condition", required=true)
    private Output<AlertRuleAllOfConditionArgs> condition;

    public Output<AlertRuleAllOfConditionArgs> condition() {
        return this.condition;
    }

    /**
     * A description of this Activity Log Alert rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Indicates whether this Activity Log Alert rule is enabled. If an Activity Log Alert rule is not enabled, then none of its actions will be activated.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The location of the resource. Since Azure Activity Log Alerts is a global service, the location of the rules should always be &#39;global&#39;.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A list of resource IDs that will be used as prefixes. The alert will only apply to Activity Log events with resource IDs that fall under one of these prefixes. This list must include at least one item.
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<String>> scopes;

    public Output<List<String>> scopes() {
        return this.scopes;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ActivityLogAlertArgs() {}

    private ActivityLogAlertArgs(ActivityLogAlertArgs $) {
        this.actions = $.actions;
        this.activityLogAlertName = $.activityLogAlertName;
        this.condition = $.condition;
        this.description = $.description;
        this.enabled = $.enabled;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.scopes = $.scopes;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActivityLogAlertArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActivityLogAlertArgs $;

        public Builder() {
            $ = new ActivityLogAlertArgs();
        }

        public Builder(ActivityLogAlertArgs defaults) {
            $ = new ActivityLogAlertArgs(Objects.requireNonNull(defaults));
        }

        public Builder actions(Output<ActionListArgs> actions) {
            $.actions = actions;
            return this;
        }

        public Builder actions(ActionListArgs actions) {
            return actions(Output.of(actions));
        }

        public Builder activityLogAlertName(@Nullable Output<String> activityLogAlertName) {
            $.activityLogAlertName = activityLogAlertName;
            return this;
        }

        public Builder activityLogAlertName(String activityLogAlertName) {
            return activityLogAlertName(Output.of(activityLogAlertName));
        }

        public Builder condition(Output<AlertRuleAllOfConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(AlertRuleAllOfConditionArgs condition) {
            return condition(Output.of(condition));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder scopes(Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ActivityLogAlertArgs build() {
            $.actions = Objects.requireNonNull($.actions, "expected parameter 'actions' to be non-null");
            $.condition = Objects.requireNonNull($.condition, "expected parameter 'condition' to be non-null");
            $.enabled = Codegen.booleanProp("enabled").output().arg($.enabled).def(true).getNullable();
            $.location = Codegen.stringProp("location").output().arg($.location).def("global").getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.scopes = Objects.requireNonNull($.scopes, "expected parameter 'scopes' to be non-null");
            return $;
        }
    }

}
